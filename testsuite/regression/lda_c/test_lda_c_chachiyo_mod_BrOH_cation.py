
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_chachiyo_mod_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_chachiyo_mod", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.644049156574376e-01, -1.644050013832812e-01, -1.644054089561166e-01, -1.644041329586259e-01, -1.644047977844958e-01, -1.644047977844958e-01, -1.096911927523804e-01, -1.096912556285196e-01, -1.096934227960130e-01, -1.096951867356770e-01, -1.096919593925425e-01, -1.096919593925425e-01, -6.525820476136775e-02, -6.523122465273042e-02, -6.458224648493144e-02, -6.478281440713493e-02, -6.454831452658005e-02, -6.454831452658005e-02, -3.680158892438058e-02, -3.705814608539070e-02, -6.896338771732310e-02, -3.212427657744690e-02, -2.811357279092879e-02, -2.811357279092878e-02, -3.497612914353106e-03, -3.661301871060035e-03, -1.454757161870956e-02, -2.108575904500512e-03, -2.297552271834162e-03, -2.297552271834162e-03, -1.215769733629571e-01, -1.215824310947574e-01, -1.215772450340262e-01, -1.215820632927552e-01, -1.215797288662005e-01, -1.215797288662005e-01, -9.327625756458563e-02, -9.347788983370989e-02, -9.312801734646688e-02, -9.330711708126073e-02, -9.345766073556497e-02, -9.345766073556497e-02, -6.206808724309858e-02, -6.403367416806441e-02, -6.019955218865708e-02, -6.111087959217033e-02, -6.233226720175280e-02, -6.233226720175284e-02, -2.644821173026944e-02, -3.686353098266577e-02, -2.527655857411356e-02, -9.273824947589455e-02, -2.880006233157498e-02, -2.880006233157498e-02, -1.647979326496419e-03, -2.064078963658043e-03, -1.597427976736253e-03, -2.001689812740349e-02, -1.821778259272758e-03, -1.821778259272759e-03, -6.218184315750868e-02, -6.204633403765724e-02, -6.209408561065773e-02, -6.213336955151436e-02, -6.211371297664509e-02, -6.211371297664509e-02, -6.153608582601599e-02, -5.800980512822073e-02, -5.906296349290116e-02, -6.007100381821103e-02, -5.956068405632690e-02, -5.956068405632690e-02, -6.516782442576645e-02, -4.114731747812705e-02, -4.468407730696154e-02, -5.037403752209862e-02, -4.747354332275171e-02, -4.747354332275171e-02, -5.614350698488423e-02, -1.413577114561283e-02, -1.741578941992990e-02, -4.959710966537045e-02, -2.311512979124699e-02, -2.311512979124698e-02, -4.761145039099751e-03, -5.763414225625328e-04, -1.186084623908155e-03, -2.231001073442790e-02, -1.707340140291746e-03, -1.707340140291743e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_chachiyo_mod_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_chachiyo_mod", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.746509506283357e-01, -1.746513623101872e-01, -1.746508954146906e-01, -1.746515896180083e-01, -1.746520353613389e-01, -1.746512678653683e-01, -1.746491532407649e-01, -1.746515884731617e-01, -1.746490008597389e-01, -1.746530755262079e-01, -1.746490008597389e-01, -1.746530755262079e-01, -1.194007520994615e-01, -1.194036211893453e-01, -1.194006126785193e-01, -1.194038888804120e-01, -1.194066256371505e-01, -1.194022964994523e-01, -1.194077356675584e-01, -1.194047844268241e-01, -1.194423226735495e-01, -1.193636568725600e-01, -1.194423226735495e-01, -1.193636568725600e-01, -7.354381310550408e-02, -7.306305221102295e-02, -7.357065168233877e-02, -7.298043571766870e-02, -7.217434646115706e-02, -7.300514244346741e-02, -7.292910855273321e-02, -7.266817394233716e-02, -6.897976141436299e-02, -7.686307938553802e-02, -6.897976141436299e-02, -7.686307938553802e-02, -4.402969340322672e-02, -4.153760298739289e-02, -4.451271904728642e-02, -4.165533593528421e-02, -7.945482245532415e-02, -7.518938563125500e-02, -3.799394847669479e-02, -3.722418250595984e-02, -2.771002171589763e-02, -6.489573577179795e-02, -2.771002171589763e-02, -6.489573577179791e-02, -4.717578563930607e-03, -4.417465580356919e-03, -4.958933347363532e-03, -4.601784298993487e-03, -1.858862653338916e-02, -1.731934128978133e-02, -2.746667224222375e-03, -2.795449483611807e-03, -2.687998402012831e-03, -4.720444977621711e-03, -2.687998402012831e-03, -4.720444977621711e-03, -1.314597449796822e-01, -1.315158151104626e-01, -1.314645388895915e-01, -1.315220909169942e-01, -1.314594990183829e-01, -1.315166127712526e-01, -1.314648130355906e-01, -1.315210699314181e-01, -1.314620250313059e-01, -1.315191241420986e-01, -1.314620250313059e-01, -1.315191241420986e-01, -1.025683879713929e-01, -1.025773556238182e-01, -1.027566019893270e-01, -1.028050131090901e-01, -1.025734451532395e-01, -1.022672839408384e-01, -1.027649017006568e-01, -1.024453225581951e-01, -1.023721731805041e-01, -1.031526543426495e-01, -1.023721731805041e-01, -1.031526543426495e-01, -6.976423469871647e-02, -7.006956004251057e-02, -7.203081685626028e-02, -7.197676621607782e-02, -7.004665490072458e-02, -6.601922491859454e-02, -7.083813503916075e-02, -6.713318884359480e-02, -6.745322442593055e-02, -7.337803934010524e-02, -6.745322442593059e-02, -7.337803934010528e-02, -3.156341171109797e-02, -3.113380861609980e-02, -4.294687042017058e-02, -4.262147496456206e-02, -3.125760132127681e-02, -2.900131209104296e-02, -1.019782984117004e-01, -1.020575612688694e-01, -3.550075486946710e-02, -3.262675503719579e-02, -3.550075486946710e-02, -3.262675503719579e-02, -2.217791791688990e-03, -2.131161267477164e-03, -2.734595523058422e-03, -2.691942137945149e-03, -2.173967658976292e-03, -2.048857114431124e-03, -2.425864874000689e-02, -2.405523560497909e-02, -2.991862669638215e-03, -2.165693514233093e-03, -2.991862669638216e-03, -2.165693514233094e-03, -7.026109973787979e-02, -6.981586050414426e-02, -7.011878318394539e-02, -6.967011703163488e-02, -7.016965394745497e-02, -6.972077526315414e-02, -7.020949454137702e-02, -6.976441155964366e-02, -7.018953641472456e-02, -6.974260006748124e-02, -7.018953641472456e-02, -6.974260006748124e-02, -6.953978939899179e-02, -6.916318260132812e-02, -6.582584372650925e-02, -6.536284982746036e-02, -6.695991146619759e-02, -6.647637852274421e-02, -6.798717243742949e-02, -6.759684666170765e-02, -6.745260053681575e-02, -6.704405551453696e-02, -6.745260053681575e-02, -6.704405551453696e-02, -7.330531088485830e-02, -7.310773617891943e-02, -4.765663281077914e-02, -4.723083576173010e-02, -5.168185004793115e-02, -5.087637712511286e-02, -5.766572704136558e-02, -5.715870787164810e-02, -5.427082116146283e-02, -5.430123933349568e-02, -5.427082116146284e-02, -5.430123933349567e-02, -6.395693781039602e-02, -6.324738985034380e-02, -1.750456008903757e-02, -1.735101116534422e-02, -2.169283908655400e-02, -2.075676120713695e-02, -5.726549510458195e-02, -5.591212864300930e-02, -2.878004934633014e-02, -2.665719900676533e-02, -2.878004934633012e-02, -2.665719900676531e-02, -6.279667752226847e-03, -6.035628709366026e-03, -7.661662162467241e-04, -7.644087500660729e-04, -1.622251813588528e-03, -1.523203695249744e-03, -2.704627321214398e-02, -2.643869435371719e-02, -2.729166105891269e-03, -2.042395027197129e-03, -2.729166105891264e-03, -2.042395027197126e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
