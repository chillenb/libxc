
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_rc04_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_rc04", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-8.252166318417990e-02, -8.252166648965188e-02, -8.252168220492087e-02, -8.252163300434756e-02, -8.252165863990757e-02, -8.252165863990757e-02, -7.688482410211565e-02, -7.688483763532508e-02, -7.688530404174072e-02, -7.688568363823058e-02, -7.688499146909540e-02, -7.688499146909540e-02, -5.728277781031949e-02, -5.726276968270704e-02, -5.677201507319251e-02, -5.692322975595557e-02, -5.689121427979533e-02, -5.689121427979533e-02, -2.995651813817628e-02, -3.024717518456671e-02, -5.998615589753618e-02, -2.487299299240525e-02, -2.695227564553988e-02, -2.695227564553988e-02, -1.585999815218692e-03, -1.667691722050440e-03, -8.449431150591661e-03, -9.232584878485177e-04, -1.156913804152454e-03, -1.156913804152454e-03, -7.902458421140758e-02, -7.902539601388532e-02, -7.902462465016385e-02, -7.902534127764468e-02, -7.902499409960213e-02, -7.902499409960213e-02, -7.230127504348229e-02, -7.237237807148349e-02, -7.224880093279860e-02, -7.231226064018621e-02, -7.236571395366616e-02, -7.236571395366616e-02, -5.479796650382799e-02, -5.634921407651989e-02, -5.330709198304027e-02, -5.405548403317667e-02, -5.510078700040377e-02, -5.510078700040377e-02, -1.898051973526186e-02, -2.998580489854831e-02, -1.786010632187371e-02, -7.210947831865447e-02, -2.143728476695654e-02, -2.143728476695654e-02, -7.141309712500005e-04, -9.027870848093938e-04, -6.920478926886214e-04, -1.290590388843877e-02, -8.323132024232802e-04, -8.323132024232802e-04, -5.488983752944596e-02, -5.478070941772917e-02, -5.481920391707067e-02, -5.485083371380339e-02, -5.483501024275823e-02, -5.483501024275823e-02, -5.436678490731266e-02, -5.138647153391313e-02, -5.229867114062405e-02, -5.315403920913722e-02, -5.272307620387001e-02, -5.272307620387001e-02, -5.721434533746683e-02, -3.463342790441856e-02, -3.841287585030614e-02, -4.424556544962979e-02, -4.131546187483335e-02, -4.131546187483335e-02, -4.972595238404679e-02, -8.121943374510479e-03, -1.069974832498655e-02, -4.347786440982458e-02, -1.577471546989970e-02, -1.577471546989970e-02, -2.221244393791875e-03, -2.432172766232892e-04, -5.089202695434696e-04, -1.498371318172012e-02, -7.707148814013902e-04, -7.707148814013895e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_rc04_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_rc04", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-8.291674320732362e-02, -8.291674546387137e-02, -8.291675619221928e-02, -8.291672260444198e-02, -8.291674010508350e-02, -8.291674010508350e-02, -7.897483332626867e-02, -7.897484307792639e-02, -7.897517915664495e-02, -7.897545268143032e-02, -7.897495392619663e-02, -7.897495392619663e-02, -6.332736902834847e-02, -6.330983307087376e-02, -6.287871292572633e-02, -6.301175794921375e-02, -6.298360465149114e-02, -6.298360465149114e-02, -3.638833149733463e-02, -3.670636029963548e-02, -6.566729398514742e-02, -3.071677856082959e-02, -3.306156147893611e-02, -3.306156147893611e-02, -2.104779155629381e-03, -2.212656635891200e-03, -1.098470161705192e-02, -1.227661465855926e-03, -1.537291407864573e-03, -1.537291407864573e-03, -8.049880456994903e-02, -8.049937600169101e-02, -8.049883303510780e-02, -8.049933747274343e-02, -8.049909309289216e-02, -8.049909309289216e-02, -7.558930222096563e-02, -7.564308843221187e-02, -7.554958226084545e-02, -7.559761494110723e-02, -7.563804903020081e-02, -7.563804903020081e-02, -6.112508005400570e-02, -6.250574422739620e-02, -5.977999967042209e-02, -6.045742994921383e-02, -6.139611343917326e-02, -6.139611343917326e-02, -2.388430903938753e-02, -3.642040689192397e-02, -2.255382606814005e-02, -7.544401702515925e-02, -2.676667140809009e-02, -2.676667140809009e-02, -9.501705910934727e-04, -1.200513188138868e-03, -9.208485249661737e-04, -1.655098372735533e-02, -1.107028611796874e-03, -1.107028611796874e-03, -6.120738491989607e-02, -6.110961234220638e-02, -6.114411210413061e-02, -6.117245066640545e-02, -6.115827470553768e-02, -6.115827470553768e-02, -6.073789306648159e-02, -5.802096490534161e-02, -5.886010315490738e-02, -5.964090685204310e-02, -5.924824426578326e-02, -5.924824426578326e-02, -6.326737870465204e-02, -4.142352586243436e-02, -4.536444866455191e-02, -5.122156627886968e-02, -4.831329261611512e-02, -4.831329261611512e-02, -5.647632975177021e-02, -1.056945181277546e-02, -1.381510273441833e-02, -5.046624116622812e-02, -2.005081988868145e-02, -2.005081988868146e-02, -2.942261541112012e-03, -3.240572820800359e-04, -6.775426561391265e-04, -1.909236101394516e-02, -1.025285602685952e-03, -1.025285602685952e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
