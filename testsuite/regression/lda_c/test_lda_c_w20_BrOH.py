
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_w20_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_w20", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.653583078093969e-01, -1.653583808107073e-01, -1.653587602455090e-01, -1.653575637406641e-01, -1.653583458584315e-01, -1.653583458584315e-01, -1.119086582600234e-01, -1.119087187421517e-01, -1.119115673716010e-01, -1.119127671042002e-01, -1.119088121327495e-01, -1.119088121327495e-01, -6.679100312388674e-02, -6.676557719129513e-02, -6.609896850474335e-02, -6.629230880637105e-02, -6.678173210346205e-02, -6.678173210346205e-02, -3.872365495392073e-02, -3.896774321883346e-02, -7.134341406423859e-02, -3.305673638094125e-02, -3.879711952701783e-02, -3.879711952701783e-02, -5.643645629476385e-03, -5.878064967655795e-03, -1.732023997932179e-02, -2.913618800289974e-03, -5.824384568227551e-03, -5.824384568227551e-03, -1.235888261456115e-01, -1.235940018906553e-01, -1.235893722715327e-01, -1.235933964684664e-01, -1.235914569155441e-01, -1.235914569155441e-01, -9.548825528239026e-02, -9.568566010596247e-02, -9.540808444339262e-02, -9.556267551781183e-02, -9.572504296859627e-02, -9.572504296859627e-02, -6.340286602851829e-02, -6.541564099236678e-02, -6.214287516841958e-02, -6.315385550738155e-02, -6.431630765941884e-02, -6.431630765941884e-02, -2.810160428953118e-02, -3.885528482763899e-02, -2.790435367345775e-02, -9.494441385913954e-02, -3.037860171995101e-02, -3.037860171995101e-02, -2.821629458774870e-03, -3.180415050635205e-03, -2.461441221607219e-03, -2.137919548902148e-02, -2.925418619689653e-03, -2.925418619689653e-03, -6.416260261689405e-02, -6.403267408159319e-02, -6.407931594838576e-02, -6.411524999519608e-02, -6.409727039006258e-02, -6.409727039006258e-02, -6.337284699724957e-02, -5.998867537732753e-02, -6.101623452037917e-02, -6.193822128611976e-02, -6.147201636622576e-02, -6.147201636622576e-02, -6.658156604492599e-02, -4.321946707415723e-02, -4.666636804326237e-02, -5.184822905979552e-02, -4.922018122307224e-02, -4.922018122307224e-02, -5.759124903929976e-02, -1.645898936330680e-02, -2.002612454918065e-02, -5.062431847312843e-02, -2.500996440738810e-02, -2.500996440738810e-02, -6.480351137673819e-03, -1.048607316357860e-03, -1.802848056710828e-03, -2.434178939495984e-02, -2.532713217604996e-03, -2.532713217604993e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_w20_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_w20", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.753832426601044e-01, -1.753833161953487e-01, -1.753836984053417e-01, -1.753824931492021e-01, -1.753832809874308e-01, -1.753832809874308e-01, -1.215149621504876e-01, -1.215150232109862e-01, -1.215178990793828e-01, -1.215191102830700e-01, -1.215151174946443e-01, -1.215151174946443e-01, -7.504403020550533e-02, -7.501711843045145e-02, -7.431124263763739e-02, -7.451603355091679e-02, -7.503421750595393e-02, -7.503421750595393e-02, -4.486381120331478e-02, -4.512992516947147e-02, -7.984820241794541e-02, -3.866594295621343e-02, -4.494391176696540e-02, -4.494391176696540e-02, -7.299911438470406e-03, -7.592811112828794e-03, -2.112535897962869e-02, -3.781920172269965e-03, -7.525836150932498e-03, -7.525836150932498e-03, -1.332901816151819e-01, -1.332953954401258e-01, -1.332907317592106e-01, -1.332947855636775e-01, -1.332928317408199e-01, -1.332928317408199e-01, -1.048582138863355e-01, -1.050597490145810e-01, -1.047763543139268e-01, -1.049341958641037e-01, -1.050999511603086e-01, -1.050999511603086e-01, -7.145026303727725e-02, -7.358704235254866e-02, -7.010994152058815e-02, -7.118554048064568e-02, -7.242064466852687e-02, -7.242064466852687e-02, -3.320893567851338e-02, -4.500732693297765e-02, -3.299078821336506e-02, -1.043027875515929e-01, -3.572173344232663e-02, -3.572173344232663e-02, -3.659276155409145e-03, -4.136235718152617e-03, -3.177637807872877e-03, -2.572016064541193e-02, -3.797636113734242e-03, -3.797636113734242e-03, -7.225743518734919e-02, -7.211944813050856e-02, -7.216898541386389e-02, -7.220714820528948e-02, -7.218805366032079e-02, -7.218805366032079e-02, -7.141835416318715e-02, -6.781368637024986e-02, -6.890974035424237e-02, -6.989204612524985e-02, -6.939547629194767e-02, -6.939547629194767e-02, -7.482232794416976e-02, -4.975529259390226e-02, -5.349164564934509e-02, -5.908576068492879e-02, -5.625214159244917e-02, -5.625214159244917e-02, -6.525136227289174e-02, -2.014073908405782e-02, -2.419601632589329e-02, -5.776702889144336e-02, -2.977982621424482e-02, -2.977982621424482e-02, -8.340573393893120e-03, -1.351545446501112e-03, -2.305315221444969e-03, -2.903564006295381e-02, -3.273024596146612e-03, -3.273024596146608e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
