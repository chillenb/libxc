
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_w20_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_w20", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.653590797404728e-01, -1.653591636146794e-01, -1.653595623846776e-01, -1.653583139445316e-01, -1.653589644073398e-01, -1.653589644073398e-01, -1.119099886059479e-01, -1.119100508028601e-01, -1.119121946025998e-01, -1.119139395284240e-01, -1.119107433577183e-01, -1.119107433577183e-01, -6.694489612777298e-02, -6.691707188444260e-02, -6.625012075199466e-02, -6.645674932269420e-02, -6.615633158774230e-02, -6.615633158774230e-02, -3.773319648380939e-02, -3.799221679584159e-02, -7.073295490361325e-02, -3.295968118366960e-02, -2.726323965085380e-02, -2.726323965085381e-02, -3.511660592974029e-03, -3.675627158922316e-03, -1.495313400885243e-02, -2.165711873546643e-03, -2.201950082182932e-03, -2.201950082182932e-03, -1.236015148088319e-01, -1.236068571563586e-01, -1.236017806784808e-01, -1.236064972031959e-01, -1.236042120425205e-01, -1.236042120425205e-01, -9.551970433020904e-02, -9.572291741962803e-02, -9.537020851589730e-02, -9.555074014992533e-02, -9.570212299181230e-02, -9.570212299181230e-02, -6.366769806531002e-02, -6.568725528016851e-02, -6.173087066378194e-02, -6.267014717456958e-02, -6.390410960882845e-02, -6.390410960882842e-02, -2.715819691498568e-02, -3.780795170104035e-02, -2.594591677114973e-02, -9.497724793060694e-02, -2.954218055591367e-02, -2.954218055591367e-02, -1.739122322370020e-03, -2.124304926307289e-03, -1.691708170942309e-03, -2.057849704909938e-02, -1.857414589372731e-03, -1.857414589372731e-03, -6.378447563690766e-02, -6.364523731830010e-02, -6.369430186978460e-02, -6.373466943454550e-02, -6.371447070367069e-02, -6.371447070367069e-02, -6.312100927862306e-02, -5.949747211833535e-02, -6.057962431309698e-02, -6.161554415005492e-02, -6.109113817085379e-02, -6.109113817085379e-02, -6.685224763322448e-02, -4.219329713263094e-02, -4.581681592639886e-02, -5.165457655905600e-02, -4.867843830430454e-02, -4.867843830430454e-02, -5.757958101615988e-02, -1.453798578473459e-02, -1.790727468313320e-02, -5.085505220779316e-02, -2.373557348780439e-02, -2.373557348780439e-02, -4.805089129601550e-03, -6.841031205817711e-04, -1.305187888179385e-03, -2.292524845859678e-02, -1.762119762402609e-03, -1.762119762402608e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_w20_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_w20", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.753837543802589e-01, -1.753842860949130e-01, -1.753836564211600e-01, -1.753845530311728e-01, -1.753850020492074e-01, -1.753840107769175e-01, -1.753816762245446e-01, -1.753848214906350e-01, -1.753812727570994e-01, -1.753865354615852e-01, -1.753812727570994e-01, -1.753865354615852e-01, -1.215144144249415e-01, -1.215181960849238e-01, -1.215142089269849e-01, -1.215185271887809e-01, -1.215213854416449e-01, -1.215156793429341e-01, -1.215222389228037e-01, -1.215183489893955e-01, -1.215689386165989e-01, -1.214652516610196e-01, -1.215689386165989e-01, -1.214652516610196e-01, -7.553019065659776e-02, -7.488728235088574e-02, -7.557486693402249e-02, -7.478558470639811e-02, -7.392133335549857e-02, -7.503247607320786e-02, -7.486520698892565e-02, -7.451623187720943e-02, -6.960286012373941e-02, -8.013484037816461e-02, -6.960286012373941e-02, -8.013484037816461e-02, -4.555504462088577e-02, -4.219575984921391e-02, -4.611141365155599e-02, -4.226068117654769e-02, -8.219074214566409e-02, -7.649262240289957e-02, -3.909016771679309e-02, -3.804916800345907e-02, -2.564599022951419e-02, -7.069806525767483e-02, -2.564599022951422e-02, -7.069806525767482e-02, -4.813719498967487e-03, -4.371824178592477e-03, -5.077335169556934e-03, -4.551370070229411e-03, -1.935843494531209e-02, -1.759749817662980e-02, -2.748695691843940e-03, -2.818597491858164e-03, -2.405968930324769e-03, -5.115636791974605e-03, -2.405968930324769e-03, -5.115636791974605e-03, -1.332662268007976e-01, -1.333397259132328e-01, -1.332706379597569e-01, -1.333460794166221e-01, -1.332658110970898e-01, -1.333406782243865e-01, -1.332711236103814e-01, -1.333448673704175e-01, -1.332682699806455e-01, -1.333431178293169e-01, -1.332682699806455e-01, -1.333431178293169e-01, -1.048843731209288e-01, -1.048962749330908e-01, -1.050656709499999e-01, -1.051299170933290e-01, -1.049413623630712e-01, -1.045350052553218e-01, -1.051346291796140e-01, -1.047104909511463e-01, -1.045619397364475e-01, -1.055977144990441e-01, -1.045619397364475e-01, -1.055977144990441e-01, -7.152821660535243e-02, -7.193678282256330e-02, -7.391115107409534e-02, -7.383885252695735e-02, -7.250656394671774e-02, -6.711708886234996e-02, -7.326683705022617e-02, -6.830952521681895e-02, -6.831400968921252e-02, -7.623643388768588e-02, -6.831400968921249e-02, -7.623643388768583e-02, -3.246075495842161e-02, -3.187686329518668e-02, -4.408585558110840e-02, -4.364707865153194e-02, -3.246907269593189e-02, -2.940065605567586e-02, -1.042837547733196e-01, -1.043889727089209e-01, -3.690704620523950e-02, -3.301320909602928e-02, -3.690704620523950e-02, -3.301320909602928e-02, -2.287582443706121e-03, -2.165056445667265e-03, -2.758950171704507e-03, -2.697922497970801e-03, -2.257622997165241e-03, -2.080865460155408e-03, -2.495973823935084e-02, -2.468081938148658e-02, -3.198610956501347e-03, -2.052810103125478e-03, -3.198610956501347e-03, -2.052810103125477e-03, -7.215534371065380e-02, -7.155956882927247e-02, -7.200972998489376e-02, -7.140935319637258e-02, -7.206200476153003e-02, -7.146134935465562e-02, -7.210232484374283e-02, -7.150675322973744e-02, -7.208211905059021e-02, -7.148406507519076e-02, -7.208211905059021e-02, -7.148406507519076e-02, -7.140382061209878e-02, -7.089981665892361e-02, -6.760124336765419e-02, -6.698118125496375e-02, -6.876997575601813e-02, -6.812254947469490e-02, -6.981096806873273e-02, -6.928844896246857e-02, -6.926453456655356e-02, -6.871756874090153e-02, -6.926453456655356e-02, -6.871756874090153e-02, -7.524126962059551e-02, -7.497705269711460e-02, -4.892952631814566e-02, -4.835652346712642e-02, -5.312089550134721e-02, -5.203842202091347e-02, -5.922003890658667e-02, -5.853980854392853e-02, -5.564670521154885e-02, -5.568754864152524e-02, -5.564670521154885e-02, -5.568754864152524e-02, -6.571890884787526e-02, -6.476827661750652e-02, -1.803761110562271e-02, -1.782414617044824e-02, -2.246954950614951e-02, -2.117975779155850e-02, -5.894339979564638e-02, -5.712740000274313e-02, -2.991890784411324e-02, -2.702428966353480e-02, -2.991890784411325e-02, -2.702428966353479e-02, -6.430766307848692e-03, -6.072601827508416e-03, -8.907323606231817e-04, -8.881985690638072e-04, -1.749588607804668e-03, -1.609221886304650e-03, -2.787840629951366e-02, -2.704839681739302e-02, -2.917458417676699e-03, -1.963499765070051e-03, -2.917458417676700e-03, -1.963499765070049e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
