
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_wigner_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_wigner", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-5.624359019568904e-02, -5.624359065912499e-02, -5.624359286244700e-02, -5.624358596439503e-02, -5.624358955856990e-02, -5.624358955856990e-02, -5.540188243166995e-02, -5.540188456923503e-02, -5.540195823759193e-02, -5.540201819391123e-02, -5.540190886717837e-02, -5.540190886717837e-02, -5.154613108729052e-02, -5.154122573239878e-02, -5.142012954113141e-02, -5.145760279256383e-02, -5.144968084900148e-02, -5.144968084900148e-02, -4.131243136627281e-02, -4.147805206785468e-02, -5.218694391150938e-02, -3.807951664976612e-02, -3.948400056184355e-02, -3.948400056184355e-02, -4.905994668723779e-03, -5.140273976363141e-03, -2.009009517521150e-02, -2.941439854374510e-03, -3.647347002688425e-03, -3.647347002688425e-03, -5.573273367561982e-02, -5.573285654378211e-02, -5.573273979616492e-02, -5.573284825938885e-02, -5.573279571338302e-02, -5.573279571338302e-02, -5.464300403480215e-02, -5.465533456532948e-02, -5.463389225273597e-02, -5.464491033755455e-02, -5.465417967162327e-02, -5.465417967162327e-02, -5.091741082777115e-02, -5.131458669376702e-02, -5.052028357918277e-02, -5.072157971567930e-02, -5.099619811955076e-02, -5.099619811955076e-02, -3.331285911818421e-02, -4.132920419679327e-02, -3.224432137109955e-02, -5.460965088702336e-02, -3.545984618336934e-02, -3.545984618336934e-02, -2.296875523951739e-03, -2.878882009772320e-03, -2.228093466722809e-03, -2.668024612500809e-02, -2.662634826582991e-03, -2.662634826582991e-03, -5.094137919504107e-02, -5.091290220662475e-02, -5.092295657873857e-02, -5.093121042723944e-02, -5.092708211477755e-02, -5.092708211477755e-02, -5.080414923992290e-02, -4.998490053753280e-02, -5.024263358614173e-02, -5.047862302167424e-02, -5.036039912726486e-02, -5.036039912726486e-02, -5.152934338902465e-02, -4.376906788540409e-02, -4.547418492139958e-02, -4.772157192247061e-02, -4.664460922895364e-02, -4.664460922895364e-02, -4.949889289155217e-02, -1.952692666522298e-02, -2.364759084652958e-02, -4.744876326107201e-02, -3.008351993657887e-02, -3.008351993657887e-02, -6.684742763664057e-03, -7.994367987074005e-04, -1.652317583371048e-03, -2.919892243554678e-02, -2.472486420886151e-03, -2.472486420886149e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_wigner_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_wigner", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-5.629898146002119e-02, -5.629898176989132e-02, -5.629898324311248e-02, -5.629897863082407e-02, -5.629898103402016e-02, -5.629898103402016e-02, -5.573199862072196e-02, -5.573200007123900e-02, -5.573205006135964e-02, -5.573209074667249e-02, -5.573201655942595e-02, -5.573201655942595e-02, -5.302769878719684e-02, -5.302414642351271e-02, -5.293636072771420e-02, -5.296354455354971e-02, -5.295779920486558e-02, -5.295779920486558e-02, -4.499809599892025e-02, -4.513789922223005e-02, -5.348931802169463e-02, -4.220421402651955e-02, -4.343314230755825e-02, -4.343314230755825e-02, -6.399101594072266e-03, -6.697566173706769e-03, -2.440181401515879e-02, -3.870793947005527e-03, -4.784519872347780e-03, -4.784519872347780e-03, -5.595586209547110e-02, -5.595594499130613e-02, -5.595586622484201e-02, -5.595593940205507e-02, -5.595590395069892e-02, -5.595590395069892e-02, -5.521363299974396e-02, -5.522210998688235e-02, -5.520736768172994e-02, -5.521494366125824e-02, -5.522131609738481e-02, -5.522131609738481e-02, -5.257007408994380e-02, -5.285970869857828e-02, -5.227861097467995e-02, -5.242658093828355e-02, -5.262767678314489e-02, -5.262767678314489e-02, -3.785955204811052e-02, -4.501226898025934e-02, -3.684876877258317e-02, -5.519069439025837e-02, -3.984969991682877e-02, -3.984969991682877e-02, -3.031326478946468e-03, -3.789535027662875e-03, -2.941456195121069e-03, -3.136736062147301e-02, -3.508286534751629e-03, -3.508286534751629e-03, -5.258760552408119e-02, -5.256677554323420e-02, -5.257413108042663e-02, -5.258016850483956e-02, -5.257714887784180e-02, -5.257714887784180e-02, -5.248713813509387e-02, -5.188272783972028e-02, -5.207372857588888e-02, -5.224792707368570e-02, -5.216074092574113e-02, -5.216074092574113e-02, -5.301554028020609e-02, -4.703852675042858e-02, -4.841282864120548e-02, -5.017170367794416e-02, -4.933628757273369e-02, -4.933628757273369e-02, -5.152042150660217e-02, -2.378276074536233e-02, -2.822570695280460e-02, -4.996137824730738e-02, -3.476352526404349e-02, -3.476352526404349e-02, -8.648937980819046e-03, -1.062139236365932e-03, -2.186957386546797e-03, -3.389394115883722e-02, -3.260525171036506e-03, -3.260525171036504e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
