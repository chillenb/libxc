
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_chachiyo_mod_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_chachiyo_mod", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.644041266858300e-01, -1.644042012986621e-01, -1.644045891095481e-01, -1.644033661914880e-01, -1.644041655748065e-01, -1.644041655748065e-01, -1.096898479061426e-01, -1.096899090472417e-01, -1.096927887178596e-01, -1.096940015264371e-01, -1.096900034553657e-01, -1.096900034553657e-01, -6.510816184746435e-02, -6.508340795239682e-02, -6.443445205109172e-02, -6.462266599692193e-02, -6.509913585968723e-02, -6.509913585968723e-02, -3.775816860365998e-02, -3.799666290777115e-02, -6.954233708697277e-02, -3.221792892109102e-02, -3.782995089157133e-02, -3.782995089157133e-02, -5.567729513608773e-03, -5.792863605644762e-03, -1.684014639075631e-02, -2.891739019896725e-03, -5.741327648855572e-03, -5.741327648855572e-03, -1.215640092387283e-01, -1.215692966346815e-01, -1.215645671447603e-01, -1.215686781513821e-01, -1.215666967571400e-01, -1.215666967571400e-01, -9.324505737441560e-02, -9.344091767915685e-02, -9.316552594685763e-02, -9.331889033721377e-02, -9.347999750480696e-02, -9.347999750480696e-02, -6.181025259992114e-02, -6.376928069906826e-02, -6.058403288732996e-02, -6.156791117308070e-02, -6.269926193715818e-02, -6.269926193715818e-02, -2.737057643132757e-02, -3.788678342018069e-02, -2.717761436713749e-02, -9.270569041469583e-02, -2.959815408202224e-02, -2.959815408202224e-02, -2.797391694157143e-03, -3.162699148026272e-03, -2.422716582205846e-03, -2.079846677666971e-02, -2.903805061634214e-03, -2.903805061634214e-03, -6.254966407331000e-02, -6.242320876706663e-02, -6.246860366903526e-02, -6.250357713099639e-02, -6.248607814280970e-02, -6.248607814280970e-02, -6.178103738115952e-02, -5.848761768766998e-02, -5.948761792741117e-02, -6.038486868105886e-02, -5.993117128393579e-02, -5.993117128393579e-02, -6.490426333433662e-02, -4.214876499561002e-02, -4.551174573169164e-02, -5.056236432522711e-02, -4.800159455517491e-02, -4.800159455517491e-02, -5.615430875640948e-02, -1.600201871974192e-02, -1.947767127292776e-02, -4.936995830334551e-02, -2.434667150431981e-02, -2.434667150431981e-02, -6.370583540960685e-03, -9.246838622143176e-04, -1.716367874437533e-03, -2.369336409231277e-02, -2.497557184423803e-03, -2.497557184423800e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_chachiyo_mod_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_chachiyo_mod", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.746503645472200e-01, -1.746504394390405e-01, -1.746508286999981e-01, -1.746496012092396e-01, -1.746504035816082e-01, -1.746504035816082e-01, -1.194008150263968e-01, -1.194008773833638e-01, -1.194038143174503e-01, -1.194050512418222e-01, -1.194009736689084e-01, -1.194009736689084e-01, -7.314306763662429e-02, -7.311683521823428e-02, -7.242887436224242e-02, -7.262844904595261e-02, -7.313350261546299e-02, -7.313350261546299e-02, -4.375776849116493e-02, -4.401745775806600e-02, -7.783108485402029e-02, -3.770422949303741e-02, -4.383593721771639e-02, -4.383593721771639e-02, -7.159177807901168e-03, -7.438953161977741e-03, -2.054475218375073e-02, -3.779927821650949e-03, -7.374966966930835e-03, -7.374966966930835e-03, -1.314746241838820e-01, -1.314799858242203e-01, -1.314751899244531e-01, -1.314793586569266e-01, -1.314773494412652e-01, -1.314773494412652e-01, -1.025406943213971e-01, -1.027426742315193e-01, -1.024586689243281e-01, -1.026168378873159e-01, -1.027829713185765e-01, -1.027829713185765e-01, -6.964217283036313e-02, -7.172323677457718e-02, -6.833740397294165e-02, -6.938443921939033e-02, -7.058709010715697e-02, -7.058709010715697e-02, -3.236689812902688e-02, -4.389782173511473e-02, -3.215342800098399e-02, -1.019843109928045e-01, -3.482529812806918e-02, -3.482529812806918e-02, -3.658841082317902e-03, -4.126903159671225e-03, -3.176570474768976e-03, -2.503750694503389e-02, -3.795403391437901e-03, -3.795403391437901e-03, -7.042814566795112e-02, -7.029377032306892e-02, -7.034201039974988e-02, -7.037917430262121e-02, -7.036057949588008e-02, -7.036057949588008e-02, -6.961110546763520e-02, -6.610286603790824e-02, -6.716935221616122e-02, -6.812532513728736e-02, -6.764204520488376e-02, -6.764204520488376e-02, -7.292697013849181e-02, -4.852816736826621e-02, -5.216805910981767e-02, -5.761275211083846e-02, -5.485543747165905e-02, -5.485543747165904e-02, -6.361019962426061e-02, -1.958326345588006e-02, -2.354641331313184e-02, -5.632966295103201e-02, -2.901078738111014e-02, -2.901078738111014e-02, -8.153936440433026e-03, -1.224814950403198e-03, -2.261093701535068e-03, -2.828236621249833e-02, -3.273084410129024e-03, -3.273084410129020e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
