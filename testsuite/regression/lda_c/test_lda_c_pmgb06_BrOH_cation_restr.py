
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_pmgb06_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_pmgb06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-4.229868754000202e-04, -4.229858043131024e-04, -4.229807120199564e-04, -4.229966546915962e-04, -4.229883479005053e-04, -4.229883479005053e-04, -2.037529413112564e-03, -2.037525817793475e-03, -2.037401908827662e-03, -2.037301061788355e-03, -2.037484949275914e-03, -2.037484949275914e-03, -7.186335966762138e-03, -7.191923408090565e-03, -7.329299903363918e-03, -7.286903128297434e-03, -7.295874452064836e-03, -7.295874452064836e-03, -1.550095047680929e-02, -1.540440881640104e-02, -6.440990572508976e-03, -1.718448243542407e-02, -1.650591915117236e-02, -1.650591915117236e-02, -3.779414791304036e-03, -3.945833203841002e-03, -1.401482722748279e-02, -2.355694824235105e-03, -2.874154275163149e-03, -2.874154275163149e-03, -1.457902007505258e-03, -1.457676953753971e-03, -1.457890796892474e-03, -1.457692128278926e-03, -1.457788375926379e-03, -1.457788375926379e-03, -3.227486646635616e-03, -3.209279337748398e-03, -3.240921497086275e-03, -3.224673795322870e-03, -3.210985961671949e-03, -3.210985961671949e-03, -7.888237253931722e-03, -7.448160671106565e-03, -8.316925897513755e-03, -8.101045565985223e-03, -7.801843023875439e-03, -7.801843023875439e-03, -1.853583058319448e-02, -1.549121174996777e-02, -1.858936344398461e-02, -3.276583668287742e-03, -1.813943183720029e-02, -1.813943183720029e-02, -1.872926898964261e-03, -2.309273043049713e-03, -1.820768255659327e-03, -1.744500753019540e-02, -2.148124846700671e-03, -2.148124846700671e-03, -7.862001931659786e-03, -7.893167695078097e-03, -7.882170648506975e-03, -7.873137512206814e-03, -7.877656211244468e-03, -7.877656211244468e-03, -8.011653329807682e-03, -8.876944137852529e-03, -8.609922246326448e-03, -8.361241883569296e-03, -8.486323269667943e-03, -8.486323269667943e-03, -7.205450673129223e-03, -1.398302260620549e-02, -1.280307774853400e-02, -1.101696522653071e-02, -1.191096942980428e-02, -1.191096942980428e-02, -9.367448914008947e-03, -1.366549532713734e-02, -1.605346906028518e-02, -1.125060430837641e-02, -1.841041039567465e-02, -1.841041039567467e-02, -5.031250402428301e-03, -6.962955520217867e-04, -1.378195529426724e-03, -1.823341290278335e-02, -2.005494743854482e-03, -2.005494743854483e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_pmgb06_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_pmgb06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.949673599782661e-04, -2.949665980134739e-04, -2.949629753874996e-04, -2.949743169099666e-04, -2.949684075063425e-04, -2.949684075063425e-04, -1.482284209943809e-03, -1.482281506815222e-03, -1.482188346390684e-03, -1.482112525142205e-03, -1.482250779970784e-03, -1.482250779970784e-03, -5.498490797183166e-03, -5.503070203312314e-03, -5.615924948028986e-03, -5.581041612240396e-03, -5.588418966740553e-03, -5.588418966740553e-03, -1.336191376226967e-02, -1.326179482955906e-02, -4.894379700590163e-03, -1.533813605759848e-02, -1.447007005130189e-02, -1.447007005130189e-02, -4.841825461695297e-03, -5.050219930146226e-03, -1.666756787319200e-02, -3.044702667969453e-03, -3.702170687538856e-03, -3.702170687538856e-03, -1.049212264590006e-03, -1.049045285651063e-03, -1.049203946836612e-03, -1.049056544378907e-03, -1.049127955358318e-03, -1.049127955358318e-03, -2.385602522751191e-03, -2.371670611141852e-03, -2.395884526360939e-03, -2.383449985427554e-03, -2.372976363920194e-03, -2.372976363920194e-03, -6.080685692770815e-03, -5.713987566195582e-03, -6.443896284880185e-03, -6.260208795271910e-03, -6.008225990522103e-03, -6.008225990522103e-03, -1.810280258823147e-02, -1.335178017799359e-02, -1.856576069684988e-02, -2.423185365346420e-03, -1.694752557269802e-02, -1.694752557269802e-02, -2.429147232017381e-03, -2.985656648618905e-03, -2.362437317402192e-03, -1.926062973136198e-02, -2.780450281442322e-03, -2.780450281442322e-03, -6.058656633805074e-03, -6.084828120805516e-03, -6.075589765941217e-03, -6.068004161565086e-03, -6.071798424775273e-03, -6.071798424775273e-03, -6.184615252166031e-03, -6.928313586671884e-03, -6.695869013594768e-03, -6.481806667615038e-03, -6.589191214086355e-03, -6.589191214086355e-03, -5.514160411755017e-03, -1.183314967428671e-02, -1.065614780977491e-02, -8.896019301226746e-03, -9.768702684266169e-03, -9.768702684266172e-03, -7.362655447085750e-03, -1.632606312524117e-02, -1.843896631855913e-02, -9.121753330131767e-03, -1.919493727817304e-02, -1.919493727817307e-02, -6.401012717878023e-03, -9.129849544108981e-04, -1.794666992926826e-03, -1.932162672745659e-02, -2.598515134600019e-03, -2.598515134600016e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
