
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_vwn_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_vwn", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.648405511596357e-01, -1.648406355698864e-01, -1.648410368878478e-01, -1.648397804730875e-01, -1.648404350965747e-01, -1.648404350965747e-01, -1.112951932848266e-01, -1.112952546387295e-01, -1.112973693418023e-01, -1.112990905789128e-01, -1.112959411137200e-01, -1.112959411137200e-01, -6.735721823152280e-02, -6.732981700677518e-02, -6.667090940806263e-02, -6.687474965969842e-02, -6.662186934584702e-02, -6.662186934584702e-02, -3.779195979342576e-02, -3.806149682767312e-02, -7.110075982719091e-02, -3.286344632227945e-02, -2.788080341110305e-02, -2.788080341110306e-02, -3.771557695796894e-03, -3.936544246249911e-03, -1.473217489310112e-02, -2.344332906714062e-03, -2.436742299270021e-03, -2.436742299270021e-03, -1.228894580203466e-01, -1.228947823559336e-01, -1.228897230502367e-01, -1.228944235448367e-01, -1.228921461738524e-01, -1.228921461738524e-01, -9.524162321555328e-02, -9.543950670522816e-02, -9.509611421444583e-02, -9.527190071121007e-02, -9.541959635428250e-02, -9.541959635428250e-02, -6.411164364033835e-02, -6.611359943717023e-02, -6.219762191430686e-02, -6.313057325214264e-02, -6.437221967238461e-02, -6.437221967238459e-02, -2.691296384611605e-02, -3.786139705419047e-02, -2.568591031011757e-02, -9.471349612297067e-02, -2.936253576236804e-02, -2.936253576236804e-02, -1.857596115468669e-03, -2.297711466415179e-03, -1.803131638707661e-03, -2.026948708604912e-02, -2.009238558051870e-03, -2.009238558051869e-03, -6.422766739430642e-02, -6.408942087436342e-02, -6.413814058003287e-02, -6.417821876339470e-02, -6.415816513711252e-02, -6.415816513711252e-02, -6.356858143918498e-02, -5.995576381696500e-02, -6.103718957651015e-02, -6.207036785943768e-02, -6.154756702793956e-02, -6.154756702793956e-02, -6.726556096927735e-02, -4.237986157976246e-02, -4.610059597906591e-02, -5.205349247427467e-02, -4.902518671374803e-02, -4.902518671374803e-02, -5.803416130447675e-02, -1.432716326902330e-02, -1.762180969891639e-02, -5.124303755588896e-02, -2.344543822802293e-02, -2.344543822802293e-02, -5.044269813739472e-03, -6.836985096089218e-04, -1.360090695887041e-03, -2.262207857598158e-02, -1.895646048003603e-03, -1.895646048003599e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_vwn_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_vwn", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.749293527894700e-01, -1.749297386111689e-01, -1.749293053496142e-01, -1.749299559459016e-01, -1.749303941591170e-01, -1.749296748743676e-01, -1.749276289962163e-01, -1.749299112588681e-01, -1.749275195782254e-01, -1.749313382913611e-01, -1.749275195782254e-01, -1.749313382913611e-01, -1.207696664166215e-01, -1.207725316712907e-01, -1.207695256361234e-01, -1.207727974582770e-01, -1.207754772614494e-01, -1.207711539258172e-01, -1.207765424339639e-01, -1.207735951567590e-01, -1.208111624187513e-01, -1.207326018719045e-01, -1.208111624187513e-01, -1.207326018719045e-01, -7.578197676841823e-02, -7.525728997116668e-02, -7.581383592474496e-02, -7.516965361925712e-02, -7.435071491442505e-02, -7.525888064247827e-02, -7.515651198324895e-02, -7.487141032479595e-02, -7.085308461105339e-02, -7.945875009003690e-02, -7.085308461105339e-02, -7.945875009003690e-02, -4.557275048098337e-02, -4.265364200417718e-02, -4.610355894745143e-02, -4.275920652470578e-02, -8.184275847378079e-02, -7.723008734413854e-02, -3.909543601830168e-02, -3.818235161526222e-02, -2.665771389457907e-02, -7.131981257772683e-02, -2.665771389457909e-02, -7.131981257772682e-02, -5.072682643314072e-03, -4.650982509343712e-03, -5.325465738174313e-03, -4.825209359856022e-03, -1.895320198042290e-02, -1.735234721706992e-02, -3.003281391789014e-03, -3.073832597555561e-03, -2.727864130961263e-03, -5.361598591740958e-03, -2.727864130961263e-03, -5.361598591740958e-03, -1.325305152956051e-01, -1.325855421132294e-01, -1.325351919234494e-01, -1.325916726419316e-01, -1.325302725144357e-01, -1.325863235142982e-01, -1.325354628542879e-01, -1.325906725774005e-01, -1.325327387432052e-01, -1.325887751830720e-01, -1.325327387432052e-01, -1.325887751830720e-01, -1.043613585131842e-01, -1.043705716885556e-01, -1.045440549428306e-01, -1.045937725931960e-01, -1.043744361728318e-01, -1.040598049245876e-01, -1.045616013855254e-01, -1.042332920895664e-01, -1.041502582864947e-01, -1.049518280207510e-01, -1.041502582864947e-01, -1.049518280207510e-01, -7.195175681460135e-02, -7.228755841506782e-02, -7.424655305671207e-02, -7.418738970718729e-02, -7.244930391470092e-02, -6.800159556516647e-02, -7.322736168244366e-02, -6.914459117499190e-02, -6.937982484073633e-02, -7.588596555727525e-02, -6.937982484073632e-02, -7.588596555727523e-02, -3.228166966358433e-02, -3.176393923779980e-02, -4.430042236004485e-02, -4.391916255638992e-02, -3.210873572206693e-02, -2.938211092590911e-02, -1.037835143495071e-01, -1.038650302807792e-01, -3.661468000822208e-02, -3.317774848617717e-02, -3.661468000822208e-02, -3.317774848617717e-02, -2.482503998338137e-03, -2.355856944408873e-03, -3.009808820859924e-03, -2.948057425751781e-03, -2.445003143006187e-03, -2.261954812764463e-03, -2.462591206962434e-02, -2.437546096785817e-02, -3.445634196992848e-03, -2.280971604692946e-03, -3.445634196992848e-03, -2.280971604692945e-03, -7.248685488422144e-02, -7.199731075998493e-02, -7.234383156529041e-02, -7.185035678331543e-02, -7.239502655609872e-02, -7.190137542301502e-02, -7.243493147093052e-02, -7.194550140143598e-02, -7.241493917616001e-02, -7.192344757872327e-02, -7.241493917616001e-02, -7.192344757872327e-02, -7.175754164136137e-02, -7.134280652928718e-02, -6.800867527960956e-02, -6.749436843091734e-02, -6.915829790522984e-02, -6.862257157207048e-02, -7.019223690878552e-02, -6.976084915581501e-02, -6.965295965675908e-02, -6.920086931945509e-02, -6.965295965675908e-02, -6.920086931945509e-02, -7.553037369938549e-02, -7.531469937437826e-02, -4.926130414808931e-02, -4.876782703308572e-02, -5.348968497819849e-02, -5.256452957915148e-02, -5.967259666396477e-02, -5.909853364987691e-02, -5.613621843327957e-02, -5.617091202021821e-02, -5.613621843327958e-02, -5.617091202021821e-02, -6.612273667626545e-02, -6.533089825618506e-02, -1.771286216725379e-02, -1.751859072689795e-02, -2.206305230852715e-02, -2.089842350861089e-02, -5.930453686075811e-02, -5.776931047976529e-02, -2.950781736499894e-02, -2.692489673077434e-02, -2.950781736499895e-02, -2.692489673077433e-02, -6.609623619921541e-03, -6.273422177311328e-03, -9.000104242448989e-04, -8.973542470083121e-04, -1.855764377972139e-03, -1.709223035584505e-03, -2.756111412162017e-02, -2.681926659320938e-02, -3.146477116309280e-03, -2.169034300600919e-03, -3.146477116309273e-03, -2.169034300600913e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
