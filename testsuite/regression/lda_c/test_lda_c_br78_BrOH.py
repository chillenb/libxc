
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_br78_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_br78", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-9.426187276782121e-02, -9.426188999470303e-02, -9.426197953331014e-02, -9.426169718007098e-02, -9.426188174665391e-02, -9.426188174665391e-02, -6.795266948904032e-02, -6.795271703361935e-02, -6.795495628044755e-02, -6.795589934066920e-02, -6.795279044724573e-02, -6.795279044724573e-02, -2.824508337652011e-02, -2.822411752322813e-02, -2.767654074379972e-02, -2.783493842498241e-02, -2.823743795303142e-02, -2.823743795303142e-02, -9.674212394048582e-03, -9.790653221003340e-03, -3.208685687267166e-02, -7.201754168055075e-03, -9.709171006187864e-03, -9.709171006187864e-03, -5.934897102004149e-04, -6.214811540790836e-04, -2.479721435830174e-03, -2.855814382872301e-04, -6.150437707804229e-04, -6.150437707804229e-04, -7.640518508029301e-02, -7.640858813701538e-02, -7.640554417343025e-02, -7.640819008770593e-02, -7.640691485315287e-02, -7.640691485315287e-02, -5.394578850103455e-02, -5.412406684518815e-02, -5.387334174349038e-02, -5.401301624177592e-02, -5.415961540971184e-02, -5.415961540971184e-02, -2.550494537423090e-02, -2.711950450732391e-02, -2.451508406598756e-02, -2.530801608684532e-02, -2.623271287664900e-02, -2.623271287664900e-02, -5.392258502976439e-03, -9.736902622545549e-03, -5.326756244338409e-03, -5.345386302660249e-02, -6.184135093392574e-03, -6.184135093392574e-03, -2.755239577673987e-04, -3.147573538609764e-04, -2.360948507420515e-04, -3.423953156364716e-03, -2.868714504334086e-04, -2.868714504334086e-04, -2.610966673758023e-02, -2.600583766840387e-02, -2.604309096495758e-02, -2.607180662094817e-02, -2.605743713016412e-02, -2.605743713016412e-02, -2.548117128766589e-02, -2.286204401114301e-02, -2.364421778480747e-02, -2.435587822551698e-02, -2.399487694354947e-02, -2.399487694354947e-02, -2.807255883347566e-02, -1.195228315226966e-02, -1.388966582915069e-02, -1.710805071285000e-02, -1.543058136554652e-02, -1.543058136554651e-02, -2.108383108430420e-02, -2.300791923766602e-03, -3.090062998462479e-03, -1.631540422979621e-02, -4.420715498305280e-03, -4.420715498305280e-03, -6.948694434015496e-04, -8.636879605890756e-05, -1.639442868799814e-04, -4.225883004937772e-03, -2.439058201459240e-04, -2.439058201459236e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_br78_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_br78", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-9.662756387309271e-02, -9.662757622236605e-02, -9.662764040903701e-02, -9.662743800103690e-02, -9.662757030966461e-02, -9.662757030966461e-02, -7.550412081817474e-02, -7.550416308163124e-02, -7.550615358226652e-02, -7.550699187305768e-02, -7.550422834064259e-02, -7.550422834064259e-02, -3.505135508541819e-02, -3.502727204905198e-02, -3.439726405740001e-02, -3.457970821671910e-02, -3.504257328067381e-02, -3.504257328067381e-02, -1.259290929832576e-02, -1.274075226275593e-02, -3.941579375465576e-02, -9.432739480412587e-03, -1.263730497626222e-02, -1.263730497626222e-02, -7.901678213824611e-04, -8.273785378147687e-04, -3.286187957607803e-03, -3.805085604513261e-04, -8.188213892338430e-04, -8.188213892338430e-04, -8.278413006266433e-02, -8.278696696064952e-02, -8.278442941787474e-02, -8.278663513780156e-02, -8.278557206664787e-02, -8.278557206664787e-02, -6.241153372419479e-02, -6.258623667946084e-02, -6.234048049615619e-02, -6.247743761907723e-02, -6.262104745814023e-02, -6.262104745814023e-02, -3.187945151227389e-02, -3.375436053725513e-02, -3.072154359073691e-02, -3.164960058124298e-02, -3.272668291687800e-02, -3.272668291687800e-02, -7.094598006703831e-03, -1.267251704839408e-02, -7.009557593194703e-03, -6.192839577383695e-02, -8.120457125046379e-03, -8.120457125046379e-03, -3.671170400374347e-04, -4.193525057474179e-04, -3.146108619768869e-04, -4.526935176593430e-03, -3.822261618454736e-04, -3.822261618454736e-04, -3.258368192376797e-02, -3.246293747596683e-02, -3.250626802709049e-02, -3.253966196936092e-02, -3.252295210946417e-02, -3.252295210946417e-02, -3.185171645529541e-02, -2.877358445386915e-02, -2.969753336975345e-02, -3.053471151116390e-02, -3.011045328718297e-02, -3.011045328718297e-02, -3.485309425520344e-02, -1.546923490911441e-02, -1.788869682778289e-02, -2.185365302843742e-02, -1.979551219641384e-02, -1.979551219641383e-02, -2.665816843753616e-02, -3.050412350854081e-03, -4.088860437826265e-03, -2.088342310875094e-02, -5.830382618633259e-03, -5.830382618633259e-03, -9.249136928152358e-04, -1.151340019548003e-04, -2.185044923321560e-04, -5.576114728199814e-03, -3.250132277340049e-04, -3.250132277340044e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
