
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_wigner_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_wigner", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-5.624358593044576e-02, -5.624358633381327e-02, -5.624358843035789e-02, -5.624358181904971e-02, -5.624358614068518e-02, -5.624358614068518e-02, -5.540183671329554e-02, -5.540183879182625e-02, -5.540193668300897e-02, -5.540197790811555e-02, -5.540184200128195e-02, -5.540184200128195e-02, -5.151827654875431e-02, -5.151368611516398e-02, -5.139163314952029e-02, -5.142737310058609e-02, -5.151660329276561e-02, -5.151660329276561e-02, -4.187525692919032e-02, -4.201751808109190e-02, -5.226901350169297e-02, -3.814694104866351e-02, -4.191822414573435e-02, -4.191822414573435e-02, -7.818651062107681e-03, -8.136159959363634e-03, -2.293327145811344e-02, -4.042360042467162e-03, -8.063492746228052e-03, -8.063492746228052e-03, -5.573244162734792e-02, -5.573256070813442e-02, -5.573245419331980e-02, -5.573254677999453e-02, -5.573250215734315e-02, -5.573250215734315e-02, -5.464108784215393e-02, -5.465308021302923e-02, -5.463619334919546e-02, -5.464561877548454e-02, -5.465546266820908e-02, -5.465546266820908e-02, -5.086275521392490e-02, -5.126304316643876e-02, -5.059481192863930e-02, -5.081089849766829e-02, -5.104850503808969e-02, -5.104850503808969e-02, -3.415418611405696e-02, -4.195215148221703e-02, -3.398012087383986e-02, -5.460761014128024e-02, -3.607870959727344e-02, -3.607870959727344e-02, -3.909505288810245e-03, -4.424130192366284e-03, -3.382357050190983e-03, -2.755538764122741e-02, -4.059353777173117e-03, -4.059353777173117e-03, -5.101773357882119e-02, -5.099157062460425e-02, -5.100097865429277e-02, -5.100821458110921e-02, -5.100459541573289e-02, -5.100459541573289e-02, -5.085653182242197e-02, -5.010308293623332e-02, -5.034312553118054e-02, -5.054996124433903e-02, -5.044636177139875e-02, -5.044636177139875e-02, -5.148032329086587e-02, -4.427776198468381e-02, -4.583544951742523e-02, -4.778652018912963e-02, -4.685086624549308e-02, -4.685086624549308e-02, -4.950132627167519e-02, -2.189745720916025e-02, -2.606469506515105e-02, -4.736379944985249e-02, -3.128959229946034e-02, -3.128959229946034e-02, -8.950040183602279e-03, -1.284404401362568e-03, -2.390925285901620e-03, -3.063216253726775e-02, -3.487592456984646e-03, -3.487592456984641e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_wigner_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_wigner", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-5.629897860812435e-02, -5.629897887783055e-02, -5.629898027965657e-02, -5.629897585909516e-02, -5.629897874869808e-02, -5.629897874869808e-02, -5.573196759696075e-02, -5.573196900741915e-02, -5.573203543478510e-02, -5.573206340943867e-02, -5.573197118530542e-02, -5.573197118530542e-02, -5.300752328870224e-02, -5.300419748238623e-02, -5.291567778220584e-02, -5.294161664062258e-02, -5.300631103002940e-02, -5.300631103002940e-02, -4.547186551580795e-02, -4.559102392598609e-02, -5.354808752874725e-02, -4.226374331587890e-02, -4.550788020859292e-02, -4.550788020859292e-02, -1.006363764753617e-02, -1.045704860392580e-02, -2.746989790610743e-02, -5.293254857561599e-03, -1.036711507141461e-02, -1.036711507141461e-02, -5.595566505766329e-02, -5.595574539867170e-02, -5.595567353563714e-02, -5.595573600169167e-02, -5.595570589584964e-02, -5.595570589584964e-02, -5.521231549523777e-02, -5.522056030008436e-02, -5.520895002257332e-02, -5.521543073051455e-02, -5.522219804555697e-02, -5.522219804555697e-02, -5.253007136854924e-02, -5.282222661696647e-02, -5.233345154580984e-02, -5.249208453636475e-02, -5.266587871770582e-02, -5.266587871770582e-02, -3.864591046488928e-02, -4.553630234818506e-02, -3.848390420005467e-02, -5.518929044165546e-02, -4.041324034758106e-02, -4.041324034758106e-02, -5.122357804394542e-03, -5.783182045821521e-03, -4.442207395802509e-03, -3.225374774371624e-02, -5.315099616466924e-03, -5.315099616466924e-03, -5.264340894732771e-02, -5.262429557283656e-02, -5.263116955055257e-02, -5.263645576945671e-02, -5.263381185925273e-02, -5.263381185925273e-02, -5.252551419789661e-02, -5.197040787423717e-02, -5.214798839889528e-02, -5.230045670603341e-02, -5.222415187355246e-02, -5.222415187355246e-02, -5.298001836370743e-02, -4.745212385101476e-02, -4.869959195261045e-02, -5.022164677343684e-02, -4.949734544093468e-02, -4.949734544093468e-02, -5.152224248290953e-02, -2.636320860359955e-02, -3.073847753766609e-02, -4.989569465515058e-02, -3.593422838952418e-02, -3.593422838952418e-02, -1.146004970658551e-02, -1.702791006061705e-03, -3.154120922840374e-03, -3.529820976383063e-02, -4.578249223753069e-03, -4.578249223753062e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
