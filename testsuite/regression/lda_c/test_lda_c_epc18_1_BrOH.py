
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_epc18_1_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_epc18_1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.694306234550442e-05, -2.694286613910284e-05, -2.694184635131680e-05, -2.694506226908670e-05, -2.694296008052833e-05, -2.694296008052833e-05, -6.302988650158599e-03, -6.302948609091572e-03, -6.301063020081862e-03, -6.300269054634986e-03, -6.302886782093234e-03, -6.302886782093234e-03, -8.487490468372723e-02, -8.462822540250949e-02, -7.833503174289309e-02, -8.012526044671957e-02, -8.478490302655545e-02, -8.478490302655545e-02, -1.675205978876122e-03, -1.743200952703542e-03, -1.340448129586016e-01, -6.373464923043878e-04, -1.695411673131048e-03, -1.695411673131048e-03, -2.910764307644129e-07, -3.345116844958025e-07, -2.246310131405510e-05, -3.213695318127837e-08, -3.241624359128800e-07, -3.241624359128800e-07, -1.867907145157761e-03, -1.866907990414189e-03, -1.867801692472777e-03, -1.867024836609533e-03, -1.867399219147633e-03, -1.867399219147633e-03, -3.657357447824044e-02, -3.579385182987607e-02, -3.689511340275058e-02, -3.627763026587207e-02, -3.564031527943882e-02, -3.564031527943882e-02, -5.645305072880320e-02, -7.224304481901556e-02, -4.814668597919007e-02, -5.471871431681685e-02, -6.322276691867591e-02, -6.322276691867591e-02, -2.526135084406349e-04, -1.711566920374034e-03, -2.430203441455200e-04, -3.881141176616615e-02, -3.906674929928393e-04, -3.906674929928393e-04, -2.885120593233687e-08, -4.306420576293510e-08, -1.813176916320958e-08, -6.085546888147127e-05, -3.257566520790235e-08, -3.257566520790235e-08, -6.203810644507647e-02, -6.105118370438045e-02, -6.140394757925907e-02, -6.167688793959561e-02, -6.154019564071420e-02, -6.154019564071420e-02, -5.624148650189123e-02, -3.645000933966171e-02, -4.166082506644499e-02, -4.690494720224016e-02, -4.418298114101522e-02, -4.418298114101523e-02, -8.285731413794506e-02, -3.414275400778717e-03, -5.739285023403326e-03, -1.209487271761181e-02, -8.327210157806880e-03, -8.327210157806877e-03, -2.654804820568092e-02, -1.784629180849157e-05, -4.427904645520962e-05, -1.017678139761059e-02, -1.350501815703735e-04, -1.350501815703735e-04, -4.685772830360386e-07, -8.837603187121091e-10, -6.058226389035602e-09, -1.172619328891932e-04, -1.999618739456970e-08, -1.999618739456961e-08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_epc18_1_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_epc18_1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [1.160945036946976e-09, 1.160928132343204e-09, 1.160840272181089e-09, 1.161117351950180e-09, 1.160936226065190e-09, 1.160936226065190e-09, 5.670655050447500e-05, 5.670587320216681e-05, 5.667398204908767e-05, 5.666055594520696e-05, 5.670482739350449e-05, 5.670482739350449e-05, -1.650222895016600e-01, -1.646060820756710e-01, -1.537592658342351e-01, -1.568881323833766e-01, -1.648705170515352e-01, -1.648705170515352e-01, -3.354772426760644e-03, -3.491117850315881e-03, -2.270474116813932e-01, -1.275335770761992e-03, -3.395288040915506e-03, -3.395288040915506e-03, -5.821529970889256e-07, -6.690235480274775e-07, -4.492700966021335e-05, -6.427390801500983e-08, -6.483250399548740e-07, -6.483250399548740e-07, 5.402862131643473e-06, 5.397179353128129e-06, 5.402262224155527e-06, 5.397843776834023e-06, 5.399972897997772e-06, 5.399972897997772e-06, 8.405732659265361e-04, 8.310598355213602e-04, 8.440523547001897e-04, 8.371396592902899e-04, 8.290115434695308e-04, 8.290115434695308e-04, -1.132601635106752e-01, -1.428768518071422e-01, -9.705343208473699e-02, -1.099060315149066e-01, -1.261769248007485e-01, -1.261769248007485e-01, -5.053286731058218e-04, -3.427682725670798e-03, -4.861347858469922e-04, 8.590710101083409e-04, -7.815775322690308e-04, -7.815775322690308e-04, -5.770241319650041e-08, -8.612841449310930e-08, -3.626353885243667e-08, -1.217168569534283e-04, -6.515133211368208e-08, -6.515133211368208e-08, -1.239381949318880e-01, -1.220658383605246e-01, -1.227358400642397e-01, -1.232536629425235e-01, -1.229943926076756e-01, -1.229943926076756e-01, -1.128519235323915e-01, -7.373918504725059e-02, -8.418313665469544e-02, -9.460229084321993e-02, -8.920710182324317e-02, -8.920710182324318e-02, -1.615976239636262e-01, -6.846107825970911e-03, -1.152609150288095e-02, -2.437571998408514e-02, -1.674959862045354e-02, -1.674959862045353e-02, -5.372300021132067e-02, -3.569309304405016e-05, -8.856122752465601e-05, -2.049055646117705e-02, -2.701294767375759e-04, -2.701294767375760e-04, -9.371549173727050e-07, -1.767520638673870e-09, -1.211645283679457e-08, -2.345458217847216e-04, -3.999237542889519e-08, -3.999237542889502e-08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
