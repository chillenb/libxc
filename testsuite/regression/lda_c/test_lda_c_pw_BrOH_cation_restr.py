
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_pw_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_pw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.646005790298003e-01, -1.646006638479634e-01, -1.646010671037655e-01, -1.645998046284074e-01, -1.646004624244909e-01, -1.646004624244909e-01, -1.107863943172288e-01, -1.107864558641111e-01, -1.107885770793571e-01, -1.107903035880350e-01, -1.107871554840384e-01, -1.107871554840384e-01, -6.701433813354903e-02, -6.698766436077462e-02, -6.633810673910993e-02, -6.653730228236412e-02, -6.649505831511608e-02, -6.649505831511608e-02, -3.788468615506426e-02, -3.816454390740375e-02, -7.077026134652131e-02, -3.294743671795087e-02, -3.497998458600363e-02, -3.497998458600363e-02, -3.783212698754508e-03, -3.950262216855471e-03, -1.476390765476514e-02, -2.356425957055028e-03, -2.875605189897818e-03, -2.875605189897818e-03, -1.224269096091191e-01, -1.224322593981899e-01, -1.224271760793167e-01, -1.224318986567447e-01, -1.224296106629126e-01, -1.224296106629126e-01, -9.471409660098920e-02, -9.491176806352432e-02, -9.456895893468426e-02, -9.474456126927767e-02, -9.489319172099715e-02, -9.489319172099715e-02, -6.381004578405516e-02, -6.578552456553494e-02, -6.198115893707763e-02, -6.289123321158707e-02, -6.418957210681181e-02, -6.418957210681181e-02, -2.699432973200030e-02, -3.791289046638886e-02, -2.581456407787729e-02, -9.418662627081929e-02, -2.952058411314423e-02, -2.952058411314423e-02, -1.873262684533397e-03, -2.309956102497022e-03, -1.821073600072403e-03, -2.031143328390536e-02, -2.148658734063699e-03, -2.148658734063699e-03, -6.392488792584053e-02, -6.378850270566128e-02, -6.383657027377532e-02, -6.387610001176725e-02, -6.385632058541590e-02, -6.385632058541590e-02, -6.327447495644473e-02, -5.971267277420849e-02, -6.077864025290837e-02, -6.179693544313904e-02, -6.128153196763170e-02, -6.128153196763170e-02, -6.692317041474125e-02, -4.238705188938243e-02, -4.606346680099346e-02, -5.192859886080499e-02, -4.894375471190776e-02, -4.894375471190776e-02, -5.782038541859819e-02, -1.432390202555162e-02, -1.765670491051344e-02, -5.113755166286921e-02, -2.356179453227854e-02, -2.356179453227854e-02, -5.041936668925869e-03, -6.963085947740502e-04, -1.378316161813226e-03, -2.268492917855108e-02, -2.005917704236259e-03, -2.005917704236262e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_pw_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_pw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.747382873932689e-01, -1.747383727047485e-01, -1.747387783059391e-01, -1.747375084877817e-01, -1.747381701097621e-01, -1.747381701097621e-01, -1.202914147432737e-01, -1.202914775447518e-01, -1.202936419986544e-01, -1.202954036988508e-01, -1.202921914258883e-01, -1.202921914258883e-01, -7.507496329060677e-02, -7.504699115873793e-02, -7.436562585009246e-02, -7.457461456452077e-02, -7.453029661423682e-02, -7.453029661423682e-02, -4.407892597772828e-02, -4.438241877552512e-02, -7.900767619048780e-02, -3.869588839947701e-02, -4.091894117654680e-02, -4.091894117654680e-02, -4.849423706037646e-03, -5.059081102978708e-03, -1.814957943845339e-02, -3.046165085395549e-03, -3.705072997925377e-03, -3.705072997925377e-03, -1.321412071134296e-01, -1.321466411336032e-01, -1.321414777793748e-01, -1.321462747126927e-01, -1.321439506959152e-01, -1.321439506959152e-01, -1.038281346471248e-01, -1.040314586538446e-01, -1.036788320534475e-01, -1.038594719679676e-01, -1.040123520846880e-01, -1.040123520846880e-01, -7.171024127673239e-02, -7.378569554486339e-02, -6.978565937809122e-02, -7.074373513729722e-02, -7.210924502370675e-02, -7.210924502370675e-02, -3.211639957987510e-02, -4.410951951195739e-02, -3.079831978749472e-02, -1.032854683265948e-01, -3.492214764351328e-02, -3.492214764351328e-02, -2.429818844145475e-03, -2.987022902888130e-03, -2.363048041160171e-03, -2.457415835517307e-02, -2.781518145603630e-03, -2.781518145603630e-03, -7.183099084195924e-02, -7.168758870763797e-02, -7.173813122961308e-02, -7.177969475453568e-02, -7.175889786192094e-02, -7.175889786192094e-02, -7.114696342408418e-02, -6.739415203310668e-02, -6.851853363072150e-02, -6.959162590361831e-02, -6.904860886416334e-02, -6.904860886416334e-02, -7.497935539932155e-02, -4.894347882857779e-02, -5.289044257816196e-02, -5.914877095673511e-02, -5.596925273669997e-02, -5.596925273669997e-02, -6.539545717536101e-02, -1.763258524887661e-02, -2.152054188244263e-02, -5.830716647999087e-02, -2.826627561701371e-02, -2.826627561701371e-02, -6.422399078254062e-03, -9.130110400835217e-04, -1.794908265009489e-03, -2.727495742906275e-02, -2.599361115804954e-03, -2.599361115804955e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
