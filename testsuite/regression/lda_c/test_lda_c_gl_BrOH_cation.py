
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_gl_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_gl", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.954925023072702e-01, -1.954925948948227e-01, -1.954930350908271e-01, -1.954916569588409e-01, -1.954923749987621e-01, -1.954923749987621e-01, -1.355605472508348e-01, -1.355606178094705e-01, -1.355630497685408e-01, -1.355650292267466e-01, -1.355614074894052e-01, -1.355614074894052e-01, -8.318864583811621e-02, -8.315469343335408e-02, -8.233576511566039e-02, -8.258882409509960e-02, -8.232295039853141e-02, -8.232295039853141e-02, -4.537314565366362e-02, -4.573202008670895e-02, -8.783259130975639e-02, -3.889100117137457e-02, -3.609686078168645e-02, -3.609686078168645e-02, -3.293218599828646e-03, -3.455872694086740e-03, -1.559378116683508e-02, -1.946046544036916e-03, -2.258624689735896e-03, -2.258624689735896e-03, -1.487981084970860e-01, -1.488041460373889e-01, -1.487984090266340e-01, -1.488037391670132e-01, -1.488011567375379e-01, -1.488011567375379e-01, -1.168848289516433e-01, -1.171178548402574e-01, -1.167134466899036e-01, -1.169205057561553e-01, -1.170945145968542e-01, -1.170945145968542e-01, -7.914253818863297e-02, -8.164143410413623e-02, -7.675912730199262e-02, -7.792676797591218e-02, -7.949913108227460e-02, -7.949913108227458e-02, -3.109552566722514e-02, -4.544488295020086e-02, -2.952606956973711e-02, -1.162625397685139e-01, -3.433796560002025e-02, -3.433796560002025e-02, -1.511496689448065e-03, -1.903764744979086e-03, -1.464661725446329e-03, -2.250709855956358e-02, -1.710182036703474e-03, -1.710182036703474e-03, -7.928775015943570e-02, -7.911483555571241e-02, -7.917577962995494e-02, -7.922590602031743e-02, -7.920082513864997e-02, -7.920082513864997e-02, -7.846286403884471e-02, -7.392100621730117e-02, -7.528420936668900e-02, -7.658358206794333e-02, -7.592641127944437e-02, -7.592641127944437e-02, -8.307461761471741e-02, -5.135135488318815e-02, -5.618999545115520e-02, -6.386645471019739e-02, -5.997082621916090e-02, -5.997082621916090e-02, -7.149141619352962e-02, -1.507860965029961e-02, -1.916474837413491e-02, -6.282878188659791e-02, -2.661921181381057e-02, -2.661921181381058e-02, -4.556911159175311e-03, -5.203756910620992e-04, -1.081252213064624e-03, -2.552740397192397e-02, -1.593721137686359e-03, -1.593721137693180e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_gl_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_gl", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.065586495184024e-01, -2.065591091520206e-01, -2.065585844856894e-01, -2.065593595482184e-01, -2.065598411033044e-01, -2.065589842112335e-01, -2.065566737070806e-01, -2.065593925902484e-01, -2.065564773027768e-01, -2.065610265772469e-01, -2.065564773027768e-01, -2.065610265772469e-01, -1.464564608576920e-01, -1.464596995475604e-01, -1.464563020745359e-01, -1.464600003210975e-01, -1.464630413124867e-01, -1.464581544907835e-01, -1.464642550075040e-01, -1.464609235855726e-01, -1.465033692799049e-01, -1.464145696567865e-01, -1.465033692799049e-01, -1.464145696567865e-01, -9.359491535076293e-02, -9.306267904754105e-02, -9.362132498503267e-02, -9.296794402660363e-02, -9.199501986055038e-02, -9.291372377062898e-02, -9.285505634266375e-02, -9.256641124138575e-02, -8.848271448899467e-02, -9.719325561968434e-02, -8.848271448899467e-02, -9.719325561968434e-02, -5.484402757748944e-02, -5.238885422742058e-02, -5.543618981406494e-02, -5.261555431852595e-02, -1.005789897289372e-01, -9.583217777482421e-02, -4.682982691860399e-02, -4.610206122327512e-02, -3.835242103197706e-02, -7.046889054082797e-02, -3.835242103197708e-02, -7.046889054082796e-02, -4.428241687264359e-03, -4.257594881466889e-03, -4.658878979570708e-03, -4.455008203090068e-03, -2.020652034763824e-02, -1.927708283411734e-02, -2.561919485478761e-03, -2.588725190699029e-03, -2.817976244544598e-03, -3.853911481840099e-03, -2.817976244544598e-03, -3.853911481840099e-03, -1.597302544856093e-01, -1.597934286365686e-01, -1.597354824377062e-01, -1.598003261729283e-01, -1.597299687282254e-01, -1.597943187236350e-01, -1.597358030057647e-01, -1.597991875237090e-01, -1.597327359021265e-01, -1.597970693701292e-01, -1.597327359021265e-01, -1.597970693701292e-01, -1.276262487736003e-01, -1.276363741291762e-01, -1.278394628196018e-01, -1.278941250770555e-01, -1.276313849918081e-01, -1.272857059264333e-01, -1.278482460862312e-01, -1.274874088878752e-01, -1.274053338261832e-01, -1.282865891779882e-01, -1.274053338261832e-01, -1.282865891779882e-01, -8.899173649727103e-02, -8.932780417537949e-02, -9.176499634973234e-02, -9.170528305974618e-02, -8.901627350591239e-02, -8.460169473670670e-02, -9.003211953512698e-02, -8.596283864453205e-02, -8.650082989783200e-02, -9.302279649903619e-02, -8.650082989783198e-02, -9.302279649903615e-02, -3.795249453998839e-02, -3.757132674998195e-02, -5.379044250855480e-02, -5.346968466990540e-02, -3.703926928702265e-02, -3.506771383937717e-02, -1.269576898288665e-01, -1.270471789106974e-01, -4.281970996985054e-02, -4.019695282436448e-02, -4.281970996985054e-02, -4.019695282436448e-02, -2.028219811501864e-03, -1.981176662219425e-03, -2.531418446994887e-03, -2.508006423982999e-03, -1.978424571819287e-03, -1.910599867638162e-03, -2.798604952113569e-02, -2.782159433541828e-02, -2.581169843545388e-03, -2.141102739143250e-03, -2.581169843545388e-03, -2.141102739143250e-03, -8.955541259578356e-02, -8.906523323051169e-02, -8.937881954615153e-02, -8.888500059910219e-02, -8.944185372074913e-02, -8.894775376856771e-02, -8.949148726682871e-02, -8.900152707541750e-02, -8.946662779516412e-02, -8.897464661392930e-02, -8.946662779516412e-02, -8.897464661392930e-02, -8.866551261324755e-02, -8.825143368556986e-02, -8.401119454828108e-02, -8.350623350119839e-02, -8.543618584267437e-02, -8.490745454789198e-02, -8.673015749016569e-02, -8.630234697660120e-02, -8.605994885221865e-02, -8.561269111664105e-02, -8.605994885221865e-02, -8.561269111664105e-02, -9.331963623791274e-02, -9.310093908202365e-02, -6.021650632133604e-02, -5.978386036722668e-02, -6.558494227307307e-02, -6.474954082157387e-02, -7.353930648078491e-02, -7.299959729583275e-02, -6.914976601246579e-02, -6.918175080355025e-02, -6.914976601246581e-02, -6.918175080355025e-02, -8.162250099757139e-02, -8.085250358435168e-02, -1.914050651432150e-02, -1.902896256346735e-02, -2.435183932807657e-02, -2.362813046346683e-02, -7.291022463549572e-02, -7.147408848498528e-02, -3.363075417881808e-02, -3.183067281231018e-02, -3.363075417881810e-02, -3.183067281231018e-02, -6.046339583168255e-03, -5.903059100405411e-03, -6.928642330911959e-04, -6.919347442768621e-04, -1.464508847686786e-03, -1.411370299805225e-03, -3.166673707982381e-02, -3.115756248931108e-02, -2.367759004272665e-03, -2.001248689735234e-03, -2.367759004277593e-03, -2.001248689732580e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
