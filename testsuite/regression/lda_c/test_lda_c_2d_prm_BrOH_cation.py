
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_2d_prm_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_2d_prm", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.150038465832281e-01, -1.150038471482751e-01, -1.150038498346839e-01, -1.150038414241608e-01, -1.150038458064305e-01, -1.150038458064305e-01, -1.131100066990836e-01, -1.131100131682330e-01, -1.131102361147143e-01, -1.131104175577270e-01, -1.131100867032941e-01, -1.131100867032941e-01, -9.469080715723077e-02, -9.466252249302737e-02, -9.396269577606456e-02, -9.417957276106334e-02, -9.413374731836778e-02, -9.413374731836778e-02, -4.252093551043796e-02, -4.313650392181595e-02, -9.833306814583224e-02, -3.201741726195448e-02, -3.624124642179111e-02, -3.624124642179111e-02, -4.276849261652455e-04, -4.617000725543600e-04, -5.721136510924246e-03, -1.880836639610131e-04, -2.647635678360966e-04, -2.647635678360966e-04, -1.140237974209434e-01, -1.140241019125050e-01, -1.140238125895253e-01, -1.140240813830199e-01, -1.140239511662552e-01, -1.140239511662552e-01, -1.104317754668051e-01, -1.104807327320193e-01, -1.103954948668490e-01, -1.104393547716334e-01, -1.104761541591227e-01, -1.104761541591227e-01, -9.103080052341771e-02, -9.335044755724665e-02, -8.869443253238739e-02, -8.988020758314275e-02, -9.149261502274027e-02, -9.149261502274027e-02, -2.088884774708647e-02, -4.258291042969573e-02, -1.895219982728684e-02, -1.102985485099368e-01, -2.535176944420104e-02, -2.535176944420104e-02, -1.275349404862821e-04, -1.818058249722491e-04, -1.216233265570040e-04, -1.125189345318392e-02, -1.607640347709104e-04, -1.607640347709104e-04, -9.117136603886214e-02, -9.100435219042274e-02, -9.106332984169666e-02, -9.111173768597308e-02, -9.108752654905455e-02, -9.108752654905455e-02, -9.036576603030595e-02, -8.553432784477723e-02, -8.705595932445645e-02, -8.844874369848645e-02, -8.775117276425717e-02, -8.775117276425717e-02, -9.459398669188375e-02, -5.250296498585210e-02, -6.053656195654024e-02, -7.244291844445985e-02, -6.656423038351791e-02, -6.656423038351791e-02, -8.267099738888549e-02, -5.373423904330470e-03, -8.333532559572886e-03, -7.092643420616211e-02, -1.553058537475551e-02, -1.553058537475551e-02, -7.153467775119070e-04, -2.515855100076181e-05, -7.647745034323022e-05, -1.429922629651307e-02, -1.431150478139477e-04, -1.431150478139475e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_2d_prm_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_2d_prm", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.150713828438161e-01, -1.150713828438161e-01, -1.150713831269318e-01, -1.150713831269318e-01, -1.150713844728395e-01, -1.150713844728395e-01, -1.150713802591256e-01, -1.150713802591256e-01, -1.150713824546822e-01, -1.150713824546822e-01, -1.150713824546822e-01, -1.150713824546822e-01, -1.141090742001534e-01, -1.141090742001534e-01, -1.141090775338054e-01, -1.141090775338054e-01, -1.141091924213411e-01, -1.141091924213411e-01, -1.141092859212579e-01, -1.141092859212579e-01, -1.141091154275246e-01, -1.141091154275246e-01, -1.141091154275246e-01, -1.141091154275246e-01, -1.032328650292699e-01, -1.032328650292699e-01, -1.032139387271366e-01, -1.032139387271366e-01, -1.027434185764105e-01, -1.027434185764105e-01, -1.028896940333100e-01, -1.028896940333100e-01, -1.028588209815986e-01, -1.028588209815986e-01, -1.028588209815986e-01, -1.028588209815986e-01, -5.613029502961846e-02, -5.613029502961846e-02, -5.682808583909568e-02, -5.682808583909568e-02, -1.056115479279046e-01, -1.056115479279046e-01, -4.371117124679919e-02, -4.371117124679919e-02, -4.882139982632229e-02, -4.882139982632229e-02, -4.882139982632229e-02, -4.882139982632229e-02, -6.407699962346063e-04, -6.407699962346063e-04, -6.916674334429512e-04, -6.916674334429512e-04, -8.445798330694629e-03, -8.445798330694629e-03, -2.819790352274202e-04, -2.819790352274202e-04, -3.968551146997623e-04, -3.968551146997623e-04, -3.968551146997623e-04, -3.968551146997623e-04, -1.145767790125451e-01, -1.145767790125451e-01, -1.145769338031485e-01, -1.145769338031485e-01, -1.145767867236272e-01, -1.145767867236272e-01, -1.145769233668521e-01, -1.145769233668521e-01, -1.145768571702363e-01, -1.145768571702363e-01, -1.145768571702363e-01, -1.145768571702363e-01, -1.127011237037575e-01, -1.127011237037575e-01, -1.127273653988405e-01, -1.127273653988405e-01, -1.126816645974344e-01, -1.126816645974344e-01, -1.127051875472291e-01, -1.127051875472291e-01, -1.127249120328246e-01, -1.127249120328246e-01, -1.127249120328246e-01, -1.127249120328246e-01, -1.007252033740213e-01, -1.007252033740213e-01, -1.023282436037081e-01, -1.023282436037081e-01, -9.906232378072848e-02, -9.906232378072848e-02, -9.991235589514541e-02, -9.991235589514541e-02, -1.010481495155702e-01, -1.010481495155702e-01, -1.010481495155702e-01, -1.010481495155702e-01, -2.950711339383965e-02, -2.950711339383965e-02, -5.620069932476211e-02, -5.620069932476211e-02, -2.692656995522478e-02, -2.692656995522478e-02, -1.126296161641824e-01, -1.126296161641824e-01, -3.533159133841871e-02, -3.533159133841871e-02, -3.533159133841871e-02, -3.533159133841871e-02, -1.912350722025016e-04, -1.912350722025016e-04, -2.725718911279741e-04, -2.725718911279741e-04, -1.823737494865098e-04, -1.823737494865098e-04, -1.635063290379988e-02, -1.635063290379988e-02, -2.410390504792198e-04, -2.410390504792198e-04, -2.410390504792198e-04, -2.410390504792198e-04, -1.008237009662799e-01, -1.008237009662799e-01, -1.007066507932292e-01, -1.007066507932292e-01, -1.007480130372034e-01, -1.007480130372034e-01, -1.007819393838423e-01, -1.007819393838423e-01, -1.007649737542219e-01, -1.007649737542219e-01, -1.007649737542219e-01, -1.007649737542219e-01, -1.002568187548777e-01, -1.002568187548777e-01, -9.673563919946730e-02, -9.673563919946730e-02, -9.786712181561172e-02, -9.786712181561172e-02, -9.888463178243663e-02, -9.888463178243663e-02, -9.837718291182559e-02, -9.837718291182559e-02, -9.837718291182559e-02, -9.837718291182559e-02, -1.031680497611668e-01, -1.031680497611668e-01, -6.703167613262850e-02, -6.703167613262850e-02, -7.516020593263539e-02, -7.516020593263539e-02, -8.613994462250432e-02, -8.613994462250432e-02, -8.087854744364950e-02, -8.087854744364950e-02, -8.087854744364950e-02, -8.087854744364950e-02, -9.455013721771756e-02, -9.455013721771756e-02, -7.940269122988383e-03, -7.940269122988383e-03, -1.221154579278457e-02, -1.221154579278457e-02, -8.481256859234046e-02, -8.481256859234046e-02, -2.228923647767079e-02, -2.228923647767079e-02, -2.228923647767079e-02, -2.228923647767079e-02, -1.070900966076025e-03, -1.070900966076025e-03, -3.773520618770781e-05, -3.773520618770781e-05, -1.146919618542584e-04, -1.146919618542584e-04, -2.059604254179858e-02, -2.059604254179858e-02, -2.145877749367995e-04, -2.145877749367995e-04, -2.145877749367993e-04, -2.145877749367993e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
