
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_karasiev_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_karasiev", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.644269255101717e-01, -1.644270111764315e-01, -1.644274184643700e-01, -1.644261433654783e-01, -1.644268077389237e-01, -1.644268077389237e-01, -1.098118261102733e-01, -1.098118887641707e-01, -1.098140481328444e-01, -1.098158056956902e-01, -1.098126009678496e-01, -1.098126009678496e-01, -6.566083063342348e-02, -6.563445445556632e-02, -6.499245621137174e-02, -6.518926957304039e-02, -6.514752605676798e-02, -6.514752605676798e-02, -3.747807329259342e-02, -3.774408339272478e-02, -6.938463861791741e-02, -3.278654231727452e-02, -3.471816500868943e-02, -3.471816500868943e-02, -3.697618092086742e-03, -3.871608845518975e-03, -1.511766983496938e-02, -2.231219400601486e-03, -2.759838584134996e-03, -2.759838584134996e-03, -1.216611575312639e-01, -1.216666014692100e-01, -1.216614286910363e-01, -1.216662343793063e-01, -1.216639061202239e-01, -1.216639061202239e-01, -9.347095170243301e-02, -9.367148062287088e-02, -9.332372670346888e-02, -9.350185566274401e-02, -9.365263503712350e-02, -9.365263503712350e-02, -6.249964386131191e-02, -6.444678101877702e-02, -6.070219778228124e-02, -6.159599296608967e-02, -6.287327728545182e-02, -6.287327728545182e-02, -2.710831629293314e-02, -3.750488065003080e-02, -2.597594266510295e-02, -9.293593962056139e-02, -2.952367097321307e-02, -2.952367097321307e-02, -1.746529390985397e-03, -2.184266199794027e-03, -1.694684093236085e-03, -2.063793330827449e-02, -2.021817835592864e-03, -2.021817835592864e-03, -6.261268015146498e-02, -6.247844173862423e-02, -6.252574951046980e-02, -6.256465699956525e-02, -6.254518863457188e-02, -6.254518863457188e-02, -6.197275598747320e-02, -5.847983987267191e-02, -5.952313807559964e-02, -6.052142368798801e-02, -6.001594785560534e-02, -6.001594785560534e-02, -6.557068422303432e-02, -4.176329233293696e-02, -4.527585433566245e-02, -5.091530857195867e-02, -4.803928496080848e-02, -4.803928496080848e-02, -5.663217563730994e-02, -1.467207473212453e-02, -1.801751829826596e-02, -5.015182302766546e-02, -2.380339647428076e-02, -2.380339647428076e-02, -5.015364439179202e-03, -6.117223788345976e-04, -1.259678354065869e-03, -2.295342355883390e-02, -1.878787061267786e-03, -1.878787061267783e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_karasiev_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_karasiev", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.746660008934506e-01, -1.746660868992952e-01, -1.746664958017280e-01, -1.746652156482597e-01, -1.746658826553509e-01, -1.746658826553509e-01, -1.194878089049990e-01, -1.194878728651830e-01, -1.194900772536475e-01, -1.194918714571610e-01, -1.194885999176092e-01, -1.194885999176092e-01, -7.363167692790212e-02, -7.360371244757752e-02, -7.292282859513061e-02, -7.313160902543089e-02, -7.308733073709535e-02, -7.308733073709535e-02, -4.336548103989169e-02, -4.365463950364813e-02, -7.757231913171345e-02, -3.825189884625262e-02, -4.036065069136382e-02, -4.036065069136382e-02, -4.806996170517053e-03, -5.027642011289546e-03, -1.854158440016444e-02, -2.928617102248400e-03, -3.609720327361828e-03, -3.609720327361828e-03, -1.315464158429782e-01, -1.315519402325163e-01, -1.315466910103102e-01, -1.315515677180930e-01, -1.315492050527499e-01, -1.315492050527499e-01, -1.027163517922146e-01, -1.029233869302929e-01, -1.025643285419364e-01, -1.027482606387038e-01, -1.029039313288030e-01, -1.029039313288030e-01, -7.027493279936921e-02, -7.234376112410350e-02, -6.836166946525163e-02, -6.931347024584834e-02, -7.067222321335974e-02, -7.067222321335974e-02, -3.201775731264243e-02, -4.339462465682304e-02, -3.076656035440945e-02, -1.021638154941229e-01, -3.467692583935311e-02, -3.467692583935311e-02, -2.299998403678620e-03, -2.867895721986363e-03, -2.232518669967808e-03, -2.481794936631232e-02, -2.657525226233745e-03, -2.657525226233745e-03, -7.039514135442090e-02, -7.025238390860082e-02, -7.030269605201994e-02, -7.034407270131082e-02, -7.032336902417036e-02, -7.032336902417036e-02, -6.971443918681587e-02, -6.599157680195036e-02, -6.710484854302697e-02, -6.816906439555009e-02, -6.763033107866394e-02, -6.763033107866394e-02, -7.353609910989267e-02, -4.801484592933564e-02, -5.181302893461695e-02, -5.788821248520626e-02, -5.479348588106149e-02, -5.479348588106148e-02, -6.401734550430016e-02, -1.802746661560482e-02, -2.185812743574036e-02, -5.706738865847895e-02, -2.835652458448817e-02, -2.835652458448818e-02, -6.467080156993541e-03, -8.120161452096070e-04, -1.664471929889548e-03, -2.740979787106403e-02, -2.471928717409563e-03, -2.471928717409560e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
