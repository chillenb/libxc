
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_gk72_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_gk72", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.661788082539301e-01, -1.661788927376227e-01, -1.661792944032401e-01, -1.661780369063238e-01, -1.661786921084411e-01, -1.661786921084411e-01, -1.126258652612336e-01, -1.126259266973389e-01, -1.126280440935655e-01, -1.126297674922900e-01, -1.126266250579096e-01, -1.126266250579096e-01, -6.737673440826770e-02, -6.735579686839784e-02, -6.684487951962755e-02, -6.700177422679129e-02, -6.696851709124327e-02, -6.696851709124327e-02, -4.167824171271916e-02, -4.196353798885404e-02, -7.123482541704597e-02, -3.644895445211664e-02, -3.864935189897654e-02, -3.864935189897654e-02, -3.786574022718564e-03, -3.949392953874835e-03, -1.396696247948285e-02, -2.379134789354004e-03, -2.894699659461921e-03, -2.894699659461921e-03, -1.242226252152902e-01, -1.242279478141774e-01, -1.242228903312529e-01, -1.242275889063173e-01, -1.242253125415341e-01, -1.242253125415341e-01, -9.648274943605725e-02, -9.668312539833060e-02, -9.633558368448032e-02, -9.651363523148902e-02, -9.666429770646910e-02, -9.666429770646910e-02, -6.483660752807806e-02, -6.640863488467505e-02, -6.336309605302143e-02, -6.409857628172032e-02, -6.514016687596276e-02, -6.514016687596276e-02, -2.952365436750555e-02, -4.170704344994964e-02, -2.804652458235226e-02, -9.594773370709314e-02, -3.256081865375725e-02, -3.256081865375725e-02, -1.895996975628624e-03, -2.332804079344413e-03, -1.843627239681860e-03, -2.051845900438093e-02, -2.171760936507205e-03, -2.171760936507205e-03, -6.492854149949658e-02, -6.481935410099789e-02, -6.485784714214295e-02, -6.488949396399375e-02, -6.487365991676999e-02, -6.487365991676999e-02, -6.440695683697133e-02, -6.150961225428889e-02, -6.238423920711295e-02, -6.321366261040928e-02, -6.279458672196388e-02, -6.279458672196388e-02, -6.730515849040701e-02, -4.614526409497732e-02, -4.962071509019925e-02, -5.490254213712226e-02, -5.225150178054184e-02, -5.225150178054184e-02, -5.994023970263289e-02, -1.355120106965691e-02, -1.686254795234553e-02, -5.420695569005864e-02, -2.510452104488534e-02, -2.510452104488534e-02, -5.003172741386117e-03, -7.074584354585122e-04, -1.397992679684633e-03, -2.391078791981027e-02, -2.028953454145578e-03, -2.028953454145577e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_gk72_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_gk72", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.762765397171413e-01, -1.762765397171413e-01, -1.762766247574749e-01, -1.762766247574749e-01, -1.762770290695483e-01, -1.762770290695483e-01, -1.762757632872782e-01, -1.762757632872782e-01, -1.762764228063982e-01, -1.762764228063982e-01, -1.762764228063982e-01, -1.762764228063982e-01, -1.221137779343423e-01, -1.221137779343423e-01, -1.221138403478758e-01, -1.221138403478758e-01, -1.221159914310423e-01, -1.221159914310423e-01, -1.221177422481631e-01, -1.221177422481631e-01, -1.221145498191178e-01, -1.221145498191178e-01, -1.221145498191178e-01, -1.221145498191178e-01, -7.370340107493437e-02, -7.370340107493437e-02, -7.368246353506450e-02, -7.368246353506450e-02, -7.317154618629421e-02, -7.317154618629421e-02, -7.332844089345796e-02, -7.332844089345796e-02, -7.329518375790993e-02, -7.329518375790993e-02, -7.329518375790993e-02, -7.329518375790993e-02, -4.800490837938583e-02, -4.800490837938583e-02, -4.829020465552071e-02, -4.829020465552071e-02, -8.051982062064994e-02, -8.051982062064994e-02, -4.277562111878331e-02, -4.277562111878331e-02, -4.497601856564321e-02, -4.497601856564321e-02, -4.497601856564321e-02, -4.497601856564321e-02, -4.827115295210545e-03, -4.827115295210545e-03, -5.028744504754664e-03, -5.028744504754664e-03, -1.718429035526636e-02, -1.718429035526636e-02, -3.066587918007504e-03, -3.066587918007504e-03, -3.715319630302148e-03, -3.715319630302148e-03, -3.715319630302148e-03, -3.715319630302148e-03, -1.338875536228264e-01, -1.338875536228264e-01, -1.338929528183354e-01, -1.338929528183354e-01, -1.338878225541484e-01, -1.338878225541484e-01, -1.338925887456527e-01, -1.338925887456527e-01, -1.338902796225637e-01, -1.338902796225637e-01, -1.338902796225637e-01, -1.338902796225637e-01, -1.057230114466009e-01, -1.057230114466009e-01, -1.059260687155676e-01, -1.059260687155676e-01, -1.055738887823329e-01, -1.055738887823329e-01, -1.057543092794660e-01, -1.057543092794660e-01, -1.059069882672097e-01, -1.059069882672097e-01, -1.059069882672097e-01, -1.059069882672097e-01, -7.116327419474472e-02, -7.116327419474472e-02, -7.273530155134171e-02, -7.273530155134171e-02, -6.968976271968809e-02, -6.968976271968809e-02, -7.042524294838698e-02, -7.042524294838698e-02, -7.146683354262942e-02, -7.146683354262942e-02, -7.146683354262942e-02, -7.146683354262942e-02, -3.585032103417223e-02, -3.585032103417223e-02, -4.803371011661631e-02, -4.803371011661631e-02, -3.437319124901893e-02, -3.437319124901893e-02, -1.051809330602027e-01, -1.051809330602027e-01, -3.888748532042392e-02, -3.888748532042392e-02, -3.888748532042392e-02, -3.888748532042392e-02, -2.454294423423801e-03, -2.454294423423801e-03, -3.008059791956957e-03, -3.008059791956957e-03, -2.387657436507899e-03, -2.387657436507899e-03, -2.684512567104760e-02, -2.684512567104760e-02, -2.804313172871244e-03, -2.804313172871244e-03, -2.804313172871244e-03, -2.804313172871244e-03, -7.125520816616324e-02, -7.125520816616324e-02, -7.114602076766455e-02, -7.114602076766455e-02, -7.118451380880961e-02, -7.118451380880961e-02, -7.121616063066041e-02, -7.121616063066041e-02, -7.120032658343665e-02, -7.120032658343665e-02, -7.120032658343665e-02, -7.120032658343665e-02, -7.073362350363799e-02, -7.073362350363799e-02, -6.783627892095555e-02, -6.783627892095555e-02, -6.871090587377962e-02, -6.871090587377962e-02, -6.954032927707594e-02, -6.954032927707594e-02, -6.912125338863054e-02, -6.912125338863054e-02, -6.912125338863054e-02, -6.912125338863054e-02, -7.363182515707367e-02, -7.363182515707367e-02, -5.247193076164398e-02, -5.247193076164398e-02, -5.594738175686592e-02, -5.594738175686592e-02, -6.122920880378892e-02, -6.122920880378892e-02, -5.857816844720851e-02, -5.857816844720851e-02, -5.857816844720851e-02, -5.857816844720851e-02, -6.626690636929955e-02, -6.626690636929955e-02, -1.666068338284758e-02, -1.666068338284758e-02, -2.098390665553840e-02, -2.098390665553840e-02, -6.053362235672531e-02, -6.053362235672531e-02, -3.143118771155201e-02, -3.143118771155201e-02, -3.143118771155200e-02, -3.143118771155200e-02, -6.324580942934367e-03, -6.324580942934367e-03, -9.274987755965505e-04, -9.274987755965505e-04, -1.818373284437450e-03, -1.818373284437450e-03, -3.023745458647694e-02, -3.023745458647694e-02, -2.623233178582637e-03, -2.623233178582637e-03, -2.623233178582635e-03, -2.623233178582635e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
