
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_ml2_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_ml2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-4.387853411486623e-02, -4.387853562839134e-02, -4.387854282398242e-02, -4.387852029642714e-02, -4.387853203422087e-02, -4.387853203422087e-02, -4.147080559910481e-02, -4.147081139259105e-02, -4.147101105825126e-02, -4.147117356086720e-02, -4.147087724790124e-02, -4.147087724790124e-02, -3.272891659762481e-02, -3.271959716701893e-02, -3.249073201584885e-02, -3.256130906038970e-02, -3.254637063243750e-02, -3.254637063243750e-02, -1.901237844481269e-02, -1.917076764854075e-02, -3.398000869437509e-02, -1.618659986179890e-02, -1.735551623683291e-02, -1.735551623683291e-02, -1.246503896589988e-03, -1.308888435409169e-03, -6.128323865360675e-03, -7.346248713067525e-04, -9.163259944624323e-04, -9.163259944624323e-04, -4.238331309402651e-02, -4.238365804656091e-02, -4.238333027735279e-02, -4.238363478796354e-02, -4.238348726454355e-02, -4.238348726454355e-02, -3.949104484229798e-02, -3.952203305673046e-02, -3.946816976103775e-02, -3.949583318438450e-02, -3.951912907248539e-02, -3.951912907248539e-02, -3.156461016607925e-02, -3.229312303040223e-02, -3.085918059888072e-02, -3.121394747250360e-02, -3.170725869232845e-02, -3.170725869232845e-02, -1.276365739588592e-02, -1.902835268008785e-02, -1.209235072146043e-02, -3.940741103205782e-02, -1.421184283239613e-02, -1.421184283239613e-02, -5.707378098267958e-04, -7.186363326833635e-04, -5.533579507158850e-04, -9.032395117714495e-03, -6.635063294171736e-04, -6.635063294171736e-04, -3.160790998232963e-02, -3.155647452545902e-02, -3.157462133279847e-02, -3.158952945317749e-02, -3.158207164290809e-02, -3.158207164290809e-02, -3.136112696850387e-02, -2.994257981109700e-02, -3.037903499854461e-02, -3.078646374161858e-02, -3.058140775135402e-02, -3.058140775135402e-02, -3.269703826914789e-02, -2.152272505681320e-02, -2.349555425153034e-02, -2.645228146661707e-02, -2.497964569247885e-02, -2.497964569247885e-02, -2.914279137424548e-02, -5.908131096030286e-03, -7.615084517795859e-03, -2.606883845883688e-02, -1.082336914355590e-02, -1.082336914355590e-02, -1.727939538155043e-03, -1.966599778345821e-04, -4.086505830402675e-04, -1.033501786472170e-02, -6.152045858369936e-04, -6.152045858369929e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_ml2_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_ml2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-4.405943010677919e-02, -4.405943126833110e-02, -4.405943679039116e-02, -4.405941950225547e-02, -4.405942851009865e-02, -4.405942851009865e-02, -4.236552625755783e-02, -4.236553038685945e-02, -4.236567269805253e-02, -4.236578852093122e-02, -4.236557732513201e-02, -4.236557732513201e-02, -3.554424496934416e-02, -3.553634689845334e-02, -3.534197363988681e-02, -3.540199888333394e-02, -3.538930016694027e-02, -3.538930016694027e-02, -2.252092739697503e-02, -2.268696911315080e-02, -3.659253495699830e-02, -1.949859364435545e-02, -2.076257163959176e-02, -2.076257163959177e-02, -1.643138489935308e-03, -1.724568717273102e-03, -7.829001364610261e-03, -9.722840205815605e-04, -1.210981058768360e-03, -1.210981058768360e-03, -4.300974215359227e-02, -4.300998344350679e-02, -4.300975417314697e-02, -4.300996717446236e-02, -4.300986398385293e-02, -4.300986398385293e-02, -4.092424423590783e-02, -4.094727238109783e-02, -4.090723559174093e-02, -4.092780355227493e-02, -4.094511498916607e-02, -4.094511498916607e-02, -3.454732298585039e-02, -3.517350689437267e-02, -3.393333986410758e-02, -3.424305564299521e-02, -3.467056669768323e-02, -3.467056669768323e-02, -1.568646331818566e-02, -2.253768967735987e-02, -1.491954558031832e-02, -4.086201926172414e-02, -1.731940598026756e-02, -1.731940598026756e-02, -7.564281304496982e-04, -9.512493194629430e-04, -7.335048109272460e-04, -1.134394569357950e-02, -8.786805179682318e-04, -8.786805179682318e-04, -3.458476512520063e-02, -3.454028478862688e-02, -3.455598234115911e-02, -3.456887460675306e-02, -3.456242565064041e-02, -3.456242565064041e-02, -3.437098817971322e-02, -3.312436908362305e-02, -3.351114906913109e-02, -3.386962301373353e-02, -3.368951770331059e-02, -3.368951770331059e-02, -3.551722312875647e-02, -2.511022257451337e-02, -2.708127615013436e-02, -2.992900366439291e-02, -2.852668461315895e-02, -2.852668461315895e-02, -3.240819796931395e-02, -7.557615597322747e-03, -9.643368861749591e-03, -2.956694440892145e-02, -1.345261089115653e-02, -1.345261089115652e-02, -2.269790332228226e-03, -2.615661182328142e-04, -5.423921108532173e-04, -1.288208172381178e-02, -8.150494432560009e-04, -8.150494432560001e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
