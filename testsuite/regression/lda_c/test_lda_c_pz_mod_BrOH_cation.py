
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_c_pz_mod_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_pz_mod", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.656086608423613e-01, -1.656087464656557e-01, -1.656091535513937e-01, -1.656078790769814e-01, -1.656085431048047e-01, -1.656085431048047e-01, -1.109228688353815e-01, -1.109229318023844e-01, -1.109251021413638e-01, -1.109268686704536e-01, -1.109236334422570e-01, -1.109236334422570e-01, -6.654733778398121e-02, -6.652086469257174e-02, -6.588738080963923e-02, -6.608356462712150e-02, -6.578913009257728e-02, -6.578913009257728e-02, -3.812085797881110e-02, -3.838943883306543e-02, -7.016844735628038e-02, -3.314869874771516e-02, -2.733702693610676e-02, -2.733702693610677e-02, -3.752126803511055e-03, -3.915342630177624e-03, -1.470257672498181e-02, -2.339681791868890e-03, -2.431529719776537e-03, -2.431529719776537e-03, -1.228180132952068e-01, -1.228234718779808e-01, -1.228182849584360e-01, -1.228231040810288e-01, -1.228207692140320e-01, -1.228207692140320e-01, -9.446904740078318e-02, -9.467128252545111e-02, -9.432030529868951e-02, -9.449993710658872e-02, -9.465062294987203e-02, -9.465062294987203e-02, -6.344958904917636e-02, -6.535406141268206e-02, -6.163446323159574e-02, -6.251155412424581e-02, -6.366439576582227e-02, -6.366439576582224e-02, -2.709428221633022e-02, -3.819790154381998e-02, -2.583660283870931e-02, -9.392942125063614e-02, -2.958037893418721e-02, -2.958037893418721e-02, -1.857394997593759e-03, -2.293505868087830e-03, -1.803445615913953e-03, -2.032244063089406e-02, -2.010136950952931e-03, -2.010136950952931e-03, -6.355925616284420e-02, -6.342847422930659e-02, -6.347454955508411e-02, -6.351246596418533e-02, -6.349349289162337e-02, -6.349349289162337e-02, -6.293682830908479e-02, -5.957402179916579e-02, -6.057119486225172e-02, -6.153169595634325e-02, -6.104478644575735e-02, -6.104478644575735e-02, -6.645927933221893e-02, -4.271363563296185e-02, -4.638609210697461e-02, -5.215715005397854e-02, -4.923953603834933e-02, -4.923953603834933e-02, -5.779839570299717e-02, -1.429610382303140e-02, -1.763014340984296e-02, -5.137824549268445e-02, -2.355227253342397e-02, -2.355227253342397e-02, -5.012274254038607e-03, -6.893544113049650e-04, -1.363626532313715e-03, -2.271838678548942e-02, -1.897353693850022e-03, -1.897353693850021e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_c_pz_mod_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_c_pz_mod", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.758423929964547e-01, -1.758429211538642e-01, -1.758422977201875e-01, -1.758431883317694e-01, -1.758436439851741e-01, -1.758426593445429e-01, -1.758403102328088e-01, -1.758434344561802e-01, -1.758399251883887e-01, -1.758451526845389e-01, -1.758399251883887e-01, -1.758451526845389e-01, -1.206462461810411e-01, -1.206499412571182e-01, -1.206460481792603e-01, -1.206502675713382e-01, -1.206531565849517e-01, -1.206475811277204e-01, -1.206540688280638e-01, -1.206502679528296e-01, -1.206995564900837e-01, -1.205982434995628e-01, -1.206995564900837e-01, -1.205982434995628e-01, -7.472194062573305e-02, -7.408894280706692e-02, -7.476621300112131e-02, -7.398907041587721e-02, -7.314448582821245e-02, -7.423950065505848e-02, -7.407223112571894e-02, -7.372841585340513e-02, -6.889068174388734e-02, -7.926754034892711e-02, -6.889068174388734e-02, -7.926754034892711e-02, -4.621299553808773e-02, -4.276285753525566e-02, -4.678279412590959e-02, -4.282787840822577e-02, -8.124070652607594e-02, -7.565379142358662e-02, -3.954208937418206e-02, -3.847501376270857e-02, -2.575021480120265e-02, -7.198658901534942e-02, -2.575021480120267e-02, -7.198658901534939e-02, -5.041978628788053e-03, -4.620229426329916e-03, -5.293251790785663e-03, -4.791743982178698e-03, -1.903557405434599e-02, -1.728979439886595e-02, -2.992812236199824e-03, -3.061598482736676e-03, -2.712243568227784e-03, -5.336338715570940e-03, -2.712243568227784e-03, -5.336338715570940e-03, -1.326944562729285e-01, -1.327665646025871e-01, -1.326990343057132e-01, -1.327730483705360e-01, -1.326940609039220e-01, -1.327675113694080e-01, -1.326994938880424e-01, -1.327718423678194e-01, -1.326965871861081e-01, -1.327700188030687e-01, -1.326965871861081e-01, -1.327700188030687e-01, -1.037877400492124e-01, -1.037993273733996e-01, -1.039707923992840e-01, -1.040333421638157e-01, -1.038384429965894e-01, -1.034428287982801e-01, -1.040323896993137e-01, -1.036194574715339e-01, -1.034797446365245e-01, -1.044881685211901e-01, -1.034797446365245e-01, -1.044881685211901e-01, -7.082088121391873e-02, -7.122511088290016e-02, -7.314130138828559e-02, -7.306999598603177e-02, -7.184050789479318e-02, -6.648973246024516e-02, -7.256586779540876e-02, -6.765297425916408e-02, -6.763757844223064e-02, -7.547081119433141e-02, -6.763757844223063e-02, -7.547081119433137e-02, -3.260197778336392e-02, -3.200747170876551e-02, -4.470394086073508e-02, -4.425329636645346e-02, -3.256670003731198e-02, -2.944834185119080e-02, -1.031857481435620e-01, -1.032881808717219e-01, -3.722120593267625e-02, -3.324299834408923e-02, -3.722120593267625e-02, -3.324299834408923e-02, -2.475178889196626e-03, -2.353166025766071e-03, -2.998289401484275e-03, -2.938145815265352e-03, -2.437088749115404e-03, -2.260993343005136e-03, -2.476902054689023e-02, -2.448861163049516e-02, -3.418400656137689e-03, -2.283712565567003e-03, -3.418400656137689e-03, -2.283712565567003e-03, -7.143894825798498e-02, -7.084961446836273e-02, -7.129774525250654e-02, -7.070371855296302e-02, -7.134845111857258e-02, -7.075419857679266e-02, -7.138751278153416e-02, -7.079833031134576e-02, -7.136793656203440e-02, -7.077627804400562e-02, -7.136793656203440e-02, -7.077627804400562e-02, -7.070935115399375e-02, -7.021021928894711e-02, -6.704715147136871e-02, -6.642835994775226e-02, -6.816598298567762e-02, -6.752152988340421e-02, -6.916844038142107e-02, -6.864947553381348e-02, -6.864126394516246e-02, -6.809742085007184e-02, -6.864126394516246e-02, -6.809742085007184e-02, -7.443839449489842e-02, -7.417821927247302e-02, -4.959708263510194e-02, -4.900925164561816e-02, -5.373487172960657e-02, -5.262762877532914e-02, -5.952029558151099e-02, -5.883013036994117e-02, -5.613170286402278e-02, -5.617333571796020e-02, -5.613170286402279e-02, -5.617333571796020e-02, -6.542078775297520e-02, -6.446776209509460e-02, -1.772200323293790e-02, -1.751063833427479e-02, -2.219261076669906e-02, -2.090409707172972e-02, -5.931090737664170e-02, -5.746593293731139e-02, -2.989169941970383e-02, -2.696179471507981e-02, -2.989169941970384e-02, -2.696179471507981e-02, -6.567736820739442e-03, -6.226043015272219e-03, -9.055992065478812e-04, -9.031598979579486e-04, -1.852660225045123e-03, -1.713656671764488e-03, -2.779493265563503e-02, -2.695625070638009e-02, -3.121880602997673e-03, -2.173898650359486e-03, -3.121880602997671e-03, -2.173898650359485e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
