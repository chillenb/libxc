
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_2d_b86_mgc_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_2d_b86_mgc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.481785160363759e+02, -1.481791276029761e+02, -1.481820497742638e+02, -1.481729467024335e+02, -1.481776876000779e+02, -1.481776876000779e+02, -9.855781110867094e+00, -9.855785588847908e+00, -9.856248310500275e+00, -9.858226320718813e+00, -9.856139652601817e+00, -9.856139652601817e+00, -9.021647482353886e-01, -9.014738101875169e-01, -8.862938969997878e-01, -8.958556242017538e-01, -8.930735772295649e-01, -8.930735772295649e-01, -1.519115830280914e-01, -1.541219705480229e-01, -1.117234063314894e+00, -1.113986173651741e-01, -1.264606743915462e-01, -1.264606743915462e-01, -4.741569891121468e-03, -4.926827271475678e-03, -2.581513659715462e-02, -3.017255306632464e-03, -3.554206505516108e-03, -3.554206505516107e-03, -1.789360378363887e+01, -1.789779319885988e+01, -1.789381854695647e+01, -1.789751668504253e+01, -1.789571537418919e+01, -1.789571537418919e+01, -4.327287116158649e+00, -4.368606547677180e+00, -4.304211913155603e+00, -4.340566093011634e+00, -4.361358691872136e+00, -4.361358691872136e+00, -7.156500763903162e-01, -7.761349907722106e-01, -6.440337973979409e-01, -6.523790969703730e-01, -7.285943410812290e-01, -7.285943410812290e-01, -7.390915379214789e-02, -1.595463338544408e-01, -6.737343503522153e-02, -4.008441464824299e+00, -8.699907714689134e-02, -8.699907714689134e-02, -2.363624453285275e-03, -2.907591590121025e-03, -1.895147238893429e-03, -4.253517703324668e-02, -2.409213143848570e-03, -2.409213143848571e-03, -6.829546611851628e-01, -6.849225426168128e-01, -6.842779792284899e-01, -6.836981073934310e-01, -6.839913143721518e-01, -6.839913143721518e-01, -6.531230384045270e-01, -5.786561046646470e-01, -6.006171405231294e-01, -6.212348325608393e-01, -6.105861266686730e-01, -6.105861266686730e-01, -8.337777649705610e-01, -2.130269968505503e-01, -2.639013122126277e-01, -3.575889174363568e-01, -3.070378127449572e-01, -3.070378127449571e-01, -5.154305897490091e-01, -2.487093791857768e-02, -3.427914731889978e-02, -3.300283660690824e-01, -5.489949703113745e-02, -5.489949703113747e-02, -6.548955720773335e-03, -8.365209352451918e-04, -1.643801580820330e-03, -5.121146154697197e-02, -2.200675212026697e-03, -2.200675212026694e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_2d_b86_mgc_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_2d_b86_mgc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.214999895317772e+02, -2.215009283548254e+02, -2.215053705393613e+02, -2.214913971954462e+02, -2.214986807543896e+02, -2.214986807543896e+02, -1.438484542452700e+01, -1.438492663989870e+01, -1.438733678510061e+01, -1.438727580500892e+01, -1.438546699174573e+01, -1.438546699174573e+01, -1.174532531364947e+00, -1.172512072967698e+00, -1.127261159642137e+00, -1.141043835113061e+00, -1.137973119840413e+00, -1.137973119840413e+00, -1.838665533504770e-01, -1.865874941930642e-01, -1.482935053941433e+00, -1.333255220421197e-01, -1.524272593017302e-01, -1.524272593017302e-01, -4.082250561184660e-03, -4.263188067047123e-03, -2.669846397619648e-02, -2.493846588173497e-03, -2.990898776310579e-03, -2.990898776310576e-03, -2.656999676513191e+01, -2.657835778704928e+01, -2.657040451241455e+01, -2.657778540008950e+01, -2.657422271212510e+01, -2.657422271212510e+01, -5.915597558542499e+00, -5.983900741268266e+00, -5.861649164246949e+00, -5.921665985680446e+00, -5.979682089512769e+00, -5.979682089512769e+00, -9.679395197638140e-01, -1.125390608163533e+00, -8.583386237142070e-01, -9.310788489187301e-01, -9.940033230546989e-01, -9.940033230546989e-01, -8.553919491329426e-02, -1.925006156806334e-01, -7.743233053957319e-02, -5.944580726131657e+00, -1.027843645195332e-01, -1.027843645195332e-01, -1.929212168693773e-03, -2.403880002605805e-03, -1.570591445600555e-03, -4.694744097570056e-02, -2.004229613661577e-03, -2.004229613661576e-03, -1.010870748881559e+00, -9.920789770887029e-01, -9.984547028670829e-01, -1.003909388232201e+00, -1.001158882615029e+00, -1.001158882615029e+00, -9.732340960294450e-01, -7.389791858073522e-01, -7.929855240974050e-01, -8.566406512377429e-01, -8.228660959986951e-01, -8.228660959986951e-01, -1.207233877972495e+00, -2.579394924602676e-01, -3.196898106086510e-01, -4.437134454683584e-01, -3.736890351964721e-01, -3.736890351964721e-01, -6.536001978925778e-01, -2.552654828129134e-02, -3.661681726294495e-02, -4.161365536600821e-01, -6.258104626609040e-02, -6.258104626609041e-02, -5.793668276045231e-03, -6.582360885477475e-04, -1.326654874631315e-03, -5.794557362527867e-02, -1.826138718121342e-03, -1.826138718121340e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_2d_b86_mgc_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_2d_b86_mgc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.727918730281596e-09, -1.727897596233433e-09, -1.727796157490449e-09, -1.728110754810985e-09, -1.727946968034558e-09, -1.727946968034558e-09, -5.673649205258859e-06, -5.673686628432956e-06, -5.673936031404986e-06, -5.668740547790009e-06, -5.673089456585826e-06, -5.673089456585826e-06, -5.666082577510848e-03, -5.658697584602114e-03, -5.390544872672289e-03, -5.258512131824871e-03, -5.319109182356800e-03, -5.319109182356800e-03, -2.900454643198938e-01, -2.921386336377249e-01, -3.183850979854365e-03, -4.072735389508858e-01, -3.597161195606874e-01, -3.597161195606871e-01, -3.979978937095245e+02, -3.621190003916039e+02, -6.408827459782163e+00, -1.319607522863654e+03, -8.637077218180201e+02, -8.637077218180209e+02, -9.722978065220993e-07, -9.717247444219318e-07, -9.722673507133908e-07, -9.717615051356855e-07, -9.720095183024278e-07, -9.720095183024278e-07, -5.925604088365663e-05, -5.785533561105897e-05, -5.967132949267412e-05, -5.843237043673508e-05, -5.827183775137850e-05, -5.827183775137850e-05, -1.276324143848535e-02, -1.149946735100343e-02, -1.682364327509232e-02, -1.885994777984871e-02, -1.235509127009068e-02, -1.235509127009068e-02, -7.583267376986151e-01, -1.889212409872706e-01, -9.157047450856367e-01, -8.633686304923262e-05, -6.393746402176992e-01, -6.393746402176992e-01, -2.622603463544966e+03, -1.476145041041495e+03, -5.378309222831432e+03, -2.382589393022385e+00, -2.655183092977668e+03, -2.655183092977667e+03, -1.740823713655712e-02, -1.670435613190379e-02, -1.694557713350068e-02, -1.715096328127373e-02, -1.704777262889396e-02, -1.704777262889396e-02, -2.009228673689720e-02, -1.977334438095351e-02, -2.015593269372302e-02, -2.042306261334730e-02, -2.035959207013072e-02, -2.035959207013072e-02, -9.254248618024642e-03, -1.154644538194738e-01, -8.920062430936834e-02, -6.915621830919354e-02, -8.001668462078555e-02, -8.001668462078555e-02, -2.696492834357896e-02, -6.808959089264508e+00, -3.460578673990961e+00, -9.936364609147828e-02, -1.536112683269236e+00, -1.536112683269236e+00, -1.692158071158947e+02, -5.215618612798830e+04, -7.492234964831746e+03, -1.743611969805305e+00, -3.451238944732840e+03, -3.451238944732848e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
