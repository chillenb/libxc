
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_ityh_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ityh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.093697337201505e+01, -2.093699693651732e+01, -2.093717955700355e+01, -2.093679213372091e+01, -2.093698515136154e+01, -2.093698515136154e+01, -3.367910248024170e+00, -3.367882587569339e+00, -3.367266486838218e+00, -3.369068674424901e+00, -3.367910895560569e+00, -3.367910895560569e+00, -5.750068341602648e-01, -5.748638487097198e-01, -5.725294535719682e-01, -5.770756457749755e-01, -5.749519017345774e-01, -5.749519017345774e-01, -9.645654901970709e-02, -9.825260277141044e-02, -6.941248587405349e-01, -5.467759329717813e-02, -9.698905161240395e-02, -9.698905161240395e-02, -4.111394744984048e-05, -4.724345559302168e-05, -3.060582948945972e-03, -4.542769536633668e-06, -4.578279527101316e-05, -4.578279527101316e-05, -4.938062491274763e+00, -4.937441215490848e+00, -4.938005380114950e+00, -4.937522198987491e+00, -4.937734764166944e+00, -4.937734764166944e+00, -1.984883843119814e+00, -1.994956433559490e+00, -1.985708811190207e+00, -1.993543885172028e+00, -1.990664091995976e+00, -1.990664091995976e+00, -4.616883016928621e-01, -4.889742406854203e-01, -4.342239665617593e-01, -4.407072939232468e-01, -4.802509038240336e-01, -4.802509038240336e-01, -2.767104249057710e-02, -1.035106122868538e-01, -2.669241003181897e-02, -1.703209258173255e+00, -3.852783096983933e-02, -3.852783096983933e-02, -4.078344606679263e-06, -6.087194101190914e-06, -2.563118089529728e-06, -7.889169709420291e-03, -4.604731310637930e-06, -4.604731310637931e-06, -4.536358692460691e-01, -4.555603768228104e-01, -4.549139317462614e-01, -4.543804076066037e-01, -4.546503329529510e-01, -4.546503329529510e-01, -4.351509192514486e-01, -3.990754833970377e-01, -4.105922238050594e-01, -4.204653655002185e-01, -4.154029791508708e-01, -4.154029791508708e-01, -5.183959651991086e-01, -1.490622105431690e-01, -1.877805223960954e-01, -2.505034680627812e-01, -2.174122444260374e-01, -2.174122444260373e-01, -3.512893842492273e-01, -2.449912413417211e-03, -5.868376412768068e-03, -2.259690083962661e-01, -1.615302048098377e-02, -1.615302048098381e-02, -6.615862585471584e-05, -1.249381596884963e-07, -8.564405885181901e-07, -1.421753778041410e-02, -2.826665540484851e-06, -2.826665540484838e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_ityh_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ityh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.511295955781561e+01, -2.511304181338908e+01, -2.511342338883883e+01, -2.511207614452751e+01, -2.511300281443184e+01, -2.511300281443184e+01, -3.964210838343537e+00, -3.964242103876539e+00, -3.965268906761842e+00, -3.964360191215099e+00, -3.964244203448872e+00, -3.964244203448872e+00, -6.759912196778460e-01, -6.750240776177669e-01, -6.505431886853221e-01, -6.564759996002217e-01, -6.756391078127054e-01, -6.756391078127054e-01, -1.326266975079692e-01, -1.349155222584996e-01, -8.342762790466215e-01, -8.292371966214306e-02, -1.333060946978693e-01, -1.333060946978693e-01, -8.216838395635635e-05, -9.440946889784805e-05, -5.956410301311566e-03, -9.084699102827864e-06, -9.149214423844741e-05, -9.149214423844741e-05, -6.101416729854614e+00, -6.103796100497931e+00, -6.101660554353665e+00, -6.103510623714898e+00, -6.102635739812958e+00, -6.102635739812958e+00, -2.119808010411303e+00, -2.136938578393944e+00, -2.111300059068618e+00, -2.124631078847099e+00, -2.142568001846630e+00, -2.142568001846630e+00, -5.883334001286055e-01, -6.628776932366115e-01, -5.528762615595010e-01, -5.917990370526294e-01, -6.163326039145807e-01, -6.163326039145807e-01, -4.697365793347192e-02, -1.389822375461943e-01, -4.542532759975530e-02, -2.222950321862657e+00, -6.209265424104870e-02, -6.209265424104870e-02, -8.155998570373243e-06, -1.217289938167361e-05, -5.125890621533448e-06, -1.484500964342040e-02, -9.208524476715986e-06, -9.208524476715988e-06, -6.306439724209034e-01, -6.218208768032522e-01, -6.248596167892689e-01, -6.272957867066219e-01, -6.260667767788998e-01, -6.260667767788998e-01, -6.080747330699210e-01, -4.920433114949292e-01, -5.225402810289806e-01, -5.529938028674516e-01, -5.372623672639730e-01, -5.372623672639730e-01, -6.990381687658489e-01, -1.881653838379433e-01, -2.330064609993601e-01, -3.177454451632566e-01, -2.716550613135645e-01, -2.716550613135644e-01, -4.350799008859147e-01, -4.793057339270503e-03, -1.120340257228167e-02, -2.970717951393886e-01, -2.891027146270776e-02, -2.891027146270778e-02, -1.321778068773939e-04, -2.498753996901121e-07, -1.712844171726747e-06, -2.567356132732856e-02, -5.652935736081977e-06, -5.652935736081950e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_ityh_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ityh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-7.201117420448099e-09, -7.201087154254269e-09, -7.200843643877867e-09, -7.201341445884795e-09, -7.201102365930777e-09, -7.201102365930777e-09, -9.084186638486073e-06, -9.084483609125497e-06, -9.091175081771500e-06, -9.072064224877558e-06, -9.084186738457796e-06, -9.084186738457796e-06, -4.416507986477544e-03, -4.415998456114108e-03, -4.369727959655910e-03, -4.271626331952473e-03, -4.416403821798233e-03, -4.416403821798233e-03, -1.816980799783466e-01, -1.825572801868616e-01, -2.507050324862696e-03, -1.833898923977504e-01, -1.820578257601468e-01, -1.820578257601468e-01, -1.586545437169211e-03, -1.796072942803653e-03, -3.617358417329476e-02, -1.750495879827080e-04, -1.791641983757145e-03, -1.791641983757145e-03, -2.115738424596277e-06, -2.117224999214434e-06, -2.115878430434509e-06, -2.117034450055679e-06, -2.116516545080023e-06, -2.116516545080023e-06, -6.606517421079595e-05, -6.481097972283296e-05, -6.603455706262952e-05, -6.505462925349408e-05, -6.525668878263495e-05, -6.525668878263495e-05, -9.114136527186489e-03, -8.497859658736468e-03, -1.084206505017572e-02, -1.128383784443746e-02, -8.204308472723097e-03, -8.204308472723097e-03, -1.344725386213110e-01, -1.252208420146782e-01, -1.434414758492800e-01, -1.224281896811369e-04, -1.739632415235621e-01, -1.739632415235621e-01, -1.652185135210772e-04, -2.380025243930429e-04, -2.221208055296955e-04, -7.695627438850818e-02, -2.409217441756440e-04, -2.409217441754301e-04, -1.128695387501456e-02, -1.060815402804790e-02, -1.081443293035471e-02, -1.099835819075203e-02, -1.090332903409503e-02, -1.090332903409503e-02, -1.293492988565700e-02, -1.313422856941036e-02, -1.266705087128279e-02, -1.244133172787392e-02, -1.254599146148325e-02, -1.254599146148325e-02, -7.065058618483777e-03, -8.837848285824841e-02, -6.693739723291729e-02, -4.276706510871776e-02, -5.450392986175966e-02, -5.450392986175966e-02, -1.847789081198098e-02, -2.703707441075495e-02, -5.521040984140492e-02, -5.770604345394056e-02, -1.301844346941811e-01, -1.301844346941852e-01, -1.995742202989877e-03, -9.627941628347028e-06, -5.187009495388929e-05, -1.352617722870020e-01, -2.002499279680532e-04, -2.002499279680269e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
