
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_pbek1_vdw_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbek1_vdw", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.096160179644892e+01, -2.096162838237741e+01, -2.096181575128370e+01, -2.096141878635816e+01, -2.096161695217845e+01, -2.096161695217845e+01, -3.478246474356290e+00, -3.478206718180221e+00, -3.477373095183120e+00, -3.479483323813750e+00, -3.478282924057807e+00, -3.478282924057807e+00, -6.997656529297541e-01, -6.998353614039099e-01, -7.036036884754493e-01, -7.082842046586559e-01, -7.087228421492632e-01, -7.087228421492632e-01, -2.207187509392252e-01, -2.214840424868032e-01, -8.077402520621306e-01, -1.907142253723637e-01, -2.168407933573978e-01, -2.168407933573977e-01, -1.120118034507221e-02, -1.179437744376314e-02, -6.364127780061954e-02, -6.461895758978237e-03, -9.016837473719602e-03, -9.016837473719602e-03, -5.037057958983047e+00, -5.036408754022260e+00, -5.037038992801766e+00, -5.036465685489137e+00, -5.036722788268315e+00, -5.036722788268315e+00, -2.126881354899708e+00, -2.136319219598870e+00, -2.129336298651508e+00, -2.137650448198709e+00, -2.130946982871230e+00, -2.130946982871230e+00, -5.813403076710011e-01, -6.028752548045307e-01, -5.426867446896924e-01, -5.376992162132581e-01, -5.876550622303196e-01, -5.876550622303196e-01, -1.493360796267603e-01, -2.399451443024190e-01, -1.400825931990282e-01, -1.813757398343238e+00, -1.643032419090995e-01, -1.643032419090995e-01, -4.989194818100571e-03, -6.316834122001342e-03, -4.836868738459166e-03, -9.907820763469014e-02, -6.075624988279358e-03, -6.075624988279359e-03, -5.507730711105114e-01, -5.539582552674192e-01, -5.528504231727781e-01, -5.519189840924554e-01, -5.523851805565242e-01, -5.523851805565242e-01, -5.339882577866017e-01, -5.122060302589619e-01, -5.178799813797776e-01, -5.234808592689323e-01, -5.203747142295188e-01, -5.203747142295188e-01, -6.331824718213530e-01, -2.830492549881584e-01, -3.155941777180383e-01, -3.673705147795109e-01, -3.388641654648993e-01, -3.388641654648993e-01, -4.727938808867674e-01, -6.100035821241144e-02, -8.182863960871249e-02, -3.430435308486882e-01, -1.208154128624813e-01, -1.208154128624813e-01, -1.577870425592393e-02, -1.688744101028791e-03, -3.551111624319769e-03, -1.147554460920618e-01, -5.579652105819215e-03, -5.579652105819210e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_pbek1_vdw_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbek1_vdw", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.508519131563132e+01, -2.508516203857891e+01, -2.508531028402702e+01, -2.508524844296410e+01, -2.508565616346064e+01, -2.508575378542268e+01, -2.508431351418682e+01, -2.508404218181931e+01, -2.508526402432854e+01, -2.508470081440642e+01, -2.508526402432854e+01, -2.508470081440642e+01, -4.020247889379099e+00, -4.020469477308083e+00, -4.020295072364625e+00, -4.020526483520149e+00, -4.021539335243046e+00, -4.021889223947756e+00, -4.020032142219385e+00, -4.020392509730631e+00, -4.019466701145809e+00, -4.021568874732759e+00, -4.019466701145809e+00, -4.021568874732759e+00, -7.497820720764414e-01, -7.552252636399488e-01, -7.477929169183261e-01, -7.544403926980617e-01, -7.225706808851353e-01, -7.145249196748946e-01, -7.237253863966863e-01, -7.263375788769332e-01, -7.648815978711587e-01, -6.878760526573378e-01, -7.648815978711587e-01, -6.878760526573378e-01, -1.916023373027535e-01, -1.963810670525358e-01, -1.923701638362462e-01, -1.982952938073728e-01, -8.627875852077520e-01, -9.036933906394342e-01, -1.734702920832077e-01, -1.749295509618566e-01, -1.992916544752055e-01, -1.541398262537520e-01, -1.992916544752054e-01, -1.541398262537518e-01, -1.441922911516853e-02, -1.531756430787661e-02, -1.510498779983634e-02, -1.617487865871650e-02, -7.912635293092890e-02, -8.294894839247369e-02, -8.681514522757304e-03, -8.537185109862257e-03, -1.286969940038631e-02, -7.330486706606771e-03, -1.286969940038631e-02, -7.330486706606771e-03, -6.192890861212767e+00, -6.191335458985370e+00, -6.195820749785010e+00, -6.194166068048643e+00, -6.193051960193707e+00, -6.191431533691731e+00, -6.195566002264028e+00, -6.194003032447066e+00, -6.194392919285418e+00, -6.192757413905012e+00, -6.194392919285418e+00, -6.192757413905012e+00, -2.149136680372770e+00, -2.149021199566450e+00, -2.167567434097137e+00, -2.166914886049205e+00, -2.129453576814872e+00, -2.134960687175615e+00, -2.145184282452583e+00, -2.150911024694031e+00, -2.174582949069876e+00, -2.160484795420561e+00, -2.174582949069876e+00, -2.160484795420561e+00, -6.843818219847467e-01, -6.826651525795675e-01, -7.737483803407367e-01, -7.745042820714679e-01, -6.151670922142275e-01, -6.408323325373037e-01, -6.699501139468588e-01, -6.917518845792765e-01, -7.163832188326839e-01, -6.792586405905258e-01, -7.163832188326837e-01, -6.792586405905259e-01, -1.581746094140223e-01, -1.582686232030493e-01, -2.123631646448309e-01, -2.129305084658177e-01, -1.493921785908676e-01, -1.532280669705304e-01, -2.334295643396188e+00, -2.333310266441128e+00, -1.614287269352840e-01, -1.568117687597857e-01, -1.614287269352840e-01, -1.568117687597857e-01, -6.514595593497527e-03, -6.770225092541977e-03, -8.353021762344435e-03, -8.479515928111900e-03, -6.244388145663994e-03, -6.611654181709044e-03, -1.167803787826147e-01, -1.176296946494948e-01, -6.379607717607868e-03, -8.754886999068371e-03, -6.379607717607870e-03, -8.754886999068373e-03, -7.232801328152457e-01, -7.262157127137525e-01, -7.110446164276500e-01, -7.140607425220569e-01, -7.152745131520872e-01, -7.182904113289739e-01, -7.188572644410319e-01, -7.217970295504483e-01, -7.170603725295254e-01, -7.200370695132772e-01, -7.170603725295254e-01, -7.200370695132772e-01, -7.063500811417193e-01, -7.087046797567256e-01, -5.519887034052365e-01, -5.548332900738209e-01, -5.925232027172392e-01, -5.957501152250021e-01, -6.367692756988259e-01, -6.392256052944326e-01, -6.141802080248702e-01, -6.166977725442035e-01, -6.141802080248702e-01, -6.166977725442035e-01, -8.091792012961674e-01, -8.111476320553634e-01, -2.477067194462393e-01, -2.486300010303714e-01, -2.848818791929604e-01, -2.873412874171834e-01, -3.858439740149261e-01, -3.882381373867365e-01, -3.286678068898523e-01, -3.286401750511436e-01, -3.286678068898523e-01, -3.286401750511437e-01, -5.065131958687050e-01, -5.107887811824329e-01, -7.802764206313322e-02, -7.849725570691350e-02, -1.003198453431250e-01, -1.028466348664671e-01, -3.774361713248973e-01, -3.840936504411647e-01, -1.320703525604542e-01, -1.322641696497724e-01, -1.320703525604542e-01, -1.322641696497724e-01, -2.058498174836887e-02, -2.132330482480428e-02, -2.248920008832435e-03, -2.253971634262447e-03, -4.574831843147935e-03, -4.865395008005502e-03, -1.275442079119447e-01, -1.289053964062723e-01, -6.041388655193017e-03, -8.026303640423119e-03, -6.041388655193010e-03, -8.026303640423111e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_pbek1_vdw_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbek1_vdw", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.450045214309849e-08, 0.000000000000000e+00, -1.450053140660946e-08, -1.450032208997451e-08, 0.000000000000000e+00, -1.450043689306718e-08, -1.449979238196336e-08, 0.000000000000000e+00, -1.449970967997820e-08, -1.450126401618743e-08, 0.000000000000000e+00, -1.450158450174307e-08, -1.450038031582236e-08, 0.000000000000000e+00, -1.450075144404879e-08, -1.450038031582236e-08, 0.000000000000000e+00, -1.450075144404879e-08, -1.975622998595224e-05, 0.000000000000000e+00, -1.976130453515903e-05, -1.975648336809431e-05, 0.000000000000000e+00, -1.976196515240073e-05, -1.976673432496392e-05, 0.000000000000000e+00, -1.976895961112555e-05, -1.973620845873381e-05, 0.000000000000000e+00, -1.973949608621464e-05, -1.976787321254503e-05, 0.000000000000000e+00, -1.974695258657027e-05, -1.976787321254503e-05, 0.000000000000000e+00, -1.974695258657027e-05, -1.289052297090884e-02, 0.000000000000000e+00, -1.286040020583993e-02, -1.291051992662868e-02, 0.000000000000000e+00, -1.287415844454494e-02, -1.315939630915357e-02, 0.000000000000000e+00, -1.318071007272936e-02, -1.280129547777763e-02, 0.000000000000000e+00, -1.279979164673912e-02, -1.272043373592258e-02, 0.000000000000000e+00, -1.265166399972345e-02, -1.272043373592258e-02, 0.000000000000000e+00, -1.265166399972345e-02, -1.541736862575114e+00, 0.000000000000000e+00, -1.432755474449658e+00, -1.538584436189201e+00, 0.000000000000000e+00, -1.408274056511409e+00, -7.455882016677653e-03, 0.000000000000000e+00, -6.865624026224528e-03, -2.209929456530578e+00, 0.000000000000000e+00, -2.136135198710042e+00, -1.325263154554128e+00, 0.000000000000000e+00, -3.344148837285790e+00, -1.325263154554127e+00, 0.000000000000000e+00, -3.344148837285793e+00, -7.577283424603906e+00, 0.000000000000000e+00, -7.500747854768675e+00, -7.983144325485612e+00, 0.000000000000000e+00, -7.941489955469302e+00, -4.354511119997952e+00, 0.000000000000000e+00, -4.369366825461988e+00, -6.943326344320565e+00, 0.000000000000000e+00, -6.754910406688770e+00, -7.565588163784759e+00, 0.000000000000000e+00, -1.920076474826960e+01, -7.565588163784778e+00, 0.000000000000000e+00, -1.920076474826965e+01, -4.237016985691172e-06, 0.000000000000000e+00, -4.240959916814360e-06, -4.236782998299183e-06, 0.000000000000000e+00, -4.240734934293043e-06, -4.236974263554786e-06, 0.000000000000000e+00, -4.240930880564626e-06, -4.236773944281372e-06, 0.000000000000000e+00, -4.240726851203072e-06, -4.236921091509945e-06, 0.000000000000000e+00, -4.240851582694970e-06, -4.236921091509945e-06, 0.000000000000000e+00, -4.240851582694970e-06, -1.591341141675966e-04, 0.000000000000000e+00, -1.591628268382964e-04, -1.557670746708510e-04, 0.000000000000000e+00, -1.559074745406028e-04, -1.596356503512667e-04, 0.000000000000000e+00, -1.595627948148433e-04, -1.567529757149348e-04, 0.000000000000000e+00, -1.566058078508528e-04, -1.567367749772700e-04, 0.000000000000000e+00, -1.573950865156129e-04, -1.567367749772700e-04, 0.000000000000000e+00, -1.573950865156129e-04, -2.478531907735864e-02, 0.000000000000000e+00, -2.505922046284945e-02, -1.980846145811135e-02, 0.000000000000000e+00, -1.979494604091051e-02, -3.566059430238400e-02, 0.000000000000000e+00, -3.129832326779311e-02, -3.399499447184521e-02, 0.000000000000000e+00, -2.978443113507558e-02, -2.155685965627411e-02, 0.000000000000000e+00, -2.630079310302630e-02, -2.155685965627411e-02, 0.000000000000000e+00, -2.630079310302630e-02, -2.736169257055804e+00, 0.000000000000000e+00, -2.772685130952530e+00, -9.791561271858353e-01, 0.000000000000000e+00, -9.688561768837058e-01, -3.130014551449954e+00, 0.000000000000000e+00, -3.010799957360739e+00, -2.409953848988128e-04, 0.000000000000000e+00, -2.414431007160667e-04, -2.870727399533568e+00, 0.000000000000000e+00, -3.312310736834032e+00, -2.870727399533568e+00, 0.000000000000000e+00, -3.312310736834032e+00, -9.747840862318155e+00, 0.000000000000000e+00, -8.437091967431849e+00, -8.393050342588511e+00, 0.000000000000000e+00, -7.749125183195537e+00, -4.780418080182331e+01, 0.000000000000000e+00, -5.317618861337845e+01, -4.825856738633675e+00, 0.000000000000000e+00, -4.651519399051279e+00, -2.377397008902474e+01, 0.000000000000000e+00, -2.334774516576695e+01, -2.377397008902467e+01, 0.000000000000000e+00, -2.334774516576691e+01, -2.795820168443025e-02, 0.000000000000000e+00, -2.754091711096885e-02, -2.793872748149039e-02, 0.000000000000000e+00, -2.752654780360699e-02, -2.794551618513197e-02, 0.000000000000000e+00, -2.753163775645229e-02, -2.795211650688576e-02, 0.000000000000000e+00, -2.753656553637053e-02, -2.794896699690931e-02, 0.000000000000000e+00, -2.753419738380566e-02, -2.794896699690931e-02, 0.000000000000000e+00, -2.753419738380566e-02, -3.139608411009921e-02, 0.000000000000000e+00, -3.098608524253199e-02, -4.498322863835340e-02, 0.000000000000000e+00, -4.435690638225553e-02, -4.078406521695863e-02, 0.000000000000000e+00, -4.018981793634518e-02, -3.688317043338971e-02, 0.000000000000000e+00, -3.639956769992101e-02, -3.887336161685188e-02, 0.000000000000000e+00, -3.834091413279249e-02, -3.887336161685188e-02, 0.000000000000000e+00, -3.834091413279249e-02, -1.636976607651569e-02, 0.000000000000000e+00, -1.629201747461146e-02, -5.483393849671607e-01, 0.000000000000000e+00, -5.416922948559035e-01, -3.583525619710404e-01, 0.000000000000000e+00, -3.514212730274302e-01, -1.742145030160403e-01, 0.000000000000000e+00, -1.709522722650203e-01, -2.546177760752579e-01, 0.000000000000000e+00, -2.558795464137191e-01, -2.546177760752582e-01, 0.000000000000000e+00, -2.558795464137192e-01, -6.242289109161569e-02, 0.000000000000000e+00, -6.111841350842184e-02, -3.988999414604232e+00, 0.000000000000000e+00, -3.992721819515632e+00, -3.875175830982738e+00, 0.000000000000000e+00, -3.948832963315325e+00, -2.224374696528911e-01, 0.000000000000000e+00, -2.113557912737895e-01, -4.653698372501111e+00, 0.000000000000000e+00, -5.343508263421104e+00, -4.653698372501114e+00, 0.000000000000000e+00, -5.343508263421109e+00, -6.001693993028486e+00, 0.000000000000000e+00, -6.126290194467921e+00, -2.999576301834729e+01, 0.000000000000000e+00, -5.313238048017121e+01, -1.851161345583965e+01, 0.000000000000000e+00, -1.970652365016537e+01, -5.207157036130612e+00, 0.000000000000000e+00, -5.088129796978174e+00, -4.901178342715230e+01, 0.000000000000000e+00, -2.423936996994675e+01, -4.901178342715237e+01, 0.000000000000000e+00, -2.423936996994683e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
