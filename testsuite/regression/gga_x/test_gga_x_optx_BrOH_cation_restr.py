
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_optx_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_optx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.110131742001219e+01, -2.110136236129090e+01, -2.110160263498230e+01, -2.110093318607656e+01, -2.110127819759618e+01, -2.110127819759618e+01, -3.468440016919159e+00, -3.468420651786011e+00, -3.468059309209076e+00, -3.469347875985070e+00, -3.468500409031194e+00, -3.468500409031194e+00, -6.893220637419897e-01, -6.892607228409779e-01, -6.917236719803733e-01, -6.963146950837330e-01, -6.944252410246129e-01, -6.944252410246129e-01, -2.300041094167308e-01, -2.292682124821064e-01, -7.968135213014039e-01, -2.154726642415911e-01, -2.198253888770220e-01, -2.198253888770220e-01, -1.447419708295642e-02, -1.523210169125143e-02, -8.149942425119475e-02, -8.366291448581080e-03, -1.050969234092903e-02, -1.050969234092904e-02, -5.115746690386096e+00, -5.116165441444913e+00, -5.115771891610299e+00, -5.116141424694907e+00, -5.115955194356562e+00, -5.115955194356562e+00, -2.091847224807727e+00, -2.100754761683943e+00, -2.095432988561817e+00, -2.103101589136321e+00, -2.095246963087665e+00, -2.095246963087665e+00, -5.822385175266677e-01, -6.228884939785779e-01, -5.411171547767241e-01, -5.521771954856999e-01, -5.898237995356896e-01, -5.898237995356896e-01, -1.815455423431476e-01, -2.630398695289873e-01, -1.713701174108207e-01, -1.875658737540917e+00, -1.921717550723983e-01, -1.921717550723983e-01, -6.455946895479304e-03, -8.178672887840641e-03, -6.252631351680878e-03, -1.246459312944644e-01, -7.532526693339861e-03, -7.532526693339862e-03, -5.754265227383358e-01, -5.727794183650105e-01, -5.736441262698039e-01, -5.744095126017930e-01, -5.740200477277577e-01, -5.740200477277577e-01, -5.597525099626336e-01, -5.048049663152313e-01, -5.155195429446680e-01, -5.300719178922683e-01, -5.220276005938175e-01, -5.220276005938175e-01, -6.532043200359374e-01, -2.974392275727893e-01, -3.189635691698360e-01, -3.613431225295892e-01, -3.347675812245390e-01, -3.347675812245390e-01, -4.657501329492867e-01, -7.832133447952130e-02, -1.042117191618470e-01, -3.392699607675758e-01, -1.484302634062912e-01, -1.484302634062912e-01, -2.040780525029183e-02, -2.186954917767187e-03, -4.589909219167341e-03, -1.419893404172089e-01, -6.970097496433268e-03, -6.970097496433264e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_optx_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_optx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.688556314230639e+01, -2.688568351945865e+01, -2.688616899749367e+01, -2.688437898499276e+01, -2.688532400997844e+01, -2.688532400997844e+01, -4.273873043294604e+00, -4.273963280653296e+00, -4.276151210365411e+00, -4.273155308842581e+00, -4.274084261052946e+00, -4.274084261052946e+00, -7.689212995058721e-01, -7.663494938218722e-01, -6.993161091691789e-01, -7.074924402935211e-01, -7.076463946671485e-01, -7.076463946671485e-01, -1.429236344063989e-01, -1.454904524265669e-01, -9.143263296365989e-01, -1.391781929010494e-01, -1.312715142335955e-01, -1.312715142335957e-01, -1.925167690466649e-02, -2.025284935128334e-02, -1.018704538796087e-01, -1.114636795328415e-02, -1.399350321304873e-02, -1.399350321304874e-02, -6.647132622702335e+00, -6.650150070431234e+00, -6.647267860954449e+00, -6.649931929666275e+00, -6.648665817536369e+00, -6.648665817536369e+00, -2.065871220493877e+00, -2.093232889825568e+00, -2.026822807966780e+00, -2.050926973491139e+00, -2.099994584722566e+00, -2.099994584722566e+00, -7.301820769033154e-01, -8.258558794678048e-01, -6.683259524782852e-01, -7.287422597228636e-01, -7.476838528614143e-01, -7.476838528614143e-01, -1.642639981103512e-01, -1.583325124571029e-01, -1.615506880153371e-01, -2.488326236760337e+00, -1.426077667607647e-01, -1.426077667607647e-01, -8.603348000076224e-03, -1.089609240553980e-02, -8.326979672805920e-03, -1.380704370967768e-01, -1.003160658722083e-02, -1.003160658722083e-02, -7.667017459167337e-01, -7.598039030744710e-01, -7.624748929275774e-01, -7.644830632751868e-01, -7.635011940728892e-01, -7.635011940728892e-01, -7.462185859777679e-01, -5.675026718142501e-01, -6.299302730527591e-01, -6.848386586033025e-01, -6.582964590540233e-01, -6.582964590540233e-01, -8.651003512916440e-01, -1.811978098728300e-01, -2.286491630471242e-01, -3.887679471671529e-01, -2.986764457704574e-01, -2.986764457704574e-01, -5.199548949622157e-01, -9.870334130447680e-02, -1.249903336782032e-01, -3.975143278114784e-01, -1.432027382321651e-01, -1.432027382321653e-01, -2.709132909347630e-02, -2.915567169045966e-03, -6.117481361948432e-03, -1.423141104504193e-01, -9.282989867876401e-03, -9.282989867876406e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_optx_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_optx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-3.163603445585234e-09, -3.163500165799161e-09, -3.163139203990278e-09, -3.164673836487340e-09, -3.163855714878968e-09, -3.163855714878968e-09, -5.612856524605882e-06, -5.612084442465385e-06, -5.593667362501557e-06, -5.621391645836235e-06, -5.611389732329952e-06, -5.611389732329952e-06, -5.356392963033945e-03, -5.408329386255756e-03, -6.688330280180230e-03, -6.446528560848132e-03, -6.477131827933057e-03, -6.477131827933057e-03, -1.214325681388973e+00, -1.180632442109097e+00, -2.749588032779968e-03, -2.009493525968347e+00, -1.757446851491214e+00, -1.757446851491213e+00, -6.982338087547988e+00, -7.376242483990358e+00, -4.074659684505902e+00, -6.346747516516315e+00, -8.062586181954289e+00, -8.062586181954680e+00, -7.032956167891919e-07, -6.983029471375983e-07, -7.030850411048521e-07, -6.986772455134728e-07, -7.007544292592383e-07, -7.007544292592383e-07, -8.380294390906652e-05, -8.096009622290819e-05, -8.659408997515359e-05, -8.403707085964173e-05, -8.086333055836538e-05, -8.086333055836538e-05, -6.277026749309136e-03, -1.553990426477435e-03, -9.341625852681695e-03, -3.348161836031183e-03, -5.446305559047447e-03, -5.446305559047447e-03, -2.620768821141346e+00, -8.733507044818426e-01, -2.918691424195916e+00, -1.790752446815093e-05, -2.948928920591941e+00, -2.948928920591941e+00, -8.363000782236954e+00, -7.469586626587916e+00, -4.690700396760866e+01, -4.472432824732989e+00, -2.182857224098651e+01, -2.182857224098191e+01, -7.706160967635197e-04, -2.076988024135202e-03, -1.625295106510486e-03, -1.245096846910648e-03, -1.435905275148660e-03, -1.435905275148660e-03, -4.138270057122530e-04, -1.820410218953518e-02, -1.206436310923110e-02, -6.697401914113194e-03, -9.293586208662523e-03, -9.293586208662523e-03, -1.399572672916068e-03, -4.541864780839039e-01, -2.590856239240216e-01, -7.809706548324016e-02, -1.530373669082212e-01, -1.530373669082212e-01, -2.564093887607982e-02, -3.722859110877808e+00, -3.671354498208804e+00, -7.769838431459682e-02, -4.782222632934422e+00, -4.782222632934419e+00, -5.625289670132479e+00, -3.666056335035071e+01, -1.774182345375562e+01, -4.885818860234985e+00, -2.757165333160499e+01, -2.757165333159609e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
