
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_ncap_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ncap", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.099457814942145e+01, -2.099460049102491e+01, -2.099477907795143e+01, -2.099441165701160e+01, -2.099458927196054e+01, -2.099458927196054e+01, -3.485561881524186e+00, -3.485530033650482e+00, -3.484798858867140e+00, -3.486798345786409e+00, -3.485560349183908e+00, -3.485560349183908e+00, -7.031900599850599e-01, -7.033220775563400e-01, -7.092857718712563e-01, -7.134398633006016e-01, -7.032338853997467e-01, -7.032338853997467e-01, -2.228480740703334e-01, -2.232258406249376e-01, -8.165132923692128e-01, -1.979881595120629e-01, -2.229253656329593e-01, -2.229253656329593e-01, -1.880949701850382e-01, -1.846541662199093e-01, -1.606010085211308e-01, -2.800609510733795e-01, -1.829694234016327e-01, -1.829694234016327e-01, -5.040829442720219e+00, -5.040150662704276e+00, -5.040766514787157e+00, -5.040238608464852e+00, -5.040471911804428e+00, -5.040471911804428e+00, -2.135614798111012e+00, -2.144616790033633e+00, -2.138071143828269e+00, -2.145050188379079e+00, -2.138603949568151e+00, -2.138603949568151e+00, -5.755846890868888e-01, -5.957358233150229e-01, -5.484523324671047e-01, -5.481271858057629e-01, -5.929925856508655e-01, -5.929925856508655e-01, -1.836451721342165e-01, -2.517077552670711e-01, -1.779408120023778e-01, -1.812269001186958e+00, -1.844852133104923e-01, -1.844852133104923e-01, -2.781353646930508e-01, -2.644243516702835e-01, -2.052445973749275e-01, -1.564979069475890e-01, -2.394548350800857e-01, -2.394548350800857e-01, -5.586729287915304e-01, -5.616726095634743e-01, -5.606026161388762e-01, -5.597684023124214e-01, -5.601854231971761e-01, -5.601854231971761e-01, -5.397832069642856e-01, -5.195793588316442e-01, -5.251044245634995e-01, -5.301753771165206e-01, -5.273859188421119e-01, -5.273859188421119e-01, -6.256581728318755e-01, -2.918803317788415e-01, -3.215305123419930e-01, -3.693223470746431e-01, -3.430204558541945e-01, -3.430204558541944e-01, -4.718578393849329e-01, -1.711052177569170e-01, -1.637643950345842e-01, -3.380834053624027e-01, -1.594324718839307e-01, -1.594324718839307e-01, -1.954933867408668e-01, -3.472174811713122e-01, -2.936166283494924e-01, -1.515174300853073e-01, -2.234423219658064e-01, -2.234423219658067e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_ncap_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ncap", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.503892283236883e+01, -2.503901255664413e+01, -2.503941573915399e+01, -2.503794642282980e+01, -2.503897012563198e+01, -2.503897012563198e+01, -4.012095146399530e+00, -4.012138675506776e+00, -4.013500624393789e+00, -4.012004751843253e+00, -4.012134625597295e+00, -4.012134625597295e+00, -7.424870963370930e-01, -7.411876814662922e-01, -7.078625091113225e-01, -7.141271586003464e-01, -7.420153387779339e-01, -7.420153387779339e-01, -1.915692711404328e-01, -1.947217932675380e-01, -9.084648346591574e-01, -1.298545206461474e-01, -1.925198489106148e-01, -1.925198489106148e-01, 9.309917587707538e-02, 9.079289894447606e-02, 1.843730605803996e-02, 1.382702634624214e-01, 8.997759158240641e-02, 8.997759158240641e-02, -6.179850634878417e+00, -6.182686563381576e+00, -6.180140131158664e+00, -6.182345230310108e+00, -6.181305475291894e+00, -6.181305475291894e+00, -2.136728135072753e+00, -2.154754528290977e+00, -2.126553192132996e+00, -2.140569095865267e+00, -2.162327896431443e+00, -2.162327896431443e+00, -6.752217859281688e-01, -7.660123303216885e-01, -6.385627273087786e-01, -6.914250845706372e-01, -7.057834592509739e-01, -7.057834592509739e-01, -7.683231885523113e-02, -1.871025867848861e-01, -7.780926860426908e-02, -2.329641683862830e+00, -1.037419689075007e-01, -1.037419689075007e-01, 1.370629665585111e-01, 1.317284929825622e-01, 1.020555266083162e-01, -2.017091986130939e-02, 1.193274949844713e-01, 1.193274949844714e-01, -7.370192612792795e-01, -7.253210816155198e-01, -7.294664711971378e-01, -7.327082071559141e-01, -7.310829224677164e-01, -7.310829224677164e-01, -7.146418936377781e-01, -5.674567251057659e-01, -6.071663660289297e-01, -6.468249839315559e-01, -6.264856251820433e-01, -6.264856251820433e-01, -8.018766932521988e-01, -2.406170281500727e-01, -2.916873382102612e-01, -3.911143832575777e-01, -3.371509026615867e-01, -3.371509026615866e-01, -5.095020561077831e-01, 3.202398875563688e-02, -2.413687400106385e-03, -3.773358644462467e-01, -5.601290678119780e-02, -5.601290678119788e-02, 9.549163907961500e-02, 1.504149251900784e-01, 1.381661162071771e-01, -5.380477115725342e-02, 1.107742045197332e-01, 1.107742045197333e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_ncap_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ncap", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-7.479193050687162e-09, -7.479143758798944e-09, -7.478836654774426e-09, -7.479645567218974e-09, -7.479167784775186e-09, -7.479167784775186e-09, -1.016811770399535e-05, -1.016830618002409e-05, -1.017180640407838e-05, -1.015715448922642e-05, -1.016804138337806e-05, -1.016804138337806e-05, -6.635797119927159e-03, -6.642679566293750e-03, -6.762844439824992e-03, -6.587483949251812e-03, -6.638409784884215e-03, -6.638409784884215e-03, -8.217853732452813e-01, -8.009021471548134e-01, -3.481186426735503e-03, -2.016523563332711e+00, -8.157120798159391e-01, -8.157120798159391e-01, -1.535402761372933e+04, -1.311752929042613e+04, -9.267262884862416e+01, -1.733496098756437e+05, -1.367114236884934e+04, -1.367114236884934e+04, -2.192581084775271e-06, -2.192499149385109e-06, -2.192564385138874e-06, -2.192500837940499e-06, -2.192551463316918e-06, -2.192551463316918e-06, -8.208146834045966e-05, -8.038217715690733e-05, -8.218211542200285e-05, -8.085368276101669e-05, -8.079396089364270e-05, -8.079396089364270e-05, -1.344102527314667e-02, -1.068993381558975e-02, -1.641678715792764e-02, -1.523820049693823e-02, -1.177352172754901e-02, -1.177352172754901e-02, -5.372504712232160e+00, -6.270938843753673e-01, -5.744840032553087e+00, -1.248635725645450e-04, -3.436481098678161e+00, -3.436481098678161e+00, -1.974035444500069e+05, -1.262736570205940e+05, -3.936030913431445e+05, -2.924968787841091e+01, -1.837378923078385e+05, -1.837378923078384e+05, -1.334166330794574e-02, -1.345901666396138e-02, -1.343145471556625e-02, -1.340149415915301e-02, -1.341771377443120e-02, -1.341771377443119e-02, -1.520834381052599e-02, -2.158866533416555e-02, -1.965973379530006e-02, -1.800198220896042e-02, -1.885230585936382e-02, -1.885230585936382e-02, -8.820450320935961e-03, -2.957719679194965e-01, -1.773480988382219e-01, -8.697258063804075e-02, -1.255214283989776e-01, -1.255214283989777e-01, -3.206725114621850e-02, -1.182912279911536e+02, -4.134298620075144e+01, -1.181041276221868e-01, -1.176079833846179e+01, -1.176079833846179e+01, -8.570969365907362e+03, -1.020793683957058e+07, -1.193555752196590e+06, -1.423663828566924e+01, -3.370074809237564e+05, -3.370074809237581e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
