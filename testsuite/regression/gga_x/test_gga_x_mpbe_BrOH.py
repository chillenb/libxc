
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_mpbe_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_mpbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.095899139527723e+01, -2.095901463668903e+01, -2.095919574813938e+01, -2.095881362204871e+01, -2.095900300479741e+01, -2.095900300479741e+01, -3.477454681199502e+00, -3.477424150726037e+00, -3.476728830279843e+00, -3.478664794061967e+00, -3.477453791905489e+00, -3.477453791905489e+00, -7.004094533614575e-01, -7.005121647777508e-01, -7.055043292688585e-01, -7.096970361650087e-01, -7.004427749116101e-01, -7.004427749116101e-01, -2.197547978218020e-01, -2.204360332131822e-01, -8.141138862257579e-01, -1.844582083008856e-01, -2.199318316440750e-01, -2.199318316440750e-01, -1.689694496739351e-02, -1.769690657836170e-02, -7.090637686944697e-02, -8.112800147483130e-03, -1.751252598899991e-02, -1.751252598899991e-02, -5.034735549922316e+00, -5.034109918318335e+00, -5.034677931156361e+00, -5.034191353498626e+00, -5.034405465890933e+00, -5.034405465890933e+00, -2.124384203271063e+00, -2.133591085810828e+00, -2.126459645466722e+00, -2.133609066320317e+00, -2.127974583099508e+00, -2.127974583099508e+00, -5.744403246156843e-01, -5.954893817536565e-01, -5.472884181850373e-01, -5.477325876688093e-01, -5.919659781227392e-01, -5.919659781227392e-01, -1.483194834960116e-01, -2.423768684118541e-01, -1.457064341362918e-01, -1.811511979098297e+00, -1.638141146543800e-01, -1.638141146543800e-01, -7.826376545231935e-03, -8.943751663041250e-03, -6.703469436310949e-03, -9.691290445242440e-02, -8.149126425581119e-03, -8.149126425581119e-03, -5.586305723686761e-01, -5.614763062741116e-01, -5.604670757733252e-01, -5.596762171808263e-01, -5.600720359244482e-01, -5.600720359244482e-01, -5.397603812778892e-01, -5.178730589511775e-01, -5.239254072118739e-01, -5.294893056402009e-01, -5.264548052975213e-01, -5.264548052975213e-01, -6.253681406452728e-01, -2.864020957935882e-01, -3.184728347475256e-01, -3.678847252693397e-01, -3.410313284109954e-01, -3.410313284109954e-01, -4.702051397408139e-01, -6.592432447120361e-02, -8.811354301214143e-02, -3.371092669190757e-01, -1.222250457536441e-01, -1.222250457536441e-01, -1.979906214158347e-02, -2.449186138734759e-03, -4.652299378034111e-03, -1.165148559735540e-01, -6.925898135931991e-03, -6.925898135931985e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_mpbe_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_mpbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.509326076072746e+01, -2.509334968871397e+01, -2.509375075805996e+01, -2.509229445138578e+01, -2.509330762202534e+01, -2.509330762202534e+01, -4.022933000524056e+00, -4.022975445526824e+00, -4.024308072663089e+00, -4.022865055969347e+00, -4.022971968295593e+00, -4.022971968295593e+00, -7.461064668281876e-01, -7.448673684060302e-01, -7.142912439196702e-01, -7.203806324667811e-01, -7.456561713976460e-01, -7.456561713976460e-01, -2.022445508256587e-01, -2.039831921549757e-01, -9.114401217247137e-01, -1.768744577887829e-01, -2.027334479590820e-01, -2.027334479590820e-01, -2.248172455184677e-02, -2.354091581822889e-02, -9.120871329416358e-02, -1.081282307290819e-02, -2.329575649314471e-02, -2.329575649314471e-02, -6.190361733074646e+00, -6.193134333085193e+00, -6.190644923073665e+00, -6.192800780640392e+00, -6.191783910973863e+00, -6.191783910973863e+00, -2.155540388532864e+00, -2.172781553720767e+00, -2.146693432170101e+00, -2.160029305125410e+00, -2.179099980007323e+00, -2.179099980007323e+00, -6.768565104672667e-01, -7.665443998846679e-01, -6.401796251222288e-01, -6.922024868650781e-01, -7.073376234320058e-01, -7.073376234320058e-01, -1.634399993709390e-01, -2.226301933067092e-01, -1.590339769611363e-01, -2.331273995447653e+00, -1.664721337746146e-01, -1.664721337746146e-01, -1.043124625101341e-02, -1.191912415969055e-02, -8.933774788930059e-03, -1.188428814424533e-01, -1.086009738489277e-02, -1.086009738489276e-02, -7.371234611168047e-01, -7.257538550420219e-01, -7.297767428298785e-01, -7.329256865760077e-01, -7.313463860586420e-01, -7.313463860586420e-01, -7.146992145351406e-01, -5.695552784659398e-01, -6.087656315229487e-01, -6.479824733687451e-01, -6.278839324428326e-01, -6.278839324428326e-01, -8.024931180564584e-01, -2.609795171672220e-01, -3.004999580396061e-01, -3.929695525028497e-01, -3.408558895505879e-01, -3.408558895505879e-01, -5.115523000655541e-01, -8.559403698405040e-02, -1.108993169089572e-01, -3.785485544227192e-01, -1.389407164922508e-01, -1.389407164922507e-01, -2.633182090426352e-02, -3.265425096578234e-03, -6.202067938171062e-03, -1.322325084409125e-01, -9.230528124560908e-03, -9.230528124560896e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_mpbe_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_mpbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-7.221466817002407e-09, -7.221419048225024e-09, -7.221121997897007e-09, -7.221905905513485e-09, -7.221442327084626e-09, -7.221442327084626e-09, -9.821656668733917e-06, -9.821837291365171e-06, -9.825178121618255e-06, -9.811093611669465e-06, -9.821582212671496e-06, -9.821582212671496e-06, -6.386593887444052e-03, -6.391731619681573e-03, -6.436699083148725e-03, -6.275122254136515e-03, -6.388580556295120e-03, -6.388580556295120e-03, -7.065716359691491e-01, -6.998783810595741e-01, -3.361917632291059e-03, -1.038404825366375e+00, -7.050566277332064e-01, -7.050566277332064e-01, -2.122349225054028e+00, -2.139281089771107e+00, -1.328144610826411e+00, -1.437719700477123e+00, -2.222110251395574e+00, -2.222110251395574e+00, -2.117086997770870e-06, -2.117029850740791e-06, -2.117073015107145e-06, -2.117028726697443e-06, -2.117069584336964e-06, -2.117069584336964e-06, -7.817966962791174e-05, -7.664921823661012e-05, -7.813975533098743e-05, -7.695257474082927e-05, -7.716607699061215e-05, -7.716607699061215e-05, -1.298039967880893e-02, -1.036485616627244e-02, -1.585565135402186e-02, -1.473419356589634e-02, -1.136805037547528e-02, -1.136805037547528e-02, -1.097321656199588e+00, -4.245392466775257e-01, -1.269749839924609e+00, -1.210598321359853e-04, -1.255033168335971e+00, -1.255033168335971e+00, -1.524503309373315e+00, -1.532629743976647e+00, -4.383685063250985e+00, -1.609851952724283e+00, -2.264051481101466e+00, -2.264051481096250e+00, -1.306955377659910e-02, -1.306253109883478e-02, -1.306515532073852e-02, -1.306729001184247e-02, -1.306627555688456e-02, -1.306627555688456e-02, -1.494505765275054e-02, -2.083520367349129e-02, -1.898914362805723e-02, -1.738101989976425e-02, -1.820342683656776e-02, -1.820342683656776e-02, -8.546805203228019e-03, -2.406882029578496e-01, -1.606648974297083e-01, -8.373456957176378e-02, -1.188833669978487e-01, -1.188833669978488e-01, -3.092710491452897e-02, -1.048063370944657e+00, -1.260821795778833e+00, -1.140652486617579e-01, -1.804792758056025e+00, -1.804792758056028e+00, -1.610680774493118e+00, -2.603223356782867e+00, -2.248725005809299e+00, -2.220776460859039e+00, -3.300603431724537e+00, -3.300603431731049e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
