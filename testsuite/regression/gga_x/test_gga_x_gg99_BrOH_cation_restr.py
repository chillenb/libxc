
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_gg99_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_gg99", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.104443518967877e+01, -2.104445314253278e+01, -2.104461642206319e+01, -2.104434760253359e+01, -2.104447658752994e+01, -2.104447658752994e+01, -3.509238153835449e+00, -3.509186332361438e+00, -3.508074487122542e+00, -3.510674184372824e+00, -3.509260614257615e+00, -3.509260614257615e+00, -7.125440000271266e-01, -7.127767087815354e-01, -7.208318607512386e-01, -7.254496686484512e-01, -7.233784888675759e-01, -7.233784888675759e-01, -2.328192895275405e-01, -2.329637603812212e-01, -8.202185028213335e-01, -2.117228595460183e-01, -2.178364749443866e-01, -2.178364749443866e-01, 0.000000000000000e+00, 0.000000000000000e+00, -1.351176053874802e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -5.036474167387957e+00, -5.035360477917897e+00, -5.036436014699182e+00, -5.035452643227778e+00, -5.035902376343799e+00, -5.035902376343799e+00, -2.181766887162449e+00, -2.190417512830283e+00, -2.186623904640070e+00, -2.194246216106106e+00, -2.184200559269432e+00, -2.184200559269432e+00, -5.851212658038957e-01, -5.985683881385857e-01, -5.470385211160409e-01, -5.347589275104407e-01, -5.898009140056067e-01, -5.898009140056067e-01, -1.891000198169229e-01, -2.599988953541668e-01, -1.818957556049136e-01, -1.800176730752235e+00, -1.904353472083074e-01, -1.904353472083074e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.516351826694149e-01, 0.000000000000000e+00, 0.000000000000000e+00, -5.445451941783140e-01, -5.498360397967071e-01, -5.479992096830816e-01, -5.464548242935892e-01, -5.472285378844751e-01, -5.472285378844751e-01, -5.273130138492446e-01, -5.212655995533698e-01, -5.230190233572470e-01, -5.241111303340525e-01, -5.233223968312301e-01, -5.233223968312301e-01, -6.290275431835924e-01, -2.997272183551061e-01, -3.289426932017505e-01, -3.749969845043217e-01, -3.493478186147654e-01, -3.493478186147653e-01, -4.813895546332901e-01, -1.357662584246099e-01, -1.480510797808165e-01, -3.478861890279861e-01, -1.595439860791973e-01, -1.595439860791972e-01, -9.046330506682088e-02, 0.000000000000000e+00, 0.000000000000000e+00, -1.564191987390938e-01, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_gg99_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_gg99", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.439924406160235e+01, -2.439934886329861e+01, -2.439977682682580e+01, -2.439821838975530e+01, -2.439904036713331e+01, -2.439904036713331e+01, -3.903266207085381e+00, -3.903320120553753e+00, -3.904663466853092e+00, -3.903070794096498e+00, -3.903424941026295e+00, -3.903424941026295e+00, -7.301838230881598e-01, -7.288536143824784e-01, -6.976417220184842e-01, -7.039449054465171e-01, -7.030170678125526e-01, -7.030170678125526e-01, -1.793068617229745e-01, -1.820405550129493e-01, -8.572443365282917e-01, -1.387831915809359e-01, -1.537272351912673e-01, -1.537272351912673e-01, 0.000000000000000e+00, 0.000000000000000e+00, -5.377975377280830e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -6.036844191795884e+00, -6.040019889289050e+00, -6.036984696427138e+00, -6.039788249115129e+00, -6.038456529746922e+00, -6.038456529746922e+00, -2.086637124063174e+00, -2.104281434450065e+00, -2.070121466747613e+00, -2.085571860643694e+00, -2.104547666198542e+00, -2.104547666198542e+00, -6.641128205284118e-01, -7.588852985947655e-01, -6.099908434448550e-01, -6.663421527719318e-01, -6.788833430781304e-01, -6.788833430781304e-01, -1.035582707032155e-01, -1.809481830033520e-01, -9.720962360219029e-02, -2.288561110329711e+00, -1.157327091909413e-01, -1.157327091909413e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -7.172271644458807e-02, 0.000000000000000e+00, 0.000000000000000e+00, -7.132690652323886e-01, -6.987089764881927e-01, -7.037174455702245e-01, -7.079505965376971e-01, -7.058230608259350e-01, -7.058230608259350e-01, -6.971465246236528e-01, -5.369722993409667e-01, -5.767007142787584e-01, -6.214815346071034e-01, -5.981551759428546e-01, -5.981551759428546e-01, -7.938039174571310e-01, -2.269442854552430e-01, -2.734876712284656e-01, -3.756663594799214e-01, -3.187335428316157e-01, -3.187335428316155e-01, -4.935730238198171e-01, -5.296321929924389e-02, -6.364037432248751e-02, -3.694476285036319e-01, -8.402908079061090e-02, -8.402908079061089e-02, -2.568714283563458e-02, 0.000000000000000e+00, 0.000000000000000e+00, -8.029693743417640e-02, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_gg99_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_gg99", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-9.266546428603284e-09, -9.266487518535547e-09, -9.266122396684832e-09, -9.267000983881461e-09, -9.266555294354016e-09, -9.266555294354016e-09, -1.241466899564583e-05, -1.241510129267654e-05, -1.242387904522364e-05, -1.239919871500170e-05, -1.241399025428399e-05, -1.241399025428399e-05, -7.842435474733199e-03, -7.847439923415318e-03, -7.902683675823247e-03, -7.683566198606515e-03, -7.760179065836471e-03, -7.760179065836471e-03, -9.723508000997988e-01, -9.475820305380528e-01, -4.388824915207228e-03, -1.947022060832670e+00, -1.484780751455275e+00, -1.484780751455275e+00, 0.000000000000000e+00, 0.000000000000000e+00, -7.577774160996326e+01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -2.744427007565533e-06, -2.745051459513266e-06, -2.744435728750472e-06, -2.744987326878129e-06, -2.744754893637673e-06, -2.744754893637673e-06, -9.528864883040863e-05, -9.337129258128561e-05, -9.543191034477829e-05, -9.373060016816679e-05, -9.415874128649012e-05, -9.415874128649012e-05, -1.578903001910799e-02, -1.306823265654479e-02, -2.097925943128366e-02, -2.085106198180614e-02, -1.511244501065607e-02, -1.511244501065607e-02, -5.005107360473968e+00, -7.522796874409490e-01, -6.335835012340494e+00, -1.593213552441168e-04, -3.586355895960803e+00, -3.586355895960803e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -2.074597014417854e+01, 0.000000000000000e+00, 0.000000000000000e+00, -1.847221167025870e-02, -1.831382239719376e-02, -1.837239441744800e-02, -1.841922087694828e-02, -1.839616397985769e-02, -1.839616397985769e-02, -2.080627188603647e-02, -2.725314238520876e-02, -2.534710244027753e-02, -2.362409352083442e-02, -2.452854629184287e-02, -2.452854629184287e-02, -1.076260521711726e-02, -3.641541631552034e-01, -2.175379611107965e-01, -1.043805369586077e-01, -1.523982129298476e-01, -1.523982129298476e-01, -3.762700286374267e-02, -8.327246870636327e+01, -3.518142237514545e+01, -1.337349444329385e-01, -1.125056479928394e+01, -1.125056479928394e+01, -4.484560754836125e+03, 0.000000000000000e+00, 0.000000000000000e+00, -1.333187396386260e+01, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
