
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_pw91_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pw91", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.105546661518816e+01, -2.105549370427185e+01, -2.105568300330989e+01, -2.105527855104736e+01, -2.105548068285283e+01, -2.105548068285283e+01, -3.491851525791673e+00, -3.491813772297405e+00, -3.491026545194713e+00, -3.493058335858727e+00, -3.491890434311996e+00, -3.491890434311996e+00, -7.003892629883089e-01, -7.003769339781521e-01, -7.018082486462589e-01, -7.066244320496736e-01, -7.047950315232616e-01, -7.047950315232616e-01, -2.158682053326829e-01, -2.168447397123270e-01, -8.087295858440681e-01, -1.846702274808891e-01, -1.964077754709764e-01, -1.964077754709764e-01, -1.576700652368422e-04, -1.898573153777201e-04, -2.464247961459590e-02, -2.800295251667456e-05, -6.357651425955382e-05, -6.357651425955360e-05, -5.059312671257548e+00, -5.058625379437538e+00, -5.059292186292928e+00, -5.058685286668921e+00, -5.058958237350409e+00, -5.058958237350409e+00, -2.119759421370042e+00, -2.129842234539554e+00, -2.120624828226595e+00, -2.129527342276941e+00, -2.124904882442891e+00, -2.124904882442891e+00, -5.838194655280727e-01, -6.047390432611643e-01, -5.445168423059976e-01, -5.394042962618059e-01, -5.895664833396514e-01, -5.895664833396514e-01, -1.389848706393364e-01, -2.331599845089637e-01, -1.282008837182684e-01, -1.819165556007236e+00, -1.579297611524521e-01, -1.579297611524521e-01, -1.464303951367245e-05, -2.840631375719924e-05, -3.213786977957821e-05, -7.625402938887119e-02, -3.831927000571535e-05, -3.831927000571522e-05, -5.514189645856740e-01, -5.556156046937898e-01, -5.542369753717081e-01, -5.530276969101707e-01, -5.536405553217807e-01, -5.536405553217807e-01, -5.340997878638549e-01, -5.128005616790359e-01, -5.197952753799369e-01, -5.258284620854057e-01, -5.226402265540352e-01, -5.226402265540352e-01, -6.352489147641267e-01, -2.765776758567497e-01, -3.108251114150401e-01, -3.672437642053254e-01, -3.364951124667739e-01, -3.364951124667739e-01, -4.732186691419358e-01, -2.101675919999542e-02, -4.636456076954194e-02, -3.438521731079899e-01, -1.093035965912670e-01, -1.093035965912670e-01, -4.068731063152578e-04, -1.165380610699630e-06, -7.618463091699262e-06, -1.012614967495790e-01, -3.408374772918868e-05, -3.408374772918847e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_pw91_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pw91", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.523202557061265e+01, -2.523211932590934e+01, -2.523252034256435e+01, -2.523112579089738e+01, -2.523185874685061e+01, -2.523185874685061e+01, -4.064307046683354e+00, -4.064344420021405e+00, -4.065308861451775e+00, -4.064404952412498e+00, -4.064449831095404e+00, -4.064449831095404e+00, -7.697461719219637e-01, -7.685732960722955e-01, -7.410625370975990e-01, -7.475058785199927e-01, -7.463718176010843e-01, -7.463718176010843e-01, -1.994756133193286e-01, -2.014186469493709e-01, -9.011711957566618e-01, -1.750533139286818e-01, -1.797802343238148e-01, -1.797802343238147e-01, -6.449299471966690e-04, -7.772220611104982e-04, -8.640588919286477e-02, -1.137242024049965e-04, -2.590962847028015e-04, -2.590962847028091e-04, -6.207972221877229e+00, -6.210459837323435e+00, -6.208084583037656e+00, -6.210280647485992e+00, -6.209233899687770e+00, -6.209233899687770e+00, -2.219907221308157e+00, -2.237391125246434e+00, -2.205227943432229e+00, -2.220552201320542e+00, -2.236817774429252e+00, -2.236817774429252e+00, -6.892278379767317e-01, -7.734505930374364e-01, -6.348998850067004e-01, -6.809123068483723e-01, -7.029106356086005e-01, -7.029106356086005e-01, -1.863432280496428e-01, -2.140557434860628e-01, -1.856187221148552e-01, -2.331550309282942e+00, -1.647896036383168e-01, -1.647896036383168e-01, -5.934582717152671e-05, -1.153860567534296e-04, -1.308423364115398e-04, -1.693835193762009e-01, -1.559988360632475e-04, -1.559988360632420e-04, -7.232496596913938e-01, -7.118781052368159e-01, -7.158721122544179e-01, -7.191820852072558e-01, -7.175306207997683e-01, -7.175306207997683e-01, -7.064171786402931e-01, -5.656522658696850e-01, -6.013341813281664e-01, -6.402587083187800e-01, -6.200519413991284e-01, -6.200519413991284e-01, -8.095967552178860e-01, -2.543039744835765e-01, -2.973929076235718e-01, -3.972470525485475e-01, -3.411975917315779e-01, -3.411975917315779e-01, -5.202764179409972e-01, -7.597755543067211e-02, -1.382682553425268e-01, -3.874690397819441e-01, -1.661019396234195e-01, -1.661019396234195e-01, -1.669740074004143e-03, -4.696009957068556e-06, -3.083052567453435e-05, -1.681073965184414e-01, -1.387228808747800e-04, -1.387228808747804e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_pw91_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pw91", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-7.195315560733539e-09, -7.195282865951112e-09, -7.195036431357185e-09, -7.195524964828218e-09, -7.195283345112506e-09, -7.195283345112506e-09, -9.466345377586099e-06, -9.466772404518100e-06, -9.475727004298703e-06, -9.452989765648396e-06, -9.465944593774229e-06, -9.465944593774229e-06, -5.853294067344668e-03, -5.854621646226446e-03, -5.839464347568417e-03, -5.680068886147550e-03, -5.738202002365308e-03, -5.738202002365308e-03, -6.551757102315530e-01, -6.463807875539090e-01, -3.288827508304239e-03, -9.655972408611030e-01, -8.915630587486449e-01, -8.915630587486448e-01, 6.423453028406375e+01, 6.827557267286481e+01, 3.210900316296983e+01, 5.580651435353141e+01, 7.237579484253787e+01, 7.237579484253892e+01, -2.175373667913571e-06, -2.177051082363009e-06, -2.175429213303742e-06, -2.176910221036939e-06, -2.176234716546843e-06, -2.176234716546843e-06, -7.026720365075691e-05, -6.890657113926260e-05, -7.024627372587048e-05, -6.904279358944258e-05, -6.952313957722755e-05, -6.952313957722755e-05, -1.213585074967009e-02, -1.095571189098611e-02, -1.601157884960572e-02, -1.710869450476057e-02, -1.169129391542303e-02, -1.169129391542303e-02, 3.470027811076385e-02, -4.395378937641066e-01, 6.402283447240288e-01, -1.341112177524199e-04, -1.188263967735123e+00, -1.188263967735123e+00, 7.269492161399847e+01, 6.575689945411101e+01, 4.185134430924916e+02, 1.076779835959258e+01, 1.946856773358504e+02, 1.946856773358417e+02, -1.729442238454512e-02, -1.540590134894492e-02, -1.575601087058778e-02, -1.621876055463541e-02, -1.595657327574754e-02, -1.595657327574754e-02, -2.002966012835985e-02, -2.036147482143609e-02, -1.926928464270037e-02, -1.858745595483744e-02, -1.891247220755265e-02, -1.891247220755265e-02, -8.965378726580268e-03, -2.413740285869559e-01, -1.542118052274912e-01, -7.758361279707160e-02, -1.113607143308794e-01, -1.113607143308794e-01, -2.808627377940557e-02, 3.118379491352767e+01, 2.010733808804066e+01, -1.005846235420178e-01, 1.780194853199090e+00, 1.780194853199088e+00, 5.325140751812776e+01, 3.090611879165956e+02, 1.529736577602024e+02, 3.439672648604719e+00, 2.455564165290284e+02, 2.455564165290232e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
