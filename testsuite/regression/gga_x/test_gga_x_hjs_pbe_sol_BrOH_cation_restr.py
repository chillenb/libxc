
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_hjs_pbe_sol_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_hjs_pbe_sol", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.041211819558634e+01, -2.041215673119784e+01, -2.041237545555252e+01, -2.041180114862262e+01, -2.041209533092693e+01, -2.041209533092693e+01, -3.309758558507760e+00, -3.309737958504500e+00, -3.309344575209486e+00, -3.310669095420842e+00, -3.309815137555378e+00, -3.309815137555378e+00, -6.061423286766723e-01, -6.059089161918467e-01, -6.017941635309240e-01, -6.065931694039883e-01, -6.050145266676934e-01, -6.050145266676934e-01, -1.390181862385627e-01, -1.401966866580786e-01, -7.116397998484786e-01, -1.094475877321810e-01, -1.202958887435553e-01, -1.202958887435553e-01, -2.952807650361152e-05, -3.472327728979156e-05, -1.223150412574331e-02, -5.472604591909943e-06, -1.094816548153584e-05, -1.094816548153581e-05, -4.886702618505963e+00, -4.886703489535883e+00, -4.886710363192186e+00, -4.886711012662190e+00, -4.886698761102291e+00, -4.886698761102291e+00, -1.938390593903881e+00, -1.949164511690151e+00, -1.936379670942054e+00, -1.945868170220652e+00, -1.945342521419734e+00, -1.945342521419734e+00, -5.047900523363659e-01, -5.376999488580321e-01, -4.652082352709423e-01, -4.713862927900249e-01, -5.117724495108826e-01, -5.117724495108826e-01, -7.433687722587397e-02, -1.529794098811149e-01, -6.671476793705604e-02, -1.738084669109626e+00, -8.660968654023093e-02, -8.660968654023093e-02, -2.503779586627155e-06, -5.110225698340313e-06, -2.276179533610417e-06, -3.511601221764023e-02, -3.988228765727506e-06, -3.988228765727502e-06, -4.894469810417931e-01, -4.896064522333148e-01, -4.895484810889766e-01, -4.894977230706701e-01, -4.895223116676892e-01, -4.895223116676892e-01, -4.736860608592772e-01, -4.281730745037076e-01, -4.404462335531595e-01, -4.529541331960706e-01, -4.463849545267839e-01, -4.463849545267839e-01, -5.671289518223714e-01, -1.935783932668915e-01, -2.275252774102118e-01, -2.885006587823580e-01, -2.549459128347263e-01, -2.549459128347262e-01, -3.902283353978276e-01, -1.091323331002370e-02, -2.317997591899177e-02, -2.697385556633910e-01, -5.130272778578555e-02, -5.130272778578551e-02, -9.081974616510220e-05, -9.701778758845570e-08, -8.979359639380435e-07, -4.670862369961244e-02, -3.156262034932055e-06, -3.156262034836001e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_hjs_pbe_sol_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_hjs_pbe_sol", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.556895944271480e+01, -2.556905169624480e+01, -2.556945057253053e+01, -2.556807825452515e+01, -2.556879892275604e+01, -2.556879892275604e+01, -4.069570957368844e+00, -4.069608862903508e+00, -4.070586547734933e+00, -4.069671468561606e+00, -4.069715993762574e+00, -4.069715993762574e+00, -7.201373211847486e-01, -7.188383444189765e-01, -6.873883162668250e-01, -6.940844658015837e-01, -6.930654919277996e-01, -6.930654919277996e-01, -1.354828503904538e-01, -1.383069198213303e-01, -8.540897691587980e-01, -1.012948655018327e-01, -1.115383801588974e-01, -1.115383801588970e-01, -6.053431676765230e-05, -7.147597554117179e-05, -2.126769013886250e-02, -1.098776992269406e-05, -2.208640850458932e-05, -2.208640850458864e-05, -6.234074496033403e+00, -6.236298932472021e+00, -6.234176195827408e+00, -6.236139959101522e+00, -6.235202463507500e+00, -6.235202463507500e+00, -2.176433181409515e+00, -2.195145644710685e+00, -2.159065888315178e+00, -2.175525179607454e+00, -2.195270146889442e+00, -2.195270146889442e+00, -6.409810026253732e-01, -7.204977527283130e-01, -5.860532563960051e-01, -6.288532019968568e-01, -6.546597131570007e-01, -6.546597131570007e-01, -7.970637932022230e-02, -1.417950690249455e-01, -7.391146930294815e-02, -2.290311346441968e+00, -8.316535417070729e-02, -8.316535417070729e-02, -5.015238620241524e-06, -1.025707621277524e-05, -4.558543949027616e-06, -4.690144273461933e-02, -7.997641236670884e-06, -7.997641236670851e-06, -6.667435512232167e-01, -6.583106101482388e-01, -6.612750425892944e-01, -6.637255640428994e-01, -6.624995427854049e-01, -6.624995427854049e-01, -6.483190487706553e-01, -5.143522736318111e-01, -5.520504278725655e-01, -5.905349582457037e-01, -5.709391914569359e-01, -5.709391914569359e-01, -7.573710628174981e-01, -1.858577226772052e-01, -2.341866411627094e-01, -3.441481651867568e-01, -2.836075451652854e-01, -2.836075451652855e-01, -4.684748055581078e-01, -1.944627524072689e-02, -3.551293934576812e-02, -3.360394940294338e-01, -5.851185390269346e-02, -5.851185390269324e-02, -1.932737527099422e-04, -1.940439992037069e-07, -1.796695457560421e-06, -5.531540934018508e-02, -6.325205728633832e-06, -6.325205728521358e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_hjs_pbe_sol_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_hjs_pbe_sol", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.222816600766718e-09, -4.222779571071942e-09, -4.222584246956242e-09, -4.223135815496762e-09, -4.222851161509244e-09, -4.222851161509244e-09, -5.826898436056525e-06, -5.826978956564143e-06, -5.828267594748624e-06, -5.821602592441894e-06, -5.826433272887920e-06, -5.826433272887920e-06, -3.858989293242651e-03, -3.868001117837246e-03, -4.056804300808035e-03, -3.937871768970732e-03, -3.972664003615834e-03, -3.972664003615834e-03, -5.059707292220077e-01, -4.935161912116260e-01, -2.135064126756525e-03, -8.470785028026423e-01, -7.265309037796754e-01, -7.265309037796773e-01, -4.459754647499726e-03, -6.201504832209817e-03, -1.364467945659160e+00, -1.919202338700537e-04, -8.802404635775934e-04, -8.802404635764212e-04, -1.222360033244549e-06, -1.222036406758293e-06, -1.222339048779495e-06, -1.222053444495279e-06, -1.222199376516501e-06, -1.222199376516501e-06, -4.967581993240389e-05, -4.854330542596367e-05, -5.005553807799478e-05, -4.904769080339635e-05, -4.886254048246658e-05, -4.886254048246658e-05, -7.036227093670256e-03, -5.256739685765960e-03, -9.455922363440292e-03, -8.429790415324264e-03, -6.650885711630113e-03, -6.650885711630113e-03, -1.206827160989219e+00, -3.674663107166967e-01, -1.350858047197544e+00, -6.772807944893816e-05, -1.279499079784441e+00, -1.279499079784441e+00, -5.853145532981622e-05, -1.986753938574143e-04, -2.737668253416196e-04, -2.007696937429767e+00, -3.642592987313362e-04, -3.642592987385782e-04, -7.119308989484405e-03, -7.286417430365225e-03, -7.232055079072937e-03, -7.184183079636228e-03, -7.208557154628704e-03, -7.208557154628704e-03, -7.903228062219042e-03, -1.315345676860185e-02, -1.150350067128666e-02, -9.999083194896471e-03, -1.075641988081136e-02, -1.075641988081136e-02, -4.368816718572685e-03, -1.929077752279101e-01, -1.166751800696152e-01, -5.011014453215039e-02, -7.835070520536529e-02, -7.835070520536530e-02, -1.812969892415243e-02, -1.188042233898032e+00, -1.540529183463755e+00, -6.005055973442926e-02, -2.146733186790317e+00, -2.146733186790335e+00, -2.161822998468785e-02, -8.116392314013821e-07, -1.856605218705621e-05, -2.199180795140943e+00, -2.968173021263719e-04, -2.968173021127183e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
