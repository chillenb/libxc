
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_revssb_d_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_revssb_d", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.190563122811376e+01, -2.190565984641195e+01, -2.190585803240582e+01, -2.190543085796268e+01, -2.190564457748266e+01, -2.190564457748266e+01, -3.644991189682746e+00, -3.644935049905958e+00, -3.643729147015166e+00, -3.646521483207384e+00, -3.645012201941399e+00, -3.645012201941399e+00, -7.328613548676841e-01, -7.332169458163870e-01, -7.448246519010220e-01, -7.497819071449686e-01, -7.499610381111098e-01, -7.499610381111098e-01, -2.182222537345059e-01, -2.194333136622267e-01, -8.483630943562355e-01, -1.834172198964606e-01, -2.132766730650479e-01, -2.132766730650478e-01, -1.010588805798893e-02, -1.064143873797743e-02, -5.776271860225522e-02, -5.829070894490290e-03, -8.134570175037929e-03, -8.134570175037928e-03, -5.277886190552479e+00, -5.277798666883068e+00, -5.277890560546894e+00, -5.277812948598678e+00, -5.277835462295577e+00, -5.277835462295577e+00, -2.323645158749734e+00, -2.330332389821660e+00, -2.334730179336475e+00, -2.340569350635219e+00, -2.322065360902435e+00, -2.322065360902435e+00, -5.988027937751070e-01, -6.384199605245867e-01, -5.573003832910901e-01, -5.647918814713486e-01, -6.061741912493152e-01, -6.061741912493152e-01, -1.393995311428990e-01, -2.336009420880373e-01, -1.303266819058181e-01, -1.928968486299857e+00, -1.559208814268367e-01, -1.559208814268367e-01, -4.500485411329149e-03, -5.698230286858267e-03, -4.363357516623746e-03, -9.090831592267576e-02, -5.480921520299593e-03, -5.480921520299595e-03, -5.912595924451924e-01, -5.867556877039212e-01, -5.882495594360491e-01, -5.895646531713888e-01, -5.888984853481309e-01, -5.888984853481309e-01, -5.756284820899606e-01, -5.264314577496449e-01, -5.307856804836066e-01, -5.409881138953803e-01, -5.343967854073327e-01, -5.343967854073327e-01, -6.695570261178116e-01, -2.800558725237463e-01, -3.167430391207222e-01, -3.725286958153226e-01, -3.428355235420639e-01, -3.428355235420638e-01, -4.840035694583900e-01, -5.532182794317161e-02, -7.455466529686777e-02, -3.469639266592031e-01, -1.121725700000056e-01, -1.121725700000057e-01, -1.423848878312283e-02, -1.523265714545764e-03, -3.203224088963366e-03, -1.061909363861265e-01, -5.033436102178594e-03, -5.033436102178589e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_revssb_d_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_revssb_d", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.628990274539250e+01, -2.628988073433483e+01, -2.629013613480473e+01, -2.629005019721322e+01, -2.629070101869029e+01, -2.629091052518026e+01, -2.628806988085250e+01, -2.628755542642876e+01, -2.629005112273751e+01, -2.628876287745219e+01, -2.629005112273751e+01, -2.628876287745219e+01, -4.023462017593457e+00, -4.024504600102176e+00, -4.023611985060936e+00, -4.024716756637086e+00, -4.027882023825001e+00, -4.029026992096897e+00, -4.021136187701310e+00, -4.022397963100882e+00, -4.022357044036547e+00, -4.026236812837712e+00, -4.022357044036547e+00, -4.026236812837712e+00, -7.277103729532618e-01, -7.352265404986345e-01, -7.251543278363493e-01, -7.341899106275207e-01, -6.971997567164369e-01, -6.896501043369052e-01, -6.976729431202795e-01, -7.001851453796540e-01, -7.489401717784443e-01, -6.688306299634799e-01, -7.489401717784443e-01, -6.688306299634799e-01, -2.068854459285053e-01, -2.114984794597432e-01, -2.074360768377073e-01, -2.130037179059088e-01, -8.280731621804881e-01, -8.841537624232904e-01, -1.840712385139293e-01, -1.858197057021150e-01, -2.150673090260284e-01, -1.560126237707088e-01, -2.150673090260283e-01, -1.560126237707087e-01, -1.301483083524840e-02, -1.382681064206212e-02, -1.363495588273975e-02, -1.460231375288041e-02, -7.261315100794671e-02, -7.627526198105947e-02, -7.832532533659389e-03, -7.702235044717977e-03, -1.161463245283314e-02, -6.613908575485841e-03, -1.161463245283314e-02, -6.613908575485848e-03, -6.684314397546569e+00, -6.682491904183927e+00, -6.690993131019816e+00, -6.688947416780170e+00, -6.684669223841477e+00, -6.682701978970583e+00, -6.690401000376926e+00, -6.688567283690847e+00, -6.687754834681947e+00, -6.685742172303241e+00, -6.687754834681947e+00, -6.685742172303241e+00, -1.929264116806031e+00, -1.929151414092083e+00, -1.949359598336392e+00, -1.948689075436920e+00, -1.902369320615607e+00, -1.909993945961712e+00, -1.919447139172632e+00, -1.927261471526447e+00, -1.961233717349810e+00, -1.942258394186092e+00, -1.961233717349810e+00, -1.942258394186092e+00, -7.193749347405237e-01, -7.178792989026026e-01, -8.540961813574658e-01, -8.546804519230481e-01, -6.359279559382287e-01, -6.684924829577246e-01, -7.420628324049858e-01, -7.659225676595416e-01, -7.632079532509235e-01, -7.215294100345133e-01, -7.632079532509234e-01, -7.215294100345133e-01, -1.570954568026579e-01, -1.575616614448603e-01, -2.284740015048760e-01, -2.291554759121512e-01, -1.466667765578887e-01, -1.515279003011161e-01, -2.561584649974323e+00, -2.560481466265445e+00, -1.651778864995356e-01, -1.638794830546879e-01, -1.651778864995356e-01, -1.638794830546879e-01, -5.877068315458357e-03, -6.107686069054076e-03, -7.536194800930338e-03, -7.650301660635815e-03, -5.634203886054466e-03, -5.965924174773618e-03, -1.107713369714081e-01, -1.115427229603798e-01, -5.755732588544671e-03, -7.900313432876132e-03, -5.755732588544671e-03, -7.900313432876133e-03, -7.895613694596944e-01, -7.925632336870513e-01, -7.851143638456061e-01, -7.882396617415447e-01, -7.873156848155251e-01, -7.903817261663889e-01, -7.885681529435293e-01, -7.915810299414658e-01, -7.880004041333528e-01, -7.910354070117228e-01, -7.880004041333528e-01, -7.910354070117228e-01, -7.676024420192854e-01, -7.701288991585712e-01, -5.504610441586402e-01, -5.534891575392232e-01, -6.104941393947170e-01, -6.149768890381750e-01, -6.945877570600689e-01, -6.976041835495413e-01, -6.518244874154039e-01, -6.549828938790663e-01, -6.518244874154039e-01, -6.549828938790663e-01, -8.934607722863428e-01, -8.953473256278085e-01, -2.675665163729507e-01, -2.685073951052437e-01, -3.025181358126229e-01, -3.044697833867920e-01, -3.874644885965572e-01, -3.898343824319801e-01, -3.376038924628411e-01, -3.373753742396745e-01, -3.376038924628410e-01, -3.373753742396743e-01, -5.064384012796670e-01, -5.109984423012822e-01, -7.150799928327856e-02, -7.195464577407547e-02, -9.309240218980727e-02, -9.564946421798801e-02, -3.830251805661282e-01, -3.909236710732280e-01, -1.285125252525547e-01, -1.305536442728499e-01, -1.285125252525547e-01, -1.305536442728499e-01, -1.859025008505270e-02, -1.925901801201145e-02, -2.028590323857111e-03, -2.033169083521401e-03, -4.126928615624246e-03, -4.389120704112725e-03, -1.238412393053649e-01, -1.253537099707770e-01, -5.450951419748076e-03, -7.242397751380219e-03, -5.450951419748069e-03, -7.242397751380209e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_revssb_d_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_revssb_d", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.477386807118164e-08, 0.000000000000000e+00, -1.477390446986621e-08, -1.477317950059012e-08, 0.000000000000000e+00, -1.477340453348600e-08, -1.477160452328670e-08, 0.000000000000000e+00, -1.477097190217326e-08, -1.477936444888895e-08, 0.000000000000000e+00, -1.478086771586298e-08, -1.477342568860630e-08, 0.000000000000000e+00, -1.477737385098539e-08, -1.477342568860630e-08, 0.000000000000000e+00, -1.477737385098539e-08, -2.677116255332231e-05, 0.000000000000000e+00, -2.675488726679294e-05, -2.676861069778200e-05, 0.000000000000000e+00, -2.675140252896629e-05, -2.669696396159855e-05, 0.000000000000000e+00, -2.667740855568119e-05, -2.680328794550206e-05, 0.000000000000000e+00, -2.678247100464029e-05, -2.679604840198624e-05, 0.000000000000000e+00, -2.671762923453082e-05, -2.679604840198624e-05, 0.000000000000000e+00, -2.671762923453082e-05, -1.853803456330377e-02, 0.000000000000000e+00, -1.837634048642386e-02, -1.859692435003612e-02, 0.000000000000000e+00, -1.841045508733274e-02, -1.905986230162129e-02, 0.000000000000000e+00, -1.905416727219315e-02, -1.858652315252863e-02, 0.000000000000000e+00, -1.859313527033866e-02, -1.792785320651706e-02, 0.000000000000000e+00, -1.812826094303188e-02, -1.792785320651706e-02, 0.000000000000000e+00, -1.812826094303188e-02, -1.254356317712264e+00, 0.000000000000000e+00, -1.184684553234522e+00, -1.262799905463151e+00, 0.000000000000000e+00, -1.177987355190854e+00, -1.121857287330373e-02, 0.000000000000000e+00, -9.892042589934532e-03, -1.651566564042936e+00, 0.000000000000000e+00, -1.599617697115307e+00, -1.084808019651222e+00, 0.000000000000000e+00, -2.371740813251912e+00, -1.084808019651222e+00, 0.000000000000000e+00, -2.371740813251917e+00, -4.964388067557909e+00, 0.000000000000000e+00, -4.914655369185803e+00, -5.229656155094236e+00, 0.000000000000000e+00, -5.202793328498792e+00, -2.888483780283849e+00, 0.000000000000000e+00, -2.901803916862695e+00, -4.549269490005438e+00, 0.000000000000000e+00, -4.426248431875664e+00, -4.956348994552205e+00, 0.000000000000000e+00, -1.255092449933269e+01, -4.956348994552205e+00, 0.000000000000000e+00, -1.255092449930156e+01, -2.860276391862001e-06, 0.000000000000000e+00, -2.864336586731546e-06, -2.825705313263384e-06, 0.000000000000000e+00, -2.830893084625407e-06, -2.858487352556632e-06, 0.000000000000000e+00, -2.863281624404348e-06, -2.828821527377049e-06, 0.000000000000000e+00, -2.832898313887759e-06, -2.842462490751535e-06, 0.000000000000000e+00, -2.847518566767644e-06, -2.842462490751535e-06, 0.000000000000000e+00, -2.847518566767644e-06, -2.712670774677001e-04, 0.000000000000000e+00, -2.713168535419313e-04, -2.651889254166131e-04, 0.000000000000000e+00, -2.654357863527036e-04, -2.730733375718832e-04, 0.000000000000000e+00, -2.726671427831647e-04, -2.678423199536037e-04, 0.000000000000000e+00, -2.673217203690958e-04, -2.662853703522616e-04, 0.000000000000000e+00, -2.680287900955746e-04, -2.662853703522616e-04, 0.000000000000000e+00, -2.680287900955746e-04, -2.341620018512303e-02, 0.000000000000000e+00, -2.356489150355953e-02, 8.051566438996918e-04, 0.000000000000000e+00, 9.818510370065321e-04, -3.748627996564893e-02, 0.000000000000000e+00, -3.108398810063095e-02, -1.962845215126071e-04, 0.000000000000000e+00, -1.134096881310004e-03, -1.774126271282084e-02, 0.000000000000000e+00, -2.218069673590409e-02, -1.774126271282086e-02, 0.000000000000000e+00, -2.218069673590409e-02, -1.916039917892904e+00, 0.000000000000000e+00, -1.944713562556377e+00, -7.622244115150145e-01, 0.000000000000000e+00, -7.551299593549301e-01, -2.171695952936702e+00, 0.000000000000000e+00, -2.100200956565228e+00, -3.165816353670368e-05, 0.000000000000000e+00, -3.160382486299022e-05, -2.056848632019042e+00, 0.000000000000000e+00, -2.419604539873494e+00, -2.056848632019042e+00, 0.000000000000000e+00, -2.419604539873494e+00, -6.379691119956759e+00, 0.000000000000000e+00, -5.524110309244894e+00, -5.495624730072215e+00, 0.000000000000000e+00, -5.075279293821206e+00, -3.122370212319596e+01, 0.000000000000000e+00, -3.473176816216808e+01, -3.264789848140019e+00, 0.000000000000000e+00, -3.146849318446291e+00, -1.553587030721668e+01, 0.000000000000000e+00, -1.525946409216369e+01, -1.553587030721668e+01, 0.000000000000000e+00, -1.525946409216597e+01, 6.182533122777099e-03, 0.000000000000000e+00, 6.061724779722594e-03, 2.805014394445666e-03, 0.000000000000000e+00, 2.862130409793206e-03, 4.398868469504817e-03, 0.000000000000000e+00, 4.387974877853912e-03, 5.404225682880402e-03, 0.000000000000000e+00, 5.325832025797143e-03, 4.941400123848787e-03, 0.000000000000000e+00, 4.893746670644669e-03, 4.941400123848787e-03, 0.000000000000000e+00, 4.893746670644669e-03, 7.692590691370281e-03, 0.000000000000000e+00, 7.541435418749892e-03, -5.546138175543586e-02, 0.000000000000000e+00, -5.468816404355081e-02, -4.337036312096414e-02, 0.000000000000000e+00, -4.227028956910544e-02, -1.816730268221832e-02, 0.000000000000000e+00, -1.766160496424163e-02, -3.217067042146156e-02, 0.000000000000000e+00, -3.148874050034649e-02, -3.217067042146156e-02, 0.000000000000000e+00, -3.148874050034649e-02, -2.742320112079991e-04, 0.000000000000000e+00, -3.476111880392971e-05, -4.546772240709174e-01, 0.000000000000000e+00, -4.501854981538665e-01, -3.228052596119921e-01, 0.000000000000000e+00, -3.187527648251036e-01, -1.895024865821152e-01, 0.000000000000000e+00, -1.862205264398551e-01, -2.543038681778444e-01, 0.000000000000000e+00, -2.558948346466539e-01, -2.543038681778446e-01, 0.000000000000000e+00, -2.558948346466539e-01, -7.429499910411005e-02, 0.000000000000000e+00, -7.272929881154280e-02, -2.645295712406902e+00, 0.000000000000000e+00, -2.648107150373721e+00, -2.589697662124950e+00, 0.000000000000000e+00, -2.642165598270275e+00, -2.278201417983372e-01, 0.000000000000000e+00, -2.137619877210932e-01, -3.201302396164299e+00, 0.000000000000000e+00, -3.709479421439909e+00, -3.201302396164308e+00, 0.000000000000000e+00, -3.709479421439918e+00, -3.936898430821848e+00, 0.000000000000000e+00, -4.018525855795778e+00, -1.959497533589936e+01, 0.000000000000000e+00, -3.469638668642416e+01, -1.209983382352180e+01, 0.000000000000000e+00, -1.287991516491584e+01, -3.574888637414742e+00, 0.000000000000000e+00, -3.497103226594810e+00, -3.201171923476033e+01, 0.000000000000000e+00, -1.584097692480857e+01, -3.201171923475200e+01, 0.000000000000000e+00, -1.584097692480531e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
