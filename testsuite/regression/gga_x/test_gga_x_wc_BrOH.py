
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_wc_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_wc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.084432405240221e+01, -2.084435216785945e+01, -2.084454736718439e+01, -2.084408557100838e+01, -2.084433829633577e+01, -2.084433829633577e+01, -3.445084173403062e+00, -3.445062357420302e+00, -3.444604717927787e+00, -3.446123671102023e+00, -3.445087628479238e+00, -3.445087628479238e+00, -6.848151266587783e-01, -6.846759363101070e-01, -6.823202163140732e-01, -6.867905806981289e-01, -6.847616396650451e-01, -6.847616396650451e-01, -2.064750377886818e-01, -2.075885707818807e-01, -8.028496579051922e-01, -1.727890237707712e-01, -2.067850683485625e-01, -2.067850683485625e-01, -1.698082505578998e-02, -1.778000082791398e-02, -7.004309941935340e-02, -8.172682356438149e-03, -1.759485326147709e-02, -1.759485326147709e-02, -5.018834165949340e+00, -5.018427844576776e+00, -5.018798522618426e+00, -5.018482493708659e+00, -5.018617487997162e+00, -5.018617487997162e+00, -2.055632191296574e+00, -2.066297237682364e+00, -2.055153916997733e+00, -2.063460142651935e+00, -2.063475917638239e+00, -2.063475917638239e+00, -5.703391293353154e-01, -5.951231120820726e-01, -5.429269349186554e-01, -5.469611515540697e-01, -5.886119359765021e-01, -5.886119359765021e-01, -1.425324493579780e-01, -2.256454509503934e-01, -1.397869094738191e-01, -1.810381704537149e+00, -1.551131573339995e-01, -1.551131573339995e-01, -7.884352479647260e-03, -9.008329382384085e-03, -6.752134633460822e-03, -9.479972919303893e-02, -8.207908805294687e-03, -8.207908805294687e-03, -5.585999008291365e-01, -5.612065009664390e-01, -5.603090265069128e-01, -5.595849408874064e-01, -5.599495638384744e-01, -5.599495638384744e-01, -5.397471788544465e-01, -5.092566436401215e-01, -5.193318151460155e-01, -5.276243456410598e-01, -5.233731802538538e-01, -5.233731802538538e-01, -6.249131451430242e-01, -2.676923421959881e-01, -3.020294184138935e-01, -3.598841099573839e-01, -3.287903837167037e-01, -3.287903837167037e-01, -4.615238303334051e-01, -6.530504679484535e-02, -8.660395132021008e-02, -3.325967511149447e-01, -1.180812160581063e-01, -1.180812160581063e-01, -1.988715229805143e-02, -2.468675586521333e-03, -4.688418056881947e-03, -1.125337365398907e-01, -6.976561752989631e-03, -6.976561752989620e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_wc_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_wc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.547216566222245e+01, -2.547224036608649e+01, -2.547260055594943e+01, -2.547137673913818e+01, -2.547220483346184e+01, -2.547220483346184e+01, -4.122252277909478e+00, -4.122272390508854e+00, -4.122995848875479e+00, -4.122624187787141e+00, -4.122280182421928e+00, -4.122280182421928e+00, -7.841328095983446e-01, -7.832417258815731e-01, -7.599582229532283e-01, -7.660974523696434e-01, -7.838081131971142e-01, -7.838081131971142e-01, -2.083849729963563e-01, -2.120033232160817e-01, -9.433287121419119e-01, -1.533884354003629e-01, -2.094841172436356e-01, -2.094841172436356e-01, -2.247011129167657e-02, -2.351230226291392e-02, -8.791266926638157e-02, -1.087881442622024e-02, -2.326778093195890e-02, -2.326778093195890e-02, -6.245719619844859e+00, -6.247787686194771e+00, -6.245932275617622e+00, -6.247540256545287e+00, -6.246777634515604e+00, -6.246777634515604e+00, -2.292490445723473e+00, -2.309286008555838e+00, -2.285013113736701e+00, -2.298154412248625e+00, -2.313445411085816e+00, -2.313445411085816e+00, -6.899630379860142e-01, -7.679284170614409e-01, -6.538986146312691e-01, -6.950260298665984e-01, -7.183760291208821e-01, -7.183760291208821e-01, -1.456698696289750e-01, -2.046187231643864e-01, -1.410101551454212e-01, -2.335543086010002e+00, -1.433798756796910e-01, -1.433798756796910e-01, -1.049570813440734e-02, -1.198636420985016e-02, -8.985178090547760e-03, -1.121272416275309e-01, -1.092114274728272e-02, -1.092114274728272e-02, -7.372443022948931e-01, -7.267805285700550e-01, -7.303856129253017e-01, -7.332807025312319e-01, -7.318204579138704e-01, -7.318204579138704e-01, -7.147515571555378e-01, -5.927834643021430e-01, -6.230007268517509e-01, -6.544175016173045e-01, -6.379868521868171e-01, -6.379868521868172e-01, -8.042032613052958e-01, -2.608879873459862e-01, -3.177163946182787e-01, -4.126639632723493e-01, -3.632999709673046e-01, -3.632999709673046e-01, -5.342171187844690e-01, -8.293224723226075e-02, -1.058334865470771e-01, -3.914242990929566e-01, -1.260168497909215e-01, -1.260168497909214e-01, -2.628311162212514e-02, -3.290864584702029e-03, -6.246825771416232e-03, -1.198214258252870e-01, -9.285106314114036e-03, -9.285106314114023e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_wc_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_wc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-5.874953685785904e-09, -5.874939940586007e-09, -5.874774004952228e-09, -5.875001171587727e-09, -5.874947311533754e-09, -5.874947311533754e-09, -7.541307614721680e-06, -7.541680738730881e-06, -7.550698471498188e-06, -7.528781331070809e-06, -7.541371017373331e-06, -7.541371017373331e-06, -4.386029152906883e-03, -4.381463933163893e-03, -4.259323823193668e-03, -4.156614047912116e-03, -4.384462528518316e-03, -4.384462528518316e-03, -5.209269934939552e-01, -5.041516971547068e-01, -2.455834126017158e-03, -1.157582042724844e+00, -5.159201292879991e-01, -5.159201292879991e-01, -7.634265721238114e+00, -7.565599218488455e+00, -2.182862680166750e+00, -6.130389402850410e+00, -7.861305757348210e+00, -7.861305757348210e+00, -1.806949759620607e-06, -1.808812311060488e-06, -1.807128734899556e-06, -1.808577142278391e-06, -1.807920993427914e-06, -1.807920993427914e-06, -5.177770208380477e-05, -5.084542122318503e-05, -5.165454294282222e-05, -5.092008173289107e-05, -5.133339842170884e-05, -5.133339842170884e-05, -1.027326345099575e-02, -9.657644232334485e-03, -1.239647045604918e-02, -1.324478192302999e-02, -9.216458373240161e-03, -9.216458373240161e-03, -1.418789766244779e+00, -4.063942233839642e-01, -1.634776168517537e+00, -1.127428063857107e-04, -1.532655559784193e+00, -1.532655559784193e+00, -6.514629647503271e+00, -6.451070252057415e+00, -1.850927966150179e+01, -2.214741467832465e+00, -9.524387625984188e+00, -9.524387625984181e+00, -1.279564655988804e-02, -1.227104903659173e-02, -1.245369972022520e-02, -1.259923967307382e-02, -1.252606745731095e-02, -1.252606745731095e-02, -1.473520358268570e-02, -1.485440674713633e-02, -1.468390997873822e-02, -1.470759758102983e-02, -1.471008018935597e-02, -1.471008018935597e-02, -7.914804058035295e-03, -1.912030352574703e-01, -1.100038269561373e-01, -5.767088848717086e-02, -7.840509637895561e-02, -7.840509637895565e-02, -2.174987713204335e-02, -1.882893156472545e+00, -1.845347722181271e+00, -8.368380529621212e-02, -2.360574954366954e+00, -2.360574954366956e+00, -5.609497346726588e+00, -1.169730003328131e+01, -9.911398936773924e+00, -2.903024439211537e+00, -1.399824958457463e+01, -1.399824958457460e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
