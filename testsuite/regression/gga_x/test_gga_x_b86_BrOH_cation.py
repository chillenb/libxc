
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_b86_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_b86", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.103505196141283e+01, -2.103507690549228e+01, -2.103526000079322e+01, -2.103488740066873e+01, -2.103507236977013e+01, -2.103507236977013e+01, -3.493850904450586e+00, -3.493808659322298e+00, -3.492917852397843e+00, -3.495130432426272e+00, -3.493884745856293e+00, -3.493884745856293e+00, -7.041664027212148e-01, -7.042669322299449e-01, -7.087809495875395e-01, -7.134662187707709e-01, -7.137115240201894e-01, -7.137115240201894e-01, -2.225050616796300e-01, -2.233183853677737e-01, -8.124812360700340e-01, -1.914014796599129e-01, -2.183704387675675e-01, -2.183704387675674e-01, -1.101851628741701e-02, -1.160219717274497e-02, -6.275028257127938e-02, -6.356098976357876e-03, -8.869546467474709e-03, -8.869546467474707e-03, -5.050637027243278e+00, -5.049893718256498e+00, -5.050614196561970e+00, -5.049957807388306e+00, -5.050253906207500e+00, -5.050253906207500e+00, -2.142949890853255e+00, -2.152305996852907e+00, -2.145757287194577e+00, -2.154007327280786e+00, -2.146788639678559e+00, -2.146788639678559e+00, -5.836727221368101e-01, -6.036570670576461e-01, -5.450875084883661e-01, -5.386305345770448e-01, -5.898122466646560e-01, -5.898122466646561e-01, -1.486882739588947e-01, -2.413229514516330e-01, -1.393301747755477e-01, -1.815983815330358e+00, -1.643699456195328e-01, -1.643699456195328e-01, -4.907462363633335e-03, -6.213419143683904e-03, -4.757754600528919e-03, -9.808723824689371e-02, -5.976282766517111e-03, -5.976282766517114e-03, -5.510279491904596e-01, -5.546442127397325e-01, -5.533875081463471e-01, -5.523305880658953e-01, -5.528597714895074e-01, -5.528597714895074e-01, -5.341065975638631e-01, -5.153724691353246e-01, -5.203076780072659e-01, -5.250300372808586e-01, -5.223757010232823e-01, -5.223757010232823e-01, -6.340782292858599e-01, -2.852648380979822e-01, -3.183384262298821e-01, -3.698459802903759e-01, -3.416429523328192e-01, -3.416429523328191e-01, -4.757624172827321e-01, -6.012776130877684e-02, -8.079996864832847e-02, -3.449421297958870e-01, -1.200944149518573e-01, -1.200944149518573e-01, -1.552255918634167e-02, -1.661053063727354e-03, -3.492918834012631e-03, -1.139451821182354e-01, -5.488393154809847e-03, -5.488393154809841e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_b86_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_b86", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.501721106739693e+01, -2.501718195706661e+01, -2.501733080880270e+01, -2.501726892243462e+01, -2.501767779059484e+01, -2.501777622842590e+01, -2.501632644906384e+01, -2.501605353523781e+01, -2.501728430634864e+01, -2.501671559098327e+01, -2.501728430634864e+01, -2.501671559098327e+01, -4.008107486409886e+00, -4.008331080214999e+00, -4.008154860406116e+00, -4.008388422585793e+00, -4.009405358932551e+00, -4.009756872925956e+00, -4.007885630062845e+00, -4.008247776638352e+00, -4.007327610357933e+00, -4.009429234926594e+00, -4.007327610357933e+00, -4.009429234926594e+00, -7.479519765061349e-01, -7.532581936144965e-01, -7.460142318041213e-01, -7.524886624111117e-01, -7.216683461560739e-01, -7.140435232426802e-01, -7.230175179527877e-01, -7.254928371508735e-01, -7.627400263715564e-01, -6.901002998109607e-01, -7.627400263715564e-01, -6.901002998109607e-01, -1.951458973103707e-01, -1.995702381757977e-01, -1.956769246770871e-01, -2.011932203523658e-01, -8.606040282104794e-01, -9.010142465057180e-01, -1.781737798389452e-01, -1.796715159013327e-01, -2.028598122281043e-01, -1.573410070198941e-01, -2.028598122281042e-01, -1.573410070198940e-01, -1.418655513899923e-02, -1.507089709708510e-02, -1.486175842832803e-02, -1.591512180177787e-02, -7.835982040771548e-02, -8.220897776114089e-02, -8.539916047415786e-03, -8.397904345044357e-03, -1.266132845550836e-02, -7.211049457807005e-03, -1.266132845550836e-02, -7.211049457807011e-03, -6.178858528293056e+00, -6.177303672795681e+00, -6.181855404760661e+00, -6.180198982380737e+00, -6.179023014987527e+00, -6.177401733781273e+00, -6.181594532279588e+00, -6.180032007077525e+00, -6.180395088585830e+00, -6.178758110762216e+00, -6.180395088585830e+00, -6.178758110762216e+00, -2.148067180581584e+00, -2.147952874416298e+00, -2.166081362913818e+00, -2.165438722435499e+00, -2.129539084945844e+00, -2.134695575438065e+00, -2.144870887580544e+00, -2.150261789891660e+00, -2.172514433410482e+00, -2.159087691919401e+00, -2.172514433410482e+00, -2.159087691919401e+00, -6.823916989868613e-01, -6.806818904992660e-01, -7.727999557448070e-01, -7.735786156526827e-01, -6.133014565943407e-01, -6.389219221417188e-01, -6.689100897431920e-01, -6.906534147125700e-01, -7.144078646364797e-01, -6.773488935842998e-01, -7.144078646364798e-01, -6.773488935842999e-01, -1.607341513282469e-01, -1.609274064976791e-01, -2.177931583009313e-01, -2.183536518501921e-01, -1.513356433485704e-01, -1.555309292805168e-01, -2.331607754691706e+00, -2.330627266087396e+00, -1.651417478193338e-01, -1.609212683012330e-01, -1.651417478193338e-01, -1.609212683012330e-01, -6.408140501138223e-03, -6.659594746491308e-03, -8.216794843681307e-03, -8.341218252451826e-03, -6.142745967627287e-03, -6.504185035888574e-03, -1.170403862365572e-01, -1.178793496164730e-01, -6.275553675802095e-03, -8.612790798531111e-03, -6.275553675802095e-03, -8.612790798531111e-03, -7.229480990858954e-01, -7.258916672288782e-01, -7.102126907324871e-01, -7.132394703798004e-01, -7.146062856965839e-01, -7.176332363822274e-01, -7.183355174695326e-01, -7.212833860872103e-01, -7.164643362423319e-01, -7.194505952228178e-01, -7.164643362423319e-01, -7.194505952228178e-01, -7.061944762237382e-01, -7.085499110830247e-01, -5.505566820887012e-01, -5.533736116495971e-01, -5.907184032703658e-01, -5.939384558654429e-01, -6.352200236422789e-01, -6.376785377042018e-01, -6.124271261814821e-01, -6.149428892437176e-01, -6.124271261814821e-01, -6.149428892437176e-01, -8.080999731052837e-01, -8.101029917002819e-01, -2.524538459625802e-01, -2.533243025293043e-01, -2.877027211696740e-01, -2.899829605298147e-01, -3.850628878379090e-01, -3.874323303804497e-01, -3.293362516951996e-01, -3.292734914980080e-01, -3.293362516951996e-01, -3.292734914980079e-01, -5.052488126207905e-01, -5.094747632834585e-01, -7.723152261899201e-02, -7.770311680832709e-02, -9.976519131196063e-02, -1.023616140469870e-01, -3.763313842167239e-01, -3.829508452064810e-01, -1.334442679356739e-01, -1.341847281480177e-01, -1.334442679356739e-01, -1.341847281480177e-01, -2.025730547757919e-02, -2.098475118632859e-02, -2.212061137209004e-03, -2.217039710822151e-03, -4.499984393716877e-03, -4.785827659985367e-03, -1.287879704121355e-01, -1.302218989556615e-01, -5.943011256307977e-03, -7.895834095198071e-03, -5.943011256307971e-03, -7.895834095198060e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_b86_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_b86", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.534058401439791e-08, 0.000000000000000e+00, -1.534066835694224e-08, -1.534045252635990e-08, 0.000000000000000e+00, -1.534057279547105e-08, -1.533990348465719e-08, 0.000000000000000e+00, -1.533982200610202e-08, -1.534139169604529e-08, 0.000000000000000e+00, -1.534171783666988e-08, -1.534051207580006e-08, 0.000000000000000e+00, -1.534086553860402e-08, -1.534051207580006e-08, 0.000000000000000e+00, -1.534086553860402e-08, -2.081040803493219e-05, 0.000000000000000e+00, -2.081616674647297e-05, -2.081072669720852e-05, 0.000000000000000e+00, -2.081694069658196e-05, -2.082304598364014e-05, 0.000000000000000e+00, -2.082578894588422e-05, -2.078825503088252e-05, 0.000000000000000e+00, -2.079217244776619e-05, -2.082250949228857e-05, 0.000000000000000e+00, -2.080136636979851e-05, -2.082250949228857e-05, 0.000000000000000e+00, -2.080136636979851e-05, -1.343687384081403e-02, 0.000000000000000e+00, -1.342225838465233e-02, -1.345190435522279e-02, 0.000000000000000e+00, -1.343467940506540e-02, -1.363061995232179e-02, 0.000000000000000e+00, -1.362132421524441e-02, -1.324487017809390e-02, 0.000000000000000e+00, -1.325333639229199e-02, -1.330058588754527e-02, 0.000000000000000e+00, -1.292260289545009e-02, -1.330058588754527e-02, 0.000000000000000e+00, -1.292260289545009e-02, -1.522574106090121e+00, 0.000000000000000e+00, -1.422228298033276e+00, -1.524042288665870e+00, 0.000000000000000e+00, -1.402876530271049e+00, -7.777053614781751e-03, 0.000000000000000e+00, -7.194990284117785e-03, -2.103863848908091e+00, 0.000000000000000e+00, -2.035489853230811e+00, -1.310595035721996e+00, 0.000000000000000e+00, -3.088567452179082e+00, -1.310595035721995e+00, 0.000000000000000e+00, -3.088567452179084e+00, -6.620236403601083e+00, 0.000000000000000e+00, -6.553620391421738e+00, -6.975112069189587e+00, 0.000000000000000e+00, -6.939070691916158e+00, -3.834090490643553e+00, 0.000000000000000e+00, -3.850808882992953e+00, -6.065111594734953e+00, 0.000000000000000e+00, -5.900497629289633e+00, -6.609595420951442e+00, 0.000000000000000e+00, -1.677252600121130e+01, -6.609595420951649e+00, 0.000000000000000e+00, -1.677252600117027e+01, -4.496902197917234e-06, 0.000000000000000e+00, -4.501074027746645e-06, -4.496972229070003e-06, 0.000000000000000e+00, -4.501143260744878e-06, -4.496873148685883e-06, 0.000000000000000e+00, -4.501052794955518e-06, -4.496933748478792e-06, 0.000000000000000e+00, -4.501116088479972e-06, -4.496964672356099e-06, 0.000000000000000e+00, -4.501114015734080e-06, -4.496964672356099e-06, 0.000000000000000e+00, -4.501114015734080e-06, -1.643464090004117e-04, 0.000000000000000e+00, -1.643757501733634e-04, -1.609813719478337e-04, 0.000000000000000e+00, -1.611238162962147e-04, -1.645545223203970e-04, 0.000000000000000e+00, -1.645713217669296e-04, -1.616855127391223e-04, 0.000000000000000e+00, -1.616215940191977e-04, -1.621504213808958e-04, 0.000000000000000e+00, -1.626400541428438e-04, -1.621504213808958e-04, 0.000000000000000e+00, -1.626400541428438e-04, -2.616396439152269e-02, 0.000000000000000e+00, -2.645411665580863e-02, -2.112710557815327e-02, 0.000000000000000e+00, -2.111520421413860e-02, -3.754698901892027e-02, 0.000000000000000e+00, -3.299914018801798e-02, -3.620946918574190e-02, 0.000000000000000e+00, -3.171972489051364e-02, -2.279560991818341e-02, 0.000000000000000e+00, -2.779661754879837e-02, -2.279560991818342e-02, 0.000000000000000e+00, -2.779661754879837e-02, -2.502193780220809e+00, 0.000000000000000e+00, -2.538646960436549e+00, -9.461622043634845e-01, 0.000000000000000e+00, -9.366636299738158e-01, -2.845836901853859e+00, 0.000000000000000e+00, -2.747354569231000e+00, -2.571122880461405e-04, 0.000000000000000e+00, -2.575915331227671e-04, -2.667360881923222e+00, 0.000000000000000e+00, -3.117768753527707e+00, -2.667360881923222e+00, 0.000000000000000e+00, -3.117768753527707e+00, -8.514595335446982e+00, 0.000000000000000e+00, -7.369678037055341e+00, -7.331483878813298e+00, 0.000000000000000e+00, -6.768996094502763e+00, -4.175936769322535e+01, 0.000000000000000e+00, -4.645333508013466e+01, -4.315548650390296e+00, 0.000000000000000e+00, -4.159043105028618e+00, -2.076695843166983e+01, 0.000000000000000e+00, -2.039655775790060e+01, -2.076695843167379e+01, 0.000000000000000e+00, -2.039655775790389e+01, -2.990102180939160e-02, 0.000000000000000e+00, -2.945598022900836e-02, -2.980504756070329e-02, 0.000000000000000e+00, -2.936757427041720e-02, -2.983856766160323e-02, 0.000000000000000e+00, -2.939870828010402e-02, -2.986766781267839e-02, 0.000000000000000e+00, -2.942508196153279e-02, -2.985327714147280e-02, 0.000000000000000e+00, -2.941198610019989e-02, -2.985327714147280e-02, 0.000000000000000e+00, -2.941198610019989e-02, -3.360352485113897e-02, 0.000000000000000e+00, -3.316489812909443e-02, -4.694452031100556e-02, 0.000000000000000e+00, -4.630499792175169e-02, -4.291307045546115e-02, 0.000000000000000e+00, -4.230033818038283e-02, -3.910400681752419e-02, 0.000000000000000e+00, -3.859459267173475e-02, -4.106414977809882e-02, 0.000000000000000e+00, -4.050589671800847e-02, -4.106414977809882e-02, 0.000000000000000e+00, -4.050589671800847e-02, -1.745201526873446e-02, 0.000000000000000e+00, -1.737231780029827e-02, -5.406577038022825e-01, 0.000000000000000e+00, -5.344686156562691e-01, -3.605504958519409e-01, 0.000000000000000e+00, -3.541082526911257e-01, -1.811282570597159e-01, 0.000000000000000e+00, -1.777876335585795e-01, -2.608933999517929e-01, 0.000000000000000e+00, -2.622633233764912e-01, -2.608933999517932e-01, 0.000000000000000e+00, -2.622633233764913e-01, -6.509483371043769e-02, 0.000000000000000e+00, -6.377198911186474e-02, -3.510041583708614e+00, 0.000000000000000e+00, -3.513688221639812e+00, -3.429838906186502e+00, 0.000000000000000e+00, -3.498668608654946e+00, -2.329613028285991e-01, 0.000000000000000e+00, -2.215402075948817e-01, -4.212766035693524e+00, 0.000000000000000e+00, -4.871409930180718e+00, -4.212766035693531e+00, 0.000000000000000e+00, -4.871409930180727e+00, -5.244996801145396e+00, 0.000000000000000e+00, -5.354142534353037e+00, -2.619936336579966e+01, 0.000000000000000e+00, -4.640794108389678e+01, -1.616924793482628e+01, 0.000000000000000e+00, -1.721310109716590e+01, -4.708854220578842e+00, 0.000000000000000e+00, -4.604622168242718e+00, -4.281394077963156e+01, 0.000000000000000e+00, -2.117486453979224e+01, -4.281394077963129e+01, 0.000000000000000e+00, -2.117486453979767e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
