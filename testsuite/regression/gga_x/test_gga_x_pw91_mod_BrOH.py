
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_pw91_mod_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pw91_mod", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.105500239339226e+01, -2.105502596395183e+01, -2.105520857602738e+01, -2.105482105376607e+01, -2.105501417622985e+01, -2.105501417622985e+01, -3.491739851500614e+00, -3.491710711145463e+00, -3.491053927692240e+00, -3.492926206442236e+00, -3.491739738118723e+00, -3.491739738118723e+00, -7.009751507429532e-01, -7.010068577106054e-01, -7.037536545583517e-01, -7.080692124878313e-01, -7.009829989845553e-01, -7.009829989845553e-01, -2.171647031490301e-01, -2.180044624393479e-01, -8.166584570417629e-01, -1.821976210762287e-01, -2.173903459276694e-01, -2.173903459276694e-01, -1.178407805552540e-03, -1.361664143779053e-03, -4.835879996587959e-02, -1.024324117131753e-04, -1.344802782350215e-03, -1.344802782350215e-03, -5.057257153249196e+00, -5.056590486834957e+00, -5.057195507918764e+00, -5.056677031712334e+00, -5.056906005756549e+00, -5.056906005756549e+00, -2.119452401002638e+00, -2.129199425884790e+00, -2.120723957534444e+00, -2.128303447192352e+00, -2.124426946888230e+00, -2.124426946888230e+00, -5.769899882776128e-01, -5.972580465331924e-01, -5.496568453493391e-01, -5.498215452969231e-01, -5.946719400084912e-01, -5.946719400084912e-01, -1.468566182639207e-01, -2.387826968885809e-01, -1.444366920546292e-01, -1.816918591098060e+00, -1.624488805241843e-01, -1.624488805241843e-01, -9.458538852728324e-05, -1.426141493270312e-04, -1.014055710403613e-04, -8.774991986647264e-02, -1.311518472660379e-04, -1.311518472660380e-04, -5.590878741149239e-01, -5.630053667588768e-01, -5.617067407879716e-01, -5.606354846951341e-01, -5.611795834188767e-01, -5.611795834188767e-01, -5.399292998854039e-01, -5.191177795929587e-01, -5.261269193014168e-01, -5.318860610233728e-01, -5.288553385872116e-01, -5.288553385872116e-01, -6.273324302026810e-01, -2.825256887809774e-01, -3.156934274256484e-01, -3.682379805989222e-01, -3.398505733907384e-01, -3.398505733907384e-01, -4.711001780645490e-01, -3.849500168294309e-02, -7.239566358608045e-02, -3.381998657745607e-01, -1.201212816769518e-01, -1.201212816769518e-01, -1.656713254064400e-03, -3.631665964364599e-06, -2.363264034654272e-05, -1.145753184916513e-01, -9.683215820172385e-05, -9.683215820172326e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_pw91_mod_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pw91_mod", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.523119767419593e+01, -2.523127928317587e+01, -2.523165901579214e+01, -2.523032234105812e+01, -2.523124058111050e+01, -2.523124058111050e+01, -4.064049559907612e+00, -4.064081128583085e+00, -4.065116683275061e+00, -4.064194465393335e+00, -4.064083108780500e+00, -4.064083108780500e+00, -7.628854510993123e-01, -7.618069894707937e-01, -7.347282655935854e-01, -7.408178038887765e-01, -7.624931230548244e-01, -7.624931230548244e-01, -2.063474787011468e-01, -2.087078648154254e-01, -9.252187512304522e-01, -1.693270184552793e-01, -2.070391572706573e-01, -2.070391572706573e-01, -4.833639304746153e-03, -5.580114973933418e-03, -1.345557967806671e-01, -4.183832361441592e-04, -5.511136304697393e-03, -5.511136304697393e-03, -6.205123263929919e+00, -6.207532925956619e+00, -6.205370102150600e+00, -6.207243722567275e+00, -6.206357855867836e+00, -6.206357855867836e+00, -2.216771924301059e+00, -2.233726299580290e+00, -2.208676459321782e+00, -2.221845382229060e+00, -2.238963942257413e+00, -2.238963942257413e+00, -6.820134353650013e-01, -7.657703845550484e-01, -6.457074047446696e-01, -6.921855348729397e-01, -7.114050895940900e-01, -7.114050895940900e-01, -1.714926474850728e-01, -2.180291542564557e-01, -1.644555918251599e-01, -2.328944164046005e+00, -1.608614391425261e-01, -1.608614391425261e-01, -3.862259418481345e-04, -5.833516595889357e-04, -4.146568068873258e-04, -1.629064218355656e-01, -5.364964373444070e-04, -5.364964373444052e-04, -7.355792995605914e-01, -7.249036166072486e-01, -7.286962372908227e-01, -7.316021087068268e-01, -7.301527285314114e-01, -7.301527285314114e-01, -7.134686450625866e-01, -5.797002263281105e-01, -6.146023967423513e-01, -6.498523958492213e-01, -6.316467984648124e-01, -6.316467984648124e-01, -8.017881925168695e-01, -2.635704157492781e-01, -3.090947881067169e-01, -4.016539620784971e-01, -3.509680210698123e-01, -3.509680210698122e-01, -5.214943709655440e-01, -1.189541246301556e-01, -1.634495893846605e-01, -3.840984767942030e-01, -1.544789542964033e-01, -1.544789542964031e-01, -6.782241552396122e-03, -1.466657660584694e-05, -9.599674545626170e-05, -1.465107943349785e-01, -3.957618653013161e-04, -3.957618653013101e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_pw91_mod_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pw91_mod", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-7.196343514353661e-09, -7.196315044704867e-09, -7.196076715063178e-09, -7.196545151827975e-09, -7.196329430965022e-09, -7.196329430965022e-09, -9.468438271243019e-06, -9.468768298180240e-06, -9.476283806570745e-06, -9.455320516173091e-06, -9.468446671433119e-06, -9.468446671433119e-06, -5.841555503590705e-03, -5.841595655739685e-03, -5.789243742723888e-03, -5.647071232447518e-03, -5.841685740523102e-03, -5.841685740523102e-03, -6.477459371283232e-01, -6.378782271337713e-01, -3.161300423285776e-03, -1.106559404560421e+00, -6.451183044975417e-01, -6.451183044975417e-01, 1.456601345667861e+02, 1.465340923360417e+02, 2.792364098481076e+01, 9.547102647927080e+01, 1.522150454021538e+02, 1.522150454021538e+02, -2.178933479393689e-06, -2.180561678438581e-06, -2.179087316748994e-06, -2.180353467746257e-06, -2.179785158311266e-06, -2.179785158311266e-06, -7.034898969826870e-05, -6.902996197925266e-05, -7.023817417729807e-05, -6.921102346438198e-05, -6.959318009489265e-05, -6.959318009489265e-05, -1.272427567432378e-02, -1.154792683315213e-02, -1.543598788436246e-02, -1.581766640224733e-02, -1.130430675076639e-02, -1.130430675076639e-02, -7.774825878011453e-01, -4.237319227783700e-01, -1.013409246930520e+00, -1.347945070718197e-04, -1.346608899031277e+00, -1.346608899031277e+00, 1.010947540620993e+02, 1.025218225885386e+02, 2.927541950048254e+02, 7.123617049058365e+00, 1.514923555359437e+02, 1.514923555359421e+02, -1.671726321795389e-02, -1.471180793769774e-02, -1.510437321622518e-02, -1.562257259334314e-02, -1.532959131075558e-02, -1.532959131075558e-02, -1.931278423195501e-02, -1.937340229424049e-02, -1.837561988061054e-02, -1.777828908535879e-02, -1.806524527953900e-02, -1.806524527953900e-02, -9.453553532056532e-03, -2.252393913028067e-01, -1.447438149079520e-01, -7.668390680923912e-02, -1.066805036793672e-01, -1.066805036793673e-01, -2.858221800264315e-02, 3.074878231060065e+01, 1.281268760980470e+01, -1.074786945130880e-01, -4.268787807742715e-01, -4.268787807742821e-01, 1.100592152812831e+02, 1.635002403639641e+02, 1.453178187968916e+02, -6.009280614075444e-01, 2.198786898991810e+02, 2.198786898991743e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
