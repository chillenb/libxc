
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_bcgp_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_bcgp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.108482271893055e+01, -2.108484701615104e+01, -2.108502853893234e+01, -2.108466553255320e+01, -2.108484528650305e+01, -2.108484528650305e+01, -3.503145366583407e+00, -3.503102581883663e+00, -3.502199468404638e+00, -3.504435067197232e+00, -3.503178515076134e+00, -3.503178515076134e+00, -7.058805729591695e-01, -7.059606106232272e-01, -7.098081841862616e-01, -7.145650244506497e-01, -7.126476643632691e-01, -7.126476643632691e-01, -2.196485073465515e-01, -2.207398783692934e-01, -8.141071806506180e-01, -1.852948198895239e-01, -1.986756614411550e-01, -1.986756614411550e-01, -1.008818383368821e-02, -1.061743393933546e-02, -5.778966515177129e-02, -5.828392736791488e-03, -7.322839011194991e-03, -7.322839011194991e-03, -5.060628627632017e+00, -5.059832809743245e+00, -5.060603643443452e+00, -5.059900914128722e+00, -5.060218780415505e+00, -5.060218780415505e+00, -2.145470678549207e+00, -2.155094302602547e+00, -2.147649939712545e+00, -2.156159715462457e+00, -2.149710550487369e+00, -2.149710550487369e+00, -5.851536979093841e-01, -6.042984156401208e-01, -5.462111271686015e-01, -5.390950621967977e-01, -5.905596297887630e-01, -5.905596297887630e-01, -1.405247963573217e-01, -2.355244858428794e-01, -1.311761371259501e-01, -1.817823363129245e+00, -1.574197573036169e-01, -1.574197573036169e-01, -4.497237859133744e-03, -5.697733491098859e-03, -4.356399337284339e-03, -9.134450519945535e-02, -5.248124225759499e-03, -5.248124225759499e-03, -5.512447830096521e-01, -5.552062891091344e-01, -5.538345792081948e-01, -5.526772953072118e-01, -5.532572566196432e-01, -5.532572566196432e-01, -5.342074785236163e-01, -5.166571136997360e-01, -5.217032955257326e-01, -5.261385596453060e-01, -5.236742797454949e-01, -5.236742797454949e-01, -6.348025317711998e-01, -2.812199928184763e-01, -3.164958280023180e-01, -3.706392584083844e-01, -3.414899796303226e-01, -3.414899796303226e-01, -4.769132308014750e-01, -5.541089384621647e-02, -7.473638202615743e-02, -3.458171776657784e-01, -1.129067353821710e-01, -1.129067353821710e-01, -1.423144983070325e-02, -1.523269330916048e-03, -3.197223320255704e-03, -1.069007984482837e-01, -4.856203955403124e-03, -4.856203955403120e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_bcgp_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_bcgp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.501297690764284e+01, -2.501307809408519e+01, -2.501349905841085e+01, -2.501199421842953e+01, -2.501278682342211e+01, -2.501278682342211e+01, -4.013335812910880e+00, -4.013383053165792e+00, -4.014574772984061e+00, -4.013266558768356e+00, -4.013489199079681e+00, -4.013489199079681e+00, -7.558182635608455e-01, -7.546074081258086e-01, -7.275268150535659e-01, -7.337856761282373e-01, -7.326367261604116e-01, -7.326367261604116e-01, -2.073828915258296e-01, -2.081702084835869e-01, -8.856846360571899e-01, -1.871518788520264e-01, -1.925029688908098e-01, -1.925029688908098e-01, -1.343636650704324e-02, -1.413914834379369e-02, -7.492504524134935e-02, -7.768517403539343e-03, -9.757809243799428e-03, -9.757809243799428e-03, -6.173372281805104e+00, -6.176265779632538e+00, -6.173501361247073e+00, -6.176055776939925e+00, -6.174840834934339e+00, -6.174840834934339e+00, -2.180567311784518e+00, -2.197224168627075e+00, -2.167587301545538e+00, -2.182039256598513e+00, -2.196357550952340e+00, -2.196357550952340e+00, -6.818586946385070e-01, -7.725631836461019e-01, -6.270798593659360e-01, -6.793199496443013e-01, -6.963246958767472e-01, -6.963246958767472e-01, -1.604779776564172e-01, -2.297463116887962e-01, -1.520822919239787e-01, -2.329281581329258e+00, -1.674534117942661e-01, -1.674534117942661e-01, -5.994907698150198e-03, -7.594268912682175e-03, -5.805497735967059e-03, -1.126758231284874e-01, -6.993879545311853e-03, -6.993879545311853e-03, -7.241545183520146e-01, -7.111662061584677e-01, -7.156384229337933e-01, -7.194132694652622e-01, -7.175163621426629e-01, -7.175163621426629e-01, -7.072415500723552e-01, -5.555341303208152e-01, -5.933340480711876e-01, -6.360569992658420e-01, -6.138311516263426e-01, -6.138311516263426e-01, -8.084222714374825e-01, -2.661989629154544e-01, -3.002148300922529e-01, -3.898364307304954e-01, -3.367299137737585e-01, -3.367299137737585e-01, -5.108728878406892e-01, -7.209258497129986e-02, -9.522661917922373e-02, -3.811877982596340e-01, -1.320358455778904e-01, -1.320358455778904e-01, -1.893859260720479e-02, -2.030911115939235e-03, -4.262226811924456e-03, -1.268253235440790e-01, -6.471715827447535e-03, -6.471715827447529e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_bcgp_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_bcgp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-7.849012009279375e-09, -7.848961362175339e-09, -7.848649966761114e-09, -7.849405267101682e-09, -7.849021762426095e-09, -7.849021762426095e-09, -1.052309115954999e-05, -1.052345726649172e-05, -1.053088757785057e-05, -1.050998194952744e-05, -1.052251544773321e-05, -1.052251544773321e-05, -6.611220919600183e-03, -6.613123953202642e-03, -6.565410420404327e-03, -6.389352535898398e-03, -6.456542871504784e-03, -6.456542871504784e-03, -6.339155440206236e-01, -6.348984480870689e-01, -3.709489527208578e-03, -8.127569639366281e-01, -7.862341172093945e-01, -7.862341172093942e-01, -2.149302507434587e+00, -2.270764164676636e+00, -1.275888531167404e+00, -1.952767409729125e+00, -2.481106335532740e+00, -2.481106335532744e+00, -2.322431983278358e-06, -2.322917198536095e-06, -2.322437569161657e-06, -2.322866187764432e-06, -2.322687373843868e-06, -2.322687373843868e-06, -7.879763415085791e-05, -7.735249463321649e-05, -7.856310962093295e-05, -7.730167199740749e-05, -7.809530963264437e-05, -7.809530963264437e-05, -1.338049830504411e-02, -1.105567749495050e-02, -1.778262037714732e-02, -1.763591381878686e-02, -1.280312280444667e-02, -1.280312280444667e-02, -9.058006771670306e-01, -3.826215442289025e-01, -9.949131534887655e-01, -1.347947829966494e-04, -1.101478541796856e+00, -1.101478541796856e+00, -2.572955795699212e+00, -2.298260464908757e+00, -1.443393443882618e+01, -1.449804483183866e+00, -6.716932277886724e+00, -6.716932277886708e+00, -1.565229526925497e-02, -1.549433860108021e-02, -1.554954504315175e-02, -1.559599547442826e-02, -1.557280952458179e-02, -1.557280952458179e-02, -1.764404508627271e-02, -2.299287301292268e-02, -2.148433829134840e-02, -1.999731765379035e-02, -2.078386126833678e-02, -2.078386126833678e-02, -9.104241083115262e-03, -2.293434533893379e-01, -1.604559204468253e-01, -8.760607859015505e-02, -1.228918602762379e-01, -1.228918602762380e-01, -3.172251195955774e-02, -1.163075890330608e+00, -1.163031903096428e+00, -1.131947929299316e-01, -1.617826831288679e+00, -1.617826831288680e+00, -1.732487103696656e+00, -1.127772767771523e+01, -5.458230429105088e+00, -1.632840664087105e+00, -8.484050186293553e+00, -8.484050186293572e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
