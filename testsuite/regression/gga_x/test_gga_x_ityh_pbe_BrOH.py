
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_ityh_pbe_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ityh_pbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.074384496053830e+01, -2.074386920498848e+01, -2.074405326482698e+01, -2.074365474257814e+01, -2.074385711178732e+01, -2.074385711178732e+01, -3.270007888361377e+00, -3.269981712102057e+00, -3.269405571217178e+00, -3.271134222448998e+00, -3.270009202604578e+00, -3.270009202604578e+00, -5.003932476200615e-01, -5.001647681592628e-01, -4.952118736624194e-01, -4.997819776281320e-01, -5.003076807499223e-01, -5.003076807499223e-01, -5.618505253792103e-02, -5.771961020480060e-02, -6.190305173158990e-01, -2.646300699358995e-02, -5.664251378286311e-02, -5.664251378286311e-02, -1.509664901012894e-05, -1.734738702177900e-05, -1.140870294762879e-03, -1.668320619650303e-06, -1.681114580499708e-05, -1.681114580499708e-05, -4.837641509949408e+00, -4.837128319277674e+00, -4.837595139825320e+00, -4.837195998617157e+00, -4.837369504400042e+00, -4.837369504400042e+00, -1.889255452513709e+00, -1.899521562016530e+00, -1.889679378551873e+00, -1.897677981169561e+00, -1.895653240641894e+00, -1.895653240641894e+00, -3.950907769217552e-01, -4.261066450050660e-01, -3.682844865495085e-01, -3.781493533216194e-01, -4.136757941706303e-01, -4.136757941706303e-01, -1.167869117391848e-02, -5.879005584669028e-02, -1.126059461974991e-02, -1.627384868356710e+00, -1.729523326980523e-02, -1.729523326980523e-02, -1.497776780004607e-06, -2.235452549301038e-06, -9.413539598879611e-07, -3.024287715488621e-03, -1.691091115743284e-06, -1.691091115743284e-06, -3.934014811185386e-01, -3.938645596591835e-01, -3.937100543543628e-01, -3.935798494428815e-01, -3.936454533537467e-01, -3.936454533537467e-01, -3.756748337146237e-01, -3.320464836708890e-01, -3.452874331262993e-01, -3.570048685669407e-01, -3.509944434548469e-01, -3.509944434548469e-01, -4.545875555304119e-01, -9.542482618485820e-02, -1.305960439714877e-01, -1.914334706172530e-01, -1.591691171347016e-01, -1.591691171347016e-01, -2.861467990440673e-01, -9.093380775016391e-04, -2.219900880041667e-03, -1.705829125256857e-01, -6.495336978213498e-03, -6.495336978213498e-03, -2.429181007058189e-05, -4.589000412899844e-08, -3.145579458454184e-07, -5.677260005993539e-03, -1.038136507506978e-06, -1.038136507506974e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_ityh_pbe_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ityh_pbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.498045640231682e+01, -2.498054273452852e+01, -2.498093623461953e+01, -2.497952235828904e+01, -2.498050186115928e+01, -2.498050186115928e+01, -3.883594823964979e+00, -3.883629659253092e+00, -3.884753839274091e+00, -3.883672823515597e+00, -3.883629930146681e+00, -3.883629930146681e+00, -6.189889624858359e-01, -6.181224310250497e-01, -5.973508037354700e-01, -6.029902972650719e-01, -6.186728738314967e-01, -6.186728738314967e-01, -9.166700179127375e-02, -9.377586871749742e-02, -7.737050017790118e-01, -4.751219600278109e-02, -9.229439892503792e-02, -9.229439892503792e-02, -3.018111381516266e-05, -3.467939565079878e-05, -2.263167475422221e-03, -3.336334234209546e-06, -3.360769760465996e-05, -3.360769760465996e-05, -6.030680770460098e+00, -6.033235807597960e+00, -6.030942189870943e+00, -6.032928865538905e+00, -6.031990570897467e+00, -6.031990570897467e+00, -2.055422501970229e+00, -2.071539835808441e+00, -2.048329510160828e+00, -2.060796599087412e+00, -2.075897696029765e+00, -2.075897696029765e+00, -5.297957605668139e-01, -6.012887238339472e-01, -4.949587922180232e-01, -5.316827153442667e-01, -5.572066430828065e-01, -5.572066430828065e-01, -2.218726453744091e-02, -9.680371070719061e-02, -2.140372372155585e-02, -2.157892714588879e+00, -3.209418266338850e-02, -3.209418266338850e-02, -2.995297082480572e-06, -4.470404811891570e-06, -1.882589575539815e-06, -5.943729367939381e-03, -3.381868007440950e-06, -3.381868007440950e-06, -5.678025922280500e-01, -5.604389795620492e-01, -5.630350798226712e-01, -5.650734399621072e-01, -5.640501419632943e-01, -5.640501419632943e-01, -5.452044469185033e-01, -4.364996583708939e-01, -4.652066600845363e-01, -4.942112431235984e-01, -4.792137565269426e-01, -4.792137565269426e-01, -6.372742106170373e-01, -1.451719603131572e-01, -1.880570936806231e-01, -2.666632013080010e-01, -2.237599949921122e-01, -2.237599949921121e-01, -3.808787055721340e-01, -1.806286480693302e-03, -4.380457130657141e-03, -2.454878763291356e-01, -1.256632531583588e-02, -1.256632531583588e-02, -4.855663741886963e-05, -9.177924036501558e-08, -6.290968849796192e-07, -1.101398121094220e-02, -2.076133735051555e-06, -2.076133735051547e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_ityh_pbe_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ityh_pbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-6.950258188982674e-09, -6.950216339558367e-09, -6.949943418984288e-09, -6.950630436554184e-09, -6.950236839771516e-09, -6.950236839771516e-09, -8.686519710478003e-06, -8.686723908738898e-06, -8.690933569195694e-06, -8.676486024874472e-06, -8.686480153315336e-06, -8.686480153315336e-06, -3.598291547320232e-03, -3.596360746583883e-03, -3.488625430494842e-03, -3.421025355966482e-03, -3.597665472469910e-03, -3.597665472469910e-03, -5.863634149659429e-02, -6.090490461049825e-02, -2.116909627748500e-03, -2.824340309837554e-02, -5.936649358746202e-02, -5.936649358746202e-02, -5.452257379329458e-06, -6.582686789389221e-06, -7.601088321753910e-04, -2.040784904783585e-07, -6.557962582716066e-06, -6.557962582716066e-06, -1.959287904630580e-06, -1.959523357449182e-06, -1.959303908770721e-06, -1.959487132367381e-06, -1.959420461828267e-06, -1.959420461828267e-06, -6.183901257719261e-05, -6.077389566253784e-05, -6.167500002720833e-05, -6.085274417321261e-05, -6.130599759698870e-05, -6.130599759698870e-05, -7.007739922982406e-03, -6.084329861623490e-03, -8.242377081290520e-03, -8.121464312194158e-03, -6.319105627407577e-03, -6.319105627407577e-03, -1.009790909523962e-02, -3.206510367616226e-02, -1.112801691396288e-02, -1.020646574182445e-04, -1.921818443335188e-02, -1.921818443335188e-02, -1.874972635026113e-07, -3.205422859831146e-07, -2.895868596882364e-07, -2.833010009278738e-03, -3.263633859609994e-07, -3.263633859609994e-07, -7.512987272836747e-03, -7.427771772840852e-03, -7.458209083848537e-03, -7.481923644200358e-03, -7.470079843783580e-03, -7.470079843783580e-03, -8.432457294938035e-03, -9.864754949074035e-03, -9.519941454346084e-03, -9.149086558154895e-03, -9.354190576559810e-03, -9.354190576559810e-03, -5.144730058141348e-03, -3.350227126340417e-02, -3.330104235524053e-02, -2.743265071186890e-02, -3.161291428998799e-02, -3.161291428998800e-02, -1.336977448235968e-02, -4.704633743823929e-04, -1.584158290977446e-03, -3.589044481646884e-02, -7.873419161949727e-03, -7.873419161949675e-03, -7.728953246444981e-06, -3.096170100505811e-09, -3.472089117387961e-08, -8.121169801066749e-03, -2.486454361252133e-07, -2.486454361244844e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
