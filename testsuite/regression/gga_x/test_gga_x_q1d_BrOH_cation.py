
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_q1d_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_q1d", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.905431535687013e+01, -1.905444907125745e+01, -1.905493065512849e+01, -1.905294334162829e+01, -1.905400078328905e+01, -1.905400078328905e+01, -2.892706111544581e+00, -2.892893136519239e+00, -2.897276310702678e+00, -2.890190032528809e+00, -2.892999475266815e+00, -2.892999475266815e+00, -4.214747531247443e-01, -4.166774986069323e-01, -2.954367280223427e-01, -3.028812724232309e-01, -3.252804693196240e-01, -3.252804693196240e-01, -1.091178464686140e-02, -1.270941195178394e-02, -5.356873237517523e-01, -2.063280182333158e-03, -9.169383430733393e-03, -9.169383430733386e-03, -1.385330045355820e-07, -1.664665118241120e-07, -2.159114105480830e-05, -2.523304862999997e-08, -7.907402847418540e-08, -7.907402847199574e-08, -4.790267205201083e+00, -4.793471815093396e+00, -4.790407760926634e+00, -4.793237505891373e+00, -4.791900426774614e+00, -4.791900426774614e+00, -8.165370776023387e-01, -8.484308545630000e-01, -7.550971498667247e-01, -7.821127880437062e-01, -8.654871755712831e-01, -8.654871755712831e-01, -5.074815429082757e-01, -5.965219383406470e-01, -4.543166198011925e-01, -5.276169866919063e-01, -5.277107543294695e-01, -5.277107543294696e-01, -4.169261157353655e-04, -4.407190668015437e-03, -3.338354966981961e-04, -1.796553001565879e+00, -1.000063693094758e-03, -1.000063693094758e-03, -1.331915270130832e-08, -2.555186868848737e-08, -2.892811789701168e-08, -1.057508674680889e-04, -4.072217394488337e-08, -4.072217394363368e-08, -5.497846845619012e-01, -5.486151362123097e-01, -5.494492031305339e-01, -5.497814327844321e-01, -5.496537357314971e-01, -5.496537357314971e-01, -5.336510335377700e-01, -3.170955205858630e-01, -4.203763903936221e-01, -4.916518773983466e-01, -4.608901542060446e-01, -4.608901542060446e-01, -6.252779450930770e-01, -1.168862337754209e-02, -3.355439364045847e-02, -1.943427196371817e-01, -8.793439268842423e-02, -8.793439268842421e-02, -2.855734395966246e-01, -1.786715823506180e-05, -4.677390696876580e-05, -2.442481326127757e-01, -2.635530111743246e-04, -2.635530111742769e-04, -3.481974208563848e-07, -1.097714263876637e-09, -7.025287729257543e-09, -2.083842388629435e-04, -3.395824212986300e-08, -3.395824212979606e-08])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_q1d_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_q1d", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.264507515721678e+01, -3.264499617083226e+01, -3.264471745597434e+01, -3.264473658299421e+01, -3.264421336731218e+01, -3.264383503199542e+01, -3.264823717119415e+01, -3.264896902825205e+01, -3.264482948559804e+01, -3.264738747751926e+01, -3.264482948559804e+01, -3.264738747751926e+01, -6.220894078239207e+00, -6.216489860195672e+00, -6.220372589278197e+00, -6.215681526996008e+00, -6.204828309873509e+00, -6.200789495208077e+00, -6.232782890385811e+00, -6.228116310221074e+00, -6.221556482050997e+00, -6.214538069054730e+00, -6.221556482050997e+00, -6.214538069054730e+00, -1.499011003415133e+00, -1.492014035556988e+00, -1.499339220572455e+00, -1.492920853013859e+00, -1.420132562241002e+00, -1.356964274014652e+00, -1.401171865737944e+00, -1.421103865387161e+00, -1.470455176657981e+00, -9.392597343100945e-01, -1.470455176657981e+00, -9.392597343100945e-01, -6.171671905308997e-02, -7.961985796063302e-02, -7.091526707023646e-02, -9.419030800305821e-02, -1.715214104918472e+00, -1.653701503230339e+00, -1.114761585770723e-02, -1.169679720794002e-02, -6.828023324845643e-02, -2.714145340434429e-03, -6.828023324845649e-02, -2.714145340434634e-03, -5.011039989066288e-07, -5.983324829236699e-07, -5.919476758256684e-07, -7.260025115446390e-07, -7.870372396861398e-05, -9.344536636746482e-05, -1.040864749899765e-07, -9.761494026871936e-08, -3.553709076557599e-07, -1.042628325988074e-07, -3.553709076577442e-07, -1.042628326011637e-07, -7.167466109118475e+00, -7.166338387330152e+00, -7.154372000544130e+00, -7.153676772676856e+00, -7.166805698183710e+00, -7.165951801467706e+00, -7.155566539242532e+00, -7.154446581654940e+00, -7.160683366704322e+00, -7.159950285488503e+00, -7.160683366704322e+00, -7.159950285488503e+00, -4.032579260584749e+00, -4.032215743788401e+00, -4.119711021059056e+00, -4.117275101408397e+00, -3.839489783869380e+00, -3.898238007180941e+00, -3.923394457851736e+00, -3.979669334216693e+00, -4.203340403603993e+00, -4.095574765895742e+00, -4.203340403603993e+00, -4.095574765895742e+00, -9.726194768258867e-01, -9.686761352586876e-01, -7.966125358894286e-01, -7.960570581478636e-01, -9.678920269888948e-01, -9.561528686582244e-01, -7.055659384369671e-01, -7.307666367371964e-01, -9.490197171297764e-01, -9.202383526656320e-01, -9.490197171297766e-01, -9.202383526656320e-01, -1.807317932890327e-03, -1.908122504557987e-03, -2.605156147147703e-02, -2.668203003883856e-02, -1.311900961581422e-03, -1.587711967425801e-03, -2.393802114892275e+00, -2.392597350561629e+00, -3.680391336075428e-03, -6.203591827851415e-03, -3.680391336075428e-03, -6.203591827851415e-03, -5.205912237273843e-08, -5.436134760837138e-08, -1.019385754589060e-07, -1.024646382461641e-07, -1.017428797588117e-07, -1.274739613258875e-07, -4.351270935694827e-04, -4.344814185224148e-04, -7.642857669245475e-08, -1.962701635186523e-07, -7.642857669249463e-08, -1.962701635135580e-07, -7.259794307964864e-01, -7.287851499331162e-01, -7.298623977670500e-01, -7.322144507819346e-01, -7.266133694723987e-01, -7.291651547399192e-01, -7.254948391792129e-01, -7.281945864516243e-01, -7.258758887738761e-01, -7.285126457749241e-01, -7.258758887738761e-01, -7.285126457749241e-01, -7.070792132414387e-01, -7.094259718816048e-01, -1.091568305012574e+00, -1.093221860566172e+00, -9.554468159759761e-01, -9.502390522783597e-01, -7.641246592455030e-01, -7.647453326159254e-01, -8.486664420960852e-01, -8.485781954787563e-01, -8.486664420960852e-01, -8.485781954787563e-01, -8.385083797095365e-01, -8.381423148411498e-01, -7.426967209735692e-02, -7.686057895582622e-02, -2.104026322376649e-01, -2.265471633852477e-01, -7.775860421771092e-01, -7.825609814621078e-01, -5.003029175988672e-01, -5.050495589952674e-01, -5.003029175988666e-01, -5.050495589952672e-01, -1.009366524160865e+00, -1.012063887681490e+00, -7.087916914911943e-05, -7.242856430184305e-05, -1.773642323472946e-04, -1.992765816767061e-04, -7.014749828668192e-01, -6.991808988293837e-01, -9.432592297795194e-04, -1.313779070390080e-03, -9.432592297792891e-04, -1.313779070390120e-03, -1.307083174002458e-06, -1.469856159580443e-06, -3.750850775140170e-09, -5.026495119514253e-09, -2.482807457433496e-08, -3.082163317147338e-08, -8.656425926227695e-04, -9.070473534881162e-04, -9.327543617892897e-08, -1.539675229787761e-07, -9.327543619087739e-08, -1.539675229577574e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_q1d_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_q1d", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([3.665739969427175e-08, 0.000000000000000e+00, 3.665745170363539e-08, 3.665521105203702e-08, 0.000000000000000e+00, 3.665586271665120e-08, 3.665040938155220e-08, 0.000000000000000e+00, 3.664836635973870e-08, 3.667507114532368e-08, 0.000000000000000e+00, 3.667981823654851e-08, 3.665598324537598e-08, 0.000000000000000e+00, 3.666886312324152e-08, 3.665598324537598e-08, 0.000000000000000e+00, 3.666886312324152e-08, 7.563784117970446e-05, 0.000000000000000e+00, 7.555285403115616e-05, 7.562574615293727e-05, 0.000000000000000e+00, 7.553564311487491e-05, 7.527987984106250e-05, 0.000000000000000e+00, 7.518706344466316e-05, 7.582899601119788e-05, 0.000000000000000e+00, 7.572725552583140e-05, 7.572355686101313e-05, 0.000000000000000e+00, 7.541763450317992e-05, 7.572355686101313e-05, 0.000000000000000e+00, 7.541763450317992e-05, 6.667406123906829e-02, 0.000000000000000e+00, 6.650586025339167e-02, 6.666657769034129e-02, 0.000000000000000e+00, 6.660460237515811e-02, 6.168522023001060e-02, 0.000000000000000e+00, 5.773421263812562e-02, 5.816033630959538e-02, 0.000000000000000e+00, 5.941791421682360e-02, 6.480979749425579e-02, 0.000000000000000e+00, 3.385294104036260e-02, 6.480979749425579e-02, 0.000000000000000e+00, 3.385294104036260e-02, 7.591539297063066e-01, 0.000000000000000e+00, 9.022831890104039e-01, 8.744273912073820e-01, 0.000000000000000e+00, 1.055040153702485e+00, 3.859711032710464e-02, 0.000000000000000e+00, 3.343127796284866e-02, 2.353306761589621e-01, 0.000000000000000e+00, 2.352666465173257e-01, 6.965897545189157e-01, 0.000000000000000e+00, 1.353855606700725e-01, 6.965897545189166e-01, 0.000000000000000e+00, 1.353855606700863e-01, 1.088837665509144e-01, 0.000000000000000e+00, 1.078272128351207e-01, 1.147632739628388e-01, 0.000000000000000e+00, 1.142250056899850e-01, 6.836764002785276e-02, 0.000000000000000e+00, 6.942533281075126e-02, 9.956276422745883e-02, 0.000000000000000e+00, 9.685599555998539e-02, 1.086434823526171e-01, 0.000000000000000e+00, 2.753836795492691e-01, 1.086434823451927e-01, 0.000000000000000e+00, 2.753836795321808e-01, 6.304522338767725e-06, 0.000000000000000e+00, 6.314291412288587e-06, 6.208303816402590e-06, 0.000000000000000e+00, 6.221196479041726e-06, 6.299548859540000e-06, 0.000000000000000e+00, 6.311359764855183e-06, 6.216978243097505e-06, 0.000000000000000e+00, 6.226780052757424e-06, 6.254900985675486e-06, 0.000000000000000e+00, 6.267444193816651e-06, 6.254900985675486e-06, 0.000000000000000e+00, 6.267444193816651e-06, 6.821207384541661e-04, 0.000000000000000e+00, 6.821999541024851e-04, 6.832795808344360e-04, 0.000000000000000e+00, 6.835315828680308e-04, 6.396469823264260e-04, 0.000000000000000e+00, 6.527719767328340e-04, 6.430499787594450e-04, 0.000000000000000e+00, 6.551293294347686e-04, 7.098474745776477e-04, 0.000000000000000e+00, 6.871471127938085e-04, 7.098474745776477e-04, 0.000000000000000e+00, 6.871471127938085e-04, 7.970347607516060e-02, 0.000000000000000e+00, 8.029315410309712e-02, 9.454413122371951e-04, 0.000000000000000e+00, 3.426002137021791e-04, 1.406047144548419e-01, 0.000000000000000e+00, 1.118014929401886e-01, 1.383305595894171e-02, 0.000000000000000e+00, 1.340851865508584e-02, 5.759997553250340e-02, 0.000000000000000e+00, 7.494527939732169e-02, 5.759997553250345e-02, 0.000000000000000e+00, 7.494527939732167e-02, 8.583513102140951e-02, 0.000000000000000e+00, 8.958206459357661e-02, 1.851761968821167e-01, 0.000000000000000e+00, 1.868895058048514e-01, 8.578711846436816e-02, 0.000000000000000e+00, 8.966340534537205e-02, -6.096098068526842e-06, 0.000000000000000e+00, -6.481521201065069e-06, 1.378123819339458e-01, 0.000000000000000e+00, 2.379371467566953e-01, 1.378123819339458e-01, 0.000000000000000e+00, 2.379371467566953e-01, 1.397256561741093e-01, 0.000000000000000e+00, 1.209377987461974e-01, 1.203532608760247e-01, 0.000000000000000e+00, 1.111183690838206e-01, 6.857554206058930e-01, 0.000000000000000e+00, 7.630294823543017e-01, 9.530600629544217e-02, 0.000000000000000e+00, 9.163514537976242e-02, 3.409029062528266e-01, 0.000000000000000e+00, 3.351165864005449e-01, 3.409029061161883e-01, 0.000000000000000e+00, 3.351165863739523e-01, -1.633891162487832e-02, 0.000000000000000e+00, -1.633212065794101e-02, -2.054606601805343e-04, 0.000000000000000e+00, -7.316709395850792e-04, -6.230024719147599e-03, 0.000000000000000e+00, -6.591782192861951e-03, -1.096961896308904e-02, 0.000000000000000e+00, -1.110618938263043e-02, -8.636376686388376e-03, 0.000000000000000e+00, -8.880936733854605e-03, -8.636376686388376e-03, 0.000000000000000e+00, -8.880936733854605e-03, -2.309155568278040e-02, 0.000000000000000e+00, -2.282526000592464e-02, 2.326844557379162e-01, 0.000000000000000e+00, 2.291943149578626e-01, 1.675342214187215e-01, 0.000000000000000e+00, 1.621734303605817e-01, 6.749097793380032e-02, 0.000000000000000e+00, 6.559319897221916e-02, 1.167249364432088e-01, 0.000000000000000e+00, 1.138881636620563e-01, 1.167249364432088e-01, 0.000000000000000e+00, 1.138881636620563e-01, 2.607838571322286e-03, 0.000000000000000e+00, 1.809909277760313e-03, 2.504476419609009e-01, 0.000000000000000e+00, 2.554524798918606e-01, 4.445238725370306e-01, 0.000000000000000e+00, 4.710373522566779e-01, 8.813884815787567e-01, 0.000000000000000e+00, 8.681967557572650e-01, 7.914362361588960e-01, 0.000000000000000e+00, 8.061623308850618e-01, 7.914362361588958e-01, 0.000000000000000e+00, 8.061623308850627e-01, 3.231196814538999e-01, 0.000000000000000e+00, 3.162783948448369e-01, 6.213910519987555e-02, 0.000000000000000e+00, 6.227823725282991e-02, 6.518399351529303e-02, 0.000000000000000e+00, 6.740858872458559e-02, 1.100487703636190e+00, 0.000000000000000e+00, 1.023344687912840e+00, 1.160243599865837e-01, 0.000000000000000e+00, 1.557002831277774e-01, 1.160243599865397e-01, 0.000000000000000e+00, 1.557002831278016e-01, 8.647397529456113e-02, 0.000000000000000e+00, 8.831385292755076e-02, 4.297065805059959e-01, 0.000000000000000e+00, 7.611917876807872e-01, 2.652823413484645e-01, 0.000000000000000e+00, 2.824299741696048e-01, 1.270215699377665e-01, 0.000000000000000e+00, 1.260419631434654e-01, 7.030226966518806e-01, 0.000000000000000e+00, 3.478095524936640e-01, 7.030226969174104e-01, 0.000000000000000e+00, 3.478095523814750e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
