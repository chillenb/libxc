
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_2d_pbe_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_2d_pbe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.487383012143455e+02, -1.487388972241197e+02, -1.487417767284119e+02, -1.487329045857581e+02, -1.487375207283404e+02, -1.487375207283404e+02, -1.013561965412468e+01, -1.013557423205460e+01, -1.013488763513800e+01, -1.013889690329521e+01, -1.013592377767476e+01, -1.013592377767476e+01, -1.002532165341991e+00, -1.002136216236619e+00, -9.921564429876285e-01, -1.002551110337370e+00, -9.970257253966813e-01, -9.970257253966813e-01, -1.547110720276124e-01, -1.580225604784420e-01, -1.231431464970307e+00, -1.035800802712600e-01, -1.472672943893588e-01, -1.472672943893588e-01, -1.027620675045189e-03, -1.110631661647194e-03, -1.436965031215340e-02, -4.497351845006942e-04, -7.499537498992529e-04, -7.499537498992529e-04, -1.808867954310684e+01, -1.809139558689807e+01, -1.808883362814650e+01, -1.809123086709161e+01, -1.809004023668637e+01, -1.809004023668637e+01, -4.687241299570852e+00, -4.725959539649766e+00, -4.673519863244220e+00, -4.707740171195660e+00, -4.715231780871239e+00, -4.715231780871239e+00, -7.803101489878914e-01, -8.030803612842106e-01, -7.086013574458535e-01, -6.850405422165405e-01, -7.916505353438119e-01, -7.916505353438121e-01, -6.023667383255418e-02, -1.560673513569480e-01, -5.373933336325709e-02, -4.057457765661551e+00, -7.661720201100036e-02, -7.661720201100036e-02, -3.051090287026612e-04, -4.346805547635776e-04, -2.913925787281325e-04, -2.960876035247327e-02, -4.128652946895511e-04, -4.128652946895512e-04, -6.926971367087733e-01, -7.093956267443929e-01, -7.038982508425111e-01, -6.990386208399629e-01, -7.015021743378129e-01, -7.015021743378129e-01, -6.578097807335535e-01, -6.471590332870683e-01, -6.633833654050407e-01, -6.690760126563721e-01, -6.671545255674527e-01, -6.671545255674527e-01, -8.638711581495190e-01, -2.192702531375992e-01, -2.833423608828032e-01, -4.009410872755006e-01, -3.393085213512421e-01, -3.393085213512420e-01, -5.773898048732482e-01, -1.342282522988296e-02, -2.138256983254724e-02, -3.700930903307469e-01, -4.261327172511133e-02, -4.261327172511134e-02, -1.719433529366517e-03, -6.006252419104302e-05, -1.832386178176607e-04, -3.869981321967347e-02, -3.629889872353706e-04, -3.629889872353701e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_2d_pbe_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_2d_pbe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.206861338321292e+02, -2.206857092410758e+02, -2.206872466670134e+02, -2.206865176546250e+02, -2.206909656358097e+02, -2.206918022069134e+02, -2.206783940382389e+02, -2.206757799091403e+02, -2.206867895322494e+02, -2.206823012595976e+02, -2.206867895322494e+02, -2.206823012595976e+02, -1.406579981738869e+01, -1.406597001131980e+01, -1.406592485325019e+01, -1.406608300868955e+01, -1.406883802365856e+01, -1.406972743679704e+01, -1.406725375401124e+01, -1.406806364169862e+01, -1.406202998823456e+01, -1.407105821067866e+01, -1.406202998823456e+01, -1.407105821067866e+01, -1.220498243895534e+00, -1.220365194658622e+00, -1.220258954540141e+00, -1.220032031326514e+00, -1.218628772412434e+00, -1.220410786058339e+00, -1.231377043121245e+00, -1.230619614383315e+00, -1.223708348685014e+00, -1.244869587478500e+00, -1.223708348685014e+00, -1.244869587478500e+00, -2.172523767738037e-01, -2.282289164744313e-01, -2.204038057109535e-01, -2.329871964464903e-01, -1.478373320515370e+00, -1.525057973018512e+00, -1.515571205072333e-01, -1.545983317501074e-01, -2.309241115943774e-01, -9.552320839095209e-02, -2.309241115943773e-01, -9.552320839095209e-02, -1.465202913478610e-03, -1.604957282873049e-03, -1.571683942894424e-03, -1.742619471958080e-03, -2.060096612800870e-02, -2.235456004251286e-02, -6.828869449147528e-04, -6.658899092909890e-04, -1.234568338201744e-03, -5.299758445318624e-04, -1.234568338201744e-03, -5.299758445318624e-04, -2.630829176418461e+01, -2.629863604729585e+01, -2.631863655817186e+01, -2.630862860477179e+01, -2.630889333308584e+01, -2.629899863397595e+01, -2.631776950052378e+01, -2.630807619420718e+01, -2.631356989264845e+01, -2.630365158586268e+01, -2.631356989264845e+01, -2.630365158586268e+01, -5.819912538500567e+00, -5.819487869668261e+00, -5.880097537573853e+00, -5.877804267219611e+00, -5.777083731151802e+00, -5.788568821841401e+00, -5.827953764424783e+00, -5.840515109018446e+00, -5.887862697121370e+00, -5.854587023326719e+00, -5.887862697121370e+00, -5.854587023326719e+00, -9.622697868719955e-01, -9.584428137162980e-01, -1.096196033042097e+00, -1.097809883100898e+00, -8.445460485008353e-01, -8.841167831955833e-01, -8.815085413314945e-01, -9.258944141029718e-01, -1.014861175552636e+00, -9.425016200954576e-01, -1.014861175552636e+00, -9.425016200954578e-01, -8.934127707750071e-02, -9.059801675524597e-02, -2.274738867900633e-01, -2.290585426359944e-01, -7.698027576013614e-02, -8.319959430357031e-02, -5.880354986563249e+00, -5.876494774474084e+00, -1.088800528007755e-01, -1.182156555964704e-01, -1.088800528007755e-01, -1.182156555964704e-01, -4.437163318088155e-04, -4.700895748997635e-04, -6.445115611489363e-04, -6.591988466446142e-04, -4.167595282568869e-04, -4.542042006648060e-04, -4.415621510160364e-02, -4.456416041569500e-02, -4.301759798195069e-04, -6.923149397430447e-04, -4.301759798195069e-04, -6.923149397430447e-04, -9.948067321754117e-01, -1.001146233898008e+00, -9.635117272502461e-01, -9.697673704256917e-01, -9.729779089051095e-01, -9.793562919967104e-01, -9.820806383611824e-01, -9.883508596183072e-01, -9.773857850360996e-01, -9.837132539371076e-01, -9.773857850360996e-01, -9.837132539371076e-01, -9.641701533717667e-01, -9.690666847629151e-01, -7.916299238700530e-01, -7.949182891257437e-01, -8.058607066134614e-01, -8.097260459931530e-01, -8.360718020007785e-01, -8.403567359773563e-01, -8.170743681172618e-01, -8.211734199173805e-01, -8.170743681172618e-01, -8.211734199173805e-01, -1.173997025734066e+00, -1.178211276611927e+00, -3.131593051418854e-01, -3.154938249194613e-01, -3.912109568561790e-01, -3.953356678714483e-01, -5.052202924113903e-01, -5.080888969272124e-01, -4.516204125467060e-01, -4.508769047473532e-01, -4.516204125467058e-01, -4.508769047473531e-01, -7.091915004458502e-01, -7.132995844372141e-01, -2.002630369846966e-02, -2.023206286392643e-02, -3.122917392728887e-02, -3.280742636472575e-02, -4.548973063056007e-01, -4.613591572558097e-01, -6.098200548640444e-02, -6.609264346049437e-02, -6.098200548640446e-02, -6.609264346049439e-02, -2.506697691512570e-03, -2.644242314607229e-03, -8.993899781404710e-05, -9.024751605406739e-05, -2.610480988802362e-04, -2.863361691356205e-04, -5.720494473580733e-02, -5.860591430571052e-02, -3.965675500818796e-04, -6.075120184653887e-04, -3.965675500818789e-04, -6.075120184653878e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_2d_pbe_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_2d_pbe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.089940006293811e-08, 0.000000000000000e+00, -1.089946360264070e-08, -1.089925144514056e-08, 0.000000000000000e+00, -1.089935563051679e-08, -1.089873287240787e-08, 0.000000000000000e+00, -1.089862463038482e-08, -1.090041240024370e-08, 0.000000000000000e+00, -1.090076501434294e-08, -1.089931360200330e-08, 0.000000000000000e+00, -1.089987764903806e-08, -1.089931360200330e-08, 0.000000000000000e+00, -1.089987764903806e-08, -3.236022909940192e-05, 0.000000000000000e+00, -3.237000222870434e-05, -3.236077810374293e-05, 0.000000000000000e+00, -3.237132213177754e-05, -3.238186533480108e-05, 0.000000000000000e+00, -3.238657722190956e-05, -3.232278806359566e-05, 0.000000000000000e+00, -3.232948391313022e-05, -3.238047244098240e-05, 0.000000000000000e+00, -3.234527498788545e-05, -3.238047244098240e-05, 0.000000000000000e+00, -3.234527498788545e-05, -1.763565200948332e-02, 0.000000000000000e+00, -1.830676628385958e-02, -1.742290156722954e-02, 0.000000000000000e+00, -1.824066274904401e-02, -1.480838909163879e-02, 0.000000000000000e+00, -1.386130928690070e-02, -1.399743999337152e-02, 0.000000000000000e+00, -1.430966446894430e-02, -1.922428703899698e-02, 0.000000000000000e+00, -9.700892057613769e-03, -1.922428703899698e-02, 0.000000000000000e+00, -9.700892057613769e-03, -1.121212024109631e-01, 0.000000000000000e+00, -1.237529868449582e-01, -1.219779945863232e-01, 0.000000000000000e+00, -1.357898135545694e-01, -1.101989259566449e-02, 0.000000000000000e+00, -1.168494439724037e-02, -5.446763690279442e-02, 0.000000000000000e+00, -5.453778959951749e-02, -1.055534665586889e-01, 0.000000000000000e+00, -3.286876538483743e-02, -1.055534665586888e-01, 0.000000000000000e+00, -3.286876538483748e-02, -5.931386576045021e-04, 0.000000000000000e+00, -6.434070240136629e-04, -6.705977035473250e-04, 0.000000000000000e+00, -7.400407199446451e-04, -5.197510772785478e-03, 0.000000000000000e+00, -5.716538940341076e-03, -2.527818291625029e-04, 0.000000000000000e+00, -2.397889143400455e-04, -4.986732672843718e-04, 0.000000000000000e+00, -5.426179429533081e-04, -4.986732672843731e-04, 0.000000000000000e+00, -5.426179429533093e-04, -5.962486553856822e-06, 0.000000000000000e+00, -5.968679792368248e-06, -5.960948327429748e-06, 0.000000000000000e+00, -5.967194412353873e-06, -5.962359926377099e-06, 0.000000000000000e+00, -5.968599234802216e-06, -5.961040661646097e-06, 0.000000000000000e+00, -5.967250324288283e-06, -5.961731739955027e-06, 0.000000000000000e+00, -5.967940126308751e-06, -5.961731739955027e-06, 0.000000000000000e+00, -5.967940126308751e-06, -2.494659246351777e-04, 0.000000000000000e+00, -2.495050450304011e-04, -2.459680406279906e-04, 0.000000000000000e+00, -2.461453431724426e-04, -2.457197167428217e-04, 0.000000000000000e+00, -2.469456870042224e-04, -2.429231197288678e-04, 0.000000000000000e+00, -2.439725617230500e-04, -2.498882360460349e-04, 0.000000000000000e+00, -2.481231430346938e-04, -2.498882360460349e-04, 0.000000000000000e+00, -2.481231430346938e-04, -5.050950086600522e-02, 0.000000000000000e+00, -5.112284606205308e-02, -6.361006608696047e-02, 0.000000000000000e+00, -6.392119154807338e-02, -6.365730012983763e-02, 0.000000000000000e+00, -5.980892223056151e-02, -1.051208072225253e-01, 0.000000000000000e+00, -9.087339427038084e-02, -4.747941692015373e-02, 0.000000000000000e+00, -5.620469392642091e-02, -4.747941692015373e-02, 0.000000000000000e+00, -5.620469392642092e-02, -2.204776450233836e-02, 0.000000000000000e+00, -2.301319372700573e-02, -4.690899693788595e-02, 0.000000000000000e+00, -4.716348331875827e-02, -2.019658436959673e-02, 0.000000000000000e+00, -2.197479888585345e-02, -5.263825041343000e-04, 0.000000000000000e+00, -5.274963645982875e-04, -3.496858929585383e-02, 0.000000000000000e+00, -5.312049028384931e-02, -3.496858929585383e-02, 0.000000000000000e+00, -5.312049028384931e-02, -2.305059142231855e-04, 0.000000000000000e+00, -2.113699154534891e-04, -2.883956164415609e-04, 0.000000000000000e+00, -2.723343282550918e-04, -1.062562371224025e-03, 0.000000000000000e+00, -1.288521474318596e-03, -1.465375427223895e-02, 0.000000000000000e+00, -1.423094230518215e-02, -5.452265719532075e-04, 0.000000000000000e+00, -8.625776363649550e-04, -5.452265719532058e-04, 0.000000000000000e+00, -8.625776363649536e-04, -1.061439603764071e-01, 0.000000000000000e+00, -1.046399732641034e-01, -9.275274153385750e-02, 0.000000000000000e+00, -9.165667141571987e-02, -9.715268414539810e-02, 0.000000000000000e+00, -9.595598474575529e-02, -1.010745004085088e-01, 0.000000000000000e+00, -9.970168186520333e-02, -9.908718872690922e-02, 0.000000000000000e+00, -9.780247332520696e-02, -9.908718872690922e-02, 0.000000000000000e+00, -9.780247332520696e-02, -1.259954800343473e-01, 0.000000000000000e+00, -1.242074632819522e-01, -5.439921197648998e-02, 0.000000000000000e+00, -5.439523849368125e-02, -6.995406528533883e-02, 0.000000000000000e+00, -6.992035171812225e-02, -9.021629524154429e-02, 0.000000000000000e+00, -8.942536587851409e-02, -7.982851913696742e-02, 0.000000000000000e+00, -7.917099052958729e-02, -7.982851913696742e-02, 0.000000000000000e+00, -7.917099052958729e-02, -5.091304602755176e-02, 0.000000000000000e+00, -5.107027992608031e-02, -5.432089310883767e-02, 0.000000000000000e+00, -5.489254588269475e-02, -7.300741632735010e-02, 0.000000000000000e+00, -7.546718504595358e-02, -1.415717604055799e-01, 0.000000000000000e+00, -1.412296485709644e-01, -1.055545578934539e-01, 0.000000000000000e+00, -1.070860862880059e-01, -1.055545578934539e-01, 0.000000000000000e+00, -1.070860862880059e-01, -6.961181461862608e-02, 0.000000000000000e+00, -7.003681629800090e-02, -4.597372547976718e-03, 0.000000000000000e+00, -4.654160671389825e-03, -7.415670536927670e-03, 0.000000000000000e+00, -8.029282318396846e-03, -2.437913299119769e-01, 0.000000000000000e+00, -2.440042332192005e-01, -2.255020861210892e-02, 0.000000000000000e+00, -3.064111292171076e-02, -2.255020861210895e-02, 0.000000000000000e+00, -3.064111292171078e-02, -8.058804291168662e-04, 0.000000000000000e+00, -8.681810900799884e-04, -1.436881248281647e-04, 0.000000000000000e+00, -2.554054551125258e-04, -2.574717365137503e-04, 0.000000000000000e+00, -3.006682916176531e-04, -2.337188737787054e-02, 0.000000000000000e+00, -2.360807449399204e-02, -1.036540520769600e-03, 0.000000000000000e+00, -7.855892565238501e-04, -1.036540520769601e-03, 0.000000000000000e+00, -7.855892565238510e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
