
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_rpw86_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_rpw86", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.125787202879110e+01, -2.125788259354096e+01, -2.125802706592362e+01, -2.125785212393083e+01, -2.125787678661015e+01, -2.125787678661015e+01, -3.555533366027726e+00, -3.555487499221980e+00, -3.554373348839950e+00, -3.557046906797221e+00, -3.555524921607753e+00, -3.555524921607753e+00, -7.249759027214601e-01, -7.251887201905732e-01, -7.318180226603878e-01, -7.361606019929389e-01, -7.250491708142695e-01, -7.250491708142695e-01, -2.256221693572156e-01, -2.266914563251506e-01, -8.375498201749010e-01, -1.854815969424146e-01, -2.259213769476586e-01, -2.259213769476586e-01, -3.080096819578795e-02, -3.168739478635402e-02, -8.444359231854937e-02, -2.037036783306360e-02, -3.136856849770371e-02, -3.136856849770371e-02, -5.072080243453974e+00, -5.070722301367720e+00, -5.071949373311240e+00, -5.070893334363081e+00, -5.071371898289483e+00, -5.071371898289483e+00, -2.203603800885729e+00, -2.213090240453600e+00, -2.205764814034099e+00, -2.213187991447961e+00, -2.207076386837577e+00, -2.207076386837577e+00, -5.849130041785807e-01, -5.945245390425064e-01, -5.582116516776732e-01, -5.483513130473485e-01, -6.007044904729955e-01, -6.007044904729955e-01, -1.517632288736160e-01, -2.450936287516518e-01, -1.486792227496614e-01, -1.808622915056690e+00, -1.650328485798037e-01, -1.650328485798037e-01, -1.981672716586760e-02, -2.147679410118101e-02, -1.625977360906673e-02, -1.056946581188624e-01, -1.953413991046273e-02, -1.953413991046273e-02, -5.576854167755868e-01, -5.603700827068410e-01, -5.591858173145324e-01, -5.584287055778761e-01, -5.587878261127091e-01, -5.587878261127091e-01, -5.390823503046674e-01, -5.341890561522243e-01, -5.351826720177892e-01, -5.340484086534277e-01, -5.344751927389716e-01, -5.344751927389716e-01, -6.245665857221830e-01, -2.926272552155955e-01, -3.288073142715828e-01, -3.806989383066593e-01, -3.537078330706903e-01, -3.537078330706902e-01, -4.856779238239878e-01, -8.135506170431812e-02, -9.965872768032059e-02, -3.466413054083995e-01, -1.264799932557300e-01, -1.264799932557300e-01, -3.491616284068742e-02, -9.331258060533858e-03, -1.392769803266210e-02, -1.204873297899834e-01, -1.705409221472550e-02, -1.705409221472549e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_rpw86_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_rpw86", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.410850506863150e+01, -2.410859604342427e+01, -2.410899807684313e+01, -2.410750853641261e+01, -2.410855307749853e+01, -2.410855307749853e+01, -3.875602924629863e+00, -3.875626125584863e+00, -3.876428314567298e+00, -3.875873518374410e+00, -3.875631365595048e+00, -3.875631365595048e+00, -7.474706745240931e-01, -7.470865576805710e-01, -7.405157920186919e-01, -7.454933118002435e-01, -7.473278062413502e-01, -7.473278062413502e-01, -2.229683493827918e-01, -2.243450531010529e-01, -8.882596728875367e-01, -1.806410257381549e-01, -2.233614105191658e-01, -2.233614105191658e-01, -2.542188091620062e-02, -2.622095767520739e-02, -7.771561468642500e-02, -1.640882338984605e-02, -2.595573756036136e-02, -2.595573756036136e-02, -5.986020522974853e+00, -5.990050543897947e+00, -5.986428222721694e+00, -5.989561661936241e+00, -5.988089259981086e+00, -5.988089259981086e+00, -2.231277795478440e+00, -2.243424686093578e+00, -2.230036807533787e+00, -2.239443940507258e+00, -2.241317531539536e+00, -2.241317531539536e+00, -6.501950733224952e-01, -7.600092731636147e-01, -6.154425731729136e-01, -6.788347169447868e-01, -6.794670256620035e-01, -6.794670256620035e-01, -1.460691726756743e-01, -2.398914311898865e-01, -1.432408986958135e-01, -2.311070508402799e+00, -1.599807961307604e-01, -1.599807961307604e-01, -1.595844175873102e-02, -1.732899592979265e-02, -1.311418860857839e-02, -9.985154494808926e-02, -1.576268501954071e-02, -1.576268501954074e-02, -7.375315563436505e-01, -7.211560796873896e-01, -7.276124316299549e-01, -7.322175884119573e-01, -7.299660678214343e-01, -7.299660678214343e-01, -7.152264587977798e-01, -5.599854663207408e-01, -5.859116124705303e-01, -6.255214664385848e-01, -6.030733239049766e-01, -6.030733239049766e-01, -7.942447774694331e-01, -2.881765395953669e-01, -3.268767688567526e-01, -3.930048307341524e-01, -3.565760634574869e-01, -3.565760634574868e-01, -5.059919217090131e-01, -7.403584155045352e-02, -9.316685806524734e-02, -3.684273087194016e-01, -1.212929842816465e-01, -1.212929842816465e-01, -2.896022629314341e-02, -7.471528087269935e-03, -1.117446551574638e-02, -1.155706638332376e-01, -1.374692809859644e-02, -1.374692809859644e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_rpw86_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_rpw86", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.072391258302471e-08, -1.072386481919666e-08, -1.072349354477868e-08, -1.072427859611758e-08, -1.072388871659572e-08, -1.072388871659572e-08, -1.384579846139706e-05, -1.384657916237070e-05, -1.386572105503434e-05, -1.382097634328862e-05, -1.384596407498167e-05, -1.384596407498167e-05, -7.454277467176275e-03, -7.428569868470124e-03, -6.688626266286951e-03, -6.557707814578655e-03, -7.445165039949020e-03, -7.445165039949020e-03, -6.061415079092799e-01, -6.063244652243220e-01, -4.413275630399408e-03, -1.002292090973754e+00, -6.065773884345624e-01, -6.065773884345624e-01, -6.985622387794191e+02, -6.239185656971722e+02, -1.389692722404350e+01, -3.642471015343945e+03, -6.496667119054782e+02, -6.496667119054782e+02, -3.146563676447884e-06, -3.144520975207278e-06, -3.146351910719149e-06, -3.144764674772912e-06, -3.145540434225184e-06, -3.145540434225184e-06, -8.163134992124258e-05, -8.068190188406519e-05, -8.068131744521749e-05, -7.995193497143093e-05, -8.223680450307491e-05, -8.223680450307491e-05, -1.890119062828792e-02, -1.234732145948679e-02, -2.281523124185691e-02, -2.022177007989906e-02, -1.685048584012116e-02, -1.685048584012116e-02, -1.799547646549356e+00, -3.669472032875473e-01, -1.981591102076379e+00, -1.446041751693270e-04, -1.451123561778647e+00, -1.451123561778647e+00, -4.066867731676195e+03, -2.948087767882439e+03, -8.973320533873215e+03, -6.373825216977654e+00, -4.307669364869515e+03, -4.307669364869504e+03, -1.024421772897184e-02, -1.484529489260508e-02, -1.340532429385969e-02, -1.212940705812259e-02, -1.278491799596347e-02, -1.278491799596347e-02, -1.065086302728284e-02, -2.623160110369693e-02, -2.699567710492470e-02, -2.593314193579728e-02, -2.693066687083211e-02, -2.693066687083210e-02, -1.050532910833668e-02, -2.030652290216501e-01, -1.443596621725322e-01, -9.837115797612017e-02, -1.201174210952521e-01, -1.201174210952522e-01, -3.794694313119990e-02, -1.565804090461124e+01, -7.603031251330874e+00, -1.507798171267266e-01, -3.556625950811806e+00, -3.556625950811808e+00, -4.234268907889635e+02, -8.271490424577027e+04, -1.666612916234162e+04, -4.329925796189141e+00, -7.414594117711460e+03, -7.414594117711471e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
