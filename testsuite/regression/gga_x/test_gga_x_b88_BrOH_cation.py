
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_b88_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_b88", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.106076810680304e+01, -2.106079490778610e+01, -2.106098341628578e+01, -2.106058324235634e+01, -2.106078306547684e+01, -2.106078306547684e+01, -3.493459518311109e+00, -3.493421142116039e+00, -3.492619560263322e+00, -3.494676664160676e+00, -3.493497974114198e+00, -3.493497974114198e+00, -7.012313520455963e-01, -7.012418473364572e-01, -7.032924895572719e-01, -7.080630742634959e-01, -7.083578441914371e-01, -7.083578441914371e-01, -2.190589518222648e-01, -2.197440192701687e-01, -8.099788476624569e-01, -1.939963976773846e-01, -2.171515001465753e-01, -2.171515001465752e-01, -6.493760625975557e-02, -6.493124268037050e-02, -1.138419806961101e-01, -5.961373748023426e-02, -6.047452534262433e-02, -6.047452534262429e-02, -5.060011397050298e+00, -5.059313441486928e+00, -5.059990476846400e+00, -5.059374147500346e+00, -5.059651519886346e+00, -5.059651519886346e+00, -2.124689009621199e+00, -2.134595523312059e+00, -2.126040553105311e+00, -2.134773772100536e+00, -2.129541351342150e+00, -2.129541351342150e+00, -5.840273865713979e-01, -6.047588217003558e-01, -5.450788056054168e-01, -5.397109454142519e-01, -5.904240626481394e-01, -5.904240626481395e-01, -1.682440876532985e-01, -2.405325824746687e-01, -1.612680270978593e-01, -1.819216722867518e+00, -1.725484656576753e-01, -1.725484656576753e-01, -5.386156175738246e-02, -5.742736819349177e-02, -3.755589619367583e-02, -1.315865867757716e-01, -4.578475980248654e-02, -4.578475980248657e-02, -5.515406800442639e-01, -5.556356363472004e-01, -5.542570878267921e-01, -5.530637202814184e-01, -5.536655013001843e-01, -5.536655013001843e-01, -5.343722485622679e-01, -5.133821437005917e-01, -5.200680768427699e-01, -5.259212210364530e-01, -5.228079535017084e-01, -5.228079535017084e-01, -6.352772352936147e-01, -2.811007112262812e-01, -3.132417087076516e-01, -3.677981564393907e-01, -3.376909191901257e-01, -3.376909191901257e-01, -4.737946139590622e-01, -1.139493698459537e-01, -1.263731977793079e-01, -3.441808984453214e-01, -1.411365380806102e-01, -1.411365380806102e-01, -7.295607646642478e-02, -3.334814995050925e-02, -4.352327476835752e-02, -1.376696181021929e-01, -4.303644282217839e-02, -4.303644282217837e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_b88_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_b88", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.521189161083732e+01, -2.521186141204058e+01, -2.521200147928201e+01, -2.521194121116955e+01, -2.521233104445220e+01, -2.521241959346780e+01, -2.521109084103052e+01, -2.521083867074118e+01, -2.521195824586498e+01, -2.521145447787921e+01, -2.521195824586498e+01, -2.521145447787921e+01, -4.058179903687830e+00, -4.058321476093584e+00, -4.058217249316217e+00, -4.058363513513459e+00, -4.059171096125386e+00, -4.059445065297507e+00, -4.058173528779381e+00, -4.058446935563996e+00, -4.057423709464659e+00, -4.059368064412528e+00, -4.057423709464659e+00, -4.059368064412528e+00, -7.642632004144856e-01, -7.690430334953341e-01, -7.624875066980527e-01, -7.683346417248049e-01, -7.394614540933635e-01, -7.319075653130325e-01, -7.410058732966396e-01, -7.434399424792272e-01, -7.776539576959398e-01, -7.042791089551741e-01, -7.776539576959398e-01, -7.042791089551741e-01, -1.848438191595377e-01, -1.922868566912236e-01, -1.872527862572896e-01, -1.959244825045640e-01, -8.789919624862430e-01, -9.168779281977948e-01, -1.432839252439988e-01, -1.451712494612479e-01, -1.930670494889382e-01, -1.083579657882321e-01, -1.930670494889381e-01, -1.083579657882320e-01, -1.766435085248281e-02, -1.823800818527493e-02, -1.797078476554130e-02, -1.862753932225268e-02, -5.190533136749238e-02, -5.375215065983441e-02, -1.403484955004274e-02, -1.398353256574798e-02, -1.669404505554374e-02, -1.131023178105680e-02, -1.669404505554371e-02, -1.131023178105679e-02, -6.206065312454603e+00, -6.204521442241361e+00, -6.208636904116437e+00, -6.207005723168848e+00, -6.206208060896434e+00, -6.204606735667628e+00, -6.208414604921988e+00, -6.206863567325873e+00, -6.207382309738085e+00, -6.205768969649636e+00, -6.207382309738085e+00, -6.205768969649636e+00, -2.201877593589066e+00, -2.201760527339644e+00, -2.220265364122238e+00, -2.219609383423057e+00, -2.182702560562445e+00, -2.188102186925472e+00, -2.198543675111942e+00, -2.204125721545694e+00, -2.226602086368281e+00, -2.213119471498707e+00, -2.226602086368281e+00, -2.213119471498707e+00, -6.893335497018526e-01, -6.875778339948253e-01, -7.730400575691689e-01, -7.737666663534691e-01, -6.212479984788851e-01, -6.462644846950734e-01, -6.697154853491639e-01, -6.915655583858555e-01, -7.203156903903319e-01, -6.833633185535288e-01, -7.203156903903319e-01, -6.833633185535289e-01, -1.058194971271035e-01, -1.064957434544226e-01, -1.884978769214292e-01, -1.894121992829904e-01, -9.735511368024093e-02, -1.014724514626926e-01, -2.331960309436413e+00, -2.330972034277515e+00, -1.171599899717036e-01, -1.220271771175245e-01, -1.171599899717036e-01, -1.220271771175245e-01, -1.180403533398724e-02, -1.225041561047364e-02, -1.343806472822767e-02, -1.367872201029420e-02, -9.288692818297863e-03, -9.406457455726184e-03, -7.231474794102259e-02, -7.282744398109550e-02, -1.031570993258442e-02, -1.197641730920120e-02, -1.031570993258445e-02, -1.197641730920120e-02, -7.225596555555422e-01, -7.255031698614441e-01, -7.103472701683331e-01, -7.133453780361161e-01, -7.144467999468046e-01, -7.174540097294894e-01, -7.180120569796314e-01, -7.209509719494837e-01, -7.162121542179163e-01, -7.191844993713604e-01, -7.162121542179163e-01, -7.191844993713604e-01, -7.059194967067031e-01, -7.082755712136150e-01, -5.621271319715745e-01, -5.648819801469889e-01, -5.987827742786792e-01, -6.018627073833214e-01, -6.387063703000316e-01, -6.411214733078419e-01, -6.181924615677538e-01, -6.206621673543333e-01, -6.181924615677538e-01, -6.206621673543333e-01, -8.085615041011770e-01, -8.104726621541891e-01, -2.377692985480545e-01, -2.391741277478032e-01, -2.871990418323689e-01, -2.903589876631745e-01, -3.940286647019890e-01, -3.963977297613792e-01, -3.368581310306502e-01, -3.368504320188997e-01, -3.368581310306502e-01, -3.368504320188997e-01, -5.161333573828535e-01, -5.202451340346731e-01, -5.168112172546484e-02, -5.190353791105831e-02, -6.288197726572609e-02, -6.417736754016035e-02, -3.831705994253077e-01, -3.896221153080294e-01, -8.455791711401078e-02, -8.721814377854067e-02, -8.455791711401080e-02, -8.721814377854067e-02, -2.186887759646122e-02, -2.223656335453515e-02, -6.585957442506475e-03, -6.011677994617338e-03, -9.279708808482286e-03, -9.429319900676258e-03, -8.134178840273433e-02, -8.243586208698996e-02, -9.117256677404517e-03, -1.143426466607135e-02, -9.117256677404532e-03, -1.143426466607132e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_b88_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_b88", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.452841134517258e-08, 0.000000000000000e+00, -1.452849463233477e-08, -1.452832956381487e-08, 0.000000000000000e+00, -1.452843515844357e-08, -1.452788917377850e-08, 0.000000000000000e+00, -1.452785416265071e-08, -1.452881734975851e-08, 0.000000000000000e+00, -1.452903577178460e-08, -1.452837159605368e-08, 0.000000000000000e+00, -1.452843191795942e-08, -1.452837159605368e-08, 0.000000000000000e+00, -1.452843191795942e-08, -1.919155830728017e-05, 0.000000000000000e+00, -1.919878032310899e-05, -1.919209128659392e-05, 0.000000000000000e+00, -1.919985549494011e-05, -1.921050611790154e-05, 0.000000000000000e+00, -1.921489374207207e-05, -1.916623021687650e-05, 0.000000000000000e+00, -1.917193336200809e-05, -1.920196558407287e-05, 0.000000000000000e+00, -1.918660118911514e-05, -1.920196558407287e-05, 0.000000000000000e+00, -1.918660118911514e-05, -1.200024714377086e-02, 0.000000000000000e+00, -1.201159509134282e-02, -1.200637151302777e-02, 0.000000000000000e+00, -1.201963730237601e-02, -1.211861173272850e-02, 0.000000000000000e+00, -1.211633427796146e-02, -1.177694084754309e-02, 0.000000000000000e+00, -1.178327093490651e-02, -1.194756226966315e-02, 0.000000000000000e+00, -1.169307642380291e-02, -1.194756226966315e-02, 0.000000000000000e+00, -1.169307642380291e-02, -1.614195731756855e+00, 0.000000000000000e+00, -1.457819387347210e+00, -1.583447927477358e+00, 0.000000000000000e+00, -1.407781505709867e+00, -6.952697642614275e-03, 0.000000000000000e+00, -6.501989109454095e-03, -3.175383901318060e+00, 0.000000000000000e+00, -3.036337208760059e+00, -1.376477297204194e+00, 0.000000000000000e+00, -7.769393323368415e+00, -1.376477297204193e+00, 0.000000000000000e+00, -7.769393323368421e+00, -2.223934787030494e+04, 0.000000000000000e+00, -1.862954990914228e+04, -1.973598583261937e+04, 0.000000000000000e+00, -1.617742786808874e+04, -1.281562602440107e+02, 0.000000000000000e+00, -1.103408457305681e+02, -9.375746489118016e+04, 0.000000000000000e+00, -9.765288545906165e+04, -3.085315501970012e+04, 0.000000000000000e+00, -2.028067796541223e+05, -3.085315501970015e+04, 0.000000000000000e+00, -2.028067796541222e+05, -4.377987641202351e-06, 0.000000000000000e+00, -4.381923487972844e-06, -4.381158034578258e-06, 0.000000000000000e+00, -4.384990879250585e-06, -4.378117545536224e-06, 0.000000000000000e+00, -4.381995831629133e-06, -4.380838265575701e-06, 0.000000000000000e+00, -4.384782698337939e-06, -4.379645950454201e-06, 0.000000000000000e+00, -4.383468973762018e-06, -4.379645950454201e-06, 0.000000000000000e+00, -4.383468973762018e-06, -1.462360956999974e-04, 0.000000000000000e+00, -1.462623602320312e-04, -1.431921037351748e-04, 0.000000000000000e+00, -1.433198302142649e-04, -1.466247941482379e-04, 0.000000000000000e+00, -1.465693809324959e-04, -1.439905216830183e-04, 0.000000000000000e+00, -1.438752626690628e-04, -1.441826973003828e-04, 0.000000000000000e+00, -1.446769358044926e-04, -1.441826973003828e-04, 0.000000000000000e+00, -1.446769358044926e-04, -2.441683774952303e-02, 0.000000000000000e+00, -2.469338824473140e-02, -2.194111578303137e-02, 0.000000000000000e+00, -2.197479948440713e-02, -3.455191146477456e-02, 0.000000000000000e+00, -3.058085467874853e-02, -3.680782258443938e-02, 0.000000000000000e+00, -3.217170854942299e-02, -2.151870309741647e-02, 0.000000000000000e+00, -2.613816756825988e-02, -2.151870309741648e-02, 0.000000000000000e+00, -2.613816756825989e-02, -8.034997496026332e+00, 0.000000000000000e+00, -7.888730320853949e+00, -1.205194343591978e+00, 0.000000000000000e+00, -1.187305487219614e+00, -1.085642571481367e+01, 0.000000000000000e+00, -9.384378374470225e+00, -2.683912162985032e-04, 0.000000000000000e+00, -2.689216860669656e-04, -5.918541058440565e+00, 0.000000000000000e+00, -5.521257992237562e+00, -5.918541058440565e+00, 0.000000000000000e+00, -5.521257992237562e+00, -2.360293180060384e+05, 0.000000000000000e+00, -2.028883677161889e+05, -1.104814823652209e+05, 0.000000000000000e+00, -1.034653652268340e+05, -4.153774787665760e+05, 0.000000000000000e+00, -3.628802682165689e+05, -3.319328491461631e+01, 0.000000000000000e+00, -3.225520695116634e+01, -3.213843279981389e+05, 0.000000000000000e+00, -1.283401222632702e+05, -3.213843279981386e+05, 0.000000000000000e+00, -1.283401222632702e+05, -3.300047277706086e-02, 0.000000000000000e+00, -3.254960219665177e-02, -3.107243260496477e-02, 0.000000000000000e+00, -3.065871796710190e-02, -3.164101447190151e-02, 0.000000000000000e+00, -3.122004842417274e-02, -3.219452498234283e-02, 0.000000000000000e+00, -3.175460842486318e-02, -3.190786654632645e-02, 0.000000000000000e+00, -3.147757629096356e-02, -3.190786654632645e-02, 0.000000000000000e+00, -3.147757629096356e-02, -3.803487081354193e-02, 0.000000000000000e+00, -3.754687305460759e-02, -4.200436577821745e-02, 0.000000000000000e+00, -4.145500134054066e-02, -3.936816727834766e-02, 0.000000000000000e+00, -3.885884528837735e-02, -3.768944441591453e-02, 0.000000000000000e+00, -3.722731088947995e-02, -3.848942607689852e-02, 0.000000000000000e+00, -3.799178519101660e-02, -3.848942607689852e-02, 0.000000000000000e+00, -3.799178519101660e-02, -1.799319726742662e-02, 0.000000000000000e+00, -1.796595685066433e-02, -5.796634076613625e-01, 0.000000000000000e+00, -5.702660415990040e-01, -3.437782795868908e-01, 0.000000000000000e+00, -3.354149589235710e-01, -1.612852784289240e-01, 0.000000000000000e+00, -1.583498607292406e-01, -2.344622030348997e-01, 0.000000000000000e+00, -2.355621221718461e-01, -2.344622030348998e-01, 0.000000000000000e+00, -2.355621221718462e-01, -5.817056367215252e-02, 0.000000000000000e+00, -5.704350225279765e-02, -1.314592647233675e+02, 0.000000000000000e+00, -1.290321154618844e+02, -5.760112400542779e+01, 0.000000000000000e+00, -5.298052776008715e+01, -2.101360119540888e-01, 0.000000000000000e+00, -2.003261734593366e-01, -1.865248848106740e+01, 0.000000000000000e+00, -1.710359606433980e+01, -1.865248848106740e+01, 0.000000000000000e+00, -1.710359606433981e+01, -7.462632532254756e+03, 0.000000000000000e+00, -6.779375168369358e+03, -6.977723489990214e+06, 0.000000000000000e+00, -8.119456111925957e+06, -7.829711182720723e+05, 0.000000000000000e+00, -6.668740609140027e+05, -2.167140018280339e+01, 0.000000000000000e+00, -2.061744262225417e+01, -4.601130280375283e+05, 0.000000000000000e+00, -1.666176514965786e+05, -4.601130280375294e+05, 0.000000000000000e+00, -1.666176514965791e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
