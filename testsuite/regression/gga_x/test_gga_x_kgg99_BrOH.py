
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_kgg99_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_kgg99", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.004279785447805e+01, -2.004281104317525e+01, -2.004295699028468e+01, -2.004273928689932e+01, -2.004280408159847e+01, -2.004280408159847e+01, -3.346135290075006e+00, -3.346094489827007e+00, -3.345111516542618e+00, -3.347515315847375e+00, -3.346128559339020e+00, -3.346128559339020e+00, -6.834929194563840e-01, -6.838004655798715e-01, -6.945064871764486e-01, -6.983126926428516e-01, -6.836000547770817e-01, -6.836000547770817e-01, -2.219017962026371e-01, -2.219567776149304e-01, -7.878343880106009e-01, -1.998542853166485e-01, -2.218790930381637e-01, -2.218790930381637e-01, -7.758473440328832e-02, -7.836043888891175e-02, -1.313708027176709e-01, 2.290165760766630e-04, -7.760089003202621e-02, -7.760089003202621e-02, -4.790521607732112e+00, -4.789398305557833e+00, -4.790414008365235e+00, -4.789540448513297e+00, -4.789935023285155e+00, -4.789935023285155e+00, -2.090449495894287e+00, -2.098148078111714e+00, -2.094411370513587e+00, -2.100375888774479e+00, -2.090583947315138e+00, -2.090583947315138e+00, -5.509374605318962e-01, -5.614509281183820e-01, -5.255859547812956e-01, -5.183589057733927e-01, -5.662955081603435e-01, -5.662955081603435e-01, -1.821677577541246e-01, -2.533231057986810e-01, -1.769876944559700e-01, -1.708054975842069e+00, -1.857554011931775e-01, -1.857554011931775e-01, 2.209293128206193e-04, 2.524861124496029e-04, 1.892396260232710e-04, -1.444770402438200e-01, 2.300539961780213e-04, 2.300539961780213e-04, -5.239841083136202e-01, -5.289313526007001e-01, -5.271781096357696e-01, -5.258047446620866e-01, -5.264925840125714e-01, -5.264925840125714e-01, -5.059117748533306e-01, -5.026688102512612e-01, -5.037500694922135e-01, -5.042589737642067e-01, -5.037988028367658e-01, -5.037988028367658e-01, -5.900000868169095e-01, -2.917510152513990e-01, -3.183875015595982e-01, -3.588335351648143e-01, -3.365109611549449e-01, -3.365109611549448e-01, -4.572323033828738e-01, -1.326365126453829e-01, -1.441664757648382e-01, -3.260597769446696e-01, -1.563518280840043e-01, -1.563518280840043e-01, -8.499866415961564e-02, 6.912633375357860e-05, 1.313148543338739e-04, -1.486969948554662e-01, 1.955154519812883e-04, 1.955154519812880e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_kgg99_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_kgg99", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.306364053415804e+01, -2.306372851174428e+01, -2.306411596412747e+01, -2.306267541985627e+01, -2.306368697261768e+01, -2.306368697261768e+01, -3.685713485215520e+00, -3.685757841178750e+00, -3.687129576108407e+00, -3.685548257270672e+00, -3.685751999179210e+00, -3.685751999179210e+00, -6.806604926270485e-01, -6.794792800004242e-01, -6.497694315404519e-01, -6.554470861632364e-01, -6.802314360086995e-01, -6.802314360086995e-01, -1.778800697903587e-01, -1.804901365741803e-01, -8.332971968098135e-01, -1.304552554498211e-01, -1.786604280449847e-01, -1.786604280449847e-01, -2.370972072525264e-02, -2.420310616234302e-02, -5.605422649998680e-02, 3.053554347688840e-04, -2.396331575530303e-02, -2.396331575530303e-02, -5.708757324591949e+00, -5.711775596846536e+00, -5.709064492567975e+00, -5.711411371544639e+00, -5.710306685693836e+00, -5.710306685693836e+00, -1.961184320379433e+00, -1.977432336957432e+00, -1.952288702199091e+00, -1.964902407687882e+00, -1.983966286195404e+00, -1.983966286195404e+00, -6.210915157388425e-01, -7.123080114350304e-01, -5.870482323465851e-01, -6.410930454921469e-01, -6.499848178515429e-01, -6.499848178515429e-01, -1.013294309406694e-01, -1.791232377269312e-01, -9.950936863015884e-02, -2.166221234614231e+00, -1.129533122520199e-01, -1.129533122520199e-01, 2.945724170941591e-04, 3.366481499328038e-04, 2.523195013643613e-04, -6.943164561332622e-02, 3.067386615706951e-04, 3.067386615706951e-04, -6.883586803811972e-01, -6.749362529932579e-01, -6.796527120293819e-01, -6.833709973819135e-01, -6.815035750601039e-01, -6.815035750601039e-01, -6.679030496227534e-01, -5.202800308999993e-01, -5.579283442223653e-01, -5.971834018668616e-01, -5.768569808483991e-01, -5.768569808483990e-01, -7.452755705083879e-01, -2.248041571063868e-01, -2.693177760144709e-01, -3.585400470302254e-01, -3.096790042718219e-01, -3.096790042718218e-01, -4.670796090589397e-01, -5.444256112808789e-02, -6.560450360759391e-02, -3.461489694002092e-01, -8.386329802015523e-02, -8.386329802015521e-02, -2.649591299309871e-02, 9.216844500477144e-05, 1.750864724451651e-04, -7.991633241128847e-02, 2.606872693083844e-04, 2.606872693083840e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_kgg99_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_kgg99", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-9.267409467941999e-09, -9.267358197170663e-09, -9.267007233071121e-09, -9.267849243490388e-09, -9.267383451275576e-09, -9.267383451275576e-09, -1.241645071114299e-05, -1.241678092389695e-05, -1.242380695287323e-05, -1.240117760297388e-05, -1.241640897749775e-05, -1.241640897749775e-05, -7.845403735169405e-03, -7.848366691726004e-03, -7.854312813319414e-03, -7.657326078915749e-03, -7.846628555654451e-03, -7.846628555654451e-03, -9.185321629938911e-01, -8.984894663057548e-01, -4.194522318853523e-03, -2.044899480189057e+00, -9.128085217311965e-01, -9.128085217311965e-01, -3.560060022384078e+03, -3.124768586454609e+03, -4.746033522168475e+01, 0.000000000000000e+00, -3.254860735989318e+03, -3.254860735989318e+03, -2.748972843717605e-06, -2.749580965871065e-06, -2.749022930278719e-06, -2.749496003128518e-06, -2.749302509335388e-06, -2.749302509335388e-06, -9.539951959656876e-05, -9.354061032888115e-05, -9.535146732213841e-05, -9.390054618040840e-05, -9.419837597943627e-05, -9.419837597943627e-05, -1.654057479884082e-02, -1.370824687947191e-02, -2.014012025764644e-02, -1.935250882341646e-02, -1.457599271007280e-02, -1.457599271007280e-02, -4.526252024106253e+00, -6.698824667583944e-01, -4.917193142026537e+00, -1.600955838063200e-04, -3.254851849643599e+00, -3.254851849643599e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.911843580641836e+01, 0.000000000000000e+00, 0.000000000000000e+00, -1.742109492388779e-02, -1.730096540784184e-02, -1.734648257931921e-02, -1.738015043791976e-02, -1.736358543186394e-02, -1.736358543186394e-02, -1.993951974601130e-02, -2.583165647240704e-02, -2.405074772893983e-02, -2.252270389522591e-02, -2.332086749259089e-02, -2.332086749259091e-02, -1.129111234738144e-02, -3.269116263874436e-01, -2.008774357158417e-01, -1.029302253775087e-01, -1.451443905673138e-01, -1.451443905673139e-01, -3.821090144718279e-02, -5.565549037867243e+01, -2.424179034604601e+01, -1.424759304613410e-01, -9.360174469588907e+00, -9.360174469588909e+00, -2.089756207877223e+03, 0.000000000000000e+00, 0.000000000000000e+00, -1.136736782828889e+01, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
