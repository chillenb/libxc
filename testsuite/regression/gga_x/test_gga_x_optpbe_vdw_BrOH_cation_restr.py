
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_optpbe_vdw_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_optpbe_vdw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.074697511418096e+01, -2.074700671552629e+01, -2.074720719126396e+01, -2.074673579497890e+01, -2.074697426451430e+01, -2.074697426451430e+01, -3.432053045387474e+00, -3.432021093689725e+00, -3.431366850440780e+00, -3.433156475743316e+00, -3.432097468813578e+00, -3.432097468813578e+00, -6.863144608990999e-01, -6.862718287193990e-01, -6.873238718165300e-01, -6.920381556600816e-01, -6.902459544831824e-01, -6.902459544831824e-01, -2.137449773862348e-01, -2.144405043997609e-01, -7.928676269660411e-01, -1.863018850144999e-01, -1.962203170437199e-01, -1.962203170437199e-01, -1.144665355642916e-02, -1.204626406975156e-02, -6.471422383988634e-02, -6.615695440109165e-03, -8.310890809208308e-03, -8.310890809208308e-03, -4.997749491712803e+00, -4.997380560169106e+00, -4.997742033517952e+00, -4.997416187674669e+00, -4.997557145845642e+00, -4.997557145845642e+00, -2.076118495877185e+00, -2.085938634578335e+00, -2.077155389801273e+00, -2.085790785337643e+00, -2.081076019999230e+00, -2.081076019999230e+00, -5.744764859518969e-01, -6.006428127596725e-01, -5.352631540911401e-01, -5.347519828133441e-01, -5.806451441921618e-01, -5.806451441921618e-01, -1.487757184422166e-01, -2.333201267103212e-01, -1.397858306857580e-01, -1.807407315694680e+00, -1.617182014792802e-01, -1.617182014792802e-01, -5.105007232482701e-03, -6.467345492776059e-03, -4.944420047992774e-03, -9.999881025870985e-02, -5.956524345921256e-03, -5.956524345921256e-03, -5.500468980930100e-01, -5.519973782465036e-01, -5.513179301047123e-01, -5.507459942020455e-01, -5.510319226712462e-01, -5.510319226712462e-01, -5.336506088881536e-01, -5.025537369121941e-01, -5.106672972481078e-01, -5.189799246984098e-01, -5.144990687764968e-01, -5.144990687764968e-01, -6.306183142311762e-01, -2.742855245887059e-01, -3.059582382850313e-01, -3.597280083040730e-01, -3.298268726070446e-01, -3.298268726070446e-01, -4.637143265646680e-01, -6.215406765328133e-02, -8.301420364359444e-02, -3.372798848376266e-01, -1.207671132486259e-01, -1.207671132486259e-01, -1.614093938466922e-02, -1.729283724196158e-03, -3.629418401544046e-03, -1.150584516621939e-01, -5.511756187858667e-03, -5.511756187858662e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_optpbe_vdw_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_optpbe_vdw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.530339407058775e+01, -2.530349359414215e+01, -2.530391138101905e+01, -2.530243117742778e+01, -2.530321028180838e+01, -2.530321028180838e+01, -4.062025666687586e+00, -4.062074568147710e+00, -4.063304870015031e+00, -4.061937573954738e+00, -4.062182217897337e+00, -4.062182217897337e+00, -7.610171395120597e-01, -7.595897775574721e-01, -7.250992200971148e-01, -7.317799474133510e-01, -7.308904355857722e-01, -7.308904355857722e-01, -1.867889511750079e-01, -1.889615258602944e-01, -8.936967866287026e-01, -1.609537213653943e-01, -1.669950165546959e-01, -1.669950165546960e-01, -1.522912968724809e-02, -1.602206144780243e-02, -8.168673585153592e-02, -8.814840666678906e-03, -1.106758628983621e-02, -1.106758628983621e-02, -6.235373400880401e+00, -6.238015814390208e+00, -6.235492264675115e+00, -6.237825047279585e+00, -6.236714342376764e+00, -6.236714342376764e+00, -2.166918528386085e+00, -2.185957399836343e+00, -2.148099715227924e+00, -2.164795087928728e+00, -2.186698953963466e+00, -2.186698953963466e+00, -6.901079218104107e-01, -7.768696402313048e-01, -6.347003022046928e-01, -6.841896526484534e-01, -7.045590726478781e-01, -7.045590726478781e-01, -1.495796045771674e-01, -1.985877343717575e-01, -1.441582552737327e-01, -2.341643466465932e+00, -1.468140778678427e-01, -1.468140778678427e-01, -6.803466139329349e-03, -8.616958536882621e-03, -6.585651956027013e-03, -1.151894943692929e-01, -7.933793262747466e-03, -7.933793262747466e-03, -7.256878250386494e-01, -7.149702131657196e-01, -7.187056376506701e-01, -7.218202478157872e-01, -7.202591783314497e-01, -7.202591783314497e-01, -7.079699747370862e-01, -5.597100413901719e-01, -6.004570318743517e-01, -6.428309200227100e-01, -6.211885045362654e-01, -6.211885045362654e-01, -8.132885042402257e-01, -2.376695910643627e-01, -2.818683922706611e-01, -3.912237245819645e-01, -3.297559801297545e-01, -3.297559801297545e-01, -5.144216340271002e-01, -7.898097930159627e-02, -1.014301830670842e-01, -3.851343810908625e-01, -1.264171347861796e-01, -1.264171347861795e-01, -2.143799370475820e-02, -2.305450395819296e-03, -4.837544337718715e-03, -1.235403022765109e-01, -7.341671690412237e-03, -7.341671690412231e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_optpbe_vdw_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_optpbe_vdw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-5.973219809805342e-09, -5.973168510809883e-09, -5.972895290871224e-09, -5.973659458347851e-09, -5.973265459786628e-09, -5.973265459786628e-09, -8.226828939279203e-06, -8.226955505644053e-06, -8.229073044638572e-06, -8.219144030171284e-06, -8.226187457147068e-06, -8.226187457147068e-06, -5.495283900226877e-03, -5.506620150800111e-03, -5.739005806889126e-03, -5.571450281528925e-03, -5.621945517042041e-03, -5.621945517042041e-03, -7.282635157175974e-01, -7.145615392711455e-01, -3.034929028512426e-03, -1.186398408494931e+00, -1.027694875887625e+00, -1.027694875887625e+00, -4.887382084091521e+00, -5.162103347854067e+00, -2.757572980594707e+00, -4.446718607772991e+00, -5.646932432020185e+00, -5.646932432020197e+00, -1.732492602983852e-06, -1.732103843890515e-06, -1.732465748164556e-06, -1.732122689632058e-06, -1.732300536464477e-06, -1.732300536464477e-06, -6.966477869915830e-05, -6.809391909996641e-05, -7.015246219750540e-05, -6.875735908279761e-05, -6.855328712507863e-05, -6.855328712507863e-05, -1.032123200218263e-02, -7.995572274418560e-03, -1.387863594377878e-02, -1.287303780193585e-02, -9.787645404027623e-03, -9.787645404027623e-03, -1.643541185970305e+00, -5.107249008893736e-01, -1.840907065429850e+00, -9.734508586144856e-05, -1.785901664092802e+00, -1.785901664092802e+00, -5.860188467293620e+00, -5.233327430570616e+00, -3.285686420696148e+01, -2.885066427290162e+00, -1.529032331715554e+01, -1.529032331715551e+01, -1.113144974568073e-02, -1.119207800091678e-02, -1.117072265535893e-02, -1.115340523591187e-02, -1.116210956668635e-02, -1.116210956668635e-02, -1.248962968959766e-02, -1.903023825430795e-02, -1.689681669430155e-02, -1.501219407855206e-02, -1.595957146817442e-02, -1.595957146817442e-02, -6.600482294808925e-03, -2.700062248770904e-01, -1.661167179044609e-01, -7.422737334901164e-02, -1.140038622355137e-01, -1.140038622355137e-01, -2.635624216400125e-02, -2.530269491187214e+00, -2.434332459545633e+00, -9.147768484101836e-02, -3.025212670211356e+00, -3.025212670211358e+00, -3.933180599883099e+00, -2.569500287823027e+01, -1.243318673529713e+01, -3.104863326066506e+00, -1.931368213000619e+01, -1.931368213000624e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
