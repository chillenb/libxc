
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_fd_lb94_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_fd_lb94", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-3.150644899542656e+01, -3.150622182910011e+01, -3.150574440394070e+01, -3.150911327045266e+01, -3.150727232825216e+01, -3.150727232825216e+01, -5.775411249024764e+00, -5.774958286835311e+00, -5.764630821219047e+00, -5.783686872279736e+00, -5.775008051872110e+00, -5.775008051872110e+00, -1.400037904516461e+00, -1.406907787012669e+00, -1.596737508531325e+00, -1.598068748624884e+00, -1.609828579093306e+00, -1.609828579093306e+00, -8.298184607551458e-01, -8.054436640171135e-01, -1.547187144869578e+00, -1.060972057733601e+00, -9.130155157110328e-01, -9.130155157110327e-01, -3.083580625493472e+00, -2.985637641579289e+00, -2.028753697536962e+00, -3.684864019723545e+00, -3.141756526853301e+00, -3.141756526853300e+00, -6.960118907387699e+00, -6.945686983155196e+00, -6.959533591309487e+00, -6.946791704280584e+00, -6.952759317582547e+00, -6.952759317582547e+00, -4.953329998747684e+00, -4.926983691962938e+00, -5.070522372561828e+00, -5.046513305848354e+00, -4.882877410895148e+00, -4.882877410895148e+00, -9.201515733091739e-01, -7.126622651589452e-01, -8.955367633192470e-01, -6.685297438360882e-01, -8.984764634524173e-01, -8.984764634524174e-01, -1.395458939151944e+00, -1.147183810709124e+00, -1.415199364206126e+00, -2.126454580389920e+00, -1.124409323934874e+00, -1.124409323934874e+00, -3.607781418810718e+00, -3.522390304641783e+00, -2.116138790440885e+00, -1.544310487545626e+00, -2.546738968702178e+00, -2.546738968702181e+00, -5.868171262403699e-01, -6.502972785675473e-01, -6.283726325154617e-01, -6.099071660157527e-01, -6.191758160767473e-01, -6.191758160767473e-01, -5.508038367649933e-01, -1.012873094103486e+00, -8.775710388149178e-01, -7.437054353984049e-01, -8.098418440589645e-01, -8.098418440589645e-01, -7.589546397029913e-01, -1.107051804142081e+00, -9.990824639123583e-01, -7.728002199475986e-01, -8.747604476171187e-01, -8.747604476171186e-01, -9.448042311639353e-01, -2.135039424654856e+00, -1.867526587808072e+00, -6.336795537147660e-01, -1.283313803321313e+00, -1.283313803321313e+00, -2.992715847741535e+00, -2.950020362887390e+00, -3.103116048343320e+00, -1.329553848950039e+00, -2.416279017939371e+00, -2.416279017939369e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_fd_lb94_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_fd_lb94", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.370470158330124e+01, -1.370471208609176e+01, -1.370509874069788e+01, -1.370500040135262e+01, -1.370590614205382e+01, -1.370628703376341e+01, -1.370143278305117e+01, -1.370058159803845e+01, -1.370496184555683e+01, -1.370252151154994e+01, -1.370496184555683e+01, -1.370252151154994e+01, -1.620315153664034e+00, -1.623028617555206e+00, -1.620662803108629e+00, -1.623547197939849e+00, -1.630821579497866e+00, -1.633494714253227e+00, -1.613471647205136e+00, -1.616504782827463e+00, -1.618965922862438e+00, -1.625491077672269e+00, -1.618965922862438e+00, -1.625491077672269e+00, -4.335475573286709e-02, -7.505163646687446e-02, -3.248604935963328e-02, -7.136396497583568e-02, 1.116302135379178e-01, 1.662413435774766e-01, 1.392710515612575e-01, 1.211265752435269e-01, -1.225042566334743e-01, 4.387543524469264e-01, -1.225042566334743e-01, 4.387543524469264e-01, 3.519800758565487e-01, 3.250937708115625e-01, 3.329289997635029e-01, 3.033238899382475e-01, -6.892772928715134e-02, -2.120437984677099e-01, 5.376199349837644e-01, 5.365784413701143e-01, 3.564191473157303e-01, 6.594371995311491e-01, 3.564191473157300e-01, 6.594371995311499e-01, 1.156028307033490e+00, 1.151407985153484e+00, 1.133397317547526e+00, 1.126108214461001e+00, 1.014878870254166e+00, 9.987679806116044e-01, 1.247703017074062e+00, 1.259130942969233e+00, 1.171043007311008e+00, 9.596591453218216e-01, 1.171043007311006e+00, 9.596591453218217e-01, -4.052018725926618e+00, -4.050393114002148e+00, -4.068913948813831e+00, -4.066717945232682e+00, -4.052890050594885e+00, -4.050905954133311e+00, -4.067388023858908e+00, -4.065737012002498e+00, -4.060725602845748e+00, -4.058601904490760e+00, -4.060725602845748e+00, -4.058601904490760e+00, 5.479127197675012e-01, 5.480226018715952e-01, 5.009987372273423e-01, 5.020653619142816e-01, 6.801169258664070e-01, 6.409469369820595e-01, 6.384622572925176e-01, 6.000892159989073e-01, 4.263990769416349e-01, 5.101534702377800e-01, 4.263990769416349e-01, 5.101534702377800e-01, -3.242174661472083e-01, -3.242692763928206e-01, -6.411557471054393e-01, -6.452308866370841e-01, -2.390937444941546e-01, -2.779353596697985e-01, -5.222115482435763e-01, -5.353561965474058e-01, -3.807008820800749e-01, -3.483805694779417e-01, -3.807008820800749e-01, -3.483805694779419e-01, 7.602179080946989e-01, 7.492890935028651e-01, 5.501152040380295e-01, 5.480643760950176e-01, 7.755926241941346e-01, 7.573584942394287e-01, -1.959443595648507e+00, -1.959158127408991e+00, 6.469466881858231e-01, 5.489132234147683e-01, 6.469466881858231e-01, 5.489132234147683e-01, 1.167890508924586e+00, 1.210563831119804e+00, 1.188935018154854e+00, 1.213468740111878e+00, 7.589103672253600e-01, 7.327743322024253e-01, 8.167402746815692e-01, 8.255211816276462e-01, 9.172625378132693e-01, 8.932731846540418e-01, 9.172625378132694e-01, 8.932731846540419e-01, -6.770602196101073e-01, -6.810911832853322e-01, -5.949579420888241e-01, -5.995310248717652e-01, -6.225273090734973e-01, -6.270998865960230e-01, -6.465212470519557e-01, -6.505806769824206e-01, -6.344144475788216e-01, -6.387235334658323e-01, -6.344144475788216e-01, -6.387235334658323e-01, -6.844725737633651e-01, -6.869423604471309e-01, -5.330236945936273e-02, -5.918235753079882e-02, -2.174120638660073e-01, -2.243947352122068e-01, -3.937273225812418e-01, -3.970979459774677e-01, -3.050585175264258e-01, -3.084256239202870e-01, -3.050585175264258e-01, -3.084256239202870e-01, -6.576444537722710e-01, -6.647554615332020e-01, 4.690045380943532e-01, 4.647799517809427e-01, 3.343885641801724e-01, 3.218325044529365e-01, 1.107197100816850e-02, 7.406245518810128e-03, 1.732629122804305e-01, 1.698789339233127e-01, 1.732629122804309e-01, 1.698789339233125e-01, -3.607106670638342e-02, -4.634345316508682e-02, 1.048523631957770e+00, 1.046371427060930e+00, 9.695358578904594e-01, 9.524079355975626e-01, -8.071335049028300e-02, -9.269083323459754e-02, 7.315847368029716e-01, 6.618537106511545e-01, 7.315847368029724e-01, 6.618537106511554e-01, 1.183058362254164e+00, 1.171025674908951e+00, 9.402259308090066e-01, 8.060420964819729e-01, 1.011894316766156e+00, 9.895583306328685e-01, 7.183643988758666e-01, 7.175103798594850e-01, 7.561942578859421e-01, 8.920321103668262e-01, 7.561942578859416e-01, 8.920321103668268e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_fd_lb94_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_fd_lb94", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.433215289207960e-07, 0.000000000000000e+00, -1.433223212297016e-07, -1.433203547219764e-07, 0.000000000000000e+00, -1.433214678097141e-07, -1.433153262500700e-07, 0.000000000000000e+00, -1.433146185521526e-07, -1.433286197494871e-07, 0.000000000000000e+00, -1.433315522080596e-07, -1.433208928402369e-07, 0.000000000000000e+00, -1.433238470671414e-07, -1.433208928402369e-07, 0.000000000000000e+00, -1.433238470671414e-07, -1.945491240217509e-04, 0.000000000000000e+00, -1.945986687636681e-04, -1.945515641039725e-04, 0.000000000000000e+00, -1.946050969617974e-04, -1.946511028305115e-04, 0.000000000000000e+00, -1.946727152087128e-04, -1.943531988198656e-04, 0.000000000000000e+00, -1.943850208030869e-04, -1.946639571302153e-04, 0.000000000000000e+00, -1.944570311023688e-04, -1.946639571302153e-04, 0.000000000000000e+00, -1.944570311023688e-04, -1.293158420162640e-01, 0.000000000000000e+00, -1.285316637698697e-01, -1.296943471702586e-01, 0.000000000000000e+00, -1.287223983342694e-01, -1.351969414372687e-01, 0.000000000000000e+00, -1.368423832120461e-01, -1.321749665779540e-01, 0.000000000000000e+00, -1.317117040855424e-01, -1.265191892455262e-01, 0.000000000000000e+00, -1.402975118804483e-01, -1.265191892455262e-01, 0.000000000000000e+00, -1.402975118804483e-01, -2.286472918984991e+01, 0.000000000000000e+00, -2.013726819834861e+01, -2.210075795167782e+01, 0.000000000000000e+00, -1.911326616316785e+01, -7.464465276262068e-02, 0.000000000000000e+00, -6.796045068057602e-02, -5.430748127657457e+01, 0.000000000000000e+00, -5.166590453289902e+01, -1.936625419768918e+01, 0.000000000000000e+00, -1.603092968605274e+02, -1.936625419768918e+01, 0.000000000000000e+00, -1.603092968605275e+02, -1.727004360184593e+06, 0.000000000000000e+00, -1.415613348848462e+06, -1.498780279535289e+06, 0.000000000000000e+00, -1.197649177360658e+06, -4.886918268135313e+03, 0.000000000000000e+00, -4.085052908373736e+03, -8.795195869665356e+06, 0.000000000000000e+00, -9.234929162354501e+06, -2.499024537950101e+06, 0.000000000000000e+00, -1.847489395240018e+07, -2.499024537950103e+06, 0.000000000000000e+00, -1.847489395240018e+07, -4.228401285582582e-05, 0.000000000000000e+00, -4.232285038364595e-05, -4.229435304029559e-05, 0.000000000000000e+00, -4.233285790647699e-05, -4.228423071347691e-05, 0.000000000000000e+00, -4.232293928081356e-05, -4.229310560728418e-05, 0.000000000000000e+00, -4.233203269711808e-05, -4.228957210847172e-05, 0.000000000000000e+00, -4.232791221876317e-05, -4.228957210847172e-05, 0.000000000000000e+00, -4.232791221876317e-05, -1.657321436891823e-03, 0.000000000000000e+00, -1.657635740535053e-03, -1.616833389925372e-03, 0.000000000000000e+00, -1.618417186457363e-03, -1.678270802756527e-03, 0.000000000000000e+00, -1.672724436295280e-03, -1.642640984049746e-03, 0.000000000000000e+00, -1.636632611402841e-03, -1.619118793420294e-03, 0.000000000000000e+00, -1.634869684987455e-03, -1.619118793420294e-03, 0.000000000000000e+00, -1.634869684987455e-03, -2.442477880965721e-01, 0.000000000000000e+00, -2.469547090349609e-01, -2.045888792828397e-01, 0.000000000000000e+00, -2.047143413002935e-01, -3.511977166471210e-01, 0.000000000000000e+00, -3.082308786303941e-01, -3.466843411557337e-01, 0.000000000000000e+00, -3.033604829299782e-01, -2.128925482915202e-01, 0.000000000000000e+00, -2.595188281379125e-01, -2.128925482915202e-01, 0.000000000000000e+00, -2.595188281379125e-01, -1.787123826971023e+02, 0.000000000000000e+00, -1.737618152548349e+02, -1.903844919519303e+01, 0.000000000000000e+00, -1.870900183274316e+01, -2.536897239326390e+02, 0.000000000000000e+00, -2.125179532446621e+02, -2.497018990710012e-03, 0.000000000000000e+00, -2.501833636530852e-03, -1.171577503156086e+02, 0.000000000000000e+00, -1.007611634833725e+02, -1.171577503156086e+02, 0.000000000000000e+00, -1.007611634833725e+02, -2.370505102731230e+07, 0.000000000000000e+00, -2.036045755350956e+07, -1.033272809282685e+07, 0.000000000000000e+00, -9.692896793955600e+06, -3.695683222633300e+07, 0.000000000000000e+00, -3.134577699982800e+07, -9.284053774777460e+02, 0.000000000000000e+00, -9.039382791135353e+02, -3.015239834277277e+07, 0.000000000000000e+00, -1.079292699785917e+07, -3.015239834277275e+07, 0.000000000000000e+00, -1.079292699785918e+07, -3.005778146127567e-01, 0.000000000000000e+00, -2.963433612067604e-01, -2.892478795694639e-01, 0.000000000000000e+00, -2.852266931616189e-01, -2.924729299703342e-01, 0.000000000000000e+00, -2.884152802525676e-01, -2.957269755430727e-01, 0.000000000000000e+00, -2.915596400455351e-01, -2.940308999918703e-01, 0.000000000000000e+00, -2.899198471187233e-01, -2.940308999918703e-01, 0.000000000000000e+00, -2.899198471187233e-01, -3.434194508828657e-01, 0.000000000000000e+00, -3.389865905008517e-01, -4.496883190916816e-01, 0.000000000000000e+00, -4.430442102200542e-01, -4.017638143491661e-01, 0.000000000000000e+00, -3.958540827331851e-01, -3.666133848726962e-01, 0.000000000000000e+00, -3.619116413657926e-01, -3.833385065367471e-01, 0.000000000000000e+00, -3.781338802159839e-01, -3.833385065367471e-01, 0.000000000000000e+00, -3.781338802159839e-01, -1.683270777774236e-01, 0.000000000000000e+00, -1.678377152013133e-01, -8.275614559080177e+00, 0.000000000000000e+00, -8.114175939030165e+00, -4.445701744553244e+00, 0.000000000000000e+00, -4.305670791122062e+00, -1.763176343562152e+00, 0.000000000000000e+00, -1.728353125276625e+00, -2.768304979246002e+00, 0.000000000000000e+00, -2.777112218098137e+00, -2.768304979246004e+00, 0.000000000000000e+00, -2.777112218098136e+00, -6.254394111886307e-01, 0.000000000000000e+00, -6.112991924082545e-01, -5.121660084315371e+03, 0.000000000000000e+00, -5.008569814663023e+03, -1.915675596458119e+03, 0.000000000000000e+00, -1.724155242959678e+03, -2.204477012517241e+00, 0.000000000000000e+00, -2.091380318968456e+00, -4.540028877713740e+02, 0.000000000000000e+00, -3.904009427867484e+02, -4.540028877713740e+02, 0.000000000000000e+00, -3.904009427867484e+02, -5.169956730488762e+05, 0.000000000000000e+00, -4.622108421715397e+05, -8.967753380894139e+08, 0.000000000000000e+00, -9.987476375242258e+08, -8.377491539672486e+07, 0.000000000000000e+00, -6.958409533548458e+07, -5.329593700818132e+02, 0.000000000000000e+00, -5.033401751879443e+02, -4.132271688343862e+07, 0.000000000000000e+00, -1.440538903363957e+07, -4.132271688343872e+07, 0.000000000000000e+00, -1.440538903363962e+07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
