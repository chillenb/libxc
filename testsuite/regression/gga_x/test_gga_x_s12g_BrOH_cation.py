
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_s12g_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_s12g", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.093214775994797e+01, -2.093218301429618e+01, -2.093239486184652e+01, -2.093186926111059e+01, -2.093213681343401e+01, -2.093213681343401e+01, -3.464076604162021e+00, -3.464038130761719e+00, -3.463235580786677e+00, -3.465291395383673e+00, -3.464114369702775e+00, -3.464114369702775e+00, -7.004698561617224e-01, -7.007071009299235e-01, -7.089091600927466e-01, -7.134304524725747e-01, -7.128493534544413e-01, -7.128493534544413e-01, -2.221897755064684e-01, -2.233668746805809e-01, -8.070379009971733e-01, -1.858584831813366e-01, -2.168243340595426e-01, -2.168243340595425e-01, -9.844501365194987e-03, -1.036648310727471e-02, -5.653215687378634e-02, -5.677553467079280e-03, -7.923727488510416e-03, -7.923727488510418e-03, -5.058047271356724e+00, -5.058203447636197e+00, -5.058061451185029e+00, -5.058199073588769e+00, -5.058121454449775e+00, -5.058121454449775e+00, -2.145651410913917e+00, -2.154173255037203e+00, -2.150293582358701e+00, -2.157860999480937e+00, -2.148070095650840e+00, -2.148070095650840e+00, -5.793963374451858e-01, -6.149064354806384e-01, -5.405224224059106e-01, -5.454271760255176e-01, -5.863822425400149e-01, -5.863822425400149e-01, -1.391157490258081e-01, -2.371615234458594e-01, -1.297976579877647e-01, -1.851640625476813e+00, -1.571009263162752e-01, -1.571009263162752e-01, -4.383418434071351e-03, -5.550126628197611e-03, -4.250080793648956e-03, -8.970145408478133e-02, -5.338691425081899e-03, -5.338691425081901e-03, -5.682142484516111e-01, -5.654481630885906e-01, -5.663427190683885e-01, -5.671474484668906e-01, -5.667373812002967e-01, -5.667373812002967e-01, -5.527739857381460e-01, -5.124283820533804e-01, -5.157659480216903e-01, -5.245399775459167e-01, -5.188962154666188e-01, -5.188962154666188e-01, -6.448315752159959e-01, -2.842489964418673e-01, -3.199278213182039e-01, -3.686890096684103e-01, -3.432133920732257e-01, -3.432133920732256e-01, -4.732404862906678e-01, -5.410939444731647e-02, -7.317756118811963e-02, -3.422253452060492e-01, -1.116055489776062e-01, -1.116055489776062e-01, -1.387228976677695e-02, -1.483595561569778e-03, -3.119868263302866e-03, -1.054175229177498e-01, -4.902770994728130e-03, -4.902770994728125e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_s12g_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_s12g", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.583206934818794e+01, -2.583204440857745e+01, -2.583225715700870e+01, -2.583218078447511e+01, -2.583273490552657e+01, -2.583289982185496e+01, -2.583061701048189e+01, -2.583019936863186e+01, -2.583218757685792e+01, -2.583118831363748e+01, -2.583218757685792e+01, -2.583118831363748e+01, -4.018129267385033e+00, -4.018903521833879e+00, -4.018245633183130e+00, -4.019064937792185e+00, -4.021525456335254e+00, -4.022409824571217e+00, -4.016492004668609e+00, -4.017459523055289e+00, -4.017130694163869e+00, -4.020427962270226e+00, -4.017130694163869e+00, -4.020427962270226e+00, -7.141165124967870e-01, -7.211472733616472e-01, -7.117359701149477e-01, -7.201522308404132e-01, -6.875796635301517e-01, -6.824084838599751e-01, -6.897551875704588e-01, -6.914815874095138e-01, -7.343248260550062e-01, -6.806552813038638e-01, -7.343248260550062e-01, -6.806552813038638e-01, -2.105814325603395e-01, -2.134365691850470e-01, -2.101000790967655e-01, -2.136003367011350e-01, -8.227746344829201e-01, -8.757588608644401e-01, -1.940215833185723e-01, -1.958106725227711e-01, -2.184235459986257e-01, -1.633320222192834e-01, -2.184235459986256e-01, -1.633320222192833e-01, -1.268269730868932e-02, -1.347486505802695e-02, -1.328792015955751e-02, -1.423192445346981e-02, -7.169883442079304e-02, -7.543203768813826e-02, -7.629918203916424e-03, -7.502925559845754e-03, -1.131696395254868e-02, -6.443044919143273e-03, -1.131696395254868e-02, -6.443044919143275e-03, -6.486400550218015e+00, -6.484697717368987e+00, -6.491268220277041e+00, -6.489402541845785e+00, -6.486662079053613e+00, -6.484852913489940e+00, -6.490839523476652e+00, -6.489127548857546e+00, -6.488905632541299e+00, -6.487066027771800e+00, -6.488905632541299e+00, -6.487066027771800e+00, -2.055261385435392e+00, -2.055159217680510e+00, -2.069960541122564e+00, -2.069403190514096e+00, -2.045471955618846e+00, -2.047890036079093e+00, -2.057317983975576e+00, -2.060158619726180e+00, -2.072868285641944e+00, -2.063785768218469e+00, -2.072868285641944e+00, -2.063785768218469e+00, -6.944128633315279e-01, -6.928574255011137e-01, -8.151850141067281e-01, -8.158141089876291e-01, -6.129951230560947e-01, -6.446852833744282e-01, -7.066791607133304e-01, -7.296793073234455e-01, -7.355800354343378e-01, -6.948697793222034e-01, -7.355800354343378e-01, -6.948697793222034e-01, -1.631415398070724e-01, -1.638089722964837e-01, -2.388490256769794e-01, -2.394641207553112e-01, -1.514220590434910e-01, -1.570281224215826e-01, -2.458023178065589e+00, -2.456955744657928e+00, -1.735566037657469e-01, -1.729010859591198e-01, -1.735566037657469e-01, -1.729010859591198e-01, -5.724677266600866e-03, -5.949318754534656e-03, -7.341271047282140e-03, -7.452412424883942e-03, -5.488828985277520e-03, -5.812263516499704e-03, -1.120146437149583e-01, -1.127715941997701e-01, -5.606840727851276e-03, -7.697209925974888e-03, -5.606840727851276e-03, -7.697209925974890e-03, -7.558560419899819e-01, -7.587939525901158e-01, -7.488357702327313e-01, -7.519014115856547e-01, -7.517368740363918e-01, -7.547582284204080e-01, -7.537703031919499e-01, -7.567251909293717e-01, -7.527940869183448e-01, -7.557789148828052e-01, -7.527940869183448e-01, -7.557789148828052e-01, -7.357601641965670e-01, -7.381931329284492e-01, -5.269749524919227e-01, -5.300852614602325e-01, -5.878007958912220e-01, -5.921760010655274e-01, -6.638108670512729e-01, -6.666507122426019e-01, -6.262015073944754e-01, -6.292171339082969e-01, -6.262015073944754e-01, -6.292171339082969e-01, -8.530324614363604e-01, -8.549058757906448e-01, -2.730711473386064e-01, -2.737412979179596e-01, -2.977512423468564e-01, -2.987895755129049e-01, -3.665272125704243e-01, -3.688467635605427e-01, -3.215781603957367e-01, -3.212267127955872e-01, -3.215781603957366e-01, -3.212267127955870e-01, -4.827712661699108e-01, -4.874443064917974e-01, -7.053369427848213e-02, -7.098669863660513e-02, -9.269580039717801e-02, -9.539759809892871e-02, -3.647030332130435e-01, -3.725880806162326e-01, -1.320287774952424e-01, -1.351657432821242e-01, -1.320287774952424e-01, -1.351657432821242e-01, -1.812396216840116e-02, -1.877754056116055e-02, -1.975791950320560e-03, -1.980269150365312e-03, -4.019755464274295e-03, -4.275199949873898e-03, -1.270720318106288e-01, -1.287370249106250e-01, -5.310233376901574e-03, -7.055848935094858e-03, -5.310233376901567e-03, -7.055848935094851e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_s12g_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_s12g", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.051965305918902e-08, 0.000000000000000e+00, -1.051967952323834e-08, -1.051916961912296e-08, 0.000000000000000e+00, -1.051932852052075e-08, -1.051806093364664e-08, 0.000000000000000e+00, -1.051761724765204e-08, -1.052350932955947e-08, 0.000000000000000e+00, -1.052456529926003e-08, -1.051934261265611e-08, 0.000000000000000e+00, -1.052210995636737e-08, -1.051934261265611e-08, 0.000000000000000e+00, -1.052210995636737e-08, -1.921949295351765e-05, 0.000000000000000e+00, -1.920649386649045e-05, -1.921749601825448e-05, 0.000000000000000e+00, -1.920374405615142e-05, -1.916123662276885e-05, 0.000000000000000e+00, -1.914594031275242e-05, -1.924595052405934e-05, 0.000000000000000e+00, -1.922955094261005e-05, -1.923788239234143e-05, 0.000000000000000e+00, -1.917873317529872e-05, -1.923788239234143e-05, 0.000000000000000e+00, -1.917873317529872e-05, -1.549126232761444e-02, 0.000000000000000e+00, -1.536687279179782e-02, -1.553488355035478e-02, 0.000000000000000e+00, -1.539605591597453e-02, -1.569288980823509e-02, 0.000000000000000e+00, -1.552565311107737e-02, -1.518099248514473e-02, 0.000000000000000e+00, -1.523800212236991e-02, -1.497390274036308e-02, 0.000000000000000e+00, -1.360389739048958e-02, -1.497390274036308e-02, 0.000000000000000e+00, -1.360389739048958e-02, -1.270623277478827e+00, 0.000000000000000e+00, -1.224219554722931e+00, -1.294930826817698e+00, 0.000000000000000e+00, -1.234711421187011e+00, -8.936578915350671e-03, 0.000000000000000e+00, -7.826739297696471e-03, -1.455559716709667e+00, 0.000000000000000e+00, -1.414144859301169e+00, -1.102690081307282e+00, 0.000000000000000e+00, -1.882268309977406e+00, -1.102690081307281e+00, 0.000000000000000e+00, -1.882268309977407e+00, -3.311970049394019e+00, 0.000000000000000e+00, -3.279056093944495e+00, -3.489959318864830e+00, 0.000000000000000e+00, -3.472503221113554e+00, -1.967737667204451e+00, 0.000000000000000e+00, -1.982564012020438e+00, -3.032230199469427e+00, 0.000000000000000e+00, -2.949883960778406e+00, -3.305956344963063e+00, 0.000000000000000e+00, -8.385912325538051e+00, -3.305956344963072e+00, 0.000000000000000e+00, -8.385912325538071e+00, -2.090002796728514e-06, 0.000000000000000e+00, -2.092867188748367e-06, -2.067276263821136e-06, 0.000000000000000e+00, -2.070880906627430e-06, -2.088824713189978e-06, 0.000000000000000e+00, -2.092172274470748e-06, -2.069322526414770e-06, 0.000000000000000e+00, -2.072197592305370e-06, -2.078291011338753e-06, 0.000000000000000e+00, -2.081808737452999e-06, -2.078291011338753e-06, 0.000000000000000e+00, -2.081808737452999e-06, -1.866852364820711e-04, 0.000000000000000e+00, -1.867166580065988e-04, -1.835287775611767e-04, 0.000000000000000e+00, -1.836759335935427e-04, -1.848964334106647e-04, 0.000000000000000e+00, -1.855419584722955e-04, -1.823701715675379e-04, 0.000000000000000e+00, -1.828754691597686e-04, -1.857657425240244e-04, 0.000000000000000e+00, -1.852821494988901e-04, -1.857657425240244e-04, 0.000000000000000e+00, -1.852821494988901e-04, -2.137484442461511e-02, 0.000000000000000e+00, -2.155599202037361e-02, -2.983123551882551e-03, 0.000000000000000e+00, -2.848230059150533e-03, -3.538551192190301e-02, 0.000000000000000e+00, -2.904197257332672e-02, -7.934092943887468e-03, 0.000000000000000e+00, -7.257801750488415e-03, -1.628168810679204e-02, 0.000000000000000e+00, -2.080976919073252e-02, -1.628168810679205e-02, 0.000000000000000e+00, -2.080976919073252e-02, -1.468207265012618e+00, 0.000000000000000e+00, -1.496386303452582e+00, -7.022907048552259e-01, 0.000000000000000e+00, -6.969136821641330e-01, -1.634235049854195e+00, 0.000000000000000e+00, -1.598965576267990e+00, -3.243636532694244e-05, 0.000000000000000e+00, -3.241560915141268e-05, -1.664804399568133e+00, 0.000000000000000e+00, -2.052616287756482e+00, -1.664804399568133e+00, 0.000000000000000e+00, -2.052616287756482e+00, -4.256340771548717e+00, 0.000000000000000e+00, -3.684014939377990e+00, -3.665371421819188e+00, 0.000000000000000e+00, -3.384144034684234e+00, -2.088007884333824e+01, 0.000000000000000e+00, -2.322914106226413e+01, -2.335185443105186e+00, 0.000000000000000e+00, -2.249359762729370e+00, -1.038236153332670e+01, 0.000000000000000e+00, -1.020030287254594e+01, -1.038236153332667e+01, 0.000000000000000e+00, -1.020030287254593e+01, -8.479195597420322e-04, 0.000000000000000e+00, -8.012971013455132e-04, -3.869275497639451e-03, 0.000000000000000e+00, -3.697228170084954e-03, -2.610592314698014e-03, 0.000000000000000e+00, -2.482004318744577e-03, -1.716381021234324e-03, 0.000000000000000e+00, -1.637866187246871e-03, -2.144013508324659e-03, 0.000000000000000e+00, -2.042082425845659e-03, -2.144013508324659e-03, 0.000000000000000e+00, -2.042082425845659e-03, -3.497440847968576e-04, 0.000000000000000e+00, -3.413694911389523e-04, -5.377686204400025e-02, 0.000000000000000e+00, -5.293036576542129e-02, -4.159061994891858e-02, 0.000000000000000e+00, -4.050145661761537e-02, -2.111957287965036e-02, 0.000000000000000e+00, -2.061122799227282e-02, -3.193331353399799e-02, 0.000000000000000e+00, -3.125362557133505e-02, -3.193331353399799e-02, 0.000000000000000e+00, -3.125362557133505e-02, -2.876008647151162e-03, 0.000000000000000e+00, -2.684301102268454e-03, -4.469870770290283e-01, 0.000000000000000e+00, -4.436311836710429e-01, -3.392976287004769e-01, 0.000000000000000e+00, -3.368089599742519e-01, -2.099835392454842e-01, 0.000000000000000e+00, -2.060869504729552e-01, -2.812509159630241e-01, 0.000000000000000e+00, -2.833421681466269e-01, -2.812509159630242e-01, 0.000000000000000e+00, -2.833421681466271e-01, -7.490511334901626e-02, 0.000000000000000e+00, -7.313721512292806e-02, -1.797637857682828e+00, 0.000000000000000e+00, -1.800138330410832e+00, -1.791295221425406e+00, 0.000000000000000e+00, -1.833695503983305e+00, -2.563134450959704e-01, 0.000000000000000e+00, -2.400351452152325e-01, -2.380904687840539e+00, 0.000000000000000e+00, -2.825343369866141e+00, -2.380904687840540e+00, 0.000000000000000e+00, -2.825343369866142e+00, -2.626163922486394e+00, 0.000000000000000e+00, -2.681236121901361e+00, -1.309430295881727e+01, 0.000000000000000e+00, -2.319482658727336e+01, -8.082197808698330e+00, 0.000000000000000e+00, -8.604197325949011e+00, -2.651200293635064e+00, 0.000000000000000e+00, -2.599471058315696e+00, -2.140683906892293e+01, 0.000000000000000e+00, -1.058852957122035e+01, -2.140683906892297e+01, 0.000000000000000e+00, -1.058852957122038e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
