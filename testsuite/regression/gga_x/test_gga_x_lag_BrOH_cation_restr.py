
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_lag_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_lag", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.997210206401995e+01, -1.997215198703374e+01, -1.997240039092578e+01, -1.997165709409685e+01, -1.997204280217272e+01, -1.997204280217272e+01, -3.264364487302235e+00, -3.264361743846198e+00, -3.264378581287182e+00, -3.264969557321542e+00, -3.264439888658848e+00, -3.264439888658848e+00, -6.364070102878934e-01, -6.359247948730057e-01, -6.253893744522970e-01, -6.302340107697039e-01, -6.289286250941464e-01, -6.289286250941464e-01, -1.808703666327429e-01, -1.821151473762696e-01, -7.398642014525441e-01, -1.551356746776823e-01, -1.635585004135598e-01, -1.635585004135598e-01, -4.374628576975635e-02, -4.376400961227613e-02, -8.223049637255130e-02, -4.012023391873045e-02, -3.983074826211149e-02, -3.983074826211147e-02, -4.855990487128151e+00, -4.856630327457478e+00, -4.856024475773333e+00, -4.856589256077742e+00, -4.856312241392901e+00, -4.856312241392901e+00, -1.881443940906199e+00, -1.893212102932149e+00, -1.875869587630749e+00, -1.886212961241287e+00, -1.890701523779987e+00, -1.890701523779987e+00, -5.496556194173238e-01, -5.925309788441354e-01, -5.094887536612976e-01, -5.250892699713530e-01, -5.578059554246834e-01, -5.578059554246834e-01, -1.312505695231654e-01, -1.942664482625260e-01, -1.252273286650432e-01, -1.784297467276246e+00, -1.364299294025954e-01, -1.364299294025954e-01, -3.626766700683422e-02, -3.864033242609313e-02, -2.526489382489696e-02, -9.965141738292574e-02, -3.056078783939393e-02, -3.056078783939394e-02, -5.473707204919325e-01, -5.448777118540808e-01, -5.457328529446533e-01, -5.464529942655484e-01, -5.460903327894624e-01, -5.460903327894624e-01, -5.323941217396033e-01, -4.667960852362669e-01, -4.844583288117425e-01, -5.027595342937836e-01, -4.932688178673304e-01, -4.932688178673304e-01, -6.213293883990304e-01, -2.312001956130225e-01, -2.645221442115688e-01, -3.311076221855127e-01, -2.941151088694496e-01, -2.941151088694496e-01, -4.300688995105646e-01, -8.189002335264309e-02, -9.329551165699283e-02, -3.163182123523063e-01, -1.092870125654604e-01, -1.092870125654604e-01, -4.933722954228506e-02, -2.255859489459071e-02, -2.932722761828327e-02, -1.061653681866910e-01, -2.872466019562483e-02, -2.872466019562481e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_lag_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_lag", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.611047372935994e+01, -2.611055863040869e+01, -2.611093917099920e+01, -2.610967593598880e+01, -2.611033741129504e+01, -2.611033741129504e+01, -4.224630474454481e+00, -4.224659678227790e+00, -4.225437751119522e+00, -4.224886546993097e+00, -4.224767327816867e+00, -4.224767327816867e+00, -8.013165194794279e-01, -8.000068773976098e-01, -7.667527405024746e-01, -7.737552733983293e-01, -7.727736267425449e-01, -7.727736267425449e-01, -1.824043303713184e-01, -1.868017664936746e-01, -9.387209457790173e-01, -1.278474054781605e-01, -1.477817604108203e-01, -1.477817604108203e-01, -1.259409966500632e-02, -1.294328006305748e-02, -4.715550892648582e-02, -9.295389151323850e-03, -1.024247504846615e-02, -1.024247504846614e-02, -6.390750862923240e+00, -6.392457118592660e+00, -6.390831348350608e+00, -6.392337650671784e+00, -6.391614992178882e+00, -6.391614992178882e+00, -2.291852289487042e+00, -2.311892576111021e+00, -2.271808268745063e+00, -2.289580968381408e+00, -2.312561538259608e+00, -2.312561538259608e+00, -7.150619657794310e-01, -7.864986386246271e-01, -6.598094674659439e-01, -6.953835758621134e-01, -7.280690387512655e-01, -7.280690387512655e-01, -9.326754971439130e-02, -1.724140386979063e-01, -8.793772090063744e-02, -2.369182316446717e+00, -1.039855086071776e-01, -1.039855086071776e-01, -7.892503809487604e-03, -9.008251546331749e-03, -6.306636396000767e-03, -6.601451710096533e-02, -7.614456685324528e-03, -7.614456685324493e-03, -7.290273297426102e-01, -7.234492293254100e-01, -7.254588616374940e-01, -7.270808902978557e-01, -7.262736540500312e-01, -7.262736540500312e-01, -7.095674861526311e-01, -5.889898370701279e-01, -6.254568285629639e-01, -6.603266100258027e-01, -6.427891262061263e-01, -6.427891262061263e-01, -8.242425030712734e-01, -2.284305295428915e-01, -2.898261655766952e-01, -4.128728717549565e-01, -3.479393248612722e-01, -3.479393248612722e-01, -5.416293508219987e-01, -4.585960138757668e-02, -5.778476086837016e-02, -4.036228891881696e-01, -7.623123729271629e-02, -7.623123729271632e-02, -1.606735807248869e-02, -4.064829663075398e-03, -6.091206012880636e-03, -7.320757805726838e-02, -7.106429326016238e-03, -7.106429326016240e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_lag_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_lag", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.314014725693564e-09, -1.313988977408500e-09, -1.313887777684744e-09, -1.314270596849083e-09, -1.314068112188913e-09, -1.314068112188913e-09, -2.046212441584733e-06, -2.046082208806493e-06, -2.042867872322417e-06, -2.046896870974013e-06, -2.045859020109811e-06, -2.045859020109811e-06, -1.684449723868448e-03, -1.696660248987153e-03, -2.012651723277645e-03, -1.942087812219689e-03, -1.952686516779085e-03, -1.952686516779085e-03, -4.357237298020487e-01, -4.128400150755924e-01, -8.868365212640882e-04, -1.071777698297594e+00, -7.634101591660362e-01, -7.634101591660363e-01, -6.757990566276527e+03, -5.915725276616628e+03, -3.746711640606563e+01, -3.229021686085841e+04, -1.779639118600175e+04, -1.779639118600175e+04, -3.393977357250576e-07, -3.383474091078913e-07, -3.393522809949068e-07, -3.384250444840348e-07, -3.388640410943125e-07, -3.388640410943125e-07, -2.511331895212295e-05, -2.429468505582216e-05, -2.589072035257055e-05, -2.514497047941774e-05, -2.429087234767900e-05, -2.429087234767900e-05, -2.423438192455745e-03, -1.180853062273991e-03, -3.427996131613247e-03, -2.115699703210244e-03, -2.202850368462150e-03, -2.202850368462150e-03, -2.753378724669447e+00, -3.931603511800492e-01, -3.445780009916220e+00, -1.409676889275975e-05, -2.022365527258970e+00, -2.022365527258970e+00, -7.386801247303831e+04, -3.606547371990998e+04, -1.302262920494242e+05, -1.063144408977371e+01, -6.148878022069987e+04, -6.148878022069987e+04, -1.155737820518026e-03, -1.625818432006135e-03, -1.489623431540207e-03, -1.358180486622349e-03, -1.426574020766594e-03, -1.426574020766594e-03, -1.020928756692793e-03, -5.760191803509724e-03, -4.303913678116739e-03, -3.060778062169090e-03, -3.669783555090462e-03, -3.669783555090462e-03, -1.005963373494299e-03, -1.683503331047561e-01, -8.283708768500531e-02, -2.401436182602834e-02, -4.581800222595747e-02, -4.581800222595749e-02, -8.068416357179808e-03, -4.117965897921651e+01, -1.751936048086994e+01, -2.569100345446550e-02, -6.074327039002430e+00, -6.074327039002432e+00, -2.348586238946502e+03, -2.558646611540894e+06, -2.442816310158441e+05, -7.104080563272042e+00, -8.211668037616312e+04, -8.211668037616338e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
