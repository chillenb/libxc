
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_pbe_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.094538176494664e+01, -2.094540562208249e+01, -2.094558851783772e+01, -2.094519632696042e+01, -2.094539370722617e+01, -2.094539370722617e+01, -3.473458297549089e+00, -3.473428933798144e+00, -3.472765432480073e+00, -3.474645621606336e+00, -3.473457991335384e+00, -3.473457991335384e+00, -6.982690424474944e-01, -6.983329099475303e-01, -7.020565392982446e-01, -7.063058101577060e-01, -6.982884430769944e-01, -6.982884430769944e-01, -2.171617143734915e-01, -2.180035487246094e-01, -8.126668807801517e-01, -1.803365371456950e-01, -2.173897298123200e-01, -2.173897298123200e-01, -1.700711327189735e-02, -1.780968719946615e-02, -7.043157080994566e-02, -8.175613320839622e-03, -1.762418600981090e-02, -1.762418600981090e-02, -5.032903193255002e+00, -5.032303970955214e+00, -5.032848221981569e+00, -5.032382181990959e+00, -5.032586768587907e+00, -5.032586768587907e+00, -2.114198912017494e+00, -2.123684378887602e+00, -2.115800553667694e+00, -2.123175668404696e+00, -2.118567842851817e+00, -2.118567842851817e+00, -5.739446680352641e-01, -5.954492802359603e-01, -5.467568630074974e-01, -5.476463401538281e-01, -5.915670095363251e-01, -5.915670095363251e-01, -1.448884109040381e-01, -2.378300733076815e-01, -1.422949786153702e-01, -1.811388192110686e+00, -1.598876833200176e-01, -1.598876833200176e-01, -7.887068838729670e-03, -9.012324364598532e-03, -6.754989650668075e-03, -9.542573188314091e-02, -8.211579378179106e-03, -8.211579378179106e-03, -5.586273396394755e-01, -5.614469123649998e-01, -5.604500177307031e-01, -5.596664478107197e-01, -5.600588704198191e-01, -5.600588704198191e-01, -5.397590073302234e-01, -5.167407496572652e-01, -5.233611937954903e-01, -5.292732897899382e-01, -5.260874680981817e-01, -5.260874680981817e-01, -6.253181423611812e-01, -2.823955109470531e-01, -3.155941540528620e-01, -3.667908965193878e-01, -3.391675026360633e-01, -3.391675026360632e-01, -4.690478235121263e-01, -6.565339428555847e-02, -8.711262677159530e-02, -3.365317611457763e-01, -1.195562178184757e-01, -1.195562178184757e-01, -1.992253461602596e-02, -2.468790710206677e-03, -4.689135719240417e-03, -1.139608922612625e-01, -6.979307894039055e-03, -6.979307894039046e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_pbe_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.514207535315096e+01, -2.514216221325867e+01, -2.514255730650621e+01, -2.514113480083306e+01, -2.514212109675662e+01, -2.514212109675662e+01, -4.036668986266954e+00, -4.036707768026930e+00, -4.037940478443613e+00, -4.036672780526221e+00, -4.036706128380530e+00, -4.036706128380530e+00, -7.525919982421003e-01, -7.514488763356715e-01, -7.236809427422102e-01, -7.296741406620773e-01, -7.521761659466908e-01, -7.521761659466908e-01, -2.067574170406932e-01, -2.084732669403111e-01, -9.161933694128307e-01, -1.765610208000884e-01, -2.072423404630459e-01, -2.072423404630459e-01, -2.256136380539496e-02, -2.361423089544956e-02, -8.853425633600567e-02, -1.089010223675053e-02, -2.336851845252435e-02, -2.336851845252435e-02, -6.197137189546604e+00, -6.199816377189852e+00, -6.197411019610165e+00, -6.199494234174494e+00, -6.198511064179231e+00, -6.198511064179231e+00, -2.183426975588555e+00, -2.200142460194179e+00, -2.175513375965442e+00, -2.188438620700552e+00, -2.205415369918570e+00, -2.205415369918570e+00, -6.786003275088098e-01, -7.667002064525601e-01, -6.420327838623264e-01, -6.925310426592429e-01, -7.087652877598677e-01, -7.087652877598677e-01, -1.574763557113975e-01, -2.257758327451414e-01, -1.534932673318074e-01, -2.331754811491369e+00, -1.633321227116764e-01, -1.633321227116764e-01, -1.050618301923351e-02, -1.200163196421745e-02, -8.996109464875295e-03, -1.138211328285131e-01, -1.093516601626483e-02, -1.093516601626483e-02, -7.371364435936719e-01, -7.258685793453357e-01, -7.298438835147071e-01, -7.329644204546277e-01, -7.313983883084011e-01, -7.313983883084011e-01, -7.147047882132234e-01, -5.731758075589635e-01, -6.107159309320686e-01, -6.487770673038730e-01, -6.291954822118117e-01, -6.291954822118117e-01, -8.026867200077396e-01, -2.667224723125716e-01, -3.066054881521582e-01, -3.963004109652182e-01, -3.457655882086125e-01, -3.457655882086124e-01, -5.151888929505932e-01, -8.354943517428494e-02, -1.067410692168715e-01, -3.804539283970328e-01, -1.332638019436587e-01, -1.332638019436587e-01, -2.640339023235357e-02, -3.291322098383209e-03, -6.249644732907723e-03, -1.268545996552563e-01, -9.295648623645052e-03, -9.295648623645038e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_pbe_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-7.051921027398567e-09, -7.051878250481268e-09, -7.051599843179988e-09, -7.052302075902729e-09, -7.051899200335738e-09, -7.051899200335738e-09, -9.516535092165811e-06, -9.516752292765490e-06, -9.521148946391569e-06, -9.505504780057515e-06, -9.516484647705878e-06, -9.516484647705878e-06, -6.068938538752282e-03, -6.071140114117141e-03, -6.039013601879872e-03, -5.891330367903035e-03, -6.069862077082199e-03, -6.069862077082199e-03, -6.445235862477706e-01, -6.396944683244683e-01, -3.232834328305690e-03, -9.604960781853780e-01, -6.435291270615997e-01, -6.435291270615997e-01, -5.124992142845954e+00, -5.138774954080282e+00, -2.141571287425604e+00, -3.630226524989824e+00, -5.338331280355305e+00, -5.338331280355305e+00, -2.079743205392196e-06, -2.079952215145997e-06, -2.079755978587552e-06, -2.079918650434154e-06, -2.079862965485277e-06, -2.079862965485277e-06, -7.339088220470945e-05, -7.202181220428181e-05, -7.325653862413660e-05, -7.219680035015311e-05, -7.261047154939664e-05, -7.261047154939664e-05, -1.262993375840642e-02, -1.028581119793319e-02, -1.540198412446674e-02, -1.456269541436444e-02, -1.109621398481817e-02, -1.109621398481817e-02, -1.141729548967308e+00, -3.856570941531821e-01, -1.305495479846215e+00, -1.201298521916615e-04, -1.204412344207166e+00, -1.204412344207166e+00, -3.851125234661469e+00, -3.859050264210725e+00, -1.104538280852623e+01, -2.081410519782777e+00, -5.700009015107139e+00, -5.700009015107139e+00, -1.304026777104963e-02, -1.297466275455289e-02, -1.299809777516307e-02, -1.301647136447978e-02, -1.300732240171047e-02, -1.300732240171047e-02, -1.492283907928119e-02, -1.995138992163245e-02, -1.841766419356602e-02, -1.705660793349509e-02, -1.776064687177065e-02, -1.776064687177065e-02, -8.475807128101474e-03, -2.186181690354477e-01, -1.477944497579762e-01, -7.962327505028848e-02, -1.111618122460068e-01, -1.111618122460069e-01, -2.953880889157534e-02, -1.813452482165250e+00, -1.801437318659172e+00, -1.097628933593549e-01, -1.963929140024988e+00, -1.963929140024990e+00, -3.850245627916947e+00, -6.637772469055470e+00, -5.715281624685632e+00, -2.410250365316447e+00, -8.324424305151839e+00, -8.324424305151824e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
