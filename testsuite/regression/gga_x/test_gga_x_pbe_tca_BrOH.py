
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_pbe_tca_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbe_tca", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.097337388289396e+01, -2.097339644678246e+01, -2.097357559171033e+01, -2.097320454081260e+01, -2.097338512628226e+01, -2.097338512628226e+01, -3.481796469883128e+00, -3.481764600868274e+00, -3.481032778802829e+00, -3.483032689743510e+00, -3.481794910600756e+00, -3.481794910600756e+00, -7.029267930324217e-01, -7.030803177763452e-01, -7.098213582151113e-01, -7.139282134527136e-01, -7.029783073994850e-01, -7.029783073994850e-01, -2.237885107768788e-01, -2.241280839775148e-01, -8.157323460379192e-01, -1.948808464082389e-01, -2.238555227638137e-01, -2.238555227638137e-01, -2.094783881785132e-02, -2.193153475675649e-02, -8.475312988793889e-02, -1.008822470828835e-02, -2.170320285012085e-02, -2.170320285012085e-02, -5.036634564198987e+00, -5.035980817249387e+00, -5.036574126039653e+00, -5.036065683827001e+00, -5.036289936205194e+00, -5.036289936205194e+00, -2.137098900499771e+00, -2.145896801306403e+00, -2.139860659732083e+00, -2.146674171269414e+00, -2.139573509875780e+00, -2.139573509875780e+00, -5.749707339139082e-01, -5.955298456309650e-01, -5.478606186234268e-01, -5.478204026394329e-01, -5.923882428656739e-01, -5.923882428656739e-01, -1.641662448516883e-01, -2.515878107414702e-01, -1.607222664676914e-01, -1.811636896270453e+00, -1.764125412910542e-01, -1.764125412910542e-01, -9.732353700178482e-03, -1.111945055765384e-02, -8.334565459755545e-03, -1.123349691181571e-01, -1.013143777054346e-02, -1.013143777054346e-02, -5.586338720223726e-01, -5.615059273880836e-01, -5.604842505466584e-01, -5.596860704652782e-01, -5.600852977881404e-01, -5.600852977881404e-01, -5.397618090461528e-01, -5.191612856302846e-01, -5.245361353674547e-01, -5.297139188655061e-01, -5.268441538379793e-01, -5.268441538379792e-01, -6.254186524219580e-01, -2.931093555256067e-01, -3.225772660013945e-01, -3.691672953601455e-01, -3.434089877093852e-01, -3.434089877093851e-01, -4.715362006011136e-01, -7.941877274732166e-02, -1.037035934627242e-01, -3.377534014613764e-01, -1.368798476263100e-01, -1.368798476263099e-01, -2.452833185113769e-02, -3.047506419452799e-03, -5.787598307778411e-03, -1.304010501283175e-01, -8.611665485233096e-03, -8.611665485233084e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_pbe_tca_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbe_tca", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.503890438574885e+01, -2.503899579902108e+01, -2.503940407351416e+01, -2.503790714149654e+01, -2.503895259015894e+01, -2.503895259015894e+01, -4.006857995874803e+00, -4.006905200615900e+00, -4.008367633980034e+00, -4.006697118475341e+00, -4.006899343346797e+00, -4.006899343346797e+00, -7.373309132135093e-01, -7.359285318961296e-01, -6.999661670781531e-01, -7.063005401647209e-01, -7.368221118216726e-01, -7.368221118216726e-01, -1.911195021970530e-01, -1.935728464864096e-01, -9.055772829563931e-01, -1.596489613137881e-01, -1.918352819089159e-01, -1.918352819089159e-01, -2.766470313794979e-02, -2.893658451404213e-02, -1.013217183729642e-01, -1.342603834146565e-02, -2.863589225705074e-02, -2.863589225705074e-02, -6.183079651530335e+00, -6.185957919113258e+00, -6.183373435418209e+00, -6.185611467415395e+00, -6.184556484807658e+00, -6.184556484807658e+00, -2.113247445391581e+00, -2.131686460055817e+00, -2.102370611220163e+00, -2.116679168152340e+00, -2.140137445003016e+00, -2.140137445003016e+00, -6.748704812995600e-01, -7.663858654456531e-01, -6.380465213005146e-01, -6.918611326665802e-01, -7.057435351108562e-01, -7.057435351108562e-01, -1.536051960106151e-01, -2.030227485777502e-01, -1.486841507373035e-01, -2.330784626905798e+00, -1.513663197803061e-01, -1.513663197803061e-01, -1.295341934788295e-02, -1.479151316777397e-02, -1.108823185915228e-02, -1.223547538645716e-01, -1.347694010920936e-02, -1.347694010920936e-02, -7.371105017930719e-01, -7.256376282119779e-01, -7.297092075660663e-01, -7.328869080068957e-01, -7.312942081311594e-01, -7.312942081311594e-01, -7.146936349516115e-01, -5.649485529709165e-01, -6.064982680593590e-01, -6.471232810320509e-01, -6.264156818696733e-01, -6.264156818696732e-01, -8.022954576390138e-01, -2.436961137801145e-01, -2.882740227136511e-01, -3.884879890122252e-01, -3.330837864694343e-01, -3.330837864694342e-01, -5.068317076905333e-01, -9.709687985382776e-02, -1.184187734728510e-01, -3.762102734960523e-01, -1.331909120964781e-01, -1.331909120964780e-01, -3.233446623940335e-02, -4.062413091051638e-03, -7.710893599013884e-03, -1.266138240050076e-01, -1.145873853862713e-02, -1.145873853862712e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_pbe_tca_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbe_tca", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-7.407653677104187e-09, -7.407599878921347e-09, -7.407280704964013e-09, -7.408163257909570e-09, -7.407625967565533e-09, -7.407625967565533e-09, -1.017158434893611e-05, -1.017171407082991e-05, -1.017359921840609e-05, -1.016172651254950e-05, -1.017147775101246e-05, -1.017147775101246e-05, -6.799231909734489e-03, -6.809504375838636e-03, -7.007665665680613e-03, -6.823000327944660e-03, -6.803070723227066e-03, -6.803070723227066e-03, -8.350483822146617e-01, -8.192057466532964e-01, -3.516850033996174e-03, -1.506302318405389e+00, -8.307059093953257e-01, -8.307059093953257e-01, -1.186507992955709e+01, -1.188997882158736e+01, -4.655091209674938e+00, -8.445135513659457e+00, -1.235186172579778e+01, -1.235186172579778e+01, -2.156843119776188e-06, -2.156477247429346e-06, -2.156798097063237e-06, -2.156513743741467e-06, -2.156666521034943e-06, -2.156666521034943e-06, -8.502164176957752e-05, -8.320799066139072e-05, -8.519708200889291e-05, -8.378164432260351e-05, -8.354708726734944e-05, -8.354708726734944e-05, -1.337291946713426e-02, -1.044511396197061e-02, -1.636848867894578e-02, -1.491144824859394e-02, -1.166728171423406e-02, -1.166728171423406e-02, -2.087355158110254e+00, -5.591935593482666e-01, -2.364020639630056e+00, -1.220042966012733e-04, -2.025827712885209e+00, -2.025827712885209e+00, -8.959451973654188e+00, -8.974819882760032e+00, -2.568960405157520e+01, -4.255748871475182e+00, -1.325608189653154e+01, -1.325608189653154e+01, -1.309895169041960e-02, -1.315143015576596e-02, -1.313262335198109e-02, -1.311826238873250e-02, -1.312548650315984e-02, -1.312548650315984e-02, -1.496750924328824e-02, -2.192472762316528e-02, -1.964078284489389e-02, -1.772822416187082e-02, -1.869193898858776e-02, -1.869193898858777e-02, -8.619097155283644e-03, -2.929042005942090e-01, -1.835724794924970e-01, -8.904969752544423e-02, -1.303091921196371e-01, -1.303091921196371e-01, -3.266803348157354e-02, -3.998818451795536e+00, -3.800933926529793e+00, -1.192066370370238e-01, -3.704499651300630e+00, -3.704499651300633e+00, -8.903718885561956e+00, -1.545742922267767e+01, -1.330474831592862e+01, -4.538851112208659e+00, -1.936309873527951e+01, -1.936309873527947e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
