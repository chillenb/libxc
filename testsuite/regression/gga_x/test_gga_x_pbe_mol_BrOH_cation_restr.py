
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_pbe_mol_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbe_mol", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.120902786590572e+01, -2.120904943580497e+01, -2.120922387129508e+01, -2.120890133755687e+01, -2.120905916857137e+01, -2.120905916857137e+01, -3.529412752104281e+00, -3.529365855560437e+00, -3.528368279692527e+00, -3.530773040363043e+00, -3.529441603737344e+00, -3.529441603737344e+00, -7.132380495292455e-01, -7.133690402946298e-01, -7.184524647093404e-01, -7.232147133107668e-01, -7.212429845915657e-01, -7.212429845915657e-01, -2.229407936640573e-01, -2.240637029544718e-01, -8.220506136899531e-01, -1.875582055532645e-01, -2.014346410215869e-01, -2.014346410215870e-01, -1.008871445360942e-02, -1.061806981507929e-02, -5.786751973613847e-02, -5.828490238322692e-03, -7.323057011770919e-03, -7.323057011770919e-03, -5.083681111902102e+00, -5.082727598205502e+00, -5.083649652647302e+00, -5.082807698654913e+00, -5.083190914486161e+00, -5.083190914486161e+00, -2.172297797031120e+00, -2.181781852893336e+00, -2.175076823448653e+00, -2.183474676278692e+00, -2.176156433813577e+00, -2.176156433813577e+00, -5.890881668084674e-01, -6.056347542527358e-01, -5.502547535405148e-01, -5.406838060197119e-01, -5.942072530230428e-01, -5.942072530230428e-01, -1.415231310835752e-01, -2.387311788816308e-01, -1.320218288666290e-01, -1.821630685963195e+00, -1.590102461202855e-01, -1.590102461202855e-01, -4.497289271837479e-03, -5.697832311917193e-03, -4.356510038640766e-03, -9.167994146654240e-02, -5.248256256247742e-03, -5.248256256247742e-03, -5.516822916021441e-01, -5.563792421798252e-01, -5.547541876968377e-01, -5.533828454603474e-01, -5.540703164822419e-01, -5.540703164822419e-01, -5.344108323421688e-01, -5.219522896366179e-01, -5.257862895996130e-01, -5.287651258886364e-01, -5.270525033063279e-01, -5.270525033063279e-01, -6.363323682689646e-01, -2.854002385778657e-01, -3.212289013886097e-01, -3.747731932363937e-01, -3.461462851165425e-01, -3.461462851165425e-01, -4.818756341854481e-01, -5.547631109592602e-02, -7.489848458761260e-02, -3.489980269921839e-01, -1.135918839343176e-01, -1.135918839343177e-01, -1.423278783796375e-02, -1.523273513260616e-03, -3.197250226211918e-03, -1.074813901100214e-01, -4.856321516780282e-03, -4.856321516780279e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_pbe_mol_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbe_mol", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.490243016737666e+01, -2.490253228315248e+01, -2.490295529897010e+01, -2.490143668048463e+01, -2.490223679854876e+01, -2.490223679854876e+01, -3.993918731995949e+00, -3.993966181404200e+00, -3.995162555228863e+00, -3.993842924673217e+00, -3.994071900995311e+00, -3.994071900995311e+00, -7.528366185952271e-01, -7.516752849210169e-01, -7.263142712767299e-01, -7.324625483714384e-01, -7.312577133153316e-01, -7.312577133153316e-01, -2.112226770559741e-01, -2.117434921016509e-01, -8.817901637881805e-01, -1.920586221513826e-01, -1.972436630688995e-01, -1.972436630688995e-01, -1.343848571808975e-02, -1.414168738636104e-02, -7.522398586455156e-02, -7.768907218720327e-03, -9.758680486243822e-03, -9.758680486243822e-03, -6.150240589870576e+00, -6.153235575243778e+00, -6.150373806384692e+00, -6.153017809260688e+00, -6.151760752680335e+00, -6.151760752680335e+00, -2.178375273747652e+00, -2.194452682330481e+00, -2.166747217276531e+00, -2.180657038811243e+00, -2.193224180051535e+00, -2.193224180051535e+00, -6.786557571341141e-01, -7.709829588987627e-01, -6.240525900106578e-01, -6.775267567927913e-01, -6.931714527592009e-01, -6.931714527592009e-01, -1.635483136506839e-01, -2.355341193096509e-01, -1.547643558142353e-01, -2.324747526436944e+00, -1.715721904660287e-01, -1.715721904660287e-01, -5.995113280163325e-03, -7.594663995310003e-03, -5.805940212045858e-03, -1.138663228139450e-01, -6.994407278382264e-03, -6.994407278382264e-03, -7.235940959656325e-01, -7.097708879998732e-01, -7.145150824573183e-01, -7.185326443474765e-01, -7.165123739695516e-01, -7.165123739695516e-01, -7.069754754547926e-01, -5.532670237062884e-01, -5.904510313615833e-01, -6.335161386593048e-01, -6.109953462561492e-01, -6.109953462561492e-01, -8.066351555991255e-01, -2.715234119396431e-01, -3.034953484238568e-01, -3.885820264929064e-01, -3.374855658538028e-01, -3.374855658538027e-01, -5.088500936825097e-01, -7.234508542774719e-02, -9.583275526083912e-02, -3.794161466482918e-01, -1.342457645165960e-01, -1.342457645165960e-01, -1.894392989649279e-02, -2.030927843973433e-03, -4.262334409245184e-03, -1.287496404221783e-01, -6.472185739758673e-03, -6.472185739758667e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_pbe_mol_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbe_mol", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-8.548189108861300e-09, -8.548137904872374e-09, -8.547810007448782e-09, -8.548573878484438e-09, -8.548187879146954e-09, -8.548187879146954e-09, -1.139435859131655e-05, -1.139480211747270e-05, -1.140393728291188e-05, -1.137940776948196e-05, -1.139379168723434e-05, -1.139379168723434e-05, -7.067468681338090e-03, -7.066934242973144e-03, -6.947493211480915e-03, -6.764484646478295e-03, -6.837579517872464e-03, -6.837579517872464e-03, -6.379937098705025e-01, -6.412252217281108e-01, -3.978442835029377e-03, -7.871307333397233e-01, -7.747003086502618e-01, -7.747003086502615e-01, -1.940698033637265e+00, -2.050438189031634e+00, -1.158882697173652e+00, -1.762953979085217e+00, -2.240068324127545e+00, -2.240068324127550e+00, -2.540335582535253e-06, -2.541107884536652e-06, -2.540351670640700e-06, -2.541033772412523e-06, -2.540738015806641e-06, -2.540738015806641e-06, -8.319618363074636e-05, -8.173979579111693e-05, -8.278612146729761e-05, -8.151933995282457e-05, -8.257109766695652e-05, -8.257109766695652e-05, -1.453001295654995e-02, -1.217631340246208e-02, -1.926192255842253e-02, -1.938349768599143e-02, -1.392993593461452e-02, -1.392993593461452e-02, -8.472107882153561e-01, -3.757567688309914e-01, -9.271383899422398e-01, -1.485056581559708e-04, -1.049619098526546e+00, -1.049619098526546e+00, -2.322803414647435e+00, -2.074870054177600e+00, -1.303143119097992e+01, -1.331609157630966e+00, -6.064260684449915e+00, -6.064260684449899e+00, -1.730404958751122e-02, -1.706951983910839e-02, -1.715134849434859e-02, -1.722013732013385e-02, -1.718576177225477e-02, -1.718576177225477e-02, -1.952655661659686e-02, -2.460123600033522e-02, -2.323362614701886e-02, -2.184334232762947e-02, -2.259136700528121e-02, -2.259136700528121e-02, -1.002156566266289e-02, -2.298689645888795e-01, -1.644485506707949e-01, -9.328671879599401e-02, -1.285424117619493e-01, -1.285424117619494e-01, -3.391480217619502e-02, -1.055601054208384e+00, -1.060455482812413e+00, -1.217129500167399e-01, -1.504497237051525e+00, -1.504497237051527e+00, -1.564628702516894e+00, -1.018086790033186e+01, -4.927494140684042e+00, -1.513286540769629e+00, -7.659638446602093e+00, -7.659638446602110e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
