
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_ityh_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ityh", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.093745100691964e+01, -2.093747808746259e+01, -2.093766738894611e+01, -2.093726306489101e+01, -2.093746512659654e+01, -2.093746512659654e+01, -3.368030303765427e+00, -3.367994385992610e+00, -3.367249586802004e+00, -3.369207645335119e+00, -3.368071663089430e+00, -3.368071663089430e+00, -5.755891710797382e-01, -5.754043367617454e-01, -5.721091586783313e-01, -5.770842819936250e-01, -5.770508445864031e-01, -5.770508445864031e-01, -9.018953325509857e-02, -9.223551446070266e-02, -6.848394107717353e-01, -5.462296899589771e-02, -8.534869378798438e-02, -8.534869378798435e-02, -8.605993000235071e-06, -1.005790276733594e-05, -1.649708666766972e-03, -1.645489740968656e-06, -4.810346775275519e-06, -4.810346775275521e-06, -4.940122566682788e+00, -4.939482060403812e+00, -4.940104018063439e+00, -4.939538409915638e+00, -4.939791963375824e+00, -4.939791963375824e+00, -1.985348573518914e+00, -1.995763383971019e+00, -1.985480801357532e+00, -1.994676935855463e+00, -1.991061221038579e+00, -1.991061221038579e+00, -4.682892220302757e-01, -4.961498827359235e-01, -4.287588120545419e-01, -4.309714503372722e-01, -4.756006959300983e-01, -4.756006959300983e-01, -2.391105682429458e-02, -9.490067050128444e-02, -1.967899770731939e-02, -1.705441880992459e+00, -3.488506112700529e-02, -3.488506112700529e-02, -7.578613567967457e-07, -1.537122778713578e-06, -6.919347014426407e-07, -6.650990894056363e-03, -1.436440118771098e-06, -1.436440118771098e-06, -4.457864951310619e-01, -4.478810475165421e-01, -4.471925188196646e-01, -4.465808408399187e-01, -4.468905503418922e-01, -4.468905503418922e-01, -4.294876921263242e-01, -3.915535872298046e-01, -4.034286409574086e-01, -4.142150627510759e-01, -4.086775330593897e-01, -4.086775330593897e-01, -5.259798614070526e-01, -1.394896437931155e-01, -1.795688503781521e-01, -2.486630950392491e-01, -2.119586688018129e-01, -2.119586688018129e-01, -3.526130694735032e-01, -1.440886634477685e-03, -3.580427967045913e-03, -2.306303547890043e-01, -1.297388827201084e-02, -1.297388827201084e-02, -2.405553691554501e-05, -2.934516566273621e-08, -2.736965094835529e-07, -1.089971211230410e-02, -1.105469723657211e-06, -1.105469723657208e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_ityh_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ityh", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.511366986406772e+01, -2.511363963513495e+01, -2.511377935275919e+01, -2.511371915860726e+01, -2.511410821038311e+01, -2.511419638499249e+01, -2.511287228265860e+01, -2.511262091613470e+01, -2.511373624698284e+01, -2.511323491637764e+01, -2.511373624698284e+01, -2.511323491637764e+01, -3.964362628356267e+00, -3.964487192839895e+00, -3.964397841651097e+00, -3.964526015725935e+00, -3.965289025978878e+00, -3.965546556088311e+00, -3.964399976005329e+00, -3.964654661543023e+00, -3.963613230739166e+00, -3.965520573609174e+00, -3.963613230739166e+00, -3.965520573609174e+00, -6.800896817394039e-01, -6.840378798602634e-01, -6.785982673326387e-01, -6.834264653398320e-01, -6.593001919836309e-01, -6.531326224070000e-01, -6.615158682561428e-01, -6.634917215993801e-01, -6.913975107407881e-01, -6.321116433680612e-01, -6.913975107407881e-01, -6.321116433680612e-01, -1.212578710634046e-01, -1.278263228777442e-01, -1.231159426490792e-01, -1.307367946225879e-01, -7.941521027398879e-01, -8.287240538061020e-01, -8.204406058638933e-02, -8.402337204297264e-02, -1.294626889379130e-01, -4.484826149336855e-02, -1.294626889379129e-01, -4.484826149336855e-02, -1.551822035544689e-05, -1.861872168323683e-05, -1.785489932301260e-05, -2.194830716690468e-05, -2.973284724328589e-03, -3.484137465816372e-03, -3.371653004456766e-06, -3.205912768352269e-06, -1.101823152995546e-05, -2.030788912089437e-06, -1.101823152995547e-05, -2.030788912089437e-06, -6.105015673982391e+00, -6.103474856527716e+00, -6.107514732994609e+00, -6.105889037521119e+00, -6.105154713083213e+00, -6.103557970127162e+00, -6.107299016124735e+00, -6.105751116240380e+00, -6.106295270210077e+00, -6.104687132934902e+00, -6.106295270210077e+00, -6.104687132934902e+00, -2.122965138773469e+00, -2.122849334203253e+00, -2.140890380959914e+00, -2.140245386288053e+00, -2.105020125029529e+00, -2.110056505967178e+00, -2.120447841812374e+00, -2.125674304438367e+00, -2.146541862952016e+00, -2.133842240740101e+00, -2.146541862952016e+00, -2.133842240740101e+00, -5.965087889045421e-01, -5.947320715651734e-01, -6.704853012777284e-01, -6.710801134282350e-01, -5.307287651166108e-01, -5.545945589517763e-01, -5.692155689899953e-01, -5.910622951493760e-01, -6.259501227490856e-01, -5.896376520869976e-01, -6.259501227490856e-01, -5.896376520869976e-01, -4.104799965099528e-02, -4.187859209248450e-02, -1.291757138432105e-01, -1.300720456589793e-01, -3.255034851056920e-02, -3.675199723286494e-02, -2.226063622674721e+00, -2.225068645390480e+00, -5.409537053499259e-02, -5.976003564518612e-02, -5.409537053499259e-02, -5.976003564518612e-02, -1.423548349033326e-06, -1.597796321712807e-06, -3.003369600066930e-06, -3.141806736779705e-06, -1.255825440499021e-06, -1.491615703601373e-06, -1.253133952618125e-02, -1.274831759249789e-02, -1.337986847719906e-06, -3.465320550720537e-06, -1.337986847719905e-06, -3.465320550720539e-06, -6.172188805751870e-01, -6.200890522940259e-01, -6.079600962144817e-01, -6.108560604914359e-01, -6.110726984282252e-01, -6.139807885521705e-01, -6.137747684850017e-01, -6.166357156447630e-01, -6.124108461253184e-01, -6.152948639955972e-01, -6.124108461253184e-01, -6.152948639955972e-01, -5.997387739064753e-01, -6.020684351979111e-01, -4.778578856175732e-01, -4.804101309946986e-01, -5.088690514614224e-01, -5.117189168976028e-01, -5.426621206408866e-01, -5.449877511614246e-01, -5.252343528684131e-01, -5.276077519631742e-01, -5.252343528684131e-01, -5.276077519631742e-01, -7.062660839700889e-01, -7.079724242818008e-01, -1.764630141970651e-01, -1.777261254374133e-01, -2.205305891074402e-01, -2.231803588442080e-01, -3.129370943549343e-01, -3.151328770505205e-01, -2.631343995820742e-01, -2.629974772872937e-01, -2.631343995820741e-01, -2.629974772872938e-01, -4.325558249970468e-01, -4.362895374548440e-01, -2.815106412256771e-03, -2.871707459221656e-03, -6.617069800682472e-03, -7.260741856463771e-03, -2.980964197484521e-01, -3.039762506187542e-01, -2.203102779227700e-02, -2.507818061743200e-02, -2.203102779227705e-02, -2.507818061743201e-02, -4.539901610196299e-05, -5.051372110551533e-05, -5.848861002683467e-08, -5.889054943503144e-08, -4.927322734941943e-07, -5.928176038919591e-07, -1.971898095425868e-02, -2.055770019466639e-02, -1.137087943074089e-06, -2.668419922112514e-06, -1.137087943074086e-06, -2.668419922112505e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_ityh_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ityh", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.440089868815112e-08, 0.000000000000000e+00, -1.440098108949304e-08, -1.440081814708083e-08, 0.000000000000000e+00, -1.440092251711689e-08, -1.440038322544743e-08, 0.000000000000000e+00, -1.440034893699474e-08, -1.440129735576148e-08, 0.000000000000000e+00, -1.440151265559191e-08, -1.440085960298936e-08, 0.000000000000000e+00, -1.440091705755891e-08, -1.440085960298936e-08, 0.000000000000000e+00, -1.440091705755891e-08, -1.816250938810090e-05, 0.000000000000000e+00, -1.816937268024888e-05, -1.816302224717115e-05, 0.000000000000000e+00, -1.817039939942363e-05, -1.818066246270754e-05, 0.000000000000000e+00, -1.818487656048209e-05, -1.813855506430309e-05, 0.000000000000000e+00, -1.814401307839445e-05, -1.817217278715524e-05, 0.000000000000000e+00, -1.815810191283392e-05, -1.817217278715524e-05, 0.000000000000000e+00, -1.815810191283392e-05, -8.844957724148212e-03, 0.000000000000000e+00, -8.871458088928372e-03, -8.842657877223511e-03, 0.000000000000000e+00, -8.874745151463598e-03, -8.831367378477806e-03, 0.000000000000000e+00, -8.796511219077532e-03, -8.587068002001859e-03, 0.000000000000000e+00, -8.601920827566249e-03, -8.855693635279167e-03, 0.000000000000000e+00, -8.355699708137846e-03, -8.855693635279167e-03, 0.000000000000000e+00, -8.355699708137846e-03, -3.447037369826616e-01, 0.000000000000000e+00, -3.378480831673410e-01, -3.488127269750140e-01, 0.000000000000000e+00, -3.394016900544791e-01, -5.342468625718647e-03, 0.000000000000000e+00, -5.053416304782927e-03, -3.345365771159934e-01, 0.000000000000000e+00, -3.323526801489229e-01, -3.180333243651438e-01, 0.000000000000000e+00, -2.698727188763699e-01, -3.180333243651435e-01, 0.000000000000000e+00, -2.698727188763689e-01, -4.356351709836080e-04, 0.000000000000000e+00, -5.102934602059896e-04, -5.125431988193524e-04, 0.000000000000000e+00, -6.155289861945051e-04, -3.095167658334853e-02, 0.000000000000000e+00, -3.554380004766550e-02, -1.014971060629714e-04, 0.000000000000000e+00, -9.505849305876336e-05, -3.187692916922478e-04, 0.000000000000000e+00, -1.284776420637938e-04, -3.187692916924525e-04, 0.000000000000000e+00, -1.284776420653234e-04, -4.222860082102089e-06, 0.000000000000000e+00, -4.226618676734639e-06, -4.225971869356231e-06, 0.000000000000000e+00, -4.229629333801239e-06, -4.222988409620230e-06, 0.000000000000000e+00, -4.226690272146235e-06, -4.225658828986371e-06, 0.000000000000000e+00, -4.229425587464893e-06, -4.224487118097599e-06, 0.000000000000000e+00, -4.228135486321278e-06, -4.224487118097599e-06, 0.000000000000000e+00, -4.228135486321278e-06, -1.319690182855191e-04, 0.000000000000000e+00, -1.319919743953873e-04, -1.293382349633820e-04, 0.000000000000000e+00, -1.294495402934371e-04, -1.321851281723091e-04, 0.000000000000000e+00, -1.321736672968516e-04, -1.299135624731577e-04, 0.000000000000000e+00, -1.298477320861965e-04, -1.302774327104294e-04, 0.000000000000000e+00, -1.306347961338699e-04, -1.302774327104294e-04, 0.000000000000000e+00, -1.306347961338699e-04, -1.736643548611907e-02, 0.000000000000000e+00, -1.754686442243607e-02, -1.617371652141347e-02, 0.000000000000000e+00, -1.620246908486882e-02, -2.362751423635821e-02, 0.000000000000000e+00, -2.123698900895578e-02, -2.583119384154711e-02, 0.000000000000000e+00, -2.284804860031388e-02, -1.553867640867583e-02, 0.000000000000000e+00, -1.852820747977707e-02, -1.553867640867583e-02, 0.000000000000000e+00, -1.852820747977707e-02, -2.165816928534116e-01, 0.000000000000000e+00, -2.224096573349020e-01, -2.469255337731450e-01, 0.000000000000000e+00, -2.458884928181890e-01, -1.946526910080495e-01, 0.000000000000000e+00, -2.104804253875518e-01, -2.434151853577604e-04, 0.000000000000000e+00, -2.438857769208820e-04, -2.846830156798595e-01, 0.000000000000000e+00, -3.464760164060173e-01, -2.846830156798595e-01, 0.000000000000000e+00, -3.464760164060173e-01, -5.785648158268489e-05, 0.000000000000000e+00, -5.824218174134449e-05, -1.040126749022712e-04, 0.000000000000000e+00, -1.026023773471202e-04, -1.549022252948440e-04, 0.000000000000000e+00, -1.951645870366555e-04, -1.140287951119398e-01, 0.000000000000000e+00, -1.129398693349023e-01, -1.013917566349099e-04, 0.000000000000000e+00, -2.399045276903034e-04, -1.013917566322410e-04, 0.000000000000000e+00, -2.399045276894633e-04, -2.374393370755562e-02, 0.000000000000000e+00, -2.345181687305091e-02, -2.226001720574958e-02, 0.000000000000000e+00, -2.199524143793704e-02, -2.270155524764032e-02, 0.000000000000000e+00, -2.243149736910575e-02, -2.312798315709988e-02, 0.000000000000000e+00, -2.284369403033675e-02, -2.290750184744874e-02, 0.000000000000000e+00, -2.263042608635311e-02, -2.290750184744874e-02, 0.000000000000000e+00, -2.263042608635311e-02, -2.712540965739477e-02, 0.000000000000000e+00, -2.680907932018033e-02, -2.753065532663389e-02, 0.000000000000000e+00, -2.723090385895211e-02, -2.651714433096134e-02, 0.000000000000000e+00, -2.622960985468588e-02, -2.602076549072319e-02, 0.000000000000000e+00, -2.573912266866836e-02, -2.625318416295408e-02, 0.000000000000000e+00, -2.595517143395537e-02, -2.625318416295408e-02, 0.000000000000000e+00, -2.595517143395537e-02, -1.345400349378861e-02, 0.000000000000000e+00, -1.344219071275672e-02, -1.815709310899691e-01, 0.000000000000000e+00, -1.802946443732050e-01, -1.388307280658448e-01, 0.000000000000000e+00, -1.372039871678664e-01, -8.666746526682646e-02, 0.000000000000000e+00, -8.544105378664973e-02, -1.113963379651454e-01, 0.000000000000000e+00, -1.119357855333691e-01, -1.113963379651454e-01, 0.000000000000000e+00, -1.119357855333692e-01, -3.661118704919212e-02, 0.000000000000000e+00, -3.604468922756882e-02, -2.790174600713840e-02, 0.000000000000000e+00, -2.840013566285635e-02, -5.699620301654767e-02, 0.000000000000000e+00, -6.247935907895538e-02, -1.108179482358617e-01, 0.000000000000000e+00, -1.068761722067899e-01, -1.819274504292565e-01, 0.000000000000000e+00, -2.245857546146267e-01, -1.819274504292520e-01, 0.000000000000000e+00, -2.245857546146263e-01, -9.801626036467952e-04, 0.000000000000000e+00, -1.093647471411135e-03, -6.431164778491944e-06, 0.000000000000000e+00, -9.690206479179398e-06, -3.375106962841343e-05, 0.000000000000000e+00, -4.187811770190001e-05, -1.782431993237912e-01, 0.000000000000000e+00, -1.819949400743722e-01, -1.438461910113935e-04, 0.000000000000000e+00, -1.938106445364722e-04, -1.438461910148769e-04, 0.000000000000000e+00, -1.938106445376654e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
