
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_xpbe_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_xpbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.101635338847153e+01, -2.101637556024329e+01, -2.101655375041604e+01, -2.101618910279430e+01, -2.101636441843088e+01, -2.101636441843088e+01, -3.489505972846458e+00, -3.489473973967418e+00, -3.488738780973743e+00, -3.490745991238706e+00, -3.489504379651007e+00, -3.489504379651007e+00, -7.038812720589679e-01, -7.040046782510365e-01, -7.095328101091076e-01, -7.137243453355944e-01, -7.039220389816635e-01, -7.039220389816635e-01, -2.213012070113475e-01, -2.219630498596665e-01, -8.174524251445383e-01, -1.864606331609462e-01, -2.214718596482532e-01, -2.214718596482532e-01, -1.808890105919678e-02, -1.894175528119980e-02, -7.458357805971987e-02, -8.698538255456320e-03, -1.874447888085935e-02, -1.874447888085935e-02, -5.045437631238223e+00, -5.044742205290967e+00, -5.045373049059650e+00, -5.044832199836311e+00, -5.045071516673487e+00, -5.045071516673487e+00, -2.136450657234859e+00, -2.145601768343809e+00, -2.138686590866155e+00, -2.145794212913968e+00, -2.139787577426878e+00, -2.139787577426878e+00, -5.762119940900015e-01, -5.960684607249417e-01, -5.490604935693605e-01, -5.485272253631477e-01, -5.936119746066096e-01, -5.936119746066096e-01, -1.515320980860913e-01, -2.444488645641831e-01, -1.487150262913235e-01, -1.813285874471146e+00, -1.661893068210821e-01, -1.661893068210821e-01, -8.391565828963226e-03, -9.588572704136504e-03, -7.186939625083323e-03, -1.006139360016560e-01, -8.736620201915870e-03, -8.736620201915870e-03, -5.587960043014265e-01, -5.619604331669743e-01, -5.608393476309604e-01, -5.599601623805395e-01, -5.604003385163259e-01, -5.604003385163259e-01, -5.398673952269630e-01, -5.201629659311152e-01, -5.256943731738880e-01, -5.306733644432442e-01, -5.279403296742372e-01, -5.279403296742372e-01, -6.260279733891065e-01, -2.885133099216413e-01, -3.205839773115561e-01, -3.696919883140851e-01, -3.430381026997167e-01, -3.430381026997167e-01, -4.723724387694196e-01, -6.959367065174871e-02, -9.205453174675003e-02, -3.384728338560435e-01, -1.253246507408300e-01, -1.253246507408300e-01, -2.118810293894960e-02, -2.626882411873480e-03, -4.989294293260313e-03, -1.194449126057060e-01, -7.425653777732220e-03, -7.425653777732208e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_xpbe_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_xpbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.504497278202513e+01, -2.504506194852568e+01, -2.504546348141126e+01, -2.504400328344309e+01, -2.504501977412459e+01, -2.504501977412459e+01, -4.014770658550725e+00, -4.014812969266797e+00, -4.016141694683709e+00, -4.014703821335948e+00, -4.014809522444249e+00, -4.014809522444249e+00, -7.451723959941772e-01, -7.439594009558732e-01, -7.142253797403522e-01, -7.202644506028524e-01, -7.447314578398428e-01, -7.447314578398428e-01, -2.026739357747068e-01, -2.044294217254417e-01, -9.097145013694360e-01, -1.746833113999196e-01, -2.031701311400671e-01, -2.031701311400671e-01, -2.397668333959150e-02, -2.509254297236635e-02, -9.286866439947933e-02, -1.158479909256295e-02, -2.483151229531377e-02, -2.483151229531377e-02, -6.180015690845529e+00, -6.182827468108353e+00, -6.180302766637270e+00, -6.182489084586679e+00, -6.181458047828860e+00, -6.181458047828860e+00, -2.155214802777664e+00, -2.172243377093943e+00, -2.146666103278279e+00, -2.159834293703700e+00, -2.178248582758328e+00, -2.178248582758328e+00, -6.754998926269354e-01, -7.658629422915898e-01, -6.388847233073034e-01, -6.913337287564070e-01, -7.059674027221692e-01, -7.059674027221692e-01, -1.595841747642991e-01, -2.217703267434099e-01, -1.552744017360396e-01, -2.329188529436556e+00, -1.631658528000355e-01, -1.631658528000355e-01, -1.117650015280578e-02, -1.276646059804225e-02, -9.569547563319333e-03, -1.179013573972149e-01, -1.163200055986560e-02, -1.163200055986560e-02, -7.369104873105168e-01, -7.251751363110067e-01, -7.293195121205597e-01, -7.325696984755677e-01, -7.309389761347220e-01, -7.309389761347220e-01, -7.145598047855605e-01, -5.685737394031041e-01, -6.075300681608021e-01, -6.468636422934049e-01, -6.266604820934054e-01, -6.266604820934054e-01, -8.017259339784144e-01, -2.613354058333925e-01, -3.010796062206040e-01, -3.924583210622634e-01, -3.409474716352325e-01, -3.409474716352324e-01, -5.107405059570056e-01, -8.790028338924565e-02, -1.112814981641803e-01, -3.778234969764620e-01, -1.358466807807711e-01, -1.358466807807711e-01, -2.805312784920818e-02, -3.502016547728194e-03, -6.649255502674207e-03, -1.292720785838487e-01, -9.888387134984675e-03, -9.888387134984661e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_xpbe_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_xpbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-7.537388172912940e-09, -7.537340517271135e-09, -7.537037113373744e-09, -7.537819303450691e-09, -7.537363799989771e-09, -7.537363799989771e-09, -1.020946226815376e-05, -1.020967338763908e-05, -1.021378849859823e-05, -1.019804169877060e-05, -1.020939688913025e-05, -1.020939688913025e-05, -6.575810101705195e-03, -6.579772743991620e-03, -6.591294255217709e-03, -6.427524183933584e-03, -6.577377596297313e-03, -6.577377596297313e-03, -7.192804335833434e-01, -7.122507006133306e-01, -3.481234917056367e-03, -1.111486438098823e+00, -7.176504725807848e-01, -7.176504725807848e-01, -6.333347189233549e+00, -6.349798290009545e+00, -2.620371774966006e+00, -4.489509858637089e+00, -6.596395605776542e+00, -6.596395605776542e+00, -2.216802318243672e-06, -2.216896026455300e-06, -2.216803026079870e-06, -2.216876048917442e-06, -2.216863337106094e-06, -2.216863337106094e-06, -8.007525209731535e-05, -7.853719095510729e-05, -7.999285137505260e-05, -7.880023290897415e-05, -7.911247109832423e-05, -7.911247109832423e-05, -1.352239331293618e-02, -1.091387869996594e-02, -1.650336017242712e-02, -1.547975495573018e-02, -1.186256647296818e-02, -1.186256647296818e-02, -1.357567022953063e+00, -4.398358568725916e-01, -1.549741631408712e+00, -1.274683262968332e-04, -1.411425928230864e+00, -1.411425928230864e+00, -4.762731359690173e+00, -4.772279399040388e+00, -1.365938215856344e+01, -2.521705521307493e+00, -7.048879564046906e+00, -7.048879564046901e+00, -1.380378723095895e-02, -1.376141989147781e-02, -1.377657326957117e-02, -1.378851607109192e-02, -1.378258877205825e-02, -1.378258877205825e-02, -1.579140930399505e-02, -2.153028653367343e-02, -1.974915798299298e-02, -1.818936444152858e-02, -1.899102882137930e-02, -1.899102882137929e-02, -8.996079858671612e-03, -2.455841236343255e-01, -1.635579784184849e-01, -8.624198233114748e-02, -1.215816687069933e-01, -1.215816687069934e-01, -3.191921501548901e-02, -2.223961035431141e+00, -2.193689994832921e+00, -1.181549532391277e-01, -2.347660763049969e+00, -2.347660763049971e+00, -4.757203342673019e+00, -8.210243910287259e+00, -7.068849433652688e+00, -2.880380118698584e+00, -1.029464356399461e+01, -1.029464356399459e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
