
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_hjs_b88_v2_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_hjs_b88_v2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.099852011861404e+01, -2.099854689402137e+01, -2.099873532885439e+01, -2.099833553481174e+01, -2.099853515312004e+01, -2.099853515312004e+01, -3.431457408224825e+00, -3.431418988280468e+00, -3.430616388748850e+00, -3.432675253932824e+00, -3.431495811155819e+00, -3.431495811155819e+00, -6.394754215421523e-01, -6.394822073123122e-01, -6.414712476163931e-01, -6.462384994003596e-01, -6.465794976765866e-01, -6.465794976765866e-01, -1.588369183539719e-01, -1.595244446854576e-01, -7.481772906804939e-01, -1.341246064011777e-01, -1.569830957736448e-01, -1.569830957736447e-01, 0.000000000000000e+00, 0.000000000000000e+00, -5.730206022661433e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -4.997904959446679e+00, -4.997207767236652e+00, -4.997884069783277e+00, -4.997268413707044e+00, -4.997545465927827e+00, -4.997545465927827e+00, -2.062640950760592e+00, -2.072538542442941e+00, -2.064014162944728e+00, -2.072738531222758e+00, -2.067479768341893e+00, -2.067479768341893e+00, -5.226803356554282e-01, -5.441118101795218e-01, -4.837619269682547e-01, -4.791114225709237e-01, -5.291179296196644e-01, -5.291179296196644e-01, -1.089300451860232e-01, -1.799292769288593e-01, -1.021711472852102e-01, -1.757416587440356e+00, -1.131801236426744e-01, -1.131801236426744e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -7.382388056555134e-02, 0.000000000000000e+00, 0.000000000000000e+00, -4.915864764807149e-01, -4.951974914770065e-01, -4.939664420502737e-01, -4.929121181905606e-01, -4.934422499215632e-01, -4.934422499215632e-01, -4.746873491573004e-01, -4.518995360966163e-01, -4.587765189950779e-01, -4.649564175538221e-01, -4.616512841302510e-01, -4.616512841302510e-01, -5.744822997362062e-01, -2.201645398518290e-01, -2.521265502572411e-01, -3.067231115789422e-01, -2.765571355101176e-01, -2.765571355101177e-01, -4.123950773649416e-01, -5.738430588216025e-02, -6.892653126606306e-02, -2.835096339437915e-01, -8.287792917730324e-02, -8.287792917730327e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -7.957739376682266e-02, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_hjs_b88_v2_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_hjs_b88_v2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.514732997524719e+01, -2.514729980780020e+01, -2.514744018811948e+01, -2.514737985693713e+01, -2.514777038220246e+01, -2.514785927291263e+01, -2.514652630210352e+01, -2.514627340540146e+01, -2.514739683958317e+01, -2.514689084065667e+01, -2.514739683958317e+01, -2.514689084065667e+01, -3.995608015403921e+00, -3.995747725022594e+00, -3.995645122996166e+00, -3.995789411061350e+00, -3.996592185796978e+00, -3.996864432084468e+00, -3.995606499414177e+00, -3.995877762384167e+00, -3.994852680251514e+00, -3.996792740683054e+00, -3.994852680251514e+00, -3.996792740683054e+00, -7.032487989157551e-01, -7.080781872988375e-01, -7.014499398677795e-01, -7.073657033656005e-01, -6.778732073367477e-01, -6.701098481137412e-01, -6.792960068307909e-01, -6.818042247539008e-01, -7.167146049318690e-01, -6.430154132485405e-01, -7.167146049318690e-01, -6.430154132485405e-01, -1.257560624414261e-01, -1.329984360741568e-01, -1.281067055911030e-01, -1.365248577223677e-01, -8.178522215837754e-01, -8.556962352644139e-01, -8.471076754604287e-02, -8.652498107176705e-02, -1.337659300038991e-01, -5.147208623668493e-02, -1.337659300038992e-01, -5.147208623668510e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.159951638302683e-03, -2.631851473779723e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -6.144180385918677e+00, -6.142635945868633e+00, -6.146765675577968e+00, -6.145133479604990e+00, -6.144323842198101e+00, -6.142721655625696e+00, -6.146542145921329e+00, -6.144990531287822e+00, -6.145504484908982e+00, -6.143890173483470e+00, -6.145504484908982e+00, -6.143890173483470e+00, -2.138796937633428e+00, -2.138679712448303e+00, -2.157273198181498e+00, -2.156614877422780e+00, -2.119542004821893e+00, -2.124936877232385e+00, -2.135373920133120e+00, -2.140978197732461e+00, -2.163802643167652e+00, -2.150107799974466e+00, -2.163802643167652e+00, -2.150107799974466e+00, -6.289822030725949e-01, -6.272378831769604e-01, -7.133285496990742e-01, -7.140517593270198e-01, -5.610063772101407e-01, -5.860020085223466e-01, -6.103540523917852e-01, -6.321115800147006e-01, -6.600192318079589e-01, -6.231621550316899e-01, -6.600192318079589e-01, -6.231621550316899e-01, -4.876950614968044e-02, -4.944245621295772e-02, -1.287235291902834e-01, -1.296316616763431e-01, -4.079839312714475e-02, -4.470601694472749e-02, -2.270549780923949e+00, -2.269562058117429e+00, -5.975205037899986e-02, -6.450600697691709e-02, -5.975205037899986e-02, -6.450600697691709e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.816076189638101e-02, -1.855997652276955e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -6.627199409494783e-01, -6.656462364714194e-01, -6.508306467568279e-01, -6.538160863581487e-01, -6.548676460572290e-01, -6.578597163770203e-01, -6.583434521451056e-01, -6.612672673986548e-01, -6.565930884449633e-01, -6.595501831137797e-01, -6.565930884449633e-01, -6.595501831137797e-01, -6.459033453672192e-01, -6.482513234244535e-01, -5.017583728018303e-01, -5.045196057481020e-01, -5.386163176791521e-01, -5.416988363655810e-01, -5.791027757502408e-01, -5.815156393078796e-01, -5.582638901861817e-01, -5.607314094982840e-01, -5.582638901861817e-01, -5.607314094982840e-01, -7.487444098974906e-01, -7.506526458990382e-01, -1.776472050198123e-01, -1.790333112066635e-01, -2.263822245118743e-01, -2.295932323061299e-01, -3.344658335712087e-01, -3.368460014811621e-01, -2.766516184274032e-01, -2.766487837041709e-01, -2.766516184274033e-01, -2.766487837041712e-01, -4.559415152703999e-01, -4.600751327262544e-01, -8.015973285028688e-04, -9.835771040743089e-04, -9.839154452362891e-03, -1.093402305615804e-02, -3.245014782660001e-01, -3.309414609966623e-01, -2.929229321097428e-02, -3.203659768273801e-02, -2.929229321097428e-02, -3.203659768273796e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -2.649057384249100e-02, -2.746688065382774e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_hjs_b88_v2_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_hjs_b88_v2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.453980743784324e-08, 0.000000000000000e+00, -1.453989065689534e-08, -1.453972392007698e-08, 0.000000000000000e+00, -1.453982992248741e-08, -1.453928007092104e-08, 0.000000000000000e+00, -1.453924338278982e-08, -1.454022779668674e-08, 0.000000000000000e+00, -1.454044992559881e-08, -1.453976654725430e-08, 0.000000000000000e+00, -1.453983764989781e-08, -1.453976654725430e-08, 0.000000000000000e+00, -1.453983764989781e-08, -1.920980049737523e-05, 0.000000000000000e+00, -1.921709446708176e-05, -1.921034219693702e-05, 0.000000000000000e+00, -1.921818288998101e-05, -1.922901056931515e-05, 0.000000000000000e+00, -1.923346261044727e-05, -1.918427795712561e-05, 0.000000000000000e+00, -1.919006025515377e-05, -1.922019096140091e-05, 0.000000000000000e+00, -1.920495433774953e-05, -1.922019096140091e-05, 0.000000000000000e+00, -1.920495433774953e-05, -1.193356868275477e-02, 0.000000000000000e+00, -1.193980574969088e-02, -1.194174225253399e-02, 0.000000000000000e+00, -1.194827132273511e-02, -1.209376800319323e-02, 0.000000000000000e+00, -1.210518785163268e-02, -1.176056446668148e-02, 0.000000000000000e+00, -1.176219258760123e-02, -1.187177763170775e-02, 0.000000000000000e+00, -1.165993190534217e-02, -1.187177763170775e-02, 0.000000000000000e+00, -1.165993190534217e-02, -1.578569403001711e+00, 0.000000000000000e+00, -1.427741145347776e+00, -1.548793368194294e+00, 0.000000000000000e+00, -1.379624797626010e+00, -6.922170724615685e-03, 0.000000000000000e+00, -6.472754835979358e-03, -3.100649312040912e+00, 0.000000000000000e+00, -2.966757813267613e+00, -1.349097914160055e+00, 0.000000000000000e+00, -7.482649768038300e+00, -1.349097914160057e+00, 0.000000000000000e+00, -7.482649768038264e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.163671807060746e+02, 0.000000000000000e+00, -1.006076902525679e+02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -4.375942490264506e-06, 0.000000000000000e+00, -4.379881060811984e-06, -4.378993871911680e-06, 0.000000000000000e+00, -4.382833251762456e-06, -4.376066296716625e-06, 0.000000000000000e+00, -4.379949817980685e-06, -4.378684870260846e-06, 0.000000000000000e+00, -4.382632010076819e-06, -4.377539262111744e-06, 0.000000000000000e+00, -4.381368469004017e-06, -4.377539262111744e-06, 0.000000000000000e+00, -4.381368469004017e-06, -1.464701657318245e-04, 0.000000000000000e+00, -1.464965195537257e-04, -1.434001004683975e-04, 0.000000000000000e+00, -1.435285933459821e-04, -1.468776039342156e-04, 0.000000000000000e+00, -1.468232765019642e-04, -1.442398394967322e-04, 0.000000000000000e+00, -1.441195064421095e-04, -1.443477931854814e-04, 0.000000000000000e+00, -1.448921393527426e-04, -1.443477931854814e-04, 0.000000000000000e+00, -1.448921393527426e-04, -2.403020016574340e-02, 0.000000000000000e+00, -2.429793935895006e-02, -2.087966677907252e-02, 0.000000000000000e+00, -2.089523973721542e-02, -3.398933258968259e-02, 0.000000000000000e+00, -3.007400799106504e-02, -3.489645741221099e-02, 0.000000000000000e+00, -3.062354675266522e-02, -2.114305130176194e-02, 0.000000000000000e+00, -2.565096721347357e-02, -2.114305130176196e-02, 0.000000000000000e+00, -2.565096721347357e-02, -7.762725022639239e+00, 0.000000000000000e+00, -7.620538954668342e+00, -1.188874753548216e+00, 0.000000000000000e+00, -1.171262069383295e+00, -1.044145653228676e+01, 0.000000000000000e+00, -9.041508011024170e+00, -2.668731187076581e-04, 0.000000000000000e+00, -2.673969018581902e-04, -5.728045606718373e+00, 0.000000000000000e+00, -5.339293758612528e+00, -5.728045606718373e+00, 0.000000000000000e+00, -5.339293758612528e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -3.117691683406827e+01, 0.000000000000000e+00, -3.033997412396435e+01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -3.030902119831392e-02, 0.000000000000000e+00, -2.988888439144902e-02, -2.929063162962629e-02, 0.000000000000000e+00, -2.889461540882763e-02, -2.961141999157604e-02, 0.000000000000000e+00, -2.921025964592689e-02, -2.990915137362066e-02, 0.000000000000000e+00, -2.949655341080877e-02, -2.975705809852485e-02, 0.000000000000000e+00, -2.935019093703378e-02, -2.975705809852485e-02, 0.000000000000000e+00, -2.935019093703378e-02, -3.433711124766040e-02, 0.000000000000000e+00, -3.390586010629975e-02, -4.148910939381643e-02, 0.000000000000000e+00, -4.094243488302289e-02, -3.869688683437351e-02, 0.000000000000000e+00, -3.818989937096438e-02, -3.647087285225978e-02, 0.000000000000000e+00, -3.602100363730130e-02, -3.761368876363886e-02, 0.000000000000000e+00, -3.712617442214582e-02, -3.761368876363886e-02, 0.000000000000000e+00, -3.712617442214582e-02, -1.723579493342784e-02, 0.000000000000000e+00, -1.719243093899199e-02, -5.731120894265123e-01, 0.000000000000000e+00, -5.638878947121306e-01, -3.413345480288671e-01, 0.000000000000000e+00, -3.328614262333119e-01, -1.576519572619407e-01, 0.000000000000000e+00, -1.547567785803036e-01, -2.313235058510522e-01, 0.000000000000000e+00, -2.323854446063340e-01, -2.313235058510516e-01, 0.000000000000000e+00, -2.323854446063345e-01, -5.733637042083274e-02, 0.000000000000000e+00, -5.620793357976441e-02, -1.196650078045279e+02, 0.000000000000000e+00, -1.175070748848398e+02, -5.366224064159918e+01, 0.000000000000000e+00, -4.944596817670688e+01, -2.019512159798901e-01, 0.000000000000000e+00, -1.924548867087704e-01, -1.769084164500720e+01, 0.000000000000000e+00, -1.617905676535938e+01, -1.769084164500721e+01, 0.000000000000000e+00, -1.617905676535938e+01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -2.045558570051646e+01, 0.000000000000000e+00, -1.948538410045986e+01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
