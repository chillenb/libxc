
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_hjs_pbe_sol_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_hjs_pbe_sol", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.041211819566001e+01, -2.041215673131582e+01, -2.041237545564573e+01, -2.041180114935535e+01, -2.041209533415135e+01, -2.041209533415135e+01, -3.309758570059586e+00, -3.309737971613317e+00, -3.309344586382251e+00, -3.310669109319072e+00, -3.309815407164647e+00, -3.309815407164647e+00, -6.061521029354775e-01, -6.059232413870926e-01, -6.018184915037674e-01, -6.065957262564696e-01, -6.073484825005564e-01, -6.073484825005564e-01, -1.391225750353705e-01, -1.403332585281408e-01, -7.121148508574131e-01, -1.094596014150875e-01, -1.352221418330184e-01, -1.352221418330184e-01, -2.979715024120980e-05, -3.513525550331597e-05, -1.228981546536504e-02, -5.476136801241317e-06, -1.633396256023008e-05, -1.633396256023031e-05, -4.886702754720109e+00, -4.886703634674372e+00, -4.886710505496533e+00, -4.886711149918126e+00, -4.886698903840411e+00, -4.886698903840411e+00, -1.938390638011353e+00, -1.949164624307781e+00, -1.936383813192006e+00, -1.945872495772460e+00, -1.945366959012711e+00, -1.945366959012711e+00, -5.047934595144745e-01, -5.377007750302651e-01, -4.655318183802712e-01, -4.716647397219505e-01, -5.124736814601335e-01, -5.124736814601336e-01, -7.433963569486406e-02, -1.529812050549159e-01, -6.682820899674546e-02, -1.738084850083487e+00, -8.668971936624406e-02, -8.668971936624406e-02, -2.512161671904959e-06, -5.112858711176661e-06, -2.293042157604675e-06, -3.511764228875909e-02, -4.779440519988606e-06, -4.779440519989525e-06, -4.894511366825351e-01, -4.896106685263256e-01, -4.895527091845727e-01, -4.895018686039620e-01, -4.895264971961032e-01, -4.895264971961032e-01, -4.736891040847956e-01, -4.281773310458074e-01, -4.404510682591453e-01, -4.529572578389214e-01, -4.463883840621853e-01, -4.463883840621853e-01, -5.671324780749953e-01, -1.935814099125412e-01, -2.275371254169913e-01, -2.885057326866572e-01, -2.549480109076768e-01, -2.549480109076768e-01, -3.902425268044157e-01, -1.091409681641609e-02, -2.320909842108230e-02, -2.697826703839563e-01, -5.137510087208717e-02, -5.137510087208722e-02, -9.114492442913121e-05, -9.701892565564449e-08, -9.055836356278423e-07, -4.671898280278790e-02, -3.671745802833621e-06, -3.671745802806056e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_hjs_pbe_sol_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_hjs_pbe_sol", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.556897498518927e+01, -2.556894390009616e+01, -2.556908186304474e+01, -2.556902152921467e+01, -2.556940793747835e+01, -2.556949320738434e+01, -2.556820134108750e+01, -2.556795516649952e+01, -2.556903952970402e+01, -2.556855830886794e+01, -2.556903952970402e+01, -2.556855830886794e+01, -4.069506848658670e+00, -4.069635062999885e+00, -4.069542878844280e+00, -4.069674843753807e+00, -4.070454915001327e+00, -4.070718167996331e+00, -4.069540938378113e+00, -4.069801986361011e+00, -4.068743294257322e+00, -4.070688188906084e+00, -4.068743294257322e+00, -4.070688188906084e+00, -7.176205438008835e-01, -7.226428278916549e-01, -7.157556128037103e-01, -7.219050310062950e-01, -6.914165315180943e-01, -6.833451073210470e-01, -6.927817451242991e-01, -6.953857703915496e-01, -7.315981528043063e-01, -6.534361578657404e-01, -7.315981528043063e-01, -6.534361578657404e-01, -1.319535398947548e-01, -1.389567110426899e-01, -1.341082237243085e-01, -1.424047399423209e-01, -8.341988105823323e-01, -8.731760797098932e-01, -1.004912988027474e-01, -1.020892402216214e-01, -1.399828191718465e-01, -7.724633966909970e-02, -1.399828191718465e-01, -7.724633966909952e-02, -5.465557882857722e-05, -6.649064243129490e-05, -6.354412676143697e-05, -7.954179120722836e-05, -1.999439574826321e-02, -2.247943961668225e-02, -1.126818841236650e-05, -1.070754118475205e-05, -3.803387914534666e-05, -6.753766796807559e-06, -3.803387914534824e-05, -6.753766796808381e-06, -6.234850607824045e+00, -6.233298201822561e+00, -6.237113391562992e+00, -6.235484265357363e+00, -6.234977806885547e+00, -6.233374385708584e+00, -6.236919409608083e+00, -6.235360324218927e+00, -6.236008622508913e+00, -6.234396101240260e+00, -6.236008622508913e+00, -6.234396101240260e+00, -2.176493053575009e+00, -2.176373251337964e+00, -2.195482516790556e+00, -2.194808620318832e+00, -2.156202174687223e+00, -2.161927482179984e+00, -2.172570571411507e+00, -2.178476937074254e+00, -2.202362024446312e+00, -2.188155694107607e+00, -2.202362024446312e+00, -2.188155694107607e+00, -6.418712023337103e-01, -6.400853769517276e-01, -7.202075700123022e-01, -7.207857770858985e-01, -5.732077504805219e-01, -5.984218959297517e-01, -6.175999549537733e-01, -6.397650759973825e-01, -6.728519520564323e-01, -6.355722825102700e-01, -6.728519520564324e-01, -6.355722825102702e-01, -7.962598569317350e-02, -7.978624059811494e-02, -1.414242486188096e-01, -1.421647198015279e-01, -7.221991264356833e-02, -7.547754735539175e-02, -2.290820965450982e+00, -2.289801517695272e+00, -8.406800457403751e-02, -8.285104728320941e-02, -8.406800457403751e-02, -8.285104728320941e-02, -4.724659865020731e-06, -5.305998137588364e-06, -1.002340675590510e-05, -1.049087762153285e-05, -4.165764377416537e-06, -4.951643170402829e-06, -4.657291109324928e-02, -4.722823171186629e-02, -4.439466800151368e-06, -1.158505104357103e-05, -4.439466800150995e-06, -1.158505104359240e-05, -6.653059070382007e-01, -6.681751988457817e-01, -6.568465806836012e-01, -6.597683328390711e-01, -6.598109041715674e-01, -6.627328727579175e-01, -6.622873520420004e-01, -6.651577701694693e-01, -6.610488040572383e-01, -6.639441300251059e-01, -6.610488040572383e-01, -6.639441300251059e-01, -6.471457814895900e-01, -6.494880478448178e-01, -5.129375099128672e-01, -5.157605271914625e-01, -5.504937868049321e-01, -5.535990228628950e-01, -5.893304812674506e-01, -5.917348646424924e-01, -5.696973870430392e-01, -5.721760060045709e-01, -5.696973870430392e-01, -5.721760060045709e-01, -7.565199739917104e-01, -7.582133776744452e-01, -1.852107373129350e-01, -1.865031405613347e-01, -2.326123593823250e-01, -2.357550619877649e-01, -3.429362683646188e-01, -3.453528630418706e-01, -2.835892565804877e-01, -2.836236173544872e-01, -2.835892565804878e-01, -2.836236173544873e-01, -4.663502324220128e-01, -4.705758485133362e-01, -1.929679086513136e-02, -1.959490816816918e-02, -3.458188525036505e-02, -3.640699979125303e-02, -3.327409318946141e-01, -3.392656675515864e-01, -5.832636089425156e-02, -5.870282134736807e-02, -5.832636089425176e-02, -5.870282134736810e-02, -1.812258564953316e-04, -2.054975895943129e-04, -1.933794272862479e-07, -1.947085716583123e-07, -1.630825532190284e-06, -1.962613437971818e-06, -5.477539576012867e-02, -5.584587640802235e-02, -3.770500036792839e-06, -8.894423642670931e-06, -3.770500036654712e-06, -8.894423642670062e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_hjs_pbe_sol_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_hjs_pbe_sol", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-8.445610518891538e-09, 0.000000000000000e+00, -8.445655884159889e-09, -8.445524734143490e-09, 0.000000000000000e+00, -8.445593550232448e-09, -8.445197526761719e-09, 0.000000000000000e+00, -8.445139461113806e-09, -8.446167676761468e-09, 0.000000000000000e+00, -8.446375586872840e-09, -8.445562019894524e-09, 0.000000000000000e+00, -8.445842624934792e-09, -8.445562019894524e-09, 0.000000000000000e+00, -8.445842624934792e-09, -1.165264588453316e-05, 0.000000000000000e+00, -1.165494775444539e-05, -1.165270884126653e-05, 0.000000000000000e+00, -1.165520687635601e-05, -1.165621219755858e-05, 0.000000000000000e+00, -1.165685788752205e-05, -1.164261511496555e-05, 0.000000000000000e+00, -1.164379491341620e-05, -1.165978414055196e-05, 0.000000000000000e+00, -1.164595434600889e-05, -1.165978414055196e-05, 0.000000000000000e+00, -1.164595434600889e-05, -7.743660125675567e-03, 0.000000000000000e+00, -7.691643411439055e-03, -7.767278224228442e-03, 0.000000000000000e+00, -7.703762321413500e-03, -8.075286815346795e-03, 0.000000000000000e+00, -8.150119124576107e-03, -7.885946117839144e-03, 0.000000000000000e+00, -7.865339240996586e-03, -7.558171406634333e-03, 0.000000000000000e+00, -8.138543406894128e-03, -7.558171406634333e-03, 0.000000000000000e+00, -8.138543406894128e-03, -1.061711132108784e+00, 0.000000000000000e+00, -9.656176091429396e-01, -1.044879315592643e+00, 0.000000000000000e+00, -9.342448536814238e-01, -4.485506512090256e-03, 0.000000000000000e+00, -4.066005443409077e-03, -1.725481306826613e+00, 0.000000000000000e+00, -1.663920645050450e+00, -9.108624396132552e-01, 0.000000000000000e+00, -2.833979008781942e+00, -9.108624396132583e-01, 0.000000000000000e+00, -2.833979008781942e+00, -7.553033280528502e-03, 0.000000000000000e+00, -1.037799256572592e-02, -1.024306022278551e-02, 0.000000000000000e+00, -1.472626490939725e-02, -2.634558930783268e+00, 0.000000000000000e+00, -2.812044085289608e+00, -4.076377197115930e-04, 0.000000000000000e+00, -3.607127197632599e-04, -4.039602381335881e-03, 0.000000000000000e+00, -4.333023544009881e-04, -4.039602381343853e-03, 0.000000000000000e+00, -4.333023544070597e-04, -2.443573162741784e-06, 0.000000000000000e+00, -2.445867921412591e-06, -2.442914813549528e-06, 0.000000000000000e+00, -2.445231774309429e-06, -2.443521737733575e-06, 0.000000000000000e+00, -2.445835418821388e-06, -2.442957053885724e-06, 0.000000000000000e+00, -2.445257679878606e-06, -2.443247806743574e-06, 0.000000000000000e+00, -2.445550649215475e-06, -2.443247806743574e-06, 0.000000000000000e+00, -2.445550649215475e-06, -9.934239439788044e-05, 0.000000000000000e+00, -9.936087377568624e-05, -9.704053997002917e-05, 0.000000000000000e+00, -9.713270614079219e-05, -1.002174363348970e-04, 0.000000000000000e+00, -1.000035897583293e-04, -9.822071784064809e-05, 0.000000000000000e+00, -9.796907788444792e-05, -9.734960820431125e-05, 0.000000000000000e+00, -9.809691032137299e-05, -9.734960820431125e-05, 0.000000000000000e+00, -9.809691032137299e-05, -1.399829388200464e-02, 0.000000000000000e+00, -1.414717825946442e-02, -1.052206978037947e-02, 0.000000000000000e+00, -1.050486623021167e-02, -2.026578592465546e-02, 0.000000000000000e+00, -1.770860531031308e-02, -1.799656649758907e-02, 0.000000000000000e+00, -1.584340744324081e-02, -1.209354634036947e-02, 0.000000000000000e+00, -1.474271198809208e-02, -1.209354634036948e-02, 0.000000000000000e+00, -1.474271198809207e-02, -2.401749731980909e+00, 0.000000000000000e+00, -2.424913967828894e+00, -7.393606838420288e-01, 0.000000000000000e+00, -7.305553702169958e-01, -2.762415608265561e+00, 0.000000000000000e+00, -2.642801336220255e+00, -1.353334229460720e-04, 0.000000000000000e+00, -1.355790896732071e-04, -2.409758405497863e+00, 0.000000000000000e+00, -2.654291163818311e+00, -2.409758405497863e+00, 0.000000000000000e+00, -2.654291163818311e+00, -1.130656427998724e-04, 0.000000000000000e+00, -1.215469451865013e-04, -3.962087473619915e-04, 0.000000000000000e+00, -3.982550979749794e-04, -4.371791158784170e-04, 0.000000000000000e+00, -6.707669725349536e-04, -4.081753459025447e+00, 0.000000000000000e+00, -3.950751351562705e+00, -2.451520108467031e-04, 0.000000000000000e+00, -1.438508633248230e-03, -2.451520108538130e-04, 0.000000000000000e+00, -1.438508633280680e-03, -1.434663418030647e-02, 0.000000000000000e+00, -1.413202358336739e-02, -1.468363691803547e-02, 0.000000000000000e+00, -1.446348760963068e-02, -1.457434976998459e-02, 0.000000000000000e+00, -1.435532210361483e-02, -1.447709390734167e-02, 0.000000000000000e+00, -1.426106536943600e-02, -1.452660678711938e-02, 0.000000000000000e+00, -1.430906139334348e-02, -1.452660678711938e-02, 0.000000000000000e+00, -1.430906139334348e-02, -1.590844114357113e-02, 0.000000000000000e+00, -1.570563540092476e-02, -2.650624260137230e-02, 0.000000000000000e+00, -2.611010864246642e-02, -2.319080013565503e-02, 0.000000000000000e+00, -2.282561540437645e-02, -2.013310560180779e-02, 0.000000000000000e+00, -1.986480178834282e-02, -2.166502183756139e-02, 0.000000000000000e+00, -2.136251370292276e-02, -2.166502183756139e-02, 0.000000000000000e+00, -2.136251370292276e-02, -8.764254938529266e-03, 0.000000000000000e+00, -8.711067965321836e-03, -3.886922852282652e-01, 0.000000000000000e+00, -3.829733973158904e-01, -2.362963870327703e-01, 0.000000000000000e+00, -2.304433357190219e-01, -1.012159881466815e-01, 0.000000000000000e+00, -9.924138905957776e-02, -1.564252339194571e-01, 0.000000000000000e+00, -1.569723694111225e-01, -1.564252339194575e-01, 0.000000000000000e+00, -1.569723694111223e-01, -3.668401948225632e-02, 0.000000000000000e+00, -3.584117749737281e-02, -2.364855465947935e+00, 0.000000000000000e+00, -2.387137555674970e+00, -3.020290639934367e+00, 0.000000000000000e+00, -3.135024470359041e+00, -1.234041889316112e-01, 0.000000000000000e+00, -1.169366145365980e-01, -4.012286530295429e+00, 0.000000000000000e+00, -4.516111111749425e+00, -4.012286530295441e+00, 0.000000000000000e+00, -4.516111111749403e+00, -3.903164862557915e-02, 0.000000000000000e+00, -4.755372449767725e-02, -1.223542781238578e-06, 0.000000000000000e+00, -2.191129241948609e-06, -3.007911276613739e-05, 0.000000000000000e+00, -4.490292959779772e-05, -4.445361046188912e+00, 0.000000000000000e+00, -4.352076973997154e+00, -3.723495948626820e-04, 0.000000000000000e+00, -9.135572561170482e-04, -3.723495948467857e-04, 0.000000000000000e+00, -9.135572561238731e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
