
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_b88_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_b88", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.106029102236494e+01, -2.106031434350500e+01, -2.106049623160526e+01, -2.106011278651453e+01, -2.106030267041711e+01, -2.106030267041711e+01, -3.493341716706759e+00, -3.493312077286045e+00, -3.492641685565761e+00, -3.494537803239529e+00, -3.493341353451772e+00, -3.493341353451772e+00, -7.019298733680772e-01, -7.019817566498803e-01, -7.054456012862109e-01, -7.097241267822222e-01, -7.019449412710782e-01, -7.019449412710782e-01, -2.190061365482116e-01, -2.196575751414341e-01, -8.172601668652750e-01, -1.896025797395923e-01, -2.191704890604562e-01, -2.191704890604562e-01, -6.345650691902260e-02, -6.418352477692391e-02, -1.143339219727608e-01, -5.745476729477336e-02, -6.355949299072441e-02, -6.355949299072441e-02, -5.057956248093589e+00, -5.057279276589593e+00, -5.057893569362503e+00, -5.057367079160105e+00, -5.057599769773719e+00, -5.057599769773719e+00, -2.124426921597668e+00, -2.134000325164477e+00, -2.125988636635173e+00, -2.133424267270656e+00, -2.128933456995206e+00, -2.128933456995206e+00, -5.771852075199891e-01, -5.972747694853683e-01, -5.498676123790652e-01, -5.498540707736298e-01, -5.948272204623254e-01, -5.948272204623254e-01, -1.674794636779501e-01, -2.440728040050168e-01, -1.630652399448284e-01, -1.816969864818394e+00, -1.738101414597033e-01, -1.738101414597033e-01, -5.637399249113392e-02, -5.789600366328398e-02, -4.427916114401038e-02, -1.289266161062788e-01, -5.256552587980375e-02, -5.256552587980376e-02, -5.592663125151680e-01, -5.630202090183817e-01, -5.617302907998899e-01, -5.606902474760906e-01, -5.612144330683343e-01, -5.612144330683343e-01, -5.401870106199461e-01, -5.195995700877732e-01, -5.263520846138540e-01, -5.319687104614940e-01, -5.289985241822569e-01, -5.289985241822569e-01, -6.273520931794641e-01, -2.857777311030996e-01, -3.174463566433718e-01, -3.687237321097768e-01, -3.407927992062581e-01, -3.407927992062580e-01, -4.716001104667644e-01, -1.144955198640478e-01, -1.271880030723307e-01, -3.384391308749460e-01, -1.427001175953277e-01, -1.427001175953277e-01, -6.971059620371929e-02, -4.117819190843105e-02, -4.719581215077524e-02, -1.357681197788057e-01, -4.715566006606257e-02, -4.715566006606257e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_b88_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_b88", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.521118066620725e+01, -2.521126320705065e+01, -2.521164564316903e+01, -2.521029373567576e+01, -2.521122407670889e+01, -2.521122407670889e+01, -4.058034062746785e+00, -4.058067480967254e+00, -4.059153468116192e+00, -4.058142889980141e+00, -4.058068537315983e+00, -4.058068537315983e+00, -7.593559988683820e-01, -7.582041166007344e-01, -7.285310325617217e-01, -7.347532796318069e-01, -7.589373959367359e-01, -7.589373959367359e-01, -1.997747841121068e-01, -2.027910513993308e-01, -9.229739416778918e-01, -1.444739989026773e-01, -2.006796674263269e-01, -2.006796674263269e-01, -2.191020651313796e-02, -2.249844502180378e-02, -5.890428386791356e-02, -1.538353451046471e-02, -2.227289189303159e-02, -2.227289189303159e-02, -6.202457997034690e+00, -6.204906497008692e+00, -6.202708729566975e+00, -6.204612553161903e+00, -6.203712678927673e+00, -6.203712678927673e+00, -2.198543831252392e+00, -2.216122389617497e+00, -2.189403735972056e+00, -2.203089183779191e+00, -2.222422494419603e+00, -2.222422494419603e+00, -6.812773614893139e-01, -7.657465200989885e-01, -6.449140122797632e-01, -6.920611929597260e-01, -7.108176540842036e-01, -7.108176540842036e-01, -1.105003858007349e-01, -1.997210600512577e-01, -1.086336580715614e-01, -2.328864036162059e+00, -1.242638991072615e-01, -1.242638991072615e-01, -1.500051046619943e-02, -1.602989489897802e-02, -1.216684762968536e-02, -7.445079414414819e-02, -1.457352665063260e-02, -1.457352665063259e-02, -7.364838243355768e-01, -7.249299620264126e-01, -7.289033398687527e-01, -7.320937762285359e-01, -7.304839396089143e-01, -7.304839396089143e-01, -7.142295265690916e-01, -5.779087944467541e-01, -6.137560419458655e-01, -6.495377317779177e-01, -6.311053670577124e-01, -6.311053670577125e-01, -8.017354220683829e-01, -2.520582603690644e-01, -3.027760298440953e-01, -3.998573302625277e-01, -3.475254234213891e-01, -3.475254234213890e-01, -5.196391697272710e-01, -5.670742302577954e-02, -6.977413582363530e-02, -3.832053303294378e-01, -9.110833902017583e-02, -9.110833902017583e-02, -2.475367383222104e-02, -8.353202386029830e-03, -1.114977767405391e-02, -8.683874088281485e-02, -1.281128054696657e-02, -1.281128054696657e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_b88_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_b88", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-7.264881446623766e-09, -7.264850714387218e-09, -7.264604110878167e-09, -7.265109564988615e-09, -7.264866154807646e-09, -7.264866154807646e-09, -9.598897668675592e-06, -9.599207517201969e-06, -9.606147560336592e-06, -9.586065618027841e-06, -9.598893467662423e-06, -9.598893467662423e-06, -6.004896936681526e-03, -6.007269335834181e-03, -6.029592593629266e-03, -5.876846062716732e-03, -6.005866877313952e-03, -6.005866877313952e-03, -7.180275144264815e-01, -7.010783931376208e-01, -3.220159107974240e-03, -1.628639166752453e+00, -7.131476696234932e-01, -7.131476696234932e-01, -2.799346062162294e+03, -2.455347595267430e+03, -3.727312793912010e+01, -2.074118860450543e+04, -2.557605418493858e+03, -2.557605418493858e+03, -2.193506226833502e-06, -2.195020836474038e-06, -2.193648641730718e-06, -2.194826465169633e-06, -2.194299330533289e-06, -2.194299330533289e-06, -7.322002197939780e-05, -7.176799006757593e-05, -7.322178588653176e-05, -7.208602489669258e-05, -7.223691502135520e-05, -7.223691502135520e-05, -1.286948858596995e-02, -1.156536249264159e-02, -1.562624790574681e-02, -1.588251063533331e-02, -1.141451549037695e-02, -1.141451549037695e-02, -3.606831932235063e+00, -5.308245512017415e-01, -3.919604831046843e+00, -1.350083215532882e-04, -2.596790787356162e+00, -2.596790787356162e+00, -2.338356109326816e+04, -1.594794757051922e+04, -4.910365021615726e+04, -1.512216659021699e+01, -2.325577296993689e+04, -2.325577296993690e+04, -1.558833826657857e-02, -1.470806536822961e-02, -1.497329220798839e-02, -1.521153371750056e-02, -1.508825271703297e-02, -1.508825271703297e-02, -1.806088412853501e-02, -1.979268643818587e-02, -1.861807086937615e-02, -1.790560187611805e-02, -1.824526084769556e-02, -1.824526084769556e-02, -9.475100607578755e-03, -2.567926991942974e-01, -1.559474678105554e-01, -7.878217711308752e-02, -1.115870333186423e-01, -1.115870333186424e-01, -2.925812331936099e-02, -4.362793459712841e+01, -1.910929048167417e+01, -1.094280131644888e-01, -7.448615306229804e+00, -7.448615306229807e+00, -1.641127912655180e+03, -7.747183593412756e+05, -1.166795395445151e+05, -9.046671099742589e+00, -4.128136612622677e+04, -4.128136612622692e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
