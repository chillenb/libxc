
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_wpbeh_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_wpbeh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.092869433391601e+01, -2.092871830992616e+01, -2.092889808764273e+01, -2.092853987305806e+01, -2.092871715843869e+01, -2.092871715843869e+01, -3.478374995727521e+00, -3.478331360511146e+00, -3.477408004295750e+00, -3.479674124442356e+00, -3.478406527360923e+00, -3.478406527360923e+00, -7.010252139737163e-01, -7.010778726286311e-01, -7.033571128622166e-01, -7.081827810856453e-01, -7.063467908120374e-01, -7.063467908120374e-01, -2.153068241529091e-01, -2.162673154875061e-01, -8.086774075386067e-01, -1.825940146273892e-01, -1.954935116619410e-01, -1.954935116619410e-01, -1.009364492159591e-02, -1.062397930885749e-02, -5.842591871654541e-02, -5.829395455191439e-03, -7.325081577454441e-03, -7.325081577454441e-03, -5.024253467487549e+00, -5.023526688621948e+00, -5.024231239425101e+00, -5.023589433923854e+00, -5.023878581992512e+00, -5.023878581992512e+00, -2.124303072049198e+00, -2.134486969705808e+00, -2.124866754433259e+00, -2.133925601439169e+00, -2.129572640535337e+00, -2.129572640535337e+00, -5.808920170250386e-01, -6.013048296117074e-01, -5.423332138274148e-01, -5.358846669735676e-01, -5.862011531025102e-01, -5.862011531025102e-01, -1.385456178755584e-01, -2.318564429020826e-01, -1.294124885928224e-01, -1.809158413711162e+00, -1.551082672950994e-01, -1.551082672950994e-01, -4.497766533089080e-03, -5.698749790631941e-03, -4.357538014601935e-03, -9.081359922258610e-02, -5.249482287861951e-03, -5.249482287861951e-03, -5.500699182492251e-01, -5.525433461916768e-01, -5.516180937875481e-01, -5.508914046488159e-01, -5.512488606701417e-01, -5.512488606701417e-01, -5.336345927803989e-01, -5.131443138743392e-01, -5.180669036159423e-01, -5.222834000684358e-01, -5.198311276038201e-01, -5.198311276038201e-01, -6.314674916366207e-01, -2.758598463748829e-01, -3.100511909864917e-01, -3.678783261335613e-01, -3.367637080834580e-01, -3.367637080834579e-01, -4.736371185893113e-01, -5.600751507082469e-02, -7.514700206788850e-02, -3.435147934348290e-01, -1.114457715109829e-01, -1.114457715109829e-01, -1.424523241309383e-02, -1.523312327829393e-03, -3.197499973764274e-03, -1.056386687264913e-01, -4.857413164348868e-03, -4.857413164348863e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_wpbeh_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_wpbeh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.481506228121564e+01, -2.481517212658999e+01, -2.481561664231470e+01, -2.481398330931861e+01, -2.481484535506346e+01, -2.481484535506346e+01, -3.969898526529307e+00, -3.969947300120146e+00, -3.971176253402946e+00, -3.969798567830354e+00, -3.970052705269190e+00, -3.970052705269190e+00, -7.561747528380847e-01, -7.554571601334595e-01, -7.428635548863838e-01, -7.485449477986786e-01, -7.469507975174483e-01, -7.469507975174483e-01, -1.985835418206981e-01, -2.002779813132683e-01, -8.814995124134232e-01, -1.838575367048566e-01, -1.855889414238412e-01, -1.855889414238411e-01, -1.345819322879455e-02, -1.416530574514332e-02, -7.566422597881237e-02, -7.772527273588585e-03, -9.766775436605922e-03, -9.766775436605922e-03, -6.149745145923555e+00, -6.153215121596428e+00, -6.149897998915671e+00, -6.152961375153764e+00, -6.151507433763958e+00, -6.151507433763958e+00, -2.235688730953625e+00, -2.249405232192285e+00, -2.229312476254833e+00, -2.241578883949815e+00, -2.246209100933745e+00, -2.246209100933745e+00, -6.751181393087666e-01, -7.738883914300501e-01, -6.203268749139207e-01, -6.796809339564447e-01, -6.902858748054590e-01, -6.902858748054590e-01, -1.567271626167171e-01, -2.223836825978669e-01, -1.480116537190781e-01, -2.333560228384628e+00, -1.653186430079194e-01, -1.653186430079194e-01, -5.997022044118773e-03, -7.598333054175923e-03, -5.810050686135913e-03, -1.080083492864190e-01, -6.999309717149268e-03, -6.999309717149268e-03, -7.253708204288049e-01, -7.124600209373300e-01, -7.171456075731529e-01, -7.209135715362717e-01, -7.190430105237413e-01, -7.190430105237413e-01, -7.079267264529868e-01, -5.549492142900728e-01, -5.868926324338352e-01, -6.327472579203328e-01, -6.081063275229444e-01, -6.081063275229444e-01, -8.096062899486915e-01, -2.541378736887600e-01, -2.995687934242383e-01, -3.929824706400025e-01, -3.484149554183562e-01, -3.484149554183562e-01, -5.110312544936418e-01, -7.342481921933536e-02, -9.193225155550912e-02, -3.782198630929698e-01, -1.282348489030316e-01, -1.282348489030316e-01, -1.899364321745844e-02, -2.031083103772524e-03, -4.263333298352366e-03, -1.227347777716013e-01, -6.476550885798490e-03, -6.476550885798484e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_wpbeh_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_wpbeh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-7.823044043201831e-09, -7.822969979693092e-09, -7.822592593617703e-09, -7.823695397405383e-09, -7.823124430346914e-09, -7.823124430346914e-09, -1.068969585273901e-05, -1.069005148847208e-05, -1.069717667466404e-05, -1.067661746732110e-05, -1.068909150396336e-05, -1.068909150396336e-05, -6.367599612100827e-03, -6.352384880394315e-03, -5.847387040059056e-03, -5.710378419766588e-03, -5.782421764517791e-03, -5.782421764517791e-03, -6.562403461824198e-01, -6.491132332414462e-01, -3.652775884629353e-03, -8.085956050717215e-01, -8.152426603743214e-01, -8.152426603743222e-01, 0.000000000000000e+00, 0.000000000000000e+00, -1.341341057213361e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -2.221817533641132e-06, -2.219610188553769e-06, -2.221713086103570e-06, -2.219764938465265e-06, -2.220704197671843e-06, -2.220704197671843e-06, -6.914057742316506e-05, -6.824070980515225e-05, -6.816592456759871e-05, -6.735109941497667e-05, -6.915387554894916e-05, -6.915387554894916e-05, -1.352448724948949e-02, -9.283512571524209e-03, -1.806067723676871e-02, -1.556218430188453e-02, -1.283510228396743e-02, -1.283510228396743e-02, -9.432580392957943e-01, -3.938428668895597e-01, -1.069865832709786e+00, -1.122080587769000e-04, -1.076894421479146e+00, -1.076894421479146e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -2.079478590400731e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.163357284817576e-02, -1.291571158776263e-02, -1.250715696125820e-02, -1.213479375563362e-02, -1.232498746208519e-02, -1.232498746208519e-02, -1.256634919107152e-02, -2.228609221355462e-02, -2.181896367768065e-02, -1.943813778127898e-02, -2.093176468119606e-02, -2.093176468119606e-02, -7.754527758084027e-03, -2.397060426914989e-01, -1.499852581325554e-01, -8.187425490787710e-02, -1.042526624160392e-01, -1.042526624160390e-01, -3.057387716599285e-02, -8.140508782906928e-01, -2.173506323322725e+00, -1.130504189719237e-01, -1.779819148217818e+00, -1.779819148217819e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.883103690495103e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
