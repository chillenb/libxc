
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_beefvdw_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_beefvdw", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.149545095248675e+01, -2.149547671178531e+01, -2.149566458090869e+01, -2.149527984301782e+01, -2.149547100379596e+01, -2.149547100379596e+01, -3.572840536233981e+00, -3.572793294461325e+00, -3.571789788404847e+00, -3.574214459943696e+00, -3.572870357528084e+00, -3.572870357528084e+00, -7.241339050606064e-01, -7.243427869883494e-01, -7.312141760130305e-01, -7.359700840065947e-01, -7.352386945100253e-01, -7.352386945100253e-01, -2.375759148342288e-01, -2.377584880623851e-01, -8.342670468123808e-01, -2.020054084051649e-01, -2.323879357483753e-01, -2.323879357483752e-01, -1.047703241453052e-02, -1.103260408125906e-02, -6.022245330116403e-02, -6.042212825642020e-03, -8.432763709264223e-03, -8.432763709068730e-03, -5.164643138390280e+00, -5.164035074591209e+00, -5.164625996859634e+00, -5.164088948280748e+00, -5.164328347614777e+00, -5.164328347614777e+00, -2.211896991847492e+00, -2.221159653122204e+00, -2.215595347876127e+00, -2.223816962945444e+00, -2.215183602827357e+00, -2.215183602827357e+00, -5.965295879207291e-01, -6.200516843509645e-01, -5.573672146947477e-01, -5.522363618660213e-01, -6.027219901756057e-01, -6.027219901756058e-01, -1.494570494044313e-01, -2.578430752474652e-01, -1.392647796483195e-01, -1.865898749916298e+00, -1.699751263094196e-01, -1.699751263094196e-01, -4.664942474916211e-03, -5.906603779492798e-03, -4.523080998936425e-03, -9.579942626164775e-02, -5.681628485390042e-03, -5.681628485328556e-03, -5.682627475681440e-01, -5.698610104027886e-01, -5.692875637067824e-01, -5.688207030469008e-01, -5.690527383931014e-01, -5.690527383931014e-01, -5.514654400496750e-01, -5.297920877019878e-01, -5.322782828825967e-01, -5.366951076688217e-01, -5.338321724089277e-01, -5.338321724089277e-01, -6.509539894442936e-01, -3.054258333505513e-01, -3.333463140435776e-01, -3.808857357348879e-01, -3.530630284152484e-01, -3.530630284152473e-01, -4.892376607829801e-01, -5.763309980320357e-02, -7.801463418208641e-02, -3.537650951811291e-01, -1.196644257001803e-01, -1.196644257001775e-01, -1.476399852914391e-02, -1.578870698577554e-03, -3.320235002499904e-03, -1.128886474892332e-01, -5.217697642026274e-03, -5.217697641935179e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_beefvdw_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_beefvdw", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.558894758051895e+01, -2.558891973772712e+01, -2.558909428935872e+01, -2.558902627965895e+01, -2.558949431222895e+01, -2.558961889181053e+01, -2.558783925282498e+01, -2.558750880827935e+01, -2.558903858104398e+01, -2.558830128638655e+01, -2.558903858104398e+01, -2.558830128638655e+01, -4.045741182225812e+00, -4.046263566870969e+00, -4.045826165945251e+00, -4.046377462637628e+00, -4.048179333867062e+00, -4.048819774474843e+00, -4.044752603288797e+00, -4.045445097547517e+00, -4.044836989592040e+00, -4.047600229272039e+00, -4.044836989592040e+00, -4.047600229272039e+00, -7.465621454347053e-01, -7.503164770853112e-01, -7.451849610137188e-01, -7.497154856558156e-01, -7.269188976704489e-01, -7.216317835419830e-01, -7.293633008632496e-01, -7.311091706337052e-01, -7.581874226035291e-01, -6.960334383813133e-01, -7.581874226035291e-01, -6.960334383813133e-01, -1.905058745818833e-01, -1.852358427756358e-01, -1.853626030900565e-01, -1.808075571637354e-01, -8.580409334754527e-01, -8.960963255287421e-01, -2.155542370911143e-01, -2.172283316559142e-01, -1.952955708926364e-01, -1.813114733775280e-01, -1.952955708926363e-01, -1.813114733775281e-01, -1.349839374633496e-02, -1.434167592239875e-02, -1.414271005387640e-02, -1.514767218608171e-02, -7.653361221418857e-02, -8.055456502573061e-02, -8.120148661836982e-03, -7.984984823469772e-03, -1.204459233661375e-02, -6.857058199477493e-03, -1.204459233630091e-02, -6.857058199577755e-03, -6.368317298302681e+00, -6.366668666568110e+00, -6.372542910773767e+00, -6.370751135310660e+00, -6.368544916356267e+00, -6.366803857800082e+00, -6.372170799770014e+00, -6.370512642065257e+00, -6.370487002422104e+00, -6.368719865573496e+00, -6.370487002422104e+00, -6.368719865573496e+00, -2.173397507768290e+00, -2.173289448761752e+00, -2.188935973605664e+00, -2.188347057284089e+00, -2.162858631694353e+00, -2.165526503270661e+00, -2.175505783575067e+00, -2.178555610723472e+00, -2.191919558987542e+00, -2.182409781116618e+00, -2.191919558987542e+00, -2.182409781116618e+00, -6.938942015648488e-01, -6.922369701717694e-01, -8.029193527607597e-01, -8.036957842870543e-01, -6.180559825781474e-01, -6.470964309196033e-01, -6.946450487074389e-01, -7.171037753666479e-01, -7.299409786421970e-01, -6.910906342030906e-01, -7.299409786309935e-01, -6.910906341970028e-01, -1.794907731302230e-01, -1.804256897876736e-01, -2.543103934188158e-01, -2.544411261246284e-01, -1.656514715300866e-01, -1.724068412398825e-01, -2.422193043208098e+00, -2.421166445023636e+00, -1.936272287616146e-01, -1.934910993360530e-01, -1.936272287616146e-01, -1.934910993360530e-01, -6.092429270320558e-03, -6.331502321903014e-03, -7.812960064744724e-03, -7.931239933693062e-03, -5.841559001433734e-03, -6.185827668931844e-03, -1.207286706851355e-01, -1.215305818723458e-01, -5.967086132975440e-03, -8.191991324660322e-03, -5.967086132924005e-03, -8.191991324586766e-03, -7.489265023827911e-01, -7.519302670569007e-01, -7.378317016358430e-01, -7.409475026210616e-01, -7.418738551533979e-01, -7.449596691989580e-01, -7.450767149426886e-01, -7.480856070865499e-01, -7.434864512748243e-01, -7.465309033746526e-01, -7.434864512748243e-01, -7.465309033746526e-01, -7.307367634630267e-01, -7.331672131588262e-01, -5.484773897323492e-01, -5.510335049469341e-01, -5.938406615407180e-01, -5.977306785946260e-01, -6.529949471348724e-01, -6.556567869510620e-01, -6.240219238317117e-01, -6.267663944939145e-01, -6.240219238317117e-01, -6.267663944939145e-01, -8.396267603231997e-01, -8.417123020614622e-01, -2.505571542469275e-01, -2.496455465695966e-01, -2.471005958069528e-01, -2.506971569606243e-01, -3.860024183170877e-01, -3.882081239288679e-01, -3.364969180987299e-01, -3.365766733026778e-01, -3.364969180987130e-01, -3.365766733026884e-01, -5.039634284638314e-01, -5.076896720718141e-01, -7.526829996425957e-02, -7.575529196481608e-02, -9.921274694944553e-02, -1.021651288425356e-01, -3.740651038150307e-01, -3.809582983372919e-01, -1.438037913914184e-01, -1.482676128120259e-01, -1.438037913914399e-01, -1.482676128120143e-01, -1.929110962612289e-02, -1.998707133913770e-02, -2.102681149789386e-03, -2.107449021521618e-03, -4.277954577853186e-03, -4.549817862598451e-03, -1.382658237116184e-01, -1.401767433790205e-01, -5.651473417403794e-03, -7.509338510659241e-03, -5.651473417278791e-03, -7.509338510536028e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_beefvdw_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_beefvdw", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.555391209586883e-08, 0.000000000000000e+00, -1.555398768573929e-08, -1.555365432076227e-08, 0.000000000000000e+00, -1.555380044841377e-08, -1.555286593418072e-08, 0.000000000000000e+00, -1.555266059882105e-08, -1.555577611958960e-08, 0.000000000000000e+00, -1.555637021452497e-08, -1.555375652250173e-08, 0.000000000000000e+00, -1.555491396995299e-08, -1.555375652250173e-08, 0.000000000000000e+00, -1.555491396995299e-08, -2.297615280071935e-05, 0.000000000000000e+00, -2.297385450113615e-05, -2.297542126163918e-05, 0.000000000000000e+00, -2.297307295844623e-05, -2.295711908724446e-05, 0.000000000000000e+00, -2.295176278814802e-05, -2.297391470835989e-05, 0.000000000000000e+00, -2.296875079992632e-05, -2.299292531487586e-05, 0.000000000000000e+00, -2.295086192885022e-05, -2.299292531487586e-05, 0.000000000000000e+00, -2.295086192885022e-05, -1.542490041509517e-02, 0.000000000000000e+00, -1.554361002013987e-02, -1.539525440277086e-02, 0.000000000000000e+00, -1.554275286123021e-02, -1.512166383127910e-02, 0.000000000000000e+00, -1.495212412794229e-02, -1.462215335568823e-02, 0.000000000000000e+00, -1.468044416161149e-02, -1.556410920857931e-02, 0.000000000000000e+00, -1.417545177759491e-02, -1.556410920857931e-02, 0.000000000000000e+00, -1.417545177759491e-02, -1.912194320043364e+00, 0.000000000000000e+00, -1.906682966954760e+00, -1.992408805660170e+00, 0.000000000000000e+00, -1.951750658426472e+00, -8.969734968693622e-03, 0.000000000000000e+00, -8.439733157471456e-03, -1.451281309784636e+00, 0.000000000000000e+00, -1.420917186228208e+00, -1.677657622612824e+00, 0.000000000000000e+00, -1.655684207775827e+00, -1.677657622612824e+00, 0.000000000000000e+00, -1.655684207775758e+00, -3.252972190735872e+00, 0.000000000000000e+00, -3.220289877308265e+00, -3.427402183387987e+00, 0.000000000000000e+00, -3.409759845029580e+00, -1.888117191443739e+00, 0.000000000000000e+00, -1.896409726086010e+00, -2.979923275508142e+00, 0.000000000000000e+00, -2.899037593718145e+00, -3.247654355964008e+00, 0.000000000000000e+00, -8.240794098748523e+00, -3.247654355964008e+00, 0.000000000000000e+00, -8.240794107144584e+00, -4.194221561896696e-06, 0.000000000000000e+00, -4.198545049546864e-06, -4.183577866869986e-06, 0.000000000000000e+00, -4.188257005368613e-06, -4.193649941047240e-06, 0.000000000000000e+00, -4.198205158288312e-06, -4.184519115556242e-06, 0.000000000000000e+00, -4.188860461889315e-06, -4.188773128936938e-06, 0.000000000000000e+00, -4.193390808878150e-06, -4.188773128936938e-06, 0.000000000000000e+00, -4.193390808878150e-06, -1.797787376910484e-04, 0.000000000000000e+00, -1.798089641417922e-04, -1.767497319089662e-04, 0.000000000000000e+00, -1.768912159719318e-04, -1.780357792803953e-04, 0.000000000000000e+00, -1.786561849394755e-04, -1.756027977540542e-04, 0.000000000000000e+00, -1.760973598091453e-04, -1.789239421988508e-04, 0.000000000000000e+00, -1.784362126188007e-04, -1.789239421988508e-04, 0.000000000000000e+00, -1.784362126188007e-04, -2.769345600402179e-02, 0.000000000000000e+00, -2.797936282846882e-02, -1.565197271476943e-02, 0.000000000000000e+00, -1.557946004018416e-02, -4.179376500908587e-02, 0.000000000000000e+00, -3.577921277309876e-02, -2.846507364205910e-02, 0.000000000000000e+00, -2.513484360974465e-02, -2.331935643724430e-02, 0.000000000000000e+00, -2.874752764168990e-02, -2.331935643724430e-02, 0.000000000000000e+00, -2.874752764168991e-02, -1.288409244222982e+00, 0.000000000000000e+00, -1.312952664944310e+00, -8.127651711578344e-01, 0.000000000000000e+00, -8.107738621573741e-01, -1.442900560025558e+00, 0.000000000000000e+00, -1.404791842673609e+00, -1.886884445366072e-04, 0.000000000000000e+00, -1.890046449000953e-04, -1.472912652284893e+00, 0.000000000000000e+00, -1.910488106711411e+00, -1.472912652284893e+00, 0.000000000000000e+00, -1.910488106711411e+00, -4.183333094519979e+00, 0.000000000000000e+00, -3.620820744495328e+00, -3.602123405257108e+00, 0.000000000000000e+00, -3.325758692948696e+00, -2.051768812985839e+01, 0.000000000000000e+00, -2.282427403117743e+01, -2.138289079489400e+00, 0.000000000000000e+00, -2.060596875161229e+00, -1.020326500363236e+01, 0.000000000000000e+00, -1.002172916969739e+01, -1.020326504540259e+01, 0.000000000000000e+00, -1.002172908713801e+01, -2.109230142552262e-02, 0.000000000000000e+00, -2.076789160139317e-02, -2.192169343057722e-02, 0.000000000000000e+00, -2.154878913174579e-02, -2.147609395531217e-02, 0.000000000000000e+00, -2.113365273016100e-02, -2.127567251028991e-02, 0.000000000000000e+00, -2.094902343331731e-02, -2.136228925209900e-02, 0.000000000000000e+00, -2.102975743013076e-02, -2.136228925209900e-02, 0.000000000000000e+00, -2.102975743013076e-02, -2.348349718742123e-02, 0.000000000000000e+00, -2.317557604318702e-02, -5.433274963470396e-02, 0.000000000000000e+00, -5.370203351422229e-02, -4.832658006405284e-02, 0.000000000000000e+00, -4.739417960824945e-02, -3.772083439293945e-02, 0.000000000000000e+00, -3.713913309118890e-02, -4.287579740362310e-02, 0.000000000000000e+00, -4.220734341592958e-02, -4.287579740362310e-02, 0.000000000000000e+00, -4.220734341592958e-02, -1.314459754354616e-02, 0.000000000000000e+00, -1.298788190967193e-02, -6.630495905835541e-01, 0.000000000000000e+00, -6.622891454259623e-01, -5.226208146303986e-01, 0.000000000000000e+00, -5.081044151888543e-01, -2.044529628008329e-01, 0.000000000000000e+00, -2.010141274361380e-01, -2.775647028555870e-01, 0.000000000000000e+00, -2.787277984593373e-01, -2.775647028556569e-01, 0.000000000000000e+00, -2.787277984592814e-01, -7.493945269962625e-02, 0.000000000000000e+00, -7.371963249935423e-02, -1.728411772046420e+00, 0.000000000000000e+00, -1.730235624168204e+00, -1.690823949056247e+00, 0.000000000000000e+00, -1.725930022491424e+00, -2.735168038709572e-01, 0.000000000000000e+00, -2.597108135806847e-01, -2.121794662014551e+00, 0.000000000000000e+00, -2.484519861703632e+00, -2.121794661998461e+00, 0.000000000000000e+00, -2.484519861703633e+00, -2.577462989116720e+00, 0.000000000000000e+00, -2.631136699250523e+00, -1.287171305396816e+01, 0.000000000000000e+00, -2.280022148806856e+01, -7.944070941447013e+00, 0.000000000000000e+00, -8.456959331761968e+00, -2.368134427792333e+00, 0.000000000000000e+00, -2.318156957768623e+00, -2.103575518934497e+01, 0.000000000000000e+00, -1.040400449383871e+01, -2.103575512209582e+01, 0.000000000000000e+00, -1.040400456019752e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
