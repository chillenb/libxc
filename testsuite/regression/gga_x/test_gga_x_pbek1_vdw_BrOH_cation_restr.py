
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_pbek1_vdw_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbek1_vdw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.096160179633425e+01, -2.096162838220852e+01, -2.096181575116989e+01, -2.096141878553639e+01, -2.096161694802117e+01, -2.096161694802117e+01, -3.478246457210313e+00, -3.478206698750546e+00, -3.477373078783788e+00, -3.479483303175103e+00, -3.478282633968608e+00, -3.478282633968608e+00, -6.997545443354720e-01, -6.998193036272222e-01, -7.035792445865391e-01, -7.082816020873276e-01, -7.063743721085209e-01, -7.063743721085209e-01, -2.206240448678579e-01, -2.213602127886788e-01, -8.072402125256102e-01, -1.907010419660913e-01, -2.019579348710548e-01, -2.019579348710548e-01, -1.118071545272149e-02, -1.176676838299247e-02, -6.355449252648152e-02, -6.460985127235861e-03, -8.116998900054307e-03, -8.116998900054307e-03, -5.037057824554291e+00, -5.036408609738189e+00, -5.037038851725021e+00, -5.036465549946793e+00, -5.036722646437839e+00, -5.036722646437839e+00, -2.126881285632235e+00, -2.136319080134649e+00, -2.129332277206111e+00, -2.137646224801289e+00, -2.130922652092861e+00, -2.130922652092861e+00, -5.813357535679545e-01, -6.028737897992300e-01, -5.423664457658181e-01, -5.374213063044639e-01, -5.869670976413534e-01, -5.869670976413534e-01, -1.493329507394058e-01, -2.399433237542651e-01, -1.399483076175122e-01, -1.813757216816473e+00, -1.642505248060467e-01, -1.642505248060467e-01, -4.985509785900250e-03, -6.316121326760449e-03, -4.828975754568678e-03, -9.907627262014715e-02, -5.817442612281372e-03, -5.817442612281372e-03, -5.507688154480299e-01, -5.539539459394506e-01, -5.528460933233540e-01, -5.519147465694876e-01, -5.523808982303572e-01, -5.523808982303572e-01, -5.339850598320610e-01, -5.122018294358606e-01, -5.178750973082047e-01, -5.234776879904537e-01, -5.203712224936216e-01, -5.203712224936216e-01, -6.331766722893974e-01, -2.830464338230245e-01, -3.155832662308362e-01, -3.673653055813438e-01, -3.388608316947627e-01, -3.388608316947627e-01, -4.727768713170237e-01, -6.099903585061620e-02, -8.179024512640544e-02, -3.429918749214956e-01, -1.207299905511222e-01, -1.207299905511222e-01, -1.576877670250344e-02, -1.688740877933064e-03, -3.544414761057821e-03, -1.147428957490910e-01, -5.383037302126102e-03, -5.383037302126098e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_pbek1_vdw_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbek1_vdw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.508517667721221e+01, -2.508527936365807e+01, -2.508570497455536e+01, -2.508417784883926e+01, -2.508498242334272e+01, -2.508498242334272e+01, -4.020358677441227e+00, -4.020410771042516e+00, -4.021714281166124e+00, -4.020212325309272e+00, -4.020518051743354e+00, -4.020518051743354e+00, -7.525032414276084e-01, -7.511153168550992e-01, -7.185279700063048e-01, -7.250292495689216e-01, -7.240801956177082e-01, -7.240801956177082e-01, -1.939643297397294e-01, -1.953087432911310e-01, -8.835804521566525e-01, -1.742047532286572e-01, -1.781783450791116e-01, -1.781783450791116e-01, -1.488212226898912e-02, -1.565847295370847e-02, -8.110034689660207e-02, -8.609957946020937e-03, -1.081218435792870e-02, -1.081218435792870e-02, -6.192113250096463e+00, -6.194993516017817e+00, -6.192241847947284e+00, -6.194784608538657e+00, -6.193575270872477e+00, -6.193575270872477e+00, -2.149078969523035e+00, -2.167241232013657e+00, -2.132202940587108e+00, -2.148044133055497e+00, -2.167523234445288e+00, -2.167523234445288e+00, -6.835269291206366e-01, -7.741281139303603e-01, -6.282412248233431e-01, -6.810110689920673e-01, -6.982526085531480e-01, -6.982526085531480e-01, -1.582229082283592e-01, -2.126471916866890e-01, -1.513984171930538e-01, -2.333803048419890e+00, -1.588539019105811e-01, -1.588539019105811e-01, -6.644873644639982e-03, -8.416742828957305e-03, -6.433311643907842e-03, -1.172064726900598e-01, -7.750241881819071e-03, -7.750241881819071e-03, -7.247512120699110e-01, -7.125561655641879e-01, -7.167859659250674e-01, -7.203304326644197e-01, -7.185521128550132e-01, -7.185521128550132e-01, -7.075297369792536e-01, -5.534140161312708e-01, -5.941407594248548e-01, -6.379998650522154e-01, -6.154415992118049e-01, -6.154415992118049e-01, -8.101704994187406e-01, -2.481681659412855e-01, -2.861083466558956e-01, -3.870444535568490e-01, -3.286543572943312e-01, -3.286543572943312e-01, -5.086628151244067e-01, -7.826338820028293e-02, -1.016110838334720e-01, -3.808041881084619e-01, -1.321944362997931e-01, -1.321944362997931e-01, -2.096079567357988e-02, -2.251453313539036e-03, -4.724592201067352e-03, -1.282316335131570e-01, -7.171730389225795e-03, -7.171730389225789e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_pbek1_vdw_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbek1_vdw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-7.250245887454499e-09, -7.250189745757426e-09, -7.249875515509433e-09, -7.250712129068682e-09, -7.250282942150740e-09, -7.250282942150740e-09, -9.879383655739822e-06, -9.879612153126005e-06, -9.883923629195982e-06, -9.868926295148326e-06, -9.878705036542563e-06, -9.878705036542563e-06, -6.438124877957986e-03, -6.446751387899117e-03, -6.586214662596742e-03, -6.400397827996203e-03, -6.462245044938461e-03, -6.462245044938461e-03, -7.430707217341580e-01, -7.357794018114071e-01, -3.578560700943187e-03, -1.086201110096007e+00, -9.893249865208121e-01, -9.893249865208120e-01, -3.767797368200119e+00, -3.980173123527529e+00, -2.181989620594136e+00, -3.425594081427764e+00, -4.351343591147425e+00, -4.351343591147436e+00, -2.119493819049861e-06, -2.119379080398548e-06, -2.119475880073144e-06, -2.119374790528699e-06, -2.119442769618271e-06, -2.119442769618271e-06, -7.957424174779757e-05, -7.791863106851261e-05, -7.980044046602184e-05, -7.834046084910008e-05, -7.853639883987650e-05, -7.853639883987650e-05, -1.246092602507640e-02, -9.900902007860353e-03, -1.667779509669265e-02, -1.588329210696716e-02, -1.185886369298586e-02, -1.185886369298586e-02, -1.377399759800069e+00, -4.869897675276560e-01, -1.534682877577164e+00, -1.206095295649460e-04, -1.561051715334978e+00, -1.561051715334978e+00, -4.513997498709579e+00, -4.031619736557397e+00, -2.531620593466559e+01, -2.368708667622026e+00, -1.178113001629049e+01, -1.178113001629047e+01, -1.387410698562518e-02, -1.386566506373497e-02, -1.386862990172261e-02, -1.387150285950199e-02, -1.387012769858302e-02, -1.387012769858302e-02, -1.559497065273079e-02, -2.233412445604994e-02, -2.024259613075126e-02, -1.831999786609337e-02, -1.930278044095474e-02, -1.930278044095474e-02, -8.165548577299226e-03, -2.725000423756669e-01, -1.774393402944370e-01, -8.628522523510192e-02, -1.276276618149127e-01, -1.276276618149128e-01, -3.088382677223109e-02, -1.995454758315095e+00, -1.957523445624011e+00, -1.084015315986494e-01, -2.515836665691730e+00, -2.515836665691733e+00, -3.034720903705569e+00, -1.978892047312882e+01, -9.576475250682666e+00, -2.573501670043861e+00, -1.488082548837998e+01, -1.488082548838001e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
