
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_ft97_b_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ft97_b", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.119174913176401e+01, -2.119176845446236e+01, -2.119193641293110e+01, -2.119164725129785e+01, -2.119178709704390e+01, -2.119178709704390e+01, -3.465464341864742e+00, -3.465423251568652e+00, -3.464559796439094e+00, -3.466727497573562e+00, -3.465499852731265e+00, -3.465499852731265e+00, -6.968816459892819e-01, -6.970042854428105e-01, -7.027753750476357e-01, -7.073075722423243e-01, -7.091942175904500e-01, -7.091942175904500e-01, -2.302247697846084e-01, -2.299292180138331e-01, -8.040311704292039e-01, -2.143690914389357e-01, -2.304976223726906e-01, -2.304976223726905e-01, -6.909052415539332e-02, -6.916666786217825e-02, -1.275382412229751e-01, -6.288908948842326e-02, -6.414445055142269e-02, -6.414445055142265e-02, -5.046977345554211e+00, -5.046102597073116e+00, -5.046949232094567e+00, -5.046176770175807e+00, -5.046526953649717e+00, -5.046526953649717e+00, -2.126423504968562e+00, -2.135112403340447e+00, -2.130722213910461e+00, -2.138307050834968e+00, -2.129269909332939e+00, -2.129269909332939e+00, -5.783988725261808e-01, -6.015436884836862e-01, -5.398692388873949e-01, -5.361696508386103e-01, -5.847923562676285e-01, -5.847923562676285e-01, -1.923659996609368e-01, -2.610485584532382e-01, -1.846775866799018e-01, -1.809945636961983e+00, -1.941883295910290e-01, -1.941883295910290e-01, -5.669739788602059e-02, -6.059579349295224e-02, -3.972815813938638e-02, -1.504528580605571e-01, -4.845777749999863e-02, -4.845777749999866e-02, -5.503106652784617e-01, -5.527844508540323e-01, -5.519120477031927e-01, -5.511875183494155e-01, -5.515488972968130e-01, -5.515488972968130e-01, -5.337698355823551e-01, -5.100067083349293e-01, -5.151708398096910e-01, -5.212292704382293e-01, -5.177854191320224e-01, -5.177854191320224e-01, -6.316714049472811e-01, -2.970079298189204e-01, -3.221552918847967e-01, -3.661870551214599e-01, -3.403774439829255e-01, -3.403774439829255e-01, -4.708348315889775e-01, -1.272695540631798e-01, -1.430926586906666e-01, -3.413376315090449e-01, -1.617000787592921e-01, -1.617000787592921e-01, -7.806886027727782e-02, -3.488197525813617e-02, -4.574294615455715e-02, -1.578505483868758e-01, -4.553089634116308e-02, -4.553089634116304e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_ft97_b_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ft97_b", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.468182774023252e+01, -2.468180034538232e+01, -2.468196248809643e+01, -2.468189820304772e+01, -2.468233574586333e+01, -2.468244924459358e+01, -2.468081547554445e+01, -2.468051105821175e+01, -2.468191102677022e+01, -2.468124327365510e+01, -2.468191102677022e+01, -2.468124327365510e+01, -3.998154059553589e+00, -3.998472227454969e+00, -3.998213015562332e+00, -3.998547198100838e+00, -3.999804570200133e+00, -4.000244766607047e+00, -3.997682829713162e+00, -3.998147954085820e+00, -3.997346576555531e+00, -3.999630045961870e+00, -3.997346576555531e+00, -3.999630045961870e+00, -7.349926842403504e-01, -7.421264089648874e-01, -7.324058972179937e-01, -7.411530058662269e-01, -6.982624507842882e-01, -6.863539537884549e-01, -6.973753347414358e-01, -7.012586833256417e-01, -7.541088567988957e-01, -6.371349203463149e-01, -7.541088567988957e-01, -6.371349203463149e-01, -1.550861096624451e-01, -1.623187363413925e-01, -1.576213456782924e-01, -1.663257751829308e-01, -8.468728506458292e-01, -8.942343294960936e-01, -1.257154757063617e-01, -1.269762203085407e-01, -1.622093917394490e-01, -1.098060888173032e-01, -1.622093917394489e-01, -1.098060888173031e-01, -2.037966547877686e-02, -2.110212223891596e-02, -2.079461999270470e-02, -2.162898591886889e-02, -6.537505316196345e-02, -6.772204400336554e-02, -1.583321117216605e-02, -1.576193696391988e-02, -1.915617897420976e-02, -1.279983522872960e-02, -1.915617897420973e-02, -1.279983522872961e-02, -6.162421163185876e+00, -6.160885350564650e+00, -6.165886484302673e+00, -6.164233326452148e+00, -6.162609410118681e+00, -6.160997332544312e+00, -6.165582986731589e+00, -6.164038912077746e+00, -6.164200072042671e+00, -6.162567985121547e+00, -6.164200072042671e+00, -6.162567985121547e+00, -2.060589858058238e+00, -2.060468432603918e+00, -2.082208466988729e+00, -2.081489340470323e+00, -2.030913856233771e+00, -2.039432348580616e+00, -2.049633640012097e+00, -2.058263259963903e+00, -2.094673984785705e+00, -2.074586274072006e+00, -2.094673984785705e+00, -2.074586274072006e+00, -6.830730139051173e-01, -6.813816292355767e-01, -7.750071359047846e-01, -7.757481216651450e-01, -6.124610032275493e-01, -6.389076374428547e-01, -6.711303714921474e-01, -6.929732055301416e-01, -7.159605843997212e-01, -6.785911875676959e-01, -7.159605843997212e-01, -6.785911875676960e-01, -1.135189643646708e-01, -1.134487184493929e-01, -1.592332236648320e-01, -1.598811000516920e-01, -1.079760905907370e-01, -1.102343320813116e-01, -2.337968034429610e+00, -2.336978259803672e+00, -1.148099131621495e-01, -1.120400128180103e-01, -1.148099131621495e-01, -1.120400128180103e-01, -1.322523190467858e-02, -1.372640327007163e-02, -1.516481192089998e-02, -1.543363350343472e-02, -1.053971376111830e-02, -1.070970655167420e-02, -8.744838448812584e-02, -8.812513529803068e-02, -1.163735524650633e-02, -1.367927822349581e-02, -1.163735524650634e-02, -1.367927822349585e-02, -7.238410187400839e-01, -7.267648486505924e-01, -7.121736654418556e-01, -7.151839517633192e-01, -7.162610958850567e-01, -7.192667847700616e-01, -7.196782585744826e-01, -7.226085454774883e-01, -7.179694913292652e-01, -7.209361582162696e-01, -7.179694913292652e-01, -7.209361582162696e-01, -7.066281711233057e-01, -7.089813944066260e-01, -5.423280253293851e-01, -5.454348831751973e-01, -5.894805108884620e-01, -5.928902083835845e-01, -6.373055089720054e-01, -6.397870360947632e-01, -6.133506582799463e-01, -6.159141382507479e-01, -6.133506582799463e-01, -6.159141382507479e-01, -8.105465972123773e-01, -8.124983071124942e-01, -1.992205339209632e-01, -2.005070934674744e-01, -2.490428753438641e-01, -2.527356087272783e-01, -3.761761578862389e-01, -3.787498135984787e-01, -3.077067799310343e-01, -3.079784687840353e-01, -3.077067799310342e-01, -3.079784687840354e-01, -4.969175190403630e-01, -5.016815531437260e-01, -6.505283950969953e-02, -6.534111316128455e-02, -7.882316632952856e-02, -8.025260392892303e-02, -3.731205953322057e-01, -3.801898632301203e-01, -9.610761677491853e-02, -9.525931856670192e-02, -9.610761677491853e-02, -9.525931856670194e-02, -2.563000231687703e-02, -2.612101726515843e-02, -7.234228328199951e-03, -6.623195337861244e-03, -1.033671359443151e-02, -1.052692823062772e-02, -9.298528188119970e-02, -9.385436887195024e-02, -1.033429272798689e-02, -1.301710044599051e-02, -1.033429272798689e-02, -1.301710044599053e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_ft97_b_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ft97_b", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.809684020897856e-08, 0.000000000000000e+00, -1.809693603038863e-08, -1.809663902831189e-08, 0.000000000000000e+00, -1.809678985903194e-08, -1.809590557356052e-08, 0.000000000000000e+00, -1.809576402949228e-08, -1.809817988271453e-08, 0.000000000000000e+00, -1.809866213603260e-08, -1.809672475797114e-08, 0.000000000000000e+00, -1.809743751675482e-08, -1.809672475797114e-08, 0.000000000000000e+00, -1.809743751675482e-08, -2.034073070098141e-05, 0.000000000000000e+00, -2.034208722600768e-05, -2.034053653557226e-05, 0.000000000000000e+00, -2.034205958590496e-05, -2.033749976503125e-05, 0.000000000000000e+00, -2.033626194111224e-05, -2.033060134193583e-05, 0.000000000000000e+00, -2.032990964076531e-05, -2.035319753237921e-05, 0.000000000000000e+00, -2.032573846899405e-05, -2.035319753237921e-05, 0.000000000000000e+00, -2.032573846899405e-05, -1.366806128216326e-02, 0.000000000000000e+00, -1.352157755718596e-02, -1.372906724908013e-02, 0.000000000000000e+00, -1.354924450774706e-02, -1.455268123521686e-02, 0.000000000000000e+00, -1.479784203113875e-02, -1.426108806430453e-02, 0.000000000000000e+00, -1.418876374734344e-02, -1.320874453715491e-02, 0.000000000000000e+00, -1.531784767455569e-02, -1.320874453715491e-02, 0.000000000000000e+00, -1.531784767455569e-02, -2.320314727253436e+00, 0.000000000000000e+00, -2.083919590951075e+00, -2.269466586907689e+00, 0.000000000000000e+00, -2.001440989784486e+00, -7.870345505378393e-03, 0.000000000000000e+00, -7.019692421759123e-03, -4.420799885385761e+00, 0.000000000000000e+00, -4.236407777573972e+00, -1.976190701906611e+00, 0.000000000000000e+00, -9.778166343787731e+00, -1.976190701906610e+00, 0.000000000000000e+00, -9.778166343787730e+00, -2.312779553940586e+04, 0.000000000000000e+00, -1.937377608623862e+04, -2.052440841534440e+04, 0.000000000000000e+00, -1.682338795071607e+04, -1.338750560800600e+02, 0.000000000000000e+00, -1.154885404026323e+02, -9.745175185678147e+04, 0.000000000000000e+00, -1.014964212457588e+05, -3.208455352774225e+04, 0.000000000000000e+00, -2.108273267016112e+05, -3.208455352774229e+04, 0.000000000000000e+00, -2.108273267016112e+05, -4.909721665054396e-06, 0.000000000000000e+00, -4.913905540174358e-06, -4.905088885035607e-06, 0.000000000000000e+00, -4.909424436341473e-06, -4.909454006689449e-06, 0.000000000000000e+00, -4.913744110893560e-06, -4.905479411807594e-06, 0.000000000000000e+00, -4.909673682449686e-06, -4.907360260478601e-06, 0.000000000000000e+00, -4.911659217194899e-06, -4.907360260478601e-06, 0.000000000000000e+00, -4.911659217194899e-06, -1.796186933689237e-04, 0.000000000000000e+00, -1.796532582298764e-04, -1.750263168568732e-04, 0.000000000000000e+00, -1.752026129278170e-04, -1.824056701115488e-04, 0.000000000000000e+00, -1.816613757950149e-04, -1.783817628225813e-04, 0.000000000000000e+00, -1.775842907423208e-04, -1.749288385642601e-04, 0.000000000000000e+00, -1.770210785821266e-04, -1.749288385642601e-04, 0.000000000000000e+00, -1.770210785821266e-04, -2.407810666534819e-02, 0.000000000000000e+00, -2.433746707858124e-02, -1.779873729270377e-02, 0.000000000000000e+00, -1.776944480538729e-02, -3.528761621193019e-02, 0.000000000000000e+00, -3.067104292935289e-02, -3.087499639554697e-02, 0.000000000000000e+00, -2.708387721778084e-02, -2.067910400139276e-02, 0.000000000000000e+00, -2.533265424709790e-02, -2.067910400139276e-02, 0.000000000000000e+00, -2.533265424709790e-02, -9.698529365404591e+00, 0.000000000000000e+00, -9.571809928776085e+00, -1.723844081560642e+00, 0.000000000000000e+00, -1.699236942756855e+00, -1.277685457455889e+01, 0.000000000000000e+00, -1.122049450553980e+01, -2.160605906801278e-04, 0.000000000000000e+00, -2.164510165269112e-04, -7.629145015133060e+00, 0.000000000000000e+00, -7.448304747390224e+00, -7.629145015133060e+00, 0.000000000000000e+00, -7.448304747390224e+00, -2.452326233317337e+05, 0.000000000000000e+00, -2.108005119552358e+05, -1.148364942668503e+05, 0.000000000000000e+00, -1.075428980988614e+05, -4.318470217242964e+05, 0.000000000000000e+00, -3.773074594970234e+05, -3.641053601429744e+01, 0.000000000000000e+00, -3.536139535653633e+01, -3.340474780039374e+05, 0.000000000000000e+00, -1.334526061905038e+05, -3.340474780039372e+05, 0.000000000000000e+00, -1.334526061905037e+05, -2.455358056376616e-02, 0.000000000000000e+00, -2.417822408982362e-02, -2.506012578328218e-02, 0.000000000000000e+00, -2.467509944769985e-02, -2.488566759094103e-02, 0.000000000000000e+00, -2.450289080382591e-02, -2.473817758554058e-02, 0.000000000000000e+00, -2.436030032887714e-02, -2.481231297733590e-02, 0.000000000000000e+00, -2.443199370928147e-02, -2.481231297733590e-02, 0.000000000000000e+00, -2.443199370928147e-02, -2.738600827198929e-02, 0.000000000000000e+00, -2.702690809913893e-02, -4.732300629875991e-02, 0.000000000000000e+00, -4.656806873644764e-02, -4.054644706514855e-02, 0.000000000000000e+00, -3.987227263776751e-02, -3.471035805080418e-02, 0.000000000000000e+00, -3.423332632692873e-02, -3.757535618539262e-02, 0.000000000000000e+00, -3.703287655588793e-02, -3.757535618539262e-02, 0.000000000000000e+00, -3.703287655588793e-02, -1.475982321800633e-02, 0.000000000000000e+00, -1.466803677944848e-02, -8.342151809104267e-01, 0.000000000000000e+00, -8.203048472057167e-01, -4.776483205275664e-01, 0.000000000000000e+00, -4.639367472786610e-01, -1.879550928999006e-01, 0.000000000000000e+00, -1.840828320852131e-01, -3.020962652995877e-01, 0.000000000000000e+00, -3.030207342769882e-01, -3.020962652995880e-01, 0.000000000000000e+00, -3.030207342769883e-01, -6.600895013426247e-02, 0.000000000000000e+00, -6.437388699115246e-02, -1.371635363448219e+02, 0.000000000000000e+00, -1.346566609023601e+02, -6.094939164281993e+01, 0.000000000000000e+00, -5.623468924399570e+01, -2.284190646788575e-01, 0.000000000000000e+00, -2.157963912850974e-01, -2.153680704309416e+01, 0.000000000000000e+00, -2.036694821722474e+01, -2.153680704309416e+01, 0.000000000000000e+00, -2.036694821722476e+01, -7.759598302159999e+03, 0.000000000000000e+00, -7.048807920328374e+03, -7.235062080770469e+06, 0.000000000000000e+00, -8.422384821368389e+06, -8.131403523199620e+05, 0.000000000000000e+00, -6.926971969602670e+05, -2.490880477733361e+01, 0.000000000000000e+00, -2.377379079232353e+01, -4.783384445295194e+05, 0.000000000000000e+00, -1.732414547126765e+05, -4.783384445295205e+05, 0.000000000000000e+00, -1.732414547126772e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
