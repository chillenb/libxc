
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_gam_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_gam", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.093572589730161e+01, -2.093583006045419e+01, -2.093625408428823e+01, -2.093454921664011e+01, -2.093578116935025e+01, -2.093578116935025e+01, -3.467421885280984e+00, -3.467456209487204e+00, -3.468537362412201e+00, -3.467378080085025e+00, -3.467453648872958e+00, -3.467453648872958e+00, -7.211350150015957e-01, -7.208544341178142e-01, -7.163658340147889e-01, -7.210952817387305e-01, -7.210300236328734e-01, -7.210300236328734e-01, -1.926568217471701e-01, -1.949229601767473e-01, -8.491220487351977e-01, -1.694098936041718e-01, -1.933114203748851e-01, -1.933114203748851e-01, -4.629127282784112e-02, -4.836207726228661e-02, -1.547502030543422e-01, -2.274001900496275e-02, -4.786752541028139e-02, -4.786752541028139e-02, -5.314302209160202e+00, -5.317472056055163e+00, -5.314624007601473e+00, -5.317088746441360e+00, -5.315930273417801e+00, -5.315930273417801e+00, -2.023487757727433e+00, -2.033816641607584e+00, -2.021946344541667e+00, -2.029833128214367e+00, -2.032989488571577e+00, -2.032989488571577e+00, -6.126222652797864e-01, -6.551007203214581e-01, -5.824385420133261e-01, -5.988353210552737e-01, -6.342254306795250e-01, -6.342254306795250e-01, -1.899597669947631e-01, -2.135060987643812e-01, -1.814321202567230e-01, -2.012574750522012e+00, -1.700242933944015e-01, -1.700242933944015e-01, -2.194659963711071e-02, -2.502634679475238e-02, -1.880334916420786e-02, -1.733600548914058e-01, -2.281963769791993e-02, -2.281963769791991e-02, -6.199711585039516e-01, -6.186359978161348e-01, -6.191146903390327e-01, -6.194826857884147e-01, -6.192982012617451e-01, -6.192982012617451e-01, -5.997106743707824e-01, -5.391597081957655e-01, -5.564626064862795e-01, -5.726519910304102e-01, -5.643114994603589e-01, -5.643114994603589e-01, -6.871788776386141e-01, -2.557260383437234e-01, -2.981770959677995e-01, -3.769009664968765e-01, -3.352012391405979e-01, -3.352012391405979e-01, -4.872512478366173e-01, -1.507926780614308e-01, -1.743212416484758e-01, -3.539754676462180e-01, -1.704033085535085e-01, -1.704033085535085e-01, -5.392105716663406e-02, -6.926589939263990e-03, -1.311324359979001e-02, -1.614946720048667e-01, -1.942892635252475e-02, -1.942892635252470e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_gam_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_gam", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.340518516953209e+01, -3.340527345372222e+01, -3.340571942748023e+01, -3.340427255341165e+01, -3.340523129210096e+01, -3.340523129210096e+01, -5.015538312170355e+00, -5.015609028901223e+00, -5.017767023784022e+00, -5.015174293655619e+00, -5.015597442273129e+00, -5.015597442273129e+00, -8.562917891831529e-01, -8.544481833520122e-01, -8.000690057938794e-01, -8.077378566109776e-01, -8.556254385626881e-01, -8.556254385626881e-01, -2.375904471098374e-01, -2.480633442196307e-01, -1.049353147475156e+00, -1.678776382247840e-02, -2.409324697251483e-01, -2.409324697251483e-01, -5.911439395608214e-02, -6.150517436871609e-02, -1.153106480150086e-01, -3.003314383697390e-02, -6.088336899783400e-02, -6.088336899783400e-02, -7.830124534201161e+00, -7.831709119115218e+00, -7.830292036220421e+00, -7.831524282360411e+00, -7.830933891873964e+00, -7.830933891873964e+00, -2.335157111801294e+00, -2.366809991684282e+00, -2.308042875017315e+00, -2.332799649907712e+00, -2.391641624961637e+00, -2.391641624961637e+00, -7.810849555313130e-01, -8.646071538214438e-01, -7.408069670927468e-01, -7.836968293762354e-01, -8.133622087263978e-01, -8.133622087263978e-01, 3.947903513871585e-02, -1.234555896382738e-01, 4.158939915685988e-02, -2.751395735231463e+00, 3.380849480460207e-02, 3.380849480460207e-02, -2.899615975682002e-02, -3.298368019498556e-02, -2.480611641143175e-02, -5.132786300445712e-02, -3.007800372376083e-02, -3.007800372376085e-02, -8.245205746248225e-01, -8.166696582693743e-01, -8.194497945113340e-01, -8.216222114728141e-01, -8.205325483093263e-01, -8.205325483093263e-01, -7.981443269535710e-01, -6.702928743676800e-01, -7.066227914515750e-01, -7.405445064327053e-01, -7.232180149310667e-01, -7.232180149310670e-01, -9.069516141591665e-01, -2.534983722146634e-01, -3.633481328904338e-01, -4.833910241992486e-01, -4.291400111728794e-01, -4.291400111728796e-01, -6.086041800162112e-01, -1.298330454675790e-01, -9.011772682657464e-02, -4.584940753196149e-01, 2.174458996209839e-02, 2.174458996209830e-02, -6.829567580454057e-02, -9.220903562895243e-03, -1.740944356134806e-02, 2.203401724230695e-02, -2.564694985429776e-02, -2.564694985429795e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_gam_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_gam", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.405572646249789e-08, 1.405578505586386e-08, 1.405567353558995e-08, 1.405472139811399e-08, 1.405576047996382e-08, 1.405576047996382e-08, 7.106320028791358e-06, 7.107644093799729e-06, 7.143216623674550e-06, 7.077690726403229e-06, 7.106915220861899e-06, 7.106915220861899e-06, -3.516509687492089e-03, -3.546141658219202e-03, -4.445993846792597e-03, -4.295828419006334e-03, -3.527210251327254e-03, -3.527210251327254e-03, -1.956995021989047e-01, -1.343296589292376e-01, -1.482299714867271e-03, -3.246531068015238e+00, -1.755377778763338e-01, -1.755377778763338e-01, -1.064263163458340e+02, -1.064963771627751e+02, -3.585320760808225e+01, -7.669783380787480e+01, -1.106415545084905e+02, -1.106415545084905e+02, 3.108789597742637e-06, 3.117901093967764e-06, 3.109689741376920e-06, 3.116774950065513e-06, 3.113507327486907e-06, 3.113507327486907e-06, -3.356434371832159e-05, -3.117876698702872e-05, -3.565602910100274e-05, -3.376041119332017e-05, -2.921368864805558e-05, -2.921368864805558e-05, -4.923007393306870e-03, -3.302849419429637e-03, -6.028427839178624e-03, -5.210286636060285e-03, -4.191048893686440e-03, -4.191048893686440e-03, -9.469628288931093e+00, -7.319231648594982e-01, -1.032911486355919e+01, 8.719623024617487e-05, -6.413987651222048e+00, -6.413987651222048e+00, -8.138370570679332e+01, -8.143935366243149e+01, -2.333010540573101e+02, -2.784692285186078e+01, -1.203130090907661e+02, -1.203130090907117e+02, -4.412163048187858e-03, -4.448057527317886e-03, -4.432729545021094e-03, -4.422846022227141e-03, -4.427600847802112e-03, -4.427600847802112e-03, -5.278973795199447e-03, -8.431070757561642e-03, -7.154192904341507e-03, -6.331025618244428e-03, -6.722538786024751e-03, -6.722538786024742e-03, -2.556375361450217e-03, -2.002465822126407e-01, -5.719567337242185e-02, -1.813437130795719e-02, -2.459380810728798e-02, -2.459380810728782e-02, -1.133928969470543e-02, -3.189275888307242e+01, -2.710836729903562e+01, -2.072157694954657e-02, -1.878988222126312e+01, -1.878988222126308e+01, -7.961471159843178e+01, -1.409193905252370e+02, -1.211274702256615e+02, -2.287677982364143e+01, -1.758717058515629e+02, -1.758717058515134e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
