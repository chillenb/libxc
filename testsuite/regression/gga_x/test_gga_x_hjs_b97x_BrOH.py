
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_hjs_b97x_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_hjs_b97x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.029719283464820e+01, -2.029722816033532e+01, -2.029744253060995e+01, -2.029686293287497e+01, -2.029721098963218e+01, -2.029721098963218e+01, -3.286743204446020e+00, -3.286729901520649e+00, -3.286502718773244e+00, -3.287604673606392e+00, -3.286750627122991e+00, -3.286750627122991e+00, -5.999702962466678e-01, -5.997931780852781e-01, -5.974170963005724e-01, -6.016790676315552e-01, -5.999029730676946e-01, -5.999029730676946e-01, -1.430344137495993e-01, -1.437213323379393e-01, -7.162774345629810e-01, -1.191728272489075e-01, -1.432091631773863e-01, -1.432091631773863e-01, -4.375936046518604e-04, -5.370134705125461e-04, -3.790756201855590e-02, -1.917058337728331e-05, -5.124204609672305e-04, -5.124204609672305e-04, -4.862644676518493e+00, -4.862775807845089e+00, -4.862662591240539e+00, -4.862764471633048e+00, -4.862705324192338e+00, -4.862705324192338e+00, -1.923264092263653e+00, -1.933352113352136e+00, -1.923163743212561e+00, -1.930974432075835e+00, -1.930381566911774e+00, -1.930381566911774e+00, -4.950648357805994e-01, -5.296077151560318e-01, -4.678829896926233e-01, -4.796450578172788e-01, -5.140922627578325e-01, -5.140922627578325e-01, -1.005344818159811e-01, -1.672295045194888e-01, -9.661328568401845e-02, -1.732187414097899e+00, -1.061104828502125e-01, -1.061104828502125e-01, -1.677817123240486e-05, -2.783471523374468e-05, -9.669300360343077e-06, -5.981604510981180e-02, -1.948324446700575e-05, -1.948324446700636e-05, -4.972999601128664e-01, -4.967336797208819e-01, -4.969299340280413e-01, -4.970848129934882e-01, -4.970063537445105e-01, -4.970063537445105e-01, -4.791297293759824e-01, -4.317985700337650e-01, -4.445313905222188e-01, -4.570533588509693e-01, -4.504929931711535e-01, -4.504929931711535e-01, -5.585289530506662e-01, -2.038680139952094e-01, -2.333742462100990e-01, -2.874675817063873e-01, -2.573615054263814e-01, -2.573615054263814e-01, -3.854726470571067e-01, -3.385686232024005e-02, -5.380595532044001e-02, -2.628009557439006e-01, -7.730255535318570e-02, -7.730255535318571e-02, -8.790490088199607e-04, -4.143457861243134e-07, -2.936135896345706e-06, -7.118777374853713e-02, -1.082842678805194e-05, -1.082842678799995e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_hjs_b97x_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_hjs_b97x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.562904642296444e+01, -2.562912844966889e+01, -2.562951187604830e+01, -2.562816829783651e+01, -2.562908953489975e+01, -2.562908953489975e+01, -4.073143115253453e+00, -4.073180071946003e+00, -4.074365288412315e+00, -4.073198567160369e+00, -4.073179736904381e+00, -4.073179736904381e+00, -7.058520301629752e-01, -7.043789577243185e-01, -6.634934615404402e-01, -6.704014174608978e-01, -7.053184155956498e-01, -7.053184155956498e-01, -1.287893095815530e-01, -1.333161136518763e-01, -8.779951541873912e-01, -6.532989536035999e-02, -1.301698374129968e-01, -1.301698374129968e-01, -1.052070651410405e-03, -1.278879831637245e-03, -4.314354233267978e-02, -4.294024761586412e-05, -1.222043612503443e-03, -1.222043612503443e-03, -6.248187759450889e+00, -6.250346395100455e+00, -6.248409842559777e+00, -6.250088309502021e+00, -6.249293292705916e+00, -6.249293292705916e+00, -2.124970720583326e+00, -2.145462678233237e+00, -2.111510231556758e+00, -2.127576477809400e+00, -2.156092430331378e+00, -2.156092430331378e+00, -6.351325120735768e-01, -7.137368339378498e-01, -5.981901880928971e-01, -6.420800363618945e-01, -6.649819555585429e-01, -6.649819555585429e-01, -5.561967050483731e-02, -1.115861281646084e-01, -5.155886555268487e-02, -2.291872239450147e+00, -5.210743967770816e-02, -5.210743967770816e-02, -3.724803890211971e-05, -6.388066286490066e-05, -2.071773065544810e-05, -4.870883715244934e-02, -4.364030424435855e-05, -4.364030424437152e-05, -6.790368716744682e-01, -6.718705750783560e-01, -6.744604531556802e-01, -6.764450178600306e-01, -6.754540056823917e-01, -6.754540056823917e-01, -6.558636303125094e-01, -5.272815714280749e-01, -5.664931970608146e-01, -6.018505807328395e-01, -5.841137609996174e-01, -5.841137609996174e-01, -7.505870116484955e-01, -1.687924419197676e-01, -2.300373535690002e-01, -3.461376859605381e-01, -2.861133843550599e-01, -2.861133843550597e-01, -4.676687805126337e-01, -4.224518239104876e-02, -5.144169088863662e-02, -3.326078842280477e-01, -4.508541357035117e-02, -4.508541357035130e-02, -2.047037464429306e-03, -8.303751642623836e-07, -6.002364920651679e-06, -4.055708422362451e-02, -2.336104543280903e-05, -2.336104543278815e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_hjs_b97x_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_hjs_b97x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-3.682976600295210e-09, -3.682938624478820e-09, -3.682746084173143e-09, -3.683368432395523e-09, -3.682956766418070e-09, -3.682956766418070e-09, -5.278669508487718e-06, -5.278606324070485e-06, -5.275999815375651e-06, -5.276016252756690e-06, -5.278547094822238e-06, -5.278547094822238e-06, -3.884737816261631e-03, -3.901540648082091e-03, -4.358754744477407e-03, -4.224667965686977e-03, -3.890855407022066e-03, -3.890855407022066e-03, -6.244567264624871e-01, -5.957460239674069e-01, -1.876914758856481e-03, -1.679526652582700e+00, -6.157915461957829e-01, -6.157915461957829e-01, -1.962993782205679e+00, -2.324277845213456e+00, -8.275677367127447e+00, -4.885582510033105e-02, -2.324414881118788e+00, -2.324414881118788e+00, -1.036965486304852e-06, -1.036050414825534e-06, -1.036869904786912e-06, -1.036158411642824e-06, -1.036498931040767e-06, -1.036498931040767e-06, -5.312447993842133e-05, -5.166614530991153e-05, -5.371426297492375e-05, -5.255677549146765e-05, -5.139484429546624e-05, -5.139484429546624e-05, -6.482174628975327e-03, -4.407962044379292e-03, -7.990604881542072e-03, -6.433059628280750e-03, -5.548004583458666e-03, -5.548004583458666e-03, -3.073767657944385e+00, -5.505911010148482e-01, -3.416289997170904e+00, -5.473994171044533e-05, -2.590037635853491e+00, -2.590037635853491e+00, -4.285121791596112e-02, -8.611651475250957e-02, -5.295345824470819e-02, -7.243452869780562e+00, -7.825696921765281e-02, -7.825696921773059e-02, -5.258177114409890e-03, -5.477713584909706e-03, -5.400305666600416e-03, -5.339768315527082e-03, -5.370155733454581e-03, -5.370155733454581e-03, -5.945489946749556e-03, -1.172356344458170e-02, -9.649735732583041e-03, -8.031187654975369e-03, -8.818317823302630e-03, -8.818317823302618e-03, -3.673852082675578e-03, -2.435899709127363e-01, -1.299867874139347e-01, -4.821032110779425e-02, -7.953769683182796e-02, -7.953769683182811e-02, -1.762687526292279e-02, -7.125489634544910e+00, -6.786180926073525e+00, -5.844831552665462e-02, -5.611466534199007e+00, -5.611466534199025e+00, -2.556120616427151e+00, -9.794024526983386e-05, -3.547940410598575e-03, -6.793064674473362e+00, -4.778157229601279e-02, -4.778157229603867e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
