
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_sfat_pbe_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_sfat_pbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.071039392013482e+01, -2.071041822105540e+01, -2.071060243706168e+01, -2.071020299196995e+01, -2.071040610196489e+01, -2.071040610196489e+01, -3.245938590082489e+00, -3.245912722991085e+00, -3.245344672977946e+00, -3.247057312746789e+00, -3.245940021858465e+00, -3.245940021858465e+00, -5.006624042732353e-01, -5.004641641827546e-01, -4.963741243864114e-01, -5.007700882372851e-01, -5.005877973574450e-01, -5.005877973574450e-01, -7.166434260861948e-02, -7.313163458592410e-02, -6.157588121006974e-01, -3.951723489185363e-02, -7.210040379489635e-02, -7.210040379489635e-02, -3.382600753400512e-05, -3.885338605944126e-05, -2.392791002950251e-03, -3.750108070883410e-06, -3.765590305694569e-05, -3.765590305694569e-05, -4.811283811021877e+00, -4.810780029039885e+00, -4.811238374766110e+00, -4.810846549921659e+00, -4.811016672726741e+00, -4.811016672726741e+00, -1.870193442419847e+00, -1.880406368409780e+00, -1.870585393080107e+00, -1.878542146422929e+00, -1.876597314013371e+00, -1.876597314013371e+00, -3.972100363187115e-01, -4.264028040780313e-01, -3.713327364280972e-01, -3.800281691397233e-01, -4.150771493781101e-01, -4.150771493781101e-01, -2.002902222727992e-02, -7.598190200100234e-02, -1.938304658543037e-02, -1.611228142584867e+00, -2.783600705683201e-02, -2.783600705683201e-02, -3.366978524130042e-06, -5.023885110912052e-06, -2.116653329078121e-06, -5.986904450728042e-03, -3.801258696352550e-06, -3.801258696352550e-06, -3.944004593758978e-01, -3.950466780480538e-01, -3.948261108287129e-01, -3.946451860271602e-01, -3.947361255815366e-01, -3.947361255815366e-01, -3.771652536017887e-01, -3.371218379854046e-01, -3.491713584510740e-01, -3.598908834850725e-01, -3.543716399341927e-01, -3.543716399341927e-01, -4.541336415966405e-01, -1.127200478970867e-01, -1.459380791877171e-01, -2.021888881823281e-01, -1.722938027407866e-01, -1.722938027407865e-01, -2.930268159917996e-01, -1.925360445738535e-03, -4.493269459192759e-03, -1.813432181621179e-01, -1.195984629241302e-02, -1.195984629241301e-02, -5.434475233220997e-05, -1.032434421372857e-07, -7.075311669927606e-07, -1.059547807173524e-02, -2.334167463465061e-06, -2.334167463465051e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_sfat_pbe_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_sfat_pbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.495261350233059e+01, -2.495269974852983e+01, -2.495309298231707e+01, -2.495168051213331e+01, -2.495265891483152e+01, -2.495265891483152e+01, -3.861626551969361e+00, -3.861661043893414e+00, -3.862775584857009e+00, -3.861710153627200e+00, -3.861661461055978e+00, -3.861661461055978e+00, -6.105099765840213e-01, -6.096320927833152e-01, -5.884922506135660e-01, -5.940748500907024e-01, -6.101898731288763e-01, -6.101898731288763e-01, -1.028340495369705e-01, -1.046669815269970e-01, -7.635840807789069e-01, -6.257896339631011e-02, -1.033754896248880e-01, -1.033754896248880e-01, -6.753024889159939e-05, -7.755327763730691e-05, -4.634131123563219e-03, -7.497117066690827e-06, -7.516609785351302e-05, -7.516609785351302e-05, -6.005613353302961e+00, -6.008153749631439e+00, -6.005873305361526e+00, -6.007848596509072e+00, -6.006915604058872e+00, -6.006915604058872e+00, -2.037576836083040e+00, -2.053652671543264e+00, -2.030504928557312e+00, -2.042941404017000e+00, -2.057991035681019e+00, -2.057991035681019e+00, -5.245393303273511e-01, -5.958490841100796e-01, -4.903810478289659e-01, -5.274852989679424e-01, -5.515756125743734e-01, -5.515756125743734e-01, -3.478448979677162e-02, -1.098127978221955e-01, -3.367633023800018e-02, -2.138513381227638e+00, -4.629093555993286e-02, -4.629093555993286e-02, -6.731367485107420e-06, -1.004272333079034e-05, -4.232110886820415e-06, -1.125515272084939e-02, -7.599345533490868e-06, -7.599345533490868e-06, -5.634577127312883e-01, -5.559408115110517e-01, -5.585919696625089e-01, -5.606728924161291e-01, -5.596283385159520e-01, -5.596283385159520e-01, -5.414320577748671e-01, -4.323671962421597e-01, -4.612446566304855e-01, -4.903849133842874e-01, -4.753328845958130e-01, -4.753328845958131e-01, -6.310677577611896e-01, -1.531105888244007e-01, -1.921877580311883e-01, -2.677909444747958e-01, -2.260858210576606e-01, -2.260858210576605e-01, -3.781439975372693e-01, -3.746734818701214e-03, -8.551845502390656e-03, -2.483183633320316e-01, -2.157012002628639e-02, -2.157012002628640e-02, -1.084211457911317e-04, -2.064791114944085e-07, -1.414870081728359e-06, -1.922957325783540e-02, -4.666927812218450e-06, -4.666927812218429e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_sfat_pbe_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_sfat_pbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-6.933812587056363e-09, -6.933770882721281e-09, -6.933498826263686e-09, -6.934183463590455e-09, -6.933791312547669e-09, -6.933791312547669e-09, -8.600942520649414e-06, -8.601145043216967e-06, -8.605324344764708e-06, -8.591009639927680e-06, -8.600903720088686e-06, -8.600903720088686e-06, -3.683276044957801e-03, -3.681884513510804e-03, -3.587877971783662e-03, -3.514981858092374e-03, -3.682847224894651e-03, -3.682847224894651e-03, -1.146908873462590e-01, -1.169448738665831e-01, -2.133218808705722e-03, -8.584690165544290e-02, -1.154637156731740e-01, -1.154637156731740e-01, -5.448862102203279e-05, -6.570297117077091e-05, -6.198161098010787e-03, -2.060078421516278e-06, -6.547546733558064e-05, -6.547546733558064e-05, -1.944424731515531e-06, -1.944661783079370e-06, -1.944440962872444e-06, -1.944625428450543e-06, -1.944558015783675e-06, -1.944558015783675e-06, -6.111125339524313e-05, -6.005821719331087e-05, -6.094947095811975e-05, -6.013648244052470e-05, -6.058389595070411e-05, -6.058389595070411e-05, -7.263276650123127e-03, -6.230590636128521e-03, -8.606522106099548e-03, -8.409095830154863e-03, -6.516383794793317e-03, -6.516383794793317e-03, -4.550984103480922e-02, -6.505344135919053e-02, -5.068520423712356e-02, -1.008611347674176e-04, -7.222227389547731e-02, -7.222227389547731e-02, -1.893093743393290e-06, -3.233629746893434e-06, -2.926037443299856e-06, -1.941856559892138e-02, -3.294396871863985e-06, -3.294396871863959e-06, -7.730583463317959e-03, -7.652033049354458e-03, -7.680083109376842e-03, -7.701955693577953e-03, -7.691034301235213e-03, -7.691034301235213e-03, -8.708700975546298e-03, -1.048384159998766e-02, -1.001543070827848e-02, -9.548617150794523e-03, -9.800758801839983e-03, -9.800758801839981e-03, -5.244987156222521e-03, -5.305002625459131e-02, -4.539178098901970e-02, -3.224456332855646e-02, -3.960939411464883e-02, -3.960939411464882e-02, -1.452188431485244e-02, -3.948581493180012e-03, -1.160379946154567e-02, -4.290143201553221e-02, -4.359427092549652e-02, -4.359427092549686e-02, -7.686893717773022e-05, -3.134010874356576e-08, -3.512006691960438e-07, -4.677506178524585e-02, -2.512009948372484e-06, -2.512009948371417e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
