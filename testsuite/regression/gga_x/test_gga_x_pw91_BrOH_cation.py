
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_pw91_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pw91", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.105546661530207e+01, -2.105549370443941e+01, -2.105568300340704e+01, -2.105527855179415e+01, -2.105548068629883e+01, -2.105548068629883e+01, -3.491851537190700e+00, -3.491813785226182e+00, -3.491026556235822e+00, -3.493058349549838e+00, -3.491890699785905e+00, -3.491890699785905e+00, -7.003978081252079e-01, -7.003892291737129e-01, -7.018278103229735e-01, -7.066264787652599e-01, -7.066408997799186e-01, -7.066408997799186e-01, -2.159697885868339e-01, -2.169775023260409e-01, -8.091865856714064e-01, -1.846832017590664e-01, -2.114904978773873e-01, -2.114904978773872e-01, -1.589819831667549e-04, -1.919177354463795e-04, -2.476936791910086e-02, -2.802624309727075e-05, -8.978578620429676e-05, -8.978578620429719e-05, -5.059312805774643e+00, -5.058625523228085e+00, -5.059292327142561e+00, -5.058685422282488e+00, -5.058958378776486e+00, -5.058958378776486e+00, -2.119759482837359e+00, -2.129842366216782e+00, -2.120628192944524e+00, -2.129530918495714e+00, -2.124925726395237e+00, -2.124925726395237e+00, -5.838239591358437e-01, -6.047405466419857e-01, -5.448360431366079e-01, -5.396824579030908e-01, -5.902580251803796e-01, -5.902580251803797e-01, -1.389855972298044e-01, -2.331618389800354e-01, -1.283339693322227e-01, -1.819165736943807e+00, -1.578781597642813e-01, -1.578781597642813e-01, -1.467378813673590e-05, -2.840321949920457e-05, -3.247612959880410e-05, -7.625483359578536e-02, -4.589717615658014e-05, -4.589717615658014e-05, -5.514232009551919e-01, -5.556198937912598e-01, -5.542412798424212e-01, -5.530319183970640e-01, -5.536448170901680e-01, -5.536448170901680e-01, -5.341030704987613e-01, -5.128047262739561e-01, -5.198000313930304e-01, -5.258316232652849e-01, -5.226437100440289e-01, -5.226437100440289e-01, -6.352549483398786e-01, -2.765806662506314e-01, -3.108365470042947e-01, -3.672489631686331e-01, -3.364980105136202e-01, -3.364980105136202e-01, -4.732348486797349e-01, -2.101855554028145e-02, -4.642727046052199e-02, -3.439023632355600e-01, -1.092696746051490e-01, -1.092696746051491e-01, -4.081239004209556e-04, -1.183977266794484e-06, -7.697108735696148e-06, -1.012744656103519e-01, -3.814186068740583e-05, -3.814186068740579e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_pw91_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pw91", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.523204073535472e+01, -2.523201040571184e+01, -2.523214935394292e+01, -2.523208929762847e+01, -2.523247669209818e+01, -2.523256399290348e+01, -2.523125056025395e+01, -2.523100102039399e+01, -2.523210653548686e+01, -2.523161095433482e+01, -2.523210653548686e+01, -2.523161095433482e+01, -4.064243732139125e+00, -4.064370383692735e+00, -4.064279237276849e+00, -4.064409628456354e+00, -4.065178938549246e+00, -4.065438795868143e+00, -4.064276411307642e+00, -4.064533512124235e+00, -4.063492378888684e+00, -4.065406906039043e+00, -4.063492378888684e+00, -4.065406906039043e+00, -7.675076136407256e-01, -7.719870074210091e-01, -7.658388229898220e-01, -7.713118390666446e-01, -7.444701840738196e-01, -7.376754788404543e-01, -7.464141801982935e-01, -7.486000157521218e-01, -7.801905372986352e-01, -7.150841134199404e-01, -7.801905372986352e-01, -7.150841134199404e-01, -1.965702972303149e-01, -2.023853342108393e-01, -1.978942403528424e-01, -2.049221707218665e-01, -8.825260543568318e-01, -9.192959129290109e-01, -1.743601846754545e-01, -1.757413442915901e-01, -2.047169135354593e-01, -1.697066963303999e-01, -2.047169135354592e-01, -1.697066963303997e-01, -5.864679511039698e-04, -7.035504519353144e-04, -6.961346401893929e-04, -8.585631810498622e-04, -8.103729491114488e-02, -9.147767621890196e-02, -1.174513902215741e-04, -1.099997416978995e-04, -4.122388445641541e-04, -1.182484841033552e-04, -4.122388445641596e-04, -1.182484841033575e-04, -6.208743541771772e+00, -6.207200723150526e+00, -6.211274118334159e+00, -6.209645351397507e+00, -6.208884188371251e+00, -6.207284781761588e+00, -6.211055530045608e+00, -6.209505584050824e+00, -6.210039335907825e+00, -6.208428263230557e+00, -6.210039335907825e+00, -6.208428263230557e+00, -2.219965136021143e+00, -2.219849273598315e+00, -2.237712419508404e+00, -2.237069714952613e+00, -2.202842861775859e+00, -2.207616961169927e+00, -2.218060993802284e+00, -2.223046485822741e+00, -2.242968251698517e+00, -2.230674161208428e+00, -2.242968251698517e+00, -2.230674161208428e+00, -6.901060538012195e-01, -6.883441459504156e-01, -7.730900014595103e-01, -7.738082276604636e-01, -6.222281288526537e-01, -6.471205779645181e-01, -6.698195301326928e-01, -6.916796024034243e-01, -7.209353008677560e-01, -6.840054337044722e-01, -7.209353008677563e-01, -6.840054337044724e-01, -1.872405037712642e-01, -1.854714795040566e-01, -2.137381438525969e-01, -2.143730807273243e-01, -1.863882455178000e-01, -1.848649249285421e-01, -2.332045167277382e+00, -2.331055262058458e+00, -1.720262530085205e-01, -1.599805551936265e-01, -1.720262530085205e-01, -1.599805551936265e-01, -5.810806077421921e-05, -6.068501761122320e-05, -1.150866202843887e-04, -1.156474551043116e-04, -1.158817781169163e-04, -1.459937159921275e-04, -1.687104798925420e-01, -1.700507976089533e-01, -8.624023372711996e-05, -2.259582771159317e-04, -8.624023372711866e-05, -2.259582771159367e-04, -7.217870015709800e-01, -7.247062554915460e-01, -7.103785378977506e-01, -7.133709316092355e-01, -7.143721106346037e-01, -7.173651673382595e-01, -7.177204199783274e-01, -7.206372248446141e-01, -7.160502103540862e-01, -7.190042683388609e-01, -7.160502103540862e-01, -7.190042683388609e-01, -7.052344909842644e-01, -7.075947807884739e-01, -5.642944421131777e-01, -5.670044993835880e-01, -5.998059742277886e-01, -6.028553954679490e-01, -6.390511921177910e-01, -6.414616775311746e-01, -6.188182671454094e-01, -6.212807515945554e-01, -6.188182671454094e-01, -6.212807515945554e-01, -8.086404763848585e-01, -8.105410876585267e-01, -2.537488662910558e-01, -2.548585199368957e-01, -2.960395080188802e-01, -2.987443971622927e-01, -3.960751159290923e-01, -3.984125256071325e-01, -3.412358482183756e-01, -3.411590187121114e-01, -3.412358482183756e-01, -3.411590187121114e-01, -5.182536643278928e-01, -5.222807835004273e-01, -7.535292520088903e-02, -7.659834345270493e-02, -1.346559189431960e-01, -1.415989323353406e-01, -3.842450275203765e-01, -3.906292125385484e-01, -1.719842799400813e-01, -1.609235875475246e-01, -1.719842799400811e-01, -1.609235875475245e-01, -1.568704241473666e-03, -1.770312562028938e-03, -4.066265655788988e-06, -5.471703005902774e-06, -2.746588740759746e-05, -3.421309674602767e-05, -1.678292890089615e-01, -1.683764024371924e-01, -1.060565217613759e-04, -1.763062518037639e-04, -1.060565217613735e-04, -1.763062518037640e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_pw91_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pw91", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.439058966160262e-08, 0.000000000000000e+00, -1.439067258096648e-08, -1.439051394960423e-08, 0.000000000000000e+00, -1.439061751379662e-08, -1.439008759226843e-08, 0.000000000000000e+00, -1.439005813291400e-08, -1.439094735776820e-08, 0.000000000000000e+00, -1.439115250147303e-08, -1.439055380424761e-08, 0.000000000000000e+00, -1.439057956454247e-08, -1.439055380424761e-08, 0.000000000000000e+00, -1.439057956454247e-08, -1.892893521572338e-05, 0.000000000000000e+00, -1.893644722158873e-05, -1.892950959055897e-05, 0.000000000000000e+00, -1.893758111116351e-05, -1.894910281415148e-05, 0.000000000000000e+00, -1.895380525828981e-05, -1.890295330702366e-05, 0.000000000000000e+00, -1.890900604576867e-05, -1.893904669584452e-05, 0.000000000000000e+00, -1.892473320042284e-05, -1.893904669584452e-05, 0.000000000000000e+00, -1.892473320042284e-05, -1.169096936258850e-02, 0.000000000000000e+00, -1.172122238963787e-02, -1.169018589030426e-02, 0.000000000000000e+00, -1.172688210838897e-02, -1.169987718815793e-02, 0.000000000000000e+00, -1.165530175325498e-02, -1.135023174886429e-02, 0.000000000000000e+00, -1.136976628491659e-02, -1.168583187613773e-02, 0.000000000000000e+00, -1.100707514273938e-02, -1.168583187613773e-02, 0.000000000000000e+00, -1.100707514273938e-02, -1.363604233075861e+00, 0.000000000000000e+00, -1.259817322361622e+00, -1.356073935378816e+00, 0.000000000000000e+00, -1.233750763121471e+00, -6.779443156262563e-03, 0.000000000000000e+00, -6.376880335972702e-03, -1.961791070192363e+00, 0.000000000000000e+00, -1.901428949360136e+00, -1.170253172690412e+00, 0.000000000000000e+00, -1.541639034516476e+00, -1.170253172690411e+00, 0.000000000000000e+00, -1.541639034516484e+00, 1.288155584042138e+02, 0.000000000000000e+00, 1.282110459473775e+02, 1.364776452671068e+02, 0.000000000000000e+00, 1.366528555230088e+02, 6.589453678752729e+01, 0.000000000000000e+00, 6.252055242220493e+01, 1.131999453994259e+02, 0.000000000000000e+00, 1.099588735559370e+02, 1.273054186685553e+02, 0.000000000000000e+00, 3.148476554155566e+02, 1.273054186685590e+02, 0.000000000000000e+00, 3.148476554155682e+02, -4.348798632570083e-06, 0.000000000000000e+00, -4.352697624466819e-06, -4.352208798725444e-06, 0.000000000000000e+00, -4.355996995169907e-06, -4.348941026272671e-06, 0.000000000000000e+00, -4.352777342234661e-06, -4.351867505868168e-06, 0.000000000000000e+00, -4.355774967258281e-06, -4.350580505963301e-06, 0.000000000000000e+00, -4.354359820921927e-06, -4.350580505963301e-06, 0.000000000000000e+00, -4.354359820921927e-06, -1.405219935407974e-04, 0.000000000000000e+00, -1.405467935153918e-04, -1.377535497106343e-04, 0.000000000000000e+00, -1.378727492819466e-04, -1.404513022321477e-04, 0.000000000000000e+00, -1.405318950811838e-04, -1.380768982612262e-04, 0.000000000000000e+00, -1.380924761315017e-04, -1.389350509557969e-04, 0.000000000000000e+00, -1.391489587396221e-04, -1.389350509557969e-04, 0.000000000000000e+00, -1.391489587396221e-04, -2.413482214268388e-02, 0.000000000000000e+00, -2.440909577088295e-02, -2.189191166741126e-02, 0.000000000000000e+00, -2.193059343848524e-02, -3.406359397259270e-02, 0.000000000000000e+00, -3.019114436056568e-02, -3.666934240384019e-02, 0.000000000000000e+00, -3.204654404968169e-02, -2.130568210190412e-02, 0.000000000000000e+00, -2.586578763567237e-02, -2.130568210190412e-02, 0.000000000000000e+00, -2.586578763567237e-02, 1.918094046558342e-01, 0.000000000000000e+00, -4.805286451652245e-02, -8.838032260320566e-01, 0.000000000000000e+00, -8.743914929977799e-01, 1.938425229500887e+00, 0.000000000000000e+00, 7.503148680039932e-01, -2.679557407371548e-04, 0.000000000000000e+00, -2.684896236324749e-04, -1.831942500812882e+00, 0.000000000000000e+00, -2.744888406564385e+00, -1.831942500812882e+00, 0.000000000000000e+00, -2.744888406564385e+00, 1.569769821674567e+02, 0.000000000000000e+00, 1.358872740963136e+02, 1.369149974170615e+02, 0.000000000000000e+00, 1.263696624496882e+02, 7.876801399421597e+02, 0.000000000000000e+00, 8.817474656433426e+02, 2.179149058039575e+01, 0.000000000000000e+00, 2.128434782369636e+01, 3.875871135130701e+02, 0.000000000000000e+00, 3.894595635663690e+02, 3.875871135130606e+02, 0.000000000000000e+00, 3.894595635663721e+02, -3.478473065101590e-02, 0.000000000000000e+00, -3.439420902759244e-02, -3.101659162855819e-02, 0.000000000000000e+00, -3.060937677579698e-02, -3.171451530352188e-02, 0.000000000000000e+00, -3.131208868124857e-02, -3.264118624844359e-02, 0.000000000000000e+00, -3.223641665771398e-02, -3.211646634644961e-02, 0.000000000000000e+00, -3.171244183979367e-02, -3.211646634644961e-02, 0.000000000000000e+00, -3.171244183979367e-02, -4.033791494953498e-02, 0.000000000000000e+00, -3.978473178410854e-02, -4.098444502221944e-02, 0.000000000000000e+00, -4.046431073896911e-02, -3.878470998644865e-02, 0.000000000000000e+00, -3.829495436006211e-02, -3.740404672227663e-02, 0.000000000000000e+00, -3.694817362136524e-02, -3.807053582109648e-02, 0.000000000000000e+00, -3.758205617995675e-02, -3.807053582109648e-02, 0.000000000000000e+00, -3.758205617995675e-02, -1.794147145038068e-02, 0.000000000000000e+00, -1.791863596842651e-02, -4.859040431509490e-01, 0.000000000000000e+00, -4.796249895708342e-01, -3.115576476707269e-01, 0.000000000000000e+00, -3.053198898328194e-01, -1.565715832807467e-01, 0.000000000000000e+00, -1.537840813666477e-01, -2.221302165987700e-01, 0.000000000000000e+00, -2.233006210099010e-01, -2.221302165987701e-01, 0.000000000000000e+00, -2.233006210099010e-01, -5.670156530755787e-02, 0.000000000000000e+00, -5.564572236727503e-02, 6.251577916310214e+01, 0.000000000000000e+00, 6.221807946693691e+01, 4.141243745789613e+01, 0.000000000000000e+00, 3.900635164325362e+01, -2.059389567799105e-01, 0.000000000000000e+00, -1.965182402581491e-01, 5.696669185398686e+00, 0.000000000000000e+00, 1.791415340180343e+00, 5.696669185398655e+00, 0.000000000000000e+00, 1.791415340180328e+00, 1.050846886561939e+02, 0.000000000000000e+00, 1.077197296293176e+02, 4.674544822735084e+02, 0.000000000000000e+00, 8.318492098665906e+02, 2.951104770799855e+02, 0.000000000000000e+00, 3.153734733760161e+02, 7.298394577328557e+00, 0.000000000000000e+00, 6.485858779118828e+00, 8.060086917945579e+02, 0.000000000000000e+00, 4.018496500751069e+02, 8.060086917945417e+02, 0.000000000000000e+00, 4.018496500751069e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
