
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_pbe_gaussian_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbe_gaussian", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.094583528827227e+01, -2.094586270558397e+01, -2.094605235265295e+01, -2.094564304595185e+01, -2.094584788077747e+01, -2.094584788077747e+01, -3.473570763158764e+00, -3.473532739939566e+00, -3.472738971471649e+00, -3.474778896966610e+00, -3.473609170867376e+00, -3.473609170867376e+00, -6.974922965934258e-01, -6.975150774667073e-01, -6.998531577206217e-01, -7.045912073439616e-01, -7.046158689145123e-01, -7.046158689145123e-01, -2.157322874663870e-01, -2.168306279441411e-01, -8.055480559515760e-01, -1.824275321754839e-01, -2.110152413505548e-01, -2.110152413505547e-01, -1.010593247422691e-02, -1.064149241404217e-02, -5.776348599202565e-02, -5.829081206556653e-03, -8.134597580597900e-03, -8.134597580597900e-03, -5.034951142245242e+00, -5.034333549859275e+00, -5.034933483602424e+00, -5.034388090580602e+00, -5.034632112576956e+00, -5.034632112576956e+00, -2.114439013930249e+00, -2.124252414096735e+00, -2.115860523251198e+00, -2.124526461041759e+00, -2.119187158154560e+00, -2.119187158154560e+00, -5.807418144350831e-01, -6.028220846167759e-01, -5.419799601563151e-01, -5.376123057398758e-01, -5.871629607286715e-01, -5.871629607286717e-01, -1.392059124472812e-01, -2.315089932743592e-01, -1.301876562900562e-01, -1.813614691265542e+00, -1.554356025919052e-01, -1.554356025919052e-01, -4.500492302547550e-03, -5.698241250152871e-03, -4.363372138868564e-03, -9.089238053957303e-02, -5.480940564088592e-03, -5.480940564088592e-03, -5.507671408527244e-01, -5.539138691319442e-01, -5.528235687549536e-01, -5.519033706485492e-01, -5.523643205762393e-01, -5.523643205762393e-01, -5.339869387970509e-01, -5.106230403390899e-01, -5.171048450601792e-01, -5.232117733098878e-01, -5.198896957620194e-01, -5.198896957620194e-01, -6.331155250773868e-01, -2.761040035287311e-01, -3.108515945892177e-01, -3.659061592299913e-01, -3.360520715728285e-01, -3.360520715728285e-01, -4.712661435082370e-01, -5.532235406273322e-02, -7.455154061949203e-02, -3.422597296285259e-01, -1.120902292716220e-01, -1.120902292716220e-01, -1.423857881788881e-02, -1.523267120644683e-03, -3.203228736825734e-03, -1.061355988174713e-01, -5.033452518575021e-03, -5.033452518575017e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_pbe_gaussian_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbe_gaussian", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.514281588936530e+01, -2.514278625599305e+01, -2.514293150750607e+01, -2.514287022859282e+01, -2.514327143525647e+01, -2.514336570846859e+01, -2.514196650364758e+01, -2.514170221883940e+01, -2.514288635921308e+01, -2.514234512262181e+01, -2.514288635921308e+01, -2.514234512262181e+01, -4.036802603741430e+00, -4.036987241758425e+00, -4.036845237203588e+00, -4.037037336370417e+00, -4.037955497911406e+00, -4.038270437724436e+00, -4.036683636414052e+00, -4.037003710315762e+00, -4.036033134053483e+00, -4.038062057100474e+00, -4.036033134053483e+00, -4.038062057100474e+00, -7.575045553502598e-01, -7.623590949819355e-01, -7.557200647771127e-01, -7.616400031845134e-01, -7.334036594969554e-01, -7.265477706400599e-01, -7.352160235495319e-01, -7.374339997954130e-01, -7.711874927495153e-01, -7.062447919103964e-01, -7.711874927495153e-01, -7.062447919103964e-01, -2.010153421171404e-01, -2.056349918135771e-01, -2.016107186762436e-01, -2.072890227757067e-01, -8.712801842987854e-01, -9.098893844911528e-01, -1.804806674083290e-01, -1.821267896683353e-01, -2.089888296313124e-01, -1.547828086533972e-01, -2.089888296313123e-01, -1.547828086533971e-01, -1.301505291230038e-02, -1.382707400760422e-02, -1.363521638896866e-02, -1.460263076349062e-02, -7.262878176462870e-02, -7.629138980417344e-02, -7.832582559237609e-03, -7.702282199951113e-03, -1.161479215819750e-02, -6.613957844156823e-03, -1.161479215819750e-02, -6.613957844156823e-03, -6.200773185109943e+00, -6.199220696075671e+00, -6.203586753334105e+00, -6.201938855545168e+00, -6.200928326744471e+00, -6.199313271149746e+00, -6.203342535719236e+00, -6.201782597055881e+00, -6.202215125416432e+00, -6.200585984144068e+00, -6.202215125416432e+00, -6.200585984144068e+00, -2.186438760471791e+00, -2.186324600541710e+00, -2.203961216796683e+00, -2.203326596653690e+00, -2.169712231654334e+00, -2.174335192755777e+00, -2.184613508356953e+00, -2.189481850479904e+00, -2.209295107460922e+00, -2.197015846653338e+00, -2.209295107460922e+00, -2.197015846653338e+00, -6.865419288982623e-01, -6.848088279561292e-01, -7.739601371733150e-01, -7.747044286193230e-01, -6.178293563103118e-01, -6.431944657165201e-01, -6.702683454993805e-01, -6.920989209580255e-01, -7.181474083956418e-01, -6.810765985167926e-01, -7.181474083956420e-01, -6.810765985167928e-01, -1.563223799526629e-01, -1.567344910720999e-01, -2.227775270627536e-01, -2.234075837710705e-01, -1.461567030184962e-01, -1.508684354634581e-01, -2.334850206679173e+00, -2.333862853776566e+00, -1.635327407104066e-01, -1.614333667423866e-01, -1.635327407104066e-01, -1.614333667423866e-01, -5.877094628999676e-03, -6.107713527231286e-03, -7.536243703176466e-03, -7.650350866094309e-03, -5.634251388134713e-03, -5.965982894432549e-03, -1.106998201000277e-01, -1.114724970831814e-01, -5.755769324319142e-03, -7.900402859885070e-03, -5.755769324319142e-03, -7.900402859885072e-03, -7.233040542250012e-01, -7.262383569913452e-01, -7.112197298424354e-01, -7.142299412131033e-01, -7.153813978872481e-01, -7.183929587949291e-01, -7.189195441768890e-01, -7.218569863736432e-01, -7.171434960997503e-01, -7.201169573196219e-01, -7.171434960997503e-01, -7.201169573196219e-01, -7.063552735375395e-01, -7.087097982492251e-01, -5.572342230064919e-01, -5.599925721469845e-01, -5.952808213255875e-01, -5.984349277649225e-01, -6.377751963118802e-01, -6.402187898014022e-01, -6.159430443490532e-01, -6.184421540650685e-01, -6.159430443490532e-01, -6.184421540650685e-01, -8.094479846508270e-01, -8.113961800979193e-01, -2.599948872920710e-01, -2.609152467357190e-01, -2.959795742258273e-01, -2.982141074904655e-01, -3.905324923120860e-01, -3.928740522737783e-01, -3.365522514916818e-01, -3.364411124444584e-01, -3.365522514916819e-01, -3.364411124444585e-01, -5.115893833058748e-01, -5.157033625478473e-01, -7.152332839517997e-02, -7.197009514929850e-02, -9.310329842260870e-02, -9.565660016180390e-02, -3.801664965914843e-01, -3.866811657032283e-01, -1.281857765440026e-01, -1.300159722492396e-01, -1.281857765440025e-01, -1.300159722492396e-01, -1.859080920786699e-02, -1.925964351298478e-02, -2.028593237505877e-03, -2.033172555608068e-03, -4.126942017083375e-03, -4.389136870433356e-03, -1.235516867909380e-01, -1.250426079807455e-01, -5.450995170901508e-03, -7.242468702283210e-03, -5.450995170901502e-03, -7.242468702283202e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_pbe_gaussian_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbe_gaussian", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.410221228615613e-08, 0.000000000000000e+00, -1.410229038058893e-08, -1.410209843800510e-08, 0.000000000000000e+00, -1.410220763305946e-08, -1.410160679725130e-08, 0.000000000000000e+00, -1.410153882357338e-08, -1.410289576672805e-08, 0.000000000000000e+00, -1.410318070761025e-08, -1.410215081943238e-08, 0.000000000000000e+00, -1.410243063963110e-08, -1.410215081943238e-08, 0.000000000000000e+00, -1.410243063963110e-08, -1.902705592260838e-05, 0.000000000000000e+00, -1.903279237252261e-05, -1.902740627778779e-05, 0.000000000000000e+00, -1.903358901108295e-05, -1.904040425415079e-05, 0.000000000000000e+00, -1.904336703140367e-05, -1.900558956438688e-05, 0.000000000000000e+00, -1.900968913179522e-05, -1.903793449428056e-05, 0.000000000000000e+00, -1.901962213028856e-05, -1.903793449428056e-05, 0.000000000000000e+00, -1.901962213028856e-05, -1.212694089105034e-02, 0.000000000000000e+00, -1.213245439713249e-02, -1.213404523585360e-02, 0.000000000000000e+00, -1.214152047992714e-02, -1.220659141136217e-02, 0.000000000000000e+00, -1.216402293633856e-02, -1.184492752815742e-02, 0.000000000000000e+00, -1.186346545090996e-02, -1.204978225397632e-02, 0.000000000000000e+00, -1.137759278366502e-02, -1.204978225397632e-02, 0.000000000000000e+00, -1.137759278366502e-02, -1.288160360653266e+00, 0.000000000000000e+00, -1.210476739424510e+00, -1.293925550750544e+00, 0.000000000000000e+00, -1.198953871116428e+00, -7.024631791443497e-03, 0.000000000000000e+00, -6.536624764014176e-03, -1.707148250904593e+00, 0.000000000000000e+00, -1.653371674941202e+00, -1.110593654251059e+00, 0.000000000000000e+00, -2.424042106408088e+00, -1.110593654251058e+00, 0.000000000000000e+00, -2.424042106408090e+00, -4.901282455661375e+00, 0.000000000000000e+00, -4.852154587892177e+00, -5.164223635397361e+00, 0.000000000000000e+00, -5.137806656444995e+00, -2.861199615181482e+00, 0.000000000000000e+00, -2.876475589951545e+00, -4.489359270795367e+00, 0.000000000000000e+00, -4.367490697852292e+00, -4.893084562098861e+00, 0.000000000000000e+00, -1.241517818665437e+01, -4.893084562098871e+00, 0.000000000000000e+00, -1.241517818665439e+01, -4.150562911499503e-06, 0.000000000000000e+00, -4.154398411582269e-06, -4.150997070600896e-06, 0.000000000000000e+00, -4.154819809988823e-06, -4.150555008524831e-06, 0.000000000000000e+00, -4.154389937016564e-06, -4.150928040208067e-06, 0.000000000000000e+00, -4.154773147718607e-06, -4.150811203008082e-06, 0.000000000000000e+00, -4.154615171703314e-06, -4.150811203008082e-06, 0.000000000000000e+00, -4.154615171703314e-06, -1.466466484748415e-04, 0.000000000000000e+00, -1.466724902002416e-04, -1.437663500429090e-04, 0.000000000000000e+00, -1.438906674807501e-04, -1.464962265420398e-04, 0.000000000000000e+00, -1.466108424661794e-04, -1.440532210659106e-04, 0.000000000000000e+00, -1.440917120392500e-04, -1.449925976018519e-04, 0.000000000000000e+00, -1.452216916860132e-04, -1.449925976018519e-04, 0.000000000000000e+00, -1.452216916860132e-04, -2.398603934447205e-02, 0.000000000000000e+00, -2.425320251193396e-02, -1.962125555063742e-02, 0.000000000000000e+00, -1.961315487169875e-02, -3.431067920221680e-02, 0.000000000000000e+00, -3.020639170848834e-02, -3.357171654106988e-02, 0.000000000000000e+00, -2.940330313832539e-02, -2.094367062470706e-02, 0.000000000000000e+00, -2.552053815609390e-02, -2.094367062470706e-02, 0.000000000000000e+00, -2.552053815609391e-02, -1.943049802306890e+00, 0.000000000000000e+00, -1.973905606109482e+00, -7.807388942875179e-01, 0.000000000000000e+00, -7.733266028506149e-01, -2.196288133187748e+00, 0.000000000000000e+00, -2.128467327092068e+00, -2.388732437037804e-04, 0.000000000000000e+00, -2.393203576670731e-04, -2.107199899297032e+00, 0.000000000000000e+00, -2.498214254596104e+00, -2.107199899297032e+00, 0.000000000000000e+00, -2.498214254596104e+00, -6.302220679890469e+00, 0.000000000000000e+00, -5.454792844354349e+00, -5.426731144666694e+00, 0.000000000000000e+00, -5.010374707255171e+00, -3.091125645159127e+01, 0.000000000000000e+00, -3.438678348944479e+01, -3.272775136356466e+00, 0.000000000000000e+00, -3.153607646024148e+00, -1.537157691716639e+01, 0.000000000000000e+00, -1.509885591914302e+01, -1.537157691716634e+01, 0.000000000000000e+00, -1.509885591914300e+01, -2.786612898331991e-02, 0.000000000000000e+00, -2.745284035762954e-02, -2.768824316711242e-02, 0.000000000000000e+00, -2.728447221528178e-02, -2.775030184626867e-02, 0.000000000000000e+00, -2.734364655513885e-02, -2.780336178317095e-02, 0.000000000000000e+00, -2.739306702569515e-02, -2.777697019566575e-02, 0.000000000000000e+00, -2.736842055717969e-02, -2.777697019566575e-02, 0.000000000000000e+00, -2.736842055717969e-02, -3.134710299361833e-02, 0.000000000000000e+00, -3.093816491010091e-02, -4.242897466961540e-02, 0.000000000000000e+00, -4.186670724558118e-02, -3.918191983390361e-02, 0.000000000000000e+00, -3.863672203121766e-02, -3.604429178408070e-02, 0.000000000000000e+00, -3.557856648927807e-02, -3.767862310738349e-02, 0.000000000000000e+00, -3.717121772976197e-02, -3.767862310738349e-02, 0.000000000000000e+00, -3.717121772976197e-02, -1.619933077473803e-02, 0.000000000000000e+00, -1.612909861983499e-02, -4.565698886037279e-01, 0.000000000000000e+00, -4.517009717571533e-01, -3.117772229016296e-01, 0.000000000000000e+00, -3.067524645609580e-01, -1.629498747252581e-01, 0.000000000000000e+00, -1.600009986177957e-01, -2.305787484539709e-01, 0.000000000000000e+00, -2.318718622121274e-01, -2.305787484539709e-01, 0.000000000000000e+00, -2.318718622121276e-01, -5.877804698185678e-02, 0.000000000000000e+00, -5.762532025931093e-02, -2.617672483536427e+00, 0.000000000000000e+00, -2.620676944444816e+00, -2.573311177736323e+00, 0.000000000000000e+00, -2.627781746914140e+00, -2.114789597215493e-01, 0.000000000000000e+00, -2.013192291514382e-01, -3.236197898698212e+00, 0.000000000000000e+00, -3.770291841797811e+00, -3.236197898698213e+00, 0.000000000000000e+00, -3.770291841797812e+00, -3.884143887060684e+00, 0.000000000000000e+00, -3.965166762015876e+00, -1.939076948671139e+01, 0.000000000000000e+00, -3.434779453339347e+01, -1.196765784594374e+01, 0.000000000000000e+00, -1.274037152888675e+01, -3.613280703020114e+00, 0.000000000000000e+00, -3.536067499160437e+00, -3.169162735481622e+01, 0.000000000000000e+00, -1.567454372382531e+01, -3.169162735481627e+01, 0.000000000000000e+00, -1.567454372382535e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
