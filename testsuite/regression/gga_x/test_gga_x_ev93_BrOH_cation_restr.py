
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_ev93_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ev93", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.093810549859624e+01, -2.093812246392621e+01, -2.093828237281755e+01, -2.093802825465794e+01, -2.093814937783288e+01, -2.093814937783288e+01, -3.499246617641037e+00, -3.499185566624279e+00, -3.497861628614055e+00, -3.500830045732463e+00, -3.499257771775068e+00, -3.499257771775068e+00, -7.204778406746232e-01, -7.210914875711095e-01, -7.408798537124609e-01, -7.449949461798366e-01, -7.424996414005652e-01, -7.424996414005652e-01, -2.596005268354907e-01, -2.587704697747180e-01, -8.256718376949089e-01, -2.351851023450838e-01, -2.454569421091822e-01, -2.454569421091823e-01, -8.705047068018329e-03, -9.173410429538670e-03, -5.890792521880366e-02, -4.997507347650098e-03, -6.293489826887688e-03, -6.293489826887688e-03, -5.014525391097583e+00, -5.013624401944431e+00, -5.014495875706417e+00, -5.013700205293592e+00, -5.014061270840298e+00, -5.014061270840298e+00, -2.251348470547553e+00, -2.256869295478580e+00, -2.264314394748689e+00, -2.269069376323271e+00, -2.248236707928553e+00, -2.248236707928553e+00, -5.825805409568531e-01, -5.997692016376249e-01, -5.453558949274504e-01, -5.343964743685811e-01, -5.869045316207518e-01, -5.869045316207518e-01, -1.786513625420799e-01, -2.927244103861854e-01, -1.654222701858080e-01, -1.804658781857783e+00, -2.024560162576578e-01, -2.024560162576578e-01, -3.852469873329074e-03, -4.886011092282814e-03, -3.741138900028970e-03, -1.074900929725217e-01, -4.506721195368249e-03, -4.506721195368250e-03, -5.493999839954877e-01, -5.511630584109308e-01, -5.504216687967628e-01, -5.499008462191641e-01, -5.501492373684663e-01, -5.501492373684663e-01, -5.333010743416742e-01, -5.264137499323724e-01, -5.219940639645461e-01, -5.215813185417263e-01, -5.208758775616790e-01, -5.208758775616790e-01, -6.297954203174765e-01, -3.354928368265856e-01, -3.579569404737948e-01, -3.814192188092048e-01, -3.667124263413549e-01, -3.667124263413549e-01, -4.866861014986000e-01, -5.557233274868086e-02, -8.135185908883498e-02, -3.491111847628233e-01, -1.415583483524412e-01, -1.415583483524411e-01, -1.236858836096133e-02, -1.302845875749790e-03, -2.737358051331717e-03, -1.324374200596383e-01, -4.169464118188201e-03, -4.169464118188198e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_ev93_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ev93", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.419536830050492e+01, -2.419551740533021e+01, -2.419607016557333e+01, -2.419385401386616e+01, -2.419503090942085e+01, -2.419503090942085e+01, -3.769651807383437e+00, -3.769782153477787e+00, -3.772887544981496e+00, -3.768203965463653e+00, -3.769898961288043e+00, -3.769898961288043e+00, -6.571664985309181e-01, -6.546237812359513e-01, -5.947246321353332e-01, -6.015223538201501e-01, -6.015765450812030e-01, -6.015765450812030e-01, -1.639168509224543e-01, -1.616614181039516e-01, -7.859433836057270e-01, -2.017134008572324e-01, -1.774356929690523e-01, -1.774356929690531e-01, -1.180749366203232e-02, -1.247102514717825e-02, -9.537104720303087e-02, -6.700826435085218e-03, -8.474642785227237e-03, -8.474642785227202e-03, -6.078749049407120e+00, -6.083644311137344e+00, -6.078960935676291e+00, -6.083282876798488e+00, -6.081239309048602e+00, -6.081239309048602e+00, -1.760221251093038e+00, -1.782016900514434e+00, -1.731459799576643e+00, -1.750076839745597e+00, -1.786930576487427e+00, -1.786930576487427e+00, -6.503152084217637e-01, -7.736621033201377e-01, -5.901778412040876e-01, -6.780357904760106e-01, -6.704839292466962e-01, -6.704839292466962e-01, -2.298512464882733e-01, -2.180140673557267e-01, -2.222110987515842e-01, -2.333427928267501e+00, -2.087672811789324e-01, -2.087672811789324e-01, -5.156438146220143e-03, -6.552661548147065e-03, -5.030578966334657e-03, -1.683785200291497e-01, -6.059529184161990e-03, -6.059529184161993e-03, -7.259926303647343e-01, -7.123947498948136e-01, -7.175671442058957e-01, -7.215397341611355e-01, -7.195897585050169e-01, -7.195897585050169e-01, -7.083087494235992e-01, -4.856864768361671e-01, -5.533625169327918e-01, -6.230810791054737e-01, -5.883032717774455e-01, -5.883032717774455e-01, -8.089948702407246e-01, -2.155440682184138e-01, -2.237453057281222e-01, -3.308151546476921e-01, -2.598458816416948e-01, -2.598458816416945e-01, -4.444449839236224e-01, -8.927925588778222e-02, -1.330476514113813e-01, -3.436545769187235e-01, -1.947579983600179e-01, -1.947579983600180e-01, -1.698848473625154e-02, -1.738745726768307e-03, -3.660192753931403e-03, -1.893682072511106e-01, -5.604330431806767e-03, -5.604330431806748e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_ev93_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ev93", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-9.423780963475147e-09, -9.423609023854703e-09, -9.422919382512644e-09, -9.425475951515298e-09, -9.424125709437402e-09, -9.424125709437402e-09, -1.433983990783909e-05, -1.433922412588229e-05, -1.432352824055393e-05, -1.433985200887436e-05, -1.433771904086570e-05, -1.433771904086570e-05, -1.082410672943331e-02, -1.086986636309293e-02, -1.179145714601342e-02, -1.143262471088247e-02, -1.152724655951867e-02, -1.152724655951867e-02, -1.351285609623755e+00, -1.351354733776092e+00, -5.847656263795853e-03, -1.517671245842892e+00, -1.627249956545126e+00, -1.627249956545122e+00, 2.966621068741956e+01, 3.124195137655434e+01, 1.008983162896633e+01, 2.738442986040728e+01, 3.459331482002570e+01, 3.459331482002126e+01, -2.456536635348230e-06, -2.449253651489531e-06, -2.456220981071363e-06, -2.449791646667756e-06, -2.452837429289421e-06, -2.452837429289421e-06, -1.438597623564621e-04, -1.403691337777024e-04, -1.453559821783998e-04, -1.422933980768416e-04, -1.411377127652479e-04, -1.411377127652479e-04, -1.720535983362151e-02, -8.676459009037627e-03, -2.406647965318156e-02, -1.541067560735348e-02, -1.575023464865397e-02, -1.575023464865397e-02, -2.813089382031620e-01, -7.820960294100827e-01, 7.185556928530623e-02, -1.038375584753103e-04, -1.587713666103445e+00, -1.587713666103445e+00, 3.616629970766780e+01, 3.222063947321033e+01, 2.016364292219975e+02, 3.984904115076700e+00, 9.384344938731066e+01, 9.384344938732623e+01, -9.445627876580577e-03, -1.197083741786068e-02, -1.113218802285008e-02, -1.039869777017635e-02, -1.077009003104392e-02, -1.077009003104392e-02, -9.669362459332018e-03, -3.728025973312045e-02, -2.996276064183444e-02, -2.210503518786676e-02, -2.615130858996952e-02, -2.615130858996952e-02, -7.366683809698863e-03, -4.887519114293126e-01, -3.340500852022135e-01, -1.492242451881298e-01, -2.374146657332679e-01, -2.374146657332681e-01, -5.188562976650805e-02, 9.872914835330945e+00, 6.464562741214549e+00, -1.725891931148196e-01, 5.257003302277213e-01, 5.257003302277309e-01, 2.348007268919010e+01, 1.591345771774351e+02, 7.682523357610609e+01, 1.328902998595845e+00, 1.185819596750420e+02, 1.185819596750269e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
