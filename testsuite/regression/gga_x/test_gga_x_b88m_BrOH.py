
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_b88m_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_b88m", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.113190796352010e+01, -2.113193010800877e+01, -2.113210882767396e+01, -2.113174460856157e+01, -2.113191897365292e+01, -2.113191897365292e+01, -3.508000916538985e+00, -3.507969667168908e+00, -3.507255616574720e+00, -3.509230053642326e+00, -3.507999787693134e+00, -3.507999787693134e+00, -7.060274679831275e-01, -7.061027458574602e-01, -7.101937272761166e-01, -7.144699297104375e-01, -7.060509462148811e-01, -7.060509462148811e-01, -2.208589909722525e-01, -2.214881683239788e-01, -8.212537335492145e-01, -1.913702394878155e-01, -2.210162465155354e-01, -2.210162465155354e-01, -6.357409152203108e-02, -6.430821538617602e-02, -1.149872285154875e-01, -5.750008584388717e-02, -6.368285355061906e-02, -6.368285355061906e-02, -5.071698181755975e+00, -5.070941118446897e+00, -5.071627516742934e+00, -5.071038748330858e+00, -5.071300363453481e+00, -5.071300363453481e+00, -2.138646492795504e+00, -2.148150755802374e+00, -2.140403503098456e+00, -2.147786244815559e+00, -2.142847338219330e+00, -2.142847338219330e+00, -5.793678100493092e-01, -5.980758166156075e-01, -5.520390413783056e-01, -5.509152879905713e-01, -5.968786117937329e-01, -5.968786117937329e-01, -1.689319174401710e-01, -2.463209198623972e-01, -1.644920779819318e-01, -1.819422350514475e+00, -1.754046978080752e-01, -1.754046978080752e-01, -5.641746521213933e-02, -5.794749185683949e-02, -4.431749060050880e-02, -1.298585965241677e-01, -5.261249563481889e-02, -5.261249563481889e-02, -5.595114011455165e-01, -5.636961717677517e-01, -5.622596332995496e-01, -5.611005559819039e-01, -5.616849121459104e-01, -5.616849121459104e-01, -5.403476769653450e-01, -5.223214790762087e-01, -5.285098683059403e-01, -5.334806838389194e-01, -5.308468690026292e-01, -5.308468690026292e-01, -6.282587982389810e-01, -2.882834695960586e-01, -3.199691438660510e-01, -3.708576225919876e-01, -3.431613622748321e-01, -3.431613622748320e-01, -4.741685646188529e-01, -1.150907538448866e-01, -1.280217587853769e-01, -3.400722765865200e-01, -1.438954844740876e-01, -1.438954844740875e-01, -6.985158008815336e-02, -4.118864259427524e-02, -4.721894283995487e-02, -1.369077831042517e-01, -4.719486060977382e-02, -4.719486060977383e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_b88m_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_b88m", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.516728327621576e+01, -2.516736583088382e+01, -2.516774807627478e+01, -2.516639594925003e+01, -2.516732669611613e+01, -2.516732669611613e+01, -4.050964074394174e+00, -4.050997250420616e+00, -4.052076366485457e+00, -4.051076221330372e+00, -4.050998394254433e+00, -4.050998394254433e+00, -7.584954032811168e-01, -7.573618505272540e-01, -7.282858429539564e-01, -7.344698148190691e-01, -7.580833753240112e-01, -7.580833753240112e-01, -2.003761740386640e-01, -2.033228497999895e-01, -9.214993278345172e-01, -1.458700230079453e-01, -2.012591139792798e-01, -2.012591139792798e-01, -2.210790509159236e-02, -2.270784791687767e-02, -5.987606824579234e-02, -1.546001098984087e-02, -2.248006629676544e-02, -2.248006629676544e-02, -6.192455803990400e+00, -6.194926393702113e+00, -6.192708716134516e+00, -6.194629713163085e+00, -6.193721849357483e+00, -6.193721849357483e+00, -2.197711625584655e+00, -2.215132082618172e+00, -2.188792083639579e+00, -2.202350766625567e+00, -2.221207301744262e+00, -2.221207301744262e+00, -6.800765222460484e-01, -7.649614450951434e-01, -6.437789353450343e-01, -6.911411098592504e-01, -7.095766077941653e-01, -7.095766077941653e-01, -1.121060605227700e-01, -2.011032448820937e-01, -1.101832773065230e-01, -2.326464701044143e+00, -1.257565218864163e-01, -1.257565218864163e-01, -1.507385886737827e-02, -1.611685221899053e-02, -1.223157138933648e-02, -7.570055383840647e-02, -1.465285491366353e-02, -1.465285491366356e-02, -7.361927644561100e-01, -7.242480212146156e-01, -7.283399603190772e-01, -7.316372068810414e-01, -7.299721496264222e-01, -7.299721496264222e-01, -7.140322187510740e-01, -5.770621954452640e-01, -6.126812176554320e-01, -6.484695384003253e-01, -6.300010057199934e-01, -6.300010057199934e-01, -8.008656531935012e-01, -2.531050501330654e-01, -3.032701297966141e-01, -3.993907758734685e-01, -3.475005425133865e-01, -3.475005425133865e-01, -5.189294359125717e-01, -5.761575783079839e-02, -7.095259312921376e-02, -3.825859055524078e-01, -9.250612423434190e-02, -9.250612423434190e-02, -2.499017645221874e-02, -8.370568376833792e-03, -1.118860692521972e-02, -8.816750577706885e-02, -1.287745804006059e-02, -1.287745804006059e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_b88m_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_b88m", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-7.617810782798366e-09, -7.617780878368367e-09, -7.617529292079323e-09, -7.618021365193824e-09, -7.617796000059314e-09, -7.617796000059314e-09, -1.002487219573915e-05, -1.002521712205229e-05, -1.003305216846925e-05, -1.001106898500964e-05, -1.002487877708141e-05, -1.002487877708141e-05, -6.219992896001283e-03, -6.221406937584256e-03, -6.216568765884421e-03, -6.060508709476280e-03, -6.220621757973924e-03, -6.220621757973924e-03, -7.325781304854626e-01, -7.159348372944916e-01, -3.351498198897127e-03, -1.643084796547933e+00, -7.278048730081295e-01, -7.278048730081295e-01, -2.797519115757450e+03, -2.453668047549631e+03, -3.723299857158655e+01, -2.073575056185441e+04, -2.555857569720954e+03, -2.555857569720954e+03, -2.308247567912351e-06, -2.310030740184577e-06, -2.308416319864803e-06, -2.309802972166644e-06, -2.309179773654476e-06, -2.309179773654476e-06, -7.550564630467937e-05, -7.403294640552635e-05, -7.547223293934320e-05, -7.432091067233329e-05, -7.455436523878453e-05, -7.455436523878453e-05, -1.346863254323289e-02, -1.226530773945414e-02, -1.633994588103927e-02, -1.678534616533642e-02, -1.196609383228956e-02, -1.196609383228956e-02, -3.617413058658507e+00, -5.376453844255191e-01, -3.932317418735296e+00, -1.431715557860342e-04, -2.612095011304795e+00, -2.612095011304795e+00, -2.337758167163797e+04, -1.594317440779422e+04, -4.908938404293686e+04, -1.512106186703958e+01, -2.324877622603701e+04, -2.324877622603700e+04, -1.663468253940611e-02, -1.561190349330852e-02, -1.592014251116507e-02, -1.619693347200464e-02, -1.605370532960561e-02, -1.605370532960561e-02, -1.929557013154124e-02, -2.056375298732000e-02, -1.945372001589143e-02, -1.882978790606290e-02, -1.912250161447836e-02, -1.912250161447836e-02, -1.004215180647774e-02, -2.613603714780768e-01, -1.596616771235390e-01, -8.162508831347512e-02, -1.149106444430051e-01, -1.149106444430052e-01, -3.036623917973681e-02, -4.357578769397754e+01, -1.909650440972063e+01, -1.139258697066076e-01, -7.463341291337769e+00, -7.463341291337771e+00, -1.639960148409746e+03, -7.746612471146717e+05, -1.166615381648495e+05, -9.064996442250106e+00, -4.126989600334270e+04, -4.126989600334283e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
