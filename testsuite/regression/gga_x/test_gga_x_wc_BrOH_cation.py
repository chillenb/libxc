
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_wc_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_wc", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.084480773808810e+01, -2.084484004646048e+01, -2.084504305211282e+01, -2.084456114126591e+01, -2.084480521406141e+01, -2.084480521406141e+01, -3.445209060061540e+00, -3.445180420630588e+00, -3.444602542539699e+00, -3.446261268093772e+00, -3.445258007372433e+00, -3.445258007372433e+00, -6.853650330652941e-01, -6.851866087789877e-01, -6.819367298787833e-01, -6.868370889201134e-01, -6.867196200909755e-01, -6.867196200909755e-01, -2.043384335496153e-01, -2.054604489376117e-01, -7.935200090016481e-01, -1.756045341693652e-01, -2.005438531447878e-01, -2.005438531447878e-01, -1.010144393108915e-02, -1.063614962719845e-02, -5.748744171217283e-02, -5.828220492698677e-03, -8.131985166702124e-03, -8.131985166702124e-03, -5.020898987147882e+00, -5.020480279145280e+00, -5.020889548089352e+00, -5.020519768160849e+00, -5.020681472693921e+00, -5.020681472693921e+00, -2.056436393308072e+00, -2.067453402662990e+00, -2.054447242192464e+00, -2.064182738526271e+00, -2.063494332398822e+00, -2.063494332398822e+00, -5.770105698493306e-01, -6.024454532402853e-01, -5.376800513221105e-01, -5.370072854351768e-01, -5.840378065612009e-01, -5.840378065612009e-01, -1.376455325180751e-01, -2.207021901667191e-01, -1.289486887031968e-01, -1.812601157650399e+00, -1.516068912033678e-01, -1.516068912033678e-01, -4.500033756502352e-03, -5.697370512198723e-03, -4.362399221659178e-03, -9.035774333696622e-02, -5.479579234681946e-03, -5.479579234681948e-03, -5.507240987769814e-01, -5.535987598660888e-01, -5.526310942876247e-01, -5.517906755729650e-01, -5.522142623346302e-01, -5.522142623346302e-01, -5.339774319320572e-01, -5.020980924968460e-01, -5.124605332502183e-01, -5.214395543694568e-01, -5.168379213606947e-01, -5.168379213606947e-01, -6.326434745509135e-01, -2.614930892945763e-01, -2.959509211551847e-01, -3.584069713836500e-01, -3.243277589599610e-01, -3.243277589599609e-01, -4.631064772245658e-01, -5.507087000488403e-02, -7.414928518251468e-02, -3.378222044274085e-01, -1.111051250911766e-01, -1.111051250911766e-01, -1.422783903182631e-02, -1.523228468445142e-03, -3.202985478925812e-03, -1.053419070291754e-01, -5.032311233788367e-03, -5.032311233788363e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_wc_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_wc", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.547286458173648e+01, -2.547283314737358e+01, -2.547296401761203e+01, -2.547290537417099e+01, -2.547327545347374e+01, -2.547335351033131e+01, -2.547215268781370e+01, -2.547192239788060e+01, -2.547292422466695e+01, -2.547248953112007e+01, -2.547292422466695e+01, -2.547248953112007e+01, -4.122438870549575e+00, -4.122473278962441e+00, -4.122463102753614e+00, -4.122495326521699e+00, -4.123029767470658e+00, -4.123202740005524e+00, -4.122714379049184e+00, -4.122871537698948e+00, -4.121713845094635e+00, -4.123452291995365e+00, -4.121713845094635e+00, -4.123452291995365e+00, -7.878764435685474e-01, -7.914287681348769e-01, -7.865108313150666e-01, -7.908593184540320e-01, -7.684529781068435e-01, -7.624891060596193e-01, -7.710131724586931e-01, -7.729030686470605e-01, -7.982150180323279e-01, -7.391424610485163e-01, -7.982150180323279e-01, -7.391424610485163e-01, -1.898633262316266e-01, -1.983547229347825e-01, -1.927939085859467e-01, -2.027987868203223e-01, -9.053192121101379e-01, -9.380850105238668e-01, -1.566355542755465e-01, -1.580121462399287e-01, -1.985133047800485e-01, -1.434525909850380e-01, -1.985133047800484e-01, -1.434525909850379e-01, -1.299943801189113e-02, -1.380865332593511e-02, -1.361699868337418e-02, -1.458063169583250e-02, -7.204163783023207e-02, -7.568198308637816e-02, -7.829100948511582e-03, -7.699010640791417e-03, -1.160348620062184e-02, -6.610497172083269e-03, -1.160348620062184e-02, -6.610497172083269e-03, -6.249305254221554e+00, -6.247767600988703e+00, -6.251477829931392e+00, -6.249866190673338e+00, -6.249427617523177e+00, -6.247840924269770e+00, -6.251291716430463e+00, -6.249747323357009e+00, -6.250416113055888e+00, -6.248820863242670e+00, -6.250416113055888e+00, -6.248820863242670e+00, -2.295370396640509e+00, -2.295252611338588e+00, -2.312930375302036e+00, -2.312285730061781e+00, -2.279319806544569e+00, -2.283837209082025e+00, -2.294579862504511e+00, -2.299257994260441e+00, -2.317036712858815e+00, -2.305828129355339e+00, -2.317036712858815e+00, -2.305828129355339e+00, -6.983014369467810e-01, -6.964894022834944e-01, -7.754108334924658e-01, -7.760790382846815e-01, -6.314561670437696e-01, -6.556897413244934e-01, -6.723870463073092e-01, -6.944017351751894e-01, -7.281484716504960e-01, -6.912503962653725e-01, -7.281484716504960e-01, -6.912503962653727e-01, -1.491126928540361e-01, -1.490142151776472e-01, -1.956881083346769e-01, -1.964395471978744e-01, -1.414395894394673e-01, -1.447342690916800e-01, -2.338672499448301e+00, -2.337672021507737e+00, -1.488313331005164e-01, -1.421243279054836e-01, -1.488313331005164e-01, -1.421243279054836e-01, -5.875327655874601e-03, -6.105868682682722e-03, -7.532836504279990e-03, -7.646924641217256e-03, -5.630897741813932e-03, -5.961821772822590e-03, -1.097130311743418e-01, -1.104880773774317e-01, -5.753212764876062e-03, -7.894059157353335e-03, -5.753212764876063e-03, -7.894059157353339e-03, -7.234772506714287e-01, -7.264024292392504e-01, -7.124248804662556e-01, -7.153962580775045e-01, -7.161306562412076e-01, -7.191128519844725e-01, -7.193627515905613e-01, -7.222840821012058e-01, -7.177306303596398e-01, -7.206819169874177e-01, -7.177306303596398e-01, -7.206819169874177e-01, -7.063932717957137e-01, -7.087472569390746e-01, -5.785584875222645e-01, -5.811456854164387e-01, -6.091699969625320e-01, -6.120556118000665e-01, -6.438240001432545e-01, -6.462024927029080e-01, -6.256969712481616e-01, -6.281172981104894e-01, -6.256969712481616e-01, -6.281172981104894e-01, -8.112726950582440e-01, -8.130901151254791e-01, -2.439716411391470e-01, -2.455170072971369e-01, -3.000053516539841e-01, -3.036386512865508e-01, -4.076137961584826e-01, -4.099112385585989e-01, -3.531631697342549e-01, -3.531075154830367e-01, -3.531631697342547e-01, -3.531075154830366e-01, -5.317848340092862e-01, -5.355838237842663e-01, -7.094312093039856e-02, -7.138642091634773e-02, -9.242557253605280e-02, -9.497348196920116e-02, -3.923877228524968e-01, -3.985182074918038e-01, -1.251684794611111e-01, -1.250221372598534e-01, -1.251684794611110e-01, -1.250221372598534e-01, -1.855305861754983e-02, -1.921775537724778e-02, -2.028462219554920e-03, -2.032997592147410e-03, -4.126090676464252e-03, -4.388083930833580e-03, -1.208708038506545e-01, -1.221681129814962e-01, -5.447911871253873e-03, -7.237441185227159e-03, -5.447911871253867e-03, -7.237441185227152e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_wc_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_wc", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.174886394407835e-08, 0.000000000000000e+00, -1.174893365571410e-08, -1.174882737721662e-08, 0.000000000000000e+00, -1.174890702351738e-08, -1.174852628869014e-08, 0.000000000000000e+00, -1.174852713098713e-08, -1.174894394560769e-08, 0.000000000000000e+00, -1.174905798253001e-08, -1.174885143172931e-08, 0.000000000000000e+00, -1.174871035638451e-08, -1.174885143172931e-08, 0.000000000000000e+00, -1.174871035638451e-08, -1.507699473743566e-05, 0.000000000000000e+00, -1.508471969886030e-05, -1.507767025469290e-05, 0.000000000000000e+00, -1.508595189413076e-05, -1.509968974816293e-05, 0.000000000000000e+00, -1.510511865120440e-05, -1.505182437151621e-05, 0.000000000000000e+00, -1.505855759971464e-05, -1.508436188198217e-05, 0.000000000000000e+00, -1.507672705120549e-05, -1.508436188198217e-05, 0.000000000000000e+00, -1.507672705120549e-05, -8.821976183329881e-03, 0.000000000000000e+00, -8.891713652161825e-03, -8.806156280455562e-03, 0.000000000000000e+00, -8.890395760360301e-03, -8.656784588459081e-03, 0.000000000000000e+00, -8.590097803548326e-03, -8.380210733464300e-03, 0.000000000000000e+00, -8.406343611072375e-03, -8.940398898049727e-03, 0.000000000000000e+00, -8.179293436595790e-03, -8.940398898049727e-03, 0.000000000000000e+00, -8.179293436595790e-03, -1.227757355266993e+00, 0.000000000000000e+00, -1.096141567339374e+00, -1.196871986682060e+00, 0.000000000000000e+00, -1.048036489945894e+00, -5.129863870268559e-03, 0.000000000000000e+00, -4.934953277684406e-03, -2.121269252187592e+00, 0.000000000000000e+00, -2.047479992877702e+00, -1.044162050918723e+00, 0.000000000000000e+00, -3.005198288586357e+00, -1.044162050918723e+00, 0.000000000000000e+00, -3.005198288586361e+00, -8.218604766040524e+00, 0.000000000000000e+00, -8.090405914804665e+00, -8.609335205406929e+00, 0.000000000000000e+00, -8.503915179086963e+00, -3.169730561252946e+00, 0.000000000000000e+00, -3.127847343616536e+00, -7.787782207445121e+00, 0.000000000000000e+00, -7.583622633908059e+00, -8.285665522537355e+00, 0.000000000000000e+00, -2.145606044114186e+01, -8.285665522537375e+00, 0.000000000000000e+00, -2.145606044114191e+01, -3.606609779439472e-06, 0.000000000000000e+00, -3.609799680033345e-06, -3.610507487690617e-06, 0.000000000000000e+00, -3.613571162790701e-06, -3.606782803269967e-06, 0.000000000000000e+00, -3.609898118312190e-06, -3.610127785802671e-06, 0.000000000000000e+00, -3.613324752275701e-06, -3.608640344641789e-06, 0.000000000000000e+00, -3.611699965765432e-06, -3.608640344641789e-06, 0.000000000000000e+00, -3.611699965765432e-06, -1.034856402722312e-04, 0.000000000000000e+00, -1.035036915269572e-04, -1.015320029468047e-04, 0.000000000000000e+00, -1.016176485409786e-04, -1.032869397802874e-04, 0.000000000000000e+00, -1.033764450340282e-04, -1.015753933550872e-04, 0.000000000000000e+00, -1.016278717086573e-04, -1.025611798207150e-04, 0.000000000000000e+00, -1.025409997691476e-04, -1.025611798207150e-04, 0.000000000000000e+00, -1.025409997691476e-04, -1.946420222028643e-02, 0.000000000000000e+00, -1.968973473806945e-02, -1.832781518444631e-02, 0.000000000000000e+00, -1.835435155080313e-02, -2.706296325302159e-02, 0.000000000000000e+00, -2.417815263505421e-02, -3.071973247900855e-02, 0.000000000000000e+00, -2.684280404390718e-02, -1.735208099639541e-02, 0.000000000000000e+00, -2.100078617812710e-02, -1.735208099639541e-02, 0.000000000000000e+00, -2.100078617812710e-02, -2.294825990886845e+00, 0.000000000000000e+00, -2.347628776362161e+00, -8.973638857806937e-01, 0.000000000000000e+00, -8.858913487095147e-01, -2.500449074432122e+00, 0.000000000000000e+00, -2.480734622132536e+00, -2.241327844819293e-04, 0.000000000000000e+00, -2.245740416252768e-04, -2.661162202354096e+00, 0.000000000000000e+00, -3.184174089405674e+00, -2.661162202354096e+00, 0.000000000000000e+00, -3.184174089405674e+00, -1.101066273671141e+01, 0.000000000000000e+00, -9.529437246285475e+00, -9.410409066502313e+00, 0.000000000000000e+00, -8.690194244163006e+00, -5.324135683638563e+01, 0.000000000000000e+00, -5.894970203156601e+01, -3.362123534515393e+00, 0.000000000000000e+00, -3.237850097415556e+00, -2.666580996592375e+01, 0.000000000000000e+00, -2.576117006898322e+01, -2.666580996592367e+01, 0.000000000000000e+00, -2.576117006898320e+01, -2.719909332522027e-02, 0.000000000000000e+00, -2.681438344309264e-02, -2.595065574068393e-02, 0.000000000000000e+00, -2.560284905172735e-02, -2.637415372063499e-02, 0.000000000000000e+00, -2.601675166135449e-02, -2.674098729766361e-02, 0.000000000000000e+00, -2.636737158905680e-02, -2.655647964618523e-02, 0.000000000000000e+00, -2.619084095299321e-02, -2.655647964618523e-02, 0.000000000000000e+00, -2.619084095299321e-02, -3.099002238650567e-02, 0.000000000000000e+00, -3.058882650891133e-02, -3.107923071286202e-02, 0.000000000000000e+00, -3.072606159043666e-02, -3.069593212106605e-02, 0.000000000000000e+00, -3.036030864561689e-02, -3.087375838994139e-02, 0.000000000000000e+00, -3.050976670249249e-02, -3.082497417426892e-02, 0.000000000000000e+00, -3.044732977278988e-02, -3.082497417426892e-02, 0.000000000000000e+00, -3.044732977278988e-02, -1.503112244045383e-02, 0.000000000000000e+00, -1.500857584699954e-02, -4.420612670148151e-01, 0.000000000000000e+00, -4.344303602202828e-01, -2.480288048515355e-01, 0.000000000000000e+00, -2.408988360359841e-01, -1.170248534694352e-01, 0.000000000000000e+00, -1.150519188548597e-01, -1.639521041053949e-01, 0.000000000000000e+00, -1.647394997720790e-01, -1.639521041053950e-01, 0.000000000000000e+00, -1.647394997720790e-01, -4.285781962433882e-02, 0.000000000000000e+00, -4.216487976694668e-02, -2.942008319779092e+00, 0.000000000000000e+00, -2.937963351062596e+00, -2.657686501791428e+00, 0.000000000000000e+00, -2.696249182447155e+00, -1.588464634507889e-01, 0.000000000000000e+00, -1.522459918913419e-01, -3.576382099222981e+00, 0.000000000000000e+00, -4.368474479064521e+00, -3.576382099222981e+00, 0.000000000000000e+00, -4.368474479064525e+00, -6.290409495775783e+00, 0.000000000000000e+00, -6.383578888725138e+00, -3.432116185717440e+01, 0.000000000000000e+00, -6.071486134243690e+01, -2.101185681147618e+01, 0.000000000000000e+00, -2.232873618161211e+01, -3.964498444439685e+00, 0.000000000000000e+00, -3.899534579006757e+00, -5.466079874695419e+01, 0.000000000000000e+00, -2.687511469708808e+01, -5.466079874695428e+01, 0.000000000000000e+00, -2.687511469708817e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
