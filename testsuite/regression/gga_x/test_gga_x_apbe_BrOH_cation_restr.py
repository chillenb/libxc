
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_apbe_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_apbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.113600101731391e+01, -2.113602418379087e+01, -2.113620276650237e+01, -2.113585654008124e+01, -2.113602720501209e+01, -2.113602720501209e+01, -3.513987164202711e+00, -3.513942669191039e+00, -3.513000263602436e+00, -3.515306211809343e+00, -3.514018523400956e+00, -3.514018523400956e+00, -7.089287838296959e-01, -7.090302580950029e-01, -7.134001882919141e-01, -7.181587641280949e-01, -7.162185160021016e-01, -7.162185160021016e-01, -2.210366610207342e-01, -2.221399103044161e-01, -8.173950104250305e-01, -1.862597767552536e-01, -1.998460871799693e-01, -1.998460871799693e-01, -1.008841461186323e-02, -1.061771049300290e-02, -5.782346928631397e-02, -5.828435144263780e-03, -7.322933827146362e-03, -7.322933827146362e-03, -5.070115180344787e+00, -5.069254203972284e+00, -5.070087520577694e+00, -5.069327264823076e+00, -5.069672132682467e+00, -5.069672132682467e+00, -2.156625616500877e+00, -2.166188453028206e+00, -2.159060795685281e+00, -2.167521462991134e+00, -2.160702435160219e+00, -2.160702435160219e+00, -5.867762709511657e-01, -6.048472345347754e-01, -5.478799463075794e-01, -5.397479378147535e-01, -5.920630535857631e-01, -5.920630535857631e-01, -1.409546775238587e-01, -2.368861451533480e-01, -1.315406723611619e-01, -1.819386838869123e+00, -1.581009861920937e-01, -1.581009861920937e-01, -4.497260220807747e-03, -5.697776472350475e-03, -4.356447485379484e-03, -9.148969114522151e-02, -5.248181650697729e-03, -5.248181650697729e-03, -5.514242629510275e-01, -5.556879689391411e-01, -5.542120852576709e-01, -5.529668417743164e-01, -5.535909735620949e-01, -5.535909735620949e-01, -5.342908747991257e-01, -5.188503468055310e-01, -5.233891695598828e-01, -5.272198835033244e-01, -5.250670592417845e-01, -5.250670592417845e-01, -6.354309197450912e-01, -2.829846464075447e-01, -3.184809965432024e-01, -3.723539120500660e-01, -3.434314079712146e-01, -3.434314079712146e-01, -4.789691053863747e-01, -5.543930394029823e-02, -7.480668953541060e-02, -3.471327611522634e-01, -1.132022426367353e-01, -1.132022426367353e-01, -1.423203172862591e-02, -1.523271150023957e-03, -3.197235022898817e-03, -1.071514529134021e-01, -4.856255087251838e-03, -4.856255087251835e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_apbe_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_apbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.496680115116128e+01, -2.496690275595978e+01, -2.496732466292422e+01, -2.496581361965794e+01, -2.496660960452591e+01, -2.496660960452591e+01, -4.005149581415666e+00, -4.005196971966568e+00, -4.006392085427914e+00, -4.005076563700737e+00, -4.005302950501421e+00, -4.005302950501421e+00, -7.545129736990461e-01, -7.533214525750929e-01, -7.269235142253452e-01, -7.331372013118057e-01, -7.319661492454267e-01, -7.319661492454267e-01, -2.089473469666105e-01, -2.096205649950287e-01, -8.840027471662018e-01, -1.892097308438163e-01, -1.944690797752383e-01, -1.944690797752383e-01, -1.343728815712193e-02, -1.414025256258658e-02, -7.505469199862294e-02, -7.768686947980968e-03, -9.758188167575371e-03, -9.758188167575371e-03, -6.163764793720677e+00, -6.166701541991288e+00, -6.163895637106640e+00, -6.166488232086833e+00, -6.165255343893571e+00, -6.165255343893571e+00, -2.179336583353910e+00, -2.195758397749414e+00, -2.166902260115165e+00, -2.181133676178509e+00, -2.194747016632662e+00, -2.194747016632662e+00, -6.805149546533358e-01, -7.719117800606928e-01, -6.258044046514528e-01, -6.785791886534228e-01, -6.950057135378661e-01, -6.950057135378661e-01, -1.617904918172265e-01, -2.321522261336336e-01, -1.532309722723230e-01, -2.327413141746895e+00, -1.691968786826088e-01, -1.691968786826088e-01, -5.994997114057030e-03, -7.594440747899685e-03, -5.805690180966959e-03, -1.131893658313733e-01, -6.994109071042177e-03, -6.994109071042177e-03, -7.239243345277022e-01, -7.105911807360021e-01, -7.151760382150878e-01, -7.190511433600254e-01, -7.171033069844930e-01, -7.171033069844930e-01, -7.071323693939395e-01, -5.545457258326869e-01, -5.921156343061680e-01, -6.349998725754412e-01, -6.126432434178463e-01, -6.126432434178463e-01, -8.076851749857806e-01, -2.683771150998258e-01, -3.015166844407558e-01, -3.892734880952656e-01, -3.369826701700796e-01, -3.369826701700796e-01, -5.099877530036468e-01, -7.220213140159079e-02, -9.548900907308749e-02, -3.804288821912115e-01, -1.329833026095859e-01, -1.329833026095859e-01, -1.894091360378837e-02, -2.030918391769380e-03, -4.262273610636103e-03, -1.276517425167839e-01, -6.471920205738264e-03, -6.471920205738259e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_apbe_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_apbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-8.138688803696496e-09, -8.138637838851551e-09, -8.138319359223176e-09, -8.139079502298781e-09, -8.138694267298593e-09, -8.138694267298593e-09, -1.088545539508978e-05, -1.088585268389390e-05, -1.089396850499386e-05, -1.087159656943871e-05, -1.088488212703063e-05, -1.088488212703063e-05, -6.802741302644825e-03, -6.803674907985350e-03, -6.727162200966895e-03, -6.548092365835066e-03, -6.617740051389928e-03, -6.617740051389928e-03, -6.360395477917403e-01, -6.379668502099046e-01, -3.822109421334342e-03, -8.022936830363396e-01, -7.818299581364943e-01, -7.818299581364941e-01, -2.058581933993070e+00, -2.174947771387781e+00, -1.225176235409102e+00, -1.870211403920734e+00, -2.376274571779945e+00, -2.376274571779950e+00, -2.412460964206720e-06, -2.413059388101435e-06, -2.412470666118288e-06, -2.412999242795005e-06, -2.412774354411012e-06, -2.412774354411012e-06, -8.066357974944638e-05, -7.921219552436364e-05, -8.035795506931112e-05, -7.909291529011811e-05, -7.999153901810741e-05, -7.999153901810741e-05, -1.385766645769251e-02, -1.151671756595730e-02, -1.839771806195525e-02, -1.835579167447623e-02, -1.327027235579125e-02, -1.327027235579125e-02, -8.808942648186600e-01, -3.799415394598393e-01, -9.660224845169657e-01, -1.404344672440926e-04, -1.079802730994408e+00, -1.079802730994408e+00, -2.464154964772128e+00, -2.201100895153379e+00, -1.382395381615078e+01, -1.398922708348647e+00, -6.433070346124987e+00, -6.433070346124976e+00, -1.633030285048659e-02, -1.614227631456950e-02, -1.620794607336044e-02, -1.626316969374122e-02, -1.623559009926741e-02, -1.623559009926741e-02, -1.841628959075088e-02, -2.366756329487954e-02, -2.221250633354655e-02, -2.076068931823661e-02, -2.153368178219238e-02, -2.153368178219238e-02, -9.481762964645059e-03, -2.297118824226985e-01, -1.622281314193088e-01, -8.999807130517647e-02, -1.253124056327278e-01, -1.253124056327278e-01, -3.264271089306305e-02, -1.116473501132456e+00, -1.118675008756555e+00, -1.167549344305061e-01, -1.569444721089015e+00, -1.569444721089016e+00, -1.659494395252608e+00, -1.080065092881560e+01, -5.227391166831233e+00, -1.581678806082798e+00, -8.125493639261119e+00, -8.125493639261141e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
