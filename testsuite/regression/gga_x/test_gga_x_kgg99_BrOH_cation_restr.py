
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_kgg99_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_kgg99", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.004323132519399e+01, -2.004324648581969e+01, -2.004339648999603e+01, -2.004316923112019e+01, -2.004327656169923e+01, -2.004327656169923e+01, -3.346233522125170e+00, -3.346181348821754e+00, -3.345057377335547e+00, -3.347647204113026e+00, -3.346251631328555e+00, -3.346251631328555e+00, -6.811035776672223e-01, -6.813709503911172e-01, -6.902602280815363e-01, -6.946242737604402e-01, -6.926070595593198e-01, -6.926070595593198e-01, -2.247010208473345e-01, -2.247225408796011e-01, -7.835573851445705e-01, -2.055596279302393e-01, -2.109156589633829e-01, -2.109156589633829e-01, 2.826057273524598e-04, 2.974542321707155e-04, -1.334765196164104e-01, 1.632136413987332e-04, 2.050904329598024e-04, 2.050904329598024e-04, -4.792421518119154e+00, -4.791263023749277e+00, -4.792381133907171e+00, -4.791358210543232e+00, -4.791827106518715e+00, -4.791827106518715e+00, -2.090032313597528e+00, -2.098017542728787e+00, -2.095375097926704e+00, -2.102409379530971e+00, -2.091863307698080e+00, -2.091863307698080e+00, -5.576191583248477e-01, -5.686914135236226e-01, -5.215907622002196e-01, -5.083057057576169e-01, -5.618554113316362e-01, -5.618554113316362e-01, -1.848209840446060e-01, -2.518682980259297e-01, -1.779371093864641e-01, -1.710196339804137e+00, -1.854137558328290e-01, -1.854137558328290e-01, 1.259301860149265e-04, 1.595557741619646e-04, 1.220040143722300e-04, -1.489726691248696e-01, 1.469770109518098e-04, 1.469770109518098e-04, -5.169095508062161e-01, -5.223589212534279e-01, -5.204663086787897e-01, -5.188759772601096e-01, -5.196726888839259e-01, -5.196726888839259e-01, -5.004264785546222e-01, -4.981854457017240e-01, -4.988504150914734e-01, -4.988629402027375e-01, -4.986255739391159e-01, -4.986255739391159e-01, -5.977054632469033e-01, -2.894547114174993e-01, -3.166059468215779e-01, -3.587018568409424e-01, -3.351769169994045e-01, -3.351769169994044e-01, -4.601410289189045e-01, -1.341955309962630e-01, -1.459096456144542e-01, -3.321774409983697e-01, -1.561537598694433e-01, -1.561537598694432e-01, -9.006446160653689e-02, 4.265028062064305e-05, 8.952482604789809e-05, -1.532356313642844e-01, 1.359997098199073e-04, 1.359997098199072e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_kgg99_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_kgg99", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.306430557562265e+01, -2.306440665434782e+01, -2.306481691740292e+01, -2.306331389453742e+01, -2.306410699935903e+01, -2.306410699935903e+01, -3.685926698138343e+00, -3.685980142500841e+00, -3.687307320470431e+00, -3.685701487083434e+00, -3.686079630454214e+00, -3.686079630454214e+00, -6.882632599416206e-01, -6.869792698619207e-01, -6.568795451255478e-01, -6.628443789291691e-01, -6.619884954015444e-01, -6.619884954015444e-01, -1.684825034826999e-01, -1.710522623441224e-01, -8.083628462926078e-01, -1.305655494265638e-01, -1.444994805499290e-01, -1.444994805499290e-01, 3.768076364699464e-04, 3.966056428942874e-04, -5.159163941138191e-02, 2.176181885316443e-04, 2.734539106130699e-04, 2.734539106130699e-04, -5.711440659437480e+00, -5.714556617064223e+00, -5.711578188704458e+00, -5.714329005535736e+00, -5.713022836646810e+00, -5.713022836646810e+00, -1.964324359309947e+00, -1.981081474314737e+00, -1.948456391129792e+00, -1.963122745210181e+00, -1.981431330770073e+00, -1.981431330770073e+00, -6.274433438896811e-01, -7.190493324414814e-01, -5.760604982237599e-01, -6.310711904348334e-01, -6.416226728461696e-01, -6.416226728461696e-01, -9.785288967345955e-02, -1.701073865657025e-01, -9.193142864425760e-02, -2.168587255732247e+00, -1.090372540236367e-01, -1.090372540236367e-01, 1.679069146865686e-04, 2.127410322159528e-04, 1.626720191629733e-04, -6.817269838519427e-02, 1.959693479357464e-04, 1.959693479357464e-04, -6.764215407362582e-01, -6.620728184304870e-01, -6.670069108978354e-01, -6.711788004930577e-01, -6.690819288252028e-01, -6.690819288252028e-01, -6.612978108974896e-01, -5.061987608721056e-01, -5.444759032577268e-01, -5.878172810986835e-01, -5.652260787533691e-01, -5.652260787533691e-01, -7.520411442082121e-01, -2.132476095384339e-01, -2.570386760549022e-01, -3.539395225954157e-01, -2.998390073444678e-01, -2.998390073444676e-01, -4.652416562006362e-01, -5.086891606144800e-02, -6.078512876733774e-02, -3.485026311308101e-01, -7.950877917760560e-02, -7.950877917760558e-02, -2.515535155525593e-02, 5.686704082752408e-05, 1.193664347305308e-04, -7.605218093443060e-02, 1.813329464265431e-04, 1.813329464265429e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_kgg99_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_kgg99", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-9.266546428603284e-09, -9.266487518535547e-09, -9.266122396684832e-09, -9.267000983881461e-09, -9.266555294354016e-09, -9.266555294354016e-09, -1.241466899564583e-05, -1.241510129267654e-05, -1.242387904522364e-05, -1.239919871500170e-05, -1.241399025428399e-05, -1.241399025428399e-05, -7.842435474733199e-03, -7.847439923415318e-03, -7.902683675823247e-03, -7.683566198606515e-03, -7.760179065836471e-03, -7.760179065836471e-03, -9.723508000997988e-01, -9.475820305380528e-01, -4.388824915207228e-03, -1.947022060832670e+00, -1.484780751455275e+00, -1.484780751455275e+00, 0.000000000000000e+00, 0.000000000000000e+00, -7.577774160996326e+01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -2.744427007565533e-06, -2.745051459513266e-06, -2.744435728750472e-06, -2.744987326878129e-06, -2.744754893637673e-06, -2.744754893637673e-06, -9.528864883040863e-05, -9.337129258128561e-05, -9.543191034477829e-05, -9.373060016816679e-05, -9.415874128649012e-05, -9.415874128649012e-05, -1.578903001910799e-02, -1.306823265654479e-02, -2.097925943128366e-02, -2.085106198180614e-02, -1.511244501065607e-02, -1.511244501065607e-02, -5.005107360473968e+00, -7.522796874409490e-01, -6.335835012340494e+00, -1.593213552441168e-04, -3.586355895960803e+00, -3.586355895960803e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -2.074597014417854e+01, 0.000000000000000e+00, 0.000000000000000e+00, -1.847221167025870e-02, -1.831382239719376e-02, -1.837239441744800e-02, -1.841922087694828e-02, -1.839616397985769e-02, -1.839616397985769e-02, -2.080627188603647e-02, -2.725314238520876e-02, -2.534710244027753e-02, -2.362409352083442e-02, -2.452854629184287e-02, -2.452854629184287e-02, -1.076260521711726e-02, -3.641541631552034e-01, -2.175379611107965e-01, -1.043805369586077e-01, -1.523982129298476e-01, -1.523982129298476e-01, -3.762700286374267e-02, -8.327246870636327e+01, -3.518142237514545e+01, -1.337349444329385e-01, -1.125056479928394e+01, -1.125056479928394e+01, -4.484560754836125e+03, 0.000000000000000e+00, 0.000000000000000e+00, -1.333187396386260e+01, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
