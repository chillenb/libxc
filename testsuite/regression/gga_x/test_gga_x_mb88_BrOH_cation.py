
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_mb88_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_mb88", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.019634223244548e+01, -2.019638789440289e+01, -2.019662538621326e+01, -2.019594531887950e+01, -2.019629675703266e+01, -2.019629675703266e+01, -3.310273619296016e+00, -3.310264631344874e+00, -3.310138084683661e+00, -3.310986914545205e+00, -3.310342885229443e+00, -3.310342885229443e+00, -6.486174541453754e-01, -6.482082803782780e-01, -6.392842781435295e-01, -6.441376547797850e-01, -6.449639078702822e-01, -6.449639078702822e-01, -1.853532099894144e-01, -1.867586303965701e-01, -7.536454284988714e-01, -1.574287455961779e-01, -1.823709225053142e-01, -1.823709225053142e-01, -6.259555579866076e-02, -6.242906670983156e-02, -9.708113120783718e-02, -5.843029830666978e-02, -5.866352742783765e-02, -5.866352742783762e-02, -4.898938354689455e+00, -4.899317858543059e+00, -4.898961672156522e+00, -4.899296601543040e+00, -4.899127491988410e+00, -4.899127491988410e+00, -1.924200022450623e+00, -1.935855848833897e+00, -1.919327153579235e+00, -1.929593692327149e+00, -1.933055547123907e+00, -1.933055547123907e+00, -5.566394262165861e-01, -5.952169493024522e-01, -5.168947722655606e-01, -5.284724198226420e-01, -5.650606656509365e-01, -5.650606656509365e-01, -1.340905719145349e-01, -1.978502133195968e-01, -1.286328952608014e-01, -1.791987354016595e+00, -1.383879884423804e-01, -1.383879884423804e-01, -5.298779696387441e-02, -5.626566409219105e-02, -3.662512547196695e-02, -1.066538610235666e-01, -4.460332622378901e-02, -4.460332622378903e-02, -5.483291934295447e-01, -5.472490441553401e-01, -5.476330904284872e-01, -5.479435822021114e-01, -5.477881337010612e-01, -5.477881337010612e-01, -5.328607087532504e-01, -4.756093255609887e-01, -4.915554614143093e-01, -5.076031018370124e-01, -4.992995640506203e-01, -4.992995640506203e-01, -6.243811749863198e-01, -2.366190221807503e-01, -2.713762998077347e-01, -3.378789555229802e-01, -3.013303085258495e-01, -3.013303085258495e-01, -4.383140724212417e-01, -9.788639952538916e-02, -1.050402253791389e-01, -3.217494879961535e-01, -1.126951510918361e-01, -1.126951510918361e-01, -6.944426560390277e-02, -3.309767219764807e-02, -4.292310971020902e-02, -1.101418120331407e-01, -4.196063595479756e-02, -4.196063595479754e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_mb88_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_mb88", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.597045921017497e+01, -2.597042690987535e+01, -2.597055743061425e+01, -2.597049825537525e+01, -2.597086906901069e+01, -2.597094553479425e+01, -2.596975990208125e+01, -2.596953178318191e+01, -2.597051792159969e+01, -2.597009499914028e+01, -2.597051792159969e+01, -2.597009499914028e+01, -4.202955829735028e+00, -4.203013715026553e+00, -4.202983401444119e+00, -4.203040479103096e+00, -4.203644045479853e+00, -4.203841713630903e+00, -4.203177139824604e+00, -4.203362985422887e+00, -4.202207602819456e+00, -4.204029270678451e+00, -4.202207602819456e+00, -4.204029270678451e+00, -7.974167837376022e-01, -8.019710210413301e-01, -7.956971249310597e-01, -8.012855787165083e-01, -7.727241919779844e-01, -7.649101170961543e-01, -7.743993409207465e-01, -7.769061954522369e-01, -8.101828436948457e-01, -7.340282557563947e-01, -8.101828436948457e-01, -7.340282557563947e-01, -1.862594494726443e-01, -1.952142789672657e-01, -1.895360816060233e-01, -1.998365434311374e-01, -9.168693459476767e-01, -9.538618378677430e-01, -1.331818313763123e-01, -1.353019331144430e-01, -1.949528714441498e-01, -8.969310458615340e-02, -1.949528714441498e-01, -8.969310458615336e-02, -1.400047404145576e-02, -1.430221023396681e-02, -1.408842437459538e-02, -1.441796187568921e-02, -3.100327003745113e-02, -3.219635190517833e-02, -1.206602919236174e-02, -1.205793438629446e-02, -1.349787790647453e-02, -9.615271151152476e-03, -1.349787790647454e-02, -9.615271151152431e-03, -6.359602238935265e+00, -6.358053320827040e+00, -6.361419032976130e+00, -6.359808443464505e+00, -6.359706748465002e+00, -6.358116189186699e+00, -6.361265639731275e+00, -6.359710616914464e+00, -6.360530180288588e+00, -6.358934490428656e+00, -6.360530180288588e+00, -6.358934490428656e+00, -2.301136327985758e+00, -2.301013847995812e+00, -2.320379986942399e+00, -2.319694335710385e+00, -2.280797409535043e+00, -2.286563201688284e+00, -2.297489094009147e+00, -2.303411695563176e+00, -2.326955032370307e+00, -2.312910139419815e+00, -2.326955032370307e+00, -2.312910139419815e+00, -7.121648252121562e-01, -7.103170662665870e-01, -7.836960785771736e-01, -7.841855595827794e-01, -6.437053426297074e-01, -6.686339813229928e-01, -6.812195900412041e-01, -7.037000426728099e-01, -7.424624959762589e-01, -7.049157353343223e-01, -7.424624959762589e-01, -7.049157353343223e-01, -8.310740344832064e-02, -8.421847661831566e-02, -1.821914008020668e-01, -1.832796167788588e-01, -7.380655159855237e-02, -7.867581463484877e-02, -2.362294233913107e+00, -2.361253812678532e+00, -9.972411950794079e-02, -1.093267078716594e-01, -9.972411950794079e-02, -1.093267078716594e-01, -1.039460265914239e-02, -1.078485323130083e-02, -1.153990212543643e-02, -1.175398803397922e-02, -7.822787497416642e-03, -7.825433708946609e-03, -4.847762015068379e-02, -4.876200404060992e-02, -8.869051379047400e-03, -9.848778400999750e-03, -8.869051379047428e-03, -9.848778400999743e-03, -7.265425093535954e-01, -7.293963560834784e-01, -7.197252197053439e-01, -7.226145371740607e-01, -7.221019470246857e-01, -7.249937586385725e-01, -7.240952230930280e-01, -7.269476160164915e-01, -7.230969456433300e-01, -7.259684535690243e-01, -7.230969456433300e-01, -7.259684535690243e-01, -7.078503889125151e-01, -7.101966984805894e-01, -5.862186291423247e-01, -5.890074487687196e-01, -6.208401028631270e-01, -6.238505416571395e-01, -6.557202248435828e-01, -6.581044917173229e-01, -6.381032526238865e-01, -6.405655443691401e-01, -6.381032526238865e-01, -6.405655443691401e-01, -8.206164186771201e-01, -8.221692922867141e-01, -2.389901584859669e-01, -2.406620112640905e-01, -2.961748826419732e-01, -2.998495804567964e-01, -4.114758509429670e-01, -4.139171204416610e-01, -3.515241230333101e-01, -3.515503265504928e-01, -3.515241230333101e-01, -3.515503265504928e-01, -5.384344426583861e-01, -5.425851336197652e-01, -3.084369121208513e-02, -3.097863933369023e-02, -3.865608585594016e-02, -3.977429473785792e-02, -3.987986902759785e-01, -4.052797884785852e-01, -6.226475761004817e-02, -6.724250653070706e-02, -6.226475761004818e-02, -6.724250653070704e-02, -1.635183165241880e-02, -1.648522097584088e-02, -6.182811859517229e-03, -5.593222432474739e-03, -8.334357536251827e-03, -8.405216100706745e-03, -5.945926079459420e-02, -6.057271963849465e-02, -7.707467813662067e-03, -9.516013087847008e-03, -7.707467813662088e-03, -9.516013087847008e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_mb88_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_mb88", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.851062112159293e-09, 0.000000000000000e+00, -4.851087971205199e-09, -4.851010352683768e-09, 0.000000000000000e+00, -4.851050362963897e-09, -4.850817781092256e-09, 0.000000000000000e+00, -4.850781978295744e-09, -4.851403018528813e-09, 0.000000000000000e+00, -4.851527704975951e-09, -4.851032604487472e-09, 0.000000000000000e+00, -4.851209743797852e-09, -4.851032604487472e-09, 0.000000000000000e+00, -4.851209743797852e-09, -6.744024004701989e-06, 0.000000000000000e+00, -6.745088188611267e-06, -6.744026825766870e-06, 0.000000000000000e+00, -6.745187560677193e-06, -6.745069955470028e-06, 0.000000000000000e+00, -6.745186546878587e-06, -6.738909669712487e-06, 0.000000000000000e+00, -6.739296370111726e-06, -6.748262178256018e-06, 0.000000000000000e+00, -6.739676374962813e-06, -6.748262178256018e-06, 0.000000000000000e+00, -6.739676374962813e-06, -4.667925106941783e-03, 0.000000000000000e+00, -4.621330464701712e-03, -4.687773644213291e-03, 0.000000000000000e+00, -4.630341947002490e-03, -4.965818137323775e-03, 0.000000000000000e+00, -5.053573710388896e-03, -4.867891941771289e-03, 0.000000000000000e+00, -4.842073283674468e-03, -4.521024166988643e-03, 0.000000000000000e+00, -5.296496567044199e-03, -4.521024166988643e-03, 0.000000000000000e+00, -5.296496567044199e-03, -8.899557512498036e-01, 0.000000000000000e+00, -7.819901880423782e-01, -8.591335533555676e-01, 0.000000000000000e+00, -7.407258209158049e-01, -2.688877398673744e-03, 0.000000000000000e+00, -2.408542982979428e-03, -2.104110191769422e+00, 0.000000000000000e+00, -2.002967574596568e+00, -7.533735495788220e-01, 0.000000000000000e+00, -5.969183972302091e+00, -7.533735495788217e-01, 0.000000000000000e+00, -5.969183972302090e+00, -2.245643605457617e+04, 0.000000000000000e+00, -1.882119437369721e+04, -1.993930358385653e+04, 0.000000000000000e+00, -1.635416218255737e+04, -1.270869857195365e+02, 0.000000000000000e+00, -1.088707502393163e+02, -9.429367102624227e+04, 0.000000000000000e+00, -9.819725466933685e+04, -3.112361140284021e+04, 0.000000000000000e+00, -2.040774283244252e+05, -3.112361140284022e+04, 0.000000000000000e+00, -2.040774283244252e+05, -1.399677590094064e-06, 0.000000000000000e+00, -1.400994484410567e-06, -1.399248067410650e-06, 0.000000000000000e+00, -1.400579284254160e-06, -1.399645403543037e-06, 0.000000000000000e+00, -1.400974257803842e-06, -1.399276936986441e-06, 0.000000000000000e+00, -1.400597139214428e-06, -1.399463950362399e-06, 0.000000000000000e+00, -1.400786966948067e-06, -1.399463950362399e-06, 0.000000000000000e+00, -1.400786966948067e-06, -6.129431492270544e-05, 0.000000000000000e+00, -6.130619697888725e-05, -5.970341562002496e-05, 0.000000000000000e+00, -5.976413309271854e-05, -6.232048673796902e-05, 0.000000000000000e+00, -6.204165065124677e-05, -6.091608081117941e-05, 0.000000000000000e+00, -6.062247625875259e-05, -5.964583578938117e-05, 0.000000000000000e+00, -6.038944505918692e-05, -5.964583578938117e-05, 0.000000000000000e+00, -6.038944505918692e-05, -8.373493725657551e-03, 0.000000000000000e+00, -8.464514802840733e-03, -6.456228149937485e-03, 0.000000000000000e+00, -6.450605938661575e-03, -1.219992763711650e-02, 0.000000000000000e+00, -1.063513594208143e-02, -1.110982484087273e-02, 0.000000000000000e+00, -9.737351362158170e-03, -7.225725659304283e-03, 0.000000000000000e+00, -8.837617459510479e-03, -7.225725659304287e-03, 0.000000000000000e+00, -8.837617459510479e-03, -6.487940851673472e+00, 0.000000000000000e+00, -6.330866537151503e+00, -7.423979126739425e-01, 0.000000000000000e+00, -7.296235719036727e-01, -9.031177179707285e+00, 0.000000000000000e+00, -7.662330294329621e+00, -7.851377784056688e-05, 0.000000000000000e+00, -7.865894463402418e-05, -4.413740163554569e+00, 0.000000000000000e+00, -3.865494825453044e+00, -4.413740163554569e+00, 0.000000000000000e+00, -3.865494825453044e+00, -2.371100671622015e+05, 0.000000000000000e+00, -2.038198458780945e+05, -1.111193881978569e+05, 0.000000000000000e+00, -1.040595937629715e+05, -4.181724173114445e+05, 0.000000000000000e+00, -3.655431267525419e+05, -3.018307048158623e+01, 0.000000000000000e+00, -2.935369590720007e+01, -3.232215816448696e+05, 0.000000000000000e+00, -1.293561983487326e+05, -3.232215816448693e+05, 0.000000000000000e+00, -1.293561983487326e+05, -9.101885167573145e-03, 0.000000000000000e+00, -8.966552295183091e-03, -9.103090254785116e-03, 0.000000000000000e+00, -8.967795935812962e-03, -9.096000051290293e-03, 0.000000000000000e+00, -8.960801041411948e-03, -9.095153238834322e-03, 0.000000000000000e+00, -8.959931991299616e-03, -9.094990567546842e-03, 0.000000000000000e+00, -8.959793627699820e-03, -9.094990567546842e-03, 0.000000000000000e+00, -8.959793627699820e-03, -1.023871244624421e-02, 0.000000000000000e+00, -1.010521269200108e-02, -1.617288158679892e-02, 0.000000000000000e+00, -1.591819259276144e-02, -1.399987437137467e-02, 0.000000000000000e+00, -1.377496295294805e-02, -1.223200942604569e-02, 0.000000000000000e+00, -1.206767917538388e-02, -1.309106704014110e-02, 0.000000000000000e+00, -1.290568282849131e-02, -1.309106704014110e-02, 0.000000000000000e+00, -1.290568282849131e-02, -5.339453066326708e-03, 0.000000000000000e+00, -5.312311934814196e-03, -3.222926638867329e-01, 0.000000000000000e+00, -3.159312416460790e-01, -1.709638896424855e-01, 0.000000000000000e+00, -1.653392797766051e-01, -6.413167980029098e-02, 0.000000000000000e+00, -6.281430383624059e-02, -1.039712399933102e-01, 0.000000000000000e+00, -1.042492004262872e-01, -1.039712399933102e-01, 0.000000000000000e+00, -1.042492004262872e-01, -2.254832220096609e-02, 0.000000000000000e+00, -2.199758480971568e-02, -1.307920067725956e+02, 0.000000000000000e+00, -1.283073117880565e+02, -5.550738266519227e+01, 0.000000000000000e+00, -5.075567017572993e+01, -7.831410001223549e-02, 0.000000000000000e+00, -7.406140267641255e-02, -1.587510013669669e+01, 0.000000000000000e+00, -1.403209674837818e+01, -1.587510013669669e+01, 0.000000000000000e+00, -1.403209674837819e+01, -7.556207325328658e+03, 0.000000000000000e+00, -6.866938471442681e+03, -6.990638700923804e+06, 0.000000000000000e+00, -8.137297806111690e+06, -7.858538280114823e+05, 0.000000000000000e+00, -6.695545506192605e+05, -1.854691873972480e+01, 0.000000000000000e+00, -1.757594759903747e+01, -4.631230918642560e+05, 0.000000000000000e+00, -1.678371635567706e+05, -4.631230918642569e+05, 0.000000000000000e+00, -1.678371635567712e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
