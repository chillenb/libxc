
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_bayesian_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_bayesian", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.082589607216210e+01, -2.082592087690771e+01, -2.082610599717160e+01, -2.082569833274151e+01, -2.082590853091798e+01, -2.082590853091798e+01, -3.451917840151560e+00, -3.451889214973602e+00, -3.451245285926120e+00, -3.453087376235537e+00, -3.451917821995561e+00, -3.451917821995561e+00, -6.941917925990300e-01, -6.942771512413440e-01, -6.989049246614818e-01, -7.030679426487599e-01, -6.942188649406991e-01, -6.942188649406991e-01, -2.181918438739804e-01, -2.187433786515021e-01, -8.075448539428141e-01, -1.881827543428101e-01, -2.183261282036623e-01, -2.183261282036623e-01, -2.648953723696067e-02, -2.762208148502782e-02, -9.145391481083454e-02, -1.340698786601807e-02, -2.733677010000610e-02, -2.733677010000610e-02, -5.007891514334973e+00, -5.007395629617513e+00, -5.007846806700192e+00, -5.007461114048952e+00, -5.007628345541869e+00, -5.007628345541869e+00, -2.104536450965430e+00, -2.113702383583614e+00, -2.106539655161729e+00, -2.113650181559951e+00, -2.108217168376390e+00, -2.108217168376390e+00, -5.705061346990550e-01, -5.939038968444096e-01, -5.434276920766736e-01, -5.455850995596897e-01, -5.881680406256979e-01, -5.881680406256979e-01, -1.608695878408510e-01, -2.433733471768702e-01, -1.571820959463234e-01, -1.806653069345238e+00, -1.708300877178386e-01, -1.708300877178386e-01, -1.294523321593261e-02, -1.470524589070028e-02, -1.103496331801391e-02, -1.149195800805708e-01, -1.339587858364984e-02, -1.339587858364982e-02, -5.584307365466484e-01, -5.601660817374743e-01, -5.595146330911188e-01, -5.590301857534350e-01, -5.592693727811566e-01, -5.592693727811566e-01, -5.397784336633409e-01, -5.135255678382292e-01, -5.201362436507688e-01, -5.265603824259985e-01, -5.230450596338324e-01, -5.230450596338324e-01, -6.235552886429419e-01, -2.849901955095562e-01, -3.156853622184684e-01, -3.646324160157587e-01, -3.378260100420066e-01, -3.378260100420066e-01, -4.661740117864197e-01, -8.738356178776900e-02, -1.085483756392597e-01, -3.344092109608993e-01, -1.352006767557803e-01, -1.352006767557803e-01, -3.078294522117040e-02, -4.162924855655295e-03, -7.807549959154322e-03, -1.287391634657819e-01, -1.142090738245638e-02, -1.142090738245637e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_bayesian_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_bayesian", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.511049813467193e+01, -2.511058939031629e+01, -2.511099756929421e+01, -2.510950321236318e+01, -2.511054625086891e+01, -2.511054625086891e+01, -4.020659640538651e+00, -4.020704843632968e+00, -4.022113211016116e+00, -4.020539239171607e+00, -4.020700017180080e+00, -4.020700017180080e+00, -7.432797557579038e-01, -7.419780790645804e-01, -7.091059438681824e-01, -7.153232326856561e-01, -7.428070588869293e-01, -7.428070588869293e-01, -1.952771065728042e-01, -1.978267615486052e-01, -9.098568697152024e-01, -1.535195596958728e-01, -1.960293862764975e-01, -1.960293862764975e-01, -3.203446675792344e-02, -3.325431029813288e-02, -9.041934303332100e-02, -1.710690678952349e-02, -3.291387681269962e-02, -3.291387681269962e-02, -6.200651353659829e+00, -6.203553689235107e+00, -6.200947535480241e+00, -6.203204277746882e+00, -6.202140514802264e+00, -6.202140514802264e+00, -2.140332021634707e+00, -2.158159576103874e+00, -2.130503386710519e+00, -2.144334281238508e+00, -2.165445236154909e+00, -2.165445236154909e+00, -6.769230024102689e-01, -7.686583953436098e-01, -6.400726944522118e-01, -6.939379096160715e-01, -7.077717799922315e-01, -7.077717799922315e-01, -1.344331943039719e-01, -2.027617401361343e-01, -1.308058245351650e-01, -2.337702656779917e+00, -1.393733291112376e-01, -1.393733291112376e-01, -1.653268420743888e-02, -1.866712470253728e-02, -1.402495181771429e-02, -1.042919986074706e-01, -1.700132342037989e-02, -1.700132342037985e-02, -7.385570126412819e-01, -7.277457439768613e-01, -7.316926111622760e-01, -7.347004757836838e-01, -7.332023154679260e-01, -7.332023154679260e-01, -7.158607016977550e-01, -5.681862544825554e-01, -6.085170664141958e-01, -6.489510762194816e-01, -6.282258533035884e-01, -6.282258533035885e-01, -8.046976283080534e-01, -2.483188629066330e-01, -2.943184723105545e-01, -3.915336730233068e-01, -3.379191322736541e-01, -3.379191322736541e-01, -5.101004025724208e-01, -8.886905225772500e-02, -1.023802499665444e-01, -3.779323075203068e-01, -1.148503525679130e-01, -1.148503525679130e-01, -3.691199509500742e-02, -5.464555264772196e-03, -1.011829490759894e-02, -1.092540202493884e-01, -1.454098175634808e-02, -1.454098175634805e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_bayesian_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_bayesian", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-6.728488690893018e-09, -6.728433552298909e-09, -6.728124726720831e-09, -6.729028877002934e-09, -6.728460138003934e-09, -6.728460138003934e-09, -9.313095111726894e-06, -9.313193976722365e-06, -9.314364994836138e-06, -9.304440895753064e-06, -9.312987274120090e-06, -9.312987274120090e-06, -6.200767314869107e-03, -6.208441324165316e-03, -6.333944850333263e-03, -6.170073220753217e-03, -6.203662056944895e-03, -6.203662056944895e-03, -7.445892251022147e-01, -7.302260975962298e-01, -3.223313883482869e-03, -1.464185882974017e+00, -7.406029364603397e-01, -7.406029364603397e-01, -1.466641433070924e+02, -1.391605629378309e+02, -1.255941495205210e+01, -2.605494369282474e+02, -1.447265933978989e+02, -1.447265933978989e+02, -1.930413914313354e-06, -1.929241049521423e-06, -1.930289602619303e-06, -1.929377818456633e-06, -1.929820877895461e-06, -1.929820877895461e-06, -7.687985809872393e-05, -7.529232451482911e-05, -7.696298933725269e-05, -7.572579507172821e-05, -7.567850376672419e-05, -7.567850376672419e-05, -1.220620402007689e-02, -8.767915468768492e-03, -1.496303134698460e-02, -1.295610532850089e-02, -1.060536448882821e-02, -1.060536448882821e-02, -2.559815926290456e+00, -5.140468053170653e-01, -2.838109529779932e+00, -1.024747755536876e-04, -2.135749038305848e+00, -2.135749038305848e+00, -2.827982617632969e+02, -2.450592548087519e+02, -7.211046912873263e+02, -7.593426408781249e+00, -3.602062119605652e+02, -3.602062119605732e+02, -1.019053828845174e-02, -1.092807718774319e-02, -1.068842950310882e-02, -1.047905443032250e-02, -1.058618815233658e-02, -1.058618815233658e-02, -1.153253714806860e-02, -2.007243731929433e-02, -1.797337911505518e-02, -1.592054696450565e-02, -1.700186176298897e-02, -1.700186176298897e-02, -7.286065913933253e-03, -2.621471132906553e-01, -1.638552158769855e-01, -8.124465396209854e-02, -1.174872882170015e-01, -1.174872882170016e-01, -2.987564991290110e-02, -1.256840150966426e+01, -8.108376452952976e+00, -1.092668727525523e-01, -4.914029116267481e+00, -4.914029116267489e+00, -9.943763121045737e+01, -1.431427606036083e+03, -6.574955897748396e+02, -5.993453964663199e+00, -5.664061649045029e+02, -5.664061649045077e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
