
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_lb_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_lb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=False, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.422385030018130e+01, -3.422380996288606e+01, -3.422387790735479e+01, -3.422447285944620e+01, -3.422412599369942e+01, -3.422412599369942e+01, -5.829811654217049e+00, -5.829651292612604e+00, -5.826083489189440e+00, -5.833389412805381e+00, -5.829759914749646e+00, -5.829759914749646e+00, -1.218136195636997e+00, -1.219236279879535e+00, -1.248410775844262e+00, -1.255785912999021e+00, -1.251829253793445e+00, -1.251829253793445e+00, -4.103666109783170e-01, -4.106663783991164e-01, -1.394322359953841e+00, -3.697786518398228e-01, -3.826880279797020e-01, -3.826880279797021e-01, -1.278527998300530e-01, -1.277572756673786e-01, -2.193961624463098e-01, -1.179335604304564e-01, -1.168455750657373e-01, -1.168455750657372e-01, -8.009922616101258e+00, -8.003573553764078e+00, -8.009673370707800e+00, -8.004068136678580e+00, -8.006684092091227e+00, -8.006684092091227e+00, -3.786744789828331e+00, -3.798764828145226e+00, -3.801660870118887e+00, -3.812434480412986e+00, -3.785947784846659e+00, -3.785947784846659e+00, -9.627294257957710e-01, -8.996588153951395e-01, -9.077573154989681e-01, -8.208385278850829e-01, -9.631825084690437e-01, -9.631825084690437e-01, -3.228769262714999e-01, -4.563434861715309e-01, -3.094271620809864e-01, -2.695615875910800e+00, -3.298441946900232e-01, -3.298441946900232e-01, -1.066750398085805e-01, -1.135737279752257e-01, -7.416854622062161e-02, -2.529521425329092e-01, -8.971902310554082e-02, -8.971902310554083e-02, -7.737806997115677e-01, -8.238191588084602e-01, -8.083566548116926e-01, -7.939919673390790e-01, -8.013739759275782e-01, -8.013739759275782e-01, -7.321141497915916e-01, -8.898575456144381e-01, -8.721659462153111e-01, -8.401214977740314e-01, -8.579034359371153e-01, -8.579034359371153e-01, -9.511978339845178e-01, -5.281410954126583e-01, -5.791911152697256e-01, -6.447512367079975e-01, -6.105672750497696e-01, -6.105672750497696e-01, -8.228440610854638e-01, -2.198294378371982e-01, -2.431952550133335e-01, -5.883788416475967e-01, -2.707911770388736e-01, -2.707911770388735e-01, -1.433053582960565e-01, -6.632060816676665e-02, -8.627746872933148e-02, -2.644162357501208e-01, -8.434140327532884e-02, -8.434140327532878e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_lb_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_lb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=False, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
