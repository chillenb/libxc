
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_rpbe_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_rpbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.098590316121700e+01, -2.098592514928128e+01, -2.098610262448253e+01, -2.098574098622796e+01, -2.098591409341795e+01, -2.098591409341795e+01, -3.485513568410868e+00, -3.485480592479060e+00, -3.484718582884072e+00, -3.486771397123351e+00, -3.485511455618331e+00, -3.485511455618331e+00, -7.049680971742603e-01, -7.051597904149712e-01, -7.131578315060222e-01, -7.172076789500638e-01, -7.050332878268830e-01, -7.050332878268830e-01, -2.263099523353548e-01, -2.265022544237330e-01, -8.170917122877894e-01, -1.971569170686228e-01, -2.263306813487682e-01, -2.263306813487682e-01, -1.705040511768579e-02, -1.785950602918197e-02, -7.259114199675575e-02, -8.179636081577773e-03, -1.767339198969752e-02, -1.767339198969752e-02, -5.038308600890491e+00, -5.037630463099072e+00, -5.038245717290018e+00, -5.037718307051192e+00, -5.037951356771880e+00, -5.037951356771880e+00, -2.146949547598162e+00, -2.155468507056809e+00, -2.150183616942627e+00, -2.156770905037135e+00, -2.148648226804111e+00, -2.148648226804111e+00, -5.754292126118318e-01, -5.955660872245707e-01, -5.483533793697728e-01, -5.478986329260808e-01, -5.927557542835387e-01, -5.927557542835387e-01, -1.593119594570127e-01, -2.554041217151177e-01, -1.566847651466367e-01, -1.811748772298116e+00, -1.764327534037492e-01, -1.764327534037492e-01, -7.890788560303988e-03, -9.017882246212330e-03, -6.758948629840969e-03, -1.011439911198508e-01, -8.216688940537569e-03, -8.216688940537569e-03, -5.586368131276999e-01, -5.615324792927789e-01, -5.604996567832258e-01, -5.596949032273784e-01, -5.600971924257061e-01, -5.600971924257061e-01, -5.397630705957864e-01, -5.202308004278728e-01, -5.250602259281972e-01, -5.299115303831752e-01, -5.271827146974275e-01, -5.271827146974275e-01, -6.254638597639778e-01, -2.969302174496229e-01, -3.253984893638724e-01, -3.702096156921348e-01, -3.452187090914238e-01, -3.452187090914238e-01, -4.726329426276565e-01, -6.723224553521924e-02, -9.101341629461694e-02, -3.382954321917384e-01, -1.305788602971569e-01, -1.305788602971569e-01, -1.998294029699953e-02, -2.468940298752360e-03, -4.690087237165435e-03, -1.245217160648807e-01, -6.983098223408890e-03, -6.983098223408880e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_rpbe_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_rpbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.499303815988382e+01, -2.499313157208224e+01, -2.499354563037680e+01, -2.499201602401364e+01, -2.499308744465911e+01, -2.499308744465911e+01, -3.993729324320853e+00, -3.993780155314886e+00, -3.995341496293864e+00, -3.993497508502945e+00, -3.993772481018573e+00, -3.993772481018573e+00, -7.308930246283571e-01, -7.293906721418543e-01, -6.904969221241083e-01, -6.969328704895944e-01, -7.303483314645440e-01, -7.303483314645440e-01, -1.871907852765627e-01, -1.894837244171865e-01, -9.009615567884821e-01, -1.722239031549294e-01, -1.878480016232968e-01, -1.878480016232968e-01, -2.273387349024772e-02, -2.381267470557596e-02, -9.678716677637587e-02, -1.090618144210370e-02, -2.356452265293002e-02, -2.356452265293002e-02, -6.176797731917493e+00, -6.179764379750551e+00, -6.177100373385941e+00, -6.179407135440296e+00, -6.178320271001123e+00, -6.178320271001123e+00, -2.085136198855786e+00, -2.104126122833204e+00, -2.073292156342327e+00, -2.088028811467315e+00, -2.113665175678977e+00, -2.113665175678977e+00, -6.732188593459347e-01, -7.662446017982929e-01, -6.362849618077382e-01, -6.915606264790274e-01, -7.044007746931034e-01, -7.044007746931034e-01, -1.852153313225433e-01, -2.061792651114187e-01, -1.789339432891200e-01, -2.330348639146965e+00, -1.740611728795867e-01, -1.740611728795867e-01, -1.052105141373865e-02, -1.202384299494977e-02, -9.011931506454626e-03, -1.339628779589159e-01, -1.095558525405009e-02, -1.095558525405009e-02, -7.370988241848878e-01, -7.255338045835205e-01, -7.296486316287452e-01, -7.328520307946057e-01, -7.312473400091407e-01, -7.312473400091407e-01, -7.146886135031819e-01, -5.614036124787649e-01, -6.046382162479472e-01, -6.463848383660686e-01, -6.251809757953107e-01, -6.251809757953108e-01, -8.021196737198774e-01, -2.397771784580187e-01, -2.823081461333001e-01, -3.851852724069096e-01, -3.281243673086348e-01, -3.281243673086346e-01, -5.032537258296593e-01, -8.964297168730027e-02, -1.212663449059073e-01, -3.743626646949397e-01, -1.600864350974585e-01, -1.600864350974585e-01, -2.664392039599937e-02, -3.291920398336480e-03, -6.253449649553913e-03, -1.522693117740124e-01, -9.310797631211854e-03, -9.310797631211841e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_rpbe_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_rpbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-7.566086860167193e-09, -7.566028227173459e-09, -7.565691119218389e-09, -7.566652775664187e-09, -7.566056570525223e-09, -7.566056570525223e-09, -1.046102621042687e-05, -1.046111880960693e-05, -1.046193600182117e-05, -1.045165744515704e-05, -1.046089558782036e-05, -1.046089558782036e-05, -7.110772341999263e-03, -7.124125123098127e-03, -7.403392791788181e-03, -7.204712771694989e-03, -7.115725867700615e-03, -7.115725867700615e-03, -8.918052567836562e-01, -8.756642122289647e-01, -3.641019761574321e-03, -1.362873973693187e+00, -8.874747906418455e-01, -8.874747906418455e-01, -2.520819961088524e-71, -1.461784535641217e-64, -4.074550978066778e-04, 0.000000000000000e+00, -1.124525181363803e-64, -1.124525181363803e-64, -2.191332512774153e-06, -2.190712228566915e-06, -2.191261913868380e-06, -2.190779731803415e-06, -2.191024770901591e-06, -2.191024770901591e-06, -8.978484562595704e-05, -8.780719673145199e-05, -9.005877542324853e-05, -8.851406216328397e-05, -8.806918389896802e-05, -8.806918389896802e-05, -1.370272411333066e-02, -1.051672205119615e-02, -1.679677554540080e-02, -1.506796799488166e-02, -1.192152207418119e-02, -1.192152207418119e-02, -8.697092622937785e-01, -5.673512578742530e-01, -1.080152039497165e+00, -1.228468609925184e-04, -1.478170620317812e+00, -1.478170620317812e+00, 0.000000000000000e+00, -4.886404886034415e-308, 0.000000000000000e+00, -1.390035698470896e-01, -4.419589818749039e-305, -4.419589818749039e-305, -1.312536934770010e-02, -1.323091220046135e-02, -1.319314025535127e-02, -1.316406838323336e-02, -1.317865199018574e-02, -1.317865199018574e-02, -1.498762136989642e-02, -2.278109558785294e-02, -2.018186649409589e-02, -1.802845678189559e-02, -1.910639901520310e-02, -1.910639901520310e-02, -8.683492085836901e-03, -3.108496415797435e-01, -1.961630126746605e-01, -9.307787869747594e-02, -1.380073375660007e-01, -1.380073375660007e-01, -3.401897276192180e-02, -1.016646672768578e-05, -1.625025502347554e-02, -1.233400340348785e-01, -1.053061602430434e+00, -1.053061602430437e+00, -2.121780398340680e-59, 0.000000000000000e+00, 0.000000000000000e+00, -1.321637319649963e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
