
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_ssb_sw_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ssb_sw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.106876494031145e+01, -2.106880260790025e+01, -2.106902780060778e+01, -2.106840987634906e+01, -2.106878432717341e+01, -2.106878432717341e+01, -3.469191587662591e+00, -3.469172324596125e+00, -3.468787734017687e+00, -3.470188198545390e+00, -3.469196457866835e+00, -3.469196457866835e+00, -6.944235318894659e-01, -6.945079679321583e-01, -6.993603805265909e-01, -7.035151346082387e-01, -6.944501069367142e-01, -6.944501069367142e-01, -2.172005916293509e-01, -2.180029272614539e-01, -8.089137821713688e-01, -1.803158654266402e-01, -2.174172467121446e-01, -2.174172467121446e-01, -1.700627108335254e-02, -1.780872076503452e-02, -7.039751772087287e-02, -8.175529849464286e-03, -1.762323140904001e-02, -1.762323140904001e-02, -5.104877953551394e+00, -5.105318636126780e+00, -5.104926774095413e+00, -5.105269316621022e+00, -5.105097521951233e+00, -5.105097521951233e+00, -2.105880215853809e+00, -2.114999314171906e+00, -2.107944248548693e+00, -2.115028438381668e+00, -2.109419416663408e+00, -2.109419416663408e+00, -5.751332313476901e-01, -6.157078231244728e-01, -5.470990026391096e-01, -5.615888960440425e-01, -5.947431801083886e-01, -5.947431801083886e-01, -1.447680824042060e-01, -2.379217403933392e-01, -1.421795093480332e-01, -1.872792368688472e+00, -1.598016077260170e-01, -1.598016077260170e-01, -7.886991439937275e-03, -9.012210563543082e-03, -6.754908361791749e-03, -9.535380811670101e-02, -8.211474806745471e-03, -8.211474806745471e-03, -5.844794824723201e-01, -5.816735473752117e-01, -5.826607175949631e-01, -5.834392815763504e-01, -5.830481077202370e-01, -5.830481077202370e-01, -5.656792744351040e-01, -5.139532587635955e-01, -5.230771413871926e-01, -5.359621820051843e-01, -5.286589222698556e-01, -5.286589222698556e-01, -6.456556280856707e-01, -2.825309605504879e-01, -3.153647838922555e-01, -3.647563995469699e-01, -3.380597049719100e-01, -3.380597049719099e-01, -4.664263102250404e-01, -6.562725500612854e-02, -8.705737486811943e-02, -3.350437261980006e-01, -1.194528434066220e-01, -1.194528434066220e-01, -1.992136568965630e-02, -2.468786238757017e-03, -4.689114209711853e-03, -1.138624390452087e-01, -6.979229725276906e-03, -6.979229725276896e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_ssb_sw_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ssb_sw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.670106126584589e+01, -2.670118658573884e+01, -2.670170589206427e+01, -2.669965443287360e+01, -2.670112768785744e+01, -2.670112768785744e+01, -4.194949315938532e+00, -4.195047369668305e+00, -4.197914853150411e+00, -4.193862880445072e+00, -4.195017617784245e+00, -4.195017617784245e+00, -7.439096256928016e-01, -7.422820172532305e-01, -7.078687206746377e-01, -7.138332822525512e-01, -7.433172222572784e-01, -7.433172222572784e-01, -2.053738641645075e-01, -2.066829341907329e-01, -9.302079126891659e-01, -1.772184166909653e-01, -2.057347947093074e-01, -2.057347947093074e-01, -2.255807413764996e-02, -2.361045888192777e-02, -8.842405459943596e-02, -1.088978296378753e-02, -2.336479255865185e-02, -2.336479255865185e-02, -6.645007151080240e+00, -6.648622500775111e+00, -6.645376249713429e+00, -6.648187658380932e+00, -6.646867046357096e+00, -6.646867046357096e+00, -2.135975249660682e+00, -2.152886575537003e+00, -2.127726791460578e+00, -2.140614477168525e+00, -2.159218579336515e+00, -2.159218579336515e+00, -7.140703874034747e-01, -8.186914737371732e-01, -6.723648696300376e-01, -7.429715573565783e-01, -7.519448870063212e-01, -7.519448870063212e-01, -1.574639474052544e-01, -2.265425087584120e-01, -1.535153409759383e-01, -2.490093533597916e+00, -1.636776740252685e-01, -1.636776740252685e-01, -1.050588744870112e-02, -1.200119344659672e-02, -8.995796700973486e-03, -1.136476445334691e-01, -1.093476296068845e-02, -1.093476296068844e-02, -7.789616651031276e-01, -7.739381807194461e-01, -7.758960691180082e-01, -7.772692247344494e-01, -7.765945951626924e-01, -7.765945951626924e-01, -7.540159192719311e-01, -5.754103787060760e-01, -6.366276861134372e-01, -6.949180091454216e-01, -6.668593370390699e-01, -6.668593370390699e-01, -8.580037497778326e-01, -2.661587858915737e-01, -3.022899083227880e-01, -3.921464465524276e-01, -3.381484596985658e-01, -3.381484596985657e-01, -5.140948688427316e-01, -8.346041345013938e-02, -1.065831500683526e-01, -3.870663748502723e-01, -1.331688847759381e-01, -1.331688847759381e-01, -2.639883175390257e-02, -3.291308350300776e-03, -6.249566636650443e-03, -1.267680087217502e-01, -9.295348594304302e-03, -9.295348594304285e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_ssb_sw_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ssb_sw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-3.521086772457048e-09, -3.520944864635439e-09, -3.520442401160230e-09, -3.522763652000570e-09, -3.521010843248512e-09, -3.521010843248512e-09, -6.892255871343320e-06, -6.891335969665041e-06, -6.864834772086160e-06, -6.904539096650007e-06, -6.891665338885322e-06, -6.891665338885322e-06, -6.189853289437428e-03, -6.208570321990991e-03, -6.386389473759213e-03, -6.228029123832457e-03, -6.196812890552060e-03, -6.196812890552060e-03, -6.556979436371577e-01, -6.536210123392734e-01, -2.865462694581205e-03, -9.501983261004833e-01, -6.555585733942229e-01, -6.555585733942229e-01, -5.221732657553607e+00, -5.235441634672627e+00, -2.167391102347867e+00, -3.700685653750333e+00, -5.438759203348938e+00, -5.438759203348938e+00, -6.542103287733501e-07, -6.463886922805721e-07, -6.534246410144125e-07, -6.473423693935684e-07, -6.501734689425944e-07, -6.501734689425944e-07, -7.758990893841773e-05, -7.609100172554594e-05, -7.749059499303739e-05, -7.635031775628159e-05, -7.659643785440328e-05, -7.659643785440328e-05, -7.691403767938004e-03, -8.507084268113641e-04, -1.011148800376865e-02, -2.247824340008999e-03, -5.693852871501663e-03, -5.693852871501663e-03, -1.136996464901191e+00, -3.829358040448764e-01, -1.299152988209843e+00, -1.002594608183399e-05, -1.193291031678935e+00, -1.193291031678935e+00, -3.925892287594866e+00, -3.933825299564231e+00, -1.125949218251901e+01, -2.093450659471373e+00, -5.810447231730808e+00, -5.810447231730808e+00, -5.831050785713057e-04, -9.285714833732217e-04, -7.347648661298254e-04, -6.380028512142574e-04, -6.804911300635925e-04, -6.804911300635925e-04, -6.693926045029564e-04, -1.892614755632423e-02, -1.285836407841162e-02, -5.902691413591470e-03, -9.345387185240372e-03, -9.345387185240365e-03, -7.830223985001584e-04, -2.201000196189242e-01, -1.529843636548088e-01, -8.086053729914862e-02, -1.175731891231699e-01, -1.175731891231700e-01, -2.889518768776843e-02, -1.838082147464373e+00, -1.817567553861470e+00, -9.593863499526552e-02, -1.960705410167639e+00, -1.960705410167644e+00, -3.922440414693593e+00, -6.767352200443974e+00, -5.826640553605949e+00, -2.405958772606315e+00, -8.485882484823223e+00, -8.485882484826440e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
