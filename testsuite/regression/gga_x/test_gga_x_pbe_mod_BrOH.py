
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_pbe_mod_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbe_mod", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.094538879917193e+01, -2.094541265616875e+01, -2.094559555154201e+01, -2.094520336293677e+01, -2.094540074137615e+01, -2.094540074137615e+01, -3.473459799330238e+00, -3.473430435382459e+00, -3.472766928716607e+00, -3.474647127376273e+00, -3.473459493021693e+00, -3.473459493021693e+00, -6.982694931098653e-01, -6.983333637121123e-01, -7.020570757345671e-01, -7.063063457668755e-01, -6.982888948549477e-01, -6.982888948549477e-01, -2.171619234766253e-01, -2.180037563290280e-01, -8.126673034812401e-01, -1.803366985039349e-01, -2.173899384585616e-01, -2.173899384585616e-01, -1.700711356180941e-02, -1.780968753289885e-02, -7.043158438405540e-02, -8.175613347903257e-03, -1.762418633914579e-02, -1.762418633914579e-02, -5.032904489931640e+00, -5.032305258847217e+00, -5.032849517781484e+00, -5.032383470959966e+00, -5.032588060729024e+00, -5.032588060729024e+00, -2.114200517087361e+00, -2.123685973682627e+00, -2.115802184118177e+00, -2.123177291046479e+00, -2.118569407099138e+00, -2.118569407099138e+00, -5.739448869072715e-01, -5.954493490152640e-01, -5.467570826804782e-01, -5.476464352806242e-01, -5.915672115659499e-01, -5.915672115659499e-01, -1.448885010904874e-01, -2.378303039781961e-01, -1.422950701282441e-01, -1.811388402825429e+00, -1.598878092274975e-01, -1.598878092274975e-01, -7.887068863755717e-03, -9.012324401979429e-03, -6.754989677296992e-03, -9.542576576012331e-02, -8.211579412544297e-03, -8.211579412544297e-03, -5.586273590871136e-01, -5.614469697665334e-01, -5.604500617348608e-01, -5.596664812947375e-01, -5.600589091806113e-01, -5.600589091806113e-01, -5.397590198925953e-01, -5.167410421588852e-01, -5.233614137781791e-01, -5.292734335523473e-01, -5.260876505886444e-01, -5.260876505886444e-01, -6.253182208355884e-01, -2.823957882765762e-01, -3.155944424496047e-01, -3.667911307849077e-01, -3.391677715122031e-01, -3.391677715122030e-01, -4.690481018607943e-01, -6.565340435891420e-02, -8.711265053567867e-02, -3.365319335350790e-01, -1.195562838503275e-01, -1.195562838503275e-01, -1.992253502010241e-02, -2.468790711214028e-03, -4.689135725646030e-03, -1.139609556380706e-01, -6.979307919536059e-03, -6.979307919536049e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_pbe_mod_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbe_mod", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.514206861929584e+01, -2.514215547947314e+01, -2.514255057289481e+01, -2.514112806608522e+01, -2.514211436293933e+01, -2.514211436293933e+01, -4.036667744452219e+00, -4.036706526261820e+00, -4.037939238004569e+00, -4.036671537554962e+00, -4.036704886586024e+00, -4.036704886586024e+00, -7.525917824155085e-01, -7.514486628258790e-01, -7.236808223859550e-01, -7.296740130013981e-01, -7.521759509468582e-01, -7.521759509468582e-01, -2.067575311372790e-01, -2.084733637582410e-01, -9.161930754253935e-01, -1.765613085806562e-01, -2.072424491022554e-01, -2.072424491022554e-01, -2.256136495623442e-02, -2.361423221804999e-02, -8.853430579987132e-02, -1.089010234484580e-02, -2.336851975889125e-02, -2.336851975889125e-02, -6.197135822450257e+00, -6.199815016712391e+00, -6.197409653172238e+00, -6.199492872883060e+00, -6.198509700495861e+00, -6.198509700495861e+00, -2.183426596355440e+00, -2.200142052057713e+00, -2.175513036314180e+00, -2.188438257272575e+00, -2.205414923701334e+00, -2.205414923701334e+00, -6.786001310865606e-01, -7.667001228921337e-01, -6.420325928250810e-01, -6.925309331351078e-01, -7.087650958371041e-01, -7.087650958371041e-01, -1.574765988116296e-01, -2.257761301960571e-01, -1.534935089840774e-01, -2.331754555677178e+00, -1.633324007815615e-01, -1.633324007815615e-01, -1.050618311919652e-02, -1.200163211346535e-02, -8.996109571204312e-03, -1.138212452306963e-01, -1.093516615346986e-02, -1.093516615346986e-02, -7.371364183381883e-01, -7.258685087981233e-01, -7.298438283382274e-01, -7.329643778229488e-01, -7.313983393326604e-01, -7.313983393326604e-01, -7.147047717536218e-01, -5.731756260007190e-01, -6.107157452925106e-01, -6.487769181558628e-01, -6.291953101206255e-01, -6.291953101206256e-01, -8.026866255090112e-01, -2.667226863223480e-01, -3.066055619475922e-01, -3.963002957967954e-01, -3.457655474477619e-01, -3.457655474477619e-01, -5.151887332516537e-01, -8.354947263686528e-02, -1.067411520746858e-01, -3.804538063640669e-01, -1.332639916466136e-01, -1.332639916466136e-01, -2.640339183404235e-02, -3.291322102411883e-03, -6.249644758514622e-03, -1.268547811385533e-01, -9.295648725467454e-03, -9.295648725467441e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_pbe_mod_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbe_mod", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-7.051961825336143e-09, -7.051919048332204e-09, -7.051640639905154e-09, -7.052342874061242e-09, -7.051939998233802e-09, -7.051939998233802e-09, -9.516587014450000e-06, -9.516804218045704e-06, -9.521200945425451e-06, -9.505556608011963e-06, -9.516536570646255e-06, -9.516536570646255e-06, -6.068966316968275e-03, -6.071167773916069e-03, -6.039037360637345e-03, -5.891353753720113e-03, -6.069889813340930e-03, -6.069889813340930e-03, -6.445248684794348e-01, -6.396958690534312e-01, -3.232850893804340e-03, -9.604949861623996e-01, -6.435304478853145e-01, -6.435304478853145e-01, -5.124958019009159e+00, -5.138740777368921e+00, -2.141558789437529e+00, -3.630202129157998e+00, -5.338295775589263e+00, -5.338295775589263e+00, -2.079755747030047e-06, -2.079964768824259e-06, -2.079768521380351e-06, -2.079931202590461e-06, -2.079875513410246e-06, -2.079875513410246e-06, -7.339117314751032e-05, -7.202210129332003e-05, -7.325682386215847e-05, -7.219708431660299e-05, -7.261076838232215e-05, -7.261076838232215e-05, -1.263000491741948e-02, -1.028587739739013e-02, -1.540206982076078e-02, -1.456278680215143e-02, -1.109627797517022e-02, -1.109627797517022e-02, -1.141725620923597e+00, -3.856571368430419e-01, -1.305491169369848e+00, -1.201306250814075e-04, -1.204409681935729e+00, -1.204409681935729e+00, -3.851099351972498e+00, -3.859024345161578e+00, -1.104530861275408e+01, -2.081400086816988e+00, -5.699970732336869e+00, -5.699970732336865e+00, -1.304035445598593e-02, -1.297474672170654e-02, -1.299818271075476e-02, -1.301655705470695e-02, -1.300740771446480e-02, -1.300740771446480e-02, -1.492293871541476e-02, -1.995148838671732e-02, -1.841776547070301e-02, -1.705671006557348e-02, -1.776074898284840e-02, -1.776074898284839e-02, -8.475861449138518e-03, -2.186184791546882e-01, -1.477948519474434e-01, -7.962364205003364e-02, -1.111622291506400e-01, -1.111622291506400e-01, -2.953895116864621e-02, -1.813441555575008e+00, -1.801427521354590e+00, -1.097634592359555e-01, -1.963921503463635e+00, -1.963921503463637e+00, -3.850220048050847e+00, -6.637727775417500e+00, -5.715243166968077e+00, -2.410241050135901e+00, -8.324368376220814e+00, -8.324368376220797e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
