
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_pbe_mod_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbe_mod", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.094586479480072e+01, -2.094589221139019e+01, -2.094608185677325e+01, -2.094567255930767e+01, -2.094587738563278e+01, -2.094587738563278e+01, -3.473577043860399e+00, -3.473539017625030e+00, -3.472745228180112e+00, -3.474785192207885e+00, -3.473615184925964e+00, -3.473615184925964e+00, -6.974845396135282e-01, -6.975031414717303e-01, -6.998354199075424e-01, -7.045912545281866e-01, -7.027396433818441e-01, -7.027396433818441e-01, -2.156362552022198e-01, -2.167048849169798e-01, -8.050740524655063e-01, -1.824147979984631e-01, -1.952328338884597e-01, -1.952328338884597e-01, -1.008745135504368e-02, -1.061655619761958e-02, -5.768294477564873e-02, -5.828258117863297e-03, -7.322538041988448e-03, -7.322538041988448e-03, -5.034956447890276e+00, -5.034338807817442e+00, -5.034938781133601e+00, -5.034393360010504e+00, -5.034637391604728e+00, -5.034637391604728e+00, -2.114445632472998e+00, -2.124258919516222e+00, -2.115864124099819e+00, -2.124529787211832e+00, -2.119172878735703e+00, -2.119172878735703e+00, -5.807382831974119e-01, -6.028209557352284e-01, -5.416611033644281e-01, -5.373347195813500e-01, -5.864745077373782e-01, -5.864745077373782e-01, -1.392026003450283e-01, -2.315079714792849e-01, -1.300512915571467e-01, -1.813615398517809e+00, -1.553581897954459e-01, -1.553581897954459e-01, -4.497166872361772e-03, -5.697597051098886e-03, -4.356246500643915e-03, -9.089071304109367e-02, -5.247941941420320e-03, -5.247941941420320e-03, -5.507629886047815e-01, -5.539098390070440e-01, -5.528194578041409e-01, -5.518992997656538e-01, -5.523602309964005e-01, -5.523602309964005e-01, -5.339837884664599e-01, -5.106201665035754e-01, -5.171009948201593e-01, -5.232092283677907e-01, -5.198870164064737e-01, -5.198870164064737e-01, -6.331101611716445e-01, -2.761022109346558e-01, -3.108421657114506e-01, -3.659019973970279e-01, -3.360502551426260e-01, -3.360502551426260e-01, -4.712509024574005e-01, -5.532114009140916e-02, -7.451518909853434e-02, -3.422098441375784e-01, -1.119932221199398e-01, -1.119932221199398e-01, -1.422960322722173e-02, -1.523263555983053e-03, -3.197186169947993e-03, -1.061236001224824e-01, -4.856041646629251e-03, -4.856041646629247e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_pbe_mod_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbe_mod", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.514277293673991e+01, -2.514287273249007e+01, -2.514329043702728e+01, -2.514180622216812e+01, -2.514258760680217e+01, -2.514258760680217e+01, -4.036889737438840e+00, -4.036936099986193e+00, -4.038107795385065e+00, -4.036838486349175e+00, -4.037042638906245e+00, -4.037042638906245e+00, -7.599255540757760e-01, -7.586704996672955e-01, -7.299431023793040e-01, -7.363208157213521e-01, -7.352244398688923e-01, -7.352244398688923e-01, -2.033081948171740e-01, -2.044359708427981e-01, -8.908141113907574e-01, -1.813109868485098e-01, -1.871040764095077e-01, -1.871040764095077e-01, -1.343344165300603e-02, -1.413564428217566e-02, -7.451727856659873e-02, -7.767979223533334e-03, -9.756606543612083e-03, -9.756606543612083e-03, -6.199991308643536e+00, -6.202757216718460e+00, -6.200115178388729e+00, -6.202556961818941e+00, -6.201394950432836e+00, -6.201394950432836e+00, -2.186380151785118e+00, -2.203642291270090e+00, -2.172016338291744e+00, -2.187040847725628e+00, -2.203132843600621e+00, -2.203132843600621e+00, -6.856777346996112e-01, -7.743335954216474e-01, -6.307436533517330e-01, -6.813441595884046e-01, -7.000455105046549e-01, -7.000455105046549e-01, -1.565317411783363e-01, -2.230946224723323e-01, -1.486087095358095e-01, -2.334355546534975e+00, -1.623658879321969e-01, -1.623658879321969e-01, -5.994623857617353e-03, -7.593723463412071e-03, -5.804886899415517e-03, -1.110878001600492e-01, -6.993151010160447e-03, -6.993151010160447e-03, -7.247743531502614e-01, -7.127279526167380e-01, -7.168903864732376e-01, -7.203913276108755e-01, -7.186333593998149e-01, -7.186333593998149e-01, -7.075348284775609e-01, -5.586153835204316e-01, -5.968608194063457e-01, -6.389987333741420e-01, -6.171944024656379e-01, -6.171944024656379e-01, -8.104284216956349e-01, -2.604563880796393e-01, -2.970936728187900e-01, -3.917059585676724e-01, -3.364963743129538e-01, -3.364963743129537e-01, -5.136553025996327e-01, -7.174763477655101e-02, -9.440616418243124e-02, -3.834581348637420e-01, -1.291615102252335e-01, -1.291615102252335e-01, -1.893122900590222e-02, -2.030888018289007e-03, -4.262078251742199e-03, -1.243049028520462e-01, -6.471067108330030e-03, -6.471067108330023e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_pbe_mod_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbe_mod", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-7.051296510884535e-09, -7.051247361544615e-09, -7.050957244234297e-09, -7.051689963379380e-09, -7.051316210305812e-09, -7.051316210305812e-09, -9.515179223725995e-06, -9.515465983272100e-06, -9.521160483876799e-06, -9.504036567999877e-06, -9.514605567675166e-06, -9.514605567675166e-06, -6.065433331796372e-03, -6.069696517078586e-03, -6.094091093584495e-03, -5.927340034389545e-03, -5.987692779757951e-03, -5.987692779757951e-03, -6.244606047305858e-01, -6.227697084402344e-01, -3.390629978741046e-03, -8.399022269631866e-01, -7.950138659876748e-01, -7.950138659876747e-01, -2.437183368493617e+00, -2.574797329830690e+00, -1.435070374113347e+00, -2.214816585872725e+00, -2.813827803307734e+00, -2.813827803307740e+00, -2.076292423455531e-06, -2.076506375239496e-06, -2.076288335178677e-06, -2.076477436679964e-06, -2.076408726083161e-06, -2.076408726083161e-06, -7.333100337196004e-05, -7.191545464111435e-05, -7.327886461050274e-05, -7.203827608198143e-05, -7.255897763860658e-05, -7.255897763860658e-05, -1.205991302835205e-02, -9.808929157324319e-03, -1.607282944638395e-02, -1.568289407479953e-02, -1.151454157542854e-02, -1.151454157542854e-02, -9.793506465559976e-01, -3.885063220594885e-01, -1.080969888692724e+00, -1.195515354773515e-04, -1.162178972357012e+00, -1.162178972357012e+00, -2.918326179059219e+00, -2.606662709485826e+00, -1.636999711241022e+01, -1.606120484647894e+00, -7.617904549383355e+00, -7.617904549383338e+00, -1.382946847429535e-02, -1.374292103299484e-02, -1.377322700661010e-02, -1.379883599018564e-02, -1.378608167460953e-02, -1.378608167460953e-02, -1.557118874412346e-02, -2.107357899412023e-02, -1.945435726225949e-02, -1.790551264594307e-02, -1.871216992168311e-02, -1.871216992168311e-02, -8.082466099343847e-03, -2.270636745991681e-01, -1.546360356409755e-01, -8.073365255113574e-02, -1.156178072042757e-01, -1.156178072042758e-01, -2.910064836852095e-02, -1.309567569609263e+00, -1.301255468460776e+00, -1.031645759383055e-01, -1.762621350090311e+00, -1.762621350090313e+00, -1.964034262509922e+00, -1.279223675287371e+01, -6.191009805542396e+00, -1.787107594755543e+00, -9.622110530388932e+00, -9.622110530388957e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
