
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_pbe_jsjr_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbe_jsjr", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.061421040141927e+01, -2.061424555380845e+01, -2.061445541146077e+01, -2.061393131451952e+01, -2.061419831269592e+01, -2.061419831269592e+01, -3.402222380318110e+00, -3.402196405598330e+00, -3.401679478707656e+00, -3.403224592562948e+00, -3.402273510282781e+00, -3.402273510282781e+00, -6.767200308688370e-01, -6.765760603293771e-01, -6.746742969937187e-01, -6.794314712728867e-01, -6.800058081327336e-01, -6.800058081327336e-01, -2.044378580300735e-01, -2.055654027693715e-01, -7.833454996881981e-01, -1.735117410451666e-01, -2.002248506884436e-01, -2.002248506884435e-01, -1.010312308505453e-02, -1.063811853621055e-02, -5.736306140558203e-02, -5.828567358004555e-03, -8.132991920197943e-03, -8.132991920197943e-03, -4.974184367247179e+00, -4.973999280939902e+00, -4.974184476278285e+00, -4.974020933975185e+00, -4.974085741516718e+00, -4.974085741516718e+00, -2.035736878527467e+00, -2.046167070767035e+00, -2.034904513936373e+00, -2.044094157198844e+00, -2.041947314139015e+00, -2.041947314139015e+00, -5.701451322506628e-01, -5.993688765549579e-01, -5.310114132506527e-01, -5.334830676231620e-01, -5.774037964944072e-01, -5.774037964944072e-01, -1.347000553783571e-01, -2.195101786041725e-01, -1.263000420010914e-01, -1.803786550869125e+00, -1.487700283310672e-01, -1.487700283310672e-01, -4.500220643326298e-03, -5.697720976859510e-03, -4.362783929911206e-03, -8.925906259894584e-02, -5.480112921246860e-03, -5.480112921246861e-03, -5.496489181176953e-01, -5.508855485443934e-01, -5.504577202056824e-01, -5.500935535594174e-01, -5.502756585744230e-01, -5.502756585744230e-01, -5.334686960013918e-01, -4.957130831273946e-01, -5.059723374620250e-01, -5.162599048017430e-01, -5.108179401693820e-01, -5.108179401693820e-01, -6.291550255883835e-01, -2.615527839510094e-01, -2.955743083037681e-01, -3.540940981496836e-01, -3.219823298479379e-01, -3.219823298479378e-01, -4.572581198334328e-01, -5.498678971833731e-02, -7.373506064495919e-02, -3.334327222464244e-01, -1.089091799764112e-01, -1.089091799764112e-01, -1.423153891118650e-02, -1.523244448477894e-03, -3.203085226564009e-03, -1.034135674267011e-01, -5.032762071696065e-03, -5.032762071696061e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_pbe_jsjr_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbe_jsjr", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.547869182644934e+01, -2.547866122334300e+01, -2.547880179523046e+01, -2.547874109581814e+01, -2.547913286942427e+01, -2.547922130721611e+01, -2.547789149377342e+01, -2.547763889807663e+01, -2.547875846132283e+01, -2.547825617826144e+01, -2.547875846132283e+01, -2.547825617826144e+01, -4.101056153386790e+00, -4.101206772361971e+00, -4.101094842159978e+00, -4.101250673918260e+00, -4.102086262666510e+00, -4.102370213955137e+00, -4.101030021751993e+00, -4.101314776445037e+00, -4.100288978490913e+00, -4.102270192038771e+00, -4.100288978490913e+00, -4.102270192038771e+00, -7.707928768692202e-01, -7.758352296752417e-01, -7.689268120452691e-01, -7.750949690573735e-01, -7.448262364300976e-01, -7.369755396075963e-01, -7.462536235376915e-01, -7.487901534144784e-01, -7.848501731097492e-01, -7.094206314841184e-01, -7.848501731097492e-01, -7.094206314841184e-01, -1.923922384491211e-01, -1.984069234444856e-01, -1.938746199711442e-01, -2.011199131038335e-01, -8.866360303025146e-01, -9.258146572606821e-01, -1.652769732478926e-01, -1.668889941276429e-01, -2.004547828334184e-01, -1.415036730982530e-01, -2.004547828334183e-01, -1.415036730982529e-01, -1.300491545552934e-02, -1.381497793718632e-02, -1.362324963758341e-02, -1.458796718924022e-02, -7.124443517638174e-02, -7.467731438877113e-02, -7.830468338939035e-03, -7.700299178678723e-03, -1.160759453346075e-02, -6.611841052458512e-03, -1.160759453346075e-02, -6.611841052458512e-03, -6.267387427563633e+00, -6.265834515969856e+00, -6.269829898780606e+00, -6.268194181261701e+00, -6.267523751414516e+00, -6.265916053275429e+00, -6.269619540336272e+00, -6.268059704459313e+00, -6.268638093254316e+00, -6.267019677721994e+00, -6.268638093254316e+00, -6.267019677721994e+00, -2.216959087751123e+00, -2.216840769073458e+00, -2.235651358503594e+00, -2.234986356253442e+00, -2.197297036159993e+00, -2.202819838004219e+00, -2.213344641810736e+00, -2.219067404659385e+00, -2.242336384838943e+00, -2.228416711063523e+00, -2.242336384838943e+00, -2.228416711063523e+00, -6.966966499080407e-01, -6.949224161911857e-01, -7.782470521864203e-01, -7.788841217076219e-01, -6.277842316601836e-01, -6.531393477904058e-01, -6.750267690918804e-01, -6.971320613641960e-01, -7.279681832103982e-01, -6.906475999585666e-01, -7.279681832103982e-01, -6.906475999585666e-01, -1.440038925270816e-01, -1.442189809175932e-01, -2.068304986682598e-01, -2.075327007742672e-01, -1.354861461669474e-01, -1.392862946455835e-01, -2.346969183488579e+00, -2.345959145559597e+00, -1.491031630591024e-01, -1.470939079030750e-01, -1.491031630591024e-01, -1.470939079030750e-01, -5.876036090589281e-03, -6.106608190119667e-03, -7.534173210688016e-03, -7.648269632881862e-03, -5.632186602384636e-03, -5.963397352885381e-03, -1.052040846477269e-01, -1.059660055559057e-01, -5.754216892203099e-03, -7.896424138032251e-03, -5.754216892203101e-03, -7.896424138032253e-03, -7.247714864187252e-01, -7.276700204130619e-01, -7.149729756836126e-01, -7.179326756546538e-01, -7.183736296434183e-01, -7.213339902480653e-01, -7.212417871968421e-01, -7.241422617755076e-01, -7.198043464347941e-01, -7.227338568140415e-01, -7.198043464347941e-01, -7.227338568140415e-01, -7.070389934902724e-01, -7.093898133995489e-01, -5.670808296309007e-01, -5.698997278305873e-01, -6.050358251702729e-01, -6.081699611655723e-01, -6.452214425616519e-01, -6.476468839840610e-01, -6.247928790409828e-01, -6.272872849720001e-01, -6.247928790409828e-01, -6.272872849720001e-01, -8.143447038004015e-01, -8.161282080359646e-01, -2.482239191781637e-01, -2.493662986324970e-01, -2.915789821282976e-01, -2.944228111313134e-01, -3.971682163692429e-01, -3.995805345056653e-01, -3.391459297855376e-01, -3.391279993646524e-01, -3.391459297855375e-01, -3.391279993646523e-01, -5.205908075683429e-01, -5.248086087545150e-01, -7.026155068263365e-02, -7.068330900559015e-02, -9.028905214173269e-02, -9.256205458717237e-02, -3.868542825839636e-01, -3.934360303618832e-01, -1.194916261179127e-01, -1.201547801315950e-01, -1.194916261179127e-01, -1.201547801315950e-01, -1.856448555093061e-02, -1.923006654208255e-02, -2.028516519273373e-03, -2.033069915701416e-03, -4.126436669613310e-03, -4.388509790109092e-03, -1.153382533564161e-01, -1.166105137310036e-01, -5.449101911060607e-03, -7.239345739557176e-03, -5.449101911060602e-03, -7.239345739557169e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_pbe_jsjr_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbe_jsjr", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.016246618507404e-08, 0.000000000000000e+00, -1.016252130175654e-08, -1.016236959624797e-08, 0.000000000000000e+00, -1.016245111231247e-08, -1.016198822415439e-08, 0.000000000000000e+00, -1.016192489675093e-08, -1.016308088521003e-08, 0.000000000000000e+00, -1.016331701531264e-08, -1.016241223210209e-08, 0.000000000000000e+00, -1.016270727940354e-08, -1.016241223210209e-08, 0.000000000000000e+00, -1.016270727940354e-08, -1.392724845853367e-05, 0.000000000000000e+00, -1.393045128250640e-05, -1.392738018886922e-05, 0.000000000000000e+00, -1.393084625259682e-05, -1.393322854728354e-05, 0.000000000000000e+00, -1.393443595788871e-05, -1.391409744885320e-05, 0.000000000000000e+00, -1.391600337935499e-05, -1.393560412084426e-05, 0.000000000000000e+00, -1.392004629814011e-05, -1.393560412084426e-05, 0.000000000000000e+00, -1.392004629814011e-05, -9.217811274791059e-03, 0.000000000000000e+00, -9.180525286754952e-03, -9.237581431387306e-03, 0.000000000000000e+00, -9.192161556288268e-03, -9.492351862746976e-03, 0.000000000000000e+00, -9.538020590119815e-03, -9.248326602033171e-03, 0.000000000000000e+00, -9.237576675572486e-03, -9.057835183841574e-03, 0.000000000000000e+00, -9.305682412540954e-03, -9.057835183841574e-03, 0.000000000000000e+00, -9.305682412540954e-03, -1.190106284608393e+00, 0.000000000000000e+00, -1.097733113316409e+00, -1.182462872795190e+00, 0.000000000000000e+00, -1.073458079991418e+00, -5.326736763396915e-03, 0.000000000000000e+00, -4.873760791095475e-03, -1.802175210788150e+00, 0.000000000000000e+00, -1.739536614534614e+00, -1.020946965705148e+00, 0.000000000000000e+00, -2.859341965342844e+00, -1.020946965705147e+00, 0.000000000000000e+00, -2.859341965342847e+00, -7.101022391963421e+00, 0.000000000000000e+00, -7.028832788557308e+00, -7.480864362981165e+00, 0.000000000000000e+00, -7.441181513027317e+00, -4.027294355395314e+00, 0.000000000000000e+00, -4.034565111901084e+00, -6.509191450050741e+00, 0.000000000000000e+00, -6.332610577179818e+00, -7.090839704629945e+00, 0.000000000000000e+00, -1.799960728249214e+01, -7.090839704629959e+00, 0.000000000000000e+00, -1.799960728249219e+01, -2.956686680588323e-06, 0.000000000000000e+00, -2.959449570627582e-06, -2.956242562733687e-06, 0.000000000000000e+00, -2.959020867207325e-06, -2.956642493981591e-06, 0.000000000000000e+00, -2.959420852880978e-06, -2.956261709196434e-06, 0.000000000000000e+00, -2.959031626333274e-06, -2.956474868650476e-06, 0.000000000000000e+00, -2.959237265432315e-06, -2.956474868650476e-06, 0.000000000000000e+00, -2.959237265432315e-06, -1.152591960278383e-04, 0.000000000000000e+00, -1.152802955007766e-04, -1.127114917584163e-04, 0.000000000000000e+00, -1.128156580485334e-04, -1.159246044835014e-04, 0.000000000000000e+00, -1.157818693142009e-04, -1.137310908915811e-04, 0.000000000000000e+00, -1.135386073038416e-04, -1.132516648559277e-04, 0.000000000000000e+00, -1.139126101904001e-04, -1.132516648559277e-04, 0.000000000000000e+00, -1.139126101904001e-04, -1.742187914294462e-02, 0.000000000000000e+00, -1.761349446497434e-02, -1.373213287291787e-02, 0.000000000000000e+00, -1.372058405942703e-02, -2.515400119394271e-02, 0.000000000000000e+00, -2.203607926586635e-02, -2.360909690775443e-02, 0.000000000000000e+00, -2.068918344085439e-02, -1.511698781181371e-02, 0.000000000000000e+00, -1.845761810698023e-02, -1.511698781181371e-02, 0.000000000000000e+00, -1.845761810698023e-02, -2.376859877429510e+00, 0.000000000000000e+00, -2.403903892895191e+00, -7.806338424837770e-01, 0.000000000000000e+00, -7.718593152613773e-01, -2.744589901673795e+00, 0.000000000000000e+00, -2.624635823309775e+00, -1.670049891269730e-04, 0.000000000000000e+00, -1.673138719613503e-04, -2.431195219096877e+00, 0.000000000000000e+00, -2.748838241233882e+00, -2.431195219096877e+00, 0.000000000000000e+00, -2.748838241233882e+00, -9.138916363203631e+00, 0.000000000000000e+00, -7.910042161376003e+00, -7.868244719313775e+00, 0.000000000000000e+00, -7.264596745197236e+00, -4.481222638882453e+01, 0.000000000000000e+00, -4.984571860846268e+01, -4.348487355040855e+00, 0.000000000000000e+00, -4.192405589637234e+00, -2.228749411577577e+01, 0.000000000000000e+00, -2.188439857371790e+01, -2.228749411577570e+01, 0.000000000000000e+00, -2.188439857371787e+01, -1.931144296196188e-02, 0.000000000000000e+00, -1.902214879507279e-02, -1.936281808967683e-02, 0.000000000000000e+00, -1.907521789380708e-02, -1.934478898345383e-02, 0.000000000000000e+00, -1.905651363318786e-02, -1.933033329998105e-02, 0.000000000000000e+00, -1.904171542032591e-02, -1.933766053653575e-02, 0.000000000000000e+00, -1.904918478342691e-02, -1.933766053653575e-02, 0.000000000000000e+00, -1.904918478342691e-02, -2.166401396969529e-02, 0.000000000000000e+00, -2.138093500281753e-02, -3.211545469222615e-02, 0.000000000000000e+00, -3.165509391768788e-02, -2.879376846331693e-02, 0.000000000000000e+00, -2.836283140609398e-02, -2.577455925195470e-02, 0.000000000000000e+00, -2.543368131607156e-02, -2.729891318990552e-02, 0.000000000000000e+00, -2.692123278145158e-02, -2.729891318990552e-02, 0.000000000000000e+00, -2.692123278145158e-02, -1.135476432559256e-02, 0.000000000000000e+00, -1.129806406351806e-02, -4.242707042276133e-01, 0.000000000000000e+00, -4.187084007347039e-01, -2.692702017299362e-01, 0.000000000000000e+00, -2.634958012971775e-01, -1.250221444113889e-01, 0.000000000000000e+00, -1.226326214271186e-01, -1.864516909143017e-01, 0.000000000000000e+00, -1.872986671104203e-01, -1.864516909143018e-01, 0.000000000000000e+00, -1.872986671104204e-01, -4.461300152293988e-02, 0.000000000000000e+00, -4.364556203034604e-02, -3.693209624552562e+00, 0.000000000000000e+00, -3.695993232206805e+00, -3.552605837644132e+00, 0.000000000000000e+00, -3.613800135190107e+00, -1.580396024732378e-01, 0.000000000000000e+00, -1.499954973277816e-01, -4.109764379971454e+00, 0.000000000000000e+00, -4.665180599884760e+00, -4.109764379971457e+00, 0.000000000000000e+00, -4.665180599884763e+00, -5.621992882808793e+00, 0.000000000000000e+00, -5.738231416096089e+00, -2.812474742672403e+01, 0.000000000000000e+00, -4.981776213365438e+01, -1.735592435854845e+01, 0.000000000000000e+00, -1.847597656175782e+01, -4.606412044123593e+00, 0.000000000000000e+00, -4.495673569951427e+00, -4.594485282326200e+01, 0.000000000000000e+00, -2.272127163421348e+01, -4.594485282326207e+01, 0.000000000000000e+00, -2.272127163421354e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
