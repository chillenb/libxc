
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_ssb_d_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ssb_d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.188264089127753e+01, -2.188266244826212e+01, -2.188284338003107e+01, -2.188248876517245e+01, -2.188265155110361e+01, -2.188265155110361e+01, -3.651559527850029e+00, -3.651508253593728e+00, -3.650253135451470e+00, -3.653194473463447e+00, -3.651548712166093e+00, -3.651548712166093e+00, -7.413187730374959e-01, -7.418915842534001e-01, -7.607004130911500e-01, -7.649507045327496e-01, -7.415205925238684e-01, -7.415205925238684e-01, -2.216170893914008e-01, -2.224153261399297e-01, -8.544109019637661e-01, -1.832654287769798e-01, -2.218326784179787e-01, -2.218326784179787e-01, -1.701059470257823e-02, -1.781369288553546e-02, -7.060826442910653e-02, -8.175939767491647e-03, -1.762813859824980e-02, -1.762813859824980e-02, -5.263905949123501e+00, -5.263733230083455e+00, -5.263893221943282e+00, -5.263758706748772e+00, -5.263807619795055e+00, -5.263807619795055e+00, -2.374860133398018e+00, -2.379865909328800e+00, -2.384721632043084e+00, -2.388528129465585e+00, -2.365666628130180e+00, -2.365666628130180e+00, -5.891596229538485e-01, -6.291950384296902e-01, -5.600517054919824e-01, -5.721309752206025e-01, -6.084462737836759e-01, -6.084462737836759e-01, -1.462961670182770e-01, -2.428768936759076e-01, -1.437189603459864e-01, -1.921789064451674e+00, -1.619916999390674e-01, -1.619916999390674e-01, -7.887370019740382e-03, -9.012774695303741e-03, -6.755303212612564e-03, -9.588830905225058e-02, -8.211988795461223e-03, -8.211988795461225e-03, -5.992337001265896e-01, -5.943925935258856e-01, -5.960596418349373e-01, -5.974067880942270e-01, -5.967273597839762e-01, -5.967273597839762e-01, -5.802618112337372e-01, -5.316918778261300e-01, -5.350773370254256e-01, -5.450764336807595e-01, -5.386473211340846e-01, -5.386473211340846e-01, -6.599208085806560e-01, -2.895754845734949e-01, -3.237971833523691e-01, -3.722741385427990e-01, -3.465443992176526e-01, -3.465443992176525e-01, -4.806094764927423e-01, -6.578452122167738e-02, -8.743222595007794e-02, -3.388280050532632e-01, -1.205220288234597e-01, -1.205220288234597e-01, -1.992743315808021e-02, -2.468802348872437e-03, -4.689211534266919e-03, -1.148796261113543e-01, -6.979609240171611e-03, -6.979609240171601e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_ssb_d_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ssb_d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.591948768528277e+01, -2.591968217735742e+01, -2.592040590828215e+01, -2.591722380715474e+01, -2.591959145709149e+01, -2.591959145709149e+01, -3.912716148812742e+00, -3.912892966454326e+00, -3.917917983192594e+00, -3.910093588047072e+00, -3.912823751972565e+00, -3.912823751972565e+00, -6.891017843471292e-01, -6.874099587556799e-01, -6.532462572571197e-01, -6.579865388729067e-01, -6.884858660516420e-01, -6.884858660516420e-01, -2.085385372166690e-01, -2.093995043203678e-01, -8.632125769649787e-01, -1.827858242047007e-01, -2.087624552666444e-01, -2.087624552666444e-01, -2.257487010488575e-02, -2.362976439701255e-02, -8.916302623381957e-02, -1.089136225592850e-02, -2.338386105857463e-02, -2.338386105857463e-02, -6.635183166576983e+00, -6.642307688185637e+00, -6.635904063140894e+00, -6.641444402447720e+00, -6.638857135622009e+00, -6.638857135622009e+00, -1.783981766590190e+00, -1.803368724519285e+00, -1.769528360677282e+00, -1.784446377915215e+00, -1.816680812089626e+00, -1.816680812089626e+00, -7.040169399174102e-01, -8.451971688200332e-01, -6.609402003288665e-01, -7.662802698135485e-01, -7.484785111097263e-01, -7.484785111097263e-01, -1.614733875009331e-01, -2.330712058570159e-01, -1.575307347221275e-01, -2.553550867235812e+00, -1.686204121407079e-01, -1.686204121407079e-01, -1.050734811593451e-02, -1.200337272149608e-02, -8.997349466427452e-03, -1.153753914215703e-01, -1.093676635006017e-02, -1.093676635006017e-02, -8.020261809096979e-01, -7.994416717972767e-01, -8.008718554621741e-01, -8.015436803867300e-01, -8.012478263845478e-01, -8.012478263845478e-01, -7.757760436349832e-01, -5.524573810554134e-01, -6.242911619493263e-01, -7.067436995511751e-01, -6.659820397130735e-01, -6.659820397130736e-01, -8.851020298785605e-01, -2.716572354940317e-01, -3.039560158422973e-01, -3.811015019438705e-01, -3.338206912497390e-01, -3.338206912497390e-01, -4.958241801343672e-01, -8.401681269030703e-02, -1.078373599347526e-01, -3.776222979059989e-01, -1.362278626931527e-01, -1.362278626931526e-01, -2.642221436427423e-02, -3.291368597975386e-03, -6.249942463389628e-03, -1.296977756055736e-01, -9.296835829304375e-03, -9.296835829304359e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_ssb_d_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ssb_d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-8.247709049426052e-09, -8.247402360062850e-09, -8.246302902698527e-09, -8.251319570267451e-09, -8.247545065626018e-09, -8.247545065626018e-09, -1.530354116884955e-05, -1.530197141501520e-05, -1.525608824747764e-05, -1.532188794398291e-05, -1.530247321566924e-05, -1.530247321566924e-05, -1.079792344195214e-02, -1.081832957654867e-02, -1.097875163987502e-02, -1.074086542911720e-02, -1.080558482227420e-02, -1.080558482227420e-02, -6.821705369925209e-01, -6.835252359629226e-01, -5.544134190813378e-03, -9.309727557119536e-01, -6.830992236303031e-01, -6.830992236303031e-01, -4.734599376843605e+00, -4.747415067038476e+00, -1.990284125643701e+00, -3.356196183326098e+00, -4.931353043856323e+00, -4.931353043856323e+00, -1.553054593268666e-06, -1.533804194165301e-06, -1.551123753031319e-06, -1.536154737791745e-06, -1.543126205595484e-06, -1.543126205595484e-06, -1.599112828452743e-04, -1.564786048011448e-04, -1.602763230347185e-04, -1.576032283648670e-04, -1.570487197137432e-04, -1.570487197137432e-04, -1.307756894764202e-02, 1.548487204468266e-03, -1.666876372363488e-02, 8.154407019983836e-05, -9.722560012816225e-03, -9.722560012816225e-03, -1.079317151326378e+00, -3.885292105770001e-01, -1.233806656342763e+00, -1.301745161270474e-05, -1.149790149128126e+00, -1.149790149128126e+00, -3.559758429409423e+00, -3.567109552514127e+00, -1.018971406380726e+01, -1.941315234899153e+00, -5.263665376961418e+00, -5.263665376960375e+00, 4.119122063198686e-03, 2.881680776124958e-03, 3.511251614170139e-03, 3.858594448499978e-03, 3.700704805502818e-03, 3.700704805502818e-03, 5.079788346049313e-03, -2.897506019740716e-02, -2.060248538235387e-02, -7.525027447664727e-03, -1.447248798843660e-02, -1.447248798843659e-02, 7.752420282080581e-04, -2.329449397365476e-01, -1.702065535041739e-01, -1.030185326725021e-01, -1.384219469597583e-01, -1.384219469597583e-01, -4.153612486257752e-02, -1.685822146155215e+00, -1.678512363120175e+00, -1.235362247433922e-01, -1.843385746256389e+00, -1.843385746256392e+00, -3.559795228331379e+00, -6.127552479828047e+00, -5.277535374835552e+00, -2.260198770314440e+00, -7.682165291494319e+00, -7.682165291495362e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
