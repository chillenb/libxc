
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_ssb_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ssb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.176816256195703e+01, -2.176818344938293e+01, -2.176836175532330e+01, -2.176801809082947e+01, -2.176817286566762e+01, -2.176817286566762e+01, -3.632267881001237e+00, -3.632217811768030e+00, -3.630994634592518e+00, -3.633876397846576e+00, -3.632257603393929e+00, -3.632257603393929e+00, -7.317873045297566e-01, -7.322543002916124e-01, -7.481492353368001e-01, -7.525529549929042e-01, -7.319510676683543e-01, -7.319510676683543e-01, -2.119815793508533e-01, -2.129458765492718e-01, -8.474110830625732e-01, -1.749060826857040e-01, -2.122482523926306e-01, -2.122482523926306e-01, -1.699269948185960e-02, -1.779311488504046e-02, -6.979294219253200e-02, -8.174272057574546e-03, -1.760781275202343e-02, -1.760781275202343e-02, -5.233860438306537e+00, -5.233616404733898e+00, -5.233840581102533e+00, -5.233650617637144e+00, -5.233725421441149e+00, -5.233725421441149e+00, -2.352409451855226e+00, -2.357574957539888e+00, -2.361924689911516e+00, -2.365836578762630e+00, -2.343840700132650e+00, -2.343840700132650e+00, -5.840439578316866e-01, -6.243610720750143e-01, -5.548067611007351e-01, -5.676068742438695e-01, -6.035429284347789e-01, -6.035429284347789e-01, -1.412796687525026e-01, -2.314938707883522e-01, -1.386473820819468e-01, -1.908481698730321e+00, -1.552436322915045e-01, -1.552436322915045e-01, -7.885828008440652e-03, -9.010469381631709e-03, -6.753659973162209e-03, -9.390619663713778e-02, -8.209868613141338e-03, -8.209868613141338e-03, -5.946325595683160e-01, -5.897663878969508e-01, -5.914364458370353e-01, -5.927902962436029e-01, -5.921070069793838e-01, -5.921070069793838e-01, -5.758146118609204e-01, -5.240758925760818e-01, -5.296911410135150e-01, -5.405616950348540e-01, -5.338539815337999e-01, -5.338539815337999e-01, -6.549173107844305e-01, -2.766872869596248e-01, -3.114310381218322e-01, -3.644444908406295e-01, -3.361373289921276e-01, -3.361373289921274e-01, -4.726474958322633e-01, -6.517600655926625e-02, -8.602343806858938e-02, -3.334404450839067e-01, -1.167916144548802e-01, -1.167916144548801e-01, -1.990250702333435e-02, -2.468742066907497e-03, -4.688818875435312e-03, -1.113001394804431e-01, -6.978036429850754e-03, -6.978036429850744e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_ssb_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ssb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.572642805071234e+01, -2.572661327191085e+01, -2.572730802982359e+01, -2.572427753258670e+01, -2.572652682980219e+01, -2.572652682980219e+01, -3.907231842422227e+00, -3.907392329753709e+00, -3.911968401267643e+00, -3.904916509402879e+00, -3.907331022101372e+00, -3.907331022101372e+00, -7.037398898813895e-01, -7.021029766910279e-01, -6.657464007505061e-01, -6.707146534314405e-01, -7.031448872643897e-01, -7.031448872643897e-01, -2.070947800360848e-01, -2.089181936256156e-01, -8.721175308529751e-01, -1.700565602317173e-01, -2.076224775006378e-01, -2.076224775006378e-01, -2.250385225323238e-02, -2.354817922589027e-02, -8.624418674339918e-02, -1.088467650547838e-02, -2.330327658779208e-02, -2.330327658779208e-02, -6.572575139406632e+00, -6.579530851946269e+00, -6.573278776770328e+00, -6.578687789407071e+00, -6.576161172201632e+00, -6.576161172201632e+00, -1.789833487376448e+00, -1.811178744078263e+00, -1.772451384108159e+00, -1.789040401994343e+00, -1.827177292438884e+00, -1.827177292438884e+00, -7.047133096398260e-01, -8.390073811452435e-01, -6.630923438282788e-01, -7.609301114705516e-01, -7.467486600120822e-01, -7.467486600120822e-01, -1.489090266312342e-01, -2.216507377012704e-01, -1.451414341111119e-01, -2.531743688591236e+00, -1.552942692408403e-01, -1.552942692408403e-01, -1.050116551242490e-02, -1.199414097286012e-02, -8.990772518093215e-03, -1.090336090152221e-01, -1.092827950884945e-02, -1.092827950884945e-02, -7.960979474988285e-01, -7.936776090662546e-01, -7.950672489590919e-01, -7.956958346678744e-01, -7.954232661097662e-01, -7.954232661097662e-01, -7.700078764862300e-01, -5.640471456657262e-01, -6.276907189107332e-01, -7.031123522713280e-01, -6.652456191878047e-01, -6.652456191878048e-01, -8.785113159507569e-01, -2.661389250009364e-01, -3.068051677384910e-01, -3.918109250109302e-01, -3.428128243695580e-01, -3.428128243695580e-01, -5.077882913450923e-01, -8.178322623588132e-02, -1.030526031680786e-01, -3.841582062723137e-01, -1.261695808038011e-01, -1.261695808038010e-01, -2.632344994129180e-02, -3.291121715660326e-03, -6.248361044854847e-03, -1.200880988615400e-01, -9.290537769002859e-03, -9.290537769002842e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_ssb_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ssb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-8.350058106865419e-09, -8.349774033576420e-09, -8.348740590725323e-09, -8.353387549994194e-09, -8.349906341630799e-09, -8.349906341630799e-09, -1.498008613029238e-05, -1.497875363780391e-05, -1.493946304888667e-05, -1.499420463013425e-05, -1.497914572504271e-05, -1.497914572504271e-05, -9.975043246672951e-03, -9.995433903362539e-03, -1.027154222225996e-02, -1.004720421298919e-02, -9.982641260977400e-03, -9.982641260977400e-03, -5.943098499322317e-01, -5.899255690767512e-01, -5.228812465841920e-03, -9.557084276063187e-01, -5.933452632931049e-01, -5.933452632931049e-01, -6.841013779880178e+00, -6.856033064422392e+00, -2.721111380399542e+00, -4.868823066172015e+00, -7.121859276390273e+00, -7.121859276390273e+00, -1.644409806503012e-06, -1.626092344876968e-06, -1.642572748869392e-06, -1.628329359884001e-06, -1.634965914935591e-06, -1.634965914935591e-06, -1.558227536632149e-04, -1.522395699876213e-04, -1.565405400571564e-04, -1.537302890040185e-04, -1.524476870265152e-04, -1.524476870265152e-04, -1.218967023221744e-02, 1.502530242006576e-03, -1.530571585062162e-02, 1.283640223422276e-04, -9.231680686593805e-03, -9.231680686593805e-03, -1.268119551347738e+00, -3.735797261897268e-01, -1.437489295989443e+00, -1.892076549922240e-05, -1.255304388120519e+00, -1.255304388120519e+00, -5.164526986588529e+00, -5.173665187463406e+00, -1.478543097706321e+01, -2.516242985778148e+00, -7.635650368856802e+00, -7.635650368856281e+00, 4.287881298976829e-03, 2.926902828315170e-03, 3.595610559252810e-03, 3.977733232421853e-03, 3.802056623329778e-03, 3.802056623329778e-03, 5.355343288825429e-03, -2.558006791955369e-02, -1.866946463378298e-02, -7.074235403676447e-03, -1.336710102404714e-02, -1.336710102404713e-02, 6.851033609497070e-04, -2.106030565986563e-01, -1.460163776656658e-01, -8.557107372814111e-02, -1.153280678632609e-01, -1.153280678632610e-01, -3.594887735926124e-02, -2.333417015260730e+00, -2.235892638623007e+00, -1.022202728564303e-01, -2.226251358615313e+00, -2.226251358615319e+00, -5.137742378591238e+00, -8.899542820186360e+00, -7.662345039319079e+00, -2.725738222371672e+00, -1.114718417529803e+01, -1.114718417529796e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
