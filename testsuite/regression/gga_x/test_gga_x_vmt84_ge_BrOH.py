
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_vmt84_ge_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_vmt84_ge", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.047916338569825e+01, -2.047919667406813e+01, -2.047940553664611e+01, -2.047885922758098e+01, -2.047918043633652e+01, -2.047918043633652e+01, -3.373266945381772e+00, -3.373251085729835e+00, -3.372954554340271e+00, -3.374181109733815e+00, -3.373273157917063e+00, -3.373273157917063e+00, -6.677162516407854e-01, -6.675588532214147e-01, -6.653228830500190e-01, -6.696472369195883e-01, -6.676560961337905e-01, -6.676560961337905e-01, -2.026241772002165e-01, -2.035713331141008e-01, -7.842871005034228e-01, -1.703122187489100e-01, -2.028836125345798e-01, -2.028836125345798e-01, -9.212531016312501e-03, -9.655388095762120e-03, -7.263229652341786e-02, -4.192394946279232e-03, -9.554622739137767e-03, -9.554622739137767e-03, -4.947393260423875e+00, -4.947382508824473e+00, -4.947397026788836e+00, -4.947388581268977e+00, -4.947380678704037e+00, -4.947380678704037e+00, -2.004335251546719e+00, -2.014602064470031e+00, -2.004088250431672e+00, -2.012060158393929e+00, -2.011691470419978e+00, -2.011691470419978e+00, -5.593939071746409e-01, -5.909524188561031e-01, -5.321324626044016e-01, -5.414054383221060e-01, -5.781717488685170e-01, -5.781717488685170e-01, -1.424141059183165e-01, -2.222771155571325e-01, -1.394218782630352e-01, -1.797610789672863e+00, -1.533166088598834e-01, -1.533166088598834e-01, -4.031366475608902e-03, -4.691329462887664e-03, -3.505476612966036e-03, -9.765991361946198e-02, -4.276743571127975e-03, -4.276743571127974e-03, -5.573616596692577e-01, -5.576968252310263e-01, -5.575791013297549e-01, -5.574842004086276e-01, -5.575313794944846e-01, -5.575313794944846e-01, -5.389419543525679e-01, -4.970342403325074e-01, -5.086973733934417e-01, -5.197844293595136e-01, -5.139834151030334e-01, -5.139834151030334e-01, -6.201844172789176e-01, -2.631630958931475e-01, -2.955887908203593e-01, -3.509174123534448e-01, -3.207091943768015e-01, -3.207091943768014e-01, -4.502550154881891e-01, -6.692077637787608e-02, -8.994101577579663e-02, -3.249644611606155e-01, -1.187984104607696e-01, -1.187984104607695e-01, -1.081388671809992e-02, -7.363704181546272e-04, -2.158937198956551e-03, -1.131712991654986e-01, -3.604078954017687e-03, -3.604078954017680e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_vmt84_ge_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_vmt84_ge", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.561067137503337e+01, -2.561075252606502e+01, -2.561113288686460e+01, -2.560980364068340e+01, -2.561071401812972e+01, -2.561071401812972e+01, -4.125557919193944e+00, -4.125591611665567e+00, -4.126687285212937e+00, -4.125673570739684e+00, -4.125592822663729e+00, -4.125592822663729e+00, -7.697126478338563e-01, -7.684438538128442e-01, -7.349988399493776e-01, -7.414890376868896e-01, -7.692520981940355e-01, -7.692520981940355e-01, -1.987367827431840e-01, -2.019146748000598e-01, -9.379317511497645e-01, -1.497278340034568e-01, -1.996872043688670e-01, -1.996872043688670e-01, -1.241569508582159e-02, -1.308167191735318e-02, -9.638253909144903e-02, -6.418502779983231e-03, -1.294201478526813e-02, -1.294201478526813e-02, -6.290460830759526e+00, -6.292651687003211e+00, -6.290686045436124e+00, -6.292389553762303e+00, -6.291582826772713e+00, -6.291582826772713e+00, -2.218604568640156e+00, -2.237237673521576e+00, -2.208108422667526e+00, -2.222630100767693e+00, -2.244917004647005e+00, -2.244917004647005e+00, -6.924417536188969e-01, -7.722390446548417e-01, -6.555763993944804e-01, -6.998736717113975e-01, -7.221409413360630e-01, -7.221409413360630e-01, -1.328367753998675e-01, -2.003817245034388e-01, -1.289496331534294e-01, -2.348714171746973e+00, -1.358075693187187e-01, -1.358075693187187e-01, -6.208436761686242e-03, -6.982682635434218e-03, -5.248596040213917e-03, -1.067814310170474e-01, -6.359148167810784e-03, -6.359148167810785e-03, -7.387865357873761e-01, -7.305333004521906e-01, -7.334765512296378e-01, -7.357618841747230e-01, -7.346174681130903e-01, -7.346174681130903e-01, -7.157780913420468e-01, -5.868883062052670e-01, -6.239527032908941e-01, -6.589916318409386e-01, -6.412062711074938e-01, -6.412062711074940e-01, -8.089624284033652e-01, -2.504879107585000e-01, -3.024568356724665e-01, -4.053901977832127e-01, -3.500775643750401e-01, -3.500775643750401e-01, -5.274291929115695e-01, -9.749387213634435e-02, -1.062873810606566e-01, -3.894477743285523e-01, -1.144751820647057e-01, -1.144751820647057e-01, -1.492269850695268e-02, -2.197915729461710e-03, -3.938406897514619e-03, -1.088433742765288e-01, -5.446762670944573e-03, -5.446762670944570e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_vmt84_ge_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_vmt84_ge", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.291464260226661e-09, -4.291429960162170e-09, -4.291235607166808e-09, -4.291798117310756e-09, -4.291446517051431e-09, -4.291446517051431e-09, -5.955850810225968e-06, -5.955889665978012e-06, -5.955974520880037e-06, -5.950778537753539e-06, -5.955769311045200e-06, -5.955769311045200e-06, -4.101062199844998e-03, -4.110285751913022e-03, -4.324613750540949e-03, -4.205247268796084e-03, -4.104464256502389e-03, -4.104464256502389e-03, -5.560657573528783e-01, -5.409803482344647e-01, -2.082002312466151e-03, -1.162967189324706e+00, -5.517145311798591e-01, -5.517145311798591e-01, 5.907809027693847e+00, 8.089353635265388e+00, -1.835039230615299e-01, 2.807292630843522e+02, 8.290938536028543e+00, 8.290938536028543e+00, -1.239838373697178e-06, -1.239425804131380e-06, -1.239792259601324e-06, -1.239471529249215e-06, -1.239632423616038e-06, -1.239632423616038e-06, -5.241170634338828e-05, -5.120145307145041e-05, -5.265509875874699e-05, -5.170569637846284e-05, -5.127272496912159e-05, -5.127272496912159e-05, -7.785096996604917e-03, -5.929078735108221e-03, -9.550682820765963e-03, -8.506324943114714e-03, -6.763194715411658e-03, -6.763194715411658e-03, -1.824068417288234e+00, -4.053211879230776e-01, -2.051782953738870e+00, -6.925938054726175e-05, -1.657729790221478e+00, -1.657729790221478e+00, 3.238618558509025e+02, 1.897064856559332e+02, 6.019857005148081e+02, -3.636064045245003e+00, 2.751554511671883e+02, 2.751554511671904e+02, -7.387800323132017e-03, -7.457158108327033e-03, -7.432229959421164e-03, -7.413107354858627e-03, -7.422686977163251e-03, -7.422686977163251e-03, -8.434207139628816e-03, -1.306251787262735e-02, -1.148430986152566e-02, -1.020456328136142e-02, -1.084129975728888e-02, -1.084129975728888e-02, -4.896616991133850e-03, -1.998858159710958e-01, -1.186396192208004e-01, -5.365184597179581e-02, -8.096073132669614e-02, -8.096073132669616e-02, -1.954209312671169e-02, 3.758453846404119e+00, -2.610318607295681e+00, -7.049738055510194e-02, -3.299397792883477e+00, -3.299397792883483e+00, 1.213348941454087e+01, 2.023855575620283e+04, 2.388269912055604e+03, -4.039137107762917e+00, 5.288290564893376e+02, 5.288290564893389e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
