
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_ncapr_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ncapr", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.101603346328087e+01, -2.101605853637962e+01, -2.101624189685652e+01, -2.101586738372523e+01, -2.101605339898542e+01, -2.101605339898542e+01, -3.490411728608687e+00, -3.490369709325555e+00, -3.489484041173569e+00, -3.491687036082199e+00, -3.490445757739701e+00, -3.490445757739701e+00, -7.033762633564069e-01, -7.034749880059901e-01, -7.079869870398050e-01, -7.126621056098642e-01, -7.131148254351460e-01, -7.131148254351460e-01, -2.243605217146500e-01, -2.248004842008559e-01, -8.115940176981533e-01, -2.019317548324890e-01, -2.235604453702930e-01, -2.235604453702929e-01, -2.413399639885501e-01, -2.328175403434172e-01, -1.702439269717558e-01, -2.995696027012045e-01, -2.488470851686573e-01, -2.488470851686570e-01, -5.046472192060987e+00, -5.045740088165310e+00, -5.046449815895764e+00, -5.045803318082601e+00, -5.046094772093753e+00, -5.046094772093753e+00, -2.140605748010385e+00, -2.149924532931490e+00, -2.143490870351561e+00, -2.151697462169261e+00, -2.144399391332648e+00, -2.144399391332648e+00, -5.831202726976417e-01, -6.033028638566162e-01, -5.445536556858634e-01, -5.382628012357585e-01, -5.892705733293462e-01, -5.892705733293463e-01, -1.836190981997878e-01, -2.485795079208706e-01, -1.780212537740626e-01, -1.814950892597050e+00, -1.821611696174838e-01, -1.821611696174838e-01, -2.973545349112877e-01, -2.859941872854051e-01, -1.695295886309270e-01, -1.582187053771849e-01, -2.037545805257477e-01, -2.037545805257479e-01, -5.508655364100028e-01, -5.543271581671754e-01, -5.531140414484721e-01, -5.521010076482129e-01, -5.526072310272112e-01, -5.526072310272112e-01, -5.340193140960624e-01, -5.147974997005463e-01, -5.197871844527622e-01, -5.245821670168567e-01, -5.218883663302046e-01, -5.218883663302046e-01, -6.336879719944619e-01, -2.883058499246908e-01, -3.189103273250593e-01, -3.694235552950674e-01, -3.413754301921113e-01, -3.413754301921112e-01, -4.752287696995887e-01, -1.762986032422882e-01, -1.688859197293516e-01, -3.445737627662832e-01, -1.570841207866768e-01, -1.570841207866768e-01, -2.308234335082309e-01, -2.561826630320839e-01, -2.586405166842073e-01, -1.554734007656267e-01, -1.934729422972196e-01, -1.934729422972195e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_ncapr_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ncapr", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.500820984220141e+01, -2.500818075713024e+01, -2.500832972587868e+01, -2.500826782575230e+01, -2.500867692801120e+01, -2.500877551329533e+01, -2.500732398688989e+01, -2.500705077963472e+01, -2.500828317786487e+01, -2.500771347765238e+01, -2.500828317786487e+01, -2.500771347765238e+01, -4.006568571746073e+00, -4.006791840894724e+00, -4.006615897504437e+00, -4.006849116439970e+00, -4.007865051374409e+00, -4.008216209839003e+00, -4.006347427138515e+00, -4.006709164840425e+00, -4.005789089969227e+00, -4.007889391982840e+00, -4.005789089969227e+00, -4.007889391982840e+00, -7.474706159762430e-01, -7.528480674779989e-01, -7.455032194669005e-01, -7.520714770148412e-01, -7.204246612984337e-01, -7.123107994679915e-01, -7.215417259249789e-01, -7.241714067078371e-01, -7.623985652573190e-01, -6.834221604755648e-01, -7.623985652573190e-01, -6.834221604755648e-01, -1.793799806284065e-01, -1.867014393857733e-01, -1.817870571730902e-01, -1.902453411358433e-01, -8.600986087886652e-01, -9.006630335878658e-01, -1.336094514564844e-01, -1.356808796373747e-01, -1.873980077201474e-01, -8.612808338137060e-02, -1.873980077201473e-01, -8.612808338137054e-02, 1.098380896159211e-01, 1.080653157135427e-01, 1.063377720829167e-01, 1.040766909740183e-01, 3.204570383355222e-02, 2.718947874593173e-02, 1.296649304091711e-01, 1.312809590267276e-01, 1.137958832540114e-01, 9.852092830174215e-02, 1.137958832540115e-01, 9.852092830174203e-02, -6.177273846836112e+00, -6.175718565923428e+00, -6.180290395732553e+00, -6.178632869960238e+00, -6.177439330359523e+00, -6.175817211786205e+00, -6.180027724572546e+00, -6.178464738412283e+00, -6.178820522133938e+00, -6.177182526647647e+00, -6.178820522133938e+00, -6.177182526647647e+00, -2.142347386560131e+00, -2.142231857507900e+00, -2.160858795479571e+00, -2.160205309946376e+00, -2.122211320678030e+00, -2.127876806164131e+00, -2.138088937036472e+00, -2.143948009169643e+00, -2.168008632212952e+00, -2.153771334345663e+00, -2.168008632212952e+00, -2.153771334345663e+00, -6.821297415522800e-01, -6.804207051299065e-01, -7.728361564393927e-01, -7.736207205483431e-01, -6.130668683262048e-01, -6.386754115898404e-01, -6.688811563258518e-01, -6.906162669643501e-01, -7.141454017000214e-01, -6.770950270015950e-01, -7.141454017000215e-01, -6.770950270015951e-01, -7.464302103761945e-02, -7.647639631619499e-02, -1.805637347350477e-01, -1.815422506746542e-01, -6.185424795410288e-02, -6.909005676526341e-02, -2.331759161027282e+00, -2.330779492262785e+00, -9.790173842521985e-02, -1.095990082747156e-01, -9.790173842521985e-02, -1.095990082747156e-01, 1.246240514686586e-01, 1.291397862607375e-01, 1.234051863346689e-01, 1.260384897263912e-01, 7.711950373261110e-02, 7.347659706290882e-02, -2.189495945623055e-02, -2.173456497371196e-02, 9.532973023529909e-02, 8.844328285900604e-02, 9.532973023529916e-02, 8.844328285900595e-02, -7.230545768231986e-01, -7.259980393854074e-01, -7.102556800299462e-01, -7.132860098793969e-01, -7.146850832919741e-01, -7.177147900247660e-01, -7.184357793302107e-01, -7.213850378792638e-01, -7.165551869105652e-01, -7.195434963879384e-01, -7.165551869105652e-01, -7.195434963879384e-01, -7.062720528897742e-01, -7.086273612308768e-01, -5.502537292156604e-01, -5.530803110546122e-01, -5.904938983269469e-01, -5.937120698477801e-01, -6.350290598138381e-01, -6.374888734467727e-01, -6.121946718603346e-01, -6.147100243482869e-01, -6.121946718603346e-01, -6.147100243482869e-01, -8.081150907050010e-01, -8.101280266574924e-01, -2.306719711599415e-01, -2.320665544977893e-01, -2.787321123832620e-01, -2.817701226393370e-01, -3.846949975361162e-01, -3.870786463661012e-01, -3.270232195817103e-01, -3.270327846538079e-01, -3.270232195817102e-01, -3.270327846538078e-01, -5.049414226555642e-01, -5.091880818184892e-01, 3.629337653866122e-02, 3.567975111423297e-02, 9.271161217892929e-03, 5.320792447529393e-03, -3.761806693918879e-01, -3.828025987304879e-01, -4.826212924890493e-02, -5.841378390096018e-02, -4.826212924890494e-02, -5.841378390096021e-02, 1.047580797771927e-01, 1.025399702455903e-01, 1.085328396565232e-01, 9.189396777160772e-02, 1.104276208206253e-01, 1.070573812649555e-01, -4.501561085854623e-02, -4.663834111256614e-02, 7.715962373714078e-02, 8.948260287477303e-02, 7.715962373714062e-02, 8.948260287477303e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_ncapr_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ncapr", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.525775875151623e-08, 0.000000000000000e+00, -1.525784248459814e-08, -1.525762604172994e-08, 0.000000000000000e+00, -1.525774603690926e-08, -1.525707636748165e-08, 0.000000000000000e+00, -1.525699342340776e-08, -1.525857828485949e-08, 0.000000000000000e+00, -1.525890674840659e-08, -1.525768591880903e-08, 0.000000000000000e+00, -1.525804987116478e-08, -1.525768591880903e-08, 0.000000000000000e+00, -1.525804987116478e-08, -2.071292415945632e-05, 0.000000000000000e+00, -2.071862522270660e-05, -2.071323749690232e-05, 0.000000000000000e+00, -2.071938973660255e-05, -2.072538535907875e-05, 0.000000000000000e+00, -2.072808529900767e-05, -2.069095311926466e-05, 0.000000000000000e+00, -2.069481888891753e-05, -2.072498098455211e-05, 0.000000000000000e+00, -2.070387052333750e-05, -2.072498098455211e-05, 0.000000000000000e+00, -2.070387052333750e-05, -1.339631970097931e-02, 0.000000000000000e+00, -1.337600926494291e-02, -1.341358647421525e-02, 0.000000000000000e+00, -1.338898755605755e-02, -1.364125032455488e-02, 0.000000000000000e+00, -1.366156207753800e-02, -1.326843406285578e-02, 0.000000000000000e+00, -1.326780456445367e-02, -1.324847473850162e-02, 0.000000000000000e+00, -1.320883000838200e-02, -1.324847473850162e-02, 0.000000000000000e+00, -1.320883000838200e-02, -1.811515478189723e+00, 0.000000000000000e+00, -1.635199507401800e+00, -1.776257324940288e+00, 0.000000000000000e+00, -1.579417598835131e+00, -7.751727891065804e-03, 0.000000000000000e+00, -7.164127736760447e-03, -3.739619911849196e+00, 0.000000000000000e+00, -3.567075964441412e+00, -1.544366493429347e+00, 0.000000000000000e+00, -1.043082173391040e+01, -1.544366493429346e+00, 0.000000000000000e+00, -1.043082173391040e+01, -1.416694079264631e+05, 0.000000000000000e+00, -1.155129140161259e+05, -1.222812028841783e+05, 0.000000000000000e+00, -9.710736751640397e+04, -3.387481025641355e+02, 0.000000000000000e+00, -2.814433886081500e+02, -7.550570882817140e+05, 0.000000000000000e+00, -7.943298323468887e+05, -2.071080349900916e+05, 0.000000000000000e+00, -1.575008445851740e+06, -2.071080349900917e+05, 0.000000000000000e+00, -1.575008445851739e+06, -4.464807859330602e-06, 0.000000000000000e+00, -4.468960751000631e-06, -4.464608147270407e-06, 0.000000000000000e+00, -4.468769304010880e-06, -4.464765369203111e-06, 0.000000000000000e+00, -4.468931649531891e-06, -4.464594580946338e-06, 0.000000000000000e+00, -4.468758175441922e-06, -4.464731657894760e-06, 0.000000000000000e+00, -4.468870181659185e-06, -4.464731657894760e-06, 0.000000000000000e+00, -4.468870181659185e-06, -1.649475130914706e-04, 0.000000000000000e+00, -1.649773071029628e-04, -1.614493848224925e-04, 0.000000000000000e+00, -1.615950156497745e-04, -1.655268091043114e-04, 0.000000000000000e+00, -1.654278770694186e-04, -1.625120408907217e-04, 0.000000000000000e+00, -1.623423502918656e-04, -1.624553708353710e-04, 0.000000000000000e+00, -1.631379055940816e-04, -1.624553708353710e-04, 0.000000000000000e+00, -1.631379055940816e-04, -2.603549871862502e-02, 0.000000000000000e+00, -2.632407449473677e-02, -2.079031880329945e-02, 0.000000000000000e+00, -2.077008314439885e-02, -3.737226121011012e-02, 0.000000000000000e+00, -3.284195524252081e-02, -3.576567203551341e-02, 0.000000000000000e+00, -3.134175846373779e-02, -2.267554036612859e-02, 0.000000000000000e+00, -2.765406502838686e-02, -2.267554036612859e-02, 0.000000000000000e+00, -2.765406502838687e-02, -1.156379040543206e+01, 0.000000000000000e+00, -1.124708793374564e+01, -1.376115532746351e+00, 0.000000000000000e+00, -1.354723140240570e+00, -1.641329741230146e+01, 0.000000000000000e+00, -1.374673814419897e+01, -2.527563760250828e-04, 0.000000000000000e+00, -2.532217196451449e-04, -7.673401422188088e+00, 0.000000000000000e+00, -6.746769104043147e+00, -7.673401422188088e+00, 0.000000000000000e+00, -6.746769104043147e+00, -2.068126041719988e+06, 0.000000000000000e+00, -1.775998873804603e+06, -8.864148271082975e+05, 0.000000000000000e+00, -8.318591724294651e+05, -3.132897451294767e+06, 0.000000000000000e+00, -2.638461610861590e+06, -6.095992084449798e+01, 0.000000000000000e+00, -5.936846122177680e+01, -2.588628906318335e+06, 0.000000000000000e+00, -9.026264271168971e+05, -2.588628906318334e+06, 0.000000000000000e+00, -9.026264271168971e+05, -2.896719150070981e-02, 0.000000000000000e+00, -2.852413937707011e-02, -2.930773337815494e-02, 0.000000000000000e+00, -2.886949182822690e-02, -2.923253742191053e-02, 0.000000000000000e+00, -2.879173039728662e-02, -2.914086367509410e-02, 0.000000000000000e+00, -2.869993669234751e-02, -2.919099662553480e-02, 0.000000000000000e+00, -2.874996215910759e-02, -2.919099662553480e-02, 0.000000000000000e+00, -2.874996215910759e-02, -3.223757796694315e-02, 0.000000000000000e+00, -3.181351217204834e-02, -4.678398931088328e-02, 0.000000000000000e+00, -4.614239514028046e-02, -4.271518794902696e-02, 0.000000000000000e+00, -4.210449846556453e-02, -3.885484626502949e-02, 0.000000000000000e+00, -3.834661181229148e-02, -4.085771843968074e-02, 0.000000000000000e+00, -4.030145846276408e-02, -4.085771843968074e-02, 0.000000000000000e+00, -4.030145846276408e-02, -1.719717626731400e-02, 0.000000000000000e+00, -1.710903840660898e-02, -6.507722241775439e-01, 0.000000000000000e+00, -6.401077719934272e-01, -3.866017207697569e-01, 0.000000000000000e+00, -3.773828563295461e-01, -1.807992525983300e-01, 0.000000000000000e+00, -1.774369998621207e-01, -2.649352717375686e-01, 0.000000000000000e+00, -2.661794967416430e-01, -2.649352717375688e-01, 0.000000000000000e+00, -2.661794967416431e-01, -6.488875160824724e-02, 0.000000000000000e+00, -6.355745175932218e-02, -3.566279358842077e+02, 0.000000000000000e+00, -3.484805587869038e+02, -1.292722877124073e+02, 0.000000000000000e+00, -1.158957553905628e+02, -2.319816260137894e-01, 0.000000000000000e+00, -2.205845480292520e-01, -2.941860788018467e+01, 0.000000000000000e+00, -2.525217020785302e+01, -2.941860788018467e+01, 0.000000000000000e+00, -2.525217020785302e+01, -4.124329388373791e+04, 0.000000000000000e+00, -3.672852732662133e+04, -8.279974206235932e+07, 0.000000000000000e+00, -9.130794792798562e+07, -7.417784988378740e+06, 0.000000000000000e+00, -6.125355872234710e+06, -3.455532552797447e+01, 0.000000000000000e+00, -3.262094793114886e+01, -3.510870118911984e+06, 0.000000000000000e+00, -1.212802475824145e+06, -3.510870118911995e+06, 0.000000000000000e+00, -1.212802475824150e+06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
