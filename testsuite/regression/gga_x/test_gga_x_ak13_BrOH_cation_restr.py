
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_ak13_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ak13", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.156334152194266e+01, -2.156334332945165e+01, -2.156346350189073e+01, -2.156343433055311e+01, -2.156343365466742e+01, -2.156343365466742e+01, -3.634930655330287e+00, -3.634845883943080e+00, -3.632976960776781e+00, -3.636918733204624e+00, -3.634916639914795e+00, -3.634916639914795e+00, -7.615351103769696e-01, -7.625581841006620e-01, -7.944853044832800e-01, -7.983096764217553e-01, -7.952931167380968e-01, -7.952931167380968e-01, -3.185713353814424e-01, -3.128842312174537e-01, -8.689140109975934e-01, -3.726194512102757e-01, -3.382797631310976e-01, -3.382797631310975e-01, -1.253301234982977e+00, -1.210715997349148e+00, -7.446633827178321e-01, -1.522046162204211e+00, -1.319682072616662e+00, -1.319682072616661e+00, -5.127468946193360e+00, -5.125707803445215e+00, -5.127404090397137e+00, -5.125849016049411e+00, -5.126566552438419e+00, -5.126566552438419e+00, -2.422652699777248e+00, -2.425364184118184e+00, -2.444290595480715e+00, -2.446375933028591e+00, -2.413989093178613e+00, -2.413989093178613e+00, -6.026520393852066e-01, -6.055907056667931e-01, -5.662099217037116e-01, -5.417095557239457e-01, -6.053526263860535e-01, -6.053526263860535e-01, -4.790873568020053e-01, -4.128743396530158e-01, -4.868009616071611e-01, -1.821052624654867e+00, -3.870773363780846e-01, -3.870773363780846e-01, -1.496149162813259e+00, -1.453974529725746e+00, -8.697653674211103e-01, -5.412787309663476e-01, -1.054605776542036e+00, -1.054605776542037e+00, -5.508464460868638e-01, -5.562231476083213e-01, -5.541736007532264e-01, -5.525886790417017e-01, -5.533655327418961e-01, -5.533655327418961e-01, -5.338218708075573e-01, -5.557541370414438e-01, -5.432057443404766e-01, -5.345819384462293e-01, -5.380361491112100e-01, -5.380361491112100e-01, -6.365785192973532e-01, -4.195413184051862e-01, -4.111230386318274e-01, -4.053177826586601e-01, -4.010617635689314e-01, -4.010617635689313e-01, -5.143573367436717e-01, -7.880332009537406e-01, -6.704070010301091e-01, -3.661407534559420e-01, -4.414171344038179e-01, -4.414171344038178e-01, -1.201772644326956e+00, -1.233415843914902e+00, -1.290471841402700e+00, -4.592059557023122e-01, -1.000366055870698e+00, -1.000366055870697e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_ak13_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ak13", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.351052038489139e+01, -2.351067741188030e+01, -2.351124903012880e+01, -2.350891535182815e+01, -2.351015615468042e+01, -2.351015615468042e+01, -3.636948138205536e+00, -3.637095466598804e+00, -3.640588843288809e+00, -3.635203827653460e+00, -3.637212454097993e+00, -3.637212454097993e+00, -6.140037686345192e-01, -6.107250078582857e-01, -5.234790537589228e-01, -5.315126825604712e-01, -5.327416005860884e-01, -5.327416005860884e-01, -1.144635983589352e-02, -2.310737787624166e-02, -7.428583517180721e-01, 1.218719369724060e-01, 5.960705770850645e-02, 5.960705770850647e-02, 5.288495110768983e-01, 5.188319928916598e-01, 4.546854191387148e-01, 5.629037635599553e-01, 5.209874616854279e-01, 5.209874616854268e-01, -5.936279077204810e+00, -5.941758084100802e+00, -5.936514764972423e+00, -5.941352016553221e+00, -5.939066323933496e+00, -5.939066323933496e+00, -1.519593348857437e+00, -1.550214279879136e+00, -1.466382554804653e+00, -1.493692149542286e+00, -1.562033760511989e+00, -1.562033760511989e+00, -6.297903227760785e-01, -7.637574621919606e-01, -5.696940614816800e-01, -6.667688168301236e-01, -6.507885920400590e-01, -6.507885920400590e-01, 2.701084764520981e-01, 8.539172759159189e-02, 2.832755346568006e-01, -2.305077634728837e+00, 1.740596164568917e-01, 1.740596164568917e-01, 5.306611085878475e-01, 5.398956656822818e-01, 3.371895592109008e-01, 3.411713339868448e-01, 4.083805782156368e-01, 4.083805782156366e-01, -7.229397178061788e-01, -7.036664567097110e-01, -7.106633865497872e-01, -7.162997937287386e-01, -7.135016696793888e-01, -7.135016696793888e-01, -7.071168000124660e-01, -4.553349952958760e-01, -5.328644601489716e-01, -6.074725195337316e-01, -5.703934261871211e-01, -5.703934261871211e-01, -7.977649813257569e-01, 3.217871183928011e-03, -9.930468950618816e-02, -3.035239679907122e-01, -2.001834300876776e-01, -2.001834300876776e-01, -4.154047467911447e-01, 4.758943931298022e-01, 4.216887971798742e-01, -3.271532204555566e-01, 2.610017940346763e-01, 2.610017940346758e-01, 5.437059115209497e-01, 3.775971784949813e-01, 4.429048839840962e-01, 2.779252710081826e-01, 3.856828320880444e-01, 3.856828320880443e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_ak13_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ak13", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.326837172970711e-08, -1.326818906475514e-08, -1.326738691407775e-08, -1.327010442716808e-08, -1.326867905432314e-08, -1.326867905432314e-08, -1.935897747903467e-05, -1.935855442873163e-05, -1.934685458445667e-05, -1.935246248673910e-05, -1.935660374554046e-05, -1.935660374554046e-05, -1.431618232442008e-02, -1.438370683149804e-02, -1.607231714512055e-02, -1.554972503389618e-02, -1.565907023873958e-02, -1.565907023873958e-02, -3.065063158698385e+00, -2.904196423502655e+00, -7.718098519139473e-03, -8.393737110642512e+00, -5.545572703733267e+00, -5.545572703733270e+00, -3.250739589922445e+05, -2.778970271566650e+05, -8.679865301047029e+02, -1.893873037073576e+06, -9.468242616808034e+05, -9.468242616808041e+05, -3.642003499530835e-06, -3.636141391646379e-06, -3.641739128357748e-06, -3.636564347649169e-06, -3.639032247604958e-06, -3.639032247604958e-06, -1.982060248561785e-04, -1.925825153242516e-04, -2.023689526185897e-04, -1.972754087364055e-04, -1.931178489345808e-04, -1.931178489345808e-04, -2.363897734176731e-02, -1.456516279046615e-02, -3.255159482299790e-02, -2.480096326178175e-02, -2.197591994715625e-02, -2.197591994715625e-02, -3.061818882565231e+01, -2.886654577034901e+00, -4.064997062798685e+01, -1.754682708920905e-04, -1.791250332392066e+01, -1.791250332392066e+01, -4.610366184764190e+06, -2.102674463807541e+06, -7.119557952135224e+06, -1.690235945218714e+02, -3.367393345649250e+06, -3.367393345649250e+06, -1.663962826349112e-02, -2.020806230226783e-02, -1.924954361757010e-02, -1.826698270791706e-02, -1.878552396576904e-02, -1.878552396576904e-02, -1.627952521858100e-02, -4.925968531420979e-02, -4.021023168493330e-02, -3.216851141650080e-02, -3.619592646751942e-02, -3.619592646751942e-02, -1.222645757084489e-02, -1.186363109240339e+00, -5.914138147690552e-01, -1.988884251908363e-01, -3.467018046692952e-01, -3.467018046692949e-01, -6.861714698445584e-02, -9.927043927462075e+02, -3.460157909663018e+02, -2.281333801189132e-01, -7.426796210715059e+01, -7.426796210715058e+01, -1.013812095791298e+05, -1.988971817526652e+08, -1.600979618628200e+07, -9.252961219458714e+01, -4.526638916909494e+06, -4.526638916909511e+06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
