
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_optpbe_vdw_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_optpbe_vdw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.074649480301190e+01, -2.074652230281826e+01, -2.074671512829557e+01, -2.074626341511785e+01, -2.074650871914802e+01, -2.074650871914802e+01, -3.431931881933997e+00, -3.431907393467735e+00, -3.431376250339430e+00, -3.433019658735188e+00, -3.431933906293737e+00, -3.431933906293737e+00, -6.867074516107027e-01, -6.867166270192741e-01, -6.892773125176130e-01, -6.934873110619315e-01, -6.867071246162914e-01, -6.867071246162914e-01, -2.139233988375220e-01, -2.145579411871815e-01, -8.012715051243250e-01, -1.830444535418553e-01, -2.140839542362451e-01, -2.140839542362451e-01, -1.927028164464849e-02, -2.017580605838113e-02, -7.824759309380297e-02, -9.278078695339757e-03, -1.996574056523816e-02, -1.996574056523816e-02, -4.995689948662102e+00, -4.995331696751244e+00, -4.995659016758831e+00, -4.995380353167001e+00, -4.995497916777915e+00, -4.995497916777915e+00, -2.075811581584611e+00, -2.085298832394825e+00, -2.077167593860836e+00, -2.084525372862763e+00, -2.080566771091527e+00, -2.080566771091527e+00, -5.678171426529006e-01, -5.934315523449231e-01, -5.406362413828084e-01, -5.448787764790757e-01, -5.858615288340472e-01, -5.858615288340472e-01, -1.529826205484746e-01, -2.377081351507158e-01, -1.498357447717728e-01, -1.805207296667833e+00, -1.650290148396950e-01, -1.650290148396950e-01, -8.950764810506245e-03, -1.022664076407775e-02, -7.665333768049948e-03, -1.041116666453869e-01, -9.317964185461339e-03, -9.317964185461339e-03, -5.580509410850391e-01, -5.597599637096332e-01, -5.591528004880670e-01, -5.586770380360220e-01, -5.589148773738153e-01, -5.589148773738153e-01, -5.393861713413047e-01, -5.089800460882450e-01, -5.172597310609565e-01, -5.251577430618015e-01, -5.209396054723783e-01, -5.209396054723783e-01, -6.230191420122839e-01, -2.790962093463891e-01, -3.100499208760388e-01, -3.607615626621837e-01, -3.329214694770453e-01, -3.329214694770452e-01, -4.617406569416531e-01, -7.325753302911739e-02, -9.592598106211540e-02, -3.318726260835725e-01, -1.273801939362674e-01, -1.273801939362674e-01, -2.256534881614074e-02, -2.802631066144163e-03, -5.322638058231486e-03, -1.213600191264163e-01, -7.920143725492473e-03, -7.920143725492461e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_optpbe_vdw_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_optpbe_vdw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.530268706137170e+01, -2.530277368488714e+01, -2.530316891475103e+01, -2.530175024833136e+01, -2.530273267025268e+01, -2.530273267025268e+01, -4.061800158596117e+00, -4.061840995781024e+00, -4.063130573918833e+00, -4.061769421146319e+00, -4.061838465138648e+00, -4.061838465138648e+00, -7.525014089525924e-01, -7.511672143428303e-01, -7.166013720190622e-01, -7.229949540865184e-01, -7.520172139029349e-01, -7.520172139029349e-01, -1.951798817960782e-01, -1.979149585269565e-01, -9.206118194924811e-01, -1.566375212663076e-01, -1.959869756714493e-01, -1.959869756714493e-01, -2.546477035284916e-02, -2.663795448564057e-02, -9.437800412328540e-02, -1.234927606595648e-02, -2.636109696179737e-02, -2.636109696179737e-02, -6.232514502731520e+00, -6.235074232962273e+00, -6.232776510585272e+00, -6.234766851047254e+00, -6.233826904985973e+00, -6.233826904985973e+00, -2.163238333354967e+00, -2.181708638055549e+00, -2.152632294355659e+00, -2.166991042759840e+00, -2.189707305963304e+00, -2.189707305963304e+00, -6.829886324923243e-01, -7.690723837483981e-01, -6.461512787549388e-01, -6.955428928185481e-01, -7.133097130681042e-01, -7.133097130681042e-01, -1.461994948639428e-01, -2.031523455782553e-01, -1.416872039843662e-01, -2.339014131915707e+00, -1.460833070103400e-01, -1.460833070103400e-01, -1.191447477841773e-02, -1.360584136129108e-02, -1.019930038977055e-02, -1.151933377306318e-01, -1.239666742654588e-02, -1.239666742654588e-02, -7.378787340444095e-01, -7.278841315754649e-01, -7.314372406314862e-01, -7.342052151027375e-01, -7.328183084228512e-01, -7.328183084228511e-01, -7.151906217803458e-01, -5.751695883928463e-01, -6.145736211032665e-01, -6.525890065166889e-01, -6.332415514875713e-01, -6.332415514875713e-01, -8.053560541266679e-01, -2.477655718678692e-01, -2.953442951714094e-01, -3.964021449370413e-01, -3.411932449319593e-01, -3.411932449319593e-01, -5.164441149777709e-01, -9.017049087252732e-02, -1.109603136813742e-01, -3.823590493025083e-01, -1.263451907616613e-01, -1.263451907616613e-01, -2.976847425659627e-02, -3.736040348341658e-03, -7.091758873471268e-03, -1.201251429160640e-01, -1.053994333522527e-02, -1.053994333522526e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_optpbe_vdw_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_optpbe_vdw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-5.973802615774991e-09, -5.973757965191762e-09, -5.973496755488818e-09, -5.974229170993719e-09, -5.973779586966271e-09, -5.973779586966271e-09, -8.228161047936791e-06, -8.228251105483655e-06, -8.229367395134245e-06, -8.220467352163103e-06, -8.228067164369422e-06, -8.228067164369422e-06, -5.547703898261650e-03, -5.557273696239969e-03, -5.755837916768982e-03, -5.602075524988640e-03, -5.551262627517557e-03, -5.551262627517557e-03, -7.010402360042689e-01, -6.861096764910557e-01, -2.853996317105511e-03, -1.314310175426098e+00, -6.968717914583202e-01, -6.968717914583202e-01, -1.022159094961503e+01, -1.024185025958570e+01, -3.965607150861814e+00, -7.282297404188822e+00, -1.063973547184086e+01, -1.063973547184086e+01, -1.735435494797845e-06, -1.735058969566491e-06, -1.735391052049349e-06, -1.735098385228569e-06, -1.735250988957192e-06, -1.735250988957192e-06, -6.981150601870838e-05, -6.828669274099540e-05, -7.000770075207645e-05, -6.881586449639356e-05, -6.851182266447264e-05, -6.851182266447264e-05, -1.079964992445675e-02, -8.373670862788713e-03, -1.322753195996633e-02, -1.197141360660306e-02, -9.410540692754448e-03, -9.410540692754448e-03, -1.847365655416530e+00, -4.805012658785649e-01, -2.093130649573977e+00, -9.781069970047566e-05, -1.786763733070406e+00, -1.786763733070406e+00, -7.725869544065497e+00, -7.738598051011406e+00, -2.215134783211898e+01, -3.665614418465190e+00, -1.143011513827998e+01, -1.143011513827997e+01, -1.048163168341417e-02, -1.053994528427621e-02, -1.051902417648178e-02, -1.050300791813983e-02, -1.051104892356261e-02, -1.051104892356261e-02, -1.197376233570550e-02, -1.782528816487446e-02, -1.588166975806060e-02, -1.427000760739479e-02, -1.507892184454000e-02, -1.507892184454000e-02, -6.911446561292469e-03, -2.476023692471342e-01, -1.528020313025378e-01, -7.263489740540152e-02, -1.072401576218448e-01, -1.072401576218449e-01, -2.659101482727542e-02, -3.412920346676672e+00, -3.243470697514780e+00, -9.670923701057918e-02, -3.267274905809515e+00, -3.267274905809517e+00, -7.668700215200936e+00, -1.333173056643921e+01, -1.147432244600817e+01, -4.004224675874585e+00, -1.669653347786624e+01, -1.669653347786621e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
