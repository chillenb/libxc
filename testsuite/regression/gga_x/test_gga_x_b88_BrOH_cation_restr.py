
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_b88_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_b88", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.106076810668819e+01, -2.106079490761733e+01, -2.106098341618661e+01, -2.106058324160048e+01, -2.106078306194364e+01, -2.106078306194364e+01, -3.493459506007965e+00, -3.493421128164855e+00, -3.492619548383219e+00, -3.494676649373262e+00, -3.493497704723138e+00, -3.493497704723138e+00, -7.012220197759842e-01, -7.012283697571396e-01, -7.032700350642805e-01, -7.080607122467162e-01, -7.062070063644277e-01, -7.062070063644277e-01, -2.189528525820710e-01, -2.196066048311939e-01, -8.095102125836502e-01, -1.939838585714642e-01, -2.019787992138790e-01, -2.019787992138790e-01, -6.491558117471696e-02, -6.490266125591447e-02, -1.137888895355435e-01, -5.961176304213694e-02, -5.918915479727514e-02, -5.918915479727511e-02, -5.060011262564280e+00, -5.059313297668391e+00, -5.059990335994385e+00, -5.059374011915275e+00, -5.059651378439400e+00, -5.059651378439400e+00, -2.124688945752220e+00, -2.134595388936118e+00, -2.126036648358170e+00, -2.134769689811177e+00, -2.129518241932314e+00, -2.129518241932314e+00, -5.840228633061668e-01, -6.047573047068048e-01, -5.447593709560035e-01, -5.394327989257794e-01, -5.897329911487755e-01, -5.897329911487755e-01, -1.682410229525336e-01, -2.405307601944078e-01, -1.611716860071769e-01, -1.819216541816686e+00, -1.723548682891775e-01, -1.723548682891775e-01, -5.385152050318717e-02, -5.741534900214192e-02, -3.754765997417372e-02, -1.315833323749659e-01, -4.541831170255974e-02, -4.541831170255976e-02, -5.515364106444711e-01, -5.556313419446651e-01, -5.542527677984829e-01, -5.530594769847651e-01, -5.536612203647229e-01, -5.536612203647229e-01, -5.343689876743809e-01, -5.133779590569700e-01, -5.200632980087797e-01, -5.259180579831199e-01, -5.228044671425645e-01, -5.228044671425645e-01, -6.352711696788661e-01, -2.810976579711686e-01, -3.132296332386402e-01, -3.677929401117072e-01, -3.376878362520357e-01, -3.376878362520356e-01, -4.737781882425597e-01, -1.139484972422678e-01, -1.263470106491319e-01, -3.441303029926368e-01, -1.410198467188536e-01, -1.410198467188535e-01, -7.294146307819772e-02, -3.335202446187180e-02, -4.351292058495299e-02, -1.376587045810392e-01, -4.268975415247291e-02, -4.268975415247287e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_b88_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_b88", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.521187651152171e+01, -2.521197134535428e+01, -2.521237531903318e+01, -2.521096475650759e+01, -2.521170636421025e+01, -2.521170636421025e+01, -4.058250681791273e+00, -4.058290372099889e+00, -4.059308078222003e+00, -4.058310227023752e+00, -4.058396098157227e+00, -4.058396098157227e+00, -7.666556789627740e-01, -7.654146193008664e-01, -7.356883326293833e-01, -7.422232019596299e-01, -7.411772334789519e-01, -7.411772334789519e-01, -1.886231627935883e-01, -1.916664469325157e-01, -8.982644694284599e-01, -1.442337554468134e-01, -1.607057277999954e-01, -1.607057277999954e-01, -1.796161539017772e-02, -1.831231197171618e-02, -5.285495505149313e-02, -1.400895322432113e-02, -1.506805256071209e-02, -1.506805256071213e-02, -6.205293466834672e+00, -6.207821416645719e+00, -6.205407496609944e+00, -6.207639176649753e+00, -6.206575740301341e+00, -6.206575740301341e+00, -2.201819085673224e+00, -2.219937444209218e+00, -2.185403106324170e+00, -2.201335737898051e+00, -2.219869220320629e+00, -2.219869220320629e+00, -6.884585281783872e-01, -7.734047833169219e-01, -6.339859541631796e-01, -6.808029327344268e-01, -7.022788782542437e-01, -7.022788782542437e-01, -1.061582237544004e-01, -1.889560562159551e-01, -9.946425440260573e-02, -2.331466264746790e+00, -1.195674045754661e-01, -1.195674045754661e-01, -1.203579294212526e-02, -1.355869888595570e-02, -9.346628309210667e-03, -7.257189037709534e-02, -1.128992119088741e-02, -1.128992119088745e-02, -7.240346860987492e-01, -7.118496644953772e-01, -7.159537895799836e-01, -7.194847478565536e-01, -7.177016353889064e-01, -7.177016353889064e-01, -7.070999511967080e-01, -5.635075671615438e-01, -6.003264209895374e-01, -6.399162143620551e-01, -6.194297770715487e-01, -6.194297770715487e-01, -8.095230557446401e-01, -2.384734357447479e-01, -2.887854899363545e-01, -3.952166215919909e-01, -3.368550795182392e-01, -3.368550795182391e-01, -5.181997657842641e-01, -5.179270846822796e-02, -6.353822052887545e-02, -3.864305119525605e-01, -8.587943869803194e-02, -8.587943869803191e-02, -2.205467352879693e-02, -6.299556051210714e-03, -9.355113328867879e-03, -8.189297971992539e-02, -1.055459143745232e-02, -1.055459143745226e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_b88_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_b88", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-7.264226494462492e-09, -7.264191180655632e-09, -7.263935834154455e-09, -7.264463280309132e-09, -7.264200880894780e-09, -7.264200880894780e-09, -9.597584421362115e-06, -9.597986419731048e-06, -9.606349936994059e-06, -9.584540807051585e-06, -9.597140978628046e-06, -9.597140978628046e-06, -6.003128307469394e-03, -6.006738947844411e-03, -6.059124717332966e-03, -5.890094165571270e-03, -5.948232904239985e-03, -5.948232904239985e-03, -7.661554338260930e-01, -7.453906369480778e-01, -3.362121077572818e-03, -1.552193999625865e+00, -1.179377981006419e+00, -1.179377981006419e+00, -1.013566641370200e+04, -8.888109995713025e+03, -5.928020499137638e+01, -4.783333985670674e+04, -2.650902043676644e+04, -2.650902043676645e+04, -2.189977381587870e-06, -2.191536855878024e-06, -2.190027959762745e-06, -2.191404839300915e-06, -2.190778359683538e-06, -2.190778359683538e-06, -7.312462019853027e-05, -7.162797790376732e-05, -7.329880015311839e-05, -7.196668173226224e-05, -7.221595313704711e-05, -7.221595313704711e-05, -1.227741691968570e-02, -1.097909728747734e-02, -1.622899111380402e-02, -1.717453974303049e-02, -1.181129738788667e-02, -1.181129738788667e-02, -3.980608098128054e+00, -5.980923145747410e-01, -5.032780442919210e+00, -1.343281063028751e-04, -2.861148411019124e+00, -2.861148411019124e+00, -1.091036695514467e+05, -5.344227209871439e+04, -1.936608784000787e+05, -1.635927765939972e+01, -9.143134700742802e+04, -9.143134700742796e+04, -1.638688216712634e-02, -1.543220909756564e-02, -1.571468158704772e-02, -1.598665546798375e-02, -1.584575501514920e-02, -1.584575501514920e-02, -1.889485605808708e-02, -2.086404820770252e-02, -1.955606163746430e-02, -1.872857589836752e-02, -1.911960643613452e-02, -1.911960643613452e-02, -8.990157624823407e-03, -2.874640813814520e-01, -1.697771163702052e-01, -7.990299983039902e-02, -1.175087349682159e-01, -1.175087349682160e-01, -2.880254773876183e-02, -6.511705896147241e+01, -2.759690756017160e+01, -1.025812386142896e-01, -8.929645199715521e+00, -8.929645199715523e+00, -3.552508007782087e+03, -3.754351294752416e+06, -3.600916495467339e+05, -1.056596011506967e+01, -1.220572616852762e+05, -1.220572616852766e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
