
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_sogga11_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_sogga11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.059092107893975e+01, -2.059095773543524e+01, -2.059117174163716e+01, -2.059062530225711e+01, -2.059090437229704e+01, -2.059090437229704e+01, -3.391392520705582e+00, -3.391374740230525e+00, -3.391045569188081e+00, -3.392260399058722e+00, -3.391452954392992e+00, -3.391452954392992e+00, -6.641358769806077e-01, -6.635267445542259e-01, -6.459686571703617e-01, -6.514592906312161e-01, -6.503887900076867e-01, -6.503887900076867e-01, -1.839066732058610e-01, -1.827956151733645e-01, -7.726474864124857e-01, -1.227556350124725e-01, -1.759122300426911e-01, -1.759122300426911e-01, -8.260540528523189e-02, -8.675396455763074e-02, -3.085583929412170e-01, -4.822609250420222e-02, -6.036233088859676e-02, -6.036233088859676e-02, -4.969909133536176e+00, -4.969716478744186e+00, -4.969908939048914e+00, -4.969738744346006e+00, -4.969806788990629e+00, -4.969806788990629e+00, -1.936124857381440e+00, -1.951084779408295e+00, -1.923464952325909e+00, -1.936857227269868e+00, -1.950313695815845e+00, -1.950313695815845e+00, -5.690795031249686e-01, -5.987163084872155e-01, -5.291072489831378e-01, -5.326377756307528e-01, -5.759471915460700e-01, -5.759471915460700e-01, 1.490127485959345e-01, -2.060371275956684e-01, 1.275004464893680e-01, -1.801840859510786e+00, 1.818214708621009e-02, 1.818214708621009e-02, -3.726893216499508e-02, -4.713655058200372e-02, -3.595547070403149e-02, -1.256967041313915e-01, -4.331850191984150e-02, -4.331850191984150e-02, -5.492876444114846e-01, -5.502862574503906e-01, -5.498980117446073e-01, -5.495998772787517e-01, -5.497447503456746e-01, -5.497447503456746e-01, -5.332767456180820e-01, -4.872902557472346e-01, -5.039504798247751e-01, -5.158099355755188e-01, -5.100195744400918e-01, -5.100195744400918e-01, -6.284632672320016e-01, -2.391341401900915e-01, -2.589483329799003e-01, -3.446536120812276e-01, -2.969352427901363e-01, -2.969352427901362e-01, -4.488242067049926e-01, -3.146796454084986e-01, -2.820758614781964e-01, -3.302173714121971e-01, 9.514609357760957e-02, 9.514609357761054e-02, -1.151254510737762e-01, -1.265528029339471e-02, -2.651881775050234e-02, 5.195366304801824e-02, -4.009462185744148e-02, -4.009462185744145e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_sogga11_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_sogga11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.558860969864260e+01, -2.558868118199698e+01, -2.558902082394469e+01, -2.558795696916027e+01, -2.558851124384719e+01, -2.558851124384719e+01, -4.194071063360878e+00, -4.194039286896563e+00, -4.193415901701793e+00, -4.195306600420039e+00, -4.194134069537325e+00, -4.194134069537325e+00, -8.579417576074282e-01, -8.589246190193861e-01, -8.872491007826672e-01, -8.922995853531043e-01, -8.893530720748840e-01, -8.893530720748840e-01, -8.670392953898906e-02, -1.038685959401403e-01, -9.812727362142752e-01, -7.750389174232355e-01, -2.158304738950802e-01, -2.158304738950826e-01, -1.066424398795535e-01, -1.114850345970758e-01, -9.671774547899652e-04, -6.365483960477100e-02, -7.904048304294348e-02, -7.904048304294348e-02, -6.258838256808907e+00, -6.260883495699097e+00, -6.258932184610140e+00, -6.260737500426028e+00, -6.259872984756646e+00, -6.259872984756646e+00, -2.691594572275749e+00, -2.700501867629622e+00, -2.698594663405280e+00, -2.708152636741835e+00, -2.691287761410566e+00, -2.691287761410566e+00, -7.040589784921021e-01, -7.779013680978447e-01, -6.542241627538153e-01, -6.851296486250114e-01, -7.143533964454549e-01, -7.143533964454549e-01, 1.953763620392208e-01, -3.512423994505056e-01, 5.947229392474188e-01, -2.344770114892256e+00, -1.072443789749592e+00, -1.072443789749592e+00, -4.935064770089061e-02, -6.219343458978573e-02, -4.720752807979516e-02, 9.176754747738562e-01, -5.688361795443526e-02, -5.688361795443526e-02, -7.264435483220062e-01, -7.159240648879673e-01, -7.196723945623915e-01, -7.227485943744496e-01, -7.212151243223706e-01, -7.212151243223706e-01, -7.084065086543081e-01, -6.264359446305752e-01, -6.239224376476964e-01, -6.463511680220956e-01, -6.316528497543784e-01, -6.316528497543784e-01, -8.143613618223169e-01, -9.735604183587145e-02, -2.845246997449471e-01, -4.557195721571128e-01, -4.234528577736365e-01, -4.234528577736363e-01, -5.795019598680584e-01, -6.427814081080234e-02, 3.580725618287010e-01, -4.148090145364453e-01, 7.049195003955748e-01, 7.049195003955741e-01, -1.447404118907542e-01, -1.684590591550809e-02, -3.517974076341171e-02, 9.253927949874552e-01, -5.268081162128954e-02, -5.268081162128949e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_sogga11_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_sogga11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.724293696676286e-09, -4.724310802935844e-09, -4.724258579307170e-09, -4.724006486086211e-09, -4.724156925726699e-09, -4.724156925726699e-09, -5.245914262217396e-06, -5.247058124289847e-06, -5.272934610192616e-06, -5.223914387841309e-06, -5.246779748635878e-06, -5.246779748635878e-06, -9.834570896365062e-04, -9.132054511027644e-04, 7.785948053597355e-04, 6.911789486029494e-04, 6.578813121871317e-04, 6.578813121871317e-04, -1.175440629114945e+00, -1.030720543991672e+00, -9.083601916691442e-04, 8.294250097527774e+00, -2.032882781566291e-01, -2.032882781565972e-01, -5.169017524779485e+02, -5.454602233568396e+02, -2.461089219382202e+02, -4.724033749356668e+02, -5.989362428040013e+02, -5.989362428040023e+02, -1.487417985637688e-06, -1.488668345368423e-06, -1.487461288576521e-06, -1.488566051907773e-06, -1.488066065888328e-06, -1.488066065888328e-06, 1.275652663060386e-05, 1.133066281386147e-05, 1.512397786091628e-05, 1.402197566890960e-05, 1.059297833486687e-05, 1.059297833486687e-05, -7.444072067219392e-03, -6.795475218789315e-03, -9.005761537661743e-03, -1.119362304728692e-02, -7.530536250492467e-03, -7.530536250492467e-03, 1.114144064776226e-01, 3.473941968746510e-01, -1.851780069459416e+01, -8.229585623536612e-05, 2.846343682226288e+01, 2.846343682226288e+01, -6.229758450624292e+02, -5.559272919704282e+02, -3.486823264772062e+03, -1.725849165460178e+02, -1.622684943253656e+03, -1.622684943253654e+03, -8.578130049296492e-03, -9.469936619846240e-03, -9.220879258076332e-03, -8.962892992818992e-03, -9.097956523569204e-03, -9.097956523569204e-03, -9.213121955198871e-03, -4.015052146993019e-03, -1.008597418757009e-02, -1.264563943603329e-02, -1.191194736753902e-02, -1.191194736753902e-02, -5.654547607578283e-03, -4.670529787464915e-01, -8.003024306284762e-02, -3.205874415348800e-03, 2.853817287597274e-02, 2.853817287597262e-02, -4.803698477484303e-03, -2.310372056166513e+02, -1.931001022625475e+02, -3.609801629052681e-02, -5.053356466889008e+01, -5.053356466889009e+01, -4.138349842608479e+02, -2.734497632084349e+03, -1.322224132399803e+03, -8.898739331014708e+01, -2.049906054560592e+03, -2.049906054560597e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
