
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_lv_rpw86_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_lv_rpw86", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.034092609341388e+01, -2.034096746630116e+01, -2.034119354219462e+01, -2.034057713189321e+01, -2.034089412329195e+01, -2.034089412329195e+01, -3.343903626795329e+00, -3.343887107472472e+00, -3.343587481380770e+00, -3.344743840222400e+00, -3.343964428486256e+00, -3.343964428486256e+00, -6.602131656353669e-01, -6.599502173987167e-01, -6.554106415700102e-01, -6.601620218721115e-01, -6.586036989513050e-01, -6.586036989513050e-01, -2.017957481691771e-01, -2.020171825967358e-01, -7.650713083936354e-01, -1.839368204461995e-01, -1.897740357290181e-01, -1.897740357290182e-01, -2.405969621503277e-02, -2.468231822830240e-02, -7.580112333860052e-02, -1.744623164960571e-02, -1.954661856448248e-02, -1.954661856448247e-02, -4.923868944787136e+00, -4.924037318493697e+00, -4.923883565759344e+00, -4.924032097346361e+00, -4.923950428547522e+00, -4.923950428547522e+00, -1.976275765569738e+00, -1.986913820597889e+00, -1.974388264585254e+00, -1.983709925644089e+00, -1.983145405053436e+00, -1.983145405053436e+00, -5.614427114275592e-01, -5.964923467413609e-01, -5.217153850383061e-01, -5.297709016537143e-01, -5.686670793583399e-01, -5.686670793583399e-01, -1.483401522516457e-01, -2.267028880235737e-01, -1.397758895008965e-01, -1.795599629473793e+00, -1.607449758168925e-01, -1.607449758168925e-01, -1.452254551706862e-02, -1.693294674593681e-02, -1.199967848994836e-02, -1.037275266751434e-01, -1.448475614343766e-02, -1.448475614343766e-02, -5.487111531534630e-01, -5.483588617110045e-01, -5.484811550450375e-01, -5.485795928668780e-01, -5.485296216702340e-01, -5.485296216702340e-01, -5.330327050563732e-01, -4.838371673748690e-01, -4.968873273561656e-01, -5.105086601265919e-01, -5.033571960825617e-01, -5.033571960825617e-01, -6.258549581633543e-01, -2.598069619091660e-01, -2.873273095547756e-01, -3.448276436496542e-01, -3.119773098316931e-01, -3.119773098316930e-01, -4.461164015396639e-01, -7.423585318821799e-02, -9.117705722026571e-02, -3.262708783534670e-01, -1.210423630444311e-01, -1.210423630444311e-01, -3.028376240178221e-02, -6.539828511250223e-03, -1.097511638539933e-02, -1.159445174523199e-01, -1.350586747514359e-02, -1.350586747514358e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_lv_rpw86_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_lv_rpw86", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.574164903850188e+01, -2.574174107349065e+01, -2.574213991819113e+01, -2.574077082301472e+01, -2.574148967307458e+01, -2.574148967307458e+01, -4.148525475393028e+00, -4.148565666862503e+00, -4.149595954742739e+00, -4.148591875760080e+00, -4.148673668282692e+00, -4.148673668282692e+00, -7.800774390966757e-01, -7.786018512334474e-01, -7.406296518820487e-01, -7.476996558532457e-01, -7.469293996869262e-01, -7.469293996869262e-01, -1.571787531689389e-01, -1.635336261070193e-01, -9.159152848007961e-01, -1.402150983762541e-01, -1.259762402698175e-01, -1.259762402698174e-01, -1.941238598261856e-02, -1.993718733936033e-02, -6.768804610964484e-02, -1.399592380252169e-02, -1.571421548895130e-02, -1.571421548895129e-02, -6.320205597888645e+00, -6.322338664595793e+00, -6.320303589088762e+00, -6.322186704535898e+00, -6.321287164042923e+00, -6.321287164042923e+00, -2.209459154448433e+00, -2.230448932505902e+00, -2.186220084968857e+00, -2.204888827628965e+00, -2.232180621898055e+00, -2.232180621898055e+00, -7.035449911082265e-01, -7.820609721665740e-01, -6.480809686442337e-01, -6.902696240761305e-01, -7.172947068651973e-01, -7.172947068651973e-01, -1.423318294369711e-01, -1.517381288481468e-01, -1.342441163922592e-01, -2.356467275763681e+00, -1.443234686894781e-01, -1.443234686894781e-01, -1.164027088545924e-02, -1.358552283845185e-02, -9.640175027635266e-03, -9.763049673256131e-02, -1.163613218546624e-02, -1.163613218546623e-02, -7.274308842798408e-01, -7.195355152138948e-01, -7.223151473734267e-01, -7.246084412086979e-01, -7.234613985392065e-01, -7.234613985392065e-01, -7.087855264693639e-01, -5.737331394494121e-01, -6.136671404456091e-01, -6.523755507997469e-01, -6.328575005679126e-01, -6.328575005679126e-01, -8.192083799295831e-01, -1.932721426889752e-01, -2.671608200870775e-01, -4.007906995866383e-01, -3.322622939963381e-01, -3.322622939963381e-01, -5.273072464004586e-01, -6.581889300321486e-02, -8.353719690725987e-02, -3.945018349530806e-01, -1.161731500011516e-01, -1.161731500011514e-01, -2.458704632483957e-02, -5.234282617806582e-03, -8.792489172524074e-03, -1.109681324590713e-01, -1.084808437230355e-02, -1.084808437230350e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_lv_rpw86_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_lv_rpw86", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-3.492892198691084e-09, -3.492853813649540e-09, -3.492670214656670e-09, -3.493241592940106e-09, -3.492944029758545e-09, -3.492944029758545e-09, -4.961474383874991e-06, -4.961438139649515e-06, -4.960114592491519e-06, -4.958648602899444e-06, -4.960952557691132e-06, -4.960952557691132e-06, -3.574147942936206e-03, -3.589796654071736e-03, -3.996858846738518e-03, -3.866752335031040e-03, -3.893891542839690e-03, -3.893891542839690e-03, -8.296959857777234e-01, -7.798828160311783e-01, -1.934284734636656e-03, -1.424972973656481e+00, -1.379813400154103e+00, -1.379813400154104e+00, -1.871787993105114e+03, -1.690030911756615e+03, -2.001526316965457e+01, -6.769318135780802e+03, -4.296167529641330e+03, -4.296167529641325e+03, -9.908629381314078e-07, -9.901681787760847e-07, -9.908280457338771e-07, -9.902147418668409e-07, -9.905122615779818e-07, -9.905122615779818e-07, -4.931080505172087e-05, -4.790179424187423e-05, -5.038110688270855e-05, -4.909817735230884e-05, -4.802983873999555e-05, -4.802983873999555e-05, -6.128637579002918e-03, -4.420585028702978e-03, -8.353398695581929e-03, -7.189378319209637e-03, -5.752747043541126e-03, -5.752747043541126e-03, -1.868135713797852e+00, -6.833484241287977e-01, -2.272583426814565e+00, -5.373587506663094e-05, -1.816864170455687e+00, -1.816864170455687e+00, -1.409861409540355e+04, -7.628196321423065e+03, -3.024704036513246e+04, -6.467991616353420e+00, -1.424676398639938e+04, -1.424676398639933e+04, -6.042241867673565e-03, -6.179688339101460e-03, -6.131178843079940e-03, -6.091353186341393e-03, -6.111275798568574e-03, -6.111275798568574e-03, -6.744732574560871e-03, -1.230896429675014e-02, -1.026196588369492e-02, -8.646012779637462e-03, -9.427813978772575e-03, -9.427813978772575e-03, -3.659064441983850e-03, -3.229189839523107e-01, -1.527646734847854e-01, -4.951604489635631e-02, -8.674390274382446e-02, -8.674390274382446e-02, -1.713230211902261e-02, -2.156438554934567e+01, -1.000311514940031e+01, -5.741214979905597e-02, -3.952819991355763e+00, -3.952819991355813e+00, -7.459877235677826e+02, -3.428298218745232e+05, -4.322243548104506e+04, -4.534446119940269e+00, -1.884819595878361e+04, -1.884819595878376e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
