
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_2d_b88_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_2d_b88", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.484401378856797e+02, -1.484406640516634e+02, -1.484434274430915e+02, -1.484348030005942e+02, -1.484404118900205e+02, -1.484404118900205e+02, -9.961290940144869e+00, -9.961287790311980e+00, -9.961808265182011e+00, -9.964035207283652e+00, -9.961352088123217e+00, -9.961352088123217e+00, -9.235511706782784e-01, -9.229844724145666e-01, -9.098831576134763e-01, -9.188331166606453e-01, -9.233407166162413e-01, -9.233407166162413e-01, -1.706365848158197e-01, -1.720560846385021e-01, -1.171049872425069e+00, -1.309831593819536e-01, -1.710404966912785e-01, -1.710404966912785e-01, -3.175951769757814e-02, -3.209837142593185e-02, -6.100239044640688e-02, -2.939789737672549e-02, -3.176167427663050e-02, -3.176167427663050e-02, -1.796787296461470e+01, -1.797137104811623e+01, -1.796824902315383e+01, -1.797096870017322e+01, -1.796964084111799e+01, -1.796964084111799e+01, -4.421407715387007e+00, -4.461400240608588e+00, -4.410501242763875e+00, -4.441629614930703e+00, -4.462681021103815e+00, -4.462681021103815e+00, -7.207837419380907e-01, -7.718776875661667e-01, -6.708372906491749e-01, -6.816126906405374e-01, -7.555675645915946e-01, -7.555675645915946e-01, -1.048281421137532e-01, -1.886933067420742e-01, -1.017832523387112e-01, -4.022569316220877e+00, -1.138163161198710e-01, -1.138163161198710e-01, -2.883120865065537e-02, -2.952958006486938e-02, -2.223539491977984e-02, -7.225814368873500e-02, -2.664603120086538e-02, -2.664603120086538e-02, -7.014811071046265e-01, -7.077479747964526e-01, -7.057794182249036e-01, -7.040585571518944e-01, -7.049414922458187e-01, -7.049414922458187e-01, -6.659862386874627e-01, -6.081609365164394e-01, -6.288739691161143e-01, -6.459482567121932e-01, -6.373305332225153e-01, -6.373305332225152e-01, -8.295259386158577e-01, -2.413219309754769e-01, -2.879500187039909e-01, -3.710622359315889e-01, -3.257651612402119e-01, -3.257651612402118e-01, -5.281514430599518e-01, -6.073866479286559e-02, -7.009048537307730e-02, -3.323575901581505e-01, -8.467629347165971e-02, -8.467629347165970e-02, -3.505686289675196e-02, -2.125946499288756e-02, -2.419532266710003e-02, -7.965596054009436e-02, -2.380296142599454e-02, -2.380296142599453e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_2d_b88_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_2d_b88", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.211419947715999e+02, -2.211428186161427e+02, -2.211470634691238e+02, -2.211335613663497e+02, -2.211424244788217e+02, -2.211424244788217e+02, -1.432009097519911e+01, -1.432016177429508e+01, -1.432299894167294e+01, -1.432269678899094e+01, -1.432021955025185e+01, -1.432021955025185e+01, -1.183007963620399e+00, -1.181268710736677e+00, -1.137708646978425e+00, -1.150850158160238e+00, -1.182372810599979e+00, -1.182372810599979e+00, -1.803860117496904e-01, -1.833342444754729e-01, -1.551400246212090e+00, -1.193674915238786e-01, -1.812616089898857e-01, -1.812616089898857e-01, -7.734195268315080e-03, -7.984247231053362e-03, -3.075863211451541e-02, -5.332874082816597e-03, -7.885649614754034e-03, -7.885649614754034e-03, -2.646232024817335e+01, -2.647078167187602e+01, -2.646320527016569e+01, -2.646978420938003e+01, -2.646663133700263e+01, -2.646663133700263e+01, -5.945419669593575e+00, -6.009490622036998e+00, -5.918817544389411e+00, -5.968661369568005e+00, -6.023564380971254e+00, -6.023564380971254e+00, -9.608914824651951e-01, -1.103118319190292e+00, -8.878032641269560e-01, -9.535804793488881e-01, -1.017782314469333e+00, -1.017782314469333e+00, -8.120692320330707e-02, -1.876091657426067e-01, -7.938792606603184e-02, -5.912796146928428e+00, -9.664149068105625e-02, -9.664149068105625e-02, -5.189317485569060e-03, -5.538914019650721e-03, -4.027192958497873e-03, -4.473301717432626e-02, -4.953898793268838e-03, -4.953898793268838e-03, -1.032612932489370e+00, -1.013987186627779e+00, -1.019949067949864e+00, -1.025034582950737e+00, -1.022430457360101e+00, -1.022430457360101e+00, -9.855359340010059e-01, -7.753493120901503e-01, -8.267468842049981e-01, -8.788412733212705e-01, -8.516270755762487e-01, -8.516270755762485e-01, -1.183784462269853e+00, -2.565299002023601e-01, -3.238755430411789e-01, -4.547208928001292e-01, -3.828889557859383e-01, -3.828889557859381e-01, -6.651196191994818e-01, -2.867839164887323e-02, -3.998139168802151e-02, -4.158805858268307e-01, -6.136203315152853e-02, -6.136203315152851e-02, -8.983626424463749e-03, -2.984911675556549e-03, -3.859361639272934e-03, -5.736011320569917e-02, -4.292362896899901e-03, -4.292362896899900e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_2d_b88_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_2d_b88", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-3.417012035134701e-09, -3.416980984834498e-09, -3.416807085360542e-09, -3.417316262622261e-09, -3.416995955989040e-09, -3.416995955989040e-09, -8.846622389707028e-06, -8.846909379087561e-06, -8.853252821354184e-06, -8.834369421600068e-06, -8.846609888438263e-06, -8.846609888438263e-06, -6.116744079878949e-03, -6.103839390895712e-03, -5.740083859673254e-03, -5.615357666490775e-03, -6.112204671228886e-03, -6.112204671228886e-03, -5.229296386397536e-01, -5.170929805407753e-01, -3.522867925883819e-03, -1.030436068424876e+00, -5.213984447494033e-01, -5.213984447494033e-01, -1.583708796049724e+03, -1.389636165356641e+03, -2.151551603777927e+01, -1.167336448469800e+04, -1.446771912727815e+03, -1.446771912727815e+03, -1.762560774207693e-06, -1.763107226740157e-06, -1.762607718025217e-06, -1.763032736071075e-06, -1.762853300208682e-06, -1.762853300208682e-06, -7.049082675883630e-05, -6.920766142722690e-05, -7.029964426921695e-05, -6.930131686009873e-05, -6.986946248024149e-05, -6.986946248024149e-05, -1.558267662040447e-02, -1.836440882887908e-02, -1.864523012253947e-02, -2.365885180607597e-02, -1.425030452742404e-02, -1.425030452742404e-02, -2.161016395949291e+00, -3.581949454818296e-01, -2.347149614333790e+00, -1.549429937540199e-04, -1.590974800101296e+00, -1.590974800101296e+00, -1.314788094196446e+04, -8.982220965563387e+03, -2.730855978654899e+04, -8.780123838756721e+00, -1.303865951091080e+04, -1.303865951091080e+04, -2.951835595749727e-02, -2.417239941254604e-02, -2.567705262603337e-02, -2.710103526407994e-02, -2.635483192963324e-02, -2.635483192963324e-02, -3.585195222522838e-02, -2.096263946374811e-02, -2.190955664232751e-02, -2.399407502768499e-02, -2.280404454172837e-02, -2.280404454172838e-02, -1.467112272391242e-02, -1.866255195953027e-01, -1.243119033943644e-01, -7.773401752931716e-02, -9.816174624277661e-02, -9.816174624277671e-02, -3.028292768205082e-02, -2.523149254592656e+01, -1.108822124759993e+01, -1.181520696515780e-01, -4.383729984026844e+00, -4.383729984026846e+00, -9.327133629029298e+02, -4.275865686545784e+05, -6.496696888949160e+04, -5.304089107277931e+00, -2.302406137456973e+04, -2.302406137456982e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
