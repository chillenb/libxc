
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_lambda_oc2_n_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_lambda_oc2_n", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.091738744203784e+01, -2.091741633042398e+01, -2.091761000562141e+01, -2.091717886122045e+01, -2.091739549663946e+01, -2.091739549663946e+01, -3.465243232225736e+00, -3.465208217004534e+00, -3.464483632664356e+00, -3.466401492696543e+00, -3.465285034232705e+00, -3.465285034232705e+00, -6.935625249742725e-01, -6.935077988310141e-01, -6.935255237505245e-01, -6.983521398371220e-01, -6.978202423207653e-01, -6.978202423207653e-01, -2.083001340364501e-01, -2.098331241017742e-01, -8.017343181480023e-01, -1.712556504301835e-01, -2.026551321458710e-01, -2.026551321458709e-01, -8.894712205944901e-03, -9.366404350016408e-03, -5.114746934781825e-02, -5.129599887634678e-03, -7.159141456876419e-03, -7.159141456876419e-03, -5.031114044834893e+00, -5.030553281040266e+00, -5.031098736261367e+00, -5.030603523292957e+00, -5.030824028995925e+00, -5.030824028995925e+00, -2.093555387340252e+00, -2.103957744804322e+00, -2.093349002840775e+00, -2.102562109679956e+00, -2.099383237688667e+00, -2.099383237688667e+00, -5.796689321366723e-01, -6.027240647602461e-01, -5.407202862601881e-01, -5.374525525693479e-01, -5.862769302564221e-01, -5.862769302564224e-01, -1.267964042204432e-01, -2.197068513637820e-01, -1.181890661869244e-01, -1.813351521549742e+00, -1.439957273500332e-01, -1.439957273500332e-01, -3.960343551828232e-03, -5.014474349207926e-03, -3.839930394732739e-03, -8.137319518868949e-02, -4.823500674550866e-03, -4.823500674550868e-03, -5.507562581436001e-01, -5.538320195897102e-01, -5.527740129332934e-01, -5.518745763437751e-01, -5.523258308280365e-01, -5.523258308280365e-01, -5.339845661718465e-01, -5.078807471266245e-01, -5.157283241662161e-01, -5.227231198193392e-01, -5.190183314738996e-01, -5.190183314738996e-01, -6.329921903248015e-01, -2.658592136880896e-01, -3.034506924322410e-01, -3.633979019084963e-01, -3.314378356978940e-01, -3.314378356978939e-01, -4.686245316429450e-01, -4.894636719155199e-02, -6.626708320024347e-02, -3.408861993580725e-01, -1.015711807764193e-01, -1.015711807764193e-01, -1.253442844454128e-02, -1.340391461526595e-03, -2.818739141605829e-03, -9.584783763062604e-02, -4.429635310048670e-03, -4.429635310048666e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_lambda_oc2_n_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_lambda_oc2_n", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.524418277636829e+01, -2.524415253329093e+01, -2.524429271537517e+01, -2.524423238369426e+01, -2.524462257244051e+01, -2.524471116612043e+01, -2.524338157616631e+01, -2.524312923463127e+01, -2.524424945014379e+01, -2.524374549040019e+01, -2.524424945014379e+01, -2.524374549040019e+01, -4.065258954586936e+00, -4.065383083926412e+00, -4.065294144885629e+00, -4.065421864113496e+00, -4.066185053533188e+00, -4.066442769520473e+00, -4.065298543822292e+00, -4.065552701240621e+00, -4.064508439790327e+00, -4.066417948088452e+00, -4.064508439790327e+00, -4.066417948088452e+00, -7.700574986201554e-01, -7.740329308634261e-01, -7.685759799167093e-01, -7.734124082354912e-01, -7.504265415608921e-01, -7.452085721303326e-01, -7.531643135228663e-01, -7.548370149765044e-01, -7.816081703652275e-01, -7.330050472435556e-01, -7.816081703652275e-01, -7.330050472435556e-01, -2.122521737508832e-01, -2.170565585387188e-01, -2.128619425357365e-01, -2.186370614081151e-01, -8.851340002843997e-01, -9.202526450204246e-01, -1.862440025612168e-01, -1.881441371401764e-01, -2.206709870248972e-01, -1.526092970126830e-01, -2.206709870248972e-01, -1.526092970126830e-01, -1.146019057874806e-02, -1.217622625876479e-02, -1.200730473331980e-02, -1.286064685255152e-02, -6.503665744499267e-02, -6.845603420843323e-02, -6.893779026873078e-03, -6.779022404792883e-03, -1.022578737665584e-02, -5.821472312039557e-03, -1.022578737665584e-02, -5.821472312039558e-03, -6.214876649439950e+00, -6.213329158641075e+00, -6.217487283561182e+00, -6.215851143616987e+00, -6.215021401370256e+00, -6.213415630570100e+00, -6.217261442148025e+00, -6.215706711804813e+00, -6.216213721961782e+00, -6.214595602227196e+00, -6.216213721961782e+00, -6.214595602227196e+00, -2.244132888280836e+00, -2.244020182588940e+00, -2.260461999247461e+00, -2.259850206768282e+00, -2.231351917075906e+00, -2.234802829337843e+00, -2.245189802316285e+00, -2.248913090530863e+00, -2.263484019500257e+00, -2.253685113042253e+00, -2.263484019500257e+00, -2.253685113042253e+00, -6.902977186212963e-01, -6.885368101625989e-01, -7.743487496734618e-01, -7.750719463744977e-01, -6.223949365119712e-01, -6.472750318516063e-01, -6.708484590501527e-01, -6.927310450555116e-01, -7.212433925323388e-01, -6.842574733468987e-01, -7.212433925323392e-01, -6.842574733468989e-01, -1.513434848763487e-01, -1.520902190594915e-01, -2.332297629302013e-01, -2.339735060477280e-01, -1.399241172385813e-01, -1.454550880389535e-01, -2.335869345213061e+00, -2.334878390992134e+00, -1.629283203407825e-01, -1.641319530330612e-01, -1.629283203407825e-01, -1.641319530330612e-01, -5.172267303225388e-03, -5.375232619799173e-03, -6.632986882509267e-03, -6.733401865407942e-03, -4.959355820648052e-03, -5.251658504041186e-03, -1.024613008693823e-01, -1.031451255384115e-01, -5.065889099564930e-03, -6.954892266430025e-03, -5.065889099564931e-03, -6.954892266430026e-03, -7.233484162628312e-01, -7.262803517713924e-01, -7.115414314851427e-01, -7.145408906180455e-01, -7.155785596084505e-01, -7.185821779275751e-01, -7.190347742789781e-01, -7.219679383804068e-01, -7.172970696547548e-01, -7.202645883608201e-01, -7.172970696547548e-01, -7.202645883608201e-01, -7.063648702459184e-01, -7.087192574759323e-01, -5.658141305468641e-01, -5.684451654736319e-01, -5.999932694476645e-01, -6.030302143471229e-01, -6.395649856089449e-01, -6.419867204511447e-01, -6.190194558784544e-01, -6.214880406539467e-01, -6.190194558784544e-01, -6.214880406539467e-01, -8.099402124885526e-01, -8.118517643777990e-01, -2.745066456242664e-01, -2.754908024796349e-01, -3.108367120091731e-01, -3.128966203708143e-01, -3.980488431653927e-01, -4.003174995411226e-01, -3.482383616959878e-01, -3.480219424682778e-01, -3.482383616959877e-01, -3.480219424682777e-01, -5.198585295385051e-01, -5.237344194874460e-01, -6.395922460443015e-02, -6.437345300665433e-02, -8.430999515201650e-02, -8.681533335109048e-02, -3.847178038443971e-01, -3.910136692856591e-01, -1.216605441009504e-01, -1.251251657899120e-01, -1.216605441009503e-01, -1.251251657899120e-01, -1.637898919554182e-02, -1.697003703923563e-02, -1.785086464448469e-03, -1.789135884271090e-03, -3.631823716493481e-03, -3.862631400217964e-03, -1.170158221120199e-01, -1.186042720166683e-01, -4.797970481950515e-03, -6.375294815422610e-03, -4.797970481950509e-03, -6.375294815422604e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_lambda_oc2_n_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_lambda_oc2_n", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.339685735391534e-08, 0.000000000000000e+00, -1.339693327386882e-08, -1.339677090620605e-08, 0.000000000000000e+00, -1.339687042133124e-08, -1.339634426665949e-08, 0.000000000000000e+00, -1.339630109636563e-08, -1.339732436148965e-08, 0.000000000000000e+00, -1.339754910315401e-08, -1.339681337345793e-08, 0.000000000000000e+00, -1.339693982889224e-08, -1.339681337345793e-08, 0.000000000000000e+00, -1.339693982889224e-08, -1.776127275197813e-05, 0.000000000000000e+00, -1.776804199395811e-05, -1.776177687920775e-05, 0.000000000000000e+00, -1.776905283248074e-05, -1.777911716584574e-05, 0.000000000000000e+00, -1.778324896361057e-05, -1.773759835078688e-05, 0.000000000000000e+00, -1.774297892714575e-05, -1.777086985428489e-05, 0.000000000000000e+00, -1.775683404680138e-05, -1.777086985428489e-05, 0.000000000000000e+00, -1.775683404680138e-05, -1.086352435428756e-02, 0.000000000000000e+00, -1.092114745633886e-02, -1.085180685612958e-02, 0.000000000000000e+00, -1.092320411841019e-02, -1.067428801042147e-02, 0.000000000000000e+00, -1.054562659123793e-02, -1.031453799764352e-02, 0.000000000000000e+00, -1.036009273446972e-02, -1.092444495248085e-02, 0.000000000000000e+00, -9.450547981900918e-03, -1.092444495248085e-02, 0.000000000000000e+00, -9.450547981900918e-03, -9.545818776486127e-01, 0.000000000000000e+00, -9.119957153829680e-01, -9.681822573730102e-01, 0.000000000000000e+00, -9.138258810163957e-01, -6.308938450783947e-03, 0.000000000000000e+00, -5.978838775400812e-03, -1.132421441631944e+00, 0.000000000000000e+00, -1.099644051578291e+00, -8.266411047848848e-01, 0.000000000000000e+00, -1.480427575095081e+00, -8.266411047848842e-01, 0.000000000000000e+00, -1.480427575095083e+00, -2.617944972782575e+00, 0.000000000000000e+00, -2.591927602548683e+00, -2.758635892181752e+00, 0.000000000000000e+00, -2.744836948611424e+00, -1.555236850214310e+00, 0.000000000000000e+00, -1.566921516288665e+00, -2.396827345526769e+00, 0.000000000000000e+00, -2.331736793712462e+00, -2.613192349433672e+00, 0.000000000000000e+00, -6.628646439127626e+00, -2.613192349433677e+00, 0.000000000000000e+00, -6.628646439127641e+00, -3.995147258788213e-06, 0.000000000000000e+00, -3.998791694491356e-06, -3.996732258092079e-06, 0.000000000000000e+00, -4.000326397261818e-06, -3.995199357620632e-06, 0.000000000000000e+00, -3.998818657375195e-06, -3.996559936030175e-06, 0.000000000000000e+00, -4.000213299841663e-06, -3.995988251565949e-06, 0.000000000000000e+00, -3.999568285877538e-06, -3.995988251565949e-06, 0.000000000000000e+00, -3.999568285877538e-06, -1.268261192371091e-04, 0.000000000000000e+00, -1.268475706814276e-04, -1.246594059348217e-04, 0.000000000000000e+00, -1.247595160968799e-04, -1.258134717876655e-04, 0.000000000000000e+00, -1.261729020674596e-04, -1.240065646096206e-04, 0.000000000000000e+00, -1.242906084393404e-04, -1.262084145998316e-04, 0.000000000000000e+00, -1.258524170360414e-04, -1.262084145998316e-04, 0.000000000000000e+00, -1.258524170360414e-04, -2.258468698780857e-02, 0.000000000000000e+00, -2.283978459482043e-02, -1.927730689130111e-02, 0.000000000000000e+00, -1.927899579679031e-02, -3.197207996404258e-02, 0.000000000000000e+00, -2.830269063420731e-02, -3.279841247008688e-02, 0.000000000000000e+00, -2.870747368053808e-02, -1.985985814761123e-02, 0.000000000000000e+00, -2.414500741396246e-02, -1.985985814761123e-02, 0.000000000000000e+00, -2.414500741396246e-02, -1.156908158500597e+00, 0.000000000000000e+00, -1.178882554349023e+00, -5.409158857968562e-01, 0.000000000000000e+00, -5.365575225325446e-01, -1.288802321235797e+00, 0.000000000000000e+00, -1.260360570978514e+00, -2.349698508948275e-04, 0.000000000000000e+00, -2.354157641998853e-04, -1.307483479984162e+00, 0.000000000000000e+00, -1.605312806318898e+00, -1.307483479984162e+00, 0.000000000000000e+00, -1.605312806318898e+00, -3.364426557213624e+00, 0.000000000000000e+00, -2.912031329956031e+00, -2.897294001799440e+00, 0.000000000000000e+00, -2.674997739247055e+00, -1.650466182269027e+01, 0.000000000000000e+00, -1.836147588877192e+01, -1.844469709678294e+00, 0.000000000000000e+00, -1.776695794650587e+00, -8.206741047952940e+00, 0.000000000000000e+00, -8.062828800666711e+00, -8.206741047952917e+00, 0.000000000000000e+00, -8.062828800666697e+00, -2.769582357908702e-02, 0.000000000000000e+00, -2.728994179015514e-02, -2.722763917624990e-02, 0.000000000000000e+00, -2.683919792998295e-02, -2.739016958465815e-02, 0.000000000000000e+00, -2.699675957889176e-02, -2.752835876793839e-02, 0.000000000000000e+00, -2.712775292102525e-02, -2.745930295705847e-02, 0.000000000000000e+00, -2.706218961359332e-02, -2.745930295705847e-02, 0.000000000000000e+00, -2.706218961359332e-02, -3.125718642579986e-02, 0.000000000000000e+00, -3.085020979562068e-02, -3.818031457035999e-02, 0.000000000000000e+00, -3.771885665569381e-02, -3.641483315654233e-02, 0.000000000000000e+00, -3.595067360207219e-02, -3.454362422259193e-02, 0.000000000000000e+00, -3.410929771084718e-02, -3.557716325155497e-02, 0.000000000000000e+00, -3.511281456441637e-02, -3.557716325155497e-02, 0.000000000000000e+00, -3.511281456441637e-02, -1.588674276285489e-02, 0.000000000000000e+00, -1.583006940261142e-02, -3.366135689009836e-01, 0.000000000000000e+00, -3.337494671244351e-01, -2.456853231958350e-01, 0.000000000000000e+00, -2.429682547245131e-01, -1.445283559266081e-01, 0.000000000000000e+00, -1.420687437793818e-01, -1.937191780077659e-01, 0.000000000000000e+00, -1.950133303094038e-01, -1.937191780077661e-01, 0.000000000000000e+00, -1.950133303094039e-01, -5.273630264873808e-02, 0.000000000000000e+00, -5.181966434724490e-02, -1.420814182467540e+00, 0.000000000000000e+00, -1.422787450475467e+00, -1.415578083324695e+00, 0.000000000000000e+00, -1.449031639201062e+00, -1.929535611667000e-01, 0.000000000000000e+00, -1.842873704144073e-01, -1.878620289238242e+00, 0.000000000000000e+00, -2.227334077689440e+00, -1.878620289238244e+00, 0.000000000000000e+00, -2.227334077689441e+00, -2.075846833298682e+00, 0.000000000000000e+00, -2.119377943919060e+00, -1.035040084118914e+01, 0.000000000000000e+00, -1.833436628010636e+01, -6.388577783113176e+00, 0.000000000000000e+00, -6.801192316280311e+00, -2.092127584338755e+00, 0.000000000000000e+00, -2.051145428884368e+00, -1.692104020165627e+01, 0.000000000000000e+00, -8.369703846782105e+00, -1.692104020165630e+01, 0.000000000000000e+00, -8.369703846782130e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
