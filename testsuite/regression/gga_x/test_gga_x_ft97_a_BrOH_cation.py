
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_ft97_a_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ft97_a", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.086758019795575e+01, -2.086760775537357e+01, -2.086779738365492e+01, -2.086738601177434e+01, -2.086759201784446e+01, -2.086759201784446e+01, -3.461396087621184e+00, -3.461356693846757e+00, -3.460531304391538e+00, -3.462624368614645e+00, -3.461432582776168e+00, -3.461432582776168e+00, -6.972765612816429e-01, -6.974030727840608e-01, -7.032771270511402e-01, -7.078077707761574e-01, -7.096912170238768e-01, -7.096912170238768e-01, -2.304978721199915e-01, -2.301985421671315e-01, -8.044472092592612e-01, -2.146063169548279e-01, -2.307620265607247e-01, -2.307620265607246e-01, -6.909070316479352e-02, -6.916687560672284e-02, -1.275510073330703e-01, -6.288913421020703e-02, -6.414456230760615e-02, -6.414456230760612e-02, -5.017762640465749e+00, -5.017206679171267e+00, -5.017747481472529e+00, -5.017256486098958e+00, -5.017474904555897e+00, -5.017474904555897e+00, -2.127831190735187e+00, -2.136497675790805e+00, -2.132180951044270e+00, -2.139745725362625e+00, -2.130640486249797e+00, -2.130640486249797e+00, -5.785852291236889e-01, -6.015998401971767e-01, -5.400646661284942e-01, -5.362376181494835e-01, -5.849622212483805e-01, -5.849622212483805e-01, -1.924908630254698e-01, -2.613589598642835e-01, -1.847856874573585e-01, -1.810103777369955e+00, -1.943696066616784e-01, -1.943696066616784e-01, -5.669742420746680e-02, -6.059583833242868e-02, -3.972820361696588e-02, -1.504995965795569e-01, -4.845783927311769e-02, -4.845783927311771e-02, -5.503284248224078e-01, -5.528336128253448e-01, -5.519501687156259e-01, -5.512164948319808e-01, -5.515824456782643e-01, -5.515824456782643e-01, -5.337780087410291e-01, -5.102889710412450e-01, -5.153708321221198e-01, -5.213477561740913e-01, -5.179441473759743e-01, -5.179441473759743e-01, -6.317360188049340e-01, -2.973644080996243e-01, -3.225024279518644e-01, -3.664157648042267e-01, -3.406723305530123e-01, -3.406723305530122e-01, -4.711010233276660e-01, -1.272804726661046e-01, -1.431171609754531e-01, -3.415008079363224e-01, -1.617887268010038e-01, -1.617887268010038e-01, -7.806924765945068e-02, -3.488197855972762e-02, -4.574296129536413e-02, -1.579267610911313e-01, -4.553094946370514e-02, -4.553094946370512e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_ft97_a_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ft97_a", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.507066631948395e+01, -2.507063758080159e+01, -2.507079175506563e+01, -2.507072867958908e+01, -2.507114960242277e+01, -2.507125361224192e+01, -2.506973412605381e+01, -2.506944911035205e+01, -2.507074332576395e+01, -2.507013846958984e+01, -2.507074332576395e+01, -2.507013846958984e+01, -4.002931423484767e+00, -4.003236717306742e+00, -4.002989013654847e+00, -4.003309450577237e+00, -4.004538684318804e+00, -4.004968217604662e+00, -4.002497947185451e+00, -4.002950341402534e+00, -4.002120188365227e+00, -4.004396427350550e+00, -4.002120188365227e+00, -4.004396427350550e+00, -7.345869248336631e-01, -7.417293906099658e-01, -7.319974697609978e-01, -7.407549992623527e-01, -6.978319138386226e-01, -6.859216195453851e-01, -6.969403208857960e-01, -7.008245594452643e-01, -7.537260649073141e-01, -6.367545664725680e-01, -7.537260649073141e-01, -6.367545664725680e-01, -1.551819566498148e-01, -1.623723552997977e-01, -1.576916091434079e-01, -1.663507776643095e-01, -8.464128805107455e-01, -8.938136034099895e-01, -1.260704710259250e-01, -1.273294769226612e-01, -1.622966694189640e-01, -1.101600660808748e-01, -1.622966694189639e-01, -1.101600660808747e-01, -2.038020811008791e-02, -2.110275153041136e-02, -2.079524206719488e-02, -2.162972372111343e-02, -6.541515282423158e-02, -6.776829342544986e-02, -1.583335989984855e-02, -1.576207824513632e-02, -1.915658683495454e-02, -1.279997752681667e-02, -1.915658683495452e-02, -1.279997752681667e-02, -6.199258532456119e+00, -6.197695370858803e+00, -6.202341571643707e+00, -6.200674136596912e+00, -6.199427550881735e+00, -6.197796104570595e+00, -6.202073067291731e+00, -6.200502242872103e+00, -6.200839952582614e+00, -6.199192200280766e+00, -6.200839952582614e+00, -6.199192200280766e+00, -2.059431709037684e+00, -2.059310289416401e+00, -2.081048738849127e+00, -2.080329631157101e+00, -2.029765212584198e+00, -2.038280128308486e+00, -2.048481145551148e+00, -2.057107959364408e+00, -2.093513453314518e+00, -2.073426731760813e+00, -2.093513453314518e+00, -2.073426731760813e+00, -6.828476771853931e-01, -6.811574038090328e-01, -7.749321968239038e-01, -7.756752676415715e-01, -6.122263918639108e-01, -6.386806616326873e-01, -6.710444798096568e-01, -6.928820229589009e-01, -7.157512018712824e-01, -6.783845037365038e-01, -7.157512018712823e-01, -6.783845037365038e-01, -1.138517846217678e-01, -1.137864865221387e-01, -1.595525497897229e-01, -1.601968457327226e-01, -1.082654511624854e-01, -1.105477856794594e-01, -2.337759459739977e+00, -2.336770097483762e+00, -1.151892507904247e-01, -1.123991176522334e-01, -1.151892507904247e-01, -1.123991176522334e-01, -1.322531501887873e-02, -1.372648994501048e-02, -1.516495688447511e-02, -1.543377960418906e-02, -1.053984769199618e-02, -1.070986708282050e-02, -8.759807805268566e-02, -8.827513535899147e-02, -1.163746447709972e-02, -1.367951587693548e-02, -1.163746447709971e-02, -1.367951587693551e-02, -7.238170760579067e-01, -7.267415157870035e-01, -7.121083990763475e-01, -7.151196833237541e-01, -7.162101792528581e-01, -7.192168265556158e-01, -7.196394716406312e-01, -7.225704238021677e-01, -7.179246306276235e-01, -7.208921042674633e-01, -7.179246306276235e-01, -7.208921042674633e-01, -7.066172465568678e-01, -7.089705308708281e-01, -5.420372398941924e-01, -5.451447964186807e-01, -5.892469798804746e-01, -5.926587881051415e-01, -6.371558844228857e-01, -6.396380680751904e-01, -6.131573916204892e-01, -6.157214338871612e-01, -6.131573916204892e-01, -6.157214338871612e-01, -8.104601086986197e-01, -8.124150961130493e-01, -1.993626216393386e-01, -2.006418992422818e-01, -2.489775373742148e-01, -2.526568607606973e-01, -3.759567989673522e-01, -3.785301435210918e-01, -3.075148292043190e-01, -3.077857989107770e-01, -3.075148292043189e-01, -3.077857989107770e-01, -4.966458495395295e-01, -5.014113232249879e-01, -6.508970519707666e-02, -6.537865216827675e-02, -7.890143401603017e-02, -8.033829680148062e-02, -3.729410331109890e-01, -3.800123146016941e-01, -9.634370646749774e-02, -9.552635872733442e-02, -9.634370646749765e-02, -9.552635872733445e-02, -2.563122357316362e-02, -2.612236402134576e-02, -7.234237741654604e-03, -6.623206907212904e-03, -1.033675776734222e-02, -1.052698072886586e-02, -9.320836498916106e-02, -9.408335747134856e-02, -1.033441727829713e-02, -1.301729459812633e-02, -1.033441727829716e-02, -1.301729459812633e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_ft97_a_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ft97_a", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.393920985128793e-08, 0.000000000000000e+00, -1.393928282250578e-08, -1.393904441333063e-08, 0.000000000000000e+00, -1.393916262774755e-08, -1.393845996010486e-08, 0.000000000000000e+00, -1.393834060440821e-08, -1.394032974208349e-08, 0.000000000000000e+00, -1.394072338466545e-08, -1.393911396794132e-08, 0.000000000000000e+00, -1.393973025200154e-08, -1.393911396794132e-08, 0.000000000000000e+00, -1.393973025200154e-08, -1.959141866843962e-05, 0.000000000000000e+00, -1.959370437048059e-05, -1.959132604471760e-05, 0.000000000000000e+00, -1.959384070999087e-05, -1.959138420978820e-05, 0.000000000000000e+00, -1.959094071233340e-05, -1.957862794768300e-05, 0.000000000000000e+00, -1.957886917984050e-05, -1.960404803110425e-05, 0.000000000000000e+00, -1.957736354721836e-05, -1.960404803110425e-05, 0.000000000000000e+00, -1.957736354721836e-05, -1.373424471951843e-02, 0.000000000000000e+00, -1.358777372446298e-02, -1.379528906235340e-02, 0.000000000000000e+00, -1.361549355048589e-02, -1.461896111674672e-02, 0.000000000000000e+00, -1.486359020527997e-02, -1.432527336405889e-02, 0.000000000000000e+00, -1.425314041504979e-02, -1.327441487803017e-02, 0.000000000000000e+00, -1.537650549962987e-02, -1.327441487803017e-02, 0.000000000000000e+00, -1.537650549962987e-02, -2.324481123233654e+00, 0.000000000000000e+00, -2.088327944904329e+00, -2.273967109784110e+00, 0.000000000000000e+00, -2.006115796804116e+00, -7.908677099914193e-03, 0.000000000000000e+00, -7.055220583411611e-03, -4.419656579133029e+00, 0.000000000000000e+00, -4.235490285414236e+00, -1.979908535335243e+00, 0.000000000000000e+00, -9.766991617308461e+00, -1.979908535335242e+00, 0.000000000000000e+00, -9.766991617308465e+00, -2.312769030796511e+04, 0.000000000000000e+00, -1.937367475724529e+04, -2.052430065183079e+04, 0.000000000000000e+00, -1.682328409120082e+04, -1.338433167496687e+02, 0.000000000000000e+00, -1.154572769986818e+02, -9.745162613241382e+04, 0.000000000000000e+00, -1.014962974123761e+05, -3.208444248653630e+04, 0.000000000000000e+00, -2.108269940462009e+05, -3.208444248653634e+04, 0.000000000000000e+00, -2.108269940462008e+05, -3.977472048178371e-06, 0.000000000000000e+00, -3.981259593692478e-06, -3.975134077047021e-06, 0.000000000000000e+00, -3.978998997035336e-06, -3.977323542297780e-06, 0.000000000000000e+00, -3.981168570657897e-06, -3.975317691196596e-06, 0.000000000000000e+00, -3.979115131024255e-06, -3.976289214294505e-06, 0.000000000000000e+00, -3.980126858028075e-06, -3.976289214294505e-06, 0.000000000000000e+00, -3.980126858028075e-06, -1.802132505992294e-04, 0.000000000000000e+00, -1.802479822733381e-04, -1.756040177987284e-04, 0.000000000000000e+00, -1.757810957421166e-04, -1.829920826832766e-04, 0.000000000000000e+00, -1.822506937447401e-04, -1.789541008132382e-04, 0.000000000000000e+00, -1.781589469701775e-04, -1.755186622362621e-04, 0.000000000000000e+00, -1.776080872598198e-04, -1.755186622362621e-04, 0.000000000000000e+00, -1.776080872598198e-04, -2.420617377836713e-02, 0.000000000000000e+00, -2.446694325863063e-02, -1.789796292338215e-02, 0.000000000000000e+00, -1.786854092667846e-02, -3.547229161659660e-02, 0.000000000000000e+00, -3.083297300756919e-02, -3.104639342691793e-02, 0.000000000000000e+00, -2.723414852699292e-02, -2.079019753019119e-02, 0.000000000000000e+00, -2.546832363224600e-02, -2.079019753019120e-02, 0.000000000000000e+00, -2.546832363224600e-02, -9.687092485981792e+00, 0.000000000000000e+00, -9.560494999191555e+00, -1.724701705261223e+00, 0.000000000000000e+00, -1.700128174485144e+00, -1.276232413351588e+01, 0.000000000000000e+00, -1.120737876764347e+01, -2.172452705891137e-04, 0.000000000000000e+00, -2.176379658900836e-04, -7.621097445509267e+00, 0.000000000000000e+00, -7.443011431549266e+00, -7.621097445509267e+00, 0.000000000000000e+00, -7.443011431549266e+00, -2.452324268830256e+05, 0.000000000000000e+00, -2.108003421395790e+05, -1.148363429903841e+05, 0.000000000000000e+00, -1.075427580693896e+05, -4.318462217676054e+05, 0.000000000000000e+00, -3.773066066533709e+05, -3.638220326590859e+01, 0.000000000000000e+00, -3.533403712981463e+01, -3.340470474364365e+05, 0.000000000000000e+00, -1.334522455420583e+05, -3.340470474364361e+05, 0.000000000000000e+00, -1.334522455420581e+05, -2.469128897432920e-02, 0.000000000000000e+00, -2.431383486334122e-02, -2.519991884578818e-02, 0.000000000000000e+00, -2.481277389834373e-02, -2.502480501330125e-02, 0.000000000000000e+00, -2.463991071546020e-02, -2.487671329270804e-02, 0.000000000000000e+00, -2.449673296273045e-02, -2.495115728589046e-02, 0.000000000000000e+00, -2.456872734573013e-02, -2.495115728589046e-02, 0.000000000000000e+00, -2.456872734573013e-02, -2.753971813946838e-02, 0.000000000000000e+00, -2.717860296823764e-02, -4.755451770802546e-02, 0.000000000000000e+00, -4.679648471376700e-02, -4.075771276320318e-02, 0.000000000000000e+00, -4.008043793813883e-02, -3.489936023436935e-02, 0.000000000000000e+00, -3.441980825017163e-02, -3.777602970068131e-02, 0.000000000000000e+00, -3.723077132383436e-02, -3.777602970068131e-02, 0.000000000000000e+00, -3.723077132383436e-02, -1.484200216149295e-02, 0.000000000000000e+00, -1.474975015979124e-02, -8.356302099933489e-01, 0.000000000000000e+00, -8.217310312168513e-01, -4.790570167170116e-01, 0.000000000000000e+00, -4.653472097620988e-01, -1.888437344550945e-01, 0.000000000000000e+00, -1.849555447605282e-01, -3.033054049997365e-01, 0.000000000000000e+00, -3.042383732612903e-01, -3.033054049997367e-01, 0.000000000000000e+00, -3.042383732612904e-01, -6.632973159329375e-02, 0.000000000000000e+00, -6.468833507704903e-02, -1.371340640014534e+02, 0.000000000000000e+00, -1.346272300827245e+02, -6.092347732561294e+01, 0.000000000000000e+00, -5.620865598649397e+01, -2.295696175689314e-01, 0.000000000000000e+00, -2.168903830196265e-01, -2.151364591498189e+01, 0.000000000000000e+00, -2.034327225315395e+01, -2.151364591498189e+01, 0.000000000000000e+00, -2.034327225315397e+01, -7.759525766467556e+03, 0.000000000000000e+00, -7.048735216462537e+03, -7.235061142760734e+06, 0.000000000000000e+00, -8.422383294188675e+06, -8.131399380242541e+05, 0.000000000000000e+00, -6.926967741509932e+05, -2.488247950663679e+01, 0.000000000000000e+00, -2.374834984631013e+01, -4.783376130430404e+05, 0.000000000000000e+00, -1.732410654663191e+05, -4.783376130430416e+05, 0.000000000000000e+00, -1.732410654663196e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
