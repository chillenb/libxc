
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_bkl1_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_bkl1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.250818125819086e+01, -2.250817166125347e+01, -2.250826446522981e+01, -2.250840446022983e+01, -2.250831183937523e+01, -2.250831183937523e+01, -3.811143035236060e+00, -3.811047054802505e+00, -3.808921593839923e+00, -3.813340725079144e+00, -3.811119827371011e+00, -3.811119827371011e+00, -7.964396222767304e-01, -7.972675872989519e-01, -8.200739822745565e-01, -8.247185809620577e-01, -8.220026602872120e-01, -8.220026602872120e-01, -2.664658787099469e-01, -2.679102883257257e-01, -9.107101420331569e-01, -2.148836690484135e-01, -2.372222895490289e-01, -2.372222895490289e-01, -5.598267970276225e-03, -5.897080629013953e-03, -5.202008714839138e-02, -3.231372209772146e-03, -4.060475130071250e-03, -4.060475130071250e-03, -5.320201565267157e+00, -5.317530294914246e+00, -5.320099521103479e+00, -5.317740990751027e+00, -5.318835946907368e+00, -5.318835946907368e+00, -2.490246549590554e+00, -2.497113719746296e+00, -2.502395023719366e+00, -2.508580313578759e+00, -2.487999440620693e+00, -2.487999440620693e+00, -6.307683989537092e-01, -6.189263646544385e-01, -5.935573557375753e-01, -5.566353271059926e-01, -6.325247943569711e-01, -6.325247943569711e-01, -1.488503623583344e-01, -2.799469791610805e-01, -1.373758239454049e-01, -1.859443796712879e+00, -1.757186014597117e-01, -1.757186014597117e-01, -2.493218703619551e-03, -3.158952218568580e-03, -2.415487275540030e-03, -9.064252590479918e-02, -2.909913168521556e-03, -2.909913168521556e-03, -5.559589484115194e-01, -5.680312966603002e-01, -5.638383034795810e-01, -5.603197960233350e-01, -5.620831213163475e-01, -5.620831213163475e-01, -5.363889341840666e-01, -5.816234456093688e-01, -5.698161981136799e-01, -5.558805705522761e-01, -5.626890704580965e-01, -5.626890704580965e-01, -6.515868316558238e-01, -3.407125386139048e-01, -3.823531929193918e-01, -4.222416792855446e-01, -4.031112342421703e-01, -4.031112342421703e-01, -5.379724112845056e-01, -4.905590789976508e-02, -7.077469204131935e-02, -3.841311174681252e-01, -1.174605868645164e-01, -1.174605868645164e-01, -8.004642786918401e-03, -8.444081655323325e-04, -1.772450099569052e-03, -1.099478556136144e-01, -2.692579663612947e-03, -2.692579663612945e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_bkl1_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_bkl1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.350896715967459e+01, -2.350909244443508e+01, -2.350957386576203e+01, -2.350771149462861e+01, -2.350869805757330e+01, -2.350869805757330e+01, -3.720580283085870e+00, -3.720654009286434e+00, -3.722453676520093e+00, -3.720036354957761e+00, -3.720758369561954e+00, -3.720758369561954e+00, -6.932278274656707e-01, -6.922191188975472e-01, -6.768949020062573e-01, -6.819183066004517e-01, -6.803967588241185e-01, -6.803967588241185e-01, -2.593934316301915e-01, -2.541503179684260e-01, -8.122155845822534e-01, -2.718160147170324e-01, -2.705017366555570e-01, -2.705017366555570e-01, -7.524724578471140e-03, -7.997901833492648e-03, -8.345714617873837e-02, -4.308496298502121e-03, -5.414261512265800e-03, -5.414261512265800e-03, -5.879458718747343e+00, -5.884059751330533e+00, -5.879657735224574e+00, -5.883719599296910e+00, -5.881796675008411e+00, -5.881796675008411e+00, -2.041097649251088e+00, -2.051750890847727e+00, -2.041369675433216e+00, -2.049892848265017e+00, -2.047851211740951e+00, -2.047851211740951e+00, -6.360609950486661e-01, -7.543542468500747e-01, -5.817529252654613e-01, -6.580636623551865e-01, -6.527177776237257e-01, -6.527177776237257e-01, -2.052230346656071e-01, -3.265616790313856e-01, -1.903183115559831e-01, -2.277261619467084e+00, -2.354655928603443e-01, -2.354655928603443e-01, -3.324291604826605e-03, -4.211936331296723e-03, -3.220672412844257e-03, -1.300404636556367e-01, -3.879907974637600e-03, -3.879907974637600e-03, -7.180109843872959e-01, -6.951467308409934e-01, -7.029511878028076e-01, -7.096002200104505e-01, -7.062532867680554e-01, -7.062532867680554e-01, -7.043639990717224e-01, -5.094036848278726e-01, -5.487655204575246e-01, -6.030843993845325e-01, -5.739668470878155e-01, -5.739668470878155e-01, -7.876751414297103e-01, -3.421530117994425e-01, -3.298968770005664e-01, -3.586212433812075e-01, -3.267088618207474e-01, -3.267088618207474e-01, -4.685514214673104e-01, -8.028893291032511e-02, -1.067098880971934e-01, -3.500265979220878e-01, -1.632306606984341e-01, -1.632306606984341e-01, -1.184172137283280e-02, -1.125877554043110e-03, -2.363266799425403e-03, -1.537072226359115e-01, -3.590118807266661e-03, -3.590118807266658e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_bkl1_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_bkl1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.646188328289610e-08, -1.646179274278133e-08, -1.646118420665147e-08, -1.646253547047494e-08, -1.646185673681957e-08, -1.646185673681957e-08, -2.178068111529065e-05, -2.178166541684938e-05, -2.180227643133065e-05, -2.174990699357620e-05, -2.177976108368048e-05, -2.177976108368048e-05, -1.315039308686454e-02, -1.313617753182530e-02, -1.249399514873419e-02, -1.218843694721269e-02, -1.233398178275577e-02, -1.233398178275577e-02, -7.111334304173211e-01, -7.595481615739101e-01, -7.465050606933636e-03, -1.993711935201406e-01, -4.973253267170376e-01, -4.973253267170369e-01, 8.920256946006063e+00, 1.760406146753382e+01, 8.452809007101985e+00, 1.373917154576775e-05, 1.223393926096417e-01, 1.223393926096436e-01, -4.911349070919380e-06, -4.913190859334991e-06, -4.911394635563266e-06, -4.913021243090544e-06, -4.912305134283789e-06, -4.912305134283789e-06, -1.482227221629617e-04, -1.461561914062223e-04, -1.462061284469930e-04, -1.444726145461654e-04, -1.479879240240728e-04, -1.479879240240728e-04, -2.788631646798662e-02, -2.362625296862940e-02, -3.683980436505107e-02, -3.758160355053888e-02, -2.679709483042483e-02, -2.679709483042483e-02, 2.275881456800329e-01, -2.120010692271343e-01, 3.117622443213222e-01, -2.881803033973066e-04, 3.047325437953664e-02, 3.047325437953664e-02, 9.808367886405395e-10, 3.382560824983380e-05, 1.080251184815185e-01, 1.460445141012832e+00, 4.407519684329290e-02, 4.407519684329204e-02, -3.360157719105221e-02, -3.312349920359535e-02, -3.329291780986306e-02, -3.343311454898559e-02, -3.336329048000963e-02, -3.336329048000963e-02, -3.792000513385922e-02, -4.588404369509950e-02, -4.432338450987806e-02, -4.218420286243919e-02, -4.341036841583449e-02, -4.341036841583449e-02, -1.944178386386165e-02, -2.364483636003130e-01, -2.370446492847226e-01, -1.715762209796900e-01, -2.184184720456306e-01, -2.184184720456306e-01, -6.312079544413490e-02, 9.676691875935910e+00, 3.246583983655693e+00, -2.297112359840658e-01, 5.784152698676482e-01, 5.784152698676477e-01, 5.521763504116861e+01, 8.705830068154441e-54, 2.398390058383167e-14, 7.390397696923420e-01, 3.314117021975090e-02, 3.314117021975068e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
