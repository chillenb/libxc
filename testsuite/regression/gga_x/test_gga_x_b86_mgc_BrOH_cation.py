
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_b86_mgc_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_b86_mgc", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.105561045305044e+01, -2.105563566229316e+01, -2.105581962051308e+01, -2.105544307927347e+01, -2.105563015922201e+01, -2.105563015922201e+01, -3.496262362930199e+00, -3.496221153382233e+00, -3.495354209544147e+00, -3.497525579536925e+00, -3.496297494726363e+00, -3.496297494726363e+00, -7.035507903859206e-01, -7.036074277790270e-01, -7.067398310669720e-01, -7.114936369913495e-01, -7.113015856314214e-01, -7.113015856314214e-01, -2.185429102593064e-01, -2.195900434823854e-01, -8.121564372513630e-01, -1.864460403774054e-01, -2.143866539299165e-01, -2.143866539299164e-01, -1.875050322518847e-02, -1.938581643288501e-02, -7.136659224633309e-02, -1.277636527909201e-02, -1.588522247818267e-02, -1.588522247818267e-02, -5.055683483863346e+00, -5.054931942413883e+00, -5.055660329336613e+00, -5.054996678543073e+00, -5.055296217116695e+00, -5.055296217116695e+00, -2.135682106168296e+00, -2.145434649739398e+00, -2.137466093393967e+00, -2.146086602792864e+00, -2.140209456068860e+00, -2.140209456068860e+00, -5.841794083854635e-01, -6.040578305407391e-01, -5.454768311178860e-01, -5.390689983551030e-01, -5.903722907486268e-01, -5.903722907486270e-01, -1.471423858398797e-01, -2.354607350680398e-01, -1.386036231478555e-01, -1.817139627394111e+00, -1.605208908620398e-01, -1.605208908620398e-01, -1.044594176242596e-02, -1.242345358595340e-02, -8.985213866727914e-03, -1.015281170799206e-01, -1.115327660565848e-02, -1.115327660565849e-02, -5.511779121273650e-01, -5.549996190999051e-01, -5.536790436110884e-01, -5.525624310446529e-01, -5.531222387739041e-01, -5.531222387739041e-01, -5.341787048179925e-01, -5.149972977132830e-01, -5.206146142439698e-01, -5.255608989542641e-01, -5.228525095993480e-01, -5.228525095993480e-01, -6.345273821627515e-01, -2.798147985228090e-01, -3.145214396688906e-01, -3.692654717206670e-01, -3.396617985820761e-01, -3.396617985820761e-01, -4.753543944233596e-01, -6.936671126654313e-02, -8.763165226521263e-02, -3.449359422472996e-01, -1.199158447127730e-01, -1.199158447127730e-01, -2.439449342529847e-02, -4.423108759932822e-03, -7.788578777450882e-03, -1.145670718483180e-01, -1.034000486575849e-02, -1.034000486575848e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_b86_mgc_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_b86_mgc", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.506329655402824e+01, -2.506326702954489e+01, -2.506341199669010e+01, -2.506335087461231e+01, -2.506375120378477e+01, -2.506384536674281e+01, -2.506244826257115e+01, -2.506218441376916e+01, -2.506336692726188e+01, -2.506282618380183e+01, -2.506336692726188e+01, -2.506282618380183e+01, -4.024811760441792e+00, -4.024987656604039e+00, -4.024853239027927e+00, -4.025036059389423e+00, -4.025930260453238e+00, -4.026236502280002e+00, -4.024714422674449e+00, -4.025024420212465e+00, -4.024047816793848e+00, -4.026053000965209e+00, -4.024047816793848e+00, -4.026053000965209e+00, -7.568471327936928e-01, -7.614446408065842e-01, -7.551530578545733e-01, -7.607549749213987e-01, -7.340962839017516e-01, -7.277208430460297e-01, -7.361509923170992e-01, -7.382087133506245e-01, -7.699092402018564e-01, -7.093839062229504e-01, -7.699092402018564e-01, -7.093839062229504e-01, -2.006486945619074e-01, -2.058156273224659e-01, -2.015780938521437e-01, -2.077794083450250e-01, -8.703691674067348e-01, -9.079227254295505e-01, -1.740123260180990e-01, -1.757923563572026e-01, -2.087721778235655e-01, -1.440391078862508e-01, -2.087721778235654e-01, -1.440391078862507e-01, -1.750651777349659e-02, -1.834716537075171e-02, -1.808578243207766e-02, -1.906860145373366e-02, -7.090185717943651e-02, -7.389438838125754e-02, -1.200136045439311e-02, -1.187343330342258e-02, -1.605383323009773e-02, -9.917084278283476e-03, -1.605383323009773e-02, -9.917084278283495e-03, -6.182607555637313e+00, -6.181057309989217e+00, -6.185470245530867e+00, -6.183822873354680e+00, -6.182765149174365e+00, -6.181151319668641e+00, -6.185221491857998e+00, -6.183663698642947e+00, -6.184074715044807e+00, -6.182446312937715e+00, -6.184074715044807e+00, -6.182446312937715e+00, -2.190378834993255e+00, -2.190265654999189e+00, -2.207491248287503e+00, -2.206866086038264e+00, -2.174769049478631e+00, -2.179066007728724e+00, -2.189320629879106e+00, -2.193864891930858e+00, -2.212173777284224e+00, -2.200627518381953e+00, -2.212173777284224e+00, -2.200627518381953e+00, -6.843920956188277e-01, -6.826632197574255e-01, -7.725590127182964e-01, -7.733329049318021e-01, -6.160232817777542e-01, -6.412294481708629e-01, -6.687829649926172e-01, -6.905363130778193e-01, -7.158722633302772e-01, -6.789202424166714e-01, -7.158722633302772e-01, -6.789202424166715e-01, -1.442160948958289e-01, -1.447255671603570e-01, -2.184152927084527e-01, -2.191419540895237e-01, -1.343745650217406e-01, -1.389802398686843e-01, -2.330851165718645e+00, -2.329870483188075e+00, -1.531621810868546e-01, -1.535216663996576e-01, -1.531621810868546e-01, -1.535216663996576e-01, -9.490521593692788e-03, -9.856740735251857e-03, -1.152124903590645e-02, -1.171042987904160e-02, -8.305497001230450e-03, -8.613136057922851e-03, -1.020938635575331e-01, -1.028234881942182e-01, -8.820066496989215e-03, -1.119751426565974e-02, -8.820066496989219e-03, -1.119751426565974e-02, -7.227806045650339e-01, -7.257270083500629e-01, -7.099841485258753e-01, -7.130078995171352e-01, -7.143675283277925e-01, -7.173941909631285e-01, -7.181139542657946e-01, -7.210629969809708e-01, -7.162311731780800e-01, -7.192180137479470e-01, -7.162311731780800e-01, -7.192180137479470e-01, -7.061056666009000e-01, -7.084614992927084e-01, -5.565780875745598e-01, -5.592890661883053e-01, -5.935882059633918e-01, -5.967111923995271e-01, -6.358324828221578e-01, -6.382737043088956e-01, -6.139987037677364e-01, -6.164883260100757e-01, -6.139987037677364e-01, -6.164883260100757e-01, -8.078705215873274e-01, -8.098622562551421e-01, -2.592682086423816e-01, -2.602959824323389e-01, -2.974286441453758e-01, -2.997258404768114e-01, -3.904762497196846e-01, -3.927852139684525e-01, -3.378402799372150e-01, -3.377070658189842e-01, -3.378402799372150e-01, -3.377070658189842e-01, -5.110899949678572e-01, -5.151197982282238e-01, -7.024295287126581e-02, -7.060759168398134e-02, -8.800095979728320e-02, -9.004147717956523e-02, -3.793954928255093e-01, -3.858293242468637e-01, -1.176832194160941e-01, -1.197029711362464e-01, -1.176832194160940e-01, -1.197029711362463e-01, -2.334643675794743e-02, -2.396829451781985e-02, -4.067399939042958e-03, -3.910105022929031e-03, -7.016327176442261e-03, -7.308954844877262e-03, -1.134105187812909e-01, -1.147912235661644e-01, -8.089567923959229e-03, -1.046252003581896e-02, -8.089567923959219e-03, -1.046252003581893e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_b86_mgc_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_b86_mgc", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.524602443111508e-08, 0.000000000000000e+00, -1.524610995351181e-08, -1.524591506035945e-08, 0.000000000000000e+00, -1.524603044743404e-08, -1.524540907043879e-08, 0.000000000000000e+00, -1.524534910410745e-08, -1.524664820261661e-08, 0.000000000000000e+00, -1.524692723215678e-08, -1.524596708270611e-08, 0.000000000000000e+00, -1.524618156269897e-08, -1.524596708270611e-08, 0.000000000000000e+00, -1.524618156269897e-08, -2.037880548935433e-05, 0.000000000000000e+00, -2.038577993240214e-05, -2.037928468889155e-05, 0.000000000000000e+00, -2.038679008185253e-05, -2.039626492694707e-05, 0.000000000000000e+00, -2.040024138090725e-05, -2.035368056009217e-05, 0.000000000000000e+00, -2.035898280539200e-05, -2.039012950854745e-05, 0.000000000000000e+00, -2.037231194578149e-05, -2.039012950854745e-05, 0.000000000000000e+00, -2.037231194578149e-05, -1.274678967235124e-02, 0.000000000000000e+00, -1.277757723243998e-02, -1.274586879574732e-02, 0.000000000000000e+00, -1.278418810614769e-02, -1.271949619431651e-02, 0.000000000000000e+00, -1.264157574877449e-02, -1.232630992201965e-02, 0.000000000000000e+00, -1.235656824427366e-02, -1.272883923332350e-02, 0.000000000000000e+00, -1.171662670601079e-02, -1.272883923332350e-02, 0.000000000000000e+00, -1.171662670601079e-02, -1.352358729621866e+00, 0.000000000000000e+00, -1.260823764544577e+00, -1.351817359762908e+00, 0.000000000000000e+00, -1.243464415826941e+00, -7.391287501937210e-03, 0.000000000000000e+00, -6.932249163189548e-03, -2.036749212047682e+00, 0.000000000000000e+00, -1.962413297743928e+00, -1.163249301734502e+00, 0.000000000000000e+00, -3.763881630503169e+00, -1.163249301734501e+00, 0.000000000000000e+00, -3.763881630503168e+00, -2.246011315449490e+03, 0.000000000000000e+00, -1.934435903341170e+03, -2.050905146855833e+03, 0.000000000000000e+00, -1.736103665580501e+03, -2.883133272682101e+01, 0.000000000000000e+00, -2.562357212836789e+01, -7.338246326731441e+03, 0.000000000000000e+00, -7.556138036328075e+03, -2.949887638019783e+03, 0.000000000000000e+00, -1.654060261595855e+04, -2.949887638019786e+03, 0.000000000000000e+00, -1.654060261595845e+04, -4.521001775275418e-06, 0.000000000000000e+00, -4.525148135560737e-06, -4.522248941009260e-06, 0.000000000000000e+00, -4.526356139352852e-06, -4.521032756916062e-06, 0.000000000000000e+00, -4.525162190975906e-06, -4.522103478039050e-06, 0.000000000000000e+00, -4.526260061594731e-06, -4.521671496687107e-06, 0.000000000000000e+00, -4.525760906248078e-06, -4.521671496687107e-06, 0.000000000000000e+00, -4.525760906248078e-06, -1.522968800886577e-04, 0.000000000000000e+00, -1.523234114009148e-04, -1.494178537139447e-04, 0.000000000000000e+00, -1.495443599088835e-04, -1.518519842605515e-04, 0.000000000000000e+00, -1.520535678251969e-04, -1.494121840432223e-04, 0.000000000000000e+00, -1.495340500848723e-04, -1.508665080664230e-04, 0.000000000000000e+00, -1.509062759016921e-04, -1.508665080664230e-04, 0.000000000000000e+00, -1.509062759016921e-04, -2.580636785359260e-02, 0.000000000000000e+00, -2.609596646299711e-02, -2.164064027546985e-02, 0.000000000000000e+00, -2.163854932444450e-02, -3.671544910699154e-02, 0.000000000000000e+00, -3.241498626371195e-02, -3.689698430838000e-02, 0.000000000000000e+00, -3.230278737977003e-02, -2.261955707836151e-02, 0.000000000000000e+00, -2.752839978979241e-02, -2.261955707836151e-02, 0.000000000000000e+00, -2.752839978979242e-02, -3.491948287240565e+00, 0.000000000000000e+00, -3.476230074750164e+00, -8.689481160663656e-01, 0.000000000000000e+00, -8.591451670774028e-01, -4.402023095828925e+00, 0.000000000000000e+00, -3.975696802054124e+00, -2.636592577996932e-04, 0.000000000000000e+00, -2.641571089387553e-04, -3.048664190476785e+00, 0.000000000000000e+00, -3.212529323718106e+00, -3.048664190476785e+00, 0.000000000000000e+00, -3.212529323718106e+00, -1.674636817067138e+04, 0.000000000000000e+00, -1.441172393893790e+04, -8.684258364711235e+03, 0.000000000000000e+00, -8.113398057853965e+03, -3.500300227095369e+04, 0.000000000000000e+00, -3.183963310831508e+04, -1.063126231714767e+01, 0.000000000000000e+00, -1.030576950679148e+01, -2.514952611769149e+04, 0.000000000000000e+00, -1.167480070271210e+04, -2.514952611769151e+04, 0.000000000000000e+00, -1.167480070271210e+04, -3.096348469973298e-02, 0.000000000000000e+00, -3.050783778032337e-02, -3.055543785288313e-02, 0.000000000000000e+00, -3.011597986758555e-02, -3.069646939826632e-02, 0.000000000000000e+00, -3.025236933427177e-02, -3.081711791679249e-02, 0.000000000000000e+00, -3.036643376718299e-02, -3.075680581336104e-02, 0.000000000000000e+00, -3.030931307419042e-02, -3.075680581336104e-02, 0.000000000000000e+00, -3.030931307419042e-02, -3.490624502704202e-02, 0.000000000000000e+00, -3.445145953339555e-02, -4.467902444089999e-02, 0.000000000000000e+00, -4.410843126783026e-02, -4.187226781352721e-02, 0.000000000000000e+00, -4.131417261788044e-02, -3.916189551970792e-02, 0.000000000000000e+00, -3.866373275921704e-02, -4.059931807349491e-02, 0.000000000000000e+00, -4.006168751496177e-02, -4.059931807349491e-02, 0.000000000000000e+00, -4.006168751496177e-02, -1.784630400147665e-02, 0.000000000000000e+00, -1.777754415927473e-02, -4.807038686554255e-01, 0.000000000000000e+00, -4.749829543339609e-01, -3.209356598976552e-01, 0.000000000000000e+00, -3.155826766685139e-01, -1.706281793704275e-01, 0.000000000000000e+00, -1.676082300450221e-01, -2.378637420655640e-01, 0.000000000000000e+00, -2.392431514421631e-01, -2.378637420655642e-01, 0.000000000000000e+00, -2.392431514421633e-01, -6.182081534084412e-02, 0.000000000000000e+00, -6.066430595020850e-02, -2.890446322223113e+01, 0.000000000000000e+00, -2.848261676611064e+01, -1.504793396092965e+01, 0.000000000000000e+00, -1.418414253174526e+01, -2.240259753382626e-01, 0.000000000000000e+00, -2.135821915347797e-01, -7.152531000157808e+00, 0.000000000000000e+00, -7.165830007789445e+00, -7.152531000157817e+00, 0.000000000000000e+00, -7.165830007789450e+00, -8.693455928613309e+02, 0.000000000000000e+00, -8.052062182982143e+02, -3.372253804930126e+05, 0.000000000000000e+00, -4.215880529007973e+05, -5.056197637305244e+04, 0.000000000000000e+00, -4.471838896633819e+04, -8.195240871412691e+00, 0.000000000000000e+00, -7.873977154608379e+00, -3.827422580649990e+04, 0.000000000000000e+00, -1.460154679970697e+04, -3.827422580649997e+04, 0.000000000000000e+00, -1.460154679970702e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
