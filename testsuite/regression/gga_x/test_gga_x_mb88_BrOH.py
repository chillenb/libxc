
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_mb88_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_mb88", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.019584505370815e+01, -2.019588479341317e+01, -2.019611160667086e+01, -2.019545986827627e+01, -2.019586559709293e+01, -2.019586559709293e+01, -3.310136079696071e+00, -3.310130036064776e+00, -3.310100491518387e+00, -3.310853376554449e+00, -3.310147072018456e+00, -3.310147072018456e+00, -6.465475832763956e-01, -6.461879308140546e-01, -6.380152874480145e-01, -6.425020188196446e-01, -6.464148064300713e-01, -6.464148064300713e-01, -1.890043061077780e-01, -1.903923838432432e-01, -7.657510251006662e-01, -1.547362058391877e-01, -1.894031847661656e-01, -1.894031847661656e-01, -5.891387881949479e-02, -5.938907361332438e-02, -9.434391070871763e-02, -5.560748270256230e-02, -5.881571923036478e-02, -5.881571923036478e-02, -4.896850262259167e+00, -4.897217331589547e+00, -4.896891764350555e+00, -4.897177115893177e+00, -4.897032807733106e+00, -4.897032807733106e+00, -1.922935310558892e+00, -1.934223850961212e+00, -1.920667058007402e+00, -1.929448481650799e+00, -1.933580407211161e+00, -1.933580407211161e+00, -5.504022984101413e-01, -5.884222704098038e-01, -5.230255096575586e-01, -5.378221094195692e-01, -5.700147397311670e-01, -5.700147397311670e-01, -1.336074956110604e-01, -2.031305484099174e-01, -1.301679130296336e-01, -1.789856722122700e+00, -1.399670187423251e-01, -1.399670187423251e-01, -5.460044307272754e-02, -5.580742830800906e-02, -4.272256743357932e-02, -1.035699048324841e-01, -5.066062891134889e-02, -5.066062891134890e-02, -5.566705898733861e-01, -5.555967700762476e-01, -5.559851240765119e-01, -5.562809905285001e-01, -5.561328977900942e-01, -5.561328977900942e-01, -5.384979571822240e-01, -4.838983557462173e-01, -4.995007390233434e-01, -5.141483076494479e-01, -5.065982741320914e-01, -5.065982741320914e-01, -6.172857617184601e-01, -2.437184681498346e-01, -2.784825721648661e-01, -3.399575272916118e-01, -3.067031314944793e-01, -3.067031314944793e-01, -4.375669573116572e-01, -9.562665202168631e-02, -1.032145578482384e-01, -3.174348166911123e-01, -1.137237164503666e-01, -1.137237164503666e-01, -6.431248974852048e-02, -4.074137507424478e-02, -4.623947911099248e-02, -1.082004142757359e-01, -4.556103881145419e-02, -4.556103881145421e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_mb88_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_mb88", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.596975192687031e+01, -2.596982571876863e+01, -2.597018579283884e+01, -2.596897680406697e+01, -2.596979058415542e+01, -2.596979058415542e+01, -4.202773625600370e+00, -4.202797016673409e+00, -4.203612715255105e+00, -4.203097762490708e+00, -4.202803559712320e+00, -4.202803559712320e+00, -7.926556867652969e-01, -7.915272582505911e-01, -7.613491707578617e-01, -7.678699906163012e-01, -7.922457108773896e-01, -7.922457108773896e-01, -2.056611250429737e-01, -2.093398484343647e-01, -9.596896871408587e-01, -1.369375692744051e-01, -2.067772843226643e-01, -2.067772843226643e-01, -1.486276857561852e-02, -1.510045633447423e-02, -3.699000150932773e-02, -1.236592692012394e-02, -1.495227293725868e-02, -1.495227293725868e-02, -6.355997068917975e+00, -6.357726932046083e+00, -6.356176268498926e+00, -6.357521308826263e+00, -6.356881043794428e+00, -6.356881043794428e+00, -2.297629614420716e+00, -2.316044783269779e+00, -2.287940325891359e+00, -2.302329901206537e+00, -2.322612203423748e+00, -2.322612203423748e+00, -7.036605847886762e-01, -7.756139054706376e-01, -6.668524418889404e-01, -7.046087110406871e-01, -7.324600542912956e-01, -7.324600542912956e-01, -9.174534956692867e-02, -1.975898065184588e-01, -9.116860659268680e-02, -2.359055900245265e+00, -1.119220577463167e-01, -1.119220577463167e-01, -1.210168498031326e-02, -1.263016690913338e-02, -9.630862152041033e-03, -5.260850396915424e-02, -1.147327297715693e-02, -1.147327297715695e-02, -7.397129469828441e-01, -7.333389871515238e-01, -7.356109156186034e-01, -7.373747388139062e-01, -7.364912305695626e-01, -7.364912305695626e-01, -7.163728340348664e-01, -6.019147444990902e-01, -6.352568000860105e-01, -6.662726034810686e-01, -6.505323190387482e-01, -6.505323190387483e-01, -8.128235942529314e-01, -2.570733601971736e-01, -3.144236774485428e-01, -4.173297319682531e-01, -3.630797901838602e-01, -3.630797901838602e-01, -5.416969565856591e-01, -3.468621898616454e-02, -4.647578394888780e-02, -3.983225514580819e-01, -7.282396001145373e-02, -7.282396001145372e-02, -1.646504747787489e-02, -7.634688685963132e-03, -9.576015235547228e-03, -6.955974767350732e-02, -1.021016794376146e-02, -1.021016794376147e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_mb88_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_mb88", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.425777184117996e-09, -2.425757737280829e-09, -2.425647701860943e-09, -2.425966623740380e-09, -2.425767123108154e-09, -2.425767123108154e-09, -3.372849028582742e-06, -3.372864731866856e-06, -3.372740828948312e-06, -3.370095944160169e-06, -3.372799633782399e-06, -3.372799633782399e-06, -2.360720776654979e-03, -2.367359350667978e-03, -2.540144929857136e-03, -2.466892828007773e-03, -2.363154234875757e-03, -2.363154234875757e-03, -3.607880711762780e-01, -3.464441688225812e-01, -1.184318687479330e-03, -1.043028601365724e+00, -3.564684350756477e-01, -3.564684350756477e-01, -2.843574151882677e+03, -2.494481885202928e+03, -3.538475902990815e+01, -2.092906403452149e+04, -2.598364072384301e+03, -2.598364072384301e+03, -7.013623202145709e-07, -7.011575452125809e-07, -7.013390598623749e-07, -7.011798673476063e-07, -7.012604890304799e-07, -7.012604890304799e-07, -3.075165465908296e-05, -2.998875393165786e-05, -3.097386783456485e-05, -3.037141805682979e-05, -2.995375777867098e-05, -2.995375777867098e-05, -4.402756853590420e-03, -3.380156120868315e-03, -5.403652614244536e-03, -4.828226843894242e-03, -3.823033289172191e-03, -3.823033289172191e-03, -2.762478814726637e+00, -3.093118426230968e-01, -2.968477856852906e+00, -3.948160071916520e-05, -1.804769098799418e+00, -1.804769098799418e+00, -2.359114080670736e+04, -1.610829089100887e+04, -4.958610349416675e+04, -1.326522177749268e+01, -2.349053112624053e+04, -2.349053112624052e+04, -4.258414869148699e-03, -4.256917147108972e-03, -4.254350876802701e-03, -4.254464521205595e-03, -4.254161714544132e-03, -4.254161714544132e-03, -4.873710175693300e-03, -7.456553069947172e-03, -6.501063370804026e-03, -5.770914702844260e-03, -6.128468466621443e-03, -6.128468466621442e-03, -2.789029877403164e-03, -1.351561694498804e-01, -7.362937794659195e-02, -3.085809704447039e-02, -4.788403997215132e-02, -4.788403997215135e-02, -1.118361463133404e-02, -4.220147642194179e+01, -1.745007848198030e+01, -4.008076634416290e-02, -5.919896417908500e+00, -5.919896417908502e+00, -1.667387174004716e+03, -7.769832359764249e+05, -1.173525389645648e+05, -7.175780821977225e+00, -4.167300565119737e+04, -4.167300565119755e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
