
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_sogga11_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_sogga11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.059043385925890e+01, -2.059046576007339e+01, -2.059067102725235e+01, -2.059014737333614e+01, -2.059045015647204e+01, -2.059045015647204e+01, -3.391259728806006e+00, -3.391246640168254e+00, -3.391025628741986e+00, -3.392124206744475e+00, -3.391267443640154e+00, -3.391267443640154e+00, -6.606346776084493e-01, -6.600198118626180e-01, -6.408938244606603e-01, -6.461741823437541e-01, -6.604111135443671e-01, -6.604111135443671e-01, -1.805232403553095e-01, -1.816845717631263e-01, -7.860306630069464e-01, -1.461140705558521e-01, -1.808059682164126e-01, -1.808059682164126e-01, -1.326661617362336e-01, -1.380390712851338e-01, -2.258559760710709e-01, -6.715284220668394e-02, -1.366198575863187e-01, -1.366198575863187e-01, -4.967844751417725e+00, -4.967657459674461e+00, -4.967830938427352e+00, -4.967685224136703e+00, -4.967741154420281e+00, -4.967741154420281e+00, -1.933585009411918e+00, -1.948140694878641e+00, -1.926628944864939e+00, -1.938088270736042e+00, -1.952099075317520e+00, -1.952099075317520e+00, -5.625861814951613e-01, -5.916177713362810e-01, -5.351427377178648e-01, -5.426443074282362e-01, -5.813471876469453e-01, -5.813471876469453e-01, 1.169791704900398e-01, -2.132959548292203e-01, 9.842578881562905e-02, -1.799660721224392e+00, -4.657091345827769e-02, -4.657091345827769e-02, -6.481567731101355e-02, -7.379630185980700e-02, -5.535454592664600e-02, -1.509949383835143e-02, -6.723022999786911e-02, -6.723022999786911e-02, -5.574259360272389e-01, -5.581995794900579e-01, -5.578866779637457e-01, -5.576676984893009e-01, -5.577736513916364e-01, -5.577736513916364e-01, -5.389701445113066e-01, -4.964846389090019e-01, -5.114950089160906e-01, -5.220801433056924e-01, -5.168318806943741e-01, -5.168318806943741e-01, -6.209947785934266e-01, -2.365699943507758e-01, -2.678459287508785e-01, -3.475525313345635e-01, -3.060694635591958e-01, -3.060694635591957e-01, -4.485463397487177e-01, -2.708962206838176e-01, -1.333930105133347e-01, -3.258297229321603e-01, 1.260109114652617e-01, 1.260109114652614e-01, -1.534926689794897e-01, -2.049623522267607e-02, -3.879291862217601e-02, 1.194034104574083e-01, -5.725394673531289e-02, -5.725394673531281e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_sogga11_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_sogga11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.558795269096516e+01, -2.558801490202266e+01, -2.558833804515132e+01, -2.558731852648924e+01, -2.558798511762963e+01, -2.558798511762963e+01, -4.193916142001276e+00, -4.193892044986618e+00, -4.193410448766850e+00, -4.195138919026546e+00, -4.193921611297248e+00, -4.193921611297248e+00, -8.653809521963648e-01, -8.664704997085485e-01, -8.946019384526961e-01, -8.993883159506761e-01, -8.657678940222844e-01, -8.657678940222844e-01, -1.808318606473099e-01, -2.017438276505995e-01, -9.831592471030641e-01, -5.194075855326437e-01, -1.875187174881767e-01, -1.875187174881767e-01, -1.531709140777998e-01, -1.568673259606820e-01, 4.489514165878831e-01, -8.726073965244936e-02, -1.553071951610251e-01, -1.553071951610251e-01, -6.256025998884827e+00, -6.258005416520126e+00, -6.256229362489795e+00, -6.257768327029067e+00, -6.257037023774300e+00, -6.257037023774300e+00, -2.692460398380871e+00, -2.701317081413637e+00, -2.697733237538878e+00, -2.705522792223333e+00, -2.688722908473163e+00, -2.688722908473163e+00, -6.961821135856691e-01, -7.701002663314556e-01, -6.616776868211078e-01, -6.965356355080484e-01, -7.219467227420491e-01, -7.219467227420491e-01, -6.300071728894311e-01, -1.271188210330858e-01, -7.437650442274421e-01, -2.342138210439088e+00, -1.005193719582464e+00, -1.005193719582464e+00, -8.431532548155729e-02, -9.525616502065372e-02, -7.156908509940414e-02, 9.913878775247391e-01, -8.675484991058582e-02, -8.675484991058582e-02, -7.385428264323696e-01, -7.288645905095987e-01, -7.324013496947195e-01, -7.350964435646999e-01, -7.337545746753001e-01, -7.337545746753001e-01, -7.156691379085093e-01, -6.290657166922241e-01, -6.323764145718538e-01, -6.556169669764251e-01, -6.414348556800837e-01, -6.414348556800837e-01, -8.064238119121946e-01, -1.572100514144284e-01, -3.553927113746699e-01, -4.537716007925596e-01, -4.326166265964376e-01, -4.326166265964373e-01, -5.740379384995637e-01, 2.510058352978176e-01, 8.621239951023898e-01, -4.068424345047836e-01, -3.452197145067410e-02, -3.452197145067546e-02, -1.718171955223655e-01, -2.724308828545450e-02, -5.118299433275388e-02, -6.173648279619118e-02, -7.419546253566453e-02, -7.419546253566443e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_sogga11_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_sogga11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.724639973042469e-09, -4.724654880160065e-09, -4.724599690371222e-09, -4.724357788671943e-09, -4.724648852004624e-09, -4.724648852004624e-09, -5.245756723252360e-06, -5.246670475369049e-06, -5.270859528371534e-06, -5.224678315576016e-06, -5.246137314736178e-06, -5.246137314736178e-06, -5.260106358137316e-04, -4.580824944406946e-04, 1.139505221856149e-03, 1.050735462317769e-03, -5.015462072106702e-04, -5.015462072106702e-04, -4.660490409771955e-01, -3.152027471580536e-01, -1.253277279114448e-03, 4.879911402524712e+00, -4.171955214379220e-01, -4.171955214379220e-01, -1.058924331235416e+03, -1.058156204011608e+03, -2.988883821577663e+02, -7.711976301968862e+02, -1.099327468446775e+03, -1.099327468446775e+03, -1.489794171358043e-06, -1.491014143514986e-06, -1.489912272732431e-06, -1.490861404747265e-06, -1.490437821571273e-06, -1.490437821571273e-06, 1.320529702695092e-05, 1.183901258569835e-05, 1.462677804150077e-05, 1.364291728493176e-05, 1.007358600349853e-05, 1.007358600349853e-05, -7.860300976675397e-03, -7.071991445415898e-03, -9.181007847541242e-03, -1.043563904063375e-02, -7.377460373686585e-03, -7.377460373686585e-03, 2.513081317758746e+01, -6.641180734113302e-01, 3.152640159950236e+01, -8.266367959611962e-05, 2.278529842340941e+01, 2.278529842340941e+01, -8.183504627498417e+02, -8.184298409392618e+02, -2.343480421067962e+03, -1.569642737689179e+02, -1.208771105197482e+03, -1.208771105197481e+03, -7.945671055797125e-03, -8.792484621720473e-03, -8.540324833244949e-03, -8.306665197258672e-03, -8.427828500812359e-03, -8.427828500812359e-03, -8.873862675221868e-03, -5.670197354791158e-03, -1.049183146329678e-02, -1.213303366574588e-02, -1.171867533709452e-02, -1.171867533709452e-02, -5.883871120156681e-03, -3.150044558260976e-01, -2.245900341342073e-03, -8.268241181202137e-03, 2.560765435285674e-02, 2.560765435285668e-02, -6.439047342521001e-03, -2.783548310775597e+02, -1.991116300659439e+02, -4.437981469707993e-02, 1.521419606186522e+01, 1.521419606186533e+01, -7.903086813024244e+02, -1.418348980952227e+03, -1.218889610936053e+03, 2.122176507255681e+01, -1.767204946853859e+03, -1.767204946853856e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
