
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_eb88_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_eb88", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.100375537633289e+01, -2.100377964618254e+01, -2.100396409531949e+01, -2.100356514854018e+01, -2.100376753867278e+01, -2.100376753867278e+01, -3.481715076338657e+00, -3.481686743115049e+00, -3.481051781641276e+00, -3.482884395470152e+00, -3.481715335366248e+00, -3.481715335366248e+00, -6.986470990246034e-01, -6.986795396450498e-01, -7.016187301435062e-01, -7.059003120533277e-01, -6.986551778208580e-01, -6.986551778208580e-01, -2.174906464072368e-01, -2.181623253205610e-01, -8.140796364567695e-01, -1.881288650598200e-01, -2.176614448578778e-01, -2.176614448578778e-01, -6.335403809809532e-02, -6.407488773395822e-02, -1.137715722199234e-01, -5.741517689608062e-02, -6.345201425830974e-02, -6.345201425830974e-02, -5.047151876901275e+00, -5.046538866053119e+00, -5.047095576607439e+00, -5.046618821363830e+00, -5.046828413476594e+00, -5.046828413476594e+00, -2.112969321814660e+00, -2.122603430263059e+00, -2.114366515310417e+00, -2.121848772015178e+00, -2.117734501058691e+00, -2.117734501058691e+00, -5.754583572540013e-01, -5.966502942743448e-01, -5.481479050049379e-01, -5.490236727509367e-01, -5.932073579460952e-01, -5.932073579460952e-01, -1.662517898191760e-01, -2.422122033590802e-01, -1.618602660068516e-01, -1.815057864056795e+00, -1.724723818082107e-01, -1.724723818082107e-01, -5.633601316676116e-02, -5.785103329841484e-02, -4.424568203075303e-02, -1.281302358197471e-01, -5.252450234999222e-02, -5.252450234999222e-02, -5.590764660458388e-01, -5.624937357089101e-01, -5.613187366904124e-01, -5.603717166193801e-01, -5.608489112996261e-01, -5.608489112996261e-01, -5.400626994220190e-01, -5.174271334056154e-01, -5.246416639462300e-01, -5.307790602623866e-01, -5.275386062154597e-01, -5.275386062154597e-01, -6.266447705645417e-01, -2.837205483825267e-01, -3.153934199068373e-01, -3.670147260193222e-01, -3.388807804652765e-01, -3.388807804652765e-01, -4.695475025665998e-01, -1.139821067381116e-01, -1.264730283597872e-01, -3.371389520332642e-01, -1.416868261048307e-01, -1.416868261048306e-01, -6.958778823907957e-02, -4.116905200252079e-02, -4.717559234082255e-02, -1.348021970229770e-01, -4.712141753209550e-02, -4.712141753209551e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_eb88_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_eb88", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.524788185759370e+01, -2.524796431974284e+01, -2.524834671290436e+01, -2.524699608648750e+01, -2.524792522402051e+01, -2.524792522402051e+01, -4.064116816550332e+00, -4.064150332442595e+00, -4.065239193927278e+00, -4.064224879592959e+00, -4.064151367286039e+00, -4.064151367286039e+00, -7.602048289581309e-01, -7.590397740960473e-01, -7.289264452023755e-01, -7.351787912479208e-01, -7.597815030443446e-01, -7.597815030443446e-01, -1.993663478828084e-01, -2.024389181075698e-01, -9.242895804550938e-01, -1.433849152810851e-01, -2.002890041299769e-01, -2.002890041299769e-01, -2.173855122858623e-02, -2.231670475713812e-02, -5.808075223394037e-02, -1.531682036877606e-02, -2.209308413894839e-02, -2.209308413894839e-02, -6.210663596926184e+00, -6.213090782580784e+00, -6.210912221321032e+00, -6.212799473635856e+00, -6.211907306227663e+00, -6.211907306227663e+00, -2.199805262502608e+00, -2.217505488090054e+00, -2.190499353949031e+00, -2.204282669920315e+00, -2.223972449257039e+00, -2.223972449257039e+00, -6.822940033343592e-01, -7.663709544648649e-01, -6.458809011512586e-01, -6.928022499120645e-01, -7.118567991990282e-01, -7.118567991990282e-01, -1.091945999544186e-01, -1.986767360689017e-01, -1.073762863279238e-01, -2.330772766510957e+00, -1.230749070892442e-01, -1.230749070892442e-01, -1.493652048833964e-02, -1.595406925820364e-02, -1.211040381798470e-02, -7.340797999607589e-02, -1.450435466127893e-02, -1.450435466127893e-02, -7.367109209715490e-01, -7.254707771896596e-01, -7.293477270930416e-01, -7.324523124704093e-01, -7.308867506485913e-01, -7.308867506485913e-01, -7.143829710524093e-01, -5.786844937602880e-01, -6.146770476373469e-01, -6.504168759375141e-01, -6.320313825086117e-01, -6.320313825086117e-01, -8.024287301551482e-01, -2.513119657937272e-01, -3.024859860783201e-01, -4.003136137397727e-01, -3.476455807075447e-01, -3.476455807075447e-01, -5.203027121539160e-01, -5.593444471079557e-02, -6.878327850458325e-02, -3.837558214183691e-01, -8.996339185293406e-02, -8.996339185293406e-02, -2.454849236116880e-02, -8.338021263731442e-03, -1.111586447919447e-02, -8.575074167071128e-02, -1.275356079284715e-02, -1.275356079284717e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_eb88_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_eb88", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-6.981087798266227e-09, -6.981056580114531e-09, -6.980814525212089e-09, -6.981327801297552e-09, -6.981072194053347e-09, -6.981072194053347e-09, -9.253437144826559e-06, -9.253720137950563e-06, -9.259978213561574e-06, -9.241362723915765e-06, -9.253425018347708e-06, -9.253425018347708e-06, -5.827153083280372e-03, -5.830245730706602e-03, -5.873270527511947e-03, -5.723388366670374e-03, -5.828378996417737e-03, -5.828378996417737e-03, -7.054765686672094e-01, -6.883034109165914e-01, -3.112830709456693e-03, -1.615471231865539e+00, -7.005171487327904e-01, -7.005171487327904e-01, -2.800910081592983e+03, -2.456783557703534e+03, -3.730250781011669e+01, -2.074590680192788e+04, -2.559099816938193e+03, -2.559099816938193e+03, -2.101909173303552e-06, -2.103224534027153e-06, -2.102032072513486e-06, -2.103054963323133e-06, -2.102599035545715e-06, -2.102599035545715e-06, -7.131011483822219e-05, -6.987699038044186e-05, -7.133897469002543e-05, -7.021750919445271e-05, -7.030460827901681e-05, -7.030460827901681e-05, -1.238575332567240e-02, -1.101501605700126e-02, -1.504898901208144e-02, -1.516788900100842e-02, -1.097075948345649e-02, -1.097075948345649e-02, -3.596244975764512e+00, -5.247588351422209e-01, -3.907020918270706e+00, -1.285891651582996e-04, -2.582423122739455e+00, -2.582423122739455e+00, -2.338875002468545e+04, -1.595208421030670e+04, -4.911601725571565e+04, -1.511921416474324e+01, -2.326183637464430e+04, -2.326183637464430e+04, -1.477505794535278e-02, -1.399858191997472e-02, -1.423238120068255e-02, -1.444253005165950e-02, -1.433377664929846e-02, -1.433377664929846e-02, -1.710323052141964e-02, -1.916004724140949e-02, -1.794107822687722e-02, -1.716684693402535e-02, -1.753916271509266e-02, -1.753916271509266e-02, -9.028705568814440e-03, -2.528174979998998e-01, -1.527799947708806e-01, -7.643439634084195e-02, -1.087995594472035e-01, -1.087995594472036e-01, -2.834673585782473e-02, -4.366814071336093e+01, -1.911648116387844e+01, -1.057549484439763e-01, -7.433132815195617e+00, -7.433132815195619e+00, -1.642125133516042e+03, -7.747681961713983e+05, -1.166952088554517e+05, -9.027470573444729e+00, -4.129131318349148e+04, -4.129131318349163e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
