
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_fd_revlb94_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_fd_revlb94", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.088493729084780e+01, -2.088496437212591e+01, -2.088515274028712e+01, -2.088474843398928e+01, -2.088495061160001e+01, -2.088495061160001e+01, -3.465471607623902e+00, -3.465431171796894e+00, -3.464581939080190e+00, -3.466717324950264e+00, -3.465506664433237e+00, -3.465506664433237e+00, -6.989930296350123e-01, -6.991491293997264e-01, -7.063202038144770e-01, -7.108250760506087e-01, -7.087866783807997e-01, -7.087866783807997e-01, -2.396927430784312e-01, -2.382267772493724e-01, -8.055345741336436e-01, -2.462432185046470e-01, -2.368753640023449e-01, -2.368753640023450e-01, -8.742520938829752e-01, -8.379003085461714e-01, -4.313890667642940e-01, -1.135845172123954e+00, -9.524653820537036e-01, -9.524653820537049e-01, -5.020893722987219e+00, -5.020316062331800e+00, -5.020877665044163e+00, -5.020367525369271e+00, -5.020594918527185e+00, -5.020594918527185e+00, -2.138350162852426e+00, -2.146592039930143e+00, -2.143861480943640e+00, -2.151005708756504e+00, -2.140373127405004e+00, -2.140373127405004e+00, -5.791552989566268e-01, -6.017907392898115e-01, -5.403639470737814e-01, -5.361811977967552e-01, -5.847907416407337e-01, -5.847907416407337e-01, -2.840511459390723e-01, -2.858803907365194e-01, -2.858282407575306e-01, -1.810654693343047e+00, -2.426615672809733e-01, -2.426615672809733e-01, -1.140674474800082e+00, -1.082814653393564e+00, -6.336046473447270e-01, -3.089885049559366e-01, -7.687069637452792e-01, -7.687069637452806e-01, -5.503933256780803e-01, -5.529989267084751e-01, -5.520823308030249e-01, -5.513196975900843e-01, -5.517003381757379e-01, -5.517003381757379e-01, -5.338081909134905e-01, -5.114897835780746e-01, -5.160196747818544e-01, -5.217027436813271e-01, -5.184257752470879e-01, -5.184257752470879e-01, -6.319485973249652e-01, -3.112760622962625e-01, -3.289220036090721e-01, -3.675470778518597e-01, -3.433853007981130e-01, -3.433853007981130e-01, -4.722471621282362e-01, -4.589085451980499e-01, -3.830854259933952e-01, -3.420535039125207e-01, -2.578442133156776e-01, -2.578442133156775e-01, -8.089679210222636e-01, -1.013872346523083e+00, -1.000556748450038e+00, -2.661239748725109e-01, -7.308091187027143e-01, -7.308091187027135e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_fd_revlb94_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_fd_revlb94", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.504667175196730e+01, -2.504678145620614e+01, -2.504722680106294e+01, -2.504559547795847e+01, -2.504645629059734e+01, -2.504645629059734e+01, -3.994830763481753e+00, -3.994900052965552e+00, -3.996598993034311e+00, -3.994402869765916e+00, -3.995010139380384e+00, -3.995010139380384e+00, -7.322181044631179e-01, -7.302609635764041e-01, -6.791699218289500e-01, -6.864685732515617e-01, -6.862385306046165e-01, -6.862385306046165e-01, -1.190920414162743e-01, -1.267058851612587e-01, -8.656549793281882e-01, -2.001067698425218e-02, -6.520548717840789e-02, -6.520548717840786e-02, 5.101432461548262e-01, 4.951253685844512e-01, 3.047132786579076e-01, 5.924261343790149e-01, 5.256598556903157e-01, 5.256598556903150e-01, -6.195232416885415e+00, -6.198303128881244e+00, -6.195368956058321e+00, -6.198079911051082e+00, -6.196791910403813e+00, -6.196791910403813e+00, -2.014830267423553e+00, -2.038309898916471e+00, -1.983670067606406e+00, -2.004566778485954e+00, -2.042739922650539e+00, -2.042739922650539e+00, -6.810360173032646e-01, -7.751310781516880e-01, -6.244888462045699e-01, -6.819279060733574e-01, -6.967334004070241e-01, -6.967334004070241e-01, 9.961869697698504e-02, -6.829098732547104e-02, 1.140878705379233e-01, -2.336759782053339e+00, 2.737711246389201e-02, 2.737711246389201e-02, 5.733384139151803e-01, 5.667623113095843e-01, 3.442869442593401e-01, 1.819577480619830e-01, 4.172874781726900e-01, 4.172874781726900e-01, -7.252058444588050e-01, -7.134623442298061e-01, -7.175858099397936e-01, -7.209989781177907e-01, -7.192911728921956e-01, -7.192911728921956e-01, -7.077557645794474e-01, -5.395459713645585e-01, -5.895338089145934e-01, -6.379956364170355e-01, -6.136749776606576e-01, -6.136749776606576e-01, -8.112495699958268e-01, -1.416509284886926e-01, -2.216717159594125e-01, -3.729783816038812e-01, -2.954350238216157e-01, -2.954350238216157e-01, -4.950526062508262e-01, 3.258962605089882e-01, 2.582642530406624e-01, -3.748018303148283e-01, 1.099753693596734e-01, 1.099753693596734e-01, 4.990218272851504e-01, 4.456893897136286e-01, 4.883128600345739e-01, 1.255151039597298e-01, 3.952197433334787e-01, 3.952197433334788e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_fd_revlb94_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_fd_revlb94", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-7.088931098526396e-09, -7.088856322375252e-09, -7.088492588760076e-09, -7.089605788312710e-09, -7.089026918610258e-09, -7.089026918610258e-09, -1.001533498957283e-05, -1.001530006864330e-05, -1.001351196442900e-05, -1.000901641406891e-05, -1.001432746683340e-05, -1.001432746683340e-05, -7.125434237169739e-03, -7.153885658825234e-03, -7.876375861844372e-03, -7.624532574427747e-03, -7.680727378247880e-03, -7.680727378247880e-03, -1.486854515735230e+00, -1.407098857702694e+00, -3.869154943443862e-03, -4.182822576230195e+00, -2.721798691547248e+00, -2.721798691547249e+00, -2.476288270389219e+05, -2.100493846102549e+05, -5.276016065315358e+02, -1.539242124789460e+06, -7.454870564498170e+05, -7.454870564498187e+05, -2.019695574162212e-06, -2.018480471800680e-06, -2.019632752620051e-06, -2.018560132286985e-06, -2.019083191794679e-06, -2.019083191794679e-06, -9.690129544403961e-05, -9.423349293592179e-05, -9.875471451118563e-05, -9.633592894225597e-05, -9.455173020562325e-05, -9.455173020562325e-05, -1.240427802453998e-02, -9.085249527191199e-03, -1.686798527961344e-02, -1.473492943893521e-02, -1.166452889832866e-02, -1.166452889832866e-02, -1.611448413369181e+01, -1.420345589420026e+00, -2.159027053719921e+01, -1.104896290942299e-04, -9.107940061027437e+00, -9.107940061027437e+00, -3.823045265998263e+06, -1.705632657317324e+06, -5.655654494877298e+06, -9.445152006892128e+01, -2.676493899788526e+06, -2.676493899788527e+06, -1.249454579274808e-02, -1.270551964928268e-02, -1.262904363814324e-02, -1.256785814904101e-02, -1.259829026129430e-02, -1.259829026129430e-02, -1.397653774096030e-02, -2.456175594655716e-02, -2.069069522715159e-02, -1.759833334919672e-02, -1.909905522555572e-02, -1.909905522555572e-02, -7.514390414432612e-03, -5.764821379476570e-01, -2.857739377880494e-01, -9.829782631901936e-02, -1.683034679664573e-01, -1.683034679664573e-01, -3.415828819882817e-02, -6.098057374248397e+02, -2.022717940845572e+02, -1.151324298620613e-01, -3.966815682738042e+01, -3.966815682738041e+01, -7.452863770511549e+04, -1.768025174314812e+08, -1.348537567362992e+07, -4.992848147482916e+01, -3.605591032415552e+06, -3.605591032415563e+06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
