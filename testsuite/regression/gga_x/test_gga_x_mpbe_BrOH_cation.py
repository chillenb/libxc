
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_mpbe_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_mpbe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.095946625913308e+01, -2.095949296865611e+01, -2.095968067734311e+01, -2.095928187759067e+01, -2.095948103474026e+01, -2.095948103474026e+01, -3.477570745179630e+00, -3.477531270829003e+00, -3.476704126440096e+00, -3.478802936453557e+00, -3.477607515016887e+00, -3.477607515016887e+00, -6.993862958733588e-01, -6.994465217028478e-01, -7.029032699770486e-01, -7.075988758790348e-01, -7.078786027412350e-01, -7.078786027412350e-01, -2.191315762904875e-01, -2.200558872802706e-01, -8.073851483225609e-01, -1.867572833332419e-01, -2.145589207453390e-01, -2.145589207453389e-01, -1.002904303210143e-02, -1.056107902425723e-02, -5.780155248001410e-02, -5.783261811909517e-03, -8.071836686269106e-03, -8.071836686269106e-03, -5.036785859557844e+00, -5.036141009101545e+00, -5.036767073648376e+00, -5.036197611525212e+00, -5.036452913053807e+00, -5.036452913053807e+00, -2.124502784296441e+00, -2.134033677458151e+00, -2.126704564219718e+00, -2.135108656824029e+00, -2.128732546467119e+00, -2.128732546467119e+00, -5.812565586119461e-01, -6.028688074194930e-01, -5.425849467736783e-01, -5.376885146008898e-01, -5.875876930227888e-01, -5.875876930227888e-01, -1.422283382917874e-01, -2.364730939554928e-01, -1.328462455099714e-01, -1.813740124253187e+00, -1.592391650171468e-01, -1.592391650171468e-01, -4.464949805646319e-03, -5.653474214762266e-03, -4.329344650960601e-03, -9.197539637409689e-02, -5.438315726209902e-03, -5.438315726209901e-03, -5.507723360996071e-01, -5.539528811024883e-01, -5.528471842536967e-01, -5.519170953064474e-01, -5.523826634367579e-01, -5.523826634367579e-01, -5.339880786343294e-01, -5.119445539550884e-01, -5.177663441321939e-01, -5.234455837659586e-01, -5.203075807186539e-01, -5.203075807186539e-01, -6.331743252654178e-01, -2.807434308083566e-01, -3.143481477455560e-01, -3.671154805371218e-01, -3.382693021621160e-01, -3.382693021621160e-01, -4.725392857927304e-01, -5.530280203359147e-02, -7.493296745643294e-02, -3.429209634914646e-01, -1.142792112993921e-01, -1.142792112993922e-01, -1.413432405414218e-02, -1.511144906129241e-03, -3.177864975690084e-03, -1.080319521963847e-01, -4.994215277318414e-03, -4.994215277318408e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_mpbe_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_mpbe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.509398348664440e+01, -2.509395414835867e+01, -2.509410185779032e+01, -2.509404011922644e+01, -2.509444666889959e+01, -2.509454369506680e+01, -2.509311074405460e+01, -2.509284066939015e+01, -2.509405579659179e+01, -2.509349649218073e+01, -2.509405579659179e+01, -2.509349649218073e+01, -4.023051697322860e+00, -4.023265720479183e+00, -4.023097945780560e+00, -4.023321310025753e+00, -4.024314738568694e+00, -4.024657470396151e+00, -4.022855735177341e+00, -4.023207822559136e+00, -4.022273010638131e+00, -4.024359953308200e+00, -4.022273010638131e+00, -4.024359953308200e+00, -7.514352438640862e-01, -7.567120026909622e-01, -7.495055831773035e-01, -7.559455099082334e-01, -7.252159874061928e-01, -7.176001255493221e-01, -7.265955378084594e-01, -7.290672052119742e-01, -7.661443812052477e-01, -6.937657681117692e-01, -7.661443812052477e-01, -6.937657681117692e-01, -1.971299741807069e-01, -2.013421122879620e-01, -1.975138053552342e-01, -2.028247031797909e-01, -8.645799865392761e-01, -9.048736555826165e-01, -1.820821842764032e-01, -1.835683714456376e-01, -2.048482730261484e-01, -1.607174640806823e-01, -2.048482730261483e-01, -1.607174640806823e-01, -1.292467615798117e-02, -1.373281070447097e-02, -1.354231190461845e-02, -1.450557318178084e-02, -7.370731716833261e-02, -7.759115647667496e-02, -7.772908951059979e-03, -7.643473676160471e-03, -1.153169236165410e-02, -6.564008950885236e-03, -1.153169236165410e-02, -6.564008950885238e-03, -6.194000764148847e+00, -6.192445853281490e+00, -6.196912307829757e+00, -6.195258725255703e+00, -6.194160922183704e+00, -6.192541375125380e+00, -6.196659218763379e+00, -6.195096757190227e+00, -6.195493335230884e+00, -6.193858864347631e+00, -6.195493335230884e+00, -6.193858864347631e+00, -2.158802967654629e+00, -2.158688194495689e+00, -2.176867908711139e+00, -2.176223010497493e+00, -2.140281862125620e+00, -2.145435180779526e+00, -2.155657700219923e+00, -2.161046733737817e+00, -2.183272184946678e+00, -2.169847736584559e+00, -2.183272184946678e+00, -2.169847736584559e+00, -6.847294528334806e-01, -6.830098205193170e-01, -7.737746711881803e-01, -7.745290579271229e-01, -6.156226428280389e-01, -6.412236750314896e-01, -6.699909924779804e-01, -6.917966405244486e-01, -7.166553726939154e-01, -6.795429434285671e-01, -7.166553726939154e-01, -6.795429434285672e-01, -1.632050613524928e-01, -1.635561737530463e-01, -2.215420231898259e-01, -2.220753355704847e-01, -1.528174724710721e-01, -1.576253045212346e-01, -2.334364006849803e+00, -2.333378375982984e+00, -1.690040963499888e-01, -1.647930384327727e-01, -1.690040963499888e-01, -1.647930384327727e-01, -5.831617352235817e-03, -6.060458707675679e-03, -7.478875983369488e-03, -7.592087147085282e-03, -5.592048605935786e-03, -5.921825100924072e-03, -1.150925709191089e-01, -1.158809621901034e-01, -5.711916606689773e-03, -7.842663113280040e-03, -5.711916606689771e-03, -7.842663113280045e-03, -7.232829458734816e-01, -7.262183751998464e-01, -7.110662413376462e-01, -7.140815977656432e-01, -7.152874370981319e-01, -7.183027911105245e-01, -7.188646774491625e-01, -7.218041594317695e-01, -7.170703412900747e-01, -7.200466381685821e-01, -7.170703412900747e-01, -7.200466381685821e-01, -7.063507024598569e-01, -7.087052925245169e-01, -5.530839044053952e-01, -5.559034309473204e-01, -5.930024155788043e-01, -5.962134658036937e-01, -6.369147655246284e-01, -6.393689434562985e-01, -6.144591859009255e-01, -6.169731363059159e-01, -6.144591859009255e-01, -6.169731363059159e-01, -8.092129338124576e-01, -8.111786807310766e-01, -2.551318979361254e-01, -2.559633896991630e-01, -2.895662033578453e-01, -2.918090466625106e-01, -3.869040898954221e-01, -3.892800813696542e-01, -3.310494356678151e-01, -3.309834279924339e-01, -3.310494356678150e-01, -3.309834279924337e-01, -5.075905582696245e-01, -5.118187776201604e-01, -7.247687900549353e-02, -7.294807275759378e-02, -9.549799245477615e-02, -9.829340135625361e-02, -3.779636427770640e-01, -3.845843066420446e-01, -1.340373325868708e-01, -1.358728659700521e-01, -1.340373325868708e-01, -1.358728659700521e-01, -1.847731754330459e-02, -1.914509513765041e-02, -2.012511609809095e-03, -2.017088925299511e-03, -4.094690871998080e-03, -4.354956013049669e-03, -1.291747752358991e-01, -1.307464719196583e-01, -5.410026473798749e-03, -7.188841937074979e-03, -5.410026473798743e-03, -7.188841937074971e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_mpbe_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_mpbe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.444151335619762e-08, 0.000000000000000e+00, -1.444159248800125e-08, -1.444138621924828e-08, 0.000000000000000e+00, -1.444150009172360e-08, -1.444086310914717e-08, 0.000000000000000e+00, -1.444078309746745e-08, -1.444230187687645e-08, 0.000000000000000e+00, -1.444261600486231e-08, -1.444144340611017e-08, 0.000000000000000e+00, -1.444179769507466e-08, -1.444144340611017e-08, 0.000000000000000e+00, -1.444179769507466e-08, -1.963768905164801e-05, 0.000000000000000e+00, -1.964292103862599e-05, -1.963796444518443e-05, 0.000000000000000e+00, -1.964361316706601e-05, -1.964884468655222e-05, 0.000000000000000e+00, -1.965123748859733e-05, -1.961730388967868e-05, 0.000000000000000e+00, -1.962077864235608e-05, -1.964918827929456e-05, 0.000000000000000e+00, -1.962879937131255e-05, -1.964918827929456e-05, 0.000000000000000e+00, -1.962879937131255e-05, -1.273722991538186e-02, 0.000000000000000e+00, -1.271774424622023e-02, -1.275334450316604e-02, 0.000000000000000e+00, -1.273018109119459e-02, -1.294414966289511e-02, 0.000000000000000e+00, -1.294132064587900e-02, -1.258082810194978e-02, 0.000000000000000e+00, -1.258687313812162e-02, -1.259364215344396e-02, 0.000000000000000e+00, -1.228527653474504e-02, -1.259364215344396e-02, 0.000000000000000e+00, -1.228527653474504e-02, -1.420839563765482e+00, 0.000000000000000e+00, -1.334134562524909e+00, -1.426737500714720e+00, 0.000000000000000e+00, -1.319969335621420e+00, -7.370404535897067e-03, 0.000000000000000e+00, -6.806163387698353e-03, -1.822665591741156e+00, 0.000000000000000e+00, -1.768540573258850e+00, -1.224857665441244e+00, 0.000000000000000e+00, -2.321729493324735e+00, -1.224857665441243e+00, 0.000000000000000e+00, -2.321729493324737e+00, -1.944811652384839e+00, 0.000000000000000e+00, -1.928402210312435e+00, -2.052525165657110e+00, 0.000000000000000e+00, -2.046333610164885e+00, -1.475863960682518e+00, 0.000000000000000e+00, -1.522276910594832e+00, -1.766208046562772e+00, 0.000000000000000e+00, -1.717901078477120e+00, -1.936394208946367e+00, 0.000000000000000e+00, -4.888520308840412e+00, -1.936394208945041e+00, 0.000000000000000e+00, -4.888520308804837e+00, -4.225108283464327e-06, 0.000000000000000e+00, -4.229035640439127e-06, -4.224985244129624e-06, 0.000000000000000e+00, -4.228918010323715e-06, -4.225071333198685e-06, 0.000000000000000e+00, -4.229010010901152e-06, -4.224966226559605e-06, 0.000000000000000e+00, -4.228903515894295e-06, -4.225069596901498e-06, 0.000000000000000e+00, -4.228981339001889e-06, -4.225069596901498e-06, 0.000000000000000e+00, -4.228981339001889e-06, -1.561594487485493e-04, 0.000000000000000e+00, -1.561873773024572e-04, -1.529436363363486e-04, 0.000000000000000e+00, -1.530794209289711e-04, -1.564001791703573e-04, 0.000000000000000e+00, -1.564045716189618e-04, -1.536603557244676e-04, 0.000000000000000e+00, -1.535874596262399e-04, -1.540242062856622e-04, 0.000000000000000e+00, -1.545235310864442e-04, -1.540242062856622e-04, 0.000000000000000e+00, -1.545235310864442e-04, -2.466122136664139e-02, 0.000000000000000e+00, -2.493418052675271e-02, -1.978535493326581e-02, 0.000000000000000e+00, -1.977256286008283e-02, -3.543910100213037e-02, 0.000000000000000e+00, -3.112429894534813e-02, -3.394121658159157e-02, 0.000000000000000e+00, -2.973584196674381e-02, -2.146520747243508e-02, 0.000000000000000e+00, -2.618273101973656e-02, -2.146520747243509e-02, 0.000000000000000e+00, -2.618273101973656e-02, -1.746557181358333e+00, 0.000000000000000e+00, -1.789933135587263e+00, -8.526225525717408e-01, 0.000000000000000e+00, -8.449432875531118e-01, -1.883875899076437e+00, 0.000000000000000e+00, -1.881619674851968e+00, -2.407349876102606e-04, 0.000000000000000e+00, -2.411826619010877e-04, -2.080773567729789e+00, 0.000000000000000e+00, -2.591432136808181e+00, -2.080773567729789e+00, 0.000000000000000e+00, -2.591432136808181e+00, -2.475669502532676e+00, 0.000000000000000e+00, -2.142809893642264e+00, -2.135163054452957e+00, 0.000000000000000e+00, -1.971256850801557e+00, -1.218093659092750e+01, 0.000000000000000e+00, -1.356577109156381e+01, -2.317270274019942e+00, 0.000000000000000e+00, -2.228025822594616e+00, -6.047479296509226e+00, 0.000000000000000e+00, -5.963613156283199e+00, -6.047479296499028e+00, 0.000000000000000e+00, -5.963613156260530e+00, -2.794722934228831e-02, 0.000000000000000e+00, -2.753041586673357e-02, -2.790794753846870e-02, 0.000000000000000e+00, -2.749684698123562e-02, -2.792192685946421e-02, 0.000000000000000e+00, -2.750894854268516e-02, -2.793433826720788e-02, 0.000000000000000e+00, -2.751942505600545e-02, -2.792830810562825e-02, 0.000000000000000e+00, -2.751430311055093e-02, -2.792830810562825e-02, 0.000000000000000e+00, -2.751430311055093e-02, -3.139002297113391e-02, 0.000000000000000e+00, -3.098015073858659e-02, -4.448184669702990e-02, 0.000000000000000e+00, -4.387097893815634e-02, -4.051750155689074e-02, 0.000000000000000e+00, -3.993301773147007e-02, -3.676482291250745e-02, 0.000000000000000e+00, -3.628396533095613e-02, -3.869064191098667e-02, 0.000000000000000e+00, -3.816242841125165e-02, -3.869064191098667e-02, 0.000000000000000e+00, -3.816242841125165e-02, -1.634853867702316e-02, 0.000000000000000e+00, -1.627180530604760e-02, -5.036071482066575e-01, 0.000000000000000e+00, -4.982384419623905e-01, -3.413803384132159e-01, 0.000000000000000e+00, -3.355094425958987e-01, -1.718391919992349e-01, 0.000000000000000e+00, -1.686554510618349e-01, -2.480578754396148e-01, 0.000000000000000e+00, -2.493604319502363e-01, -2.480578754396150e-01, 0.000000000000000e+00, -2.493604319502364e-01, -6.169680842298986e-02, 0.000000000000000e+00, -6.043040549228391e-02, -1.326438048193935e+00, 0.000000000000000e+00, -1.331961795507870e+00, -1.509747087979937e+00, 0.000000000000000e+00, -1.576801169452920e+00, -2.204316279759526e-01, 0.000000000000000e+00, -2.095492797033171e-01, -2.664031689813843e+00, 0.000000000000000e+00, -3.308234838558584e+00, -2.664031689813856e+00, 0.000000000000000e+00, -3.308234838558587e+00, -1.557605175270852e+00, 0.000000000000000e+00, -1.593239422592953e+00, -7.598863188669669e+00, 0.000000000000000e+00, -1.346311639956427e+01, -4.696614417823017e+00, 0.000000000000000e+00, -5.001586696089423e+00, -2.942741962002112e+00, 0.000000000000000e+00, -2.901855739104709e+00, -1.248442512705802e+01, 0.000000000000000e+00, -6.183465247258683e+00, -1.248442512705797e+01, 0.000000000000000e+00, -6.183465247258660e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
