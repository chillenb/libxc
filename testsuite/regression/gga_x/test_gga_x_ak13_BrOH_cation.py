
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_ak13_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ak13", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.156334152213897e+01, -2.156334332972335e+01, -2.156346350210795e+01, -2.156343433183387e+01, -2.156343366334249e+01, -2.156343366334249e+01, -3.634930709746213e+00, -3.634845945515028e+00, -3.632977011862534e+00, -3.636918798926925e+00, -3.634917084588194e+00, -3.634917084588194e+00, -7.615687194626500e-01, -7.626074541757017e-01, -7.945750978800956e-01, -7.983195081713397e-01, -8.044722640701248e-01, -8.044722640701248e-01, -3.186746711316636e-01, -3.130095674816279e-01, -8.697625751775355e-01, -3.726276404157791e-01, -3.425831531815751e-01, -3.425831531815750e-01, -1.252757165075596e+00, -1.210040266076188e+00, -7.443445487768675e-01, -1.522053469594653e+00, -1.284434370559653e+00, -1.284434370559652e+00, -5.127469076845653e+00, -5.125707947716851e+00, -5.127404229841863e+00, -5.125849148008874e+00, -5.126566693853491e+00, -5.126566693853491e+00, -2.422652868748521e+00, -2.425364431256308e+00, -2.444305886964342e+00, -2.446390819214344e+00, -2.414063165829082e+00, -2.414063165829082e+00, -6.026589352412660e-01, -6.055931689001184e-01, -5.665304159972815e-01, -5.419852142475852e-01, -6.060025080505180e-01, -6.060025080505180e-01, -4.790922169540339e-01, -4.128749222474946e-01, -4.866563564903449e-01, -1.821052809038177e+00, -3.881651117310453e-01, -3.881651117310453e-01, -1.495997750257795e+00, -1.454358601389542e+00, -8.695880279627739e-01, -5.412978159547227e-01, -1.045680763061476e+00, -1.045680763061477e+00, -5.508508241553497e-01, -5.562276535406038e-01, -5.541781294059775e-01, -5.525930450549241e-01, -5.533699766256135e-01, -5.533699766256135e-01, -5.338250837223497e-01, -5.557586971723980e-01, -5.432113717455359e-01, -5.345852146479577e-01, -5.380397815976311e-01, -5.380397815976311e-01, -6.365875727733747e-01, -4.195435469542632e-01, -4.111408409577630e-01, -4.053234969627153e-01, -4.010712285588146e-01, -4.010712285588146e-01, -5.143847614218794e-01, -7.880288960025431e-01, -6.703688423677227e-01, -3.662130193319553e-01, -4.420312134359148e-01, -4.420312134359150e-01, -1.201771473076871e+00, -1.234403678511250e+00, -1.290108421611359e+00, -4.592131609209998e-01, -9.927114467080957e-01, -9.927114467080951e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_ak13_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ak13", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.351053129457254e+01, -2.351050947464817e+01, -2.351071323591960e+01, -2.351064158702988e+01, -2.351116855186222e+01, -2.351132950756856e+01, -2.350911704686454e+01, -2.350871365196932e+01, -2.351064620866596e+01, -2.350966606845529e+01, -2.351064620866596e+01, -2.350966606845529e+01, -3.636528824082022e+00, -3.637367345361155e+00, -3.636651432160010e+00, -3.637539381617606e+00, -3.640123307400359e+00, -3.641054235790845e+00, -3.634689168207593e+00, -3.635718315444325e+00, -3.635570584653672e+00, -3.638852595815403e+00, -3.635570584653672e+00, -3.638852595815403e+00, -6.070125114649295e-01, -6.208689457752593e-01, -6.021164389526800e-01, -6.191473721070694e-01, -5.358193054669786e-01, -5.107868194224978e-01, -5.273773214031404e-01, -5.356103421461860e-01, -6.424219452641999e-01, -3.878409137194434e-01, -6.424219452641999e-01, -3.878409137194434e-01, -1.951869385580372e-03, -2.027973339418955e-02, -1.251863276399172e-02, -3.289664791946920e-02, -7.042625226844000e-01, -7.779532515551487e-01, 1.230479523762882e-01, 1.207131528896794e-01, -7.054660200240801e-03, 2.192349333868898e-01, -7.054660200240726e-03, 2.192349333868898e-01, 5.294148533127538e-01, 5.282515109908108e-01, 5.200139790190763e-01, 5.177040347674550e-01, 4.596832347526988e-01, 4.500961756876771e-01, 5.606628757147776e-01, 5.652758946299400e-01, 5.342867831491325e-01, 4.326469032284391e-01, 5.342867831491319e-01, 4.326469032284376e-01, -5.937080758944167e+00, -5.935477214983068e+00, -5.942653677368542e+00, -5.940862229115194e+00, -5.937376783720773e+00, -5.935652515029229e+00, -5.942159026543259e+00, -5.940544821756072e+00, -5.939947392724164e+00, -5.938185004431849e+00, -5.939947392724164e+00, -5.938185004431849e+00, -1.519658318816885e+00, -1.519527936374194e+00, -1.550658321138579e+00, -1.549769585802954e+00, -1.457161579553653e+00, -1.475541998861118e+00, -1.484582729378559e+00, -1.502740395987285e+00, -1.581906536601727e+00, -1.541848326187713e+00, -1.581906536601727e+00, -1.541848326187713e+00, -6.304744434595020e-01, -6.290904781396183e-01, -7.631604156426854e-01, -7.643459048668939e-01, -5.542880029991111e-01, -5.843860886421426e-01, -6.562445529437855e-01, -6.770318901638198e-01, -6.691309725971345e-01, -6.317144236044728e-01, -6.691309725971343e-01, -6.317144236044728e-01, 2.733051788566921e-01, 2.669854571926715e-01, 8.630218381192471e-02, 8.448693076010658e-02, 2.904465963522304e-01, 2.765882257782872e-01, -2.305530589347003e+00, -2.304624536085424e+00, 2.036331712253586e-01, 1.495846836955094e-01, 2.036331712253586e-01, 1.495846836955094e-01, 5.205966532110614e-01, 5.396706900687891e-01, 5.344388003016329e-01, 5.453624571900333e-01, 3.430192216405867e-01, 3.322330194231859e-01, 3.391972864504085e-01, 3.431332401250926e-01, 4.121712427001571e-01, 4.060950882715776e-01, 4.121712427001566e-01, 4.060950882715783e-01, -7.214252276770283e-01, -7.244465003071827e-01, -7.020452912762083e-01, -7.052785678086585e-01, -7.090570790259181e-01, -7.122607334685380e-01, -7.147668371094876e-01, -7.178248796066365e-01, -7.119335295482738e-01, -7.150614172700462e-01, -7.119335295482738e-01, -7.150614172700462e-01, -7.059334800959237e-01, -7.082950308895258e-01, -4.533260110420030e-01, -4.573293566229685e-01, -5.306871141506222e-01, -5.350237750944988e-01, -6.061205680266160e-01, -6.088179429722159e-01, -5.689875565296826e-01, -5.717919150415641e-01, -5.689875565296826e-01, -5.717919150415641e-01, -7.964129450664397e-01, -7.990852233026494e-01, 4.784124453535550e-03, 1.666417898539483e-03, -9.534648599855902e-02, -1.031729800262388e-01, -3.019880999932929e-01, -3.050456252615749e-01, -1.995339495905223e-01, -2.008102623512479e-01, -1.995339495905221e-01, -2.008102623512478e-01, -4.121232467072674e-01, -4.185998609261758e-01, 4.765201972862493e-01, 4.752765440482923e-01, 4.268570839659888e-01, 4.169049322709850e-01, -3.227469334417646e-01, -3.313550303310672e-01, 2.819922876076126e-01, 2.433065486194671e-01, 2.819922876076120e-01, 2.433065486194668e-01, 5.463893252923527e-01, 5.413534959444870e-01, 4.056422114159207e-01, 3.498922325173119e-01, 4.475093878875382e-01, 4.390256288537924e-01, 2.787640088228345e-01, 2.771151065346027e-01, 3.414472328893141e-01, 4.044018768623032e-01, 3.414472328893133e-01, 4.044018768623031e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_ak13_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ak13", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.653667831967880e-08, 0.000000000000000e+00, -2.653680859984077e-08, -2.653625508333269e-08, 0.000000000000000e+00, -2.653650117717769e-08, -2.653494083130220e-08, 0.000000000000000e+00, -2.653460682601207e-08, -2.653971958097955e-08, 0.000000000000000e+00, -2.654069813969823e-08, -2.653642388626477e-08, 0.000000000000000e+00, -2.653829235323910e-08, -2.653642388626477e-08, 0.000000000000000e+00, -2.653829235323910e-08, -3.871852674605655e-05, 0.000000000000000e+00, -3.871738136260188e-05, -3.871763491967605e-05, 0.000000000000000e+00, -3.871658074310709e-05, -3.869688706309104e-05, 0.000000000000000e+00, -3.869053007429872e-05, -3.870779172300663e-05, 0.000000000000000e+00, -3.870205645375999e-05, -3.874571835502895e-05, 0.000000000000000e+00, -3.868073654488001e-05, -3.874571835502895e-05, 0.000000000000000e+00, -3.868073654488001e-05, -2.887867914616991e-02, 0.000000000000000e+00, -2.838782604419900e-02, -2.907049520894357e-02, 0.000000000000000e+00, -2.846702620147475e-02, -3.170509005733275e-02, 0.000000000000000e+00, -3.259062348428236e-02, -3.123427049747002e-02, 0.000000000000000e+00, -3.096519556548274e-02, -2.746451783926011e-02, 0.000000000000000e+00, -3.567772731470181e-02, -2.746451783926011e-02, 0.000000000000000e+00, -3.567772731470181e-02, -6.596132803432697e+00, 0.000000000000000e+00, -5.718629433224186e+00, -6.317832767301149e+00, 0.000000000000000e+00, -5.366509120487473e+00, -1.657312922439800e-02, 0.000000000000000e+00, -1.441373371458693e-02, -1.723448835624724e+01, 0.000000000000000e+00, -1.636067075580943e+01, -5.563797533548130e+00, 0.000000000000000e+00, -5.452315674234328e+01, -5.563797533548129e+00, 0.000000000000000e+00, -5.452315674234322e+01, -7.217251232514413e+05, 0.000000000000000e+00, -5.910332282126241e+05, -6.257392174406808e+05, 0.000000000000000e+00, -4.994233943106613e+05, -1.910090259064454e+03, 0.000000000000000e+00, -1.589307205089486e+03, -3.697140311516588e+06, 0.000000000000000e+00, -3.882606788510439e+06, -1.046102630311953e+06, 0.000000000000000e+00, -7.761118580896994e+06, -1.046102630311954e+06, 0.000000000000000e+00, -7.761118580896989e+06, -7.280387371415486e-06, 0.000000000000000e+00, -7.287629692949783e-06, -7.268466659434145e-06, 0.000000000000000e+00, -7.276102294537751e-06, -7.279725858273546e-06, 0.000000000000000e+00, -7.287233939645674e-06, -7.269498034487826e-06, 0.000000000000000e+00, -7.276762445924314e-06, -7.274287176432138e-06, 0.000000000000000e+00, -7.281845135795573e-06, -7.274287176432138e-06, 0.000000000000000e+00, -7.281845135795573e-06, -3.963720698229524e-04, 0.000000000000000e+00, -3.964520353087003e-04, -3.849559458883055e-04, 0.000000000000000e+00, -3.853743108704359e-04, -4.061000726219010e-04, 0.000000000000000e+00, -4.033811247595242e-04, -3.959424620838675e-04, 0.000000000000000e+00, -3.931652383835331e-04, -3.828895905803420e-04, 0.000000000000000e+00, -3.896203399616805e-04, -3.828895905803420e-04, 0.000000000000000e+00, -3.896203399616805e-04, -4.703375694527033e-02, 0.000000000000000e+00, -4.752488087835840e-02, -2.922167126457791e-02, 0.000000000000000e+00, -2.903933662984965e-02, -7.032702810432043e-02, 0.000000000000000e+00, -6.050601384615304e-02, -5.292254840501610e-02, 0.000000000000000e+00, -4.661696633699443e-02, -3.975784928209193e-02, 0.000000000000000e+00, -4.896596225930785e-02, -3.975784928209195e-02, 0.000000000000000e+00, -4.896596225930788e-02, -6.219717217546837e+01, 0.000000000000000e+00, -6.030176137716700e+01, -5.827674504899598e+00, 0.000000000000000e+00, -5.719839164728418e+00, -8.953473469100440e+01, 0.000000000000000e+00, -7.434806207055631e+01, -3.506646492162673e-04, 0.000000000000000e+00, -3.512087320337143e-04, -3.930316815960140e+01, 0.000000000000000e+00, -3.282452594193319e+01, -3.930316815960140e+01, 0.000000000000000e+00, -3.282452594193319e+01, -9.975918716374863e+06, 0.000000000000000e+00, -8.568307449110935e+06, -4.343187983872096e+06, 0.000000000000000e+00, -4.074386395647131e+06, -1.551613022953489e+07, 0.000000000000000e+00, -1.314956473092749e+07, -3.425385950819238e+02, 0.000000000000000e+00, -3.336562811074945e+02, -1.267486790061826e+07, 0.000000000000000e+00, -4.523875404991826e+06, -1.267486790061825e+07, 0.000000000000000e+00, -4.523875404991826e+06, -3.362599544808541e-02, 0.000000000000000e+00, -3.293807619799093e-02, -4.079509358891029e-02, 0.000000000000000e+00, -4.004284478529418e-02, -3.887430871447911e-02, 0.000000000000000e+00, -3.812958940579343e-02, -3.688465321237099e-02, 0.000000000000000e+00, -3.618872637122859e-02, -3.793447871753346e-02, 0.000000000000000e+00, -3.721320863991971e-02, -3.793447871753346e-02, 0.000000000000000e+00, -3.721320863991971e-02, -3.280169145423153e-02, 0.000000000000000e+00, -3.232143893707032e-02, -9.939549367505164e-02, 0.000000000000000e+00, -9.765623796021317e-02, -8.118318052209171e-02, 0.000000000000000e+00, -7.966947873903124e-02, -6.482097532996121e-02, 0.000000000000000e+00, -6.385922115912501e-02, -7.295577928296045e-02, 0.000000000000000e+00, -7.183539346253139e-02, -7.295577928296045e-02, 0.000000000000000e+00, -7.183539346253139e-02, -2.460848212743835e-02, 0.000000000000000e+00, -2.429985236171781e-02, -2.398733446987171e+00, 0.000000000000000e+00, -2.347210055782735e+00, -1.205484366884002e+00, 0.000000000000000e+00, -1.160886650085317e+00, -4.022377585107049e-01, 0.000000000000000e+00, -3.934007131694831e-01, -6.928355140912028e-01, 0.000000000000000e+00, -6.939690749715309e-01, -6.928355140912034e-01, 0.000000000000000e+00, -6.939690749715309e-01, -1.391841875494409e-01, 0.000000000000000e+00, -1.353306662888014e-01, -2.008367263982770e+03, 0.000000000000000e+00, -1.962934083810493e+03, -7.318223965465160e+02, 0.000000000000000e+00, -6.560363652652686e+02, -4.707103926778360e-01, 0.000000000000000e+00, -4.425813456941876e-01, -1.619905366393365e+02, 0.000000000000000e+00, -1.368863400778093e+02, -1.619905366393366e+02, 0.000000000000000e+00, -1.368863400778093e+02, -2.148367126840448e+05, 0.000000000000000e+00, -1.918924749435480e+05, -3.775005676711366e+08, 0.000000000000000e+00, -4.205756349933416e+08, -3.527734833843021e+07, 0.000000000000000e+00, -2.929582431319218e+07, -1.906732530379124e+02, 0.000000000000000e+00, -1.797351274454981e+02, -1.735328123980299e+07, 0.000000000000000e+00, -6.043224749059351e+06, -1.735328123980303e+07, 0.000000000000000e+00, -6.043224749059374e+06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
