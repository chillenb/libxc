
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_airy_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_airy", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.976365601433657e+01, -1.976370445529650e+01, -1.976394753774075e+01, -1.976322628751685e+01, -1.976360025817456e+01, -1.976360025817456e+01, -3.236228884833138e+00, -3.236219466207313e+00, -3.236082077773326e+00, -3.236936907601688e+00, -3.236295907802382e+00, -3.236295907802382e+00, -6.367962593245136e-01, -6.365132542424580e-01, -6.310929722207591e-01, -6.357131177713808e-01, -6.365212137862093e-01, -6.365212137862093e-01, -1.869581108682511e-01, -1.881538737986881e-01, -7.388369996508519e-01, -1.602849058751970e-01, -1.840534299254438e-01, -1.840534299254436e-01, -4.289714394831173e-02, -4.291063556035785e-02, -8.178937649829834e-02, -3.944388801679359e-02, -3.993889155710161e-02, -3.993889155710158e-02, -4.807148601772065e+00, -4.807917791042478e+00, -4.807187779758761e+00, -4.807866681652801e+00, -4.807535777105139e+00, -4.807535777105139e+00, -1.901891248067494e+00, -1.912522136744318e+00, -1.899093038957373e+00, -1.908461040088776e+00, -1.909165737838988e+00, -1.909165737838988e+00, -5.442686926567497e-01, -5.891122793546510e-01, -5.053396272549461e-01, -5.214146496326914e-01, -5.527672029836306e-01, -5.527672029836307e-01, -1.341444983718876e-01, -2.009794417040979e-01, -1.278242997153521e-01, -1.774548103516953e+00, -1.406065715536068e-01, -1.406065715536068e-01, -3.570504906776190e-02, -3.799138648062859e-02, -2.481303907068301e-02, -1.005724098347656e-01, -3.025079344602860e-02, -3.025079344602863e-02, -5.463733956215562e-01, -5.418784942515302e-01, -5.433992767684881e-01, -5.447090887232164e-01, -5.440481010381066e-01, -5.440481010381066e-01, -5.320067662355739e-01, -4.667344537971777e-01, -4.806136812483939e-01, -4.975508423955206e-01, -4.882969773892636e-01, -4.882969773892636e-01, -6.174318330471551e-01, -2.389942533310113e-01, -2.719730566236358e-01, -3.324011996776942e-01, -2.993029866721499e-01, -2.993029866721499e-01, -4.303048235104243e-01, -8.126978219574982e-02, -9.337141753397998e-02, -3.150623928450902e-01, -1.114306291908630e-01, -1.114306291908629e-01, -4.834325580588649e-02, -2.230534330910796e-02, -2.890281318901665e-02, -1.079346236993684e-01, -2.843302915870969e-02, -2.843302915870966e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_airy_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_airy", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.575161653606767e+01, -2.575158747314569e+01, -2.575175109882792e+01, -2.575168519849629e+01, -2.575212931448287e+01, -2.575224178870063e+01, -2.575061096770894e+01, -2.575030609348173e+01, -2.575169943192948e+01, -2.575104140997691e+01, -2.575169943192948e+01, -2.575104140997691e+01, -4.100490253431835e+00, -4.100844103262885e+00, -4.100554384567143e+00, -4.100926398174699e+00, -4.102294272749853e+00, -4.102774715174143e+00, -4.099941335249458e+00, -4.100449407397646e+00, -4.099643098787653e+00, -4.102063861324125e+00, -4.099643098787653e+00, -4.102063861324125e+00, -7.570544820620766e-01, -7.628556838198847e-01, -7.549761056902332e-01, -7.620197522152189e-01, -7.298477877244693e-01, -7.222071683774361e-01, -7.312438101264402e-01, -7.337243719582713e-01, -7.733643457614727e-01, -6.961122370752059e-01, -7.733643457614727e-01, -6.961122370752059e-01, -1.799958873223542e-01, -1.881595425389446e-01, -1.828799403653293e-01, -1.922780797310205e-01, -8.713191038520244e-01, -9.154432003179459e-01, -1.341798514084538e-01, -1.360404712186464e-01, -1.882624674282878e-01, -1.016205714999068e-01, -1.882624674282817e-01, -1.016205714999078e-01, -1.189038591522382e-02, -1.239253952658841e-02, -1.221421873107616e-02, -1.280557624685176e-02, -4.835436705064949e-02, -5.051018300212041e-02, -8.835842528569825e-03, -8.784644530078515e-03, -1.104358628374573e-02, -7.180167317269951e-03, -1.104358628374564e-02, -7.180167317269892e-03, -6.371755634891941e+00, -6.370154547207124e+00, -6.374780424686402e+00, -6.373077749436059e+00, -6.371922308537310e+00, -6.370253963313141e+00, -6.374518061973559e+00, -6.372909783878177e+00, -6.373308418511249e+00, -6.371624929757645e+00, -6.373308418511249e+00, -6.371624929757645e+00, -2.172684168067595e+00, -2.172568703356965e+00, -2.190841753497194e+00, -2.190193380926788e+00, -2.154005889402907e+00, -2.159225174860133e+00, -2.169516222258174e+00, -2.174950248535943e+00, -2.197243419287537e+00, -2.183782275652650e+00, -2.197243419287537e+00, -2.183782275652650e+00, -7.004047851343185e-01, -6.986891525939500e-01, -7.900791036095889e-01, -7.905257012015681e-01, -6.270175657909064e-01, -6.545872862347151e-01, -6.867107879077391e-01, -7.093046352275862e-01, -7.349988799479971e-01, -6.963805625957381e-01, -7.349988799479971e-01, -6.963805625957369e-01, -1.003639097483491e-01, -1.008446097459687e-01, -1.790593798439096e-01, -1.800266275687464e-01, -9.309229835902512e-02, -9.652859707969803e-02, -2.381148480789981e+00, -2.380089791472539e+00, -1.093903065162911e-01, -1.136667825527537e-01, -1.093903065162911e-01, -1.136667825527537e-01, -7.313261268332919e-03, -7.591018963828370e-03, -8.467079565853193e-03, -8.614755622539353e-03, -5.940065423660944e-03, -6.075028931068563e-03, -7.048656604415590e-02, -7.098979563196900e-02, -6.494172326400579e-03, -7.809394063307754e-03, -6.494172326400625e-03, -7.809394063307735e-03, -7.294362135378647e-01, -7.322234420940168e-01, -7.255030858412224e-01, -7.283794339436760e-01, -7.272783967222509e-01, -7.301224081804071e-01, -7.284236224298227e-01, -7.312248282902463e-01, -7.278880874178637e-01, -7.307083803497876e-01, -7.278880874178637e-01, -7.307083803497876e-01, -7.091875532229223e-01, -7.115259511799713e-01, -5.575469829625441e-01, -5.604904578498869e-01, -6.033269827273475e-01, -6.068852856200464e-01, -6.549570103646053e-01, -6.575123000353632e-01, -6.292183792187337e-01, -6.318936602951676e-01, -6.292183792187337e-01, -6.318936602951676e-01, -8.274011640351620e-01, -8.289379477411997e-01, -2.311505160854005e-01, -2.326820024568295e-01, -2.834857273056530e-01, -2.867561455474092e-01, -3.894894600790064e-01, -3.919039124957665e-01, -3.327666795977394e-01, -3.327402004629488e-01, -3.327666795977290e-01, -3.327402004629442e-01, -5.114807133407125e-01, -5.158978214161012e-01, -4.782020297875528e-02, -4.808340050093819e-02, -6.053723300431842e-02, -6.199598034108389e-02, -3.821119308626025e-01, -3.891684172243130e-01, -8.136848523348242e-02, -8.307782078689832e-02, -8.136848523348385e-02, -8.307782078689760e-02, -1.550967557034248e-02, -1.589346118886846e-02, -4.017806145422704e-03, -3.659689414455050e-03, -5.689830660702205e-03, -5.802384324210735e-03, -7.838949422941378e-02, -7.936109929881406e-02, -5.813164134147972e-03, -7.382372678647963e-03, -5.813164134148019e-03, -7.382372678647909e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_airy_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_airy", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-3.037902914598182e-09, 0.000000000000000e+00, -3.037901980673401e-09, -3.037655796947116e-09, 0.000000000000000e+00, -3.037722578094236e-09, -3.037135467656410e-09, 0.000000000000000e+00, -3.036901319321188e-09, -3.039919260739460e-09, 0.000000000000000e+00, -3.040451709038730e-09, -3.037741882488170e-09, 0.000000000000000e+00, -3.039231261394091e-09, -3.037741882488170e-09, 0.000000000000000e+00, -3.039231261394091e-09, -6.863645058823025e-06, 0.000000000000000e+00, -6.855361631503647e-06, -6.862476344982600e-06, 0.000000000000000e+00, -6.853691153140759e-06, -6.828951047434397e-06, 0.000000000000000e+00, -6.819951659633780e-06, -6.882429390602037e-06, 0.000000000000000e+00, -6.872587879998587e-06, -6.871646684029085e-06, 0.000000000000000e+00, -6.842647963605507e-06, -6.871646684029085e-06, 0.000000000000000e+00, -6.842647963605507e-06, -6.417985473435589e-03, 0.000000000000000e+00, -6.290548584293372e-03, -6.462151042335369e-03, 0.000000000000000e+00, -6.311373859029574e-03, -6.885797997126123e-03, 0.000000000000000e+00, -6.957261018774108e-03, -6.729278618486986e-03, 0.000000000000000e+00, -6.708184799411297e-03, -6.016061224090939e-03, 0.000000000000000e+00, -6.866734557917627e-03, -6.016061224090939e-03, 0.000000000000000e+00, -6.866734557917627e-03, -1.023233146410089e+00, 0.000000000000000e+00, -9.102313944104967e-01, -9.948496500144475e-01, 0.000000000000000e+00, -8.700911452114017e-01, -3.679122679661908e-03, 0.000000000000000e+00, -3.063585715399368e-03, -2.181956216957456e+00, 0.000000000000000e+00, -2.084546183264254e+00, -8.689964823769257e-01, 0.000000000000000e+00, -5.257822655599203e+00, -8.689964823769218e-01, 0.000000000000000e+00, -5.257822655599401e+00, -1.461598242726806e+04, 0.000000000000000e+00, -1.221534072722993e+04, -1.293998042291715e+04, 0.000000000000000e+00, -1.057713288457461e+04, -7.721309714571467e+01, 0.000000000000000e+00, -6.638639239061028e+01, -6.267401150358687e+04, 0.000000000000000e+00, -6.531712942401501e+04, -2.036394616463107e+04, 0.000000000000000e+00, -1.352635086599314e+05, -2.036394616463108e+04, 0.000000000000000e+00, -1.352635086599315e+05, -3.116633510320015e-07, 0.000000000000000e+00, -3.125160518486956e-07, -2.977910129930364e-07, 0.000000000000000e+00, -2.990971748777653e-07, -3.109520828493371e-07, 0.000000000000000e+00, -3.120974261355767e-07, -2.990483803778123e-07, 0.000000000000000e+00, -2.999066378284174e-07, -3.045131339296314e-07, 0.000000000000000e+00, -3.057697028692001e-07, -3.045131339296314e-07, 0.000000000000000e+00, -3.057697028692001e-07, -8.416572283346235e-05, 0.000000000000000e+00, -8.418138081276446e-05, -8.220773048487445e-05, 0.000000000000000e+00, -8.228619607623633e-05, -8.485663608561261e-05, 0.000000000000000e+00, -8.469954446019188e-05, -8.319186843170170e-05, 0.000000000000000e+00, -8.299393492566737e-05, -8.242521546573199e-05, 0.000000000000000e+00, -8.310580715913861e-05, -8.242521546573199e-05, 0.000000000000000e+00, -8.310580715913861e-05, -7.088853131388296e-03, 0.000000000000000e+00, -7.136642870119002e-03, 3.163107354393427e-03, 0.000000000000000e+00, 3.263257197234523e-03, -1.277875376705734e-02, 0.000000000000000e+00, -1.008935586327536e-02, 3.331143433953491e-03, 0.000000000000000e+00, 2.698528131289253e-03, -4.878364140470407e-03, 0.000000000000000e+00, -6.481078494603438e-03, -4.878364140470407e-03, 0.000000000000000e+00, -6.481078494603439e-03, -5.312289590875574e+00, 0.000000000000000e+00, -5.232592105643420e+00, -8.092939249254809e-01, 0.000000000000000e+00, -7.964602837159060e-01, -7.057036990336614e+00, 0.000000000000000e+00, -6.166516777174434e+00, 4.146121664618060e-05, 0.000000000000000e+00, 4.160105703817144e-05, -4.045706444803009e+00, 0.000000000000000e+00, -3.811404898913757e+00, -4.045706444803009e+00, 0.000000000000000e+00, -3.811404898913757e+00, -1.585274611048909e+05, 0.000000000000000e+00, -1.362616476708832e+05, -7.383672877681081e+04, 0.000000000000000e+00, -6.915651140006192e+04, -2.765073924238360e+05, 0.000000000000000e+00, -2.409503724778456e+05, -2.044672672002924e+01, 0.000000000000000e+00, -1.986015341792186e+01, -2.148377700279715e+05, 0.000000000000000e+00, -8.501147297185592e+04, -2.148377700279710e+05, 0.000000000000000e+00, -8.501147297185581e+04, 6.807332939777345e-03, 0.000000000000000e+00, 6.709950706237357e-03, 4.722263298806183e-03, 0.000000000000000e+00, 4.741649316160638e-03, 5.702209011045108e-03, 0.000000000000000e+00, 5.686982331130692e-03, 6.366862598540569e-03, 0.000000000000000e+00, 6.308314317878465e-03, 6.058011854511406e-03, 0.000000000000000e+00, 6.020147185192883e-03, 6.058011854511406e-03, 0.000000000000000e+00, 6.020147185192883e-03, 7.201058259617349e-03, 0.000000000000000e+00, 7.096813868330895e-03, -2.203222000452027e-02, 0.000000000000000e+00, -2.162069155497373e-02, -1.524955518575327e-02, 0.000000000000000e+00, -1.475292906755555e-02, -4.473072502641677e-03, 0.000000000000000e+00, -4.277298340747701e-03, -1.023449365316897e-02, 0.000000000000000e+00, -9.959475986922560e-03, -1.023449365316897e-02, 0.000000000000000e+00, -9.959475986922560e-03, 2.301059537187235e-03, 0.000000000000000e+00, 2.425096065528330e-03, -3.691873916711032e-01, 0.000000000000000e+00, -3.624713991742299e-01, -2.070774217095261e-01, 0.000000000000000e+00, -2.013686412356568e-01, -8.909192565572789e-02, 0.000000000000000e+00, -8.721183317643105e-02, -1.371416965743583e-01, 0.000000000000000e+00, -1.377312124203861e-01, -1.371416965743560e-01, 0.000000000000000e+00, -1.377312124203856e-01, -3.091490631652425e-02, 0.000000000000000e+00, -3.001539183326328e-02, -7.930978544024130e+01, 0.000000000000000e+00, -7.782603375846810e+01, -3.466474653698064e+01, 0.000000000000000e+00, -3.192392679892126e+01, -1.011087457058841e-01, 0.000000000000000e+00, -9.371295201743395e-02, -1.195727451338411e+01, 0.000000000000000e+00, -1.120835141487303e+01, -1.195727451338449e+01, 0.000000000000000e+00, -1.120835141487304e+01, -4.841596281577134e+03, 0.000000000000000e+00, -4.389719286785055e+03, -4.738376919955197e+06, 0.000000000000000e+00, -5.506728356990376e+06, -5.278436294917654e+05, 0.000000000000000e+00, -4.489454025197782e+05, -1.384493495787712e+01, 0.000000000000000e+00, -1.320365391531276e+01, -3.065240434160893e+05, 0.000000000000000e+00, -1.106418439181982e+05, -3.065240434160900e+05, 0.000000000000000e+00, -1.106418439181985e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
