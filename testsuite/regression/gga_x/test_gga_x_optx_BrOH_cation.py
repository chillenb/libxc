
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_optx_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_optx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.110131742007251e+01, -2.110136236139497e+01, -2.110160263512294e+01, -2.110093318704239e+01, -2.110127820277788e+01, -2.110127820277788e+01, -3.468440048667416e+00, -3.468420687743820e+00, -3.468059339165539e+00, -3.469347914367362e+00, -3.468500780613862e+00, -3.468500780613862e+00, -6.893461856611321e-01, -6.892965116370717e-01, -6.917877964661470e-01, -6.963216533581187e-01, -7.008121055730966e-01, -7.008121055730966e-01, -2.300860648474115e-01, -2.293777261895207e-01, -7.975329125270429e-01, -2.154843521743120e-01, -2.297271576460421e-01, -2.297271576460420e-01, -1.450065718860589e-02, -1.526778979536716e-02, -8.160644362780621e-02, -8.367469966866117e-03, -1.167414343165661e-02, -1.167414343165661e-02, -5.115746834616750e+00, -5.116165596093288e+00, -5.115772042788594e+00, -5.116141570028276e+00, -5.115955346280654e+00, -5.115955346280654e+00, -2.091847297645869e+00, -2.100754908241456e+00, -2.095443617308896e+00, -2.103112169439320e+00, -2.095302143539620e+00, -2.095302143539620e+00, -5.822418428714851e-01, -6.228889579180502e-01, -5.414672336109497e-01, -5.524701724852226e-01, -5.905599739992518e-01, -5.905599739992519e-01, -1.815468702575731e-01, -2.630411723088216e-01, -1.714959465364388e-01, -1.875658928136068e+00, -1.920903144890441e-01, -1.920903144890441e-01, -6.460718109210077e-03, -8.179596094017492e-03, -6.262841810938096e-03, -1.246484113331105e-01, -7.866629393713569e-03, -7.866629393713570e-03, -5.754308359694549e-01, -5.727838510744054e-01, -5.736485529875325e-01, -5.744138322542762e-01, -5.740244181327465e-01, -5.740244181327465e-01, -5.597555663655608e-01, -5.048098251821644e-01, -5.155251919699401e-01, -5.300752345638138e-01, -5.220312430360622e-01, -5.220312430360622e-01, -6.532064813745914e-01, -2.974414795010343e-01, -3.189765270837903e-01, -3.613486387202068e-01, -3.347718269108850e-01, -3.347718269108850e-01, -4.657680756105635e-01, -7.832297631160333e-02, -1.042570593331924e-01, -3.393208319447535e-01, -1.484722807580317e-01, -1.484722807580316e-01, -2.042062228969976e-02, -2.186958435104492e-03, -4.598579230285024e-03, -1.420031774065739e-01, -7.224584720561551e-03, -7.224584720561544e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_optx_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_optx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.688557835423395e+01, -2.688554793008565e+01, -2.688571782107821e+01, -2.688564921739124e+01, -2.688611078810533e+01, -2.688622720618658e+01, -2.688453705835434e+01, -2.688422090768501e+01, -2.688566422233373e+01, -2.688498377016028e+01, -2.688566422233373e+01, -2.688498377016028e+01, -4.273644194866113e+00, -4.274101760184721e+00, -4.273722184238218e+00, -4.274204229133884e+00, -4.275859028733913e+00, -4.276443243593930e+00, -4.272840774552655e+00, -4.273469659629436e+00, -4.272726110313112e+00, -4.275440933081933e+00, -4.272726110313112e+00, -4.275440933081933e+00, -7.635697268470072e-01, -7.741804684366071e-01, -7.597599389633258e-01, -7.728040079521499e-01, -7.085229723108147e-01, -6.899527697768263e-01, -7.044371739917158e-01, -7.105306063571143e-01, -7.911701861777561e-01, -6.096899821430525e-01, -7.911701861777561e-01, -6.096899821430525e-01, -1.402417098922430e-01, -1.458433929462729e-01, -1.418870813817833e-01, -1.493414791605449e-01, -8.817578796616349e-01, -9.441017805396492e-01, -1.389718000673271e-01, -1.393856940718725e-01, -1.463373270282409e-01, -1.508229860419965e-01, -1.463373270282406e-01, -1.508229860419961e-01, -1.865409526441011e-02, -1.981370842739983e-02, -1.953866024436283e-02, -2.091901954170899e-02, -9.957321335551703e-02, -1.040066139228754e-01, -1.123891120229558e-02, -1.105224960401219e-02, -1.665303985005356e-02, -9.489261758188918e-03, -1.665303985005354e-02, -9.489261758188938e-03, -6.647965973821894e+00, -6.646299072740112e+00, -6.651035015506409e+00, -6.649264877660634e+00, -6.648135353740636e+00, -6.646400138822762e+00, -6.650769030430220e+00, -6.649094627262438e+00, -6.649540873130544e+00, -6.647790522017320e+00, -6.649540873130544e+00, -6.647790522017320e+00, -2.065940130216003e+00, -2.065802031246858e+00, -2.093665529589337e+00, -2.092799808906554e+00, -2.020184568926814e+00, -2.033441203673084e+00, -2.044266998576518e+00, -2.057564951565860e+00, -2.115110034191780e+00, -2.084736393986368e+00, -2.115110034191780e+00, -2.084736393986368e+00, -7.310674141784739e-01, -7.292867842562564e-01, -8.255702211367870e-01, -8.261384171527713e-01, -6.531724592188709e-01, -6.827937513370430e-01, -7.168001881456274e-01, -7.403213699470712e-01, -7.673852635727695e-01, -7.270543258814217e-01, -7.673852635727695e-01, -7.270543258814218e-01, -1.648263788339079e-01, -1.637036357618284e-01, -1.582562800227513e-01, -1.584109962779266e-01, -1.611474267742825e-01, -1.617949156620261e-01, -2.488870895104730e+00, -2.487781338018207e+00, -1.517285094761695e-01, -1.350179182232462e-01, -1.517285094761695e-01, -1.350179182232462e-01, -8.434675020056934e-03, -8.765637393200876e-03, -1.081358158699697e-02, -1.097737685251822e-02, -8.082812689369586e-03, -8.557439189430877e-03, -1.375205649243128e-01, -1.386164314819663e-01, -8.258912022633177e-03, -1.133035035825178e-02, -8.258912022633179e-03, -1.133035035825177e-02, -7.652079988380506e-01, -7.681894170167344e-01, -7.582653919559451e-01, -7.613354131178409e-01, -7.609466139844157e-01, -7.639963800711649e-01, -7.629828485556148e-01, -7.659770297457262e-01, -7.619878573307758e-01, -7.650080334579652e-01, -7.619878573307758e-01, -7.650080334579652e-01, -7.449843873553074e-01, -7.474486487785329e-01, -5.655972480029759e-01, -5.693955497757893e-01, -6.279393018884395e-01, -6.319053801735334e-01, -6.835095153801666e-01, -6.861620183985040e-01, -6.568905413453446e-01, -6.596956518175369e-01, -6.568905413453446e-01, -6.596956518175369e-01, -8.642206056879496e-01, -8.659687241863741e-01, -1.807530990795405e-01, -1.816478869248593e-01, -2.265515179800187e-01, -2.307543583766386e-01, -3.872317928365527e-01, -3.902920041550287e-01, -2.983535540269383e-01, -2.989881172470507e-01, -2.983535540269382e-01, -2.989881172470507e-01, -5.169381691918179e-01, -5.229076969924288e-01, -9.842563304484549e-02, -9.897863957476788e-02, -1.236710995035226e-01, -1.262401747760328e-01, -3.932690292116002e-01, -4.016015556117729e-01, -1.460312727852728e-01, -1.404396784586090e-01, -1.460312727852727e-01, -1.404396784586088e-01, -2.660779192196650e-02, -2.755765632977052e-02, -2.912308702231948e-03, -2.918801147868097e-03, -5.923651216524156e-03, -6.299710696679488e-03, -1.418417944994897e-01, -1.427738440018274e-01, -7.820248156546153e-03, -1.038844501659119e-02, -7.820248156546148e-03, -1.038844501659119e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_optx_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_optx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-6.327196881504859e-09, 0.000000000000000e+00, -6.327216901670585e-09, -6.326957543477525e-09, 0.000000000000000e+00, -6.327043121187357e-09, -6.326386475169220e-09, 0.000000000000000e+00, -6.326170342326832e-09, -6.329084509394732e-09, 0.000000000000000e+00, -6.329610848031834e-09, -6.327044308391405e-09, 0.000000000000000e+00, -6.328378602521034e-09, -6.327044308391405e-09, 0.000000000000000e+00, -6.328378602521034e-09, -1.123001332230850e-05, 0.000000000000000e+00, -1.122141114587570e-05, -1.122871933111837e-05, 0.000000000000000e+00, -1.121961655368387e-05, -1.119225186957369e-05, 0.000000000000000e+00, -1.118241728710297e-05, -1.124815568761612e-05, 0.000000000000000e+00, -1.123741009092775e-05, -1.124116102761819e-05, 0.000000000000000e+00, -1.120443142266715e-05, -1.124116102761819e-05, 0.000000000000000e+00, -1.120443142266715e-05, -1.092263285806040e-02, 0.000000000000000e+00, -1.050406914798325e-02, -1.107373178040617e-02, 0.000000000000000e+00, -1.056113725228986e-02, -1.304711820323540e-02, 0.000000000000000e+00, -1.370510213277864e-02, -1.299619136227248e-02, 0.000000000000000e+00, -1.278974392262110e-02, -9.802507291205520e-03, 0.000000000000000e+00, -1.588091185003897e-02, -9.802507291205520e-03, 0.000000000000000e+00, -1.588091185003897e-02, -2.554120715906108e+00, 0.000000000000000e+00, -2.310127121577941e+00, -2.509884042788510e+00, 0.000000000000000e+00, -2.223397243160513e+00, -6.197391742681638e-03, 0.000000000000000e+00, -4.885827231988437e-03, -4.091508423541013e+00, 0.000000000000000e+00, -3.948914413084890e+00, -2.180407309341131e+00, 0.000000000000000e+00, -6.356711212195945e+00, -2.180407309341131e+00, 0.000000000000000e+00, -6.356711212195949e+00, -1.404165860619477e+01, 0.000000000000000e+00, -1.390036208676879e+01, -1.479435441866792e+01, 0.000000000000000e+00, -1.471790582338804e+01, -8.128229092200895e+00, 0.000000000000000e+00, -8.162661113176220e+00, -1.286423538614065e+01, 0.000000000000000e+00, -1.251508563241360e+01, -1.401909250532008e+01, 0.000000000000000e+00, -3.557489614451578e+01, -1.401909250532093e+01, 0.000000000000000e+00, -3.557489614446914e+01, -1.405732838101553e-06, 0.000000000000000e+00, -1.407450422311989e-06, -1.395582013275275e-06, 0.000000000000000e+00, -1.397630902866631e-06, -1.405203440971386e-06, 0.000000000000000e+00, -1.407137731139775e-06, -1.396492992816313e-06, 0.000000000000000e+00, -1.398216795113239e-06, -1.400505686399381e-06, 0.000000000000000e+00, -1.402513114072673e-06, -1.400505686399381e-06, 0.000000000000000e+00, -1.402513114072673e-06, -1.675877148464123e-04, 0.000000000000000e+00, -1.676240844618384e-04, -1.618209032382821e-04, 0.000000000000000e+00, -1.620196004882100e-04, -1.741049235184057e-04, 0.000000000000000e+00, -1.722701571276481e-04, -1.690020703269709e-04, 0.000000000000000e+00, -1.671459101477863e-04, -1.594761549508822e-04, 0.000000000000000e+00, -1.639857854167021e-04, -1.594761549508822e-04, 0.000000000000000e+00, -1.639857854167021e-04, -1.250042178635006e-02, 0.000000000000000e+00, -1.260927826196624e-02, -3.152704207587536e-03, 0.000000000000000e+00, -3.064025409268223e-03, -2.072521831393532e-02, 0.000000000000000e+00, -1.692936596573389e-02, -7.061649290302984e-03, 0.000000000000000e+00, -6.351475708372434e-03, -9.710897369871839e-03, 0.000000000000000e+00, -1.230709949363695e-02, -9.710897369871839e-03, 0.000000000000000e+00, -1.230709949363695e-02, -5.205946565525310e+00, 0.000000000000000e+00, -5.275657123077230e+00, -1.757114984710289e+00, 0.000000000000000e+00, -1.736396331252160e+00, -5.950651931618677e+00, 0.000000000000000e+00, -5.727410362801227e+00, -3.580919292644321e-05, 0.000000000000000e+00, -3.582085436961795e-05, -5.445021991925866e+00, 0.000000000000000e+00, -6.223550296458319e+00, -5.445021991925866e+00, 0.000000000000000e+00, -6.223550296458319e+00, -1.805964524157732e+01, 0.000000000000000e+00, -1.563125029463753e+01, -1.555023886810791e+01, 0.000000000000000e+00, -1.435718990682230e+01, -8.857253305813552e+01, 0.000000000000000e+00, -9.852853451040799e+01, -9.112248045311786e+00, 0.000000000000000e+00, -8.782301764629173e+00, -4.404717660711999e+01, 0.000000000000000e+00, -4.326153951095595e+01, -4.404717660709944e+01, 0.000000000000000e+00, -4.326153951097555e+01, -1.575816100124746e-03, 0.000000000000000e+00, -1.507606210612293e-03, -4.224639279590613e-03, 0.000000000000000e+00, -4.084946693634878e-03, -3.311894564645594e-03, 0.000000000000000e+00, -3.190788519196357e-03, -2.535199271635013e-03, 0.000000000000000e+00, -2.446304734956734e-03, -2.924836047238655e-03, 0.000000000000000e+00, -2.820090891855492e-03, -2.924836047238655e-03, 0.000000000000000e+00, -2.820090891855492e-03, -8.369699542810282e-04, 0.000000000000000e+00, -8.187797847861399e-04, -3.683541383731556e-02, 0.000000000000000e+00, -3.598814519284263e-02, -2.448188415944140e-02, 0.000000000000000e+00, -2.378256321214785e-02, -1.353609679315872e-02, 0.000000000000000e+00, -1.325582765185430e-02, -1.877868969568071e-02, 0.000000000000000e+00, -1.839879329608914e-02, -1.877868969568071e-02, 0.000000000000000e+00, -1.839879329608914e-02, -2.861743548730993e-03, 0.000000000000000e+00, -2.739040618019063e-03, -9.154221080554433e-01, 0.000000000000000e+00, -9.013998893088861e-01, -5.265906776565623e-01, 0.000000000000000e+00, -5.098838255045227e-01, -1.582641157678774e-01, 0.000000000000000e+00, -1.541674617946973e-01, -3.059752672860838e-01, 0.000000000000000e+00, -3.061743213710388e-01, -3.059752672860841e-01, 0.000000000000000e+00, -3.061743213710390e-01, -5.228394385481380e-02, 0.000000000000000e+00, -5.031282078865862e-02, -7.441805339661561e+00, 0.000000000000000e+00, -7.449447060049095e+00, -7.264924941151931e+00, 0.000000000000000e+00, -7.409022114117368e+00, -1.620170831427903e-01, 0.000000000000000e+00, -1.492624639229268e-01, -8.837061488256857e+00, 0.000000000000000e+00, -1.016367958321604e+01, -8.837061488256861e+00, 0.000000000000000e+00, -1.016367958321607e+01, -1.112472866741911e+01, 0.000000000000000e+00, -1.135622392466460e+01, -5.556943181592415e+01, 0.000000000000000e+00, -9.843227403763611e+01, -3.429533359214174e+01, 0.000000000000000e+00, -3.650936907870867e+01, -9.884569686745234e+00, 0.000000000000000e+00, -9.661049052904602e+00, -9.080930710376791e+01, 0.000000000000000e+00, -4.491234854377456e+01, -9.080930710383655e+01, 0.000000000000000e+00, -4.491234854377251e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
