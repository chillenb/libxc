
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_hjs_pbe_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_hjs_pbe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.088402320255389e+01, -2.088405061572167e+01, -2.088424025232135e+01, -2.088383100701585e+01, -2.088403580857278e+01, -2.088403580857278e+01, -3.411559477790266e+00, -3.411521483297066e+00, -3.410728373594931e+00, -3.412767144654189e+00, -3.411597919247076e+00, -3.411597919247076e+00, -6.357471698611715e-01, -6.357671046566318e-01, -6.380634157761587e-01, -6.427984952497929e-01, -6.428395341503418e-01, -6.428395341503418e-01, -1.555804707794206e-01, -1.566762079150555e-01, -7.437488591932374e-01, -1.228799431851244e-01, -1.510423805070914e-01, -1.510423805070915e-01, -2.980213930266921e-05, -3.514324858535578e-05, -1.267920667870433e-02, -5.476175508311222e-06, -1.633512780081718e-05, -1.633512780081718e-05, -4.972945154978683e+00, -4.972326996910684e+00, -4.972927472995867e+00, -4.972381580563537e+00, -4.972625837256159e+00, -4.972625837256159e+00, -2.052459700333675e+00, -2.062265526890118e+00, -2.053895567840151e+00, -2.062556509065085e+00, -2.057194940731475e+00, -2.057194940731475e+00, -5.194633091388097e-01, -5.422730127416411e-01, -4.807224092387347e-01, -4.771249036722973e-01, -5.259360569862416e-01, -5.259360569862417e-01, -8.119306804612778e-02, -1.710481617745769e-01, -7.270195043221886e-02, -1.751835723533361e+00, -9.672525735566795e-02, -9.672525735566795e-02, -2.512166133365427e-06, -5.112893030367864e-06, -2.293050584971549e-06, -3.737303818981125e-02, -4.779502411084798e-06, -4.779502411154626e-06, -4.908794788559787e-01, -4.935784245096479e-01, -4.926283076465359e-01, -4.918375459274559e-01, -4.922321582679390e-01, -4.922321582679390e-01, -4.743417803069098e-01, -4.491660900505555e-01, -4.558672853122437e-01, -4.623551815202108e-01, -4.588176181050294e-01, -4.588176181050294e-01, -5.724164302728858e-01, -2.152134943788285e-01, -2.497672895096071e-01, -3.048793442363682e-01, -2.749415795237820e-01, -2.749415795237820e-01, -4.098977158668911e-01, -1.122250819593709e-02, -2.422261430661911e-02, -2.816607511679566e-01, -5.601293085328204e-02, -5.601293085328203e-02, -9.121993325023409e-05, -9.701892608180108e-08, -9.055839536586928e-07, -5.064711196511483e-02, -3.671774874583669e-06, -3.671774874525397e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_hjs_pbe_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_hjs_pbe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.508065196769199e+01, -2.508062232209697e+01, -2.508076743047967e+01, -2.508070618192781e+01, -2.508110706848149e+01, -2.508120118862799e+01, -2.507980388663981e+01, -2.507953993104505e+01, -2.508072233441852e+01, -2.508018209471449e+01, -2.508072233441852e+01, -2.508018209471449e+01, -3.975163424441221e+00, -3.975346348163272e+00, -3.975205844435185e+00, -3.975396119582110e+00, -3.976309807311695e+00, -3.976623091986785e+00, -3.975048879362301e+00, -3.975367080164934e+00, -3.974394591043233e+00, -3.976419894447750e+00, -3.974394591043233e+00, -3.976419894447750e+00, -6.963029673268981e-01, -7.012591367601995e-01, -6.944827340703233e-01, -7.005289684882092e-01, -6.717491535216030e-01, -6.648422623238314e-01, -6.735133794379645e-01, -6.757537707993446e-01, -7.102206628869605e-01, -6.451388072947378e-01, -7.102206628869605e-01, -6.451388072947378e-01, -1.417409477982429e-01, -1.462706849948894e-01, -1.423451258049771e-01, -1.478420631773702e-01, -8.099186598494945e-01, -8.488059573400555e-01, -1.211827053533129e-01, -1.227739323464286e-01, -1.495547523068056e-01, -9.627615995346750e-02, -1.495547523068054e-01, -9.627615995346726e-02, -5.467693343366728e-05, -6.652603820691953e-05, -6.357660199025546e-05, -7.959930934809698e-05, -2.141201987960917e-02, -2.422541748863312e-02, -1.126843904783680e-05, -1.070775433281449e-05, -3.804196946090671e-05, -6.753860774650808e-06, -3.804196946089122e-05, -6.753860774650125e-06, -6.138578960120737e+00, -6.137026547370152e+00, -6.141392461668167e+00, -6.139744635350115e+00, -6.138734094551926e+00, -6.137119117945010e+00, -6.141148244068130e+00, -6.139588377259661e+00, -6.140020849847027e+00, -6.138391784002494e+00, -6.140020849847027e+00, -6.138391784002494e+00, -2.123625824071904e+00, -2.123511912438796e+00, -2.141081018664901e+00, -2.140447785518102e+00, -2.107198227684731e+00, -2.111713219750941e+00, -2.121974700393544e+00, -2.126754908999351e+00, -2.146373932247500e+00, -2.134149094813834e+00, -2.146373932247500e+00, -2.134149094813834e+00, -6.265373383986046e-01, -6.248151618889320e-01, -7.142770389602652e-01, -7.150153894871899e-01, -5.579515347852673e-01, -5.832979034557321e-01, -6.109592291024090e-01, -6.327021799687047e-01, -6.581477866244417e-01, -6.211949543283908e-01, -6.581477866244417e-01, -6.211949543283910e-01, -9.756003825936661e-02, -9.798096242985239e-02, -1.624939744592271e-01, -1.631194763075192e-01, -8.770742830214558e-02, -9.228622868741486e-02, -2.273460660321102e+00, -2.272474254444690e+00, -1.047761072377987e-01, -1.028333551289455e-01, -1.047761072377987e-01, -1.028333551289455e-01, -4.724683131226981e-06, -5.306028601503212e-06, -1.002360307132561e-05, -1.049109290533870e-05, -4.165800200139013e-06, -4.951706088376328e-06, -5.416273208671766e-02, -5.485948092788319e-02, -4.439497216653513e-06, -1.158555035334234e-05, -4.439497216653852e-06, -1.158555035346010e-05, -6.634197376385903e-01, -6.663364180647743e-01, -6.517202414222306e-01, -6.547162300296638e-01, -6.557971096799818e-01, -6.587920372401576e-01, -6.592262610125594e-01, -6.621476489530352e-01, -6.575095159898884e-01, -6.604664925639026e-01, -6.575095159898884e-01, -6.604664925639026e-01, -6.462942850211374e-01, -6.486409231070711e-01, -4.968599920769120e-01, -4.996358076167830e-01, -5.354717471653969e-01, -5.386332768445364e-01, -5.783824209342282e-01, -5.808199961062982e-01, -5.563566495578164e-01, -5.588506173802150e-01, -5.563566495578164e-01, -5.588506173802150e-01, -7.496703950293000e-01, -7.516123393248244e-01, -1.997690270291768e-01, -2.006905030504322e-01, -2.350534285662932e-01, -2.373152724047412e-01, -3.310492707180890e-01, -3.334008508237056e-01, -2.765943466256086e-01, -2.764949648192124e-01, -2.765943466256083e-01, -2.764949648192122e-01, -4.514019964362987e-01, -4.555554827103666e-01, -2.056523437281273e-02, -2.089823405363718e-02, -3.818508732539372e-02, -4.043500936938380e-02, -3.218050899834334e-01, -3.283339499366674e-01, -7.063261402144284e-02, -7.252191773953798e-02, -7.063261402144283e-02, -7.252191773953788e-02, -1.815850747674102e-04, -2.059783219644240e-04, -1.933794301095168e-07, -1.947085751662204e-07, -1.630826889600961e-06, -1.962615878085338e-06, -6.629096550263053e-02, -6.769532851114342e-02, -3.770527050991022e-06, -8.894659914291399e-06, -3.770527050751734e-06, -8.894659914262385e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_hjs_pbe_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_hjs_pbe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.410440974716947e-08, 0.000000000000000e+00, -1.410448791849392e-08, -1.410429669323022e-08, 0.000000000000000e+00, -1.410440574745926e-08, -1.410380648753174e-08, 0.000000000000000e+00, -1.410373930373037e-08, -1.410508651368841e-08, 0.000000000000000e+00, -1.410536977916394e-08, -1.410434880996504e-08, 0.000000000000000e+00, -1.410462345973548e-08, -1.410434880996504e-08, 0.000000000000000e+00, -1.410462345973548e-08, -1.901500295145590e-05, 0.000000000000000e+00, -1.902078470619354e-05, -1.901535923092144e-05, 0.000000000000000e+00, -1.902159012256085e-05, -1.902853051176999e-05, 0.000000000000000e+00, -1.903153939162890e-05, -1.899342554551869e-05, 0.000000000000000e+00, -1.899757603286905e-05, -1.902585440262162e-05, 0.000000000000000e+00, -1.900766178874053e-05, -1.902585440262162e-05, 0.000000000000000e+00, -1.900766178874053e-05, -1.207342825947489e-02, 0.000000000000000e+00, -1.207006799364678e-02, -1.208348114278195e-02, 0.000000000000000e+00, -1.208008055166338e-02, -1.218773417887120e-02, 0.000000000000000e+00, -1.214943977135105e-02, -1.183006735085267e-02, 0.000000000000000e+00, -1.184690154320871e-02, -1.197519312728850e-02, 0.000000000000000e+00, -1.133669605595635e-02, -1.197519312728850e-02, 0.000000000000000e+00, -1.133669605595635e-02, -1.255827213617565e+00, 0.000000000000000e+00, -1.181845186231372e+00, -1.261525946911572e+00, 0.000000000000000e+00, -1.171848473269641e+00, -7.001891334817773e-03, 0.000000000000000e+00, -6.502912138107032e-03, -1.656421029146381e+00, 0.000000000000000e+00, -1.606006291597606e+00, -1.085221527095857e+00, 0.000000000000000e+00, -2.280471070454269e+00, -1.085221527095860e+00, 0.000000000000000e+00, -2.280471070454278e+00, -4.373619180296373e-03, 0.000000000000000e+00, -5.997458319436048e-03, -5.922949653175275e-03, 0.000000000000000e+00, -8.499044889317534e-03, -1.580877417643876e+00, 0.000000000000000e+00, -1.697709319399625e+00, -2.440295779681561e-04, 0.000000000000000e+00, -2.163111775428760e-04, -2.350107391262667e-03, 0.000000000000000e+00, -2.648814555852250e-04, -2.350107391265734e-03, 0.000000000000000e+00, -2.648814555888304e-04, -4.152083361029228e-06, 0.000000000000000e+00, -4.155919795810614e-06, -4.152521644661812e-06, 0.000000000000000e+00, -4.156345238915164e-06, -4.152075685721329e-06, 0.000000000000000e+00, -4.155911455530529e-06, -4.152452274813726e-06, 0.000000000000000e+00, -4.156298354092754e-06, -4.152333918198731e-06, 0.000000000000000e+00, -4.156138714539934e-06, -4.152333918198731e-06, 0.000000000000000e+00, -4.156138714539934e-06, -1.468396966390653e-04, 0.000000000000000e+00, -1.468655231899250e-04, -1.439698846851047e-04, 0.000000000000000e+00, -1.440941051678991e-04, -1.466214209192501e-04, 0.000000000000000e+00, -1.467604053436922e-04, -1.442033189395441e-04, 0.000000000000000e+00, -1.442613985124598e-04, -1.452076951457570e-04, 0.000000000000000e+00, -1.454246938092905e-04, -1.452076951457570e-04, 0.000000000000000e+00, -1.454246938092905e-04, -2.351652494043375e-02, 0.000000000000000e+00, -2.377378450928351e-02, -1.858993684498553e-02, 0.000000000000000e+00, -1.856625900758928e-02, -3.362312434029582e-02, 0.000000000000000e+00, -2.958756017205537e-02, -3.169276550298063e-02, 0.000000000000000e+00, -2.787549101958578e-02, -2.050553332872328e-02, 0.000000000000000e+00, -2.494869153891231e-02, -2.050553332872329e-02, 0.000000000000000e+00, -2.494869153891232e-02, -1.825342458967857e+00, 0.000000000000000e+00, -1.855801879847885e+00, -7.696332471343272e-01, 0.000000000000000e+00, -7.623881386690710e-01, -2.032595240900695e+00, 0.000000000000000e+00, -1.985288983720634e+00, -2.372976045077571e-04, 0.000000000000000e+00, -2.377367632748869e-04, -2.002971370431383e+00, 0.000000000000000e+00, -2.383745601181143e+00, -2.002971370431383e+00, 0.000000000000000e+00, -2.383745601181143e+00, -7.028046100833201e-05, 0.000000000000000e+00, -7.509532642135353e-05, -2.382041546411042e-04, 0.000000000000000e+00, -2.390271945557058e-04, -2.740111712974389e-04, 0.000000000000000e+00, -4.166574907014371e-04, -2.717826237888482e+00, 0.000000000000000e+00, -2.627027409634188e+00, -1.530040812980896e-04, 0.000000000000000e+00, -8.617127489517215e-04, -1.530040812898967e-04, 0.000000000000000e+00, -8.617127489614736e-04, -2.547794091064242e-02, 0.000000000000000e+00, -2.509693866597947e-02, -2.597396771171169e-02, 0.000000000000000e+00, -2.558916882792937e-02, -2.583426592109955e-02, 0.000000000000000e+00, -2.544917752967145e-02, -2.569314205971469e-02, 0.000000000000000e+00, -2.531114246827091e-02, -2.576704381578308e-02, 0.000000000000000e+00, -2.538336056923338e-02, -2.576704381578308e-02, 0.000000000000000e+00, -2.538336056923338e-02, -2.823430220533272e-02, 0.000000000000000e+00, -2.787434209771699e-02, -4.191721001601318e-02, 0.000000000000000e+00, -4.135350215098165e-02, -3.836917844371732e-02, 0.000000000000000e+00, -3.782560451804725e-02, -3.474257813336354e-02, 0.000000000000000e+00, -3.429223047599595e-02, -3.665916130011474e-02, 0.000000000000000e+00, -3.616511975661267e-02, -3.665916130011474e-02, 0.000000000000000e+00, -3.616511975661267e-02, -1.545645925517684e-02, 0.000000000000000e+00, -1.537223060727124e-02, -4.505076394157501e-01, 0.000000000000000e+00, -4.457214148090484e-01, -3.096787946072208e-01, 0.000000000000000e+00, -3.045956045084681e-01, -1.592242749890125e-01, 0.000000000000000e+00, -1.563179049210046e-01, -2.269455738469530e-01, 0.000000000000000e+00, -2.281828442433789e-01, -2.269455738469536e-01, 0.000000000000000e+00, -2.281828442433792e-01, -5.794645179194807e-02, 0.000000000000000e+00, -5.678260810644321e-02, -1.412359888939487e+00, 0.000000000000000e+00, -1.426632576690591e+00, -1.872957383280063e+00, 0.000000000000000e+00, -1.957921409695553e+00, -2.024962342607408e-01, 0.000000000000000e+00, -1.926091672220820e-01, -2.887316494444709e+00, 0.000000000000000e+00, -3.394312443204795e+00, -2.887316494444712e+00, 0.000000000000000e+00, -3.394312443204827e+00, -2.241755181466572e-02, 0.000000000000000e+00, -2.730749657340651e-02, -9.892898455569177e-07, 0.000000000000000e+00, -1.770698053561423e-06, -2.005687586324319e-05, 0.000000000000000e+00, -2.952344097761931e-05, -3.182555532877500e+00, 0.000000000000000e+00, -3.129114780431357e+00, -2.346970141381613e-04, 0.000000000000000e+00, -5.523785007399869e-04, -2.346970141021821e-04, 0.000000000000000e+00, -5.523785007508948e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
