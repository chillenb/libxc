
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_gam_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_gam", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.093638143311966e+01, -2.093650110496177e+01, -2.093695188586945e+01, -2.093517311470455e+01, -2.093611669559409e+01, -2.093611669559409e+01, -3.467607009247671e+00, -3.467648167611817e+00, -3.468682534868209e+00, -3.467515295278738e+00, -3.467736598572667e+00, -3.467736598572667e+00, -7.227201057031473e-01, -7.223731161886885e-01, -7.162074187215349e-01, -7.213891677040212e-01, -7.247331567933846e-01, -7.247331567933846e-01, -1.877600887306621e-01, -1.891251268412865e-01, -8.369182068211554e-01, -1.798157896713586e-01, -1.926951649806697e-01, -1.926951649806695e-01, -2.803347042513160e-02, -2.948714287097878e-02, -1.400698187877049e-01, -1.628295877556971e-02, -2.263008253787223e-02, -2.263008253787223e-02, -5.316805967272749e+00, -5.320078979920750e+00, -5.316949236482582e+00, -5.319838685696872e+00, -5.318468367243852e+00, -5.318468367243852e+00, -2.024549813113083e+00, -2.035268631361940e+00, -2.020975009121882e+00, -2.030148989443039e+00, -2.032575036209917e+00, -2.032575036209917e+00, -6.194998281821452e-01, -6.626262675024442e-01, -5.756768623921358e-01, -5.884985276489696e-01, -6.287643723336525e-01, -6.287643723336525e-01, -2.057119698445580e-01, -2.155292438632055e-01, -2.030558670860988e-01, -2.014880003860398e+00, -1.785178496875596e-01, -1.785178496875596e-01, -1.259387763353049e-02, -1.591884725332309e-02, -1.219859016657725e-02, -1.801699373082136e-01, -1.530036594082125e-02, -1.530036594082125e-02, -6.106484917461316e-01, -6.093400556618767e-01, -6.098019844255852e-01, -6.101783900466022e-01, -6.099896983678889e-01, -6.099896983678889e-01, -5.934263920765200e-01, -5.299104155429906e-01, -5.476674685564589e-01, -5.654319818013475e-01, -5.562538622211162e-01, -5.562538622211162e-01, -6.950186622947456e-01, -2.499197630335747e-01, -2.886333212458038e-01, -3.740558764144605e-01, -3.275134043494228e-01, -3.275134043494229e-01, -4.879961387976075e-01, -1.361826963625824e-01, -1.681171626614136e-01, -3.583558498479806e-01, -1.801242605934913e-01, -1.801242605934911e-01, -3.922260955746319e-02, -4.278904847578049e-03, -8.977880505155609e-03, -1.806233487546383e-01, -1.406071690751984e-02, -1.406071690751982e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_gam_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_gam", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.340609129432855e+01, -3.340604821724981e+01, -3.340620879691512e+01, -3.340613357451269e+01, -3.340659583703695e+01, -3.340668505086374e+01, -3.340526843721037e+01, -3.340499322596850e+01, -3.340616081342056e+01, -3.340567775528733e+01, -3.340616081342056e+01, -3.340567775528733e+01, -5.015655972383360e+00, -5.016053605823509e+00, -5.015731643478749e+00, -5.016148739357407e+00, -5.017759712132047e+00, -5.018320781451456e+00, -5.015099349947358e+00, -5.015694354372608e+00, -5.014576969954044e+00, -5.017593262166764e+00, -5.014576969954044e+00, -5.017593262166764e+00, -8.640858121633974e-01, -8.715919542505197e-01, -8.613185803598148e-01, -8.705693426963864e-01, -8.226787298603223e-01, -8.079410105216849e-01, -8.206978964916863e-01, -8.254975239512375e-01, -8.839800332646368e-01, -7.327561702237033e-01, -8.839800332646368e-01, -7.327561702237033e-01, -1.646678224031884e-01, -1.913581651442649e-01, -1.789309742830078e-01, -2.077593820990033e-01, -9.874110178584325e-01, -1.040959243796340e+00, 8.791918864110470e-03, 5.614296266567608e-03, -1.765523254060385e-01, 3.816331386955400e-02, -1.765523254060386e-01, 3.816331386955427e-02, -3.576483591647402e-02, -3.791538258704845e-02, -3.739389831232954e-02, -3.993832568109778e-02, -1.404129183756007e-01, -1.411384755194750e-01, -2.178777933246059e-02, -2.143186048954664e-02, -3.203187731484627e-02, -1.840550339205940e-02, -3.203187731484632e-02, -1.840550339205935e-02, -7.834680863388945e+00, -7.832718401584509e+00, -7.836341424888659e+00, -7.834324093918828e+00, -7.834781290715697e+00, -7.832779335313020e+00, -7.836206503170165e+00, -7.834238285943174e+00, -7.835528818185352e+00, -7.833526921703452e+00, -7.835528818185352e+00, -7.833526921703452e+00, -2.343593510503613e+00, -2.343428737010925e+00, -2.376555982948430e+00, -2.375524694731841e+00, -2.289269417293370e+00, -2.305038604182370e+00, -2.317979439465024e+00, -2.333776004483847e+00, -2.401769977164820e+00, -2.365909855160332e+00, -2.401769977164820e+00, -2.365909855160332e+00, -7.903040452413432e-01, -7.882997089668352e-01, -8.737193762477655e-01, -8.743119468018129e-01, -7.155956605429636e-01, -7.426399452064351e-01, -7.574208231053032e-01, -7.827083378497151e-01, -8.243363835329378e-01, -7.827576213177050e-01, -8.243363835329377e-01, -7.827576213177050e-01, 1.289790187387782e-02, 1.712249129328770e-02, -6.202265075385119e-02, -6.474884479696118e-02, -1.015169457224374e-02, 4.886134087917531e-03, -2.755419428543247e+00, -2.754122175684995e+00, 4.551839453710196e-02, 3.629271337763834e-02, 4.551839453710196e-02, 3.629271337763834e-02, -1.640010638815246e-02, -1.703967482185297e-02, -2.096778354342659e-02, -2.128382843914547e-02, -1.568316041618880e-02, -1.658492137687459e-02, -8.850897480150056e-02, -9.009406288880985e-02, -1.604231455370620e-02, -2.189953561558142e-02, -1.604231455370625e-02, -2.189953561558149e-02, -8.094667905345595e-01, -8.127187476889581e-01, -8.011117460471874e-01, -8.043996732327990e-01, -8.039984527807433e-01, -8.072935712664037e-01, -8.064410684221299e-01, -8.096900714887462e-01, -8.052153302644555e-01, -8.084868493611173e-01, -8.052153302644555e-01, -8.084868493611173e-01, -7.885073830237445e-01, -7.911680062522378e-01, -6.533422242150739e-01, -6.562989205840682e-01, -6.911417143990716e-01, -6.943598285314715e-01, -7.288589063828580e-01, -7.314950892311566e-01, -7.096870201871687e-01, -7.123620061874428e-01, -7.096870201871687e-01, -7.123620061874428e-01, -9.157190179497782e-01, -9.175582277924530e-01, -1.932527710762993e-01, -1.977475642009361e-01, -3.231882924759757e-01, -3.311989050223865e-01, -4.781109205733526e-01, -4.804828178965784e-01, -4.140626501710665e-01, -4.144163825317531e-01, -4.140626501710666e-01, -4.144163825317532e-01, -6.050738147760698e-01, -6.093640851133327e-01, -1.422759782515807e-01, -1.424759247844827e-01, -1.395631739916829e-01, -1.357789550209953e-01, -4.606361548305008e-01, -4.666586356752546e-01, -2.723683351610911e-02, 2.591397554775801e-03, -2.723683351611004e-02, 2.591397554775823e-03, -5.036623225927973e-02, -5.205619295549210e-02, -5.694141226069566e-03, -5.705914760693863e-03, -1.154560516703660e-02, -1.227230219044506e-02, -3.109018850394634e-02, -2.787826342206092e-02, -1.518001443454629e-02, -2.010963459472479e-02, -1.518001443454625e-02, -2.010963459472475e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_gam_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_gam", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [2.810944087671862e-08, 0.000000000000000e+00, 2.810962144612091e-08, 2.810959691250463e-08, 0.000000000000000e+00, 2.810973450534161e-08, 2.810934803083332e-08, 0.000000000000000e+00, 2.810958730723975e-08, 2.810760483198900e-08, 0.000000000000000e+00, 2.810735933484673e-08, 2.810957171462263e-08, 0.000000000000000e+00, 2.810769980354323e-08, 2.810957171462263e-08, 0.000000000000000e+00, 2.810769980354323e-08, 1.420291622787907e-05, 0.000000000000000e+00, 1.422507393408556e-05, 1.420549561808615e-05, 0.000000000000000e+00, 1.422910835088355e-05, 1.428279322383967e-05, 0.000000000000000e+00, 1.430284489419551e-05, 1.414241264458263e-05, 0.000000000000000e+00, 1.416558022810732e-05, 1.420112795213580e-05, 0.000000000000000e+00, 1.423279911787254e-05, 1.420112795213580e-05, 0.000000000000000e+00, 1.423279911787254e-05, -6.784240527896557e-03, 0.000000000000000e+00, -6.546767681521628e-03, -6.872216996378403e-03, 0.000000000000000e+00, -6.578704021081943e-03, -8.140013990366833e-03, 0.000000000000000e+00, -8.634759344878250e-03, -8.172811255489930e-03, 0.000000000000000e+00, -8.017738439048828e-03, -6.164483873069708e-03, 0.000000000000000e+00, -1.102571994619656e-02, -6.164483873069708e-03, 0.000000000000000e+00, -1.102571994619656e-02, -1.397590448904513e+00, 0.000000000000000e+00, -9.938248333443815e-01, -1.185325405142620e+00, 0.000000000000000e+00, -7.823705140871789e-01, -3.949735027028666e-03, 0.000000000000000e+00, -3.090017021275296e-03, -7.098898375986901e+00, 0.000000000000000e+00, -6.709617436621069e+00, -1.156537259086917e+00, 0.000000000000000e+00, -2.035380012089513e+01, -1.156537259086914e+00, 0.000000000000000e+00, -2.035380012089518e+01, -1.034382841725817e+02, 0.000000000000000e+00, -1.023310201528463e+02, -1.089152774745590e+02, 0.000000000000000e+00, -1.082622525637882e+02, -5.375659837768405e+01, 0.000000000000000e+00, -5.330205217347045e+01, -9.511166029126403e+01, 0.000000000000000e+00, -9.253862907924601e+01, -1.033846988538602e+02, 0.000000000000000e+00, -2.630302272540704e+02, -1.033846988539059e+02, 0.000000000000000e+00, -2.630302272542806e+02, 6.208215817691836e-06, 0.000000000000000e+00, 6.212426097244813e-06, 6.227291187171331e-06, 0.000000000000000e+00, 6.230880390552271e-06, 6.209152386128453e-06, 0.000000000000000e+00, 6.212972012234627e-06, 6.225521822028601e-06, 0.000000000000000e+00, 6.229738195835238e-06, 6.218084930618568e-06, 0.000000000000000e+00, 6.221713588565962e-06, 6.218084930618568e-06, 0.000000000000000e+00, 6.221713588565962e-06, -6.582130096740159e-05, 0.000000000000000e+00, -6.584607127813127e-05, -6.088444057903648e-05, 0.000000000000000e+00, -6.103371309049762e-05, -7.418123153490797e-05, 0.000000000000000e+00, -7.177516587479534e-05, -6.975297392025071e-05, 0.000000000000000e+00, -6.737455924986599e-05, -5.686767899175098e-05, 0.000000000000000e+00, -6.242727265898266e-05, -5.686767899175098e-05, 0.000000000000000e+00, -6.242727265898266e-05, -9.391025542362853e-03, 0.000000000000000e+00, -9.487577499045940e-03, -6.237141695916538e-03, 0.000000000000000e+00, -6.220265765656440e-03, -1.360201528725954e-02, 0.000000000000000e+00, -1.191966607389197e-02, -1.227059391251807e-02, 0.000000000000000e+00, -1.052248935158550e-02, -7.920424396376292e-03, 0.000000000000000e+00, -9.793253898378974e-03, -7.920424396376351e-03, 0.000000000000000e+00, -9.793253898378977e-03, -1.974106892463399e+01, 0.000000000000000e+00, -1.961191312713073e+01, -2.173924620336028e+00, 0.000000000000000e+00, -2.121738379714996e+00, -2.476084491904089e+01, 0.000000000000000e+00, -2.249746205984007e+01, 1.736309436656516e-04, 0.000000000000000e+00, 1.738888355709664e-04, -1.564200034331495e+01, 0.000000000000000e+00, -1.379714221894293e+01, -1.564200034331495e+01, 0.000000000000000e+00, -1.379714221894293e+01, -1.336423747461143e+02, 0.000000000000000e+00, -1.156655195738922e+02, -1.149755514971408e+02, 0.000000000000000e+00, -1.061530537622922e+02, -6.548757084087716e+02, 0.000000000000000e+00, -7.281908839120345e+02, -4.865183010784633e+01, 0.000000000000000e+00, -4.698410018809453e+01, -3.258165756226911e+02, 0.000000000000000e+00, -3.194800438190995e+02, -3.258165756225962e+02, 0.000000000000000e+00, -3.194800438189893e+02, -9.656130088343297e-03, 0.000000000000000e+00, -9.465314516173983e-03, -9.691081334757493e-03, 0.000000000000000e+00, -9.511008665021111e-03, -9.671830558356350e-03, 0.000000000000000e+00, -9.488292032460635e-03, -9.661925131130128e-03, 0.000000000000000e+00, -9.475390843362491e-03, -9.666279459642171e-03, 0.000000000000000e+00, -9.481281604654380e-03, -9.666279459642171e-03, 0.000000000000000e+00, -9.481281604654380e-03, -1.126361065855417e-02, 0.000000000000000e+00, -1.107107144640008e-02, -1.837907013268185e-02, 0.000000000000000e+00, -1.810567969063345e-02, -1.535218103267328e-02, 0.000000000000000e+00, -1.512435930293379e-02, -1.343009896471588e-02, 0.000000000000000e+00, -1.324856096808496e-02, -1.431707791532409e-02, 0.000000000000000e+00, -1.412808780909088e-02, -1.431707791532409e-02, 0.000000000000000e+00, -1.412808780909088e-02, -4.851021023271566e-03, 0.000000000000000e+00, -4.798392274521775e-03, -6.548054829976853e-01, 0.000000000000000e+00, -6.311645347660672e-01, -1.925647864982353e-01, 0.000000000000000e+00, -1.759091132109531e-01, -3.703031867499949e-02, 0.000000000000000e+00, -3.681034720217397e-02, -6.223435628314191e-02, 0.000000000000000e+00, -6.127117079234756e-02, -6.223435628314204e-02, 0.000000000000000e+00, -6.127117079234754e-02, -2.314614795985915e-02, 0.000000000000000e+00, -2.264886963233580e-02, -4.962737701886024e+01, 0.000000000000000e+00, -4.960787504666701e+01, -4.476820050872077e+01, 0.000000000000000e+00, -4.501398676052911e+01, -3.919395835167542e-02, 0.000000000000000e+00, -3.968016871116217e-02, -3.935913974409474e+01, 0.000000000000000e+00, -4.050464547425835e+01, -3.935913974409455e+01, 0.000000000000000e+00, -4.050464547425835e+01, -8.159669456047358e+01, 0.000000000000000e+00, -8.323364918964504e+01, -4.118756025730464e+02, 0.000000000000000e+00, -7.295248369492630e+02, -2.539622757807860e+02, 0.000000000000000e+00, -2.703138331815090e+02, -4.474096689139218e+01, 0.000000000000000e+00, -4.323503219774162e+01, -6.715054632957247e+02, 0.000000000000000e+00, -3.318389908956162e+02, -6.715054632962209e+02, 0.000000000000000e+00, -3.318389908957796e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
