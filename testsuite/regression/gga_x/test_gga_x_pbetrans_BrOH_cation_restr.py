
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_pbetrans_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbetrans", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.097127352573080e+01, -2.097129951892965e+01, -2.097148525548772e+01, -2.097109708835503e+01, -2.097129049744222e+01, -2.097129049744222e+01, -3.481352010840315e+00, -3.481310968513859e+00, -3.480447828062463e+00, -3.482610070058236e+00, -3.481386723159988e+00, -3.481386723159988e+00, -7.014050554262193e-01, -7.015063718030800e-01, -7.064194264902220e-01, -7.110762712684634e-01, -7.091240348012178e-01, -7.091240348012178e-01, -2.249556701942228e-01, -2.253699890327010e-01, -8.087883359099400e-01, -1.982357528839352e-01, -2.080777989358314e-01, -2.080777989358314e-01, -1.014323295468153e-02, -1.067524386592510e-02, -5.798281455703824e-02, -5.860540630099681e-03, -7.363072923069018e-03, -7.363072923069018e-03, -5.038214501740183e+00, -5.037544060090848e+00, -5.038194649824260e+00, -5.037602604153560e+00, -5.037868481475729e+00, -5.037868481475729e+00, -2.136390199306500e+00, -2.145513789908609e+00, -2.139698808593482e+00, -2.147716355199082e+00, -2.139863054885224e+00, -2.139863054885224e+00, -5.817200261517387e-01, -6.028879545248089e-01, -5.428337901305412e-01, -5.374562431335668e-01, -5.872750206989401e-01, -5.872750206989401e-01, -1.398500702259605e-01, -2.476646427048259e-01, -1.305809715901791e-01, -1.813790966475088e+00, -1.670549003434418e-01, -1.670549003434418e-01, -4.522082602672812e-03, -5.729154941058369e-03, -4.380365931671653e-03, -9.130878892919397e-02, -5.276998803650407e-03, -5.276998803650407e-03, -5.507647957338114e-01, -5.539646587553437e-01, -5.528484786372622e-01, -5.519128130651691e-01, -5.523808311449324e-01, -5.523808311449324e-01, -5.339821147929716e-01, -5.133467969530623e-01, -5.183963652950411e-01, -5.236319994556818e-01, -5.206784404385963e-01, -5.206784404385963e-01, -6.331974654900361e-01, -2.891352169488522e-01, -3.195250936814599e-01, -3.684485117029337e-01, -3.410743767422649e-01, -3.410743767422649e-01, -4.738858991765471e-01, -5.561109366792723e-02, -7.488684537397952e-02, -3.435422097694467e-01, -1.124464006717545e-01, -1.124464006717546e-01, -1.430813953243600e-02, -1.531706298946340e-03, -3.214902058682369e-03, -1.065642195129974e-01, -4.882929808431303e-03, -4.882929808431300e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_pbetrans_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbetrans", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.504239974642896e+01, -2.504250472366006e+01, -2.504293661535238e+01, -2.504137548341116e+01, -2.504219843355077e+01, -2.504219843355077e+01, -4.007642527726792e+00, -4.007699302329667e+00, -4.009110466059943e+00, -4.007418619780858e+00, -4.007807207837451e+00, -4.007807207837451e+00, -7.464690387737615e-01, -7.449646206187387e-01, -7.088977916526089e-01, -7.155197196303889e-01, -7.147042617541705e-01, -7.147042617541705e-01, -1.844735429896714e-01, -1.861690373484576e-01, -8.777736989033647e-01, -1.725159766939471e-01, -1.685075323872725e-01, -1.685075323872724e-01, -1.350736510478284e-02, -1.421335297718400e-02, -7.485400975402277e-02, -7.810939403542891e-03, -9.810467186321184e-03, -9.810467186321184e-03, -6.186485862870455e+00, -6.189453794658039e+00, -6.186618087227044e+00, -6.189238257162358e+00, -6.187992644588356e+00, -6.187992644588356e+00, -2.117360386183163e+00, -2.136380373498216e+00, -2.098114688759410e+00, -2.114744626604323e+00, -2.137393018387753e+00, -2.137393018387753e+00, -6.818986451770607e-01, -7.740028376770129e-01, -6.263199282109064e-01, -6.807919367156260e-01, -6.969118323440774e-01, -6.969118323440774e-01, -1.607991592791505e-01, -2.014470340936197e-01, -1.496236939801311e-01, -2.333472010568307e+00, -2.516767890943043e-01, -2.516767890943043e-01, -6.027800967177876e-03, -7.635716356967439e-03, -5.836951742333385e-03, -1.113985070351671e-01, -7.031780905603534e-03, -7.031780905603534e-03, -7.247445959705275e-01, -7.124529434432645e-01, -7.167287397840113e-01, -7.203014983380079e-01, -7.185101550765024e-01, -7.185101550765024e-01, -7.075310258861950e-01, -5.491995722027440e-01, -5.920349446311727e-01, -6.372760482331364e-01, -6.141225487666975e-01, -6.141225487666975e-01, -8.100092150802807e-01, -2.354751902229201e-01, -2.757202232605516e-01, -3.831992006452616e-01, -3.217639967109811e-01, -3.217639967109812e-01, -5.046054188762129e-01, -7.208087473061210e-02, -9.477460629908953e-02, -3.786958634100079e-01, -1.295979869726194e-01, -1.295979869726193e-01, -1.903480605637053e-02, -2.042141439460085e-03, -4.285676478554859e-03, -1.245422356974828e-01, -6.506817738006060e-03, -6.506817738006054e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_pbetrans_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbetrans", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-7.391199999931072e-09, -7.391138275681093e-09, -7.390805175820175e-09, -7.391724729355334e-09, -7.391251234373056e-09, -7.391251234373056e-09, -1.014916298786214e-05, -1.014934133645876e-05, -1.015246697938646e-05, -1.013932566839258e-05, -1.014839823660223e-05, -1.014839823660223e-05, -6.731844460419443e-03, -6.744335489857531e-03, -6.988659095964426e-03, -6.786609639103530e-03, -6.849297554122162e-03, -6.849297554122162e-03, -8.562824048243820e-01, -8.425376797271985e-01, -3.724698408026570e-03, -1.245408041740176e+00, -1.182963866240957e+00, -1.182963866240957e+00, -2.503975914637759e+00, -2.645346296066018e+00, -1.472903277366188e+00, -2.275578387732109e+00, -2.890993759890879e+00, -2.890993759890887e+00, -2.148495767672456e-06, -2.148115821992571e-06, -2.148466687395066e-06, -2.148131452155960e-06, -2.148309654291294e-06, -2.148309654291294e-06, -8.471847587142938e-05, -8.285105327343700e-05, -8.520888008200387e-05, -8.355381869542724e-05, -8.343840352923215e-05, -8.343840352923215e-05, -1.275217183119077e-02, -9.948954736914676e-03, -1.712488762021614e-02, -1.600200784743620e-02, -1.210502772494969e-02, -1.210502772494969e-02, -8.646745535923579e-01, -5.845684018360587e-01, -1.067508700809255e+00, -1.211460063001190e-04, 7.510297024357225e-01, 7.510297024357225e-01, -2.998400553327027e+00, -2.678173232024632e+00, -1.681898215288046e+01, -1.645356275906011e+00, -7.826844744807739e+00, -7.826844744807725e+00, -1.387592151310186e-02, -1.392821222972741e-02, -1.390981315267808e-02, -1.389500531638935e-02, -1.390246937489198e-02, -1.390246937489198e-02, -1.557669396397561e-02, -2.332408718326796e-02, -2.083097947099747e-02, -1.860396530593928e-02, -1.972846774426852e-02, -1.972846774426852e-02, -8.210854788091439e-03, -3.163847658503091e-01, -1.980516198079140e-01, -9.072603142772957e-02, -1.378264210069097e-01, -1.378264210069097e-01, -3.228865043185351e-02, -1.344269063792799e+00, -1.334684808555020e+00, -1.124278682114831e-01, -1.777286966652750e+00, -1.777286966652751e+00, -2.017794947762790e+00, -1.314332460582866e+01, -6.360896465794207e+00, -1.823504071249805e+00, -9.886028399099636e+00, -9.886028399099660e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
