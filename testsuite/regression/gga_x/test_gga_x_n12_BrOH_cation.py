
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_n12_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_n12", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.076880298888680e+01, -2.076891789570477e+01, -2.076935398112817e+01, -2.076764584120053e+01, -2.076855153437766e+01, -2.076855153437766e+01, -3.469346746468193e+00, -3.469392236868698e+00, -3.470521336605878e+00, -3.469179366586389e+00, -3.469480771154572e+00, -3.469480771154572e+00, -7.006029032536185e-01, -7.003332392789519e-01, -6.951434021037615e-01, -7.003674398624152e-01, -7.024939086777621e-01, -7.024939086777621e-01, -1.917142562984198e-01, -1.931055053344573e-01, -8.173635822023697e-01, -1.375799196217075e-01, -1.800449186996437e-01, -1.800449186996437e-01, -8.314040330180607e-03, -8.658636648647855e-03, -1.415106486001655e-02, -5.224443695696470e-03, -6.934947411411646e-03, -6.934947411411648e-03, -5.243575722819498e+00, -5.245145446566509e+00, -5.243648984937550e+00, -5.245035001380243e+00, -5.244373198453349e+00, -5.244373198453349e+00, -1.943871967791729e+00, -1.957523929295115e+00, -1.932397592437636e+00, -1.943882908761020e+00, -1.957665940698614e+00, -1.957665940698614e+00, -5.838188201430472e-01, -6.069990557108760e-01, -5.408013729192631e-01, -5.389767727293664e-01, -5.913488972841500e-01, -5.913488972841501e-01, -5.093085097018431e-02, -1.948657613893363e-01, -4.176625614790538e-02, -1.898368437450144e+00, -9.515390631771703e-02, -9.515390631771703e-02, -4.138763333730597e-03, -5.120256312086761e-03, -4.023105242959063e-03, -1.745091687584562e-02, -4.937090721650881e-03, -4.937090721650883e-03, -5.508837766984740e-01, -5.556260815779848e-01, -5.540615911646156e-01, -5.526787202886806e-01, -5.533790955288019e-01, -5.533790955288019e-01, -5.332143714827684e-01, -5.011533161796168e-01, -5.131187864256297e-01, -5.231774712267581e-01, -5.181788324618459e-01, -5.181788324618459e-01, -6.392187623854138e-01, -2.500602056013705e-01, -2.864165766247451e-01, -3.443763982101798e-01, -3.108672629426517e-01, -3.108672629426518e-01, -4.583984552217273e-01, -1.424369689766290e-02, -1.204517536491301e-02, -3.226881692674757e-01, -3.743629454776148e-02, -3.743629454776159e-02, -1.074272543309779e-02, -1.481958186584474e-03, -3.019518576652247e-03, -3.089478381366070e-02, -4.575214527420083e-03, -4.575214527420079e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_n12_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_n12", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.279276315836008e+01, -3.279270327160287e+01, -3.279266360883685e+01, -3.279263107386014e+01, -3.279264491939164e+01, -3.279252035928067e+01, -3.279376153907700e+01, -3.279394602541296e+01, -3.279268864658899e+01, -3.279359664289603e+01, -3.279268864658899e+01, -3.279359664289603e+01, -5.069470533293774e+00, -5.068305208520016e+00, -5.069351819390628e+00, -5.068106247800525e+00, -5.065659287112309e+00, -5.064722629148865e+00, -5.072964214925236e+00, -5.071846679268357e+00, -5.068958965064586e+00, -5.068707349519933e+00, -5.068958965064586e+00, -5.068707349519933e+00, -8.277048950652602e-01, -8.313825096635268e-01, -8.261555390468537e-01, -8.307948135579003e-01, -7.995249457867242e-01, -7.872485943685736e-01, -8.002583877872791e-01, -8.041239706229916e-01, -8.377530841530588e-01, -7.051628318550652e-01, -8.377530841530588e-01, -7.051628318550652e-01, -2.026399375951946e-01, -1.938471670717791e-01, -1.949475478533098e-01, -1.875700074330035e-01, -9.678939071942518e-01, -9.970381255015605e-01, -2.954401155799224e-01, -2.960359316144332e-01, -2.074469768118739e-01, -2.602144233440448e-01, -2.074469768118734e-01, -2.602144233440447e-01, -1.025686248696270e-02, -1.072526247481267e-02, -1.061705075912572e-02, -1.115663335633703e-02, -2.266667594418587e-02, -2.460772982910526e-02, -6.813153781991255e-03, -6.716058282939425e-03, -9.404852347039383e-03, -5.884597071565053e-03, -9.404852347039371e-03, -5.884597071565067e-03, -7.180592912237496e+00, -7.179005282688118e+00, -7.176097251027346e+00, -7.174659114518338e+00, -7.180375933103295e+00, -7.178879523406839e+00, -7.176517249850038e+00, -7.174930367461759e+00, -7.178258514677188e+00, -7.176812855555540e+00, -7.178258514677188e+00, -7.176812855555540e+00, -2.666894571907419e+00, -2.666675799650868e+00, -2.714030478509716e+00, -2.712643143843653e+00, -2.568602945895851e+00, -2.599218067913615e+00, -2.615571127011897e+00, -2.644310961532492e+00, -2.751774677826189e+00, -2.699920456756077e+00, -2.751774677826189e+00, -2.699920456756077e+00, -7.143871515896393e-01, -7.124440189444892e-01, -7.788327489236965e-01, -7.794017559964491e-01, -6.462683979159299e-01, -6.709608487766584e-01, -6.775210462948201e-01, -6.995541601850058e-01, -7.429808192059340e-01, -7.055830724446146e-01, -7.429808192059337e-01, -7.055830724446145e-01, -2.391193550033157e-01, -2.437753175683449e-01, -3.121425128243228e-01, -3.109373436923968e-01, -1.997291027989087e-01, -2.214740236597135e-01, -2.420515780232726e+00, -2.419398719790917e+00, -2.861115520021468e-01, -2.786619095441001e-01, -2.861115520021468e-01, -2.786619095441001e-01, -5.299872886950508e-03, -5.484675083278981e-03, -6.591700095369041e-03, -6.677299427395796e-03, -5.103430636364817e-03, -5.371465155966819e-03, -8.588158645677220e-02, -8.584281130342843e-02, -5.201985694492694e-03, -6.864642652209717e-03, -5.201985694492693e-03, -6.864642652209718e-03, -7.248071283896823e-01, -7.277325681535344e-01, -7.157457028884511e-01, -7.186364377530593e-01, -7.186563935811717e-01, -7.215792874243976e-01, -7.212990176228937e-01, -7.241932708224286e-01, -7.199520802172420e-01, -7.228605189936911e-01, -7.199520802172420e-01, -7.228605189936911e-01, -7.070157536115963e-01, -7.093979742036477e-01, -5.867561887791942e-01, -5.899065643586341e-01, -6.228788710666411e-01, -6.258672473210377e-01, -6.538701559537666e-01, -6.561789011204221e-01, -6.384165381147238e-01, -6.408372702325563e-01, -6.384165381147238e-01, -6.408372702325563e-01, -8.151283861600124e-01, -8.167884250670042e-01, -2.712981401767512e-01, -2.697922952476132e-01, -2.608268350831612e-01, -2.620732552660386e-01, -3.931617835806301e-01, -3.961714208767483e-01, -3.109666065911659e-01, -3.112353435969448e-01, -3.109666065911650e-01, -3.112353435969447e-01, -5.338447782296508e-01, -5.387498976421491e-01, -2.126427013305383e-02, -2.143955169385483e-02, -3.765450227916690e-02, -4.184874664299806e-02, -3.902323349594829e-01, -3.979989552865639e-01, -1.544994972990971e-01, -1.811110030940823e-01, -1.544994972990963e-01, -1.811110030940825e-01, -1.310543370722555e-02, -1.339425490712935e-02, -1.959662619096338e-03, -1.963903066929965e-03, -3.841229070329730e-03, -4.066093187970114e-03, -1.440007989192560e-01, -1.488228673050614e-01, -4.953866342711109e-03, -6.369909613370420e-03, -4.953866342711104e-03, -6.369909613370414e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_n12_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_n12", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [2.621418520934712e-08, 0.000000000000000e+00, 2.621426337590312e-08, 2.621323757729027e-08, 0.000000000000000e+00, 2.621357531391528e-08, 2.621097997163211e-08, 0.000000000000000e+00, 2.621012359628301e-08, 2.622166164112599e-08, 0.000000000000000e+00, 2.622374460169621e-08, 2.621358093718334e-08, 0.000000000000000e+00, 2.621886919973898e-08, 2.621358093718334e-08, 0.000000000000000e+00, 2.621886919973898e-08, 1.606475353534910e-05, 0.000000000000000e+00, 1.603677877679416e-05, 1.606106582101012e-05, 0.000000000000000e+00, 1.603133989871452e-05, 1.595358328328922e-05, 0.000000000000000e+00, 1.592501726830173e-05, 1.613293730466747e-05, 0.000000000000000e+00, 1.610124783292540e-05, 1.608250988944251e-05, 0.000000000000000e+00, 1.600623611840152e-05, 1.608250988944251e-05, 0.000000000000000e+00, 1.600623611840152e-05, -8.287198409109390e-03, 0.000000000000000e+00, -8.401185594332368e-03, -8.264952600541730e-03, 0.000000000000000e+00, -8.393876224263934e-03, -8.420653624259145e-03, 0.000000000000000e+00, -8.651537850446919e-03, -8.228129235064670e-03, 0.000000000000000e+00, -8.164942811863612e-03, -8.570552587801506e-03, 0.000000000000000e+00, -1.094821945776952e-02, -8.570552587801506e-03, 0.000000000000000e+00, -1.094821945776952e-02, -8.312245732232478e-01, 0.000000000000000e+00, -9.971828050556559e-01, -9.763237516656860e-01, 0.000000000000000e+00, -1.105254003122504e+00, -4.225446697984447e-03, 0.000000000000000e+00, -4.377583330410308e-03, 3.166052662697490e+00, 0.000000000000000e+00, 2.925497972181578e+00, -7.775889694133010e-01, 0.000000000000000e+00, 1.238286185071875e+01, -7.775889694133015e-01, 0.000000000000000e+00, 1.238286185071876e+01, 9.095732997929916e-01, 0.000000000000000e+00, 1.452061472059161e+00, 1.406496381676019e+00, 0.000000000000000e+00, 2.091545738797079e+00, 1.889702255177244e+01, 0.000000000000000e+00, 1.968975000019887e+01, -2.490362117806384e+00, 0.000000000000000e+00, -2.505458230646108e+00, -5.838179565221512e-02, 0.000000000000000e+00, -9.093627079773928e+00, -5.838179564456197e-02, 0.000000000000000e+00, -9.093627079709790e+00, 1.685890620246182e-06, 0.000000000000000e+00, 1.688321459879154e-06, 1.639781697431224e-06, 0.000000000000000e+00, 1.643725425682478e-06, 1.683531695337376e-06, 0.000000000000000e+00, 1.686933650789113e-06, 1.643967542789061e-06, 0.000000000000000e+00, 1.646420051136511e-06, 1.662132809147475e-06, 0.000000000000000e+00, 1.665910210808760e-06, 1.662132809147475e-06, 0.000000000000000e+00, 1.665910210808760e-06, 3.940881061899801e-05, 0.000000000000000e+00, 3.939235407345819e-05, 4.522885625568912e-05, 0.000000000000000e+00, 4.510186131026062e-05, 2.098999373326053e-05, 0.000000000000000e+00, 2.681043605817759e-05, 2.768641284784019e-05, 0.000000000000000e+00, 3.296075993202400e-05, 5.315216658748473e-05, 0.000000000000000e+00, 4.409882896896186e-05, 5.315216658748473e-05, 0.000000000000000e+00, 4.409882896896186e-05, -2.178081482107027e-02, 0.000000000000000e+00, -2.202086924321974e-02, -2.593045693757771e-02, 0.000000000000000e+00, -2.604071124208199e-02, -2.859059045772232e-02, 0.000000000000000e+00, -2.608198891806233e-02, -3.656192293551718e-02, 0.000000000000000e+00, -3.315648590096688e-02, -2.025828866142481e-02, 0.000000000000000e+00, -2.372626685714846e-02, -2.025828866142482e-02, 0.000000000000000e+00, -2.372626685714843e-02, 1.252995208605854e+01, 0.000000000000000e+00, 1.241923344580951e+01, 4.318091918853154e-01, 0.000000000000000e+00, 3.989314901155376e-01, 1.536831121864513e+01, 0.000000000000000e+00, 1.410138121039501e+01, -3.627120805161854e-04, 0.000000000000000e+00, -3.637132106434100e-04, 9.415581357300670e+00, 0.000000000000000e+00, 7.326644432688408e+00, 9.415581357300670e+00, 0.000000000000000e+00, 7.326644432688408e+00, -5.297279076169927e+00, 0.000000000000000e+00, -4.400163721908797e+00, -3.244286614191463e+00, 0.000000000000000e+00, -2.912160225695308e+00, -2.708417756205629e+01, 0.000000000000000e+00, -2.845237805547664e+01, 2.525971583962625e+01, 0.000000000000000e+00, 2.452447790756290e+01, -1.319425094453485e+01, 0.000000000000000e+00, -8.229968445236539e+00, -1.319425094454585e+01, 0.000000000000000e+00, -8.229968445237249e+00, -3.678252329382850e-02, 0.000000000000000e+00, -3.647245687928521e-02, -3.359956348352012e-02, 0.000000000000000e+00, -3.334144045778878e-02, -3.466970385408082e-02, 0.000000000000000e+00, -3.440184958647399e-02, -3.560354656050864e-02, 0.000000000000000e+00, -3.530671084636197e-02, -3.513270576383004e-02, 0.000000000000000e+00, -3.485013458009488e-02, -3.513270576383004e-02, 0.000000000000000e+00, -3.485013458009488e-02, -4.074478781666883e-02, 0.000000000000000e+00, -4.041667620278281e-02, -3.345687680047373e-02, 0.000000000000000e+00, -3.297660511085536e-02, -3.197745162444009e-02, 0.000000000000000e+00, -3.168095385232263e-02, -3.402726090224201e-02, 0.000000000000000e+00, -3.375973902304235e-02, -3.270275346148430e-02, 0.000000000000000e+00, -3.239685658926731e-02, -3.270275346148430e-02, 0.000000000000000e+00, -3.239685658926731e-02, -2.197663913952701e-02, 0.000000000000000e+00, -2.206547602534904e-02, -2.990075417615932e-01, 0.000000000000000e+00, -3.078384875089147e-01, -3.463694925782100e-01, 0.000000000000000e+00, -3.432671029812621e-01, -1.337452030048815e-01, 0.000000000000000e+00, -1.306680326219465e-01, -2.396116452492106e-01, 0.000000000000000e+00, -2.401709812130744e-01, -2.396116452492121e-01, 0.000000000000000e+00, -2.401709812130750e-01, -4.684819047459392e-02, 0.000000000000000e+00, -4.573381542732553e-02, 1.716481206585044e+01, 0.000000000000000e+00, 1.726763601009572e+01, 1.998054984864469e+01, 0.000000000000000e+00, 2.059143472685722e+01, -1.427779620958534e-01, 0.000000000000000e+00, -1.338760976387248e-01, 2.265244885950229e+01, 0.000000000000000e+00, 2.328926897526806e+01, 2.265244885950209e+01, 0.000000000000000e+00, 2.328926897526800e+01, 3.705291436491454e+00, 0.000000000000000e+00, 4.139199763282563e+00, -2.739648540727233e+01, 0.000000000000000e+00, -4.850399680513441e+01, -1.315466977454442e+01, 0.000000000000000e+00, -1.350802360936993e+01, 2.513272790755913e+01, 0.000000000000000e+00, 2.447353746361832e+01, -2.862304754527483e+01, 0.000000000000000e+00, -1.004292691977699e+01, -2.862304754528331e+01, 0.000000000000000e+00, -1.004292691976610e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
