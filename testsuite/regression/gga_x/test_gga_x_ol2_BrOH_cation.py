
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_ol2_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ol2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.120627074756349e+01, -2.120629675916329e+01, -2.120648379722865e+01, -2.120609528671459e+01, -2.120628872194139e+01, -2.120628872194139e+01, -3.513366659166969e+00, -3.513334404619378e+00, -3.512673855000763e+00, -3.514488262381774e+00, -3.513412868240074e+00, -3.513412868240074e+00, -6.993084067151504e-01, -6.991199689590425e-01, -6.957397069663533e-01, -7.007291736939109e-01, -7.010998930962495e-01, -7.010998930962495e-01, -2.113594876786379e-01, -2.120830476895999e-01, -8.096955468415901e-01, -1.924433266463150e-01, -2.122837481191073e-01, -2.122837481191072e-01, -1.205017550281555e+00, -1.114190491906273e+00, -2.962015347805734e-01, -2.185234518306862e+00, -1.413730073818650e+00, -1.413730073818648e+00, -5.083841725617480e+00, -5.082635206479941e+00, -5.083800113389532e+00, -5.082735011512984e+00, -5.083224484227831e+00, -5.083224484227831e+00, -2.098167105896255e+00, -2.109351178263493e+00, -2.096316168104928e+00, -2.106172082427554e+00, -2.105285600450150e+00, -2.105285600450150e+00, -5.879293394088849e-01, -5.947284386364400e-01, -5.482596102468626e-01, -5.366073089028762e-01, -5.945183466079051e-01, -5.945183466079051e-01, -1.941528921551437e-01, -2.342369404826144e-01, -1.927006358615845e-01, -1.784718865518400e+00, -1.790557675288220e-01, -1.790557675288220e-01, -2.464841412133296e+00, -2.061227455829116e+00, -1.076064627063594e+00, -2.002106402732582e-01, -1.281057777605162e+00, -1.281057777605163e+00, -5.088491731202627e-01, -5.453117734685702e-01, -5.374906295808696e-01, -5.281079648541185e-01, -5.332426778221804e-01, -5.332426778221804e-01, -4.595078099406574e-01, -5.123242688895134e-01, -5.227179521920220e-01, -5.290053609984293e-01, -5.263949131376109e-01, -5.263949131376109e-01, -6.270026178105015e-01, -2.712227574279076e-01, -3.035499577358101e-01, -3.656650532662980e-01, -3.311465256153449e-01, -3.311465256153449e-01, -4.725292841867001e-01, -3.204501616819529e-01, -2.517702342039061e-01, -3.447206609387399e-01, -1.728595921214466e-01, -1.728595921214466e-01, -9.549178045753990e-01, -3.495188886099937e+00, -2.380393533591145e+00, -1.759832409417489e-01, -1.221941659901951e+00, -1.221941659901951e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_ol2_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ol2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.529854784485399e+01, -2.529851232971798e+01, -2.529859274767321e+01, -2.529854497174921e+01, -2.529880177851028e+01, -2.529882618664003e+01, -2.529829291754491e+01, -2.529817810857628e+01, -2.529857132441606e+01, -2.529848530703294e+01, -2.529857132441606e+01, -2.529848530703294e+01, -4.164336819357453e+00, -4.164144324295704e+00, -4.164332875689473e+00, -4.164123599161472e+00, -4.164065261512878e+00, -4.164018189858870e+00, -4.165197093836524e+00, -4.165107660426457e+00, -4.163693814508142e+00, -4.164957941917170e+00, -4.163693814508142e+00, -4.164957941917170e+00, -8.053085867898436e-01, -8.088469369380800e-01, -8.039001216059065e-01, -8.082859174803709e-01, -7.835174052507969e-01, -7.760246444700635e-01, -7.854702900883447e-01, -7.878494756777301e-01, -8.152515097553422e-01, -7.423617997745834e-01, -8.152515097553422e-01, -7.423617997745834e-01, -1.769928875820305e-01, -1.884171870009798e-01, -1.818222028126017e-01, -1.946637052664779e-01, -9.253220142571100e-01, -9.564402631498826e-01, -9.843259295681989e-02, -1.011791174747865e-01, -1.860819283653416e-01, -1.988745480214098e-02, -1.860819283653415e-01, -1.988745480214096e-02, 1.639044321139339e+00, 1.549054121163041e+00, 1.522604274066375e+00, 1.423531595054086e+00, 3.111770850752459e-01, 2.872933520816868e-01, 2.860581830990334e+00, 2.949655657962125e+00, 1.841183228445811e+00, 2.036064977321935e+00, 1.841183228445808e+00, 2.036064977321933e+00, -6.069385907379442e+00, -6.068048964258432e+00, -6.067620026811163e+00, -6.066344302751574e+00, -6.069307549145567e+00, -6.068004384766078e+00, -6.067792705827444e+00, -6.066456044816629e+00, -6.068471170207592e+00, -6.067194425316023e+00, -6.068471170207592e+00, -6.067194425316023e+00, -2.334760596783958e+00, -2.334636760162324e+00, -2.354080442062256e+00, -2.353390702568178e+00, -2.314241682155814e+00, -2.320120905612600e+00, -2.331206965704367e+00, -2.337185911319784e+00, -2.360282056365979e+00, -2.346552377970138e+00, -2.360282056365979e+00, -2.346552377970138e+00, -7.004722410159597e-01, -6.985514051200725e-01, -6.976363441888157e-01, -6.959154516915583e-01, -6.386134253879481e-01, -6.605292581246348e-01, -6.235300874766987e-01, -6.457680925566603e-01, -7.248442549249905e-01, -6.899583374184075e-01, -7.248442549249905e-01, -6.899583374184075e-01, 1.157903522146112e-02, 7.224070299818736e-03, -1.554689936897595e-01, -1.569318737370074e-01, 3.305747424876900e-02, 1.923894276812025e-02, -2.086752470212515e+00, -2.085470503814836e+00, -3.751680549547111e-02, -6.640067366516467e-02, -3.751680549547111e-02, -6.640067366516467e-02, 3.220620544701250e+00, 3.331021569386455e+00, 2.703996621456455e+00, 2.772207305612208e+00, 1.514011835873098e+00, 1.354719379230482e+00, 1.099509573768486e-01, 1.119442961800712e-01, 2.103729374560926e+00, 1.542745255841798e+00, 2.103729374560928e+00, 1.542745255841800e+00, -5.609702293790853e-01, -5.604246465043684e-01, -6.370360642408023e-01, -6.382355363827399e-01, -6.209238504824289e-01, -6.216696577377060e-01, -6.011037793281778e-01, -6.017330196283034e-01, -6.119695556660857e-01, -6.126622182615451e-01, -6.119695556660857e-01, -6.126622182615451e-01, -4.735871408907318e-01, -4.742446520450955e-01, -5.913009597516476e-01, -5.939083780248432e-01, -6.170625126139362e-01, -6.195543503326181e-01, -6.307488830028214e-01, -6.326691929723445e-01, -6.258804585301031e-01, -6.280214893119922e-01, -6.258804585301031e-01, -6.280214893119922e-01, -7.379668914428973e-01, -7.362767204802673e-01, -2.258645472794731e-01, -2.279829451882352e-01, -2.944107093306687e-01, -2.987805206088585e-01, -4.164364464429811e-01, -4.188230047311163e-01, -3.561401003294005e-01, -3.562131278805573e-01, -3.561401003294004e-01, -3.562131278805571e-01, -5.435452896125095e-01, -5.473955127214458e-01, 3.365049378851179e-01, 3.332020208933496e-01, 2.178169291387324e-01, 2.026566761564484e-01, -4.003069809021891e-01, -4.062285798423318e-01, 4.699441940568819e-02, 1.972179870045883e-02, 4.699441940568806e-02, 1.972179870045873e-02, 1.280555650568923e+00, 1.221878211361229e+00, 5.327035483058586e+00, 3.992992252752948e+00, 3.330206062143994e+00, 3.034195738903361e+00, 5.000085942400348e-02, 4.721358879460920e-02, 1.545826017809913e+00, 1.652923332065015e+00, 1.545826017809911e+00, 1.652923332065015e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_ol2_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ol2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.507198244622287e-08, 0.000000000000000e+00, -1.507209563428971e-08, -1.507223337321001e-08, 0.000000000000000e+00, -1.507227766428891e-08, -1.507240168901179e-08, 0.000000000000000e+00, -1.507269653629636e-08, -1.506958498888058e-08, 0.000000000000000e+00, -1.506910143083099e-08, -1.507216414194085e-08, 0.000000000000000e+00, -1.507007139847853e-08, -1.507216414194085e-08, 0.000000000000000e+00, -1.507007139847853e-08, -1.664417780684059e-05, 0.000000000000000e+00, -1.666025454810283e-05, -1.664586678968240e-05, 0.000000000000000e+00, -1.666304464018730e-05, -1.669814698576628e-05, 0.000000000000000e+00, -1.671155489518424e-05, -1.659713850568694e-05, 0.000000000000000e+00, -1.661277142849255e-05, -1.664934310230679e-05, 0.000000000000000e+00, -1.665725074406602e-05, -1.664934310230679e-05, 0.000000000000000e+00, -1.665725074406602e-05, -8.901748597540822e-03, 0.000000000000000e+00, -8.978374342466604e-03, -8.886792550603947e-03, 0.000000000000000e+00, -8.975570114455564e-03, -8.860646715550716e-03, 0.000000000000000e+00, -8.876634867439866e-03, -8.615924450628818e-03, 0.000000000000000e+00, -8.616396060307051e-03, -9.066512208985397e-03, 0.000000000000000e+00, -8.947034848980785e-03, -9.066512208985397e-03, 0.000000000000000e+00, -8.947034848980785e-03, -1.578077628372813e+00, 0.000000000000000e+00, -1.365760197585592e+00, -1.509575291088868e+00, 0.000000000000000e+00, -1.281761026645528e+00, -5.177129689723120e-03, 0.000000000000000e+00, -5.066202406341418e-03, -4.371830586313921e+00, 0.000000000000000e+00, -4.140552435204440e+00, -1.330211751036096e+00, 0.000000000000000e+00, -1.535180682204909e+01, -1.330211751036096e+00, 0.000000000000000e+00, -1.535180682204908e+01, -1.073702889444818e+06, 0.000000000000000e+00, -8.421224548227536e+05, -8.905069513606949e+05, 0.000000000000000e+00, -6.761929014915760e+05, -9.317574646460657e+02, 0.000000000000000e+00, -7.492770873435996e+02, -8.222729873146820e+06, 0.000000000000000e+00, -8.794403372218067e+06, -1.695267808443221e+06, 0.000000000000000e+00, -1.616578103665764e+07, -1.695267808443221e+06, 0.000000000000000e+00, -1.616578103665762e+07, -5.740140166987415e-06, 0.000000000000000e+00, -5.743746403899989e-06, -5.782921145390935e-06, 0.000000000000000e+00, -5.785092131731919e-06, -5.742268041576177e-06, 0.000000000000000e+00, -5.744991570597964e-06, -5.778966547016334e-06, 0.000000000000000e+00, -5.782545087707494e-06, -5.762142224845396e-06, 0.000000000000000e+00, -5.764458659595319e-06, -5.762142224845396e-06, 0.000000000000000e+00, -5.764458659595319e-06, -1.072514525457881e-04, 0.000000000000000e+00, -1.072710866844630e-04, -1.048980178717970e-04, 0.000000000000000e+00, -1.049941460821550e-04, -1.079938677315712e-04, 0.000000000000000e+00, -1.077994942035865e-04, -1.058834890952647e-04, 0.000000000000000e+00, -1.056678167883317e-04, -1.054930813324004e-04, 0.000000000000000e+00, -1.060092482984493e-04, -1.054930813324004e-04, 0.000000000000000e+00, -1.060092482984493e-04, -2.281534076941741e-02, 0.000000000000000e+00, -2.310968303365351e-02, -6.304145409308817e-02, 0.000000000000000e+00, -6.522910863985568e-02, -2.959163928958524e-02, 0.000000000000000e+00, -2.731769859270830e-02, -7.807667274067011e-02, 0.000000000000000e+00, -6.629469426508296e-02, -2.178855620479350e-02, 0.000000000000000e+00, -2.573406469769917e-02, -2.178855620479347e-02, 0.000000000000000e+00, -2.573406469769921e-02, -1.841897603088449e+01, 0.000000000000000e+00, -1.773678590770446e+01, -1.431313935116994e+00, 0.000000000000000e+00, -1.403612032966972e+00, -2.747748961862061e+01, 0.000000000000000e+00, -2.230057849435577e+01, -8.359060926328918e-04, 0.000000000000000e+00, -8.390712533380763e-04, -1.078360925057249e+01, 0.000000000000000e+00, -8.598878974102451e+00, -1.078360925057249e+01, 0.000000000000000e+00, -8.598878974102451e+00, -2.596162842644793e+07, 0.000000000000000e+00, -2.225690147470255e+07, -9.593954021469625e+06, 0.000000000000000e+00, -9.034463270242196e+06, -3.068443863550191e+07, 0.000000000000000e+00, -2.439363397760849e+07, -1.216773529401687e+02, 0.000000000000000e+00, -1.187285373280105e+02, -2.819831991933028e+07, 0.000000000000000e+00, -7.927497162739255e+06, -2.819831991933028e+07, 0.000000000000000e+00, -7.927497162739257e+06, -3.363260843111120e-01, 0.000000000000000e+00, -3.439683285115731e-01, -9.480189472431678e-02, 0.000000000000000e+00, -9.562977680870044e-02, -1.291300844659617e-01, 0.000000000000000e+00, -1.309022745186575e-01, -1.821191338964957e-01, 0.000000000000000e+00, -1.842684910599074e-01, -1.514673903303429e-01, 0.000000000000000e+00, -1.534036813718846e-01, -1.514673903303429e-01, 0.000000000000000e+00, -1.534036813718846e-01, -9.733788645362282e-01, 0.000000000000000e+00, -9.712280406066547e-01, -3.137902031504775e-02, 0.000000000000000e+00, -3.103468850981056e-02, -3.312942676176381e-02, 0.000000000000000e+00, -3.295222904414674e-02, -4.510804174351737e-02, 0.000000000000000e+00, -4.485850922951712e-02, -3.704384256406738e-02, 0.000000000000000e+00, -3.673637866624754e-02, -3.704384256406738e-02, 0.000000000000000e+00, -3.673637866624754e-02, -4.637275439052721e-02, 0.000000000000000e+00, -4.843574731728643e-02, -5.744233567514853e-01, 0.000000000000000e+00, -5.618456880174749e-01, -2.900082175314692e-01, 0.000000000000000e+00, -2.798905310868294e-01, -1.184302180571067e-01, 0.000000000000000e+00, -1.163674767279139e-01, -1.765893757531654e-01, 0.000000000000000e+00, -1.771788394516769e-01, -1.765893757531657e-01, 0.000000000000000e+00, -1.771788394516767e-01, -4.324757648359470e-02, 0.000000000000000e+00, -4.256391116763984e-02, -1.004830535780883e+03, 0.000000000000000e+00, -9.777978785012757e+02, -3.070181473486209e+02, 0.000000000000000e+00, -2.691492741851008e+02, -1.623670939572648e-01, 0.000000000000000e+00, -1.565388532351991e-01, -5.127382207241907e+01, 0.000000000000000e+00, -4.129324231183107e+01, -5.127382207241905e+01, 0.000000000000000e+00, -4.129324231183107e+01, -2.564504512231821e+05, 0.000000000000000e+00, -2.224017214291010e+05, -1.831267311434117e+09, 0.000000000000000e+00, -1.814620608739341e+09, -1.068296249533194e+08, 0.000000000000000e+00, -8.348527561293903e+07, -6.083959488690476e+01, 0.000000000000000e+00, -5.702309117789083e+01, -3.502949212597278e+07, 0.000000000000000e+00, -1.123224148944144e+07, -3.502949212597288e+07, 0.000000000000000e+00, -1.123224148944149e+07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
