
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_gg99_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_gg99", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.104443518982051e+01, -2.104445314273474e+01, -2.104461642218287e+01, -2.104434760337472e+01, -2.104447659198586e+01, -2.104447659198586e+01, -3.509238171781665e+00, -3.509186352690993e+00, -3.508074504274139e+00, -3.510674205958606e+00, -3.509260902025309e+00, -3.509260902025309e+00, -7.125547003471298e-01, -7.127920352451267e-01, -7.208554241084166e-01, -7.254521776996485e-01, -7.256647889967325e-01, -7.256647889967325e-01, -2.329195557739496e-01, -2.330928972090140e-01, -8.207065968321072e-01, -2.117356066025251e-01, -2.322421018306571e-01, -2.322421018306572e-01, 0.000000000000000e+00, 0.000000000000000e+00, -1.351704468170399e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -5.036474298694815e+00, -5.035360619411030e+00, -5.036436152851634e+00, -5.035452775678440e+00, -5.035902515408408e+00, -5.035902515408408e+00, -2.181766969638293e+00, -2.190417665887828e+00, -2.186627891802469e+00, -2.194250371910906e+00, -2.184224121480180e+00, -2.184224121480180e+00, -5.851265016017969e-01, -5.985702787590272e-01, -5.473508303848285e-01, -5.350326328081170e-01, -5.904710855275775e-01, -5.904710855275777e-01, -1.891029321306890e-01, -2.600006512227936e-01, -1.819891530264141e-01, -1.800176910212697e+00, -1.906366546284933e-01, -1.906366546284933e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.516390266620247e-01, 0.000000000000000e+00, 0.000000000000000e+00, -5.445494531970230e-01, -5.498403424103528e-01, -5.480035397776482e-01, -5.464590591985494e-01, -5.472328191392071e-01, -5.472328191392071e-01, -5.273162723403384e-01, -5.212696773414522e-01, -5.230237962182723e-01, -5.241142787331458e-01, -5.233258702143753e-01, -5.233258702143753e-01, -6.290348569733518e-01, -2.997301121796342e-01, -3.289542982753801e-01, -3.750021926630998e-01, -3.493517997216051e-01, -3.493517997216052e-01, -4.814077901881457e-01, -1.357671460344543e-01, -1.480777118038232e-01, -3.479409983011739e-01, -1.596673215715113e-01, -1.596673215715113e-01, -9.048044028155351e-02, 0.000000000000000e+00, 0.000000000000000e+00, -1.564307386941751e-01, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_gg99_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_gg99", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.439925807218236e+01, -2.439923005078539e+01, -2.439937949254383e+01, -2.439931823369993e+01, -2.439972653702469e+01, -2.439982711645122e+01, -2.439835637905210e+01, -2.439808039900691e+01, -2.439933258057184e+01, -2.439874814799099e+01, -2.439933258057184e+01, -2.439874814799099e+01, -3.903148036331346e+00, -3.903384411913767e+00, -3.903196500024624e+00, -3.903443780108296e+00, -3.904483204990000e+00, -3.904843745763096e+00, -3.902884315147762e+00, -3.903257300635783e+00, -3.902381255060078e+00, -3.904468197295249e+00, -3.902381255060078e+00, -3.904468197295249e+00, -7.275807908792201e-01, -7.327913317157632e-01, -7.256774421093272e-01, -7.320373233445527e-01, -7.015349843483828e-01, -6.937675417787956e-01, -7.026877888784423e-01, -7.052043916804384e-01, -7.420857878326690e-01, -6.662415054554730e-01, -7.420857878326690e-01, -6.662415054554730e-01, -1.758445807829896e-01, -1.826697588966956e-01, -1.779879963099202e-01, -1.859591394839056e-01, -8.371950450594019e-01, -8.767470365274781e-01, -1.378903236832252e-01, -1.396643549395478e-01, -1.835967252516164e-01, -1.053410237964910e-01, -1.835967252516165e-01, -1.053410237964908e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -5.292729072343801e-02, -5.458760641561331e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -6.037609868580730e+00, -6.036078340063820e+00, -6.040840324661152e+00, -6.039199242768465e+00, -6.037785992406322e+00, -6.036183202146388e+00, -6.040557916592395e+00, -6.039018404185442e+00, -6.039266828507342e+00, -6.037646025589114e+00, -6.039266828507342e+00, -6.037646025589114e+00, -2.086693189406307e+00, -2.086581000760046e+00, -2.104598119106486e+00, -2.103964606578620e+00, -2.067412518269316e+00, -2.072833156048388e+00, -2.082767697679924e+00, -2.088378035637253e+00, -2.111377446822200e+00, -2.097721424275979e+00, -2.111377446822200e+00, -2.097721424275979e+00, -6.649378464537744e-01, -6.632806202329092e-01, -7.584521549729407e-01, -7.593141114589251e-01, -5.971808478287142e-01, -6.223422653228151e-01, -6.555873188094661e-01, -6.767959695366833e-01, -6.966164798308396e-01, -6.603210616276524e-01, -6.966164798308402e-01, -6.603210616276525e-01, -1.032526181366724e-01, -1.038630781592906e-01, -1.805235869188972e-01, -1.813708792448305e-01, -9.522576770622539e-02, -9.909855347795957e-02, -2.289034578583331e+00, -2.288087475061916e+00, -1.136605985945552e-01, -1.178721318845477e-01, -1.136605985945552e-01, -1.178721318845477e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -7.146380169789504e-02, -7.198003641076807e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -7.117976816595039e-01, -7.147335952003105e-01, -6.971904688202792e-01, -7.002202530984939e-01, -7.021981024841508e-01, -7.052294762471966e-01, -7.064766744800337e-01, -7.094176968655970e-01, -7.043270328240228e-01, -7.073120254384384e-01, -7.043270328240228e-01, -7.073120254384384e-01, -6.959806643198909e-01, -6.983074454901265e-01, -5.355951321780593e-01, -5.383438326217547e-01, -5.751123305331113e-01, -5.782816500820841e-01, -6.202620447459323e-01, -6.226962162285458e-01, -5.969145259109361e-01, -5.993907413787787e-01, -5.969145259109361e-01, -5.993907413787787e-01, -7.927360041335800e-01, -7.948546454185617e-01, -2.262964804361532e-01, -2.275890269630970e-01, -2.720200821481953e-01, -2.749450752634210e-01, -3.745060874396094e-01, -3.768200762312215e-01, -3.187315826899391e-01, -3.187339918723456e-01, -3.187315826899393e-01, -3.187339918723460e-01, -4.914988575441818e-01, -4.956251582363136e-01, -5.286369324363523e-02, -5.306212224940163e-02, -6.305509466550846e-02, -6.421313619046133e-02, -3.661778216395262e-01, -3.726430883806779e-01, -8.288114446072113e-02, -8.521093254185887e-02, -8.288114446072105e-02, -8.521093254185889e-02, -2.553053965690645e-02, -2.584230450730585e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -7.977216245620899e-02, -8.081389482614403e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_gg99_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_gg99", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.853304101625915e-08, 0.000000000000000e+00, -1.853314469786935e-08, -1.853290456463357e-08, 0.000000000000000e+00, -1.853304550928480e-08, -1.853228296667773e-08, 0.000000000000000e+00, -1.853220661966552e-08, -1.853382866926039e-08, 0.000000000000000e+00, -1.853417526655426e-08, -1.853296897931087e-08, 0.000000000000000e+00, -1.853325217726301e-08, -1.853296897931087e-08, 0.000000000000000e+00, -1.853325217726301e-08, -2.482522543992075e-05, 0.000000000000000e+00, -2.483345076656451e-05, -2.482577525948648e-05, 0.000000000000000e+00, -2.483463020228265e-05, -2.484546570813821e-05, 0.000000000000000e+00, -2.485004982711170e-05, -2.479531696895929e-05, 0.000000000000000e+00, -2.480147728493920e-05, -2.483912716771867e-05, 0.000000000000000e+00, -2.481683653654889e-05, -2.483912716771867e-05, 0.000000000000000e+00, -2.481683653654889e-05, -1.567810418322832e-02, 0.000000000000000e+00, -1.569008603808192e-02, -1.568645870649854e-02, 0.000000000000000e+00, -1.570106584446302e-02, -1.581348342421796e-02, 0.000000000000000e+00, -1.579406832413883e-02, -1.536030420386223e-02, 0.000000000000000e+00, -1.537362163313220e-02, -1.559669374692055e-02, 0.000000000000000e+00, -1.513030386257120e-02, -1.559669374692055e-02, 0.000000000000000e+00, -1.513030386257120e-02, -2.046009669911366e+00, 0.000000000000000e+00, -1.852450005879155e+00, -2.009932415607379e+00, 0.000000000000000e+00, -1.792239469860243e+00, -9.082902676278337e-03, 0.000000000000000e+00, -8.475246683423789e-03, -3.982880781443507e+00, 0.000000000000000e+00, -3.808895073015396e+00, -1.745830668186381e+00, 0.000000000000000e+00, -9.750834117215977e+00, -1.745830668186382e+00, 0.000000000000000e+00, -9.750834117215982e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.638536123271492e+02, 0.000000000000000e+00, -1.410198770205215e+02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -5.486334244463239e-06, 0.000000000000000e+00, -5.491375850995758e-06, -5.487602822194722e-06, 0.000000000000000e+00, -5.492605005934140e-06, -5.486359368078114e-06, 0.000000000000000e+00, -5.491385573959748e-06, -5.487448608199712e-06, 0.000000000000000e+00, -5.492502772036730e-06, -5.487020933261748e-06, 0.000000000000000e+00, -5.492000618001927e-06, -5.487020933261748e-06, 0.000000000000000e+00, -5.492000618001927e-06, -1.905602625606327e-04, 0.000000000000000e+00, -1.905942987818862e-04, -1.866601152162761e-04, 0.000000000000000e+00, -1.868250809445489e-04, -1.908684441470866e-04, 0.000000000000000e+00, -1.908572234634045e-04, -1.875070949803585e-04, 0.000000000000000e+00, -1.874134305936244e-04, -1.880439156814826e-04, 0.000000000000000e+00, -1.885818590187661e-04, -1.880439156814826e-04, 0.000000000000000e+00, -1.885818590187661e-04, -3.140258652360746e-02, 0.000000000000000e+00, -3.175440071138926e-02, -2.613971166718137e-02, 0.000000000000000e+00, -2.613283096555538e-02, -4.473728890638477e-02, 0.000000000000000e+00, -3.946803283273154e-02, -4.464189846342208e-02, 0.000000000000000e+00, -3.908992072005103e-02, -2.750211305373828e-02, 0.000000000000000e+00, -3.347931857007586e-02, -2.750211305373826e-02, 0.000000000000000e+00, -3.347931857007588e-02, -1.010451223122533e+01, 0.000000000000000e+00, -9.917624658288021e+00, -1.515798627311457e+00, 0.000000000000000e+00, -1.493483090585495e+00, -1.367496151368749e+01, 0.000000000000000e+00, -1.180821365469755e+01, -3.183438355256445e-04, 0.000000000000000e+00, -3.189420830651379e-04, -7.422213229224226e+00, 0.000000000000000e+00, -6.920190491794317e+00, -7.422213229224226e+00, 0.000000000000000e+00, -6.920190491794317e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -4.209243110194561e+01, 0.000000000000000e+00, -4.090581636104052e+01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -3.722172616848376e-02, 0.000000000000000e+00, -3.667061734828566e-02, -3.689662349032773e-02, 0.000000000000000e+00, -3.636195179981275e-02, -3.701636164155431e-02, 0.000000000000000e+00, -3.647655401967712e-02, -3.711323809919870e-02, 0.000000000000000e+00, -3.656708898683726e-02, -3.706558751219552e-02, 0.000000000000000e+00, -3.652246193918303e-02, -3.706558751219552e-02, 0.000000000000000e+00, -3.652246193918303e-02, -4.188722545667662e-02, 0.000000000000000e+00, -4.134087847454199e-02, -5.486898486393277e-02, 0.000000000000000e+00, -5.414762427586742e-02, -5.104063331689862e-02, 0.000000000000000e+00, -5.035143295860364e-02, -4.755342121476638e-02, 0.000000000000000e+00, -4.694627996374029e-02, -4.938715367232204e-02, 0.000000000000000e+00, -4.873077454162372e-02, -4.938715367232204e-02, 0.000000000000000e+00, -4.873077454162372e-02, -2.156888629532973e-02, 0.000000000000000e+00, -2.148061924412388e-02, -7.341935147439220e-01, 0.000000000000000e+00, -7.225134973756604e-01, -4.402720742031996e-01, 0.000000000000000e+00, -4.299791512420855e-01, -2.106886911851608e-01, 0.000000000000000e+00, -2.068631720629266e-01, -3.040455001014059e-01, 0.000000000000000e+00, -3.055326895822487e-01, -3.040455001014059e-01, 0.000000000000000e+00, -3.055326895822484e-01, -7.599582451124083e-02, 0.000000000000000e+00, -7.451672350720188e-02, -1.681145966496715e+02, 0.000000000000000e+00, -1.650048948920301e+02, -7.345344102207412e+01, 0.000000000000000e+00, -6.752179631280907e+01, -2.740483381984135e-01, 0.000000000000000e+00, -2.610752493177192e-01, -2.352950315147181e+01, 0.000000000000000e+00, -2.152678691985445e+01, -2.352950315147180e+01, 0.000000000000000e+00, -2.152678691985445e+01, -9.416660742635471e+03, 0.000000000000000e+00, -8.561327522284853e+03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -2.734822833703337e+01, 0.000000000000000e+00, -2.601111531039786e+01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
