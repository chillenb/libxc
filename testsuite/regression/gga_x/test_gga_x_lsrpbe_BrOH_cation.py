
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_lsrpbe_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_lsrpbe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.098136588559581e+01, -2.098139143303305e+01, -2.098157595662813e+01, -2.098119440793332e+01, -2.098138424339147e+01, -2.098138424339147e+01, -3.484090128154638e+00, -3.484048221431288e+00, -3.483165137966525e+00, -3.485362618115316e+00, -3.484124148804448e+00, -3.484124148804448e+00, -7.025740403810996e-01, -7.027003782449843e-01, -7.081675099744851e-01, -7.127827653603296e-01, -7.136113006628095e-01, -7.136113006628095e-01, -2.255167749404771e-01, -2.261068906371225e-01, -8.104561762251061e-01, -1.934388331275249e-01, -2.202740575559466e-01, -2.202740575559464e-01, -2.306849096277708e-10, -2.239164227114369e-09, -2.995123169964232e-02, 0.000000000000000e+00, -2.320396123231532e-13, -2.320396123231532e-13, -5.039702492915524e+00, -5.039013656637635e+00, -5.039681887582406e+00, -5.039073585369184e+00, -5.039347087167840e+00, -5.039347087167840e+00, -2.141962694223988e+00, -2.150968845029380e+00, -2.145606625126605e+00, -2.153520676392672e+00, -2.145237831986502e+00, -2.145237831986502e+00, -5.820895376830898e-01, -6.029419567110506e-01, -5.435702320139992e-01, -5.378083280064203e-01, -5.882716841610457e-01, -5.882716841610458e-01, -1.373339914951568e-01, -2.453159461919253e-01, -1.258646994197723e-01, -1.813936386387300e+00, -1.622875855680398e-01, -1.622875855680398e-01, 0.000000000000000e+00, 0.000000000000000e+00, -2.159691331329617e-18, -7.582405684265373e-02, -5.022168738201941e-16, -5.022168738201943e-16, -5.507804507889509e-01, -5.540139278136837e-01, -5.528840666801588e-01, -5.519385098045371e-01, -5.524112943044781e-01, -5.524112943044781e-01, -5.339898757356550e-01, -5.141637022982906e-01, -5.188479257577636e-01, -5.238185117225246e-01, -5.209821860482624e-01, -5.209821860482624e-01, -6.332664807961763e-01, -2.894576310608805e-01, -3.208038127293643e-01, -3.691704946081080e-01, -3.422011059084760e-01, -3.422011059084760e-01, -4.746814568185891e-01, -2.584854649950918e-02, -5.096871730357468e-02, -3.440177872842826e-01, -1.068752431666090e-01, -1.068752431666090e-01, -6.359427408408465e-07, 0.000000000000000e+00, 0.000000000000000e+00, -9.856751384272536e-02, -2.962908390696154e-18, -2.962908390696152e-18])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_lsrpbe_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_lsrpbe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.501328749292308e+01, -2.501325865695696e+01, -2.501341059752692e+01, -2.501334806361072e+01, -2.501376382112242e+01, -2.501386557804822e+01, -2.501237460611579e+01, -2.501209457358183e+01, -2.501336296588261e+01, -2.501277262182365e+01, -2.501336296588261e+01, -2.501277262182365e+01, -3.999758506481696e+00, -4.000024925145461e+00, -3.999811207133255e+00, -4.000090316071341e+00, -4.001218033693789e+00, -4.001610327921572e+00, -3.999425322982062e+00, -3.999834553863912e+00, -3.998963171252022e+00, -4.001154057360639e+00, -3.998963171252022e+00, -4.001154057360639e+00, -7.405394803378352e-01, -7.466425409834485e-01, -7.383232757322692e-01, -7.457835766926602e-01, -7.100214562782546e-01, -7.008023652696067e-01, -7.105070670485191e-01, -7.135116798466019e-01, -7.572416096335911e-01, -6.690796403685627e-01, -7.572416096335911e-01, -6.690796403685627e-01, -1.900195512313990e-01, -1.929139531813105e-01, -1.896538299970633e-01, -1.938343931341793e-01, -8.525946421889231e-01, -8.961290454434261e-01, -1.985062529521738e-01, -1.992401436279459e-01, -1.970861647816101e-01, -2.008107011630902e-01, -1.970861647816099e-01, -2.008107011630900e-01, -2.305838034371406e-09, -1.814276969909764e-08, -1.884905663550635e-08, -1.532428618077313e-07, -9.027000822114775e-02, -9.645947978859662e-02, -6.031094895213207e-25, -4.180390010672979e-26, -1.808619299040526e-11, -2.654779818814252e-21, -1.808619299040581e-11, -2.654779818814252e-21, -6.183013730455089e+00, -6.181454708661092e+00, -6.186088632096577e+00, -6.184425503899417e+00, -6.183182255596729e+00, -6.181555145802520e+00, -6.185820756170519e+00, -6.184254018850575e+00, -6.184590732573965e+00, -6.182947304934404e+00, -6.184590732573965e+00, -6.182947304934404e+00, -2.106753959990265e+00, -2.106637547073473e+00, -2.126015864322908e+00, -2.125347522690023e+00, -2.084345617863039e+00, -2.090653931080679e+00, -2.100790657287381e+00, -2.107308020836554e+00, -2.134679258497503e+00, -2.118818316598199e+00, -2.134679258497503e+00, -2.118818316598199e+00, -6.816965272442389e-01, -6.800000926023098e-01, -7.734821155648033e-01, -7.742526098601781e-01, -6.118753232700384e-01, -6.379029208347154e-01, -6.695501752423006e-01, -6.913157819142626e-01, -7.141834250960776e-01, -6.769938970642297e-01, -7.141834250960776e-01, -6.769938970642300e-01, -2.085765022690356e-01, -2.086563054075388e-01, -2.262467787944709e-01, -2.263760120386620e-01, -1.961830455921281e-01, -2.019414108369669e-01, -2.333598293856046e+00, -2.332615401005810e+00, -2.066408340454916e-01, -1.899819951536426e-01, -2.066408340454916e-01, -1.899819951536426e-01, -5.668917019989865e-37, -8.729686155988026e-37, -1.513480095842997e-24, -9.020908593593631e-25, -7.604638230820415e-19, -3.896108689318363e-16, -1.463119729072524e-01, -1.473039986975019e-01, -4.248069236068324e-25, -5.621821459363945e-14, -4.248070196373241e-25, -5.621821459363814e-14, -7.232501031313000e-01, -7.261872896350934e-01, -7.108244180508926e-01, -7.138479792223145e-01, -7.151401094924843e-01, -7.181614635328263e-01, -7.187789753878673e-01, -7.217216634101318e-01, -7.169558593263587e-01, -7.199366273605622e-01, -7.169558593263587e-01, -7.199366273605622e-01, -7.063435934984934e-01, -7.086982849706451e-01, -5.456799687865950e-01, -5.486206919450173e-01, -5.891188329132943e-01, -5.924332864258071e-01, -6.355103340275675e-01, -6.379824721137105e-01, -6.119859938948594e-01, -6.145261321422345e-01, -6.119859938948594e-01, -6.145261321422345e-01, -8.088412720704500e-01, -8.108351256562113e-01, -2.465349614136061e-01, -2.470705348176523e-01, -2.763943824938907e-01, -2.786697220757217e-01, -3.802996976449561e-01, -3.827482769558076e-01, -3.203026850707264e-01, -3.203381525859568e-01, -3.203026850707263e-01, -3.203381525859568e-01, -5.004273442848546e-01, -5.048822846722080e-01, -8.746667315792316e-02, -8.828134162335759e-02, -1.212690232400046e-01, -1.249077204344829e-01, -3.741096229136067e-01, -3.809326889778495e-01, -1.719731922196951e-01, -1.742068807151589e-01, -1.719731922196951e-01, -1.742068807151589e-01, -1.087521340352344e-05, -2.384818986720966e-05, -4.551047400290546e-174, -1.912663809175799e-130, -4.534707798756975e-54, -1.811787789382725e-46, -1.656432959522233e-01, -1.677262289869245e-01, -8.080223544779639e-20, -3.991071983428413e-16, -8.080223544779359e-20, -3.991071983428302e-16])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_lsrpbe_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_lsrpbe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.499798718951659e-08, 0.000000000000000e+00, -1.499806793366315e-08, -1.499783714246101e-08, 0.000000000000000e+00, -1.499795890299736e-08, -1.499726034385891e-08, 0.000000000000000e+00, -1.499715948921147e-08, -1.499895735464918e-08, 0.000000000000000e+00, -1.499932171445341e-08, -1.499790258543317e-08, 0.000000000000000e+00, -1.499838617257956e-08, -1.499790258543317e-08, 0.000000000000000e+00, -1.499838617257956e-08, -2.066112789050250e-05, 0.000000000000000e+00, -2.066541378344420e-05, -2.066126503815806e-05, 0.000000000000000e+00, -2.066591177283702e-05, -2.066822685497424e-05, 0.000000000000000e+00, -2.066956808329767e-05, -2.064281457502775e-05, 0.000000000000000e+00, -2.064513093896376e-05, -2.067370709322156e-05, 0.000000000000000e+00, -2.064962041364766e-05, -2.067370709322156e-05, 0.000000000000000e+00, -2.064962041364766e-05, -1.381271171957438e-02, 0.000000000000000e+00, -1.374322780579077e-02, -1.384686734701407e-02, 0.000000000000000e+00, -1.376226154377798e-02, -1.428090344496254e-02, 0.000000000000000e+00, -1.436374824976722e-02, -1.392090205717984e-02, 0.000000000000000e+00, -1.390000130730267e-02, -1.353837484079098e-02, 0.000000000000000e+00, -1.401868710718539e-02, -1.353837484079098e-02, 0.000000000000000e+00, -1.401868710718539e-02, -1.667203187199719e+00, 0.000000000000000e+00, -1.571558754093942e+00, -1.678806221305716e+00, 0.000000000000000e+00, -1.555483113343250e+00, -7.977881888552462e-03, 0.000000000000000e+00, -7.269365451207104e-03, -1.610860283086060e+00, 0.000000000000000e+00, -1.591961448812798e+00, -1.439351451780570e+00, 0.000000000000000e+00, 5.502551445792929e-01, -1.439351451780569e+00, 0.000000000000000e+00, 5.502551445792859e-01, 7.324912075644948e-04, 0.000000000000000e+00, 4.765056644654755e-03, 5.325346931848851e-03, 0.000000000000000e+00, 3.499071570175229e-02, 6.919279606715138e+01, 0.000000000000000e+00, 6.017694548752019e+01, 8.653463096009846e-19, 0.000000000000000e+00, 6.221830391370644e-20, 8.125892465134358e-06, 0.000000000000000e+00, 1.051788162696104e-14, 8.125892465134617e-06, 0.000000000000000e+00, 1.051788162696177e-14, -4.345399220256012e-06, 0.000000000000000e+00, -4.349476559227921e-06, -4.344334214871918e-06, 0.000000000000000e+00, -4.348447639857625e-06, -4.345313189232372e-06, 0.000000000000000e+00, -4.349421947360151e-06, -4.344399758459306e-06, 0.000000000000000e+00, -4.348487539866971e-06, -4.344875266149625e-06, 0.000000000000000e+00, -4.348963910054678e-06, -4.344875266149625e-06, 0.000000000000000e+00, -4.348963910054678e-06, -1.736141587411364e-04, 0.000000000000000e+00, -1.736460513072883e-04, -1.697346533302923e-04, 0.000000000000000e+00, -1.698925600805111e-04, -1.747101018547200e-04, 0.000000000000000e+00, -1.744707190773656e-04, -1.713769704814629e-04, 0.000000000000000e+00, -1.710605619155059e-04, -1.704781518700674e-04, 0.000000000000000e+00, -1.715526977178927e-04, -1.704781518700674e-04, 0.000000000000000e+00, -1.715526977178927e-04, -2.578081224480434e-02, 0.000000000000000e+00, -2.606316548798398e-02, -2.004371908250838e-02, 0.000000000000000e+00, -2.002339757639864e-02, -3.733446693943458e-02, 0.000000000000000e+00, -3.265563077201193e-02, -3.452680531131746e-02, 0.000000000000000e+00, -3.026325944972153e-02, -2.232249238406365e-02, 0.000000000000000e+00, -2.727428482408651e-02, -2.232249238406365e-02, 0.000000000000000e+00, -2.727428482408651e-02, 1.802163927388894e+00, 0.000000000000000e+00, 1.637718011571754e+00, -9.173419277304056e-01, 0.000000000000000e+00, -9.125323322643125e-01, 3.211626016314632e+00, 0.000000000000000e+00, 2.372792738116508e+00, -2.436621672128914e-04, 0.000000000000000e+00, -2.441106369762814e-04, -2.247865215189563e-01, 0.000000000000000e+00, -1.598584711089109e+00, -2.247865215189563e-01, 0.000000000000000e+00, -1.598584711089109e+00, 2.282288915751621e-30, 0.000000000000000e+00, 2.913142176983637e-30, 2.680323105342824e-18, 0.000000000000000e+00, 1.467416057283953e-18, 7.688379635877860e-12, 0.000000000000000e+00, 3.450555197149321e-09, 1.472981252848165e+01, 0.000000000000000e+00, 1.435186803038067e+01, 2.842219388196952e-18, 0.000000000000000e+00, 1.416053106769685e-07, 2.842219388196709e-18, 0.000000000000000e+00, 1.416053106769651e-07, -2.807353506146259e-02, 0.000000000000000e+00, -2.765122463437094e-02, -2.825350071784419e-02, 0.000000000000000e+00, -2.783075113550532e-02, -2.819076349300822e-02, 0.000000000000000e+00, -2.776780053687953e-02, -2.813886803783389e-02, 0.000000000000000e+00, -2.771670573924918e-02, -2.816498725359229e-02, 0.000000000000000e+00, -2.774239406478686e-02, -2.816498725359229e-02, 0.000000000000000e+00, -2.774239406478686e-02, -3.145700148812072e-02, 0.000000000000000e+00, -3.104567606754383e-02, -4.808009068844293e-02, 0.000000000000000e+00, -4.737906452660327e-02, -4.276816407500447e-02, 0.000000000000000e+00, -4.211428813045104e-02, -3.793377647570035e-02, 0.000000000000000e+00, -3.742787227206709e-02, -4.036294727667711e-02, 0.000000000000000e+00, -3.979949719233632e-02, -4.036294727667711e-02, 0.000000000000000e+00, -3.979949719233632e-02, -1.658394514744620e-02, 0.000000000000000e+00, -1.649675372777700e-02, -5.896672760867893e-01, 0.000000000000000e+00, -5.839475546312934e-01, -3.996009415805628e-01, 0.000000000000000e+00, -3.920094941451978e-01, -1.876894688003855e-01, 0.000000000000000e+00, -1.840671191702721e-01, -2.810961832013998e-01, 0.000000000000000e+00, -2.823832300680767e-01, -2.810961832014002e-01, 0.000000000000000e+00, -2.823832300680769e-01, -6.683087330408094e-02, 0.000000000000000e+00, -6.535113066814738e-02, 7.002277537015803e+01, 0.000000000000000e+00, 6.891769687413574e+01, 3.055118789856970e+01, 0.000000000000000e+00, 2.767960939002879e+01, -2.358634175065463e-01, 0.000000000000000e+00, -2.236788230429539e-01, 6.357491030445453e+00, 0.000000000000000e+00, 4.523100057803001e+00, 6.357491030445449e+00, 0.000000000000000e+00, 4.523100057803001e+00, 1.030345970714073e+00, 0.000000000000000e+00, 2.044089691874494e+00, 7.820685722073897e-166, 0.000000000000000e+00, 4.344689301197844e-122, 7.267848121565547e-47, 0.000000000000000e+00, 2.490311608837420e-39, 7.599351285114244e+00, 0.000000000000000e+00, 7.087338053419575e+00, 9.135167063119404e-13, 0.000000000000000e+00, 1.333271444570374e-09, 9.135167063119106e-13, 0.000000000000000e+00, 1.333271444570342e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
