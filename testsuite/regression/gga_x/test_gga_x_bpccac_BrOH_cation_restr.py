
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_bpccac_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_bpccac", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.097384751685439e+01, -2.097387344805846e+01, -2.097405902218688e+01, -2.097367177508550e+01, -2.097386468599749e+01, -2.097386468599749e+01, -3.481911139803089e+00, -3.481869999185825e+00, -3.481004600187805e+00, -3.483170875143655e+00, -3.481945747751914e+00, -3.481945747751914e+00, -7.015714443956628e-01, -7.016742053851113e-01, -7.066247887410581e-01, -7.112812729722352e-01, -7.093274627929405e-01, -7.093274627929405e-01, -2.250399877924391e-01, -2.254602018665691e-01, -8.089651982705323e-01, -1.920992776192957e-01, -2.077402313815530e-01, -2.077402313815530e-01, -1.576700652368416e-04, -1.898573153777213e-04, -2.464247961459588e-02, -2.800295251667503e-05, -6.357651425955358e-05, -6.357651425955396e-05, -5.038682822513699e+00, -5.038008975978942e+00, -5.038662830682354e+00, -5.038067778897199e+00, -5.038335066995539e+00, -5.038335066995539e+00, -2.137034589553922e+00, -2.146152161233607e+00, -2.140363983836067e+00, -2.148376322877625e+00, -2.140493906961934e+00, -2.140493906961934e+00, -5.818026661900330e-01, -6.029142735054860e-01, -5.429197179105028e-01, -5.374878247054339e-01, -5.873509549551003e-01, -5.873509549551003e-01, -1.389852858171161e-01, -2.468779673341361e-01, -1.282009419519055e-01, -1.813865843272336e+00, -1.582695078375222e-01, -1.582695078375222e-01, -1.464303951367245e-05, -2.840631375719993e-05, -3.213786977957786e-05, -7.625402938904124e-02, -3.831927000571527e-05, -3.831927000571487e-05, -5.507732684107380e-01, -5.539877318160715e-01, -5.528664692420413e-01, -5.519265532884959e-01, -5.523967011603568e-01, -5.523967011603568e-01, -5.339860344960849e-01, -5.134660443275715e-01, -5.184837925519197e-01, -5.236856968435856e-01, -5.207490785922774e-01, -5.207490785922774e-01, -6.332276697371616e-01, -2.892263323974453e-01, -3.196556663759540e-01, -3.685437755527378e-01, -3.411915047616498e-01, -3.411915047616498e-01, -4.739980747664952e-01, -2.101675919999544e-02, -4.636456076954192e-02, -3.436121770622347e-01, -1.093036115511971e-01, -1.093036115511971e-01, -4.068731063152578e-04, -1.165380610699761e-06, -7.618463091699181e-06, -1.012614981989121e-01, -3.408374772918926e-05, -3.408374772918932e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_bpccac_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_bpccac", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.503961693676900e+01, -2.503972196266687e+01, -2.504015397780832e+01, -2.503859212377676e+01, -2.503941546546256e+01, -2.503941546546256e+01, -4.007088586614615e+00, -4.007145421988009e+00, -4.008557980938041e+00, -4.006863608523503e+00, -4.007253326236605e+00, -4.007253326236605e+00, -7.463390587290964e-01, -7.448345444721080e-01, -7.087738097933560e-01, -7.153941529560702e-01, -7.145786099892008e-01, -7.145786099892008e-01, -1.848455235607772e-01, -1.863972599901714e-01, -8.776258684846303e-01, -2.576727869839316e-01, -1.778748949653793e-01, -1.778748949653793e-01, -6.449299471966682e-04, -7.772220611104993e-04, -8.640588919286468e-02, -1.137242024050027e-04, -2.590962847028018e-04, -2.590962847028046e-04, -6.185948459117766e+00, -6.188919630310356e+00, -6.186080816240207e+00, -6.188703846033695e+00, -6.187456890531562e+00, -6.187456890531562e+00, -2.116997784676462e+00, -2.136011199932208e+00, -2.097764649833930e+00, -2.114387862189178e+00, -2.137021728525596e+00, -2.137021728525596e+00, -6.818130381667215e-01, -7.739699471685966e-01, -6.262343050565287e-01, -6.807534288918879e-01, -6.968308884738061e-01, -6.968308884738061e-01, -1.863591759459378e-01, -2.208437091776426e-01, -1.856211081077525e-01, -2.333378085945613e+00, -1.746165602740223e-01, -1.746165602740223e-01, -5.934582717152993e-05, -1.153860567534342e-04, -1.308423364115347e-04, -1.693835193861437e-01, -1.559988360632442e-04, -1.559988360632457e-04, -7.247335431556671e-01, -7.124240176845181e-01, -7.167058639062655e-01, -7.202838235416997e-01, -7.184898581092650e-01, -7.184898581092650e-01, -7.075258531520028e-01, -5.491046516242748e-01, -5.919500926638751e-01, -6.372155558135152e-01, -6.140483029492741e-01, -6.140483029492741e-01, -8.099717126388152e-01, -2.363422771429612e-01, -2.757536600949370e-01, -3.831311467199564e-01, -3.217194232986730e-01, -3.217194232986730e-01, -5.045176168927666e-01, -7.597755543067214e-02, -1.382682553425267e-01, -3.786344266776880e-01, -1.661025773158448e-01, -1.661025773158447e-01, -1.669740074004142e-03, -4.696009957069430e-06, -3.083052567453312e-05, -1.681074628814271e-01, -1.387228808747841e-04, -1.387228808747827e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_bpccac_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_bpccac", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-7.406934881793831e-09, -7.406873072663572e-09, -7.406539395861851e-09, -7.407460216324567e-09, -7.406986085883566e-09, -7.406986085883566e-09, -1.016995945890365e-05, -1.017013875950378e-05, -1.017328436541166e-05, -1.016009256116260e-05, -1.016919384378837e-05, -1.016919384378837e-05, -6.744393507610792e-03, -6.756871191144584e-03, -7.000591019935211e-03, -6.798249380530151e-03, -6.861076049832069e-03, -6.861076049832069e-03, -8.543575820718472e-01, -8.417422007765415e-01, -3.731821500897672e-03, 2.089849416915456e-02, -1.076347309288308e+00, -1.076347309288309e+00, 6.423453028406405e+01, 6.827557267286490e+01, 3.210900316296982e+01, 5.580651435353528e+01, 7.237579484253675e+01, 7.237579484253581e+01, -2.153195509041651e-06, -2.152817455265771e-06, -2.153166477701703e-06, -2.152832913283209e-06, -2.153010376423257e-06, -2.153010376423257e-06, -8.486004280190193e-05, -8.299064379451259e-05, -8.534851419239958e-05, -8.369180232165010e-05, -8.357974030260830e-05, -8.357974030260830e-05, -1.277881054920922e-02, -9.971614878026225e-03, -1.716006457367577e-02, -1.603802564087776e-02, -1.213063583399531e-02, -1.213063583399531e-02, 3.521887281243118e-02, -4.917548087648328e-01, 6.403289881907432e-01, -1.214224360441621e-04, -9.449719137423589e-01, -9.449719137423589e-01, 7.269492161399923e+01, 6.575689945411170e+01, 4.185134430924850e+02, 1.076779836113769e+01, 1.946856773358447e+02, 1.946856773358425e+02, -1.390819752437270e-02, -1.395998451599490e-02, -1.394176307912244e-02, -1.392710285981440e-02, -1.393449330418072e-02, -1.393449330418072e-02, -1.561313434291941e-02, -2.336787145374783e-02, -2.087329291659671e-02, -1.864431637282857e-02, -1.976994375801373e-02, -1.976994375801373e-02, -8.229497749608836e-03, -3.148125262007108e-01, -1.982369525165640e-01, -9.088980383381932e-02, -1.380344470141075e-01, -1.380344470141075e-01, -3.234888456727271e-02, 3.118379491352768e+01, 2.010733808804065e+01, -1.126470652170311e-01, 1.780248856253571e+00, 1.780248856253568e+00, 5.325140751812767e+01, 3.090611879166421e+02, 1.529736577601874e+02, 3.439679345677111e+00, 2.455564165290370e+02, 2.455564165290361e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
