
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_pbeint_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbeint", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.049949947039377e+01, -2.049953668560411e+01, -2.049975179314536e+01, -2.049919708858268e+01, -2.049948068119581e+01, -2.049948068119581e+01, -3.379233800319957e+00, -3.379210469038413e+00, -3.378754232111234e+00, -3.380189647522329e+00, -3.379287553171063e+00, -3.379287553171063e+00, -6.712106897660250e-01, -6.710591391650120e-01, -6.692500047609327e-01, -6.739438602750230e-01, -6.751964397003272e-01, -6.751964397003272e-01, -2.054753373312530e-01, -2.063185615037557e-01, -7.771504624341783e-01, -1.770404844765056e-01, -2.017014419051474e-01, -2.017014419051473e-01, -1.010592498259236e-02, -1.064148286970194e-02, -5.774367882009868e-02, -5.829079560074436e-03, -8.134593578713666e-03, -8.134593578713666e-03, -4.952129146624753e+00, -4.952079003767084e+00, -4.952134787495410e+00, -4.952090378438490e+00, -4.952099246274364e+00, -4.952099246274364e+00, -2.019671547886886e+00, -2.029885252097566e+00, -2.019208211182774e+00, -2.028176130721082e+00, -2.025623668787262e+00, -2.025623668787262e+00, -5.666046549972967e-01, -5.980271763241019e-01, -5.274615120285644e-01, -5.319097010081313e-01, -5.740651927918695e-01, -5.740651927918696e-01, -1.378557361377948e-01, -2.228711171347604e-01, -1.291434319322686e-01, -1.799956498150186e+00, -1.523021520772083e-01, -1.523021520772083e-01, -4.500491149515838e-03, -5.698239620102147e-03, -4.363370608928545e-03, -9.066088039267839e-02, -5.480938442622639e-03, -5.480938442622641e-03, -5.491994508120542e-01, -5.497059541599492e-01, -5.495257797853241e-01, -5.493740922196861e-01, -5.494491216375050e-01, -5.494491216375050e-01, -5.332584910612261e-01, -4.916961160510545e-01, -5.024452162454720e-01, -5.137739247470587e-01, -5.077509014799892e-01, -5.077509014799892e-01, -6.276241499382270e-01, -2.633310066169560e-01, -2.950914530608529e-01, -3.511797855935856e-01, -3.198182333876249e-01, -3.198182333876249e-01, -4.535360525801359e-01, -5.530798466283691e-02, -7.448548736733124e-02, -3.308567000746949e-01, -1.112863452202745e-01, -1.112863452202745e-01, -1.423855237248408e-02, -1.523266761644660e-03, -3.203227948443612e-03, -1.055387208237920e-01, -5.033450731851147e-03, -5.033450731851143e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_pbeint_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbeint", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.553981633117329e+01, -2.553978580050468e+01, -2.553992839204842e+01, -2.553986719171828e+01, -2.554026366386528e+01, -2.554035411609696e+01, -2.553899871678214e+01, -2.553874164099753e+01, -2.553988433981960e+01, -2.553936910877005e+01, -2.553988433981960e+01, -2.553936910877005e+01, -4.105552118351038e+00, -4.105736768127905e+00, -4.105595095350416e+00, -4.105787104168148e+00, -4.106711772216551e+00, -4.107028399909380e+00, -4.105438368818473e+00, -4.105760942531696e+00, -4.104770729830221e+00, -4.106827355990538e+00, -4.104770729830221e+00, -4.106827355990538e+00, -7.663104417011442e-01, -7.721507960616540e-01, -7.641620925248239e-01, -7.713210150695228e-01, -7.359056765460136e-01, -7.263090813988023e-01, -7.364203375854625e-01, -7.395334141135261e-01, -7.822676903374527e-01, -6.894415305016394e-01, -7.822676903374527e-01, -6.894415305016394e-01, -1.821957916566933e-01, -1.880375526123247e-01, -1.836501984353222e-01, -1.908704889473509e-01, -8.819879229742721e-01, -9.242551299396621e-01, -1.621278429755498e-01, -1.634592077929528e-01, -1.898427828219658e-01, -1.456610990893575e-01, -1.898427828219657e-01, -1.456610990893574e-01, -1.301502085226373e-02, -1.382703179712833e-02, -1.363517451310331e-02, -1.460257296986666e-02, -7.252029501517782e-02, -7.614931746327062e-02, -7.832578699228472e-03, -7.702278588218564e-03, -1.161477313528725e-02, -6.613953871667207e-03, -1.161477313528725e-02, -6.613953871667207e-03, -6.284175857462905e+00, -6.282618926700210e+00, -6.286620420787134e+00, -6.284980717441529e+00, -6.284312364877635e+00, -6.282700578639511e+00, -6.286409980854027e+00, -6.284846184037701e+00, -6.285427814760955e+00, -6.283805374416597e+00, -6.285427814760955e+00, -6.283805374416597e+00, -2.183259076986812e+00, -2.183137843788638e+00, -2.203405007280087e+00, -2.202708793319921e+00, -2.159202841745655e+00, -2.166039244600617e+00, -2.176578974849562e+00, -2.183577949146979e+00, -2.212528041717477e+00, -2.195912681794589e+00, -2.212528041717477e+00, -2.195912681794589e+00, -6.979988174077907e-01, -6.962293092248075e-01, -7.797190253347336e-01, -7.803276664492667e-01, -6.283550490174019e-01, -6.540941933686915e-01, -6.765501854455001e-01, -6.987295839935344e-01, -7.296515842905473e-01, -6.921591992451555e-01, -7.296515842905473e-01, -6.921591992451556e-01, -1.496598814432684e-01, -1.497494815550030e-01, -1.985151829252732e-01, -1.990751718563497e-01, -1.412461733936799e-01, -1.449602506506540e-01, -2.351188949035860e+00, -2.350172258354352e+00, -1.522596749060662e-01, -1.471198946394312e-01, -1.522596749060662e-01, -1.471198946394312e-01, -5.877092591841794e-03, -6.107711403319587e-03, -7.536239917358739e-03, -7.650347063952320e-03, -5.634247347027044e-03, -5.965977443139186e-03, -1.093310782890879e-01, -1.101105280705484e-01, -5.755766490151652e-03, -7.900393726472795e-03, -5.755766490151653e-03, -7.900393726472799e-03, -7.253398810665531e-01, -7.282254825193735e-01, -7.162753657117851e-01, -7.192222651289139e-01, -7.194554244879475e-01, -7.224006077355961e-01, -7.221088299658616e-01, -7.249972715701359e-01, -7.207821813040148e-01, -7.236980156720794e-01, -7.207821813040148e-01, -7.236980156720794e-01, -7.073117336486906e-01, -7.096611364740071e-01, -5.643478105183133e-01, -5.672967035256468e-01, -6.054035232532331e-01, -6.086233455368634e-01, -6.469334404803579e-01, -6.493682590430961e-01, -6.260837022046570e-01, -6.286002801669773e-01, -6.260837022046570e-01, -6.286002801669773e-01, -8.159903255416973e-01, -8.177333519385936e-01, -2.350839794420536e-01, -2.361549472757619e-01, -2.786816304154596e-01, -2.817972356471243e-01, -3.939131437451016e-01, -3.964153645041364e-01, -3.308706632144000e-01, -3.309720223186042e-01, -3.308706632143998e-01, -3.309720223186043e-01, -5.177453181268208e-01, -5.222021678409018e-01, -7.143252955072357e-02, -7.187612364688208e-02, -9.272985683509707e-02, -9.521126353496717e-02, -3.860374163743140e-01, -3.928258496685198e-01, -1.246925597741169e-01, -1.251139110244422e-01, -1.246925597741169e-01, -1.251139110244422e-01, -1.859066639301495e-02, -1.925947004584786e-02, -2.028592754027286e-03, -2.033172063890620e-03, -4.126940842823091e-03, -4.389135537516847e-03, -1.203642157714510e-01, -1.216886832005122e-01, -5.450991534078155e-03, -7.242462134804536e-03, -5.450991534078149e-03, -7.242462134804530e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_pbeint_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbeint", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-9.078475164081581e-09, 0.000000000000000e+00, -9.078522444761004e-09, -9.078364347482266e-09, 0.000000000000000e+00, -9.078441935719387e-09, -9.077977986060324e-09, 0.000000000000000e+00, -9.077897225145082e-09, -9.079230306607670e-09, 0.000000000000000e+00, -9.079493177339528e-09, -9.078410678868514e-09, 0.000000000000000e+00, -9.078831760232783e-09, -9.078410678868514e-09, 0.000000000000000e+00, -9.078831760232783e-09, -1.280264026891913e-05, 0.000000000000000e+00, -1.280395874072907e-05, -1.280255781429849e-05, 0.000000000000000e+00, -1.280401472612752e-05, -1.280195018732477e-05, 0.000000000000000e+00, -1.280149069744189e-05, -1.279473155710832e-05, 0.000000000000000e+00, -1.279469710062399e-05, -1.281096238256868e-05, 0.000000000000000e+00, -1.279314568762269e-05, -1.281096238256868e-05, 0.000000000000000e+00, -1.279314568762269e-05, -9.014940637148984e-03, 0.000000000000000e+00, -8.916945445496701e-03, -9.055459889184627e-03, 0.000000000000000e+00, -8.935393474529148e-03, -9.591342746211977e-03, 0.000000000000000e+00, -9.743888041222264e-03, -9.395351121885833e-03, 0.000000000000000e+00, -9.350352770816741e-03, -8.707184673439968e-03, 0.000000000000000e+00, -9.979968018169047e-03, -8.707184673439968e-03, 0.000000000000000e+00, -9.979968018169047e-03, -1.374058574207039e+00, 0.000000000000000e+00, -1.261149560424692e+00, -1.361645981318763e+00, 0.000000000000000e+00, -1.227459946430574e+00, -5.190618554788025e-03, 0.000000000000000e+00, -4.623872691194433e-03, -2.020871016011405e+00, 0.000000000000000e+00, -1.954742109087824e+00, -1.177447042138360e+00, 0.000000000000000e+00, -2.880388104893658e+00, -1.177447042138360e+00, 0.000000000000000e+00, -2.880388104893661e+00, -4.908862722797289e+00, 0.000000000000000e+00, -4.860597474833395e+00, -5.173238959418206e+00, 0.000000000000000e+00, -5.148087411417635e+00, -2.972990228755282e+00, 0.000000000000000e+00, -3.001483509839409e+00, -4.491696499017413e+00, 0.000000000000000e+00, -4.369654773644079e+00, -4.899081311997456e+00, 0.000000000000000e+00, -1.242289553813449e+01, -4.899081311997467e+00, 0.000000000000000e+00, -1.242289553813452e+01, -2.583119723166937e-06, 0.000000000000000e+00, -2.585586316283939e-06, -2.581433730365725e-06, 0.000000000000000e+00, -2.583956021845047e-06, -2.583014697580087e-06, 0.000000000000000e+00, -2.585522155110225e-06, -2.581568174559421e-06, 0.000000000000000e+00, -2.584041231708615e-06, -2.582265057802646e-06, 0.000000000000000e+00, -2.584769073169846e-06, -2.582265057802646e-06, 0.000000000000000e+00, -2.584769073169846e-06, -1.181043888687427e-04, 0.000000000000000e+00, -1.181270433321474e-04, -1.151201642049720e-04, 0.000000000000000e+00, -1.152354327319912e-04, -1.198028232875650e-04, 0.000000000000000e+00, -1.193568155283584e-04, -1.172028902264896e-04, 0.000000000000000e+00, -1.167168029550672e-04, -1.151109944676065e-04, 0.000000000000000e+00, -1.164265436608593e-04, -1.151109944676065e-04, 0.000000000000000e+00, -1.164265436608593e-04, -1.579340724415914e-02, 0.000000000000000e+00, -1.596307114210993e-02, -1.157224425115775e-02, 0.000000000000000e+00, -1.155209169204161e-02, -2.318739086001379e-02, 0.000000000000000e+00, -2.013548355930566e-02, -2.009675843948769e-02, 0.000000000000000e+00, -1.763146678493042e-02, -1.354557636195871e-02, 0.000000000000000e+00, -1.660121936247680e-02, -1.354557636195871e-02, 0.000000000000000e+00, -1.660121936247680e-02, -2.276417609105651e+00, 0.000000000000000e+00, -2.317472306211164e+00, -8.978941847223695e-01, 0.000000000000000e+00, -8.882613292518207e-01, -2.543243142606179e+00, 0.000000000000000e+00, -2.483451056324293e+00, -1.404308568547340e-04, 0.000000000000000e+00, -1.406840037233861e-04, -2.516395453820128e+00, 0.000000000000000e+00, -2.986774243442296e+00, -2.516395453820128e+00, 0.000000000000000e+00, -2.986774243442296e+00, -6.304361393714172e+00, 0.000000000000000e+00, -5.456655172793528e+00, -5.429608992060150e+00, 0.000000000000000e+00, -5.013004562918781e+00, -3.093336255813942e+01, 0.000000000000000e+00, -3.441601192571343e+01, -3.616073833731386e+00, 0.000000000000000e+00, -3.482674951107622e+00, -1.537957312672426e+01, 0.000000000000000e+00, -1.511382704892318e+01, -1.537957312672420e+01, 0.000000000000000e+00, -1.511382704892316e+01, -1.593493963785600e-02, 0.000000000000000e+00, -1.569104987973003e-02, -1.629057139848724e-02, 0.000000000000000e+00, -1.603931241939875e-02, -1.616634799778345e-02, 0.000000000000000e+00, -1.591689161332830e-02, -1.606254109706018e-02, 0.000000000000000e+00, -1.581670440137590e-02, -1.611454424061111e-02, 0.000000000000000e+00, -1.586691325534885e-02, -1.611454424061111e-02, 0.000000000000000e+00, -1.586691325534885e-02, -1.776876290134136e-02, 0.000000000000000e+00, -1.753575045960022e-02, -3.120807576290902e-02, 0.000000000000000e+00, -3.070866685019288e-02, -2.665388299215528e-02, 0.000000000000000e+00, -2.620595607280108e-02, -2.268681713173375e-02, 0.000000000000000e+00, -2.237334749453784e-02, -2.463360411436471e-02, 0.000000000000000e+00, -2.427602013413414e-02, -2.463360411436471e-02, 0.000000000000000e+00, -2.427602013413414e-02, -9.599806399081395e-03, 0.000000000000000e+00, -9.538656544921687e-03, -4.903813143798550e-01, 0.000000000000000e+00, -4.837411251656494e-01, -3.020971593001390e-01, 0.000000000000000e+00, -2.945532570550289e-01, -1.239695543698855e-01, 0.000000000000000e+00, -1.214179199120740e-01, -1.975867377140386e-01, 0.000000000000000e+00, -1.982550282804356e-01, -1.975867377140388e-01, 0.000000000000000e+00, -1.982550282804356e-01, -4.353531927814638e-02, 0.000000000000000e+00, -4.245373977707499e-02, -2.712199135638355e+00, 0.000000000000000e+00, -2.716611558909384e+00, -2.734529966830672e+00, 0.000000000000000e+00, -2.804347966775671e+00, -1.504958986022497e-01, 0.000000000000000e+00, -1.421335508380971e-01, -3.708578061868900e+00, 0.000000000000000e+00, -4.390917101142754e+00, -3.708578061868903e+00, 0.000000000000000e+00, -4.390917101142754e+00, -3.895144312555916e+00, 0.000000000000000e+00, -3.977355518731577e+00, -1.939179863465969e+01, 0.000000000000000e+00, -3.435049353361417e+01, -1.197033294315444e+01, 0.000000000000000e+00, -1.274374337522078e+01, -4.129511552304670e+00, 0.000000000000000e+00, -4.049037532157374e+00, -3.171306879938829e+01, 0.000000000000000e+00, -1.568779809240774e+01, -3.171306879938833e+01, 0.000000000000000e+00, -1.568779809240778e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
