
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_ev93_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ev93", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.093810549874053e+01, -2.093812246413362e+01, -2.093828237301833e+01, -2.093802825587018e+01, -2.093814938573478e+01, -2.093814938573478e+01, -3.499246665354937e+00, -3.499185620627026e+00, -3.497861673502818e+00, -3.500830103326440e+00, -3.499258191938105e+00, -3.499258191938105e+00, -7.205028119516359e-01, -7.211277980420773e-01, -7.409306539567291e-01, -7.450005540431144e-01, -7.475644931228209e-01, -7.475644931228209e-01, -2.596547976167022e-01, -2.588429428145359e-01, -8.264053573225654e-01, -2.351995068397829e-01, -2.565481431749399e-01, -2.565481431749398e-01, -8.721490127649615e-03, -9.195730191237268e-03, -5.902311304259500e-02, -4.998221951652613e-03, -7.001126581732503e-03, -7.001126581732503e-03, -5.014525524401854e+00, -5.013624548072608e+00, -5.014496017308880e+00, -5.013700339826293e+00, -5.014061414116773e+00, -5.014061414116773e+00, -2.251348593774132e+00, -2.256869490554692e+00, -2.264321992056857e+00, -2.269077114132038e+00, -2.248279858244469e+00, -2.248279858244469e+00, -5.825860720983619e-01, -5.997708170089733e-01, -5.456809534399545e-01, -5.346734708368411e-01, -5.875712022897317e-01, -5.875712022897317e-01, -1.786547153050106e-01, -2.927259105035709e-01, -1.656121864448955e-01, -1.804658965344326e+00, -2.022953390419042e-01, -2.022953390419042e-01, -3.855328286815121e-03, -4.886559102449558e-03, -3.747401904862530e-03, -1.074918972783801e-01, -4.709799579148911e-03, -4.709799579148912e-03, -5.494042243219833e-01, -5.511674564055431e-01, -5.504260641092553e-01, -5.499050943475651e-01, -5.501535548636578e-01, -5.501535548636578e-01, -5.333041593092305e-01, -5.264181395136580e-01, -5.219996128598350e-01, -5.215845646681692e-01, -5.208794550350215e-01, -5.208794550350215e-01, -6.298015191557848e-01, -3.354946363501411e-01, -3.579651765063816e-01, -3.814245913054429e-01, -3.667186798256875e-01, -3.667186798256876e-01, -4.867089123767643e-01, -5.557402786491132e-02, -8.140902795603677e-02, -3.491742351093141e-01, -1.416482307948443e-01, -1.416482307948444e-01, -1.237684263704043e-02, -1.302858733470139e-03, -2.742565063739247e-03, -1.324544548190614e-01, -4.323236781069696e-03, -4.323236781069693e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_ev93_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ev93", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.419538010561435e+01, -2.419535649489100e+01, -2.419555286579952e+01, -2.419548194412820e+01, -2.419599448322501e+01, -2.419614584714321e+01, -2.419404626149357e+01, -2.419366176169827e+01, -2.419548875239233e+01, -2.419457303609232e+01, -2.419548875239233e+01, -2.419457303609232e+01, -3.769288413320709e+00, -3.770015150059157e+00, -3.769397653088427e+00, -3.770166597077003e+00, -3.772473364323627e+00, -3.773301638462760e+00, -3.767749204665864e+00, -3.768658627892123e+00, -3.768351378562445e+00, -3.771445187574170e+00, -3.768351378562445e+00, -3.771445187574170e+00, -6.518523028209542e-01, -6.624731316576099e-01, -6.481420370265487e-01, -6.610996058017774e-01, -6.021915493972886e-01, -5.873965620134375e-01, -5.990740122669008e-01, -6.039857137042773e-01, -6.799232090195951e-01, -5.385338503821622e-01, -6.799232090195951e-01, -5.385338503821622e-01, -1.649185989551127e-01, -1.633785948591548e-01, -1.622116177751814e-01, -1.616570966925548e-01, -7.536485441221263e-01, -8.166830055133938e-01, -2.015997153645565e-01, -2.018242735273710e-01, -1.698984286119331e-01, -2.166242730057184e-01, -1.698984286119331e-01, -2.166242730057178e-01, -1.142155440107520e-02, -1.217221030246659e-02, -1.200441820451519e-02, -1.290893965978506e-02, -9.181874773176528e-02, -9.874252101430006e-02, -6.757974352408055e-03, -6.642740044438781e-03, -1.013943202891717e-02, -5.716234349461512e-03, -1.013943202891716e-02, -5.716234349461498e-03, -6.079555244541406e+00, -6.077942668888684e+00, -6.084534290608545e+00, -6.082754069605549e+00, -6.079821260506360e+00, -6.078100377826658e+00, -6.084093959177364e+00, -6.082471604972200e+00, -6.082115936279665e+00, -6.080362430466379e+00, -6.082115936279665e+00, -6.080362430466379e+00, -1.760277725378137e+00, -1.760164576281507e+00, -1.782368901385118e+00, -1.781664604542195e+00, -1.726736004655744e+00, -1.736215036685303e+00, -1.745221462349577e+00, -1.754959803557304e+00, -1.798894183627521e+00, -1.775062830034062e+00, -1.798894183627521e+00, -1.775062830034062e+00, -6.510427873988831e-01, -6.495733153768202e-01, -7.731884138747358e-01, -7.741284951193664e-01, -5.750117406437499e-01, -6.046877814304995e-01, -6.671961560343115e-01, -6.885846591998168e-01, -6.890881359557758e-01, -6.511095152544832e-01, -6.890881359557758e-01, -6.511095152544834e-01, -2.301536649828849e-01, -2.295327167544153e-01, -2.181764517033063e-01, -2.178540525985811e-01, -2.198959276290132e-01, -2.241187555072091e-01, -2.333907316699599e+00, -2.332948355266370e+00, -2.204191623987071e-01, -1.980472279183583e-01, -2.204191623987071e-01, -1.980472279183583e-01, -5.055302430488956e-03, -5.253828419147374e-03, -6.503353436289938e-03, -6.601218455901323e-03, -4.877139355538331e-03, -5.175922413377380e-03, -1.678312324828229e-01, -1.689217618083512e-01, -4.966058864097655e-03, -6.870295744008828e-03, -4.966058864097650e-03, -6.870295744008846e-03, -7.245252442023410e-01, -7.274531988386643e-01, -7.108324270932372e-01, -7.139486176986499e-01, -7.160250638328517e-01, -7.191010434878738e-01, -7.200554265499348e-01, -7.230169220640004e-01, -7.180782116594783e-01, -7.210936895329060e-01, -7.180782116594783e-01, -7.210936895329060e-01, -7.071305240120052e-01, -7.094824793331140e-01, -4.839020648483719e-01, -4.874624170060791e-01, -5.512739584538484e-01, -5.554362754388896e-01, -6.217367244003024e-01, -6.244190081438783e-01, -5.869011291332521e-01, -5.896983127302063e-01, -5.869011291332521e-01, -5.896983127302063e-01, -8.078280640306702e-01, -8.101355188054398e-01, -2.156835468797120e-01, -2.154142577344410e-01, -2.231957867342688e-01, -2.243484596391333e-01, -3.294642811173363e-01, -3.321574430916960e-01, -2.597222148181255e-01, -2.599664247721593e-01, -2.597222148181255e-01, -2.599664247721598e-01, -4.416183583701774e-01, -4.472195422190628e-01, -8.886631430283044e-02, -8.968959572709939e-02, -1.302745867166650e-01, -1.356963264712866e-01, -3.395239515041867e-01, -3.476274257846163e-01, -1.950335797920523e-01, -1.938273734981505e-01, -1.950335797920522e-01, -1.938273734981506e-01, -1.665128202857227e-02, -1.731502513371400e-02, -1.736440368220135e-03, -1.741119709207896e-03, -3.542880013543631e-03, -3.770603531564932e-03, -1.883434528633426e-01, -1.903646168972340e-01, -4.715463590918621e-03, -6.282907090024484e-03, -4.715463590918611e-03, -6.282907090024471e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_ev93_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ev93", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.884751956345598e-08, 0.000000000000000e+00, -1.884760429140408e-08, -1.884712115098713e-08, 0.000000000000000e+00, -1.884731494624886e-08, -1.884600560614400e-08, 0.000000000000000e+00, -1.884567192483002e-08, -1.885050090759430e-08, 0.000000000000000e+00, -1.885140290983196e-08, -1.884727391152896e-08, 0.000000000000000e+00, -1.884922894468875e-08, -1.884727391152896e-08, 0.000000000000000e+00, -1.884922894468875e-08, -2.868202707766768e-05, 0.000000000000000e+00, -2.867732831168532e-05, -2.868088493068617e-05, 0.000000000000000e+00, -2.867600675014364e-05, -2.865128713419906e-05, 0.000000000000000e+00, -2.864282274118201e-05, -2.868392710066019e-05, 0.000000000000000e+00, -2.867547659979735e-05, -2.870368576547871e-05, 0.000000000000000e+00, -2.864721901325913e-05, -2.870368576547871e-05, 0.000000000000000e+00, -2.864721901325913e-05, -2.180945630693159e-02, 0.000000000000000e+00, -2.148240730542869e-02, -2.193422251142668e-02, 0.000000000000000e+00, -2.153833070749814e-02, -2.340089439598360e-02, 0.000000000000000e+00, -2.374938863721572e-02, -2.291671690888285e-02, 0.000000000000000e+00, -2.281210032440737e-02, -2.080862190366587e-02, 0.000000000000000e+00, -2.370172478638824e-02, -2.080862190366587e-02, 0.000000000000000e+00, -2.370172478638824e-02, -2.778128308310177e+00, 0.000000000000000e+00, -2.625164243225948e+00, -2.800947150299100e+00, 0.000000000000000e+00, -2.604590837637608e+00, -1.253116673092237e-02, 0.000000000000000e+00, -1.090104459685048e-02, -3.070347143201115e+00, 0.000000000000000e+00, -3.000993099633974e+00, -2.399633772100708e+00, 0.000000000000000e+00, -2.048100707029524e+00, -2.399633772100707e+00, 0.000000000000000e+00, -2.048100707029553e+00, 5.973889439026424e+01, 0.000000000000000e+00, 5.898295365679605e+01, 6.277155533463409e+01, 0.000000000000000e+00, 6.223158426952158e+01, 2.076255341919832e+01, 0.000000000000000e+00, 1.961457807783932e+01, 5.549615563560314e+01, 0.000000000000000e+00, 5.400832150800939e+01, 5.990295111021056e+01, 0.000000000000000e+00, 1.532596450041549e+02, 5.990295111020332e+01, 0.000000000000000e+00, 1.532596450041723e+02, -4.910494584503354e-06, 0.000000000000000e+00, -4.915654188746109e-06, -4.895685448406395e-06, 0.000000000000000e+00, -4.901331820068817e-06, -4.909702574814793e-06, 0.000000000000000e+00, -4.915183864495814e-06, -4.896995899018292e-06, 0.000000000000000e+00, -4.902172942478576e-06, -4.902890981300964e-06, 0.000000000000000e+00, -4.908461329327008e-06, -4.902890981300964e-06, 0.000000000000000e+00, -4.908461329327008e-06, -2.876921957362204e-04, 0.000000000000000e+00, -2.877468293263437e-04, -2.805996777599451e-04, 0.000000000000000e+00, -2.808769399241791e-04, -2.911305086517494e-04, 0.000000000000000e+00, -2.902826971504297e-04, -2.850737496059140e-04, 0.000000000000000e+00, -2.840901979723197e-04, -2.807601059408853e-04, 0.000000000000000e+00, -2.837498561995447e-04, -2.807601059408853e-04, 0.000000000000000e+00, -2.837498561995447e-04, -3.423957581173139e-02, 0.000000000000000e+00, -3.458434902717070e-02, -1.743748870358688e-02, 0.000000000000000e+00, -1.726939546955273e-02, -5.224514528898570e-02, 0.000000000000000e+00, -4.451671505107887e-02, -3.280720331791584e-02, 0.000000000000000e+00, -2.902093605266789e-02, -2.839851231676800e-02, 0.000000000000000e+00, -3.520756632392189e-02, -2.839851231676796e-02, 0.000000000000000e+00, -3.520756632392189e-02, -4.733659709722543e-01, 0.000000000000000e+00, -6.502812147185683e-01, -1.569662384432985e+00, 0.000000000000000e+00, -1.558739376984722e+00, 5.050004359635167e-01, 0.000000000000000e+00, -1.665062534889473e-01, -2.075324629608229e-04, 0.000000000000000e+00, -2.078178880796488e-04, -2.358191412318219e+00, 0.000000000000000e+00, -3.866832816574697e+00, -2.358191412318219e+00, 0.000000000000000e+00, -3.866832816574697e+00, 7.810049950155691e+01, 0.000000000000000e+00, 6.759710440788422e+01, 6.707472371940041e+01, 0.000000000000000e+00, 6.193315965543761e+01, 3.810942557909007e+02, 0.000000000000000e+00, 4.231568484176877e+02, 8.073161803641829e+00, 0.000000000000000e+00, 7.868501152521270e+00, 1.900200701841985e+02, 0.000000000000000e+00, 1.854419216343715e+02, 1.900200701841065e+02, 0.000000000000000e+00, 1.854419216343767e+02, -1.908132581822690e-02, 0.000000000000000e+00, -1.870463179347717e-02, -2.419280371819995e-02, 0.000000000000000e+00, -2.369493857894198e-02, -2.250157822594629e-02, 0.000000000000000e+00, -2.203144067215007e-02, -2.100575172427128e-02, 0.000000000000000e+00, -2.059270632429967e-02, -2.176294331411346e-02, 0.000000000000000e+00, -2.132138535219971e-02, -2.176294331411346e-02, 0.000000000000000e+00, -2.132138535219971e-02, -1.947474866478387e-02, 0.000000000000000e+00, -1.920493123484820e-02, -7.520914415814513e-02, 0.000000000000000e+00, -7.392021954005012e-02, -6.054418867550385e-02, 0.000000000000000e+00, -5.931594255752827e-02, -4.457566462070355e-02, 0.000000000000000e+00, -4.384946863510704e-02, -5.273936497006335e-02, 0.000000000000000e+00, -5.187190054631712e-02, -5.273936497006335e-02, 0.000000000000000e+00, -5.187190054631712e-02, -1.486721728363460e-02, 0.000000000000000e+00, -1.460327391920137e-02, -9.822054161390285e-01, 0.000000000000000e+00, -9.728137230046157e-01, -6.741589656770064e-01, 0.000000000000000e+00, -6.619940003451769e-01, -3.016489080915637e-01, 0.000000000000000e+00, -2.953028496079965e-01, -4.738222752999421e-01, 0.000000000000000e+00, -4.758138484043261e-01, -4.738222752999412e-01, 0.000000000000000e+00, -4.758138484043253e-01, -1.051928021677969e-01, 0.000000000000000e+00, -1.023756859699289e-01, 1.980321320094220e+01, 0.000000000000000e+00, 1.968843534496587e+01, 1.324226796849274e+01, 0.000000000000000e+00, 1.261256287201593e+01, -3.563145511583971e-01, 0.000000000000000e+00, -3.346033254697411e-01, 2.163224880672309e+00, 0.000000000000000e+00, -1.125192901960292e-02, 2.163224880672309e+00, 0.000000000000000e+00, -1.125192901958894e-02, 4.651204802701206e+01, 0.000000000000000e+00, 4.732471534684377e+01, 2.412508407385043e+02, 0.000000000000000e+00, 4.271890821894523e+02, 1.485469648364757e+02, 0.000000000000000e+00, 1.580486521157356e+02, 2.841137279161562e+00, 0.000000000000000e+00, 2.483933742493384e+00, 3.909227057327856e+02, 0.000000000000000e+00, 1.928994443154897e+02, 3.909227057327641e+02, 0.000000000000000e+00, 1.928994443154765e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
