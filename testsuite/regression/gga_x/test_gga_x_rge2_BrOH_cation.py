
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_rge2_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_rge2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.050092386276053e+01, -2.050096096237572e+01, -2.050117574908558e+01, -2.050062276081178e+01, -2.050090542652297e+01, -2.050090542652297e+01, -3.379810081828067e+00, -3.379786424464328e+00, -3.379322697982758e+00, -3.380771289951426e+00, -3.379863460088988e+00, -3.379863460088988e+00, -6.716699593040774e-01, -6.715336162680303e-01, -6.702630165980584e-01, -6.749267321281072e-01, -6.765538089997787e-01, -6.765538089997787e-01, -2.086830895192285e-01, -2.091933547820966e-01, -7.775558984222810e-01, -1.839613172719912e-01, -2.056233662446125e-01, -2.056233662446124e-01, -1.011214610733444e-02, -1.064895313187245e-02, -5.859340962015162e-02, -5.830216558443374e-03, -8.138149458384678e-03, -8.138149458384678e-03, -4.952269558966771e+00, -4.952216255090968e+00, -4.952275068495608e+00, -4.952227867829153e+00, -4.952238041584994e+00, -4.952238041584994e+00, -2.023217197965199e+00, -2.033252643703772e+00, -2.023233904441334e+00, -2.032026004008157e+00, -2.028861736813169e+00, -2.028861736813169e+00, -5.666685293205974e-01, -5.980288272375337e-01, -5.275473769444462e-01, -5.319133075459636e-01, -5.741122766147326e-01, -5.741122766147326e-01, -1.446309011122331e-01, -2.295621565484637e-01, -1.353044406266159e-01, -1.799960696837273e+00, -1.594788118687367e-01, -1.594788118687367e-01, -4.501091605614021e-03, -5.699390921009625e-03, -4.364673006774742e-03, -9.378018626987053e-02, -5.482771106777871e-03, -5.482771106777873e-03, -5.491995241743417e-01, -5.497072714166460e-01, -5.495264125663075e-01, -5.493743814446774e-01, -5.494495605468017e-01, -5.494495605468017e-01, -5.332585006070742e-01, -4.920066115339659e-01, -5.025465306024748e-01, -5.137938609514432e-01, -5.077999889209874e-01, -5.077999889209874e-01, -6.276264155454749e-01, -2.680006666068716e-01, -2.974908764219857e-01, -3.515125187569444e-01, -3.208078120918640e-01, -3.208078120918640e-01, -4.538435157586638e-01, -5.602474548869027e-02, -7.616210058580172e-02, -3.309862901039282e-01, -1.164593966492531e-01, -1.164593966492531e-01, -1.425412846444143e-02, -1.523316288611355e-03, -3.203544749518247e-03, -1.102024824973984e-01, -5.034979527235087e-03, -5.034979527235082e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_rge2_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_rge2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.553097274132505e+01, -2.553094228952957e+01, -2.553108561956507e+01, -2.553102427403928e+01, -2.553142236919775e+01, -2.553151363424795e+01, -2.553014821834032e+01, -2.552988941845946e+01, -2.553104129488320e+01, -2.553052074410384e+01, -2.553104129488320e+01, -2.553052074410384e+01, -4.102037230644576e+00, -4.102234283647316e+00, -4.102081745620716e+00, -4.102286945532359e+00, -4.103243529818438e+00, -4.103571896018138e+00, -4.101891095732029e+00, -4.102227301893159e+00, -4.101251551332484e+00, -4.103333583363900e+00, -4.101251551332484e+00, -4.103333583363900e+00, -7.634868374985488e-01, -7.696785740568459e-01, -7.612110551111195e-01, -7.688102261216926e-01, -7.308693429010172e-01, -7.202735316458734e-01, -7.308716375389351e-01, -7.343101385553745e-01, -7.802568063296752e-01, -6.766579289828207e-01, -7.802568063296752e-01, -6.766579289828207e-01, -1.709189593872527e-01, -1.774974409967803e-01, -1.728879021878421e-01, -1.810430538528489e-01, -8.789689534226061e-01, -9.224863317759994e-01, -1.550402703309538e-01, -1.559779045294206e-01, -1.783686744264590e-01, -1.524605311224721e-01, -1.783686744264589e-01, -1.524605311224720e-01, -1.303746220457131e-02, -1.385380182497381e-02, -1.366165813207336e-02, -1.463501318740255e-02, -7.537436359099987e-02, -7.944263909322551e-02, -7.837263673815566e-03, -7.706672817426680e-03, -1.163071321340272e-02, -6.618644460550713e-03, -1.163071321340272e-02, -6.618644460550713e-03, -6.283294304952731e+00, -6.281736759726088e+00, -6.285758870964105e+00, -6.284117896854895e+00, -6.283431841776848e+00, -6.281819016761650e+00, -6.285546628086484e+00, -6.283982202558060e+00, -6.284556620633090e+00, -6.282932976292819e+00, -6.284556620633090e+00, -6.282932976292819e+00, -2.164137258695320e+00, -2.164014195757772e+00, -2.185161519549840e+00, -2.184446582855259e+00, -2.137326873762656e+00, -2.145004480258505e+00, -2.155563743954963e+00, -2.163363378446317e+00, -2.195705842708560e+00, -2.177513530287631e+00, -2.195705842708560e+00, -2.177513530287631e+00, -6.976038895920413e-01, -6.958385021939540e-01, -7.797081826013704e-01, -7.803177022282641e-01, -6.277735762990851e-01, -6.536231264632312e-01, -6.765287562988836e-01, -6.987055633695376e-01, -7.293703460772699e-01, -6.918558353367429e-01, -7.293703460772699e-01, -6.918558353367429e-01, -1.604212277637935e-01, -1.601294743207281e-01, -1.852805844968552e-01, -1.857306494333849e-01, -1.528167505916921e-01, -1.560003592521124e-01, -2.351162451367308e+00, -2.350145895565329e+00, -1.565411160606390e-01, -1.451821552806486e-01, -1.565411160606390e-01, -1.451821552806486e-01, -5.879437872283949e-03, -6.110160378950789e-03, -7.540827996050482e-03, -7.654958942534072e-03, -5.638822467414041e-03, -5.971705830738426e-03, -1.183777176118193e-01, -1.191995064796579e-01, -5.759206578577323e-03, -7.909207523217951e-03, -5.759206578577324e-03, -7.909207523217953e-03, -7.253394219438505e-01, -7.282250588577022e-01, -7.162668504315683e-01, -7.192141908979084e-01, -7.194513402577555e-01, -7.223967734477172e-01, -7.221069879108895e-01, -7.249955323982276e-01, -7.207793648667197e-01, -7.236953640659983e-01, -7.207793648667197e-01, -7.236953640659983e-01, -7.073116794523131e-01, -7.096610833987219e-01, -5.625232282827517e-01, -5.655259618463123e-01, -6.047756500671301e-01, -6.080232202706880e-01, -6.468072842598428e-01, -6.492447970949218e-01, -6.257779617634824e-01, -6.283001755342116e-01, -6.257779617634824e-01, -6.283001755342116e-01, -8.159751845280304e-01, -8.177198980289161e-01, -2.201653991665055e-01, -2.213222153436548e-01, -2.681970609592114e-01, -2.717853493669116e-01, -3.920106801226840e-01, -3.945550446873700e-01, -3.258012605616673e-01, -3.259946573354650e-01, -3.258012605616672e-01, -3.259946573354650e-01, -5.159205860920989e-01, -5.204795607736353e-01, -7.405148034518740e-02, -7.454401026611374e-02, -9.818276621865708e-02, -1.011244631004653e-01, -3.852326616558636e-01, -3.920948640085440e-01, -1.354720224260131e-01, -1.348485289270260e-01, -1.354720224260130e-01, -1.348485289270260e-01, -1.864883075723766e-02, -1.932479895246432e-02, -2.028761968153753e-03, -2.033398798572941e-03, -4.128059991741947e-03, -4.390524572150561e-03, -1.308489623770853e-01, -1.322341818623817e-01, -5.455186689245342e-03, -7.249381231628385e-03, -5.455186689245335e-03, -7.249381231628377e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_rge2_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_rge2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-9.132872984529253e-09, 0.000000000000000e+00, -9.132920278308822e-09, -9.132758116903203e-09, 0.000000000000000e+00, -9.132836828256803e-09, -9.132363135102895e-09, 0.000000000000000e+00, -9.132278550851495e-09, -9.133661101425396e-09, 0.000000000000000e+00, -9.133932719803337e-09, -9.132805864077618e-09, 0.000000000000000e+00, -9.133251218406829e-09, -9.132805864077618e-09, 0.000000000000000e+00, -9.133251218406829e-09, -1.293969069779534e-05, 0.000000000000000e+00, -1.294071016396100e-05, -1.293956813131181e-05, 0.000000000000000e+00, -1.294070765392334e-05, -1.293780400646825e-05, 0.000000000000000e+00, -1.293703901414305e-05, -1.293250460053805e-05, 0.000000000000000e+00, -1.293212441002471e-05, -1.294822551491190e-05, 0.000000000000000e+00, -1.292954125482373e-05, -1.294822551491190e-05, 0.000000000000000e+00, -1.292954125482373e-05, -9.258886657008643e-03, 0.000000000000000e+00, -9.137716485104730e-03, -9.307888146199527e-03, 0.000000000000000e+00, -9.158951366784246e-03, -9.975245043094267e-03, 0.000000000000000e+00, -1.018487894087380e-02, -9.795004799757860e-03, 0.000000000000000e+00, -9.732148445734170e-03, -8.894778207858476e-03, 0.000000000000000e+00, -1.073392033784654e-02, -8.894778207858476e-03, 0.000000000000000e+00, -1.073392033784654e-02, -1.620169787781494e+00, 0.000000000000000e+00, -1.467658036844367e+00, -1.593401672448476e+00, 0.000000000000000e+00, -1.414961657299836e+00, -5.324679967037429e-03, 0.000000000000000e+00, -4.706489141333215e-03, -2.475261263902652e+00, 0.000000000000000e+00, -2.396692099657968e+00, -1.383590912867844e+00, 0.000000000000000e+00, -3.059435363650121e+00, -1.383590912867843e+00, 0.000000000000000e+00, -3.059435363650127e+00, -4.017000671681840e-02, 0.000000000000000e+00, -4.468029076068376e-02, -4.770800228434557e-02, 0.000000000000000e+00, -5.433290738667828e-02, -6.115688031696770e-01, 0.000000000000000e+00, -6.874531605704708e-01, -1.272119989575534e-02, 0.000000000000000e+00, -1.180324365014785e-02, -3.188578222711427e-02, 0.000000000000000e+00, -4.172559543127390e-02, -3.188578222711439e-02, 0.000000000000000e+00, -4.172559543127403e-02, -2.591762029139458e-06, 0.000000000000000e+00, -2.594242159505309e-06, -2.589941026404358e-06, 0.000000000000000e+00, -2.592481188200800e-06, -2.591650004641305e-06, 0.000000000000000e+00, -2.594173871605559e-06, -2.590087606720095e-06, 0.000000000000000e+00, -2.592574212987997e-06, -2.590837623896689e-06, 0.000000000000000e+00, -2.593359052068101e-06, -2.590837623896689e-06, 0.000000000000000e+00, -2.593359052068101e-06, -1.236305869277003e-04, 0.000000000000000e+00, -1.236548311042114e-04, -1.203182908287380e-04, 0.000000000000000e+00, -1.204431880187822e-04, -1.259510069473568e-04, 0.000000000000000e+00, -1.253195593102099e-04, -1.230365835200489e-04, 0.000000000000000e+00, -1.223733788776625e-04, -1.200356284718180e-04, 0.000000000000000e+00, -1.217234418688166e-04, -1.200356284718180e-04, 0.000000000000000e+00, -1.217234418688166e-04, -1.592311285981039e-02, 0.000000000000000e+00, -1.609350380988710e-02, -1.158088286993300e-02, 0.000000000000000e+00, -1.156025023684291e-02, -2.344825180843609e-02, 0.000000000000000e+00, -2.032847359498393e-02, -2.012237557047944e-02, 0.000000000000000e+00, -1.765516977792837e-02, -1.363253084448183e-02, 0.000000000000000e+00, -1.671695805031817e-02, -1.363253084448184e-02, 0.000000000000000e+00, -1.671695805031817e-02, -2.155356822042913e+00, 0.000000000000000e+00, -2.231062647339275e+00, -1.100890650600311e+00, 0.000000000000000e+00, -1.088599098358585e+00, -2.195881787912114e+00, 0.000000000000000e+00, -2.276941806132343e+00, -1.405223004745605e-04, 0.000000000000000e+00, -1.407753344891184e-04, -2.808730939759378e+00, 0.000000000000000e+00, -3.565658454448563e+00, -2.808730939759378e+00, 0.000000000000000e+00, -3.565658454448563e+00, -1.190728079965401e-02, 0.000000000000000e+00, -1.035555543051320e-02, -1.565198172348164e-02, 0.000000000000000e+00, -1.430916133255923e-02, -1.189866827848059e-01, 0.000000000000000e+00, -1.565839958328221e-01, -2.030544491813869e+00, 0.000000000000000e+00, -1.945092322381234e+00, -4.352367041517902e-02, 0.000000000000000e+00, -7.992136199838468e-02, -4.352367041517883e-02, 0.000000000000000e+00, -7.992136199838450e-02, -1.593655082317221e-02, 0.000000000000000e+00, -1.569255290597883e-02, -1.630155403229087e-02, 0.000000000000000e+00, -1.604973039352302e-02, -1.617309052684056e-02, 0.000000000000000e+00, -1.592324658880055e-02, -1.606652932346748e-02, 0.000000000000000e+00, -1.582047842480704e-02, -1.611981868249209e-02, 0.000000000000000e+00, -1.587189443161751e-02, -1.611981868249209e-02, 0.000000000000000e+00, -1.587189443161751e-02, -1.776923453365985e-02, 0.000000000000000e+00, -1.753620892898439e-02, -3.198552308246994e-02, 0.000000000000000e+00, -3.145683434494333e-02, -2.697636739445568e-02, 0.000000000000000e+00, -2.651296737974177e-02, -2.278071848772816e-02, 0.000000000000000e+00, -2.246444874373127e-02, -2.481768501542414e-02, 0.000000000000000e+00, -2.445481534659146e-02, -2.481768501542414e-02, 0.000000000000000e+00, -2.445481534659146e-02, -9.608450610357333e-03, 0.000000000000000e+00, -9.546599715683843e-03, -5.804662944730802e-01, 0.000000000000000e+00, -5.716654302348493e-01, -3.387010054932557e-01, 0.000000000000000e+00, -3.288456229551259e-01, -1.279501857575814e-01, 0.000000000000000e+00, -1.252464431585573e-01, -2.107875708498791e-01, 0.000000000000000e+00, -2.113431993267471e-01, -2.107875708498794e-01, 0.000000000000000e+00, -2.113431993267472e-01, -4.468070890288551e-02, 0.000000000000000e+00, -4.352487776747343e-02, -5.153065595821771e-01, 0.000000000000000e+00, -5.232903633980157e-01, -9.070094473445850e-01, 0.000000000000000e+00, -9.987084777005956e-01, -1.533348879798644e-01, 0.000000000000000e+00, -1.446282879601634e-01, -2.940411947633464e+00, 0.000000000000000e+00, -3.967221074345272e+00, -2.940411947633466e+00, 0.000000000000000e+00, -3.967221074345276e+00, -5.800521874525575e-02, 0.000000000000000e+00, -6.425043027914981e-02, -7.651045787868924e-03, 0.000000000000000e+00, -1.812018006727344e-02, -1.536003732387831e-02, 0.000000000000000e+00, -1.908523247780724e-02, -3.200253166493448e+00, 0.000000000000000e+00, -3.189257934794384e+00, -1.156053182939781e-01, 0.000000000000000e+00, -7.101611697984629e-02, -1.156053182939782e-01, 0.000000000000000e+00, -7.101611697984640e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
