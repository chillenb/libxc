
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_lg93_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_lg93", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.086889716100472e+01, -2.086891427379210e+01, -2.086907423313733e+01, -2.086881794079315e+01, -2.086894028597233e+01, -2.086894028597233e+01, -3.486846526671565e+00, -3.486787952762813e+00, -3.485519801884586e+00, -3.488387419917941e+00, -3.486860351399127e+00, -3.486860351399127e+00, -7.109847630181455e-01, -7.112253273131987e-01, -7.177927721783018e-01, -7.225363874867895e-01, -7.205555465535578e-01, -7.205555465535578e-01, -2.192546566309539e-01, -2.206393568586753e-01, -8.180914690607296e-01, -1.837653376248930e-01, -1.970969385785005e-01, -1.970969385785005e-01, -2.016859056771484e-02, -2.081935988788203e-02, -7.198501133838409e-02, -1.382852273475425e-02, -1.593940439998412e-02, -1.593940439998411e-02, -5.000562738819327e+00, -4.999780568297790e+00, -5.000538060878477e+00, -4.999847256097199e+00, -5.000158863345227e+00, -5.000158863345227e+00, -2.170294280702922e+00, -2.179811816762592e+00, -2.172806157841849e+00, -2.181326058964335e+00, -2.174193809794989e+00, -2.174193809794989e+00, -5.806441085710390e-01, -5.994348658804252e-01, -5.434518439417024e-01, -5.337548719965178e-01, -5.849586112938725e-01, -5.849586112938725e-01, -1.438459692713221e-01, -2.335376779485203e-01, -1.354321829523610e-01, -1.803798741649448e+00, -1.572096857800221e-01, -1.572096857800221e-01, -1.129554925683054e-02, -1.344568801000673e-02, -9.709561505664939e-03, -1.000580374052384e-01, -1.171459457793555e-02, -1.171459457793555e-02, -5.493898570025314e-01, -5.508936961920327e-01, -5.502916959749046e-01, -5.498453830545761e-01, -5.500611113262120e-01, -5.500611113262120e-01, -5.333009092482146e-01, -5.200957786333549e-01, -5.200096841407010e-01, -5.199843129361896e-01, -5.191485958274468e-01, -5.191485958274468e-01, -6.293485467727652e-01, -2.802944988392658e-01, -3.181847018290813e-01, -3.740953106836002e-01, -3.453452787036899e-01, -3.453452787036899e-01, -4.803342302500859e-01, -7.028766711692680e-02, -8.736289675608305e-02, -3.467444228638302e-01, -1.172293353795576e-01, -1.172293353795577e-01, -2.609179594750761e-02, -4.735402915329511e-03, -8.406952601076058e-03, -1.122052677268121e-01, -1.090228820487559e-02, -1.090228820487558e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_lg93_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_lg93", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.413367433759339e+01, -2.413383371538574e+01, -2.413441535200939e+01, -2.413204686451081e+01, -2.413330589691746e+01, -2.413330589691746e+01, -3.785846783265423e+00, -3.785920269643781e+00, -3.787726714092825e+00, -3.785323184666811e+00, -3.786026160088538e+00, -3.786026160088538e+00, -7.262701723406740e-01, -7.259635221760586e-01, -7.234244200313000e-01, -7.284889595216855e-01, -7.266640858591382e-01, -7.266640858591382e-01, -2.181843316105938e-01, -2.196627490185692e-01, -8.427173150372839e-01, -1.817414593863768e-01, -1.955459979298588e-01, -1.955459979298588e-01, -1.884787870773033e-02, -1.945784300089166e-02, -6.827397367234470e-02, -1.291853785060881e-02, -1.489170955042682e-02, -1.489170955042681e-02, -6.100120215157669e+00, -6.105719770341516e+00, -6.100361592415267e+00, -6.105305627635587e+00, -6.102971626396041e+00, -6.102971626396041e+00, -2.183827104283718e+00, -2.194652386828604e+00, -2.183794742720510e+00, -2.193314543079165e+00, -2.189869802117641e+00, -2.189869802117641e+00, -6.486414306739114e-01, -7.755803694967407e-01, -5.919598324686540e-01, -6.809859950873757e-01, -6.683271580456788e-01, -6.683271580456788e-01, -1.406171064545485e-01, -2.315741713260935e-01, -1.321194794884438e-01, -2.338510706686269e+00, -1.548352265013904e-01, -1.548352265013904e-01, -1.055261885178332e-02, -1.256089896243741e-02, -9.071002222565603e-03, -9.648018709997234e-02, -1.094415024776577e-02, -1.094415024776578e-02, -7.260807353779294e-01, -7.139794473881738e-01, -7.184194945189862e-01, -7.219398989158673e-01, -7.201947757442673e-01, -7.201947757442673e-01, -7.083138976021000e-01, -5.323238159325060e-01, -5.587206392682685e-01, -6.240696191928675e-01, -5.863855211378485e-01, -5.863855211378485e-01, -8.114265423698100e-01, -2.787743663682437e-01, -3.174096357732286e-01, -3.795407635363156e-01, -3.459955515678984e-01, -3.459955515678984e-01, -4.907566281994737e-01, -6.655734066799128e-02, -8.343520885173866e-02, -3.604554242662294e-01, -1.142151862411244e-01, -1.142151862411244e-01, -2.439647989307659e-02, -4.428286779025324e-03, -7.854657034005669e-03, -1.090645568193189e-01, -1.018519393212975e-02, -1.018519393212974e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_lg93_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_lg93", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-9.346347583220732e-09, -9.346148912877719e-09, -9.345384931037124e-09, -9.348337840973783e-09, -9.346773793073494e-09, -9.346773793073494e-09, -1.381605080853265e-05, -1.381629674540749e-05, -1.382039673089313e-05, -1.380249757601336e-05, -1.381501343358080e-05, -1.381501343358080e-05, -7.907873911031446e-03, -7.876545483659757e-03, -7.007790830293425e-03, -6.854040825199022e-03, -6.946703304256411e-03, -6.946703304256411e-03, -5.499199704558412e-01, -5.492139151638160e-01, -4.605888864640765e-03, -8.584920642889916e-01, -7.303274280654989e-01, -7.303274280654988e-01, -1.188570257067685e+03, -1.081471075331201e+03, -1.661299415545381e+01, -4.032412687859912e+03, -2.640833145889389e+03, -2.640833145889391e+03, -2.294780449126000e-06, -2.284117661710996e-06, -2.294325410181400e-06, -2.284911484453695e-06, -2.289353585710338e-06, -2.289353585710338e-06, -8.225496143583499e-05, -8.141649010802949e-05, -8.051991002514304e-05, -7.978748089834384e-05, -8.265707599641159e-05, -8.265707599641159e-05, -1.708180390988577e-02, -7.888467150789341e-03, -2.330726442727950e-02, -1.371038039109203e-02, -1.568870008334730e-02, -1.568870008334730e-02, -1.724037184664501e+00, -3.622982918199108e-01, -2.112704262399769e+00, -9.495019473317666e-05, -1.421701681528547e+00, -1.421701681528547e+00, -8.229592002244081e+03, -4.552859567552903e+03, -1.843094678918267e+04, -5.872866657244669e+00, -8.676449448422081e+03, -8.676449448422070e+03, -9.298892673879986e-03, -1.093614763809153e-02, -1.043293458229361e-02, -9.975919395491056e-03, -1.021197216700022e-02, -1.021197216700022e-02, -9.650550755754802e-03, -2.778574715763244e-02, -2.828133649272188e-02, -2.115257222192264e-02, -2.605643023935156e-02, -2.605643023935156e-02, -6.640977633339598e-03, -2.002236987443465e-01, -1.407671672350607e-01, -1.001184635029087e-01, -1.186169800507982e-01, -1.186169800507983e-01, -3.798462157807298e-02, -1.766101750729533e+01, -8.692354789506691e+00, -1.443172886018534e-01, -3.679540135461373e+00, -3.679540135461373e+00, -4.909498507641729e+02, -1.854644784716831e+05, -2.482358580069061e+04, -4.214085872252062e+00, -1.145461992788588e+04, -1.145461992788592e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
