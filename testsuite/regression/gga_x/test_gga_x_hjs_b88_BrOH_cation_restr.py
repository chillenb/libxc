
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_hjs_b88_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_hjs_b88", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.058652718357660e+01, -2.058656283063145e+01, -2.058677427715583e+01, -2.058624282857875e+01, -2.058651376408904e+01, -2.058651376408904e+01, -3.344377701827407e+00, -3.344353132645540e+00, -3.343868702607800e+00, -3.345357929372646e+00, -3.344430356991087e+00, -3.344430356991087e+00, -6.147594168105209e-01, -6.145671006643653e-01, -6.114646517859884e-01, -6.162861348796431e-01, -6.146551112152888e-01, -6.146551112152888e-01, -1.432962914781525e-01, -1.443157520094205e-01, -7.211789875564112e-01, -1.168109050503685e-01, -1.256509392298150e-01, -1.256509392298151e-01, -3.289159737496917e-02, -3.056514765289661e-02, -4.331036123089287e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -4.920835806134459e+00, -4.920644576723902e+00, -4.920835682265228e+00, -4.920666739642900e+00, -4.920734124543666e+00, -4.920734124543666e+00, -1.968413822041253e+00, -1.979105435315722e+00, -1.966921347656324e+00, -1.976341237262253e+00, -1.975063771318440e+00, -1.975063771318440e+00, -5.099494748265401e-01, -5.397336534598749e-01, -4.703646277218917e-01, -4.737202225650371e-01, -5.166474576663066e-01, -5.166474576663066e-01, -9.107320989598189e-02, -1.598666847105676e-01, -8.470846154929600e-02, -1.744259516046453e+00, -9.638440942473497e-02, -9.638440942473497e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -5.876565917169122e-02, 0.000000000000000e+00, 0.000000000000000e+00, -4.901368181737715e-01, -4.913805959978603e-01, -4.909588495407506e-01, -4.905928478760376e-01, -4.907766799561306e-01, -4.907766799561306e-01, -4.740102345400943e-01, -4.343187541425931e-01, -4.455617539242140e-01, -4.565643834983166e-01, -4.508133802325667e-01, -4.508133802325667e-01, -5.694538324358837e-01, -1.994701000213183e-01, -2.328014289246939e-01, -2.930534451011674e-01, -2.598856866632088e-01, -2.598856866632091e-01, -3.959305298595491e-01, -4.326929470407775e-02, -5.365203088719307e-02, -2.733824772356263e-01, -6.769503137203245e-02, -6.769503137203250e-02, -7.969993080137571e-05, 0.000000000000000e+00, 0.000000000000000e+00, -6.461749685097493e-02, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_hjs_b88_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_hjs_b88", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.549828773556769e+01, -2.549837783914780e+01, -2.549877022981868e+01, -2.549742984181376e+01, -2.549813333956579e+01, -2.549813333956579e+01, -4.062927398442700e+00, -4.062961370716978e+00, -4.063848054715548e+00, -4.063090054605527e+00, -4.063067561048867e+00, -4.063067561048867e+00, -7.206899623154658e-01, -7.194370440918740e-01, -6.888991559019343e-01, -6.955753076739492e-01, -6.945300401274097e-01, -6.945300401274097e-01, -1.320756784413149e-01, -1.354696606808697e-01, -8.542922436948767e-01, -8.518291440118399e-02, -1.026541358418578e-01, -1.026541358418573e-01, 9.094489014410295e-02, 4.037309328177262e-02, -5.444431273339321e-04, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -6.213683174765955e+00, -6.215871109188088e+00, -6.213783299262629e+00, -6.215714808383218e+00, -6.214792334795139e+00, -6.214792334795139e+00, -2.182198023677864e+00, -2.200772613553256e+00, -2.165213264046293e+00, -2.181549104905579e+00, -2.200773563702441e+00, -2.200773563702441e+00, -6.391448141579130e-01, -7.185007782421948e-01, -5.846472896122034e-01, -6.267949478034913e-01, -6.525650104684744e-01, -6.525650104684744e-01, -4.623219675113589e-02, -1.295422099504401e-01, -3.998152197747026e-02, -2.284238219487515e+00, -6.057662172659403e-02, -6.057662172659403e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.629534282277112e-02, 0.000000000000000e+00, 0.000000000000000e+00, -6.659354811839838e-01, -6.565456845350427e-01, -6.597865643499791e-01, -6.625136957996799e-01, -6.611437512993577e-01, -6.611437512993577e-01, -6.479211687937374e-01, -5.144771037097876e-01, -5.509039373704637e-01, -5.883664905257647e-01, -5.691630654201489e-01, -5.691630654201489e-01, -7.551515330004096e-01, -1.807130052518369e-01, -2.337752591938696e-01, -3.442806290221436e-01, -2.842078738924092e-01, -2.842078738924079e-01, -4.685985131381860e-01, 4.026300996882442e-04, -8.281800767958390e-03, -3.355944234428768e-01, -2.853782007390113e-02, -2.853782007390082e-02, -1.595453186049734e-04, 0.000000000000000e+00, 0.000000000000000e+00, -2.488828886616497e-02, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_hjs_b88_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_hjs_b88", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.990514909862709e-09, -4.990485653716820e-09, -4.990296036521417e-09, -4.990732550924727e-09, -4.990512284253850e-09, -4.990512284253850e-09, -6.672093537900038e-06, -6.672315821448513e-06, -6.676807599556376e-06, -6.663944463775746e-06, -6.671716805652812e-06, -6.671716805652812e-06, -4.252189473880906e-03, -4.258823050883744e-03, -4.400292254674530e-03, -4.273480659842173e-03, -4.312726801549304e-03, -4.312726801549304e-03, -5.747166821429321e-01, -5.561094663045121e-01, -2.368873890499498e-03, -1.202545277266035e+00, -9.026049240278613e-01, -9.026049240278617e-01, -2.180439815127915e+04, -1.218022972686879e+04, -4.278133999242055e+01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.488975907303505e-06, -1.489663026094538e-06, -1.488994931112197e-06, -1.489601649933098e-06, -1.489330664326524e-06, -1.489330664326524e-06, -5.364715443208079e-05, -5.246709504297341e-05, -5.395946655055886e-05, -5.290973565824382e-05, -5.284161498391142e-05, -5.284161498391142e-05, -8.239624209215870e-03, -6.849464545603564e-03, -1.093514800992100e-02, -1.077945755740250e-02, -7.876798410794564e-03, -7.876798410794564e-03, -3.117572683510319e+00, -4.654447749822374e-01, -3.925962616197468e+00, -8.820306536623427e-05, -2.216719026049617e+00, -2.216719026049617e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.234508068914343e+01, 0.000000000000000e+00, 0.000000000000000e+00, -9.655580350057563e-03, -9.521258188952409e-03, -9.566774534798877e-03, -9.606140554931043e-03, -9.586341418790612e-03, -9.586341418790612e-03, -1.086139353173069e-02, -1.456770585670145e-02, -1.320707036022994e-02, -1.217029863127059e-02, -1.268190224083733e-02, -1.268190224083733e-02, -5.661604227334203e-03, -2.205370017216433e-01, -1.266487285442537e-01, -5.524503940980084e-02, -8.472081446215098e-02, -8.472081446215207e-02, -2.006392081194036e-02, -4.697682349349979e+01, -2.063115946737983e+01, -6.783602355228430e-02, -6.807149350887972e+00, -6.807149350888009e+00, -4.750226083468204e-04, 0.000000000000000e+00, 0.000000000000000e+00, -8.026794671157107e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
