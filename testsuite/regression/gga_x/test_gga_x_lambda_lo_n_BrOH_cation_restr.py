
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_lambda_lo_n_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_lambda_lo_n", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.094586576990875e+01, -2.094589318623837e+01, -2.094608283088831e+01, -2.094567353728102e+01, -2.094587836152405e+01, -2.094587836152405e+01, -3.473577906853958e+00, -3.473539879994970e+00, -3.472746076205382e+00, -3.474786065399614e+00, -3.473616047192638e+00, -3.473616047192638e+00, -6.974852468972977e-01, -6.975038682663187e-01, -6.998367647018892e-01, -7.045925736802737e-01, -7.027409388520657e-01, -7.027409388520657e-01, -2.156384013369605e-01, -2.167068809617466e-01, -8.050746791258436e-01, -1.824184005603031e-01, -1.952357590109066e-01, -1.952357590109066e-01, -1.008790492227035e-02, -1.061703340725813e-02, -5.768539523685606e-02, -5.828520576459668e-03, -7.322867608572124e-03, -7.322867608572124e-03, -5.034956225039468e+00, -5.034338577990150e+00, -5.034938557991611e+00, -5.034393130707084e+00, -5.034637165182708e+00, -5.034637165182708e+00, -2.114450192905247e+00, -2.124263309130466e+00, -2.115869142964284e+00, -2.124534645484075e+00, -2.119177133307036e+00, -2.119177133307036e+00, -5.807383626357082e-01, -6.028209085761959e-01, -5.416612296402219e-01, -5.373346753529730e-01, -5.864745513204352e-01, -5.864745513204352e-01, -1.392069336201380e-01, -2.315116420924213e-01, -1.300555139524384e-01, -1.813615259814678e+00, -1.553620348420929e-01, -1.553620348420929e-01, -4.497369434680974e-03, -5.697853619055464e-03, -4.356442599190620e-03, -9.089416477099396e-02, -5.248178182612942e-03, -5.248178182612942e-03, -5.507629674317268e-01, -5.539097964830477e-01, -5.528194204988447e-01, -5.518992686499556e-01, -5.523601965729940e-01, -5.523601965729940e-01, -5.339837779047013e-01, -5.106206505231193e-01, -5.171011525056255e-01, -5.232092173117729e-01, -5.198870705051177e-01, -5.198870705051177e-01, -6.331101101881513e-01, -2.761052090749880e-01, -3.108441525888995e-01, -3.659024847931002e-01, -3.360513534198469e-01, -3.360513534198469e-01, -4.712513770586052e-01, -5.532350793833975e-02, -7.451823658140509e-02, -3.422100538461088e-01, -1.119969437884003e-01, -1.119969437884004e-01, -1.423024191325664e-02, -1.523332192427033e-03, -3.197330196703952e-03, -1.061272621081109e-01, -4.856260254861226e-03, -4.856260254861223e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_lambda_lo_n_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_lambda_lo_n", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.514275064534609e+01, -2.514285044245380e+01, -2.514326815072940e+01, -2.514178391571735e+01, -2.514256531123893e+01, -2.514256531123893e+01, -4.036882718075616e+00, -4.036929083374745e+00, -4.038100842076757e+00, -4.036831421475602e+00, -4.037035622673091e+00, -4.037035622673091e+00, -7.599221449776777e-01, -7.586670256085990e-01, -7.299377484849368e-01, -7.363155229677916e-01, -7.352192180967008e-01, -7.352192180967008e-01, -2.033039063221551e-01, -2.044317622994533e-01, -8.908108285974802e-01, -1.813079870194690e-01, -1.871001260736506e-01, -1.871001260736506e-01, -1.343404296748998e-02, -1.413627643821135e-02, -7.452006410181802e-02, -7.768328535087798e-03, -9.757044550535931e-03, -9.757044550535931e-03, -6.199988680895196e+00, -6.202754639592621e+00, -6.200112552736373e+00, -6.202554380867157e+00, -6.201392348536745e+00, -6.201392348536745e+00, -2.186362615010371e+00, -2.203625191919146e+00, -2.171997590130912e+00, -2.187022494862143e+00, -2.203116126015411e+00, -2.203116126015411e+00, -6.856768550161538e-01, -7.743335798821493e-01, -6.307425950805022e-01, -6.813440924664305e-01, -7.000448017747399e-01, -7.000448017747399e-01, -1.565326985785519e-01, -2.230900325460423e-01, -1.486101206219040e-01, -2.334355520357775e+00, -1.623645569695794e-01, -1.623645569695794e-01, -5.994893606738111e-03, -7.594064912225812e-03, -5.805147645396649e-03, -1.110905080287503e-01, -6.993465141178657e-03, -6.993465141178657e-03, -7.247743724160427e-01, -7.127279436867062e-01, -7.168903961303399e-01, -7.203913456291871e-01, -7.186333740478108e-01, -7.186333740478108e-01, -7.075348405768002e-01, -5.586130014171738e-01, -5.968596493204138e-01, -6.389983794063843e-01, -6.171936969797861e-01, -6.171936969797861e-01, -8.104283914532578e-01, -2.604507814921044e-01, -2.970885282129824e-01, -3.917037950626600e-01, -3.364926705843522e-01, -3.364926705843522e-01, -5.136530101932052e-01, -7.175038460104566e-02, -9.440925526401324e-02, -3.834569451184087e-01, -1.291629919083416e-01, -1.291629919083415e-01, -1.893207192118818e-02, -2.030979506371206e-03, -4.262270112619851e-03, -1.243067475094783e-01, -6.471357822652400e-03, -6.471357822652395e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_lambda_lo_n_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_lambda_lo_n", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-7.051356240914642e-09, -7.051307088200320e-09, -7.051016960027628e-09, -7.051749729294652e-09, -7.051375949367783e-09, -7.051375949367783e-09, -9.515309977570062e-06, -9.515596705049312e-06, -9.521290451204885e-06, -9.504167746863062e-06, -9.514736270468993e-06, -9.514736270468993e-06, -6.065588562840856e-03, -6.069853919740661e-03, -6.094305465864439e-03, -5.927545796734671e-03, -5.987899007504135e-03, -5.987899007504135e-03, -6.245136277368156e-01, -6.228203379318682e-01, -3.390706443117886e-03, -8.400080918589047e-01, -7.950991216253938e-01, -7.950991216253938e-01, -2.437691953624917e+00, -2.575334525815117e+00, -1.435359237103219e+00, -2.215279216782235e+00, -2.814415348462109e+00, -2.814415348462116e+00, -2.076301851055975e-06, -2.076515626076744e-06, -2.076297755417283e-06, -2.076486700858842e-06, -2.076418063641876e-06, -2.076418063641876e-06, -7.333373988150248e-05, -7.191808007141646e-05, -7.328173644838444e-05, -7.204104648031485e-05, -7.256158776037134e-05, -7.256158776037134e-05, -1.206004712433319e-02, -9.808913378064952e-03, -1.607304498492792e-02, -1.568289771640741e-02, -1.151464936064292e-02, -1.151464936064292e-02, -9.795130298923771e-01, -3.885493754464097e-01, -1.081153826323221e+00, -1.195513089806988e-04, -1.162346575466835e+00, -1.162346575466835e+00, -2.918935846336216e+00, -2.607207180162953e+00, -1.637341567495687e+01, -1.606421747070891e+00, -7.619495414767095e+00, -7.619495414767079e+00, -1.382939988290265e-02, -1.374289560624566e-02, -1.377318651130541e-02, -1.379878292757955e-02, -1.378603490525156e-02, -1.378603490525156e-02, -1.557109699814927e-02, -2.107410103558611e-02, -1.945464723434846e-02, -1.790561627420684e-02, -1.871236141051969e-02, -1.871236141051969e-02, -8.082457053947887e-03, -2.270839266999510e-01, -1.546463046629269e-01, -8.073601450398514e-02, -1.156231627729507e-01, -1.156231627729508e-01, -2.910139066028046e-02, -1.309832427332035e+00, -1.301511181107138e+00, -1.031666575383016e-01, -1.762925617406755e+00, -1.762925617406757e+00, -1.964443652377932e+00, -1.279490980532468e+01, -6.192303274325387e+00, -1.787423371077270e+00, -9.624119990517867e+00, -9.624119990517890e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
