
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_pbe_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.094585776086332e+01, -2.094588517766596e+01, -2.094607482340833e+01, -2.094566552426150e+01, -2.094587035499571e+01, -2.094587035499571e+01, -3.473575557153522e+00, -3.473537533154191e+00, -3.472743746762330e+00, -3.474783704322946e+00, -3.473613964042391e+00, -3.473613964042391e+00, -6.974936653271246e-01, -6.975164563872300e-01, -6.998547901333253e-01, -7.045928399010526e-01, -7.046174557612094e-01, -7.046174557612094e-01, -2.157329557449971e-01, -2.168312993251543e-01, -8.055495257680531e-01, -1.824280131147417e-01, -2.110158708452440e-01, -2.110158708452439e-01, -1.010593023949163e-02, -1.064149008155012e-02, -5.776349264167190e-02, -5.829079862553401e-03, -8.134595749181068e-03, -8.134595749181068e-03, -5.034955286038513e+00, -5.034337664719200e+00, -5.034937626207383e+00, -5.034392207641041e+00, -5.034636241626879e+00, -5.034636241626879e+00, -2.114444098059244e+00, -2.124257465397507e+00, -2.115865736119572e+00, -2.124531646741755e+00, -2.119192159258840e+00, -2.119192159258840e+00, -5.807425294664336e-01, -6.028223223955007e-01, -5.419806975268897e-01, -5.376125892483347e-01, -5.871636211461495e-01, -5.871636211461496e-01, -1.392061245308012e-01, -2.315096648801022e-01, -1.301878351365432e-01, -1.813615368310633e+00, -1.554359446284512e-01, -1.554359446284512e-01, -4.500491258660717e-03, -5.698239937209596e-03, -4.363371142928422e-03, -9.089244406088307e-02, -5.480939317476554e-03, -5.480939317476555e-03, -5.507672182554533e-01, -5.539140777334839e-01, -5.528237320016802e-01, -5.519034957053444e-01, -5.523644647987966e-01, -5.523644647987966e-01, -5.339869747216603e-01, -5.106240241623404e-01, -5.171055916541318e-01, -5.232122464295463e-01, -5.198903087715092e-01, -5.198903087715092e-01, -6.331157975760917e-01, -2.761048569770401e-01, -3.108525314027576e-01, -3.659069328137067e-01, -3.360529663501695e-01, -3.360529663501694e-01, -4.712670666766130e-01, -5.532235797387114e-02, -7.455156475139398e-02, -3.422603165022571e-01, -1.120903735580128e-01, -1.120903735580128e-01, -1.423857582264017e-02, -1.523266763882106e-03, -3.203227991362146e-03, -1.061357185351582e-01, -5.033451370280780e-03, -5.033451370280775e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_pbe_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.514279448713176e+01, -2.514276485381555e+01, -2.514291010556038e+01, -2.514284882662422e+01, -2.514325003374065e+01, -2.514334430725349e+01, -2.514194509889421e+01, -2.514168081349393e+01, -2.514286495717601e+01, -2.514232371856579e+01, -2.514286495717601e+01, -2.514232371856579e+01, -4.036798671392327e+00, -4.036983310691780e+00, -4.036841304995688e+00, -4.037033405531965e+00, -4.037951570042646e+00, -4.038266510986421e+00, -4.036679700449120e+00, -4.036999775628168e+00, -4.036029201879522e+00, -4.038058126117057e+00, -4.036029201879522e+00, -4.038058126117057e+00, -7.575038545548447e-01, -7.623583669904826e-01, -7.557193744668973e-01, -7.616392782575840e-01, -7.334031563330842e-01, -7.265473597466546e-01, -7.352155607030196e-01, -7.374335070399901e-01, -7.711867312705841e-01, -7.062449815077367e-01, -7.711867312705841e-01, -7.062449815077367e-01, -2.010160392585578e-01, -2.056356088198196e-01, -2.016113633030881e-01, -2.072895748739648e-01, -8.712793638141035e-01, -9.098884669600253e-01, -1.804816540582312e-01, -1.821277826195586e-01, -2.089895288228846e-01, -1.547835680557158e-01, -2.089895288228845e-01, -1.547835680557157e-01, -1.301505035847852e-02, -1.382707136045731e-02, -1.363521378046989e-02, -1.460262806192337e-02, -7.262883526726659e-02, -7.629145440837656e-02, -7.832580824038484e-03, -7.702280488845211e-03, -1.161478978712069e-02, -6.613956395405840e-03, -1.161478978712069e-02, -6.613956395405840e-03, -6.200768830306563e+00, -6.199216341394304e+00, -6.203582420482835e+00, -6.201934522068000e+00, -6.200923973052435e+00, -6.199308917120085e+00, -6.203338200862493e+00, -6.201778262288680e+00, -6.202210781922970e+00, -6.200581640111808e+00, -6.202210781922970e+00, -6.200581640111808e+00, -2.186437605255448e+00, -2.186323445626034e+00, -2.203959964849875e+00, -2.203325347095533e+00, -2.169711332839382e+00, -2.174334216066413e+00, -2.184612516881509e+00, -2.189480784432973e+00, -2.209293729068725e+00, -2.197014616691690e+00, -2.209293729068725e+00, -2.197014616691690e+00, -6.865412942782788e-01, -6.848081956816559e-01, -7.739598471443525e-01, -7.747041456266547e-01, -6.178287498212365e-01, -6.431938513691865e-01, -6.702680264059047e-01, -6.920985837937669e-01, -7.181467850030756e-01, -6.810759939337634e-01, -7.181467850030758e-01, -6.810759939337635e-01, -1.563230558514577e-01, -1.567351813408194e-01, -2.227786388100910e-01, -2.234086933350222e-01, -1.461572737062823e-01, -1.508690649804251e-01, -2.334849385254440e+00, -2.333862033856961e+00, -1.635335864739805e-01, -1.614342530744836e-01, -1.635335864739805e-01, -1.614342530744836e-01, -5.877093300777933e-03, -6.107712147151195e-03, -7.536242035429489e-03, -7.650349172071399e-03, -5.634250166985809e-03, -5.965981621233556e-03, -1.107000887906889e-01, -1.114727660275535e-01, -5.755768049149217e-03, -7.900401201454552e-03, -5.755768049149219e-03, -7.900401201454554e-03, -7.233039532366939e-01, -7.262382584396382e-01, -7.112194755636979e-01, -7.142296902333729e-01, -7.153811940271182e-01, -7.183927583350540e-01, -7.189193852337120e-01, -7.218568299134019e-01, -7.171433143971813e-01, -7.201167785525987e-01, -7.171433143971813e-01, -7.201167785525987e-01, -7.063552262684389e-01, -7.087097512345881e-01, -5.572336919098356e-01, -5.599920348226368e-01, -5.952802311863011e-01, -5.984343369554579e-01, -6.377747134677478e-01, -6.402183078119493e-01, -6.159424877533191e-01, -6.184415972461534e-01, -6.159424877533191e-01, -6.184415972461534e-01, -8.094476542896663e-01, -8.113958604641436e-01, -2.599958251916051e-01, -2.609161725626185e-01, -2.959800717835372e-01, -2.982145644666409e-01, -3.905321625056296e-01, -3.928737164981387e-01, -3.365522554518615e-01, -3.364411087174318e-01, -3.365522554518614e-01, -3.364411087174316e-01, -5.115889047708980e-01, -5.157028730329652e-01, -7.152337577841741e-02, -7.197014372209221e-02, -9.310342244236809e-02, -9.565673865660411e-02, -3.801661146437564e-01, -3.866807754522126e-01, -1.281862321014482e-01, -1.300165060340032e-01, -1.281862321014481e-01, -1.300165060340032e-01, -1.859080614989584e-02, -1.925964045999002e-02, -2.028592764702533e-03, -2.033172083016519e-03, -4.126941072571045e-03, -4.389135870367174e-03, -1.235521149581218e-01, -1.250430491473151e-01, -5.450993984282147e-03, -7.242467155884854e-03, -5.450993984282141e-03, -7.242467155884847e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_pbe_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.410247238478092e-08, 0.000000000000000e+00, -1.410255048076607e-08, -1.410235853593407e-08, 0.000000000000000e+00, -1.410246773272955e-08, -1.410186688872634e-08, 0.000000000000000e+00, -1.410179891517913e-08, -1.410315586616809e-08, 0.000000000000000e+00, -1.410344080933368e-08, -1.410241091785566e-08, 0.000000000000000e+00, -1.410269073420069e-08, -1.410241091785566e-08, 0.000000000000000e+00, -1.410269073420069e-08, -1.902738626897717e-05, 0.000000000000000e+00, -1.903312291240531e-05, -1.902773664199826e-05, 0.000000000000000e+00, -1.903391958253764e-05, -1.904073518972011e-05, 0.000000000000000e+00, -1.904369810908301e-05, -1.900591929656669e-05, 0.000000000000000e+00, -1.901001903835176e-05, -1.903826499248302e-05, 0.000000000000000e+00, -1.901995251362335e-05, -1.903826499248302e-05, 0.000000000000000e+00, -1.901995251362335e-05, -1.212712016387633e-02, 0.000000000000000e+00, -1.213263745934395e-02, -1.213422333490099e-02, 0.000000000000000e+00, -1.214170325069352e-02, -1.220675311925335e-02, 0.000000000000000e+00, -1.216417734022979e-02, -1.184508124999896e-02, 0.000000000000000e+00, -1.186362157641049e-02, -1.204996948946707e-02, 0.000000000000000e+00, -1.137770554445656e-02, -1.204996948946707e-02, 0.000000000000000e+00, -1.137770554445656e-02, -1.288163186134515e+00, 0.000000000000000e+00, -1.210480783546324e+00, -1.293929258274443e+00, 0.000000000000000e+00, -1.198958831058055e+00, -7.024736775382335e-03, 0.000000000000000e+00, -6.536729963551508e-03, -1.707138468734820e+00, 0.000000000000000e+00, -1.653362521172393e+00, -1.110596431200508e+00, 0.000000000000000e+00, -2.424013178066249e+00, -1.110596431200508e+00, 0.000000000000000e+00, -2.424013178066251e+00, -4.901171909713042e+00, 0.000000000000000e+00, -4.852045184287062e+00, -5.164107196513218e+00, 0.000000000000000e+00, -5.137690861125329e+00, -2.861139165879544e+00, 0.000000000000000e+00, -2.876415322371308e+00, -4.489257847500432e+00, 0.000000000000000e+00, -4.367392023804800e+00, -4.892974143692686e+00, 0.000000000000000e+00, -1.241489774951463e+01, -4.892974143692697e+00, 0.000000000000000e+00, -1.241489774951466e+01, -4.150642805951870e-06, 0.000000000000000e+00, -4.154478376855439e-06, -4.151077047409680e-06, 0.000000000000000e+00, -4.154899854964338e-06, -4.150634906611483e-06, 0.000000000000000e+00, -4.154469904353894e-06, -4.151008008976369e-06, 0.000000000000000e+00, -4.154853187473594e-06, -4.150891140413312e-06, 0.000000000000000e+00, -4.154695177164075e-06, -4.150891140413312e-06, 0.000000000000000e+00, -4.154695177164075e-06, -1.466484869267524e-04, 0.000000000000000e+00, -1.466743289092846e-04, -1.437681764862563e-04, 0.000000000000000e+00, -1.438924949333971e-04, -1.464979970443768e-04, 0.000000000000000e+00, -1.466126339628451e-04, -1.440549839158125e-04, 0.000000000000000e+00, -1.440934941458103e-04, -1.449944755481530e-04, 0.000000000000000e+00, -1.452235315048722e-04, -1.449944755481530e-04, 0.000000000000000e+00, -1.452235315048722e-04, -2.398646860935563e-02, 0.000000000000000e+00, -2.425363679031022e-02, -1.962165764476449e-02, 0.000000000000000e+00, -1.961355739292487e-02, -3.431127117377774e-02, 0.000000000000000e+00, -3.020692315508220e-02, -3.357239310500461e-02, 0.000000000000000e+00, -2.940389454651912e-02, -2.094405455698071e-02, 0.000000000000000e+00, -2.552100242507124e-02, -2.094405455698071e-02, 0.000000000000000e+00, -2.552100242507124e-02, -1.943022807584323e+00, 0.000000000000000e+00, -1.973878651228431e+00, -7.807368902536804e-01, 0.000000000000000e+00, -7.733246984527358e-01, -2.196255131451727e+00, 0.000000000000000e+00, -2.128436847125383e+00, -2.388781563259075e-04, 0.000000000000000e+00, -2.393252798592671e-04, -2.107177301419803e+00, 0.000000000000000e+00, -2.498194052910530e+00, -2.107177301419803e+00, 0.000000000000000e+00, -2.498194052910530e+00, -6.302078258995564e+00, 0.000000000000000e+00, -5.454669574423942e+00, -5.426608546248804e+00, 0.000000000000000e+00, -5.010261513994756e+00, -3.091055832585660e+01, 0.000000000000000e+00, -3.438600703860231e+01, -3.272715519738317e+00, 0.000000000000000e+00, -3.153550113286205e+00, -1.537122964332544e+01, 0.000000000000000e+00, -1.509851506614284e+01, -1.537122964332540e+01, 0.000000000000000e+00, -1.509851506614282e+01, -2.786671943647171e-02, 0.000000000000000e+00, -2.745342234862687e-02, -2.768881209760183e-02, 0.000000000000000e+00, -2.728503337803571e-02, -2.775087826858596e-02, 0.000000000000000e+00, -2.734421501704602e-02, -2.780394453671476e-02, 0.000000000000000e+00, -2.739364152176847e-02, -2.777754978356946e-02, 0.000000000000000e+00, -2.736899203244824e-02, -2.777754978356946e-02, 0.000000000000000e+00, -2.736899203244824e-02, -3.134777333470946e-02, 0.000000000000000e+00, -3.093882655369238e-02, -4.242961398533929e-02, 0.000000000000000e+00, -4.186734120889336e-02, -3.918258941490009e-02, 0.000000000000000e+00, -3.863738513604521e-02, -3.604497599490926e-02, 0.000000000000000e+00, -3.557924262585024e-02, -3.767930395308996e-02, 0.000000000000000e+00, -3.717189036969211e-02, -3.767930395308996e-02, 0.000000000000000e+00, -3.717189036969211e-02, -1.619966098137195e-02, 0.000000000000000e+00, -1.612942814697346e-02, -4.565707275609062e-01, 0.000000000000000e+00, -4.517018702984985e-01, -3.117792195694206e-01, 0.000000000000000e+00, -3.067545350179097e-01, -1.629521807865452e-01, 0.000000000000000e+00, -1.600032741145717e-01, -2.305812057613976e-01, 0.000000000000000e+00, -2.318743494446004e-01, -2.305812057613977e-01, 0.000000000000000e+00, -2.318743494446007e-01, -5.877892167776140e-02, 0.000000000000000e+00, -5.762618607440963e-02, -2.617616872501586e+00, 0.000000000000000e+00, -2.620621320867306e+00, -2.573259302708602e+00, 0.000000000000000e+00, -2.627729285055731e+00, -2.114823303532029e-01, 0.000000000000000e+00, -2.013224792269275e-01, -3.236146529786872e+00, 0.000000000000000e+00, -3.770237162854337e+00, -3.236146529786875e+00, 0.000000000000000e+00, -3.770237162854338e+00, -3.884056464767430e+00, 0.000000000000000e+00, -3.965077551221120e+00, -1.939033108145706e+01, 0.000000000000000e+00, -3.434701799716860e+01, -1.196738734387583e+01, 0.000000000000000e+00, -1.274008358045070e+01, -3.613222617341613e+00, 0.000000000000000e+00, -3.536011160378314e+00, -3.169091155994365e+01, 0.000000000000000e+00, -1.567418979136076e+01, -3.169091155994369e+01, 0.000000000000000e+00, -1.567418979136080e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
