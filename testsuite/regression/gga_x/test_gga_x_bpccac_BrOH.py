
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_bpccac_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_bpccac", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.097337391073472e+01, -2.097339647462208e+01, -2.097357561954668e+01, -2.097320456866748e+01, -2.097338515412240e+01, -2.097338515412240e+01, -3.481796476871505e+00, -3.481764607855797e+00, -3.481032785766720e+00, -3.483032696749083e+00, -3.481794917588723e+00, -3.481794917588723e+00, -7.029267856191365e-01, -7.030803095960382e-01, -7.098212870982856e-01, -7.139281488374254e-01, -7.029782997162778e-01, -7.029782997162778e-01, -2.237862778048531e-01, -2.241266381414984e-01, -8.157323473016735e-01, -1.921711274771052e-01, -2.238535753556633e-01, -2.238535753556633e-01, -1.169413290165629e-03, -1.351298610260088e-03, -4.814119596456697e-02, -1.016373798603741e-04, -1.334565013905374e-03, -1.334565013905374e-03, -5.036634568045831e+00, -5.035980821041814e+00, -5.036574129881043e+00, -5.036065687626073e+00, -5.036289940023898e+00, -5.036289940023898e+00, -2.137098704120950e+00, -2.145896630741548e+00, -2.139860419237513e+00, -2.146673955589212e+00, -2.139573373777687e+00, -2.139573373777687e+00, -5.749707348832548e-01, -5.955298457226811e-01, -5.478606196279017e-01, -5.478204028245872e-01, -5.923882436786937e-01, -5.923882436786937e-01, -1.467286640247896e-01, -2.514199098190867e-01, -1.443327694006293e-01, -1.811636896553142e+00, -1.640745238956134e-01, -1.640745238956134e-01, -9.385118654776258e-05, -1.415079809470511e-04, -1.006188984943120e-04, -8.753121795402416e-02, -1.301346163637432e-04, -1.301346163637433e-04, -5.586338720308813e-01, -5.615059274571951e-01, -5.604842505895553e-01, -5.596860704914511e-01, -5.600852978223144e-01, -5.600852978223144e-01, -5.397618090486650e-01, -5.191612855397213e-01, -5.245361363892816e-01, -5.297139193179267e-01, -5.268441545835336e-01, -5.268441545835335e-01, -6.254186525344128e-01, -2.930992261745061e-01, -3.225766229452405e-01, -3.691672920277485e-01, -3.434089305272054e-01, -3.434089305272053e-01, -4.715361995266376e-01, -3.829583635878860e-02, -7.215231388000608e-02, -3.377534020349963e-01, -1.199741102174872e-01, -1.199741102174872e-01, -1.644134240711037e-03, -3.603433447324193e-06, -2.344898870572328e-05, -1.144369835164712e-01, -9.608079107145231e-05, -9.608079107145249e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_bpccac_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_bpccac", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.503890429886075e+01, -2.503899571213433e+01, -2.503940398663102e+01, -2.503790705459135e+01, -2.503895250327157e+01, -2.503895250327157e+01, -4.006857991098540e+00, -4.006905195821859e+00, -4.008367628705738e+00, -4.006697114037951e+00, -4.006899338561367e+00, -4.006899338561367e+00, -7.373310745078289e-01, -7.359287052991874e-01, -6.999672991355471e-01, -7.063015739506038e-01, -7.368222773831027e-01, -7.368222773831027e-01, -1.911573912001350e-01, -1.935969441104936e-01, -9.055773006049767e-01, -2.120668579529944e-01, -1.918681365568298e-01, -1.918681365568298e-01, -4.797378207864281e-03, -5.538470783414684e-03, -1.343109003810860e-01, -4.151412094721644e-04, -5.470002286112626e-03, -5.470002286112626e-03, -6.183079637665847e+00, -6.185957905430027e+00, -6.183373421571834e+00, -6.185611453709968e+00, -6.184556471036765e+00, -6.184556471036765e+00, -2.113250584789369e+00, -2.131689208933745e+00, -2.102374420085085e+00, -2.116682600955593e+00, -2.140139671294669e+00, -2.140139671294669e+00, -6.748704789794273e-01, -7.663858651380678e-01, -6.380465194238287e-01, -6.918611320043839e-01, -7.057435326274557e-01, -7.057435326274557e-01, -1.722731015009127e-01, -2.064632060939541e-01, -1.655881397455699e-01, -2.330784625956722e+00, -2.018832094041555e-01, -2.018832094041555e-01, -3.832325046151287e-04, -5.788371377263737e-04, -4.114467478183887e-04, -1.630967391808556e-01, -5.323447756009306e-04, -5.323447756009267e-04, -7.371105017506898e-01, -7.256376279839725e-01, -7.297092074255994e-01, -7.328869079158828e-01, -7.312942080172374e-01, -7.312942080172374e-01, -7.146936349299556e-01, -5.649485826610745e-01, -6.064982668105247e-01, -6.471232794198362e-01, -6.264156796431222e-01, -6.264156796431221e-01, -8.022954572568483e-01, -2.438777259588840e-01, -2.882843018022617e-01, -3.884880648216470e-01, -3.330846806359478e-01, -3.330846806359478e-01, -5.068317523346936e-01, -1.185994389505501e-01, -1.634490536997533e-01, -3.762102795076421e-01, -1.548348830198320e-01, -1.548348830198319e-01, -6.731879921618220e-03, -1.455256645314342e-05, -9.525107498635347e-05, -1.468533385217679e-01, -3.926967038631396e-04, -3.926967038631422e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_bpccac_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_bpccac", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-7.407653991097370e-09, -7.407600192911576e-09, -7.407281018938696e-09, -7.408163571932517e-09, -7.407626281557179e-09, -7.407626281557179e-09, -1.017158457450794e-05, -1.017171429670282e-05, -1.017359945240317e-05, -1.016172673222568e-05, -1.017147797673533e-05, -1.017147797673533e-05, -6.799226087545051e-03, -6.809498147617306e-03, -7.007630781792565e-03, -6.822969215437489e-03, -6.803064757520041e-03, -6.803064757520041e-03, -8.347302422802158e-01, -8.190032078897016e-01, -3.516849725637904e-03, -6.639270165819520e-01, -8.304297479135501e-01, -8.304297479135501e-01, 1.445766044934090e+02, 1.454510745992659e+02, 2.794166860754681e+01, 9.473180955875647e+01, 1.510898833593940e+02, 1.510898833593940e+02, -2.156843196717765e-06, -2.156477323868227e-06, -2.156798173954447e-06, -2.156513820241824e-06, -2.156666597718006e-06, -2.156666597718006e-06, -8.502124897996472e-05, -8.320765118420705e-05, -8.519661339643551e-05, -8.378122624465965e-05, -8.354680498655489e-05, -8.354680498655489e-05, -1.337291999364289e-02, -1.044511412433726e-02, -1.636848924844024e-02, -1.491144860008249e-02, -1.166728220910306e-02, -1.166728220910306e-02, -7.470735174982255e-01, -5.437204543997556e-01, -9.676108509613356e-01, -1.220042985105701e-04, -4.078893936424096e-01, -4.078893936424096e-01, 1.003118011855350e+02, 1.017292770497608e+02, 2.904901379365369e+02, 7.198399718987280e+00, 1.503213301904386e+02, 1.503213301904388e+02, -1.309895178140856e-02, -1.315143033853695e-02, -1.313262349944526e-02, -1.311826251235347e-02, -1.312548663833512e-02, -1.312548663833512e-02, -1.496750931831042e-02, -2.192472248751615e-02, -1.964078339706447e-02, -1.772822482574106e-02, -1.869193978023919e-02, -1.869193978023920e-02, -8.619097300436638e-03, -2.925157266275867e-01, -1.835580652728858e-01, -8.904962863388002e-02, -1.303081788305988e-01, -1.303081788305988e-01, -3.266802113173407e-02, 3.070825590319131e+01, 1.287470636450930e+01, -1.192066285995586e-01, -3.854016685740158e-01, -3.854016685740283e-01, 1.092508593704829e+02, 1.622293183338246e+02, 1.441892828616713e+02, -5.503096887971974e-01, 2.181772826661619e+02, 2.181772826661651e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
