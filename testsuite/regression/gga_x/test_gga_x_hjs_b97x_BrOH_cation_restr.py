
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_hjs_b97x_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_hjs_b97x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.029768322264337e+01, -2.029772381404489e+01, -2.029794776976955e+01, -2.029734295969749e+01, -2.029765367971141e+01, -2.029765367971141e+01, -3.286873883281414e+00, -3.286855861813425e+00, -3.286521692500278e+00, -3.287739114890631e+00, -3.286933001745270e+00, -3.286933001745270e+00, -6.008478324577545e-01, -6.006111283809769e-01, -5.968437120523988e-01, -6.015684000663077e-01, -5.999810572130422e-01, -5.999810572130422e-01, -1.431489506974330e-01, -1.436034447774085e-01, -7.055885938796940e-01, -1.238148785678967e-01, -1.294134056150635e-01, -1.294134056150634e-01, -4.382342718674625e-05, -5.423491615677493e-05, -2.659806497538335e-02, -5.889170789957993e-06, -1.282549268939914e-05, -1.282549268939909e-05, -4.864721514727009e+00, -4.864857609497508e+00, -4.864734802788929e+00, -4.864854832893998e+00, -4.864786524733700e+00, -4.864786524733700e+00, -1.923953333927023e+00, -1.934391656668559e+00, -1.922634318572879e+00, -1.931776757136606e+00, -1.930440009128800e+00, -1.930440009128800e+00, -5.014112548918200e-01, -5.364661579632148e-01, -4.618278620809289e-01, -4.699448849789666e-01, -5.085922588354092e-01, -5.085922588354092e-01, -9.991675242905984e-02, -1.652064488703530e-01, -9.240400864415610e-02, -1.734335170869522e+00, -1.051684276431619e-01, -1.051684276431619e-01, -2.576186411108738e-06, -5.468067919472020e-06, -2.334250083831320e-06, -5.780308643650967e-02, -4.193708200210257e-06, -4.193708200210249e-06, -4.890467992415108e-01, -4.885333331773146e-01, -4.887062698183136e-01, -4.888515285589803e-01, -4.887775892464583e-01, -4.887775892464583e-01, -4.735012782655386e-01, -4.243730115023194e-01, -4.370977596593681e-01, -4.506353683193126e-01, -4.434932553899742e-01, -4.434932553899742e-01, -5.657108399242555e-01, -2.002336451835558e-01, -2.290169804140959e-01, -2.858662504658606e-01, -2.534305592585726e-01, -2.534305592585724e-01, -3.867352595550565e-01, -2.443909021287762e-02, -4.336576368119626e-02, -2.674108388010561e-01, -7.376595664173952e-02, -7.376595664173952e-02, -1.973481709856001e-04, -9.705821301217124e-08, -9.049098423131870e-07, -6.938318527151649e-02, -3.277858999750549e-06, -3.277858999753719e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_hjs_b97x_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_hjs_b97x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.562975075179596e+01, -2.562984499435669e+01, -2.563024984579646e+01, -2.562884798227708e+01, -2.562958454489080e+01, -2.562958454489080e+01, -4.073367247029902e+00, -4.073411293073098e+00, -4.074530310077367e+00, -4.073369331711798e+00, -4.073519734624586e+00, -4.073519734624586e+00, -7.151531239007879e-01, -7.136177329903546e-01, -6.743128047160850e-01, -6.813750806562531e-01, -6.806580439343535e-01, -6.806580439343535e-01, -1.090457782787411e-01, -1.141545841459642e-01, -8.505021968494990e-01, -6.529695132091397e-02, -7.901774449500401e-02, -7.901774449500416e-02, -1.035448201055072e-04, -1.295771476444656e-04, -3.766287257044314e-02, -1.232681518882992e-05, -2.799687854481500e-05, -2.799687854479594e-05, -6.251040564988455e+00, -6.253268831159046e+00, -6.251142488037028e+00, -6.253109661884876e+00, -6.252170713599950e+00, -6.252170713599950e+00, -2.129417202703711e+00, -2.150486141900675e+00, -2.105839801508616e+00, -2.124550005194849e+00, -2.152378604400851e+00, -2.152378604400851e+00, -6.424189128792682e-01, -7.218874536138049e-01, -5.869568462951826e-01, -6.303585983823285e-01, -6.563832412126946e-01, -6.563832412126946e-01, -6.345541601251452e-02, -1.016410353725885e-01, -6.246231017016941e-02, -2.294559563446351e+00, -5.260196569593131e-02, -5.260196569593131e-02, -5.251263794262391e-06, -1.140871556941433e-05, -4.747324581301575e-06, -5.444845211218247e-02, -8.660453403141549e-06, -8.660453403116675e-06, -6.672437248471692e-01, -6.595287381764683e-01, -6.622676499124276e-01, -6.645089060192148e-01, -6.633900035578492e-01, -6.633900035578492e-01, -6.485546797731393e-01, -5.112998562165076e-01, -5.525770940035497e-01, -5.923028615296720e-01, -5.723623112297046e-01, -5.723623112297046e-01, -7.589391949953951e-01, -1.482602677780181e-01, -2.103180274963895e-01, -3.405241661190527e-01, -2.717010885936709e-01, -2.717010885936709e-01, -4.653862247060391e-01, -3.589620142192834e-02, -5.172756675047781e-02, -3.354446424157529e-01, -5.072784524415988e-02, -5.072784524415937e-02, -4.886440064255926e-04, -1.941783449173857e-07, -1.819661200578584e-06, -5.152898002837370e-02, -6.718961703357147e-06, -6.718961703402010e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_hjs_b97x_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_hjs_b97x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-3.682593434565587e-09, -3.682549807277615e-09, -3.682347265356002e-09, -3.682996549838150e-09, -3.682657543344981e-09, -3.682657543344981e-09, -5.277672982991405e-06, -5.277603974214700e-06, -5.275490136175169e-06, -5.275156323559889e-06, -5.277081547673513e-06, -5.277081547673513e-06, -3.782592720158941e-03, -3.800369535477359e-03, -4.249710716049924e-03, -4.111940151671754e-03, -4.140371615657204e-03, -4.140371615657204e-03, -7.440088022650778e-01, -7.060087733165985e-01, -2.050729355569493e-03, -1.601994061998367e+00, -1.215038810138003e+00, -1.215038810138001e+00, -9.627406011630829e-02, -1.306042468664836e-01, -5.566751131050383e+00, -4.729205479322871e-03, -2.107836867687023e-02, -2.107836867686907e-02, -1.035141268836293e-06, -1.034198439528375e-06, -1.035095857519895e-06, -1.034263545071623e-06, -1.034664359805853e-06, -1.034664359805853e-06, -5.289245735249018e-05, -5.139804928796460e-05, -5.399465562074653e-05, -5.263828934014723e-05, -5.154557564780636e-05, -5.154557564780636e-05, -6.214506913824174e-03, -4.230544706169967e-03, -8.487119029542597e-03, -6.872887854942123e-03, -5.799491369303158e-03, -5.799491369303158e-03, -2.946917885139323e+00, -6.248748556687879e-01, -3.408784691723212e+00, -5.448959856011189e-05, -2.736834843774124e+00, -2.736834843774124e+00, -1.428123954673775e-03, -4.898872653030328e-03, -6.632735994797944e-03, -6.060670974213317e+00, -8.969260559249117e-03, -8.969260559193726e-03, -5.602380783128130e-03, -5.853776976630778e-03, -5.766573315662022e-03, -5.693779234174747e-03, -5.730307924376449e-03, -5.730307924376449e-03, -6.185944456407405e-03, -1.278940572525103e-02, -1.043260685311734e-02, -8.487904293159331e-03, -9.431713208502437e-03, -9.431713208502437e-03, -3.528401013488887e-03, -2.911410671438757e-01, -1.507956783225073e-01, -5.010500430108666e-02, -8.853641815317898e-02, -8.853641815317882e-02, -1.770550458700330e-02, -5.019418730241052e+00, -5.306393891211009e+00, -5.630526372361773e-02, -5.610156580990094e+00, -5.610156580990123e+00, -3.778011314809805e-01, -1.094582242969721e-05, -4.171627614513408e-04, -5.953496283603526e+00, -7.280698477536076e-03, -7.280698477595237e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
