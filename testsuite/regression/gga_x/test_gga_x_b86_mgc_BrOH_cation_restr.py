
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_b86_mgc_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_b86_mgc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.105561045293074e+01, -2.105563566211823e+01, -2.105581962040473e+01, -2.105544307847703e+01, -2.105563015529014e+01, -2.105563015529014e+01, -3.496262348564214e+00, -3.496221137097777e+00, -3.495354195724725e+00, -3.497525562272108e+00, -3.496297217405820e+00, -3.496297217405820e+00, -7.035418656765660e-01, -7.035946570091544e-01, -7.067217599882638e-01, -7.114917379853717e-01, -7.096025654734235e-01, -7.096025654734235e-01, -2.184432308486254e-01, -2.194603829720292e-01, -8.116905921268704e-01, -1.864326746189156e-01, -1.984035101150234e-01, -1.984035101150234e-01, -1.872713971127769e-02, -1.935483799523287e-02, -7.129134676015210e-02, -1.277519297057237e-02, -1.474446500499610e-02, -1.474446500499610e-02, -5.055683349694656e+00, -5.054931798494499e+00, -5.055660188571042e+00, -5.054996543257695e+00, -5.055296075623223e+00, -5.055296075623223e+00, -2.135682039761370e+00, -2.145434513334767e+00, -2.137463116567332e+00, -2.146083382468906e+00, -2.140189992900915e+00, -2.140189992900915e+00, -5.841747427827158e-01, -6.040562615048745e-01, -5.451582446869321e-01, -5.387911421448667e-01, -5.896849290538964e-01, -5.896849290538964e-01, -1.471388620893878e-01, -2.354588072579676e-01, -1.384765361463304e-01, -1.817139445889451e+00, -1.604040571562704e-01, -1.604040571562704e-01, -1.044033693461631e-02, -1.242162278606162e-02, -8.976204033281145e-03, -1.015259855816331e-01, -1.082945092834883e-02, -1.082945092834883e-02, -5.511736397831686e-01, -5.549953021529678e-01, -5.536747026585855e-01, -5.525581800477488e-01, -5.531179439419851e-01, -5.531179439419851e-01, -5.341754734611360e-01, -5.149931625092031e-01, -5.206098164196041e-01, -5.255577287313682e-01, -5.228490189475815e-01, -5.228490189475815e-01, -6.345211962600060e-01, -2.798118141257054e-01, -3.145106217914974e-01, -3.692602822747447e-01, -3.396587199084215e-01, -3.396587199084215e-01, -4.753376976634683e-01, -6.936554971007085e-02, -8.759797582533643e-02, -3.448844745322685e-01, -1.198135722591810e-01, -1.198135722591810e-01, -2.438342597988730e-02, -4.425158875573867e-03, -7.779476793529883e-03, -1.145551931191431e-01, -1.007735374767958e-02, -1.007735374767957e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_b86_mgc_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_b86_mgc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.506328179188463e+01, -2.506338143580038e+01, -2.506379828533952e+01, -2.506231633882080e+01, -2.506309655792836e+01, -2.506309655792836e+01, -4.024899691667466e+00, -4.024944629959207e+00, -4.026083371619903e+00, -4.024869406439109e+00, -4.025050596556070e+00, -4.025050596556070e+00, -7.591382736126666e-01, -7.579420929464294e-01, -7.308748122209751e-01, -7.371760812221639e-01, -7.360287162235907e-01, -7.360287162235907e-01, -2.032390486531085e-01, -2.046929759778134e-01, -8.893199963664835e-01, -1.749087441311495e-01, -1.841089071126527e-01, -1.841089071126526e-01, -1.794102174223418e-02, -1.859581421451514e-02, -7.244439538766859e-02, -1.193783127584233e-02, -1.394975319965165e-02, -1.394975319965165e-02, -6.181832522188173e+00, -6.184646664462155e+00, -6.181958333946401e+00, -6.184442685765863e+00, -6.183260616376838e+00, -6.183260616376838e+00, -2.190322256555093e+00, -2.207178715584503e+00, -2.176911479159036e+00, -2.191587283917440e+00, -2.206378371795056e+00, -2.206378371795056e+00, -6.835308051430812e-01, -7.729477201474315e-01, -6.288532353630293e-01, -6.798187902236420e-01, -6.978283827479900e-01, -6.978283827479900e-01, -1.444722934549363e-01, -2.187794544899273e-01, -1.367555639853171e-01, -2.330360915751903e+00, -1.532613288546842e-01, -1.532613288546842e-01, -9.678730604344415e-03, -1.161631542257766e-02, -8.463247313741602e-03, -1.024598573022457e-01, -1.020837301923445e-02, -1.020837301923444e-02, -7.242571355506878e-01, -7.114995060456951e-01, -7.158843770168297e-01, -7.195917879006396e-01, -7.177280067732604e-01, -7.177280067732604e-01, -7.072859833263684e-01, -5.579361043207968e-01, -5.951531991674675e-01, -6.370554514055881e-01, -6.152460142474329e-01, -6.152460142474329e-01, -8.088734769040404e-01, -2.597827773020086e-01, -2.985756752134365e-01, -3.916337385439826e-01, -3.377732392959157e-01, -3.377732392959157e-01, -5.131134676405312e-01, -7.042595857509529e-02, -8.903952058075254e-02, -3.826451792856000e-01, -1.187108049025315e-01, -1.187108049025316e-01, -2.366256926845278e-02, -3.990125874062848e-03, -7.167076781990252e-03, -1.141069310287803e-01, -9.491517758335165e-03, -9.491517758335165e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_b86_mgc_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_b86_mgc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-7.623033596218728e-09, -7.622986377000111e-09, -7.622689543722633e-09, -7.623393858669012e-09, -7.623037165787709e-09, -7.623037165787709e-09, -1.019114632703483e-05, -1.019151865252417e-05, -1.019912673265605e-05, -1.017816599437941e-05, -1.019061007635486e-05, -1.019061007635486e-05, -6.381581889257834e-03, -6.383233270516780e-03, -6.341551469905885e-03, -6.170853445975032e-03, -6.235385906405532e-03, -6.235385906405532e-03, -6.527279931799267e-01, -6.479519768609495e-01, -3.582168140942161e-03, -9.994395610342722e-01, -8.734520761820384e-01, -8.734520761820384e-01, -1.038575897677748e+03, -9.393819579731514e+02, -1.355776451558221e+01, -3.722843142483257e+03, -2.370433744584211e+03, -2.370433744584213e+03, -2.261537053337523e-06, -2.262150862479174e-06, -2.261548321299849e-06, -2.262090459034399e-06, -2.261857695734422e-06, -2.261857695734422e-06, -7.615508106162001e-05, -7.474055101300991e-05, -7.597725595092083e-05, -7.473739444425612e-05, -7.544735385472102e-05, -7.544735385472102e-05, -1.297541028831543e-02, -1.081988174397984e-02, -1.722433611609144e-02, -1.723199557637947e-02, -1.242784064223412e-02, -1.242784064223412e-02, -1.742071284189821e+00, -4.320085422547389e-01, -2.087549504357731e+00, -1.319539873700796e-04, -1.573093074552961e+00, -1.573093074552961e+00, -7.743286384150969e+03, -4.195840170065489e+03, -1.667086302463749e+04, -5.233204723230783e+00, -7.851704369815471e+03, -7.851704369815471e+03, -1.536711493140356e-02, -1.516718493222696e-02, -1.523652986285298e-02, -1.529518375382626e-02, -1.526583726706677e-02, -1.526583726706677e-02, -1.733880433639947e-02, -2.219612262090192e-02, -2.079589998012582e-02, -1.945572696339333e-02, -2.016448891611114e-02, -2.016448891611114e-02, -8.906168596330708e-03, -2.389139901661040e-01, -1.591280680096572e-01, -8.455353449440271e-02, -1.192804381259045e-01, -1.192804381259045e-01, -3.062087944712759e-02, -1.434587514610641e+01, -7.300765718688480e+00, -1.093683764016610e-01, -3.587752292079876e+00, -3.587752292079868e+00, -4.180146191569232e+02, -1.878744933841827e+05, -2.372060951994831e+04, -4.015645026848262e+00, -1.038519211429146e+04, -1.038519211429149e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
