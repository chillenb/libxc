
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_optb88_vdw_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_optb88_vdw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.082722194080320e+01, -2.082724973848744e+01, -2.082744388937311e+01, -2.082698729324790e+01, -2.082723601406416e+01, -2.082723601406416e+01, -3.443782125552166e+00, -3.443758970396381e+00, -3.443264705670486e+00, -3.444846774341184e+00, -3.443784886232729e+00, -3.443784886232729e+00, -6.867863910743990e-01, -6.867213458853874e-01, -6.868347146232086e-01, -6.911808008971754e-01, -6.867594610920958e-01, -6.867594610920958e-01, -2.104227556358483e-01, -2.113207472096538e-01, -8.032737356832862e-01, -1.786515872500301e-01, -2.106658249163817e-01, -2.106658249163817e-01, -5.575742870473268e-02, -5.643880235403669e-02, -1.033272381601378e-01, -4.997435440307862e-02, -5.588920514785545e-02, -5.588920514785545e-02, -5.014612494715829e+00, -5.014218213202809e+00, -5.014578026295278e+00, -5.014271354919535e+00, -5.014401969055310e+00, -5.014401969055310e+00, -2.068840663058278e+00, -2.078929059278865e+00, -2.069283861497019e+00, -2.077125730706346e+00, -2.075141894886073e+00, -2.075141894886073e+00, -5.699534756057758e-01, -5.948994784706525e-01, -5.426147167158956e-01, -5.466227757183629e-01, -5.881361954020978e-01, -5.881361954020978e-01, -1.553192896515631e-01, -2.317728922837870e-01, -1.513870927440610e-01, -1.809694825719106e+00, -1.626264582540265e-01, -1.626264582540265e-01, -4.902468808298222e-02, -5.041321521747696e-02, -3.854649886593862e-02, -1.178517448515809e-01, -4.577373888555786e-02, -4.577373888555786e-02, -5.585702736478765e-01, -5.610286793983109e-01, -5.601893666997864e-01, -5.595077934163587e-01, -5.598516044892724e-01, -5.598516044892724e-01, -5.397340962432063e-01, -5.098831319188853e-01, -5.190917557468517e-01, -5.271726552226619e-01, -5.229569816358929e-01, -5.229569816358929e-01, -6.246507522599172e-01, -2.735862938484354e-01, -3.064645571333029e-01, -3.608614498831373e-01, -3.313567532782780e-01, -3.313567532782779e-01, -4.623236939144750e-01, -1.030999391232178e-01, -1.156499022841082e-01, -3.327378822483222e-01, -1.318614437514751e-01, -1.318614437514750e-01, -6.133949761054907e-02, -3.557279064551457e-02, -4.090594498232459e-02, -1.254807536411266e-01, -4.103532805746739e-02, -4.103532805746741e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_optb88_vdw_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_optb88_vdw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.542084681786699e+01, -2.542092668497660e+01, -2.542130216983291e+01, -2.541999394294829e+01, -2.542088877673411e+01, -2.542088877673411e+01, -4.098831443620664e+00, -4.098861526117289e+00, -4.099857387402336e+00, -4.099010602924407e+00, -4.098864376366297e+00, -4.098864376366297e+00, -7.694561644251663e-01, -7.683335858953005e-01, -7.392912514473174e-01, -7.455577837195896e-01, -7.690481201012884e-01, -7.690481201012884e-01, -2.029909996187455e-01, -2.060644378395016e-01, -9.335731341191998e-01, -1.460261948272662e-01, -2.039139412901895e-01, -2.039139412901895e-01, -2.042103943659471e-02, -2.100003919863618e-02, -5.730096914202345e-02, -1.400066818300062e-02, -2.078888995059407e-02, -2.078888995059407e-02, -6.244390603868625e+00, -6.246633303552890e+00, -6.244620840557406e+00, -6.246364640455639e+00, -6.245539103402203e+00, -6.245539103402203e+00, -2.230894665871150e+00, -2.248524469698228e+00, -2.221898883487006e+00, -2.235632176912342e+00, -2.254591700398362e+00, -2.254591700398362e+00, -6.875168218591334e-01, -7.684028468994671e-01, -6.510554200036071e-01, -6.954552625844500e-01, -7.168054849134858e-01, -7.168054849134858e-01, -1.104963485715451e-01, -2.025069956875498e-01, -1.087264211743455e-01, -2.336992228394693e+00, -1.250912126675758e-01, -1.250912126675758e-01, -1.364434449469330e-02, -1.463366324326915e-02, -1.109935674056639e-02, -7.340510314763792e-02, -1.330578089871218e-02, -1.330578089871220e-02, -7.373498195171484e-01, -7.271917196637351e-01, -7.307050517246562e-01, -7.335111071937394e-01, -7.320968381657788e-01, -7.320968381657788e-01, -7.148042241724446e-01, -5.849476429043445e-01, -6.197995757791006e-01, -6.541169058484858e-01, -6.364853930024816e-01, -6.364853930024816e-01, -8.047225162034732e-01, -2.560349956242606e-01, -3.076411791841137e-01, -4.051395384669140e-01, -3.527660776962160e-01, -3.527660776962160e-01, -5.261754656417378e-01, -5.490891673533550e-02, -6.838224795451389e-02, -3.875587794395410e-01, -9.081560397780968e-02, -9.081560397780968e-02, -2.313419405672319e-02, -7.419548925841533e-03, -1.003404672395623e-02, -8.657533867333446e-02, -1.167514778140239e-02, -1.167514778140239e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_optb88_vdw_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_optb88_vdw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.947156751985456e-09, -5.947129849567776e-09, -5.946922716024915e-09, -5.947365005255044e-09, -5.947143292774689e-09, -5.947143292774689e-09, -7.888365880284171e-06, -7.888604248572979e-06, -7.893859939825271e-06, -7.878126888570748e-06, -7.888354062768733e-06, -7.888354062768733e-06, -4.974612750556426e-03, -4.977399044819510e-03, -5.018095766684424e-03, -4.889833587474625e-03, -4.975711923979600e-03, -4.975711923979600e-03, -6.038952910780242e-01, -5.890969649140381e-01, -2.655198603997434e-03, -1.385785017967891e+00, -5.996189232346807e-01, -5.996189232346807e-01, -2.407505262426326e+03, -2.111725498424093e+03, -3.206424155496821e+01, -1.783070670614863e+04, -2.199671064367200e+03, -2.199671064367200e+03, -1.789531300046892e-06, -1.790626436537683e-06, -1.789633465979058e-06, -1.790485101623726e-06, -1.790105880956801e-06, -1.790105880956801e-06, -6.092488109907417e-05, -5.969694708703573e-05, -6.095458220157145e-05, -5.999359144629312e-05, -6.005689418200602e-05, -6.005689418200602e-05, -1.055483960778518e-02, -9.365823907384774e-03, -1.282623239580432e-02, -1.290437787912432e-02, -9.346330125878556e-03, -9.346330125878556e-03, -3.088550380253324e+00, -4.498098647485750e-01, -3.355241303018108e+00, -1.093374763351284e-04, -2.216538800962831e+00, -2.216538800962831e+00, -2.010215436601426e+04, -1.371060659309815e+04, -4.221449979929478e+04, -1.299301946930477e+01, -1.999324845482404e+04, -1.999324845482404e+04, -1.255004927920417e-02, -1.190095238947084e-02, -1.209635795253074e-02, -1.227203095625733e-02, -1.218111638844064e-02, -1.218111638844064e-02, -1.452485553302756e-02, -1.634821989650276e-02, -1.529313187411625e-02, -1.461720395226823e-02, -1.494274320522863e-02, -1.494274320522863e-02, -7.677718898291231e-03, -2.165114323007901e-01, -1.306984065039325e-01, -6.524875173897897e-02, -9.297747907841290e-02, -9.297747907841293e-02, -2.419110684940237e-02, -3.753723628712340e+01, -1.643037798758237e+01, -9.020266359582227e-02, -6.385028271109578e+00, -6.385028271109577e+00, -1.411493829223850e+03, -6.658738935444172e+05, -1.002951827220741e+05, -7.754479106480417e+00, -3.548919430098053e+04, -3.548919430098066e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
