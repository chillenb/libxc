
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_g96_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_g96", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.111730059006886e+01, -2.111733065465029e+01, -2.111752873845342e+01, -2.111708010680744e+01, -2.111730602027801e+01, -2.111730602027801e+01, -3.496125100790834e+00, -3.496091469345006e+00, -3.495399668304467e+00, -3.497266396479578e+00, -3.496169054615860e+00, -3.496169054615860e+00, -6.990303303834170e-01, -6.989690184380346e-01, -6.994345860361120e-01, -7.042649504995268e-01, -7.024604488460945e-01, -7.024604488460945e-01, -2.186259809807095e-01, -2.189760492953324e-01, -8.077128245488535e-01, -2.005401332013720e-01, -2.044736413140733e-01, -2.044736413140733e-01, -3.590793962540536e-01, -3.433649082104432e-01, -2.067852924158052e-01, -4.857008855171314e-01, -3.974105465176188e-01, -3.974105465176184e-01, -5.080468597784930e+00, -5.079906687356852e+00, -5.080453338972294e+00, -5.079957146479948e+00, -5.080178118650463e+00, -5.080178118650463e+00, -2.112245666728199e+00, -2.122408347694366e+00, -2.112914180553603e+00, -2.121848325626559e+00, -2.117574609365893e+00, -2.117574609365893e+00, -5.850264577553079e-01, -6.079975496055169e-01, -5.452403643545420e-01, -5.422210127670131e-01, -5.911255132996414e-01, -5.911255132996414e-01, -1.929855390455277e-01, -2.442842141112823e-01, -1.888929037450197e-01, -1.828965117460718e+00, -1.842071360909072e-01, -1.842071360909072e-01, -4.978348440245340e-01, -4.622051999885701e-01, -2.659396339790244e-01, -1.773510012755300e-01, -3.227735254582071e-01, -3.227735254582074e-01, -5.539427514569366e-01, -5.586090735889685e-01, -5.571715981968457e-01, -5.558360651206640e-01, -5.565221019224841e-01, -5.565221019224841e-01, -5.360834691148835e-01, -5.118949756073922e-01, -5.202427390999221e-01, -5.278270417258391e-01, -5.238723735211331e-01, -5.238723735211331e-01, -6.386610121844181e-01, -2.812152238341947e-01, -3.111844100305289e-01, -3.662801139732466e-01, -3.353071962017012e-01, -3.353071962017012e-01, -4.723088842578881e-01, -2.161109628321090e-01, -1.979483467097426e-01, -3.436264133299898e-01, -1.675744361625330e-01, -1.675744361625330e-01, -3.302685453011439e-01, -4.899505404112425e-01, -4.449097958924492e-01, -1.679091893887212e-01, -3.073351526026622e-01, -3.073351526026621e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_g96_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_g96", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.556630868046181e+01, -2.556639920082489e+01, -2.556679280702486e+01, -2.556544622423862e+01, -2.556615306175195e+01, -2.556615306175195e+01, -4.123718228572978e+00, -4.123754580869455e+00, -4.124695942635864e+00, -4.123842296716528e+00, -4.123861220536176e+00, -4.123861220536176e+00, -7.789211485774400e-01, -7.775894395595767e-01, -7.442503185873689e-01, -7.510782575287483e-01, -7.501443922123617e-01, -7.501443922123617e-01, -1.757071307587528e-01, -1.803422158666443e-01, -9.131891888064738e-01, -1.103510730811929e-01, -1.377266811179984e-01, -1.377266811179984e-01, 2.281959704442150e-01, 2.171316912145872e-01, 7.287505116216456e-02, 3.173378459258275e-01, 2.568194313175018e-01, 2.568194313175012e-01, -6.276734601567576e+00, -6.278883340961935e+00, -6.276833135376361e+00, -6.278730060325524e+00, -6.277823956868115e+00, -6.277823956868115e+00, -2.224235439847956e+00, -2.243807919295799e+00, -2.204554931741508e+00, -2.221882959286521e+00, -2.244546955921354e+00, -2.244546955921354e+00, -6.989789067344705e-01, -7.777020791341335e-01, -6.441572579584895e-01, -6.859833099433700e-01, -7.124699182261501e-01, -7.124699182261501e-01, -4.077926813557793e-02, -1.590898175066279e-01, -3.082127781686576e-02, -2.343629051223022e+00, -7.603439206611738e-02, -7.603439206611738e-02, 3.269034586091171e-01, 3.018188955566005e-01, 1.724621159018490e-01, 1.280687844279940e-02, 2.093625251419683e-01, 2.093625251419684e-01, -7.249889769706589e-01, -7.156010132911758e-01, -7.187681393941142e-01, -7.214778123374769e-01, -7.201098050429097e-01, -7.201098050429097e-01, -7.072328526285676e-01, -5.726378385817346e-01, -6.101720180344629e-01, -6.478638465128719e-01, -6.286678917164589e-01, -6.286678917164589e-01, -8.144813747312253e-01, -2.192819961219321e-01, -2.810398972659791e-01, -4.010488176860048e-01, -3.375847909164997e-01, -3.375847909164998e-01, -5.265018801420382e-01, 8.187813280156582e-02, 4.717153874986703e-02, -3.929325043352360e-01, -2.252595348971584e-02, -2.252595348971590e-02, 2.043860895808145e-01, 3.249448772764305e-01, 2.930616303958280e-01, -1.411974788247431e-02, 1.995049430064514e-01, 1.995049430064515e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_g96_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_g96", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-6.557702190066982e-09, -6.557677696319533e-09, -6.557468173938457e-09, -6.557834727525834e-09, -6.557656939449879e-09, -6.557656939449879e-09, -8.606715803302279e-06, -8.607080875931578e-06, -8.614698392301246e-06, -8.594951011062869e-06, -8.606323634494770e-06, -8.606323634494770e-06, -5.461416809609852e-03, -5.468711465981955e-03, -5.648916686382976e-03, -5.484031129079659e-03, -5.533865108576346e-03, -5.533865108576346e-03, -8.587060845623754e-01, -8.226510013333878e-01, -3.040521246528094e-03, -2.130469555720181e+00, -1.465053118840647e+00, -1.465053118840647e+00, -1.044661969799532e+05, -8.793084092221796e+04, -2.090195123282751e+02, -7.049619870746557e+05, -3.266152330570645e+05, -3.266152330570646e+05, -2.011326158079797e-06, -2.013892938900813e-06, -2.011419039715679e-06, -2.013684899618810e-06, -2.012637111303283e-06, -2.012637111303283e-06, -6.860488796985742e-05, -6.703878631945896e-05, -6.916167409795698e-05, -6.775196581621442e-05, -6.748276721219226e-05, -6.748276721219226e-05, -1.102812542889313e-02, -1.098677395973092e-02, -1.455443329489163e-02, -1.652100992837837e-02, -1.063984276941332e-02, -1.063984276941332e-02, -7.294492284894405e+00, -7.563900502558857e-01, -9.637117764848540e+00, -1.355198141942686e-04, -4.401157596910695e+00, -4.401157596910695e+00, -1.808499048024249e+06, -7.788692950258401e+05, -2.506786856270440e+06, -3.964086500433779e+01, -1.187207243429360e+06, -1.187207243429360e+06, -1.964219884865960e-02, -1.554875928172516e-02, -1.644923467771920e-02, -1.751065215053534e-02, -1.693209789605571e-02, -1.693209789605571e-02, -2.643969577098033e-02, -1.894870872404156e-02, -1.753801911651105e-02, -1.707825301105590e-02, -1.719534436382369e-02, -1.719534436382369e-02, -8.885040261164164e-03, -3.282634536836104e-01, -1.763896244607246e-01, -7.331314698268294e-02, -1.134632246821844e-01, -1.134632246821844e-01, -2.619870077358203e-02, -2.406165572685476e+02, -8.182526299958482e+01, -9.241823584869775e-02, -1.756316379794460e+01, -1.756316379794459e+01, -3.045798083626399e+04, -9.621615857020923e+07, -6.558287107553369e+06, -2.180289532858120e+01, -1.603958740847010e+06, -1.603958740847015e+06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
