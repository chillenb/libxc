
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_optb86b_vdw_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_optb86b_vdw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.048401246752803e+01, -2.048405047417174e+01, -2.048426774801770e+01, -2.048370129360525e+01, -2.048399123270208e+01, -2.048399123270208e+01, -3.374740264284103e+00, -3.374718521549839e+00, -3.374298868284533e+00, -3.375669729036688e+00, -3.374795546517776e+00, -3.374795546517776e+00, -6.691433577672720e-01, -6.689486049945044e-01, -6.660352923395551e-01, -6.707910933658734e-01, -6.691644352543417e-01, -6.691644352543417e-01, -2.033660121253529e-01, -2.041104966370206e-01, -7.746452052594159e-01, -1.791679405862941e-01, -1.870338307686002e-01, -1.870338307686002e-01, -2.337466352032991e-02, -2.411610290775688e-02, -8.284478286154709e-02, -1.616806662363191e-02, -1.853647384495886e-02, -1.853647384495886e-02, -4.950029517014388e+00, -4.950010258221278e+00, -4.950036429145046e+00, -4.950019303929170e+00, -4.950015381822892e+00, -4.950015381822892e+00, -2.009260475986935e+00, -2.019726570087478e+00, -2.008090868099368e+00, -2.017286083036517e+00, -2.015658103025602e+00, -2.015658103025602e+00, -5.660194714044102e-01, -5.979723298350106e-01, -5.264570443699361e-01, -5.315434096929895e-01, -5.728831130048145e-01, -5.728831130048145e-01, -1.517708869816942e-01, -2.226410435087323e-01, -1.443791817220028e-01, -1.799811387084983e+00, -1.583401698618244e-01, -1.583401698618244e-01, -1.326745002562668e-02, -1.571429245363911e-02, -1.130603386634565e-02, -1.114443118478496e-01, -1.364191217026667e-02, -1.364191217026667e-02, -5.491892452254626e-01, -5.496566426556420e-01, -5.494942043863997e-01, -5.493540265629786e-01, -5.494236778663906e-01, -5.494236778663906e-01, -5.332540984210732e-01, -4.902528462614760e-01, -5.016992875986553e-01, -5.135038103550861e-01, -5.072743546808254e-01, -5.072743546808254e-01, -6.275525581315091e-01, -2.609018600161641e-01, -2.922063973358363e-01, -3.498789001956288e-01, -3.176354462617659e-01, -3.176354462617659e-01, -4.521384764703495e-01, -8.103096995259680e-02, -9.950829458782150e-02, -3.300805628581241e-01, -1.257236186409171e-01, -1.257236186409171e-01, -3.018795720154549e-02, -5.700363221227437e-03, -9.917227666034902e-03, -1.215556903154866e-01, -1.270021661549356e-02, -1.270021661549355e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_optb86b_vdw_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_optb86b_vdw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.559414271507318e+01, -2.559423689199753e+01, -2.559464103669652e+01, -2.559324016607691e+01, -2.559397626389617e+01, -2.559397626389617e+01, -4.120554310587782e+00, -4.120596325224930e+00, -4.121668469449059e+00, -4.120586791885394e+00, -4.120704015325268e+00, -4.120704015325268e+00, -7.750826313964846e-01, -7.736747739980303e-01, -7.387539599705752e-01, -7.455975057076722e-01, -7.447104954853455e-01, -7.447104954853455e-01, -1.802331312344350e-01, -1.837184767998404e-01, -9.095999403868065e-01, -1.377026356312415e-01, -1.518894663587290e-01, -1.518894663587290e-01, -2.156851016745565e-02, -2.229918533585334e-02, -7.549090000251951e-02, -1.463114646903113e-02, -1.694159914384498e-02, -1.694159914384497e-02, -6.291047542627180e+00, -6.293344108310685e+00, -6.291152226053527e+00, -6.293179679820875e+00, -6.292212338866355e+00, -6.292212338866355e+00, -2.207014802085574e+00, -2.226717143087257e+00, -2.186953934326976e+00, -2.204335399741535e+00, -2.227651206054997e+00, -2.227651206054997e+00, -6.991029654349490e-01, -7.802318978674470e-01, -6.437408128371681e-01, -6.881419043693255e-01, -7.130322660936758e-01, -7.130322660936758e-01, -1.156511353672290e-01, -1.786267136132878e-01, -1.113034451398111e-01, -2.351239028955634e+00, -1.185038641528212e-01, -1.185038641528212e-01, -1.192847542888109e-02, -1.422933768413218e-02, -1.030521425837170e-02, -9.272969166226168e-02, -1.243217314226479e-02, -1.243217314226478e-02, -7.268095275279027e-01, -7.179256219668120e-01, -7.210373965740680e-01, -7.236183228722034e-01, -7.223260380681112e-01, -7.223260380681112e-01, -7.084938754328185e-01, -5.699655297812061e-01, -6.094442783961800e-01, -6.491147545081822e-01, -6.289750653520272e-01, -6.289750653520272e-01, -8.171262953012272e-01, -2.271031574275718e-01, -2.809874791337640e-01, -3.986386586457000e-01, -3.348175389498010e-01, -3.348175389498010e-01, -5.239213836997374e-01, -7.433291506609668e-02, -8.767187176053887e-02, -3.917124020965865e-01, -9.768703684837873e-02, -9.768703684837880e-02, -2.810368066933045e-02, -5.008995798075012e-03, -8.870629163519458e-03, -9.588763825879827e-02, -1.156632514811968e-02, -1.156632514811967e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_optb86b_vdw_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_optb86b_vdw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.349384125496932e-09, -4.349342432198511e-09, -4.349131156417426e-09, -4.349752017009375e-09, -4.349430372278768e-09, -4.349430372278768e-09, -6.067144594538360e-06, -6.067181549225279e-06, -6.067440203833602e-06, -6.062382920904078e-06, -6.066603915066387e-06, -6.066603915066387e-06, -4.176994221362623e-03, -4.189382020442968e-03, -4.478034100696627e-03, -4.341625553356021e-03, -4.377624008063729e-03, -4.377624008063729e-03, -6.742557480322189e-01, -6.516956760126258e-01, -2.288549190555765e-03, -1.372794549434162e+00, -1.058720544909808e+00, -1.058720544909808e+00, -1.418218833722260e+03, -1.283962977723842e+03, -2.096786887663318e+01, -5.060175765377741e+03, -3.227415911316044e+03, -3.227415911316049e+03, -1.249907297010508e-06, -1.249378366843806e-06, -1.249877650559664e-06, -1.249410785585843e-06, -1.249642078565739e-06, -1.249642078565739e-06, -5.468988529773738e-05, -5.333313264884593e-05, -5.537103694544494e-05, -5.415480880338935e-05, -5.361134198435368e-05, -5.361134198435368e-05, -7.563252279888052e-03, -5.688008331779100e-03, -1.022693394948053e-02, -9.195891052882762e-03, -7.141992039346282e-03, -7.141992039346282e-03, -2.921035407822729e+00, -5.367012763518721e-01, -3.540395013066369e+00, -6.920644474226667e-05, -2.403767723252836e+00, -2.403767723252836e+00, -1.051758086197341e+04, -5.703541848960118e+03, -2.268504409719051e+04, -8.883553388653292e+00, -1.068393367644293e+04, -1.068393367644292e+04, -7.860137677600387e-03, -7.957678471491196e-03, -7.923194250332440e-03, -7.895032091842696e-03, -7.909130167661092e-03, -7.909130167661092e-03, -8.801155448148754e-03, -1.443368603003981e-02, -1.249690280766185e-02, -1.086209505918179e-02, -1.167000391797308e-02, -1.167000391797308e-02, -4.700712572438073e-03, -2.546582140985984e-01, -1.431183024476059e-01, -5.697713918321068e-02, -9.191381114776007e-02, -9.191381114776009e-02, -2.002901237425929e-02, -2.191951941183501e+01, -1.183730083871389e+01, -6.855997774114184e-02, -6.114511631782466e+00, -6.114511631782464e+00, -5.738259566413924e+02, -2.548966898096998e+05, -3.220660876186051e+04, -6.879603122161238e+00, -1.412954672713269e+04, -1.412954672713270e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
