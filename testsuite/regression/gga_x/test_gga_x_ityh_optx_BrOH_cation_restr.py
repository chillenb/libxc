
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_ityh_optx_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ityh_optx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-5.028738273520971e+01, -5.028750714281382e+01, -5.028813136497855e+01, -5.028627890306202e+01, -5.028723946536764e+01, -5.028723946536764e+01, -7.833565105830955e+00, -7.833569964242217e+00, -7.833883807353717e+00, -7.834908790551156e+00, -7.833770512769151e+00, -7.833770512769151e+00, -1.185750040023856e+00, -1.184095467801782e+00, -1.144076400613428e+00, -1.156585674829074e+00, -1.153885008311652e+00, -1.153885008311652e+00, -1.217345911146512e-01, -1.258247380027045e-01, -1.444520942849459e+00, -6.408246714976619e-02, -8.462254542944514e-02, -8.462254542944513e-02, -8.530292639570540e-06, -9.945904643749316e-06, -1.627993707548364e-03, -1.644070696778449e-06, -3.261524560713668e-06, -3.261524560713669e-06, -1.186404614117323e+01, -1.186482784232180e+01, -1.186409806531800e+01, -1.186478827214142e+01, -1.186443662520499e+01, -1.186443662520499e+01, -4.236681379644280e+00, -4.270235830605571e+00, -4.212652349524335e+00, -4.242328650189913e+00, -4.266818491378413e+00, -4.266818491378413e+00, -9.877901632929004e-01, -1.080547924688086e+00, -8.886829898430143e-01, -9.243009931351592e-01, -1.008488885860443e+00, -1.008488885860443e+00, -2.503986465992044e-02, -1.221653038750790e-01, -2.028103025092279e-02, -4.015132849110757e+00, -3.822126236434877e-02, -3.822126236434877e-02, -7.552439782814880e-07, -1.536009164611991e-06, -6.867905455270001e-07, -6.667008392232629e-03, -1.200663018834570e-06, -1.200663018834570e-06, -9.237187121664189e-01, -9.645245523725825e-01, -9.588041962206518e-01, -9.495194784248905e-01, -9.548981594363026e-01, -9.548981594363026e-01, -8.237798393825650e-01, -7.763396540851633e-01, -8.271570570945803e-01, -8.749829848311874e-01, -8.510801750037017e-01, -8.510801750037017e-01, -1.152889868318537e+00, -1.995430514224606e-01, -2.830812315540603e-01, -4.568797839443683e-01, -3.619905955506739e-01, -3.619905955506740e-01, -6.885076384838557e-01, -1.430593874208788e-03, -3.551809290721196e-03, -4.297281152473515e-01, -1.321859419720463e-02, -1.321859419720474e-02, -2.395997167440522e-05, -2.934432502690741e-08, -2.713701725817524e-07, -1.108116978190747e-02, -9.512622830008572e-07, -9.512622830008545e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_ityh_optx_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ityh_optx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-6.566499919454573e+01, -6.566511633473543e+01, -6.566580181943584e+01, -6.566405539786038e+01, -6.566494716139071e+01, -6.566494716139071e+01, -1.042345380309611e+01, -1.042342554716329e+01, -1.042303334789306e+01, -1.042577147160692e+01, -1.042368173120102e+01, -1.042368173120102e+01, -1.691146072029548e+00, -1.689099199465471e+00, -1.638885611413365e+00, -1.655573021207787e+00, -1.651858361088356e+00, -1.651858361088356e+00, -2.111641940768130e-01, -2.176657881474805e-01, -2.035169761949150e+00, -1.163104731639878e-01, -1.508550290296660e-01, -1.508550290296660e-01, -1.705606589555169e-05, -1.988597208668448e-05, -3.227570588024652e-03, -3.287850728284243e-06, -6.522138764859118e-06, -6.522138764859120e-06, -1.547925624960660e+01, -1.547639108250552e+01, -1.547916435457061e+01, -1.547663568673334e+01, -1.547779323853259e+01, -1.547779323853259e+01, -5.756792217523372e+00, -5.800414266535357e+00, -5.726825843016248e+00, -5.765473131828419e+00, -5.795277057422605e+00, -5.795277057422605e+00, -1.414329396806409e+00, -1.474165280877878e+00, -1.284263757516049e+00, -1.295348915598640e+00, -1.439262173381542e+00, -1.439262173381542e+00, -4.747832198829405e-02, -2.119226169688671e-01, -3.871902772922726e-02, -5.119950781034358e+00, -7.126785435405728e-02, -7.126785435405728e-02, -1.510408459951239e-06, -3.071758801798780e-06, -1.373513236543291e-06, -1.303923901441931e-02, -2.401153890519261e-06, -2.401153890519261e-06, -1.149940504945061e+00, -1.323285797254607e+00, -1.293661874722514e+00, -1.252131055035567e+00, -1.275617647110625e+00, -1.275617647110625e+00, -8.922310929392664e-01, -1.138990231124466e+00, -1.202780281114671e+00, -1.254597933137613e+00, -1.230373768074950e+00, -1.230373768074950e+00, -1.573780021200415e+00, -3.317468278672335e-01, -4.553409186237319e-01, -7.009402387503768e-01, -5.684481446266250e-01, -5.684481446266254e-01, -1.019652987605776e+00, -2.838266243974296e-03, -6.999798303504787e-03, -6.613863217520414e-01, -2.552456557586560e-02, -2.552456557586576e-02, -4.789467732201935e-05, -5.868829571065135e-08, -5.427259080199142e-07, -2.147989743250961e-02, -1.902407786067448e-06, -1.902407786067443e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_ityh_optx_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ityh_optx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-3.893756737909377e-09, -3.893941218744983e-09, -3.894382679778318e-09, -3.891646618068037e-09, -3.893133756365995e-09, -3.893133756365995e-09, -2.719185866205754e-06, -2.720262017996002e-06, -2.745039767687035e-06, -2.700153183887750e-06, -2.720219572877778e-06, -2.720219572877778e-06, -4.764645260938563e-04, -4.667352547423687e-04, -2.815782858303851e-04, -2.812058882849814e-04, -2.875542971596810e-04, -2.875542971596810e-04, -1.146240223821877e-03, -1.283211077974963e-03, -3.481444171972250e-04, -3.562872256065165e-04, -6.315005738622538e-04, -6.315005738620592e-04, -3.276318500143522e-09, -4.249060247963202e-09, -2.239513119217883e-06, -3.309479942091272e-10, -1.048684584474060e-09, -1.048684584195184e-09, -1.975910632273089e-06, -2.005838123002306e-06, -1.977121871818663e-06, -2.003534165400085e-06, -1.991084738682533e-06, -1.991084738682533e-06, -4.281824650009194e-06, -4.362054932334522e-06, -3.935240847499716e-06, -3.998570510308749e-06, -4.510898881437855e-06, -4.510898881437855e-06, -2.854990844761282e-03, -2.781637723075627e-02, -2.856193280238242e-03, -2.295451864112384e-02, -3.376748737151549e-03, -3.376748737151549e-03, -7.790990833942613e-05, -4.352750337331715e-04, -6.266436460069337e-05, -5.294849264824744e-04, -2.045681251063365e-04, -2.045681251063365e-04, -1.545317579980860e-10, -3.557581199951701e-10, -7.642501153866302e-10, -1.836122483219524e-05, -7.489666951824596e-10, -7.489666950571967e-10, -2.695108257754912e-01, -4.080466647397431e-02, -6.620374915748539e-02, -1.106807816911081e-01, -8.420745732687368e-02, -8.420745732687368e-02, -1.043680021428721e+00, -1.442320305325664e-03, -2.898632107118995e-03, -8.089435022218240e-03, -4.577370849345410e-03, -4.577370849345410e-03, -1.971147473477802e-02, -6.270077699130526e-04, -1.003002261821984e-03, -3.098184718825289e-03, -1.731874126324832e-03, -1.731874126325067e-03, -1.785890653690167e-03, -1.706548050751486e-06, -5.955194352241589e-06, -6.769951775079226e-03, -5.747419702262203e-05, -5.747419702234720e-05, -1.048153943392135e-08, -8.910802265691150e-12, -8.373287523109335e-11, -4.437114970523981e-05, -6.935145855455699e-10, -6.935145845441597e-10]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
