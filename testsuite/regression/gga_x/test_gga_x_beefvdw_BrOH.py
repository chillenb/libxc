
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_beefvdw_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_beefvdw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.149496719247077e+01, -2.149498960586956e+01, -2.149517106190884e+01, -2.149480242476093e+01, -2.149497833145033e+01, -2.149497833145033e+01, -3.572727609855785e+00, -3.572690855078072e+00, -3.571829294678295e+00, -3.574072994708824e+00, -3.572723924794201e+00, -3.572723924794201e+00, -7.261300712861234e-01, -7.263699513777305e-01, -7.347310097104865e-01, -7.389518048919484e-01, -7.262128191877985e-01, -7.262128191877985e-01, -2.339655389849155e-01, -2.336412055736486e-01, -8.391844482339832e-01, -2.003538404966861e-01, -2.338221366502767e-01, -2.338221366502767e-01, -1.764386567549473e-02, -1.847816252143898e-02, -7.381512843832168e-02, -8.475448665424757e-03, -1.828566357931518e-02, -1.828566357931518e-02, -5.162536018796239e+00, -5.161945613055313e+00, -5.162481885795422e+00, -5.162022665764133e+00, -5.162223488215703e+00, -5.162223488215703e+00, -2.212020062637966e+00, -2.220970469684463e+00, -2.215034109689402e+00, -2.222009325530547e+00, -2.214125716856337e+00, -2.214125716856337e+00, -5.894899652802799e-01, -6.126419050204432e-01, -5.618519846617517e-01, -5.624100934715431e-01, -6.071382492223484e-01, -6.071382492223484e-01, -1.568455237748312e-01, -2.646940407631623e-01, -1.543292562349648e-01, -1.863632750982456e+00, -1.758424713564991e-01, -1.758424713564991e-01, -8.176261963719251e-03, -9.343264328188433e-03, -7.002961332305743e-03, -1.010958619637313e-01, -8.513132289070441e-03, -8.513132289335560e-03, -5.765859280886689e-01, -5.779460282851284e-01, -5.774529502977085e-01, -5.770746354800536e-01, -5.772629851965133e-01, -5.772629851965133e-01, -5.573746561280224e-01, -5.349662369864666e-01, -5.381040650526661e-01, -5.428994612270818e-01, -5.399794522530483e-01, -5.399794522530483e-01, -6.431399697886503e-01, -3.085679888233150e-01, -3.342019724289523e-01, -3.812858507883136e-01, -3.554845603620617e-01, -3.554845603620611e-01, -4.863504700940351e-01, -6.864259008838537e-02, -9.176748429102018e-02, -3.473682952570150e-01, -1.286285107689714e-01, -1.286285107689713e-01, -2.067206088773893e-02, -2.558935012565951e-03, -4.860601420863045e-03, -1.226485638133335e-01, -7.235402289540577e-03, -7.235402289540567e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_beefvdw_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_beefvdw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.558816703581735e+01, -2.558827725037434e+01, -2.558874512403897e+01, -2.558694076618405e+01, -2.558822535858574e+01, -2.558822535858574e+01, -4.045729739088443e+00, -4.045811264153720e+00, -4.048217589706971e+00, -4.044927752596540e+00, -4.045788904466187e+00, -4.045788904466187e+00, -7.428005705137499e-01, -7.419106783875279e-01, -7.200447309415386e-01, -7.255130208455151e-01, -7.424766681710068e-01, -7.424766681710068e-01, -1.722156721823124e-01, -1.748349313357987e-01, -9.036536224267916e-01, -2.076863188478707e-01, -1.726875061130341e-01, -1.726875061130341e-01, -2.344903330333837e-02, -2.455001338671136e-02, -9.489186951277000e-02, -1.129348598983766e-02, -2.429442369595377e-02, -2.429442369595377e-02, -6.364438096864010e+00, -6.368462191818373e+00, -6.364846435441404e+00, -6.367975429553282e+00, -6.366505630076013e+00, -6.366505630076013e+00, -2.171188074476366e+00, -2.185888683903631e+00, -2.166399329495805e+00, -2.177485475795113e+00, -2.188706707713587e+00, -2.188706707713587e+00, -6.863656490782841e-01, -7.953754143177940e-01, -6.471891838073789e-01, -7.172515828169082e-01, -7.208379265314707e-01, -7.208379265314707e-01, -1.846876049727296e-01, -2.389814359978749e-01, -1.807768063675127e-01, -2.418976563522936e+00, -1.958612608871415e-01, -1.958612608871415e-01, -1.089510581624011e-02, -1.244786259614902e-02, -9.330284000612489e-03, -1.260245715591705e-01, -1.134181237983518e-02, -1.134181238015607e-02, -7.629785846268443e-01, -7.528910457362861e-01, -7.565642160347774e-01, -7.593355288043271e-01, -7.579519330644320e-01, -7.579519330644320e-01, -7.394370383398108e-01, -5.635327390507333e-01, -6.135270614756420e-01, -6.652093366990622e-01, -6.394811672447386e-01, -6.394811672403360e-01, -8.327195937077777e-01, -2.327583990699301e-01, -2.800982355898824e-01, -3.909483178401281e-01, -3.454082300694402e-01, -3.454082300695791e-01, -5.067393934116665e-01, -8.890188332328408e-02, -1.162061938437835e-01, -3.756396115290220e-01, -1.540185302557757e-01, -1.540185302557735e-01, -2.745667790728358e-02, -3.411648588291888e-03, -6.479118375139554e-03, -1.467286088893867e-01, -9.640502636992872e-03, -9.640502637009865e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_beefvdw_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_beefvdw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-7.777822127185808e-09, -7.777725285992267e-09, -7.777268490183692e-09, -7.778854802303162e-09, -7.777771260673963e-09, -7.777771260673963e-09, -1.148988798748590e-05, -1.148956696280207e-05, -1.147882312121863e-05, -1.148755639604384e-05, -1.148952710796135e-05, -1.148952710796135e-05, -7.665459977848664e-03, -7.656695220654514e-03, -7.381113502661243e-03, -7.216158834939517e-03, -7.662430165324355e-03, -7.662430165324355e-03, -1.087848910955905e+00, -1.063743288883733e+00, -4.158020599246881e-03, -8.938112776929608e-01, -1.083383955306454e+00, -1.083383955306454e+00, -3.398628851297124e+00, -3.407328615936185e+00, -1.405917392470719e+00, -2.409495583346176e+00, -3.539656643647923e+00, -3.539656643647923e+00, -2.102196878552827e-06, -2.097123444893241e-06, -2.101684257767534e-06, -2.097739863636733e-06, -2.099597880414946e-06, -2.099597880414946e-06, -8.986670222738095e-05, -8.844289873570195e-05, -8.930529489504961e-05, -8.823625911816960e-05, -8.950673304802063e-05, -8.950673304802063e-05, -1.451901050033288e-02, -8.113344224488485e-03, -1.805298366845035e-02, -1.261572157631904e-02, -1.230154323218219e-02, -1.230154323218219e-02, -7.814340223404109e-01, -4.811436005582387e-01, -9.005940541248871e-01, -9.484188160437461e-05, -9.324650024226558e-01, -9.324650024226558e-01, -2.556129473952084e+00, -2.561269470098295e+00, -7.330945727214984e+00, -1.360884600374943e+00, -3.783115329204403e+00, -3.783115329204403e+00, -9.827020201283969e-03, -1.010674220748595e-02, -9.976821021558712e-03, -9.913736255138203e-03, -9.943623195762957e-03, -9.943623195762957e-03, -1.118838996315138e-02, -2.579901525641862e-02, -2.197987002093611e-02, -1.757679830427494e-02, -1.978534840551726e-02, -1.978534840627395e-02, -6.765294013366297e-03, -3.557177499417006e-01, -2.142160794101873e-01, -1.008083056657525e-01, -1.342523768400589e-01, -1.342523768399811e-01, -3.798694799153629e-02, -1.191972821493526e+00, -1.177546604996970e+00, -1.407403033826532e-01, -1.313529659152107e+00, -1.313529659152174e+00, -2.552642269443766e+00, -4.406255257091543e+00, -3.793741893412193e+00, -1.613938688766285e+00, -5.525092080623087e+00, -5.525092098456748e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
