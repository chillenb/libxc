
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_lg93_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_lg93", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.086889716114804e+01, -2.086891427399882e+01, -2.086907423335695e+01, -2.086881794209116e+01, -2.086894029467302e+01, -2.086894029467302e+01, -3.486846552296559e+00, -3.486787981797645e+00, -3.485519826618529e+00, -3.488387450416713e+00, -3.486860669113328e+00, -3.486860669113328e+00, -7.109840990732190e-01, -7.112234809464681e-01, -7.177852248351528e-01, -7.225354498843342e-01, -7.196889090265342e-01, -7.196889090265342e-01, -2.193612063804701e-01, -2.207769505100625e-01, -8.184005840756842e-01, -1.837791485537219e-01, -2.145428221598492e-01, -2.145428221598492e-01, -2.019277492618137e-02, -2.085125862077455e-02, -7.205513382212492e-02, -1.382976255951995e-02, -1.715096070244216e-02, -1.715096070244216e-02, -5.000562873034854e+00, -4.999780716402707e+00, -5.000538203990747e+00, -4.999847391566476e+00, -5.000159008433923e+00, -5.000159008433923e+00, -2.170294352205875e+00, -2.179811955695535e+00, -2.172805277502636e+00, -2.181325486688547e+00, -2.174193576446877e+00, -2.174193576446877e+00, -5.806496030639665e-01, -5.994362477091880e-01, -5.437624622344885e-01, -5.340323884360676e-01, -5.856235586489023e-01, -5.856235586489023e-01, -1.438498420120595e-01, -2.335397594133992e-01, -1.355588561984002e-01, -1.803798924131352e+00, -1.573678986028877e-01, -1.573678986028877e-01, -1.130165329784572e-02, -1.344766967009088e-02, -9.718924344857147e-03, -1.000601793061067e-01, -1.205775536696300e-02, -1.205775536696301e-02, -5.493940856291615e-01, -5.508980363493285e-01, -5.502960396361232e-01, -5.498496071339354e-01, -5.500653922964450e-01, -5.500653922964450e-01, -5.333039937872562e-01, -5.200993327362402e-01, -5.200143907526376e-01, -5.199876035237940e-01, -5.191521518545360e-01, -5.191521518545360e-01, -6.293539357718789e-01, -2.802977171513890e-01, -3.181950973454097e-01, -3.741002301677345e-01, -3.453482166241136e-01, -3.453482166241136e-01, -4.803508063343210e-01, -7.028875394452408e-02, -8.739460087173989e-02, -3.467981673142213e-01, -1.173419447407145e-01, -1.173419447407145e-01, -2.610304401077786e-02, -4.732978674236184e-03, -8.416791041177474e-03, -1.122168753081584e-01, -1.118365511334755e-02, -1.118365511334755e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_lg93_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_lg93", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.413368562022646e+01, -2.413366305439965e+01, -2.413387028516611e+01, -2.413379714482059e+01, -2.413433377101462e+01, -2.413449693301608e+01, -2.413225164979134e+01, -2.413184207826895e+01, -2.413380218624754e+01, -2.413280961099127e+01, -2.413380218624754e+01, -2.413280961099127e+01, -3.785665008026298e+00, -3.786029075718922e+00, -3.785728787860241e+00, -3.786112337340555e+00, -3.787483468201549e+00, -3.787970421556970e+00, -3.785071153214107e+00, -3.785575821798179e+00, -3.784868707950047e+00, -3.787185313570024e+00, -3.784868707950047e+00, -3.787185313570024e+00, -7.259468950719166e-01, -7.266853653200346e-01, -7.256193671410421e-01, -7.264395652563821e-01, -7.232362955956884e-01, -7.236958294773349e-01, -7.286073121197170e-01, -7.283802194412129e-01, -7.297845688303718e-01, -7.335854869899042e-01, -7.297845688303718e-01, -7.335854869899042e-01, -2.153653630987699e-01, -2.209030121469487e-01, -2.163996241059780e-01, -2.227906150975581e-01, -8.325792029600563e-01, -8.548689888677743e-01, -1.806892456756210e-01, -1.827784592520172e-01, -2.241167057306747e-01, -1.424066852346885e-01, -2.241167057306745e-01, -1.424066852346885e-01, -1.842506290502770e-02, -1.924184018253502e-02, -1.896582736161248e-02, -1.991234209926588e-02, -6.689819086153524e-02, -6.957168595845373e-02, -1.298083667187611e-02, -1.285539792538408e-02, -1.700886027882326e-02, -1.068601537006655e-02, -1.700886027882327e-02, -1.068601537006655e-02, -6.100943620389618e+00, -6.099296614888078e+00, -6.106638472481404e+00, -6.104800766893430e+00, -6.101246757668717e+00, -6.099476167599054e+00, -6.106134044588178e+00, -6.104477010402226e+00, -6.103875894648234e+00, -6.102067071733070e+00, -6.103875894648234e+00, -6.102067071733070e+00, -2.183875480930429e+00, -2.183778837558269e+00, -2.194891365640776e+00, -2.194413479406604e+00, -2.183929581891701e+00, -2.183669116592796e+00, -2.193319245392882e+00, -2.193319427797716e+00, -2.190460751106831e+00, -2.189339025305654e+00, -2.190460751106831e+00, -2.189339025305654e+00, -6.493867608272424e-01, -6.478839359435671e-01, -7.751670640243735e-01, -7.759877172892164e-01, -5.788271222257837e-01, -6.049626952913919e-01, -6.700377279884511e-01, -6.916297448977350e-01, -6.870020996239428e-01, -6.489528699775030e-01, -6.870020996239428e-01, -6.489528699775030e-01, -1.402268473187118e-01, -1.410042155692202e-01, -2.311286248097094e-01, -2.320172846426751e-01, -1.294356602703324e-01, -1.346531292491329e-01, -2.339000402676599e+00, -2.338020815759607e+00, -1.529863883648772e-01, -1.566733130468207e-01, -1.529863883648772e-01, -1.566733130468207e-01, -1.034764976382857e-02, -1.074601279660955e-02, -1.245679829677507e-02, -1.266403346425187e-02, -8.921111446670871e-03, -9.213352583270959e-03, -9.614261074384491e-02, -9.681564302304807e-02, -9.540063813574653e-03, -1.193121907171248e-02, -9.540063813574660e-03, -1.193121907171249e-02, -7.246175883529151e-01, -7.275372692553044e-01, -7.124491645920302e-01, -7.155019025479659e-01, -7.169018286683836e-01, -7.199296978223508e-01, -7.204673175497249e-01, -7.234057578394248e-01, -7.187007977764841e-01, -7.216816967565637e-01, -7.187007977764841e-01, -7.216816967565637e-01, -7.071357737014213e-01, -7.094875364336536e-01, -5.313478612957707e-01, -5.333003903277688e-01, -5.571412526579967e-01, -5.603071738967972e-01, -6.226671830705951e-01, -6.254649092351817e-01, -5.850018650670820e-01, -5.877644212658232e-01, -5.850018650670820e-01, -5.877644212658232e-01, -8.103572113780531e-01, -8.124733921752866e-01, -2.782010141632221e-01, -2.793443359121893e-01, -3.164804944189488e-01, -3.183328211553911e-01, -3.786536700411215e-01, -3.804252593257220e-01, -3.462218827980906e-01, -3.457744009199823e-01, -3.462218827980906e-01, -3.457744009199822e-01, -4.894161249886946e-01, -4.921111323959299e-01, -6.639512977527150e-02, -6.671840268977632e-02, -8.247542907797466e-02, -8.436596649219406e-02, -3.578057423138969e-01, -3.631121786470943e-01, -1.125959328200797e-01, -1.158003342501806e-01, -1.125959328200796e-01, -1.158003342501806e-01, -2.410511689069899e-02, -2.467840952510393e-02, -4.518223099790385e-03, -4.334561221821191e-03, -7.699031641472297e-03, -8.000843177474532e-03, -1.083388898530229e-01, -1.097784575047961e-01, -8.700267442389628e-03, -1.119304245023362e-02, -8.700267442389617e-03, -1.119304245023361e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_lg93_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_lg93", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.869265575253638e-08, 0.000000000000000e+00, -1.869273458158084e-08, -1.869219538654574e-08, 0.000000000000000e+00, -1.869240026709708e-08, -1.869096751809928e-08, 0.000000000000000e+00, -1.869057220256049e-08, -1.869615956355216e-08, 0.000000000000000e+00, -1.869719179252818e-08, -1.869236881340699e-08, 0.000000000000000e+00, -1.869472618615111e-08, -1.869236881340699e-08, 0.000000000000000e+00, -1.869472618615111e-08, -2.762901111032159e-05, 0.000000000000000e+00, -2.763517547383371e-05, -2.762925232699507e-05, 0.000000000000000e+00, -2.763591583423211e-05, -2.763980039855076e-05, 0.000000000000000e+00, -2.764177026267798e-05, -2.760310750743333e-05, 0.000000000000000e+00, -2.760686224098842e-05, -2.764564376985345e-05, 0.000000000000000e+00, -2.761434365658461e-05, -2.764564376985345e-05, 0.000000000000000e+00, -2.761434365658461e-05, -1.564786182508916e-02, 0.000000000000000e+00, -1.597918258223380e-02, -1.554664413445482e-02, 0.000000000000000e+00, -1.595345882218450e-02, -1.426590559188762e-02, 0.000000000000000e+00, -1.376448258057156e-02, -1.362364281404563e-02, 0.000000000000000e+00, -1.379248266463176e-02, -1.634628861805080e-02, 0.000000000000000e+00, -1.132087463634799e-02, -1.634628861805080e-02, 0.000000000000000e+00, -1.132087463634799e-02, -1.135019970897698e+00, 0.000000000000000e+00, -1.066882677291209e+00, -1.139519804847918e+00, 0.000000000000000e+00, -1.060462324942628e+00, -9.163362656153211e-03, 0.000000000000000e+00, -9.168392780241870e-03, -1.751323217453468e+00, 0.000000000000000e+00, -1.683980639918012e+00, -9.781038056998540e-01, 0.000000000000000e+00, -3.572326363946095e+00, -9.781038056998537e-01, 0.000000000000000e+00, -3.572326363946096e+00, -2.563170398809293e+03, 0.000000000000000e+00, -2.219492503227800e+03, -2.353473677516791e+03, 0.000000000000000e+00, -2.004527551134726e+03, -3.540613727277019e+01, 0.000000000000000e+00, -3.132786960348113e+01, -7.957599912779459e+03, 0.000000000000000e+00, -8.174711556744385e+03, -3.330486121160275e+03, 0.000000000000000e+00, -1.808792085810235e+04, -3.330486121160278e+03, 0.000000000000000e+00, -1.808792085810236e+04, -4.586991930691911e-06, 0.000000000000000e+00, -4.592132181801872e-06, -4.565313837608031e-06, 0.000000000000000e+00, -4.571159874037044e-06, -4.585848884752597e-06, 0.000000000000000e+00, -4.591455547722720e-06, -4.567246277545797e-06, 0.000000000000000e+00, -4.572402008496355e-06, -4.575833014113554e-06, 0.000000000000000e+00, -4.581584284717914e-06, -4.575833014113554e-06, 0.000000000000000e+00, -4.581584284717914e-06, -1.644974623963115e-04, 0.000000000000000e+00, -1.645223163711378e-04, -1.627807612155800e-04, 0.000000000000000e+00, -1.628851552285825e-04, -1.604134357211859e-04, 0.000000000000000e+00, -1.616659321658523e-04, -1.589976478938395e-04, 0.000000000000000e+00, -1.601514631932681e-04, -1.665148190900928e-04, 0.000000000000000e+00, -1.641033266582684e-04, -1.665148190900928e-04, 0.000000000000000e+00, -1.641033266582684e-04, -3.398856009703645e-02, 0.000000000000000e+00, -3.434063873984319e-02, -1.583154914815493e-02, 0.000000000000000e+00, -1.572325819055693e-02, -4.987906093744519e-02, 0.000000000000000e+00, -4.358145036844566e-02, -2.920073377005273e-02, 0.000000000000000e+00, -2.581152931203879e-02, -2.825417980540551e-02, 0.000000000000000e+00, -3.509005757216036e-02, -2.825417980540552e-02, 0.000000000000000e+00, -3.509005757216037e-02, -3.465880475638900e+00, 0.000000000000000e+00, -3.430408741941271e+00, -7.289163365477417e-01, 0.000000000000000e+00, -7.203336399340013e-01, -4.497465809672215e+00, 0.000000000000000e+00, -3.988245627330783e+00, -1.897547538252889e-04, 0.000000000000000e+00, -1.900462005395692e-04, -2.823919871884336e+00, 0.000000000000000e+00, -2.846082209160580e+00, -2.823919871884336e+00, 0.000000000000000e+00, -2.846082209160580e+00, -1.779698739227977e+04, 0.000000000000000e+00, -1.531954776577412e+04, -9.425450863535856e+03, 0.000000000000000e+00, -8.801577751421955e+03, -3.853219771595578e+04, 0.000000000000000e+00, -3.533687158160077e+04, -1.192546813877945e+01, 0.000000000000000e+00, -1.157048332214052e+01, -2.727112113486643e+04, 0.000000000000000e+00, -1.305132606482935e+04, -2.727112113486640e+04, 0.000000000000000e+00, -1.305132606482934e+04, -1.877506190441496e-02, 0.000000000000000e+00, -1.842340149487243e-02, -2.208004777461556e-02, 0.000000000000000e+00, -2.166805635837970e-02, -2.106472432332090e-02, 0.000000000000000e+00, -2.067021246580322e-02, -2.013586027524435e-02, 0.000000000000000e+00, -1.977069729015905e-02, -2.061528671676247e-02, 0.000000000000000e+00, -2.023561972065017e-02, -2.061528671676247e-02, 0.000000000000000e+00, -2.023561972065017e-02, -1.943618865448475e-02, 0.000000000000000e+00, -1.916816923897478e-02, -5.580416070590000e-02, 0.000000000000000e+00, -5.533924878647991e-02, -5.694716667562712e-02, 0.000000000000000e+00, -5.617612208566555e-02, -4.269618556496924e-02, 0.000000000000000e+00, -4.191982765493041e-02, -5.254118386389349e-02, 0.000000000000000e+00, -5.168932537396353e-02, -5.254118386389349e-02, 0.000000000000000e+00, -5.168932537396353e-02, -1.337919084484781e-02, 0.000000000000000e+00, -1.318806635016410e-02, -4.027100267273409e-01, 0.000000000000000e+00, -3.982130456451122e-01, -2.829640004376244e-01, 0.000000000000000e+00, -2.801037979112891e-01, -2.016130101733335e-01, 0.000000000000000e+00, -1.988738030130711e-01, -2.362148296041042e-01, 0.000000000000000e+00, -2.382319898282290e-01, -2.362148296041044e-01, 0.000000000000000e+00, -2.382319898282291e-01, -7.634611364835679e-02, 0.000000000000000e+00, -7.557319804242044e-02, -3.559156793042492e+01, 0.000000000000000e+00, -3.505699026953761e+01, -1.797218430360734e+01, 0.000000000000000e+00, -1.683613854410870e+01, -2.940242554903978e-01, 0.000000000000000e+00, -2.831413135131304e-01, -7.478535415231574e+00, 0.000000000000000e+00, -7.221907408440766e+00, -7.478535415231575e+00, 0.000000000000000e+00, -7.221907408440767e+00, -1.019180637698298e+03, 0.000000000000000e+00, -9.472864310973907e+02, -3.303689002581104e+05, 0.000000000000000e+00, -4.195265581747331e+05, -5.269422066481136e+04, 0.000000000000000e+00, -4.697130849736444e+04, -8.617849855894477e+00, 0.000000000000000e+00, -8.246610751183439e+00, -4.202285560567052e+04, 0.000000000000000e+00, -1.620141278985004e+04, -4.202285560567061e+04, 0.000000000000000e+00, -1.620141278985010e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
