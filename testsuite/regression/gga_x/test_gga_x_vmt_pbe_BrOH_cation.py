
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_vmt_pbe_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_vmt_pbe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.096072789857434e+01, -2.096075453244047e+01, -2.096094203289280e+01, -2.096054435632561e+01, -2.096074290666528e+01, -2.096074290666528e+01, -3.477980246130729e+00, -3.477940593810668e+00, -3.477109358837029e+00, -3.479215376607322e+00, -3.478016813458726e+00, -3.478016813458726e+00, -6.996278066285320e-01, -6.996943938822751e-01, -7.033636819382286e-01, -7.080486264601247e-01, -7.084462328595027e-01, -7.084462328595027e-01, -2.202724637462883e-01, -2.210791571355703e-01, -8.076091038058233e-01, -1.896106789880608e-01, -2.161635806191662e-01, -2.161635806191661e-01, -5.609465951289811e-03, -5.913468518332870e-03, -5.620669261088602e-02, -3.231828235354232e-03, -4.511399726230294e-03, -4.511399726230294e-03, -5.036943478870748e+00, -5.036296040428184e+00, -5.036924585782284e+00, -5.036352838344683e+00, -5.036609210260029e+00, -5.036609210260029e+00, -2.126075714236273e+00, -2.135541549569760e+00, -2.128454129542167e+00, -2.136794987683472e+00, -2.130191318980915e+00, -2.130191318980915e+00, -5.813066850731576e-01, -6.028724565917303e-01, -5.426465586823446e-01, -5.376945966951221e-01, -5.876276658964515e-01, -5.876276658964517e-01, -1.467750400629300e-01, -2.389940411157601e-01, -1.373105264119721e-01, -1.813749900310560e+00, -1.627793325619872e-01, -1.627793325619872e-01, -2.495062181128035e-03, -3.159308523303740e-03, -2.419444485210304e-03, -9.500917318686800e-02, -3.039246110825622e-03, -3.039246110825623e-03, -5.507727665312736e-01, -5.539559225530757e-01, -5.528490210063198e-01, -5.519181738867707e-01, -5.523840946037788e-01, -5.523840946037788e-01, -5.339881913051094e-01, -5.121104911965078e-01, -5.178355796062442e-01, -5.234661453220901e-01, -5.203475892820071e-01, -5.203475892820071e-01, -6.331789389232474e-01, -2.824063509641269e-01, -3.152247787336845e-01, -3.672799356105527e-01, -3.386720470371354e-01, -3.386720470371354e-01, -4.727013025160796e-01, -5.293488131313892e-02, -7.583730395061719e-02, -3.429973693071099e-01, -1.181969551747934e-01, -1.181969551747934e-01, -8.034295978129985e-03, -8.444103660066541e-04, -1.775800982983423e-03, -1.118659653083052e-01, -2.791012040791351e-03, -2.791012040791349e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_vmt_pbe_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_vmt_pbe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.508855207727783e+01, -2.508852277833753e+01, -2.508867083640852e+01, -2.508860903082703e+01, -2.508901634290629e+01, -2.508911375588859e+01, -2.508767604965025e+01, -2.508740515770566e+01, -2.508862464619071e+01, -2.508806280689477e+01, -2.508862464619071e+01, -2.508806280689477e+01, -4.021258441148117e+00, -4.021477560255099e+00, -4.021305319648415e+00, -4.021534104398445e+00, -4.022540623369326e+00, -4.022888176718071e+00, -4.021049155746796e+00, -4.021406825954009e+00, -4.020478052612889e+00, -4.022575293701526e+00, -4.020478052612889e+00, -4.022575293701526e+00, -7.503111921235592e-01, -7.557071432696441e-01, -7.483387522681487e-01, -7.549275112621255e-01, -7.233699104352823e-01, -7.154369106889519e-01, -7.245846091512405e-01, -7.271598054846152e-01, -7.652988368674177e-01, -6.894936741727477e-01, -7.652988368674177e-01, -6.894936741727477e-01, -1.930179715101117e-01, -1.976468308503043e-01, -1.936836883788929e-01, -1.994515431850941e-01, -8.633650836774228e-01, -9.040932055682329e-01, -1.762151715748307e-01, -1.776533522526959e-01, -2.007125130475642e-01, -1.581843311962612e-01, -2.007125130475641e-01, -1.581843311962610e-01, -7.276229177309981e-03, -7.790075895003646e-03, -7.684167779817791e-03, -8.364445884779099e-03, -8.733888234096759e-02, -9.112534865997314e-02, -4.344387369502269e-03, -4.271997090358485e-03, -6.454524152261684e-03, -3.668879732595053e-03, -6.454524152261684e-03, -3.668879732595053e-03, -6.193335643042164e+00, -6.191780418271061e+00, -6.196258651250350e+00, -6.194604375501203e+00, -6.193496389419016e+00, -6.191876285823894e+00, -6.196004526219655e+00, -6.194441740561300e+00, -6.194834144211163e+00, -6.193199020231847e+00, -6.194834144211163e+00, -6.193199020231847e+00, -2.151988867317628e+00, -2.151873553753920e+00, -2.170326573580815e+00, -2.169675938560208e+00, -2.132604051050060e+00, -2.138020717629550e+00, -2.148245706967730e+00, -2.153885782316687e+00, -2.177181946955075e+00, -2.163259287354180e+00, -2.177181946955075e+00, -2.163259287354180e+00, -6.845107191421730e-01, -6.827930176256126e-01, -7.737597472865688e-01, -7.745150127345389e-01, -6.153303653428375e-01, -6.409751031631504e-01, -6.699674304359057e-01, -6.917707980327650e-01, -7.164865897157834e-01, -6.793657840973631e-01, -7.164865897157834e-01, -6.793657840973633e-01, -1.631271726422533e-01, -1.631135541882305e-01, -2.149168368168383e-01, -2.154666169296088e-01, -1.546340900709258e-01, -1.582298165133092e-01, -2.334325324591615e+00, -2.333339840013511e+00, -1.652559941051587e-01, -1.598164930182915e-01, -1.652559941051587e-01, -1.598164930182915e-01, -3.259113952053117e-03, -3.387009012286168e-03, -4.180066033796271e-03, -4.243331488474420e-03, -3.125747764597394e-03, -3.310347136291983e-03, -1.229850921806898e-01, -1.239081060031377e-01, -3.192469374749985e-03, -4.384909483401301e-03, -3.192469374749986e-03, -4.384909483401303e-03, -7.232813795035060e-01, -7.262168922073262e-01, -7.110539956338112e-01, -7.140697978574249e-01, -7.152801861604482e-01, -7.182958501548369e-01, -7.188605441414584e-01, -7.218001852360448e-01, -7.170647672766426e-01, -7.200412905308865e-01, -7.170647672766426e-01, -7.200412905308865e-01, -7.063503484366800e-01, -7.087049432103095e-01, -5.523433709739590e-01, -5.551809255896281e-01, -5.926935263845081e-01, -5.959154161238066e-01, -6.368266566584453e-01, -6.392822099440763e-01, -6.142846354380910e-01, -6.168009945828588e-01, -6.142846354380910e-01, -6.168009945828588e-01, -8.091936924829437e-01, -8.111610072610604e-01, -2.496126988932522e-01, -2.505104449975395e-01, -2.860953284925481e-01, -2.885031220975703e-01, -3.861749644428385e-01, -3.885643227747386e-01, -3.293337523113464e-01, -3.292965506709753e-01, -3.293337523113464e-01, -3.292965506709754e-01, -5.068594053263452e-01, -5.111217363183350e-01, -8.640360794504598e-02, -8.687712110400743e-02, -1.082544190065760e-01, -1.105966223276922e-01, -3.776135862899703e-01, -3.842602447451523e-01, -1.371594340796301e-01, -1.366610578182987e-01, -1.371594340796301e-01, -1.366610578182987e-01, -1.170513473187750e-02, -1.255469892672905e-02, -1.124590922288522e-03, -1.127161251822379e-03, -2.288282255961574e-03, -2.433772897932116e-03, -1.325769045473032e-01, -1.339069292713243e-01, -3.023949152590537e-03, -4.018605821556537e-03, -3.023949152590535e-03, -4.018605821556533e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_vmt_pbe_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_vmt_pbe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.447753420982807e-08, 0.000000000000000e+00, -1.447761341277011e-08, -1.447740517336873e-08, 0.000000000000000e+00, -1.447751963738646e-08, -1.447687781260859e-08, 0.000000000000000e+00, -1.447679604111923e-08, -1.447833798766321e-08, 0.000000000000000e+00, -1.447865624953941e-08, -1.447746303462093e-08, 0.000000000000000e+00, -1.447782836814328e-08, -1.447746303462093e-08, 0.000000000000000e+00, -1.447782836814328e-08, -1.971253768632419e-05, 0.000000000000000e+00, -1.971766004644729e-05, -1.971279790069862e-05, 0.000000000000000e+00, -1.971833035106317e-05, -1.972324333645295e-05, 0.000000000000000e+00, -1.972552059977783e-05, -1.969240852676736e-05, 0.000000000000000e+00, -1.969575382288350e-05, -1.972413187441668e-05, 0.000000000000000e+00, -1.970338514839359e-05, -1.972413187441668e-05, 0.000000000000000e+00, -1.970338514839359e-05, -1.283990273264167e-02, 0.000000000000000e+00, -1.281273534005969e-02, -1.285882375974740e-02, 0.000000000000000e+00, -1.282611811604714e-02, -1.309206882820382e-02, 0.000000000000000e+00, -1.310714020022209e-02, -1.273293312338280e-02, 0.000000000000000e+00, -1.273338183452900e-02, -1.267730384876919e-02, 0.000000000000000e+00, -1.254709395544545e-02, -1.267730384876919e-02, 0.000000000000000e+00, -1.254709395544545e-02, -1.509947880953521e+00, 0.000000000000000e+00, -1.406815307271919e+00, -1.509185352580237e+00, 0.000000000000000e+00, -1.384982290355119e+00, -7.427480328031472e-03, 0.000000000000000e+00, -6.844924471517928e-03, -2.092334551808908e+00, 0.000000000000000e+00, -2.025330956969408e+00, -1.298871565019684e+00, 0.000000000000000e+00, -2.877681422592112e+00, -1.298871565019683e+00, 0.000000000000000e+00, -2.877681422592123e+00, 1.505987389757376e+01, 0.000000000000000e+00, 2.785467029679385e+01, 3.012308693452016e+01, 0.000000000000000e+00, 5.487081375897326e+01, 1.958358736901387e+01, 0.000000000000000e+00, 1.549064110402649e+01, 4.451904038049228e-05, 0.000000000000000e+00, 1.592742893134012e-05, 3.183347231435762e+00, 0.000000000000000e+00, 3.019525898708386e-03, 3.183347231435801e+00, 0.000000000000000e+00, 3.019525898708495e-03, -4.232186050825602e-06, 0.000000000000000e+00, -4.236122851703881e-06, -4.231992498463454e-06, 0.000000000000000e+00, -4.235936989962382e-06, -4.232145434210959e-06, 0.000000000000000e+00, -4.236095058536127e-06, -4.231979814020392e-06, 0.000000000000000e+00, -4.235926571252842e-06, -4.232110994868459e-06, 0.000000000000000e+00, -4.236034199621889e-06, -4.232110994868459e-06, 0.000000000000000e+00, -4.236034199621889e-06, -1.582243215375180e-04, 0.000000000000000e+00, -1.582528070091814e-04, -1.548990781423938e-04, 0.000000000000000e+00, -1.550381658153526e-04, -1.586592642992066e-04, 0.000000000000000e+00, -1.586059888940424e-04, -1.558155453931407e-04, 0.000000000000000e+00, -1.556873423260740e-04, -1.558963551729698e-04, 0.000000000000000e+00, -1.565132580813895e-04, -1.558963551729698e-04, 0.000000000000000e+00, -1.565132580813895e-04, -2.473837859716625e-02, 0.000000000000000e+00, -2.501190117441082e-02, -1.979846180395311e-02, 0.000000000000000e+00, -1.978524644262830e-02, -3.557937332308238e-02, 0.000000000000000e+00, -3.123346443724349e-02, -3.397210284504003e-02, 0.000000000000000e+00, -2.976378981877284e-02, -2.152142544302577e-02, 0.000000000000000e+00, -2.625547096846942e-02, -2.152142544302578e-02, 0.000000000000000e+00, -2.625547096846942e-02, -2.164807033220780e+00, 0.000000000000000e+00, -2.223569099766138e+00, -9.441343200571467e-01, 0.000000000000000e+00, -9.346335152534434e-01, -2.271605336148158e+00, 0.000000000000000e+00, -2.316854132607207e+00, -2.408823357404786e-04, 0.000000000000000e+00, -2.413300260671635e-04, -2.548696624058976e+00, 0.000000000000000e+00, -3.067723096099358e+00, -2.548696624058976e+00, 0.000000000000000e+00, -3.067723096099358e+00, 1.772233433955128e-09, 0.000000000000000e+00, 1.785549392898648e-09, 7.718310157517253e-05, 0.000000000000000e+00, 5.832902026223517e-05, 6.412712702419278e-02, 0.000000000000000e+00, 6.661037578619371e-01, -1.068399199862679e+00, 0.000000000000000e+00, -9.867272986232138e-01, 1.500208468365268e-04, 0.000000000000000e+00, 1.540712373122189e+00, 1.500208468365209e-04, 0.000000000000000e+00, 1.540712373122176e+00, -2.795342049547506e-02, 0.000000000000000e+00, -2.753634599722412e-02, -2.792537491691348e-02, 0.000000000000000e+00, -2.751365275084120e-02, -2.793519719940045e-02, 0.000000000000000e+00, -2.752170738210476e-02, -2.794431160112206e-02, 0.000000000000000e+00, -2.752904028941406e-02, -2.793990844915858e-02, 0.000000000000000e+00, -2.752547161888088e-02, -2.793990844915858e-02, 0.000000000000000e+00, -2.752547161888088e-02, -3.139357595605007e-02, 0.000000000000000e+00, -3.098363183735206e-02, -4.481583992984198e-02, 0.000000000000000e+00, -4.419420418349285e-02, -4.068706421882914e-02, 0.000000000000000e+00, -4.009604945989175e-02, -3.683583837364249e-02, 0.000000000000000e+00, -3.635328069348643e-02, -3.880364819846834e-02, 0.000000000000000e+00, -3.827272761719191e-02, -3.880364819846834e-02, 0.000000000000000e+00, -3.827272761719191e-02, -1.636062580955907e-02, 0.000000000000000e+00, -1.628329521018973e-02, -5.365677983787548e-01, 0.000000000000000e+00, -5.302617216651063e-01, -3.537902779821517e-01, 0.000000000000000e+00, -3.471257309857614e-01, -1.734481574600729e-01, 0.000000000000000e+00, -1.702093917836072e-01, -2.527124638178287e-01, 0.000000000000000e+00, -2.539828225802939e-01, -2.527124638178290e-01, 0.000000000000000e+00, -2.539828225802940e-01, -6.218222494499609e-02, 0.000000000000000e+00, -6.088910233178964e-02, 2.117862655839697e+01, 0.000000000000000e+00, 2.060945343115032e+01, 4.974236391190075e+00, 0.000000000000000e+00, 3.906435570188813e+00, -2.217437776421350e-01, 0.000000000000000e+00, -2.107255583137778e-01, -3.048119966100164e+00, 0.000000000000000e+00, -4.057045224825478e+00, -3.048119966100181e+00, 0.000000000000000e+00, -4.057045224825482e+00, 1.214674973585277e+02, 0.000000000000000e+00, 1.473040160881811e+02, 2.492341993026730e-63, 0.000000000000000e+00, 1.377321883384498e-45, 8.352620423043147e-16, 0.000000000000000e+00, 8.215376437750797e-13, -3.301813544791345e+00, 0.000000000000000e+00, -3.302423885971615e+00, 2.923995835765887e-02, 0.000000000000000e+00, 2.856538253724393e-01, 2.923995835765855e-02, 0.000000000000000e+00, 2.856538253724379e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
