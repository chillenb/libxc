
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_lb_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_lb", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=False, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.422387861187774e+01, -3.422382198925713e+01, -3.422383183053861e+01, -3.422378809624601e+01, -3.422391441353250e+01, -3.422384140146585e+01, -3.422443672355116e+01, -3.422450899708903e+01, -3.422383898281956e+01, -3.422441301547878e+01, -3.422383898281956e+01, -3.422441301547878e+01, -5.830401985038801e+00, -5.829221259047065e+00, -5.830282334541391e+00, -5.829020175708282e+00, -5.826555601585845e+00, -5.825611369372617e+00, -5.833953755721036e+00, -5.832825044842482e+00, -5.829860977611326e+00, -5.829659353134992e+00, -5.829860977611326e+00, -5.829659353134992e+00, -1.221123691302060e+00, -1.215179209949894e+00, -1.222877472017326e+00, -1.215637902149250e+00, -1.244123050460838e+00, -1.252777825842429e+00, -1.257309062936622e+00, -1.254271169961052e+00, -1.208116558190599e+00, -1.303226049009996e+00, -1.208116558190599e+00, -1.303226049009996e+00, -4.070636352894875e-01, -4.136190540017959e-01, -4.067603668548426e-01, -4.144843342973808e-01, -1.396234853426490e+00, -1.393335226236567e+00, -3.680360319507561e-01, -3.714960628913412e-01, -4.225305012500679e-01, -3.157349107234340e-01, -4.225305012500678e-01, -3.157349107234340e-01, -1.269154835197734e-01, -1.287102777350941e-01, -1.267610539666316e-01, -1.286655861823467e-01, -2.175624134612235e-01, -2.211398645591955e-01, -1.177717095008356e-01, -1.181116114040436e-01, -1.241912227086571e-01, -9.267084216380707e-02, -1.241912227086570e-01, -9.267084216380703e-02, -8.010720734521453e+00, -8.009124270706939e+00, -8.004262443091042e+00, -8.002884518238984e+00, -8.010405572810342e+00, -8.008940991961548e+00, -8.004863772331845e+00, -8.003272277247655e+00, -8.007381386588850e+00, -8.005986645650935e+00, -8.007381386588850e+00, -8.005986645650935e+00, -3.786819631531479e+00, -3.786670288343719e+00, -3.799096977570890e+00, -3.798432985443061e+00, -3.804443373090048e+00, -3.798892689065364e+00, -3.814982231302713e+00, -3.809901120491621e+00, -3.781039975491454e+00, -3.790930080894667e+00, -3.781039975491454e+00, -3.790930080894667e+00, -9.642052278103791e-01, -9.612682889516806e-01, -9.006385137386931e-01, -8.986935748925228e-01, -8.971894221437264e-01, -9.180145574795471e-01, -8.059127381895114e-01, -8.350931728585356e-01, -9.840524392570046e-01, -9.408498337213315e-01, -9.840524392570048e-01, -9.408498337213315e-01, -3.227941429796524e-01, -3.229683337294933e-01, -4.556939148251450e-01, -4.569896429315823e-01, -3.057870374341322e-01, -3.128741090749074e-01, -2.696409119789247e+00, -2.694822021674053e+00, -3.325387524552432e-01, -3.281769066467182e-01, -3.325387524552432e-01, -3.281769066467182e-01, -1.046381523251895e-01, -1.085265351774588e-01, -1.124874431403961e-01, -1.146588359505599e-01, -7.465361030984753e-02, -7.378868282282143e-02, -2.519133407263099e-01, -2.539844352477448e-01, -8.657230223321101e-02, -9.189877891180645e-02, -8.657230223321107e-02, -9.189877891180649e-02, -7.728431124441879e-01, -7.747199885620479e-01, -8.229217026468723e-01, -8.247172911168607e-01, -8.075007863867678e-01, -8.092138409115496e-01, -7.930159697293663e-01, -7.949687387667262e-01, -8.004576586871444e-01, -8.022913491460893e-01, -8.004576586871444e-01, -8.022913491460893e-01, -7.309981872576541e-01, -7.332339839107489e-01, -8.889065080459237e-01, -8.908068259781117e-01, -8.714206726907447e-01, -8.729120809847460e-01, -8.391177456692689e-01, -8.411235329869085e-01, -8.567907943385109e-01, -8.590139063922766e-01, -8.567907943385109e-01, -8.590139063922766e-01, -9.522842485036936e-01, -9.501713356470162e-01, -5.273909160541690e-01, -5.288879965815476e-01, -5.782934640227907e-01, -5.800958496298203e-01, -6.435835293364492e-01, -6.459159002758059e-01, -6.111556668197001e-01, -6.099938597645190e-01, -6.111556668197000e-01, -6.099938597645190e-01, -8.217518044801776e-01, -8.239781043618716e-01, -2.196177108707441e-01, -2.200401613665756e-01, -2.422916281071152e-01, -2.441096971132195e-01, -5.859708241744769e-01, -5.908755319558381e-01, -2.719775968107867e-01, -2.701862104479307e-01, -2.719775968107866e-01, -2.701862104479307e-01, -1.430574274230762e-01, -1.431117293003573e-01, -7.040052375634098e-02, -6.225338885559119e-02, -8.646972850344728e-02, -8.615358945203051e-02, -2.632014718184710e-01, -2.656139681570693e-01, -7.384018933073108e-02, -8.976170482763488e-02, -7.384018933073104e-02, -8.976170482763479e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_lb_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_lb", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=False, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
