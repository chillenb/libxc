
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_mpw91_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_mpw91", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.107120741858623e+01, -2.107123065439161e+01, -2.107141234299108e+01, -2.107103029123310e+01, -2.107121902012159e+01, -2.107121902012159e+01, -3.495281462945013e+00, -3.495251790810896e+00, -3.494580554840214e+00, -3.496478508329425e+00, -3.495281091135704e+00, -3.495281091135704e+00, -7.021997638856670e-01, -7.022455142592456e-01, -7.054589068644035e-01, -7.097556396440788e-01, -7.022126434019945e-01, -7.022126434019945e-01, -2.184461981239174e-01, -2.191814818336859e-01, -8.176977564959200e-01, -1.866053214191906e-01, -2.186378000233421e-01, -2.186378000233421e-01, -4.931259050078142e-03, -5.581750510358117e-03, -7.965725787588120e-02, -5.696820561019457e-04, -5.514976719538477e-03, -5.514976719538477e-03, -5.060236533884313e+00, -5.059550006195320e+00, -5.060172905621517e+00, -5.059638985188231e+00, -5.059875129728179e+00, -5.059875129728179e+00, -2.124513287170110e+00, -2.134161595145202e+00, -2.125964720604829e+00, -2.133462968314428e+00, -2.129200325320979e+00, -2.129200325320979e+00, -5.774983823572372e-01, -5.974220231801913e-01, -5.501698153305429e-01, -5.500433032530427e-01, -5.951377172447664e-01, -5.951377172447664e-01, -1.589309815867194e-01, -2.420290568301725e-01, -1.553540854159186e-01, -1.817420758612852e+00, -1.691432927896346e-01, -1.691432927896346e-01, -5.293982709465327e-04, -7.663973998716757e-04, -5.492161426578001e-04, -1.107053483320108e-01, -7.038309843517558e-04, -7.038309843517560e-04, -5.591325149285461e-01, -5.631431207110966e-01, -5.618135471488580e-01, -5.607169323809345e-01, -5.612739164047452e-01, -5.612739164047452e-01, -5.399548681891551e-01, -5.198592510169405e-01, -5.266435491688787e-01, -5.322161806287030e-01, -5.292764000007740e-01, -5.292764000007740e-01, -6.275186534320971e-01, -2.846719507194934e-01, -3.170373051051535e-01, -3.688702518133761e-01, -3.407503087811887e-01, -3.407503087811886e-01, -4.718210486380552e-01, -7.117349790155582e-02, -1.013665411569872e-01, -3.386217714782715e-01, -1.332773580652984e-01, -1.332773580652983e-01, -6.668225441999817e-03, -2.728877411662052e-05, -1.496162181393646e-04, -1.269279918447594e-01, -5.305681763836786e-04, -5.305681763836759e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_mpw91_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_mpw91", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.521419368651657e+01, -2.521427571866568e+01, -2.521465663706385e+01, -2.521331304604559e+01, -2.521423682246549e+01, -2.521423682246549e+01, -4.060024189480344e+00, -4.060056582533900e+00, -4.061114563734304e+00, -4.060152770753767e+00, -4.060058145227132e+00, -4.060058145227132e+00, -7.610352685101407e-01, -7.599227374855151e-01, -7.316012550050766e-01, -7.377553951275799e-01, -7.606307570164496e-01, -7.606307570164496e-01, -2.029082110033101e-01, -2.056322013188324e-01, -9.239087287073484e-01, -1.550977527728488e-01, -2.037184156765970e-01, -2.037184156765970e-01, -1.741295275252916e-02, -1.956630815716050e-02, -1.272100187272621e-01, -2.098552658194425e-03, -1.933528076340029e-02, -1.933528076340029e-02, -6.202090055474392e+00, -6.204520712652561e+00, -6.202338992914773e+00, -6.204228939829762e+00, -6.203335497686898e+00, -6.203335497686898e+00, -2.207568383938654e+00, -2.224826780534836e+00, -2.198959109076533e+00, -2.212381535568549e+00, -2.230582114593527e+00, -2.230582114593527e+00, -6.814623488563273e-01, -7.655939339357104e-01, -6.451414347077971e-01, -6.919573054596644e-01, -7.109146325362738e-01, -7.109146325362738e-01, -1.363991808970269e-01, -2.078583207961663e-01, -1.322217764767125e-01, -2.328404359220390e+00, -1.395975939727244e-01, -1.395975939727244e-01, -1.950308698578147e-03, -2.820959898114751e-03, -2.022045983368403e-03, -1.213351976121067e-01, -2.590544302668549e-03, -2.590544302668548e-03, -7.354967036466609e-01, -7.247523138379278e-01, -7.285706085017020e-01, -7.314942044230024e-01, -7.300362256651320e-01, -7.300362256651320e-01, -7.134090808603561e-01, -5.787051248468075e-01, -6.140222785977513e-01, -6.495153756590659e-01, -6.312018896276519e-01, -6.312018896276519e-01, -8.015900856632758e-01, -2.574302304883311e-01, -3.058636161907902e-01, -4.007086122982361e-01, -3.492350987159332e-01, -3.492350987159332e-01, -5.204878366132333e-01, -1.306585800065669e-01, -1.300237037571285e-01, -3.835720926174248e-01, -1.187107352006137e-01, -1.187107352006136e-01, -2.321119993536184e-02, -9.996509356791098e-05, -5.505366856873192e-04, -1.127837192858388e-01, -1.953956276032554e-03, -1.953956276032545e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_mpw91_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_mpw91", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-7.294106427553827e-09, -7.294077095655132e-09, -7.293834094817480e-09, -7.294316669601833e-09, -7.294091896334623e-09, -7.294091896334623e-09, -9.608439696700565e-06, -9.608766725661031e-06, -9.616177381412800e-06, -9.595276767753218e-06, -9.608444169257000e-06, -9.608444169257000e-06, -5.960020514063428e-03, -5.961077463193806e-03, -5.942801347681862e-03, -5.794612984243312e-03, -5.960517271714029e-03, -5.960517271714029e-03, -6.878220243955341e-01, -6.740274104581363e-01, -3.213372609098127e-03, -1.408838671670056e+00, -6.839433067740814e-01, -6.839433067740814e-01, 4.838897485245446e+02, 4.719208177343605e+02, 8.367976335056206e+00, 4.536211334135597e+02, 4.905339044890381e+02, 4.905339044890381e+02, -2.207313064107750e-06, -2.208944054076121e-06, -2.207467049984552e-06, -2.208735369342409e-06, -2.208166291044786e-06, -2.208166291044786e-06, -7.219112571895546e-05, -7.079969128424545e-05, -7.213383734172392e-05, -7.104759409355706e-05, -7.132201257053347e-05, -7.132201257053347e-05, -1.290338524546974e-02, -1.169715408719257e-02, -1.565732849565403e-02, -1.602023325165658e-02, -1.145849173052185e-02, -1.145849173052185e-02, -2.414309342768628e+00, -4.849572159439041e-01, -2.699274397286023e+00, -1.365358637389053e-04, -2.075993452912717e+00, -2.075993452912717e+00, 4.836637696984599e+02, 4.690918758972908e+02, 1.351164228967994e+03, -4.076788177040150e+00, 6.920964436986982e+02, 6.920964436986972e+02, -1.695794393096640e-02, -1.490303976499068e-02, -1.530433954129522e-02, -1.583513752111936e-02, -1.553493849198778e-02, -1.553493849198778e-02, -1.959377216684795e-02, -1.971514770891844e-02, -1.864394952048800e-02, -1.801117553797059e-02, -1.831260665226105e-02, -1.831260665226105e-02, -9.575328253009482e-03, -2.431618365062337e-01, -1.512452087901404e-01, -7.821911109070902e-02, -1.097426550858865e-01, -1.097426550858866e-01, -2.910961403439000e-02, 1.625958516782458e+01, -9.824965261863162e-01, -1.092298251243373e-01, -4.431408590635655e+00, -4.431408590635662e+00, 3.446257252073804e+02, 1.058120862352545e+03, 7.910731841268811e+02, -5.422465459042142e+00, 1.027877166038784e+03, 1.027877166038781e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
