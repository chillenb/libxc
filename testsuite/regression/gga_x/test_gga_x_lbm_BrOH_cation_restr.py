
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_lbm_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_lbm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=False, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.430237242202139e+01, -3.430239625022018e+01, -3.430264695096501e+01, -3.430228944697657e+01, -3.430245618686842e+01, -3.430245618686842e+01, -5.729229996430345e+00, -5.729140140147496e+00, -5.727203135928029e+00, -5.731658718081869e+00, -5.729260368584270e+00, -5.729260368584270e+00, -1.165477648338149e+00, -1.165896105657571e+00, -1.179825045828832e+00, -1.187355737984815e+00, -1.183949261811686e+00, -1.183949261811686e+00, -3.813346653221388e-01, -3.815744354729253e-01, -1.341153910603554e+00, -3.464993396227523e-01, -3.567090185896943e-01, -3.567090185896944e-01, -1.292702370352392e-01, -1.292491870290794e-01, -2.165776503510885e-01, -1.187521747235205e-01, -1.178742265825638e-01, -1.178742265825637e-01, -8.194879458931336e+00, -8.192689718207015e+00, -8.194801831046446e+00, -8.192868400855021e+00, -8.193756991791862e+00, -8.193756991791862e+00, -3.571368675038041e+00, -3.585401444926792e+00, -3.579589055867000e+00, -3.591965008264292e+00, -3.575137377400055e+00, -3.575137377400055e+00, -9.545996108839355e-01, -9.695632797057944e-01, -8.930298512063788e-01, -8.676304148184307e-01, -9.616849582775571e-01, -9.616849582775571e-01, -3.082944393710267e-01, -4.257177165096515e-01, -2.962949716088393e-01, -2.915100816743440e+00, -3.113126417537255e-01, -3.113126417537255e-01, -1.073066552134974e-01, -1.143739958704244e-01, -7.478046952017170e-02, -2.456295841144838e-01, -9.045620095958454e-02, -9.045620095958457e-02, -8.785220625140453e-01, -8.904122638712582e-01, -8.864009972800093e-01, -8.829414832488027e-01, -8.846860656961577e-01, -8.846860656961577e-01, -8.494822361229463e-01, -8.525420737809213e-01, -8.541176037661365e-01, -8.533238649182314e-01, -8.535410329256212e-01, -8.535410329256212e-01, -1.019378882401929e+00, -4.909136619924525e-01, -5.387590161513021e-01, -6.135572400030166e-01, -5.720202190266879e-01, -5.720202190266878e-01, -7.873817497949700e-01, -2.173370442655523e-01, -2.384799411807876e-01, -5.686555344496623e-01, -2.597415475370928e-01, -2.597415475370928e-01, -1.453057974412499e-01, -6.653452490203485e-02, -8.672648942122231e-02, -2.543870219381485e-01, -8.502352338095868e-02, -8.502352338095863e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_lbm_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_lbm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=False, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
