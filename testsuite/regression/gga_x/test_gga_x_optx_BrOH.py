
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_optx_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_optx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.110080346362877e+01, -2.110084257503943e+01, -2.110107228965561e+01, -2.110043074576230e+01, -2.110082362797105e+01, -2.110082362797105e+01, -3.468305334684876e+00, -3.468290990193685e+00, -3.468040990763272e+00, -3.469208685493719e+00, -3.468312731051213e+00, -3.468312731051213e+00, -6.896906823857709e-01, -6.897153450471756e-01, -6.948421582749921e-01, -6.988384424755646e-01, -6.896953261980259e-01, -6.896953261980259e-01, -2.240415507044408e-01, -2.235504278595942e-01, -8.064649647602407e-01, -2.093851447336322e-01, -2.238416964603004e-01, -2.238416964603004e-01, -2.435612670295301e-02, -2.549911049748542e-02, -9.808802982227317e-02, -1.173238008161378e-02, -2.523365216445650e-02, -2.523365216445650e-02, -5.113564415990306e+00, -5.113969123854896e+00, -5.113609744173501e+00, -5.113924330859432e+00, -5.113765668173174e+00, -5.113765668173174e+00, -2.091936944470507e+00, -2.100502408526450e+00, -2.094830349918873e+00, -2.101375914382854e+00, -2.094380897300618e+00, -2.094380897300618e+00, -5.756480925983259e-01, -6.159187774188867e-01, -5.473659877605007e-01, -5.621440275525098e-01, -5.956140790048707e-01, -5.956140790048707e-01, -1.846281215477750e-01, -2.625622509168966e-01, -1.803387213766636e-01, -1.873449450061190e+00, -1.939678411668367e-01, -1.939678411668367e-01, -1.131853573286175e-02, -1.293149315581324e-02, -9.692812046483120e-03, -1.290553398506198e-01, -1.178246501288673e-02, -1.178246501288673e-02, -5.844103612444626e-01, -5.817992859252807e-01, -5.826786502016099e-01, -5.833996528605387e-01, -5.830339613718303e-01, -5.830339613718303e-01, -5.656197917668004e-01, -5.115891833771395e-01, -5.231059363631930e-01, -5.368970967021724e-01, -5.294018975462447e-01, -5.294018975462447e-01, -6.459434721075313e-01, -2.968714629241220e-01, -3.189829040232244e-01, -3.623215793083155e-01, -3.363137500728799e-01, -3.363137500728799e-01, -4.638723939161285e-01, -9.203483956429520e-02, -1.196346170684479e-01, -3.341204453636821e-01, -1.550208237472351e-01, -1.550208237472351e-01, -2.851752413805408e-02, -3.544350751899861e-03, -6.731062956601522e-03, -1.476316306387510e-01, -1.001511780314780e-02, -1.001511780314779e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_optx_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_optx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.688478284118346e+01, -2.688488761874560e+01, -2.688534596254748e+01, -2.688363031201445e+01, -2.688483817337082e+01, -2.688483817337082e+01, -4.273599041886836e+00, -4.273673246279046e+00, -4.275885434050201e+00, -4.272975589952179e+00, -4.273655413372814e+00, -4.273655413372814e+00, -7.528200334890328e-01, -7.503122969036884e-01, -6.802056982479346e-01, -6.884143555883843e-01, -7.519144252345101e-01, -7.519144252345101e-01, -1.563160930227540e-01, -1.608198408652147e-01, -9.538683467526022e-01, -1.302286308352851e-01, -1.576561576315071e-01, -1.576561576315071e-01, -3.214633542082656e-02, -3.362105378790919e-02, -1.156614770937392e-01, -1.561247244046643e-02, -3.327175080555802e-02, -3.327175080555802e-02, -6.644065612625994e+00, -6.646989993015968e+00, -6.644364994042932e+00, -6.646638979788334e+00, -6.645567081664653e+00, -6.645567081664653e+00, -2.058822932581570e+00, -2.085438343649655e+00, -2.035966542922286e+00, -2.056752123449198e+00, -2.106530708906728e+00, -2.106530708906728e+00, -7.229517310439694e-01, -8.171882924816990e-01, -6.824691706197967e-01, -7.410472310480316e-01, -7.576119822305641e-01, -7.576119822305641e-01, -1.526678856840661e-01, -1.561727823018610e-01, -1.460884961691076e-01, -2.485476078689350e+00, -1.350227891281890e-01, -1.350227891281890e-01, -1.506299109472500e-02, -1.719958889511692e-02, -1.289354311365888e-02, -1.350990095331679e-01, -1.567097227595293e-02, -1.567097227595293e-02, -7.788741397240234e-01, -7.727568446311603e-01, -7.751597010900341e-01, -7.768572673963955e-01, -7.760255973780812e-01, -7.760255973780812e-01, -7.540132891890483e-01, -5.895103078107113e-01, -6.476569048830089e-01, -6.954681241092988e-01, -6.723069577122167e-01, -6.723069577122167e-01, -8.562457946125803e-01, -1.921081647867538e-01, -2.507964244633350e-01, -3.974999852743837e-01, -3.185662070238706e-01, -3.185662070238706e-01, -5.253525047936820e-01, -1.114434623794147e-01, -1.332861601886672e-01, -3.968290525866587e-01, -1.370955041572839e-01, -1.370955041572839e-01, -3.756563030851136e-02, -4.724657990277631e-03, -8.967482914900245e-03, -1.300970700687489e-01, -1.332456740898732e-02, -1.332456740898729e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_optx_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_optx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-3.164063419769049e-09, -3.163973509273154e-09, -3.163635383644738e-09, -3.165106500596641e-09, -3.164015477521842e-09, -3.164015477521842e-09, -5.614578247218681e-06, -5.613948434510418e-06, -5.595705344615158e-06, -5.622358759011021e-06, -5.614158658814380e-06, -5.614158658814380e-06, -5.672155639174135e-03, -5.721273655699228e-03, -7.001643617669373e-03, -6.760952251659335e-03, -5.689950886347079e-03, -5.689950886347079e-03, -1.108615861929443e+00, -1.068107008530461e+00, -2.345359488226642e-03, -2.239357522526696e+00, -1.096814493815754e+00, -1.096814493815754e+00, -1.466679654416608e+01, -1.470416420451932e+01, -6.025866111938098e+00, -1.040094603158118e+01, -1.527522322600230e+01, -1.527522322600230e+01, -7.049419600246238e-07, -7.000942776042580e-07, -7.044546440863727e-07, -7.006851672224557e-07, -7.024439568741008e-07, -7.024439568741008e-07, -8.435282230545357e-05, -8.157946837935475e-05, -8.591922040948828e-05, -8.372875707238259e-05, -8.042268153790097e-05, -8.042268153790097e-05, -6.497064007113383e-03, -1.524711093707753e-03, -8.385231916846878e-03, -3.278045403008184e-03, -5.068800480041968e-03, -5.068800480041968e-03, -2.989652136716168e+00, -8.188118766791040e-01, -3.399922224463336e+00, -1.793611451973473e-05, -2.986203089179467e+00, -2.986203089179467e+00, -1.103396684185805e+01, -1.105578373352053e+01, -3.164442771716209e+01, -5.737618568134071e+00, -1.632989180242244e+01, -1.632989180242267e+01, -5.752533936897175e-04, -1.698687369959522e-03, -1.301962224721876e-03, -9.905926549523916e-04, -1.146764821172819e-03, -1.146764821172819e-03, -4.393340747837165e-04, -1.595406875630727e-02, -1.053428060638837e-02, -6.111383141853676e-03, -8.249829139421124e-03, -8.249829139421121e-03, -1.367269804490800e-03, -4.056012272542568e-01, -2.258775635997552e-01, -7.347803556579084e-02, -1.355899206946709e-01, -1.355899206946711e-01, -2.496514136287177e-02, -5.124076121747981e+00, -5.021276173124206e+00, -7.825933148634390e-02, -5.228152080404487e+00, -5.228152080404500e+00, -1.101569589336498e+01, -1.902239611947869e+01, -1.637745063282127e+01, -6.410981784742109e+00, -2.384959662102745e+01, -2.384959662103115e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
