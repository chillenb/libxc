
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_ityh_pbe_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ityh_pbe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.074432182677404e+01, -2.074434968849813e+01, -2.074454059474890e+01, -2.074412469062344e+01, -2.074433308433143e+01, -2.074433308433143e+01, -3.270128700336583e+00, -3.270094636806010e+00, -3.269392270291490e+00, -3.271272409697704e+00, -3.270171740831124e+00, -3.270171740831124e+00, -5.015461471172730e-01, -5.012763146856387e-01, -4.956092123661561e-01, -5.005693417545349e-01, -5.002513538858626e-01, -5.002513538858626e-01, -5.067759422068323e-02, -5.235787728234978e-02, -6.089466180337539e-01, -2.618580850601247e-02, -4.784975360205208e-02, -4.784975360205206e-02, -3.160292600398446e-06, -3.693403024272957e-06, -6.092857312260441e-04, -6.043418617764584e-07, -1.766548094902703e-06, -1.766548094902703e-06, -4.839700715639211e+00, -4.839171829036260e+00, -4.839686718080351e+00, -4.839219643077892e+00, -4.839426894553140e+00, -4.839426894553140e+00, -1.889823754806469e+00, -1.900432252020060e+00, -1.889298817818121e+00, -1.898686481959294e+00, -1.895939394744456e+00, -1.895939394744456e+00, -4.014054405063698e-01, -4.329404077855306e-01, -3.626595726796193e-01, -3.688833669398857e-01, -4.090129664398646e-01, -4.090129664398647e-01, -9.843614123613197e-03, -5.187967631601485e-02, -7.951838564011743e-03, -1.629587646469100e+00, -1.533821841570339e-02, -1.533821841570339e-02, -2.783516629200582e-07, -5.645446058718417e-07, -2.541404849753818e-07, -2.523985341983361e-03, -5.275707334953372e-07, -5.275707334953373e-07, -3.855617611966987e-01, -3.861109656073040e-01, -3.859315412642104e-01, -3.857677517079561e-01, -3.858503215853420e-01, -3.858503215853420e-01, -3.702200864687325e-01, -3.242407100360424e-01, -3.379454469270813e-01, -3.508109450428135e-01, -3.442018695375156e-01, -3.442018695375156e-01, -4.618034610292431e-01, -8.646683815695889e-02, -1.222312030003587e-01, -1.894026306249938e-01, -1.534643078992226e-01, -1.534643078992226e-01, -2.870655926189076e-01, -5.314634096390926e-04, -1.334507320766548e-03, -1.745411273554280e-01, -5.111830126602167e-03, -5.111830126602168e-03, -8.832359246931095e-06, -1.077866679292253e-08, -1.005279024334266e-07, -4.242649018372216e-03, -4.060182556129494e-07, -4.060182556129482e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_ityh_pbe_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ityh_pbe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.498117435307368e+01, -2.498114466413077e+01, -2.498128926876574e+01, -2.498122812683424e+01, -2.498162788717843e+01, -2.498172146792386e+01, -2.498033086459994e+01, -2.498006806666944e+01, -2.498124435660414e+01, -2.498070762768383e+01, -2.498124435660414e+01, -2.498070762768383e+01, -3.883735387911477e+00, -3.883888860887116e+00, -3.883774111938562e+00, -3.883933063291420e+00, -3.884769492272555e+00, -3.885054287751470e+00, -3.883696488451150e+00, -3.883982248668003e+00, -3.882978452736481e+00, -3.884939365284064e+00, -3.882978452736481e+00, -3.884939365284064e+00, -6.226721247784346e-01, -6.262349570655333e-01, -6.213229698583229e-01, -6.256683271695102e-01, -6.043457105364100e-01, -5.992674047426156e-01, -6.070234814596296e-01, -6.086461458829593e-01, -6.330665094999558e-01, -5.854087103891438e-01, -6.330665094999558e-01, -5.854087103891438e-01, -8.097352842848113e-02, -8.708050306315930e-02, -8.274956377008282e-02, -8.982369177841036e-02, -7.351583116041317e-01, -7.683236742156245e-01, -4.642665480764811e-02, -4.795624737668492e-02, -8.846276659135516e-02, -2.098768507220093e-02, -8.846276659135513e-02, -2.098768507220091e-02, -5.698721992831493e-06, -6.837222889277473e-06, -6.556775069422481e-06, -8.059877603766141e-06, -1.107524019033823e-03, -1.301451979575932e-03, -1.238294226334988e-06, -1.177426471477444e-06, -4.046301832572319e-06, -7.458680464690129e-07, -4.046301832572319e-06, -7.458680464690133e-07, -6.034297131791003e+00, -6.032750231262869e+00, -6.036980471877074e+00, -6.035342525269437e+00, -6.034445610336350e+00, -6.032838890468267e+00, -6.036748067599719e+00, -6.035193866830728e+00, -6.035671909179782e+00, -6.034052214399956e+00, -6.035671909179782e+00, -6.034052214399956e+00, -2.058199282837393e+00, -2.058086813670303e+00, -2.075098857898781e+00, -2.074479215679572e+00, -2.043060242333065e+00, -2.047224430084065e+00, -2.057437495796859e+00, -2.061847309479484e+00, -2.079489778539331e+00, -2.068286696950816e+00, -2.079489778539331e+00, -2.068286696950816e+00, -5.378918375670294e-01, -5.361331293025670e-01, -6.089647105682729e-01, -6.095052882360642e-01, -4.734201481003287e-01, -4.967239305710418e-01, -5.092479260319123e-01, -5.308805060282673e-01, -5.667371932739407e-01, -5.309487170056447e-01, -5.667371932739407e-01, -5.309487170056447e-01, -1.861632024599769e-02, -1.909317830486048e-02, -8.689970697001315e-02, -8.776368550550862e-02, -1.415916857670189e-02, -1.634080623183446e-02, -2.161012171077774e+00, -2.160014850156266e+00, -2.649990001422335e-02, -3.053744930037048e-02, -2.649990001422335e-02, -3.053744930037048e-02, -5.228449182945505e-07, -5.868398559300929e-07, -1.103046338542082e-06, -1.153885954688807e-06, -4.612506850057464e-07, -5.478518662643089e-07, -4.929505602764254e-03, -5.017938141513042e-03, -4.914239694600026e-07, -1.272718686333630e-06, -4.914239694600024e-07, -1.272718686333630e-06, -5.547733468970633e-01, -5.575794842001505e-01, -5.469816793872051e-01, -5.498138516464331e-01, -5.496630295662623e-01, -5.525039373194047e-01, -5.519423268611563e-01, -5.547422766002847e-01, -5.507976630320284e-01, -5.536175266492559e-01, -5.507976630320284e-01, -5.536175266492559e-01, -5.369177203511852e-01, -5.392115416110157e-01, -4.230668631421252e-01, -4.255078389685769e-01, -4.520121282928291e-01, -4.547689315825907e-01, -4.841100450331053e-01, -4.863882964748792e-01, -4.675196352107044e-01, -4.698414181069959e-01, -4.675196352107044e-01, -4.698414181069959e-01, -6.446024340803619e-01, -6.462248878946022e-01, -1.337093870477751e-01, -1.349728213767432e-01, -1.767687146343312e-01, -1.792368137542572e-01, -2.622901330251247e-01, -2.643791079405066e-01, -2.162310931765728e-01, -2.160446379184610e-01, -2.162310931765727e-01, -2.160446379184609e-01, -3.787359590217179e-01, -3.822733299939131e-01, -1.047274393153529e-03, -1.068656391451945e-03, -2.511790487707676e-03, -2.766226482100367e-03, -2.467288881085091e-01, -2.523037146915144e-01, -9.145081140553521e-03, -1.064131955556338e-02, -9.145081140553523e-03, -1.064131955556338e-02, -1.667054387764663e-05, -1.854873857241393e-05, -2.148319234959490e-08, -2.163083193621949e-08, -1.809783154064115e-07, -2.177383437664650e-07, -8.099367718348117e-03, -8.480586779142315e-03, -4.176408784533645e-07, -9.800495532674979e-07, -4.176408784533635e-07, -9.800495532674951e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_ityh_pbe_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ityh_pbe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.389917206860482e-08, 0.000000000000000e+00, -1.389924879202468e-08, -1.389906068827251e-08, 0.000000000000000e+00, -1.389916783777435e-08, -1.389857867204824e-08, 0.000000000000000e+00, -1.389851233525058e-08, -1.389983972724963e-08, 0.000000000000000e+00, -1.390011865370280e-08, -1.389911198639361e-08, 0.000000000000000e+00, -1.389938407562395e-08, -1.389911198639361e-08, 0.000000000000000e+00, -1.389938407562395e-08, -1.736791297902974e-05, 0.000000000000000e+00, -1.737319454442272e-05, -1.736824624674923e-05, 0.000000000000000e+00, -1.737393634919494e-05, -1.738044932508235e-05, 0.000000000000000e+00, -1.738325193655862e-05, -1.734834371602943e-05, 0.000000000000000e+00, -1.735218237780819e-05, -1.737754686618636e-05, 0.000000000000000e+00, -1.736157942119341e-05, -1.737754686618636e-05, 0.000000000000000e+00, -1.736157942119341e-05, -7.217450794327306e-03, 0.000000000000000e+00, -7.246817278561913e-03, -7.211885235240263e-03, 0.000000000000000e+00, -7.248420073991319e-03, -7.120908373121313e-03, 0.000000000000000e+00, -7.049099660499297e-03, -6.916457712599712e-03, 0.000000000000000e+00, -6.941841837581146e-03, -7.242732946153406e-03, 0.000000000000000e+00, -6.412447132213296e-03, -7.242732946153406e-03, 0.000000000000000e+00, -6.412447132213296e-03, -9.052929914414758e-02, 0.000000000000000e+00, -9.629697189781045e-02, -9.519149667772218e-02, 0.000000000000000e+00, -1.013276665744247e-01, -4.495981291994879e-03, 0.000000000000000e+00, -4.267569216450860e-03, -4.685479122225800e-02, 0.000000000000000e+00, -4.760761690554816e-02, -8.820012410642504e-02, 0.000000000000000e+00, -1.985154938046761e-02, -8.820012410642503e-02, 0.000000000000000e+00, -1.985154938046723e-02, -5.626547221193784e-07, 0.000000000000000e+00, -7.102246904737313e-07, -7.148518946827483e-07, 0.000000000000000e+00, -9.366658920530882e-07, -3.801251239637942e-04, 0.000000000000000e+00, -4.755308943388764e-04, -6.727658294476661e-08, 0.000000000000000e+00, -6.119515599079761e-08, -3.557331049336868e-07, 0.000000000000000e+00, -9.464941104754025e-08, -3.557331049336401e-07, 0.000000000000000e+00, -9.464941104725443e-08, -3.910379583111433e-06, 0.000000000000000e+00, -3.913935119648476e-06, -3.910869388766037e-06, 0.000000000000000e+00, -3.914410268694071e-06, -3.910376698756029e-06, 0.000000000000000e+00, -3.913929873673294e-06, -3.910797449506778e-06, 0.000000000000000e+00, -3.914361891660869e-06, -3.910654832384248e-06, 0.000000000000000e+00, -3.914178580796615e-06, -3.910654832384248e-06, 0.000000000000000e+00, -3.914178580796615e-06, -1.236016052289723e-04, 0.000000000000000e+00, -1.236222082790848e-04, -1.213578403506955e-04, 0.000000000000000e+00, -1.214563525665541e-04, -1.232626632797053e-04, 0.000000000000000e+00, -1.234197843378089e-04, -1.213697763942037e-04, 0.000000000000000e+00, -1.214624801156383e-04, -1.224637442884135e-04, 0.000000000000000e+00, -1.225158017587781e-04, -1.224637442884135e-04, 0.000000000000000e+00, -1.225158017587781e-04, -1.341018421494751e-02, 0.000000000000000e+00, -1.353742494610951e-02, -1.167318177603943e-02, 0.000000000000000e+00, -1.167311403813285e-02, -1.789564037224799e-02, 0.000000000000000e+00, -1.619075955750498e-02, -1.832049777223345e-02, 0.000000000000000e+00, -1.638690360857653e-02, -1.202497017250407e-02, 0.000000000000000e+00, -1.418330887687893e-02, -1.202497017250407e-02, 0.000000000000000e+00, -1.418330887687893e-02, -1.295326295305067e-02, 0.000000000000000e+00, -1.368476918410133e-02, -5.302744040431664e-02, 0.000000000000000e+00, -5.334700480584563e-02, -9.911899108912039e-03, 0.000000000000000e+00, -1.181316651308053e-02, -2.030017123194373e-04, 0.000000000000000e+00, -2.033668590274234e-04, -2.422797973097123e-02, 0.000000000000000e+00, -3.702122754722119e-02, -2.422797973097123e-02, 0.000000000000000e+00, -3.702122754722119e-02, -2.991237088025565e-08, 0.000000000000000e+00, -3.019937637955418e-08, -6.970245808610237e-08, 0.000000000000000e+00, -6.833925053196563e-08, -1.241689703764975e-07, 0.000000000000000e+00, -1.737662510152611e-07, -3.378514998013729e-03, 0.000000000000000e+00, -3.331485972100827e-03, -6.718073766738612e-08, 0.000000000000000e+00, -2.347751592549981e-07, -6.718073766690375e-08, 0.000000000000000e+00, -2.347751592551230e-07, -1.587863615874471e-02, 0.000000000000000e+00, -1.568099476544258e-02, -1.566543208149767e-02, 0.000000000000000e+00, -1.547595009950642e-02, -1.573983069045263e-02, 0.000000000000000e+00, -1.554799690277029e-02, -1.580279109596543e-02, 0.000000000000000e+00, -1.560761510659320e-02, -1.577136954814911e-02, 0.000000000000000e+00, -1.557781274619138e-02, -1.577136954814911e-02, 0.000000000000000e+00, -1.557781274619138e-02, -1.758200709268053e-02, 0.000000000000000e+00, -1.738889298360961e-02, -2.052017590392961e-02, 0.000000000000000e+00, -2.032856891280510e-02, -1.989573557981349e-02, 0.000000000000000e+00, -1.969285603452372e-02, -1.911742786158307e-02, 0.000000000000000e+00, -1.891895653177120e-02, -1.956305943217354e-02, 0.000000000000000e+00, -1.935427384573161e-02, -1.956305943217354e-02, 0.000000000000000e+00, -1.935427384573161e-02, -9.881684623719933e-03, 0.000000000000000e+00, -9.849570193665098e-03, -5.992110949595567e-02, 0.000000000000000e+00, -6.019326272651237e-02, -6.308749568291813e-02, 0.000000000000000e+00, -6.348645498245167e-02, -5.511257204107690e-02, 0.000000000000000e+00, -5.452090367194094e-02, -6.236977450007030e-02, 0.000000000000000e+00, -6.273611259045130e-02, -6.236977450007033e-02, 0.000000000000000e+00, -6.273611259045132e-02, -2.643969781017610e-02, 0.000000000000000e+00, -2.610656716609675e-02, -3.220136656281852e-04, 0.000000000000000e+00, -3.313165332045414e-04, -1.038422040783982e-03, 0.000000000000000e+00, -1.210757847641992e-03, -6.915235685580380e-02, 0.000000000000000e+00, -6.722926850588741e-02, -8.008664500720287e-03, 0.000000000000000e+00, -1.177590831587547e-02, -8.008664500720408e-03, 0.000000000000000e+00, -1.177590831587584e-02, -1.867156347091655e-06, 0.000000000000000e+00, -2.198066549743758e-06, -1.304665583016323e-09, 0.000000000000000e+00, -2.332260369545517e-09, -1.380394009561246e-08, 0.000000000000000e+00, -1.880471158700484e-08, -7.572861613167316e-03, 0.000000000000000e+00, -7.904225328342543e-03, -1.115107804038259e-07, 0.000000000000000e+00, -1.720065890991160e-07, -1.115107804035188e-07, 0.000000000000000e+00, -1.720065890987096e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
