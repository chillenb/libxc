
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_2d_b86_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_2d_b86", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.481484411958625e+02, -1.481489740237724e+02, -1.481517566314887e+02, -1.481430233046557e+02, -1.481487188012822e+02, -1.481487188012822e+02, -9.846496946224834e+00, -9.846506345293818e+00, -9.847368033239096e+00, -9.848987212586556e+00, -9.846564145212737e+00, -9.846564145212737e+00, -9.181308041020594e-01, -9.180133990563673e-01, -9.207803219690837e-01, -9.284000772513368e-01, -9.180813445493955e-01, -9.180813445493955e-01, -2.596290448049636e-01, -2.545069095747048e-01, -1.150224560078553e+00, -3.368110609618929e-01, -2.579476221253647e-01, -2.579476221253647e-01, -2.718656633603507e-02, -2.913536681503742e-02, -2.157089885910270e-01, -9.050430988075486e-03, -2.868196632871928e-02, -2.868196632871928e-02, -1.787412042057896e+01, -1.787822562341337e+01, -1.787455708566160e+01, -1.787774885403463e+01, -1.787620167739554e+01, -1.787620167739554e+01, -4.335239261351712e+00, -4.374070662015103e+00, -4.325109417163288e+00, -4.355238974720834e+00, -4.374991309828535e+00, -4.374991309828535e+00, -7.072899028710471e-01, -7.619284586892647e-01, -6.590335055268722e-01, -6.700126768054249e-01, -7.407765759454270e-01, -7.407765759454270e-01, -3.919633385186446e-01, -3.595534753163603e-01, -3.767185072677627e-01, -3.999419023763190e+00, -3.562812539414719e-01, -3.562812539414719e-01, -8.575415517270906e-03, -1.047594782865379e-02, -6.798111905661251e-03, -3.009037917300664e-01, -9.111524242473065e-03, -9.111524242473062e-03, -6.977267851964830e-01, -6.990266543767936e-01, -6.985511752825669e-01, -6.981870240146139e-01, -6.983674106021512e-01, -6.983674106021512e-01, -6.634044986588142e-01, -6.062853467504983e-01, -6.187200609836850e-01, -6.332391606616592e-01, -6.252298776776617e-01, -6.252298776776617e-01, -8.185648503115532e-01, -3.599822406806489e-01, -3.571503304347833e-01, -3.839273388861710e-01, -3.616847023180435e-01, -3.616847023180434e-01, -5.311809408133290e-01, -1.976996257505449e-01, -2.792576741863039e-01, -3.361118365059751e-01, -3.414945579488872e-01, -3.414945579488871e-01, -3.446554219808062e-02, -1.501116297539854e-03, -3.930096813675722e-03, -3.228627422875983e-01, -7.139130417603628e-03, -7.139130417603613e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_2d_b86_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_2d_b86", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.215242907147695e+02, -2.215251071488649e+02, -2.215293310460713e+02, -2.215159500486152e+02, -2.215247164127989e+02, -2.215247164127989e+02, -1.438053622790115e+01, -1.438061379204777e+01, -1.438364079633222e+01, -1.438303746467414e+01, -1.438066883732957e+01, -1.438066883732957e+01, -1.071534791599045e+00, -1.068000462478361e+00, -9.689801770591621e-01, -9.851523981805412e-01, -1.070255077577128e+00, -1.070255077577128e+00, 7.916023718449273e-03, -3.026132393559659e-03, -1.485592159997360e+00, 1.141622276163096e-01, 4.516139013705154e-03, 4.516139013705154e-03, -4.061116867468812e-02, -4.349497878432124e-02, -2.601398050737333e-01, -1.357044160070310e-02, -4.282063158518280e-02, -4.282063158518280e-02, -2.656038823655848e+01, -2.656846825058042e+01, -2.656123539107457e+01, -2.656751777710082e+01, -2.656450278825309e+01, -2.656450278825309e+01, -5.786468306878038e+00, -5.858184893810397e+00, -5.749375294930366e+00, -5.805423436545768e+00, -5.882752393918877e+00, -5.882752393918877e+00, -9.269298836391104e-01, -1.107036245021200e+00, -8.490451271372157e-01, -9.518469974676256e-01, -9.921884745928020e-01, -9.921884745928020e-01, -2.420298966644843e-02, 9.653650683449268e-02, -1.433719961978898e-02, -5.936040006390790e+00, 7.861836451430607e-02, 7.861836451430607e-02, -1.285856322063456e-02, -1.570559632843548e-02, -1.019331944251488e-02, -2.421912572273530e-01, -1.366062913038100e-02, -1.366062913038099e-02, -1.036500658610423e+00, -1.017916200776200e+00, -1.024584591562205e+00, -1.029731309034468e+00, -1.027157509422552e+00, -1.027157509422552e+00, -9.885098493790667e-01, -6.950409946902243e-01, -7.836541382548953e-01, -8.638797613398607e-01, -8.236201236734622e-01, -8.236201236734623e-01, -1.187732540984725e+00, 3.871220174994005e-04, -1.270304529998850e-01, -3.609056698922165e-01, -2.414941737990526e-01, -2.414941737990526e-01, -5.782037838788789e-01, -2.533423702699599e-01, -2.791376304985084e-01, -3.549832618029371e-01, -1.024486785625142e-01, -1.024486785625140e-01, -5.139988259859122e-02, -2.251642368894193e-03, -5.894610869013049e-03, -1.041503759027107e-01, -1.070482666178660e-02, -1.070482666178658e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_2d_b86_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_2d_b86", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.571810980646444e-09, -1.571793820291160e-09, -1.571704613193133e-09, -1.571985882588843e-09, -1.571802036608867e-09, -1.571802036608867e-09, -5.537045949589740e-06, -5.536995133360499e-06, -5.534573663918231e-06, -5.533468367814912e-06, -5.536913710474215e-06, -5.536913710474215e-06, -9.241122022179584e-03, -9.282145619539380e-03, -1.041761034101026e-02, -1.006143151554762e-02, -9.256067928555196e-03, -9.256067928555196e-03, -2.749692032419126e+00, -2.619948103434635e+00, -4.116440332627959e-03, -8.277176211885163e+00, -2.710455286432469e+00, -2.710455286432469e+00, -6.694418470873626e+00, -7.199197382198610e+00, -2.246430488943792e+01, -1.567395565856176e+00, -7.362448979425007e+00, -7.362448979425007e+00, -9.030573867827362e-07, -9.023390280123154e-07, -9.029815395002866e-07, -9.024230057699422e-07, -9.026922137019847e-07, -9.026922137019847e-07, -7.353947872839257e-05, -7.126696657514511e-05, -7.447106664562192e-05, -7.266277980454349e-05, -7.083627796977050e-05, -7.083627796977050e-05, -1.736019635978276e-02, -1.203846255012813e-02, -2.195902577012738e-02, -1.827448089948790e-02, -1.467045058685210e-02, -1.467045058685210e-02, -1.602224105080810e+01, -2.386695474329020e+00, -1.763848069727143e+01, -8.074757166771064e-05, -1.316539285891409e+01, -1.316539285891409e+01, -1.575381223327184e+00, -1.929553168591130e+00, -3.583681996654059e+00, -2.885103651672364e+01, -2.478967064093006e+00, -2.478967064094099e+00, -1.518844140104769e-02, -1.554012277677502e-02, -1.541295304389546e-02, -1.531569729129907e-02, -1.536428551492916e-02, -1.536428551492916e-02, -1.759311416786283e-02, -3.282963852607416e-02, -2.714651793747148e-02, -2.290142793066959e-02, -2.495752441057475e-02, -2.495752441057475e-02, -9.727023961142538e-03, -9.563033720385430e-01, -4.702073189241444e-01, -1.640450607221220e-01, -2.794085885677915e-01, -2.794085885677917e-01, -5.207297200238376e-02, -1.746252941557082e+01, -2.378301423202246e+01, -2.132512991031447e-01, -2.736263049767744e+01, -2.736263049767746e+01, -6.383936984373863e+00, -4.745272777565322e-01, -1.070345979998460e+00, -3.245640739112545e+01, -2.835828795469941e+00, -2.835828795469951e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
