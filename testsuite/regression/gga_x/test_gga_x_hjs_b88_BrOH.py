
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_hjs_b88_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_hjs_b88", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.058604081054751e+01, -2.058607183227680e+01, -2.058627475527512e+01, -2.058576547673754e+01, -2.058605663096262e+01, -2.058605663096262e+01, -3.344250682061750e+00, -3.344232128971691e+00, -3.343862795522234e+00, -3.345221623684629e+00, -3.344255649700901e+00, -3.344255649700901e+00, -6.141580422564960e-01, -6.140160343285221e-01, -6.120528786376230e-01, -6.164201763869323e-01, -6.141034412750952e-01, -6.141034412750952e-01, -1.452791762552380e-01, -1.463103455222192e-01, -7.312060919465940e-01, -1.135448536592469e-01, -1.455646103859304e-01, -1.455646103859304e-01, -9.617474357576202e-03, -1.003494708717096e-02, -4.456208743761068e-02, -3.396150040565957e-02, -9.739461501427408e-03, -9.739461501427408e-03, -4.918765903640013e+00, -4.918579947546407e+00, -4.918752218810106e+00, -4.918607539889653e+00, -4.918662928370617e+00, -4.918662928370617e+00, -1.967694744181253e+00, -1.978037853421361e+00, -1.967507909665742e+00, -1.975546866226258e+00, -1.974997708401251e+00, -1.974997708401251e+00, -5.034257484973593e-01, -5.326382439930532e-01, -4.761354265339454e-01, -4.836883094942929e-01, -5.220158046591451e-01, -5.220158046591451e-01, -9.122638465326695e-02, -1.643975804182611e-01, -8.763431635610829e-02, -1.742069943970899e+00, -9.826647988205217e-02, -9.826647988205217e-02, -3.563562621379417e-02, -2.532155598780374e-02, 0.000000000000000e+00, -5.717157162251578e-02, -1.986056728580572e-02, -1.986056728580572e-02, -4.981814771486431e-01, -4.992613505357220e-01, -4.988875574385315e-01, -4.985863585519006e-01, -4.987375871285902e-01, -4.987375871285902e-01, -4.796996395628079e-01, -4.415398184750322e-01, -4.526679657189670e-01, -4.628527011958671e-01, -4.575526780441465e-01, -4.575526780441464e-01, -5.619883165702956e-01, -2.053689360257892e-01, -2.384427336002717e-01, -2.945639121292058e-01, -2.640961781442285e-01, -2.640961781442284e-01, -3.944680083672564e-01, -4.435034267201429e-02, -5.519863951577091e-02, -2.684793195957986e-01, -6.977366379621197e-02, -6.977366379621193e-02, -1.285552426276826e-02, 0.000000000000000e+00, 0.000000000000000e+00, -6.407259500156791e-02, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_hjs_b88_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_hjs_b88", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.549759427989389e+01, -2.549767270318603e+01, -2.549804456972484e+01, -2.549675992593301e+01, -2.549763545374787e+01, -2.549763545374787e+01, -4.062713259209346e+00, -4.062742098976008e+00, -4.063704611886751e+00, -4.062920431658758e+00, -4.062745662229044e+00, -4.062745662229044e+00, -7.132922966671263e-01, -7.121182382273539e-01, -6.814118284351636e-01, -6.877790888303764e-01, -7.128658323600201e-01, -7.128658323600201e-01, -1.451147768227625e-01, -1.485891685036537e-01, -8.788686905099875e-01, -8.606460197169503e-02, -1.461640282795338e-01, -1.461640282795338e-01, 7.237840937307259e-03, 7.861702375031664e-03, -5.902563795212197e-03, 1.950710604540157e-01, 7.751761958510770e-03, 7.751761958510770e-03, -6.210849909334700e+00, -6.212969070062210e+00, -6.211067850389249e+00, -6.212715591183372e+00, -6.211934677604645e+00, -6.211934677604645e+00, -2.178817412855029e+00, -2.196840276896399e+00, -2.169348305290561e+00, -2.183381256268631e+00, -2.203417377305327e+00, -2.203417377305327e+00, -6.318210152588920e-01, -7.105448406779794e-01, -5.953706423205511e-01, -6.383430362935932e-01, -6.609866195165507e-01, -6.609866195165507e-01, -5.115463754856860e-02, -1.413346561862473e-01, -4.978101252856928e-02, -2.281585115525643e+00, -6.565497742371525e-02, -6.565497742371525e-02, 2.324970682301549e-01, 7.671785453596446e-02, 0.000000000000000e+00, -1.864449334398652e-02, 6.392023580883055e-02, 6.392023580883030e-02, -6.779623403726985e-01, -6.691385383588289e-01, -6.722476090372482e-01, -6.746903008423649e-01, -6.734639618855743e-01, -6.734639618855743e-01, -6.551565588268655e-01, -5.289949903261228e-01, -5.641207649346891e-01, -5.978381335258659e-01, -5.806053532892674e-01, -5.806053532892675e-01, -7.470174943741136e-01, -1.954415559866292e-01, -2.489919671581498e-01, -3.490522093069816e-01, -2.953705163915556e-01, -2.953705163915554e-01, -4.700559767062766e-01, -3.848960690181827e-03, -1.421065552672240e-02, -3.322823353172774e-01, -3.386431640014752e-02, -3.386431640014719e-02, 8.921168244126454e-03, 0.000000000000000e+00, 0.000000000000000e+00, -3.046794875185302e-02, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_hjs_b88_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_hjs_b88", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.990974791505985e-09, -4.990949329387092e-09, -4.990766800341095e-09, -4.991185139616082e-09, -4.990961939900835e-09, -4.990961939900835e-09, -6.673060465793566e-06, -6.673229823646003e-06, -6.676789134875934e-06, -6.665008618276236e-06, -6.673033879432371e-06, -6.673033879432371e-06, -4.279984539430112e-03, -4.285654366318344e-03, -4.406968823454737e-03, -4.290731478313111e-03, -4.282107428582401e-03, -4.282107428582401e-03, -5.215572344400089e-01, -5.048723938132569e-01, -2.247430200938302e-03, -1.252081739577522e+00, -5.166268276175681e-01, -5.166268276175681e-01, -1.191475523074602e+03, -1.091646347938997e+03, -2.699976379291749e+01, -8.580772259673628e+04, -1.122326602103803e+03, -1.122326602103803e+03, -1.491409596326526e-06, -1.492077259441986e-06, -1.491470327163082e-06, -1.491989567003162e-06, -1.491762201668019e-06, -1.491762201668019e-06, -5.374896569202221e-05, -5.260339455501982e-05, -5.386179788677383e-05, -5.296560403015535e-05, -5.282255465749053e-05, -5.282255465749053e-05, -8.622673384372380e-03, -7.180541825960503e-03, -1.048031317108283e-02, -1.002104995389482e-02, -7.597923897524551e-03, -7.597923897524551e-03, -2.807139814686960e+00, -4.087953919613566e-01, -3.034257549781428e+00, -8.863664368987465e-05, -2.002405479704636e+00, -2.002405479704636e+00, -1.139531217085108e+05, -3.176870574378177e+04, 0.000000000000000e+00, -1.132634750362933e+01, -4.209350426055021e+04, -4.209350426054992e+04, -9.129548935885794e-03, -9.017236770826663e-03, -9.056159856536213e-03, -9.087401767266044e-03, -9.071700984128747e-03, -9.071700984128746e-03, -1.041999322604029e-02, -1.370661517305092e-02, -1.249730472405820e-02, -1.161262642779519e-02, -1.205170969036533e-02, -1.205170969036532e-02, -5.937100355742233e-03, -1.945737382811691e-01, -1.143896205382752e-01, -5.409021097727673e-02, -7.951174419867041e-02, -7.951174419867001e-02, -2.026943482108732e-02, -3.161212151365376e+01, -1.429470543920511e+01, -7.167381711428653e-02, -5.664077158124996e+00, -5.664077158124990e+00, -8.175666449315042e+02, 0.000000000000000e+00, 0.000000000000000e+00, -6.801110736450879e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
