
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_2d_b86_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_2d_b86", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.481541253942908e+02, -1.481547376108766e+02, -1.481576615564436e+02, -1.481485488491978e+02, -1.481532949712872e+02, -1.481532949712872e+02, -9.847147731355546e+00, -9.847152849784383e+00, -9.847630200720042e+00, -9.849581064314812e+00, -9.847508003591862e+00, -9.847508003591862e+00, -9.184210044421955e-01, -9.181918719653763e-01, -9.174649574594190e-01, -9.260354093434336e-01, -9.311158965523751e-01, -9.311158965523751e-01, -2.915202725512435e-01, -2.845083499213693e-01, -1.129520051344895e+00, -3.628453467533096e-01, -3.137272460625021e-01, -3.137272460625021e-01, -1.244333296389907e-02, -1.344768931905920e-02, -1.663735218618203e-01, -5.447116771886258e-03, -9.082165205785864e-03, -9.082165205785860e-03, -1.788572121671539e+01, -1.788996251387904e+01, -1.788593814447347e+01, -1.788968201651603e+01, -1.788785924303082e+01, -1.788785924303082e+01, -4.340132322422554e+00, -4.380248597856141e+00, -4.319728898037759e+00, -4.354900967794698e+00, -4.372458317853522e+00, -4.372458317853522e+00, -7.191708477657821e-01, -7.754202074957850e-01, -6.502254311435756e-01, -6.524723093479966e-01, -7.324496107143277e-01, -7.324496107143277e-01, -4.121871906587149e-01, -3.882269310714529e-01, -3.982239860897898e-01, -4.006492166591672e+00, -3.732712165622776e-01, -3.732712165622776e-01, -3.695523510614107e-03, -5.264774142782968e-03, -3.529268908734022e-03, -2.942987469770725e-01, -5.000361705778738e-03, -5.000361705778738e-03, -6.825858424503906e-01, -6.842984602376219e-01, -6.836852193792313e-01, -6.831787810844201e-01, -6.834298197329045e-01, -6.834298197329045e-01, -6.529322972091477e-01, -5.967402342214598e-01, -6.076784530169103e-01, -6.223305844464317e-01, -6.140689678129799e-01, -6.140689678129799e-01, -8.330150422971407e-01, -3.807332514810632e-01, -3.685761890114893e-01, -3.843994754542331e-01, -3.649098152467586e-01, -3.649098152467585e-01, -5.351709148034991e-01, -1.566132031961862e-01, -2.356651709914116e-01, -3.450019049208932e-01, -3.421787924590421e-01, -3.421787924590421e-01, -2.081106276794534e-02, -7.275048157226100e-04, -2.219441749310726e-03, -3.318280974530962e-01, -4.396367737801457e-03, -4.396367737801451e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_2d_b86_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_2d_b86", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.215330629376755e+02, -2.215326355405479e+02, -2.215341496395767e+02, -2.215334249854982e+02, -2.215378222674865e+02, -2.215386327019202e+02, -2.215255448515639e+02, -2.215229856679450e+02, -2.215337011698531e+02, -2.215293844203302e+02, -2.215337011698531e+02, -2.215293844203302e+02, -1.438160087845392e+01, -1.438155605605791e+01, -1.438170051301493e+01, -1.438162957841527e+01, -1.438385359366301e+01, -1.438454470499753e+01, -1.438363432625557e+01, -1.438421760704891e+01, -1.437786189958152e+01, -1.438655045854099e+01, -1.437786189958152e+01, -1.438655045854099e+01, -1.086531047248035e+00, -1.101058106946065e+00, -1.081173137008022e+00, -1.099029504069267e+00, -1.008438204306716e+00, -9.821945523300269e-01, -1.007665444663250e+00, -1.016165564111165e+00, -1.125679246651581e+00, -8.638435135033284e-01, -1.125679246651581e+00, -8.638435135033284e-01, 6.617161892859190e-02, 4.831175858493258e-02, 5.656993191000074e-02, 3.569845309153789e-02, -1.364645669997461e+00, -1.469133703741555e+00, 1.151689773316916e-01, 1.173221725962584e-01, 5.968282021147137e-02, -3.187705589578759e-02, 5.968282021147150e-02, -3.187705589578717e-02, -1.773296325758419e-02, -1.942133855869237e-02, -1.901889819293680e-02, -2.108284139566488e-02, -2.203269326386881e-01, -2.336856909769026e-01, -8.270075359300161e-03, -8.064317313122205e-03, -1.494515392064757e-02, -6.418249702134611e-03, -1.494515392064756e-02, -6.418249702134608e-03, -2.658273131743195e+01, -2.657310909893273e+01, -2.659122086128315e+01, -2.658130901483073e+01, -2.658323837868542e+01, -2.657341620398727e+01, -2.659052254494371e+01, -2.658086516076123e+01, -2.658705262950728e+01, -2.657722322705323e+01, -2.658705262950728e+01, -2.657722322705323e+01, -5.799959010821843e+00, -5.799479460587289e+00, -5.874916973917092e+00, -5.872233114082245e+00, -5.721907880358337e+00, -5.744049666827445e+00, -5.786940483141597e+00, -5.809695405030323e+00, -5.899450350178872e+00, -5.845650311546666e+00, -5.899450350178872e+00, -5.845650311546666e+00, -9.439791746536720e-01, -9.402465505926952e-01, -1.123801430825176e+00, -1.125143633557085e+00, -7.971744842450930e-01, -8.511299987933042e-01, -9.050134623709611e-01, -9.506008211785101e-01, -1.012806920074554e+00, -9.323866015232958e-01, -1.012806920074554e+00, -9.323866015232958e-01, -1.096220912178118e-01, -9.835559358163756e-02, 1.279201371146420e-01, 1.269164559519645e-01, -1.704755600482304e-01, -1.338831900236220e-01, -5.948383035153626e+00, -5.944411754983327e+00, 1.777595345369177e-02, 7.173984790291843e-02, 1.777595345369177e-02, 7.173984790291843e-02, -5.374058482876025e-03, -5.693456242853554e-03, -7.805358737331665e-03, -7.983222391798757e-03, -5.047168809592027e-03, -5.500415256647817e-03, -2.833358262078288e-01, -2.861024618842868e-01, -5.209860800925247e-03, -8.383010565926399e-03, -5.209860800925249e-03, -8.383010565926398e-03, -1.008139918746699e+00, -1.014205093947080e+00, -9.880452666721298e-01, -9.942557067543151e-01, -9.951009452560116e-01, -1.001304067894707e+00, -1.000983353292390e+00, -1.007057904017036e+00, -9.980429295397737e-01, -1.004179516830377e+00, -9.980429295397737e-01, -1.004179516830377e+00, -9.710383617073302e-01, -9.758934968191896e-01, -6.571067658921983e-01, -6.634070767952287e-01, -7.503632327628932e-01, -7.571322961883659e-01, -8.413924277055119e-01, -8.463856148705834e-01, -7.960671449535529e-01, -8.012189718905955e-01, -7.960671449535529e-01, -8.012189718905955e-01, -1.204107580075320e+00, -1.207988928393402e+00, 5.141228065015370e-02, 4.789540005772130e-02, -7.378703987820136e-02, -8.350851803170435e-02, -3.459666619433519e-01, -3.506580371754318e-01, -2.090096265716287e-01, -2.101211396166703e-01, -2.090096265716286e-01, -2.101211396166703e-01, -5.669140904165209e-01, -5.763917299076345e-01, -2.168023298561302e-01, -2.185013303973251e-01, -2.874672480069575e-01, -2.923724168076183e-01, -3.502585683747583e-01, -3.626841704067069e-01, -2.097850955699605e-01, -1.517120439149389e-01, -2.097850955699606e-01, -1.517120439149388e-01, -3.029863376084683e-02, -3.195278834886266e-02, -1.089378350339782e-03, -1.093113009577628e-03, -3.161815453591718e-03, -3.468071235416593e-03, -2.161193799976506e-01, -2.109026960801147e-01, -4.802699097539851e-03, -7.356660463722292e-03, -4.802699097539840e-03, -7.356660463722286e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_2d_b86_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_2d_b86", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-3.143249831353283e-09, 0.000000000000000e+00, -3.143268046454830e-09, -3.143204156690960e-09, 0.000000000000000e+00, -3.143234865010823e-09, -3.143048995082098e-09, 0.000000000000000e+00, -3.143015062472688e-09, -3.143565059326636e-09, 0.000000000000000e+00, -3.143672767669517e-09, -3.143223046690911e-09, 0.000000000000000e+00, -3.143403188879148e-09, -3.143223046690911e-09, 0.000000000000000e+00, -3.143403188879148e-09, -1.107144463738252e-05, 0.000000000000000e+00, -1.107214723560653e-05, -1.107129181848611e-05, 0.000000000000000e+00, -1.107209229936599e-05, -1.106857272056285e-05, 0.000000000000000e+00, -1.106756990992223e-05, -1.106524844242799e-05, 0.000000000000000e+00, -1.106457525825904e-05, -1.107976735897401e-05, 0.000000000000000e+00, -1.106118734242996e-05, -1.107976735897401e-05, 0.000000000000000e+00, -1.106118734242996e-05, -1.814562810590588e-02, 0.000000000000000e+00, -1.783986452761346e-02, -1.826803557512686e-02, 0.000000000000000e+00, -1.789080340855871e-02, -1.999996852483003e-02, 0.000000000000000e+00, -2.059697953086802e-02, -1.965249376206033e-02, 0.000000000000000e+00, -1.947269931399975e-02, -1.725728160978892e-02, 0.000000000000000e+00, -2.276714934154994e-02, -1.725728160978892e-02, 0.000000000000000e+00, -2.276714934154994e-02, -7.007053328346625e+00, 0.000000000000000e+00, -6.078023551981544e+00, -6.735866504109159e+00, 0.000000000000000e+00, -5.713818371650746e+00, -9.743878791272446e-03, 0.000000000000000e+00, -8.419611333466919e-03, -1.630462723822880e+01, 0.000000000000000e+00, -1.557289214036903e+01, -5.855934438964701e+00, 0.000000000000000e+00, -3.402615219739523e+01, -5.855934438964702e+00, 0.000000000000000e+00, -3.402615219739525e+01, -2.766488520267466e+00, 0.000000000000000e+00, -3.000618247868790e+00, -3.127448321859285e+00, 0.000000000000000e+00, -3.450785328564480e+00, -2.224563215601109e+01, 0.000000000000000e+00, -2.408719293195936e+01, -1.179541638096143e+00, 0.000000000000000e+00, -1.118921711242644e+00, -2.326270550039473e+00, 0.000000000000000e+00, -2.531987096990211e+00, -2.326270550042091e+00, 0.000000000000000e+00, -2.531987096993542e+00, -1.801603316547658e-06, 0.000000000000000e+00, -1.803546007462655e-06, -1.800098532065418e-06, 0.000000000000000e+00, -1.802090572326662e-06, -1.801511557705153e-06, 0.000000000000000e+00, -1.803490153964485e-06, -1.800220443258075e-06, 0.000000000000000e+00, -1.802168021959135e-06, -1.800838640572472e-06, 0.000000000000000e+00, -1.802815879202889e-06, -1.800838640572472e-06, 0.000000000000000e+00, -1.802815879202889e-06, -1.463340266609264e-04, 0.000000000000000e+00, -1.463671904976914e-04, -1.416106325536687e-04, 0.000000000000000e+00, -1.417833895399545e-04, -1.504007833356153e-04, 0.000000000000000e+00, -1.492574667062377e-04, -1.461681168163499e-04, 0.000000000000000e+00, -1.450091820439182e-04, -1.407730818432444e-04, 0.000000000000000e+00, -1.435384308473112e-04, -1.407730818432444e-04, 0.000000000000000e+00, -1.435384308473112e-04, -3.285030246543368e-02, 0.000000000000000e+00, -3.324459348371860e-02, -2.292705293252061e-02, 0.000000000000000e+00, -2.288166288418508e-02, -5.081165879333822e-02, 0.000000000000000e+00, -4.324730733376894e-02, -4.265971151981275e-02, 0.000000000000000e+00, -3.682507721814417e-02, -2.756768299785270e-02, 0.000000000000000e+00, -3.467405440114001e-02, -2.756768299785271e-02, 0.000000000000000e+00, -3.467405440114001e-02, -3.074486089522767e+01, 0.000000000000000e+00, -3.085603476624565e+01, -5.779668210526753e+00, 0.000000000000000e+00, -5.677082229518701e+00, -3.532210049982808e+01, 0.000000000000000e+00, -3.374006318479284e+01, -1.604844620958617e-04, 0.000000000000000e+00, -1.608094344058109e-04, -2.799507890462952e+01, 0.000000000000000e+00, -2.782848913975112e+01, -2.799507890462952e+01, 0.000000000000000e+00, -2.782848913975112e+01, -1.075660016280739e+00, 0.000000000000000e+00, -9.863589663647199e-01, -1.345727517201580e+00, 0.000000000000000e+00, -1.270780693921672e+00, -4.958188184768311e+00, 0.000000000000000e+00, -6.012396446833878e+00, -4.495357531308098e+01, 0.000000000000000e+00, -4.367049541703908e+01, -2.544239602772785e+00, 0.000000000000000e+00, -4.024578360253075e+00, -2.544239602762172e+00, 0.000000000000000e+00, -4.024578360255861e+00, -3.285875530426847e-02, 0.000000000000000e+00, -3.229399892441331e-02, -3.367749804921824e-02, 0.000000000000000e+00, -3.309370453912498e-02, -3.338755029171791e-02, 0.000000000000000e+00, -3.280879699558326e-02, -3.314856387534990e-02, 0.000000000000000e+00, -3.257874036955607e-02, -3.326791540337164e-02, 0.000000000000000e+00, -3.269368839438620e-02, -3.326791540337164e-02, 0.000000000000000e+00, -3.269368839438620e-02, -3.715187018950124e-02, 0.000000000000000e+00, -3.660436241105778e-02, -7.268213748981081e-02, 0.000000000000000e+00, -7.130516057324329e-02, -5.949627462988811e-02, 0.000000000000000e+00, -5.833768282749281e-02, -4.904152375853414e-02, 0.000000000000000e+00, -4.827660372672847e-02, -5.405164187390336e-02, 0.000000000000000e+00, -5.316263765008695e-02, -5.405164187390336e-02, 0.000000000000000e+00, -5.316263765008695e-02, -1.858385693103640e-02, 0.000000000000000e+00, -1.844988721050493e-02, -2.353461063908362e+00, 0.000000000000000e+00, -2.301105978814731e+00, -1.133461474175444e+00, 0.000000000000000e+00, -1.088486471797294e+00, -3.448750838578892e-01, 0.000000000000000e+00, -3.365942083772293e-01, -6.216358816680539e-01, 0.000000000000000e+00, -6.229063385716697e-01, -6.216358816680542e-01, 0.000000000000000e+00, -6.229063385716698e-01, -1.058103737711755e-01, 0.000000000000000e+00, -1.026606006658528e-01, -1.984233955117830e+01, 0.000000000000000e+00, -2.005405543134428e+01, -2.867391321186630e+01, 0.000000000000000e+00, -3.038536531815372e+01, -4.187102720839456e-01, 0.000000000000000e+00, -3.919427827078154e-01, -4.862520050666091e+01, 0.000000000000000e+00, -5.444073617385389e+01, -4.862520050666095e+01, 0.000000000000000e+00, -5.444073617385389e+01, -3.755328870486816e+00, 0.000000000000000e+00, -4.044900895148080e+00, -6.705598317737155e-01, 0.000000000000000e+00, -1.191917511380195e+00, -1.201533480793361e+00, 0.000000000000000e+00, -1.403107686508547e+00, -5.292238508287306e+01, 0.000000000000000e+00, -5.210780402493989e+01, -4.836809837283037e+00, 0.000000000000000e+00, -3.665544403516969e+00, -4.836809837272099e+00, 0.000000000000000e+00, -3.665544403506829e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
