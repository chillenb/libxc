
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_pbefe_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbefe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.138407583170886e+01, -2.138409747060292e+01, -2.138427303454897e+01, -2.138394944606481e+01, -2.138410772100443e+01, -2.138410772100443e+01, -3.556182499979249e+00, -3.556138675002238e+00, -3.555212064203551e+00, -3.557497676065322e+00, -3.556215899100756e+00, -3.556215899100756e+00, -7.145006331976764e-01, -7.144631532564967e-01, -7.141291342570509e-01, -7.191709038017586e-01, -7.169650121742464e-01, -7.169650121742464e-01, -2.087278383717590e-01, -2.108413064510220e-01, -8.254574814521585e-01, -1.659119308613924e-01, -2.018479525396105e-01, -2.018479525396104e-01, -8.053814000525839e-03, -8.481186782632192e-03, -4.657869005457149e-02, -4.643923765975703e-03, -6.481890704622381e-03, -6.481890704622381e-03, -5.123056669306382e+00, -5.121984709486654e+00, -5.123020431076187e+00, -5.122073925192598e+00, -5.122506382829894e+00, -5.122506382829894e+00, -2.154871315537648e+00, -2.165959409042113e+00, -2.153659253708573e+00, -2.163549481744012e+00, -2.161470521995996e+00, -2.161470521995996e+00, -5.938614545122450e-01, -6.085663233417600e-01, -5.547864330830665e-01, -5.442104791433477e-01, -5.997928249047444e-01, -5.997928249047445e-01, -1.188046885688789e-01, -2.155955317631887e-01, -1.103557722582761e-01, -1.830065591633394e+00, -1.374257973389164e-01, -1.374257973389164e-01, -3.585291702541035e-03, -4.539710244048277e-03, -3.476495446666414e-03, -7.490795877686318e-02, -4.367032929647094e-03, -4.367032929647096e-03, -5.527657836972810e-01, -5.589779188804918e-01, -5.568739532742641e-01, -5.550624578018879e-01, -5.559750176241105e-01, -5.559750176241105e-01, -5.349316088849905e-01, -5.231701818884860e-01, -5.296055651443841e-01, -5.330035892059908e-01, -5.313721619026536e-01, -5.313721619026536e-01, -6.396334260446390e-01, -2.655113771950978e-01, -3.080947543177089e-01, -3.744240062093412e-01, -3.401677713697817e-01, -3.401677713697817e-01, -4.827714235415340e-01, -4.453958475065954e-02, -6.057288537851656e-02, -3.508130049126934e-01, -9.465816156291815e-02, -9.465816156291817e-02, -1.135146893476456e-02, -1.213408410898146e-03, -2.551766591967569e-03, -8.900931103758013e-02, -4.010394845429195e-03, -4.010394845429192e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_pbefe_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbefe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.509818545789057e+01, -2.509815444448981e+01, -2.509828291245924e+01, -2.509822523235635e+01, -2.509858880349601e+01, -2.509866520263621e+01, -2.509748841804987e+01, -2.509726262767731e+01, -2.509824387906103e+01, -2.509781892322353e+01, -2.509824387906103e+01, -2.509781892322353e+01, -4.068997339608897e+00, -4.068971121849144e+00, -4.069013707624974e+00, -4.068981545430909e+00, -4.069352880645541e+00, -4.069466440528815e+00, -4.069425356738866e+00, -4.069513566696656e+00, -4.068305502259316e+00, -4.069891300460482e+00, -4.068305502259316e+00, -4.069891300460482e+00, -7.895241465203998e-01, -7.910926887328131e-01, -7.888721227408103e-01, -7.907455370271338e-01, -7.819079733507482e-01, -7.809298434658766e-01, -7.869624505259252e-01, -7.872198770865932e-01, -7.951948247147095e-01, -7.881922702821941e-01, -7.951948247147095e-01, -7.881922702821941e-01, -2.348045932098595e-01, -2.401382691841301e-01, -2.355303496497691e-01, -2.416954706680134e-01, -9.059832968586924e-01, -9.311891419424992e-01, -1.993034078261323e-01, -2.016107774956344e-01, -2.441566674555495e-01, -1.548822675484201e-01, -2.441566674555493e-01, -1.548822675484201e-01, -1.038104974555236e-02, -1.103053637911574e-02, -1.087753453084413e-02, -1.165180704880493e-02, -5.986262229444538e-02, -6.313352968398769e-02, -6.242004390428602e-03, -6.138034306206606e-03, -9.261663101096194e-03, -5.271297389016574e-03, -9.261663101096195e-03, -5.271297389016574e-03, -6.162063799672391e+00, -6.160538086228362e+00, -6.164443787214307e+00, -6.162836775631134e+00, -6.162196470580811e+00, -6.160617436280389e+00, -6.164238457269144e+00, -6.162705556327676e+00, -6.163281024494125e+00, -6.161691329723165e+00, -6.163281024494125e+00, -6.161691329723165e+00, -2.355464140748044e+00, -2.355356730568310e+00, -2.368555809888150e+00, -2.368010679164805e+00, -2.352654961406217e+00, -2.353166973459738e+00, -2.363677615653605e+00, -2.364507666654848e+00, -2.365689439197223e+00, -2.362304565421382e+00, -2.365689439197223e+00, -2.362304565421382e+00, -6.883865181733905e-01, -6.865893295695731e-01, -7.685507122175170e-01, -7.693608683269051e-01, -6.234825289022441e-01, -6.467815553733473e-01, -6.651502611844593e-01, -6.867930342562041e-01, -7.174672814466408e-01, -6.811774467039119e-01, -7.174672814466408e-01, -6.811774467039120e-01, -1.506244084216762e-01, -1.517342661741311e-01, -2.544255903614052e-01, -2.553682482871223e-01, -1.376367681211913e-01, -1.441304036512013e-01, -2.319071555839989e+00, -2.318103320136942e+00, -1.672718127804764e-01, -1.724803954489292e-01, -1.672718127804764e-01, -1.724803954489292e-01, -4.682906469746054e-03, -4.866672201083264e-03, -6.005892780400980e-03, -6.096800799223361e-03, -4.490829833608130e-03, -4.755780609036810e-03, -9.739880657949677e-02, -9.801930834748955e-02, -4.586932135275947e-03, -6.298555278043831e-03, -4.586932135275949e-03, -6.298555278043834e-03, -7.208866798152258e-01, -7.238712962336582e-01, -7.063704018698511e-01, -7.094064146471419e-01, -7.111459497657847e-01, -7.142010659737096e-01, -7.153905473098633e-01, -7.183683082638831e-01, -7.132387260612917e-01, -7.162548579071139e-01, -7.132387260612917e-01, -7.162548579071139e-01, -7.051538546238932e-01, -7.075143016301176e-01, -5.784081209078158e-01, -5.806528988367445e-01, -6.018196947851312e-01, -6.045119021001114e-01, -6.345431073245920e-01, -6.369060293515716e-01, -6.166586880809900e-01, -6.190251007209241e-01, -6.166586880809900e-01, -6.190251007209241e-01, -8.035614446562321e-01, -8.055866082211388e-01, -3.035806372206939e-01, -3.047137485920039e-01, -3.414817770948188e-01, -3.432362225586099e-01, -4.108230129752308e-01, -4.128606351700466e-01, -3.721124796921409e-01, -3.716534313758031e-01, -3.721124796921408e-01, -3.716534313758030e-01, -5.324556868566761e-01, -5.356290908025199e-01, -5.879382495840930e-02, -5.918754973550996e-02, -7.844483142615070e-02, -8.095061357844900e-02, -3.898693961171845e-01, -3.954734443484246e-01, -1.186084937375388e-01, -1.237521179160473e-01, -1.186084937375388e-01, -1.237521179160474e-01, -1.484451344350535e-02, -1.538171929501534e-02, -1.616005428953020e-03, -1.619688203036647e-03, -3.288051611850410e-03, -3.497070977368337e-03, -1.138352053907655e-01, -1.155560316285711e-01, -4.344622378873118e-03, -5.773309297892214e-03, -4.344622378873114e-03, -5.773309297892208e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_pbefe_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbefe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.728701079061921e-08, 0.000000000000000e+00, -1.728711693785564e-08, -1.728700180214917e-08, 0.000000000000000e+00, -1.728711028267768e-08, -1.728664222041089e-08, 0.000000000000000e+00, -1.728668764993269e-08, -1.728675214095115e-08, 0.000000000000000e+00, -1.728682506515142e-08, -1.728702213554423e-08, 0.000000000000000e+00, -1.728652681155545e-08, -1.728702213554423e-08, 0.000000000000000e+00, -1.728652681155545e-08, -2.152136047594115e-05, 0.000000000000000e+00, -2.153559262502545e-05, -2.152272606617423e-05, 0.000000000000000e+00, -2.153795692406748e-05, -2.156595311462954e-05, 0.000000000000000e+00, -2.157679550156214e-05, -2.147718786221821e-05, 0.000000000000000e+00, -2.149032230110521e-05, -2.153061234648569e-05, 0.000000000000000e+00, -2.152664452309187e-05, -2.153061234648569e-05, 0.000000000000000e+00, -2.152664452309187e-05, -1.146141972315973e-02, 0.000000000000000e+00, -1.170369350692125e-02, -1.138804233158790e-02, 0.000000000000000e+00, -1.168468606216185e-02, -1.044139262521178e-02, 0.000000000000000e+00, -1.004900001809373e-02, -9.961028671499925e-03, 0.000000000000000e+00, -1.009191342518972e-02, -1.198402500134814e-02, 0.000000000000000e+00, -7.959974855828701e-03, -1.198402500134814e-02, 0.000000000000000e+00, -7.959974855828701e-03, -6.043443704619793e-01, 0.000000000000000e+00, -5.997667051848062e-01, -6.266557086988714e-01, 0.000000000000000e+00, -6.175386602815333e-01, -6.711398120986817e-03, 0.000000000000000e+00, -6.754877792293864e-03, -5.694475439255505e-01, 0.000000000000000e+00, -5.557617507712664e-01, -5.286279650404500e-01, 0.000000000000000e+00, -6.414247297680319e-01, -5.286279650404496e-01, 0.000000000000000e+00, -6.414247297680327e-01, -9.201876296993090e-01, 0.000000000000000e+00, -9.111553308525752e-01, -9.697627938090660e-01, 0.000000000000000e+00, -9.650694452288698e-01, -5.606826177004767e-01, 0.000000000000000e+00, -5.666868690558492e-01, -8.419153051664233e-01, 0.000000000000000e+00, -8.190383375746469e-01, -9.183288646270713e-01, 0.000000000000000e+00, -2.328544012882323e+00, -9.183288646270733e-01, 0.000000000000000e+00, -2.328544012882328e+00, -5.413584444856405e-06, 0.000000000000000e+00, -5.418279977053361e-06, -5.421711770831375e-06, 0.000000000000000e+00, -5.426143692962123e-06, -5.413960638594677e-06, 0.000000000000000e+00, -5.418496251923635e-06, -5.420935296189968e-06, 0.000000000000000e+00, -5.425640820797251e-06, -5.417806782605710e-06, 0.000000000000000e+00, -5.422240341632985e-06, -5.417806782605710e-06, 0.000000000000000e+00, -5.422240341632985e-06, -1.199733389647799e-04, 0.000000000000000e+00, -1.199910915081107e-04, -1.188485602901038e-04, 0.000000000000000e+00, -1.189219758117455e-04, -1.165694004228066e-04, 0.000000000000000e+00, -1.176202293862274e-04, -1.156967648262914e-04, 0.000000000000000e+00, -1.166598053372240e-04, -1.217341738272990e-04, 0.000000000000000e+00, -1.197887255233969e-04, -1.217341738272990e-04, 0.000000000000000e+00, -1.197887255233969e-04, -2.821895296774054e-02, 0.000000000000000e+00, -2.855357965530402e-02, -2.827727008243267e-02, 0.000000000000000e+00, -2.833603920352571e-02, -3.850307355236222e-02, 0.000000000000000e+00, -3.475107736928068e-02, -4.705679266160145e-02, 0.000000000000000e+00, -4.108349095016908e-02, -2.545645536570304e-02, 0.000000000000000e+00, -3.069474626671195e-02, -2.545645536570305e-02, 0.000000000000000e+00, -3.069474626671195e-02, -4.804022974208079e-01, 0.000000000000000e+00, -4.920021786758543e-01, -2.963704028468260e-01, 0.000000000000000e+00, -2.948528550599371e-01, -5.226387796883578e-01, 0.000000000000000e+00, -5.186681909544972e-01, -3.463307670219078e-04, 0.000000000000000e+00, -3.470238559340387e-04, -5.821463159415375e-01, 0.000000000000000e+00, -7.607245454106411e-01, -5.821463159415375e-01, 0.000000000000000e+00, -7.607245454106411e-01, -1.181660348495706e+00, 0.000000000000000e+00, -1.022770359058694e+00, -1.017716704464344e+00, 0.000000000000000e+00, -9.396286568216268e-01, -5.798185614963462e+00, 0.000000000000000e+00, -6.451049889561260e+00, -7.019602433094448e-01, 0.000000000000000e+00, -6.758097363511844e-01, -2.882718713754810e+00, 0.000000000000000e+00, -2.833018781289155e+00, -2.882718713754799e+00, 0.000000000000000e+00, -2.833018781289151e+00, -4.256177794402432e-02, 0.000000000000000e+00, -4.196871555678421e-02, -4.008401600081440e-02, 0.000000000000000e+00, -3.956267676680444e-02, -4.092626353930390e-02, 0.000000000000000e+00, -4.038630268195431e-02, -4.165386853686451e-02, 0.000000000000000e+00, -4.108221790507534e-02, -4.128799870688053e-02, 0.000000000000000e+00, -4.073194360949060e-02, -4.128799870688053e-02, 0.000000000000000e+00, -4.073194360949060e-02, -4.868131816731584e-02, 0.000000000000000e+00, -4.805253634952538e-02, -4.087248118032395e-02, 0.000000000000000e+00, -4.053372421904193e-02, -4.344996136786448e-02, 0.000000000000000e+00, -4.307359457709265e-02, -4.604704809944018e-02, 0.000000000000000e+00, -4.552799979924984e-02, -4.490466441302955e-02, 0.000000000000000e+00, -4.438592125788397e-02, -4.490466441302955e-02, 0.000000000000000e+00, -4.438592125788397e-02, -2.313817023959676e-02, 0.000000000000000e+00, -2.312608343704851e-02, -2.106673827752383e-01, 0.000000000000000e+00, -2.099004916795198e-01, -1.801075836645286e-01, 0.000000000000000e+00, -1.804366529569742e-01, -1.477315822156475e-01, 0.000000000000000e+00, -1.457209691875263e-01, -1.684457585872988e-01, 0.000000000000000e+00, -1.700832831116926e-01, -1.684457585872990e-01, 0.000000000000000e+00, -1.700832831116927e-01, -5.591796268643036e-02, 0.000000000000000e+00, -5.535117775612918e-02, -5.111420031157156e-01, 0.000000000000000e+00, -5.120320514403772e-01, -5.194141821807651e-01, 0.000000000000000e+00, -5.336001662203009e-01, -2.161922522400687e-01, 0.000000000000000e+00, -2.087680125182105e-01, -7.487483916731495e-01, 0.000000000000000e+00, -9.131070009742350e-01, -7.487483916731505e-01, 0.000000000000000e+00, -9.131070009742355e-01, -7.302447359804884e-01, 0.000000000000000e+00, -7.456737960553071e-01, -3.634624602467253e+00, 0.000000000000000e+00, -6.438361284955036e+00, -2.243642644327998e+00, 0.000000000000000e+00, -2.388613732486702e+00, -8.304439524809750e-01, 0.000000000000000e+00, -8.165292908326969e-01, -5.944315645994672e+00, 0.000000000000000e+00, -2.940571129039346e+00, -5.944315645994680e+00, 0.000000000000000e+00, -2.940571129039355e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
