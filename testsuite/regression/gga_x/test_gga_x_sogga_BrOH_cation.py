
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_sogga_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_sogga", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.047187814036723e+01, -2.047191680875083e+01, -2.047213589795472e+01, -2.047155962125895e+01, -2.047185487063446e+01, -2.047185487063446e+01, -3.371058795974927e+00, -3.371038480186961e+00, -3.370651595645783e+00, -3.371964670547801e+00, -3.371115955195889e+00, -3.371115955195889e+00, -6.672663940210937e-01, -6.670346335087828e-01, -6.628034320022856e-01, -6.675921966587361e-01, -6.682214144003429e-01, -6.682214144003429e-01, -1.976981462240802e-01, -1.989889139634988e-01, -7.733398301091762e-01, -1.657515293592736e-01, -1.930183363718788e-01, -1.930183363718787e-01, -8.696992713282501e-03, -9.158295540471791e-03, -5.011098836695421e-02, -5.015320452126133e-03, -6.999850869563286e-03, -6.999850869563287e-03, -4.948435264010829e+00, -4.948440514628746e+00, -4.948443195981520e+00, -4.948447700006172e+00, -4.948433646699515e+00, -4.948433646699515e+00, -1.998334878003027e+00, -2.009172958970178e+00, -1.996151931937170e+00, -2.005701474647859e+00, -2.005426573162939e+00, -2.005426573162939e+00, -5.655570862032766e-01, -5.979340599234714e-01, -5.262256250170986e-01, -5.317573588708149e-01, -5.732033095481686e-01, -5.732033095481686e-01, -1.251314706426939e-01, -2.107516894310760e-01, -1.166804920908745e-01, -1.799706634348347e+00, -1.408535605243506e-01, -1.408535605243506e-01, -3.872084696634219e-03, -4.902763841161149e-03, -3.754429413464195e-03, -8.008016449178677e-02, -4.716119622587778e-03, -4.716119622587779e-03, -5.491891507733309e-01, -5.496282361367302e-01, -5.494788172696433e-01, -5.493468379896544e-01, -5.494126707993879e-01, -5.494126707993879e-01, -5.332562329413570e-01, -4.889476871119598e-01, -5.010907356288710e-01, -5.133022194757065e-01, -5.069016767888364e-01, -5.069016767888364e-01, -6.275068686074154e-01, -2.526282100025837e-01, -2.873434289554307e-01, -3.486471730887657e-01, -3.150532219351431e-01, -3.150532219351431e-01, -4.508851555372879e-01, -4.794062498966874e-02, -6.501895183748432e-02, -3.294913047102315e-01, -1.002640821212003e-01, -1.002640821212003e-01, -1.225651529424879e-02, -1.310504129231251e-03, -2.755910294927333e-03, -9.459221969248423e-02, -4.331006522439687e-03, -4.331006522439684e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_sogga_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_sogga", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.564046990128924e+01, -2.564043875166835e+01, -2.564057615330197e+01, -2.564051592651582e+01, -2.564090110941041e+01, -2.564098575479178e+01, -2.563970155905913e+01, -2.563945670203815e+01, -2.564053402790626e+01, -2.564005690128212e+01, -2.564053402790626e+01, -2.564005690128212e+01, -4.134307353590211e+00, -4.134428676509705e+00, -4.134342535434093e+00, -4.134467168038906e+00, -4.135229570499974e+00, -4.135486298820045e+00, -4.134359485604936e+00, -4.134613024422496e+00, -4.133545981774892e+00, -4.135477219858977e+00, -4.133545981774892e+00, -4.135477219858977e+00, -7.794411813052948e-01, -7.843190103083524e-01, -7.776255922588855e-01, -7.835970652387332e-01, -7.539841486828709e-01, -7.462139360962130e-01, -7.555236838428740e-01, -7.580290896408958e-01, -7.930703428136221e-01, -7.183354576642502e-01, -7.930703428136221e-01, -7.183354576642502e-01, -1.934321941364289e-01, -1.997358268887513e-01, -1.950670302598411e-01, -2.026542521427768e-01, -8.964526454538986e-01, -9.349209119784598e-01, -1.664290438319686e-01, -1.679840612615955e-01, -2.016055056376497e-01, -1.452147111199098e-01, -2.016055056376495e-01, -1.452147111199097e-01, -1.120694499696580e-02, -1.190746541393621e-02, -1.174228136677935e-02, -1.257721820181039e-02, -6.397284813082807e-02, -6.739066656997328e-02, -6.740522391934416e-03, -6.628294915270160e-03, -9.999391674671149e-03, -5.692130377351433e-03, -9.999391674671149e-03, -5.692130377351433e-03, -6.297984590453185e+00, -6.296432733160866e+00, -6.300226101156843e+00, -6.298598229521746e+00, -6.298110699201501e+00, -6.296508276471219e+00, -6.300034043647145e+00, -6.298475527084529e+00, -6.299131607126077e+00, -6.297520264815658e+00, -6.299131607126077e+00, -6.297520264815658e+00, -2.244868921817867e+00, -2.244749438921895e+00, -2.263667737368516e+00, -2.262997629932599e+00, -2.225221300864142e+00, -2.230748351786369e+00, -2.241396857501611e+00, -2.247116300066982e+00, -2.270216021657341e+00, -2.256370722536050e+00, -2.270216021657341e+00, -2.256370722536050e+00, -7.017621388343200e-01, -6.999641884122475e-01, -7.800908257596814e-01, -7.806790832566906e-01, -6.329762745978220e-01, -6.582027451981518e-01, -6.771087856311659e-01, -6.993387148851129e-01, -7.327316004687239e-01, -6.953310537849722e-01, -7.327316004687239e-01, -6.953310537849722e-01, -1.477866282781617e-01, -1.480840625371988e-01, -2.074576247626993e-01, -2.081543031745024e-01, -1.383067694514284e-01, -1.427428885775765e-01, -2.352162649681677e+00, -2.351142489480400e+00, -1.525202044370038e-01, -1.490953052258528e-01, -1.525202044370038e-01, -1.490953052258528e-01, -5.057160875825252e-03, -5.255610497578713e-03, -6.485536275842155e-03, -6.583714316078210e-03, -4.849228546822936e-03, -5.135132179779446e-03, -1.022112467041926e-01, -1.028837918710242e-01, -4.953268283954142e-03, -6.800701557522491e-03, -4.953268283954143e-03, -6.800701557522493e-03, -7.253817969777706e-01, -7.282651557188902e-01, -7.165828296763863e-01, -7.195193436731835e-01, -7.196430668844950e-01, -7.225806313028232e-01, -7.222181189654756e-01, -7.251024796070185e-01, -7.209280856197602e-01, -7.238382355066676e-01, -7.209280856197602e-01, -7.238382355066676e-01, -7.073207884783328e-01, -7.096700616973374e-01, -5.732932547158235e-01, -5.761016492604194e-01, -6.101852743627738e-01, -6.132810512372073e-01, -6.486941608748475e-01, -6.511068147956749e-01, -6.291575825959657e-01, -6.316423646901745e-01, -6.291575825959657e-01, -6.316423646901745e-01, -8.164622312997341e-01, -8.181697410284352e-01, -2.494726896808503e-01, -2.506601268152002e-01, -2.945345600315278e-01, -2.975062164611250e-01, -4.018287546103800e-01, -4.042486199579937e-01, -3.434687725706991e-01, -3.434539823479524e-01, -3.434687725706990e-01, -3.434539823479524e-01, -5.263854358977343e-01, -5.305795993213007e-01, -6.287978416665653e-02, -6.329257133254929e-02, -8.332086754813522e-02, -8.588309790169013e-02, -3.907313077622703e-01, -3.972818155310058e-01, -1.210381113782523e-01, -1.230366923057738e-01, -1.210381113782523e-01, -1.230366923057738e-01, -1.601981103528606e-02, -1.659843947944018e-02, -1.745294181826118e-03, -1.749259214564368e-03, -3.550944690248514e-03, -3.776632899532900e-03, -1.165504802209879e-01, -1.180391611279438e-01, -4.691402941800676e-03, -6.233833076069513e-03, -4.691402941800673e-03, -6.233833076069508e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_sogga_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_sogga", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-8.382312497532594e-09, 0.000000000000000e+00, -8.382357715167907e-09, -8.382229765909148e-09, 0.000000000000000e+00, -8.382297597946766e-09, -8.381909497638237e-09, 0.000000000000000e+00, -8.381854243799599e-09, -8.382845238293685e-09, 0.000000000000000e+00, -8.383046488175315e-09, -8.382265962299037e-09, 0.000000000000000e+00, -8.382528988428082e-09, -8.382265962299037e-09, 0.000000000000000e+00, -8.382528988428082e-09, -1.153380097206311e-05, 0.000000000000000e+00, -1.153624018837430e-05, -1.153388336902530e-05, 0.000000000000000e+00, -1.153652701627034e-05, -1.153794224653468e-05, 0.000000000000000e+00, -1.153873653189971e-05, -1.152345842922968e-05, 0.000000000000000e+00, -1.152480241205404e-05, -1.154080477629187e-05, 0.000000000000000e+00, -1.152745967963377e-05, -1.154080477629187e-05, 0.000000000000000e+00, -1.152745967963377e-05, -7.709125555187242e-03, 0.000000000000000e+00, -7.668892441137182e-03, -7.728806759022541e-03, 0.000000000000000e+00, -7.679656907332411e-03, -7.986080720801283e-03, 0.000000000000000e+00, -8.041725489233773e-03, -7.788908318848903e-03, 0.000000000000000e+00, -7.774365150087142e-03, -7.553319587120733e-03, 0.000000000000000e+00, -7.928866956681050e-03, -7.553319587120733e-03, 0.000000000000000e+00, -7.928866956681050e-03, -1.033244914782042e+00, 0.000000000000000e+00, -9.522822108871805e-01, -1.026263717637037e+00, 0.000000000000000e+00, -9.301540523294050e-01, -4.452118822750503e-03, 0.000000000000000e+00, -4.055592785537412e-03, -1.482692048718856e+00, 0.000000000000000e+00, -1.436202783428722e+00, -8.862894004291768e-01, 0.000000000000000e+00, -1.808777033058358e+00, -8.862894004291766e-01, 0.000000000000000e+00, -1.808777033058361e+00, -2.052753271152168e+00, 0.000000000000000e+00, -2.032034062344464e+00, -2.162720974737162e+00, 0.000000000000000e+00, -2.151457254866961e+00, -1.181417552767420e+00, 0.000000000000000e+00, -1.185661582799582e+00, -1.880935320217751e+00, 0.000000000000000e+00, -1.829892016784080e+00, -2.049559896545766e+00, 0.000000000000000e+00, -5.201474529862506e+00, -2.049559896545770e+00, 0.000000000000000e+00, -5.201474529862518e+00, -2.431631526280901e-06, 0.000000000000000e+00, -2.433910132386215e-06, -2.431110034929846e-06, 0.000000000000000e+00, -2.433406394769298e-06, -2.431587188132724e-06, 0.000000000000000e+00, -2.433881809310250e-06, -2.431139946005089e-06, 0.000000000000000e+00, -2.433424365797478e-06, -2.431376710285811e-06, 0.000000000000000e+00, -2.433659464720205e-06, -2.431376710285811e-06, 0.000000000000000e+00, -2.433659464720205e-06, -9.723657205817636e-05, 0.000000000000000e+00, -9.725454329996085e-05, -9.502571233141642e-05, 0.000000000000000e+00, -9.511498956666233e-05, -9.796790694046554e-05, 0.000000000000000e+00, -9.779698198972159e-05, -9.605807357345661e-05, 0.000000000000000e+00, -9.584737184396757e-05, -9.538969634475671e-05, 0.000000000000000e+00, -9.605142586020176e-05, -9.538969634475671e-05, 0.000000000000000e+00, -9.605142586020176e-05, -1.439914902970188e-02, 0.000000000000000e+00, -1.455700174762274e-02, -1.124376136229942e-02, 0.000000000000000e+00, -1.123311762364425e-02, -2.083968237097264e-02, 0.000000000000000e+00, -1.823328823439092e-02, -1.935404235083239e-02, 0.000000000000000e+00, -1.696272607453737e-02, -1.247409179552643e-02, 0.000000000000000e+00, -1.523851895353260e-02, -1.247409179552644e-02, 0.000000000000000e+00, -1.523851895353260e-02, -1.249238578639640e+00, 0.000000000000000e+00, -1.296841107175187e+00, -6.680475457021722e-01, 0.000000000000000e+00, -6.610440857812726e-01, -1.257299033014648e+00, 0.000000000000000e+00, -1.312943385784344e+00, -1.367074703202851e-04, 0.000000000000000e+00, -1.369595678506167e-04, -1.671267467372474e+00, 0.000000000000000e+00, -2.130640970831146e+00, -1.671267467372474e+00, 0.000000000000000e+00, -2.130640970831146e+00, -2.640655397432842e+00, 0.000000000000000e+00, -2.285578337307453e+00, -2.273663927600261e+00, 0.000000000000000e+00, -2.099225198017709e+00, -1.295016712859957e+01, 0.000000000000000e+00, -1.440551948799031e+01, -1.369286314408087e+00, 0.000000000000000e+00, -1.317683223621826e+00, -6.440328037359650e+00, 0.000000000000000e+00, -6.324977703908901e+00, -6.440328037359627e+00, 0.000000000000000e+00, -6.324977703908892e+00, -1.577395791720906e-02, 0.000000000000000e+00, -1.553708386155780e-02, -1.585107748651803e-02, 0.000000000000000e+00, -1.561458118272947e-02, -1.582396934602814e-02, 0.000000000000000e+00, -1.558719841243725e-02, -1.580184920720738e-02, 0.000000000000000e+00, -1.556524286896477e-02, -1.581298210517919e-02, 0.000000000000000e+00, -1.557627483735429e-02, -1.581298210517919e-02, 0.000000000000000e+00, -1.557627483735429e-02, -1.768374081808821e-02, 0.000000000000000e+00, -1.745257988332313e-02, -2.682958180955580e-02, 0.000000000000000e+00, -2.643739765264537e-02, -2.386989595808248e-02, 0.000000000000000e+00, -2.350615208918598e-02, -2.121789963413951e-02, 0.000000000000000e+00, -2.093564968461050e-02, -2.254801766705371e-02, 0.000000000000000e+00, -2.223393690502658e-02, -2.254801766705371e-02, 0.000000000000000e+00, -2.223393690502658e-02, -9.300734874512996e-03, 0.000000000000000e+00, -9.252778932009945e-03, -3.683528838445922e-01, 0.000000000000000e+00, -3.635279907772133e-01, -2.321041492247015e-01, 0.000000000000000e+00, -2.269010084680655e-01, -1.048152877246888e-01, 0.000000000000000e+00, -1.027841811535757e-01, -1.584273804266869e-01, 0.000000000000000e+00, -1.591055793243643e-01, -1.584273804266870e-01, 0.000000000000000e+00, -1.591055793243643e-01, -3.729699679373402e-02, 0.000000000000000e+00, -3.646799795708537e-02, -1.082120726418738e+00, 0.000000000000000e+00, -1.083152302516791e+00, -1.052618468154687e+00, 0.000000000000000e+00, -1.073166325371994e+00, -1.315872999861016e-01, 0.000000000000000e+00, -1.247916341309023e-01, -1.682301727451478e+00, 0.000000000000000e+00, -2.282845481349413e+00, -1.682301727451480e+00, 0.000000000000000e+00, -2.282845481349415e+00, -1.625991720455467e+00, 0.000000000000000e+00, -1.659762891437320e+00, -8.125657039482457e+00, 0.000000000000000e+00, -1.439323010838834e+01, -5.014708088823089e+00, 0.000000000000000e+00, -5.338411916584652e+00, -1.835020730517398e+00, 0.000000000000000e+00, -1.825628192551393e+00, -1.327728758521076e+01, 0.000000000000000e+00, -6.566485250357402e+00, -1.327728758521078e+01, 0.000000000000000e+00, -6.566485250357420e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
