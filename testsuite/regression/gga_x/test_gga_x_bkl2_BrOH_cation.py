
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_bkl2_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_bkl2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.038002690510352e+01, -2.038006750543807e+01, -2.038029159447921e+01, -2.037968664904452e+01, -2.037999743022446e+01, -2.037999743022446e+01, -3.351903082179445e+00, -3.351885538886142e+00, -3.351562347619397e+00, -3.352761133406909e+00, -3.351963106586997e+00, -3.351963106586997e+00, -6.621765076838454e-01, -6.619205751146516e-01, -6.572472645943823e-01, -6.620038411196418e-01, -6.631704598399417e-01, -6.631704598399417e-01, -1.982371568920757e-01, -1.991640423753574e-01, -7.677670700992216e-01, -1.724291840561352e-01, -1.952098313880132e-01, -1.952098313880131e-01, -5.608815807572973e-03, -5.911697026392859e-03, -5.171121047836319e-02, -3.231828235355517e-03, -4.511369461545430e-03, -4.511369461545430e-03, -4.931259560349693e+00, -4.931379951593806e+00, -4.931272218407905e+00, -4.931378375780783e+00, -4.931316603821201e+00, -4.931316603821201e+00, -1.981442221457565e+00, -1.992226821664125e+00, -1.979236077330027e+00, -1.988713828488927e+00, -1.988547710268879e+00, -1.988547710268879e+00, -5.626659244972979e-01, -5.969308266067530e-01, -5.232749873664995e-01, -5.305669324770875e-01, -5.705131406253392e-01, -5.705131406253392e-01, -1.386857974304280e-01, -2.154779963694278e-01, -1.300867399857565e-01, -1.796847996507822e+00, -1.504768709303944e-01, -1.504768709303944e-01, -2.495062181128035e-03, -3.159308523301952e-03, -2.419444381609572e-03, -8.943577430328867e-02, -3.039244595685022e-03, -3.039244595685023e-03, -5.488600074805499e-01, -5.487475716048764e-01, -5.487878014967742e-01, -5.488163642441939e-01, -5.488015350138097e-01, -5.488015350138097e-01, -5.331031680388512e-01, -4.852661323788228e-01, -4.981243956267133e-01, -5.113494004589989e-01, -5.044137480370441e-01, -5.044137480370441e-01, -6.263585856828419e-01, -2.539324310547893e-01, -2.859564535435950e-01, -3.458542719296378e-01, -3.124515702659904e-01, -3.124515702659904e-01, -4.474495648215768e-01, -4.869076365902009e-02, -7.022686547431532e-02, -3.272268526210809e-01, -1.120518781429226e-01, -1.120518781429226e-01, -8.009226867766034e-03, -8.444103660066541e-04, -1.775800982983423e-03, -1.061648288843458e-01, -2.791011895990088e-03, -2.791011895990086e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_bkl2_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_bkl2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.571458942934582e+01, -2.571455816279712e+01, -2.571469565144968e+01, -2.571463531607998e+01, -2.571502091900393e+01, -2.571510547630269e+01, -2.571382169095184e+01, -2.571357683652790e+01, -2.571465351756267e+01, -2.571417717306171e+01, -2.571465351756267e+01, -2.571417717306171e+01, -4.145507636562208e+00, -4.145638922496195e+00, -4.145544123459945e+00, -4.145679331315206e+00, -4.146468702787580e+00, -4.146735209868013e+00, -4.145534834998772e+00, -4.145799825578314e+00, -4.144740388429673e+00, -4.146697680631678e+00, -4.144740388429673e+00, -4.146697680631678e+00, -7.790429497523289e-01, -7.843870901890029e-01, -7.770571261217268e-01, -7.836134297564534e-01, -7.506343522527216e-01, -7.415484126020366e-01, -7.515214623618480e-01, -7.544555803766025e-01, -7.937508831322098e-01, -7.049821686975273e-01, -7.937508831322098e-01, -7.049821686975273e-01, -1.781076266284698e-01, -1.860919131953485e-01, -1.808683064165857e-01, -1.902927526129863e-01, -8.962855386590224e-01, -9.364497636902951e-01, -1.428368456653986e-01, -1.442655910010775e-01, -1.862289133818836e-01, -1.329666591242751e-01, -1.862289133818835e-01, -1.329666591242749e-01, -7.268191804459917e-03, -7.771141981047034e-03, -7.665107786232646e-03, -8.319250947002810e-03, -8.050954796664601e-02, -8.464197130154284e-02, -4.344387369168511e-03, -4.271997090379879e-03, -6.453470803384868e-03, -3.668879693644708e-03, -6.453470803384868e-03, -3.668879693644708e-03, -6.314428184925781e+00, -6.312874826967121e+00, -6.316612179538880e+00, -6.314984801565878e+00, -6.314551406413169e+00, -6.312948679315108e+00, -6.316425411666159e+00, -6.314865500245097e+00, -6.315545640681978e+00, -6.313934547336609e+00, -6.315545640681978e+00, -6.313934547336609e+00, -2.229597106860434e+00, -2.229474790170535e+00, -2.249598783045847e+00, -2.248901907999659e+00, -2.206348375902932e+00, -2.212971997728264e+00, -2.223688884464419e+00, -2.230455186055527e+00, -2.257998212449338e+00, -2.242072142396021e+00, -2.257998212449338e+00, -2.242072142396021e+00, -7.037837373595796e-01, -7.019817288192538e-01, -7.812795134705061e-01, -7.818406229983116e-01, -6.346563429151665e-01, -6.600480334449068e-01, -6.783934231572964e-01, -7.006930580780969e-01, -7.348580646554589e-01, -6.973521425470938e-01, -7.348580646554589e-01, -6.973521425470939e-01, -1.449473776722391e-01, -1.438378868051925e-01, -1.818105407992070e-01, -1.825967447342694e-01, -1.427157697543748e-01, -1.425887966801918e-01, -2.355541013328567e+00, -2.354514910256871e+00, -1.356141605516897e-01, -1.282455372797530e-01, -1.356141605516897e-01, -1.282455372797530e-01, -3.259113952053173e-03, -3.387009012286234e-03, -4.180066033127879e-03, -4.243331488015639e-03, -3.125747270332582e-03, -3.310339273994527e-03, -1.225185285045179e-01, -1.234463089440820e-01, -3.192469374513339e-03, -4.384832966815328e-03, -3.192469374513339e-03, -4.384832966815329e-03, -7.258077787570208e-01, -7.286810147731336e-01, -7.176277400178543e-01, -7.205516383720818e-01, -7.204892523734295e-01, -7.234133301790289e-01, -7.228829298283952e-01, -7.257572221775300e-01, -7.216852544120631e-01, -7.245836263251249e-01, -7.216852544120631e-01, -7.245836263251249e-01, -7.075214748070955e-01, -7.098696773491602e-01, -5.733208578907777e-01, -5.762086801307349e-01, -6.117463073706959e-01, -6.148775338883946e-01, -6.504726040454024e-01, -6.528858987210243e-01, -6.309832887957562e-01, -6.334763640208002e-01, -6.309832887957562e-01, -6.334763640208002e-01, -8.178089092973115e-01, -8.194757612629112e-01, -2.288485979466357e-01, -2.303067267384555e-01, -2.822062715573809e-01, -2.858438809508331e-01, -4.010502958334856e-01, -4.035344535087315e-01, -3.384052786565701e-01, -3.385070245065902e-01, -3.384052786565699e-01, -3.385070245065901e-01, -5.262211664182717e-01, -5.305621507585226e-01, -7.924466703980319e-02, -7.974623688866091e-02, -1.039296873639363e-01, -1.069445669256741e-01, -3.912927691883111e-01, -3.979555777525289e-01, -1.301967951029938e-01, -1.239088535879670e-01, -1.301967951029937e-01, -1.239088535879670e-01, -1.143880429576539e-02, -1.219083688752098e-02, -1.124590922288522e-03, -1.127161251822379e-03, -2.288282255961574e-03, -2.433772897932116e-03, -1.266486444588408e-01, -1.273491783523315e-01, -3.023948977258313e-03, -4.018596952391979e-03, -3.023948977258309e-03, -4.018596952391975e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_bkl2_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_bkl2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-7.386857548505581e-09, 0.000000000000000e+00, -7.386896381794618e-09, -7.386771925388910e-09, 0.000000000000000e+00, -7.386834173181686e-09, -7.386466016982854e-09, 0.000000000000000e+00, -7.386404786074123e-09, -7.387433819959857e-09, 0.000000000000000e+00, -7.387638090735779e-09, -7.386808096483960e-09, 0.000000000000000e+00, -7.387121537737210e-09, -7.386808096483960e-09, 0.000000000000000e+00, -7.387121537737210e-09, -1.035819671485149e-05, 0.000000000000000e+00, -1.035948334642179e-05, -1.035815751594984e-05, 0.000000000000000e+00, -1.035957022087805e-05, -1.035847723155846e-05, 0.000000000000000e+00, -1.035831907793831e-05, -1.035123425837803e-05, 0.000000000000000e+00, -1.035144701710814e-05, -1.036484323935563e-05, 0.000000000000000e+00, -1.035090394793321e-05, -1.036484323935563e-05, 0.000000000000000e+00, -1.035090394793321e-05, -7.255809996673002e-03, 0.000000000000000e+00, -7.176922229291602e-03, -7.288712146218772e-03, 0.000000000000000e+00, -7.191710407791887e-03, -7.739617181068846e-03, 0.000000000000000e+00, -7.878356844732533e-03, -7.588267074373964e-03, 0.000000000000000e+00, -7.547235604261275e-03, -7.010210557431021e-03, 0.000000000000000e+00, -8.221116205238879e-03, -7.010210557431021e-03, 0.000000000000000e+00, -8.221116205238879e-03, -1.288045251529644e+00, 0.000000000000000e+00, -1.151412562425791e+00, -1.256469276520998e+00, 0.000000000000000e+00, -1.101906154625295e+00, -4.177655036872987e-03, 0.000000000000000e+00, -3.725955140881378e-03, -2.389514686925881e+00, 0.000000000000000e+00, -2.297387231625686e+00, -1.095717878657929e+00, 0.000000000000000e+00, -3.763265823919170e+00, -1.095717878657928e+00, 0.000000000000000e+00, -3.763265823919174e+00, 1.258947537067848e+01, 0.000000000000000e+00, 2.306295511104639e+01, 2.493491099371433e+01, 0.000000000000000e+00, 4.498153452574090e+01, 1.823955253629720e+01, 0.000000000000000e+00, 1.513307142822331e+01, 4.403947723679819e-05, 0.000000000000000e+00, 1.595478312507712e-05, 2.722220450537579e+00, 0.000000000000000e+00, 2.868311058859922e-03, 2.722220450537613e+00, 0.000000000000000e+00, 2.868311058860022e-03, -2.113467286075988e-06, 0.000000000000000e+00, -2.115473818319671e-06, -2.112373378200147e-06, 0.000000000000000e+00, -2.114416146265955e-06, -2.113395948184878e-06, 0.000000000000000e+00, -2.115429905197537e-06, -2.112457448185922e-06, 0.000000000000000e+00, -2.114469167271378e-06, -2.112915219569345e-06, 0.000000000000000e+00, -2.114944026537312e-06, -2.112915219569345e-06, 0.000000000000000e+00, -2.114944026537312e-06, -9.555613122977395e-05, 0.000000000000000e+00, -9.557465173200441e-05, -9.307555990233751e-05, 0.000000000000000e+00, -9.317026238882619e-05, -9.714070410757007e-05, 0.000000000000000e+00, -9.671303180189577e-05, -9.495921511189811e-05, 0.000000000000000e+00, -9.450592978683412e-05, -9.297940915001506e-05, 0.000000000000000e+00, -9.414540698415998e-05, -9.297940915001506e-05, 0.000000000000000e+00, -9.414540698415998e-05, -1.281050906264924e-02, 0.000000000000000e+00, -1.294877801427987e-02, -9.570429738389721e-03, 0.000000000000000e+00, -9.556571774431985e-03, -1.875159424813063e-02, 0.000000000000000e+00, -1.630797107243157e-02, -1.656728097707136e-02, 0.000000000000000e+00, -1.452979004048594e-02, -1.101407488308065e-02, 0.000000000000000e+00, -1.348760234882903e-02, -1.101407488308065e-02, 0.000000000000000e+00, -1.348760234882903e-02, -2.674570487556780e+00, 0.000000000000000e+00, -2.783858028307026e+00, -9.609153578204327e-01, 0.000000000000000e+00, -9.475520286775653e-01, -2.524564346288491e+00, 0.000000000000000e+00, -2.776467855578790e+00, -1.162213244421781e-04, 0.000000000000000e+00, -1.164326207100207e-04, -3.320033304224612e+00, 0.000000000000000e+00, -3.779338847928675e+00, -3.320033304224612e+00, 0.000000000000000e+00, -3.779338847928675e+00, 1.995205496130184e-09, 0.000000000000000e+00, 2.006477358681509e-09, 7.600608043915972e-05, 0.000000000000000e+00, 5.758445159958449e-05, 5.925604875660848e-02, 0.000000000000000e+00, 5.977012273241603e-01, 1.177557785219422e+00, 0.000000000000000e+00, 1.199584158201307e+00, 1.484345681761785e-04, 0.000000000000000e+00, 1.351914636466819e+00, 1.484345681761726e-04, 0.000000000000000e+00, 1.351914636466805e+00, -1.327314594908350e-02, 0.000000000000000e+00, -1.307152467016697e-02, -1.347977378426539e-02, 0.000000000000000e+00, -1.327438961259529e-02, -1.340691883460238e-02, 0.000000000000000e+00, -1.320243410693702e-02, -1.334673064896286e-02, 0.000000000000000e+00, -1.314418322640863e-02, -1.337684053045498e-02, 0.000000000000000e+00, -1.317333048924788e-02, -1.337684053045498e-02, 0.000000000000000e+00, -1.317333048924788e-02, -1.483263707802938e-02, 0.000000000000000e+00, -1.463837931709867e-02, -2.511810525294636e-02, 0.000000000000000e+00, -2.471669983074424e-02, -2.154091266051442e-02, 0.000000000000000e+00, -2.118495927949807e-02, -1.852571468172465e-02, 0.000000000000000e+00, -1.827254545192003e-02, -1.999970722238995e-02, 0.000000000000000e+00, -1.971222529068112e-02, -1.999970722238995e-02, 0.000000000000000e+00, -1.971222529068112e-02, -7.930901935819162e-03, 0.000000000000000e+00, -7.883892405592459e-03, -4.636867282102181e-01, 0.000000000000000e+00, -4.557082548913128e-01, -2.601894015205506e-01, 0.000000000000000e+00, -2.523150718066096e-01, -9.983244094483086e-02, 0.000000000000000e+00, -9.776832692621462e-02, -1.617206607988766e-01, 0.000000000000000e+00, -1.621790293242207e-01, -1.617206607988767e-01, 0.000000000000000e+00, -1.621790293242208e-01, -3.503938761979445e-02, 0.000000000000000e+00, -3.416899844587962e-02, 1.917570627557240e+01, 0.000000000000000e+00, 1.874494589389145e+01, 6.676311904982161e+00, 0.000000000000000e+00, 5.864583484742638e+00, -1.212345584681550e-01, 0.000000000000000e+00, -1.145444751685775e-01, -2.888610347679252e+00, 0.000000000000000e+00, -4.784279023292859e+00, -2.888610347679258e+00, 0.000000000000000e+00, -4.784279023292863e+00, 9.769457007689536e+01, 0.000000000000000e+00, 1.180626174414035e+02, 1.223248491891242e-62, 0.000000000000000e+00, 4.228472121149231e-45, 1.129627997588392e-15, 0.000000000000000e+00, 1.023682016427540e-12, -2.955650236711083e+00, 0.000000000000000e+00, -3.080876342583785e+00, 2.730393811085214e-02, 0.000000000000000e+00, 2.565280179146043e-01, 2.730393811085184e-02, 0.000000000000000e+00, 2.565280179146036e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
