
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_htbs_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_htbs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.084480773799212e+01, -2.084484004631537e+01, -2.084504305203079e+01, -2.084456114058621e+01, -2.084480521128259e+01, -2.084480521128259e+01, -3.445209443211045e+00, -3.445180799154687e+00, -3.444602840432893e+00, -3.446261715246676e+00, -3.445258149381395e+00, -3.445258149381395e+00, -6.855211903838788e-01, -6.853546536719334e-01, -6.829548418161457e-01, -6.878067839483579e-01, -6.861245896799281e-01, -6.861245896799281e-01, -2.172363453044748e-01, -2.166834267537008e-01, -7.931844174415543e-01, -2.001950325370584e-01, -2.075278492711101e-01, -2.075278492711101e-01, -1.009364494008897e-02, -1.062397932832220e-02, -5.861359302438600e-02, -5.829395465871759e-03, -7.325081590875081e-03, -7.325081590875081e-03, -5.020898851996446e+00, -5.020480135227161e+00, -5.020889406906025e+00, -5.020519631946333e+00, -5.020681331101122e+00, -5.020681331101122e+00, -2.060672709085664e+00, -2.071258718282520e+00, -2.059860975612904e+00, -2.069131564860278e+00, -2.066994130252901e+00, -2.066994130252901e+00, -5.770065746865152e-01, -6.024441727796818e-01, -5.373608946338511e-01, -5.367290004326080e-01, -5.833405829069048e-01, -5.833405829069048e-01, -1.515810955227501e-01, -2.480682773372284e-01, -1.407279091300126e-01, -1.812600976788076e+00, -1.715856292559676e-01, -1.715856292559676e-01, -4.497766541329658e-03, -5.698749801072900e-03, -4.357538022585594e-03, -9.509043572406281e-02, -5.249482297479785e-03, -5.249482297479785e-03, -5.507198580164968e-01, -5.535944913461298e-01, -5.526268004049617e-01, -5.517864579584154e-01, -5.522100071378654e-01, -5.522100071378654e-01, -5.339742379804783e-01, -5.021895710034907e-01, -5.124563688901066e-01, -5.214364150750047e-01, -5.168344708958982e-01, -5.168344708958982e-01, -6.326382731277264e-01, -2.808469807866898e-01, -3.038768567541030e-01, -3.585966782042307e-01, -3.262269145091854e-01, -3.262269145091853e-01, -4.631992158271729e-01, -5.610064986269509e-02, -7.648420839348503e-02, -3.377893738929287e-01, -1.206983168390530e-01, -1.206983168390531e-01, -1.424523243919322e-02, -1.523312330620328e-03, -3.197499979622570e-03, -1.135330819454938e-01, -4.857413173248372e-03, -4.857413173248368e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_htbs_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_htbs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.547284886460890e+01, -2.547293469597932e+01, -2.547331448191466e+01, -2.547203754315554e+01, -2.547270687773719e+01, -2.547270687773719e+01, -4.122406463484385e+00, -4.122429939180121e+00, -4.123074448572164e+00, -4.122737719914735e+00, -4.122533985342265e+00, -4.122533985342265e+00, -7.867907996328374e-01, -7.856202525045138e-01, -7.527074018384214e-01, -7.597956818316447e-01, -7.589453927129890e-01, -7.589453927129890e-01, -1.387845282128844e-01, -1.448081101596329e-01, -9.202563131476271e-01, -1.746077648619903e-01, -1.298418448208519e-01, -1.298418448208520e-01, -1.345819325345196e-02, -1.416530577109627e-02, -7.815145736254070e-02, -7.772527287829012e-03, -9.766775454500110e-03, -9.766775454500110e-03, -6.248536516916697e+00, -6.250672109110805e+00, -6.248634366613284e+00, -6.250519610087385e+00, -6.249618585029455e+00, -6.249618585029455e+00, -2.245894955933208e+00, -2.267261263111859e+00, -2.221303348562359e+00, -2.240809419359810e+00, -2.268916248916062e+00, -2.268916248916062e+00, -6.973974958467996e-01, -7.757460460487244e-01, -6.437781358587372e-01, -6.835609976329838e-01, -7.101492347909775e-01, -7.101492347909775e-01, -1.887778278103032e-01, -1.630386034859280e-01, -1.796090295970247e-01, -2.338172356852394e+00, -1.804937598465992e-01, -1.804937598465992e-01, -5.997022055106211e-03, -7.598333068097201e-03, -5.810050696780792e-03, -1.266703303330409e-01, -6.999309729973048e-03, -6.999309729973048e-03, -7.249430426653691e-01, -7.139137857458945e-01, -7.176250320556418e-01, -7.208265762144754e-01, -7.192094939096388e-01, -7.192094939096388e-01, -7.075726036119500e-01, -5.780918103831979e-01, -6.105829025491494e-01, -6.450153906863425e-01, -6.269093987639405e-01, -6.269093987639405e-01, -8.121862241862752e-01, -1.717884325043121e-01, -2.507519245025739e-01, -4.058425363071466e-01, -3.350882584150797e-01, -3.350882584150796e-01, -5.317909356652605e-01, -7.480086648352727e-02, -1.019788223428457e-01, -3.951287519959711e-01, -1.558229458979868e-01, -1.558229458979868e-01, -1.899364325225763e-02, -2.031083107493770e-03, -4.263333306163427e-03, -1.487655596487139e-01, -6.476550897664496e-03, -6.476550897664490e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_htbs_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_htbs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-5.874449400053271e-09, -5.874433600317300e-09, -5.874263355046122e-09, -5.874500482522151e-09, -5.874390452249800e-09, -5.874390452249800e-09, -7.541230338923149e-06, -7.541701882497966e-06, -7.551880456316360e-06, -7.528485275101769e-06, -7.541068541886654e-06, -7.541068541886654e-06, -4.538270537116374e-03, -4.541137434696163e-03, -4.736169083277216e-03, -4.589341742852183e-03, -4.626277352522536e-03, -4.626277352522536e-03, -1.118776260002085e+00, -1.061999354503250e+00, -2.549646154423132e-03, -1.252470699197626e+00, -1.594906180082938e+00, -1.594906180082937e+00, -1.290179560114151e-309, -2.760081542601533e-271, -1.983108149718785e-09, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.804102043888259e-06, -1.806019377918051e-06, -1.804169930939058e-06, -1.805862813082378e-06, -1.805084792351633e-06, -1.805084792351633e-06, -5.812764777214952e-05, -5.655489004525498e-05, -5.928565709769068e-05, -5.779800571297230e-05, -5.678015945980072e-05, -5.678015945980072e-05, -9.788423923445325e-03, -9.170672524863371e-03, -1.277499868192394e-02, -1.433162742536632e-02, -9.507058335634155e-03, -9.507058335634155e-03, -4.490630349762460e-01, -7.613682580746898e-01, -3.500269929601800e-01, -1.121766090083604e-04, -1.253244236964767e+00, -1.253244236964767e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.859273933001473e-02, 0.000000000000000e+00, 0.000000000000000e+00, -1.350280949741637e-02, -1.288790587303427e-02, -1.309723909494110e-02, -1.327655174060567e-02, -1.318631704098382e-02, -1.318631704098382e-02, -1.539419379947231e-02, -1.577684543753809e-02, -1.527075129877087e-02, -1.534543133412284e-02, -1.531758975819131e-02, -1.531758975819131e-02, -7.510294714890524e-03, -4.273773792422786e-01, -2.034589976224132e-01, -6.068779033940123e-02, -1.035040979954881e-01, -1.035040979954881e-01, -2.177437792469551e-02, -4.304006067400212e-11, -3.213588002748779e-05, -7.828128912873415e-02, -4.465514998463085e-01, -4.465514998463099e-01, -3.394801558618623e-171, 0.000000000000000e+00, 0.000000000000000e+00, -2.714856762295227e-01, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
