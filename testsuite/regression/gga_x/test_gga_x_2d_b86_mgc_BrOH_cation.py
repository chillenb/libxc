
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_2d_b86_mgc_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_2d_b86_mgc", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.481785160366060e+02, -1.481791276035940e+02, -1.481820497750026e+02, -1.481729467097643e+02, -1.481776876211985e+02, -1.481776876211985e+02, -9.855781123961608e+00, -9.855785603891780e+00, -9.856248325338605e+00, -9.858226336886050e+00, -9.856140856225348e+00, -9.856140856225348e+00, -9.021763273876502e-01, -9.014906348708538e-01, -8.863199802467290e-01, -8.958582381938154e-01, -8.954055206890368e-01, -8.954055206890368e-01, -1.520478240412053e-01, -1.543001339221415e-01, -1.118216240679394e+00, -1.114128705105540e-01, -1.465642513675087e-01, -1.465642513675087e-01, -4.749016331198947e-03, -4.936770979997626e-03, -2.585593484023296e-02, -3.017588904631118e-03, -3.898642095747193e-03, -3.898642095747193e-03, -1.789360464315261e+01, -1.789779410664267e+01, -1.789381944002218e+01, -1.789751755056869e+01, -1.789571626748056e+01, -1.789571626748056e+01, -4.327287174755764e+00, -4.368606858287745e+00, -4.304223784074003e+00, -4.340578894213099e+00, -4.361434009954909e+00, -4.361434009954909e+00, -7.156567092286190e-01, -7.761366861481434e-01, -6.446720392224767e-01, -6.529436075204023e-01, -7.300613219883922e-01, -7.300613219883924e-01, -7.391294817369382e-02, -1.595488938414584e-01, -6.748543509603387e-02, -4.008442141855191e+00, -8.716616731682622e-02, -8.716616731682622e-02, -2.365278389520812e-03, -2.908196854212642e-03, -1.897372498773410e-03, -4.253649742216204e-02, -2.497421888260380e-03, -2.497421888260381e-03, -6.829634402967251e-01, -6.849313819539510e-01, -6.842868724532137e-01, -6.837068391756449e-01, -6.840001252789707e-01, -6.840001252789707e-01, -6.531294066924683e-01, -5.786638231145649e-01, -6.006260979031810e-01, -6.212410355394579e-01, -6.105928211079605e-01, -6.105928211079605e-01, -8.337851339734994e-01, -2.130314608201803e-01, -2.639171271811367e-01, -3.575968200051311e-01, -3.070398171812255e-01, -3.070398171812254e-01, -5.154536702435994e-01, -2.487155479867569e-02, -3.429984882163869e-02, -3.300958949512897e-01, -5.499379388713282e-02, -5.499379388713282e-02, -6.552778410100709e-03, -8.360483927014173e-04, -1.646075205630538e-03, -5.122018888535212e-02, -2.273474609435989e-03, -2.273474609435988e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_2d_b86_mgc_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_2d_b86_mgc", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.215002031785832e+02, -2.214997758846984e+02, -2.215012907489552e+02, -2.215005659600143e+02, -2.215049648848845e+02, -2.215057761930196e+02, -2.214926776937167e+02, -2.214901166893870e+02, -2.215008419928856e+02, -2.214965194916899e+02, -2.215008419928856e+02, -2.214965194916899e+02, -1.438488462409582e+01, -1.438480621097048e+01, -1.438497994514275e+01, -1.438487331900432e+01, -1.438700762122652e+01, -1.438766592235283e+01, -1.438700305315593e+01, -1.438754852896578e+01, -1.438116256845297e+01, -1.438976995709004e+01, -1.438116256845297e+01, -1.438976995709004e+01, -1.170883297120442e+00, -1.178213145701088e+00, -1.168067129629025e+00, -1.177004445329366e+00, -1.132569495653668e+00, -1.122044574169309e+00, -1.139370475649812e+00, -1.142727451410921e+00, -1.192685484972773e+00, -1.092759217770224e+00, -1.192685484972773e+00, -1.092759217770224e+00, -1.797747688353576e-01, -1.878211235047874e-01, -1.818499408338419e-01, -1.911436091520578e-01, -1.443376958786199e+00, -1.522184468766147e+00, -1.321256724103408e-01, -1.345114334191641e-01, -1.905501601208031e-01, -8.893241020249507e-02, -1.905501601208030e-01, -8.893241020249508e-02, -3.960054490750918e-03, -4.197318025651868e-03, -4.118450054333986e-03, -4.398538093918832e-03, -2.584646056333139e-02, -2.751207308259910e-02, -2.508893332757307e-03, -2.478648038331866e-03, -3.560220481506818e-03, -1.946435219620014e-03, -3.560220481506816e-03, -1.946435219620011e-03, -2.657480664820284e+01, -2.656518601853363e+01, -2.658331276079187e+01, -2.657340188579673e+01, -2.657531452136412e+01, -2.656549359664193e+01, -2.658261289352081e+01, -2.657295703647041e+01, -2.657913642721078e+01, -2.656930808582923e+01, -2.657913642721078e+01, -2.656930808582923e+01, -5.915828758165626e+00, -5.915366286326199e+00, -5.985174461457608e+00, -5.982626700555406e+00, -5.852863720263788e+00, -5.870430680337423e+00, -5.912467857103212e+00, -5.930858449556934e+00, -6.002165273096692e+00, -5.957151754737949e+00, -6.002165273096692e+00, -5.957151754737949e+00, -9.698589322373332e-01, -9.660137481570673e-01, -1.124772403904344e+00, -1.126005398886496e+00, -8.339830245096187e-01, -8.821390536186505e-01, -9.079711529029824e-01, -9.536721373921381e-01, -1.032364969571507e+00, -9.542504648977959e-01, -1.032364969571508e+00, -9.542504648977961e-01, -8.507895827399052e-02, -8.599608526901482e-02, -1.919030975672778e-01, -1.930954421195041e-01, -7.485497718789214e-02, -7.989801723964129e-02, -5.946565321971082e+00, -5.942595497457680e+00, -9.970254561167012e-02, -1.057501388931511e-01, -9.970254561167012e-02, -1.057501388931511e-01, -1.881030456977404e-03, -1.974854102276070e-03, -2.377973456531536e-03, -2.429615968625302e-03, -1.538267343290729e-03, -1.601639232053865e-03, -4.672923359749741e-02, -4.716457885948943e-02, -1.683671952706236e-03, -2.240071876013170e-03, -1.683671952706238e-03, -2.240071876013168e-03, -1.007835188007684e+00, -1.013896209323726e+00, -9.890075539971942e-01, -9.951402909192737e-01, -9.953725605249643e-01, -1.001526511522954e+00, -1.000878176545455e+00, -1.006930640560318e+00, -9.981026060933523e-01, -1.004205006333390e+00, -9.981026060933523e-01, -1.004205006333390e+00, -9.708026154769629e-01, -9.756583732997046e-01, -7.366357445739223e-01, -7.413182239969208e-01, -7.902383727626486e-01, -7.957268646808601e-01, -8.542685112547935e-01, -8.590066237570055e-01, -8.204841645023487e-01, -8.252418379099641e-01, -8.204841645023487e-01, -8.252418379099641e-01, -1.205379216151628e+00, -1.209073726848604e+00, -2.570604605244545e-01, -2.588139947632246e-01, -3.179686283393162e-01, -3.214000533330654e-01, -4.420275328921994e-01, -4.453945839975598e-01, -3.739080075017918e-01, -3.734741000971513e-01, -3.739080075017915e-01, -3.734741000971512e-01, -6.503898997519365e-01, -6.568069504468635e-01, -2.542752698991445e-02, -2.562500974721767e-02, -3.591772034365305e-02, -3.729838353862371e-02, -4.117010387739632e-01, -4.205531344056580e-01, -6.073124164592217e-02, -6.437204711061362e-02, -6.073124164592218e-02, -6.437204711061360e-02, -5.696791666805018e-03, -5.887960055555552e-03, -6.786363974232582e-04, -6.372688959051977e-04, -1.295331944599326e-03, -1.356359862270419e-03, -5.734053496766790e-02, -5.854279838152714e-02, -1.489919894201689e-03, -2.062642153969441e-03, -1.489919894201687e-03, -2.062642153969443e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_2d_b86_mgc_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_2d_b86_mgc", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-3.455827423104925e-09, 0.000000000000000e+00, -3.455847498064037e-09, -3.455778458884564e-09, 0.000000000000000e+00, -3.455811926176207e-09, -3.455610364144786e-09, 0.000000000000000e+00, -3.455574265966975e-09, -3.456163639724810e-09, 0.000000000000000e+00, -3.456279381097634e-09, -3.455798798151285e-09, 0.000000000000000e+00, -3.455989078057106e-09, -3.455798798151285e-09, 0.000000000000000e+00, -3.455989078057106e-09, -1.134637311682399e-05, 0.000000000000000e+00, -1.134822365932169e-05, -1.134636232703699e-05, 0.000000000000000e+00, -1.134838414527603e-05, -1.134782657455216e-05, 0.000000000000000e+00, -1.134791735499875e-05, -1.133719128269511e-05, 0.000000000000000e+00, -1.133777067771048e-05, -1.135430452094134e-05, 0.000000000000000e+00, -1.133806149224395e-05, -1.135430452094134e-05, 0.000000000000000e+00, -1.133806149224395e-05, -1.127832336385926e-02, 0.000000000000000e+00, -1.138379086586348e-02, -1.125087186358499e-02, 0.000000000000000e+00, -1.138069046567660e-02, -1.087648686092801e-02, 0.000000000000000e+00, -1.068075210611391e-02, -1.048338543978745e-02, 0.000000000000000e+00, -1.055016173865913e-02, -1.145540770304777e-02, 0.000000000000000e+00, -9.367812366404627e-03, -1.145540770304777e-02, 0.000000000000000e+00, -9.367812366404627e-03, -5.929944029743129e-01, 0.000000000000000e+00, -5.678860324531282e-01, -5.994439137824503e-01, 0.000000000000000e+00, -5.701101340118402e-01, -6.514960444962643e-03, 0.000000000000000e+00, -6.201300752581988e-03, -8.290960039125815e-01, 0.000000000000000e+00, -8.005446467277876e-01, -5.201452715225282e-01, 0.000000000000000e+00, -1.571434923018449e+00, -5.201452715225281e-01, 0.000000000000000e+00, -1.571434923018449e+00, -8.566437241022410e+02, 0.000000000000000e+00, -7.444983031575324e+02, -7.864371371444220e+02, 0.000000000000000e+00, -6.724227141110605e+02, -1.362302745353811e+01, 0.000000000000000e+00, -1.211545105886017e+01, -2.603444203698300e+03, 0.000000000000000e+00, -2.675955641059261e+03, -1.106660117518520e+03, 0.000000000000000e+00, -5.576706197508946e+03, -1.106660117518521e+03, 0.000000000000000e+00, -5.576706197508953e+03, -1.943563903278680e-06, 0.000000000000000e+00, -1.945628238735259e-06, -1.942398516310108e-06, 0.000000000000000e+00, -1.944501406970202e-06, -1.943488477115671e-06, 0.000000000000000e+00, -1.945581864336732e-06, -1.942488643564887e-06, 0.000000000000000e+00, -1.944558297873545e-06, -1.942975295749536e-06, 0.000000000000000e+00, -1.945063710328969e-06, -1.942975295749536e-06, 0.000000000000000e+00, -1.945063710328969e-06, -1.185005273796235e-04, 0.000000000000000e+00, -1.185236204752624e-04, -1.156532352499034e-04, 0.000000000000000e+00, -1.157681351165354e-04, -1.194531357024520e-04, 0.000000000000000e+00, -1.192301562563103e-04, -1.170020054411561e-04, 0.000000000000000e+00, -1.167256713853056e-04, -1.161071699019876e-04, 0.000000000000000e+00, -1.169727018031606e-04, -1.161071699019876e-04, 0.000000000000000e+00, -1.169727018031606e-04, -2.537359384076886e-02, 0.000000000000000e+00, -2.567978826032791e-02, -2.298817902873363e-02, 0.000000000000000e+00, -2.300908321306363e-02, -3.566710692442212e-02, 0.000000000000000e+00, -3.180066260293008e-02, -4.066658730728465e-02, 0.000000000000000e+00, -3.512619816046464e-02, -2.242811791181318e-02, 0.000000000000000e+00, -2.744011463398666e-02, -2.242811791181319e-02, 0.000000000000000e+00, -2.744011463398665e-02, -1.523739062040715e+00, 0.000000000000000e+00, -1.509626905785326e+00, -3.797285327075064e-01, 0.000000000000000e+00, -3.759804987515981e-01, -1.940682623772093e+00, 0.000000000000000e+00, -1.735886741183972e+00, -1.724960197660770e-04, 0.000000000000000e+00, -1.728517428555444e-04, -1.266308584967777e+00, 0.000000000000000e+00, -1.284634370274573e+00, -1.266308584967777e+00, 0.000000000000000e+00, -1.284634370274573e+00, -5.644239235143574e+03, 0.000000000000000e+00, -4.903146038512992e+03, -3.048672312268890e+03, 0.000000000000000e+00, -2.860422345651526e+03, -1.125952614342512e+04, 0.000000000000000e+00, -1.030056892017138e+04, -4.833255080996818e+00, 0.000000000000000e+00, -4.698734542646010e+00, -8.261373737354863e+03, 0.000000000000000e+00, -4.020481145459161e+03, -8.261373737354854e+03, 0.000000000000000e+00, -4.020481145459165e+03, -3.509814512348636e-02, 0.000000000000000e+00, -3.453829381695223e-02, -3.366279623236591e-02, 0.000000000000000e+00, -3.315749662466659e-02, -3.415292325183691e-02, 0.000000000000000e+00, -3.363238875348649e-02, -3.457494327331439e-02, 0.000000000000000e+00, -3.403223521237560e-02, -3.436302313408995e-02, 0.000000000000000e+00, -3.383123487208801e-02, -3.436302313408995e-02, 0.000000000000000e+00, -3.383123487208801e-02, -4.048001099370868e-02, 0.000000000000000e+00, -3.989243501424005e-02, -3.973860103088277e-02, 0.000000000000000e+00, -3.935569775161400e-02, -4.052475330117518e-02, 0.000000000000000e+00, -4.009972400476942e-02, -4.110491264688393e-02, 0.000000000000000e+00, -4.058982297059814e-02, -4.097968352929702e-02, 0.000000000000000e+00, -4.046119043337788e-02, -4.097968352929702e-02, 0.000000000000000e+00, -4.046119043337788e-02, -1.853435894677666e-02, 0.000000000000000e+00, -1.848106910031310e-02, -2.318976560133774e-01, 0.000000000000000e+00, -2.299709465026242e-01, -1.788118080044420e-01, 0.000000000000000e+00, -1.779747350525902e-01, -1.392223996359379e-01, 0.000000000000000e+00, -1.374098347502062e-01, -1.593557091520109e-01, 0.000000000000000e+00, -1.606965205643285e-01, -1.593557091520109e-01, 0.000000000000000e+00, -1.606965205643285e-01, -5.425030738050348e-02, 0.000000000000000e+00, -5.359944357562292e-02, -1.371775989670991e+01, 0.000000000000000e+00, -1.351972618750422e+01, -7.144434051555667e+00, 0.000000000000000e+00, -6.712635832676721e+00, -2.018994185802635e-01, 0.000000000000000e+00, -1.954669789096907e-01, -3.118767402497940e+00, 0.000000000000000e+00, -3.019157882218708e+00, -3.118767402497937e+00, 0.000000000000000e+00, -3.019157882218708e+00, -3.511277106052049e+02, 0.000000000000000e+00, -3.266591320999347e+02, -9.425453269577242e+04, 0.000000000000000e+00, -1.161962765414777e+05, -1.590723538055452e+04, 0.000000000000000e+00, -1.417627492799345e+04, -3.560544531576344e+00, 0.000000000000000e+00, -3.416955047501579e+00, -1.224398218369469e+04, 0.000000000000000e+00, -4.959704874376729e+03, -1.224398218369470e+04, 0.000000000000000e+00, -4.959704874376752e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
