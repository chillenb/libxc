
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_kt1_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_kt1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.198008436817923e+01, -2.198008162117209e+01, -2.198019107430566e+01, -2.198022946184695e+01, -2.198019203453109e+01, -2.198019203453109e+01, -3.712760521487052e+00, -3.712669403668129e+00, -3.710655462134283e+00, -3.714864103943520e+00, -3.712740805182092e+00, -3.712740805182092e+00, -7.275218992001129e-01, -7.278633941871874e-01, -7.396954274335656e-01, -7.455588130341132e-01, -7.428280545416363e-01, -7.428280545416363e-01, -1.622325395525702e-01, -1.646753462602454e-01, -8.546977887033007e-01, -1.228490343303648e-01, -1.380522945028006e-01, -1.380522945028006e-01, -5.595222996252208e-03, -5.889210150473954e-03, -3.250966694350244e-02, -3.231387608256738e-03, -4.060493611045412e-03, -4.060493611045412e-03, -5.214346129024519e+00, -5.212240567587911e+00, -5.214267220892928e+00, -5.212408094362126e+00, -5.213268417929457e+00, -5.213268417929457e+00, -2.480651719753863e+00, -2.483380242374476e+00, -2.503121989221314e+00, -2.505215970854858e+00, -2.471605348097726e+00, -2.471605348097726e+00, -5.825610072226219e-01, -6.043359260895980e-01, -5.382577335898378e-01, -5.363000376638452e-01, -5.888518699429116e-01, -5.888518699429116e-01, -8.505187062302630e-02, -1.634292053646819e-01, -7.863283919140907e-02, -1.839735098343622e+00, -9.985246934806886e-02, -9.985246934806886e-02, -2.493224866291610e-03, -3.158965478831653e-03, -2.415489074046484e-03, -5.278429764266602e-02, -2.909918643819749e-03, -2.909918643819749e-03, -5.506905770976892e-01, -5.537515867494529e-01, -5.526854680674634e-01, -5.517901355555254e-01, -5.522380829028279e-01, -5.522380829028279e-01, -5.338611698294058e-01, -4.982032515255970e-01, -5.100161849210175e-01, -5.199676936750959e-01, -5.148804488774119e-01, -5.148804488774119e-01, -6.359168332008267e-01, -2.085954385698728e-01, -2.523994461702230e-01, -3.343261212633590e-01, -2.905889683557309e-01, -2.905889683557309e-01, -4.519575909665368e-01, -3.111522152190606e-02, -4.243978393333324e-02, -3.180685018239816e-01, -6.724977707585850e-02, -6.724977707585851e-02, -7.896708453511887e-03, -8.444082799090456e-04, -1.772451619873076e-03, -6.313781386258878e-02, -2.692583637791092e-03, -2.692583637791090e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_kt1_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_kt1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.355256767141094e+01, -2.355271875192379e+01, -2.355327369699727e+01, -2.355102828699825e+01, -2.355222145165493e+01, -2.355222145165493e+01, -3.656057505314805e+00, -3.656197476664407e+00, -3.659520738717709e+00, -3.654433921936327e+00, -3.656313374548355e+00, -3.656313374548355e+00, -7.365439296093337e-01, -7.348536478391525e-01, -6.920314989020178e-01, -6.966475235070643e-01, -6.969464189218039e-01, -6.969464189218039e-01, -2.142875010387403e-01, -2.175319507210858e-01, -8.324978859106499e-01, -1.626930800754870e-01, -1.826885280993009e-01, -1.826885280993009e-01, -7.460195816768054e-03, -7.852165061581451e-03, -4.332120659375651e-02, -4.308496279284345e-03, -5.413955351718333e-03, -5.413955351718333e-03, -5.932560188672078e+00, -5.937732514003142e+00, -5.932783189401663e+00, -5.937349668446448e+00, -5.935191101219809e+00, -5.935191101219809e+00, -1.541726216050549e+00, -1.572954092299716e+00, -1.486547672180026e+00, -1.514550918707278e+00, -1.585264699559219e+00, -1.585264699559219e+00, -6.986088844553896e-01, -7.780888989360115e-01, -6.505477971607683e-01, -6.899159366964784e-01, -7.113519391497246e-01, -7.113519391497246e-01, -1.129572239381015e-01, -2.146015709556950e-01, -1.044997472412249e-01, -2.298179398222054e+00, -1.325586818186264e-01, -1.325586818186264e-01, -3.324291604826055e-03, -4.211936290519490e-03, -3.220648945000437e-03, -7.028473855960414e-02, -3.879883442335385e-03, -3.879883442335385e-03, -7.269466097010443e-01, -7.183353728834685e-01, -7.213467810245000e-01, -7.238484087925416e-01, -7.225953814655035e-01, -7.225953814655035e-01, -7.086790033319836e-01, -5.890428348069398e-01, -6.207087934386124e-01, -6.543256178887364e-01, -6.369925399235661e-01, -6.369925399235661e-01, -8.128671161382974e-01, -2.710173761895947e-01, -3.251715768774284e-01, -4.281861542228398e-01, -3.730613713737247e-01, -3.730613713737247e-01, -5.486307934607632e-01, -4.146389465882089e-02, -5.652934802467328e-02, -4.136334835138365e-01, -8.949478308279178e-02, -8.949478308279180e-02, -1.052862707994896e-02, -1.125877554043110e-03, -2.363266799425403e-03, -8.403944128450239e-02, -3.590105819104484e-03, -3.590105819104481e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_kt1_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_kt1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.456875388159532e-08, -1.456859136131286e-08, -1.456781870682645e-08, -1.457023779814198e-08, -1.456897731227614e-08, -1.456897731227614e-08, -2.072110133584341e-05, -2.072092256256626e-05, -2.071476209220954e-05, -2.070974930737685e-05, -2.071889050874426e-05, -2.071889050874426e-05, -9.991834262785215e-03, -1.002126085716725e-02, -1.075221055002394e-02, -1.052519190872449e-02, -1.057313025723073e-02, -1.057313025723073e-02, -2.973531169936327e-02, -2.971906257281380e-02, -6.380322037026571e-03, -2.991155332910673e-02, -2.985961459039836e-02, -2.985961459039835e-02, -2.999999960784869e-02, -2.999999951870602e-02, -2.999955408869025e-02, -2.999999995637297e-02, -2.999999989122942e-02, -2.999999989122942e-02, -4.125901428976495e-06, -4.122873387391456e-06, -4.125750550578988e-06, -4.123077500452938e-06, -4.124372320638429e-06, -4.124372320638429e-06, -2.053043725929537e-04, -1.994930458438085e-04, -2.096803917115833e-04, -2.043976690865090e-04, -2.000319898913317e-04, -2.000319898913317e-04, -1.380966883379668e-02, -1.139435408104428e-02, -1.613404134715472e-02, -1.497370119220113e-02, -1.333424995459325e-02, -1.333424995459325e-02, -2.997940246690328e-02, -2.973371448261174e-02, -2.998490969293967e-02, -2.216666287359384e-04, -2.996095820775853e-02, -2.996095820775853e-02, -2.999999998453858e-02, -2.999999996015443e-02, -2.999999998637845e-02, -2.999691075464514e-02, -2.999999997131019e-02, -2.999999997131019e-02, -1.366538747140105e-02, -1.383677194084215e-02, -1.377631465177844e-02, -1.372663992836519e-02, -1.375149053841933e-02, -1.375149053841933e-02, -1.448647218275721e-02, -1.896911373636437e-02, -1.765513773950951e-02, -1.636858886382651e-02, -1.702241144575327e-02, -1.702241144575327e-02, -1.009260831240348e-02, -2.933067597602328e-02, -2.864046264879647e-02, -2.621253475233856e-02, -2.771000222510246e-02, -2.771000222510246e-02, -2.116018408683360e-02, -2.999962577937851e-02, -2.999870720394697e-02, -2.667167890997857e-02, -2.999188054322394e-02, -2.999188054322394e-02, -2.999999844425039e-02, -2.999999999979656e-02, -2.999999999605086e-02, -2.999368614516538e-02, -2.999999997896794e-02, -2.999999997896794e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
