
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_pbea_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbea", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.091163214051614e+01, -2.091166128864032e+01, -2.091185567137518e+01, -2.091142067007388e+01, -2.091163938709094e+01, -2.091163938709094e+01, -3.463696115620209e+00, -3.463661560024473e+00, -3.462947589851575e+00, -3.464846690131357e+00, -3.463738179667345e+00, -3.463738179667345e+00, -6.929673230246995e-01, -6.929021542489449e-01, -6.927445533991549e-01, -6.975849883852707e-01, -6.958292911116694e-01, -6.958292911116694e-01, -2.083543197186762e-01, -2.097743301628608e-01, -8.006951915237807e-01, -1.729024022729718e-01, -1.865706116815361e-01, -1.865706116815361e-01, -9.989472012877405e-03, -1.050666642170706e-02, -5.530109552400093e-02, -5.796246962227472e-03, -7.268863521145737e-03, -7.268863521145737e-03, -5.030289392454388e+00, -5.029739785541006e+00, -5.030274538714301e+00, -5.029789190510561e+00, -5.030005067714075e+00, -5.030005067714075e+00, -2.091150473435038e+00, -2.101572712062927e+00, -2.090877059694965e+00, -2.100103184107571e+00, -2.097009582501285e+00, -2.097009582501285e+00, -5.794565386621806e-01, -6.026996260442812e-01, -5.401659480275696e-01, -5.371379044973613e-01, -5.854079773130115e-01, -5.854079773130115e-01, -1.307006743252696e-01, -2.208693714748274e-01, -1.221225087126996e-01, -1.813289191856941e+00, -1.463593245803229e-01, -1.463593245803229e-01, -4.476784990127609e-03, -5.665729707599496e-03, -4.326739248766132e-03, -8.579015425266225e-02, -5.212572394894159e-03, -5.212572394894159e-03, -5.507493155347921e-01, -5.538084111718361e-01, -5.527578154617280e-01, -5.518633486064610e-01, -5.523122685087254e-01, -5.523122685087254e-01, -5.339807704952018e-01, -5.074593550272745e-01, -5.154728225899359e-01, -5.226169236910033e-01, -5.188434258096575e-01, -5.188434258096575e-01, -6.329578439662574e-01, -2.661980456484976e-01, -3.032034644554380e-01, -3.630446045998211e-01, -3.310240196939743e-01, -3.310240196939743e-01, -4.682129535043262e-01, -5.314597614802442e-02, -7.089529709042446e-02, -3.406094274515898e-01, -1.051893318657171e-01, -1.051893318657171e-01, -1.404628960511985e-02, -1.519928099461075e-03, -3.184781006371983e-03, -9.974367792408431e-02, -4.823936527146151e-03, -4.823936527146147e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_pbea_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbea", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.526127674406838e+01, -2.526137103836913e+01, -2.526177374308963e+01, -2.526037119128851e+01, -2.526110843778411e+01, -2.526110843778411e+01, -4.069324522179699e+00, -4.069360750949457e+00, -4.070299286814963e+00, -4.069441902107299e+00, -4.069466055407554e+00, -4.069466055407554e+00, -7.729859131003617e-01, -7.719224456172412e-01, -7.482749057248749e-01, -7.545360657584662e-01, -7.532496289715971e-01, -7.532496289715971e-01, -2.113952558083484e-01, -2.128410863711298e-01, -9.039078552583917e-01, -1.811026763755201e-01, -1.913509636555412e-01, -1.913509636555412e-01, -1.317494638060161e-02, -1.384634738359964e-02, -6.922803915297342e-02, -7.682373823992413e-03, -9.613893900306906e-03, -9.613893900306906e-03, -6.216780979025841e+00, -6.219315833360837e+00, -6.216895302790820e+00, -6.219133071617149e+00, -6.218066703393905e+00, -6.218066703393905e+00, -2.245039976239235e+00, -2.261344287081723e+00, -2.233475965245665e+00, -2.247679914872867e+00, -2.259876744816537e+00, -2.259876744816537e+00, -6.899988645714719e-01, -7.747962827079857e-01, -6.356682987916917e-01, -6.820819068663505e-01, -7.037050262028497e-01, -7.037050262028497e-01, -1.471117440419923e-01, -2.272677670915408e-01, -1.388503021744403e-01, -2.335602825866116e+00, -1.577385023564992e-01, -1.577385023564992e-01, -5.939956762450550e-03, -7.508529222893507e-03, -5.726292805767960e-03, -1.021827108885923e-01, -6.898932323395386e-03, -6.898932323395386e-03, -7.248280997400024e-01, -7.131156114285855e-01, -7.171283602728070e-01, -7.205312645437867e-01, -7.188192864247298e-01, -7.188192864247298e-01, -7.075467779502044e-01, -5.678381526156400e-01, -6.021417192404619e-01, -6.411039075715531e-01, -6.207441124789546e-01, -6.207441124789546e-01, -8.110066415196237e-01, -2.702635151597328e-01, -3.096277100771748e-01, -3.996302234587754e-01, -3.477543238765359e-01, -3.477543238765359e-01, -5.224471083651198e-01, -6.683158664080596e-02, -8.701653084618688e-02, -3.883684735054795e-01, -1.203098741689378e-01, -1.203098741689378e-01, -1.845287230767286e-02, -2.021878174063612e-03, -4.228739718741365e-03, -1.152540697345366e-01, -6.385509718174791e-03, -6.385509718174785e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_pbea_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbea", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-6.635701478492692e-09, -6.635665563258558e-09, -6.635421917111033e-09, -6.635957987577544e-09, -6.635689037500758e-09, -6.635689037500758e-09, -8.785242499421441e-06, -8.785624357046131e-06, -8.793591666259406e-06, -8.773075360901373e-06, -8.784853231135285e-06, -8.784853231135285e-06, -5.384774917379726e-03, -5.382903672162737e-03, -5.260643558871072e-03, -5.123244264358019e-03, -5.179319956634367e-03, -5.179319956634367e-03, -4.924867992281091e-01, -4.927247370629675e-01, -3.039119258917754e-03, -6.706582387620064e-01, -6.234652679029352e-01, -6.234652679029352e-01, -2.133002756655321e+01, -2.117541937166632e+01, -2.702323701226934e+00, -3.357398839114029e+01, -3.235185205818181e+01, -3.235185205818186e+01, -1.983204583783289e-06, -1.984064198027922e-06, -1.983227736377245e-06, -1.983986859516890e-06, -1.983649482094933e-06, -1.983649482094933e-06, -6.293526782859839e-05, -6.185508514545099e-05, -6.257993791769358e-05, -6.163887577573934e-05, -6.249926927929709e-05, -6.249926927929709e-05, -1.123948462771102e-02, -9.600782060150519e-03, -1.485720221861639e-02, -1.523604034229514e-02, -1.080029067358723e-02, -1.080029067358723e-02, -9.148088287363706e-01, -3.051696218751536e-01, -1.045510052669512e+00, -1.171515807620280e-04, -9.708691958650214e-01, -9.708691958650214e-01, -5.310379502456034e+01, -3.883523923476056e+01, -2.030589977085408e+02, -1.940763209611511e+00, -9.495064476727271e+01, -9.495064476727254e+01, -1.372552345761373e-02, -1.346458892303152e-02, -1.355494976091809e-02, -1.363130694787341e-02, -1.359306129193032e-02, -1.359306129193032e-02, -1.551521435050215e-02, -1.875653391315456e-02, -1.788892881215067e-02, -1.702116258729402e-02, -1.749540470933528e-02, -1.749540470933528e-02, -7.895182723545148e-03, -1.785370303945641e-01, -1.247016838303126e-01, -7.088230778157588e-02, -9.700673405506054e-02, -9.700673405506058e-02, -2.584179948457800e-02, -2.620399392060032e+00, -1.975396919267156e+00, -9.318519926087793e-02, -1.743370028725928e+00, -1.743370028725929e+00, -1.301538762351303e+01, -4.615627798361483e+02, -1.304957801886496e+02, -1.843680405512497e+00, -1.221640647953197e+02, -1.221640647953201e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
