
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_ssb_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ssb", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.176864833625940e+01, -2.176867234436994e+01, -2.176885670011777e+01, -2.176849798556480e+01, -2.176867488349487e+01, -2.176867488349487e+01, -3.632367814804648e+00, -3.632304021400620e+00, -3.630921117661645e+00, -3.634019148876276e+00, -3.632379367713926e+00, -3.632379367713926e+00, -7.283469766816408e-01, -7.287651788274393e-01, -7.421829052527785e-01, -7.472072721181692e-01, -7.478097333823273e-01, -7.478097333823273e-01, -2.100052584682322e-01, -2.112060005305433e-01, -8.450924752350236e-01, -1.770350810069128e-01, -2.054676496709287e-01, -2.054676496709286e-01, -1.010385842656117e-02, -1.063899870607762e-02, -5.747322230687896e-02, -5.828704951281100e-03, -8.133412958910350e-03, -8.133412958910350e-03, -5.236030434916138e+00, -5.235780904618697e+00, -5.236028019463928e+00, -5.235807352889281e+00, -5.235897016754655e+00, -5.235897016754655e+00, -2.350551151416671e+00, -2.355974369882774e+00, -2.364949767614268e+00, -2.369618531691417e+00, -2.346736032741255e+00, -2.346736032741255e+00, -5.912656358239713e-01, -6.313023096399267e-01, -5.496064640898745e-01, -5.578557256341128e-01, -5.986095046677148e-01, -5.986095046677149e-01, -1.361731909900912e-01, -2.251543713393329e-01, -1.275383039465131e-01, -1.910733953742145e+00, -1.511371398780534e-01, -1.511371398780534e-01, -4.500293492858774e-03, -5.697859181542400e-03, -4.362933515351895e-03, -8.972919731970022e-02, -5.480324636145822e-03, -5.480324636145823e-03, -5.851678416959823e-01, -5.800371333774900e-01, -5.817358731829386e-01, -5.832342571973409e-01, -5.824750405415335e-01, -5.824750405415335e-01, -5.699016392265976e-01, -5.182660899514410e-01, -5.229476472069000e-01, -5.335203605229100e-01, -5.267033985748744e-01, -5.267033985748744e-01, -6.621648626272838e-01, -2.699755451084029e-01, -3.061929549148043e-01, -3.636131322908812e-01, -3.328762437581905e-01, -3.328762437581905e-01, -4.753923643838920e-01, -5.507939132378536e-02, -7.396545890646851e-02, -3.391607487863053e-01, -1.098788880402908e-01, -1.098788880402908e-01, -1.423339537712122e-02, -1.523251113971621e-03, -3.203123518465236e-03, -1.042271492266516e-01, -5.032938636485673e-03, -5.032938636485667e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_ssb_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ssb", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.572737877480842e+01, -2.572735868353929e+01, -2.572762533209593e+01, -2.572753770367562e+01, -2.572821194374622e+01, -2.572843487748487e+01, -2.572543262115851e+01, -2.572489073963006e+01, -2.572753603582759e+01, -2.572615874870240e+01, -2.572753603582759e+01, -2.572615874870240e+01, -3.907015736926424e+00, -3.908166910141829e+00, -3.907178736236545e+00, -3.908399138784326e+00, -3.911836139410707e+00, -3.913082072663151e+00, -3.904400166268869e+00, -3.905777951921683e+00, -3.905888153728055e+00, -3.909955691816545e+00, -3.905888153728055e+00, -3.909955691816545e+00, -7.110927757653716e-01, -7.189747848257827e-01, -7.084132152178407e-01, -7.179075473221860e-01, -6.783674815673501e-01, -6.697140304167257e-01, -6.778491763027638e-01, -6.807349107078494e-01, -7.330893329089098e-01, -6.407511290436843e-01, -7.330893329089098e-01, -6.407511290436843e-01, -1.993644297134202e-01, -2.047724606759663e-01, -2.004478566952622e-01, -2.068994788921255e-01, -8.039567809884893e-01, -8.615189395506525e-01, -1.727746297728814e-01, -1.744818098688173e-01, -2.075095488812905e-01, -1.463675667788011e-01, -2.075095488812904e-01, -1.463675667788009e-01, -1.300743834535865e-02, -1.381798780654860e-02, -1.362622731881715e-02, -1.459161559698355e-02, -7.160386144815470e-02, -7.509878973792122e-02, -7.830997258400415e-03, -7.700795496075227e-03, -1.160938670118668e-02, -6.612369866511911e-03, -1.160938670118668e-02, -6.612369866511919e-03, -6.576912660001256e+00, -6.575089982010408e+00, -6.584208705385260e+00, -6.582142144055179e+00, -6.577298927433082e+00, -6.575318508144435e+00, -6.583560482244868e+00, -6.581725908391904e+00, -6.580671954963297e+00, -6.578640673838636e+00, -6.580671954963297e+00, -6.578640673838636e+00, -1.795338887195346e+00, -1.795224513779608e+00, -1.817619526407888e+00, -1.816911308674166e+00, -1.760437788815457e+00, -1.770492501759525e+00, -1.779623055657150e+00, -1.789763731212747e+00, -1.833945665929678e+00, -1.810265981683192e+00, -1.833945665929678e+00, -1.810265981683192e+00, -7.110625031511684e-01, -7.096369204881768e-01, -8.475463715547239e-01, -8.481123564642644e-01, -6.292230628455644e-01, -6.612354663173746e-01, -7.370313089880826e-01, -7.605685104068396e-01, -7.546050049098743e-01, -7.138164746917361e-01, -7.546050049098744e-01, -7.138164746917361e-01, -1.481618423475944e-01, -1.484843081232559e-01, -2.162304722837145e-01, -2.169488033336650e-01, -1.389294338596399e-01, -1.431292527858049e-01, -2.535132310636910e+00, -2.534049191532716e+00, -1.546768274434096e-01, -1.533621835233828e-01, -1.546768274434096e-01, -1.533621835233828e-01, -5.876302141880616e-03, -6.106885985015072e-03, -7.534691107826849e-03, -7.648790262850889e-03, -5.632701940613831e-03, -5.964042044649879e-03, -1.067792481004687e-01, -1.075427130415666e-01, -5.754605270542701e-03, -7.897415528320625e-03, -5.754605270542704e-03, -7.897415528320628e-03, -7.828438671094156e-01, -7.857924401016688e-01, -7.794056342030135e-01, -7.824780579729830e-01, -7.813466959147344e-01, -7.843545829713990e-01, -7.822999052517556e-01, -7.852589253960484e-01, -7.818904731612457e-01, -7.848690606299358e-01, -7.818904731612457e-01, -7.848690606299358e-01, -7.606668497087327e-01, -7.631649153255931e-01, -5.451645644374152e-01, -5.481166338936955e-01, -6.043986143982818e-01, -6.088164378752459e-01, -6.890894973317305e-01, -6.920842476427946e-01, -6.457681167899075e-01, -6.488875417017972e-01, -6.457681167899075e-01, -6.488875417017972e-01, -8.863780800379474e-01, -8.882459491057658e-01, -2.574437495934884e-01, -2.585088138230955e-01, -2.963803627140982e-01, -2.986629415881243e-01, -3.855983197056417e-01, -3.879458246614496e-01, -3.348800599582699e-01, -3.347025473717508e-01, -3.348800599582700e-01, -3.347025473717508e-01, -5.025155787784790e-01, -5.069795331654263e-01, -7.058790986192873e-02, -7.101634775019111e-02, -9.104345727995079e-02, -9.339703348321085e-02, -3.809238554264553e-01, -3.887015216614899e-01, -1.222071525973505e-01, -1.234031289260373e-01, -1.222071525973504e-01, -1.234031289260372e-01, -1.857103628792053e-02, -1.923742784783765e-02, -2.028536851206423e-03, -2.033096669581165e-03, -4.126564536710099e-03, -4.388667984079249e-03, -1.178840430823697e-01, -1.192382616118581e-01, -5.449574606069068e-03, -7.240124454696495e-03, -5.449574606069062e-03, -7.240124454696483e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_ssb_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ssb", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.669745329110441e-08, 0.000000000000000e+00, -1.669749618365040e-08, -1.669669706280849e-08, 0.000000000000000e+00, -1.669694712089392e-08, -1.669495796921666e-08, 0.000000000000000e+00, -1.669426466771725e-08, -1.670348057828048e-08, 0.000000000000000e+00, -1.670513300736690e-08, -1.669696791354421e-08, 0.000000000000000e+00, -1.670128890119134e-08, -1.669696791354421e-08, 0.000000000000000e+00, -1.670128890119134e-08, -2.996052387215670e-05, 0.000000000000000e+00, -2.994306797183046e-05, -2.995776282039933e-05, 0.000000000000000e+00, -2.993931175820496e-05, -2.988039139854818e-05, 0.000000000000000e+00, -2.985925120742936e-05, -2.999454345835609e-05, 0.000000000000000e+00, -2.997207060922823e-05, -2.998807423384395e-05, 0.000000000000000e+00, -2.990195864531267e-05, -2.998807423384395e-05, 0.000000000000000e+00, -2.990195864531267e-05, -1.976668100056777e-02, 0.000000000000000e+00, -1.956752020838157e-02, -1.983908978669573e-02, 0.000000000000000e+00, -1.960609400399101e-02, -2.050750217075085e-02, 0.000000000000000e+00, -2.059013309120693e-02, -2.006450715693871e-02, 0.000000000000000e+00, -2.004299815177969e-02, -1.906451898521499e-02, 0.000000000000000e+00, -2.013914604235309e-02, -1.906451898521499e-02, 0.000000000000000e+00, -2.013914604235309e-02, -1.206840991648877e+00, 0.000000000000000e+00, -1.127374547731459e+00, -1.206731797869200e+00, 0.000000000000000e+00, -1.112560128486212e+00, -1.218315287180673e-02, 0.000000000000000e+00, -1.072220278438260e-02, -1.735236804243622e+00, 0.000000000000000e+00, -1.676913307670128e+00, -1.041706173424364e+00, 0.000000000000000e+00, -2.696353937716633e+00, -1.041706173424363e+00, 0.000000000000000e+00, -2.696353937716636e+00, -6.580515295651433e+00, 0.000000000000000e+00, -6.513903777354191e+00, -6.931195476173160e+00, 0.000000000000000e+00, -6.894603930692428e+00, -3.746706679161223e+00, 0.000000000000000e+00, -3.753913203877394e+00, -6.034026706395329e+00, 0.000000000000000e+00, -5.871018160596149e+00, -6.571065649184496e+00, 0.000000000000000e+00, -1.664108328638002e+01, -6.571065649185821e+00, 0.000000000000000e+00, -1.664108328634444e+01, -3.277494406840819e-06, 0.000000000000000e+00, -3.282095264279326e-06, -3.239138062963346e-06, 0.000000000000000e+00, -3.244990955645001e-06, -3.275509148434072e-06, 0.000000000000000e+00, -3.280924526620671e-06, -3.242595452747743e-06, 0.000000000000000e+00, -3.247215611269743e-06, -3.257732798738485e-06, 0.000000000000000e+00, -3.263438451058719e-06, -3.257732798738485e-06, 0.000000000000000e+00, -3.263438451058719e-06, -3.108090841010454e-04, 0.000000000000000e+00, -3.108675660541076e-04, -3.033158920398443e-04, 0.000000000000000e+00, -3.036105438575661e-04, -3.144049081852156e-04, 0.000000000000000e+00, -3.134786158054446e-04, -3.078760323986345e-04, 0.000000000000000e+00, -3.068451721171579e-04, -3.037932704804758e-04, 0.000000000000000e+00, -3.066739711738628e-04, -3.037932704804758e-04, 0.000000000000000e+00, -3.066739711738628e-04, -2.383596249662981e-02, 0.000000000000000e+00, -2.396523819928303e-02, 2.139534472242409e-03, 0.000000000000000e+00, 2.340525652325344e-03, -3.745804399956407e-02, 0.000000000000000e+00, -3.123375666720104e-02, 2.747150423830523e-03, 0.000000000000000e+00, 1.129393035676666e-03, -1.811558522229515e-02, 0.000000000000000e+00, -2.235836013419373e-02, -1.811558522229517e-02, 0.000000000000000e+00, -2.235836013419373e-02, -2.238566665825161e+00, 0.000000000000000e+00, -2.264542701176329e+00, -7.755891421268816e-01, 0.000000000000000e+00, -7.675361714805365e-01, -2.576956174982404e+00, 0.000000000000000e+00, -2.467787907764718e+00, -3.796813451647661e-05, 0.000000000000000e+00, -3.790650282911083e-05, -2.301628931748759e+00, 0.000000000000000e+00, -2.614908797814757e+00, -2.301628931748759e+00, 0.000000000000000e+00, -2.614908797814757e+00, -8.461538982234151e+00, 0.000000000000000e+00, -7.327147403808540e+00, -7.288595779934042e+00, 0.000000000000000e+00, -6.731356094971122e+00, -4.139246173763262e+01, 0.000000000000000e+00, -4.603913946807792e+01, -4.053482141863458e+00, 0.000000000000000e+00, -3.908791899269309e+00, -2.059927196359158e+01, 0.000000000000000e+00, -2.022739089998686e+01, -2.059927196358648e+01, 0.000000000000000e+00, -2.022739089998913e+01, 9.322174014966584e-03, 0.000000000000000e+00, 9.134695629689927e-03, 5.361134970914130e-03, 0.000000000000000e+00, 5.376240418111300e-03, 7.199470406900393e-03, 0.000000000000000e+00, 7.138217155120518e-03, 8.378629922675775e-03, 0.000000000000000e+00, 8.239970033500459e-03, 7.832890909422477e-03, 0.000000000000000e+00, 7.729607305482481e-03, 7.832890909422477e-03, 0.000000000000000e+00, 7.729607305482481e-03, 1.155508179738223e-02, 0.000000000000000e+00, 1.132848193703243e-02, -5.521260707533221e-02, 0.000000000000000e+00, -5.447414642630064e-02, -4.300144437833278e-02, 0.000000000000000e+00, -4.192379841291170e-02, -1.669166073526865e-02, 0.000000000000000e+00, -1.620944882953962e-02, -3.145301188734510e-02, 0.000000000000000e+00, -3.079862686111990e-02, -3.145301188734510e-02, 0.000000000000000e+00, -3.079862686111990e-02, 5.607908820360209e-04, 0.000000000000000e+00, 8.267084759032307e-04, -4.446902884011903e-01, 0.000000000000000e+00, -4.397206742855924e-01, -3.055534288771767e-01, 0.000000000000000e+00, -3.010235091116386e-01, -1.757433124674035e-01, 0.000000000000000e+00, -1.727915067208029e-01, -2.360924159325721e-01, 0.000000000000000e+00, -2.374359665944114e-01, -2.360924159325723e-01, 0.000000000000000e+00, -2.374359665944115e-01, -7.253466151955786e-02, 0.000000000000000e+00, -7.105665306766029e-02, -3.437700040114033e+00, 0.000000000000000e+00, -3.440320982803582e+00, -3.310533313728071e+00, 0.000000000000000e+00, -3.367654663920641e+00, -2.071794457744819e-01, 0.000000000000000e+00, -1.943567990037178e-01, -3.842084345789941e+00, 0.000000000000000e+00, -4.365649377669359e+00, -3.842084345789945e+00, 0.000000000000000e+00, -4.365649377669368e+00, -5.215320714223431e+00, 0.000000000000000e+00, -5.322659023521845e+00, -2.598746480952924e+01, 0.000000000000000e+00, -4.601249911236252e+01, -1.604673643782328e+01, 0.000000000000000e+00, -1.708068675951706e+01, -4.302287576558494e+00, 0.000000000000000e+00, -4.200185368953511e+00, -4.243797663023561e+01, 0.000000000000000e+00, -2.099986053109563e+01, -4.243797663022725e+01, 0.000000000000000e+00, -2.099986053109556e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
