
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_optpbe_vdw_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_optpbe_vdw", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.074697511427834e+01, -2.074700671567377e+01, -2.074720719137137e+01, -2.074673579577350e+01, -2.074697426837528e+01, -2.074697426837528e+01, -3.432053061260046e+00, -3.432021111681756e+00, -3.431366865643669e+00, -3.433156494857253e+00, -3.432097755088947e+00, -3.432097755088947e+00, -6.863258818173215e-01, -6.862884699201010e-01, -6.873511985634186e-01, -6.920410607423932e-01, -6.928891165557769e-01, -6.928891165557769e-01, -2.138429347567158e-01, -2.145686833977564e-01, -7.933707777501510e-01, -1.863144099155437e-01, -2.105436433371921e-01, -2.105436433371920e-01, -1.146758904862596e-02, -1.207450361420661e-02, -6.480088722202604e-02, -6.616627556392360e-03, -9.231911136007779e-03, -9.231911136007780e-03, -4.997749626907357e+00, -4.997380704884639e+00, -4.997742175157211e+00, -4.997416323954027e+00, -4.997557288120952e+00, -4.997557288120952e+00, -2.076118556800831e+00, -2.085938765232485e+00, -2.077159992998771e+00, -2.085795556086509e+00, -2.081102756543646e+00, -2.081102756543646e+00, -5.744805856883968e-01, -6.006440171274720e-01, -5.355854435504356e-01, -5.350301484546208e-01, -5.813384286990926e-01, -5.813384286990926e-01, -1.487782482982666e-01, -2.333218772050344e-01, -1.399093683137159e-01, -1.807407496966244e+00, -1.617631169113119e-01, -1.617631169113119e-01, -5.108780251806896e-03, -6.468075460226934e-03, -4.952497069716095e-03, -1.000007797839860e-01, -6.220782946468484e-03, -6.220782946468487e-03, -5.500511185539364e-01, -5.520016564607834e-01, -5.513222251386528e-01, -5.507501998604680e-01, -5.510361716505886e-01, -5.510361716505886e-01, -5.336537472954662e-01, -5.025579880394346e-01, -5.106721938475056e-01, -5.189830822566427e-01, -5.145025412036051e-01, -5.145025412036051e-01, -6.306231835923067e-01, -2.742883759253272e-01, -3.059698151418921e-01, -3.597331883267967e-01, -3.298298859609635e-01, -3.298298859609635e-01, -4.637304462645077e-01, -6.215539210340424e-02, -8.305193446089167e-02, -3.373291024949419e-01, -1.208360788796323e-01, -1.208360788796323e-01, -1.615108615031910e-02, -1.729286701526686e-03, -3.636274778702439e-03, -1.150705372128933e-01, -5.713025916406379e-03, -5.713025916406374e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_optpbe_vdw_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_optpbe_vdw", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.530340902383955e+01, -2.530337911714366e+01, -2.530352432675034e+01, -2.530346286123786e+01, -2.530386446314203e+01, -2.530395829865507e+01, -2.530256305078609e+01, -2.530229930235749e+01, -2.530347924421080e+01, -2.530294131081158e+01, -2.530347924421080e+01, -2.530294131081158e+01, -4.061925602351729e+00, -4.062125728177618e+00, -4.061970302504623e+00, -4.062178830978175e+00, -4.063139683449434e+00, -4.063470040859703e+00, -4.061768499580229e+00, -4.062106632877492e+00, -4.061145663438249e+00, -4.063218196220408e+00, -4.061145663438249e+00, -4.063218196220408e+00, -7.582092524743452e-01, -7.638131716261773e-01, -7.561526272657023e-01, -7.630103662301285e-01, -7.295111779272370e-01, -7.206831810129430e-01, -7.303482930916183e-01, -7.332113272472982e-01, -7.736387239405786e-01, -6.882904982600508e-01, -7.736387239405786e-01, -6.882904982600508e-01, -1.838201529792002e-01, -1.897734353943705e-01, -1.853413396137800e-01, -1.925769638394080e-01, -8.725520978962400e-01, -9.139548209501241e-01, -1.602442131660538e-01, -1.616554869015177e-01, -1.915679878604836e-01, -1.439365758077958e-01, -1.915679878604835e-01, -1.439365758077957e-01, -1.475603898675899e-02, -1.567411051961847e-02, -1.545654965070891e-02, -1.654960430662092e-02, -7.976759111115148e-02, -8.347929473894375e-02, -8.888054265309326e-03, -8.740381603695670e-03, -1.317205480350905e-02, -7.504572240718018e-03, -1.317205480350905e-02, -7.504572240718018e-03, -6.236151129089665e+00, -6.234595491370195e+00, -6.238839057747895e+00, -6.237192358041272e+00, -6.236299958460855e+00, -6.234684369177087e+00, -6.238606386746220e+00, -6.237043524277648e+00, -6.237528474648339e+00, -6.235900002523199e+00, -6.237528474648339e+00, -6.235900002523199e+00, -2.166977725911969e+00, -2.166859254493489e+00, -2.186294832460562e+00, -2.185619795620082e+00, -2.144993359030137e+00, -2.151206688990475e+00, -2.161596625178736e+00, -2.167993099553092e+00, -2.194382540904907e+00, -2.179000871595818e+00, -2.194382540904907e+00, -2.179000871595818e+00, -6.909763244707464e-01, -6.892330351404591e-01, -7.765250168259326e-01, -7.772112315024627e-01, -6.216220830548524e-01, -6.472869228117547e-01, -6.730349896128225e-01, -6.950151759840498e-01, -7.227635049473672e-01, -6.854761220225337e-01, -7.227635049473671e-01, -6.854761220225337e-01, -1.496715777551193e-01, -1.494884052024174e-01, -1.982743440601267e-01, -1.989006012115302e-01, -1.426863257405104e-01, -1.454848399540604e-01, -2.342143419735142e+00, -2.341143316178565e+00, -1.498556591234896e-01, -1.446436869223592e-01, -1.498556591234896e-01, -1.446436869223592e-01, -6.670079995747963e-03, -6.931805668469314e-03, -8.551712258700913e-03, -8.681234710911942e-03, -6.392434525672046e-03, -6.768032083706568e-03, -1.147569766636288e-01, -1.156190480311451e-01, -6.531384502452977e-03, -8.961433982662290e-03, -6.531384502452979e-03, -8.961433982662293e-03, -7.242284270154549e-01, -7.271408561954616e-01, -7.134752028215522e-01, -7.164584795094180e-01, -7.172109297542398e-01, -7.201935848649843e-01, -7.203591662453042e-01, -7.232749598736977e-01, -7.187818094882813e-01, -7.217299881111224e-01, -7.187818094882813e-01, -7.217299881111224e-01, -7.067915995901572e-01, -7.091438032434166e-01, -5.582617255246494e-01, -5.611516699098027e-01, -5.988449050438769e-01, -6.020605914370107e-01, -6.416062969494251e-01, -6.440507502236081e-01, -6.199285688649462e-01, -6.224432300058210e-01, -6.199285688649462e-01, -6.224432300058210e-01, -8.123517905398093e-01, -8.142131158652038e-01, -2.371139734158707e-01, -2.382249114805971e-01, -2.803900730669651e-01, -2.833449621591795e-01, -3.899972596140026e-01, -3.924428409394962e-01, -3.297312451712099e-01, -3.297785275658734e-01, -3.297312451712099e-01, -3.297785275658734e-01, -5.122311748612184e-01, -5.165857845765697e-01, -7.875071161106570e-02, -7.920934826279727e-02, -1.002280165433692e-01, -1.025776634371205e-01, -3.817398305560151e-01, -3.884478469221358e-01, -1.270895309175661e-01, -1.257685952734935e-01, -1.270895309175661e-01, -1.257685952734935e-01, -2.105468471574659e-02, -2.180768912703705e-02, -2.302867205600172e-03, -2.308015741614095e-03, -4.684243969974541e-03, -4.981671817795423e-03, -1.229582193068273e-01, -1.241102404166370e-01, -6.184720468934701e-03, -8.216155490578315e-03, -6.184720468934694e-03, -8.216155490578306e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_optpbe_vdw_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_optpbe_vdw", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.194640743486095e-08, 0.000000000000000e+00, -1.194647180432645e-08, -1.194628859424831e-08, 0.000000000000000e+00, -1.194638544909578e-08, -1.194583041500295e-08, 0.000000000000000e+00, -1.194575074852925e-08, -1.194717452124592e-08, 0.000000000000000e+00, -1.194746331431613e-08, -1.194634049430417e-08, 0.000000000000000e+00, -1.194672134226702e-08, -1.194634049430417e-08, 0.000000000000000e+00, -1.194672134226702e-08, -1.645195063755945e-05, 0.000000000000000e+00, -1.645536501510733e-05, -1.645206003653836e-05, 0.000000000000000e+00, -1.645576188339609e-05, -1.645761071628092e-05, 0.000000000000000e+00, -1.645868106629760e-05, -1.643736501204510e-05, 0.000000000000000e+00, -1.643921065866244e-05, -1.646196656749993e-05, 0.000000000000000e+00, -1.644279053724792e-05, -1.646196656749993e-05, 0.000000000000000e+00, -1.644279053724792e-05, -1.102039406965559e-02, 0.000000000000000e+00, -1.095986269975131e-02, -1.104959331426958e-02, 0.000000000000000e+00, -1.097559189477212e-02, -1.143334361730679e-02, 0.000000000000000e+00, -1.151984751336385e-02, -1.115423597135578e-02, 0.000000000000000e+00, -1.113125657103565e-02, -1.079043060225719e-02, 0.000000000000000e+00, -1.139987739831310e-02, -1.079043060225719e-02, 0.000000000000000e+00, -1.139987739831310e-02, -1.522289214585834e+00, 0.000000000000000e+00, -1.394682821370326e+00, -1.506525797078859e+00, 0.000000000000000e+00, -1.357549409248832e+00, -6.363485054653819e-03, 0.000000000000000e+00, -5.790948109038947e-03, -2.416842735457633e+00, 0.000000000000000e+00, -2.330288346459730e+00, -1.303544665329875e+00, 0.000000000000000e+00, -3.931901741201753e+00, -1.303544665329875e+00, 0.000000000000000e+00, -3.931901741201757e+00, -9.829456431452817e+00, 0.000000000000000e+00, -9.728970578277115e+00, -1.035463331280812e+01, 0.000000000000000e+00, -1.029892556490427e+01, -5.511512358916514e+00, 0.000000000000000e+00, -5.513892328055454e+00, -9.012968787777330e+00, 0.000000000000000e+00, -8.768530938345506e+00, -9.816296544605288e+00, 0.000000000000000e+00, -2.492245638208238e+01, -9.816296544605311e+00, 0.000000000000000e+00, -2.492245638208244e+01, -3.463362194085430e-06, 0.000000000000000e+00, -3.466609562711981e-06, -3.462571253667045e-06, 0.000000000000000e+00, -3.465845475327464e-06, -3.463296577283703e-06, 0.000000000000000e+00, -3.466567771549959e-06, -3.462618224748444e-06, 0.000000000000000e+00, -3.465873885026205e-06, -3.462974401297357e-06, 0.000000000000000e+00, -3.466229083082923e-06, -3.462974401297357e-06, 0.000000000000000e+00, -3.466229083082923e-06, -1.393166389733482e-04, 0.000000000000000e+00, -1.393424587649866e-04, -1.361236123465552e-04, 0.000000000000000e+00, -1.362520965856739e-04, -1.404374500155431e-04, 0.000000000000000e+00, -1.401704167784007e-04, -1.376751770310569e-04, 0.000000000000000e+00, -1.373525301056507e-04, -1.366081899156261e-04, 0.000000000000000e+00, -1.375982913191115e-04, -1.366081899156261e-04, 0.000000000000000e+00, -1.375982913191115e-04, -2.053039445258590e-02, 0.000000000000000e+00, -2.075530482165311e-02, -1.599884943355728e-02, 0.000000000000000e+00, -1.598332338692913e-02, -2.972855803727725e-02, 0.000000000000000e+00, -2.600336893651983e-02, -2.754640411734351e-02, 0.000000000000000e+00, -2.414361004200702e-02, -1.777954363319954e-02, 0.000000000000000e+00, -2.172211372376542e-02, -1.777954363319954e-02, 0.000000000000000e+00, -2.172211372376542e-02, -3.267398452265001e+00, 0.000000000000000e+00, -3.305794525544310e+00, -1.027579121854635e+00, 0.000000000000000e+00, -1.015389366195088e+00, -3.761278781872432e+00, 0.000000000000000e+00, -3.604734034836132e+00, -1.945110920184260e-04, 0.000000000000000e+00, -1.948695424518672e-04, -3.334834530746388e+00, 0.000000000000000e+00, -3.732251929239387e+00, -3.334834530746388e+00, 0.000000000000000e+00, -3.732251929239387e+00, -1.265490312030592e+01, 0.000000000000000e+00, -1.095324234856247e+01, -1.089475409401263e+01, 0.000000000000000e+00, -1.005892995698723e+01, -6.204578556503891e+01, 0.000000000000000e+00, -6.901226114865754e+01, -5.877296839908772e+00, 0.000000000000000e+00, -5.666039795156221e+00, -3.086044025894332e+01, 0.000000000000000e+00, -3.029805671092904e+01, -3.086044025894322e+01, 0.000000000000000e+00, -3.029805671092901e+01, -2.243252635993285e-02, 0.000000000000000e+00, -2.209547262488160e-02, -2.255366413594971e-02, 0.000000000000000e+00, -2.221682632305811e-02, -2.251110884094793e-02, 0.000000000000000e+00, -2.217396722673468e-02, -2.247628924092167e-02, 0.000000000000000e+00, -2.213952460383449e-02, -2.249380308115891e-02, 0.000000000000000e+00, -2.215682493365816e-02, -2.249380308115891e-02, 0.000000000000000e+00, -2.215682493365816e-02, -2.514454379740146e-02, 0.000000000000000e+00, -2.481582516316072e-02, -3.834373366397884e-02, 0.000000000000000e+00, -3.778073437538115e-02, -3.405576603157300e-02, 0.000000000000000e+00, -3.353481756009831e-02, -3.022685139281487e-02, 0.000000000000000e+00, -2.982425872528022e-02, -3.214470461730549e-02, 0.000000000000000e+00, -3.169630094760238e-02, -3.214470461730549e-02, 0.000000000000000e+00, -3.169630094760238e-02, -1.323523353258673e-02, 0.000000000000000e+00, -1.316650748263731e-02, -5.438413984839254e-01, 0.000000000000000e+00, -5.362276492436633e-01, -3.361785309849565e-01, 0.000000000000000e+00, -3.283385290178566e-01, -1.499244233019368e-01, 0.000000000000000e+00, -1.470093991018284e-01, -2.275272570103202e-01, 0.000000000000000e+00, -2.284787476093372e-01, -2.275272570103204e-01, 0.000000000000000e+00, -2.284787476093373e-01, -5.331226444206932e-02, 0.000000000000000e+00, -5.212056376399628e-02, -5.058961966771256e+00, 0.000000000000000e+00, -5.061995291846420e+00, -4.826552980983137e+00, 0.000000000000000e+00, -4.903416816428522e+00, -1.879170751616445e-01, 0.000000000000000e+00, -1.781814865898325e-01, -5.611912291010571e+00, 0.000000000000000e+00, -6.404168852815513e+00, -5.611912291010574e+00, 0.000000000000000e+00, -6.404168852815516e+00, -7.779166365378504e+00, 0.000000000000000e+00, -7.939435105443741e+00, -3.894840261753768e+01, 0.000000000000000e+00, -6.898933383476195e+01, -2.403404252511844e+01, 0.000000000000000e+00, -2.558475035186613e+01, -6.283917926934960e+00, 0.000000000000000e+00, -6.137128922117649e+00, -6.361471717465152e+01, 0.000000000000000e+00, -3.145803528121164e+01, -6.361471717465162e+01, 0.000000000000000e+00, -3.145803528121174e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
