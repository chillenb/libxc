
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_lambda_oc2_n_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_lambda_oc2_n", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.091738744193067e+01, -2.091741633026469e+01, -2.091761000552223e+01, -2.091717886046431e+01, -2.091739549311506e+01, -2.091739549311506e+01, -3.465243220980558e+00, -3.465208204247867e+00, -3.464483621750694e+00, -3.466401479203610e+00, -3.465284769430272e+00, -3.465284769430272e+00, -6.935552978544492e-01, -6.934974992053179e-01, -6.935119351848715e-01, -6.983507410835008e-01, -6.965889200173653e-01, -6.965889200173653e-01, -2.081986968316145e-01, -2.097007860222984e-01, -8.012951291953128e-01, -1.712421602778119e-01, -1.857400920646129e-01, -1.857400920646129e-01, -8.878434792520741e-03, -9.344437334867013e-03, -5.107452416378697e-02, -5.128876482214740e-03, -6.444230841260338e-03, -6.444230841260338e-03, -5.031113910139871e+00, -5.030553136949437e+00, -5.031098595178475e+00, -5.030603387504926e+00, -5.030823887303719e+00, -5.030823887303719e+00, -2.093555331645627e+00, -2.103957619994192e+00, -2.093346776519179e+00, -2.102559600733690e+00, -2.099367135155146e+00, -2.099367135155146e+00, -5.796646092986241e-01, -6.027226676624221e-01, -5.404011425105292e-01, -5.371745055770969e-01, -5.855852139003281e-01, -5.855852139003281e-01, -1.267923706973293e-01, -2.197048323282026e-01, -1.180527252479538e-01, -1.813351340273075e+00, -1.438840117703971e-01, -1.438840117703971e-01, -3.957417877308399e-03, -5.013908686545289e-03, -3.833656633595420e-03, -8.137163951842993e-02, -4.618375940133618e-03, -4.618375940133618e-03, -5.507520077005766e-01, -5.538277254661551e-01, -5.527696961960314e-01, -5.518703459366556e-01, -5.523215582944272e-01, -5.523215582944272e-01, -5.339813695871101e-01, -5.078766285396888e-01, -5.157235783079428e-01, -5.227199626330693e-01, -5.190148596565657e-01, -5.190148596565657e-01, -6.329866111404141e-01, -2.658561382800904e-01, -3.034401654872056e-01, -3.633927684433907e-01, -3.314353566012670e-01, -3.314353566012670e-01, -4.686089656194962e-01, -4.894526377379819e-02, -6.623342912184384e-02, -3.408371942315680e-01, -1.014635404469326e-01, -1.014635404469327e-01, -1.252651721873622e-02, -1.340388374948470e-03, -2.813421638134295e-03, -9.583629546164879e-02, -4.273471100414374e-03, -4.273471100414370e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_lambda_oc2_n_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_lambda_oc2_n", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.524416765491218e+01, -2.524426254966241e+01, -2.524466686933476e+01, -2.524325540593357e+01, -2.524399747180862e+01, -2.524399747180862e+01, -4.065320999107451e+00, -4.065357981571931e+00, -4.066313897469668e+00, -4.065425602319503e+00, -4.065463339518508e+00, -4.065463339518508e+00, -7.720338742248389e-01, -7.709767668742419e-01, -7.477737466903555e-01, -7.539958065546419e-01, -7.526905201908018e-01, -7.526905201908018e-01, -2.146586787222571e-01, -2.157595052214227e-01, -9.027766687279920e-01, -1.872012946177560e-01, -1.963759426316411e-01, -1.963759426316411e-01, -1.182910266984046e-02, -1.244869129431029e-02, -6.679698885930466e-02, -6.836883394497706e-03, -8.588688585562153e-03, -8.588688585562153e-03, -6.214102993601022e+00, -6.216669316771962e+00, -6.214218614437664e+00, -6.216484167590003e+00, -6.215404762866841e+00, -6.215404762866841e+00, -2.244076533913147e+00, -2.260156134678697e+00, -2.233069626810179e+00, -2.247044281136715e+00, -2.258553602814558e+00, -2.258553602814558e+00, -6.894200337333440e-01, -7.747118683607019e-01, -6.350538289634856e-01, -6.819523120079836e-01, -7.031894186683351e-01, -7.031894186683351e-01, -1.517200204408713e-01, -2.336025926423946e-01, -1.427871339934947e-01, -2.335373962577965e+00, -1.635527180638170e-01, -1.635527180638170e-01, -5.275703714723268e-03, -6.683571093630583e-03, -5.109704381283666e-03, -1.028043236609147e-01, -6.155642699824920e-03, -6.155642699824920e-03, -7.248176425306536e-01, -7.130445428365511e-01, -7.170837876140774e-01, -7.205045958112459e-01, -7.187841572353743e-01, -7.187841572353743e-01, -7.075444144372702e-01, -5.671319041691890e-01, -6.015148948914554e-01, -6.407781429830096e-01, -6.202561651217073e-01, -6.202561651217073e-01, -8.109021874323650e-01, -2.749994164563114e-01, -3.118636879981302e-01, -3.991859469459353e-01, -3.481290565873481e-01, -3.481290565873479e-01, -5.218028612462714e-01, -6.416709768859863e-02, -8.558626719179652e-02, -3.878938545292117e-01, -1.234743799896342e-01, -1.234743799896342e-01, -1.667980153553528e-02, -1.787115076087289e-03, -3.750782217431195e-03, -1.178173136361602e-01, -5.696009797756861e-03, -5.696009797756856e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_lambda_oc2_n_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_lambda_oc2_n", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-6.698447657012234e-09, -6.698410331949363e-09, -6.698161340858719e-09, -6.698718366309181e-09, -6.698438305468281e-09, -6.698438305468281e-09, -8.882328659447751e-06, -8.882707389529093e-06, -8.890591688460925e-06, -8.870144472020947e-06, -8.881926280370404e-06, -8.881926280370404e-06, -5.446694277704653e-03, -5.444526504859487e-03, -5.306365853785467e-03, -5.168801024118238e-03, -5.225970709651103e-03, -5.225970709651103e-03, -4.667471612108877e-01, -4.704941479377170e-01, -3.074973658008615e-03, -5.578874537094137e-01, -5.568686835832750e-01, -5.568686835832750e-01, -1.301879235255637e+00, -1.375530560779165e+00, -7.809262980346132e-01, -1.182498170840234e+00, -1.502588687767130e+00, -1.502588687767134e+00, -1.998484366443998e-06, -1.999264311045719e-06, -1.998504142262000e-06, -1.999192935887196e-06, -1.998888783383474e-06, -1.998888783383474e-06, -6.341843063842513e-05, -6.235473103609646e-05, -6.299753939271464e-05, -6.207521828123511e-05, -6.301995025557331e-05, -6.301995025557331e-05, -1.135598286824311e-02, -9.639159732518079e-03, -1.502027647367429e-02, -1.531574405232934e-02, -1.090597909692186e-02, -1.090597909692186e-02, -5.840206005298973e-01, -2.693637657534445e-01, -6.372761678759151e-01, -1.175963097625803e-04, -7.343077551851814e-01, -7.343077551851814e-01, -1.557987976972056e+00, -1.391718234299011e+00, -8.741067981161709e+00, -9.050407333777243e-01, -4.067708926638055e+00, -4.067708926638045e+00, -1.374580888206435e-02, -1.351612573481639e-02, -1.359613783756332e-02, -1.366340753389711e-02, -1.362976524327249e-02, -1.362976524327249e-02, -1.552629574611598e-02, -1.897425300182991e-02, -1.809084463047553e-02, -1.716264748988713e-02, -1.767184970613050e-02, -1.767184970613050e-02, -7.929414997803842e-03, -1.675891727441672e-01, -1.221714097298450e-01, -7.164503184521887e-02, -9.718675204206481e-02, -9.718675204206489e-02, -2.613926939340772e-02, -7.109093871205057e-01, -7.167136255757420e-01, -9.428780828407211e-02, -1.032454471911478e+00, -1.032454471911479e+00, -1.049749220983786e+00, -6.828472536881509e+00, -3.305013888054801e+00, -1.035726192024107e+00, -5.137819806389941e+00, -5.137819806389953e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
