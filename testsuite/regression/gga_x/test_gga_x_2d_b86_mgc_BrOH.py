
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_2d_b86_mgc_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_2d_b86_mgc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.481728328589839e+02, -1.481733651214089e+02, -1.481761460953125e+02, -1.481674220109887e+02, -1.481731101587552e+02, -1.481731101587552e+02, -9.855130515548316e+00, -9.855139404630664e+00, -9.855987377770091e+00, -9.857632137562156e+00, -9.855197493689124e+00, -9.855197493689124e+00, -8.988774169247526e-01, -8.982760794891269e-01, -8.842179061243901e-01, -8.930156140088177e-01, -8.986545980601542e-01, -8.986545980601542e-01, -1.585552114456935e-01, -1.605062299687942e-01, -1.142812163071526e+00, -1.107943537545244e-01, -1.591292597821811e-01, -1.591292597821811e-01, -6.989210246391040e-03, -7.290220533096878e-03, -3.123615763730375e-02, -3.794994432166472e-03, -7.193784174029877e-03, -7.193784174029877e-03, -1.788200647903885e+01, -1.788606146034808e+01, -1.788243813279087e+01, -1.788559084964538e+01, -1.788406181774899e+01, -1.788406181774899e+01, -4.321959431168794e+00, -4.361986945059326e+00, -4.310240243372144e+00, -4.341373254671426e+00, -4.364387271565096e+00, -4.364387271565096e+00, -7.038636481756688e-01, -7.626282967208510e-01, -6.545943805804010e-01, -6.704615365576170e-01, -7.387345196291298e-01, -7.387345196291298e-01, -7.825546021346888e-02, -1.693078837300779e-01, -7.640136243742437e-02, -4.001362084017842e+00, -9.133449177227121e-02, -9.133449177227121e-02, -3.657308664489012e-03, -4.097752646946638e-03, -2.860294352534635e-03, -4.463055213305032e-02, -3.628743300809856e-03, -3.628743300809856e-03, -6.980424391593852e-01, -6.996594603411076e-01, -6.991187422163553e-01, -6.986672341858163e-01, -6.988953500877367e-01, -6.988953500877367e-01, -6.636219678609131e-01, -5.917349067220826e-01, -6.132658067569948e-01, -6.324090713788808e-01, -6.225312496860023e-01, -6.225312496860023e-01, -8.193203920619199e-01, -2.248598169802395e-01, -2.746840726594883e-01, -3.600412904511212e-01, -3.143218640451603e-01, -3.143218640451602e-01, -5.134908881987580e-01, -2.919736079176972e-02, -4.023942760702871e-02, -3.229984089584829e-01, -5.984880240922857e-02, -5.984880240922858e-02, -8.313537495170201e-03, -1.325034747576981e-03, -2.266621186091256e-03, -5.600503811992556e-02, -3.032268950788466e-03, -3.032268950788461e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_2d_b86_mgc_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_2d_b86_mgc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.214914299599343e+02, -2.214922470463933e+02, -2.214964727941681e+02, -2.214830811353728e+02, -2.214918560108564e+02, -2.214918560108564e+02, -1.438380918285603e+01, -1.438388241736934e+01, -1.438679013767592e+01, -1.438638852650040e+01, -1.438393947511648e+01, -1.438393947511648e+01, -1.163229494687104e+00, -1.161419992630905e+00, -1.118224166030438e+00, -1.131008668780644e+00, -1.162568491777150e+00, -1.162568491777150e+00, -1.920246253079884e-01, -1.943928469708420e-01, -1.534979920253732e+00, -1.329162784356502e-01, -1.927218859372540e-01, -1.927218859372540e-01, -6.396596322353859e-03, -6.705466448445555e-03, -3.350760868805570e-02, -3.230027609230193e-03, -6.613845153314608e-03, -6.613845153314608e-03, -2.655246694131605e+01, -2.656056260419468e+01, -2.655331562023944e+01, -2.655961016914686e+01, -2.655658949929711e+01, -2.655658949929711e+01, -5.904443918746743e+00, -5.970662803248405e+00, -5.875025281785210e+00, -5.926531975554499e+00, -5.987744278443655e+00, -5.987744278443655e+00, -9.521892045723988e-01, -1.107739242415663e+00, -8.781881791041070e-01, -9.552861215726025e-01, -1.011215235392397e+00, -1.011215235392397e+00, -9.148036277307295e-02, -2.047201760945209e-01, -8.942426817864191e-02, -5.934226651688832e+00, -1.084718689099071e-01, -1.084718689099071e-01, -3.106616250488270e-03, -3.517570744088272e-03, -2.433492716957983e-03, -4.993467514884056e-02, -3.107945694888033e-03, -3.107945694888032e-03, -1.036189060443729e+00, -1.018369640241602e+00, -1.024559055479265e+00, -1.029489876261533e+00, -1.027006818681985e+00, -1.027006818681985e+00, -9.882571093678432e-01, -7.620730133546643e-01, -8.165309886793189e-01, -8.753385159544018e-01, -8.444099058705622e-01, -8.444099058705623e-01, -1.188633310203947e+00, -2.723311944626928e-01, -3.330248411055773e-01, -4.483684556544648e-01, -3.837995908389680e-01, -3.837995908389680e-01, -6.535099807204426e-01, -3.089598705937057e-02, -4.427694591612825e-02, -4.087364546986647e-01, -6.908910998806732e-02, -6.908910998806730e-02, -7.700062166231615e-03, -1.057422117602002e-03, -1.866602653259489e-03, -6.457301824107896e-02, -2.576932556064458e-03, -2.576932556064455e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_2d_b86_mgc_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_2d_b86_mgc", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.728116882274252e-09, -1.728098485971454e-09, -1.728001914588626e-09, -1.728303459948631e-09, -1.728107301908736e-09, -1.728107301908736e-09, -5.674720506826714e-06, -5.674741600136911e-06, -5.674286523857022e-06, -5.669753524559397e-06, -5.674624486592655e-06, -5.674624486592655e-06, -5.595760725862267e-03, -5.586779498092598e-03, -5.259543315826167e-03, -5.149021109825985e-03, -5.592648978915983e-03, -5.592648978915983e-03, -3.169884987172151e-01, -3.207468673226934e-01, -3.077540102874789e-03, -4.446796006694533e-01, -3.183267764852139e-01, -3.183267764852139e-01, -1.622090357712049e+02, -1.463517944727946e+02, -4.727299421343228e+00, -7.415452748516784e+02, -1.519969549216967e+02, -1.519969549216967e+02, -9.741748911545645e-07, -9.736189426125151e-07, -9.741150194577015e-07, -9.736827849885195e-07, -9.738940349474121e-07, -9.738940349474121e-07, -5.938413820105826e-05, -5.802548868896709e-05, -5.954699772603600e-05, -5.848781518963054e-05, -5.823730097580479e-05, -5.823730097580479e-05, -1.342207786967221e-02, -1.215488383302142e-02, -1.632359636830167e-02, -1.732390216534881e-02, -1.194664979409258e-02, -1.194664979409258e-02, -7.361901960899000e-01, -1.848261881780253e-01, -8.063646260707233e-01, -8.679891077833023e-05, -6.126953867864445e-01, -6.126953867864445e-01, -8.220027969828656e+02, -6.093279323800763e+02, -1.729208605693830e+03, -2.346428582505341e+00, -8.695515674133236e+02, -8.695515674133236e+02, -1.637027453457223e-02, -1.579170237949835e-02, -1.599445681076005e-02, -1.615504148033389e-02, -1.607442842481367e-02, -1.607442842481367e-02, -1.913708584705263e-02, -1.922263284887534e-02, -1.942915135466591e-02, -1.951761029310355e-02, -1.953060583271636e-02, -1.953060583271635e-02, -9.783411104533374e-03, -1.149604091994250e-01, -9.089166857055701e-02, -6.996692243025851e-02, -8.138460038078267e-02, -8.138460038078268e-02, -2.780964460102506e-02, -5.213674133646160e+00, -2.736931288382675e+00, -1.082965474664066e-01, -1.381114348822614e+00, -1.381114348822615e+00, -1.020435824284957e+02, -1.375958912371247e+04, -3.071372802837259e+03, -1.659307390823684e+00, -1.445025843782886e+03, -1.445025843782891e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
