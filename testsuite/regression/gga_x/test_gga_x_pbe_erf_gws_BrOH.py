
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_pbe_erf_gws_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbe_erf_gws", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.066331120011712e+01, -2.066333511515072e+01, -2.066351817936082e+01, -2.066312504205061e+01, -2.066332317368104e+01, -2.066332317368104e+01, -3.195856949150980e+00, -3.195828493096585e+00, -3.195189619259588e+00, -3.197025923398867e+00, -3.195857081762471e+00, -3.195857081762471e+00, -4.402428606163197e-01, -4.401107350261934e-01, -4.377713794132749e-01, -4.421678202217266e-01, -4.401920313759843e-01, -4.401920313759843e-01, -3.016941865899159e-02, -3.121163889563537e-02, -5.546421846142314e-01, -1.251947020339241e-02, -3.047954273883795e-02, -3.047954273883795e-02, -6.577804467184326e-06, -7.558672595560161e-06, -4.995628531588031e-04, -7.267634208212648e-07, -7.324976209506842e-06, -7.324976209506842e-06, -4.755210707976295e+00, -4.754625892225573e+00, -4.755157175402865e+00, -4.754702338668346e+00, -4.754901735962036e+00, -4.754901735962036e+00, -1.830529882818874e+00, -1.840398699113186e+00, -1.831515694526970e+00, -1.839203716800093e+00, -1.835923185675372e+00, -1.835923185675372e+00, -3.325823321053336e-01, -3.585612336954967e-01, -3.069926060463041e-01, -3.134645213368588e-01, -3.499658752436146e-01, -3.499658752436146e-01, -5.261264005313562e-03, -3.166206632253040e-02, -5.071505349350643e-03, -1.544149883113653e+00, -7.932726421148588e-03, -7.932726421148588e-03, -6.524674541001900e-07, -9.738331330991208e-07, -4.100703439126683e-07, -1.332189549638025e-03, -7.366832572312353e-07, -7.366832572312353e-07, -3.261707309807347e-01, -3.275166805328937e-01, -3.270497790264549e-01, -3.266749494070120e-01, -3.268632135334393e-01, -3.268632135334393e-01, -3.091937620036876e-01, -2.741541276133893e-01, -2.851043227882059e-01, -2.945079329671297e-01, -2.896793598368281e-01, -2.896793598368280e-01, -3.861090574906145e-01, -5.874030911712977e-02, -8.791630930377169e-02, -1.415927111546313e-01, -1.128170051729462e-01, -1.128170051729461e-01, -2.303280082077442e-01, -3.978408555010490e-04, -9.753290247059067e-04, -1.223963159092381e-01, -2.890807332421610e-03, -2.890807332421610e-03, -1.058528624614743e-05, -1.998979325873129e-08, -1.370241009499431e-07, -2.522250273972011e-03, -4.522317513498686e-07, -4.522317513498664e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_pbe_erf_gws_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbe_erf_gws", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.486588522756048e+01, -2.486597187117724e+01, -2.486636630407804e+01, -2.486494733784296e+01, -2.486593085444240e+01, -2.486593085444240e+01, -3.771823296750396e+00, -3.771859563188150e+00, -3.773022881956986e+00, -3.771872928703534e+00, -3.771859105764007e+00, -3.771859105764007e+00, -5.359511945507367e-01, -5.351404345311455e-01, -5.162986061768967e-01, -5.216238592911713e-01, -5.356552043835372e-01, -5.356552043835372e-01, -5.492719470962362e-02, -5.665971208490814e-02, -6.850560825905572e-01, -2.397528667346358e-02, -5.544378206726723e-02, -5.544378206726723e-02, -1.315148848045760e-05, -1.511215069735102e-05, -9.935352201260619e-04, -1.453421998476205e-06, -1.464502280119588e-05, -1.464502280119588e-05, -5.923037480695500e+00, -5.925670686806818e+00, -5.923306697767162e+00, -5.925354155134162e+00, -5.924387599063699e+00, -5.924387599063699e+00, -1.949694771193081e+00, -1.965450717426619e+00, -1.943033912519751e+00, -1.955196841496764e+00, -1.969433229019355e+00, -1.969433229019355e+00, -4.513157300544822e-01, -5.223870452697786e-01, -4.181171949439264e-01, -4.545819802905794e-01, -4.777299262206113e-01, -4.777299262206113e-01, -1.024836779377757e-02, -5.705358263408648e-02, -9.884210466644811e-03, -2.062735064062254e+00, -1.534287910038193e-02, -1.534287910038193e-02, -1.304847312120766e-06, -1.947495518660727e-06, -8.201002932792925e-07, -2.635821984370535e-03, -1.473259275445605e-06, -1.473259275445605e-06, -4.908396587491665e-01, -4.829735980937901e-01, -4.857360562560941e-01, -4.879135717969130e-01, -4.868195700323340e-01, -4.868195700323340e-01, -4.690249122701575e-01, -3.627423544532508e-01, -3.899195202762853e-01, -4.180473812704403e-01, -4.034247875034049e-01, -4.034247875034049e-01, -5.571920480505405e-01, -9.654748117161281e-02, -1.351923464818219e-01, -2.065369256463612e-01, -1.678464103791876e-01, -1.678464103791874e-01, -3.109250576713609e-01, -7.918543263051678e-04, -1.933648521400637e-03, -1.873791214226089e-01, -5.678384049659117e-03, -5.678384049659183e-03, -2.116146753082185e-05, -3.997932374135527e-08, -2.740417021748169e-07, -4.962132911967539e-03, -9.044159517149439e-07, -9.044159517149391e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_pbe_erf_gws_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbe_erf_gws", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-7.036059159376548e-09, -7.036016856773926e-09, -7.035740308663102e-09, -7.036434778960441e-09, -7.036037584598222e-09, -7.036037584598222e-09, -9.277267040789688e-06, -9.277500676241839e-06, -9.282401541401615e-06, -9.266159014711313e-06, -9.277230478271099e-06, -9.277230478271099e-06, -4.281243721805236e-03, -4.277468687936067e-03, -4.108937416524750e-03, -4.030532109065312e-03, -4.279967361122844e-03, -4.279967361122844e-03, -2.338820871841654e-02, -2.448415947610037e-02, -2.526841722007818e-03, -3.865743277353526e-03, -2.371966224172876e-02, -2.371966224172876e-02, 0.000000000000000e+00, -5.588767491619476e-301, -3.056692106240746e-19, 0.000000000000000e+00, -2.498899487138512e-307, -2.498899487138512e-307, -2.058398826505136e-06, -2.058699315757094e-06, -2.058420860782140e-06, -2.058654665273840e-06, -2.058565649896948e-06, -2.058565649896948e-06, -6.729361424192837e-05, -6.615216350898733e-05, -6.705673244681303e-05, -6.617753987899072e-05, -6.679903082756878e-05, -6.679903082756878e-05, -8.448667157236314e-03, -7.463054400363598e-03, -9.880245003648728e-03, -9.857277804161301e-03, -7.651960561619942e-03, -7.651960561619942e-03, -9.559230787773714e-05, -2.203066085056125e-02, -7.714885821703220e-05, -1.155160448827420e-04, -7.449611516808789e-04, -7.449611516808789e-04, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.941426330669391e-10, 0.000000000000000e+00, 0.000000000000000e+00, -9.205723715373471e-03, -9.074281124505800e-03, -9.121090901257728e-03, -9.157636216119147e-03, -9.139365157877277e-03, -9.139365157877277e-03, -1.029613223043776e-02, -1.164354521710819e-02, -1.133648451041580e-02, -1.099727514352955e-02, -1.118978530324379e-02, -1.118978530324378e-02, -6.321422844012430e-03, -3.131482641443810e-02, -3.260423397156295e-02, -2.859826273911575e-02, -3.161074316160629e-02, -3.161074316160627e-02, -1.548572097807742e-02, -3.001435627272220e-22, -1.218789593826091e-12, -3.460245304490389e-02, -1.333966906192544e-06, -1.333966906192573e-06, -1.249550149723268e-240, 0.000000000000000e+00, 0.000000000000000e+00, -3.855876327559711e-07, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
