
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_b88_6311g_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_b88_6311g", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.127029420066595e+01, -2.127031713782183e+01, -2.127049578484122e+01, -2.127015294264529e+01, -2.127032168258071e+01, -2.127032168258071e+01, -3.536129455226724e+00, -3.536085379363053e+00, -3.535153016478450e+00, -3.537445476186081e+00, -3.536161850657101e+00, -3.536161850657101e+00, -7.125795734507907e-01, -7.126537338645299e-01, -7.163707701093062e-01, -7.211765154353823e-01, -7.192445915209030e-01, -7.192445915209030e-01, -2.244401674137785e-01, -2.250608629376548e-01, -8.218906818874044e-01, -1.989610866396453e-01, -2.071941667258372e-01, -2.071941667258372e-01, -6.506828681832735e-02, -6.506622419058833e-02, -1.151307211213993e-01, -5.968754424494061e-02, -5.929186245456588e-02, -5.929186245456586e-02, -5.100386649111326e+00, -5.099449907546357e+00, -5.100355933032917e+00, -5.099528805244078e+00, -5.099905136725357e+00, -5.099905136725357e+00, -2.165265575403801e+00, -2.174988037013780e+00, -2.167471439949440e+00, -2.176051976515948e+00, -2.169565049712668e+00, -2.169565049712668e+00, -5.905255259631740e-01, -6.073072863513495e-01, -5.513414055697008e-01, -5.423734150624808e-01, -5.958417928610413e-01, -5.958417928610413e-01, -1.720230577288744e-01, -2.467476644692027e-01, -1.646854985900942e-01, -1.826519885987746e+00, -1.766223456053894e-01, -1.766223456053894e-01, -5.390719098714153e-02, -5.748978034596559e-02, -3.760749326153960e-02, -1.339342616275815e-01, -4.549029703499068e-02, -4.549029703499070e-02, -5.524363585991009e-01, -5.578794850077081e-01, -5.560536961087282e-01, -5.544694238001391e-01, -5.552691667462538e-01, -5.552691667462538e-01, -5.347997254189358e-01, -5.215715596787669e-01, -5.266507462841298e-01, -5.304590338267100e-01, -5.284241019268968e-01, -5.284241019268968e-01, -6.381652633991863e-01, -2.882066412761441e-01, -3.206127445530424e-01, -3.741171776887574e-01, -3.447217690439304e-01, -3.447217690439304e-01, -4.814403740692901e-01, -1.152152972825380e-01, -1.281761004813096e-01, -3.491327785156038e-01, -1.440341748490730e-01, -1.440341748490730e-01, -7.317455930390730e-02, -3.336782653735360e-02, -4.355098655679417e-02, -1.404932666422895e-01, -4.275602652189367e-02, -4.275602652189364e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_b88_6311g_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_b88_6311g", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.509161068340203e+01, -2.509170526694427e+01, -2.509210788833254e+01, -2.509070106014545e+01, -2.509144074266797e+01, -2.509144074266797e+01, -4.039526995624922e+00, -4.039565384846235e+00, -4.040552786383190e+00, -4.039604353495142e+00, -4.039670400753994e+00, -4.039670400753994e+00, -7.644065332826141e-01, -7.632207568168803e-01, -7.351430516003103e-01, -7.415854741205878e-01, -7.404893485002201e-01, -7.404893485002201e-01, -1.915602043578294e-01, -1.943973003305343e-01, -8.951233898469600e-01, -1.486868088573641e-01, -1.645451369880311e-01, -1.645451369880311e-01, -1.821988320634006e-02, -1.858906372904304e-02, -5.499090140933079e-02, -1.413622504198844e-02, -1.524125693161081e-02, -1.524125693161085e-02, -6.177280257055679e+00, -6.179859356281001e+00, -6.177396329651225e+00, -6.179673148749564e+00, -6.178588449811404e+00, -6.178588449811404e+00, -2.201418179497799e+00, -2.219057802227781e+00, -2.186112174342745e+00, -2.201609521765699e+00, -2.218679481172448e+00, -2.218679481172448e+00, -6.851870613410002e-01, -7.710053764306039e-01, -6.310461158204498e-01, -6.782864308545420e-01, -6.989226297436354e-01, -6.989226297436354e-01, -1.107995721802423e-01, -1.937236376191921e-01, -1.039116811759545e-01, -2.324488255561056e+00, -1.240254801696788e-01, -1.240254801696788e-01, -1.212899683468031e-02, -1.368373902344713e-02, -9.447425863313747e-03, -7.593827839663451e-02, -1.141118229797785e-02, -1.141118229797783e-02, -7.230022938385137e-01, -7.097067883475061e-01, -7.141307111136722e-01, -7.179794786018268e-01, -7.160308106958158e-01, -7.160308106958158e-01, -7.065700967342835e-01, -5.617646518818359e-01, -5.976133019351734e-01, -6.369484623674609e-01, -6.164734310547223e-01, -6.164734310547223e-01, -8.068691819834493e-01, -2.425634562741888e-01, -2.913665422852907e-01, -3.943617623800950e-01, -3.376566048852455e-01, -3.376566048852455e-01, -5.166708428000059e-01, -5.382587487853041e-02, -6.633888646164830e-02, -3.849310003873475e-01, -8.976152321423857e-02, -8.976152321423858e-02, -2.244934011774105e-02, -6.325666839092578e-03, -9.418672739676464e-03, -8.564979287564360e-02, -1.066619940653299e-02, -1.066619940653297e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_b88_6311g_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_b88_6311g", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-8.276036246408567e-09, -8.276004445860912e-09, -8.275737492088861e-09, -8.276213234845666e-09, -8.275981796575060e-09, -8.275981796575060e-09, -1.080776573639580e-05, -1.080830102987886e-05, -1.081963291416265e-05, -1.079175278283176e-05, -1.080736541249178e-05, -1.080736541249178e-05, -6.623481020046880e-03, -6.624134960800361e-03, -6.599420997900607e-03, -6.418984928283123e-03, -6.484536651417559e-03, -6.484536651417559e-03, -7.986320125896588e-01, -7.788601416614573e-01, -3.726928348528194e-03, -1.581813678453433e+00, -1.213200208280418e+00, -1.213200208280418e+00, -1.012758945868516e+04, -8.880466909699264e+03, -5.907223552573164e+01, -4.781417667310364e+04, -2.649396598611382e+04, -2.649396598611384e+04, -2.521058113292230e-06, -2.523478092625193e-06, -2.521142079259098e-06, -2.523278634498159e-06, -2.522298093822295e-06, -2.522298093822295e-06, -7.943981597993826e-05, -7.788912367386545e-05, -7.945534363386093e-05, -7.807740504460648e-05, -7.857917550792821e-05, -7.857917550792821e-05, -1.390214284043191e-02, -1.291216620018481e-02, -1.828764469972674e-02, -2.005060030606243e-02, -1.342789394641531e-02, -1.342789394641531e-02, -3.994129025310032e+00, -6.140788835589577e-01, -5.043142221435773e+00, -1.581758370180547e-04, -2.893121027385805e+00, -2.893121027385805e+00, -1.090690276737766e+05, -5.342038591682482e+04, -1.935609022627860e+05, -1.632241323816628e+01, -9.138443109384454e+04, -9.138443109384456e+04, -1.961065795865602e-02, -1.816839114250203e-02, -1.859468461783184e-02, -1.900530435796584e-02, -1.879250520762022e-02, -1.879250520762022e-02, -2.276411337712897e-02, -2.304840978449041e-02, -2.197115262232869e-02, -2.148477129218286e-02, -2.169272755457529e-02, -2.169272755457529e-02, -1.055127273581894e-02, -2.988270267058460e-01, -1.793469186681525e-01, -8.770001889033663e-02, -1.263969153606049e-01, -1.263969153606049e-01, -3.178296600775325e-02, -6.489330153868448e+01, -2.750172713419848e+01, -1.141547300780259e-01, -8.941623394312824e+00, -8.941623394312824e+00, -3.548545877632810e+03, -3.753855431303914e+06, -3.599968962660073e+05, -1.056830951998734e+01, -1.219960691284600e+05, -1.219960691284604e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
