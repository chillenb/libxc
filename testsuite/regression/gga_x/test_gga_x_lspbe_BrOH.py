
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_lspbe_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_lspbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.094341226665190e+01, -2.094343621542347e+01, -2.094361937702490e+01, -2.094322568822524e+01, -2.094342425845220e+01, -2.094342425845220e+01, -3.472868717301979e+00, -3.472839532463349e+00, -3.472180910135800e+00, -3.474052550391607e+00, -3.472868500600807e+00, -3.472868500600807e+00, -6.979344850990561e-01, -6.979917670788792e-01, -7.014908822887652e-01, -7.057509936949382e-01, -6.979515274482324e-01, -6.979515274482324e-01, -2.166489167690659e-01, -2.175332548453816e-01, -8.124489335541414e-01, -1.789717688037540e-01, -2.168906246650096e-01, -2.168906246650096e-01, -6.698377899797406e-03, -7.628928377359071e-03, -6.525511017490308e-02, -6.248052447245597e-05, -7.537240674614917e-03, -7.537240674614917e-03, -5.032641545944061e+00, -5.032046164771206e+00, -5.032586959819639e+00, -5.032123906964460e+00, -5.032327108183135e+00, -5.032327108183135e+00, -2.112531870054662e+00, -2.122069275916172e+00, -2.114046100792323e+00, -2.121463792670018e+00, -2.117043102762906e+00, -2.117043102762906e+00, -5.738723148255547e-01, -5.954436595939844e-01, -5.466789487717795e-01, -5.476341731201458e-01, -5.915092129822123e-01, -5.915092129822123e-01, -1.423982359206091e-01, -2.366584261135455e-01, -1.399797772463032e-01, -1.811370840821359e+00, -1.581427075417988e-01, -1.581427075417988e-01, -4.836677046639381e-05, -1.884433644295261e-04, -1.150095219407008e-04, -9.188172511885645e-02, -1.778067578940677e-04, -1.778067578940677e-04, -5.586268850051687e-01, -5.614427969021429e-01, -5.604476322060766e-01, -5.596650811552178e-01, -5.600570293307084e-01, -5.600570293307084e-01, -5.397588124017686e-01, -5.165680765327959e-01, -5.232781712074243e-01, -5.292423748074581e-01, -5.260342007280852e-01, -5.260342007280852e-01, -6.253111280361715e-01, -2.815460662065730e-01, -3.150678266777516e-01, -3.666203139794666e-01, -3.388571241705773e-01, -3.388571241705772e-01, -4.688699198672931e-01, -5.954207147354601e-02, -8.272185549895492e-02, -3.364449523105937e-01, -1.170790151382710e-01, -1.170790151382710e-01, -9.113684309236130e-03, 1.478252550697156e-07, 9.004032792337319e-07, -1.116237883104083e-01, -8.546124190262711e-05, -8.546124190262543e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_lspbe_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_lspbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.514940084406978e+01, -2.514948737643491e+01, -2.514988152034727e+01, -2.514846437201493e+01, -2.514944641054802e+01, -2.514944641054802e+01, -4.038805580664523e+00, -4.038843746437465e+00, -4.040059657513391e+00, -4.038821410911608e+00, -4.038842415046787e+00, -4.038842415046787e+00, -7.537206936452877e-01, -7.525977640061329e-01, -7.254884084391721e-01, -7.314523433131229e-01, -7.533120982297447e-01, -7.533120982297447e-01, -2.081334444038304e-01, -2.097590441292986e-01, -9.169624202521631e-01, -1.792511369883065e-01, -2.085895503652468e-01, -2.085895503652468e-01, -2.549880125001958e-02, -2.732559399532476e-02, -9.504559305209212e-02, -9.256333025982556e-04, -2.702990545135249e-02, -2.702990545135249e-02, -6.198129132043912e+00, -6.200794149671865e+00, -6.198401541701183e+00, -6.200473736720300e+00, -6.199495677976814e+00, -6.199495677976814e+00, -2.188767494910651e+00, -2.205338605778463e+00, -2.181099968679704e+00, -2.193908181549760e+00, -2.210351914519180e+00, -2.210351914519180e+00, -6.788662609720560e-01, -7.667221880859437e-01, -6.423175715954056e-01, -6.925780479669500e-01, -7.089799487136511e-01, -7.089799487136511e-01, -1.613775329756584e-01, -2.283958281825219e-01, -1.571684783414576e-01, -2.331822658840824e+00, -1.664165000439710e-01, -1.664165000439710e-01, -7.515674174918208e-04, -2.222243155362112e-03, -1.424161140300310e-03, -1.186497639534569e-01, -2.079118328260492e-03, -2.079118328260490e-03, -7.371382502283247e-01, -7.258847179487066e-01, -7.298532828127512e-01, -7.329698251058774e-01, -7.314056558061661e-01, -7.314056558061660e-01, -7.147055645273516e-01, -5.737758126585161e-01, -6.110178275124148e-01, -6.488938845560898e-01, -6.293930487324151e-01, -6.293930487324152e-01, -8.027140958761841e-01, -2.688817842432693e-01, -3.081164692565528e-01, -3.968774417459807e-01, -3.467417680504726e-01, -3.467417680504726e-01, -5.158010909814994e-01, -9.101834032859693e-02, -1.125036774240419e-01, -3.807610197841590e-01, -1.369863568872813e-01, -1.369863568872813e-01, -3.103917451739120e-02, 5.912480617484013e-07, 2.464655883114582e-06, -1.303741967739667e-01, -1.141219952291624e-03, -1.141219952291606e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_lspbe_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_lspbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-7.026723690272920e-09, -7.026681707372050e-09, -7.026406227925522e-09, -7.027095469773124e-09, -7.026702287083836e-09, -7.026702287083836e-09, -9.469758130563233e-06, -9.469981810412449e-06, -9.474564162013451e-06, -9.458639693052255e-06, -9.469711815556144e-06, -9.469711815556144e-06, -6.015376850619492e-03, -6.016946253245448e-03, -5.966177466385054e-03, -5.821380181053468e-03, -6.016072246771758e-03, -6.016072246771758e-03, -6.284885859920505e-01, -6.248081151625176e-01, -3.212365799017315e-03, -8.926950374892655e-01, -6.278505107511546e-01, -6.278505107511546e-01, 7.397075601096651e+02, 6.677004649297273e+02, 3.203201067350316e+00, 2.853648456734688e+02, 6.951597309085481e+02, 6.951597309085481e+02, -2.074311711213697e-06, -2.074561812797725e-06, -2.074328615725523e-06, -2.074523240446165e-06, -2.074452656355911e-06, -2.074452656355911e-06, -7.251744599352812e-05, -7.118351333935257e-05, -7.235712311636205e-05, -7.132566116292297e-05, -7.179337669469073e-05, -7.179337669469073e-05, -1.257711602978310e-02, -1.027467793979530e-02, -1.533315690785087e-02, -1.453824850244002e-02, -1.105574652909912e-02, -1.105574652909912e-02, -9.108330140159283e-01, -3.679972294463011e-01, -1.061854022906498e+00, -1.199988468549221e-04, -1.073682172264801e+00, -1.073682172264801e+00, 2.670388014306685e+02, 5.139096801015681e+02, 1.331319670085566e+03, -5.988578131007126e-01, 7.716656743002351e+02, 7.716656743002344e+02, -1.303618157633942e-02, -1.296231687334773e-02, -1.298871260318364e-02, -1.300937589948526e-02, -1.299908217564947e-02, -1.299908217564947e-02, -1.491973017841295e-02, -1.980836172915868e-02, -1.833041857023051e-02, -1.700925114932113e-02, -1.769462568130154e-02, -1.769462568130154e-02, -8.465788011417731e-03, -2.120640864250885e-01, -1.449304361915474e-01, -7.893268718782802e-02, -1.097103735370856e-01, -1.097103735370856e-01, -2.931114571853910e-02, 5.287421661540082e+00, 4.227120190205947e-01, -1.090829182814598e-01, -1.436186240087696e+00, -1.436186240087698e+00, 4.545422844117858e+02, -6.559539545378606e+00, -2.848638553764194e+00, -1.772876562524551e+00, 8.470773449358927e+02, 8.470773449358826e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
