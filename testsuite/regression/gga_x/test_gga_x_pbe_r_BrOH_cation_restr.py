
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_pbe_r_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbe_r", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.097463635083446e+01, -2.097466223961389e+01, -2.097484769740657e+01, -2.097446108009743e+01, -2.097465365069359e+01, -2.097465365069359e+01, -3.482148167301106e+00, -3.482106936592279e+00, -3.481239466244086e+00, -3.483409394351311e+00, -3.482182672947664e+00, -3.482182672947664e+00, -7.016900662087107e-01, -7.017953415602827e-01, -7.068252104875221e-01, -7.114785982495317e-01, -7.095216791087879e-01, -7.095216791087879e-01, -2.253638669313274e-01, -2.257534340638530e-01, -8.090775442721274e-01, -1.992553272051544e-01, -2.086368685378572e-01, -2.086368685378573e-01, -1.254626436898706e-02, -1.320329835410520e-02, -7.075326159010152e-02, -7.251704027835721e-03, -9.109650774621820e-03, -9.109650774621820e-03, -5.038787188226895e+00, -5.038111753071587e+00, -5.038767130671336e+00, -5.038170676119051e+00, -5.038438621511308e+00, -5.038438621511308e+00, -2.137703987307474e+00, -2.146799994725541e+00, -2.141092481119526e+00, -2.149084448596576e+00, -2.141124201519225e+00, -2.141124201519225e+00, -5.818328044636448e-01, -6.029168616159961e-01, -5.429554937310883e-01, -5.374920830511640e-01, -5.873756987653360e-01, -5.873756987653360e-01, -1.607436300865636e-01, -2.483817785153013e-01, -1.512084430553861e-01, -1.813872786248663e+00, -1.737946124016521e-01, -1.737946124016521e-01, -5.595838284412938e-03, -7.089084247776106e-03, -5.419671860931311e-03, -1.087802050158264e-01, -6.529061472740467e-03, -6.529061472740467e-03, -5.507735523793311e-01, -5.539898913479523e-01, -5.528677705776904e-01, -5.519273068331944e-01, -5.523977100964019e-01, -5.523977100964019e-01, -5.339860966100185e-01, -5.135485277715076e-01, -5.185231978687554e-01, -5.236990688510088e-01, -5.207734518526339e-01, -5.207734518526339e-01, -6.332309311774776e-01, -2.897004700072339e-01, -3.199331698290748e-01, -3.686209456744813e-01, -3.413464171287915e-01, -3.413464171287915e-01, -4.740777992463969e-01, -6.797708090229802e-02, -9.060479755868946e-02, -3.436525002927348e-01, -1.307270358627271e-01, -1.307270358627271e-01, -1.769014922932311e-02, -1.895579379940115e-03, -3.978398082857939e-03, -1.246999460365105e-01, -6.041553043371280e-03, -6.041553043371275e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_pbe_r_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbe_r", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.503665940895949e+01, -2.503676458832437e+01, -2.503719702374697e+01, -2.503563289154170e+01, -2.503645746433256e+01, -2.503645746433256e+01, -4.006221209437703e+00, -4.006278359080103e+00, -4.007698145034187e+00, -4.005991022018650e+00, -4.006386304947270e+00, -4.006386304947270e+00, -7.459295812544472e-01, -7.444171207591236e-01, -7.081165482779768e-01, -7.147453868371302e-01, -7.139391059643699e-01, -7.139391059643699e-01, -1.837977070131434e-01, -1.855241310315806e-01, -8.772319969817730e-01, -1.644238048449608e-01, -1.673802944969964e-01, -1.673802944969964e-01, -1.668886256794641e-02, -1.755708732633082e-02, -8.881666038596087e-02, -9.661672745117223e-03, -1.212996317538709e-02, -1.212996317538709e-02, -6.185550277848541e+00, -6.188527363230222e+00, -6.185682879568961e+00, -6.188311131596437e+00, -6.187061728804992e+00, -6.187061728804992e+00, -2.114828624554879e+00, -2.133902366653121e+00, -2.095428838528496e+00, -2.112107909200487e+00, -2.134963857194261e+00, -2.134963857194261e+00, -6.817013973942555e-01, -7.739598098864248e-01, -6.261031834634908e-01, -6.807368781666915e-01, -6.967384907505304e-01, -6.967384907505304e-01, -1.577208661520488e-01, -1.997471185357652e-01, -1.523607244095713e-01, -2.333350858773960e+00, -1.525668150713062e-01, -1.525668150713062e-01, -7.457285607719973e-03, -9.444748224759625e-03, -7.217982179140035e-03, -1.232572323698262e-01, -8.695579269638872e-03, -8.695579269638872e-03, -7.247324154160503e-01, -7.124155505569668e-01, -7.167007384588532e-01, -7.202808445326434e-01, -7.184858768795601e-01, -7.184858768795601e-01, -7.075256055511280e-01, -5.488187187147401e-01, -5.918066826907229e-01, -6.371648170976191e-01, -6.139576499367160e-01, -6.139576499367160e-01, -8.099589641581277e-01, -2.345518229142885e-01, -2.749836327533622e-01, -3.828698159278395e-01, -3.212427736572953e-01, -3.212427736572953e-01, -5.042422907236904e-01, -8.596805255663802e-02, -1.096605154423041e-01, -3.784913738536413e-01, -1.337895967074761e-01, -1.337895967074760e-01, -2.348744127917592e-02, -2.527127336801336e-03, -5.302525086100011e-03, -1.310554949044233e-01, -8.046645643689669e-03, -8.046645643689660e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_pbe_r_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbe_r", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-7.417085809485262e-09, -7.417023628323001e-09, -7.416688677851767e-09, -7.417615025936568e-09, -7.417137944835138e-09, -7.417137944835138e-09, -1.018889893324536e-05, -1.018907494385299e-05, -1.019214264059776e-05, -1.017907186501894e-05, -1.018812754784609e-05, -1.018812754784609e-05, -6.764639931226498e-03, -6.777380769298860e-03, -7.028321036460269e-03, -6.824857125567511e-03, -6.887739662269712e-03, -6.887739662269712e-03, -8.653304057936164e-01, -8.510582994012734e-01, -3.741915638596558e-03, -1.373635865332287e+00, -1.203300810856074e+00, -1.203300810856073e+00, -5.835284302206327e+00, -6.163479585176915e+00, -3.310494643646364e+00, -5.308340233225540e+00, -6.741490420843255e+00, -6.741490420843274e+00, -2.155369092936554e-06, -2.154973847807837e-06, -2.155339337498717e-06, -2.154990595177436e-06, -2.155175205775580e-06, -2.155175205775580e-06, -8.521479660689492e-05, -8.333067193660777e-05, -8.572184675034255e-05, -8.405152431119313e-05, -8.391760117385426e-05, -8.391760117385426e-05, -1.279946712008170e-02, -9.976144106218289e-03, -1.719148635547364e-02, -1.604795687539719e-02, -1.214826026587388e-02, -1.214826026587388e-02, -1.906840295520075e+00, -5.966258698011304e-01, -2.147312396416624e+00, -1.214744869076479e-04, -2.054503644867414e+00, -2.054503644867414e+00, -6.995533570998590e+00, -6.247383321023285e+00, -3.922485496451079e+01, -3.464041729987932e+00, -1.825372196855808e+01, -1.825372196855803e+01, -1.391037291807723e-02, -1.396602414276599e-02, -1.394644038954030e-02, -1.393065523606821e-02, -1.393860780348095e-02, -1.393860780348095e-02, -1.561429220466329e-02, -2.343614046198169e-02, -2.091445699546771e-02, -1.866526282305205e-02, -1.980026970445896e-02, -1.980026970445896e-02, -8.233595993456277e-03, -3.199211217250283e-01, -1.997390502760441e-01, -9.119558717631153e-02, -1.387424292325173e-01, -1.387424292325173e-01, -3.244572466975592e-02, -3.035492494818825e+00, -2.931555282705824e+00, -1.129258910038032e-01, -3.541637875951311e+00, -3.541637875951314e+00, -4.696847965555817e+00, -3.067197848277899e+01, -1.484178420063363e+01, -3.659930189534939e+00, -2.305674936435128e+01, -2.305674936435134e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
