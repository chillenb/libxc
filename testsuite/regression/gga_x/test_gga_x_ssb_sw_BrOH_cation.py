
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_ssb_sw_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ssb_sw", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.106927495537979e+01, -2.106931823857978e+01, -2.106955363115574e+01, -2.106890881704037e+01, -2.106924056561400e+01, -2.106924056561400e+01, -3.469320567909179e+00, -3.469295101247589e+00, -3.468793145756475e+00, -3.470327036428217e+00, -3.469374037356761e+00, -3.469374037356761e+00, -6.935811109740871e-01, -6.936116450947885e-01, -6.967741049681397e-01, -7.014265811473779e-01, -7.019806440821063e-01, -7.019806440821063e-01, -2.158475765181455e-01, -2.169411203933372e-01, -8.013222525924064e-01, -1.823748148424402e-01, -2.111036377307988e-01, -2.111036377307987e-01, -1.010580241760335e-02, -1.064133754419128e-02, -5.774708589773858e-02, -5.829053992334686e-03, -8.134521196728261e-03, -8.134521196728261e-03, -5.107060102292406e+00, -5.107516232411804e+00, -5.107086796314965e+00, -5.107489280081982e+00, -5.107287379885951e+00, -5.107287379885951e+00, -2.105994972118914e+00, -2.115434584271764e+00, -2.108187286887430e+00, -2.116516517771987e+00, -2.110174367877812e+00, -2.110174367877812e+00, -5.817658597642867e-01, -6.226257191203934e-01, -5.415256280044871e-01, -5.519798435253300e-01, -5.897703269020863e-01, -5.897703269020864e-01, -1.390855315693680e-01, -2.315359275520434e-01, -1.300763857937567e-01, -1.874994072775518e+00, -1.553327448330638e-01, -1.553327448330638e-01, -4.500476702903541e-03, -5.698213869891251e-03, -4.363342964487405e-03, -9.083361161417688e-02, -5.480900081677148e-03, -5.480900081677148e-03, -5.754951754669029e-01, -5.725748415836942e-01, -5.735731819695183e-01, -5.744227480659130e-01, -5.739948652606183e-01, -5.739948652606183e-01, -5.598113720033799e-01, -5.077558345495949e-01, -5.159468053744586e-01, -5.291455838368271e-01, -5.214568956725518e-01, -5.214568956725518e-01, -6.528512569503430e-01, -2.762505382026113e-01, -3.108581507292960e-01, -3.639453972183869e-01, -3.352802866169635e-01, -3.352802866169634e-01, -4.686192394770676e-01, -5.530849055629625e-02, -7.451946803698603e-02, -3.405571261912997e-01, -1.119961582580090e-01, -1.119961582580090e-01, -1.423826287397350e-02, -1.523264839908410e-03, -3.203219791214341e-03, -1.060496692945969e-01, -5.033418349207850e-03, -5.033418349207845e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_ssb_sw_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ssb_sw", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.670189875565241e+01, -2.670187079683412e+01, -2.670206556796953e+01, -2.670199193341007e+01, -2.670250853558777e+01, -2.670265206217078e+01, -2.670062691556852e+01, -2.670025302081896e+01, -2.670200282591503e+01, -2.670114531839310e+01, -2.670200282591503e+01, -2.670114531839310e+01, -4.194923622646476e+00, -4.195572223579300e+00, -4.195025126789550e+00, -4.195710534177051e+00, -4.197859432041986e+00, -4.198627217308460e+00, -4.193623820719849e+00, -4.194459187772621e+00, -4.193943967176803e+00, -4.197040572227079e+00, -4.193943967176803e+00, -4.197040572227079e+00, -7.511790308077441e-01, -7.588661819469700e-01, -7.485228249075495e-01, -7.577976093684539e-01, -7.189178455620111e-01, -7.110227898141560e-01, -7.200173490135657e-01, -7.226267870933194e-01, -7.727159387656771e-01, -6.930324822402367e-01, -7.727159387656771e-01, -6.930324822402367e-01, -2.012551803451935e-01, -2.055125106327248e-01, -2.016524140232516e-01, -2.068461328146448e-01, -8.656863817437876e-01, -9.205687798296311e-01, -1.810530474545901e-01, -1.827199865679581e-01, -2.091484072590869e-01, -1.547621660270107e-01, -2.091484072590869e-01, -1.547621660270106e-01, -1.301460412732709e-02, -1.382654018142476e-02, -1.363468831373278e-02, -1.460198582080101e-02, -7.257423602202623e-02, -7.622860947941217e-02, -7.832484400348757e-03, -7.702189824501425e-03, -1.161447128339320e-02, -6.613860632520663e-03, -1.161447128339320e-02, -6.613860632520670e-03, -6.648990003370662e+00, -6.647293171612286e+00, -6.652782180190965e+00, -6.650958612646034e+00, -6.649196758005652e+00, -6.647416220641073e+00, -6.652451246308585e+00, -6.650746532430676e+00, -6.650939847978521e+00, -6.649138371384007e+00, -6.650939847978521e+00, -6.649138371384007e+00, -2.139120024001563e+00, -2.139006830513069e+00, -2.156914111844746e+00, -2.156275472321280e+00, -2.121882707722329e+00, -2.126542457411077e+00, -2.136621200500241e+00, -2.141628205513678e+00, -2.163459172037446e+00, -2.149965093075222e+00, -2.163459172037446e+00, -2.149965093075222e+00, -7.216700345117533e-01, -7.199895486221110e-01, -8.272570275207811e-01, -8.277680709261475e-01, -6.404898067077279e-01, -6.717909810469387e-01, -7.186390340662024e-01, -7.422353259168678e-01, -7.612198235507499e-01, -7.200980797087759e-01, -7.612198235507500e-01, -7.200980797087760e-01, -1.561774009291272e-01, -1.566018533075932e-01, -2.236701613075911e-01, -2.243029413120161e-01, -1.459741019701153e-01, -1.507082352049065e-01, -2.493520026292122e+00, -2.492418662884394e+00, -1.636102199262811e-01, -1.617476315127654e-01, -1.636102199262811e-01, -1.617476315127654e-01, -5.877043798515388e-03, -6.107660474577095e-03, -7.536147690849488e-03, -7.650254290714650e-03, -5.634157279223248e-03, -5.965866011077002e-03, -1.105347149100484e-01, -1.113065244923528e-01, -5.755697244242172e-03, -7.900224138772458e-03, -5.755697244242177e-03, -7.900224138772453e-03, -7.653988190219720e-01, -7.683655656061176e-01, -7.597158293011470e-01, -7.627550837163326e-01, -7.619442636289588e-01, -7.649595982601001e-01, -7.635830004197232e-01, -7.665540045099799e-01, -7.627845189803140e-01, -7.657755935984497e-01, -7.627845189803140e-01, -7.657755935984497e-01, -7.449771763716243e-01, -7.474406539087773e-01, -5.545289096551431e-01, -5.578303853206833e-01, -6.148773582797828e-01, -6.191401963621671e-01, -6.823188631745108e-01, -6.850841941447690e-01, -6.497132048795520e-01, -6.526781322517962e-01, -6.497132048795520e-01, -6.526781322517962e-01, -8.661820840413500e-01, -8.678550697994628e-01, -2.604232823195097e-01, -2.612960675206275e-01, -2.936555809586461e-01, -2.955673483273162e-01, -3.848874941224893e-01, -3.874190242677227e-01, -3.296388076476392e-01, -3.294814603458499e-01, -3.296388076476390e-01, -3.294814603458497e-01, -5.079069252855951e-01, -5.129117459339272e-01, -7.147318953495550e-02, -7.191903425428478e-02, -9.300051925131324e-02, -9.554545707541875e-02, -3.835229444420283e-01, -3.915921878807543e-01, -1.280045635073343e-01, -1.298710658084751e-01, -1.280045635073342e-01, -1.298710658084751e-01, -1.858965994192186e-02, -1.925835426074822e-02, -2.028588185137451e-03, -2.033166376853959e-03, -4.126916618752080e-03, -4.389105980308141e-03, -1.233734414523581e-01, -1.248647219003787e-01, -5.450908630317915e-03, -7.242327491677247e-03, -5.450908630317909e-03, -7.242327491677238e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_ssb_sw_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ssb_sw", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-7.040951983513966e-09, 0.000000000000000e+00, -7.040965373345803e-09, -7.040574222346656e-09, 0.000000000000000e+00, -7.040691107774927e-09, -7.039731288117234e-09, 0.000000000000000e+00, -7.039380898023500e-09, -7.043988218677968e-09, 0.000000000000000e+00, -7.044809757341251e-09, -7.040708218582050e-09, 0.000000000000000e+00, -7.042908421547150e-09, -7.040708218582050e-09, 0.000000000000000e+00, -7.042908421547150e-09, -1.378637686524604e-05, 0.000000000000000e+00, -1.377349414663214e-05, -1.378449883526083e-05, 0.000000000000000e+00, -1.377084970931282e-05, -1.373105523020598e-05, 0.000000000000000e+00, -1.371665405244498e-05, -1.381451228318168e-05, 0.000000000000000e+00, -1.379883410894457e-05, -1.380097161726262e-05, 0.000000000000000e+00, -1.375085004122070e-05, -1.380097161726262e-05, 0.000000000000000e+00, -1.375085004122070e-05, -1.220526898245043e-02, 0.000000000000000e+00, -1.200700740598780e-02, -1.227359573493429e-02, 0.000000000000000e+00, -1.204163687297007e-02, -1.282945352823623e-02, 0.000000000000000e+00, -1.284748975102262e-02, -1.248505890310273e-02, 0.000000000000000e+00, -1.248177025549536e-02, -1.154712773660924e-02, 0.000000000000000e+00, -1.191684900036998e-02, -1.154712773660924e-02, 0.000000000000000e+00, -1.191684900036998e-02, -1.286816351379881e+00, 0.000000000000000e+00, -1.214415489590237e+00, -1.295675042470972e+00, 0.000000000000000e+00, -1.207157363739355e+00, -7.010360010229409e-03, 0.000000000000000e+00, -5.926850379106079e-03, -1.689192181865249e+00, 0.000000000000000e+00, -1.635874958106717e+00, -1.110604698998093e+00, 0.000000000000000e+00, -2.414454457364114e+00, -1.110604698998093e+00, 0.000000000000000e+00, -2.414454457364116e+00, -4.996189348295820e+00, 0.000000000000000e+00, -4.946019987029576e+00, -5.264123212138600e+00, 0.000000000000000e+00, -5.237069141129840e+00, -2.906048278694552e+00, 0.000000000000000e+00, -2.920286855911067e+00, -4.576732142072532e+00, 0.000000000000000e+00, -4.452502266426313e+00, -4.987983624625731e+00, 0.000000000000000e+00, -1.265668469263130e+01, -4.987983624626394e+00, 0.000000000000000e+00, -1.265668469260017e+01, -1.303786056826849e-06, 0.000000000000000e+00, -1.305663071979358e-06, -1.287417339595483e-06, 0.000000000000000e+00, -1.289824729343050e-06, -1.302937818283472e-06, 0.000000000000000e+00, -1.305162832845805e-06, -1.288890569062612e-06, 0.000000000000000e+00, -1.290772965039546e-06, -1.295343370577906e-06, 0.000000000000000e+00, -1.297690888752661e-06, -1.295343370577906e-06, 0.000000000000000e+00, -1.297690888752661e-06, -1.550021045141662e-04, 0.000000000000000e+00, -1.550297002515384e-04, -1.518350553202640e-04, 0.000000000000000e+00, -1.519697531532731e-04, -1.549852860806147e-04, 0.000000000000000e+00, -1.550909276266552e-04, -1.523817140825066e-04, 0.000000000000000e+00, -1.523842039366509e-04, -1.528626436219542e-04, 0.000000000000000e+00, -1.534017197218672e-04, -1.528626436219542e-04, 0.000000000000000e+00, -1.534017197218672e-04, -1.486704445431309e-02, 0.000000000000000e+00, -1.498391671704783e-02, -1.802937057359839e-03, 0.000000000000000e+00, -1.735536806382187e-03, -2.552437672163348e-02, 0.000000000000000e+00, -2.057039342375519e-02, -4.630726602355095e-03, 0.000000000000000e+00, -4.237037207008965e-03, -1.099061436411860e-02, 0.000000000000000e+00, -1.419017482915630e-02, -1.099061436411861e-02, 0.000000000000000e+00, -1.419017482915630e-02, -1.942036181618314e+00, 0.000000000000000e+00, -1.972002559335012e+00, -7.728807567885847e-01, 0.000000000000000e+00, -7.656022159432493e-01, -2.199982345448106e+00, 0.000000000000000e+00, -2.129088140938583e+00, -2.003789302229225e-05, 0.000000000000000e+00, -2.003617825000765e-05, -2.094970724159479e+00, 0.000000000000000e+00, -2.475830088058024e+00, -2.094970724159479e+00, 0.000000000000000e+00, -2.475830088058024e+00, -6.424985286532589e+00, 0.000000000000000e+00, -5.561049005038803e+00, -5.532342298510878e+00, 0.000000000000000e+00, -5.107885640507178e+00, -3.151228072419354e+01, 0.000000000000000e+00, -3.505493914112107e+01, -3.300920319378288e+00, 0.000000000000000e+00, -3.180929250098046e+00, -1.567074245865405e+01, 0.000000000000000e+00, -1.539203044467343e+01, -1.567074245864895e+01, 0.000000000000000e+00, -1.539203044467570e+01, -1.271465080986382e-03, 0.000000000000000e+00, -1.247822420668073e-03, -2.375678746626694e-03, 0.000000000000000e+00, -2.285050148228376e-03, -1.809065571353677e-03, 0.000000000000000e+00, -1.745908399312477e-03, -1.481617828913907e-03, 0.000000000000000e+00, -1.442984987441443e-03, -1.628106299334328e-03, 0.000000000000000e+00, -1.578512476299170e-03, -1.628106299334328e-03, 0.000000000000000e+00, -1.578512476299170e-03, -1.411487212992163e-03, 0.000000000000000e+00, -1.393588430381225e-03, -4.204321763609328e-02, 0.000000000000000e+00, -4.129505211377092e-02, -3.024239772657303e-02, 0.000000000000000e+00, -2.934627669630961e-02, -1.350729897677316e-02, 0.000000000000000e+00, -1.315627907394617e-02, -2.196002254609924e-02, 0.000000000000000e+00, -2.145481931967688e-02, -2.196002254609924e-02, 0.000000000000000e+00, -2.145481931967688e-02, -1.702381116723997e-03, 0.000000000000000e+00, -1.600771748695572e-03, -4.555742312353623e-01, 0.000000000000000e+00, -4.509300643022692e-01, -3.180291756446463e-01, 0.000000000000000e+00, -3.136419566023558e-01, -1.681066388377956e-01, 0.000000000000000e+00, -1.647066614716287e-01, -2.427367556986234e-01, 0.000000000000000e+00, -2.442000038216164e-01, -2.427367556986236e-01, 0.000000000000000e+00, -2.442000038216164e-01, -5.886144319624570e-02, 0.000000000000000e+00, -5.724753952917799e-02, -2.659483526161690e+00, 0.000000000000000e+00, -2.662405480235975e+00, -2.607409405800009e+00, 0.000000000000000e+00, -2.661343469023656e+00, -1.951353565616697e-01, 0.000000000000000e+00, -1.814472516136094e-01, -3.247272019537410e+00, 0.000000000000000e+00, -3.772725653828752e+00, -3.247272019537413e+00, 0.000000000000000e+00, -3.772725653828760e+00, -3.958875105943592e+00, 0.000000000000000e+00, -4.041364591610006e+00, -1.976902674040396e+01, 0.000000000000000e+00, -3.501773560135243e+01, -1.220091616714202e+01, 0.000000000000000e+00, -1.298864031769310e+01, -3.627186960500755e+00, 0.000000000000000e+00, -3.548608952525827e+00, -3.230794218320262e+01, 0.000000000000000e+00, -1.597911603940230e+01, -3.230794218319429e+01, 0.000000000000000e+00, -1.597911603940544e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
