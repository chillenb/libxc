
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_ityh_optx_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ityh_optx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-5.028611425986085e+01, -5.028622253578370e+01, -5.028681783425198e+01, -5.028504248266200e+01, -5.028617042261430e+01, -5.028617042261430e+01, -7.833195229663145e+00, -7.833202132280447e+00, -7.833731631594318e+00, -7.834572848603696e+00, -7.833234047906212e+00, -7.833234047906212e+00, -1.176430534593353e+00, -1.174896067425555e+00, -1.134939453170255e+00, -1.146723190034537e+00, -1.175870722572153e+00, -1.175870722572153e+00, -1.362091959633857e-01, -1.401393525417688e-01, -1.482567573954819e+00, -6.494102446942207e-02, -1.373841352404692e-01, -1.373841352404692e-01, -4.105676164921965e-05, -4.717298557994619e-05, -3.049846565828069e-03, -4.540882896719662e-06, -4.571588534888232e-05, -4.571588534888232e-05, -1.185881399683505e+01, -1.185957219912681e+01, -1.185890282069929e+01, -1.185949238368986e+01, -1.185919059802122e+01, -1.185919059802122e+01, -4.231581228254509e+00, -4.264140701972275e+00, -4.218719015475940e+00, -4.244142079264343e+00, -4.270228375374300e+00, -4.270228375374300e+00, -9.730339361884008e-01, -1.062585138540309e+00, -9.058631019698844e-01, -9.478925971448166e-01, -1.022839899080648e+00, -1.022839899080648e+00, -2.955433468040202e-02, -1.383646106193208e-01, -2.855804096262299e-02, -4.009483420203726e+00, -4.317760256957152e-02, -4.317760256957152e-02, -4.076761491994648e-06, -6.084195939214392e-06, -2.562404637426282e-06, -7.963655811126338e-03, -4.602850148119813e-06, -4.602850148119813e-06, -9.245237743703247e-01, -9.808177142603844e-01, -9.727006431198402e-01, -9.607644299664436e-01, -9.676319715723772e-01, -9.676319715723772e-01, -8.466621659662736e-01, -7.995489431295687e-01, -8.483499984055510e-01, -8.910643808842740e-01, -8.697846537643618e-01, -8.697846537643618e-01, -1.134123690251408e+00, -2.212952385914300e-01, -3.051859018843633e-01, -4.634061855437443e-01, -3.782473857867524e-01, -3.782473857867522e-01, -6.887607945495587e-01, -2.436769343382894e-03, -5.878170402019904e-03, -4.216909406923960e-01, -1.679246723688158e-02, -1.679246723688159e-02, -6.603763109078215e-05, -1.249327268933842e-07, -8.563145355262114e-07, -1.474089077447517e-02, -2.825818657845208e-06, -2.825818657845194e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_ityh_optx_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ityh_optx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-6.566343611277260e+01, -6.566353806070701e+01, -6.566419562546541e+01, -6.566252194408450e+01, -6.566348818204014e+01, -6.566348818204014e+01, -1.042300138119739e+01, -1.042298256471425e+01, -1.042290835749629e+01, -1.042533325730068e+01, -1.042303796840286e+01, -1.042303796840286e+01, -1.679704473903812e+00, -1.677793925331212e+00, -1.627388837979359e+00, -1.643104498260516e+00, -1.679007056396334e+00, -1.679007056396334e+00, -2.340395591552462e-01, -2.401994425629373e-01, -2.082755117175438e+00, -1.177702021682997e-01, -2.358831983902677e-01, -2.358831983902677e-01, -8.205153596820304e-05, -9.426784515066397e-05, -6.019062642792884e-03, -9.080185512844354e-06, -9.135762420983412e-05, -9.135762420983412e-05, -1.547285627412738e+01, -1.547008659743886e+01, -1.547259853701623e+01, -1.547044528333174e+01, -1.547141408774548e+01, -1.547141408774548e+01, -5.750358734107775e+00, -5.792694673195654e+00, -5.734451991222532e+00, -5.767541659608959e+00, -5.799426170427817e+00, -5.799426170427817e+00, -1.394325493675425e+00, -1.445465869467002e+00, -1.305877885554984e+00, -1.328917953730246e+00, -1.457300884495444e+00, -1.457300884495444e+00, -5.569979931445095e-02, -2.375644029313893e-01, -5.389190621538164e-02, -5.111742098828790e+00, -8.005356735606842e-02, -8.005356735606842e-02, -8.152202612301187e-06, -1.216581855372145e-05, -5.124200302698749e-06, -1.553177626600330e-02, -9.204083909899596e-06, -9.204083909899596e-06, -1.106291748192285e+00, -1.331204482723620e+00, -1.292901636784778e+00, -1.242573725799619e+00, -1.270974334937992e+00, -1.270974334937991e+00, -9.378776010015681e-01, -1.169474187182304e+00, -1.229758676343951e+00, -1.274548833745887e+00, -1.253784966685394e+00, -1.253784966685393e+00, -1.543609413515890e+00, -3.643497648239183e-01, -4.872634811528438e-01, -7.097721286245547e-01, -5.912941435552220e-01, -5.912941435552215e-01, -1.019555850872589e+00, -4.817992850058898e-03, -1.151701967368565e-02, -6.497564489722079e-01, -3.223210963121644e-02, -3.223210963121646e-02, -1.319384173101486e-04, -2.498614909337956e-07, -1.712531063945670e-06, -2.838961882949551e-02, -5.650920475430878e-06, -5.650920475430854e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_ityh_optx_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ityh_optx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-3.893702411303584e-09, -3.893862999560431e-09, -3.894265013426759e-09, -3.891642392526921e-09, -3.893789727391850e-09, -3.893789727391850e-09, -2.718636808128928e-06, -2.719499121667610e-06, -2.742895006123653e-06, -2.700504284138877e-06, -2.719034946294638e-06, -2.719034946294638e-06, -4.163469572439307e-04, -4.082818154918573e-04, -2.430690326992735e-04, -2.441969436368052e-04, -4.134282831130522e-04, -4.134282831130522e-04, -1.937050590309113e-03, -2.158451845885159e-03, -4.308845176309330e-04, -4.591884389497862e-04, -2.004313228872598e-03, -2.004313228872598e-03, -5.642633025041299e-08, -6.815472477895243e-08, -8.174704391765507e-06, -2.104556766692263e-09, -6.790097291334890e-08, -6.790097291334890e-08, -1.976414786938668e-06, -2.005408688982446e-06, -1.979278368446219e-06, -2.001818506713338e-06, -1.991315339319583e-06, -1.991315339319583e-06, -4.224587034192039e-06, -4.302279268032457e-06, -4.009134048693500e-06, -4.066390297512574e-06, -4.583336688298215e-06, -4.583336688298215e-06, -3.046353039506772e-03, -3.303421458811807e-02, -3.182992302289912e-03, -1.937126071559248e-02, -3.525965042730159e-03, -3.525965042730159e-03, -1.253795541170782e-04, -6.050837287417815e-04, -1.411647757719972e-04, -5.353184431037937e-04, -2.733452094795436e-04, -2.733452094795436e-04, -1.933527824895249e-09, -3.306279274408233e-09, -2.987504725843903e-09, -3.200373078096807e-05, -3.366694515601978e-09, -3.366694515488395e-09, -3.868369549973248e-01, -5.143301724570588e-02, -8.625912554084918e-02, -1.448079426689489e-01, -1.099141230110279e-01, -1.099141230110281e-01, -8.551118817583599e-01, -1.654925197272610e-03, -3.315677575072188e-03, -8.501832603514997e-03, -5.065235144617148e-03, -5.065235144617341e-03, -2.363876168826654e-02, -8.437553636533136e-04, -1.320549657406713e-03, -3.447387357395650e-03, -2.119851949956396e-03, -2.119851949956695e-03, -1.996601290117041e-03, -4.997455426704533e-06, -1.735490224903082e-05, -8.042444517921354e-03, -9.677074276356291e-05, -9.677074276380415e-05, -8.002476921102066e-08, -3.190858677472305e-11, -3.579141214401371e-10, -1.009469282616928e-04, -2.564805138316133e-09, -2.564805138383696e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
