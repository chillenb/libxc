
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_q1d_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_q1d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.905366612821664e+01, -1.905378252395856e+01, -1.905423439869512e+01, -1.905232949773611e+01, -1.905372807492520e+01, -1.905372807492520e+01, -2.892401606577918e+00, -2.892553296126895e+00, -2.896829031917537e+00, -2.890059627327305e+00, -2.892491950032893e+00, -2.892491950032893e+00, -3.906939602230176e-01, -3.860230734031365e-01, -2.622245262386432e-01, -2.701503738764363e-01, -3.890107229246442e-01, -3.890107229246442e-01, -2.072951503887192e-02, -2.388096403318156e-02, -5.980410844820550e-01, -2.557761596131815e-03, -2.166628885779000e-02, -2.166628885779000e-02, -9.648263515136652e-07, -1.110933709774806e-06, -5.177864684552595e-05, -8.923543955397815e-08, -1.097254008114080e-06, -1.097254008114080e-06, -4.787959336874906e+00, -4.791067940015349e+00, -4.788276353274829e+00, -4.790693821430047e+00, -4.789561401292680e+00, -4.789561401292680e+00, -8.058096830346840e-01, -8.367100702674188e-01, -7.689104283324733e-01, -7.924996018962173e-01, -8.765903572851605e-01, -8.765903572851605e-01, -5.034426089015888e-01, -5.899548687243730e-01, -4.704309748097631e-01, -5.363137893932243e-01, -5.359462153143216e-01, -5.359462153143216e-01, -6.059796925002031e-04, -6.849955878608076e-03, -6.412432225031774e-04, -1.794448957232391e+00, -1.279595618698813e-03, -1.279595618698813e-03, -8.250943390926328e-08, -1.233231377652733e-07, -8.783922334215566e-08, -1.521960931815865e-04, -1.133768558656781e-07, -1.133768558664304e-07, -5.579220577128009e-01, -5.573201222766703e-01, -5.578785598698108e-01, -5.580406374199900e-01, -5.579875772185982e-01, -5.579875772185982e-01, -5.393702916187300e-01, -3.491420720785615e-01, -4.417075509974049e-01, -5.002142850422681e-01, -4.747333710642162e-01, -4.747333710642163e-01, -6.185594422670735e-01, -1.839160024520673e-02, -5.018377582047297e-02, -2.089919451762862e-01, -1.117442788121494e-01, -1.117442788121494e-01, -2.988122576672511e-01, -3.715281529847963e-05, -9.773987270148376e-05, -2.509255349686197e-01, -3.903578516713768e-04, -3.903578516713630e-04, -1.347744245814099e-06, -3.315049122410880e-09, -2.109344275550691e-08, -3.770912907153609e-04, -8.408917529235536e-08, -8.408917529266001e-08])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_q1d_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_q1d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.264499225559048e+01, -3.264472355080756e+01, -3.264408635653639e+01, -3.264847592532926e+01, -3.264484585515287e+01, -3.264484585515287e+01, -6.219047030383737e+00, -6.218513912926078e+00, -6.204123680881330e+00, -6.230245000177824e+00, -6.218799323770193e+00, -6.218799323770193e+00, -1.497805858449030e+00, -1.496415514856660e+00, -1.316059532110435e+00, -1.340444806429215e+00, -1.497342702212361e+00, -1.497342702212361e+00, -1.357945222946594e-01, -1.554732793609639e-01, -1.633380767787720e+00, -1.468070631730310e-02, -1.416997105493683e-01, -1.416997105493683e-01, -3.859650369558934e-06, -4.444214362966636e-06, -2.097088285032388e-04, -3.569429531365519e-07, -4.389487851047464e-06, -4.389487851047464e-06, -7.165107623131653e+00, -7.152612218287872e+00, -7.163859434543966e+00, -7.154141716499335e+00, -7.158631083649415e+00, -7.158631083649415e+00, -4.005172772504975e+00, -4.090414800591485e+00, -3.908237270580070e+00, -3.978663809325103e+00, -4.174971658678928e+00, -4.174971658678928e+00, -9.534805975890051e-01, -7.856046076102867e-01, -9.359085684381129e-01, -7.349559273794590e-01, -9.290715332480102e-01, -9.290715332480102e-01, -2.834359723418275e-03, -4.296536903025248e-02, -3.035196453229660e-03, -2.390131715202693e+00, -6.683027395525616e-03, -6.683027395525616e-03, -3.300387507067043e-07, -4.932951447183776e-07, -3.513585619563685e-07, -6.371409489769336e-04, -4.535098510194664e-07, -4.535098510116311e-07, -7.388864432924441e-01, -7.396643792829136e-01, -7.378851910524507e-01, -7.376857769642019e-01, -7.376604991720154e-01, -7.376604991720154e-01, -7.155623204319491e-01, -1.083410043211134e+00, -9.206827192673129e-01, -7.640380062078348e-01, -8.323020302881200e-01, -8.323020302881199e-01, -8.263808792147207e-01, -1.208958141706891e-01, -3.160526301491831e-01, -7.876049690577783e-01, -5.919084758491124e-01, -5.919084758491121e-01, -9.992982753699375e-01, -1.497662795813416e-04, -4.012159557969724e-04, -6.704278186083634e-01, -1.760159529820894e-03, -1.760159529820841e-03, -5.391660272261911e-06, -1.326019715770723e-08, -8.437381906786104e-08, -1.703486044222346e-03, -3.363580727796524e-07, -3.363580728124156e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_q1d_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_q1d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.833206567888555e-08, 1.833124350082650e-08, 1.832837619955691e-08, 1.834182429822241e-08, 1.833162539750793e-08, 1.833162539750793e-08, 3.781129079042727e-05, 3.780533915016706e-05, 3.763508761627368e-05, 3.789574373209048e-05, 3.780758563463157e-05, 3.780758563463157e-05, 3.322600177254597e-02, 3.317428825946626e-02, 2.747842501072989e-02, 2.723169896995518e-02, 3.320944085740247e-02, 3.320944085740247e-02, 8.419768633562618e-01, 9.621472088401259e-01, 1.614833796062382e-02, 1.694400484049703e-01, 8.787897085216311e-01, 8.787897085216311e-01, 1.148882900065076e-01, 1.153323929466895e-01, 5.605282762740753e-02, 8.061736105334387e-02, 1.198081680788647e-01, 1.198081680788647e-01, 3.164422983981564e-06, 3.118452781448149e-06, 3.159810230823924e-06, 3.124063262411817e-06, 3.140699704774487e-06, 3.140699704774487e-06, 3.384569487718213e-04, 3.393065083439579e-04, 3.271613267249611e-04, 3.283599556571629e-04, 3.524394631489231e-04, 3.524394631489231e-04, 4.113200318046661e-02, -3.784197497300180e-04, 5.465954196823711e-02, 7.683010363928221e-03, 2.975192464059744e-02, 2.975192464059744e-02, 6.479145392980752e-02, 1.428605514683846e-01, 7.855323276906864e-02, -3.552075238306210e-06, 1.202420205059218e-01, 1.202420205059218e-01, 8.551502438276178e-02, 8.574723577640668e-02, 2.453919385783902e-01, 6.737965100225582e-02, 1.266561051727074e-01, 1.266561051648825e-01, -8.484011140452748e-03, -1.957629383244743e-03, -4.441088697614248e-03, -6.252620439642892e-03, -5.359073575301058e-03, -5.359073575301058e-03, -1.079505472862782e-02, 1.064460082352100e-01, 7.014849503949892e-02, 2.909227830243303e-02, 4.899525954548949e-02, 4.899525954548947e-02, 4.459998437520750e-04, 1.918770679174111e-01, 3.224687372416123e-01, 4.368990893678271e-01, 4.624873006791642e-01, 4.624873006791643e-01, 1.610527686181040e-01, 4.557210661072424e-02, 5.186493923556175e-02, 5.401064656277467e-01, 9.312281554993115e-02, 9.312281554996253e-02, 8.650802504236098e-02, 1.471204576570789e-01, 1.267553338106201e-01, 1.153290703097770e-01, 1.849052551334293e-01, 1.849052551616911e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
