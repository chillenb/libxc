
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_pbe_jsjr_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbe_jsjr", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.061372570351606e+01, -2.061375629452334e+01, -2.061395773697407e+01, -2.061345550593902e+01, -2.061374129309374e+01, -2.061374129309374e+01, -3.402096862447363e+00, -3.402077174398916e+00, -3.401676615117101e+00, -3.403088540090188e+00, -3.402101228741775e+00, -3.402101228741775e+00, -6.763978150605960e-01, -6.762998124003553e-01, -6.756100077041681e-01, -6.799230274133407e-01, -6.763590260787021e-01, -6.763590260787021e-01, -2.063337491143541e-01, -2.073086452121777e-01, -7.924213932769499e-01, -1.712450037467957e-01, -2.066030311038523e-01, -2.066030311038523e-01, -1.698776960413232e-02, -1.778744534041673e-02, -6.955005843562888e-02, -8.173803831098565e-03, -1.760221738021162e-02, -1.760221738021162e-02, -4.972117409127638e+00, -4.971937327608598e+00, -4.972104274839632e+00, -4.971964158612689e+00, -4.972017399769423e+00, -4.972017399769423e+00, -2.035126936177104e+00, -2.045214489552660e+00, -2.035338294872019e+00, -2.043176819907838e+00, -2.041741088651251e+00, -2.041741088651251e+00, -5.635881731189635e-01, -5.922554004409951e-01, -5.363451808745912e-01, -5.432124453375022e-01, -5.820373762225083e-01, -5.820373762225083e-01, -1.394543193545642e-01, -2.252745357765955e-01, -1.368039002291009e-01, -1.801602804838916e+00, -1.525723421053657e-01, -1.525723421053657e-01, -7.885395548749724e-03, -9.009825371297972e-03, -6.753209395430425e-03, -9.328302842616019e-02, -8.209282004316858e-03, -8.209282004316858e-03, -5.577286694653565e-01, -5.587835811588119e-01, -5.584112735399785e-01, -5.581168592984431e-01, -5.582640680322151e-01, -5.582640680322151e-01, -5.391788958410683e-01, -5.026675716791364e-01, -5.129187311255476e-01, -5.225272482222540e-01, -5.174759173723381e-01, -5.174759173723381e-01, -6.216717646965744e-01, -2.678191289092894e-01, -3.009378582896650e-01, -3.554305340516026e-01, -3.258514723411115e-01, -3.258514723411114e-01, -4.556172582119005e-01, -6.499517529784592e-02, -8.558902544207701e-02, -3.282812714832593e-01, -1.155231038340229e-01, -1.155231038340229e-01, -1.989558675625968e-02, -2.468723328813487e-03, -4.688707311349260e-03, -1.100927307591833e-01, -6.977603238000328e-03, -6.977603238000318e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_pbe_jsjr_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbe_jsjr", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.547797513762040e+01, -2.547805775426387e+01, -2.547844183151742e+01, -2.547708864655419e+01, -2.547801857721475e+01, -2.547801857721475e+01, -4.100911430394823e+00, -4.100946157057170e+00, -4.102069528760206e+00, -4.101003210630020e+00, -4.100946760694150e+00, -4.100946760694150e+00, -7.656312018943888e-01, -7.644217476530647e-01, -7.334713238142925e-01, -7.397706052289921e-01, -7.651918045763736e-01, -7.651918045763736e-01, -2.031471376976349e-01, -2.056979987372495e-01, -9.321077869272117e-01, -1.625809094669634e-01, -2.038972735128360e-01, -2.038972735128360e-01, -2.248470818829875e-02, -2.352617165944099e-02, -8.538608904420379e-02, -1.088287732231772e-02, -2.328153927567568e-02, -2.328153927567568e-02, -6.263761591184452e+00, -6.266087433022853e+00, -6.264000238167343e+00, -6.265808704710886e+00, -6.264953198936853e+00, -6.264953198936853e+00, -2.213540596809010e+00, -2.231403244465043e+00, -2.204145511173281e+00, -2.218025954631569e+00, -2.238031652947969e+00, -2.238031652947969e+00, -6.885551218621613e-01, -7.706383080785215e-01, -6.517908178674060e-01, -6.977583365242646e-01, -7.183567905604165e-01, -7.183567905604165e-01, -1.439151543681407e-01, -2.126531531670565e-01, -1.401171893952511e-01, -2.343813060744645e+00, -1.488788735441740e-01, -1.488788735441740e-01, -1.049950142173192e-02, -1.199165856559256e-02, -8.989003728173107e-03, -1.069832210381489e-01, -1.092599746034444e-02, -1.092599746034444e-02, -7.383083129711586e-01, -7.291844109697141e-01, -7.324251426021458e-01, -7.349517082561071e-01, -7.336854678796032e-01, -7.336854678796032e-01, -7.154669431083819e-01, -5.833189743226919e-01, -6.202702105285318e-01, -6.560737419435619e-01, -6.378113602132254e-01, -6.378113602132254e-01, -8.071495790094932e-01, -2.587615988288664e-01, -3.056536319245995e-01, -4.032004639592470e-01, -3.498272018838026e-01, -3.498272018838025e-01, -5.243161031591963e-01, -8.114009216840437e-02, -1.015813630011039e-01, -3.870285333616024e-01, -1.224144680421698e-01, -1.224144680421698e-01, -2.629679104704493e-02, -3.291052632668407e-03, -6.247932375581525e-03, -1.164888949373625e-01, -9.288843561824857e-03, -9.288843561824843e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_pbe_jsjr_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbe_jsjr", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.081738783478841e-09, -5.081702492992189e-09, -5.081485392158759e-09, -5.082080768502725e-09, -5.081720106552820e-09, -5.081720106552820e-09, -6.965529423984918e-06, -6.965625416292491e-06, -6.967113002278517e-06, -6.958643731051218e-06, -6.965460107133251e-06, -6.965460107133251e-06, -4.633588894599283e-03, -4.640034550239122e-03, -4.758037543095574e-03, -4.633608657758173e-03, -4.636005758654550e-03, -4.636005758654550e-03, -5.602364453861787e-01, -5.503172892759736e-01, -2.404000062785042e-03, -9.884305006841856e-01, -5.575503835841237e-01, -5.575503835841237e-01, -7.395958367226058e+00, -7.412104743440410e+00, -2.927677064170358e+00, -5.260533968690445e+00, -7.700024587231378e+00, -7.700024587231378e+00, -1.481535501533813e-06, -1.481324469451467e-06, -1.481508605098054e-06, -1.481344609192866e-06, -1.481434996226548e-06, -1.481434996226548e-06, -5.773779355653524e-05, -5.652247606398831e-05, -5.783308409522327e-05, -5.688540778563584e-05, -5.677723231390793e-05, -5.677723231390793e-05, -9.166588268385954e-03, -7.189885635176850e-03, -1.121570706942678e-02, -1.025577720705825e-02, -8.003107441378781e-03, -8.003107441378781e-03, -1.343668469188905e+00, -3.703794476793446e-01, -1.523645353510015e+00, -8.398060198739006e-05, -1.317951431302356e+00, -1.317951431302356e+00, -5.580866708840163e+00, -5.590713900027213e+00, -1.600274329821385e+01, -2.699164333646841e+00, -8.257669926607386e+00, -8.257669926607379e+00, -9.026416742194744e-03, -9.054434024306749e-03, -9.044399579851795e-03, -9.036761681654236e-03, -9.040611264378509e-03, -9.040611264378509e-03, -1.031556585385224e-02, -1.497139135412604e-02, -1.345317661682996e-02, -1.217479518334487e-02, -1.282043363183356e-02, -1.282043363183356e-02, -5.932122514716480e-03, -1.957731814701192e-01, -1.237331588377733e-01, -6.069720958089127e-02, -8.838149065880456e-02, -8.838149065880459e-02, -2.229278953634137e-02, -2.509892312365666e+00, -2.400360104548166e+00, -8.149963485564711e-02, -2.374965022457183e+00, -2.374965022457185e+00, -5.550934050316065e+00, -9.627133386210179e+00, -8.286809224863495e+00, -2.910502690948947e+00, -1.206161796048566e+01, -1.206161796048564e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
