
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_sogga11_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_sogga11", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.059092107901997e+01, -2.059095773556013e+01, -2.059117174169278e+01, -2.059062530281609e+01, -2.059090437393533e+01, -2.059090437393533e+01, -3.391392505157786e+00, -3.391374722691838e+00, -3.391045555316587e+00, -3.392260379992044e+00, -3.391453100491193e+00, -3.391453100491193e+00, -6.641194837237289e-01, -6.635019441200929e-01, -6.459349208530654e-01, -6.514552398358908e-01, -6.474382518559425e-01, -6.474382518559425e-01, -1.840539129860382e-01, -1.830421071975192e-01, -7.727106175439339e-01, -1.227636473715689e-01, -1.486493276598903e-01, -1.486493276598905e-01, -8.274893402530767e-02, -8.694551734043293e-02, -3.082495562081188e-01, -4.823273705344877e-02, -6.690532838748428e-02, -6.690532838748428e-02, -4.969909268840237e+00, -4.969716622694445e+00, -4.969909080285587e+00, -4.969738880699326e+00, -4.969806930598008e+00, -4.969806930598008e+00, -1.936124849104612e+00, -1.951084836271453e+00, -1.923462365472395e+00, -1.936854565543806e+00, -1.950296404153139e+00, -1.950296404153139e+00, -5.690829898028829e-01, -5.987174148548466e-01, -5.294158640837767e-01, -5.329157877814107e-01, -5.766462723516503e-01, -5.766462723516503e-01, 1.488363034891370e-01, -2.060333619750060e-01, 1.264529189052307e-01, -1.801841041058431e+00, 1.746086366476111e-02, 1.746086366476111e-02, -3.729631797929613e-02, -4.714192056435650e-02, -3.601202693885175e-02, -1.257064854713535e-01, -4.519521701127317e-02, -4.519521701127319e-02, -5.492918486522804e-01, -5.502905393300332e-01, -5.499023103357183e-01, -5.496040745622347e-01, -5.497489967507719e-01, -5.497489967507719e-01, -5.332798214780313e-01, -4.872937151021705e-01, -5.039544606552371e-01, -5.158130472961637e-01, -5.100229471605999e-01, -5.100229471605999e-01, -6.284677106776468e-01, -2.391359530950786e-01, -2.589811226388873e-01, -3.446582770015950e-01, -2.969345987792154e-01, -2.969345987792154e-01, -4.488323363378509e-01, -3.146765118895071e-01, -2.817247769949249e-01, -3.302536897967775e-01, 9.041073186402962e-02, 9.041073186402941e-02, -1.151907961666516e-01, -1.265515058469538e-02, -2.656840248865287e-02, 5.197265198065364e-02, -4.153695213500309e-02, -4.153695213500305e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_sogga11_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_sogga11", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.558862616849941e+01, -2.558859322876835e+01, -2.558870897745198e+01, -2.558865338650737e+01, -2.558899003633012e+01, -2.558905161217216e+01, -2.558805454298886e+01, -2.558785939775348e+01, -2.558867474271185e+01, -2.558834777202287e+01, -2.558867474271185e+01, -2.558834777202287e+01, -4.194229873973200e+00, -4.193912574915966e+00, -4.194210349033940e+00, -4.193868588663698e+00, -4.193496091408233e+00, -4.193336023508951e+00, -4.195422194038591e+00, -4.195191409755634e+00, -4.193631386834383e+00, -4.194638253371473e+00, -4.193631386834383e+00, -4.194638253371473e+00, -8.605359096670199e-01, -8.554876519847148e-01, -8.621603877410629e-01, -8.558868841255272e-01, -8.835289708312496e-01, -8.905855182783878e-01, -8.935675212851203e-01, -8.909946803823466e-01, -8.502076018858270e-01, -8.784718153906588e-01, -8.502076018858270e-01, -8.784718153906588e-01, -7.723365982591707e-02, -9.967612337430895e-02, -8.738378168415069e-02, -1.225517171496918e-01, -9.833529969313668e-01, -9.826107383768311e-01, -7.890369143008615e-01, -7.611616869629007e-01, -8.418618410573100e-02, -5.786514998311325e-01, -8.418618410573188e-02, -5.786514998311376e-01, -1.036077976730200e-01, -1.094716075676413e-01, -1.079352028259602e-01, -1.147575226955371e-01, -2.965227753707016e-02, 2.758973881031971e-02, -6.416211996177626e-02, -6.313844309836844e-02, -9.329903477351011e-02, -5.402868694402311e-02, -9.329903477351012e-02, -5.402868694402311e-02, -6.259606217833233e+00, -6.258070121500582e+00, -6.261687199932502e+00, -6.260079609593111e+00, -6.259723653471221e+00, -6.258140535384423e+00, -6.261508972756205e+00, -6.259965852260863e+00, -6.260668480156816e+00, -6.259077309919191e+00, -6.260668480156816e+00, -6.259077309919191e+00, -2.691648714239320e+00, -2.691540655161220e+00, -2.700738453992471e+00, -2.700265409918936e+00, -2.699495196978495e+00, -2.697557518967836e+00, -2.709212270136120e+00, -2.706975154862252e+00, -2.687309868507924e+00, -2.694911232699696e+00, -2.687309868507924e+00, -2.694911232699696e+00, -7.050130346006284e-01, -7.031046206623288e-01, -7.775549242824059e-01, -7.782448079974518e-01, -6.436813034756226e-01, -6.646529836249943e-01, -6.739523210335248e-01, -6.959768242700544e-01, -7.320480931257284e-01, -6.957610282168758e-01, -7.320480931257284e-01, -6.957610282168759e-01, 2.529352732212681e-01, 1.385034177781681e-01, -3.582671983059219e-01, -3.443584113681126e-01, 7.394364889932437e-01, 4.446794607018871e-01, -2.345270510244576e+00, -2.344269522395226e+00, -9.382676564223918e-01, -1.022740224578381e+00, -9.382676564223918e-01, -1.022740224578381e+00, -4.838367879133732e-02, -5.027987199830820e-02, -6.171810063967328e-02, -6.266196034965979e-02, -4.590662672714378e-02, -4.842805519520141e-02, 9.164799895917443e-01, 9.188399897606738e-01, -4.715004817588759e-02, -6.387841063194004e-02, -4.715004817588759e-02, -6.387841063194005e-02, -7.249889855565295e-01, -7.278917294998911e-01, -7.144261939239067e-01, -7.174151667134985e-01, -7.181762224082726e-01, -7.211616976001683e-01, -7.212882789805204e-01, -7.242024743394443e-01, -7.197374091027481e-01, -7.226861864162959e-01, -7.197374091027481e-01, -7.226861864162959e-01, -7.072290350490015e-01, -7.095795668816258e-01, -6.258234905173885e-01, -6.270533231515849e-01, -6.228960867688437e-01, -6.249565568946877e-01, -6.451747044153238e-01, -6.475239912786612e-01, -6.305138506810194e-01, -6.327890690948739e-01, -6.305138506810194e-01, -6.327890690948739e-01, -8.134227687294462e-01, -8.152882830992708e-01, -9.675105099861615e-02, -9.809074965962278e-02, -2.762815288724371e-01, -2.924317355378577e-01, -4.549840624573073e-01, -4.564546623626530e-01, -4.234325784990485e-01, -4.234597876919698e-01, -4.234325784990489e-01, -4.234597876919701e-01, -5.788773403012875e-01, -5.801782617144556e-01, -6.730625195855250e-02, -6.125029830924496e-02, 3.213908384816454e-01, 3.937171616418063e-01, -4.128600412343578e-01, -4.168468830673869e-01, 9.204456873439252e-01, 4.562607907323340e-01, 9.204456873439216e-01, 4.562607907323341e-01, -1.426460916628676e-01, -1.467402624045661e-01, -1.683212749988123e-02, -1.685838157041754e-02, -3.408381542656705e-02, -3.620840415562195e-02, 9.368442486574428e-01, 9.132418362887885e-01, -4.446095429415135e-02, -5.879692709999513e-02, -4.446095429415130e-02, -5.879692709999507e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_sogga11_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_sogga11", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-9.448556605436514e-09, 0.000000000000000e+00, -9.448618180581831e-09, -9.448596292610201e-09, 0.000000000000000e+00, -9.448646918062833e-09, -9.448482765167732e-09, 0.000000000000000e+00, -9.448551548833660e-09, -9.448040333561637e-09, 0.000000000000000e+00, -9.447985594900853e-09, -9.448592419651037e-09, 0.000000000000000e+00, -9.448035151330135e-09, -9.448592419651037e-09, 0.000000000000000e+00, -9.448035151330135e-09, -1.048396805686826e-05, 0.000000000000000e+00, -1.049968561404448e-05, -1.048573419596815e-05, 0.000000000000000e+00, -1.050249455099993e-05, -1.053902087726894e-05, 0.000000000000000e+00, -1.055271242825413e-05, -1.043977353519028e-05, 0.000000000000000e+00, -1.045587803320103e-05, -1.048500531390023e-05, 0.000000000000000e+00, -1.050205841838103e-05, -1.048500531390023e-05, 0.000000000000000e+00, -1.050205841838103e-05, -1.652679364808171e-03, 0.000000000000000e+00, -2.277098877918590e-03, -1.441318051522385e-03, 0.000000000000000e+00, -2.206297606505786e-03, 1.155150525660874e-03, 0.000000000000000e+00, 1.927514671153456e-03, 1.508967194979742e-03, 0.000000000000000e+00, 1.252528754660144e-03, -3.183784572836972e-03, 0.000000000000000e+00, 2.337561307856687e-03, -3.183784572836972e-03, 0.000000000000000e+00, 2.337561307856687e-03, -2.596170096812059e+00, 0.000000000000000e+00, -2.079962299256881e+00, -2.409347875864822e+00, 0.000000000000000e+00, -1.721990973774274e+00, -1.148128561473746e-03, 0.000000000000000e+00, -2.338814642753516e-03, 1.751422262573163e+01, 0.000000000000000e+00, 1.571284518184354e+01, -2.169878011894558e+00, 0.000000000000000e+00, 5.150401739291055e+01, -2.169878011894560e+00, 0.000000000000000e+00, 5.150401739291069e+01, -1.039990077661597e+03, 0.000000000000000e+00, -1.028573728623066e+03, -1.094695927420124e+03, 0.000000000000000e+00, -1.087710460027338e+03, -4.970278387191245e+02, 0.000000000000000e+00, -4.871611012452202e+02, -9.574584119539958e+02, 0.000000000000000e+00, -9.315833296931484e+02, -1.039911581472441e+03, 0.000000000000000e+00, -2.646492727188152e+03, -1.039911581472444e+03, 0.000000000000000e+00, -2.646492727188160e+03, -2.973508882595222e-06, 0.000000000000000e+00, -2.976164092019883e-06, -2.976047709724738e-06, 0.000000000000000e+00, -2.978626512728712e-06, -2.973619505410197e-06, 0.000000000000000e+00, -2.976226568320756e-06, -2.975800094030263e-06, 0.000000000000000e+00, -2.978465147820062e-06, -2.974847796529168e-06, 0.000000000000000e+00, -2.977417318605032e-06, -2.974847796529168e-06, 0.000000000000000e+00, -2.977417318605032e-06, 2.550766425145690e-05, 0.000000000000000e+00, 2.551848955162103e-05, 2.262223404685162e-05, 0.000000000000000e+00, 2.270049825873289e-05, 3.094432910034101e-05, 0.000000000000000e+00, 2.951804800223977e-05, 2.879918197025107e-05, 0.000000000000000e+00, 2.725997443435817e-05, 1.890268180805016e-05, 0.000000000000000e+00, 2.337391796006259e-05, 1.890268180805016e-05, 0.000000000000000e+00, 2.337391796006259e-05, -1.479257059192183e-02, 0.000000000000000e+00, -1.498310432789985e-02, -1.361521730929741e-02, 0.000000000000000e+00, -1.356650864046610e-02, -1.839911178633297e-02, 0.000000000000000e+00, -1.754961904907096e-02, -2.393323479052423e-02, 0.000000000000000e+00, -2.100659120751461e-02, -1.383089492386412e-02, 0.000000000000000e+00, -1.652292362299019e-02, -1.383089492386415e-02, 0.000000000000000e+00, -1.652292362299018e-02, -3.759904861832823e+00, 0.000000000000000e+00, 4.071537889044555e+00, 7.724701938361184e-01, 0.000000000000000e+00, 6.197652088159232e-01, -5.553133254356668e+01, 0.000000000000000e+00, -2.116532715408436e+01, -1.644525341961294e-04, 0.000000000000000e+00, -1.647310764959961e-04, 5.405103515038397e+01, 0.000000000000000e+00, 5.046743670155196e+01, 5.405103515038397e+01, 0.000000000000000e+00, 5.046743670155196e+01, -1.345300233858107e+03, 0.000000000000000e+00, -1.164394468559657e+03, -1.157318666108993e+03, 0.000000000000000e+00, -1.068554215992099e+03, -6.586164894418157e+03, 0.000000000000000e+00, -7.321776643384048e+03, -3.505882590305839e+02, 0.000000000000000e+00, -3.398809006678343e+02, -3.278346746905680e+03, 0.000000000000000e+00, -3.212649372132149e+03, -3.278346746905671e+03, 0.000000000000000e+00, -3.212649372132145e+03, -1.730637706436085e-02, 0.000000000000000e+00, -1.700844615765586e-02, -1.910064764463158e-02, 0.000000000000000e+00, -1.878125594578864e-02, -1.860316682174360e-02, 0.000000000000000e+00, -1.828264539669819e-02, -1.808029712117095e-02, 0.000000000000000e+00, -1.777354846471907e-02, -1.835419158706251e-02, 0.000000000000000e+00, -1.803993266546604e-02, -1.835419158706251e-02, 0.000000000000000e+00, -1.803993266546604e-02, -1.855191046336361e-02, 0.000000000000000e+00, -1.830231126397818e-02, -7.814369410720834e-03, 0.000000000000000e+00, -8.239637220652827e-03, -2.010688644940009e-02, 0.000000000000000e+00, -2.023067748928924e-02, -2.543758412970858e-02, 0.000000000000000e+00, -2.514604385025595e-02, -2.393602868520781e-02, 0.000000000000000e+00, -2.371198587168084e-02, -2.393602868520781e-02, 0.000000000000000e+00, -2.371198587168084e-02, -1.135754073114141e-02, 0.000000000000000e+00, -1.126059979730059e-02, -9.430800060600447e-01, 0.000000000000000e+00, -9.247288615085264e-01, -1.800550313152786e-01, 0.000000000000000e+00, -1.413682506608376e-01, -5.575714538145669e-03, 0.000000000000000e+00, -7.220939047364810e-03, 5.671722422059483e-02, 0.000000000000000e+00, 5.740620252342127e-02, 5.671722422059419e-02, 0.000000000000000e+00, 5.740620252342193e-02, -8.976825541664017e-03, 0.000000000000000e+00, -1.019407738115686e-02, -4.624540291061667e+02, 0.000000000000000e+00, -4.616861150308258e+02, -3.875982299572692e+02, 0.000000000000000e+00, -3.842746598820702e+02, -7.018357859026142e-02, 0.000000000000000e+00, -7.369911894076302e-02, -1.500918469816157e+02, 0.000000000000000e+00, -5.153782314595188e+01, -1.500918469816154e+02, 0.000000000000000e+00, -5.153782314595173e+01, -8.188934828370858e+02, 0.000000000000000e+00, -8.349643073006798e+02, -4.145128685445624e+03, 0.000000000000000e+00, -7.341535705654953e+03, -2.556142368202257e+03, 0.000000000000000e+00, -2.720629193456350e+03, -1.868115536322715e+02, 0.000000000000000e+00, -1.694944712315043e+02, -6.753730516166531e+03, 0.000000000000000e+00, -3.337561758704012e+03, -6.753730516166544e+03, 0.000000000000000e+00, -3.337561758704022e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
