
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_optb86b_vdw_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_optb86b_vdw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.048352471633168e+01, -2.048355779200395e+01, -2.048376603641101e+01, -2.048322320427057e+01, -2.048354165203547e+01, -2.048354165203547e+01, -3.374611963543859e+00, -3.374595674110043e+00, -3.374287422937814e+00, -3.375534502542081e+00, -3.374617960748097e+00, -3.374617960748097e+00, -6.685336819671789e-01, -6.683936879258693e-01, -6.667718016812660e-01, -6.710647390466961e-01, -6.684797549205432e-01, -6.684797549205432e-01, -2.041354287445024e-01, -2.049375410483676e-01, -7.847978829776160e-01, -1.753110026771250e-01, -2.043478719772137e-01, -2.043478719772137e-01, -3.186744104857995e-02, -3.291658816090878e-02, -9.197485652347910e-02, -1.960235308947511e-02, -3.258276432827547e-02, -3.258276432827547e-02, -4.947957359225194e+00, -4.947937967558339e+00, -4.947960258970389e+00, -4.947945094266701e+00, -4.947940307563097e+00, -4.947940307563097e+00, -2.008596006912548e+00, -2.018715176765846e+00, -2.008595509719944e+00, -2.016445406322676e+00, -2.015553523999186e+00, -2.015553523999186e+00, -5.595564229357098e-01, -5.909635658771742e-01, -5.323085657642214e-01, -5.414306878596523e-01, -5.782999672440744e-01, -5.782999672440744e-01, -1.527028772525820e-01, -2.262223899900087e-01, -1.489430959126598e-01, -1.797645231850838e+00, -1.601366302641880e-01, -1.601366302641880e-01, -1.903515287161250e-02, -2.086929495854731e-02, -1.576494854110351e-02, -1.122167671869764e-01, -1.898898147352883e-02, -1.898898147352883e-02, -5.573623316036201e-01, -5.577048565256439e-01, -5.575835682623456e-01, -5.574866212828590e-01, -5.575347459038043e-01, -5.575347459038043e-01, -5.389421759327955e-01, -4.974448897588759e-01, -5.088860838114706e-01, -5.198514241257213e-01, -5.141017864742932e-01, -5.141017864742932e-01, -6.201984701246894e-01, -2.657709306925837e-01, -2.970604424041450e-01, -3.513332042579919e-01, -3.215149063708928e-01, -3.215149063708928e-01, -4.506819457330118e-01, -8.891535430086969e-02, -1.073378239603465e-01, -3.251674058863160e-01, -1.291470359852657e-01, -1.291470359852656e-01, -3.639361991279755e-02, -8.295597490177480e-03, -1.292680229292695e-02, -1.229307354588895e-01, -1.648073833518325e-02, -1.648073833518323e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_optb86b_vdw_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_optb86b_vdw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.559344048214038e+01, -2.559352245151993e+01, -2.559390518833331e+01, -2.559256256492463e+01, -2.559348356746366e+01, -2.559348356746366e+01, -4.120332739444181e+00, -4.120368054031267e+00, -4.121507962494277e+00, -4.120416759212530e+00, -4.120368454996971e+00, -4.120368454996971e+00, -7.666607248194219e-01, -7.653298963586631e-01, -7.297453842743038e-01, -7.363410089540748e-01, -7.661779657548909e-01, -7.661779657548909e-01, -1.937927659833800e-01, -1.973914783813421e-01, -9.359776184733357e-01, -1.370585173470110e-01, -1.948786869913711e-01, -1.948786869913711e-01, -2.993634655629488e-02, -3.093868751922831e-02, -7.996634534953065e-02, -1.802176095989000e-02, -3.062462526121989e-02, -3.062462526121989e-02, -6.288197519525879e+00, -6.290422198854839e+00, -6.288426126129044e+00, -6.290155937794171e+00, -6.289337012460031e+00, -6.289337012460031e+00, -2.203134303919517e+00, -2.222268966493240e+00, -2.191797111910722e+00, -2.206730901948922e+00, -2.230813697470436e+00, -2.230813697470436e+00, -6.918048367096467e-01, -7.721919342854858e-01, -6.548886646749763e-01, -6.997700076920534e-01, -7.216348923995284e-01, -7.216348923995284e-01, -1.145468729351290e-01, -1.890970216111684e-01, -1.115252160126557e-01, -2.348568694320288e+00, -1.207327827257206e-01, -1.207327827257206e-01, -1.748788072687996e-02, -1.925810528433304e-02, -1.453576713102565e-02, -9.037091110883426e-02, -1.752550205019809e-02, -1.752550205019808e-02, -7.387830413717296e-01, -7.304989949025150e-01, -7.334569325307905e-01, -7.357508358880420e-01, -7.346024395885171e-01, -7.346024395885171e-01, -7.157766823759537e-01, -5.853304865595726e-01, -6.232180786783835e-01, -6.587236365985150e-01, -6.407395364433510e-01, -6.407395364433511e-01, -8.089034286028260e-01, -2.422599849705344e-01, -2.974361879481358e-01, -4.038355899771007e-01, -3.471814659218539e-01, -3.471814659218538e-01, -5.258181371509834e-01, -7.893995253347277e-02, -8.964506258649965e-02, -3.886702581859149e-01, -9.789848665394514e-02, -9.789848665394511e-02, -3.421910908399083e-02, -7.361951664560182e-03, -1.170584928320576e-02, -9.311771150107630e-02, -1.517672043274366e-02, -1.517672043274365e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_optb86b_vdw_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_optb86b_vdw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.349817122023562e-09, -4.349780831234840e-09, -4.349579239846047e-09, -4.350174318669505e-09, -4.349798315275260e-09, -4.349798315275260e-09, -6.068180400398072e-06, -6.068201406588862e-06, -6.067777675194636e-06, -6.063363076088892e-06, -6.068087806733556e-06, -6.068087806733556e-06, -4.241935565395880e-03, -4.253127219398033e-03, -4.528914808347316e-03, -4.400767462565096e-03, -4.246046593914425e-03, -4.246046593914425e-03, -6.102410029394961e-01, -5.903578446802894e-01, -2.132904329336546e-03, -1.453642547997311e+00, -6.043810260400448e-01, -6.043810260400448e-01, -5.604889664390438e+02, -5.040773058350006e+02, -1.700137799737764e+01, -2.749117433631719e+03, -5.248034637306654e+02, -5.248034637306654e+02, -1.252053687529513e-06, -1.251540720936167e-06, -1.251997479424915e-06, -1.251598679755635e-06, -1.251795959288750e-06, -1.251795959288750e-06, -5.485434759653563e-05, -5.353431047605873e-05, -5.518805243686112e-05, -5.414942863666051e-05, -5.352987699293382e-05, -5.352987699293382e-05, -7.909503473007758e-03, -5.952486465836932e-03, -9.714048232710496e-03, -8.559423176293390e-03, -6.857108253513449e-03, -6.857108253513449e-03, -2.847496904897920e+00, -4.751849574118072e-01, -3.136989925372927e+00, -6.953497741267734e-05, -2.241632834177452e+00, -2.241632834177452e+00, -3.067417825528122e+03, -2.233899692061599e+03, -6.792880683055317e+03, -9.194435234337368e+00, -3.264690187035641e+03, -3.264690187035642e+03, -7.395235516063561e-03, -7.482855865003892e-03, -7.451309621606671e-03, -7.427123915629772e-03, -7.439228880698100e-03, -7.439228880698100e-03, -8.439320761250679e-03, -1.342521564327857e-02, -1.169285658182622e-02, -1.031163679745386e-02, -1.099482167659051e-02, -1.099482167659051e-02, -4.917822854640834e-03, -2.231901924694001e-01, -1.276776796371126e-01, -5.546228041174520e-02, -8.510655223081001e-02, -8.510655223081007e-02, -2.012647202484464e-02, -1.801158620565799e+01, -1.023759160065483e+01, -7.218287381950066e-02, -5.581105395422288e+00, -5.581105395422294e+00, -3.442764071548343e+02, -6.155742795043985e+04, -1.246137417589504e+04, -6.799494806717107e+00, -5.605227036629647e+03, -5.605227036629660e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
