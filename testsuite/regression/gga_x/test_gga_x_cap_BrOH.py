
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_cap_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_cap", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.077164551280114e+01, -2.077167387401009e+01, -2.077186942978848e+01, -2.077140363042242e+01, -2.077165989251451e+01, -2.077165989251451e+01, -3.433687489627107e+00, -3.433664575847025e+00, -3.433176679628225e+00, -3.434745815472163e+00, -3.433690331403951e+00, -3.433690331403951e+00, -6.854213115190605e-01, -6.853912401641720e-01, -6.869188612608405e-01, -6.911643187920329e-01, -6.854068609519252e-01, -6.854068609519252e-01, -2.133458063359205e-01, -2.138399995718528e-01, -8.009866194623266e-01, -1.908618731219970e-01, -2.134584585301260e-01, -2.134584585301260e-01, -1.558460260096272e-01, -1.544143842991638e-01, -1.597508009515200e-01, -1.967976280071890e-01, -1.529770764752621e-01, -1.529770764752621e-01, -5.003395984896448e+00, -5.003059656585205e+00, -5.003367279954764e+00, -5.003105669455132e+00, -5.003215335115046e+00, -5.003215335115046e+00, -2.068835789023291e+00, -2.078507589337267e+00, -2.069893899002356e+00, -2.077388781874722e+00, -2.074127110380310e+00, -2.074127110380310e+00, -5.683386716452908e-01, -5.942672421139553e-01, -5.410497715520052e-01, -5.457509371894037e-01, -5.865525145424908e-01, -5.865525145424908e-01, -1.811597269585420e-01, -2.410892324536637e-01, -1.752393985824610e-01, -1.807757285883531e+00, -1.794884884890750e-01, -1.794884884890750e-01, -1.946224959880803e-01, -1.900466105883704e-01, -1.467631555694947e-01, -1.568734695069409e-01, -1.722548231551220e-01, -1.722548231551220e-01, -5.584204536487687e-01, -5.605047248105461e-01, -5.597976816206178e-01, -5.592209108764498e-01, -5.595121672069812e-01, -5.595121672069812e-01, -5.396465695879149e-01, -5.085320270587170e-01, -5.175775718049271e-01, -5.259461121109505e-01, -5.215373154358718e-01, -5.215373154358718e-01, -6.239273001867784e-01, -2.791403032727430e-01, -3.087141583751643e-01, -3.601173132473669e-01, -3.316686553466593e-01, -3.316686553466592e-01, -4.611809098926200e-01, -1.687466259321556e-01, -1.640960393654244e-01, -3.317830506615269e-01, -1.581294095025325e-01, -1.581294095025325e-01, -1.647639667759859e-01, -2.000117863252489e-01, -1.892053193699099e-01, -1.502366091111655e-01, -1.585638275167503e-01, -1.585638275167505e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_cap_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_cap", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.541882941341541e+01, -2.541891224651383e+01, -2.541929666285784e+01, -2.541793994309772e+01, -2.541887297240086e+01, -2.541887297240086e+01, -4.089628118609532e+00, -4.089664350428149e+00, -4.090828301251578e+00, -4.089689278240185e+00, -4.089664175090969e+00, -4.089664175090969e+00, -7.600704011371503e-01, -7.587245573837967e-01, -7.223402214392963e-01, -7.289565934857621e-01, -7.595823419362411e-01, -7.595823419362411e-01, -1.882453220953577e-01, -1.924104534110056e-01, -9.285995567123390e-01, -1.134377428937556e-01, -1.895177189544350e-01, -1.895177189544350e-01, 3.643701790608986e-02, 3.590169271985019e-02, 6.364027605117692e-03, 4.497553403642605e-02, 3.557193235117746e-02, 3.557193235117746e-02, -6.249954875587424e+00, -6.252287730610681e+00, -6.250194208224886e+00, -6.252008127896185e+00, -6.251150117256658e+00, -6.251150117256658e+00, -2.181001858068830e+00, -2.200300539485346e+00, -2.169243034872526e+00, -2.184330411124983e+00, -2.209258010338459e+00, -2.209258010338459e+00, -6.868586027067576e-01, -7.692412664917104e-01, -6.501225530979267e-01, -6.963187014716279e-01, -7.166794874227800e-01, -7.166794874227800e-01, -6.124282921715365e-02, -1.721970501997483e-01, -6.227786250543763e-02, -2.339552183680088e+00, -8.654733617975599e-02, -8.654733617975599e-02, 4.436981181997924e-02, 4.395681741467619e-02, 3.385930284864087e-02, -1.765176301042897e-02, 3.985907222556445e-02, 3.985907222556451e-02, -7.376340932905533e-01, -7.279285488823624e-01, -7.313151429962338e-01, -7.339955949979304e-01, -7.326471315219993e-01, -7.326471315219993e-01, -7.149809555054444e-01, -5.805862285610839e-01, -6.186152050327091e-01, -6.546172045904277e-01, -6.363133802823228e-01, -6.363133802823228e-01, -8.056392382540611e-01, -2.323248470719366e-01, -2.920168469203777e-01, -4.003847196692423e-01, -3.434148858323655e-01, -3.434148858323655e-01, -5.214788119917405e-01, 1.360282493450310e-02, -6.232462216897158e-03, -3.856208484386862e-01, -4.423235775241337e-02, -4.423235775241345e-02, 3.809016244473171e-02, 3.884233347587084e-02, 4.069439198400887e-02, -4.250068526110719e-02, 3.643624194245856e-02, 3.643624194245857e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_cap_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_cap", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.764637583095865e-09, -5.764602572557160e-09, -5.764374861272600e-09, -5.764949622019750e-09, -5.764619717577832e-09, -5.764619717577832e-09, -7.820246839507597e-06, -7.820381442014510e-06, -7.822796633301794e-06, -7.812013988698360e-06, -7.820182814320348e-06, -7.820182814320348e-06, -5.231938513431296e-03, -5.242178657807181e-03, -5.503254651194587e-03, -5.350412816249763e-03, -5.235721143067380e-03, -5.235721143067380e-03, -7.490297389333171e-01, -7.214979558298269e-01, -2.692365008582114e-03, -2.120485530245467e+00, -7.407699605579809e-01, -7.407699605579809e-01, -1.090439859723446e+04, -9.411482696609652e+03, -8.741009868940046e+01, -1.041322194985016e+05, -9.806657777616281e+03, -9.806657777616281e+03, -1.706407998444105e-06, -1.706875189961939e-06, -1.706447692373212e-06, -1.706811030443805e-06, -1.706657924286032e-06, -1.706657924286032e-06, -6.668596994837626e-05, -6.513328205172952e-05, -6.702219340126146e-05, -6.579804946705497e-05, -6.521310282392597e-05, -6.521310282392597e-05, -1.033697600795149e-02, -8.730744912888347e-03, -1.262192770777028e-02, -1.212107387411795e-02, -9.070893352889492e-03, -9.070893352889492e-03, -5.765002115746241e+00, -6.302503293066929e-01, -6.174663040804712e+00, -1.019315912224826e-04, -3.690942514600192e+00, -3.690942514600192e+00, -1.181002632866559e+05, -7.753087841110407e+04, -2.404722667466270e+05, -2.971830663726034e+01, -1.129120020143073e+05, -1.129120020143073e+05, -1.173031909607853e-02, -1.108148477715185e-02, -1.125158932352425e-02, -1.142079623583954e-02, -1.133111767595635e-02, -1.133111767595635e-02, -1.364448562948416e-02, -1.678923159927883e-02, -1.511666256706781e-02, -1.397723202811225e-02, -1.451974016236505e-02, -1.451974016236505e-02, -7.164512136199529e-03, -2.784614357718118e-01, -1.548036126635604e-01, -6.847872640298458e-02, -1.031761188862928e-01, -1.031761188862929e-01, -2.504154186108650e-02, -1.084856426023929e+02, -4.069651612150409e+01, -9.127178260289233e-02, -1.251522123061403e+01, -1.251522123061403e+01, -6.203534111199820e+03, -5.084645531651882e+06, -6.601917330577767e+05, -1.515838173050000e+01, -2.043783523498953e+05, -2.043783523498962e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
