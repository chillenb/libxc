
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_pbe_tca_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbe_tca", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.097384748913248e+01, -2.097387342039265e+01, -2.097405899447119e+01, -2.097367174807376e+01, -2.097386466250156e+01, -2.097386466250156e+01, -3.481911151812375e+00, -3.481870013722090e+00, -3.481004611344977e+00, -3.483170891019253e+00, -3.481946038829442e+00, -3.481946038829442e+00, -7.015839149480253e-01, -7.016922924469097e-01, -7.066534717197082e-01, -7.112843758403651e-01, -7.121100241899558e-01, -7.121100241899558e-01, -2.251525643294865e-01, -2.255940631540302e-01, -8.094860891432417e-01, -1.986965202690713e-01, -2.222045847787970e-01, -2.222045847787969e-01, -1.246873494445720e-02, -1.312849994383238e-02, -7.032287002129860e-02, -7.194631005803712e-03, -1.003808933885670e-02, -1.003808933885670e-02, -5.038682953026482e+00, -5.038009116536264e+00, -5.038662967920812e+00, -5.038067910581315e+00, -5.038335205055784e+00, -5.038335205055784e+00, -2.137034848785965e+00, -2.146152466052060e+00, -2.140368989236860e+00, -2.148381462854431e+00, -2.140521604511898e+00, -2.140521604511898e+00, -5.818072858508181e-01, -6.029157569664725e-01, -5.432404355761127e-01, -5.377656970999960e-01, -5.880378492400365e-01, -5.880378492400367e-01, -1.599507009987504e-01, -2.478278039772467e-01, -1.505491329451237e-01, -1.813866024583408e+00, -1.731759297713777e-01, -1.731759297713777e-01, -5.555104140031387e-03, -7.033096181050850e-03, -5.385062824610687e-03, -1.080883799514057e-01, -6.764095901302976e-03, -6.764095901302978e-03, -5.507775254544949e-01, -5.539920452334948e-01, -5.528708026035088e-01, -5.519307926960992e-01, -5.524009860946559e-01, -5.524009860946559e-01, -5.339892328113716e-01, -5.134702784055345e-01, -5.184887204354360e-01, -5.236888717873092e-01, -5.207525755801738e-01, -5.207525755801738e-01, -6.332335294000404e-01, -2.892736616887189e-01, -3.196690772646558e-01, -3.685490181597948e-01, -3.411952695561943e-01, -3.411952695561942e-01, -4.740155546346538e-01, -6.747027581253578e-02, -9.000767211410182e-02, -3.436646564438546e-01, -1.300952648606873e-01, -1.300952648606873e-01, -1.756011187858604e-02, -1.880386517353311e-03, -3.953970612069592e-03, -1.240098982438636e-01, -6.212014673498149e-03, -6.212014673498143e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_pbe_tca_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbe_tca", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.503963151872572e+01, -2.503960252835694e+01, -2.503975319818553e+01, -2.503969090057263e+01, -2.504010389908118e+01, -2.504020423003205e+01, -2.503873072789368e+01, -2.503845369160188e+01, -2.503970603885780e+01, -2.503912505631530e+01, -2.503970603885780e+01, -2.503912505631530e+01, -4.006962518308492e+00, -4.007214665758761e+00, -4.007013466133083e+00, -4.007277389390344e+00, -4.008368581503687e+00, -4.008747376571285e+00, -4.006666749815100e+00, -4.007060463199444e+00, -4.006171567203997e+00, -4.008334485487582e+00, -4.006171567203997e+00, -4.008334485487582e+00, -7.433550812128511e-01, -7.493141429960654e-01, -7.411855822316757e-01, -7.484717549328097e-01, -7.133511237467762e-01, -7.042082649165035e-01, -7.139070201675278e-01, -7.168816179819013e-01, -7.596899173269587e-01, -6.714272496988375e-01, -7.596899173269587e-01, -6.714272496988375e-01, -1.819414562040954e-01, -1.870967038108807e-01, -1.830128611890277e-01, -1.894073376131637e-01, -8.557361020577028e-01, -8.986321269904395e-01, -1.645039746979585e-01, -1.657987120922119e-01, -1.894005481935325e-01, -1.512758677924128e-01, -1.894005481935324e-01, -1.512758677924127e-01, -1.604216534859268e-02, -1.703982397162491e-02, -1.680329409120477e-02, -1.799098552773183e-02, -8.622860042616598e-02, -9.017087075601754e-02, -9.664022534510066e-03, -9.503488335953714e-03, -1.432072267083765e-02, -8.159649165223219e-03, -1.432072267083766e-02, -8.159649165223219e-03, -6.186727253547184e+00, -6.185169512111607e+00, -6.189749583277519e+00, -6.188089488104431e+00, -6.186893087924874e+00, -6.185268368694953e+00, -6.189486469116767e+00, -6.187921067578909e+00, -6.188277092087122e+00, -6.186636505815770e+00, -6.188277092087122e+00, -6.186636505815770e+00, -2.117053185798736e+00, -2.116936350308348e+00, -2.136343402263033e+00, -2.135673628183757e+00, -2.094591864205690e+00, -2.100933213854331e+00, -2.111118788730200e+00, -2.117652341749323e+00, -2.144911193171228e+00, -2.129126535393484e+00, -2.144911193171228e+00, -2.129126535393484e+00, -6.826610691823126e-01, -6.809577145895849e-01, -7.735856450904882e-01, -7.743505374604859e-01, -6.130273684316279e-01, -6.389427672399907e-01, -6.697043612362316e-01, -6.914837401548596e-01, -7.149862457639267e-01, -6.778163251929169e-01, -7.149862457639267e-01, -6.778163251929170e-01, -1.579714707430733e-01, -1.577064104546702e-01, -2.004066943654478e-01, -2.009370486130483e-01, -1.509145841150396e-01, -1.536749138291290e-01, -2.333869918768707e+00, -2.332886068544982e+00, -1.569687174168283e-01, -1.500707025613541e-01, -1.569687174168283e-01, -1.500707025613541e-01, -7.252578990940868e-03, -7.537159507707680e-03, -9.298304618017676e-03, -9.439141450057361e-03, -6.950348080227623e-03, -7.358597722714148e-03, -1.223998066254271e-01, -1.233326882651833e-01, -7.101604982799260e-03, -9.743212211685653e-03, -7.101604982799261e-03, -9.743212211685654e-03, -7.232619684522753e-01, -7.261985227891824e-01, -7.109101501998722e-01, -7.139308553377666e-01, -7.151927172896129e-01, -7.182119567325895e-01, -7.188097517208155e-01, -7.217512990856201e-01, -7.169968566363158e-01, -7.199760413394825e-01, -7.169968566363158e-01, -7.199760413394825e-01, -7.063461677050813e-01, -7.087008224152516e-01, -5.476409554218997e-01, -5.505615759050093e-01, -5.903017765651462e-01, -5.935895482347929e-01, -6.359798144961160e-01, -6.384463695583598e-01, -6.127792723595534e-01, -6.153119971203714e-01, -6.127792723595534e-01, -6.153119971203714e-01, -8.089723152125302e-01, -8.109564499797552e-01, -2.350026507996328e-01, -2.359685753601005e-01, -2.743523734774168e-01, -2.770863060245340e-01, -3.819062330036908e-01, -3.843485202265289e-01, -3.216894680367924e-01, -3.217432009433669e-01, -3.216894680367923e-01, -3.217432009433668e-01, -5.022945319320349e-01, -5.067128228012775e-01, -8.517275577574986e-02, -8.566154875287785e-02, -1.078618243184609e-01, -1.102863093856245e-01, -3.752009775729614e-01, -3.819815003187029e-01, -1.346405317862059e-01, -1.328932644517421e-01, -1.346405317862059e-01, -1.328932644517421e-01, -2.288592962574816e-02, -2.370366925888101e-02, -2.504069794204580e-03, -2.509659884515690e-03, -5.093396250045915e-03, -5.416774531099230e-03, -1.303198409891163e-01, -1.315005845783011e-01, -6.724539038350010e-03, -8.933086734108527e-03, -6.724539038350004e-03, -8.933086734108517e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_pbe_tca_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbe_tca", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.481382905913674e-08, 0.000000000000000e+00, -1.481390921213150e-08, -1.481368587230574e-08, 0.000000000000000e+00, -1.481380516261320e-08, -1.481312549799676e-08, 0.000000000000000e+00, -1.481303082969702e-08, -1.481474517343443e-08, 0.000000000000000e+00, -1.481509443829395e-08, -1.481374882550073e-08, 0.000000000000000e+00, -1.481419425727160e-08, -1.481374882550073e-08, 0.000000000000000e+00, -1.481419425727160e-08, -2.033766255456111e-05, 0.000000000000000e+00, -2.034217425074242e-05, -2.033783421702906e-05, 0.000000000000000e+00, -2.034271979308903e-05, -2.034576615356776e-05, 0.000000000000000e+00, -2.034736984379019e-05, -2.031888367410929e-05, 0.000000000000000e+00, -2.032148510148763e-05, -2.034992935786246e-05, 0.000000000000000e+00, -2.032685316396474e-05, -2.034992935786246e-05, 0.000000000000000e+00, -2.032685316396474e-05, -1.351902393016043e-02, 0.000000000000000e+00, -1.345730508942189e-02, -1.355046879967996e-02, 0.000000000000000e+00, -1.347517312109320e-02, -1.395880364999224e-02, 0.000000000000000e+00, -1.403967420476741e-02, -1.360641318816381e-02, 0.000000000000000e+00, -1.358623485193996e-02, -1.326730970695250e-02, 0.000000000000000e+00, -1.376689959026539e-02, -1.326730970695250e-02, 0.000000000000000e+00, -1.376689959026539e-02, -1.787711033960814e+00, 0.000000000000000e+00, -1.645007658271614e+00, -1.773729507899990e+00, 0.000000000000000e+00, -1.606003665198187e+00, -7.810129770587117e-03, 0.000000000000000e+00, -7.132074041679431e-03, -2.756126750486745e+00, 0.000000000000000e+00, -2.659081338134683e+00, -1.532619647496181e+00, 0.000000000000000e+00, -4.443440760018516e+00, -1.532619647496181e+00, 0.000000000000000e+00, -4.443440760018519e+00, -1.139948088087496e+01, 0.000000000000000e+00, -1.128332023981310e+01, -1.200895379792492e+01, 0.000000000000000e+00, -1.194487048451945e+01, -6.434157676635981e+00, 0.000000000000000e+00, -6.442036911645583e+00, -1.045073500925934e+01, 0.000000000000000e+00, -1.016726007698212e+01, -1.138359048896187e+01, 0.000000000000000e+00, -2.889863637006761e+01, -1.138359048896190e+01, 0.000000000000000e+00, -2.889863637006767e+01, -4.304378077060656e-06, 0.000000000000000e+00, -4.308405317937603e-06, -4.303608756724874e-06, 0.000000000000000e+00, -4.307662428336369e-06, -4.304307465442147e-06, 0.000000000000000e+00, -4.308359813563592e-06, -4.303647761348882e-06, 0.000000000000000e+00, -4.307685260249745e-06, -4.304006374716951e-06, 0.000000000000000e+00, -4.308036476295276e-06, -4.304006374716951e-06, 0.000000000000000e+00, -4.308036476295276e-06, -1.697052190012594e-04, 0.000000000000000e+00, -1.697364227736988e-04, -1.659047024447820e-04, 0.000000000000000e+00, -1.660591943211658e-04, -1.708221875897181e-04, 0.000000000000000e+00, -1.705710917188423e-04, -1.675444542747661e-04, 0.000000000000000e+00, -1.672220306425976e-04, -1.666268142512100e-04, 0.000000000000000e+00, -1.676831381625168e-04, -1.666268142512100e-04, 0.000000000000000e+00, -1.676831381625168e-04, -2.541850106555514e-02, 0.000000000000000e+00, -2.569766567012884e-02, -1.995201197169180e-02, 0.000000000000000e+00, -1.993428550014581e-02, -3.673842835897610e-02, 0.000000000000000e+00, -3.216654728879687e-02, -3.432105258150651e-02, 0.000000000000000e+00, -3.007817017573514e-02, -2.204004393479255e-02, 0.000000000000000e+00, -2.691667443898677e-02, -2.204004393479255e-02, 0.000000000000000e+00, -2.691667443898678e-02, -3.713919346925073e+00, 0.000000000000000e+00, -3.753644854549719e+00, -1.184964858317757e+00, 0.000000000000000e+00, -1.171365695336188e+00, -4.302528915585259e+00, 0.000000000000000e+00, -4.106090044610452e+00, -2.426209804836195e-04, 0.000000000000000e+00, -2.430691210120879e-04, -3.765750026929499e+00, 0.000000000000000e+00, -4.228582723798072e+00, -3.765750026929499e+00, 0.000000000000000e+00, -4.228582723798072e+00, -1.467318157533549e+01, 0.000000000000000e+00, -1.270013371150566e+01, -1.263272739307859e+01, 0.000000000000000e+00, -1.166355847996462e+01, -7.194585448826861e+01, 0.000000000000000e+00, -8.002576049190218e+01, -6.882659976872682e+00, 0.000000000000000e+00, -6.636187392171857e+00, -3.578335481896961e+01, 0.000000000000000e+00, -3.513410498286174e+01, -3.578335481896951e+01, 0.000000000000000e+00, -3.513410498286169e+01, -2.802792802927787e-02, 0.000000000000000e+00, -2.760759584451582e-02, -2.813065197715011e-02, 0.000000000000000e+00, -2.771197831092853e-02, -2.809459570349492e-02, 0.000000000000000e+00, -2.767516085665916e-02, -2.806535530840088e-02, 0.000000000000000e+00, -2.764577759784891e-02, -2.808011576204611e-02, 0.000000000000000e+00, -2.766057115073345e-02, -2.808011576204611e-02, 0.000000000000000e+00, -2.766057115073345e-02, -3.143282145512710e-02, 0.000000000000000e+00, -3.102202189530569e-02, -4.707821690550909e-02, 0.000000000000000e+00, -4.639747483149166e-02, -4.206586558795746e-02, 0.000000000000000e+00, -4.143125835030279e-02, -3.753893966448328e-02, 0.000000000000000e+00, -3.704119160802079e-02, -3.981781847916262e-02, 0.000000000000000e+00, -3.926528203413686e-02, -3.981781847916262e-02, 0.000000000000000e+00, -3.926528203413686e-02, -1.650065242952377e-02, 0.000000000000000e+00, -1.641705198197185e-02, -6.377956022949145e-01, 0.000000000000000e+00, -6.292316323295531e-01, -4.010328226366464e-01, 0.000000000000000e+00, -3.921676153566995e-01, -1.835593660151620e-01, 0.000000000000000e+00, -1.800292913442401e-01, -2.754593010113276e-01, 0.000000000000000e+00, -2.766753664031448e-01, -2.754593010113278e-01, 0.000000000000000e+00, -2.766753664031450e-01, -6.541929184082898e-02, 0.000000000000000e+00, -6.398495899509682e-02, -5.902705649731210e+00, 0.000000000000000e+00, -5.906770716695748e+00, -5.657786596590435e+00, 0.000000000000000e+00, -5.751619261773499e+00, -2.313295458273812e-01, 0.000000000000000e+00, -2.194792060206537e-01, -6.458689874395184e+00, 0.000000000000000e+00, -7.302235585724733e+00, -6.458689874395190e+00, 0.000000000000000e+00, -7.302235585724737e+00, -9.023701634965049e+00, 0.000000000000000e+00, -9.209994293531629e+00, -4.515789988577804e+01, 0.000000000000000e+00, -7.998857125085205e+01, -2.786657707983221e+01, 0.000000000000000e+00, -2.966477464943577e+01, -7.243548739711608e+00, 0.000000000000000e+00, -7.066409050360724e+00, -7.376463679176099e+01, 0.000000000000000e+00, -3.647831928001749e+01, -7.376463679176109e+01, 0.000000000000000e+00, -3.647831928001757e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
