
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_hjs_b88_v2_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_hjs_b88_v2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.099852011849911e+01, -2.099854689385248e+01, -2.099873532875467e+01, -2.099833553405339e+01, -2.099853514956347e+01, -2.099853514956347e+01, -3.431457396034055e+00, -3.431418974456147e+00, -3.430616376968614e+00, -3.432675239286733e+00, -3.431495542332984e+00, -3.431495542332984e+00, -6.394659538503036e-01, -6.394685007890659e-01, -6.414479823860719e-01, -6.462360427853334e-01, -6.443842473206355e-01, -6.443842473206355e-01, -1.587323034847185e-01, -1.593890550897530e-01, -7.477093557496516e-01, -1.341122060333330e-01, -1.419766179551770e-01, -1.419766179551770e-01, 0.000000000000000e+00, 0.000000000000000e+00, -5.725240912613298e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -4.997904824949399e+00, -4.997207623387165e+00, -4.997883928908958e+00, -4.997268278110145e+00, -4.997545324452836e+00, -4.997545324452836e+00, -2.062640886793169e+00, -2.072538407922553e+00, -2.064010261589271e+00, -2.072734429848268e+00, -2.067456255107420e+00, -2.067456255107420e+00, -5.226758496865741e-01, -5.441103317314070e-01, -4.834427140623837e-01, -4.788329572712172e-01, -5.284267161398959e-01, -5.284267161398959e-01, -1.089270405791470e-01, -1.799274624147135e-01, -1.020766737114286e-01, -1.757416406249542e+00, -1.129926278985720e-01, -1.129926278985720e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -7.382064197587897e-02, 0.000000000000000e+00, 0.000000000000000e+00, -4.915822329720275e-01, -4.951932136276675e-01, -4.939621414031939e-01, -4.929078969636307e-01, -4.934379898769307e-01, -4.934379898769307e-01, -4.746841306977642e-01, -4.518953493078560e-01, -4.587717422317867e-01, -4.649532608940916e-01, -4.616478044769186e-01, -4.616478044769186e-01, -5.744763961548156e-01, -2.201615030466702e-01, -2.521144223170322e-01, -3.067179033637734e-01, -2.765540886837465e-01, -2.765540886837464e-01, -4.123787282273264e-01, -5.738348922251502e-02, -6.890201219760327e-02, -2.834597564629837e-01, -8.276538073981639e-02, -8.276538073981636e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -7.956683926813035e-02, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_hjs_b88_v2_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_hjs_b88_v2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.514731489160734e+01, -2.514741002265793e+01, -2.514781482762852e+01, -2.514639985436511e+01, -2.514714384236168e+01, -2.514714384236168e+01, -3.995677858734185e+00, -3.995717253891745e+00, -3.996728303258527e+00, -3.995742121620192e+00, -3.995822904861647e+00, -3.995822904861647e+00, -7.056696931087846e-01, -7.044169640562002e-01, -6.739876291494395e-01, -6.805497462664987e-01, -6.795302409734215e-01, -6.795302409734215e-01, -1.294392296937448e-01, -1.323912973425904e-01, -8.371406478223195e-01, -8.562341765068622e-02, -1.019107658676628e-01, -1.019107658676629e-01, 0.000000000000000e+00, 0.000000000000000e+00, -1.918069276888484e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -6.143408255452680e+00, -6.145949680913482e+00, -6.143522847454928e+00, -6.145766429212204e+00, -6.144697430089145e+00, -6.144697430089145e+00, -2.138738351124084e+00, -2.156944107893745e+00, -2.122237030010525e+00, -2.138174274941250e+00, -2.156955589139736e+00, -2.156955589139736e+00, -6.281129432126340e-01, -7.136916423946460e-01, -5.737320083624311e-01, -6.213939931089789e-01, -6.420257280968664e-01, -6.420257280968664e-01, -4.910688993278391e-02, -1.291785580553345e-01, -4.279852847659344e-02, -2.270056012127398e+00, -6.211684970987626e-02, -6.211684970987626e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.836069795381890e-02, 0.000000000000000e+00, 0.000000000000000e+00, -6.641863161707505e-01, -6.523266981658720e-01, -6.563670453959828e-01, -6.598085590330873e-01, -6.580749161223295e-01, -6.580749161223295e-01, -6.470796920470424e-01, -5.031421826812851e-01, -5.401611959632754e-01, -5.803115128482851e-01, -5.595001136488410e-01, -5.595001136488410e-01, -7.497046619092124e-01, -1.783421671806810e-01, -2.279918401318052e-01, -3.356595160986023e-01, -2.766509809409217e-01, -2.766509809409213e-01, -4.580197819377871e-01, -8.929504643669330e-04, -1.039367047114220e-02, -3.277570653397475e-01, -3.067096040046024e-02, -3.067096040046023e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -2.698203170376008e-02, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_hjs_b88_v2_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_hjs_b88_v2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-7.269924523768428e-09, -7.269888460729317e-09, -7.269630863483296e-09, -7.270169430525492e-09, -7.269901052064504e-09, -7.269901052064504e-09, -9.606723550229677e-06, -9.607131047332868e-06, -9.615618311953445e-06, -9.593584521973441e-06, -9.606285875386791e-06, -9.606285875386791e-06, -5.968397103710228e-03, -5.972566545357090e-03, -6.050407072116811e-03, -5.880755723288579e-03, -5.937952287871709e-03, -5.937952287871709e-03, -7.497599838267582e-01, -7.297895082071835e-01, -3.346511796578016e-03, -1.516152502683958e+00, -1.151846791050410e+00, -1.151846791050408e+00, 0.000000000000000e+00, 0.000000000000000e+00, -5.394150335260673e+01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -2.188955486423583e-06, -2.190456406398765e-06, -2.189003642708729e-06, -2.190328817729566e-06, -2.189726559628533e-06, -2.189726559628533e-06, -7.324167744803824e-05, -7.173216783506239e-05, -7.342583091779232e-05, -7.209039007959345e-05, -7.231202144915037e-05, -7.231202144915037e-05, -1.208188947286287e-02, -1.044382481464843e-02, -1.596260978147671e-02, -1.631732011632444e-02, -1.159893228725888e-02, -1.159893228725888e-02, -3.845487690073166e+00, -5.900022760289263e-01, -4.844817759724159e+00, -1.335673889394792e-04, -2.767498223417433e+00, -2.767498223417433e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.537682525376327e+01, 0.000000000000000e+00, 0.000000000000000e+00, -1.504885974816354e-02, -1.454573831131165e-02, -1.470484203412466e-02, -1.485081900663523e-02, -1.477621983065040e-02, -1.477621983065040e-02, -1.706019487965364e-02, -2.060706402823499e-02, -1.922101927701012e-02, -1.812236300958751e-02, -1.868427949766854e-02, -1.868427949766854e-02, -8.607336903662770e-03, -2.842316549927941e-01, -1.685305041450996e-01, -7.809630215189578e-02, -1.159298583662015e-01, -1.159298583662016e-01, -2.838481354059350e-02, -5.928787632264421e+01, -2.573303250559843e+01, -9.856457835798456e-02, -8.456281740711299e+00, -8.456281740711308e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -9.979590245433981e+00, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
