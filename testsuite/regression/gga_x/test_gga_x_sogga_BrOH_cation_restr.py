
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_sogga_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_sogga", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.047187814029400e+01, -2.047191680863342e+01, -2.047213589786251e+01, -2.047155962053077e+01, -2.047185486745357e+01, -2.047185486745357e+01, -3.371058784844148e+00, -3.371038467554382e+00, -3.370651584863513e+00, -3.371964657157953e+00, -3.371115687379094e+00, -3.371115687379094e+00, -6.672570151665280e-01, -6.670209000364200e-01, -6.627802798660026e-01, -6.675897684757132e-01, -6.660155072068470e-01, -6.660155072068470e-01, -1.975955865752697e-01, -1.988542802999541e-01, -7.728698833834681e-01, -1.657392369853118e-01, -1.778338580979568e-01, -1.778338580979568e-01, -8.681073164293139e-03, -9.136810385313332e-03, -5.003892031250091e-02, -5.014613084982021e-03, -6.300778283804492e-03, -6.300778283804492e-03, -4.948435127784746e+00, -4.948440369507862e+00, -4.948443053681820e+00, -4.948447562739512e+00, -4.948433503975278e+00, -4.948433503975278e+00, -1.998334834780456e+00, -2.009172847326484e+00, -1.996147961391684e+00, -2.005697308118638e+00, -2.005402825081898e+00, -2.005402825081898e+00, -5.655536393698690e-01, -5.979331959484055e-01, -5.259017244032840e-01, -5.314788262953356e-01, -5.725018802965880e-01, -5.725018802965880e-01, -1.251282155295215e-01, -2.107498656173014e-01, -1.165513405791392e-01, -1.799706453497749e+00, -1.408040684344538e-01, -1.408040684344538e-01, -3.869224140423981e-03, -4.902210805875069e-03, -3.748294211362298e-03, -8.007864141964666e-02, -4.515538901329103e-03, -4.515538901329103e-03, -5.491849743667019e-01, -5.496240019399261e-01, -5.494745695786208e-01, -5.493426733407314e-01, -5.494084658476099e-01, -5.494084658476099e-01, -5.332531656211255e-01, -4.889434329011979e-01, -5.010859029540395e-01, -5.132990853582873e-01, -5.068982378037730e-01, -5.068982378037730e-01, -6.275032037581918e-01, -2.526252169380342e-01, -2.873317804207652e-01, -3.486420770160955e-01, -3.150511213227898e-01, -3.150511213227898e-01, -4.508709117313638e-01, -4.793953648709960e-02, -6.498537506692106e-02, -3.294464120495858e-01, -1.001726480213431e-01, -1.001726480213431e-01, -1.224877572118002e-02, -1.310501033168666e-03, -2.750711052224906e-03, -9.458087284114722e-02, -4.178308486065273e-03, -4.178308486065269e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_sogga_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_sogga", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.564045432654919e+01, -2.564054604002159e+01, -2.564094343219587e+01, -2.563957913125803e+01, -2.564029546788266e+01, -2.564029546788266e+01, -4.134368015734594e+00, -4.134404852380113e+00, -4.135357939926378e+00, -4.134486260007270e+00, -4.134511845263081e+00, -4.134511845263081e+00, -7.818847908376656e-01, -7.806179448466009e-01, -7.501015615092677e-01, -7.567765763734816e-01, -7.557173663755147e-01, -7.557173663755147e-01, -1.965884258525044e-01, -1.988781518150594e-01, -9.160687217298984e-01, -1.672110492931939e-01, -1.749787668997389e-01, -1.749787668997389e-01, -1.156785646830539e-02, -1.217413705578662e-02, -6.573118343903434e-02, -6.684880568157596e-03, -8.398198426140098e-03, -8.398198426140098e-03, -6.297208752978207e+00, -6.299412269058931e+00, -6.297309587175452e+00, -6.299254877505573e+00, -6.298326037341994e+00, -6.298326037341994e+00, -2.244809206602166e+00, -2.263332755848474e+00, -2.227984787517647e+00, -2.244256984262505e+00, -2.263300447884533e+00, -2.263300447884533e+00, -7.008658087367772e-01, -7.803860281098149e-01, -6.458267476485042e-01, -6.883948370092763e-01, -7.144831382309342e-01, -7.144831382309342e-01, -1.479396967971774e-01, -2.078063569564842e-01, -1.406425758281665e-01, -2.351652674455718e+00, -1.505347279495672e-01, -1.505347279495672e-01, -5.158295665020004e-03, -6.534993691362663e-03, -4.996283691573620e-03, -1.025486295329893e-01, -6.018998783466059e-03, -6.018998783466059e-03, -7.268265202431586e-01, -7.180542734110458e-01, -7.211150431495510e-01, -7.236633429558066e-01, -7.223862771646936e-01, -7.223862771646936e-01, -7.084975972286908e-01, -5.747006222962350e-01, -6.117370805161647e-01, -6.499027797227136e-01, -6.304024665776233e-01, -6.304024665776233e-01, -8.173203886507963e-01, -2.500668580671793e-01, -2.960223929941302e-01, -4.030422181722488e-01, -3.434620658095813e-01, -3.434620658095813e-01, -5.284935662827945e-01, -6.308691918508419e-02, -8.462507384656717e-02, -3.940416849188812e-01, -1.222028952599686e-01, -1.222028952599686e-01, -1.631429686156328e-02, -1.747280209705181e-03, -3.667264157748585e-03, -1.173031053599283e-01, -5.569546666859253e-03, -5.569546666859248e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_sogga_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_sogga", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.191167553181876e-09, -4.191131840946961e-09, -4.190940935352949e-09, -4.191472931247848e-09, -4.191198738198905e-09, -4.191198738198905e-09, -5.767510308444377e-06, -5.767602614292145e-06, -5.769169765516248e-06, -5.762065290671464e-06, -5.767064876181891e-06, -5.767064876181891e-06, -3.844667936048862e-03, -3.852357124597652e-03, -4.007485289132604e-03, -3.890876184798744e-03, -3.926371417261292e-03, -3.926371417261292e-03, -4.959118029931152e-01, -4.883240433262469e-01, -2.124495281056118e-03, -7.295480981729685e-01, -6.747586618633186e-01, -6.747586618633186e-01, -1.020733529150106e+00, -1.078277690677360e+00, -5.920473334641549e-01, -9.279871813955500e-01, -1.178789550135304e+00, -1.178789550135307e+00, -1.216385178827733e-06, -1.216128870377839e-06, -1.216367011723517e-06, -1.216140840999569e-06, -1.216258809287490e-06, -1.216258809287490e-06, -4.862278191988463e-05, -4.753517000032740e-05, -4.894160001404731e-05, -4.797669376954419e-05, -4.786159213503006e-05, -4.786159213503006e-05, -7.238903569273656e-03, -5.619240828992731e-03, -9.730300587903241e-03, -9.044413404749031e-03, -6.866614234987695e-03, -6.866614234987695e-03, -6.366217826753577e-01, -3.322649609338849e-01, -6.434983770530915e-01, -6.841670832784805e-05, -9.655944603158870e-01, -9.655944603158870e-01, -1.222825878212384e+00, -1.092159234007198e+00, -6.858185683898826e+00, -6.715442240678237e-01, -3.191519011570052e+00, -3.191519011570046e+00, -7.827374305143311e-03, -7.866032878888797e-03, -7.852408802738443e-03, -7.841388258886903e-03, -7.846930181819475e-03, -7.846930181819475e-03, -8.783755152331717e-03, -1.331613674118293e-02, -1.184343654597708e-02, -1.053797893542724e-02, -1.119501327539858e-02, -1.119501327539858e-02, -4.638413572862312e-03, -1.829643381406806e-01, -1.147447303386049e-01, -5.189565016424094e-02, -7.938494772998922e-02, -7.938494772998925e-02, -1.843991835152303e-02, -5.413248998128336e-01, -5.318446329650344e-01, -6.406229551789550e-02, -9.931414554250364e-01, -9.931414554250377e-01, -8.221768969818432e-01, -5.360692132787487e+00, -2.594223681369408e+00, -9.151852500645212e-01, -4.031224771327451e+00, -4.031224771327460e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
