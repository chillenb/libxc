
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_vmt84_ge_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_vmt84_ge", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.047965153487391e+01, -2.047968978588464e+01, -2.047990773064857e+01, -2.047933764986386e+01, -2.047962955130600e+01, -2.047962955130600e+01, -3.373395705123078e+00, -3.373374498315055e+00, -3.372967124755657e+00, -3.374316335102711e+00, -3.373451856283705e+00, -3.373451856283705e+00, -6.684457428795190e-01, -6.682397955396404e-01, -6.648167943663148e-01, -6.695706260518887e-01, -6.705014067230743e-01, -6.705014067230743e-01, -2.010617443516311e-01, -2.020659613095567e-01, -7.744677379697584e-01, -1.731946098618811e-01, -1.976581616988772e-01, -1.976581616988771e-01, -5.260107760537048e-03, -5.578780605187530e-03, -5.603650534774463e-02, -2.664221666636787e-03, -4.120413162019883e-03, -4.120413162019884e-03, -4.949466152986688e+00, -4.949455810404174e+00, -4.949473439884688e+00, -4.949464174838887e+00, -4.949456573297052e+00, -4.949456573297052e+00, -2.005065230645865e+00, -2.015680356723172e+00, -2.003493472156353e+00, -2.012831386054937e+00, -2.011756382581726e+00, -2.011756382581726e+00, -5.658540901311546e-01, -5.979601763706033e-01, -5.265786066445415e-01, -5.317998187547862e-01, -5.734464291348166e-01, -5.734464291348167e-01, -1.388578951221334e-01, -2.174682993377642e-01, -1.307655259633494e-01, -1.799776841261332e+00, -1.503547195257678e-01, -1.503547195257678e-01, -1.882544587533744e-03, -2.622000821838479e-03, -2.129576312884743e-03, -9.378789559443459e-02, -2.694025656637905e-03, -2.694025656637906e-03, -5.491922589065121e-01, -5.496500667769010e-01, -5.494921459081833e-01, -5.493546997313814e-01, -5.494230872834172e-01, -5.494230872834172e-01, -5.332570047613676e-01, -4.897665221268859e-01, -5.014794408679459e-01, -5.134341544613441e-01, -5.071418233949689e-01, -5.071418233949689e-01, -6.275396816581993e-01, -2.574265084276401e-01, -2.902470269379324e-01, -3.494163856716750e-01, -3.166288863059935e-01, -3.166288863059935e-01, -4.516773953984042e-01, -5.211307251184086e-02, -7.642700478172701e-02, -3.298907445618201e-01, -1.130313599805853e-01, -1.130313599805853e-01, -7.600268176130224e-03, -2.634781231059102e-04, -1.212514625101527e-03, -1.077984465835471e-01, -2.461478074912825e-03, -2.461478074912822e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_vmt84_ge_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_vmt84_ge", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.561138756795491e+01, -2.561135660411425e+01, -2.561149558538307e+01, -2.561143506039276e+01, -2.561182368406879e+01, -2.561191009304336e+01, -2.561060425796268e+01, -2.561035568606976e+01, -2.561145287401236e+01, -2.561096417865976e+01, -2.561145287401236e+01, -2.561096417865976e+01, -4.125706961280644e+00, -4.125848651921017e+00, -4.125744653725548e+00, -4.125890954761887e+00, -4.126705585459986e+00, -4.126981579561194e+00, -4.125705770948061e+00, -4.125981548637476e+00, -4.124939038039781e+00, -4.126910863707805e+00, -4.124939038039781e+00, -4.126910863707805e+00, -7.751106961705643e-01, -7.803567497347574e-01, -7.731654841056570e-01, -7.795938766852260e-01, -7.475956393758521e-01, -7.389866813628794e-01, -7.486843493474337e-01, -7.514656650911318e-01, -7.896160680082238e-01, -7.060711517668626e-01, -7.896160680082238e-01, -7.060711517668626e-01, -1.840361875774695e-01, -1.911554709119445e-01, -1.862397095056515e-01, -1.947035774761487e-01, -8.917145222007163e-01, -9.315829348977489e-01, -1.513552853030816e-01, -1.529267015681902e-01, -1.921208269636774e-01, -1.307286548165753e-01, -1.921208269636774e-01, -1.307286548165751e-01, -7.599387242493770e-03, -8.022878435817839e-03, -7.910219656754737e-03, -8.413983131223211e-03, -9.950123679973603e-02, -1.001985399602960e-01, -4.942733850422446e-03, -4.880655693562187e-03, -6.874907369049387e-03, -4.112921209705287e-03, -6.874907369049382e-03, -4.112921209705298e-03, -6.294085125548469e+00, -6.292531760262359e+00, -6.296385798000855e+00, -6.294754452005922e+00, -6.294214265496364e+00, -6.292609084336489e+00, -6.296188386810795e+00, -6.294628303778760e+00, -6.295262723881978e+00, -6.293648119373084e+00, -6.295262723881978e+00, -6.293648119373084e+00, -2.222321557910572e+00, -2.222200913687264e+00, -2.241798712293645e+00, -2.241114795899213e+00, -2.200491508292154e+00, -2.206677934407994e+00, -2.217308630530283e+00, -2.223662056348490e+00, -2.249536557289090e+00, -2.234392103495137e+00, -2.249536557289090e+00, -2.234392103495137e+00, -7.006561583228496e-01, -6.988669023658828e-01, -7.799886068815146e-01, -7.805825027720318e-01, -6.315890148271263e-01, -6.569833853965210e-01, -6.769543651783171e-01, -6.991701972270168e-01, -7.318386503097007e-01, -6.944075242696105e-01, -7.318386503097009e-01, -6.944075242696107e-01, -1.356439839922892e-01, -1.354490831082990e-01, -1.921073667558734e-01, -1.928714698096070e-01, -1.297557956980856e-01, -1.319540365624279e-01, -2.351895166842068e+00, -2.350875963833253e+00, -1.367632210390404e-01, -1.341651974067794e-01, -1.367632210390404e-01, -1.341651974067794e-01, -3.839586496398524e-03, -3.988727870133918e-03, -4.748405879420545e-03, -4.824445180906516e-03, -3.464529350511412e-03, -3.620469841684707e-03, -1.094211957192533e-01, -1.103365546157675e-01, -3.632410842935508e-03, -4.741856177663432e-03, -3.632410842935510e-03, -4.741856177663427e-03, -7.253701462548032e-01, -7.282541168324242e-01, -7.164983515300803e-01, -7.194377350173006e-01, -7.195915753336842e-01, -7.225312294127365e-01, -7.221880772561691e-01, -7.250735520202855e-01, -7.208880314843270e-01, -7.237997365389706e-01, -7.208880314843270e-01, -7.237997365389706e-01, -7.073181597953049e-01, -7.096674686789787e-01, -5.703779166432227e-01, -5.732408728141062e-01, -6.087417091714985e-01, -6.118784939137047e-01, -6.481933181441608e-01, -6.506125736027734e-01, -6.282591650490154e-01, -6.307539617720239e-01, -6.282591650490154e-01, -6.307539617720239e-01, -8.163322970886475e-01, -8.180496671240403e-01, -2.369064171562883e-01, -2.382267059263437e-01, -2.858549905746467e-01, -2.891468912190846e-01, -3.991458586423743e-01, -4.016018383727366e-01, -3.383586843076897e-01, -3.384117036632081e-01, -3.383586843076896e-01, -3.384117036632081e-01, -5.235476974524971e-01, -5.278445261707280e-01, -1.010534325783971e-01, -1.011505758537154e-01, -1.068772266249731e-01, -1.073331970737970e-01, -3.892535849106372e-01, -3.958898993256472e-01, -1.162467003495351e-01, -1.141298323244912e-01, -1.162467003495351e-01, -1.141298323244912e-01, -1.054785683189852e-02, -1.089100348721620e-02, -1.078584011034422e-03, -1.239674413982301e-03, -2.762983421532035e-03, -2.915520661252395e-03, -1.126832937930482e-01, -1.135827104254875e-01, -3.366611156243377e-03, -4.396792166926924e-03, -3.366611156243374e-03, -4.396792166926915e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_vmt84_ge_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_vmt84_ge", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-8.582058127280085e-09, 0.000000000000000e+00, -8.582103896709714e-09, -8.581966834235263e-09, 0.000000000000000e+00, -8.582037563340431e-09, -8.581626665610056e-09, 0.000000000000000e+00, -8.581563597142801e-09, -8.582658907707899e-09, 0.000000000000000e+00, -8.582878904081557e-09, -8.582006107680657e-09, 0.000000000000000e+00, -8.582317715188000e-09, -8.582006107680657e-09, 0.000000000000000e+00, -8.582317715188000e-09, -1.190868367719789e-05, 0.000000000000000e+00, -1.191073873590694e-05, -1.190871071999673e-05, 0.000000000000000e+00, -1.191094736128506e-05, -1.191119652972110e-05, 0.000000000000000e+00, -1.191156976685116e-05, -1.189919730473109e-05, 0.000000000000000e+00, -1.190007531067964e-05, -1.191609793785128e-05, 0.000000000000000e+00, -1.190131709544378e-05, -1.191609793785128e-05, 0.000000000000000e+00, -1.190131709544378e-05, -8.128266382168615e-03, 0.000000000000000e+00, -8.065217977981010e-03, -8.156238831193549e-03, 0.000000000000000e+00, -8.078911443157002e-03, -8.531926671079418e-03, 0.000000000000000e+00, -8.633633279395302e-03, -8.341085418707917e-03, 0.000000000000000e+00, -8.312122769982746e-03, -7.914154521526977e-03, 0.000000000000000e+00, -8.738048045365774e-03, -7.914154521526977e-03, 0.000000000000000e+00, -8.738048045365774e-03, -1.252632736257873e+00, 0.000000000000000e+00, -1.134532612012890e+00, -1.231302619093413e+00, 0.000000000000000e+00, -1.095799388165848e+00, -4.687810458010667e-03, 0.000000000000000e+00, -4.230095450138143e-03, -2.179673905913194e+00, 0.000000000000000e+00, -2.096230555229853e+00, -1.069308528896288e+00, 0.000000000000000e+00, -3.890072507701412e+00, -1.069308528896287e+00, 0.000000000000000e+00, -3.890072507701420e+00, 2.749253778869024e+02, 0.000000000000000e+00, 2.148253643464964e+02, 2.271332456452876e+02, 0.000000000000000e+00, 1.708881884730367e+02, 3.613488321849100e+01, 0.000000000000000e+00, 2.552013768611270e+01, 1.930739162983704e+03, 0.000000000000000e+00, 2.047165632218502e+03, 4.333870771126840e+02, 0.000000000000000e+00, 3.901399407879047e+03, 4.333870771126840e+02, 0.000000000000000e+00, 3.901399407879092e+03, -2.474278578943985e-06, 0.000000000000000e+00, -2.476610775763039e-06, -2.473412994863751e-06, 0.000000000000000e+00, -2.475774137850125e-06, -2.474216315627126e-06, 0.000000000000000e+00, -2.476571868642513e-06, -2.473473794952529e-06, 0.000000000000000e+00, -2.475811979896271e-06, -2.473846461424115e-06, 0.000000000000000e+00, -2.476192641327702e-06, -2.473846461424115e-06, 0.000000000000000e+00, -2.476192641327702e-06, -1.045404433263670e-04, 0.000000000000000e+00, -1.045601924149566e-04, -1.020102344572822e-04, 0.000000000000000e+00, -1.021096871074511e-04, -1.057574912131206e-04, 0.000000000000000e+00, -1.054445558765862e-04, -1.035526642809372e-04, 0.000000000000000e+00, -1.032036407752964e-04, -1.021755206823850e-04, 0.000000000000000e+00, -1.031437925195768e-04, -1.021755206823850e-04, 0.000000000000000e+00, -1.031437925195768e-04, -1.480498312861113e-02, 0.000000000000000e+00, -1.496616753493545e-02, -1.133452656649475e-02, 0.000000000000000e+00, -1.132125147798435e-02, -2.153549845492499e-02, 0.000000000000000e+00, -1.879161221092141e-02, -1.955980409070842e-02, 0.000000000000000e+00, -1.714808338135740e-02, -1.278240693404685e-02, 0.000000000000000e+00, -1.563205397398408e-02, -1.278240693404686e-02, 0.000000000000000e+00, -1.563205397398408e-02, -3.326491299379948e+00, 0.000000000000000e+00, -3.355549764153583e+00, -8.907573873187959e-01, 0.000000000000000e+00, -8.791097757040380e-01, -3.866432148741400e+00, 0.000000000000000e+00, -3.687241889236100e+00, -1.377362679287054e-04, 0.000000000000000e+00, -1.379886575712014e-04, -3.236256161388152e+00, 0.000000000000000e+00, -3.478414167766365e+00, -3.236256161388152e+00, 0.000000000000000e+00, -3.478414167766365e+00, 5.565238869716559e+03, 0.000000000000000e+00, 4.777389971786773e+03, 2.259738484647079e+03, 0.000000000000000e+00, 2.124280415669562e+03, 7.539197193372706e+03, 0.000000000000000e+00, 6.100882109810597e+03, -4.931769857587163e+00, 0.000000000000000e+00, -4.719706535603020e+00, 6.620197218963478e+03, 0.000000000000000e+00, 2.006362462867658e+03, 6.620197218963483e+03, 0.000000000000000e+00, 2.006362462867652e+03, -1.581964814199663e-02, 0.000000000000000e+00, -1.558085677630737e-02, -1.597251085657318e-02, 0.000000000000000e+00, -1.573193758331253e-02, -1.591872682743091e-02, 0.000000000000000e+00, -1.567847310609435e-02, -1.587439100516868e-02, 0.000000000000000e+00, -1.563525683630644e-02, -1.589661410488561e-02, 0.000000000000000e+00, -1.565691259671375e-02, -1.589661410488561e-02, 0.000000000000000e+00, -1.565691259671375e-02, -1.770951444663211e-02, 0.000000000000000e+00, -1.747782016396788e-02, -2.822099627837961e-02, 0.000000000000000e+00, -2.779123663358401e-02, -2.469898764157869e-02, 0.000000000000000e+00, -2.430843995813794e-02, -2.163390176249376e-02, 0.000000000000000e+00, -2.134260867272418e-02, -2.315225990027058e-02, 0.000000000000000e+00, -2.282516856817672e-02, -2.315225990027058e-02, 0.000000000000000e+00, -2.282516856817672e-02, -9.383411314550472e-03, 0.000000000000000e+00, -9.331788191466611e-03, -4.491363675254198e-01, 0.000000000000000e+00, -4.421604672038580e-01, -2.656665952915553e-01, 0.000000000000000e+00, -2.586617350491399e-01, -1.111060539227948e-01, 0.000000000000000e+00, -1.088881701520460e-01, -1.733272337980501e-01, 0.000000000000000e+00, -1.739528064973387e-01, -1.733272337980503e-01, 0.000000000000000e+00, -1.739528064973387e-01, -3.929242282552877e-02, 0.000000000000000e+00, -3.837301924537097e-02, 4.192789179516252e+01, 0.000000000000000e+00, 4.033741077823637e+01, 3.757772533783979e+00, 0.000000000000000e+00, 1.885899952623418e+00, -1.374228211511064e-01, 0.000000000000000e+00, -1.301083207086399e-01, -5.754726007057167e+00, 0.000000000000000e+00, -6.561739582661449e+00, -5.754726007057183e+00, 0.000000000000000e+00, -6.561739582661455e+00, 6.121481038427918e+01, 0.000000000000000e+00, 5.183560485395834e+01, 1.352461319536540e+05, 0.000000000000000e+00, 1.883168389305090e+05, 2.007265248108208e+04, 0.000000000000000e+00, 1.664021172079965e+04, -6.425882039571206e+00, 0.000000000000000e+00, -6.288870979307333e+00, 8.549257481010392e+03, 0.000000000000000e+00, 2.807895750921158e+03, 8.549257481010432e+03, 0.000000000000000e+00, 2.807895750921160e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
