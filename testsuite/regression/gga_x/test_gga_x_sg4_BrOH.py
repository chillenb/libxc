
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_sg4_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_sg4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.101460332913074e+01, -2.101462846398563e+01, -2.101481557829729e+01, -2.101440248521932e+01, -2.101461595762918e+01, -2.101461595762918e+01, -3.480357612656844e+00, -3.480331743039994e+00, -3.479764103502141e+00, -3.481480026337363e+00, -3.480359133109834e+00, -3.480359133109834e+00, -6.947279375476567e-01, -6.946421737100894e-01, -6.935715255292573e-01, -6.980564790088348e-01, -6.946936870754088e-01, -6.946936870754088e-01, -2.097995369253626e-01, -2.110419121264804e-01, -8.125188945635815e-01, -1.734319063985407e-01, -2.101518406082318e-01, -2.101518406082318e-01, -1.704638270135002e-02, -1.785487498120666e-02, -7.230474708757099e-02, -8.179263595217303e-03, -1.766881795727590e-02, -1.766881795727590e-02, -5.051047700422728e+00, -5.050441899192464e+00, -5.050992161063308e+00, -5.050521018964522e+00, -5.050728053674121e+00, -5.050728053674121e+00, -2.089378779995720e+00, -2.099959966521618e+00, -2.089238423436373e+00, -2.097491004778957e+00, -2.096684286642642e+00, -2.096684286642642e+00, -5.755614562699376e-01, -5.969218310116724e-01, -5.481351919422839e-01, -5.493954749825070e-01, -5.934935953226815e-01, -5.934935953226815e-01, -1.469656852692921e-01, -2.272950359434270e-01, -1.437247600825016e-01, -1.815890602131305e+00, -1.566196112998416e-01, -1.566196112998416e-01, -7.890444144802113e-03, -9.017367514903528e-03, -6.758581995135253e-03, -9.936198264301702e-02, -8.216215725225609e-03, -8.216215725225609e-03, -5.591248948190695e-01, -5.627153261925028e-01, -5.614764146567074e-01, -5.604798210602110e-01, -5.609816248246895e-01, -5.609816248246895e-01, -5.400878982616230e-01, -5.158553000425734e-01, -5.245177323783510e-01, -5.311789337558511e-01, -5.277751398689022e-01, -5.277751398689022e-01, -6.269576352036796e-01, -2.714397349222842e-01, -3.073136131444328e-01, -3.650486393422994e-01, -3.343434100733115e-01, -3.343434100733114e-01, -4.677502817714513e-01, -6.705255509399796e-02, -9.023451598667341e-02, -3.365494835776709e-01, -1.228346382789109e-01, -1.228346382789108e-01, -1.997732257055480e-02, -2.468926456980984e-03, -4.689999171481427e-03, -1.170136530283959e-01, -6.982747230830003e-03, -6.982747230829992e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_sg4_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_sg4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.534891082256955e+01, -2.534898572797304e+01, -2.534934587303387e+01, -2.534811878096315e+01, -2.534895010797818e+01, -2.534895010797818e+01, -4.102324919614905e+00, -4.102344184041675e+00, -4.103043840699176e+00, -4.102709365742639e+00, -4.102352302894666e+00, -4.102352302894666e+00, -7.827450727256035e-01, -7.819599055188962e-01, -7.628201068867534e-01, -7.686843987149105e-01, -7.824582093051389e-01, -7.824582093051389e-01, -2.167271587862963e-01, -2.195076744760133e-01, -9.393572210771113e-01, -1.530844447478000e-01, -2.175650256549032e-01, -2.175650256549032e-01, -2.271779473512569e-02, -2.379416228833033e-02, -9.511035213067472e-02, -1.090469182618402e-02, -2.354623817501437e-02, -2.354623817501437e-02, -6.218235350125162e+00, -6.220381239772998e+00, -6.218455702060361e+00, -6.220124187700178e+00, -6.219333414856121e+00, -6.219333414856121e+00, -2.300362508515636e+00, -2.315989039736254e+00, -2.294667604485627e+00, -2.306834156155134e+00, -2.318412319429729e+00, -2.318412319429729e+00, -6.865716800289269e-01, -7.659415201995118e-01, -6.506913516898197e-01, -6.925959054082816e-01, -7.148878406315359e-01, -7.148878406315359e-01, -1.301229311885290e-01, -2.163635032181896e-01, -1.249367341217675e-01, -2.329466320224451e+00, -1.307390990102627e-01, -1.307390990102627e-01, -1.051967404415269e-02, -1.202178463524782e-02, -9.010465351389755e-03, -1.207545001919800e-01, -1.095369291715426e-02, -1.095369291715426e-02, -7.365819020710270e-01, -7.250760913073306e-01, -7.290137439236177e-01, -7.321963432363164e-01, -7.305889026781975e-01, -7.305889026781975e-01, -7.143136654042187e-01, -5.906638094500543e-01, -6.199666814406305e-01, -6.514680344953090e-01, -6.348800533470941e-01, -6.348800533470942e-01, -8.019829862656009e-01, -2.745537764469463e-01, -3.251948922624129e-01, -4.118527178737399e-01, -3.654654538731344e-01, -3.654654538731344e-01, -5.325780251800549e-01, -8.872539259986209e-02, -1.157187887863646e-01, -3.897430257988451e-01, -1.178190042368569e-01, -1.178190042368526e-01, -2.662146226555065e-02, -3.291865032782400e-03, -6.253097419370541e-03, -1.116895211222614e-01, -9.309394002420734e-03, -9.309394002420720e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_sg4_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_sg4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-6.761903687288352e-09, -6.761891520616984e-09, -6.761711549268021e-09, -6.761913286457848e-09, -6.761898321690740e-09, -6.761898321690740e-09, -8.612960150034991e-06, -8.613425273110117e-06, -8.624795833772827e-06, -8.597919012659354e-06, -8.613052608656327e-06, -8.613052608656327e-06, -4.882773301099542e-03, -4.873819049582890e-03, -4.604496647959691e-03, -4.502044047726410e-03, -4.879642006011429e-03, -4.879642006011429e-03, -4.904917803550211e-01, -4.815836960963753e-01, -2.781581543478223e-03, -1.175039188627282e+00, -4.879397288066384e-01, -4.879397288066384e-01, -4.784245350684221e-01, -4.802394896252850e-01, -5.164062455360812e-01, -3.363994716051650e-01, -4.988769075788606e-01, -4.988769075788606e-01, -2.092278836195222e-06, -2.094714139848382e-06, -2.092513880866760e-06, -2.094407663578372e-06, -2.093547126252735e-06, -2.093547126252735e-06, -5.606487315755569e-05, -5.520030980667006e-05, -5.571611268181214e-05, -5.504365888600588e-05, -5.594213697706638e-05, -5.594213697706638e-05, -1.178234852912231e-02, -1.131396572198902e-02, -1.419414118691616e-02, -1.543934630716139e-02, -1.060323917273294e-02, -1.060323917273294e-02, -2.104882773134170e+00, -3.660877743718456e-01, -2.403080066841384e+00, -1.320690572942757e-04, -1.886584977635034e+00, -1.886584977635034e+00, -3.568463071623582e-01, -3.577451474233811e-01, -1.023839270827861e+00, -1.819932898342829e+00, -5.284166877287334e-01, -5.284166877287331e-01, -1.510291121839444e-02, -1.439257198665801e-02, -1.463839102481932e-02, -1.483536405288092e-02, -1.473619795022167e-02, -1.473619795022167e-02, -1.741196712137015e-02, -1.673527242114159e-02, -1.678760827656911e-02, -1.701162701846687e-02, -1.691646196560647e-02, -1.691646196560647e-02, -9.264095247069847e-03, -1.739427912802306e-01, -1.094435086542162e-01, -6.427849817772817e-02, -8.387512526436935e-02, -8.387512526436940e-02, -2.441434436806230e-02, -3.082787985387911e-01, -8.795338146064233e-01, -9.486283868206243e-02, -3.452474954968042e+00, -3.452474954968332e+00, -3.602105409048733e-01, -6.142663418967853e-01, -5.291330787777304e-01, -4.257846061915420e+00, -7.715177864800851e-01, -7.715177864800834e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
