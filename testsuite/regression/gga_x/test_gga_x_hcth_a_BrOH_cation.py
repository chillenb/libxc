
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_hcth_a_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_hcth_a", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.111356413645285e+01, -2.111362549281196e+01, -2.111391247722490e+01, -2.111299935908390e+01, -2.111347578332370e+01, -2.111347578332370e+01, -3.439510839099926e+00, -3.439512063121082e+00, -3.439626300344331e+00, -3.440083041000990e+00, -3.439595576804771e+00, -3.439595576804771e+00, -6.725542997560086e-01, -6.722286839702705e-01, -6.676881141940508e-01, -6.723831749994071e-01, -6.775736235238963e-01, -6.775736235238963e-01, -2.172535204268870e-01, -2.163542098705939e-01, -7.811205822924399e-01, -2.167050163686286e-01, -2.222967738942221e-01, -2.222967738942219e-01, -1.519670124215377e-01, -1.512999903215486e-01, -2.120902325697483e-01, -1.435716351102856e-01, -1.430503457376543e-01, -1.430503457376541e-01, -5.159100353762317e+00, -5.160482737458454e+00, -5.159165365752927e+00, -5.160385600226849e+00, -5.159799378382647e+00, -5.159799378382647e+00, -2.014553745801033e+00, -2.024784674058921e+00, -2.014303345071445e+00, -2.023118150473728e+00, -2.020636403893330e+00, -2.020636403893330e+00, -5.798561153533889e-01, -6.381319573342200e-01, -5.372537362245465e-01, -5.630007859202752e-01, -5.899857475782118e-01, -5.899857475782120e-01, -2.266062095133364e-01, -2.551545271129886e-01, -2.230442055816739e-01, -1.923263199269433e+00, -2.077520588081108e-01, -2.077520588081108e-01, -1.305870266230894e-01, -1.382111747870353e-01, -8.964965156766649e-02, -2.079050998831748e-01, -1.091000019459718e-01, -1.091000019459719e-01, -5.964851018519314e-01, -5.872397851831237e-01, -5.902117036884107e-01, -5.928825849604649e-01, -5.915203283071785e-01, -5.915203283071785e-01, -5.825565577036933e-01, -4.930093793614292e-01, -5.103074376038982e-01, -5.331624105494018e-01, -5.206847326545140e-01, -5.206847326545140e-01, -6.682024821304995e-01, -2.813869414966406e-01, -3.010712820216153e-01, -3.510209954756431e-01, -3.197508417299961e-01, -3.197508417299961e-01, -4.544671089025011e-01, -2.159676829720888e-01, -2.197226445366707e-01, -3.333580058407622e-01, -1.984311869207845e-01, -1.984311869207845e-01, -1.671815525058979e-01, -8.223523868295360e-02, -1.060058384603710e-01, -1.991491889632994e-01, -1.026932575774794e-01, -1.026932575774793e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_hcth_a_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_hcth_a", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.837362081773900e+01, -2.837358901382717e+01, -2.837377181613178e+01, -2.837369867448736e+01, -2.837419363116764e+01, -2.837432025242013e+01, -2.837248987715284e+01, -2.837214816129883e+01, -2.837371396967569e+01, -2.837297137966073e+01, -2.837371396967569e+01, -2.837297137966073e+01, -4.504691784623804e+00, -4.505192275787851e+00, -4.504776264027254e+00, -4.505303728105965e+00, -4.507095975225337e+00, -4.507729599940517e+00, -4.503798445484721e+00, -4.504481136859290e+00, -4.503716916628197e+00, -4.506617896566374e+00, -4.503716916628197e+00, -4.506617896566374e+00, -8.047680890111102e-01, -8.158379234944290e-01, -8.007932023625974e-01, -8.143997806505646e-01, -7.471462046765870e-01, -7.274638283224213e-01, -7.428147572731921e-01, -7.492607746505356e-01, -8.336056483431037e-01, -6.373795813921397e-01, -8.336056483431037e-01, -6.373795813921397e-01, -1.168171709960140e-01, -1.295021499235320e-01, -1.228903096193025e-01, -1.375873127984824e-01, -9.292628392669607e-01, -9.946523250319949e-01, -5.111875914724930e-02, -5.269265366373849e-02, -1.241575067934939e-01, -2.092249220108161e-02, -1.241575067934936e-01, -2.092249220108200e-02, -2.895136617017246e-02, -2.933898235493755e-02, -2.889379474232612e-02, -2.927687491665364e-02, -2.851575150668634e-02, -2.736366512151604e-02, -2.640654470913137e-02, -2.644216500952132e-02, -2.832030369840918e-02, -2.088452811831620e-02, -2.832030369840891e-02, -2.088452811831614e-02, -7.023307749521386e+00, -7.021541043343986e+00, -7.026689187467797e+00, -7.024808843204417e+00, -7.023493859545641e+00, -7.021652029513934e+00, -7.026395651290859e+00, -7.024620911379173e+00, -7.025043583812037e+00, -7.023184619389730e+00, -7.025043583812037e+00, -7.023184619389730e+00, -2.178049686999537e+00, -2.177903388751203e+00, -2.207505374447889e+00, -2.206588077039938e+00, -2.128838271020130e+00, -2.143162832861268e+00, -2.154616621018242e+00, -2.168920628879513e+00, -2.230326668794794e+00, -2.198049486023109e+00, -2.230326668794794e+00, -2.198049486023109e+00, -7.709974922449140e-01, -7.691280381112763e-01, -8.719048730639171e-01, -8.724282467889460e-01, -6.884268150970756e-01, -7.198568676187613e-01, -7.574943741728305e-01, -7.823775560803399e-01, -8.097364661869922e-01, -7.670402623130563e-01, -8.097364661869927e-01, -7.670402623130567e-01, -1.759542085575861e-02, -1.794100725840976e-02, -8.717665325202181e-02, -8.828394517901486e-02, -1.567420792807777e-02, -1.656289520725345e-02, -2.627969633363863e+00, -2.626805455299329e+00, -2.549906178578168e-02, -3.481490829500753e-02, -2.549906178578168e-02, -3.481490829500753e-02, -2.312173593137497e-02, -2.398550376760392e-02, -2.523584942477251e-02, -2.571497573482550e-02, -1.688346186803484e-02, -1.674865208805599e-02, -1.591693409970263e-02, -1.612243711408519e-02, -1.941059469935868e-02, -2.091159938481657e-02, -1.941059469935877e-02, -2.091159938481642e-02, -8.046149220041053e-01, -8.076498503948059e-01, -8.006907857161745e-01, -8.038816644057484e-01, -8.027796729502408e-01, -8.059216780512043e-01, -8.039831105661053e-01, -8.070623156028736e-01, -8.034491129467179e-01, -8.065570306843688e-01, -8.034491129467179e-01, -8.065570306843688e-01, -7.812313817499600e-01, -7.837954394638166e-01, -5.960364702045020e-01, -6.000202589385228e-01, -6.617570335936184e-01, -6.659688277189250e-01, -7.218655368935039e-01, -7.246870801486860e-01, -6.929116090852054e-01, -6.958927627809096e-01, -6.929116090852054e-01, -6.958927627809096e-01, -9.129675935335018e-01, -9.147183144002468e-01, -1.472065255206533e-01, -1.493874213565881e-01, -2.250374997774823e-01, -2.310718410440643e-01, -4.082463977643701e-01, -4.114599804565016e-01, -3.131803043555398e-01, -3.139400171679139e-01, -3.131803043555396e-01, -3.139400171679136e-01, -5.448043430901180e-01, -5.510597971271762e-01, -2.994892370466704e-02, -2.980656679575985e-02, -2.365106071016591e-02, -2.260123882813773e-02, -4.143298188955822e-01, -4.231046912634358e-01, -1.385822175680731e-02, -1.415514666521863e-02, -1.385822175680727e-02, -1.415514666521838e-02, -3.225335368210694e-02, -3.226486299865310e-02, -1.441373939504269e-02, -1.294585253799132e-02, -1.879394408103638e-02, -1.885417234313278e-02, -1.347355461670707e-02, -1.354896904213762e-02, -1.667720994535308e-02, -2.037225654062290e-02, -1.667720994535293e-02, -2.037225654062270e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_hcth_a_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_hcth_a", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.125064073957747e-09, 0.000000000000000e+00, 1.125095379424071e-09, 1.125369318708278e-09, 0.000000000000000e+00, 1.125316944329700e-09, 1.125915303759150e-09, 0.000000000000000e+00, 1.126219845660171e-09, 1.122479143023536e-09, 0.000000000000000e+00, 1.121836647067034e-09, 1.125267869000974e-09, 0.000000000000000e+00, 1.123272106876233e-09, 1.125267869000974e-09, 0.000000000000000e+00, 1.123272106876233e-09, -2.603055915109844e-06, 0.000000000000000e+00, -2.586897216889766e-06, -2.600983250431822e-06, 0.000000000000000e+00, -2.583804028871455e-06, -2.540319496411681e-06, 0.000000000000000e+00, -2.524314779122182e-06, -2.643620410150016e-06, 0.000000000000000e+00, -2.625602733609753e-06, -2.611222419406050e-06, 0.000000000000000e+00, -2.572076020117991e-06, -2.611222419406050e-06, 0.000000000000000e+00, -2.572076020117991e-06, -6.406187113826055e-03, 0.000000000000000e+00, -5.915004193138004e-03, -6.577399554905892e-03, 0.000000000000000e+00, -5.977170908799409e-03, -8.783428560705566e-03, 0.000000000000000e+00, -9.544564957375365e-03, -8.900836149005669e-03, 0.000000000000000e+00, -8.659604638896012e-03, -5.126677097196489e-03, 0.000000000000000e+00, -1.248562045143171e-02, -5.126677097196489e-03, 0.000000000000000e+00, -1.248562045143171e-02, -2.658411113077392e+00, 0.000000000000000e+00, -2.293845094664347e+00, -2.540371831591172e+00, 0.000000000000000e+00, -2.140426358663652e+00, -3.560053423432168e-03, 0.000000000000000e+00, -2.252986030654615e-03, -6.592899784002635e+00, 0.000000000000000e+00, -6.276395256085797e+00, -2.240342744827092e+00, 0.000000000000000e+00, -1.817897656509485e+01, -2.240342744827089e+00, 0.000000000000000e+00, -1.817897656509486e+01, -5.621500262049169e+04, 0.000000000000000e+00, -4.711126234474131e+04, -4.990990094858473e+04, 0.000000000000000e+00, -4.093319781879093e+04, -3.303351329511232e+02, 0.000000000000000e+00, -2.844306309982724e+02, -2.362906573284386e+05, 0.000000000000000e+00, -2.460845661355824e+05, -7.792633868624520e+04, 0.000000000000000e+00, -5.113073789179467e+05, -7.792633868624541e+04, 0.000000000000000e+00, -5.113073789179468e+05, 1.161833619032766e-06, 0.000000000000000e+00, 1.162072282935428e-06, 1.182547935065900e-06, 0.000000000000000e+00, 1.182106556829410e-06, 1.162882378131842e-06, 0.000000000000000e+00, 1.162687953461542e-06, 1.180656207333037e-06, 0.000000000000000e+00, 1.180888054477703e-06, 1.172512134533053e-06, 0.000000000000000e+00, 1.172139115116484e-06, 1.172512134533053e-06, 0.000000000000000e+00, 1.172139115116484e-06, -1.177302862232781e-04, 0.000000000000000e+00, -1.177587470903767e-04, -1.126273999382161e-04, 0.000000000000000e+00, -1.127910012355577e-04, -1.251782081822555e-04, 0.000000000000000e+00, -1.230408164784100e-04, -1.205966497406571e-04, 0.000000000000000e+00, -1.184775569758276e-04, -1.093942885290297e-04, 0.000000000000000e+00, -1.143610791707696e-04, -1.093942885290297e-04, 0.000000000000000e+00, -1.143610791707696e-04, -8.547883105806598e-04, 0.000000000000000e+00, -8.180550907805849e-04, 1.408127755716104e-02, 0.000000000000000e+00, 1.435016254825731e-02, -5.360109295209194e-03, 0.000000000000000e+00, -2.843269565597066e-03, 1.928548125481439e-02, 0.000000000000000e+00, 1.644890684816211e-02, 1.151732779436312e-03, 0.000000000000000e+00, 6.375590158945793e-04, 1.151732779436298e-03, 0.000000000000000e+00, 6.375590158946027e-04, -1.937053429140974e+01, 0.000000000000000e+00, -1.895287522664410e+01, -2.312799419133261e+00, 0.000000000000000e+00, -2.271972761575534e+00, -2.658365922584440e+01, 0.000000000000000e+00, -2.276037207957165e+01, 1.796070097355651e-04, 0.000000000000000e+00, 1.801226928798658e-04, -1.357073431696670e+01, 0.000000000000000e+00, -1.205338082334873e+01, -1.357073431696670e+01, 0.000000000000000e+00, -1.205338082334873e+01, -5.944111929520852e+05, 0.000000000000000e+00, -5.109536643239001e+05, -2.784491843740497e+05, 0.000000000000000e+00, -2.607610024354553e+05, -1.047563883724671e+06, 0.000000000000000e+00, -9.155608603945146e+05, -8.426251748997771e+01, 0.000000000000000e+00, -8.190153234859473e+01, -8.099621097477679e+05, 0.000000000000000e+00, -3.239431322788903e+05, -8.099621097477661e+05, 0.000000000000000e+00, -3.239431322788896e+05, 3.139034325136976e-02, 0.000000000000000e+00, 3.115615024951205e-02, 2.058014844310935e-02, 0.000000000000000e+00, 2.053196202920536e-02, 2.378130018035989e-02, 0.000000000000000e+00, 2.369961247031642e-02, 2.688043542086177e-02, 0.000000000000000e+00, 2.669957000490113e-02, 2.527573367634118e-02, 0.000000000000000e+00, 2.514551460496404e-02, 2.527573367634118e-02, 0.000000000000000e+00, 2.514551460496404e-02, 4.072816293539746e-02, 0.000000000000000e+00, 4.024495846347157e-02, -2.080434246381653e-02, 0.000000000000000e+00, -2.010664001990944e-02, -7.245438242450971e-03, 0.000000000000000e+00, -6.651962324502262e-03, 7.525547686701257e-03, 0.000000000000000e+00, 7.625703826510745e-03, -1.987949913744655e-05, 0.000000000000000e+00, 1.794277670133066e-04, -1.987949913744655e-05, 0.000000000000000e+00, 1.794277670133066e-04, 1.083932344018467e-02, 0.000000000000000e+00, 1.112222321326596e-02, -9.674452499493135e-01, 0.000000000000000e+00, -9.464149149732756e-01, -4.669989911307709e-01, 0.000000000000000e+00, -4.468287487896269e-01, -9.927685048336066e-02, 0.000000000000000e+00, -9.607638467345959e-02, -2.339512347320538e-01, 0.000000000000000e+00, -2.334704308642848e-01, -2.339512347320541e-01, 0.000000000000000e+00, -2.334704308642851e-01, -3.028697720795526e-02, 0.000000000000000e+00, -2.858898751951834e-02, -3.387928655847482e+02, 0.000000000000000e+00, -3.325494345266441e+02, -1.482007009110577e+02, 0.000000000000000e+00, -1.361929432859260e+02, -7.778270644298835e-02, 0.000000000000000e+00, -6.787198499766774e-02, -4.616905204361246e+01, 0.000000000000000e+00, -4.158680393203693e+01, -4.616905204361244e+01, 0.000000000000000e+00, -4.158680393203696e+01, -1.891229960864914e+04, 0.000000000000000e+00, -1.718783944421547e+04, -1.754392371698686e+07, 0.000000000000000e+00, -2.041859338523373e+07, -1.970723174719094e+06, 0.000000000000000e+00, -1.678856111875517e+06, -5.377369894113853e+01, 0.000000000000000e+00, -5.106985938054397e+01, -1.160235503540220e+06, 0.000000000000000e+00, -4.203770630054607e+05, -1.160235503540223e+06, 0.000000000000000e+00, -4.203770630054615e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
