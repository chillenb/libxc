
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_s12g_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_s12g", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.093165646360044e+01, -2.093168714192097e+01, -2.093189053528684e+01, -2.093138688551828e+01, -2.093167208613177e+01, -2.093167208613177e+01, -3.463960164195824e+00, -3.463930425440350e+00, -3.463258025108899e+00, -3.465153695376550e+00, -3.463959624072611e+00, -3.463959624072611e+00, -7.026530178604012e-01, -7.029349038826441e-01, -7.128753074348581e-01, -7.168638886148416e-01, -7.027507203352068e-01, -7.027507203352068e-01, -2.236035180448452e-01, -2.243546563836180e-01, -8.119822714499695e-01, -1.842042101635710e-01, -2.238061857727306e-01, -2.238061857727306e-01, -1.657690816674089e-02, -1.736050995317515e-02, -6.921471074938149e-02, -7.963812972497061e-03, -1.717965943470990e-02, -1.717965943470990e-02, -5.055913755846706e+00, -5.056063517157824e+00, -5.055933340930552e+00, -5.056049643661305e+00, -5.055982943208202e+00, -5.055982943208202e+00, -2.145948328664427e+00, -2.154178358083397e+00, -2.149509113568524e+00, -2.155921155044378e+00, -2.146858311948088e+00, -2.146858311948088e+00, -5.726660576112860e-01, -6.080331923967676e-01, -5.453431575848769e-01, -5.550062102792789e-01, -5.910281905759678e-01, -5.910281905759678e-01, -1.455421782251739e-01, -2.443978464213201e-01, -1.431020644436581e-01, -1.849460752789737e+00, -1.621651892626217e-01, -1.621651892626217e-01, -7.682695585522520e-03, -8.779182904035301e-03, -6.580181927355455e-03, -9.452146793956363e-02, -7.999166101457419e-03, -7.999166101457419e-03, -5.770994640503220e-01, -5.743702211261128e-01, -5.752890593850335e-01, -5.760464788406169e-01, -5.756624728334081e-01, -5.756624728334081e-01, -5.585621824775592e-01, -5.174066342126024e-01, -5.219324036600393e-01, -5.310770695520098e-01, -5.254894783221352e-01, -5.254894783221352e-01, -6.376638695190522e-01, -2.909413584516694e-01, -3.240480899415822e-01, -3.689209503109068e-01, -3.451717060221258e-01, -3.451717060221258e-01, -4.703849152739150e-01, -6.439902137613705e-02, -8.593826786890578e-02, -3.361487778517864e-01, -1.196367331593985e-01, -1.196367331593985e-01, -1.942145496571446e-02, -2.404515448590841e-03, -4.567252767649523e-03, -1.140610518734252e-01, -6.798605695921624e-03, -6.798605695921615e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_s12g_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_s12g", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.583121486026337e+01, -2.583135595134901e+01, -2.583191820371097e+01, -2.582960905194534e+01, -2.583128982859020e+01, -2.583128982859020e+01, -4.018207582827195e+00, -4.018320845248255e+00, -4.021601154611991e+00, -4.016802904739273e+00, -4.018282953355174e+00, -4.018282953355174e+00, -7.076818537572848e-01, -7.062706670431398e-01, -6.809123880188480e-01, -6.860782963572872e-01, -7.071665118278644e-01, -7.071665118278644e-01, -2.089648517095999e-01, -2.091127315134856e-01, -8.854628740734501e-01, -1.897902760490354e-01, -2.089646366825756e-01, -2.089646366825756e-01, -2.202479180314495e-02, -2.305789503296387e-02, -8.852154466037952e-02, -1.061117702596215e-02, -2.281786091477159e-02, -2.281786091477159e-02, -6.482384112253908e+00, -6.487024414164584e+00, -6.482855602903526e+00, -6.486464035473015e+00, -6.484773518922436e+00, -6.484773518922436e+00, -2.053176193674099e+00, -2.067073615041672e+00, -2.048704720790579e+00, -2.059146119613037e+00, -2.069788533464626e+00, -2.069788533464626e+00, -6.874297963969567e-01, -8.070799174380097e-01, -6.459254018272764e-01, -7.300643451499761e-01, -7.269967962764287e-01, -7.269967962764287e-01, -1.662791652820330e-01, -2.399749623666325e-01, -1.624341265927322e-01, -2.454692651160825e+00, -1.750643335003838e-01, -1.750643335003838e-01, -1.023689911996752e-02, -1.169557527185726e-02, -8.766451120386352e-03, -1.163010469079805e-01, -1.065635971395438e-02, -1.065635971395438e-02, -7.693001989970737e-01, -7.633476066795974e-01, -7.658082374332007e-01, -7.674397415818636e-01, -7.666502311756330e-01, -7.666502311756330e-01, -7.446867729280835e-01, -5.468914366031583e-01, -6.104869423066028e-01, -6.769455395981886e-01, -6.443566677763829e-01, -6.443566677763829e-01, -8.454639917860295e-01, -2.748749561920612e-01, -3.010726758434327e-01, -3.729496854342111e-01, -3.267762091710744e-01, -3.267762091710744e-01, -4.885043136252317e-01, -8.309331534383237e-02, -1.078831426202316e-01, -3.685942296359789e-01, -1.395920504681004e-01, -1.395920504681003e-01, -2.578683903037423e-02, -3.205751244737518e-03, -6.087957278405112e-03, -1.329384307505213e-01, -9.057986019628587e-03, -9.057986019628574e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_s12g_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_s12g", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-5.260671243921449e-09, -5.260489639351219e-09, -5.259830619856716e-09, -5.262801423657525e-09, -5.260574208404048e-09, -5.260574208404048e-09, -9.609317954462947e-06, -9.608349207461513e-06, -9.580016417082617e-06, -9.620522962554310e-06, -9.608656016337918e-06, -9.608656016337918e-06, -7.795250377095871e-03, -7.805153300753378e-03, -7.665199278351766e-03, -7.493524278212798e-03, -7.799092607387850e-03, -7.799092607387850e-03, -6.942039729397583e-01, -7.006199729555036e-01, -3.808803528148101e-03, -8.391351799885417e-01, -6.967573917762856e-01, -6.967573917762856e-01, -3.471471163503306e+00, -3.481866437694296e+00, -1.500129152739299e+00, -2.452873218368735e+00, -3.617056000301086e+00, -3.617056000301086e+00, -1.048516376876364e-06, -1.037661230083375e-06, -1.047426814753644e-06, -1.038985902973611e-06, -1.042918548680921e-06, -1.042918548680921e-06, -9.332155976091675e-05, -9.183720779687493e-05, -9.274686653224403e-05, -9.163243822247534e-05, -9.293340452243512e-05, -9.293340452243512e-05, -1.109464093401105e-02, -1.371460428182018e-03, -1.437888017114543e-02, -3.844790827217093e-03, -8.467502712008152e-03, -8.467502712008152e-03, -8.881408542013085e-01, -3.626771029025332e-01, -1.022127176431232e+00, -1.620607450455874e-05, -9.943279820376071e-01, -9.943279820376071e-01, -2.602065813055120e+00, -2.607878588983872e+00, -7.463999556959284e+00, -1.509491905330890e+00, -3.851992118123144e+00, -3.851992118123142e+00, -2.807093269983946e-04, -1.415424941498324e-03, -9.279547683958177e-04, -6.109172595972060e-04, -7.625780744668914e-04, -7.625780744668914e-04, -1.884259547378891e-04, -2.463246061083986e-02, -1.806324907555819e-02, -9.336443978515191e-03, -1.383793653943606e-02, -1.383793653943605e-02, -1.296980721346355e-03, -2.250728515767647e-01, -1.695451876240857e-01, -1.021063421589175e-01, -1.393496269572309e-01, -1.393496269572309e-01, -3.716884108902289e-02, -1.260391259736364e+00, -1.282993930445485e+00, -1.280136217515672e-01, -1.496626195505034e+00, -1.496626195505036e+00, -2.609541016345089e+00, -4.482670010119594e+00, -3.860352169890046e+00, -1.838715285611429e+00, -5.624998701070623e+00, -5.624998701070612e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
