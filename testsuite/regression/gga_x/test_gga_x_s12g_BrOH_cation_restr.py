
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_s12g_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_s12g", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.093214775985924e+01, -2.093218301415548e+01, -2.093239486162698e+01, -2.093186925979345e+01, -2.093213680484601e+01, -2.093213680484601e+01, -3.464076553336386e+00, -3.464038073219981e+00, -3.463235532851468e+00, -3.465291334121019e+00, -3.464113922030192e+00, -3.464113922030192e+00, -7.004544753589045e-01, -7.006853102252472e-01, -7.088952435898952e-01, -7.134289161110465e-01, -7.113865949552105e-01, -7.113865949552105e-01, -2.220985592859766e-01, -2.232489600711121e-01, -8.064108509272077e-01, -1.858443850926280e-01, -2.002147643976115e-01, -2.002147643976115e-01, -9.826489062966454e-03, -1.034217567727671e-02, -5.645195127654592e-02, -5.676752850108891e-03, -7.132521689448961e-03, -7.132521689448961e-03, -5.058047129438550e+00, -5.058203292757336e+00, -5.058061300904879e+00, -5.058198930477214e+00, -5.058121302614297e+00, -5.058121302614297e+00, -2.145651330129761e+00, -2.154173106255475e+00, -2.150292133311827e+00, -2.157859151411289e+00, -2.148055142524665e+00, -2.148055142524665e+00, -5.793921116160133e-01, -6.149058898927532e-01, -5.401762118992319e-01, -5.451379780712233e-01, -5.856721305772773e-01, -5.856721305772773e-01, -1.391116187684952e-01, -2.371595120156101e-01, -1.296521803679804e-01, -1.851640436590525e+00, -1.570043596385611e-01, -1.570043596385611e-01, -4.380180283630953e-03, -5.549500519623011e-03, -4.243137848569836e-03, -8.969973480546344e-02, -5.111676045812576e-03, -5.111676045812576e-03, -5.682099981987611e-01, -5.654437544044886e-01, -5.663383367968029e-01, -5.671431856214247e-01, -5.667330632344133e-01, -5.667330632344133e-01, -5.527709720460618e-01, -5.124241119712778e-01, -5.157600860243642e-01, -5.245366173076176e-01, -5.188925305319767e-01, -5.188925305319767e-01, -6.448291501863698e-01, -2.842461292733477e-01, -3.199190200473891e-01, -3.686838688726798e-01, -3.432098407164441e-01, -3.432098407164441e-01, -4.732218167933449e-01, -5.410818014126120e-02, -7.314075241565604e-02, -3.421693365982258e-01, -1.114944808874203e-01, -1.114944808874203e-01, -1.386353718178130e-02, -1.483592209545769e-03, -3.113982902182954e-03, -1.054050073525141e-01, -4.729935616840371e-03, -4.729935616840367e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_s12g_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_s12g", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.583205687866123e+01, -2.583221897114872e+01, -2.583281736421353e+01, -2.583040819248324e+01, -2.583168796596177e+01, -2.583168796596177e+01, -4.018516357784915e+00, -4.018655243177708e+00, -4.021967628506069e+00, -4.016975737353548e+00, -4.018779750797044e+00, -4.018779750797044e+00, -7.175581715202164e-01, -7.158324734525370e-01, -6.848161763060499e-01, -6.905984576929417e-01, -6.894681527709620e-01, -6.894681527709620e-01, -2.119971737825711e-01, -2.118387212820443e-01, -8.485448129205982e-01, -1.949233890759151e-01, -2.001656666819112e-01, -2.001656666819112e-01, -1.309083936921398e-02, -1.377620999310568e-02, -7.362144028680689e-02, -7.566956129699995e-03, -9.505450258007192e-03, -9.505450258007192e-03, -6.485549236150777e+00, -6.490335529973068e+00, -6.485757627058332e+00, -6.489983640770554e+00, -6.487985972448047e+00, -6.487985972448047e+00, -2.055210295600176e+00, -2.069681873502073e+00, -2.046655295492440e+00, -2.058713034234066e+00, -2.068195239118325e+00, -2.068195239118325e+00, -6.936430481671249e-01, -8.155022546107735e-01, -6.291465660245950e-01, -7.183507430874050e-01, -7.156360308088927e-01, -7.156360308088927e-01, -1.634786784746198e-01, -2.391574898651073e-01, -1.543308946928785e-01, -2.457489583309017e+00, -1.732427189032381e-01, -1.732427189032381e-01, -5.839160671025836e-03, -7.397258641550520e-03, -5.655192131005067e-03, -1.123943583786965e-01, -6.812795100502712e-03, -6.812795100502712e-03, -7.573279743141874e-01, -7.503724672067095e-01, -7.532511262072954e-01, -7.552508801405441e-01, -7.542898260321472e-01, -7.542898260321472e-01, -7.369786732003675e-01, -5.285302486849587e-01, -5.899935155172036e-01, -6.652344554798124e-01, -6.277131824225498e-01, -6.277131824225498e-01, -8.539785961935934e-01, -2.734065956752819e-01, -2.982631387958437e-01, -3.676885210675631e-01, -3.213998146863127e-01, -3.213998146863127e-01, -4.851129229851319e-01, -7.076103545501178e-02, -9.407271714645074e-02, -3.686954740602479e-01, -1.336848846114180e-01, -1.336848846114180e-01, -1.845660380823455e-02, -1.978035117882186e-03, -4.151412166403021e-03, -1.279123387243696e-01, -6.304111761654429e-03, -6.304111761654424e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_s12g_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_s12g", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-5.259833145159252e-09, -5.259624534144795e-09, -5.258919544899649e-09, -5.262018653010914e-09, -5.260363131301185e-09, -5.260363131301185e-09, -9.606499566142931e-06, -9.605313270932157e-06, -9.576796426251347e-06, -9.618878385090789e-06, -9.604151082234469e-06, -9.604151082234469e-06, -7.717822620851686e-03, -7.737593152270557e-03, -7.810001065622292e-03, -7.605329658351033e-03, -7.687758857693979e-03, -7.687758857693979e-03, -6.239224142530178e-01, -6.325175094889185e-01, -4.208528742192878e-03, -7.172637105516091e-01, -7.253039893984173e-01, -7.253039893984172e-01, -1.647011508598022e+00, -1.740188477315629e+00, -9.880645832424344e-01, -1.495980353266700e+00, -1.900928193386675e+00, -1.900928193386680e+00, -1.045717151353855e-06, -1.034538753742773e-06, -1.045248778681608e-06, -1.035379677813337e-06, -1.040024423090169e-06, -1.040024423090169e-06, -9.335048597414472e-05, -9.180118038333325e-05, -9.261242818607416e-05, -9.131425365569146e-05, -9.277834028230331e-05, -9.277834028230331e-05, -1.073198768821130e-02, -1.457377600683939e-03, -1.600557147423682e-02, -3.797573836498562e-03, -9.172803326453203e-03, -9.172803326453203e-03, -7.412398661343926e-01, -3.497954500356324e-01, -8.082823289104880e-01, -1.621301462269499e-05, -9.368477085640797e-01, -9.368477085640797e-01, -1.971012782769856e+00, -1.760665029581272e+00, -1.105834239008251e+01, -1.145818824159893e+00, -5.146066565016366e+00, -5.146066565016352e+00, -4.120935055016928e-04, -1.890979704521166e-03, -1.272626197634550e-03, -8.382470888025569e-04, -1.046112457957851e-03, -1.046112457957851e-03, -1.727212426766179e-04, -2.667607046504233e-02, -2.052141237610676e-02, -1.043157888512779e-02, -1.579538900375361e-02, -1.579538900375361e-02, -1.388752883496624e-03, -2.226530304386833e-01, -1.690412850602506e-01, -1.040114309578192e-01, -1.411543828674269e-01, -1.411543828674270e-01, -3.701031868210647e-02, -8.994554059941229e-01, -9.069575552887588e-01, -1.240019445619337e-01, -1.309057101083416e+00, -1.309057101083417e+00, -1.328043038988261e+00, -8.638707864261161e+00, -4.181177323655276e+00, -1.312551861590728e+00, -6.499865742303986e+00, -6.499865742304002e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
