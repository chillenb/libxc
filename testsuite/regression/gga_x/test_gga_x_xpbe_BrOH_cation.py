
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_xpbe_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_xpbe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.101682696424314e+01, -2.101685244499919e+01, -2.101703696803787e+01, -2.101665640258426e+01, -2.101684568171920e+01, -2.101684568171920e+01, -3.489620836533538e+00, -3.489579532888293e+00, -3.488710367297774e+00, -3.490884490852259e+00, -3.489655702924641e+00, -3.489655702924641e+00, -7.027151224832218e-01, -7.027970883959846e-01, -7.067818677224152e-01, -7.114818496529189e-01, -7.116509562669447e-01, -7.116509562669447e-01, -2.208095706888787e-01, -2.217047824122694e-01, -8.109873101490933e-01, -1.890084454931331e-01, -2.164930630353716e-01, -2.164930630353715e-01, -1.075210188102137e-02, -1.132174543943708e-02, -6.130447196033232e-02, -6.202215661844960e-03, -8.654972693665722e-03, -8.654972693665722e-03, -5.047485711256784e+00, -5.046768829417028e+00, -5.047463968357112e+00, -5.046830912178544e+00, -5.047116064973737e+00, -5.047116064973737e+00, -2.136527792239740e+00, -2.146001312011279e+00, -2.138987876351086e+00, -2.147345565489776e+00, -2.140594761607956e+00, -2.140594761607956e+00, -5.830675711103561e-01, -6.034939929659578e-01, -5.444401053688517e-01, -5.384299257114247e-01, -5.892691476864169e-01, -5.892691476864169e-01, -1.460357557744117e-01, -2.387612044355835e-01, -1.367610091079385e-01, -1.815521764271710e+00, -1.619321655331706e-01, -1.619321655331706e-01, -4.788628389247294e-03, -6.062993408124296e-03, -4.642604611785547e-03, -9.602862327225406e-02, -5.831657323640792e-03, -5.831657323640793e-03, -5.509778556184681e-01, -5.545017425184341e-01, -5.532780849772401e-01, -5.522480669500529e-01, -5.527638531658601e-01, -5.527638531658601e-01, -5.340837251155038e-01, -5.143425258993432e-01, -5.196366825091316e-01, -5.246627677537976e-01, -5.218642181345141e-01, -5.218642181345141e-01, -6.338897645646951e-01, -2.829543145922179e-01, -3.165295561971200e-01, -3.689793396052986e-01, -3.403529870397408e-01, -3.403529870397408e-01, -4.747850136903385e-01, -5.873323412514396e-02, -7.899654734138424e-02, -3.443693399629927e-01, -1.178394143196620e-01, -1.178394143196620e-01, -1.514780167356824e-02, -1.620818201538725e-03, -3.408328943166345e-03, -1.117351913393260e-01, -5.355561976777982e-03, -5.355561976777978e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_xpbe_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_xpbe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.504569503086205e+01, -2.504566579254077e+01, -2.504581371965677e+01, -2.504575199389048e+01, -2.504615888291280e+01, -2.504625626040549e+01, -2.504481938986135e+01, -2.504454868182635e+01, -2.504576756379673e+01, -2.504520583485451e+01, -2.504576756379673e+01, -2.504520583485451e+01, -4.014889250035144e+00, -4.015102459728784e+00, -4.014935356067435e+00, -4.015157867119759e+00, -4.016148392722997e+00, -4.016490136650322e+00, -4.014694754177484e+00, -4.015045654159991e+00, -4.014112298238203e+00, -4.016194194279486e+00, -4.014112298238203e+00, -4.016194194279486e+00, -7.503914487815467e-01, -7.555637467950321e-01, -7.484995653838089e-01, -7.548091714938125e-01, -7.247779929293564e-01, -7.173975287184365e-01, -7.262693386632141e-01, -7.286632275129606e-01, -7.648538958284629e-01, -6.946749261771868e-01, -7.648538958284629e-01, -6.946749261771868e-01, -1.970527296808343e-01, -2.014977988978213e-01, -1.975797131912722e-01, -2.031029102194567e-01, -8.633189400674024e-01, -9.031997549583332e-01, -1.792227687000743e-01, -1.807641653300548e-01, -2.048390102159719e-01, -1.569324509771944e-01, -2.048390102159718e-01, -1.569324509771943e-01, -1.384472335325428e-02, -1.470799750118455e-02, -1.450390178308904e-02, -1.553223692457307e-02, -7.672223791043833e-02, -8.052288340023801e-02, -8.333419580865869e-03, -8.194824346757066e-03, -1.235591208260579e-02, -7.036745250500652e-03, -1.235591208260580e-02, -7.036745250500652e-03, -6.183653767689229e+00, -6.182099595123056e+00, -6.186606499231524e+00, -6.184952239813662e+00, -6.183816001671686e+00, -6.182196333483359e+00, -6.186349634516307e+00, -6.184787843486618e+00, -6.185167535147330e+00, -6.183532555952293e+00, -6.185167535147330e+00, -6.183532555952293e+00, -2.158394161831914e+00, -2.158279995111870e+00, -2.176239496641397e+00, -2.175599873671902e+00, -2.140453467389551e+00, -2.145435229510681e+00, -2.155634396154960e+00, -2.160854846038604e+00, -2.182324822708807e+00, -2.169266483453766e+00, -2.182324822708807e+00, -2.169266483453766e+00, -6.833535508631355e-01, -6.816379953322138e-01, -7.730374430880304e-01, -7.738086445476973e-01, -6.143756459246928e-01, -6.399233384229301e-01, -6.691937071132465e-01, -6.909559159066831e-01, -7.152598143450795e-01, -6.782029371259950e-01, -7.152598143450795e-01, -6.782029371259951e-01, -1.597618737591723e-01, -1.600238658602197e-01, -2.196320774222797e-01, -2.202107465067640e-01, -1.500979133308712e-01, -1.544669093229962e-01, -2.332268525915103e+00, -2.331286574882834e+00, -1.650379513580660e-01, -1.614300060181308e-01, -1.650379513580660e-01, -1.614300060181308e-01, -6.253095081415998e-03, -6.498466326030760e-03, -8.018118066276995e-03, -8.139529263981093e-03, -5.994312000292119e-03, -6.347089574374700e-03, -1.153311839281118e-01, -1.161510751499087e-01, -6.123809617485794e-03, -8.404866823418454e-03, -6.123809617485796e-03, -8.404866823418457e-03, -7.230177153003785e-01, -7.259594197139773e-01, -7.104181408393136e-01, -7.134412998280748e-01, -7.147622094022282e-01, -7.177858889211436e-01, -7.184515579542136e-01, -7.213972592194944e-01, -7.166001247484857e-01, -7.195836929550316e-01, -7.166001247484857e-01, -7.195836929550316e-01, -7.062254815815286e-01, -7.085807374358062e-01, -5.522492543000638e-01, -5.550479982664130e-01, -5.918068966074774e-01, -5.950085306931482e-01, -6.357860952031819e-01, -6.382407531608946e-01, -6.132365399114588e-01, -6.157476522493227e-01, -6.132365399114588e-01, -6.157476522493227e-01, -8.083777135966436e-01, -8.103686981824392e-01, -2.549213496110719e-01, -2.558005004589921e-01, -2.901958892233311e-01, -2.924478082326107e-01, -3.864819408039863e-01, -3.888417480989329e-01, -3.313527422330714e-01, -3.312738182324707e-01, -3.313527422330714e-01, -3.312738182324707e-01, -5.068638947041259e-01, -5.110553447910031e-01, -7.559742921698484e-02, -7.606242277406908e-02, -9.789287858663721e-02, -1.004839711715680e-01, -3.772801383771562e-01, -3.838680633858145e-01, -1.321329005585246e-01, -1.332208099899431e-01, -1.321329005585246e-01, -1.332208099899432e-01, -1.977134911469975e-02, -2.048176402055878e-02, -2.158487899946548e-03, -2.163350559052802e-03, -4.391063859004667e-03, -4.670004617111653e-03, -1.274707871281434e-01, -1.289269307338668e-01, -5.799384784819206e-03, -7.705123298199908e-03, -5.799384784819201e-03, -7.705123298199901e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_xpbe_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_xpbe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.507330375974157e-08, 0.000000000000000e+00, -1.507338682125225e-08, -1.507317692519697e-08, 0.000000000000000e+00, -1.507329463971679e-08, -1.507264184791168e-08, 0.000000000000000e+00, -1.507256411857660e-08, -1.507407752794883e-08, 0.000000000000000e+00, -1.507439298495080e-08, -1.507323464317649e-08, 0.000000000000000e+00, -1.507356677798095e-08, -1.507323464317649e-08, 0.000000000000000e+00, -1.507356677798095e-08, -2.041294839218216e-05, 0.000000000000000e+00, -2.041875646928643e-05, -2.041328092017802e-05, 0.000000000000000e+00, -2.041954573754170e-05, -2.042595139930683e-05, 0.000000000000000e+00, -2.042879577852543e-05, -2.039080870331103e-05, 0.000000000000000e+00, -2.039482642971822e-05, -2.042475587518113e-05, 0.000000000000000e+00, -2.040436111397070e-05, -2.042475587518113e-05, 0.000000000000000e+00, -2.040436111397070e-05, -1.312629954812042e-02, 0.000000000000000e+00, -1.311842672032599e-02, -1.313876791590958e-02, 0.000000000000000e+00, -1.312982698598420e-02, -1.328280989611094e-02, 0.000000000000000e+00, -1.326190521335439e-02, -1.290129822985920e-02, 0.000000000000000e+00, -1.291333660253468e-02, -1.300884131445461e-02, 0.000000000000000e+00, -1.252492927432748e-02, -1.300884131445461e-02, 0.000000000000000e+00, -1.252492927432748e-02, -1.456932914056681e+00, 0.000000000000000e+00, -1.363545493560465e+00, -1.459990483358091e+00, 0.000000000000000e+00, -1.346788523044379e+00, -7.599266705903190e-03, 0.000000000000000e+00, -7.043394649522593e-03, -1.985944314475488e+00, 0.000000000000000e+00, -1.922053090437301e+00, -1.254742358082327e+00, 0.000000000000000e+00, -2.883568567795675e+00, -1.254742358082327e+00, 0.000000000000000e+00, -2.883568567795677e+00, -6.061101223212793e+00, 0.000000000000000e+00, -6.000191513539376e+00, -6.386092295253110e+00, 0.000000000000000e+00, -6.353206314979655e+00, -3.519704811498630e+00, 0.000000000000000e+00, -3.536214281236445e+00, -5.552469109367743e+00, 0.000000000000000e+00, -5.401759503732444e+00, -6.051225099366175e+00, 0.000000000000000e+00, -1.535496556023534e+01, -6.051225099366193e+00, 0.000000000000000e+00, -1.535496556023539e+01, -4.424147938750103e-06, 0.000000000000000e+00, -4.428247241210296e-06, -4.424340582459207e-06, 0.000000000000000e+00, -4.428435073699315e-06, -4.424125692017620e-06, 0.000000000000000e+00, -4.428230076972143e-06, -4.424291501893769e-06, 0.000000000000000e+00, -4.428401113671076e-06, -4.424273241678628e-06, 0.000000000000000e+00, -4.428346812781474e-06, -4.424273241678628e-06, 0.000000000000000e+00, -4.428346812781474e-06, -1.599693787047366e-04, 0.000000000000000e+00, -1.599978207376660e-04, -1.567363581621543e-04, 0.000000000000000e+00, -1.568740437107146e-04, -1.600552741004037e-04, 0.000000000000000e+00, -1.601062369400608e-04, -1.573033241849090e-04, 0.000000000000000e+00, -1.572742683375168e-04, -1.579376609466121e-04, 0.000000000000000e+00, -1.583423063279023e-04, -1.579376609466121e-04, 0.000000000000000e+00, -1.583423063279023e-04, -2.568593737634903e-02, 0.000000000000000e+00, -2.597118082275066e-02, -2.082578969705710e-02, 0.000000000000000e+00, -2.081504045279919e-02, -3.682354624336648e-02, 0.000000000000000e+00, -3.238075602163331e-02, -3.567409832248317e-02, 0.000000000000000e+00, -3.124882512230879e-02, -2.239448458386945e-02, 0.000000000000000e+00, -2.730148214261917e-02, -2.239448458386945e-02, 0.000000000000000e+00, -2.730148214261916e-02, -2.327865879295390e+00, 0.000000000000000e+00, -2.362795712101050e+00, -8.980488451795706e-01, 0.000000000000000e+00, -8.891930135929100e-01, -2.642117873935463e+00, 0.000000000000000e+00, -2.553964967253964e+00, -2.534742256394877e-04, 0.000000000000000e+00, -2.539473101119293e-04, -2.495725758246155e+00, 0.000000000000000e+00, -2.930858511380547e+00, -2.495725758246155e+00, 0.000000000000000e+00, -2.930858511380547e+00, -7.794817687167782e+00, 0.000000000000000e+00, -6.746686284559733e+00, -6.711808064721695e+00, 0.000000000000000e+00, -6.196860876008122e+00, -3.823024513330769e+01, 0.000000000000000e+00, -4.252791574805375e+01, -3.983220707795164e+00, 0.000000000000000e+00, -3.838571608652279e+00, -1.901166863124233e+01, 0.000000000000000e+00, -1.867318120625829e+01, -1.901166863124227e+01, 0.000000000000000e+00, -1.867318120625826e+01, -2.950656821113122e-02, 0.000000000000000e+00, -2.906788368130490e-02, -2.938248587709818e-02, 0.000000000000000e+00, -2.895209050531916e-02, -2.942581078820214e-02, 0.000000000000000e+00, -2.899284019523120e-02, -2.946314256364460e-02, 0.000000000000000e+00, -2.902711596724417e-02, -2.944463163736701e-02, 0.000000000000000e+00, -2.901006184634793e-02, -2.944463163736701e-02, 0.000000000000000e+00, -2.901006184634793e-02, -3.317031689908644e-02, 0.000000000000000e+00, -3.273742287122163e-02, -4.588034602295974e-02, 0.000000000000000e+00, -4.526070589264129e-02, -4.207529596588704e-02, 0.000000000000000e+00, -4.147935370427807e-02, -3.845525683376385e-02, 0.000000000000000e+00, -3.795557821282709e-02, -4.032491611755967e-02, 0.000000000000000e+00, -3.977833747266966e-02, -4.032491611755967e-02, 0.000000000000000e+00, -3.977833747266966e-02, -1.720019147772812e-02, 0.000000000000000e+00, -1.712289066425214e-02, -5.170378950045093e-01, 0.000000000000000e+00, -5.112502776455007e-01, -3.474450925065679e-01, 0.000000000000000e+00, -3.414323122251148e-01, -1.767630456739890e-01, 0.000000000000000e+00, -1.735223456645927e-01, -2.531726084683898e-01, 0.000000000000000e+00, -2.545308250936216e-01, -2.531726084683900e-01, 0.000000000000000e+00, -2.545308250936218e-01, -6.360025408719340e-02, 0.000000000000000e+00, -6.232207690364703e-02, -3.221519010340482e+00, 0.000000000000000e+00, -3.224984267813316e+00, -3.154309300982859e+00, 0.000000000000000e+00, -3.218777677147717e+00, -2.279965057074121e-01, 0.000000000000000e+00, -2.168896926643886e-01, -3.905148787203437e+00, 0.000000000000000e+00, -4.527003964424082e+00, -3.905148787203438e+00, 0.000000000000000e+00, -4.527003964424085e+00, -4.802438289018330e+00, 0.000000000000000e+00, -4.902456522245187e+00, -2.398413880453712e+01, 0.000000000000000e+00, -4.248410301396964e+01, -1.480226928866378e+01, 0.000000000000000e+00, -1.575791771159252e+01, -4.363395444944992e+00, 0.000000000000000e+00, -4.267927617352394e+00, -3.919559120061665e+01, 0.000000000000000e+00, -1.938553133582472e+01, -3.919559120061673e+01, 0.000000000000000e+00, -1.938553133582477e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
