
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_dk87_r1_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_dk87_r1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.105846151957464e+01, -2.105848494916173e+01, -2.105866386538773e+01, -2.105831373632068e+01, -2.105848656748760e+01, -2.105848656748760e+01, -3.499217219069072e+00, -3.499175079307916e+00, -3.498286414323283e+00, -3.500495697684978e+00, -3.499251045985604e+00, -3.499251045985604e+00, -7.036327982477206e-01, -7.036451787926838e-01, -7.053103022823148e-01, -7.101575373414080e-01, -7.083222981825640e-01, -7.083222981825640e-01, -2.154007363502096e-01, -2.164796408223561e-01, -8.121499908873023e-01, -1.856388658051954e-01, -1.959458891723443e-01, -1.959458891723443e-01, -6.795692456544243e-02, -6.740523459885556e-02, -1.030371483296375e-01, -6.705850880169659e-02, -6.420028958659865e-02, -6.420028958659861e-02, -5.051484395095385e+00, -5.050610878737554e+00, -5.051456197059983e+00, -5.050684877003603e+00, -5.051035029106744e+00, -5.051035029106744e+00, -2.130174862678132e+00, -2.140381214320227e+00, -2.130820311954312e+00, -2.139862479963992e+00, -2.135460076077897e+00, -2.135460076077897e+00, -5.845142390448459e-01, -6.025660018398414e-01, -5.456060434562159e-01, -5.376737709268956e-01, -5.898648799762589e-01, -5.898648799762589e-01, -1.555500279376963e-01, -2.327711757796717e-01, -1.483927763931612e-01, -1.812585326304056e+00, -1.625162989001461e-01, -1.625162989001461e-01, -6.205533622112924e-02, -6.444015160987694e-02, -4.113523114400572e-02, -1.192196570127893e-01, -4.978942990195712e-02, -4.978942990195713e-02, -5.500264082852718e-01, -5.536074511294711e-01, -5.522524332846979e-01, -5.511877348433354e-01, -5.517103069265269e-01, -5.517103069265269e-01, -5.334599633865809e-01, -5.151276290577833e-01, -5.210820179548633e-01, -5.253000855544284e-01, -5.230853872044031e-01, -5.230853872044031e-01, -6.330088258048699e-01, -2.758522606525383e-01, -3.110860801150907e-01, -3.690499966767032e-01, -3.378837321858726e-01, -3.378837321858725e-01, -4.754058436667048e-01, -1.034068506679254e-01, -1.139834641182784e-01, -3.451599030337940e-01, -1.295306838739578e-01, -1.295306838739578e-01, -7.373676443844877e-02, -4.198575894687092e-02, -5.111833073896417e-02, -1.259485571080438e-01, -4.691213997993466e-02, -4.691213997993465e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_dk87_r1_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_dk87_r1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.490648642183706e+01, -2.490657962752259e+01, -2.490697734877849e+01, -2.490559102510223e+01, -2.490631977580201e+01, -2.490631977580201e+01, -4.016640500375744e+00, -4.016670257932978e+00, -4.017458736532556e+00, -4.016853262564886e+00, -4.016773005074531e+00, -4.016773005074531e+00, -7.678291456144504e-01, -7.669128289064943e-01, -7.462821345462570e-01, -7.524305190421893e-01, -7.510885195896381e-01, -7.510885195896381e-01, -2.027535669358961e-01, -2.054069597583769e-01, -8.963499682850474e-01, -1.575023548890794e-01, -1.750283619112423e-01, -1.750283619112422e-01, -7.676459170429317e-03, -8.078137370588314e-03, -4.400468597656815e-02, -4.439277696816729e-03, -5.575103524580861e-03, -5.575103524580868e-03, -6.135962461459242e+00, -6.138756441683457e+00, -6.136087221309349e+00, -6.138553659565915e+00, -6.137379390160467e+00, -6.137379390160467e+00, -2.240147104288447e+00, -2.256048635404015e+00, -2.229223742620334e+00, -2.243196179679999e+00, -2.254310787371117e+00, -2.254310787371117e+00, -6.805023640619046e-01, -7.698293112559819e-01, -6.273582284521418e-01, -6.758877825944187e-01, -6.938366735558077e-01, -6.938366735558077e-01, -1.118202278952345e-01, -2.060344690339510e-01, -1.037172841226220e-01, -2.321705594017938e+00, -1.296218623499669e-01, -1.296218623499669e-01, -3.426212670989014e-03, -4.339651500628835e-03, -3.317089607091550e-03, -7.055709945121426e-02, -3.996106729473236e-03, -3.996106729473272e-03, -7.241843591075856e-01, -7.088209974803835e-01, -7.141195123768921e-01, -7.186239233596484e-01, -7.163614821205817e-01, -7.163614821205817e-01, -7.076465937064513e-01, -5.637970183279324e-01, -5.946389376690582e-01, -6.324119214192890e-01, -6.120985040708857e-01, -6.120985040708857e-01, -8.051889148955020e-01, -2.571747334286100e-01, -3.049735373479915e-01, -3.976967511324753e-01, -3.469864540787785e-01, -3.469864540787784e-01, -5.189378773854115e-01, -4.216354653093560e-02, -5.715340694038943e-02, -3.845956347578351e-01, -8.895813772239911e-02, -8.895813772239927e-02, -1.082268007572808e-02, -1.161230569074889e-03, -2.436211439645609e-03, -8.374852544896344e-02, -3.697796617230247e-03, -3.697796617230267e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_dk87_r1_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_dk87_r1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-8.029639188979735e-09, -8.029608661774454e-09, -8.029350576825167e-09, -8.029807230897462e-09, -8.029585373998936e-09, -8.029585373998936e-09, -1.038638065029029e-05, -1.038701392768759e-05, -1.040064114631986e-05, -1.036907812895580e-05, -1.038613841795327e-05, -1.038613841795327e-05, -6.075922733231376e-03, -6.067820837920665e-03, -5.822961365947573e-03, -5.673829347323455e-03, -5.737796027018865e-03, -5.737796027018865e-03, -6.262448657900722e-01, -6.134004803897968e-01, -3.463016851392699e-03, -1.221228953843674e+00, -9.364798671701192e-01, -9.364798671701192e-01, -1.225467821576444e+04, -1.065609474990649e+04, -5.599107819510616e+01, -6.207861409710092e+04, -3.322419093396969e+04, -3.322419093396974e+04, -2.424439702468950e-06, -2.425637249935130e-06, -2.424474533959378e-06, -2.425532418767289e-06, -2.425061291524430e-06, -2.425061291524430e-06, -6.953113351240179e-05, -6.837975747687105e-05, -6.907204547904241e-05, -6.805384116682550e-05, -6.912452555402427e-05, -6.912452555402427e-05, -1.344903176659445e-02, -1.119700232151832e-02, -1.759194399037309e-02, -1.832266310878037e-02, -1.302262995705869e-02, -1.302262995705869e-02, -3.219834565577268e+00, -4.735974707779276e-01, -4.104472422141267e+00, -1.356392763420834e-04, -2.259727376342396e+00, -2.259727376342396e+00, -1.447886794569042e+05, -6.920935121237906e+04, -2.450903273795786e+05, -1.405817271365620e+01, -1.157831326612276e+05, -1.157831326612274e+05, -1.326320425814332e-02, -1.560794237120810e-02, -1.514688112158528e-02, -1.452884343662076e-02, -1.487163105446878e-02, -1.487163105446878e-02, -1.273207610976209e-02, -2.121640979505613e-02, -2.103619594409802e-02, -2.076931024922227e-02, -2.101717335710088e-02, -2.101717335710088e-02, -9.306011995680779e-03, -2.332809144642405e-01, -1.446820901767148e-01, -7.922795875060208e-02, -1.072805186336713e-01, -1.072805186336713e-01, -2.916595190472836e-02, -6.223872903904538e+01, -2.494045907314423e+01, -1.071254727800864e-01, -7.321337083499179e+00, -7.321337083499169e+00, -4.133205854325266e+03, -5.392028875111832e+06, -4.863287676038996e+05, -8.750180492861952e+00, -1.549286678604544e+05, -1.549286678604548e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
