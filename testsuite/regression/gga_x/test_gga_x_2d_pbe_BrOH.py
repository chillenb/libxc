
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_2d_pbe_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_2d_pbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.487326431559639e+02, -1.487331618755118e+02, -1.487359035443492e+02, -1.487274008161494e+02, -1.487329131371939e+02, -1.487329131371939e+02, -1.013500862659310e+01, -1.013497739803598e+01, -1.013473039193152e+01, -1.013829924406605e+01, -1.013505571028776e+01, -1.013505571028776e+01, -1.001154045488148e+00, -1.000799245402536e+00, -9.909469371009451e-01, -1.000554379906162e+00, -1.001020240629722e+00, -1.001020240629722e+00, -1.656065179393628e-01, -1.685612905964650e-01, -1.251052308617787e+00, -1.043049820007235e-01, -1.664906311984931e-01, -1.664906311984931e-01, -2.249147581247052e-03, -2.411124911026814e-03, -1.975239814014178e-02, -7.473413175245634e-04, -2.373533929195082e-03, -2.373533929195082e-03, -1.807717433245739e+01, -1.807980114783561e+01, -1.807746327680093e+01, -1.807950544334492e+01, -1.807849225007263e+01, -1.807849225007263e+01, -4.683433880236952e+00, -4.720936589756255e+00, -4.677481733495636e+00, -4.706712230477383e+00, -4.716430232574427e+00, -4.716430232574427e+00, -7.673582192603521e-01, -7.878312272284418e-01, -7.170645456416932e-01, -7.044403769191993e-01, -7.995049854649746e-01, -7.995049854649746e-01, -6.605534186656063e-02, -1.693823042937990e-01, -6.478151053080368e-02, -4.050188828854610e+00, -8.194865213863282e-02, -8.194865213863282e-02, -7.081066061124661e-04, -8.651168638833108e-04, -5.613538973973341e-04, -3.249311925982075e-02, -7.524250245937183e-04, -7.524250245937183e-04, -7.058835182803491e-01, -7.213966681743484e-01, -7.161546369809685e-01, -7.118575481341707e-01, -7.140317784240994e-01, -7.140317784240994e-01, -6.688225619826936e-01, -6.601500961487963e-01, -6.745244730459581e-01, -6.793391148318012e-01, -6.776056112863128e-01, -6.776056112863128e-01, -8.473518685206518e-01, -2.357598146905936e-01, -2.986941588941712e-01, -4.038558758105961e-01, -3.492811937015765e-01, -3.492811937015764e-01, -5.747543331694024e-01, -1.760740158989311e-02, -2.772484409279316e-02, -3.619476645842989e-01, -4.834772581271845e-02, -4.834772581271846e-02, -2.853672031806433e-03, -1.239321862614625e-04, -3.244812202894284e-04, -4.505502564236134e-02, -5.895087545733590e-04, -5.895087545733577e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_2d_pbe_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_2d_pbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.206773275806460e+02, -2.206781636455576e+02, -2.206824442590974e+02, -2.206687424077453e+02, -2.206777638892755e+02, -2.206777638892755e+02, -1.406482567866480e+01, -1.406492923459956e+01, -1.406865987728983e+01, -1.406678048130390e+01, -1.406497032889317e+01, -1.406497032889317e+01, -1.220182667723788e+00, -1.220056528503424e+00, -1.223459514820712e+00, -1.233770666702505e+00, -1.220127586845735e+00, -1.220127586845735e+00, -2.353042559458549e-01, -2.385845294160045e-01, -1.533013270829422e+00, -1.538663226311512e-01, -2.362838238615971e-01, -2.362838238615971e-01, -3.373685069182987e-03, -3.616642556888399e-03, -2.961167805375503e-02, -1.121010860535357e-03, -3.560257325890753e-03, -3.560257325890753e-03, -2.628583745910273e+01, -2.629568479624820e+01, -2.628686099555355e+01, -2.629451763086311e+01, -2.629086414955978e+01, -2.629086414955978e+01, -5.811417106159594e+00, -5.868697812251156e+00, -5.792123892326358e+00, -5.836294093913453e+00, -5.876567384597800e+00, -5.876567384597800e+00, -9.445606311464197e-01, -1.080605889861358e+00, -8.781157743945432e-01, -9.273195657939672e-01, -9.939196288372956e-01, -9.939196288372956e-01, -9.851718653239530e-02, -2.459572078325583e-01, -9.659390841249525e-02, -5.868310322216719e+00, -1.216705206317992e-01, -1.216705206317992e-01, -1.062158931675953e-03, -1.297673510861244e-03, -8.420300211302772e-04, -4.866036346414981e-02, -1.128636109648017e-03, -1.128636109648017e-03, -1.025508207608472e+00, -9.943795420831775e-01, -1.004228304352167e+00, -1.012803976739182e+00, -1.008404622487077e+00, -1.008404622487077e+00, -9.809532746500986e-01, -8.058562698562213e-01, -8.232405107728710e-01, -8.548618413074963e-01, -8.357257469327212e-01, -8.357257469327212e-01, -1.158904638741209e+00, -3.340929825057516e-01, -4.082767230061748e-01, -5.075049989796010e-01, -4.583836232125666e-01, -4.583836232125665e-01, -7.060973678640950e-01, -2.640023529035965e-02, -4.154299128578355e-02, -4.466295802241657e-01, -7.224198942718783e-02, -7.224198942718785e-02, -4.280443709936264e-03, -1.858982725185444e-04, -4.867217159224229e-04, -6.733124990481136e-02, -8.842623025034583e-04, -8.842623025034563e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_2d_pbe_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_2d_pbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-5.450334332308746e-09, -5.450278495088462e-09, -5.449980908115781e-09, -5.450896256781367e-09, -5.450305290950704e-09, -5.450305290950704e-09, -1.618519495498387e-05, -1.618554606240430e-05, -1.619231082363084e-05, -1.616585954772197e-05, -1.618507817356610e-05, -1.618507817356610e-05, -8.512108497711293e-03, -8.444784185468261e-03, -6.646017765154876e-03, -6.594747917065427e-03, -8.487988959431618e-03, -8.487988959431618e-03, -9.068900662298097e-02, -9.862764416514541e-02, -5.899048992142717e-03, -3.462728711972147e-02, -9.314736324599505e-02, -9.314736324599505e-02, -1.440740973721990e-03, -1.550397934648513e-03, -5.992668704240239e-03, -3.359968838293715e-04, -1.585457550389535e-03, -1.585457550389535e-03, -2.988404159848666e-06, -2.987672601286111e-06, -2.988318076789322e-06, -2.987749447550596e-06, -2.988045389671183e-06, -2.988045389671183e-06, -1.245931290936870e-04, -1.229525682040735e-04, -1.234746249073489e-04, -1.222416241557045e-04, -1.248537110642762e-04, -1.248537110642762e-04, -2.674882878376419e-02, -3.395712034909902e-02, -3.108481602043685e-02, -4.445269761942510e-02, -2.531929897798007e-02, -2.531929897798007e-02, -1.608147797863768e-02, -3.046395292931060e-02, -1.852296029359853e-02, -2.649064889387824e-04, -2.689724883831551e-02, -2.689724883831551e-02, -3.376984765848214e-04, -4.136950043829380e-04, -7.682160219286976e-04, -1.094035078413108e-02, -5.314651186405070e-04, -5.314651186405068e-04, -5.015445763583386e-02, -4.451145434932192e-02, -4.642264144835120e-02, -4.798461835753824e-02, -4.719447892195829e-02, -4.719447892195829e-02, -5.941952506349110e-02, -2.823288157774864e-02, -3.543942521078877e-02, -4.372227763126302e-02, -3.947826021479040e-02, -3.947826021479042e-02, -2.718763360348015e-02, -3.459285701263986e-02, -4.574943219933910e-02, -7.499187734532356e-02, -6.083032143638038e-02, -6.083032143638042e-02, -3.717458564274881e-02, -4.392035012792380e-03, -7.534868707324875e-03, -1.376441740850630e-01, -1.866935051330954e-02, -1.866935051330958e-02, -1.376293702459106e-03, -1.016831967706800e-04, -2.293755303315882e-04, -2.145484202347385e-02, -6.078921633041685e-04, -6.078921633041663e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
