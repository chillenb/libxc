
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_optb88_vdw_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_optb88_vdw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.082770455667115e+01, -2.082773650006834e+01, -2.082793837794268e+01, -2.082746188963276e+01, -2.082770304659918e+01, -2.082770304659918e+01, -3.443905374701792e+00, -3.443875072690999e+00, -3.443258990701429e+00, -3.444984191261300e+00, -3.443952061675374e+00, -3.443952061675374e+00, -6.868625142603543e-01, -6.867502989553907e-01, -6.856526024939368e-01, -6.904738225251066e-01, -6.887546880272114e-01, -6.887546880272114e-01, -2.090806017852947e-01, -2.099997498910231e-01, -7.941774646926936e-01, -1.822883321659517e-01, -1.912154319428488e-01, -1.912154319428488e-01, -5.652429654591413e-02, -5.655076189638296e-02, -1.019045029088730e-01, -5.166039777674161e-02, -5.140439594344157e-02, -5.140439594344154e-02, -5.016676546415398e+00, -5.016270316596743e+00, -5.016667599020079e+00, -5.016308839802488e+00, -5.016465318844503e+00, -5.016465318844503e+00, -2.069395903206109e+00, -2.079827045995518e+00, -2.068923506987384e+00, -2.078120649242186e+00, -2.075398084475745e+00, -2.075398084475745e+00, -5.766271708818801e-01, -6.021970482913056e-01, -5.371351610277310e-01, -5.364148458725893e-01, -5.828860333739909e-01, -5.828860333739909e-01, -1.552620077584569e-01, -2.273963128246783e-01, -1.483782525854205e-01, -1.811910282284284e+00, -1.607290895269627e-01, -1.607290895269627e-01, -4.661306262684313e-02, -4.976300975239537e-02, -3.258857041395332e-02, -1.197110439878662e-01, -3.941817165187175e-02, -3.941817165187177e-02, -5.506752719121915e-01, -5.533810266314442e-01, -5.524759319617586e-01, -5.516863111446496e-01, -5.520848279519734e-01, -5.520848279519734e-01, -5.339637429097105e-01, -5.030756192646417e-01, -5.123441668183280e-01, -5.209866159994295e-01, -5.164595196398921e-01, -5.164595196398921e-01, -6.323477654116592e-01, -2.679787865970562e-01, -3.012975189553013e-01, -3.596019270473063e-01, -3.275689508351418e-01, -3.275689508351418e-01, -4.640962958888613e-01, -1.018706993213029e-01, -1.139284305106017e-01, -3.380369468316702e-01, -1.296391937426595e-01, -1.296391937426595e-01, -6.371772407337710e-02, -2.877714499569304e-02, -3.763249746451438e-02, -1.262311204746709e-01, -3.704458449066221e-02, -3.704458449066219e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_optb88_vdw_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_optb88_vdw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.542154077723188e+01, -2.542163253950541e+01, -2.542202890334588e+01, -2.542066391121566e+01, -2.542138078292373e+01, -2.542138078292373e+01, -4.099045922542270e+00, -4.099081450894815e+00, -4.100003767222034e+00, -4.099179295647875e+00, -4.099187332119448e+00, -4.099187332119448e+00, -7.765414820279549e-01, -7.753336409710090e-01, -7.462928704192809e-01, -7.528770912358543e-01, -7.517893577946380e-01, -7.517893577946380e-01, -1.915223350402792e-01, -1.946590965630810e-01, -9.092958529812215e-01, -1.455761680293261e-01, -1.627725596169207e-01, -1.627725596169207e-01, -1.639613883579119e-02, -1.674629137801305e-02, -5.080287509743718e-02, -1.260124413817575e-02, -1.365099779189399e-02, -1.365099779189401e-02, -6.247223874924477e+00, -6.249539360623717e+00, -6.247329211358164e+00, -6.249373323761835e+00, -6.248397968783814e+00, -6.248397968783814e+00, -2.234137733908273e+00, -2.252307058833462e+00, -2.217940719648381e+00, -2.233934113395413e+00, -2.252091540040777e+00, -2.252091540040777e+00, -6.948151888151360e-01, -7.762428491162947e-01, -6.402962408002224e-01, -6.840015229037637e-01, -7.083431568588396e-01, -7.083431568588396e-01, -1.056907218753760e-01, -1.912787845327579e-01, -9.879614221914992e-02, -2.339625897632439e+00, -1.200861318965804e-01, -1.200861318965804e-01, -1.077889861185907e-02, -1.220148414242977e-02, -8.450583131677833e-03, -7.116910658396536e-02, -1.020628654771023e-02, -1.020628654771025e-02, -7.250909285382885e-01, -7.143598863696341e-01, -7.179959394346787e-01, -7.211064311511776e-01, -7.195375985813590e-01, -7.195375985813590e-01, -7.076162808281324e-01, -5.706843842332366e-01, -6.065641060996033e-01, -6.445750242490113e-01, -6.249656899368343e-01, -6.249656899368343e-01, -8.127236506109274e-01, -2.420561359642128e-01, -2.934461304790908e-01, -4.005700011002763e-01, -3.420856964429467e-01, -3.420856964429467e-01, -5.248733983377897e-01, -4.966089102868326e-02, -6.163290933684716e-02, -3.909712050155261e-01, -8.518048977635972e-02, -8.518048977635978e-02, -2.029834220304086e-02, -5.563241969420925e-03, -8.350227085339357e-03, -8.101653950830690e-02, -9.536929183331443e-03, -9.536929183331440e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_optb88_vdw_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_optb88_vdw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-5.946616613862045e-09, -5.946585701560720e-09, -5.946370976912857e-09, -5.946832499468560e-09, -5.946601651191231e-09, -5.946601651191231e-09, -7.887267531370776e-06, -7.887577692765163e-06, -7.893982934647132e-06, -7.876872293359562e-06, -7.886878894746417e-06, -7.886878894746417e-06, -4.967629674767811e-03, -4.971475848577610e-03, -5.036464568504021e-03, -4.894985834387393e-03, -4.942718729761742e-03, -4.942718729761742e-03, -6.470416209949658e-01, -6.289359088266911e-01, -2.777730362873408e-03, -1.322420960492576e+00, -1.001080266316220e+00, -1.001080266316220e+00, -8.713724591830611e+03, -7.641376783338760e+03, -5.100923628367124e+01, -4.111633622238525e+04, -2.278799738585396e+04, -2.278799738585399e+04, -1.786638884554226e-06, -1.787766364885644e-06, -1.786674180517320e-06, -1.787669663229397e-06, -1.787218659472936e-06, -1.787218659472936e-06, -6.083759981772618e-05, -5.957226418484357e-05, -6.102930703097879e-05, -5.990233987928627e-05, -6.004771328403648e-05, -6.004771328403648e-05, -1.007093335200471e-02, -8.895246739815373e-03, -1.333393266773777e-02, -1.394766648474766e-02, -9.675729020139604e-03, -9.675729020139604e-03, -3.413384776365064e+00, -5.080489818115296e-01, -4.318188812672282e+00, -1.087890571296678e-04, -2.445370953507471e+00, -2.445370953507471e+00, -9.377966628220111e+04, -4.593779597533626e+04, -1.664736549275150e+05, -1.406503868504150e+01, -7.859559387465390e+04, -7.859559387465384e+04, -1.320339117460907e-02, -1.249895102138162e-02, -1.270722335650194e-02, -1.290792896217971e-02, -1.280394065098608e-02, -1.280394065098608e-02, -1.519210329998019e-02, -1.725786195276695e-02, -1.608356820387826e-02, -1.529674766159390e-02, -1.567312009617399e-02, -1.567312009617399e-02, -7.288623186099707e-03, -2.430244019715141e-01, -1.426740683602713e-01, -6.623960179696955e-02, -9.810712183034692e-02, -9.810712183034695e-02, -2.383327119593283e-02, -5.603155449018775e+01, -2.374297449240390e+01, -8.463881972068625e-02, -7.664225149343256e+00, -7.664225149343258e+00, -3.054500156745124e+03, -3.226799340548215e+06, -3.095087560257593e+05, -9.073310437983157e+00, -1.049215454729000e+05, -1.049215454729003e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
