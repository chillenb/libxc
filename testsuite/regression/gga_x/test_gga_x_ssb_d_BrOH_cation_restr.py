
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_ssb_d_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ssb_d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.188313049831767e+01, -2.188315527583226e+01, -2.188334242930722e+01, -2.188297228503437e+01, -2.188315524574794e+01, -2.188315524574794e+01, -3.651658810252981e+00, -3.651593503409065e+00, -3.650176734491485e+00, -3.653337804530548e+00, -3.651668548125844e+00, -3.651668548125844e+00, -7.371639835122022e-01, -7.376803485711936e-01, -7.539013240537205e-01, -7.588178720294495e-01, -7.562483968525070e-01, -7.562483968525070e-01, -2.201210960882212e-01, -2.212365132494660e-01, -8.523998707810958e-01, -1.852214034130697e-01, -1.987981416893691e-01, -1.987981416893691e-01, -1.008796321595282e-02, -1.061716809587116e-02, -5.776205903135101e-02, -5.828352085851908e-03, -7.322746338744991e-03, -7.322746338744990e-03, -5.266095226312549e+00, -5.265919350130877e+00, -5.266095876798143e+00, -5.265940250811248e+00, -5.265999220553802e+00, -5.265999220553802e+00, -2.372906024235266e+00, -2.378159781463264e+00, -2.387854539606341e+00, -2.392411281761053e+00, -2.368641617701866e+00, -2.368641617701866e+00, -5.964178530124598e-01, -6.361726280946615e-01, -5.547332333583828e-01, -5.620178170465030e-01, -6.028129314378632e-01, -6.028129314378632e-01, -1.403268981634995e-01, -2.360745907441380e-01, -1.309861373913728e-01, -1.924051353154279e+00, -1.571999141331234e-01, -1.571999141331234e-01, -4.497215517625814e-03, -5.697691478598027e-03, -4.356348091364384e-03, -9.123726294884330e-02, -5.248064261216031e-03, -5.248064261216031e-03, -5.897092056627852e-01, -5.846069576124104e-01, -5.863021937798101e-01, -5.877927266418528e-01, -5.870380675423371e-01, -5.870380675423371e-01, -5.742983174343467e-01, -5.266533783687234e-01, -5.286892298056071e-01, -5.380375419460057e-01, -5.316228811816575e-01, -5.316228811816575e-01, -6.671970701563780e-01, -2.829646287634927e-01, -3.193371835421374e-01, -3.719064241252794e-01, -3.441815329708099e-01, -3.441815329708099e-01, -4.837904554254664e-01, -5.538804467809435e-02, -7.468277202575735e-02, -3.449119180892695e-01, -1.127178988688529e-01, -1.127178988688530e-01, -1.423091264447661e-02, -1.523267212155632e-03, -3.197210897070039e-03, -1.067320359194645e-01, -4.856150131298138e-03, -4.856150131298135e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_ssb_d_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ssb_d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.592045341835357e+01, -2.592067685623690e+01, -2.592145003520748e+01, -2.591813016439209e+01, -2.591990106246254e+01, -2.591990106246254e+01, -3.913094998921998e+00, -3.913312880933789e+00, -3.918452111750760e+00, -3.910267749420796e+00, -3.913450536876617e+00, -3.913450536876617e+00, -7.009604610591713e-01, -6.989358493445927e-01, -6.601501509590668e-01, -6.653498925061582e-01, -6.648215755088344e-01, -6.648215755088344e-01, -2.082571846077124e-01, -2.088101172894054e-01, -8.200723698221123e-01, -1.875838178299747e-01, -1.935573043710369e-01, -1.935573043710369e-01, -1.343538136698508e-02, -1.413796886493052e-02, -7.479820606634016e-02, -7.768335037174213e-03, -9.757403053207886e-03, -9.757403053207886e-03, -6.638652276628486e+00, -6.645999837431426e+00, -6.638967127118645e+00, -6.645454756728143e+00, -6.642396569626249e+00, -6.642396569626249e+00, -1.788653518925316e+00, -1.808679579438331e+00, -1.763710592502953e+00, -1.780965173917180e+00, -1.812329628592003e+00, -1.812329628592003e+00, -7.094734609831378e-01, -8.541135669698905e-01, -6.417585240131474e-01, -7.542407734572893e-01, -7.356655185540674e-01, -7.356655185540674e-01, -1.598396124833691e-01, -2.308964012697415e-01, -1.514467041459812e-01, -2.556434059167837e+00, -1.672360943220845e-01, -1.672360943220845e-01, -5.994811223492541e-03, -7.594084128315679e-03, -5.805291268674944e-03, -1.122639420461983e-01, -6.993633281844615e-03, -6.993633281844615e-03, -7.901208168140270e-01, -7.865792755651978e-01, -7.885305292868349e-01, -7.895034670742987e-01, -7.890799909511850e-01, -7.890799909511850e-01, -7.676328438181343e-01, -5.337142719420835e-01, -6.012302875578719e-01, -6.938223815350232e-01, -6.468781019652701e-01, -6.468781019652701e-01, -8.940186075445902e-01, -2.675253159755572e-01, -2.983918909855136e-01, -3.758108392783719e-01, -3.274288203582428e-01, -3.274288203582429e-01, -4.921425653482117e-01, -7.198412281273980e-02, -9.498554620328162e-02, -3.773044565224757e-01, -1.314765633353626e-01, -1.314765633353627e-01, -1.893612017240731e-02, -2.030903045824720e-03, -4.262176152240278e-03, -1.262879962030434e-01, -6.471496498308025e-03, -6.471496498308021e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_ssb_d_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ssb_d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-8.246344912808075e-09, -8.245992613835616e-09, -8.244815610547907e-09, -8.250048966667618e-09, -8.247251451314379e-09, -8.247251451314379e-09, -1.529902188159806e-05, -1.529709905316176e-05, -1.525088468244829e-05, -1.531926725637525e-05, -1.529524199632646e-05, -1.529524199632646e-05, -1.065269248282870e-02, -1.068422902128552e-02, -1.104120132591912e-02, -1.077048554261198e-02, -1.086291820771619e-02, -1.086291820771619e-02, -6.373926910159835e-01, -6.403446990527343e-01, -6.119119791736100e-03, -8.109196759987735e-01, -7.818898366459681e-01, -7.818898366459680e-01, -2.256789052592964e+00, -2.383628084697200e+00, -1.335254891857366e+00, -2.051784313467452e+00, -2.603827511831784e+00, -2.603827511832443e+00, -1.548604139674698e-06, -1.528780233179394e-06, -1.547775510608160e-06, -1.530273553918403e-06, -1.538508024814808e-06, -1.538508024814808e-06, -1.595970385179139e-04, -1.560560213650167e-04, -1.605729667117510e-04, -1.574456684455707e-04, -1.571308527817449e-04, -1.571308527817449e-04, -1.280728828471486e-02, 1.184615579462164e-03, -1.875674519814510e-02, 8.410273355492406e-04, -1.063321361816027e-02, -1.063321361816027e-02, -9.237917046482897e-01, -3.860176251099249e-01, -1.016956421668225e+00, -1.308776338404419e-05, -1.104879507446303e+00, -1.104879507446303e+00, -2.700073965535176e+00, -2.412883773829705e+00, -1.509634592471604e+01, -1.497946210038498e+00, -7.030954589636608e+00, -7.030954589636607e+00, 4.431371080233197e-03, 2.636024874197556e-03, 3.497093927460840e-03, 4.027140047471961e-03, 3.783904012385104e-03, 3.783904012385104e-03, 5.409103405022674e-03, -3.120561544989599e-02, -2.364644191810104e-02, -8.799874216468124e-03, -1.698875116813674e-02, -1.698875116813674e-02, 4.509175276355727e-04, -2.365967446223162e-01, -1.727551446618654e-01, -1.049088677466348e-01, -1.408413623452761e-01, -1.408413623452762e-01, -4.148011092867412e-02, -1.219176998382559e+00, -1.213019716529043e+00, -1.212406836839860e-01, -1.650087901135477e+00, -1.650087901135473e+00, -1.820832537578349e+00, -1.179901394382078e+01, -5.715913515045020e+00, -1.670683207580875e+00, -8.877897770592442e+00, -8.877897770586294e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
