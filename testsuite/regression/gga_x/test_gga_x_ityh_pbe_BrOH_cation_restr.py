
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_ityh_pbe_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ityh_pbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.074432182666342e+01, -2.074434968833445e+01, -2.074454059464157e+01, -2.074412468983108e+01, -2.074433308045353e+01, -2.074433308045353e+01, -3.270128686744674e+00, -3.270094621387172e+00, -3.269392257397239e+00, -3.271272393553163e+00, -3.270171469339010e+00, -3.270171469339010e+00, -5.015398465373946e-01, -5.012672129709957e-01, -4.955957330770508e-01, -5.005679588521013e-01, -4.990201040433282e-01, -4.990201040433282e-01, -5.058072912905200e-02, -5.223033284407307e-02, -6.085324561560900e-01, -2.617745337850533e-02, -3.485926533732842e-02, -3.485926533732842e-02, -3.134433649678840e-06, -3.654744294138668e-06, -6.053289565005995e-04, -6.039584001609379e-07, -1.198225833366875e-06, -1.198225833366875e-06, -4.839700580799112e+00, -4.839171684820595e+00, -4.839686576876116e+00, -4.839219507148651e+00, -4.839426752741742e+00, -4.839426752741742e+00, -1.889823700457225e+00, -1.900432128409298e+00, -1.889295957489812e+00, -1.898683376521563e+00, -1.895920561951618e+00, -1.895920561951618e+00, -4.014020662701082e-01, -4.329395423678180e-01, -3.623444664745992e-01, -3.686070867402137e-01, -4.083141073065986e-01, -4.083141073065986e-01, -9.841887190227518e-03, -5.187788387195852e-02, -7.908513964327589e-03, -1.629587464345048e+00, -1.524833328132373e-02, -1.524833328132373e-02, -2.774289562021546e-07, -5.642582687703813e-07, -2.522823281662954e-07, -2.523781449122242e-03, -4.410597005674707e-07, -4.410597005674707e-07, -3.855576957621357e-01, -3.861068610151701e-01, -3.859274227052116e-01, -3.857636988482743e-01, -3.858462365913511e-01, -3.858462365913511e-01, -3.702170842012987e-01, -3.242366694421926e-01, -3.379409349614085e-01, -3.508079011214011e-01, -3.441985233711839e-01, -3.441985233711839e-01, -4.617997344345058e-01, -8.646365185346629e-02, -1.222203558593020e-01, -1.893978227145301e-01, -1.534634817521578e-01, -1.534634817521578e-01, -2.870533336423033e-01, -5.314087126148091e-04, -1.331363687388372e-03, -1.745033535173585e-01, -5.081082889695078e-03, -5.081082889695066e-03, -8.807300195451553e-06, -1.077854039771082e-08, -9.968059029804227e-08, -4.240312114376870e-03, -3.494380367969398e-07, -3.494380367969390e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_ityh_pbe_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ityh_pbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.498115950869845e+01, -2.498125869794702e+01, -2.498167467763989e+01, -2.498019946634259e+01, -2.498097599510032e+01, -2.498097599510032e+01, -3.883812112930806e+00, -3.883853574489662e+00, -3.884911884497489e+00, -3.883839359305024e+00, -3.883959103456657e+00, -3.883959103456657e+00, -6.244475517195696e-01, -6.234863976452173e-01, -6.017815907685804e-01, -6.078320182241097e-01, -6.065599716423403e-01, -6.065599716423403e-01, -8.407620681510219e-02, -8.635177035700502e-02, -7.518694758153636e-01, -4.719432228135550e-02, -6.086458974534940e-02, -6.086458974534940e-02, -6.267988559346724e-06, -7.308353046533866e-06, -1.204576960245024e-03, -1.207860428471456e-06, -2.396274953162060e-06, -2.396274953162060e-06, -6.033523770915287e+00, -6.036161602582228e+00, -6.033642349276509e+00, -6.035971057688990e+00, -6.034862163264223e+00, -6.034862163264223e+00, -2.058143057833210e+00, -2.074789082318708e+00, -2.045136690594178e+00, -2.059637323856742e+00, -2.073868179135853e+00, -2.073868179135853e+00, -5.370144602275964e-01, -6.092358088696739e-01, -4.852652705749023e-01, -5.202311043250363e-01, -5.492691363446063e-01, -5.492691363446063e-01, -1.885510748519341e-02, -8.733262373610981e-02, -1.525669017563413e-02, -2.160513609787536e+00, -2.854891876744479e-02, -2.854891876744479e-02, -5.548425010062034e-07, -1.128466203320923e-06, -5.045514913179945e-07, -4.973733130489088e-03, -8.820859999252415e-07, -8.820859999252415e-07, -5.561792255792748e-01, -5.484006080533022e-01, -5.510863545878736e-01, -5.533450906232182e-01, -5.522104244451286e-01, -5.522104244451286e-01, -5.380666691638037e-01, -4.242894483088441e-01, -4.533931400675615e-01, -4.852511296505646e-01, -4.686826062070654e-01, -4.686826062070654e-01, -6.454172036968278e-01, -1.343429494127283e-01, -1.780073165377327e-01, -2.633371037216187e-01, -2.161371984544381e-01, -2.161371984544381e-01, -3.805094201413958e-01, -1.057966508620266e-03, -2.639134506541108e-03, -2.495344486460607e-01, -9.897284334014544e-03, -9.897284334014550e-03, -1.760967240977163e-05, -2.155701214497336e-08, -1.993583824655901e-07, -8.290197125213760e-03, -6.988534170042790e-07, -6.988534170042773e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_ityh_pbe_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ityh_pbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-6.949605215199295e-09, -6.949557131534986e-09, -6.949272751880275e-09, -6.949989595055778e-09, -6.949624018764037e-09, -6.949624018764037e-09, -8.685276890803255e-06, -8.685545654227875e-06, -8.690925457890211e-06, -8.675131673487798e-06, -8.684781092468954e-06, -8.684781092468954e-06, -3.616383798459372e-03, -3.615543408831629e-03, -3.543370724909507e-03, -3.464665040506767e-03, -3.497263410456688e-03, -3.497263410456688e-03, -4.680147526396693e-02, -4.925310109286303e-02, -2.192723418641670e-03, -2.361827690113306e-02, -3.461328046380284e-02, -3.461328046380284e-02, -3.176855699304933e-07, -4.119510495500836e-07, -2.136338833992015e-04, -3.210825782768149e-08, -1.017179093406067e-07, -1.017179093405893e-07, -1.956078314616102e-06, -1.956319562916894e-06, -1.956076286505983e-06, -1.956289472811529e-06, -1.956208004567046e-06, -1.956208004567046e-06, -6.180595970710655e-05, -6.070354672036804e-05, -6.167142167029131e-05, -6.070883853957266e-05, -6.124866436787936e-05, -6.124866436787936e-05, -6.736852773838221e-03, -5.836615850413502e-03, -8.502833718167745e-03, -8.651626663063804e-03, -6.509792175777282e-03, -6.509792175777282e-03, -6.659023919838470e-03, -2.659414170577703e-02, -5.432679632454107e-03, -1.015920691279652e-04, -1.525870868257484e-02, -1.525870868257484e-02, -1.499337964423273e-08, -3.451433107660356e-08, -7.412032154673506e-08, -1.677380075896969e-03, -7.264297522669844e-08, -7.264297522675695e-08, -7.889637837554052e-03, -7.785098009056196e-03, -7.821704383162235e-03, -7.852337081615179e-03, -7.837036851899471e-03, -7.837036851899471e-03, -8.742495813383782e-03, -1.021203560504602e-02, -9.896983653713923e-03, -9.508870957670985e-03, -9.729091886512345e-03, -9.729091886512345e-03, -4.932921607375142e-03, -3.002970228963679e-02, -3.164905900238711e-02, -2.740787430193413e-02, -3.127761051426835e-02, -3.127761051426836e-02, -1.313707453409745e-02, -1.633294661087663e-04, -5.620313328437977e-04, -3.409730612349576e-02, -4.923678612324672e-03, -4.923678612323622e-03, -1.015828227325232e-06, -8.646759525792587e-10, -8.124287363719203e-09, -3.869754796922931e-03, -6.726460533401395e-08, -6.726460533378802e-08])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
