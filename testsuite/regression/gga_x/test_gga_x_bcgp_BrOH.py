
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_bcgp_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_bcgp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.108435012728470e+01, -2.108437126886536e+01, -2.108454671296512e+01, -2.108419889682933e+01, -2.108436059849480e+01, -2.108436059849480e+01, -3.503031322689734e+00, -3.502998138300283e+00, -3.502230844739124e+00, -3.504296145102503e+00, -3.503029177393469e+00, -3.503029177393469e+00, -7.070673385782948e-01, -7.071899408921863e-01, -7.124640921395885e-01, -7.167008765089575e-01, -7.071078637491921e-01, -7.071078637491921e-01, -2.211434690736546e-01, -2.219643162640203e-01, -8.209635883675229e-01, -1.833203195891694e-01, -2.213651704355589e-01, -2.213651704355589e-01, -1.701221385802498e-02, -1.781555385941241e-02, -7.067212803477792e-02, -8.176089207613469e-03, -1.762998056181677e-02, -1.762998056181677e-02, -5.058582521805663e+00, -5.057810637904995e+00, -5.058510319683972e+00, -5.057910018633752e+00, -5.058176953850104e+00, -5.058176953850104e+00, -2.145348415093602e+00, -2.154649386669592e+00, -2.147420954920728e+00, -2.154656700164529e+00, -2.148961593245924e+00, -2.148961593245924e+00, -5.782622612632454e-01, -5.968168751663058e-01, -5.510872594150219e-01, -5.495348100460286e-01, -5.955575834936276e-01, -5.955575834936276e-01, -1.465213327461493e-01, -2.421453305658573e-01, -1.439539989289019e-01, -1.815577912886616e+00, -1.621930418963502e-01, -1.621930418963502e-01, -7.887508894188891e-03, -9.012981691803233e-03, -6.755457905040251e-03, -9.603050438582632e-02, -8.212183676318756e-03, -8.212183676318756e-03, -5.590148475800406e-01, -5.625886782179731e-01, -5.613258455779717e-01, -5.603332136520291e-01, -5.608305250751445e-01, -5.608305250751445e-01, -5.400093944922931e-01, -5.224713009421161e-01, -5.276949163766143e-01, -5.321191554716356e-01, -5.296914707811394e-01, -5.296914707811394e-01, -6.268780935004962e-01, -2.876478895558968e-01, -3.211243546806384e-01, -3.713659028736018e-01, -3.443747617160290e-01, -3.443747617160290e-01, -4.744947673457977e-01, -6.583161287798739e-02, -8.753525607756477e-02, -3.399164298641170e-01, -1.207469660245870e-01, -1.207469660245869e-01, -1.992964467526456e-02, -2.468808421426468e-03, -4.689248346840123e-03, -1.151040053684847e-01, -6.979756239241133e-03, -6.979756239241124e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_bcgp_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_bcgp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.501227243813991e+01, -2.501236050879400e+01, -2.501275856477957e+01, -2.501131628969212e+01, -2.501231884051904e+01, -2.501231884051904e+01, -4.013114029102110e+00, -4.013153508156094e+00, -4.014404688972038e+00, -4.013100503042172e+00, -4.013151429423945e+00, -4.013151429423945e+00, -7.487934423426427e-01, -7.477024042988911e-01, -7.219431214618468e-01, -7.277876689527895e-01, -7.483962141716017e-01, -7.483962141716017e-01, -2.092407709541924e-01, -2.106238145111233e-01, -9.107309685867301e-01, -1.821232291238619e-01, -2.096208002680401e-01, -2.096208002680401e-01, -2.258162030133658e-02, -2.363751322933604e-02, -8.941561304541988e-02, -1.089200314876601e-02, -2.339151496604281e-02, -2.339151496604281e-02, -6.170516100249197e+00, -6.173318836927963e+00, -6.170802214838369e+00, -6.172981493655930e+00, -6.171953670803378e+00, -6.171953670803378e+00, -2.177841060906676e+00, -2.193958590178784e+00, -2.170759394763552e+00, -2.183194730107441e+00, -2.198419896954658e+00, -2.198419896954658e+00, -6.748403915024662e-01, -7.650493098369254e-01, -6.383885828022541e-01, -6.903789452516432e-01, -7.050687891002864e-01, -7.050687891002864e-01, -1.619760508643676e-01, -2.317027345092122e-01, -1.579767196478291e-01, -2.326701079640218e+00, -1.685926715241650e-01, -1.685926715241650e-01, -1.050794090548219e-02, -1.200425671169035e-02, -8.997979394267041e-03, -1.158493637027252e-01, -1.093757897780338e-02, -1.093757897780338e-02, -7.366341064048940e-01, -7.244731565463405e-01, -7.287502833039481e-01, -7.321181560660787e-01, -7.304269364620378e-01, -7.304269364620378e-01, -7.143771099045264e-01, -5.698522191673178e-01, -6.071865772544865e-01, -6.458776043251246e-01, -6.258835576190019e-01, -6.258835576190019e-01, -8.008213877339755e-01, -2.712024442958998e-01, -3.084189611962265e-01, -3.942645428390804e-01, -3.452885701595326e-01, -3.452885701595325e-01, -5.122975893232836e-01, -8.421505258337131e-02, -1.082263849038034e-01, -3.781814949254180e-01, -1.367489768460581e-01, -1.367489768460580e-01, -2.643158840626662e-02, -3.291392931181099e-03, -6.250094986050733e-03, -1.301900614068277e-01, -9.297439264494648e-03, -9.297439264494634e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_bcgp_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_bcgp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-7.849744514924115e-09, -7.849700435427795e-09, -7.849401194225719e-09, -7.850125053043393e-09, -7.849722126506849e-09, -7.849722126506849e-09, -1.052460169856622e-05, -1.052488134595597e-05, -1.053082759952209e-05, -1.051165933447229e-05, -1.052456619482756e-05, -1.052456619482756e-05, -6.597137283858453e-03, -6.596804404920715e-03, -6.482982517690646e-03, -6.328778035899207e-03, -6.597161180537658e-03, -6.597161180537658e-03, -6.665209991261984e-01, -6.640569207185856e-01, -3.552031006748328e-03, -9.366845420490171e-01, -6.662922293836387e-01, -6.662922293836387e-01, -4.524224666398085e+00, -4.536995976225394e+00, -1.918184323884246e+00, -3.201194277676322e+00, -4.713169866161638e+00, -4.713169866161638e+00, -2.326282893822806e-06, -2.326755491415422e-06, -2.326321058916648e-06, -2.326688713719292e-06, -2.326540126631564e-06, -2.326540126631564e-06, -7.883234224030178e-05, -7.743631339234729e-05, -7.858033014968381e-05, -7.750299802912464e-05, -7.818168318929866e-05, -7.818168318929866e-05, -1.401692544405069e-02, -1.159810393508601e-02, -1.706975735009514e-02, -1.636835815543451e-02, -1.234707763491345e-02, -1.234707763491345e-02, -1.067471292453758e+00, -3.849256266116864e-01, -1.223655581845738e+00, -1.354503997786408e-04, -1.151580716959783e+00, -1.151580716959783e+00, -3.395949622239817e+00, -3.403200069373536e+00, -9.740488998158922e+00, -1.891805322643797e+00, -5.026710408201824e+00, -5.026710408201819e+00, -1.476600870857587e-02, -1.464037622352062e-02, -1.468516906471623e-02, -1.472020715066225e-02, -1.470271920024891e-02, -1.470271920024891e-02, -1.690757884876367e-02, -2.184025946132644e-02, -2.038582906365138e-02, -1.906248954737975e-02, -1.975592556730324e-02, -1.975592556730324e-02, -9.552036895293572e-03, -2.236417825192551e-01, -1.549910488679628e-01, -8.660738698024102e-02, -1.189097123243851e-01, -1.189097123243851e-01, -3.226033017677161e-02, -1.618853236374940e+00, -1.624950420870970e+00, -1.206745624160073e-01, -1.821391395684278e+00, -1.821391395684280e+00, -3.399782483666152e+00, -5.851957253880937e+00, -5.039056848358463e+00, -2.236270841139401e+00, -7.340815053725982e+00, -7.340815053725964e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
