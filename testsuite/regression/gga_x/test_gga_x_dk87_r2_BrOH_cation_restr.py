
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_dk87_r2_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_dk87_r2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.105765821037749e+01, -2.105768157784530e+01, -2.105786031329180e+01, -2.105751110670432e+01, -2.105768344083986e+01, -2.105768344083986e+01, -3.499244510509501e+00, -3.499202239576778e+00, -3.498310547792336e+00, -3.500525104825674e+00, -3.499278180813286e+00, -3.499278180813286e+00, -7.037167799283602e-01, -7.037309578568980e-01, -7.054284205777036e-01, -7.102756935588522e-01, -7.084396514164403e-01, -7.084396514164403e-01, -2.152844824572839e-01, -2.163862295858761e-01, -8.122265299321156e-01, -1.851627477175571e-01, -1.956645292079585e-01, -1.956645292079585e-01, -6.381623523917944e-02, -6.339654569547824e-02, -1.006083367556012e-01, -6.213317660807031e-02, -5.988391050884628e-02, -5.988391050884623e-02, -5.051199606476812e+00, -5.050325353749682e+00, -5.051171376360807e+00, -5.050399405243364e+00, -5.050749857836719e+00, -5.050749857836719e+00, -2.130538617523858e+00, -2.140744771162744e+00, -2.131185227942007e+00, -2.140229105074708e+00, -2.135821033334934e+00, -2.135821033334934e+00, -5.845043140121053e-01, -6.025465322968540e-01, -5.456085188573732e-01, -5.376483240550631e-01, -5.898462255530579e-01, -5.898462255530579e-01, -1.544456900353983e-01, -2.323939373303626e-01, -1.472137742288789e-01, -1.812531912030517e+00, -1.618440622427586e-01, -1.618440622427586e-01, -5.724835504500255e-02, -5.973191141865365e-02, -3.829867473353939e-02, -1.176527291992422e-01, -4.635069159009857e-02, -4.635069159009859e-02, -5.500272556164354e-01, -5.535908888411649e-01, -5.522423022234786e-01, -5.511830270562302e-01, -5.517029191715965e-01, -5.517029191715965e-01, -5.334626244161734e-01, -5.151858236049414e-01, -5.210921421139155e-01, -5.252723446012311e-01, -5.230725111927618e-01, -5.230725111927618e-01, -6.329854706062652e-01, -2.756645696441947e-01, -3.110604819790314e-01, -3.691030705000543e-01, -3.379351764387896e-01, -3.379351764387896e-01, -4.754622778948842e-01, -1.008181094324501e-01, -1.118800743020122e-01, -3.451848369043488e-01, -1.284322936963265e-01, -1.284322936963265e-01, -6.972976337145070e-02, -3.812641300756538e-02, -4.699599789471978e-02, -1.247552584037555e-01, -4.365257684782640e-02, -4.365257684782639e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_dk87_r2_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_dk87_r2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.490003541772732e+01, -2.490012899466619e+01, -2.490052773649313e+01, -2.489913590283465e+01, -2.489986762998451e+01, -2.489986762998451e+01, -4.014962895579985e+00, -4.014992958741805e+00, -4.015788521402273e+00, -4.015170486598103e+00, -4.015095726279603e+00, -4.015095726279603e+00, -7.675293241927178e-01, -7.666198412931070e-01, -7.462667532004407e-01, -7.523973571121941e-01, -7.510452324280966e-01, -7.510452324280966e-01, -2.035908420372863e-01, -2.061799814721255e-01, -8.959480991949028e-01, -1.589066145927652e-01, -1.761770719522229e-01, -1.761770719522228e-01, -9.236962193073574e-03, -9.620020839875430e-03, -4.585318913854530e-02, -6.014563327425307e-03, -7.069491137469084e-03, -7.069491137469065e-03, -6.135344821571484e+00, -6.138159787581815e+00, -6.135470448354236e+00, -6.137955415388903e+00, -6.136772450065661e+00, -6.136772450065661e+00, -2.240357921777628e+00, -2.256160327505379e+00, -2.229675047529388e+00, -2.243553305597292e+00, -2.254357772775033e+00, -2.254357772775033e+00, -6.802641532197691e-01, -7.698827875258026e-01, -6.271006858787902e-01, -6.759176667921390e-01, -6.936342386242716e-01, -6.936342386242716e-01, -1.136236918040023e-01, -2.074736104965501e-01, -1.055157649626432e-01, -2.321868940683695e+00, -1.311318111271115e-01, -1.311318111271115e-01, -4.889865364819819e-03, -5.852733340896094e-03, -4.277400322621445e-03, -7.230455927860063e-02, -5.158654209803235e-03, -5.158654209803284e-03, -7.242034141767628e-01, -7.088708106752881e-01, -7.141665775606632e-01, -7.186615774482119e-01, -7.164046217003691e-01, -7.164046217003691e-01, -7.076495430244041e-01, -5.635662754190450e-01, -5.943776731201676e-01, -6.323159387901561e-01, -6.119014999945233e-01, -6.119014999945233e-01, -8.052420003090950e-01, -2.583507391916608e-01, -3.056851853108651e-01, -3.975853976417605e-01, -3.472198533184096e-01, -3.472198533184097e-01, -5.187341780049776e-01, -4.405508225798818e-02, -5.903736935533683e-02, -3.844148440261869e-01, -9.056833499172794e-02, -9.056833499172817e-02, -1.248270868876696e-02, -2.156592156204308e-03, -3.644665089056742e-03, -8.538246178123528e-02, -4.793880968680780e-03, -4.793880968680804e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_dk87_r2_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_dk87_r2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-8.043260305792858e-09, -8.043228843271495e-09, -8.042967809823995e-09, -8.043438352121172e-09, -8.043209047043085e-09, -8.043209047043085e-09, -1.041381157308020e-05, -1.041444246487923e-05, -1.042801067178809e-05, -1.039652794690579e-05, -1.041356383545362e-05, -1.041356383545362e-05, -6.090610595271843e-03, -6.082252032166467e-03, -5.828146659500166e-03, -5.679393968444814e-03, -5.743724258534930e-03, -5.743724258534930e-03, -6.188863168130400e-01, -6.067856426609715e-01, -3.472373051468532e-03, -1.193565154899204e+00, -9.199309357741640e-01, -9.199309357741643e-01, -1.120828189144195e+04, -9.758901055250379e+03, -5.294087887168247e+01, -5.612996971957977e+04, -3.021438267822759e+04, -3.021438267822760e+04, -2.425402123132320e-06, -2.426517051617531e-06, -2.425433548314884e-06, -2.426418500645986e-06, -2.425981697643809e-06, -2.425981697643809e-06, -6.956290340629222e-05, -6.842242959501186e-05, -6.907602470943650e-05, -6.806853605963846e-05, -6.917515238139103e-05, -6.917515238139103e-05, -1.347964107831151e-02, -1.117052457011349e-02, -1.763777796905195e-02, -1.829415264297250e-02, -1.304758768149682e-02, -1.304758768149682e-02, -3.109477549429259e+00, -4.647811037702361e-01, -3.957520073695944e+00, -1.353046313291416e-04, -2.197275123183995e+00, -2.197275123183995e+00, -1.304165354488160e+05, -6.260003391543151e+04, -2.225342336808820e+05, -1.344804310786444e+01, -1.051168498702934e+05, -1.051168498702932e+05, -1.323731771159336e-02, -1.556967274073744e-02, -1.510558421597533e-02, -1.448966916448724e-02, -1.483069837867065e-02, -1.483069837867065e-02, -1.273417416034175e-02, -2.126957774700272e-02, -2.109391659003532e-02, -2.078733218808785e-02, -2.106145811600590e-02, -2.106145811600590e-02, -9.285822722711272e-03, -2.302733712070035e-01, -1.436994574661229e-01, -7.938085583241571e-02, -1.071097334347876e-01, -1.071097334347876e-01, -2.923673613129923e-02, -5.876421680563696e+01, -2.370730897042247e+01, -1.074286919443637e-01, -7.052546711998517e+00, -7.052546711998506e+00, -3.802395560088728e+03, -4.787989774824639e+06, -4.367136281137560e+05, -8.414965757236420e+00, -1.406020199362831e+05, -1.406020199362835e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
