
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_pbe_r_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbe_r", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.097463635095141e+01, -2.097466223978569e+01, -2.097484769752506e+01, -2.097446108094019e+01, -2.097465365505285e+01, -2.097465365505285e+01, -3.482148186420728e+00, -3.482106958253864e+00, -3.481239484476829e+00, -3.483409417381328e+00, -3.482182971540844e+00, -3.482182971540844e+00, -7.017026256282783e-01, -7.018135624850803e-01, -7.068541445313599e-01, -7.114816955222136e-01, -7.123344552682321e-01, -7.123344552682321e-01, -2.254573363329301e-01, -2.258756308260333e-01, -8.095998449120074e-01, -1.992682411066067e-01, -2.225805993980857e-01, -2.225805993980856e-01, -1.256920348459196e-02, -1.323423849054454e-02, -7.084701990240044e-02, -7.252725605900031e-03, -1.011904542243155e-02, -1.011904542243155e-02, -5.038787322578207e+00, -5.038111897419991e+00, -5.038767271750907e+00, -5.038170811590211e+00, -5.038438763389056e+00, -5.038438763389056e+00, -2.137704061314265e+00, -2.146800139376295e+00, -2.141097278144390e+00, -2.149089407976356e+00, -2.141151979101902e+00, -2.141151979101902e+00, -5.818374294489110e-01, -6.029183463738057e-01, -5.432762411142317e-01, -5.377699532127764e-01, -5.880625245693816e-01, -5.880625245693817e-01, -1.607461412121028e-01, -2.483835049025337e-01, -1.513375765959791e-01, -1.813872967848887e+00, -1.738244405855850e-01, -1.738244405855850e-01, -5.599973911452978e-03, -7.089884439732247e-03, -5.428523078498314e-03, -1.087823589203271e-01, -6.818675813112160e-03, -6.818675813112162e-03, -5.507778095263379e-01, -5.539942051223730e-01, -5.528721042246567e-01, -5.519315463988212e-01, -5.524019952460729e-01, -5.524019952460729e-01, -5.339892949500298e-01, -5.135527622426468e-01, -5.185281298205674e-01, -5.237022445535451e-01, -5.207769500699171e-01, -5.207769500699171e-01, -6.332367948406989e-01, -2.897032119305494e-01, -3.199444414867715e-01, -3.686261843963693e-01, -3.413500701751543e-01, -3.413500701751544e-01, -4.740953081313847e-01, -6.797851644204017e-02, -9.064514574325649e-02, -3.437050345708634e-01, -1.307964521525708e-01, -1.307964521525709e-01, -1.770126280482394e-02, -1.895582494438893e-03, -3.985913216695519e-03, -1.247128072546343e-01, -6.262147536461379e-03, -6.262147536461373e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_pbe_r_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbe_r", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.503667389464972e+01, -2.503664492303940e+01, -2.503679575195602e+01, -2.503673342434532e+01, -2.503714676929459e+01, -2.503724727793088e+01, -2.503577159585131e+01, -2.503549418535263e+01, -2.503674853360463e+01, -2.503616638541904e+01, -2.503674853360463e+01, -2.503616638541904e+01, -4.006094123516569e+00, -4.006348295877356e+00, -4.006145320866959e+00, -4.006411398385691e+00, -4.007507782189190e+00, -4.007888492666553e+00, -4.005793053303235e+00, -4.006188976849034e+00, -4.005302523429537e+00, -4.007469471496322e+00, -4.005302523429537e+00, -4.007469471496322e+00, -7.429278121057145e-01, -7.489219735250374e-01, -7.407460120700379e-01, -7.480756761221625e-01, -7.127317440137316e-01, -7.035124970952176e-01, -7.132461733634121e-01, -7.162459709116030e-01, -7.593465084000340e-01, -6.702953583710212e-01, -7.593465084000340e-01, -6.702953583710212e-01, -1.812323292144860e-01, -1.864224615564295e-01, -1.823303450176255e-01, -1.887664756514063e-01, -8.552678263154497e-01, -8.982985681230244e-01, -1.637782985448139e-01, -1.650621656792498e-01, -1.886766317604617e-01, -1.509746540419918e-01, -1.886766317604616e-01, -1.509746540419916e-01, -1.617070347746026e-02, -1.717620852070183e-02, -1.693778120535291e-02, -1.813477315248802e-02, -8.677294406185974e-02, -9.072186406948514e-02, -9.741898714970408e-03, -9.580081537055826e-03, -1.443567317941109e-02, -8.225365751494473e-03, -1.443567317941109e-02, -8.225365751494473e-03, -6.186329134856779e+00, -6.184771240538648e+00, -6.189357478872479e+00, -6.187697030862028e+00, -6.186495277352850e+00, -6.184870278132832e+00, -6.189093820419769e+00, -6.187528260017066e+00, -6.187882082150699e+00, -6.186241164644691e+00, -6.187882082150699e+00, -6.186241164644691e+00, -2.114887048878850e+00, -2.114770114977573e+00, -2.134237774273899e+00, -2.133566779989395e+00, -2.092230634224854e+00, -2.098630674870503e+00, -2.108813972472335e+00, -2.115404187535796e+00, -2.142913710036800e+00, -2.127011333022932e+00, -2.142913710036800e+00, -2.127011333022932e+00, -6.825489754180486e-01, -6.808464949420261e-01, -7.735752136472325e-01, -7.743406841330157e-01, -6.128874084362047e-01, -6.388194393461254e-01, -6.696885756603392e-01, -6.914665121606063e-01, -7.148954938540549e-01, -6.777225451103706e-01, -7.148954938540550e-01, -6.777225451103707e-01, -1.578676688721333e-01, -1.575751113156132e-01, -1.994826591429137e-01, -2.000113607209105e-01, -1.509494882767592e-01, -1.536239004240846e-01, -2.333842641617321e+00, -2.332858889472995e+00, -1.565477923960404e-01, -1.494973678435978e-01, -1.565477923960404e-01, -1.494973678435978e-01, -7.311081504249080e-03, -7.597956989296019e-03, -9.373229684974366e-03, -9.515203658494892e-03, -7.006296093622737e-03, -7.417787681196846e-03, -1.227859917198839e-01, -1.237252450670793e-01, -7.158832411509568e-03, -9.821521545692930e-03, -7.158832411509570e-03, -9.821521545692932e-03, -7.232608089889374e-01, -7.261974255967647e-01, -7.109015336954874e-01, -7.139225332341262e-01, -7.151874829740075e-01, -7.182069367727120e-01, -7.188067147167914e-01, -7.217483762231213e-01, -7.169927944084464e-01, -7.199721385711216e-01, -7.169927944084464e-01, -7.199721385711216e-01, -7.063459181962387e-01, -7.087005764851231e-01, -5.473524669091870e-01, -5.502782736118698e-01, -5.901563188508092e-01, -5.934481424676341e-01, -6.359287372012603e-01, -6.383959606034506e-01, -6.126881124362272e-01, -6.152218384639054e-01, -6.126881124362272e-01, -6.152218384639054e-01, -8.089590448943142e-01, -8.109441904432079e-01, -2.340669517936187e-01, -2.350373825293258e-01, -2.736076599027552e-01, -2.763630519463626e-01, -3.816433301406430e-01, -3.840889536443345e-01, -3.212119143168293e-01, -3.212714562718350e-01, -3.212119143168295e-01, -3.212714562718351e-01, -5.020142585177571e-01, -5.064422906867505e-01, -8.572201608842051e-02, -8.621201228078249e-02, -1.084242903879601e-01, -1.108377047229553e-01, -3.750535182603471e-01, -3.818423462572843e-01, -1.347682480713502e-01, -1.328680833835479e-01, -1.347682480713501e-01, -1.328680833835479e-01, -2.306798800378934e-02, -2.389197636109671e-02, -2.524300781449500e-03, -2.529933177070282e-03, -5.134508261520898e-03, -5.460486781932148e-03, -1.304666428564214e-01, -1.316321526254775e-01, -6.778680953911095e-03, -9.004943078459726e-03, -6.778680953911088e-03, -9.004943078459718e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_pbe_r_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbe_r", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.483413151408021e-08, 0.000000000000000e+00, -1.483421172380160e-08, -1.483398746509289e-08, 0.000000000000000e+00, -1.483410704830042e-08, -1.483342508304619e-08, 0.000000000000000e+00, -1.483332962838033e-08, -1.483505447647592e-08, 0.000000000000000e+00, -1.483540562971745e-08, -1.483405072834294e-08, 0.000000000000000e+00, -1.483450104635858e-08, -1.483405072834294e-08, 0.000000000000000e+00, -1.483450104635858e-08, -2.037556082616040e-05, 0.000000000000000e+00, -2.038003477904377e-05, -2.037572702969643e-05, 0.000000000000000e+00, -2.038057262153649e-05, -2.038350393839559e-05, 0.000000000000000e+00, -2.038506610306530e-05, -2.035686567069618e-05, 0.000000000000000e+00, -2.035942120282541e-05, -2.038786869197452e-05, 0.000000000000000e+00, -2.036464971402918e-05, -2.038786869197452e-05, 0.000000000000000e+00, -2.036464971402918e-05, -1.356060148305918e-02, 0.000000000000000e+00, -1.349672221755146e-02, -1.359282973611002e-02, 0.000000000000000e+00, -1.351486978406489e-02, -1.401216790496629e-02, 0.000000000000000e+00, -1.409720416824658e-02, -1.366024510268039e-02, 0.000000000000000e+00, -1.363876100859081e-02, -1.330332906774397e-02, 0.000000000000000e+00, -1.384287208659846e-02, -1.330332906774397e-02, 0.000000000000000e+00, -1.384287208659846e-02, -1.805334092798839e+00, 0.000000000000000e+00, -1.660096034106644e+00, -1.790499372306503e+00, 0.000000000000000e+00, -1.619984514578384e+00, -7.833542371321710e-03, 0.000000000000000e+00, -7.149567402890558e-03, -2.797581220874519e+00, 0.000000000000000e+00, -2.698712117363828e+00, -1.547444630676239e+00, 0.000000000000000e+00, -4.531149367119581e+00, -1.547444630676239e+00, 0.000000000000000e+00, -4.531149367119586e+00, -1.173571283577773e+01, 0.000000000000000e+00, -1.161604289993352e+01, -1.236307134218134e+01, 0.000000000000000e+00, -1.229698224241696e+01, -6.614534954643864e+00, 0.000000000000000e+00, -6.621501547958673e+00, -1.075939128847027e+01, 0.000000000000000e+00, -1.046755380308109e+01, -1.171949284088578e+01, 0.000000000000000e+00, -2.975202952209397e+01, -1.171949284088580e+01, 0.000000000000000e+00, -2.975202952209405e+01, -4.308722672093231e-06, 0.000000000000000e+00, -4.312755368109913e-06, -4.307918399949066e-06, 0.000000000000000e+00, -4.311978664040859e-06, -4.308650239798436e-06, 0.000000000000000e+00, -4.312708788705028e-06, -4.307960542418349e-06, 0.000000000000000e+00, -4.312003514508157e-06, -4.308332961121062e-06, 0.000000000000000e+00, -4.312369516924051e-06, -4.308332961121062e-06, 0.000000000000000e+00, -4.312369516924051e-06, -1.704138955475998e-04, 0.000000000000000e+00, -1.704452682601927e-04, -1.665836362241442e-04, 0.000000000000000e+00, -1.667390880020149e-04, -1.715741609853873e-04, 0.000000000000000e+00, -1.713104867332977e-04, -1.682692072181027e-04, 0.000000000000000e+00, -1.679344539808319e-04, -1.672881857687488e-04, 0.000000000000000e+00, -1.683722914658111e-04, -1.672881857687488e-04, 0.000000000000000e+00, -1.683722914658111e-04, -2.545964830107101e-02, 0.000000000000000e+00, -2.573915270439436e-02, -1.996120764201804e-02, 0.000000000000000e+00, -1.994320994697450e-02, -3.680872569526145e-02, 0.000000000000000e+00, -3.222306483582218e-02, -3.434197822497223e-02, 0.000000000000000e+00, -3.009702568943200e-02, -2.207136714433648e-02, 0.000000000000000e+00, -2.695663114484205e-02, -2.207136714433648e-02, 0.000000000000000e+00, -2.695663114484205e-02, -3.793251097667184e+00, 0.000000000000000e+00, -3.833073152097502e+00, -1.200217871691425e+00, 0.000000000000000e+00, -1.186362709172687e+00, -4.398614186360282e+00, 0.000000000000000e+00, -4.195290622413412e+00, -2.427250727902230e-04, 0.000000000000000e+00, -2.431732396277722e-04, -3.836441942528928e+00, 0.000000000000000e+00, -4.299418964858009e+00, -3.836441942528928e+00, 0.000000000000000e+00, -4.299418964858009e+00, -1.510664626635493e+01, 0.000000000000000e+00, -1.307531118834897e+01, -1.300582287015650e+01, 0.000000000000000e+00, -1.200803289077661e+01, -7.407020049768815e+01, 0.000000000000000e+00, -8.238827152274976e+01, -7.056166560793525e+00, 0.000000000000000e+00, -6.803651826536618e+00, -3.684019561797853e+01, 0.000000000000000e+00, -3.617114068083686e+01, -3.684019561797842e+01, 0.000000000000000e+00, -3.617114068083680e+01, -2.803237779493811e-02, 0.000000000000000e+00, -2.761185087230461e-02, -2.814294275121471e-02, 0.000000000000000e+00, -2.772385196086434e-02, -2.810413109249203e-02, 0.000000000000000e+00, -2.768433996156145e-02, -2.807259088572210e-02, 0.000000000000000e+00, -2.765275540832554e-02, -2.808849999421276e-02, 0.000000000000000e+00, -2.766864946229724e-02, -2.808849999421276e-02, 0.000000000000000e+00, -2.766864946229724e-02, -3.143516347310511e-02, 0.000000000000000e+00, -3.102431284997872e-02, -4.721657793990123e-02, 0.000000000000000e+00, -4.653218341235892e-02, -4.214954363196958e-02, 0.000000000000000e+00, -4.151226785615730e-02, -3.758129730653655e-02, 0.000000000000000e+00, -3.708263062456247e-02, -3.987913420184902e-02, 0.000000000000000e+00, -3.932528483761540e-02, -3.987913420184902e-02, 0.000000000000000e+00, -3.932528483761540e-02, -1.650904181889892e-02, 0.000000000000000e+00, -1.642506425151607e-02, -6.442205285692911e-01, 0.000000000000000e+00, -6.355123010128813e-01, -4.040057964810274e-01, 0.000000000000000e+00, -3.949995270794984e-01, -1.841798516013910e-01, 0.000000000000000e+00, -1.806317451779678e-01, -2.768725429533275e-01, 0.000000000000000e+00, -2.780849058100950e-01, -2.768725429533276e-01, 0.000000000000000e+00, -2.780849058100950e-01, -6.561740067504855e-02, 0.000000000000000e+00, -6.417432397400002e-02, -6.068880662197519e+00, 0.000000000000000e+00, -6.072943628541480e+00, -5.810955206345159e+00, 0.000000000000000e+00, -5.906232221231821e+00, -2.319138631733387e-01, 0.000000000000000e+00, -2.200123830481167e-01, -6.607726678663264e+00, 0.000000000000000e+00, -7.462010037559096e+00, -6.607726678663268e+00, 0.000000000000000e+00, -7.462010037559098e+00, -9.289417216353742e+00, 0.000000000000000e+00, -9.481110620734450e+00, -4.649241442747297e+01, 0.000000000000000e+00, -8.235233064164154e+01, -2.868991472399558e+01, 0.000000000000000e+00, -3.054119492220907e+01, -7.411998263742452e+00, 0.000000000000000e+00, -7.229841212655807e+00, -7.594279424897604e+01, 0.000000000000000e+00, -3.755523399929763e+01, -7.594279424897616e+01, 0.000000000000000e+00, -3.755523399929772e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
