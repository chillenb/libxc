
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_beefvdw_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_beefvdw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.149545095239275e+01, -2.149547671158910e+01, -2.149566458088645e+01, -2.149527984191526e+01, -2.149547099795480e+01, -2.149547099795480e+01, -3.572840500730089e+00, -3.572793254258741e+00, -3.571789754884282e+00, -3.574214417114869e+00, -3.572869980147948e+00, -3.572869980147948e+00, -7.241270066737931e-01, -7.243332806759438e-01, -7.312000818618067e-01, -7.359685611255616e-01, -7.339158855908472e-01, -7.339158855908472e-01, -2.375327927959941e-01, -2.376987170414364e-01, -8.337945318723453e-01, -2.019901520884364e-01, -2.175167964124884e-01, -2.175167964124884e-01, -1.045786065270314e-02, -1.100673138060029e-02, -6.013663002397526e-02, -6.041360744581152e-03, -7.590692481269063e-03, -7.590692481978114e-03, -5.164642999383882e+00, -5.164034923741431e+00, -5.164625849988346e+00, -5.164088808051179e+00, -5.164328199483003e+00, -5.164328199483003e+00, -2.211896913866478e+00, -2.221159504434746e+00, -2.215593732344527e+00, -2.223814977275333e+00, -2.215167961481930e+00, -2.215167961481930e+00, -5.965246769616844e-01, -6.200503858885070e-01, -5.570308299241370e-01, -5.519489949316445e-01, -6.020190597623878e-01, -6.020190597623878e-01, -1.494521876885304e-01, -2.578411649225735e-01, -1.391022332688781e-01, -1.865898561840862e+00, -1.698648163237981e-01, -1.698648163237981e-01, -4.661496310938669e-03, -5.905937470618083e-03, -4.515691472651741e-03, -9.579759435322167e-02, -5.440018477578670e-03, -5.440018477578670e-03, -5.682583954860332e-01, -5.698565591187504e-01, -5.692831207766158e-01, -5.688163638032810e-01, -5.690483508255438e-01, -5.690483508255438e-01, -5.514622199092207e-01, -5.297880778638915e-01, -5.322728197333166e-01, -5.366917961491170e-01, -5.338285339008918e-01, -5.338285339008918e-01, -6.509487737167229e-01, -3.054241805409490e-01, -3.333339273388525e-01, -3.808805114563387e-01, -3.530593560119571e-01, -3.530593560119569e-01, -4.892198949785727e-01, -5.763180158985284e-02, -7.797501349751867e-02, -3.537090661544500e-01, -1.195334902717718e-01, -1.195334902717713e-01, -1.475468129825113e-02, -1.578867089464822e-03, -3.313971525407008e-03, -1.128749828039440e-01, -5.033754440769922e-03, -5.033754440848282e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_beefvdw_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_beefvdw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.558893366039818e+01, -2.558906028428888e+01, -2.558955660244390e+01, -2.558767403214674e+01, -2.558866994442488e+01, -2.558866994442488e+01, -4.046002393379649e+00, -4.046101835154276e+00, -4.048499589083426e+00, -4.045098883887491e+00, -4.046219155181966e+00, -4.046219155181966e+00, -7.484054040556124e-01, -7.474097591738047e-01, -7.241415462329192e-01, -7.302230213026779e-01, -7.290008269513393e-01, -7.290008269513393e-01, -1.875393755179116e-01, -1.827042749918827e-01, -8.757935582373546e-01, -2.164030078929789e-01, -2.095226196200639e-01, -2.095226196200640e-01, -1.393286731671724e-02, -1.466252467189618e-02, -7.860351693499693e-02, -8.053135298111126e-03, -1.011642462897154e-02, -1.011642462994783e-02, -6.367493075385830e+00, -6.371647141089243e+00, -6.367674495970989e+00, -6.371341815557425e+00, -6.369603548404657e+00, -6.369603548404657e+00, -2.173343472064258e+00, -2.188641525798365e+00, -2.164175218657700e+00, -2.177008707825517e+00, -2.187047222117675e+00, -2.187047222117675e+00, -6.930710890086180e-01, -8.033106161748556e-01, -6.328894666818293e-01, -7.060353697639677e-01, -7.109467514993608e-01, -7.109467514993608e-01, -1.799627727817084e-01, -2.543777002997881e-01, -1.691504006858438e-01, -2.421679851774286e+00, -1.938562401281547e-01, -1.938562401281547e-01, -6.214267227572219e-03, -7.872543718440088e-03, -6.018637401772105e-03, -1.211309219552066e-01, -7.250633227402555e-03, -7.250633227402555e-03, -7.504316510952312e-01, -7.393936076286243e-01, -7.434204529401670e-01, -7.465844610188429e-01, -7.450121391636310e-01, -7.450121391636310e-01, -7.319543074183715e-01, -5.497558163356449e-01, -5.957905439767360e-01, -6.543285849865429e-01, -6.253975270662485e-01, -6.253975270662485e-01, -8.406806917869564e-01, -2.500943053555243e-01, -2.487585303353458e-01, -3.871086617055168e-01, -3.365428947044187e-01, -3.365428947043975e-01, -5.058288072252420e-01, -7.551268704478099e-02, -1.007165411790145e-01, -3.775276800363985e-01, -1.461381136234749e-01, -1.461381136234626e-01, -1.964531929805197e-02, -2.105069784635003e-03, -4.418073326997289e-03, -1.392297665167241e-01, -6.709246419940247e-03, -6.709246420040745e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_beefvdw_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_beefvdw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-7.776974940763146e-09, -7.776863691354633e-09, -7.776381630245196e-09, -7.778036585795966e-09, -7.777167618792038e-09, -7.777167618792038e-09, -1.148750251328636e-05, -1.148712433512527e-05, -1.147722093800749e-05, -1.148566714169196e-05, -1.148594152122581e-05, -1.148594152122581e-05, -7.743365796520857e-03, -7.735940221973651e-03, -7.522482218179989e-03, -7.326032796509686e-03, -7.406016260011999e-03, -7.406016260011999e-03, -9.579059939888505e-01, -9.892176601966833e-01, -4.380509783267747e-03, -7.179158725320225e-01, -8.742195368928966e-01, -8.742195368928960e-01, -1.617582166556452e+00, -1.708868829195539e+00, -9.465881330081036e-01, -1.470184330947532e+00, -1.867722031391462e+00, -1.867722015197250e+00, -2.098191198936933e-06, -2.092958211243067e-06, -2.097963284245401e-06, -2.093344435805794e-06, -2.095540486952943e-06, -2.095540486952943e-06, -8.989693742213880e-05, -8.841023957288577e-05, -8.917489826900933e-05, -8.792752949211812e-05, -8.935478272343842e-05, -8.935478272343842e-05, -1.391776744342865e-02, -7.807507381988103e-03, -1.929669507122619e-02, -1.335718193876866e-02, -1.289549500085175e-02, -1.289549500085175e-02, -6.503961160208255e-01, -4.058830014537763e-01, -7.115154315217238e-01, -9.442320899150943e-05, -8.468846697253888e-01, -8.468846697253888e-01, -1.937204136257744e+00, -1.730286338814681e+00, -1.086600511225373e+01, -1.049436464508553e+00, -5.056583721562043e+00, -5.056583698780949e+00, -1.046450555235420e-02, -1.086676738903288e-02, -1.065174206433625e-02, -1.055560769526379e-02, -1.059739644166484e-02, -1.059739644166484e-02, -1.166432334991781e-02, -2.700824758619872e-02, -2.392880173768157e-02, -1.871410010389362e-02, -2.126962284664066e-02, -2.126962284664066e-02, -6.532188512781013e-03, -3.313554274044306e-01, -2.578353737515973e-01, -1.013601836363627e-01, -1.390710638070386e-01, -1.390710638070772e-01, -3.716635042656991e-02, -8.646727297995319e-01, -8.548427031960500e-01, -1.332869702265232e-01, -1.157423563030815e+00, -1.157423563032129e+00, -1.303320504060172e+00, -8.491805650576064e+00, -4.109672936558442e+00, -1.171454003849101e+00, -6.386948697240232e+00, -6.386948663839257e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
