
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_c09x_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_c09x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.032251428876523e+01, -2.032255626732651e+01, -2.032278396599444e+01, -2.032215856586167e+01, -2.032248042019323e+01, -2.032248042019323e+01, -3.339439179103703e+00, -3.339423796603850e+00, -3.339150297107007e+00, -3.340260328641475e+00, -3.339501236189238e+00, -3.339501236189238e+00, -6.585031491090861e-01, -6.582124190045796e-01, -6.527887944825607e-01, -6.575728321731622e-01, -6.560505764552942e-01, -6.560505764552942e-01, -1.969347948424610e-01, -1.976903645530166e-01, -7.633700675303653e-01, -1.753496580715710e-01, -1.815731802281750e-01, -1.815731802281750e-01, -1.256110470648544e-02, -1.322108292244088e-02, -7.090590922589571e-02, -7.254430610245066e-03, -9.115747323455964e-03, -9.115747323455964e-03, -4.920787900383569e+00, -4.920984345001067e+00, -4.920803677896143e+00, -4.920976994183462e+00, -4.920883700906179e+00, -4.920883700906179e+00, -1.967625273239974e+00, -1.978506077131141e+00, -1.965052711074295e+00, -1.974607799019723e+00, -1.974940277141814e+00, -1.974940277141814e+00, -5.608179350666446e-01, -5.963418080583111e-01, -5.210340046822369e-01, -5.295822093563171e-01, -5.681136913231551e-01, -5.681136913231551e-01, -1.538665831858521e-01, -2.163720506573826e-01, -1.467966145409208e-01, -1.795174315101876e+00, -1.571599677757939e-01, -1.571599677757939e-01, -5.597275989625878e-03, -7.091847729162229e-03, -5.422767661144490e-03, -1.106467973980092e-01, -6.532753746032217e-03, -6.532753746032217e-03, -5.486666354916169e-01, -5.482276605513663e-01, -5.483815719987648e-01, -5.485052645385766e-01, -5.484427731456334e-01, -5.484427731456334e-01, -5.330126210816147e-01, -4.826334673642546e-01, -4.961720993626010e-01, -5.101457790479427e-01, -5.028329309115830e-01, -5.028329309115830e-01, -6.256801495822468e-01, -2.526465318584171e-01, -2.836057981567375e-01, -3.437655829968409e-01, -3.100217638039918e-01, -3.100217638039918e-01, -4.449656977102140e-01, -6.823127496184705e-02, -9.143407299838319e-02, -3.256312530314757e-01, -1.279433885240727e-01, -1.279433885240727e-01, -1.772757584589178e-02, -1.895696331620087e-03, -3.979150473532523e-03, -1.236562460179558e-01, -6.044840672917181e-03, -6.044840672917176e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_c09x_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_c09x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.577612981648647e+01, -2.577622050589891e+01, -2.577661571121573e+01, -2.577526658946508e+01, -2.577597463970728e+01, -2.577597463970728e+01, -4.157546764657966e+00, -4.157584168869822e+00, -4.158550412842753e+00, -4.157659604955629e+00, -4.157691833207665e+00, -4.157691833207665e+00, -7.841658957428789e-01, -7.827761045898415e-01, -7.477161036292277e-01, -7.546598575098760e-01, -7.537705480485872e-01, -7.537705480485872e-01, -1.753284755082786e-01, -1.798039930706642e-01, -9.198142866917518e-01, -1.204212802485913e-01, -1.404250935502648e-01, -1.404250935502648e-01, -1.674813960864726e-02, -1.762811056325450e-02, -8.769169541379461e-02, -9.672574146993422e-03, -1.215432976460795e-02, -1.215432976460795e-02, -6.325643657220397e+00, -6.327719887645208e+00, -6.325739303420000e+00, -6.327572234747707e+00, -6.326696223366397e+00, -6.326696223366397e+00, -2.233418449382159e+00, -2.253524770277794e+00, -2.212609534922116e+00, -2.230416706751213e+00, -2.254563257426979e+00, -2.254563257426979e+00, -7.047607812677691e-01, -7.822977301362513e-01, -6.494512921304715e-01, -6.905784534702158e-01, -7.183445769075478e-01, -7.183445769075478e-01, -1.058606087258308e-01, -1.634802576401165e-01, -1.070162715075854e-01, -2.357131630325201e+00, -9.983165147041562e-02, -9.983165147041562e-02, -7.463034652834504e-03, -9.455796972216306e-03, -7.230356881525985e-03, -1.196559604703482e-01, -8.710338328042955e-03, -8.710338328042955e-03, -7.274945132392016e-01, -7.197406757127756e-01, -7.224665840061584e-01, -7.247185815296002e-01, -7.235918155735709e-01, -7.235918155735709e-01, -7.088132609348459e-01, -5.765787143370891e-01, -6.151367525287270e-01, -6.530285410391725e-01, -6.338647566408564e-01, -6.338647566408564e-01, -8.194864205014044e-01, -2.191714909097910e-01, -2.802583933442113e-01, -4.034578548310018e-01, -3.381869100912172e-01, -3.381869100912172e-01, -5.300552426496972e-01, -8.354109318254574e-02, -1.177959373263569e-01, -3.959192558154602e-01, -9.713512650438189e-02, -9.713512650438187e-02, -2.363676779452212e-02, -2.527595108826782e-03, -5.305533964710031e-03, -1.016746378438413e-01, -8.059787563889576e-03, -8.059787563889568e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_c09x_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_c09x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-3.343437983818319e-09, -3.343402698286494e-09, -3.343231095091759e-09, -3.343756392118662e-09, -3.343483230284193e-09, -3.343483230284193e-09, -4.721830800686476e-06, -4.721817082420181e-06, -4.721036961734823e-06, -4.718807469423503e-06, -4.721359085163589e-06, -4.721359085163589e-06, -3.346998796136139e-03, -3.359834118519883e-03, -3.679445195922556e-03, -3.562922837677737e-03, -3.589840956277686e-03, -3.589840956277686e-03, -6.470375443452677e-01, -6.174582346368284e-01, -1.819777319488416e-03, -1.538177815027825e+00, -1.104152996675452e+00, -1.104152996675453e+00, -2.417820012636190e-23, -4.928736297502549e-20, -4.107081996606604e+00, -3.085269223364221e-82, -3.444265412028916e-44, -3.444265412029406e-44, -9.522477946234757e-07, -9.516611224471405e-07, -9.522176121205443e-07, -9.516997352283534e-07, -9.519520851776368e-07, -9.519520851776368e-07, -4.519824763700006e-05, -4.397990232728667e-05, -4.599693874173756e-05, -4.489591946968989e-05, -4.414528163794498e-05, -4.414528163794498e-05, -5.849884627245712e-03, -4.274764041448880e-03, -7.952974566646424e-03, -6.938994853577465e-03, -5.501469463244452e-03, -5.501469463244452e-03, -3.344984110706839e+00, -5.675147888788769e-01, -3.867847557920534e+00, -5.197903086256155e-05, -2.847545534848554e+00, -2.847545534848554e+00, -1.902978259167439e-122, -4.379124332903809e-79, -9.559914737136926e-52, -4.432512019730402e+00, -1.187619774981862e-52, -1.187619774981693e-52, -5.864633697487514e-03, -5.977367488036793e-03, -5.937410853181928e-03, -5.904765461014050e-03, -5.921084124775369e-03, -5.921084124775369e-03, -6.553706801939689e-03, -1.154153952162927e-02, -9.752904243659219e-03, -8.298728804401679e-03, -9.007642216456498e-03, -9.007642216456498e-03, -3.536547001391810e-03, -2.481730648015921e-01, -1.289694917303358e-01, -4.608797700173554e-02, -7.790239707990726e-02, -7.790239707990726e-02, -1.604564700662306e-02, -4.834062123672758e+00, -1.082619694125332e+00, -5.419593824490973e-02, -6.421494375147641e+00, -6.421494375147640e+00, -1.206297946725981e-11, 0.000000000000000e+00, -6.884563693383224e-168, -6.569203894650817e+00, -8.346589965227005e-55, -8.346589965225853e-55])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
