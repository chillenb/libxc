
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_b88m_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_b88m", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.113238380239053e+01, -2.113240925167210e+01, -2.113259430121935e+01, -2.113221418471663e+01, -2.113240313578520e+01, -2.113240313578520e+01, -3.508117465297623e+00, -3.508077082812583e+00, -3.507229446713626e+00, -3.509369364750681e+00, -3.508153868172815e+00, -3.508153868172815e+00, -7.051684891573018e-01, -7.052032991148994e-01, -7.078609733041589e-01, -7.126361299763064e-01, -7.128389675141567e-01, -7.128389675141567e-01, -2.210169746515718e-01, -2.216874234511796e-01, -8.142589648534472e-01, -1.957992118884159e-01, -2.190936148492051e-01, -2.190936148492049e-01, -6.499534508085585e-02, -6.499312275736688e-02, -1.143446311259923e-01, -5.964234764766928e-02, -6.051885076663076e-02, -6.051885076663072e-02, -5.073751387493571e+00, -5.072970765273849e+00, -5.073727077409776e+00, -5.073037765623306e+00, -5.073349399771714e+00, -5.073349399771714e+00, -2.138858303713258e+00, -2.148694041835720e+00, -2.140524639853413e+00, -2.149198653674394e+00, -2.143514348459734e+00, -2.143514348459734e+00, -5.862559465532480e-01, -6.056191388633593e-01, -5.473386247683540e-01, -5.407058624769238e-01, -5.925128754384967e-01, -5.925128754384968e-01, -1.696337318669238e-01, -2.427723003314000e-01, -1.625627018793495e-01, -1.821679298183140e+00, -1.741032440625846e-01, -1.741032440625846e-01, -5.388259775846998e-02, -5.745546506194480e-02, -3.757852949950630e-02, -1.324585589329603e-01, -4.581353836304743e-02, -4.581353836304745e-02, -5.518422448111620e-01, -5.563937406994151e-01, -5.548631789492458e-01, -5.535373686176699e-01, -5.542061665864444e-01, -5.542061665864444e-01, -5.345162473547238e-01, -5.162209992466360e-01, -5.223332670425072e-01, -5.274688062443922e-01, -5.247321446513243e-01, -5.247321446513243e-01, -6.362546514861170e-01, -2.836417076046597e-01, -3.158566843633073e-01, -3.699958873364459e-01, -3.401591662299507e-01, -3.401591662299507e-01, -4.764509064935716e-01, -1.144234419530877e-01, -1.270553491202514e-01, -3.459089698845672e-01, -1.422478465594593e-01, -1.422478465594593e-01, -7.304401336653682e-02, -3.335412265534228e-02, -4.353768466885356e-02, -1.387158553062407e-01, -4.306260994463992e-02, -4.306260994463990e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_b88m_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_b88m", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.516799333436926e+01, -2.516796320488903e+01, -2.516810322131757e+01, -2.516804301736476e+01, -2.516843260339557e+01, -2.516852120524756e+01, -2.516719219875304e+01, -2.516694002442747e+01, -2.516805999266863e+01, -2.516755575562241e+01, -2.516805999266863e+01, -2.516755575562241e+01, -4.051110173421208e+00, -4.051250045267475e+00, -4.051147271246966e+00, -4.051291736219792e+00, -4.052094170982966e+00, -4.052366304236577e+00, -4.051107608697007e+00, -4.051378905588311e+00, -4.050355872985671e+00, -4.052293699727328e+00, -4.050355872985671e+00, -4.052293699727328e+00, -7.633251914253236e-01, -7.680304709158311e-01, -7.615762514228350e-01, -7.673306833708713e-01, -7.389485403903814e-01, -7.315626995000499e-01, -7.405708188946201e-01, -7.429496476754134e-01, -7.765370976616043e-01, -7.048614460357681e-01, -7.765370976616043e-01, -7.048614460357681e-01, -1.858379397412211e-01, -1.931800543281819e-01, -1.881791794124263e-01, -1.967366396652415e-01, -8.778708158047956e-01, -9.154456162918443e-01, -1.448104821770236e-01, -1.466990678201406e-01, -1.940672793680595e-01, -1.099403548044888e-01, -1.940672793680594e-01, -1.099403548044887e-01, -1.775780480175903e-02, -1.833890423283263e-02, -1.807032528024998e-02, -1.873614762621274e-02, -5.267320368103534e-02, -5.456520748167690e-02, -1.408340811700512e-02, -1.403097352738594e-02, -1.677483807033392e-02, -1.135221020523248e-02, -1.677483807033389e-02, -1.135221020523247e-02, -6.196060341923178e+00, -6.194517858265964e+00, -6.198655180386200e+00, -6.197024577706062e+00, -6.196204250164336e+00, -6.194603830091260e+00, -6.198430735352159e+00, -6.196881041846970e+00, -6.197389286407126e+00, -6.195776621030283e+00, -6.197389286407126e+00, -6.195776621030283e+00, -2.200984270985744e+00, -2.200867674380776e+00, -2.219209319134564e+00, -2.218557287416625e+00, -2.182240383060210e+00, -2.187511097040786e+00, -2.197932522612904e+00, -2.203389305634564e+00, -2.225317943894483e+00, -2.212099109208036e+00, -2.225317943894483e+00, -2.212099109208036e+00, -6.881184608929204e-01, -6.863658293538542e-01, -7.722036099488419e-01, -7.729448822220321e-01, -6.201710893914252e-01, -6.451298709677232e-01, -6.688588148040383e-01, -6.906672845524596e-01, -7.190555128304406e-01, -6.821627009462247e-01, -7.190555128304404e-01, -6.821627009462247e-01, -1.074759524286862e-01, -1.081502392606649e-01, -1.901050341348583e-01, -1.910138805102680e-01, -9.892915837232846e-02, -1.030815457901393e-01, -2.329551260948171e+00, -2.328566520319087e+00, -1.187869110662082e-01, -1.235177898872100e-01, -1.187869110662082e-01, -1.235177898872100e-01, -1.183850535661207e-02, -1.228626156064010e-02, -1.348489996689453e-02, -1.372620189829320e-02, -9.325129314638013e-03, -9.445946481253985e-03, -7.353676137310715e-02, -7.405802760640752e-02, -1.035138936911245e-02, -1.202981191091796e-02, -1.035138936911246e-02, -1.202981191091797e-02, -7.222066283217493e-01, -7.251573457757917e-01, -7.096046578812191e-01, -7.126090893234288e-01, -7.138178674039627e-01, -7.168326891587115e-01, -7.174956710386317e-01, -7.204407861874751e-01, -7.156373351243616e-01, -7.186166132267950e-01, -7.156373351243616e-01, -7.186166132267950e-01, -7.057410056367749e-01, -7.080979191182334e-01, -5.613902992715097e-01, -5.641297203563231e-01, -5.977541990125087e-01, -6.008243843567250e-01, -6.376400602370440e-01, -6.400537320210872e-01, -6.171038819582060e-01, -6.195696439503643e-01, -6.171038819582060e-01, -6.195696439503643e-01, -8.076313269870791e-01, -8.095635120088860e-01, -2.391027452215965e-01, -2.404919699880200e-01, -2.879941893974703e-01, -2.911040618785287e-01, -3.936251446654353e-01, -3.959824061490086e-01, -3.370107384671078e-01, -3.369915796507379e-01, -3.370107384671077e-01, -3.369915796507379e-01, -5.154847057183398e-01, -5.195695702312316e-01, -5.243257813119580e-02, -5.266052583402099e-02, -6.389667898163413e-02, -6.522328555890027e-02, -3.825845551984059e-01, -3.890095361542814e-01, -8.595209952415710e-02, -8.860849189127246e-02, -8.595209952415714e-02, -8.860849189127247e-02, -2.201384126124541e-02, -2.238841645463041e-02, -6.595627965947065e-03, -6.021740276473579e-03, -9.302680285909045e-03, -9.454265139202812e-03, -8.268832608135693e-02, -8.379669392868440e-02, -9.152247240033341e-03, -1.148216927882885e-02, -9.152247240033363e-03, -1.148216927882885e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_b88m_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_b88m", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.523421471030258e-08, 0.000000000000000e+00, -1.523430253650757e-08, -1.523413513435452e-08, 0.000000000000000e+00, -1.523424465816126e-08, -1.523368485262730e-08, 0.000000000000000e+00, -1.523365423330586e-08, -1.523458855788518e-08, 0.000000000000000e+00, -1.523480451539139e-08, -1.523417713231981e-08, 0.000000000000000e+00, -1.523420071727872e-08, -1.523417713231981e-08, 0.000000000000000e+00, -1.523420071727872e-08, -2.004311212874916e-05, 0.000000000000000e+00, -2.005099194159436e-05, -2.004371097744731e-05, 0.000000000000000e+00, -2.005217857773475e-05, -2.006418621609189e-05, 0.000000000000000e+00, -2.006909531212237e-05, -2.001579415986815e-05, 0.000000000000000e+00, -2.002212021537167e-05, -2.005384822989757e-05, 0.000000000000000e+00, -2.003853163319581e-05, -2.005384822989757e-05, 0.000000000000000e+00, -2.003853163319581e-05, -1.243931620682780e-02, 0.000000000000000e+00, -1.246073582803924e-02, -1.244240648169197e-02, 0.000000000000000e+00, -1.246794762810126e-02, -1.251726400620344e-02, 0.000000000000000e+00, -1.250023110857143e-02, -1.215732367478066e-02, 0.000000000000000e+00, -1.216859496253302e-02, -1.240903370439724e-02, 0.000000000000000e+00, -1.200095549133907e-02, -1.240903370439724e-02, 0.000000000000000e+00, -1.200095549133907e-02, -1.639136103012238e+00, 0.000000000000000e+00, -1.482331999843716e+00, -1.609164455679797e+00, 0.000000000000000e+00, -1.432844293994463e+00, -7.210027539133263e-03, 0.000000000000000e+00, -6.763602828497711e-03, -3.199441478904838e+00, 0.000000000000000e+00, -3.059845196951931e+00, -1.398237757808535e+00, 0.000000000000000e+00, -7.791530165574894e+00, -1.398237757808535e+00, 0.000000000000000e+00, -7.791530165574896e+00, -2.223294032539288e+04, 0.000000000000000e+00, -1.862380509534957e+04, -1.972988837113796e+04, 0.000000000000000e+00, -1.617202300011850e+04, -1.279985961665851e+02, 0.000000000000000e+00, -1.102041664598572e+02, -9.374313768351331e+04, 0.000000000000000e+00, -9.763838558220520e+04, -3.084538724083658e+04, 0.000000000000000e+00, -2.027724179383197e+05, -3.084538724083660e+04, 0.000000000000000e+00, -2.027724179383196e+05, -4.607042554294988e-06, 0.000000000000000e+00, -4.611168241436670e-06, -4.610775453976455e-06, 0.000000000000000e+00, -4.614779719614711e-06, -4.607199497212220e-06, 0.000000000000000e+00, -4.611256273754029e-06, -4.610402890074961e-06, 0.000000000000000e+00, -4.614537428623059e-06, -4.608991960864870e-06, 0.000000000000000e+00, -4.612987309809353e-06, -4.608991960864870e-06, 0.000000000000000e+00, -4.612987309809353e-06, -1.508207850353809e-04, 0.000000000000000e+00, -1.508477324495556e-04, -1.477323288815747e-04, 0.000000000000000e+00, -1.478628914586860e-04, -1.510847306711940e-04, 0.000000000000000e+00, -1.510677197219032e-04, -1.484150714914186e-04, 0.000000000000000e+00, -1.483350873402601e-04, -1.488315033259799e-04, 0.000000000000000e+00, -1.492533650163458e-04, -1.488315033259799e-04, 0.000000000000000e+00, -1.492533650163458e-04, -2.554869134352737e-02, 0.000000000000000e+00, -2.583897830725434e-02, -2.325492564347742e-02, 0.000000000000000e+00, -2.329562420326057e-02, -3.607176847635088e-02, 0.000000000000000e+00, -3.196346394039887e-02, -3.892436087362548e-02, 0.000000000000000e+00, -3.401345812371898e-02, -2.255390008542255e-02, 0.000000000000000e+00, -2.738051388592075e-02, -2.255390008542256e-02, 0.000000000000000e+00, -2.738051388592075e-02, -8.047831362363857e+00, 0.000000000000000e+00, -7.902473430252665e+00, -1.217774379582716e+00, 0.000000000000000e+00, -1.199817633383821e+00, -1.086656625660090e+01, 0.000000000000000e+00, -9.396968256336010e+00, -2.846109912663919e-04, 0.000000000000000e+00, -2.851767694748493e-04, -5.940336330415369e+00, 0.000000000000000e+00, -5.552443240171500e+00, -5.940336330415369e+00, 0.000000000000000e+00, -5.552443240171500e+00, -2.360011310781358e+05, 0.000000000000000e+00, -2.028640677473196e+05, -1.104644174613393e+05, 0.000000000000000e+00, -1.034494793379523e+05, -4.153011014343385e+05, 0.000000000000000e+00, -3.628064607064240e+05, -3.317290816596902e+01, 0.000000000000000e+00, -3.223506267329687e+01, -3.213352398830333e+05, 0.000000000000000e+00, -1.283115625602014e+05, -3.213352398830330e+05, 0.000000000000000e+00, -1.283115625602015e+05, -3.518390833256636e-02, 0.000000000000000e+00, -3.470718066247754e-02, -3.294592564012247e-02, 0.000000000000000e+00, -3.251183369725771e-02, -3.360599293512672e-02, 0.000000000000000e+00, -3.316364478721563e-02, -3.424836904508723e-02, 0.000000000000000e+00, -3.378417990874767e-02, -3.391567603370491e-02, 0.000000000000000e+00, -3.346258774371814e-02, -3.391567603370491e-02, 0.000000000000000e+00, -3.346258774371814e-02, -4.064443258485852e-02, 0.000000000000000e+00, -4.012375966980940e-02, -4.357267862767610e-02, 0.000000000000000e+00, -4.301107489308806e-02, -4.107750337722674e-02, 0.000000000000000e+00, -4.055588917135171e-02, -3.961197578170399e-02, 0.000000000000000e+00, -3.913010103198097e-02, -4.029985949301763e-02, 0.000000000000000e+00, -3.978274781943201e-02, -4.029985949301763e-02, 0.000000000000000e+00, -3.978274781943201e-02, -1.905630594352499e-02, 0.000000000000000e+00, -1.903349858953119e-02, -5.883823222282053e-01, 0.000000000000000e+00, -5.789426737820549e-01, -3.509412062735926e-01, 0.000000000000000e+00, -3.425692317818254e-01, -1.669311222983181e-01, 0.000000000000000e+00, -1.639199162931102e-01, -2.409479299746169e-01, 0.000000000000000e+00, -2.421083744817549e-01, -2.409479299746171e-01, 0.000000000000000e+00, -2.421083744817551e-01, -6.031380901776215e-02, 0.000000000000000e+00, -5.916680287901667e-02, -1.312990564381941e+02, 0.000000000000000e+00, -1.288745700076223e+02, -5.753335988770911e+01, 0.000000000000000e+00, -5.292003317551553e+01, -2.184939933584431e-01, 0.000000000000000e+00, -2.084166276262106e-01, -1.866129177121234e+01, 0.000000000000000e+00, -1.712470944957090e+01, -1.866129177121234e+01, 0.000000000000000e+00, -1.712470944957091e+01, -7.459597456195866e+03, 0.000000000000000e+00, -6.776488959042872e+03, -6.977404774417814e+06, 0.000000000000000e+00, -8.119012726372456e+06, -7.828973056864495e+05, 0.000000000000000e+00, -6.668049524604206e+05, -2.167933820718472e+01, 0.000000000000000e+00, -2.062652994838395e+01, -4.600311204410556e+05, 0.000000000000000e+00, -1.665838649239627e+05, -4.600311204410566e+05, 0.000000000000000e+00, -1.665838649239633e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
