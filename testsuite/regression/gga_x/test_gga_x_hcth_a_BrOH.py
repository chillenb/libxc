
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_hcth_a_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_hcth_a", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.111301730635201e+01, -2.111307070651249e+01, -2.111334356957429e+01, -2.111246846409155e+01, -2.111304517825369e+01, -2.111304517825369e+01, -3.439357910682932e+00, -3.439360127971420e+00, -3.439564353791752e+00, -3.439943506223977e+00, -3.439373701849990e+00, -3.439373701849990e+00, -6.710981334013404e-01, -6.708556628180128e-01, -6.686395321340097e-01, -6.728622502487157e-01, -6.710066718093275e-01, -6.710066718093275e-01, -2.113001822405637e-01, -2.110237808338274e-01, -7.935134982952651e-01, -2.067837514876258e-01, -2.111629709484669e-01, -2.111629709484669e-01, -1.394845213222671e-01, -1.402820737553050e-01, -1.941859660119353e-01, -1.353778141460721e-01, -1.389344711356122e-01, -1.389344711356122e-01, -5.156810082222611e+00, -5.158148214866076e+00, -5.156948623982149e+00, -5.157989012431820e+00, -5.157492669631829e+00, -5.157492669631829e+00, -2.014010284915552e+00, -2.023867418457825e+00, -2.014551968447189e+00, -2.022101223335451e+00, -2.020413063786315e+00, -2.020413063786315e+00, -5.735111463507166e-01, -6.316525699104104e-01, -5.443079696273239e-01, -5.722484526661967e-01, -5.956340023594459e-01, -5.956340023594459e-01, -2.137489594467507e-01, -2.504994917345854e-01, -2.057338643047583e-01, -1.921093837397172e+00, -2.023082664850305e-01, -2.023082664850305e-01, -1.329922894146944e-01, -1.354859191627045e-01, -1.037868072295439e-01, -1.932259320319679e-01, -1.229766035649793e-01, -1.229766035649793e-01, -6.067289894552572e-01, -5.977537873608154e-01, -6.007141679449309e-01, -6.031859016431992e-01, -6.019279822296010e-01, -6.019279822296010e-01, -5.884185915743281e-01, -5.013373173144003e-01, -5.193046761174916e-01, -5.406503597042556e-01, -5.291482704544216e-01, -5.291482704544216e-01, -6.615580104229624e-01, -2.798288680765322e-01, -3.022711664457752e-01, -3.527680505479247e-01, -3.227189585063085e-01, -3.227189585063084e-01, -4.534746662905065e-01, -2.019648678040758e-01, -2.021532296835259e-01, -3.289836136153913e-01, -1.894760694732792e-01, -1.894760694732790e-01, -1.515952447340443e-01, -1.009117785324579e-01, -1.135797466587574e-01, -1.798787337627014e-01, -1.107875888897968e-01, -1.107875888897968e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_hcth_a_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_hcth_a", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.837277488813901e+01, -2.837288832860720e+01, -2.837338067531570e+01, -2.837152325820812e+01, -2.837283482767085e+01, -2.837283482767085e+01, -4.504650571645437e+00, -4.504731086833128e+00, -4.507126512489565e+00, -4.503950239159033e+00, -4.504711173115450e+00, -4.504711173115450e+00, -7.935536177668074e-01, -7.909364663369418e-01, -7.170223097289743e-01, -7.257462485826721e-01, -7.926085057533582e-01, -7.926085057533582e-01, -1.536350478270880e-01, -1.606910811279818e-01, -1.004948575106040e+00, -5.851044126428501e-02, -1.558097963689621e-01, -1.558097963689621e-01, -2.624097384177426e-02, -2.622578758427371e-02, -1.884221244108339e-02, -2.583693927527889e-02, -2.597736909348082e-02, -2.597736909348082e-02, -7.019171469851832e+00, -7.022393769767056e+00, -7.019501115469177e+00, -7.022006780025599e+00, -7.020826497315743e+00, -7.020826497315743e+00, -2.170441351343225e+00, -2.198746638062945e+00, -2.145875740935404e+00, -2.168068818083270e+00, -2.221231845007453e+00, -2.221231845007453e+00, -7.624838150798369e-01, -8.628266150236543e-01, -7.196042290258061e-01, -7.831776017093045e-01, -7.994783760202885e-01, -7.994783760202885e-01, -2.159100720140866e-02, -1.092765851156938e-01, -2.218676040107647e-02, -2.624349438474150e+00, -3.656563325933027e-02, -3.656563325933027e-02, -2.535063119549415e-02, -2.600224942053868e-02, -1.989644515643133e-02, -1.334381090222680e-02, -2.360587850134717e-02, -2.360587850134748e-02, -8.181599456429195e-01, -8.155423179176838e-01, -8.171579363782191e-01, -8.179335490169785e-01, -8.176024214799372e-01, -8.176024214799372e-01, -7.909315457378495e-01, -6.211103601483636e-01, -6.827553855228845e-01, -7.346115509749298e-01, -7.094049679688564e-01, -7.094049679688564e-01, -9.043130492756574e-01, -1.768944952345630e-01, -2.584104891415157e-01, -4.189866197916969e-01, -3.355311054945920e-01, -3.355311054945919e-01, -5.535809102567121e-01, -2.228912897404152e-02, -1.583896109134847e-02, -4.180847417959094e-01, -1.572744224392560e-02, -1.572744224392565e-02, -2.816995387934235e-02, -1.743415717885832e-02, -2.094288641343434e-02, -1.507252835863890e-02, -2.119975679202774e-02, -2.119975679202782e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_hcth_a_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_hcth_a", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [5.623233369783328e-10, 5.624379955253173e-10, 5.627717798617570e-10, 5.608977809279607e-10, 5.623852895985537e-10, 5.623852895985537e-10, -1.298941139177224e-06, -1.297899563240731e-06, -1.269017792662499e-06, -1.317613455769672e-06, -1.298383320795539e-06, -1.298383320795539e-06, -3.443542494308659e-03, -3.498755137994677e-03, -4.961477065732636e-03, -4.761676507548247e-03, -3.463494840875556e-03, -3.463494840875556e-03, -9.972338660198484e-01, -9.391267586745130e-01, -1.025108254940510e-03, -3.265432033415043e+00, -9.795093561802275e-01, -9.795093561802275e-01, -7.131960821902303e+03, -6.259736171786947e+03, -9.566131249623774e+01, -5.239832858037963e+04, -6.520345925653698e+03, -6.520345925653698e+03, 5.810017504041702e-07, 5.908895637748570e-07, 5.819858924854974e-07, 5.896742475300543e-07, 5.861030278243983e-07, 5.861030278243983e-07, -5.946355850517659e-05, -5.700082695375087e-05, -6.130038371844139e-05, -5.934151761271017e-05, -5.541286666535524e-05, -5.541286666535524e-05, -3.203002674825976e-04, 7.789546143943677e-03, -1.087238232675556e-03, 7.802403019029862e-03, 7.351686607435135e-04, 7.351686607435135e-04, -8.422163887443455e+00, -9.489218629168377e-01, -9.084115471038189e+00, 9.055657984048264e-05, -5.633603492134247e+00, -5.633603492134247e+00, -5.906536114139375e+04, -4.032190973827231e+04, -1.241271792994204e+05, -3.790819975960461e+01, -5.880062118548073e+04, -5.880062118548070e+04, 1.556017022340068e-02, 1.058263681704037e-02, 1.209009762127011e-02, 1.343685687885311e-02, 1.274034605525099e-02, 1.274034605525099e-02, 1.912177576234452e-02, -8.155354422750519e-03, -2.040736559319673e-03, 4.118591624316418e-03, 9.522412621320691e-04, 9.522412621320952e-04, 6.065679121310691e-03, -3.906494631919500e-01, -1.871820011715928e-01, -4.409841762787722e-02, -9.894804979324498e-02, -9.894804979324508e-02, -1.368332443705320e-02, -1.123045073503989e+02, -4.857236890412610e+01, -3.306322774827311e-02, -1.779607138941034e+01, -1.779607138941034e+01, -4.186389432132063e+03, -1.949065414245923e+06, -2.940691410868764e+05, -2.158913918569725e+01, -1.043246064597946e+05, -1.043246064597949e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
