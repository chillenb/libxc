
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_ncap_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ncap", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.099505167478573e+01, -2.099507735064986e+01, -2.099526231198805e+01, -2.099487885312866e+01, -2.099506970915884e+01, -2.099506970915884e+01, -3.485676751048515e+00, -3.485635636930312e+00, -3.484770789255355e+00, -3.486936699693607e+00, -3.485711751555127e+00, -3.485711751555127e+00, -7.019771060018557e-01, -7.020659649611971e-01, -7.063702496466429e-01, -7.110401635260292e-01, -7.116413335743215e-01, -7.116413335743215e-01, -2.243599387319709e-01, -2.247071110582327e-01, -8.100945977084336e-01, -2.037007403563214e-01, -2.241622722743253e-01, -2.241622722743252e-01, -2.967217649505883e-01, -2.855716150327620e-01, -1.898653714374237e-01, -3.747158471916248e-01, -3.078910149181390e-01, -3.078910149181388e-01, -5.042877188398515e+00, -5.042177497381854e+00, -5.042856145914934e+00, -5.042238265271185e+00, -5.042516289224073e+00, -5.042516289224073e+00, -2.135633734514177e+00, -2.144958356004125e+00, -2.138461959793665e+00, -2.146666946782701e+00, -2.139467048399604e+00, -2.139467048399604e+00, -5.824304036414146e-01, -6.031417555055316e-01, -5.438273830389515e-01, -5.380497657743429e-01, -5.886466768675428e-01, -5.886466768675429e-01, -1.894128635637354e-01, -2.496945595751409e-01, -1.844234303202684e-01, -1.814501398669938e+00, -1.851662484589373e-01, -1.851662484589373e-01, -3.736605240171630e-01, -3.575712771197839e-01, -2.108600141898296e-01, -1.683030785506146e-01, -2.532387684995391e-01, -2.532387684995393e-01, -5.508306787093571e-01, -5.541882138902776e-01, -5.530148510040849e-01, -5.520325179631123e-01, -5.525236909446549e-01, -5.525236909446549e-01, -5.340075464103637e-01, -5.137911740089283e-01, -5.190438008305924e-01, -5.241603159659283e-01, -5.213027159413630e-01, -5.213027159413630e-01, -6.334973730819371e-01, -2.884623267838364e-01, -3.183755113635071e-01, -3.686377382031475e-01, -3.405706987875716e-01, -3.405706987875716e-01, -4.742849020868817e-01, -1.977849102499707e-01, -1.842563841469960e-01, -3.439761301072028e-01, -1.632028423597082e-01, -1.632028423597082e-01, -2.806378083145814e-01, -3.264730281765118e-01, -3.261179591770971e-01, -1.623406921460511e-01, -2.405864954218796e-01, -2.405864954218794e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_ncap_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ncap", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.503964619878817e+01, -2.503961702904608e+01, -2.503976563006195e+01, -2.503970376933779e+01, -2.504011214563383e+01, -2.504021025997640e+01, -2.503876429256454e+01, -2.503849201728639e+01, -2.503971922621144e+01, -2.503915268120696e+01, -2.503971922621144e+01, -2.503915268120696e+01, -4.012210193350668e+00, -4.012433117648769e+00, -4.012257504279308e+00, -4.012490347105877e+00, -4.013505883802880e+00, -4.013856828003066e+00, -4.011990343136427e+00, -4.012351920001625e+00, -4.011429868379274e+00, -4.013531693359163e+00, -4.011429868379274e+00, -4.013531693359163e+00, -7.480586939508090e-01, -7.535526016667343e-01, -7.460478742982769e-01, -7.527631345578845e-01, -7.202279203414308e-01, -7.117534959078019e-01, -7.211718260405083e-01, -7.239186909324576e-01, -7.632508712605288e-01, -6.804582328489516e-01, -7.632508712605288e-01, -6.804582328489516e-01, -1.753069777259651e-01, -1.831268236730705e-01, -1.780454208381855e-01, -1.870376912759764e-01, -8.608455007077563e-01, -9.018174631665130e-01, -1.256026893619661e-01, -1.277290653848565e-01, -1.833273875324966e-01, -7.468364385985937e-02, -1.833273875324965e-01, -7.468364385985930e-02, 1.490182042163934e-01, 1.467802319160954e-01, 1.444386156269001e-01, 1.415780815855111e-01, 5.744416380299586e-02, 5.181573206666431e-02, 1.748463711952964e-01, 1.770004065885279e-01, 1.540930265713396e-01, 1.329277847459140e-01, 1.540930265713396e-01, 1.329277847459141e-01, -6.183491470463068e+00, -6.181936303857354e+00, -6.186469531054768e+00, -6.184813432519747e+00, -6.183655003582421e+00, -6.182033805693903e+00, -6.186210374648274e+00, -6.184647561579940e+00, -6.185018321746675e+00, -6.183381598096009e+00, -6.185018321746675e+00, -6.183381598096009e+00, -2.140336344380417e+00, -2.140219934424424e+00, -2.159190908194929e+00, -2.158529561183656e+00, -2.119202628624942e+00, -2.125172127491977e+00, -2.135413051426049e+00, -2.141562204076373e+00, -2.166845620916611e+00, -2.152034526631265e+00, -2.166845620916611e+00, -2.152034526631265e+00, -6.830586884789819e-01, -6.813464103457132e-01, -7.731831055837650e-01, -7.739564381523152e-01, -6.139315715165663e-01, -6.395663812187585e-01, -6.692925814759620e-01, -6.910539782299295e-01, -7.150616973797851e-01, -6.779835399722823e-01, -7.150616973797852e-01, -6.779835399722824e-01, -6.074044537021985e-02, -6.286409496079651e-02, -1.730462487820967e-01, -1.740757884963003e-01, -4.719460257627658e-02, -5.507041536234905e-02, -2.332721608746733e+00, -2.331739726781014e+00, -8.701031268472877e-02, -1.009329913235694e-01, -8.701031268472877e-02, -1.009329913235694e-01, 1.678864543415348e-01, 1.739712656982895e-01, 1.664146072763742e-01, 1.699604249067775e-01, 1.041097019856692e-01, 9.927180415795893e-02, -4.622886685057709e-03, -4.256519265116272e-03, 1.285468442633015e-01, 1.195944825578984e-01, 1.285468442633017e-01, 1.195944825578985e-01, -7.231390817128901e-01, -7.260795912654809e-01, -7.105552068189835e-01, -7.135799639112480e-01, -7.149074031106287e-01, -7.179318012550204e-01, -7.185940763111043e-01, -7.215397342336741e-01, -7.167452908118127e-01, -7.197291673427845e-01, -7.167452908118127e-01, -7.197291673427845e-01, -7.063013810327852e-01, -7.086564244902591e-01, -5.507634630939595e-01, -5.536112314188743e-01, -5.913261504221222e-01, -5.945495424819276e-01, -6.357283812055688e-01, -6.381862874678388e-01, -6.130118064783141e-01, -6.155277258020984e-01, -6.130118064783141e-01, -6.155277258020984e-01, -8.085212903876686e-01, -8.105166196905609e-01, -2.251641390235507e-01, -2.266422382444921e-01, -2.756341296910247e-01, -2.788581924861506e-01, -3.848542233492944e-01, -3.872564911602705e-01, -3.259693804285542e-01, -3.260109635264547e-01, -3.259693804285542e-01, -3.260109635264546e-01, -5.053640350669016e-01, -5.096496277148655e-01, 6.281530036300427e-02, 6.209892648311306e-02, 3.187657044102628e-02, 2.726810907332784e-02, -3.766481293771082e-01, -3.832976489725928e-01, -3.406278888350755e-02, -4.609705515694440e-02, -3.406278888350756e-02, -4.609705515694440e-02, 1.431834401260823e-01, 1.403421786164069e-01, 1.461609131123897e-01, 1.237278503079158e-01, 1.486889667908699e-01, 1.441729929030438e-01, -3.098031395772572e-02, -3.268528104703673e-02, 1.041400498889056e-01, 1.208938048892437e-01, 1.041400498889055e-01, 1.208938048892439e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_ncap_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ncap", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.495691594578927e-08, 0.000000000000000e+00, -1.495699794030545e-08, -1.495678475504250e-08, 0.000000000000000e+00, -1.495690259753482e-08, -1.495624387579727e-08, 0.000000000000000e+00, -1.495616148522537e-08, -1.495772854389788e-08, 0.000000000000000e+00, -1.495805285758698e-08, -1.495684382034521e-08, 0.000000000000000e+00, -1.495720764709043e-08, -1.495684382034521e-08, 0.000000000000000e+00, -1.495720764709043e-08, -2.033040451461207e-05, 0.000000000000000e+00, -2.033584451857672e-05, -2.033069254530538e-05, 0.000000000000000e+00, -2.033656552287578e-05, -2.034204435318618e-05, 0.000000000000000e+00, -2.034454516603752e-05, -2.030924117426480e-05, 0.000000000000000e+00, -2.031286353522020e-05, -2.034230019614669e-05, 0.000000000000000e+00, -2.032124290501575e-05, -2.034230019614669e-05, 0.000000000000000e+00, -2.032124290501575e-05, -1.322213670135685e-02, 0.000000000000000e+00, -1.319167389129869e-02, -1.324287052448330e-02, 0.000000000000000e+00, -1.320565653133992e-02, -1.352274846662697e-02, 0.000000000000000e+00, -1.356616207862942e-02, -1.316405724818254e-02, 0.000000000000000e+00, -1.315604881571779e-02, -1.305144262485963e-02, 0.000000000000000e+00, -1.324259512541071e-02, -1.305144262485963e-02, 0.000000000000000e+00, -1.324259512541071e-02, -1.876231818762031e+00, 0.000000000000000e+00, -1.684689344560667e+00, -1.834000293922124e+00, 0.000000000000000e+00, -1.621393412678868e+00, -7.647707640001177e-03, 0.000000000000000e+00, -7.048645947632430e-03, -4.028963319969386e+00, 0.000000000000000e+00, -3.839174008685917e+00, -1.597258480118504e+00, 0.000000000000000e+00, -1.162622995987003e+01, -1.597258480118503e+00, 0.000000000000000e+00, -1.162622995987003e+01, -1.788785289371741e+05, 0.000000000000000e+00, -1.456823879856666e+05, -1.542133576967670e+05, 0.000000000000000e+00, -1.222957355328180e+05, -4.069078188661428e+02, 0.000000000000000e+00, -3.371474354249139e+02, -9.624083333616244e+05, 0.000000000000000e+00, -1.012848160962658e+06, -2.620830255305364e+05, 0.000000000000000e+00, -2.004749113637756e+06, -2.620830255305365e+05, 0.000000000000000e+00, -2.004749113637755e+06, -4.375767972274612e-06, 0.000000000000000e+00, -4.379837265127481e-06, -4.375592541961503e-06, 0.000000000000000e+00, -4.379669153337206e-06, -4.375727315314003e-06, 0.000000000000000e+00, -4.379809320558744e-06, -4.375577314979249e-06, 0.000000000000000e+00, -4.379657010425368e-06, -4.375703489560786e-06, 0.000000000000000e+00, -4.379758065710136e-06, -4.375703489560786e-06, 0.000000000000000e+00, -4.379758065710136e-06, -1.638773586841030e-04, 0.000000000000000e+00, -1.639071980456348e-04, -1.603165175173238e-04, 0.000000000000000e+00, -1.604631349301773e-04, -1.646935467017737e-04, 0.000000000000000e+00, -1.645230198745191e-04, -1.616136020804272e-04, 0.000000000000000e+00, -1.613765732575205e-04, -1.611903270226584e-04, 0.000000000000000e+00, -1.620112319276491e-04, -1.611903270226584e-04, 0.000000000000000e+00, -1.620112319276491e-04, -2.553580865291856e-02, 0.000000000000000e+00, -2.581855056463737e-02, -2.041823380621348e-02, 0.000000000000000e+00, -2.040079315551558e-02, -3.668840363387901e-02, 0.000000000000000e+00, -3.222436048805877e-02, -3.508914893342801e-02, 0.000000000000000e+00, -3.074616148085017e-02, -2.223040801857839e-02, 0.000000000000000e+00, -2.711462427814149e-02, -2.223040801857840e-02, 0.000000000000000e+00, -2.711462427814150e-02, -1.304099294428870e+01, 0.000000000000000e+00, -1.266528396174902e+01, -1.458661588950522e+00, 0.000000000000000e+00, -1.435231874442748e+00, -1.864382865775470e+01, 0.000000000000000e+00, -1.554426376652175e+01, -2.483065590081392e-04, 0.000000000000000e+00, -2.487653823799735e-04, -8.493849089966950e+00, 0.000000000000000e+00, -7.360418336479881e+00, -8.493849089966950e+00, 0.000000000000000e+00, -7.360418336479881e+00, -2.644319466326660e+06, 0.000000000000000e+00, -2.270723041610639e+06, -1.129678839956430e+06, 0.000000000000000e+00, -1.060235085642509e+06, -3.983182084039145e+06, 0.000000000000000e+00, -3.349700276409000e+06, -7.088516308503712e+01, 0.000000000000000e+00, -6.905076694481144e+01, -3.299529953847251e+06, 0.000000000000000e+00, -1.144411252041813e+06, -3.299529953847250e+06, 0.000000000000000e+00, -1.144411252041813e+06, -2.858834208139110e-02, 0.000000000000000e+00, -2.815494355026045e-02, -2.878956283769155e-02, 0.000000000000000e+00, -2.836139782009523e-02, -2.874754017564657e-02, 0.000000000000000e+00, -2.831702452291275e-02, -2.869410345411450e-02, 0.000000000000000e+00, -2.826277082651332e-02, -2.872365334072314e-02, 0.000000000000000e+00, -2.829259938765036e-02, -2.872365334072314e-02, 0.000000000000000e+00, -2.829259938765036e-02, -3.192040076798404e-02, 0.000000000000000e+00, -3.150161690413223e-02, -4.614168520230574e-02, 0.000000000000000e+00, -4.550032245772856e-02, -4.194502438056458e-02, 0.000000000000000e+00, -4.134021085791528e-02, -3.807947061355185e-02, 0.000000000000000e+00, -3.758128080966702e-02, -4.006568472458884e-02, 0.000000000000000e+00, -3.951912851718395e-02, -4.006568472458884e-02, 0.000000000000000e+00, -3.951912851718395e-02, -1.688283307927843e-02, 0.000000000000000e+00, -1.679898062197071e-02, -6.751443760350191e-01, 0.000000000000000e+00, -6.636083192896473e-01, -3.929971161430635e-01, 0.000000000000000e+00, -3.830732257956436e-01, -1.787551296821328e-01, 0.000000000000000e+00, -1.753966121111554e-01, -2.648952726426146e-01, 0.000000000000000e+00, -2.660734890921822e-01, -2.648952726426148e-01, 0.000000000000000e+00, -2.660734890921823e-01, -6.402858660362107e-02, 0.000000000000000e+00, -6.269173087880175e-02, -4.292212664227496e+02, 0.000000000000000e+00, -4.192758748716067e+02, -1.532350275126111e+02, 0.000000000000000e+00, -1.370697389837628e+02, -2.283204859152665e-01, 0.000000000000000e+00, -2.170053502320798e-01, -3.360672753073231e+01, 0.000000000000000e+00, -2.858718697570984e+01, -3.360672753073231e+01, 0.000000000000000e+00, -2.858718697570985e+01, -5.174736972952027e+04, 0.000000000000000e+00, -4.604002034262189e+04, -1.069569003301170e+08, 0.000000000000000e+00, -1.177462765709637e+08, -9.510821481720686e+06, 0.000000000000000e+00, -7.845170353707429e+06, -3.953007360601917e+01, 0.000000000000000e+00, -3.728021210443531e+01, -4.465762896436382e+06, 0.000000000000000e+00, -1.539800477260532e+06, -4.465762896436394e+06, 0.000000000000000e+00, -1.539800477260537e+06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
