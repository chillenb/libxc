
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_eb88_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_eb88", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.100423348934801e+01, -2.100426138017858e+01, -2.100445268399308e+01, -2.100403633800694e+01, -2.100424492623043e+01, -2.100424492623043e+01, -3.481833906020500e+00, -3.481797157449027e+00, -3.481032941598234e+00, -3.483022901899711e+00, -3.481874033538050e+00, -3.481874033538050e+00, -6.980815874415978e-01, -6.980719235905548e-01, -6.996163637263040e-01, -7.043842714753312e-01, -7.047493978743566e-01, -7.047493978743566e-01, -2.174473423414953e-01, -2.181467180599103e-01, -8.065613429069276e-01, -1.924897005302325e-01, -2.155478932050986e-01, -2.155478932050985e-01, -6.488717660467294e-02, -6.487720366089644e-02, -1.134072038566004e-01, -5.958872723422902e-02, -6.043579853117317e-02, -6.043579853117315e-02, -5.049208649359607e+00, -5.048576709461416e+00, -5.049190436726860e+00, -5.048632389638652e+00, -5.048882402012755e+00, -5.048882402012755e+00, -2.113273888036236e+00, -2.123242512130694e+00, -2.114359907475969e+00, -2.123145486762692e+00, -2.118292746800363e+00, -2.118292746800363e+00, -5.822638180705861e-01, -6.040877842508454e-01, -5.432869758160943e-01, -5.389328444933605e-01, -5.887737777060905e-01, -5.887737777060906e-01, -1.670649294875962e-01, -2.386710782639444e-01, -1.601674726985628e-01, -1.817296807333121e+00, -1.712404850395254e-01, -1.712404850395254e-01, -5.384316926944055e-02, -5.740280713000161e-02, -3.753611587641537e-02, -1.308391013849998e-01, -4.575961081462493e-02, -4.575961081462496e-02, -5.513068905049485e-01, -5.550445480756439e-01, -5.537853734924764e-01, -5.526956889548675e-01, -5.532450440668606e-01, -5.532450440668606e-01, -5.342608594385742e-01, -5.111122527505566e-01, -5.182697871827765e-01, -5.247028258760847e-01, -5.212864597894078e-01, -5.212864597894078e-01, -6.345142906553518e-01, -2.790057550213535e-01, -3.111054382265711e-01, -3.660358796917601e-01, -3.356930360369249e-01, -3.356930360369249e-01, -4.716696662612445e-01, -1.135389575696427e-01, -1.257852730252308e-01, -3.428035076808909e-01, -1.401908717358386e-01, -1.401908717358386e-01, -7.287932584865137e-02, -3.334292561445947e-02, -4.351067420024314e-02, -1.367776026769381e-01, -4.301357440824179e-02, -4.301357440824176e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_eb88_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_eb88", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.524859339364317e+01, -2.524856312976397e+01, -2.524870315724769e+01, -2.524864285286204e+01, -2.524903270910664e+01, -2.524912112582277e+01, -2.524779368022612e+01, -2.524754170249210e+01, -2.524865994987655e+01, -2.524815714789834e+01, -2.524865994987655e+01, -2.524815714789834e+01, -4.064262743085276e+00, -4.064404903154881e+00, -4.064300192243269e+00, -4.064447073405141e+00, -4.065256798121489e+00, -4.065531504687566e+00, -4.064255347283066e+00, -4.064529604005111e+00, -4.063505264731926e+00, -4.065453342531010e+00, -4.063505264731926e+00, -4.065453342531010e+00, -7.651672757335218e-01, -7.699996181745050e-01, -7.633725405388212e-01, -7.692851520351308e-01, -7.400562854203546e-01, -7.323774405178286e-01, -7.415445038681477e-01, -7.440195452712813e-01, -7.786831987642833e-01, -7.040430322721744e-01, -7.786831987642833e-01, -7.040430322721744e-01, -1.841124198353486e-01, -1.916409043401267e-01, -1.865777301543037e-01, -1.953456088299313e-01, -8.800607390246405e-01, -9.181650950475284e-01, -1.420819721287084e-01, -1.439697041477943e-01, -1.923342712491975e-01, -1.070703206351002e-01, -1.923342712491974e-01, -1.070703206351001e-01, -1.758285002989067e-02, -1.815003712281444e-02, -1.788399615584724e-02, -1.853287144211361e-02, -5.124767433070903e-02, -5.305679289332293e-02, -1.399243814666522e-02, -1.394209529275555e-02, -1.662355722102718e-02, -1.127357428576974e-02, -1.662355722102719e-02, -1.127357428576970e-02, -6.214272814538343e+00, -6.212727943303221e+00, -6.216821987180889e+00, -6.215190579921654e+00, -6.214414439715457e+00, -6.212812579220623e+00, -6.216601751180382e+00, -6.215049751052966e+00, -6.215578281079503e+00, -6.213964623081887e+00, -6.215578281079503e+00, -6.213964623081887e+00, -2.203185080397733e+00, -2.203067633499811e+00, -2.221698005734802e+00, -2.221038930373223e+00, -2.183685258144497e+00, -2.189182178209868e+00, -2.199641603588310e+00, -2.205318032488953e+00, -2.228203695517756e+00, -2.214523781628485e+00, -2.228203695517756e+00, -2.214523781628485e+00, -6.903636462833566e-01, -6.886050563780074e-01, -7.737067340205328e-01, -7.744211710622095e-01, -6.221775541914657e-01, -6.472342814849437e-01, -6.704038325719770e-01, -6.922879933403409e-01, -7.213721935830959e-01, -6.843734122899373e-01, -7.213721935830960e-01, -6.843734122899373e-01, -1.044585672048418e-01, -1.051380059880130e-01, -1.872587738537043e-01, -1.881782832984626e-01, -9.605463165448505e-02, -1.001476515109046e-01, -2.333876959500040e+00, -2.332885798110737e+00, -1.158440267790879e-01, -1.208377863177874e-01, -1.158440267790879e-01, -1.208377863177874e-01, -1.177391774279760e-02, -1.221909594881285e-02, -1.339715924151487e-02, -1.363725306796098e-02, -9.256879882162684e-03, -9.371986787662000e-03, -7.128811096859679e-02, -7.179344611772738e-02, -1.028454722995716e-02, -1.192981809582300e-02, -1.028454722995719e-02, -1.192981809582304e-02, -7.228358175240943e-01, -7.257736068746338e-01, -7.109383597717108e-01, -7.139311539037950e-01, -7.149445809059091e-01, -7.179455384301436e-01, -7.184187114058500e-01, -7.213526048191191e-01, -7.166659817651593e-01, -7.196326726046122e-01, -7.166659817651593e-01, -7.196326726046122e-01, -7.060582182695090e-01, -7.084136330374082e-01, -5.628241129131671e-01, -5.655903592837822e-01, -5.996750568574148e-01, -6.027614129953943e-01, -6.395865127648681e-01, -6.420023556386406e-01, -6.191111511606400e-01, -6.215835726871622e-01, -6.191111511606400e-01, -6.215835726871622e-01, -8.093048400382843e-01, -8.111983796783220e-01, -2.367836791169537e-01, -2.382019372051679e-01, -2.866670465365523e-01, -2.898677504278386e-01, -3.944389165498186e-01, -3.968170611304285e-01, -3.368413630113461e-01, -3.368423655399573e-01, -3.368413630113462e-01, -3.368423655399573e-01, -5.167543239404329e-01, -5.208858669487925e-01, -5.103688254840187e-02, -5.125466595469869e-02, -6.201923577616624e-02, -6.328925860681688e-02, -3.837007133119346e-01, -3.901714995798566e-01, -8.340112579287659e-02, -8.607241101434837e-02, -8.340112579287658e-02, -8.607241101434843e-02, -2.174262586829382e-02, -2.210434083711496e-02, -6.577500807341834e-03, -6.002879713501226e-03, -9.259632173139732e-03, -9.407520549063443e-03, -8.022337783992925e-02, -8.130640204946361e-02, -9.086704212514653e-03, -1.139244759873652e-02, -9.086704212514677e-03, -1.139244759873649e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_eb88_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_eb88", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.396086932313867e-08, 0.000000000000000e+00, -1.396094899859154e-08, -1.396078624688097e-08, 0.000000000000000e+00, -1.396088858903789e-08, -1.396035470168396e-08, 0.000000000000000e+00, -1.396031663093372e-08, -1.396129716773277e-08, 0.000000000000000e+00, -1.396151655898034e-08, -1.396082814588473e-08, 0.000000000000000e+00, -1.396091493633287e-08, -1.396082814588473e-08, 0.000000000000000e+00, -1.396091493633287e-08, -1.850094894668787e-05, 0.000000000000000e+00, -1.850766268036601e-05, -1.850143165794310e-05, 0.000000000000000e+00, -1.850865221726106e-05, -1.851826841800594e-05, 0.000000000000000e+00, -1.852225758219066e-05, -1.847717004024861e-05, 0.000000000000000e+00, -1.848239558517199e-05, -1.851107962259228e-05, 0.000000000000000e+00, -1.849573094538303e-05, -1.851107962259228e-05, 0.000000000000000e+00, -1.849573094538303e-05, -1.163806849487071e-02, 0.000000000000000e+00, -1.164178906326065e-02, -1.164647049039785e-02, 0.000000000000000e+00, -1.165043598004050e-02, -1.178687970944027e-02, 0.000000000000000e+00, -1.179592118217285e-02, -1.145994608285012e-02, 0.000000000000000e+00, -1.146247649652022e-02, -1.156865702566186e-02, 0.000000000000000e+00, -1.143243629866941e-02, -1.156865702566186e-02, 0.000000000000000e+00, -1.143243629866941e-02, -1.592284836987322e+00, 0.000000000000000e+00, -1.436405430636655e+00, -1.560930031198805e+00, 0.000000000000000e+00, -1.385970897971864e+00, -6.740637655904075e-03, 0.000000000000000e+00, -6.287945928957879e-03, -3.153212623759862e+00, 0.000000000000000e+00, -3.014705562546372e+00, -1.357389149348579e+00, 0.000000000000000e+00, -7.747172280680926e+00, -1.357389149348578e+00, 0.000000000000000e+00, -7.747172280680927e+00, -2.224490284417023e+04, 0.000000000000000e+00, -1.863452723487144e+04, -1.974126859886916e+04, 0.000000000000000e+00, -1.618210692673269e+04, -1.282838479908806e+02, 0.000000000000000e+00, -1.104504832391118e+02, -9.376993656937519e+04, 0.000000000000000e+00, -9.766550909182210e+04, -3.085989668929972e+04, 0.000000000000000e+00, -2.028366761953523e+05, -3.085989668929976e+04, 0.000000000000000e+00, -2.028366761953523e+05, -4.195138559117570e-06, 0.000000000000000e+00, -4.198921576126881e-06, -4.197891643049160e-06, 0.000000000000000e+00, -4.201585315123896e-06, -4.195248496428565e-06, 0.000000000000000e+00, -4.198982346820571e-06, -4.197611130979657e-06, 0.000000000000000e+00, -4.201402504486014e-06, -4.196580826980571e-06, 0.000000000000000e+00, -4.200264071763051e-06, -4.196580826980571e-06, 0.000000000000000e+00, -4.200264071763051e-06, -1.424063593579158e-04, 0.000000000000000e+00, -1.424320441812546e-04, -1.394028985367758e-04, 0.000000000000000e+00, -1.395281776782529e-04, -1.428904067007201e-04, 0.000000000000000e+00, -1.428054755106708e-04, -1.402887095329850e-04, 0.000000000000000e+00, -1.401464984947766e-04, -1.403080395049388e-04, 0.000000000000000e+00, -1.408567960462211e-04, -1.403080395049388e-04, 0.000000000000000e+00, -1.408567960462211e-04, -2.350263440113447e-02, 0.000000000000000e+00, -2.376815958169839e-02, -2.090691637413566e-02, 0.000000000000000e+00, -2.093550256838545e-02, -3.331832528953294e-02, 0.000000000000000e+00, -2.946150354349598e-02, -3.513453953103392e-02, 0.000000000000000e+00, -3.071498649391007e-02, -2.068550851959274e-02, 0.000000000000000e+00, -2.513709242206398e-02, -2.068550851959275e-02, 0.000000000000000e+00, -2.513709242206398e-02, -8.021053683113076e+00, 0.000000000000000e+00, -7.874005707939818e+00, -1.193852158075450e+00, 0.000000000000000e+00, -1.176031681048185e+00, -1.084414863844371e+01, 0.000000000000000e+00, -9.370271965656494e+00, -2.556360866807851e-04, 0.000000000000000e+00, -2.561390665342838e-04, -5.897238386898299e+00, 0.000000000000000e+00, -5.491884441984452e+00, -5.897238386898299e+00, 0.000000000000000e+00, -5.491884441984452e+00, -2.360538792792698e+05, 0.000000000000000e+00, -2.029095417800803e+05, -1.104963364402061e+05, 0.000000000000000e+00, -1.034791934170309e+05, -4.154439023347872e+05, 0.000000000000000e+00, -3.629444192770093e+05, -3.320398514685642e+01, 0.000000000000000e+00, -3.226593947866977e+01, -3.214270587600514e+05, 0.000000000000000e+00, -1.283649311478046e+05, -3.214270587600513e+05, 0.000000000000000e+00, -1.283649311478045e+05, -3.130058860451148e-02, 0.000000000000000e+00, -3.087020066505327e-02, -2.959876288088390e-02, 0.000000000000000e+00, -2.920146547742135e-02, -3.010034652482466e-02, 0.000000000000000e+00, -2.969655579248081e-02, -3.058896102971305e-02, 0.000000000000000e+00, -3.016834979750323e-02, -3.033589737799602e-02, 0.000000000000000e+00, -2.992382715183628e-02, -3.033589737799602e-02, 0.000000000000000e+00, -2.992382715183628e-02, -3.601167429963237e-02, 0.000000000000000e+00, -3.554908203747149e-02, -4.071291185310660e-02, 0.000000000000000e+00, -4.017420677909608e-02, -3.797914141593242e-02, 0.000000000000000e+00, -3.748053816508584e-02, -3.615086001460163e-02, 0.000000000000000e+00, -3.570482852540928e-02, -3.702914464550593e-02, 0.000000000000000e+00, -3.654751008082184e-02, -3.702914464550593e-02, 0.000000000000000e+00, -3.654751008082184e-02, -1.715514396702685e-02, 0.000000000000000e+00, -1.712491977795667e-02, -5.719899174346675e-01, 0.000000000000000e+00, -5.626355738614784e-01, -3.376116523498659e-01, 0.000000000000000e+00, -3.292658435552231e-01, -1.566109339400990e-01, 0.000000000000000e+00, -1.537401137734885e-01, -2.289918546919214e-01, 0.000000000000000e+00, -2.300426461418006e-01, -2.289918546919216e-01, 0.000000000000000e+00, -2.300426461418007e-01, -5.640368490059516e-02, 0.000000000000000e+00, -5.529457860613991e-02, -1.315896426001247e+02, 0.000000000000000e+00, -1.291602075627133e+02, -5.765290511364435e+01, 0.000000000000000e+00, -5.302605569410465e+01, -2.032908836081564e-01, 0.000000000000000e+00, -1.937090194765825e-01, -1.863934236899174e+01, 0.000000000000000e+00, -1.707955574718601e+01, -1.863934236899175e+01, 0.000000000000000e+00, -1.707955574718602e+01, -7.465253966215359e+03, 0.000000000000000e+00, -6.781866471110426e+03, -6.978001861101890e+06, 0.000000000000000e+00, -8.119843255914642e+06, -7.830354863191579e+05, 0.000000000000000e+00, -6.669343092414500e+05, -2.165825284590376e+01, 0.000000000000000e+00, -2.060350840833680e+01, -4.601842736755942e+05, 0.000000000000000e+00, -1.666470182160719e+05, -4.601842736755955e+05, 0.000000000000000e+00, -1.666470182160725e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
