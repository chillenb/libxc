
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_q2d_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_q2d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.046815051426413e+01, -2.046818956255509e+01, -2.046840971140371e+01, -2.046782779248702e+01, -2.046812608575342e+01, -2.046812608575342e+01, -3.369265116365388e+00, -3.369245968390870e+00, -3.368885921867329e+00, -3.370151808359881e+00, -3.369323377588392e+00, -3.369323377588392e+00, -6.655299690710833e-01, -6.652302480593167e-01, -6.584674832770842e-01, -6.634169526448196e-01, -6.619505194327543e-01, -6.619505194327543e-01, -1.684753421152917e-01, -1.741950163408698e-01, -7.714509294132256e-01, -6.864650560102613e-02, -1.138465678369701e-01, -1.138465678369700e-01, -4.029445316288159e-04, -4.377346661239510e-04, -4.856328541123826e-03, -1.756114241104979e-04, -2.543759021048121e-04, -2.543759021048121e-04, -4.948171767880435e+00, -4.948186205131766e+00, -4.948180076798047e+00, -4.948192707148658e+00, -4.948174852212971e+00, -4.948174852212971e+00, -1.982744596662985e+00, -1.994525935526545e+00, -1.977997406835117e+00, -1.988510792794629e+00, -1.991431343048407e+00, -1.991431343048407e+00, -5.653682312790382e-01, -5.979382764629538e-01, -5.256374375484298e-01, -5.314802604151725e-01, -5.723730501117491e-01, -5.723730501117491e-01, -1.873539804365310e-02, -1.259103192741785e-01, -1.633728551412492e-02, -1.799722148003395e+00, -3.463280779162866e-02, -3.463280779162866e-02, -1.233058435456537e-04, -1.732154407102832e-04, -1.455407944178341e-04, -9.359633680280406e-03, -1.748989586762723e-04, -1.748989586762721e-04, -5.491871292624320e-01, -5.496287815199766e-01, -5.494791451587829e-01, -5.493463919873729e-01, -5.494126765017597e-01, -5.494126765017597e-01, -5.332539203592681e-01, -4.877864018780793e-01, -5.007626501616431e-01, -5.132557206774194e-01, -5.067598932592023e-01, -5.067598932592023e-01, -6.275080541931055e-01, -2.073782785383552e-01, -2.711181152784023e-01, -3.473265009455827e-01, -3.101241999787162e-01, -3.101241999787162e-01, -4.497146075753306e-01, -4.533120137238450e-03, -6.895895233241696e-03, -3.289948492001506e-01, -1.359273554008249e-02, -1.359273554008249e-02, -6.545899231587955e-04, -2.928841559851703e-05, -8.124192055372352e-05, -1.224255519221576e-02, -1.603099219464425e-04, -1.603099219464423e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_q2d_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_q2d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.567055566289062e+01, -2.567064476072624e+01, -2.567103488196235e+01, -2.566970941726536e+01, -2.567040478002793e+01, -2.567040478002793e+01, -4.147301923010430e+00, -4.147330936460381e+00, -4.148104475352075e+00, -4.147548638696637e+00, -4.147436684854407e+00, -4.147436684854407e+00, -7.935288391406167e-01, -7.926820578599280e-01, -7.788136288480066e-01, -7.845673751686141e-01, -7.827962755540109e-01, -7.827962755540109e-01, -3.590643373369055e-01, -3.413726212736351e-01, -9.257141789750314e-01, -3.246515752431831e-01, -4.112824231200797e-01, -4.112824231200797e-01, -7.987177788012297e-04, -8.668922697821884e-04, -8.786456842941548e-03, -3.498860607753509e-04, -5.057827162172002e-04, -5.057827162171993e-04, -6.299964340171738e+00, -6.302099459881616e+00, -6.300062330312937e+00, -6.301947217176466e+00, -6.301046627415705e+00, -6.301046627415705e+00, -2.348427978402925e+00, -2.360741181635382e+00, -2.348455567858814e+00, -2.358389753341973e+00, -2.356255355476127e+00, -2.356255355476127e+00, -7.022597048305554e-01, -7.804011274978528e-01, -6.477405906497917e-01, -6.884491748292644e-01, -7.154939504294994e-01, -7.154939504294994e-01, -5.059679807622462e-02, -4.881873479873062e-01, -3.894157059945363e-02, -2.351684778365120e+00, -1.548386091370391e-01, -1.548386091370391e-01, -2.459040792634667e-04, -3.450765289279409e-04, -2.895709611333261e-04, -1.631986149553248e-02, -3.479960175439540e-04, -3.479960175439532e-04, -7.268222184525821e-01, -7.180646716844591e-01, -7.211146240656651e-01, -7.236590823760737e-01, -7.223834306228292e-01, -7.223834306228292e-01, -7.084956855281189e-01, -5.825163157792405e-01, -6.140376054892643e-01, -6.503057342830912e-01, -6.314630761136564e-01, -6.314630761136564e-01, -8.173458422376971e-01, -4.900960039588971e-01, -3.985843509910109e-01, -4.118552332420432e-01, -3.759771682712016e-01, -3.759771682712016e-01, -5.362910297769393e-01, -8.275158443161720e-03, -1.205615968398971e-02, -3.971396619826035e-01, -3.031957027264291e-02, -3.031957027264281e-02, -1.291265634570484e-03, -5.851860781848533e-05, -1.621124794491215e-04, -2.477167676253253e-02, -3.190146821318424e-04, -3.190146821318418e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_q2d_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_q2d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.102372069603950e-09, -4.102342865115509e-09, -4.102172343779352e-09, -4.102607674512537e-09, -4.102385357121163e-09, -4.102385357121163e-09, -5.522240018550718e-06, -5.522435066732364e-06, -5.526393617190827e-06, -5.515309585690279e-06, -5.521941403192952e-06, -5.521941403192952e-06, -3.347218148540940e-03, -3.340390540392772e-03, -2.973786563559802e-03, -2.917609309246855e-03, -2.961900277558209e-03, -2.961900277558209e-03, 9.969096215853694e-01, 8.041290555663682e-01, -1.910282831040833e-03, 3.162726809297469e+00, 2.818002941117919e+00, 2.818002941117920e+00, 3.863476959414614e+01, 3.690051903531332e+01, 1.385924415086944e+00, 8.455511945472547e+01, 6.917368238436252e+01, 6.917368238436237e+01, -1.203818084833775e-06, -1.203800569527255e-06, -1.203809906144454e-06, -1.203794593707591e-06, -1.203813633884047e-06, -1.203813633884047e-06, -3.420806042189687e-05, -3.415902175965556e-05, -3.261009547378489e-05, -3.268594341751435e-05, -3.485390389323511e-05, -3.485390389323511e-05, -7.015622752835503e-03, -5.616465790176359e-03, -9.332091370178649e-03, -9.020990723528143e-03, -6.700392921121216e-03, -6.700392921121216e-03, 8.629452560696019e-01, 1.454047416241993e+00, 7.481078362114424e-01, -6.840076128545198e-05, 2.820204519016012e+00, 2.820204519016012e+00, 1.487720307510837e+02, 9.681660143859303e+01, 4.543031087343510e+02, 6.107105245937883e-01, 2.130412876218009e+02, 2.130412876217998e+02, -7.837735952608917e-03, -7.863890146735797e-03, -7.856853831999078e-03, -7.849608824679334e-03, -7.853465783915567e-03, -7.853465783915567e-03, -8.793980523419077e-03, -1.170241785835991e-02, -1.126961344983847e-02, -1.039721977433741e-02, -1.088841415910324e-02, -1.088841415910324e-02, -4.633862461903176e-03, 4.503988584104717e-01, 4.887416483689339e-02, -4.302406111470083e-02, -3.888285023328530e-02, -3.888285023328530e-02, -1.607003119170584e-02, 1.450749406444962e+00, 7.526577979481271e-01, -5.882051410390805e-02, 1.066161895103083e+00, 1.066161895103081e+00, 1.976912470739551e+01, 1.914796271218592e+03, 3.980365610647719e+02, 8.781343951550364e-01, 2.771210186882519e+02, 2.771210186882505e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
