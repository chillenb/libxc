
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_pw91_mod_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pw91_mod", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.105547994092397e+01, -2.105550702841177e+01, -2.105569632276368e+01, -2.105529189564164e+01, -2.105549401692551e+01, -2.105549401692551e+01, -3.491858169096335e+00, -3.491820413194930e+00, -3.491033093659856e+00, -3.493065046058703e+00, -3.491897327153340e+00, -3.491897327153340e+00, -7.004026183640353e-01, -7.003941746133185e-01, -7.018371675283086e-01, -7.066356206341957e-01, -7.066522179680644e-01, -7.066522179680644e-01, -2.159924456166450e-01, -2.169977372262379e-01, -8.091909539034847e-01, -1.847511139701201e-01, -2.115304323775250e-01, -2.115304323775249e-01, -1.602247203505803e-04, -1.934171532812330e-04, -2.492079904967216e-02, -2.824574909414065e-05, -9.048826109559562e-05, -9.048826109559623e-05, -5.059313004972431e+00, -5.058625673595147e+00, -5.059292524308966e+00, -5.058685576325215e+00, -5.058958553000328e+00, -5.058958553000328e+00, -2.119791445046586e+00, -2.129873014802522e+00, -2.120663704934610e+00, -2.129565164124272e+00, -2.124955378233759e+00, -2.124955378233759e+00, -5.838246603250667e-01, -6.047403663288984e-01, -5.448370271134861e-01, -5.396823104834807e-01, -5.902584987291817e-01, -5.902584987291817e-01, -1.391730142584700e-01, -2.332161444084916e-01, -1.285371814535060e-01, -1.819165197895459e+00, -1.579812793026805e-01, -1.579812793026805e-01, -1.478873695080958e-05, -2.862567296996126e-05, -3.273038827016243e-05, -7.650471904821909e-02, -4.625643122621561e-05, -4.625643122621527e-05, -5.514230802465921e-01, -5.556197289441936e-01, -5.542411262540036e-01, -5.530317807111099e-01, -5.536446710069203e-01, -5.536446710069203e-01, -5.341029579209833e-01, -5.128080159275443e-01, -5.198012029346130e-01, -5.258317261940344e-01, -5.226442303946019e-01, -5.226442303946019e-01, -6.352547591912616e-01, -2.766139039683165e-01, -3.108538181380597e-01, -3.672522842297393e-01, -3.365061215514862e-01, -3.365061215514862e-01, -4.732380742679782e-01, -2.115269290417158e-02, -4.665652244629175e-02, -3.439038143706138e-01, -1.094603420316193e-01, -1.094603420316193e-01, -4.113041054198179e-04, -1.193253948195233e-06, -7.757410032805303e-06, -1.014825781968945e-01, -3.844047008682837e-05, -3.844047008682829e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_pw91_mod_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pw91_mod", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.523190695878441e+01, -2.523187663009844e+01, -2.523201558677616e+01, -2.523195552884070e+01, -2.523234294177510e+01, -2.523243025195751e+01, -2.523111670405739e+01, -2.523086714439247e+01, -2.523197276519359e+01, -2.523147712258830e+01, -2.523197276519359e+01, -2.523147712258830e+01, -4.064200895390798e+00, -4.064327660633005e+00, -4.064236414568659e+00, -4.064366926687089e+00, -4.065136528724552e+00, -4.065396493658523e+00, -4.064233277256683e+00, -4.064490502430959e+00, -4.063449504672111e+00, -4.065364260449861e+00, -4.063449504672111e+00, -4.065364260449861e+00, -7.674833933737421e-01, -7.719651088742784e-01, -7.658137762619996e-01, -7.712896836538825e-01, -7.444323233520439e-01, -7.376317540730062e-01, -7.463732384518191e-01, -7.485609915755490e-01, -7.801717866468344e-01, -7.150016363090212e-01, -7.801717866468344e-01, -7.150016363090212e-01, -1.964821751132250e-01, -2.023090683698254e-01, -1.978140292095137e-01, -2.048540229974362e-01, -8.824997202836338e-01, -9.192782116266305e-01, -1.741438970990604e-01, -1.755278758974485e-01, -2.046292419393041e-01, -1.693618427531325e-01, -2.046292419393040e-01, -1.693618427531324e-01, -5.910439106929164e-04, -7.090356762271691e-04, -7.015619191772014e-04, -8.652495077843032e-04, -8.143093340203934e-02, -9.188461028559906e-02, -1.183708745481157e-04, -1.108609415254819e-04, -4.154592322817440e-04, -1.191739728695424e-04, -4.154592322817496e-04, -1.191739728695403e-04, -6.208727422476954e+00, -6.207184595449654e+00, -6.211258296655784e+00, -6.209629511444013e+00, -6.208868084341540e+00, -6.207268663030084e+00, -6.211039681458701e+00, -6.209489726777236e+00, -6.210023370502754e+00, -6.208412280607046e+00, -6.210023370502754e+00, -6.208412280607046e+00, -2.219827924333318e+00, -2.219712052509826e+00, -2.237580165337123e+00, -2.236937357724434e+00, -2.202689809649335e+00, -2.207468734306633e+00, -2.217912757649038e+00, -2.222902853069583e+00, -2.242844340683942e+00, -2.230541069657682e+00, -2.242844340683942e+00, -2.230541069657682e+00, -6.901007309116161e-01, -6.883388685305033e-01, -7.730897917330692e-01, -7.738080396743348e-01, -6.222211762777368e-01, -6.471145890942027e-01, -6.698190697644234e-01, -6.916790864185608e-01, -7.209311502795548e-01, -6.840010888811924e-01, -7.209311502795548e-01, -6.840010888811925e-01, -1.868553184219752e-01, -1.850876336169046e-01, -2.135548551469649e-01, -2.141916288111927e-01, -1.860319304488106e-01, -1.844914143676081e-01, -2.332044688015148e+00, -2.331054786049417e+00, -1.716962869953919e-01, -1.597295544680579e-01, -1.716962869953919e-01, -1.597295544680579e-01, -5.856314992402624e-05, -6.116028725986573e-05, -1.159875704660424e-04, -1.165528077142780e-04, -1.167885139170186e-04, -1.471356203092094e-04, -1.686849887161851e-01, -1.700299908012622e-01, -8.691537791871942e-05, -2.277248513379607e-04, -8.691537791871606e-05, -2.277248513379643e-04, -7.217868829689307e-01, -7.247061315631055e-01, -7.103783809495202e-01, -7.133707857775279e-01, -7.143720564879440e-01, -7.173651177326158e-01, -7.177203825394552e-01, -7.206371855197372e-01, -7.160501741502513e-01, -7.190042331703804e-01, -7.160501741502513e-01, -7.190042331703804e-01, -7.052343767293829e-01, -7.075946674302364e-01, -5.642783165472463e-01, -5.669887219561691e-01, -5.997986742135620e-01, -6.028483309001785e-01, -6.390490294498469e-01, -6.414595500520133e-01, -6.188139987713011e-01, -6.212765393564289e-01, -6.188139987713011e-01, -6.212765393564289e-01, -8.086401646232817e-01, -8.105408167038124e-01, -2.536289934751333e-01, -2.547407718995377e-01, -2.959721611034506e-01, -2.986804794044602e-01, -3.960597452256356e-01, -3.983974017172056e-01, -3.412024621356179e-01, -3.411261635839260e-01, -3.412024621356179e-01, -3.411261635839261e-01, -5.182378532533128e-01, -5.222656295057757e-01, -7.573980933736743e-02, -7.698807146583850e-02, -1.350247289536434e-01, -1.419337262858437e-01, -3.842371385143621e-01, -3.906218473149302e-01, -1.716951729474767e-01, -1.606019800582321e-01, -1.716951729474767e-01, -1.606019800582322e-01, -1.580872632377966e-03, -1.784027491256868e-03, -4.098125285823633e-06, -5.514573449562541e-06, -2.768103944219160e-05, -3.448108379341118e-05, -1.675597235169345e-01, -1.680969102460836e-01, -1.068864665067663e-04, -1.776852668557327e-04, -1.068864665067628e-04, -1.776852668557334e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_pw91_mod_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pw91_mod", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.439135702971763e-08, 0.000000000000000e+00, -1.439143995011367e-08, -1.439128127119436e-08, 0.000000000000000e+00, -1.439138484916612e-08, -1.439085481202413e-08, 0.000000000000000e+00, -1.439082530920431e-08, -1.439171510178002e-08, 0.000000000000000e+00, -1.439192034636828e-08, -1.439132114224064e-08, 0.000000000000000e+00, -1.439134717671717e-08, -1.439132114224064e-08, 0.000000000000000e+00, -1.439134717671717e-08, -1.893058878429085e-05, 0.000000000000000e+00, -1.893809833419005e-05, -1.893116281958891e-05, 0.000000000000000e+00, -1.893923173505204e-05, -1.895074630518942e-05, 0.000000000000000e+00, -1.895544615933357e-05, -1.890461261306606e-05, 0.000000000000000e+00, -1.891066245788575e-05, -1.894070237538519e-05, 0.000000000000000e+00, -1.892638090080874e-05, -1.894070237538519e-05, 0.000000000000000e+00, -1.892638090080874e-05, -1.169314457436678e-02, 0.000000000000000e+00, -1.172324930287865e-02, -1.169241503736511e-02, 0.000000000000000e+00, -1.172892752466762e-02, -1.170290433468285e-02, 0.000000000000000e+00, -1.165865783098681e-02, -1.135332743144799e-02, 0.000000000000000e+00, -1.137275913823424e-02, -1.168763547144109e-02, 0.000000000000000e+00, -1.101217611231689e-02, -1.168763547144109e-02, 0.000000000000000e+00, -1.101217611231689e-02, -1.365475868570570e+00, 0.000000000000000e+00, -1.261300069824814e+00, -1.357775001687102e+00, 0.000000000000000e+00, -1.235055566967393e+00, -6.780656961134860e-03, 0.000000000000000e+00, -6.377725688470491e-03, -1.970352110584434e+00, 0.000000000000000e+00, -1.909455790278887e+00, -1.171794681195569e+00, 0.000000000000000e+00, -1.578854853370484e+00, -1.171794681195568e+00, 0.000000000000000e+00, -1.578854853370488e+00, 1.298196464954394e+02, 0.000000000000000e+00, 1.292094606267291e+02, 1.375404033066529e+02, 0.000000000000000e+00, 1.377155475737752e+02, 6.615982684619252e+01, 0.000000000000000e+00, 6.273708160478341e+01, 1.140859580645308e+02, 0.000000000000000e+00, 1.108195826280610e+02, 1.282992072452398e+02, 0.000000000000000e+00, 3.173111808330486e+02, 1.282992072452414e+02, 0.000000000000000e+00, 3.173111808330394e+02, -4.348931121965129e-06, 0.000000000000000e+00, -4.352830318236101e-06, -4.352339287828445e-06, 0.000000000000000e+00, -4.356127753684634e-06, -4.349073412306963e-06, 0.000000000000000e+00, -4.352909975078662e-06, -4.351998175369437e-06, 0.000000000000000e+00, -4.355905841885124e-06, -4.350711964011850e-06, 0.000000000000000e+00, -4.354491541045118e-06, -4.350711964011850e-06, 0.000000000000000e+00, -4.354491541045118e-06, -1.405636620081690e-04, 0.000000000000000e+00, -1.405884728690392e-04, -1.377931346920726e-04, 0.000000000000000e+00, -1.379123981258870e-04, -1.404965269484450e-04, 0.000000000000000e+00, -1.405760664681799e-04, -1.381201557224322e-04, 0.000000000000000e+00, -1.381347208589301e-04, -1.389731337518936e-04, 0.000000000000000e+00, -1.391892107412274e-04, -1.389731337518936e-04, 0.000000000000000e+00, -1.391892107412274e-04, -2.413651273668100e-02, 0.000000000000000e+00, -2.441079822745240e-02, -2.189189131810699e-02, 0.000000000000000e+00, -2.193055817836526e-02, -3.406669367115322e-02, 0.000000000000000e+00, -3.019355135243652e-02, -3.666960400462274e-02, 0.000000000000000e+00, -3.204680344035216e-02, -2.130688951062056e-02, 0.000000000000000e+00, -2.586736275731757e-02, -2.130688951062056e-02, 0.000000000000000e+00, -2.586736275731757e-02, 1.484380919569352e-01, 0.000000000000000e+00, -9.018276840196685e-02, -8.861466176011819e-01, 0.000000000000000e+00, -8.766749085682035e-01, 1.878163566406399e+00, 0.000000000000000e+00, 6.988697009377870e-01, -2.679550580374189e-04, 0.000000000000000e+00, -2.684889304703499e-04, -1.857651604947429e+00, 0.000000000000000e+00, -2.763699204970496e+00, -1.857651604947429e+00, 0.000000000000000e+00, -2.763699204970496e+00, 1.582062479252157e+02, 0.000000000000000e+00, 1.369513845921821e+02, 1.379865957923083e+02, 0.000000000000000e+00, 1.273587414154931e+02, 7.938414105041290e+02, 0.000000000000000e+00, 8.886411936521350e+02, 2.167577497920412e+01, 0.000000000000000e+00, 2.117334207765055e+01, 3.906207503548176e+02, 0.000000000000000e+00, 3.925027950050554e+02, 3.906207503548004e+02, 0.000000000000000e+00, 3.925027950050632e+02, -3.478460904063520e-02, 0.000000000000000e+00, -3.439410150992298e-02, -3.101652482940135e-02, 0.000000000000000e+00, -3.060929792829198e-02, -3.171430962482592e-02, 0.000000000000000e+00, -3.131187735578116e-02, -3.264092513343899e-02, 0.000000000000000e+00, -3.223615987048853e-02, -3.211622093447519e-02, 0.000000000000000e+00, -3.171219568203811e-02, -3.211622093447519e-02, 0.000000000000000e+00, -3.171219568203811e-02, -4.033766397296777e-02, 0.000000000000000e+00, -3.978447411684773e-02, -4.099156830633945e-02, 0.000000000000000e+00, -4.047121632100138e-02, -3.878845586256146e-02, 0.000000000000000e+00, -3.829855675146206e-02, -3.740546096514749e-02, 0.000000000000000e+00, -3.694954840268162e-02, -3.807299684214112e-02, 0.000000000000000e+00, -3.758445559968226e-02, -3.807299684214112e-02, 0.000000000000000e+00, -3.758445559968226e-02, -1.794149981229833e-02, 0.000000000000000e+00, -1.791864481421079e-02, -4.866035938330684e-01, 0.000000000000000e+00, -4.803015820372770e-01, -3.117993695124510e-01, 0.000000000000000e+00, -3.055455992170431e-01, -1.566051728423326e-01, 0.000000000000000e+00, -1.538165743790762e-01, -2.222215465897941e-01, 0.000000000000000e+00, -2.233913902497795e-01, -2.222215465897943e-01, 0.000000000000000e+00, -2.233913902497796e-01, -5.671187302424854e-02, 0.000000000000000e+00, -5.565549547886177e-02, 6.279081706729956e+01, 0.000000000000000e+00, 6.248793940544943e+01, 4.145054090814452e+01, 0.000000000000000e+00, 3.901818622125192e+01, -2.059674864758356e-01, 0.000000000000000e+00, -1.965439183231585e-01, 5.594710154720634e+00, 0.000000000000000e+00, 1.697188726085455e+00, 5.594710154720617e+00, 0.000000000000000e+00, 1.697188726085453e+00, 1.058978992424527e+02, 0.000000000000000e+00, 1.085520344580414e+02, 4.711170109899145e+02, 0.000000000000000e+00, 8.383666055030046e+02, 2.974220565985891e+02, 0.000000000000000e+00, 3.178435554927642e+02, 7.181150395182301e+00, 0.000000000000000e+00, 6.373464544969597e+00, 8.123141595129019e+02, 0.000000000000000e+00, 4.049914651688309e+02, 8.123141595128969e+02, 0.000000000000000e+00, 4.049914651688280e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
