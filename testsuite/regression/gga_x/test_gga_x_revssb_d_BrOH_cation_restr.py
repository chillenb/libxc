
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_revssb_d_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_revssb_d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.190563122799535e+01, -2.190565984623190e+01, -2.190585803211610e+01, -2.190543085631655e+01, -2.190564456590397e+01, -2.190564456590397e+01, -3.644991122481578e+00, -3.644934973838639e+00, -3.643729083702162e+00, -3.646521402248194e+00, -3.645011677358101e+00, -3.645011677358101e+00, -7.328440931800482e-01, -7.331923961119716e-01, -7.448006118438447e-01, -7.497792330833876e-01, -7.474050568475998e-01, -7.474050568475998e-01, -2.181223059487123e-01, -2.193032858973075e-01, -8.477025502960833e-01, -1.834034700620091e-01, -1.967976136759246e-01, -1.967976136759246e-01, -1.008740942603457e-02, -1.061650528170962e-02, -5.768214685582374e-02, -5.828249149069491e-03, -7.322518257923439e-03, -7.322518257923439e-03, -5.277886043247426e+00, -5.277798503733838e+00, -5.277890403219049e+00, -5.277812799954943e+00, -5.277835302626809e+00, -5.277835302626809e+00, -2.323645042325080e+00, -2.330332199934252e+00, -2.334724216437927e+00, -2.340563271697900e+00, -2.322031560281105e+00, -2.322031560281105e+00, -5.987981691982919e-01, -6.384195988861217e-01, -5.569384292267833e-01, -5.644839262805613e-01, -6.054246291338869e-01, -6.054246291338869e-01, -1.393958228789194e-01, -2.335989315450240e-01, -1.301884424563406e-01, -1.928968288691563e+00, -1.558319174765389e-01, -1.558319174765389e-01, -4.497161024140004e-03, -5.697587386438761e-03, -4.356232990164985e-03, -9.090655444409934e-02, -5.247926716396687e-03, -5.247926716396687e-03, -5.912552506819895e-01, -5.867511600930159e-01, -5.882450831803112e-01, -5.895602890406328e-01, -5.888940710395452e-01, -5.888940710395452e-01, -5.756254187638086e-01, -5.264270579063834e-01, -5.307796320015067e-01, -5.409845696102594e-01, -5.343928999155467e-01, -5.343928999155467e-01, -6.695551640870238e-01, -2.800527848065781e-01, -3.167324232119409e-01, -3.725232679092722e-01, -3.428322496158525e-01, -3.428322496158525e-01, -4.839847214116342e-01, -5.532060475910547e-02, -7.451823964163944e-02, -3.469085975944276e-01, -1.120729547119320e-01, -1.120729547119320e-01, -1.422951632110189e-02, -1.523262513528477e-03, -3.197182295363085e-03, -1.061787101296551e-01, -4.856027699163561e-03, -4.856027699163556e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_revssb_d_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_revssb_d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.628989174025477e+01, -2.629009316657048e+01, -2.629080577253774e+01, -2.628781265707028e+01, -2.628940702378765e+01, -2.628940702378765e+01, -4.023983226058634e+00, -4.024164276281286e+00, -4.028454459663683e+00, -4.021766999708800e+00, -4.024297282909664e+00, -4.024297282909664e+00, -7.314074783366908e-01, -7.295811781518194e-01, -6.933255203785557e-01, -6.989177642099216e-01, -6.982250885097491e-01, -6.982250885097491e-01, -2.091909542031413e-01, -2.102262833802515e-01, -8.554437429832775e-01, -1.849517987565087e-01, -1.921043006520821e-01, -1.921043006520820e-01, -1.343320133667469e-02, -1.413535792850773e-02, -7.450124631169176e-02, -7.767932325196518e-03, -9.756505217381840e-03, -9.756505217381847e-03, -6.683403260050857e+00, -6.689970448913866e+00, -6.683685750549616e+00, -6.689484254285305e+00, -6.686748669460790e+00, -6.686748669460790e+00, -1.929207831807197e+00, -1.949024447782998e+00, -1.906177511933321e+00, -1.923350098521774e+00, -1.951717474771799e+00, -1.951717474771799e+00, -7.186362968086699e-01, -8.543915708278210e-01, -6.524782700595300e-01, -7.541784133225423e-01, -7.427657134992619e-01, -7.427657134992619e-01, -1.573308794802642e-01, -2.288154813544953e-01, -1.491919453598945e-01, -2.561033188363235e+00, -1.644178114949906e-01, -1.644178114949906e-01, -5.994598327830385e-03, -7.593676052080736e-03, -5.804835020475765e-03, -1.111583083987158e-01, -6.993089101793762e-03, -6.993089101793760e-03, -7.910650960761351e-01, -7.866810191325141e-01, -7.888522236206076e-01, -7.900775974740145e-01, -7.895211227990205e-01, -7.895211227990205e-01, -7.688676002006379e-01, -5.519753651558252e-01, -6.127388178818982e-01, -6.961000282085336e-01, -6.534076159392785e-01, -6.534076159392785e-01, -8.944152346695192e-01, -2.680374516324833e-01, -3.034917248823566e-01, -3.886515028285615e-01, -3.374883508394607e-01, -3.374883508394607e-01, -5.087236145022841e-01, -7.173217719268191e-02, -9.439687790116014e-02, -3.870173886180492e-01, -1.295899606357300e-01, -1.295899606357300e-01, -1.893063917641004e-02, -2.030885325265673e-03, -4.262064431873495e-03, -1.246046557277539e-01, -6.471011867319314e-03, -6.471011867319306e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_revssb_d_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_revssb_d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-7.386943134623921e-09, -7.386646007436754e-09, -7.385644106081096e-09, -7.390058036694627e-09, -7.387699882938141e-09, -7.387699882938141e-09, -1.338151670426927e-05, -1.338000813419591e-05, -1.334359650514914e-05, -1.339644430493428e-05, -1.337841823984008e-05, -1.337841823984008e-05, -9.231445602929416e-03, -9.255998411365970e-03, -9.531799928452208e-03, -9.295277114851461e-03, -9.376299141379102e-03, -9.376299141379102e-03, -6.095547294929483e-01, -6.097629372370152e-01, -5.293162883461043e-03, -8.125795392297949e-01, -7.675424784446816e-01, -7.675424784446818e-01, -2.468645192285434e+00, -2.607470528500744e+00, -1.448257597250061e+00, -2.244554970832158e+00, -2.849155910205965e+00, -2.849155910205307e+00, -1.431152753570500e-06, -1.414148819578589e-06, -1.430441569685109e-06, -1.415429458832049e-06, -1.422494521260367e-06, -1.422494521260367e-06, -1.356459917734263e-04, -1.326561639635867e-04, -1.364362087813715e-04, -1.337920932050584e-04, -1.335852208495440e-04, -1.335852208495440e-04, -1.174444381744168e-02, 4.474930992883299e-04, -1.705126506688918e-02, -3.643376853324056e-04, -9.893467828245611e-03, -9.893467828245611e-03, -9.653149379669408e-01, -3.793298700904508e-01, -1.067721772048230e+00, -1.581552824189278e-05, -1.129517930379949e+00, -1.129517930379949e+00, -2.954908429200017e+00, -2.640164375586264e+00, -1.653528030163774e+01, -1.602478039046491e+00, -7.699333467189739e+00, -7.699333467189739e+00, 3.060952338776535e-03, 1.417373834355485e-03, 2.197085511252246e-03, 2.682569529419469e-03, 2.458987752763610e-03, 2.458987752763610e-03, 3.808260194174036e-03, -2.753679576096220e-02, -2.140897061869176e-02, -8.956025813258470e-03, -1.591353156350420e-02, -1.591353156350420e-02, -7.520789271466639e-05, -2.262111607802179e-01, -1.603929160997273e-01, -9.392550407914689e-02, -1.275540994713157e-01, -1.275540994713157e-01, -3.675601406208430e-02, -1.323366982672476e+00, -1.308979421614137e+00, -1.103270539604513e-01, -1.738669791150924e+00, -1.738669791150919e+00, -1.990636151469453e+00, -1.292461909438966e+01, -6.259258248995236e+00, -1.767798526289921e+00, -9.722789898896300e+00, -9.722789898896266e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
