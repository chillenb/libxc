
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_pbek1_vdw_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbek1_vdw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.096112713529982e+01, -2.096115026911416e+01, -2.096133106747845e+01, -2.096095070029494e+01, -2.096113868668110e+01, -2.096113868668110e+01, -3.478130647064007e+00, -3.478099889811590e+00, -3.477398386074529e+00, -3.479345173793809e+00, -3.478129644003833e+00, -3.478129644003833e+00, -7.008520071061858e-01, -7.009649216319269e-01, -7.063288042155891e-01, -7.105015526992502e-01, -7.008889776577382e-01, -7.008889776577382e-01, -2.207172271387833e-01, -2.212984373320390e-01, -8.143779702337035e-01, -1.877937688673630e-01, -2.208618083888846e-01, -2.208618083888846e-01, -1.883600892795663e-02, -1.972294393288497e-02, -7.719063024743661e-02, -9.062111182020483e-03, -1.951755548656127e-02, -1.951755548656127e-02, -5.035007943568069e+00, -5.034378087727383e+00, -5.034949900970203e+00, -5.034460038195903e+00, -5.034675673778541e+00, -5.034675673778541e+00, -2.126803364694880e+00, -2.135917893480459e+00, -2.129031958214305e+00, -2.136104573185285e+00, -2.130147319206274e+00, -2.130147319206274e+00, -5.745208191430978e-01, -5.954949328593244e-01, -5.473761352725071e-01, -5.477447958152978e-01, -5.920288494270083e-01, -5.920288494270083e-01, -1.544030700983423e-01, -2.450186917976448e-01, -1.514118930868317e-01, -1.811529117586957e+00, -1.682157952436130e-01, -1.682157952436130e-01, -8.742349722813136e-03, -9.989057060126948e-03, -7.487168618753960e-03, -1.035350883589602e-01, -9.101509480962939e-03, -9.101509480962939e-03, -5.586310499559108e-01, -5.614803667138472e-01, -5.604694371750895e-01, -5.596775853023533e-01, -5.600738660876703e-01, -5.600738660876704e-01, -5.397605991878108e-01, -5.180888324212741e-01, -5.240199084013683e-01, -5.295217147246132e-01, -5.265129222161441e-01, -5.265129222161441e-01, -6.253750794669070e-01, -2.880991657352299e-01, -3.193774447881813e-01, -3.681092431600529e-01, -3.414958680650077e-01, -3.414958680650076e-01, -4.704317316075454e-01, -7.212536440912776e-02, -9.500428126170510e-02, -3.372139111824858e-01, -1.280387253422075e-01, -1.280387253422075e-01, -2.206074299412066e-02, -2.736952962161413e-03, -5.198181429556195e-03, -1.220142134872470e-01, -7.735932172660211e-03, -7.735932172660200e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_pbek1_vdw_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbek1_vdw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.508446777277906e+01, -2.508455714944256e+01, -2.508495952494215e+01, -2.508349588367466e+01, -2.508451487650874e+01, -2.508451487650874e+01, -4.020131986761394e+00, -4.020175377732197e+00, -4.021533798684661e+00, -4.020045634216344e+00, -4.020171429167519e+00, -4.020171429167519e+00, -7.442795600858744e-01, -7.429990776821261e-01, -7.109463011840227e-01, -7.171126381659282e-01, -7.438144591211205e-01, -7.438144591211205e-01, -1.987605867143208e-01, -2.008111881998726e-01, -9.103439777138171e-01, -1.689058206753408e-01, -1.993496703363853e-01, -1.993496703363853e-01, -2.493759594138155e-02, -2.609364859646568e-02, -9.487066183920524e-02, -1.206624700030906e-02, -2.582229848557274e-02, -2.582229848557274e-02, -6.189250358188075e+00, -6.192040459956005e+00, -6.189535304360801e+00, -6.191704772772542e+00, -6.190681592450665e+00, -6.190681592450665e+00, -2.145715386816200e+00, -2.163315697697531e+00, -2.136272552075029e+00, -2.149905240903123e+00, -2.170239672319473e+00, -2.170239672319473e+00, -6.765239000308171e-01, -7.665224821004671e-01, -6.398167045250700e-01, -6.921534299468660e-01, -7.070786446940173e-01, -7.070786446940173e-01, -1.566724210091945e-01, -2.148366853284013e-01, -1.521961828547794e-01, -2.331206304411976e+00, -1.584003451066499e-01, -1.584003451066499e-01, -1.164114542364563e-02, -1.329586189636587e-02, -9.966591384869860e-03, -1.185324341409711e-01, -1.211431116689715e-02, -1.211431116689715e-02, -7.371217185014760e-01, -7.257379153004317e-01, -7.297675990623235e-01, -7.329204752347459e-01, -7.313393507715548e-01, -7.313393507715549e-01, -7.146984539677748e-01, -5.686603907590065e-01, -6.083742579529779e-01, -6.478499908442539e-01, -6.276444253152567e-01, -6.276444253152567e-01, -8.024656176922963e-01, -2.551421687621265e-01, -2.970454706254814e-01, -3.920421892646840e-01, -3.389842029735095e-01, -3.389842029735094e-01, -5.106135858486077e-01, -9.015260481318521e-02, -1.127763224019646e-01, -3.781141957942933e-01, -1.341391110095229e-01, -1.341391110095229e-01, -2.916763844135460e-02, -3.648653641815297e-03, -6.926985923443083e-03, -1.276057174844125e-01, -1.029896825763249e-02, -1.029896825763247e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_pbek1_vdw_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbek1_vdw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-7.250941117175258e-09, -7.250892252877380e-09, -7.250591275101842e-09, -7.251393104936675e-09, -7.250916041491990e-09, -7.250916041491990e-09, -9.880910898165249e-06, -9.881080658256079e-06, -9.884113646215304e-06, -9.870509703806731e-06, -9.880829845530260e-06, -9.880829845530260e-06, -6.468800996955194e-03, -6.475264490861209e-03, -6.563062285142302e-03, -6.395708695886652e-03, -6.471264651013135e-03, -6.471264651013135e-03, -7.436838224539287e-01, -7.335127252584672e-01, -3.389892671957509e-03, -1.225069384364280e+00, -7.410751828396631e-01, -7.410751828396631e-01, -7.906342303335954e+00, -7.925436615209850e+00, -3.207743212777567e+00, -5.612908975026514e+00, -8.233256283270551e+00, -8.233256283270551e+00, -2.123060346198719e-06, -2.122950184495356e-06, -2.123041031987382e-06, -2.122955518392227e-06, -2.123015579509091e-06, -2.123015579509091e-06, -7.968680417200734e-05, -7.808275748898372e-05, -7.971150486278257e-05, -7.846417872004431e-05, -7.854447963334302e-05, -7.854447963334302e-05, -1.304451712504226e-02, -1.037593028881494e-02, -1.594062907611040e-02, -1.475945492132395e-02, -1.141560415654093e-02, -1.141560415654093e-02, -1.573061926039339e+00, -4.723223157237978e-01, -1.790208651713612e+00, -1.211902038486899e-04, -1.591840719445901e+00, -1.591840719445901e+00, -5.954586460930368e+00, -5.965894484355110e+00, -1.707616837531281e+01, -3.028169690954606e+00, -8.811869298301394e+00, -8.811869298301394e+00, -1.307358338098417e-02, -1.307472157050149e-02, -1.307432586147300e-02, -1.307419760063477e-02, -1.307430662314064e-02, -1.307430662314063e-02, -1.494821124271591e-02, -2.103893261830034e-02, -1.909854606123066e-02, -1.743366783004661e-02, -1.828134671980069e-02, -1.828134671980070e-02, -8.556830819012880e-03, -2.568152723757785e-01, -1.666972615617582e-01, -8.478762791855460e-02, -1.214845131658857e-01, -1.214845131658858e-01, -3.125968304063188e-02, -2.734688403548410e+00, -2.660495505483683e+00, -1.149881279064961e-01, -2.747765982312067e+00, -2.747765982312072e+00, -5.936648429415195e+00, -1.026789640634951e+01, -8.839529581798491e+00, -3.369484639881202e+00, -1.287016947699462e+01, -1.287016947699460e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
