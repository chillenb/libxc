
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_ityh_optx_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ityh_optx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-5.028738273530304e+01, -5.028750714299160e+01, -5.028813136499936e+01, -5.028627890393946e+01, -5.028723946427894e+01, -5.028723946427894e+01, -7.833565086706942e+00, -7.833569942723598e+00, -7.833883790291152e+00, -7.834908767402728e+00, -7.833770988891895e+00, -7.833770988891895e+00, -1.185759469156211e+00, -1.184109756734593e+00, -1.144108480649604e+00, -1.156588784913642e+00, -1.156677521394977e+00, -1.156677521394977e+00, -1.219682849792716e-01, -1.261339809959173e-01, -1.445454842189787e+00, -6.410131176565589e-02, -1.148064554975390e-01, -1.148064554975390e-01, -8.600634970871553e-06, -1.005105591273495e-05, -1.638482837108061e-03, -1.645114380413135e-06, -4.808108421042589e-06, -4.808108421042587e-06, -1.186404648020041e+01, -1.186482819068336e+01, -1.186409841247532e+01, -1.186478861318119e+01, -1.186443696950517e+01, -1.186443696950517e+01, -4.236681389186812e+00, -4.270236007550491e+00, -4.212658454166088e+00, -4.242335388525342e+00, -4.266859070287717e+00, -4.266859070287717e+00, -9.877955432909620e-01, -1.080545554855477e+00, -8.894850938438832e-01, -9.249775692761384e-01, -1.010270296085517e+00, -1.010270296085517e+00, -2.504402670612414e-02, -1.221693027548008e-01, -2.038579698463660e-02, -4.015133208895542e+00, -3.844023310204737e-02, -3.844023310204737e-02, -7.577556308727970e-07, -1.536788509918729e-06, -6.918485907247972e-07, -6.667527415833670e-03, -1.436136338141732e-06, -1.436136338141733e-06, -9.237163090546321e-01, -9.645319869120973e-01, -9.588097734339482e-01, -9.495247498741266e-01, -9.549035853857473e-01, -9.549035853857473e-01, -8.238031570726436e-01, -7.763501497759320e-01, -8.271683032463584e-01, -8.749904054139315e-01, -8.510884195602237e-01, -8.510884195602237e-01, -1.152891030942372e+00, -1.995505593634575e-01, -2.831094411318876e-01, -4.568916404180694e-01, -3.619906739130060e-01, -3.619906739130060e-01, -6.885321895040087e-01, -1.430739174483948e-03, -3.560003122814899e-03, -4.298120906663178e-01, -1.329551274188072e-02, -1.329551274188073e-02, -2.402808194410835e-05, -2.934466913147073e-08, -2.736767866028547e-07, -1.108701175159846e-02, -1.105272243232942e-06, -1.105272243232939e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_ityh_optx_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ityh_optx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-6.566504486293729e+01, -6.566495352649012e+01, -6.566518053579966e+01, -6.566505213402174e+01, -6.566576088312212e+01, -6.566584275486383e+01, -6.566422478275985e+01, -6.566388600831462e+01, -6.566511839315291e+01, -6.566477589344733e+01, -6.566511839315291e+01, -6.566477589344733e+01, -1.042369237776260e+01, -1.042321506406713e+01, -1.042368515529689e+01, -1.042316575221561e+01, -1.042308158443966e+01, -1.042298497084933e+01, -1.042587526745378e+01, -1.042566749364603e+01, -1.042200577823070e+01, -1.042535650939020e+01, -1.042200577823070e+01, -1.042535650939020e+01, -1.687565618830846e+00, -1.694693067313503e+00, -1.684687560147241e+00, -1.693460871970973e+00, -1.645295926492561e+00, -1.632401405520462e+00, -1.653548377642658e+00, -1.657589956579959e+00, -1.708832636955024e+00, -1.587685742478086e+00, -1.708832636955024e+00, -1.587685742478086e+00, -2.028875270167562e-01, -2.192130111887876e-01, -2.080152534239449e-01, -2.270111245254748e-01, -1.997260483953098e+00, -2.071467658493924e+00, -1.144708216307082e-01, -1.181362185743705e-01, -2.214820161391234e-01, -5.281472799927946e-02, -2.214820161391232e-01, -5.281472799927943e-02, -1.550748896558085e-05, -1.860447716773760e-05, -1.784162282865476e-05, -2.193004700741012e-05, -2.969987747507479e-03, -3.484344132074042e-03, -3.370683490405315e-06, -3.205017146102881e-06, -1.101194029589333e-05, -2.030379801407743e-06, -1.101194029589332e-05, -2.030379801407743e-06, -1.548104225038571e+01, -1.547746976627676e+01, -1.547812608935551e+01, -1.547465557194453e+01, -1.548092407981548e+01, -1.547740413689577e+01, -1.547842271524718e+01, -1.547484817401313e+01, -1.547952594199219e+01, -1.547606004175538e+01, -1.547952594199219e+01, -1.547606004175538e+01, -5.756947020275730e+00, -5.756637435901135e+00, -5.801247264955170e+00, -5.799581069687433e+00, -5.721966706477202e+00, -5.731671463309887e+00, -5.760363096669443e+00, -5.770568891695449e+00, -5.807738727337774e+00, -5.782732644247985e+00, -5.807738727337774e+00, -5.782732644247985e+00, -1.416750234092655e+00, -1.411906719748062e+00, -1.475575171623332e+00, -1.472739224941039e+00, -1.254941729234249e+00, -1.312488927262963e+00, -1.266873628420950e+00, -1.322743059061696e+00, -1.483566525760815e+00, -1.392524502220869e+00, -1.483566525760816e+00, -1.392524502220869e+00, -4.689271204739497e-02, -4.806209566287238e-02, -2.108505698390559e-01, -2.129907814746331e-01, -3.602415397617058e-02, -4.137317978721092e-02, -5.121610399541910e+00, -5.118289379914702e+00, -6.612868098741082e-02, -7.628336369294529e-02, -6.612868098741082e-02, -7.628336369294529e-02, -1.423309202359558e-06, -1.597506542435287e-06, -3.002571493858387e-06, -3.140945524516073e-06, -1.255644591618991e-06, -1.491379659894120e-06, -1.292629206165878e-02, -1.315208564095748e-02, -1.337779042451394e-06, -3.464377542992212e-06, -1.337779042451393e-06, -3.464377542992213e-06, -1.150983510960974e+00, -1.148855830434444e+00, -1.321185257316371e+00, -1.325366862645282e+00, -1.292175935867535e+00, -1.295122274782948e+00, -1.251042523915393e+00, -1.253198768416725e+00, -1.274309898629873e+00, -1.276901906275806e+00, -1.274309898629873e+00, -1.276901906275806e+00, -8.920918982868500e-01, -8.924863861814574e-01, -1.135805890412424e+00, -1.142160382605190e+00, -1.199486241551824e+00, -1.206057819918197e+00, -1.251935498430985e+00, -1.257250458293827e+00, -1.227520781089281e+00, -1.233216024083384e+00, -1.227520781089281e+00, -1.233216024083384e+00, -1.574768268099073e+00, -1.572797645113250e+00, -3.300119798460608e-01, -3.334732657927207e-01, -4.515696883920870e-01, -4.590781220565071e-01, -6.981029562563980e-01, -7.037625818640880e-01, -5.686170812259275e-01, -5.682794681717432e-01, -5.686170812259275e-01, -5.682794681717432e-01, -1.015029455396930e+00, -1.024246943470311e+00, -2.809849079295233e-03, -2.866673115759082e-03, -6.667201557801430e-03, -7.331341049782463e-03, -6.540772939487056e-01, -6.685969705242897e-01, -2.362326160394234e-02, -2.740287597333683e-02, -2.362326160394233e-02, -2.740287597333681e-02, -4.534205397767213e-05, -5.044698152334482e-05, -5.848732513019726e-08, -5.888926627263233e-08, -4.926902378704938e-07, -5.927610326104851e-07, -2.099884658858756e-02, -2.195938696615670e-02, -1.136933731934905e-06, -2.667797286416689e-06, -1.136933731934901e-06, -2.667797286416682e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_ityh_optx_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ityh_optx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-7.787472432221476e-09, 0.000000000000000e+00, -7.787554517022942e-09, -7.787900027989637e-09, 0.000000000000000e+00, -7.787864843428602e-09, -7.788542295026966e-09, 0.000000000000000e+00, -7.788988430423740e-09, -7.783733244561121e-09, 0.000000000000000e+00, -7.782853248501377e-09, -7.787764104279483e-09, 0.000000000000000e+00, -7.784771218845953e-09, -7.787764104279483e-09, 0.000000000000000e+00, -7.784771218845953e-09, -5.431235767014181e-06, 0.000000000000000e+00, -5.445519690691445e-06, -5.432919013931034e-06, 0.000000000000000e+00, -5.448142701487188e-06, -5.483467434532577e-06, 0.000000000000000e+00, -5.496701170393322e-06, -5.392833368055786e-06, 0.000000000000000e+00, -5.407791969496679e-06, -5.429284444002968e-06, 0.000000000000000e+00, -5.451609726115479e-06, -5.429284444002968e-06, 0.000000000000000e+00, -5.451609726115479e-06, -9.090784458469256e-04, 0.000000000000000e+00, -9.988415310463964e-04, -8.814349393756146e-04, 0.000000000000000e+00, -9.885220642934802e-04, -6.025540243286531e-04, 0.000000000000000e+00, -5.261698180518170e-04, -5.497749025783125e-04, 0.000000000000000e+00, -5.753241954232467e-04, -1.149102494133578e-03, 0.000000000000000e+00, -2.820592915219293e-04, -1.149102494133578e-03, 0.000000000000000e+00, -2.820592915219293e-04, -2.119719480832720e-03, 0.000000000000000e+00, -2.462692636602942e-03, -2.352642037135027e-03, 0.000000000000000e+00, -2.776695275832443e-03, -5.898648562428152e-04, 0.000000000000000e+00, -8.130340669569810e-04, -7.047648923593964e-04, 0.000000000000000e+00, -7.202329226488148e-04, -2.089254962319198e-03, 0.000000000000000e+00, -2.465501703480894e-04, -2.089254962319602e-03, 0.000000000000000e+00, -2.465501703475542e-04, -5.802438487681403e-09, 0.000000000000000e+00, -7.324936949885278e-09, -7.372852289661851e-09, 0.000000000000000e+00, -9.661818756963420e-09, -3.980436525971199e-06, 0.000000000000000e+00, -4.990317202246219e-06, -6.934420398943360e-10, 0.000000000000000e+00, -6.307493139630228e-10, -3.667958254058930e-09, 0.000000000000000e+00, -9.757409568680590e-10, -3.667958253098638e-09, 0.000000000000000e+00, -9.757409559967770e-10, -3.951236974475642e-06, 0.000000000000000e+00, -3.952406067524650e-06, -4.012120282947974e-06, 0.000000000000000e+00, -4.011231914543811e-06, -3.954290734471024e-06, 0.000000000000000e+00, -3.954196684379785e-06, -4.006513364605543e-06, 0.000000000000000e+00, -4.007623768808740e-06, -3.982495309893351e-06, 0.000000000000000e+00, -3.981843399905513e-06, -3.982495309893351e-06, 0.000000000000000e+00, -3.981843399905513e-06, -8.563354858500116e-06, 0.000000000000000e+00, -8.563934900697791e-06, -8.724402143551445e-06, 0.000000000000000e+00, -8.723806831267561e-06, -7.755716334374953e-06, 0.000000000000000e+00, -7.986747687903352e-06, -7.883568315650551e-06, 0.000000000000000e+00, -8.112121402692430e-06, -9.311854538416165e-06, 0.000000000000000e+00, -8.739270676814318e-06, -9.311854538416165e-06, 0.000000000000000e+00, -8.739270676814318e-06, -5.667535995494611e-03, 0.000000000000000e+00, -5.751369809867496e-03, -5.411801606405955e-02, 0.000000000000000e+00, -5.718131909355811e-02, -5.537891902042767e-03, 0.000000000000000e+00, -5.875213825845745e-03, -5.010365521404989e-02, 0.000000000000000e+00, -4.244766431780633e-02, -6.498957407804749e-03, 0.000000000000000e+00, -7.070575747754300e-03, -6.498957407804400e-03, 0.000000000000000e+00, -7.070575747754197e-03, -1.510679701700222e-04, 0.000000000000000e+00, -1.606222577122595e-04, -8.658132275069460e-04, 0.000000000000000e+00, -8.752637557823807e-04, -1.135515750291319e-04, 0.000000000000000e+00, -1.371755812664027e-04, -1.056428537606548e-03, 0.000000000000000e+00, -1.061522250882856e-03, -3.087672397734323e-04, 0.000000000000000e+00, -5.218095822305412e-04, -3.087672397734323e-04, 0.000000000000000e+00, -5.218095822305412e-04, -3.082983940156510e-10, 0.000000000000000e+00, -3.112535706521857e-10, -7.184656530773420e-10, 0.000000000000000e+00, -7.044059167806884e-10, -1.280228538783725e-09, 0.000000000000000e+00, -1.791788992652334e-09, -3.701054154771246e-05, 0.000000000000000e+00, -3.644033443871051e-05, -6.925311725156186e-10, 0.000000000000000e+00, -2.420938573200476e-09, -6.925311716659776e-10, 0.000000000000000e+00, -2.420938574572516e-09, -5.283840892005981e-01, 0.000000000000000e+00, -5.497714188467361e-01, -8.060352889966683e-02, 0.000000000000000e+00, -8.261717465521574e-02, -1.303763455184746e-01, 0.000000000000000e+00, -1.344515649022218e-01, -2.184229064291706e-01, 0.000000000000000e+00, -2.243039887158345e-01, -1.660039840580194e-01, 0.000000000000000e+00, -1.708354655318713e-01, -1.660039840580194e-01, 0.000000000000000e+00, -1.708354655318713e-01, -2.084102351995248e+00, 0.000000000000000e+00, -2.089397442803167e+00, -2.866201225609315e-03, 0.000000000000000e+00, -2.902982608620464e-03, -5.733802895541360e-03, 0.000000000000000e+00, -5.860732572514689e-03, -1.613161222487612e-02, 0.000000000000000e+00, -1.622544655298696e-02, -9.137819215388974e-03, 0.000000000000000e+00, -9.171257437822124e-03, -9.137819215388974e-03, 0.000000000000000e+00, -9.171257437822124e-03, -3.796342787234298e-02, 0.000000000000000e+00, -4.089837092399480e-02, -1.244217688071731e-03, 0.000000000000000e+00, -1.263754751172397e-03, -1.960656327538455e-03, 0.000000000000000e+00, -2.051130132030024e-03, -6.175426435054970e-03, 0.000000000000000e+00, -6.216707382966388e-03, -3.432445121802969e-03, 0.000000000000000e+00, -3.494452507744347e-03, -3.432445121803169e-03, 0.000000000000000e+00, -3.494452507744176e-03, -3.519005630487796e-03, 0.000000000000000e+00, -3.622210184750084e-03, -3.364172928553080e-06, 0.000000000000000e+00, -3.462157558221851e-06, -1.098676413569543e-05, 0.000000000000000e+00, -1.284742985415086e-05, -1.323688473261731e-02, 0.000000000000000e+00, -1.380479575248137e-02, -9.173029223642761e-05, 0.000000000000000e+00, -1.400292795061871e-04, -9.173029223643475e-05, 0.000000000000000e+00, -1.400292795061626e-04, -1.926453332771454e-08, 0.000000000000000e+00, -2.268149132405045e-08, -1.344491618642099e-11, 0.000000000000000e+00, -2.403510432458000e-11, -1.422680710761353e-10, 0.000000000000000e+00, -1.938132886050066e-10, -8.673267182391864e-05, 0.000000000000000e+00, -9.073161271464358e-05, -1.149686500382298e-09, 0.000000000000000e+00, -1.773518760348243e-09, -1.149686500918060e-09, 0.000000000000000e+00, -1.773518760200084e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
