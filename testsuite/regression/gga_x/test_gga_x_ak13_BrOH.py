
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_ak13_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ak13", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.156290400465078e+01, -2.156290556815161e+01, -2.156302451866605e+01, -2.156299671331541e+01, -2.156290389315672e+01, -2.156290389315672e+01, -3.634850555309791e+00, -3.634783608389181e+00, -3.633095584043102e+00, -3.636777488821867e+00, -3.634831605966935e+00, -3.634831605966935e+00, -7.690604169357607e-01, -7.701659547941668e-01, -8.071883687718497e-01, -8.100686585996951e-01, -7.694533227055150e-01, -7.694533227055150e-01, -2.918382356990932e-01, -2.877588420209259e-01, -8.660164276618055e-01, -3.459570273266006e-01, -2.904842776846741e-01, -2.904842776846741e-01, -8.121628714224899e-01, -7.970095354290569e-01, -5.679739812332545e-01, -1.174581901904354e+00, -7.897462674839740e-01, -7.897462674839740e-01, -5.125485111139628e+00, -5.123777234923105e+00, -5.125319185018280e+00, -5.123991013082343e+00, -5.124595722008089e+00, -5.124595722008089e+00, -2.425681906536822e+00, -2.428162122074993e+00, -2.439587192034775e+00, -2.441286382703281e+00, -2.409959153419107e+00, -2.409959153419107e+00, -5.951845044643918e-01, -5.978393464126082e-01, -5.689872423226708e-01, -5.525589392355272e-01, -6.095369933314387e-01, -6.095369933314387e-01, -4.251638957264009e-01, -3.880181430372580e-01, -4.040589701039055e-01, -1.818767342633322e+00, -3.640172450571823e-01, -3.640172450571823e-01, -1.164963603721432e+00, -1.116489009635611e+00, -8.653412965858679e-01, -4.667677232770122e-01, -1.011316698609784e+00, -1.011316698609785e+00, -5.585753521104870e-01, -5.631805354625975e-01, -5.613746578742564e-01, -5.600808382669572e-01, -5.607141505134480e-01, -5.607141505134480e-01, -5.396055691766557e-01, -5.567474791432840e-01, -5.464574398166083e-01, -5.399716341154949e-01, -5.425190202787907e-01, -5.425190202787906e-01, -6.282970959365686e-01, -4.004799157463085e-01, -3.980638000930723e-01, -4.031574161332492e-01, -3.950873743240014e-01, -3.950873743240013e-01, -5.089743288975768e-01, -6.330164975194542e-01, -5.310335928562235e-01, -3.579873469304874e-01, -3.940386644940843e-01, -3.940386644940838e-01, -8.433061637818602e-01, -1.347396670970459e+00, -1.194375891380361e+00, -3.731471421352204e-01, -9.399466719880126e-01, -9.399466719880135e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_ak13_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ak13", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.350973515412494e+01, -2.350987183550734e+01, -2.351040849651520e+01, -2.350817171247982e+01, -2.350980784636049e+01, -2.350980784636049e+01, -3.636648187464876e+00, -3.636768124757976e+00, -3.640211695125516e+00, -3.635045834228612e+00, -3.636725367105409e+00, -3.636725367105409e+00, -5.931274710149277e-01, -5.899038100437706e-01, -4.969094881969979e-01, -5.053839425665464e-01, -5.919653968338542e-01, -5.919653968338542e-01, -6.071156174481476e-02, -7.074440382768604e-02, -7.896979078056098e-01, 9.545816487670375e-02, -6.385972527464186e-02, -6.385972527464186e-02, 4.068842631187293e-01, 4.038615044865138e-01, 3.589279821684463e-01, 4.828596125173624e-01, 4.000891425136886e-01, 4.000891425136886e-01, -5.933280678985743e+00, -5.938589876996136e+00, -5.933817519390453e+00, -5.937945900858504e+00, -5.936013391362467e+00, -5.936013391362467e+00, -1.510347352692095e+00, -1.540227327885562e+00, -1.478763672528215e+00, -1.502307465446687e+00, -1.570970604872803e+00, -1.570970604872803e+00, -6.242829423541726e-01, -7.572358916134161e-01, -5.859250792842440e-01, -6.764987037426905e-01, -6.614753983270724e-01, -6.614753983270724e-01, 2.200977524538050e-01, 4.089613912012746e-02, 2.044192285004590e-01, -2.302653203504952e+00, 1.457812725500776e-01, 1.457812725500776e-01, 4.765328124141568e-01, 4.713650175865632e-01, 3.631381806273854e-01, 2.887028312317511e-01, 4.274158555066732e-01, 4.274158555066729e-01, -7.359126963064132e-01, -7.184619449599234e-01, -7.249449905982610e-01, -7.298113094941385e-01, -7.273969421838096e-01, -7.273969421838096e-01, -7.141750233191357e-01, -4.801926280691766e-01, -5.530722992158090e-01, -6.187650966838690e-01, -5.861319357319669e-01, -5.861319357319668e-01, -7.914187844950532e-01, -4.208223220590665e-02, -1.395967567074607e-01, -3.141736585023264e-01, -2.264162496067700e-01, -2.264162496067697e-01, -4.234236535413614e-01, 3.965256201939880e-01, 3.351140885542910e-01, -3.293969397649825e-01, 2.178691735400449e-01, 2.178691735400451e-01, 4.314802252871872e-01, 4.397327484008156e-01, 4.436459477495800e-01, 2.056669355877693e-01, 3.909132761164852e-01, 3.909132761164855e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_ak13_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ak13", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.326980291894118e-08, -1.326964391451025e-08, -1.326888332090086e-08, -1.327148812366460e-08, -1.326971949378072e-08, -1.326971949378072e-08, -1.936279474313106e-05, -1.936242618231399e-05, -1.934909063013976e-05, -1.935563041269069e-05, -1.936227526221272e-05, -1.936227526221272e-05, -1.470307591294842e-02, -1.476659921445152e-02, -1.647242826616629e-02, -1.596567742672960e-02, -1.472621140063883e-02, -1.472621140063883e-02, -2.556607593168468e+00, -2.435361714831858e+00, -7.050292287614180e-03, -8.370015754251051e+00, -2.519665951738761e+00, -2.519665951738761e+00, -6.651480462438789e+04, -5.708451416463574e+04, -4.447812406382042e+02, -6.941537049591386e+05, -5.948825990279589e+04, -5.948825990279589e+04, -3.648660179934921e-06, -3.642972186488710e-06, -3.648078241974453e-06, -3.643655726201585e-06, -3.645747697163194e-06, -3.645747697163194e-06, -1.990829454841184e-04, -1.935969451771594e-04, -2.013131417328070e-04, -1.969645551000154e-04, -1.925411566417704e-04, -1.925411566417704e-04, -2.467368198348357e-02, -1.506422320890835e-02, -3.058648334652167e-02, -2.329413578609289e-02, -2.097990712840306e-02, -2.097990712840306e-02, -2.516290045717840e+01, -2.357300879486203e+00, -2.677636394865444e+01, -1.762001468860170e-04, -1.524829946777960e+01, -1.524829946777960e+01, -7.889057076974559e+05, -5.110498321034983e+05, -1.589148705622614e+06, -1.413751219975197e+02, -7.439313741024185e+05, -7.439313741024182e+05, -1.499534125282152e-02, -1.852259243458281e-02, -1.757262131332848e-02, -1.665472978174081e-02, -1.713931085496323e-02, -1.713931085496323e-02, -1.589845792655586e-02, -4.515948907589593e-02, -3.711860258299122e-02, -3.032430024527268e-02, -3.373128074355446e-02, -3.373128074355447e-02, -1.263309359469334e-02, -9.793400040757366e-01, -5.062807299332909e-01, -1.917479955509056e-01, -3.136392715950276e-01, -3.136392715950277e-01, -6.840292447144054e-02, -5.640509200251448e+02, -1.997199914483699e+02, -2.378734779922071e-01, -5.583197036037802e+01, -5.583197036037799e+01, -3.744346863943763e+04, -3.721662177735283e+07, -4.588374201760051e+06, -6.754322651543320e+01, -1.355769770536712e+06, -1.355769770536718e+06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
