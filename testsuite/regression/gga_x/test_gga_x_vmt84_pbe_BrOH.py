
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_vmt84_pbe_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_vmt84_pbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.096139800881329e+01, -2.096142113978223e+01, -2.096160193100124e+01, -2.096122161028950e+01, -2.096140955864764e+01, -2.096140955864764e+01, -3.478180011222621e+00, -3.478149252837286e+00, -3.477447719155712e+00, -3.479394567925750e+00, -3.478179007790310e+00, -3.478179007790310e+00, -7.008573905037483e-01, -7.009700546340311e-01, -7.063229934203789e-01, -7.104965339122117e-01, -7.008942718606131e-01, -7.008942718606131e-01, -2.206848846874529e-01, -2.212710796368325e-01, -8.143889978082852e-01, -1.875750845066028e-01, -2.208310996218991e-01, -2.208310996218991e-01, -8.965766389061554e-03, -9.426282408684677e-03, -7.009263851381436e-02, -3.544195692714020e-03, -9.327389568427352e-03, -9.327389568427352e-03, -5.035062525756179e+00, -5.034432391275784e+00, -5.035004455435666e+00, -5.034514376005645e+00, -5.034730112287620e+00, -5.034730112287620e+00, -2.126787979430171e+00, -2.135905818411246e+00, -2.129011506357696e+00, -2.136086929647786e+00, -2.130140029252242e+00, -2.130140029252242e+00, -5.745287081141965e-01, -5.954981694945910e-01, -5.473837864510117e-01, -5.477490981479928e-01, -5.920365704267917e-01, -5.920365704267917e-01, -1.535748720341445e-01, -2.448854613127726e-01, -1.506809137555923e-01, -1.811539028378070e+00, -1.678336012883043e-01, -1.678336012883043e-01, -3.383040255925454e-03, -4.105065578080284e-03, -3.045650947310915e-03, -1.010180128750332e-01, -3.746835235919931e-03, -3.746835235919932e-03, -5.586320073273369e-01, -5.614830899868286e-01, -5.604715538378656e-01, -5.596792125082176e-01, -5.600757401936297e-01, -5.600757401936297e-01, -5.397612211277090e-01, -5.180951677823682e-01, -5.240273136116405e-01, -5.295276816197265e-01, -5.265198455812530e-01, -5.265198455812530e-01, -6.253787490346641e-01, -2.880335568959686e-01, -3.193537499809907e-01, -3.681122634543655e-01, -3.414907870962420e-01, -3.414907870962419e-01, -4.704369207386562e-01, -6.188213702947747e-02, -9.078578958190080e-02, -3.372185278513987e-01, -1.270521899707558e-01, -1.270521899707558e-01, -1.057698377225082e-02, -1.864629652675362e-04, -1.433297129200200e-03, -1.210927429116585e-01, -3.096012351483678e-03, -3.096012351483672e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_vmt84_pbe_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_vmt84_pbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.508446740342306e+01, -2.508455676628781e+01, -2.508495910018484e+01, -2.508349568453869e+01, -2.508451449970889e+01, -2.508451449970889e+01, -4.020177764120472e+00, -4.020221120599932e+00, -4.021578599809271e+00, -4.020092072997564e+00, -4.020217188980353e+00, -4.020217188980353e+00, -7.443418070041966e-01, -7.430631883644178e-01, -7.110801999370773e-01, -7.172425603887604e-01, -7.438773722484417e-01, -7.438773722484417e-01, -1.989502969971871e-01, -2.009783903921373e-01, -9.103719496105254e-01, -1.698689969928731e-01, -1.995320266609284e-01, -1.995320266609284e-01, -1.295397565368556e-02, -1.349847396001179e-02, -1.198053441944553e-01, -7.034164626651731e-03, -1.335919244693048e-02, -1.335919244693048e-02, -6.189224388586179e+00, -6.192014151801065e+00, -6.189509300498042e+00, -6.191678505576199e+00, -6.190655447056024e+00, -6.190655447056024e+00, -2.146106391327056e+00, -2.163688704845002e+00, -2.136692933041244e+00, -2.150310586093510e+00, -2.170583490609530e+00, -2.170583490609530e+00, -6.765268348644556e-01, -7.665191343058919e-01, -6.398210919150500e-01, -6.921498199947350e-01, -7.070789570777226e-01, -7.070789570777226e-01, -1.600636738399352e-01, -2.154656452892016e-01, -1.551993788721377e-01, -2.331196078049707e+00, -1.600180477556333e-01, -1.600180477556333e-01, -6.810610119107447e-03, -7.601187450567889e-03, -5.723147284491528e-03, -1.283763413513567e-01, -6.920320527419471e-03, -6.920320527419478e-03, -7.371205187720493e-01, -7.257349905016504e-01, -7.297651838428520e-01, -7.329185377508708e-01, -7.313371653706976e-01, -7.313371653706976e-01, -7.146976575408291e-01, -5.686864277925034e-01, -6.083800313139928e-01, -6.478475880960616e-01, -6.276449868745538e-01, -6.276449868745538e-01, -8.024619356482592e-01, -2.554935968518838e-01, -2.972132833365606e-01, -3.920734370234259e-01, -3.390616956211840e-01, -3.390616956211840e-01, -5.106426449141652e-01, -1.229569296766648e-01, -1.287669004705819e-01, -3.781249829470050e-01, -1.381359578578241e-01, -1.381359578578241e-01, -1.503788511681921e-02, -1.239590351914970e-03, -4.183897094984229e-03, -1.313410662536516e-01, -5.953278288476594e-03, -5.953278288476587e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_vmt84_pbe_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_vmt84_pbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-7.251856527465012e-09, -7.251807701041474e-09, -7.251506818053211e-09, -7.252308029080437e-09, -7.251831472375483e-09, -7.251831472375483e-09, -9.881231656683452e-06, -9.881401994071210e-06, -9.884450773342361e-06, -9.870819333439040e-06, -9.881150895502666e-06, -9.881150895502666e-06, -6.466927969118602e-03, -6.473329331099392e-03, -6.559034849172927e-03, -6.391913489295097e-03, -6.469369321552546e-03, -6.469369321552546e-03, -7.418712372100605e-01, -7.319276234597358e-01, -3.389636373485885e-03, -1.206205224435164e+00, -7.393356861614325e-01, -7.393356861614325e-01, 4.463081235043580e+01, 3.620366783336070e+01, 1.049904659637449e+01, 7.821020327445775e+02, 3.777359484768856e+01, 3.777359484768856e+01, -2.123460357604339e-06, -2.123352830361257e-06, -2.123441305538116e-06, -2.123357840582470e-06, -2.123416953953975e-06, -2.123416953953975e-06, -7.963928025331910e-05, -7.803837583040778e-05, -7.966070617516872e-05, -7.841598439568155e-05, -7.850303147109573e-05, -7.850303147109573e-05, -1.304562240629419e-02, -1.037882478271949e-02, -1.594165866532270e-02, -1.476306867541069e-02, -1.141698888639122e-02, -1.141698888639122e-02, -1.429322795305050e+00, -4.689163366028047e-01, -1.646886469472988e+00, -1.212239561275740e-04, -1.540445231375438e+00, -1.540445231375438e+00, 8.938715268344680e+02, 5.547884470286606e+02, 1.741421850363229e+03, -9.798379239650703e-01, 8.062254260034770e+02, 8.062254260034796e+02, -1.307777696459692e-02, -1.307846419112043e-02, -1.307823319469494e-02, -1.307823002011557e-02, -1.307827677485076e-02, -1.307827677485076e-02, -1.495308866698913e-02, -2.103590233568670e-02, -1.909941308705285e-02, -1.743677184789866e-02, -1.828347776566657e-02, -1.828347776566657e-02, -8.559169939746375e-03, -2.559414227942018e-01, -1.664391661428967e-01, -8.476426074835174e-02, -1.213965223632850e-01, -1.213965223632850e-01, -3.125374885590020e-02, 1.839058861122052e+01, 1.477890664502342e+00, -1.149806797117558e-01, -2.348720574096621e+00, -2.348720574096630e+00, 2.250716175457673e+01, 1.649210854311068e+04, 5.121738935090548e+03, -2.892686207382147e+00, 1.505091634356681e+03, 1.505091634356684e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
