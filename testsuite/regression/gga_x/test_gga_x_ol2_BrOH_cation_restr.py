
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_ol2_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ol2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.120627074744556e+01, -2.120629675899375e+01, -2.120648379723160e+01, -2.120609528642761e+01, -2.120628872273443e+01, -2.120628872273443e+01, -3.513366667130043e+00, -3.513334413601769e+00, -3.512673862173856e+00, -3.514488271963375e+00, -3.513412688243650e+00, -3.513412688243650e+00, -6.993025035467287e-01, -6.991113049609937e-01, -6.957178415063375e-01, -7.007269291341381e-01, -6.990510537539444e-01, -6.990510537539444e-01, -2.112357504730946e-01, -2.119239576792730e-01, -8.092981484451068e-01, -1.924317310681713e-01, -1.961606541747100e-01, -1.961606541747101e-01, -1.206190628791199e+00, -1.115525086520344e+00, -2.963160561229051e-01, -2.185155826481060e+00, -1.544279733400519e+00, -1.544279733400517e+00, -5.083841596759133e+00, -5.082635074965213e+00, -5.083799981763003e+00, -5.082734881818379e+00, -5.083224353946008e+00, -5.083224353946008e+00, -2.098167058359751e+00, -2.109351059320291e+00, -2.096311924355662e+00, -2.106167721410718e+00, -2.105262169154571e+00, -2.105262169154571e+00, -5.879249802493395e-01, -5.947284632650185e-01, -5.479482041040943e-01, -5.363443565782536e-01, -5.938268676205224e-01, -5.938268676205224e-01, -1.941462145442544e-01, -2.342350907090462e-01, -1.926502758855933e-01, -1.784718733645192e+00, -1.785261643909483e-01, -1.785261643909483e-01, -2.466285660308786e+00, -2.060498332505267e+00, -1.075929777865357e+00, -2.002034940965138e-01, -1.309203503617759e+00, -1.309203503617761e+00, -5.088496378293230e-01, -5.453092368217386e-01, -5.374888925675403e-01, -5.281059519352468e-01, -5.332408125783288e-01, -5.332408125783288e-01, -4.594968997159676e-01, -5.123200619863622e-01, -5.227136182950217e-01, -5.290024033340324e-01, -5.263915312521532e-01, -5.263915312521532e-01, -6.269967051466666e-01, -2.712193404537350e-01, -3.035358740478856e-01, -3.656597996018823e-01, -3.311441546110636e-01, -3.311441546110635e-01, -4.725146010296381e-01, -3.204517066799910e-01, -2.517541253891429e-01, -3.446739576549003e-01, -1.724853345945249e-01, -1.724853345945249e-01, -9.549243945243410e-01, -3.475921387423967e+00, -2.381334534983480e+00, -1.759750918030205e-01, -1.258841844112724e+00, -1.258841844112723e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_ol2_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ol2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.529853008720436e+01, -2.529856885962251e+01, -2.529881398280859e+01, -2.529823551422234e+01, -2.529852832542031e+01, -2.529852832542031e+01, -4.164240633157937e+00, -4.164228306992933e+00, -4.164041780130244e+00, -4.165152447792822e+00, -4.164326235702259e+00, -4.164326235702259e+00, -8.071024833185205e-01, -8.061299569824190e-01, -7.798366649537576e-01, -7.866669555705117e-01, -7.854944430591050e-01, -7.854944430591050e-01, -1.828799933981492e-01, -1.884583182208618e-01, -9.415300532249854e-01, -9.981676633318737e-02, -1.369073070128183e-01, -1.369073070128183e-01, 1.591556008743387e+00, 1.469792542752954e+00, 2.985553904603663e-01, 2.903892867293372e+00, 2.046918354082906e+00, 2.046918354082903e+00, -6.068717528300193e+00, -6.066982258978758e+00, -6.068656059779713e+00, -6.067124467937218e+00, -6.067832890184416e+00, -6.067832890184416e+00, -2.334698704117522e+00, -2.353735653054999e+00, -2.317192526750936e+00, -2.334207572225611e+00, -2.353474112022415e+00, -2.353474112022415e+00, -6.995115404467461e-01, -6.967769979983574e-01, -6.498084944967195e-01, -6.348976072935374e-01, -7.078970980846366e-01, -7.078970980846366e-01, 9.372479022992297e-03, -1.562027636733792e-01, 2.584858349675791e-02, -2.086111815249032e+00, -5.345948550626944e-02, -5.345948550626944e-02, 3.280935843145467e+00, 2.737899211190172e+00, 1.427361890742336e+00, 1.109502039859019e-01, 1.736917443352413e+00, 1.736917443352415e+00, -5.607001343244729e-01, -6.376381809949427e-01, -6.212994675190552e-01, -6.014198980867415e-01, -6.123180286212772e-01, -6.123180286212772e-01, -4.738984026909163e-01, -5.926084589166536e-01, -6.183126849729839e-01, -6.317108744801277e-01, -6.269531083189805e-01, -6.269531083189805e-01, -7.371130216668593e-01, -2.269281810512177e-01, -2.966153009136043e-01, -4.176336264138972e-01, -3.561785031588354e-01, -3.561785031588353e-01, -5.454809083584269e-01, 3.348407797652060e-01, 2.099085139364812e-01, -4.032942038769218e-01, 3.203066454169350e-02, 3.203066454169350e-02, 1.249674843159431e+00, 4.632039705977151e+00, 3.169819597232355e+00, 4.858663238627202e-02, 1.670417274903253e+00, 1.670417274903253e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_ol2_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ol2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-7.536019520611731e-09, -7.536127760076379e-09, -7.536274555417786e-09, -7.534671602044444e-09, -7.535558841641060e-09, -7.535558841641060e-09, -8.326105510696630e-06, -8.327224920424698e-06, -8.352423528259088e-06, -8.302474873638057e-06, -8.326644777430240e-06, -8.326644777430240e-06, -4.469196439676086e-03, -4.464351111890955e-03, -4.432862572096082e-03, -4.307923247495155e-03, -4.349872322494551e-03, -4.349872322494551e-03, -7.324409963857667e-01, -6.935417189772136e-01, -2.553568103571785e-03, -2.126712967659234e+00, -1.353580491259366e+00, -1.353580491259365e+00, -4.728244627396617e+05, -3.852506137887900e+05, -4.159199305867596e+02, -4.250081816087337e+06, -1.704675423769749e+06, -1.704675423769749e+06, -2.870971282345836e-06, -2.892003145961978e-06, -2.871814669208810e-06, -2.890377555115296e-06, -2.881650035572399e-06, -2.881650035572399e-06, -5.363063858070759e-05, -5.247303480495671e-05, -5.394747602078329e-05, -5.288697889193968e-05, -5.287100474163691e-05, -5.287100474163691e-05, -1.148146929300457e-02, -3.206379081608053e-02, -1.419583754803762e-02, -3.584427131222000e-02, -1.178884784184649e-02, -1.178884784184649e-02, -9.036107391008436e+00, -7.086713727594038e-01, -1.232633870672655e+01, -4.187428827359988e-04, -4.790475232494952e+00, -4.790475232494952e+00, -1.199233259775606e+07, -4.653428161185479e+06, -1.361215079351594e+07, -6.009356001008717e+01, -6.462872477059717e+06, -6.462872477059717e+06, -1.700700848373262e-01, -4.760841645140485e-02, -6.500819449359256e-02, -9.159869576712119e-02, -7.621856654697302e-02, -7.621856654697302e-02, -4.862597417566686e-01, -1.560280178315637e-02, -1.651996673024883e-02, -2.249146776339852e-02, -1.844473686773700e-02, -1.844473686773700e-02, -2.370259928300180e-02, -2.840356962539974e-01, -1.424307129723145e-01, -5.869504628133757e-02, -8.844296179032352e-02, -8.844296179032356e-02, -2.145224390530097e-02, -4.955764630480704e+02, -1.434969460432156e+02, -7.971778722048406e-02, -2.290488919139523e+01, -2.290488919139522e+01, -1.191831896491352e+05, -9.114553528631526e+08, -4.695145665965430e+07, -2.943860760875293e+01, -8.815994052947713e+06, -8.815994052947745e+06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
