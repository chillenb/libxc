
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_bayesian_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_bayesian", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.082637182736189e+01, -2.082640033284339e+01, -2.082659243509637e+01, -2.082616699188089e+01, -2.082638061920223e+01, -2.082638061920223e+01, -3.452035030230155e+00, -3.451997934300709e+00, -3.451225249207441e+00, -3.453224655383044e+00, -3.452074040803198e+00, -3.452074040803198e+00, -6.932957228493695e-01, -6.933368301865483e-01, -6.963915411169967e-01, -7.010533584105019e-01, -7.016379549332431e-01, -7.016379549332431e-01, -2.185262892105450e-01, -2.191729259542792e-01, -8.005843266058259e-01, -1.919623702580315e-01, -2.157993657196359e-01, -2.157993657196359e-01, -1.648934001670828e-02, -1.730822017871800e-02, -7.978194171388003e-02, -9.710713423213682e-03, -1.337347670836400e-02, -1.337347670836400e-02, -5.009943029867017e+00, -5.009432153655990e+00, -5.009929720487236e+00, -5.009478529587288e+00, -5.009678269032477e+00, -5.009678269032477e+00, -2.104670862606902e+00, -2.114161376163292e+00, -2.106766192602195e+00, -2.115121119703432e+00, -2.108947470188666e+00, -2.108947470188666e+00, -5.772507840018313e-01, -6.011519964757843e-01, -5.386327253860663e-01, -5.356736708498446e-01, -5.837480203854981e-01, -5.837480203854981e-01, -1.585096780180603e-01, -2.393694643037612e-01, -1.502006669403455e-01, -1.808859100448808e+00, -1.683136631054882e-01, -1.683136631054882e-01, -7.532797325336606e-03, -9.488153038014587e-03, -7.222745186926933e-03, -1.128564165691735e-01, -9.057154664902487e-03, -9.057154664902492e-03, -5.504108250614019e-01, -5.524485101979044e-01, -5.516998921952876e-01, -5.511003424170199e-01, -5.513963954997202e-01, -5.513963954997202e-01, -5.340473718094325e-01, -5.075205700034463e-01, -5.138721064548220e-01, -5.204686399176142e-01, -5.168106330563391e-01, -5.168106330563391e-01, -6.312081790154866e-01, -2.804424820185203e-01, -3.119537798361082e-01, -3.638213471049535e-01, -3.351005225639571e-01, -3.351005225639571e-01, -4.684269401831476e-01, -7.733761366743611e-02, -9.828261709519302e-02, -3.401102480679340e-01, -1.303960732446510e-01, -1.303960732446510e-01, -2.287529278248327e-02, -2.579255360856303e-03, -5.378462612868338e-03, -1.253555352401525e-01, -8.329561832641894e-03, -8.329561832641885e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_bayesian_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_bayesian", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.511122641231700e+01, -2.511119729457511e+01, -2.511134788214865e+01, -2.511128551475491e+01, -2.511169854809865e+01, -2.511179861650072e+01, -2.511032773319573e+01, -2.511005108764435e+01, -2.511130077532509e+01, -2.511072171401676e+01, -2.511130077532509e+01, -2.511072171401676e+01, -4.020770541098713e+00, -4.021006446088855e+00, -4.020819518408440e+00, -4.021066160650427e+00, -4.022116642383989e+00, -4.022480442599784e+00, -4.020518076397733e+00, -4.020894155141691e+00, -4.019983625133579e+00, -4.022116996333741e+00, -4.019983625133579e+00, -4.022116996333741e+00, -7.488731481533419e-01, -7.544084293725941e-01, -7.468524358143893e-01, -7.536130376096929e-01, -7.211464630412973e-01, -7.128529046211907e-01, -7.221753438562367e-01, -7.248670054547134e-01, -7.642035819875066e-01, -6.839159164013823e-01, -7.642035819875066e-01, -6.839159164013823e-01, -1.841880447109623e-01, -1.902333133794395e-01, -1.857778407047582e-01, -1.930058882447953e-01, -8.618015320804686e-01, -9.031266526070512e-01, -1.554660971819997e-01, -1.570605704606966e-01, -1.919897557655851e-01, -1.322100634255026e-01, -1.919897557655850e-01, -1.322100634255026e-01, -2.030351634460987e-02, -2.145487032522495e-02, -2.115393463504383e-02, -2.250571940151266e-02, -8.317812869884862e-02, -8.583325954323770e-02, -1.268657658126432e-02, -1.249146215437465e-02, -1.829672538437205e-02, -1.066098100523124e-02, -1.829672538437205e-02, -1.066098100523125e-02, -6.204311160855124e+00, -6.202748324584086e+00, -6.207358839804766e+00, -6.205692760077727e+00, -6.204478308902294e+00, -6.202847956072455e+00, -6.207093432285801e+00, -6.205522868788099e+00, -6.205873971824034e+00, -6.204227544597777e+00, -6.205873971824034e+00, -6.204227544597777e+00, -2.143853340517892e+00, -2.143737383949639e+00, -2.162512309841647e+00, -2.161855009440380e+00, -2.123409832539038e+00, -2.129155678925930e+00, -2.139385110987891e+00, -2.145333044244339e+00, -2.169888099679802e+00, -2.155390277432969e+00, -2.169888099679802e+00, -2.155390277432969e+00, -6.847558515034962e-01, -6.830437363255036e-01, -7.759009862169244e-01, -7.766614970026159e-01, -6.151997534332456e-01, -6.410264117808059e-01, -6.717228321630667e-01, -6.935650829151481e-01, -7.170510577162010e-01, -6.798048294213223e-01, -7.170510577162009e-01, -6.798048294213223e-01, -1.355381378277430e-01, -1.355583994321857e-01, -1.961485571527826e-01, -1.968648979665968e-01, -1.286291434984775e-01, -1.314656252823117e-01, -2.340800742451822e+00, -2.339812576138771e+00, -1.391416426406871e-01, -1.376190034103814e-01, -1.391416426406871e-01, -1.376190034103814e-01, -9.615299690849635e-03, -9.991533555853881e-03, -1.220067968592410e-02, -1.238876412234553e-02, -9.044260242727881e-03, -9.524131592298011e-03, -1.055851847502681e-01, -1.064336324780680e-01, -9.322921255645142e-03, -1.254533443628379e-02, -9.322921255645151e-03, -1.254533443628380e-02, -7.248471680006493e-01, -7.277700120496544e-01, -7.130260063570129e-01, -7.160506407614163e-01, -7.172298193712546e-01, -7.202467532150074e-01, -7.207065553838250e-01, -7.236426981433051e-01, -7.189741946048250e-01, -7.219493563565629e-01, -7.189741946048250e-01, -7.219493563565629e-01, -7.074506840661862e-01, -7.098047290737133e-01, -5.513867942767621e-01, -5.542459609817436e-01, -5.924886034588981e-01, -5.957446426847972e-01, -6.377702059309951e-01, -6.402444358742910e-01, -6.146072680116632e-01, -6.171406433876414e-01, -6.146072680116632e-01, -6.171406433876414e-01, -8.114099638766564e-01, -8.133945907643320e-01, -2.375134344537002e-01, -2.386610933338584e-01, -2.803700637903264e-01, -2.831762188689119e-01, -3.852678782122781e-01, -3.876710662687596e-01, -3.271817015834225e-01, -3.271876107795822e-01, -3.271817015834224e-01, -3.271876107795822e-01, -5.059205128936258e-01, -5.102224179856297e-01, -8.296793789331877e-02, -8.330312751594515e-02, -9.814770729857153e-02, -9.952670025604800e-02, -3.771709305209653e-01, -3.838623491570615e-01, -1.145173359568830e-01, -1.135624376080631e-01, -1.145173359568830e-01, -1.135624376080630e-01, -2.811855896949662e-02, -2.898817102536249e-02, -3.401652683710188e-03, -3.398208148988886e-03, -6.805609372601629e-03, -7.216385590150578e-03, -1.108360313058294e-01, -1.118426219691549e-01, -8.764743223919496e-03, -1.156391151124120e-02, -8.764743223919486e-03, -1.156391151124119e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_bayesian_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_bayesian", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.345560664377267e-08, 0.000000000000000e+00, -1.345567811552344e-08, -1.345545988338844e-08, 0.000000000000000e+00, -1.345557148231882e-08, -1.345491978959708e-08, 0.000000000000000e+00, -1.345481732791359e-08, -1.345657896643076e-08, 0.000000000000000e+00, -1.345693153178397e-08, -1.345552267735625e-08, 0.000000000000000e+00, -1.345603447826928e-08, -1.345552267735625e-08, 0.000000000000000e+00, -1.345603447826928e-08, -1.862125918105324e-05, 0.000000000000000e+00, -1.862507503729994e-05, -1.862137704637100e-05, 0.000000000000000e+00, -1.862551473756370e-05, -1.862746616017969e-05, 0.000000000000000e+00, -1.862862102198760e-05, -1.860486369774349e-05, 0.000000000000000e+00, -1.860690636179399e-05, -1.863261428661782e-05, 0.000000000000000e+00, -1.861080333261989e-05, -1.863261428661782e-05, 0.000000000000000e+00, -1.861080333261989e-05, -1.234316661072926e-02, 0.000000000000000e+00, -1.229995843160361e-02, -1.236704632584553e-02, 0.000000000000000e+00, -1.231483591443099e-02, -1.266444986596379e-02, 0.000000000000000e+00, -1.270726726178828e-02, -1.233028359279404e-02, 0.000000000000000e+00, -1.232175047423472e-02, -1.214276822207436e-02, 0.000000000000000e+00, -1.233109572644095e-02, -1.214276822207436e-02, 0.000000000000000e+00, -1.233109572644095e-02, -1.613861369046353e+00, 0.000000000000000e+00, -1.476516982876001e+00, -1.595491984632920e+00, 0.000000000000000e+00, -1.437305520527967e+00, -7.134955002226549e-03, 0.000000000000000e+00, -6.535276255116657e-03, -2.759504378827499e+00, 0.000000000000000e+00, -2.651124913938350e+00, -1.381193369883383e+00, 0.000000000000000e+00, -5.482548259952305e+00, -1.381193369883383e+00, 0.000000000000000e+00, -5.482548259952303e+00, -3.224663834679333e+02, 0.000000000000000e+00, -2.996207067818235e+02, -3.183286932424689e+02, 0.000000000000000e+00, -2.941275234018005e+02, -2.699097041434830e+01, 0.000000000000000e+00, -2.516340961185530e+01, -5.207599889411626e+02, 0.000000000000000e+00, -5.194011028095767e+02, -3.644350651828654e+02, 0.000000000000000e+00, -1.316253283749777e+03, -3.644350651828753e+02, 0.000000000000000e+00, -1.316253283749671e+03, -3.852299715943606e-06, 0.000000000000000e+00, -3.855975556534838e-06, -3.849837883297405e-06, 0.000000000000000e+00, -3.853596503576840e-06, -3.852146398483164e-06, 0.000000000000000e+00, -3.855881857585049e-06, -3.850034679283656e-06, 0.000000000000000e+00, -3.853721106467999e-06, -3.851055437706652e-06, 0.000000000000000e+00, -3.854786063986127e-06, -3.851055437706652e-06, 0.000000000000000e+00, -3.854786063986127e-06, -1.534962480748538e-04, 0.000000000000000e+00, -1.535241721484679e-04, -1.501668128558753e-04, 0.000000000000000e+00, -1.503040833509629e-04, -1.542126657805432e-04, 0.000000000000000e+00, -1.540720233500847e-04, -1.513496465942754e-04, 0.000000000000000e+00, -1.511415489468962e-04, -1.509821476805594e-04, 0.000000000000000e+00, -1.517535287266045e-04, -1.509821476805594e-04, 0.000000000000000e+00, -1.517535287266045e-04, -2.320954745765751e-02, 0.000000000000000e+00, -2.346285579432046e-02, -1.686065154202909e-02, 0.000000000000000e+00, -1.680632054698226e-02, -3.364925253261491e-02, 0.000000000000000e+00, -2.942378623248250e-02, -2.965773962792638e-02, 0.000000000000000e+00, -2.604749077020926e-02, -2.004582927546627e-02, 0.000000000000000e+00, -2.451695291510201e-02, -2.004582927546628e-02, 0.000000000000000e+00, -2.451695291510201e-02, -5.117941065447295e+00, 0.000000000000000e+00, -5.095121561636689e+00, -1.120842021649141e+00, 0.000000000000000e+00, -1.106344539343534e+00, -6.424261475069256e+00, 0.000000000000000e+00, -5.822480178215810e+00, -2.038516503635293e-04, 0.000000000000000e+00, -2.042020805521853e-04, -4.398707137157720e+00, 0.000000000000000e+00, -4.498783292800434e+00, -4.398707137157720e+00, 0.000000000000000e+00, -4.498783292800434e+00, -9.039184940707595e+02, 0.000000000000000e+00, -7.804251816297291e+02, -6.236581139509008e+02, 0.000000000000000e+00, -5.788079487336056e+02, -3.050099436879810e+03, 0.000000000000000e+00, -3.103184932415985e+03, -1.437356639842493e+01, 0.000000000000000e+00, -1.391426838283012e+01, -1.783810674382959e+03, 0.000000000000000e+00, -1.257367775329564e+03, -1.783810674382927e+03, 0.000000000000000e+00, -1.257367775329578e+03, -2.202700625933120e-02, 0.000000000000000e+00, -2.166705014869376e-02, -2.367014139566906e-02, 0.000000000000000e+00, -2.328130822672565e-02, -2.317308190104345e-02, 0.000000000000000e+00, -2.278688765073935e-02, -2.268855739135215e-02, 0.000000000000000e+00, -2.231704051739940e-02, -2.293887594573002e-02, 0.000000000000000e+00, -2.255960630365769e-02, -2.293887594573002e-02, 0.000000000000000e+00, -2.255960630365769e-02, -2.419198412856237e-02, 0.000000000000000e+00, -2.387390953654992e-02, -4.302644764354149e-02, 0.000000000000000e+00, -4.241473825473664e-02, -3.854389283334578e-02, 0.000000000000000e+00, -3.795636753101794e-02, -3.380197239357834e-02, 0.000000000000000e+00, -3.333902438883930e-02, -3.630840148530724e-02, 0.000000000000000e+00, -3.579651526228442e-02, -3.630840148530724e-02, 0.000000000000000e+00, -3.579651526228442e-02, -1.405464836786244e-02, 0.000000000000000e+00, -1.393751127659506e-02, -5.770249017973849e-01, 0.000000000000000e+00, -5.687363808839825e-01, -3.574975201749591e-01, 0.000000000000000e+00, -3.495689700941723e-01, -1.671811845685920e-01, 0.000000000000000e+00, -1.640128935659448e-01, -2.473179207935020e-01, 0.000000000000000e+00, -2.484696233772997e-01, -2.473179207935020e-01, 0.000000000000000e+00, -2.484696233772997e-01, -5.975044869787991e-02, 0.000000000000000e+00, -5.846962842845483e-02, -2.609213226713978e+01, 0.000000000000000e+00, -2.587534024927278e+01, -1.718997120889060e+01, 0.000000000000000e+00, -1.663484037262664e+01, -2.119163116995960e-01, 0.000000000000000e+00, -2.011282050094922e-01, -1.034689170104319e+01, 0.000000000000000e+00, -1.048796676449583e+01, -1.034689170104322e+01, 0.000000000000000e+00, -1.048796676449586e+01, -1.837475589673951e+02, 0.000000000000000e+00, -1.792305637668827e+02, -6.230627375889087e+03, 0.000000000000000e+00, -9.515119671657951e+03, -2.098442473510511e+03, 0.000000000000000e+00, -2.061884985435731e+03, -1.181970914548653e+01, 0.000000000000000e+00, -1.138095740777847e+01, -3.217452684494174e+03, 0.000000000000000e+00, -1.418337512471633e+03, -3.217452684494146e+03, 0.000000000000000e+00, -1.418337512471652e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
