
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_b88m_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_b88m", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.113238380227090e+01, -2.113240925149745e+01, -2.113259430112001e+01, -2.113221418396046e+01, -2.113240313223873e+01, -2.113240313223873e+01, -3.508117453103726e+00, -3.508077068985831e+00, -3.507229434934346e+00, -3.509369350098049e+00, -3.508153599655512e+00, -3.508153599655512e+00, -7.051593282302584e-01, -7.051900994870275e-01, -7.078391463484557e-01, -7.126338355057357e-01, -7.107521269495387e-01, -7.107521269495387e-01, -2.209110093117493e-01, -2.215502380721162e-01, -8.137930046452529e-01, -1.957865634718669e-01, -2.038553037083577e-01, -2.038553037083577e-01, -6.497317771782192e-02, -6.496434531992162e-02, -1.142906506826372e-01, -5.964036757363253e-02, -5.922791054087586e-02, -5.922791054087583e-02, -5.073751253204789e+00, -5.072970621623647e+00, -5.073726936732965e+00, -5.073037630229348e+00, -5.073349258486894e+00, -5.073349258486894e+00, -2.138858237910696e+00, -2.148693905323180e+00, -2.140520841576871e+00, -2.149194674146066e+00, -2.143491736525558e+00, -2.143491736525558e+00, -5.862513013114642e-01, -6.056175448702800e-01, -5.470197626316748e-01, -5.404277502321617e-01, -5.918228642461456e-01, -5.918228642461456e-01, -1.696306390612934e-01, -2.427704683282983e-01, -1.624649750783505e-01, -1.821679117128717e+00, -1.739103950902469e-01, -1.739103950902469e-01, -5.387253739972773e-02, -5.744344352854053e-02, -3.757023973271804e-02, -1.324552889936138e-01, -4.544547753698321e-02, -4.544547753698323e-02, -5.518379642120457e-01, -5.563894400039777e-01, -5.548588510472310e-01, -5.535331160852220e-01, -5.542018770154393e-01, -5.542018770154393e-01, -5.345129616556398e-01, -5.162168263033118e-01, -5.223285002681500e-01, -5.274656402182155e-01, -5.247286531709138e-01, -5.247286531709138e-01, -6.362482996753347e-01, -2.836386521227248e-01, -3.158446569591035e-01, -3.699906593834943e-01, -3.401560040142472e-01, -3.401560040142472e-01, -4.764342744972475e-01, -1.144225560042028e-01, -1.270287577749255e-01, -3.458577858521138e-01, -1.421304064107267e-01, -1.421304064107267e-01, -7.302932573575958e-02, -3.335799232976294e-02, -4.352729290767653e-02, -1.387048161314238e-01, -4.271476459574541e-02, -4.271476459574540e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_b88m_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_b88m", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.516797826971226e+01, -2.516807311946998e+01, -2.516847690438998e+01, -2.516706611219023e+01, -2.516780787628157e+01, -2.516780787628157e+01, -4.051180099712144e+00, -4.051219492685746e+00, -4.052230233645070e+00, -4.051243250099811e+00, -4.051324989169787e+00, -4.051324989169787e+00, -7.656795431972323e-01, -7.644557510558068e-01, -7.352573470157344e-01, -7.417602988246277e-01, -7.406986374232639e-01, -7.406986374232639e-01, -1.895653496126968e-01, -1.925338442627217e-01, -8.969695557093167e-01, -1.457609792414489e-01, -1.619912048419274e-01, -1.619912048419274e-01, -1.805888772727814e-02, -1.841652178115913e-02, -5.364614438992394e-02, -1.405695747963316e-02, -1.513334174128120e-02, -1.513334174128122e-02, -6.195289189364381e+00, -6.197839981790805e+00, -6.195404138223974e+00, -6.197655978910573e+00, -6.196583054080566e+00, -6.196583054080566e+00, -2.200925996145274e+00, -2.218883371247717e+00, -2.184876133077378e+00, -2.200661616502709e+00, -2.218715221826562e+00, -2.218715221826562e+00, -6.872449750733950e-01, -7.725756930299484e-01, -6.328784319238209e-01, -6.799245599726770e-01, -7.010473551518461e-01, -7.010473551518461e-01, -1.078137419510663e-01, -1.905604751879147e-01, -1.010570315068526e-01, -2.329058982129160e+00, -1.211255899782050e-01, -1.211255899782050e-01, -1.207095825598732e-02, -1.360585985917694e-02, -9.384630976295497e-03, -7.379820383729623e-02, -1.133563954039477e-02, -1.133563954039477e-02, -7.236852859772333e-01, -7.111102258344923e-01, -7.153286800977003e-01, -7.189714815788252e-01, -7.171303013859579e-01, -7.171303013859579e-01, -7.069219101835652e-01, -5.627629646410011e-01, -5.992929069525975e-01, -6.388491829200345e-01, -6.183392142663131e-01, -6.183392142663131e-01, -8.086035281014374e-01, -2.397990530833040e-01, -2.895553016387866e-01, -3.948071535584952e-01, -3.370018591693315e-01, -3.370018591693315e-01, -5.175373433799687e-01, -5.254694152915142e-02, -6.456889702519135e-02, -3.858306182201630e-01, -8.727295615391091e-02, -8.727295615391094e-02, -2.220314174126539e-02, -6.309414449466943e-03, -9.379098800050454e-03, -8.324674835335474e-02, -1.059667212932832e-02, -1.059667212932827e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_b88m_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_b88m", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-7.617129311799777e-09, -7.617094948236490e-09, -7.616834771538915e-09, -7.617348268296776e-09, -7.617094465070882e-09, -7.617094465070882e-09, -1.002352574551781e-05, -1.002397207182850e-05, -1.003332034010564e-05, -1.000947848240352e-05, -1.002309437730122e-05, -1.002309437730122e-05, -6.225191296950940e-03, -6.227839863068727e-03, -6.254785582773836e-03, -6.081522926648470e-03, -6.142283891807869e-03, -6.142283891807869e-03, -7.785300909792360e-01, -7.580968678854872e-01, -3.492187096299902e-03, -1.564083690305779e+00, -1.192589364119248e+00, -1.192589364119249e+00, -1.013264060886238e+04, -8.885248535069541e+03, -5.920694718391478e+01, -4.782613280506479e+04, -2.650336794104342e+04, -2.650336794104343e+04, -2.304552279563438e-06, -2.306388406536895e-06, -2.304613542261729e-06, -2.306234659381789e-06, -2.305494431749561e-06, -2.305494431749561e-06, -7.541713607402779e-05, -7.389879985319858e-05, -7.553838738920336e-05, -7.418779643786192e-05, -7.452239825104545e-05, -7.452239825104545e-05, -1.284678044795424e-02, -1.163776972497545e-02, -1.695317793941401e-02, -1.815967592815998e-02, -1.237606035880729e-02, -1.237606035880729e-02, -3.987254731245907e+00, -6.043653224298018e-01, -5.038518536871970e+00, -1.424468119597055e-04, -2.874536805326028e+00, -2.874536805326028e+00, -1.090906303483312e+05, -5.343404168397731e+04, -1.936233213160172e+05, -1.634914704837270e+01, -9.141372201346653e+04, -9.141372201346645e+04, -1.747210859699603e-02, -1.636384171411222e-02, -1.669180524908551e-02, -1.700748315870640e-02, -1.684393720443764e-02, -1.684393720443764e-02, -2.019143881324981e-02, -2.164513858712908e-02, -2.040765610403688e-02, -1.968488598639153e-02, -2.001993456062532e-02, -2.001993456062532e-02, -9.522869117859978e-03, -2.918129937098397e-01, -1.733568662861148e-01, -8.270688504962323e-02, -1.207668968723152e-01, -1.207668968723152e-01, -2.986930899994554e-02, -6.503762551742955e+01, -2.756490357588383e+01, -1.066941336291267e-01, -8.937270700756704e+00, -8.937270700756708e+00, -3.551028532370752e+03, -3.754164290235381e+06, -3.600559647698126e+05, -1.057022661917884e+01, -1.220342706962943e+05, -1.220342706962947e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
