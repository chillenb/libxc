
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_chachiyo_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_chachiyo", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.103367685260643e+01, -2.103370422015068e+01, -2.103389419417479e+01, -2.103348561407527e+01, -2.103368999111235e+01, -2.103368999111235e+01, -3.488068952430697e+00, -3.488031023236366e+00, -3.487239735310732e+00, -3.489278038538882e+00, -3.488107820090680e+00, -3.488107820090680e+00, -7.002613940697848e-01, -7.002859600724162e-01, -7.029085829452553e-01, -7.076339764213757e-01, -7.083991327636899e-01, -7.083991327636899e-01, -2.219803673501064e-01, -2.223271274330348e-01, -8.087706011299142e-01, -2.017466512110366e-01, -2.215768542254831e-01, -2.215768542254830e-01, -9.002789389954052e-02, -8.991167471547051e-02, -1.414674772116214e-01, -8.289309420822263e-02, -8.401960494196486e-02, -8.401960494196478e-02, -5.055131242111619e+00, -5.054475320438067e+00, -5.055112046682265e+00, -5.054532825241181e+00, -5.054792761409493e+00, -5.054792761409493e+00, -2.124084442424523e+00, -2.133764116730081e+00, -2.125986688629470e+00, -2.134497672275313e+00, -2.128572994444428e+00, -2.128572994444428e+00, -5.831858427781942e-01, -6.045855788751041e-01, -5.442448776868918e-01, -5.394399518410689e-01, -5.896320777019386e-01, -5.896320777019387e-01, -1.839326493329204e-01, -2.472580801715586e-01, -1.777804205964030e-01, -1.818756367764077e+00, -1.827805470752030e-01, -1.827805470752030e-01, -7.479214253277397e-02, -7.985937401406223e-02, -5.223598148517293e-02, -1.520777713370141e-01, -6.365771018471660e-02, -6.365771018471662e-02, -5.515682746085524e-01, -5.554921606111711e-01, -5.541824473923765e-01, -5.530410658572966e-01, -5.536176704681544e-01, -5.536176704681544e-01, -5.344156520777417e-01, -5.126490852693915e-01, -5.192504995449992e-01, -5.253542241549976e-01, -5.220786891130029e-01, -5.220786891130029e-01, -6.350586071812331e-01, -2.854135882002882e-01, -3.152002586261743e-01, -3.673792431807896e-01, -3.380840854028352e-01, -3.380840854028352e-01, -4.731363589582915e-01, -1.428003676759213e-01, -1.520430353395206e-01, -3.436371173862366e-01, -1.564263178545071e-01, -1.564263178545071e-01, -1.004528416674733e-01, -4.576551030698821e-02, -6.033071567393775e-02, -1.540385441722933e-01, -5.985728224424290e-02, -5.985728224424287e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_chachiyo_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_chachiyo", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.523345892596543e+01, -2.523342885122664e+01, -2.523357076729064e+01, -2.523351008248131e+01, -2.523390411219622e+01, -2.523399458936633e+01, -2.523264168738555e+01, -2.523238532174982e+01, -2.523352686550936e+01, -2.523301060006597e+01, -2.523352686550936e+01, -2.523301060006597e+01, -4.056963438369456e+00, -4.057132408364659e+00, -4.057004212162901e+00, -4.057179609546867e+00, -4.058058466764342e+00, -4.058358634949625e+00, -4.056886167076080e+00, -4.057189838860393e+00, -4.056196639836515e+00, -4.058199762269457e+00, -4.056196639836515e+00, -4.058199762269457e+00, -7.600957916840778e-01, -7.654390585591565e-01, -7.581214284654734e-01, -7.646675410704189e-01, -7.321668396010308e-01, -7.233635476345245e-01, -7.330537677187234e-01, -7.358994486533459e-01, -7.748312663578532e-01, -6.885468664549103e-01, -7.748312663578532e-01, -6.885468664549103e-01, -1.729939877664336e-01, -1.813595470806929e-01, -1.760549478034095e-01, -1.857374797844492e-01, -8.745605606521468e-01, -9.146333087250168e-01, -1.254646365128978e-01, -1.273611294816319e-01, -1.810729540914599e-01, -8.855209705503077e-02, -1.810729540914597e-01, -8.855209705503085e-02, -2.269838702149954e-02, -2.312306802342983e-02, -2.277564263899940e-02, -2.323078825713400e-02, -4.224968057912024e-02, -4.323420351741693e-02, -1.999396415076398e-02, -1.999688540117813e-02, -2.199895366463960e-02, -1.588426534670332e-02, -2.199895366463965e-02, -1.588426534670324e-02, -6.213814757689911e+00, -6.212267981689767e+00, -6.216412927226469e+00, -6.214778020646629e+00, -6.213958913259304e+00, -6.212354105744605e+00, -6.216188287783214e+00, -6.214634355859769e+00, -6.215145624491028e+00, -6.213528624245985e+00, -6.215145624491028e+00, -6.213528624245985e+00, -2.175002285569959e+00, -2.174883218102289e+00, -2.194427110381699e+00, -2.193749213496042e+00, -2.152619113538457e+00, -2.158983786266710e+00, -2.169426543523843e+00, -2.175940450349796e+00, -2.202519290906261e+00, -2.187102076392223e+00, -2.202519290906261e+00, -2.187102076392223e+00, -6.895783430367283e-01, -6.878290649317327e-01, -7.737711362892102e-01, -7.744812458179873e-01, -6.209672416697722e-01, -6.462669363715305e-01, -6.704831884873838e-01, -6.923702539794067e-01, -7.208686064490158e-01, -6.838057786806165e-01, -7.208686064490161e-01, -6.838057786806166e-01, -8.443832645420242e-02, -8.522298860403446e-02, -1.699845722612426e-01, -1.709633675486731e-01, -7.664613763715224e-02, -8.055430805144388e-02, -2.334037802967966e+00, -2.333045801687487e+00, -9.714371538721875e-02, -1.042618825971817e-01, -9.714371538721875e-02, -1.042618825971817e-01, -1.733702419876992e-02, -1.798664844328966e-02, -1.911624004877992e-02, -1.947424070101822e-02, -1.289006082782815e-02, -1.285164489488656e-02, -5.540532122392498e-02, -5.579424336095881e-02, -1.469662336692823e-02, -1.612425530841892e-02, -1.469662336692823e-02, -1.612425530841898e-02, -7.227611319847016e-01, -7.256968106597806e-01, -7.109900204312607e-01, -7.139801600137690e-01, -7.149574156537855e-01, -7.179548293809601e-01, -7.183914854958847e-01, -7.213225038310954e-01, -7.166593097535516e-01, -7.196227226229912e-01, -7.166593097535516e-01, -7.196227226229912e-01, -7.059702293479009e-01, -7.083254560839684e-01, -5.594642880928246e-01, -5.623086897034522e-01, -5.983673682240882e-01, -6.015113672835072e-01, -6.394512186892973e-01, -6.418745679085951e-01, -6.185218580231985e-01, -6.210084264244634e-01, -6.185218580231985e-01, -6.210084264244634e-01, -8.093860518815538e-01, -8.112743551538899e-01, -2.219720799458949e-01, -2.235223686790027e-01, -2.759405676662373e-01, -2.795054564557513e-01, -3.912091456004553e-01, -3.936389951493670e-01, -3.303804035617228e-01, -3.304674923266436e-01, -3.303804035617230e-01, -3.304674923266437e-01, -5.134484141375769e-01, -5.177256120706063e-01, -4.246456919527239e-02, -4.257658511557727e-02, -4.895052073199553e-02, -4.973425999817916e-02, -3.821111762321019e-01, -3.887070654803659e-01, -6.594686697531174e-02, -6.908808787786080e-02, -6.594686697531182e-02, -6.908808787786090e-02, -2.610960253020542e-02, -2.626312946117642e-02, -1.046257816307623e-02, -9.451967325254605e-03, -1.397311070496559e-02, -1.406444515780677e-02, -6.330449333272153e-02, -6.425154328476966e-02, -1.271310269296308e-02, -1.562966828786526e-02, -1.271310269296313e-02, -1.562966828786520e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_chachiyo_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_chachiyo", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.423629364546803e-08, 0.000000000000000e+00, -1.423637425838730e-08, -1.423620097806632e-08, 0.000000000000000e+00, -1.423630688463846e-08, -1.423574611528833e-08, 0.000000000000000e+00, -1.423569945300436e-08, -1.423679672553833e-08, 0.000000000000000e+00, -1.423703728480340e-08, -1.423624637591868e-08, 0.000000000000000e+00, -1.423638594369701e-08, -1.423624637591868e-08, 0.000000000000000e+00, -1.423638594369701e-08, -1.900050565342440e-05, 0.000000000000000e+00, -1.900671626586111e-05, -1.900091568661806e-05, 0.000000000000000e+00, -1.900760328681455e-05, -1.901569018627560e-05, 0.000000000000000e+00, -1.901912784645355e-05, -1.897784637628643e-05, 0.000000000000000e+00, -1.898245983255542e-05, -1.901117990228290e-05, 0.000000000000000e+00, -1.899393713167161e-05, -1.901117990228290e-05, 0.000000000000000e+00, -1.899393713167161e-05, -1.220442595651506e-02, 0.000000000000000e+00, -1.217658193205345e-02, -1.222425881446892e-02, 0.000000000000000e+00, -1.218927607848068e-02, -1.252577233868366e-02, 0.000000000000000e+00, -1.259620242940957e-02, -1.220705078653429e-02, 0.000000000000000e+00, -1.219032396610192e-02, -1.205428508863393e-02, 0.000000000000000e+00, -1.250932508520320e-02, -1.205428508863393e-02, 0.000000000000000e+00, -1.250932508520320e-02, -1.863422257802744e+00, 0.000000000000000e+00, -1.664278255661096e+00, -1.816061545958492e+00, 0.000000000000000e+00, -1.594763125849761e+00, -7.058893754173953e-03, 0.000000000000000e+00, -6.521865504065508e-03, -3.960499655399690e+00, 0.000000000000000e+00, -3.779765944181270e+00, -1.584281391064119e+00, 0.000000000000000e+00, -1.033443673425947e+01, -1.584281391064118e+00, 0.000000000000000e+00, -1.033443673425946e+01, -3.143629073027201e+04, 0.000000000000000e+00, -2.639774468627970e+04, -2.796743284342785e+04, 0.000000000000000e+00, -2.298942996676820e+04, -1.891365940339903e+02, 0.000000000000000e+00, -1.626458363431319e+02, -1.296921037277918e+05, 0.000000000000000e+00, -1.349546685050137e+05, -4.340490007040890e+04, 0.000000000000000e+00, -2.814884575294455e+05, -4.340490007040893e+04, 0.000000000000000e+00, -2.814884575294456e+05, -4.262703960828999e-06, 0.000000000000000e+00, -4.266556870454460e-06, -4.265284210152987e-06, 0.000000000000000e+00, -4.269053051841323e-06, -4.262804402622186e-06, 0.000000000000000e+00, -4.266611983117178e-06, -4.265018615450418e-06, 0.000000000000000e+00, -4.268879834778451e-06, -4.264056631947932e-06, 0.000000000000000e+00, -4.267814371111542e-06, -4.264056631947932e-06, 0.000000000000000e+00, -4.267814371111542e-06, -1.522766301287195e-04, 0.000000000000000e+00, -1.523047025664779e-04, -1.488465265222218e-04, 0.000000000000000e+00, -1.489854549974131e-04, -1.533988075024040e-04, 0.000000000000000e+00, -1.531281106723389e-04, -1.504055888598979e-04, 0.000000000000000e+00, -1.500816733946055e-04, -1.494888501701232e-04, 0.000000000000000e+00, -1.504452458639539e-04, -1.494888501701232e-04, 0.000000000000000e+00, -1.504452458639539e-04, -2.404724384164985e-02, 0.000000000000000e+00, -2.431737854062943e-02, -2.130385667141340e-02, 0.000000000000000e+00, -2.134053370521632e-02, -3.424532702630942e-02, 0.000000000000000e+00, -3.020670991022707e-02, -3.570785049215504e-02, 0.000000000000000e+00, -3.121072375917482e-02, -2.110717425205752e-02, 0.000000000000000e+00, -2.567100963319843e-02, -2.110717425205757e-02, 0.000000000000000e+00, -2.567100963319836e-02, -1.092234669886499e+01, 0.000000000000000e+00, -1.069486033256842e+01, -1.457021988364436e+00, 0.000000000000000e+00, -1.433935695907059e+00, -1.495010791541613e+01, 0.000000000000000e+00, -1.281863187178478e+01, -2.607234079470605e-04, 0.000000000000000e+00, -2.612418538612035e-04, -7.770713492517315e+00, 0.000000000000000e+00, -7.052309038861486e+00, -7.770713492517315e+00, 0.000000000000000e+00, -7.052309038861486e+00, -3.239369813429943e+05, 0.000000000000000e+00, -2.784782608709044e+05, -1.528793484377588e+05, 0.000000000000000e+00, -1.431428721374593e+05, -5.781006406583688e+05, 0.000000000000000e+00, -5.067603918312439e+05, -4.747680552875144e+01, 0.000000000000000e+00, -4.615040948495093e+01, -4.445552444724115e+05, 0.000000000000000e+00, -1.797788878122303e+05, -4.445552444724110e+05, 0.000000000000000e+00, -1.797788878122302e+05, -3.252365845836021e-02, 0.000000000000000e+00, -3.209786764335428e-02, -3.018067430033575e-02, 0.000000000000000e+00, -2.978310903207857e-02, -3.080611174183572e-02, 0.000000000000000e+00, -3.040443319082435e-02, -3.146096273333643e-02, 0.000000000000000e+00, -3.104114463886711e-02, -3.111549970092372e-02, 0.000000000000000e+00, -3.070505660833028e-02, -3.111549970092372e-02, 0.000000000000000e+00, -3.070505660833028e-02, -3.808452764662008e-02, 0.000000000000000e+00, -3.760317044368474e-02, -4.259065104424471e-02, 0.000000000000000e+00, -4.200054070518301e-02, -3.908381261445949e-02, 0.000000000000000e+00, -3.854938279638504e-02, -3.676725536591076e-02, 0.000000000000000e+00, -3.631050072060978e-02, -3.784452920177742e-02, 0.000000000000000e+00, -3.734616000721436e-02, -3.784452920177742e-02, 0.000000000000000e+00, -3.734616000721436e-02, -1.746184296110112e-02, 0.000000000000000e+00, -1.743862461672563e-02, -6.714719293263975e-01, 0.000000000000000e+00, -6.596164174210752e-01, -3.808892274123697e-01, 0.000000000000000e+00, -3.703586718284870e-01, -1.651260449305521e-01, 0.000000000000000e+00, -1.620014095415022e-01, -2.489295388094462e-01, 0.000000000000000e+00, -2.499193010224570e-01, -2.489295388094459e-01, 0.000000000000000e+00, -2.499193010224574e-01, -5.909888208847455e-02, 0.000000000000000e+00, -5.786598181640167e-02, -1.941412562522275e+02, 0.000000000000000e+00, -1.905372691574383e+02, -8.427622912295435e+01, 0.000000000000000e+00, -7.735269746662932e+01, -2.111225150614717e-01, 0.000000000000000e+00, -2.008332919661965e-01, -2.594098607208079e+01, 0.000000000000000e+00, -2.341146532861443e+01, -2.594098607208082e+01, 0.000000000000000e+00, -2.341146532861443e+01, -1.068128233013865e+04, 0.000000000000000e+00, -9.719628223031985e+03, -9.314791313338647e+06, 0.000000000000000e+00, -1.089127007214234e+07, -1.066831835153074e+06, 0.000000000000000e+00, -9.112499530633793e+05, -3.021152772228112e+01, 0.000000000000000e+00, -2.869379985436858e+01, -6.396689346273422e+05, 0.000000000000000e+00, -2.326567406199153e+05, -6.396689346273437e+05, 0.000000000000000e+00, -2.326567406199162e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
