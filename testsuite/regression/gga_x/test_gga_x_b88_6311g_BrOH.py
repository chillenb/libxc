
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_b88_6311g_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_b88_6311g", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.126982057981849e+01, -2.126984053756466e+01, -2.127001339436552e+01, -2.126968490497200e+01, -2.126983040420003e+01, -2.126983040420003e+01, -3.536015177910202e+00, -3.535980966477528e+00, -3.535186624193512e+00, -3.537305308899970e+00, -3.536012644941596e+00, -3.536012644941596e+00, -7.137322417715011e-01, -7.138488821226756e-01, -7.190367063211363e-01, -7.233129216669842e-01, -7.137705914075259e-01, -7.137705914075259e-01, -2.242310721388726e-01, -2.248267692328322e-01, -8.288347145867887e-01, -1.944945319362924e-01, -2.243776265309690e-01, -2.243776265309690e-01, -6.376888048974214e-02, -6.451484163587641e-02, -1.160887470530865e-01, -5.757489759889398e-02, -6.388727441335373e-02, -6.388727441335373e-02, -5.098336956156059e+00, -5.097428650036847e+00, -5.098251212703636e+00, -5.097544840472825e+00, -5.097861077121938e+00, -5.097861077121938e+00, -2.165140296077768e+00, -2.174534063225691e+00, -2.167234960837217e+00, -2.174533836694078e+00, -2.168816891172898e+00, -2.168816891172898e+00, -5.835554951375939e-01, -5.996506767846744e-01, -5.561985943034059e-01, -5.529887105663246e-01, -6.008271432692515e-01, -6.008271432692515e-01, -1.714469179694295e-01, -2.503387955657697e-01, -1.669659084066359e-01, -1.824243489764972e+00, -1.781966033410293e-01, -1.781966033410293e-01, -5.648922601344698e-02, -5.803251479325305e-02, -4.438077974470799e-02, -1.314467372557734e-01, -5.269005824874698e-02, -5.269005824874699e-02, -5.599984357008410e-01, -5.650271769692775e-01, -5.633050024808851e-01, -5.619128835825999e-01, -5.626151724685725e-01, -5.626151724685725e-01, -5.406675619457922e-01, -5.274705885432027e-01, -5.326373118287918e-01, -5.364080609489947e-01, -5.344030252905810e-01, -5.344030252905810e-01, -6.300393704913132e-01, -2.928174342722044e-01, -3.245970966937499e-01, -3.748720892355824e-01, -3.475615980401409e-01, -3.475615980401408e-01, -4.790173122646894e-01, -1.160913986471546e-01, -1.294352194110355e-01, -3.431743233927547e-01, -1.459565254482107e-01, -1.459565254482106e-01, -7.008527268425056e-02, -4.120586745497330e-02, -4.725709279669495e-02, -1.388732299111748e-01, -4.725958122490012e-02, -4.725958122490015e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_b88_6311g_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_b88_6311g", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.509091775600549e+01, -2.509100007885997e+01, -2.509138122101140e+01, -2.509003289488852e+01, -2.509096105422923e+01, -2.509096105422923e+01, -4.039312435264542e+00, -4.039344798470404e+00, -4.040401239463188e+00, -4.039437869720985e+00, -4.039346287387695e+00, -4.039346287387695e+00, -7.574753581899201e-01, -7.563814228949371e-01, -7.285536223645370e-01, -7.346644720951669e-01, -7.570775497730198e-01, -7.570775497730198e-01, -2.017587082880755e-01, -2.045781544552477e-01, -9.192432077082785e-01, -1.485767704954899e-01, -2.026015971207707e-01, -2.026015971207707e-01, -2.243710617043387e-02, -2.305674940974138e-02, -6.155119468842572e-02, -1.558651458039296e-02, -2.282525040563576e-02, -2.282525040563576e-02, -6.174451822468367e+00, -6.176949752446810e+00, -6.174707412979972e+00, -6.176649662790436e+00, -6.175731901910455e+00, -6.175731901910455e+00, -2.198327439009010e+00, -2.215436157559112e+00, -2.189856937857201e+00, -2.203166862136222e+00, -2.221045333891126e+00, -2.221045333891126e+00, -6.780354914616059e-01, -7.634701506689616e-01, -6.418719770730957e-01, -6.894307247923127e-01, -7.074235272868653e-01, -7.074235272868653e-01, -1.150422355618667e-01, -2.039015512842482e-01, -1.130260554400417e-01, -2.321908431248284e+00, -1.285674157333934e-01, -1.285674157333934e-01, -1.519517578647087e-02, -1.626077705837000e-02, -1.233868212935092e-02, -7.790321823784693e-02, -1.478415600353964e-02, -1.478415600353967e-02, -7.356214619126710e-01, -7.229461162762816e-01, -7.272544525030029e-01, -7.307507985940479e-01, -7.289823563765733e-01, -7.289823563765733e-01, -7.136427783744472e-01, -5.758418463233871e-01, -6.108958978532959e-01, -6.465577328788646e-01, -6.280900740759104e-01, -6.280900740759106e-01, -7.992196438858666e-01, -2.553837457575187e-01, -3.045712239326077e-01, -3.988235799536287e-01, -3.478184912416075e-01, -3.478184912416075e-01, -5.179549187479647e-01, -5.917220422966925e-02, -7.300696628265908e-02, -3.816302506195716e-01, -9.503592168406766e-02, -9.503592168406756e-02, -2.538444474398010e-02, -8.399208999813458e-03, -1.125272779623411e-02, -9.057369150970018e-02, -1.298695259857540e-02, -1.298695259857544e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_b88_6311g_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_b88_6311g", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-8.276765662852374e-09, -8.276737990727894e-09, -8.276479171580701e-09, -8.276935036553660e-09, -8.276752201057546e-09, -8.276752201057546e-09, -1.080916636017797e-05, -1.080958178951338e-05, -1.081922779668347e-05, -1.079346368793850e-05, -1.080919583764269e-05, -1.080919583764269e-05, -6.604096949727287e-03, -6.603548278991974e-03, -6.544198355262259e-03, -6.382651610357030e-03, -6.604025975603874e-03, -6.604025975603874e-03, -7.568169835503239e-01, -7.408084919621098e-01, -3.590327548501177e-03, -1.665019231706653e+00, -7.522601704421259e-01, -7.522601704421259e-01, -2.794416879939649e+03, -2.450810988817943e+03, -3.715074068616332e+01, -2.072668659104825e+04, -2.552884436068284e+03, -2.552884436068284e+03, -2.525062237324291e-06, -2.527412157271354e-06, -2.525286660845350e-06, -2.527114001602592e-06, -2.526287827647323e-06, -2.526287827647323e-06, -7.951402296525121e-05, -7.801064479097596e-05, -7.941112157172406e-05, -7.823688835971503e-05, -7.863284995399370e-05, -7.863284995399370e-05, -1.457986248112401e-02, -1.362169845413496e-02, -1.765974614469580e-02, -1.851557072585277e-02, -1.299508032606699e-02, -1.299508032606699e-02, -3.630751251605303e+00, -5.484505186516234e-01, -3.948735025841663e+00, -1.589880461946210e-04, -2.634120421296275e+00, -2.634120421296275e+00, -2.336761808242092e+04, -1.593520603052039e+04, -4.906557686225780e+04, -1.510784960368580e+01, -2.323709498998815e+04, -2.323709498998815e+04, -1.870195531310832e-02, -1.736827412734432e-02, -1.776982254372044e-02, -1.813063696787975e-02, -1.794388484200667e-02, -1.794388484200667e-02, -2.174362384021770e-02, -2.195673223271702e-02, -2.099493849163418e-02, -2.057227933113912e-02, -2.075772531213933e-02, -2.075772531213933e-02, -1.113879677956426e-02, -2.688595388704874e-01, -1.659643935367118e-01, -8.670686060858210e-02, -1.207048726104682e-01, -1.207048726104683e-01, -3.236023212174371e-02, -4.347473377787121e+01, -1.906400287625921e+01, -1.221140012655250e-01, -7.479736396597620e+00, -7.479736396597623e+00, -1.637970444559368e+03, -7.745668161257020e+05, -1.166316702280643e+05, -9.085590891631011e+00, -4.125076519420643e+04, -4.125076519420658e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
