
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_chachiyo_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_chachiyo", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.103319918726354e+01, -2.103322300155812e+01, -2.103340623318034e+01, -2.103301473093607e+01, -2.103321110254724e+01, -2.103321110254724e+01, -3.487950964293610e+00, -3.487921682355980e+00, -3.487260979234846e+00, -3.489139362451259e+00, -3.487950761910865e+00, -3.487950761910865e+00, -7.010549145391021e-01, -7.011236315149120e-01, -7.053204195232059e-01, -7.095438209489089e-01, -7.010759760484788e-01, -7.010759760484788e-01, -2.205795927677732e-01, -2.210055277293786e-01, -8.159559627382174e-01, -1.961022011864213e-01, -2.206711841548252e-01, -2.206711841548252e-01, -8.577812636870666e-02, -8.651969760639859e-02, -1.361421821411503e-01, -7.978155298201042e-02, -8.568345395640668e-02, -8.568345395640668e-02, -5.053074228196031e+00, -5.052437969286827e+00, -5.053015606426905e+00, -5.052520772817222e+00, -5.052738747943191e+00, -5.052738747943191e+00, -2.123911077212954e+00, -2.133258995037125e+00, -2.125803595139534e+00, -2.133050305270632e+00, -2.127877473541600e+00, -2.127877473541600e+00, -5.763600190236422e-01, -5.971271912537817e-01, -5.490529631417251e-01, -5.495527088606746e-01, -5.940502417336219e-01, -5.940502417336219e-01, -1.802128481896677e-01, -2.491275849024083e-01, -1.748982209802499e-01, -1.816513453326930e+00, -1.825374316961149e-01, -1.825374316961149e-01, -7.829938341675168e-02, -8.026630962091146e-02, -6.141317635667626e-02, -1.460681853726146e-01, -7.287074667016692e-02, -7.287074667016696e-02, -5.593052982417088e-01, -5.629178781983074e-01, -5.616892899627716e-01, -5.606907110073883e-01, -5.611950577957892e-01, -5.611950577957892e-01, -5.402309277738651e-01, -5.188017705349103e-01, -5.255513443486610e-01, -5.314215513075521e-01, -5.282978794110819e-01, -5.282978794110820e-01, -6.271653954737817e-01, -2.887959666693953e-01, -3.186159780256606e-01, -3.682512019082341e-01, -3.408793992762548e-01, -3.408793992762549e-01, -4.709093523468065e-01, -1.386542769005906e-01, -1.473384177719012e-01, -3.378977742348249e-01, -1.553310236836089e-01, -1.553310236836089e-01, -9.373552481327271e-02, -5.686935052820542e-02, -6.563165206621935e-02, -1.476887050909393e-01, -6.543919205355866e-02, -6.543919205355865e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_chachiyo_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_chachiyo", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.523274422498158e+01, -2.523282824803513e+01, -2.523321526695496e+01, -2.523183912146014e+01, -2.523278843412300e+01, -2.523278843412300e+01, -4.056827287176943e+00, -4.056864165686580e+00, -4.058044841175571e+00, -4.056870409252649e+00, -4.056863536445515e+00, -4.056863536445515e+00, -7.546130161021858e-01, -7.533258869466831e-01, -7.192294186813188e-01, -7.256662618734777e-01, -7.541459376317119e-01, -7.541459376317119e-01, -1.915052930178868e-01, -1.951083596349430e-01, -9.210427725859698e-01, -1.283178801323080e-01, -1.925970881447550e-01, -1.925970881447550e-01, -2.307230247162477e-02, -2.335481458459404e-02, -4.541177163239877e-02, -2.012297989487522e-02, -2.312740100319753e-02, -2.312740100319753e-02, -6.210200235507146e+00, -6.212674233200617e+00, -6.210453580934996e+00, -6.212377242370821e+00, -6.211468223583587e+00, -6.211468223583587e+00, -2.171223588226584e+00, -2.189814251469751e+00, -2.160432378336077e+00, -2.174936248758665e+00, -2.197844033189777e+00, -2.197844033189777e+00, -6.815564135468154e-01, -7.664219230258388e-01, -6.450132094483227e-01, -6.928839522862221e-01, -7.113925333263119e-01, -7.113925333263119e-01, -9.044026444560936e-02, -1.837014525540217e-01, -8.940077895481641e-02, -2.330931393401310e+00, -1.065313094313310e-01, -1.065313094313310e-01, -1.971182222992311e-02, -2.044506390160304e-02, -1.560885368453027e-02, -5.746060828102559e-02, -1.856836079364834e-02, -1.856836079364832e-02, -7.366229179656817e-01, -7.254989588824726e-01, -7.293334169409161e-01, -7.324023220243062e-01, -7.308545564354322e-01, -7.308545564354322e-01, -7.142930888075236e-01, -5.759623398865874e-01, -6.136886058867551e-01, -6.503242968237268e-01, -6.315865416387657e-01, -6.315865416387660e-01, -8.024961510599754e-01, -2.389340098832127e-01, -2.939429540217834e-01, -3.974722222454605e-01, -3.423387911220564e-01, -3.423387911220564e-01, -5.174271078184234e-01, -4.429804703576525e-02, -5.344233501334474e-02, -3.824779784866789e-01, -7.324602752116746e-02, -7.324602752116757e-02, -2.538116999811428e-02, -1.285485623002065e-02, -1.586352575933819e-02, -6.987946493460809e-02, -1.657733261954940e-02, -1.657733261954938e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_chachiyo_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_chachiyo", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-7.118819507373532e-09, -7.118784685923400e-09, -7.118528849184218e-09, -7.119101094758984e-09, -7.118801983726032e-09, -7.118801983726032e-09, -9.503175244108626e-06, -9.503422600261521e-06, -9.508661688843435e-06, -9.491591564947511e-06, -9.503140533106415e-06, -9.503140533106415e-06, -6.126537710028025e-03, -6.133451055428933e-03, -6.289319760408812e-03, -6.122609509591621e-03, -6.129141870353584e-03, -6.129141870353584e-03, -7.987369115908607e-01, -7.748547561198681e-01, -3.223872297460468e-03, -2.001820623938604e+00, -7.916972419455918e-01, -7.916972419455918e-01, -4.076274755817449e+03, -3.581249147286307e+03, -5.423601218918866e+01, -2.922076670843728e+04, -3.730275270235046e+03, -3.730275270235046e+03, -2.135774162891401e-06, -2.137006559747902e-06, -2.135888497890100e-06, -2.136846851219783e-06, -2.136421011544563e-06, -2.136421011544563e-06, -7.629565368038140e-05, -7.465596046773571e-05, -7.648141604306900e-05, -7.519368341735643e-05, -7.495337924694025e-05, -7.495337924694025e-05, -1.266846544713875e-02, -1.123593531093967e-02, -1.541633510554506e-02, -1.540903253727421e-02, -1.119106025758178e-02, -1.119106025758178e-02, -4.791079557839230e+00, -6.269288092750369e-01, -5.181028763025079e+00, -1.311552912363042e-04, -3.306345964614211e+00, -3.306345964614211e+00, -3.291445382941216e+04, -2.257378290384280e+04, -6.943080721194680e+04, -2.130527138901053e+01, -3.292390567992801e+04, -3.292390567992802e+04, -1.544080955687347e-02, -1.430534186146216e-02, -1.461165351819304e-02, -1.490920448637166e-02, -1.475223679865538e-02, -1.475223679865528e-02, -1.804586484692679e-02, -1.994475659307768e-02, -1.840656816978862e-02, -1.745129043160247e-02, -1.789735375661970e-02, -1.789735375661973e-02, -9.199675567433358e-03, -2.909349699063011e-01, -1.693988074172277e-01, -8.028878668991661e-02, -1.171234169795334e-01, -1.171234169795334e-01, -2.960416026973836e-02, -6.391618884254441e+01, -2.738004209990860e+01, -1.094369269989151e-01, -1.005548418745856e+01, -1.005548418745856e+01, -2.396927545798912e+03, -1.047983732479342e+06, -1.614498484331659e+05, -1.220229555651558e+01, -5.827779603476566e+04, -5.827779603476585e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
