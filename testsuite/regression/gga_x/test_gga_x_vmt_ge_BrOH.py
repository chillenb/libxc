
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_vmt_ge_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_vmt_ge", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.047879256163869e+01, -2.047882586475659e+01, -2.047903476983525e+01, -2.047848821970037e+01, -2.047880962024931e+01, -2.047880962024931e+01, -3.373163471472909e+00, -3.373147640287427e+00, -3.372851884824857e+00, -3.374077078638419e+00, -3.373169698209207e+00, -3.373169698209207e+00, -6.676607732342574e-01, -6.675022949754043e-01, -6.652285507278125e-01, -6.695547903277344e-01, -6.676002312198678e-01, -6.676002312198678e-01, -2.025302033146456e-01, -2.034862238059750e-01, -7.842501920837543e-01, -1.699982554258194e-01, -2.027925129307864e-01, -2.027925129307864e-01, -1.290998877662860e-02, -1.385741600354874e-02, -7.232629448612414e-02, -4.560427001005729e-03, -1.370634007727737e-02, -1.370634007727737e-02, -4.947338958070654e+00, -4.947328856438395e+00, -4.947342789557167e+00, -4.947334849490550e+00, -4.947326712461628e+00, -4.947326712461628e+00, -2.004057445944068e+00, -2.014333212451468e+00, -2.003795366993632e+00, -2.011774668929506e+00, -2.011438030760278e+00, -2.011438030760278e+00, -5.593807955611327e-01, -5.909506361689738e-01, -5.321185399535282e-01, -5.414023983505352e-01, -5.781609250304091e-01, -5.781609250304091e-01, -1.417545273449041e-01, -2.220319348484889e-01, -1.388113538520944e-01, -1.797605311132953e+00, -1.528829065373974e-01, -1.528829065373974e-01, -4.394321272786978e-03, -5.080800278812920e-03, -3.796220366744419e-03, -9.683980233510174e-02, -4.632179320305402e-03, -4.632179320305402e-03, -5.573613003145244e-01, -5.576954116898990e-01, -5.575781163341230e-01, -5.574835079669366e-01, -5.575305450246002e-01, -5.575305450246002e-01, -5.389417346128588e-01, -4.970053252511984e-01, -5.086827048905750e-01, -5.197781481194911e-01, -5.139734882979234e-01, -5.139734882979234e-01, -6.201823053769614e-01, -2.630014182896644e-01, -2.954964465516561e-01, -3.508891141358486e-01, -3.206571673169197e-01, -3.206571673169197e-01, -4.502253633774978e-01, -6.722867802055102e-02, -8.916415770305816e-02, -3.249497252454989e-01, -1.181387167261670e-01, -1.181387167261670e-01, -1.582135835026649e-02, -1.368592183343880e-03, -2.599836408076331e-03, -1.125488243160852e-01, -3.907270377951519e-03, -3.907270377951513e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_vmt_ge_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_vmt_ge", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.561179204163663e+01, -2.561187314340745e+01, -2.561225336162339e+01, -2.561092492067608e+01, -2.561183465810926e+01, -2.561183465810926e+01, -4.125885308737580e+00, -4.125918904659485e+00, -4.127011945785005e+00, -4.126002845925162e+00, -4.125920163941331e+00, -4.125920163941331e+00, -7.698968617538281e-01, -7.686317404089613e-01, -7.353139614984285e-01, -7.417978696210874e-01, -7.694376268948884e-01, -7.694376268948884e-01, -1.990380582416584e-01, -2.021894756301821e-01, -9.380516896532327e-01, -1.505530670102223e-01, -1.999799370883673e-01, -1.999799370883673e-01, -2.625363065962006e-02, -2.786213063138309e-02, -9.155284885191077e-02, -6.440966922147517e-03, -2.756538512699455e-02, -2.756538512699455e-02, -6.290615766338575e+00, -6.292804530394576e+00, -6.290840771284591e+00, -6.292542652583530e+00, -6.291736680217191e+00, -6.291736680217191e+00, -2.219532618336455e+00, -2.238135804664724e+00, -2.209086736106587e+00, -2.223583790401358e+00, -2.245763522154757e+00, -2.245763522154757e+00, -6.924823528969759e-01, -7.722431704094187e-01, -6.556199118449241e-01, -6.998815315303611e-01, -7.221737614251335e-01, -7.221737614251335e-01, -1.339929658473449e-01, -2.010956540319091e-01, -1.300669778228365e-01, -2.348726875655932e+00, -1.368060377091313e-01, -1.368060377091313e-01, -6.149340900615721e-03, -7.671622811710036e-03, -5.632639547364583e-03, -1.067268471566542e-01, -7.016634907244870e-03, -7.016634907244869e-03, -7.387871553503994e-01, -7.305364641119865e-01, -7.334786042833703e-01, -7.357632304986406e-01, -7.346191511595110e-01, -7.346191511595110e-01, -7.157784444743672e-01, -5.869832015406520e-01, -6.239988999476920e-01, -6.590097721645123e-01, -6.412364637259146e-01, -6.412364637259146e-01, -8.089674287776838e-01, -2.509942396327455e-01, -3.027598000323686e-01, -4.054840908904639e-01, -3.502512401977400e-01, -3.502512401977400e-01, -5.275269716124722e-01, -8.905691481207725e-02, -1.047207361471371e-01, -3.894955670859219e-01, -1.154374224649571e-01, -1.154374224649571e-01, -3.144479989471455e-02, -1.824789577791840e-03, -3.466774244902433e-03, -1.097622936085697e-01, -5.661889605411900e-03, -5.661889605411884e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_vmt_ge_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_vmt_ge", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.287374803116334e-09, -4.287340621545967e-09, -4.287146712458361e-09, -4.287707283754935e-09, -4.287357123139142e-09, -4.287357123139142e-09, -5.948402946556358e-06, -5.948442809048152e-06, -5.948556530175464e-06, -5.943317104018966e-06, -5.948322092073553e-06, -5.948322092073553e-06, -4.092280717507356e-03, -4.101388380742419e-03, -4.312077693322605e-03, -4.193243470168763e-03, -4.095641022876130e-03, -4.095641022876130e-03, -5.527449225493880e-01, -5.379586188476625e-01, -2.078734954811491e-03, -1.144266972015050e+00, -5.484879606889304e-01, -5.484879606889304e-01, 4.036296717067464e+02, 3.653297697251793e+02, -1.945407483058935e+00, 1.220962070113139e+02, 3.803370192235523e+02, 3.803370192235523e+02, -1.238917443074630e-06, -1.238510567578917e-06, -1.238871902387153e-06, -1.238555599767102e-06, -1.238714428400829e-06, -1.238714428400829e-06, -5.226175483886057e-05, -5.105812493793373e-05, -5.249976651037779e-05, -5.155574945448972e-05, -5.113386377903781e-05, -5.113386377903781e-05, -7.776632063241251e-03, -5.926622623439589e-03, -9.539690256123421e-03, -8.501718775444504e-03, -6.756639994265392e-03, -6.756639994265392e-03, -1.758981468878660e+00, -4.009261136631422e-01, -1.982195052588706e+00, -6.923057017180228e-05, -1.619635758781678e+00, -1.619635758781678e+00, 1.128065012848261e+02, 2.339394863315250e+02, 5.981987641886054e+02, -3.474851453831197e+00, 3.520573216536421e+02, 3.520573216536415e+02, -7.385939627059327e-03, -7.454276066296720e-03, -7.429718506872446e-03, -7.410879039229733e-03, -7.420317474405442e-03, -7.420317474405442e-03, -8.432268631274529e-03, -1.303952809750320e-02, -1.147040559924826e-02, -1.019661781284830e-02, -1.083062476811986e-02, -1.083062476811986e-02, -4.894484797354819e-03, -1.984485369851298e-01, -1.180881212337716e-01, -5.353885541879857e-02, -8.070694661658386e-02, -8.070694661658387e-02, -1.950528899706326e-02, -2.643151411023661e-01, -2.711950481407549e+00, -7.038892738889867e-02, -3.161042528080130e+00, -3.161042528080133e+00, 2.490711978832136e+02, 1.723076478712103e-12, 7.339534185031097e-01, -3.871153625789978e+00, 3.728758583174625e+02, 3.728758583174571e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
