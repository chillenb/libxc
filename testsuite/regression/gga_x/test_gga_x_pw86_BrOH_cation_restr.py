
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_pw86_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pw86", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.103953987659415e+01, -2.103955540462773e+01, -2.103971176821714e+01, -2.103947895031613e+01, -2.103958851951936e+01, -2.103958851951936e+01, -3.513360726925197e+00, -3.513305916290593e+00, -3.512124711129805e+00, -3.514845339220135e+00, -3.513379702613466e+00, -3.513379702613466e+00, -7.133906917286178e-01, -7.135657374846190e-01, -7.189059973278582e-01, -7.236967175925612e-01, -7.217369777561812e-01, -7.217369777561812e-01, -2.200107116264249e-01, -2.213174923358132e-01, -8.216254702645228e-01, -1.853904590137938e-01, -1.983022174857255e-01, -1.983022174857255e-01, -2.436855414378051e-02, -2.499621558162179e-02, -7.583932066366283e-02, -1.768072314970002e-02, -1.980499327905662e-02, -1.980499327905662e-02, -5.031412921400246e+00, -5.030273823568273e+00, -5.031373638297004e+00, -5.030367777455404e+00, -5.030827726586929e+00, -5.030827726586929e+00, -2.173185952191799e+00, -2.182881884960739e+00, -2.175381793784925e+00, -2.184027239211849e+00, -2.177374631639624e+00, -2.177374631639624e+00, -5.854218872853166e-01, -5.996408712068264e-01, -5.476403443117783e-01, -5.347908205212012e-01, -5.898106424782836e-01, -5.898106424782836e-01, -1.463714485623082e-01, -2.350783675621745e-01, -1.380144437253240e-01, -1.804063012183008e+00, -1.591112472266783e-01, -1.591112472266783e-01, -1.471906658092518e-02, -1.716036030849712e-02, -1.215918234524856e-02, -1.029337193146171e-01, -1.467735499361624e-02, -1.467735499361624e-02, -5.490060238271078e-01, -5.509906586245624e-01, -5.500611151312019e-01, -5.494686912358484e-01, -5.497423125975339e-01, -5.497423125975339e-01, -5.330670141603392e-01, -5.219777632105529e-01, -5.237569130965456e-01, -5.236629185098548e-01, -5.234610361821104e-01, -5.234610361821104e-01, -6.298003917771011e-01, -2.813916372711127e-01, -3.187405827044169e-01, -3.750290252857870e-01, -3.456664651266308e-01, -3.456664651266308e-01, -4.819710289293948e-01, -7.434658215584200e-02, -9.088090942515729e-02, -3.485365591133536e-01, -1.195765961652977e-01, -1.195765961652978e-01, -3.065233417798162e-02, -6.629314060058268e-03, -1.112420684320831e-02, -1.146529140991538e-01, -1.368566864379442e-02, -1.368566864379441e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_pw86_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pw86", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.417608495932952e+01, -2.417619790898328e+01, -2.417664784431826e+01, -2.417496858053561e+01, -2.417585584775357e+01, -2.417585584775357e+01, -3.869616560996127e+00, -3.869655357330742e+00, -3.870653005911629e+00, -3.869660635133324e+00, -3.869756360530280e+00, -3.869756360530280e+00, -7.432042544691673e-01, -7.426061149929163e-01, -7.320267146016292e-01, -7.375268135526961e-01, -7.359017523502074e-01, -7.359017523502074e-01, -2.156658047415250e-01, -2.172328523661053e-01, -8.649681589319347e-01, -1.793604131129115e-01, -1.929995570158909e-01, -1.929995570158911e-01, -1.960607373799969e-02, -2.012645612984242e-02, -6.625955155849740e-02, -1.417067106966482e-02, -1.589569581700392e-02, -1.589569581700394e-02, -6.021335587751710e+00, -6.025758536953204e+00, -6.021527289072162e+00, -6.025431786987673e+00, -6.023581551327022e+00, -6.023581551327022e+00, -2.204800082151039e+00, -2.217588269978054e+00, -2.200685832773513e+00, -2.211850807695355e+00, -2.214007823229425e+00, -2.214007823229425e+00, -6.573867712246312e-01, -7.700989060942207e-01, -6.045415264644485e-01, -6.728781686070262e-01, -6.722442497264499e-01, -6.722442497264499e-01, -1.387915646393304e-01, -2.285420928708841e-01, -1.303640784062223e-01, -2.323830205744523e+00, -1.528516195478165e-01, -1.528516195478165e-01, -1.179013390832076e-02, -1.375453667483068e-02, -9.754494426816843e-03, -9.479997523544953e-02, -1.177433181768400e-02, -1.177433181768400e-02, -7.259530602519889e-01, -7.094102523322927e-01, -7.158537770268099e-01, -7.207333540517468e-01, -7.183540440637760e-01, -7.183540440637760e-01, -7.084912541590376e-01, -5.452236233446053e-01, -5.725073635990079e-01, -6.181843269163145e-01, -5.921147578796441e-01, -5.921147578796441e-01, -8.045877698492735e-01, -2.754273579005526e-01, -3.149061765790778e-01, -3.867142357599955e-01, -3.465998202702047e-01, -3.465998202702048e-01, -5.022469466464476e-01, -6.451729868641606e-02, -8.144178901808422e-02, -3.705041285028022e-01, -1.126689361366057e-01, -1.126689361366058e-01, -2.476734168092396e-02, -5.305067382661145e-03, -8.907655730884586e-03, -1.075241542676340e-01, -1.097766159345614e-02, -1.097766159345613e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_pw86_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pw86", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-9.815024321135743e-09, -9.814945227098011e-09, -9.814511024854764e-09, -9.815689198005818e-09, -9.815083721291466e-09, -9.815083721291466e-09, -1.304117208871135e-05, -1.304190375335612e-05, -1.305748934124642e-05, -1.302043858246102e-05, -1.304079181366736e-05, -1.304079181366736e-05, -7.418292396890883e-03, -7.397511176211590e-03, -6.794287176925519e-03, -6.635465085511245e-03, -6.719305168199596e-03, -6.719305168199596e-03, -5.760725207762223e-01, -5.737851235663272e-01, -4.280248796558913e-03, -9.201920751484662e-01, -7.754338008525726e-01, -7.754338008525711e-01, -1.904019218585208e+03, -1.719898408444927e+03, -2.090235011042190e+01, -6.870070558247074e+03, -4.363848441065355e+03, -4.363848441065353e+03, -2.779863328197205e-06, -2.775521662036978e-06, -2.779668906350387e-06, -2.775837770727414e-06, -2.777674978626889e-06, -2.777674978626889e-06, -8.027159032243609e-05, -7.926115740256815e-05, -7.900080268824200e-05, -7.812118568609090e-05, -8.033762119490706e-05, -8.033762119490706e-05, -1.675867748342185e-02, -9.807121419715943e-03, -2.207778368316042e-02, -1.794990654892619e-02, -1.604744266245830e-02, -1.604744266245830e-02, -1.898970678513555e+00, -3.853879172123977e-01, -2.339354031445533e+00, -1.163969460858737e-04, -1.538988513679227e+00, -1.538988513679227e+00, -1.430337218354585e+04, -7.742049302234048e+03, -3.071483150671005e+04, -6.749801159140154e+00, -1.446685997408698e+04, -1.446685997408697e+04, -8.744196858890791e-03, -1.343709919456582e-02, -1.197255483172308e-02, -1.060394804042792e-02, -1.130552027517639e-02, -1.130552027517639e-02, -7.936228955436575e-03, -2.599405897437837e-02, -2.643469820330088e-02, -2.444877586717264e-02, -2.606152362296028e-02, -2.606152362296028e-02, -8.424674453102975e-03, -2.103662089937259e-01, -1.450422728768097e-01, -9.514119387713631e-02, -1.184345748608314e-01, -1.184345748608315e-01, -3.562267248284236e-02, -2.250677706325476e+01, -1.045038702385352e+01, -1.334667114690241e-01, -4.088307857693271e+00, -4.088307857693267e+00, -7.606858074947736e+02, -3.476031241679360e+05, -4.384121506112374e+04, -4.713418536268400e+00, -1.913818884520478e+04, -1.913818884520484e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
