
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_fd_revlb94_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_fd_revlb94", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.088446318810689e+01, -2.088448675304433e+01, -2.088466844556028e+01, -2.088428104401482e+01, -2.088447497544606e+01, -2.088447497544606e+01, -3.465357003598125e+00, -3.465325695274839e+00, -3.464608851835806e+00, -3.466579763516483e+00, -3.465355662586359e+00, -3.465355662586359e+00, -7.007308081628433e-01, -7.009501889995813e-01, -7.105566670583687e-01, -7.144530079002510e-01, -7.008057812028045e-01, -7.008057812028045e-01, -2.312722097896998e-01, -2.305024952198014e-01, -8.119538617198094e-01, -2.333306601515422e-01, -2.309782702575543e-01, -2.309782702575543e-01, -5.190295128375486e-01, -5.064145141708254e-01, -3.238872473602601e-01, -8.303595184785380e-01, -5.018579154134792e-01, -5.018579154134792e-01, -5.018843982315343e+00, -5.018283385214459e+00, -5.018792814529201e+00, -5.018356801197285e+00, -5.018547391941880e+00, -5.018547391941880e+00, -2.138764035891622e+00, -2.146689649006427e+00, -2.142839184175766e+00, -2.148916187153007e+00, -2.139122805402729e+00, -2.139122805402729e+00, -5.723666619571375e-01, -5.944856213228820e-01, -5.453270958203466e-01, -5.464264904519328e-01, -5.898523530392443e-01, -5.898523530392443e-01, -2.580844946168425e-01, -2.786057105640025e-01, -2.466914291217091e-01, -1.808439210817214e+00, -2.332536815038625e-01, -2.332536815038625e-01, -8.256558962109738e-01, -7.786098972833605e-01, -6.053303494324394e-01, -2.684016871644749e-01, -7.048830092505775e-01, -7.048830092505772e-01, -5.583272676119028e-01, -5.606282435170544e-01, -5.598034301836887e-01, -5.591635852294820e-01, -5.594830011429670e-01, -5.594830011429670e-01, -5.395628996271523e-01, -5.169242140304283e-01, -5.220759613694164e-01, -5.277669235215190e-01, -5.245688635258334e-01, -5.245688635258334e-01, -6.242338540312601e-01, -3.078579843931620e-01, -3.281302676397849e-01, -3.679631373524687e-01, -3.443516091785119e-01, -3.443516091785117e-01, -4.696495143293018e-01, -3.623919345764028e-01, -3.029932079483335e-01, -3.361774020590825e-01, -2.349623165271739e-01, -2.349623165271739e-01, -5.332080120759972e-01, -1.071947051079318e+00, -8.893351281141001e-01, -2.227063511552830e-01, -6.605524975343191e-01, -6.605524975343190e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_fd_revlb94_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_fd_revlb94", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.504594967214428e+01, -2.504604515840217e+01, -2.504646574951237e+01, -2.504490221988321e+01, -2.504600007345829e+01, -2.504600007345829e+01, -3.994588913220373e+00, -3.994646144561998e+00, -3.996382431861739e+00, -3.994235973274547e+00, -3.994635365776501e+00, -3.994635365776501e+00, -7.201066546164228e-01, -7.182069095440681e-01, -6.644020754833039e-01, -6.717008217641629e-01, -7.194199285473746e-01, -7.194199285473746e-01, -1.496452268345094e-01, -1.561272771765419e-01, -8.977520525552427e-01, -3.533926013720809e-02, -1.516608954966422e-01, -1.516608954966422e-01, 3.446336329171632e-01, 3.387554908396562e-01, 2.129341665431011e-01, 4.741845049319694e-01, 3.356579814043623e-01, 3.356579814043623e-01, -6.192350279767533e+00, -6.195325302626184e+00, -6.192653864896158e+00, -6.194967156687191e+00, -6.193877372548542e+00, -6.193877372548542e+00, -2.009159422564407e+00, -2.032023912550705e+00, -1.991060723177088e+00, -2.009025750167368e+00, -2.047782077204863e+00, -2.047782077204863e+00, -6.741967885749727e-01, -7.674892021813440e-01, -6.369379373686894e-01, -6.930714877233086e-01, -7.058474133567503e-01, -7.058474133567503e-01, 6.302693851702813e-02, -9.882560088395470e-02, 5.420279594021783e-02, -2.334155627926024e+00, 6.936784807465664e-03, 6.936784807465664e-03, 4.695473332467223e-01, 4.545281444525786e-01, 3.516281572815988e-01, 1.403751639165782e-01, 4.118462198232753e-01, 4.118462198232755e-01, -7.374978807331597e-01, -7.265984421074392e-01, -7.304981174816331e-01, -7.335168374425332e-01, -7.320064249501307e-01, -7.320064249501307e-01, -7.149498520651093e-01, -5.576577575359781e-01, -6.049771448405010e-01, -6.480035065156163e-01, -6.264244681911129e-01, -6.264244681911130e-01, -8.035120193687975e-01, -1.723515478306355e-01, -2.483875027647004e-01, -3.798283622026315e-01, -3.127961854722557e-01, -3.127961854722556e-01, -4.987150688913035e-01, 2.474778328686381e-01, 1.804263070458192e-01, -3.731956293030180e-01, 7.606650844255081e-02, 7.606650844255074e-02, 3.588723084318402e-01, 4.997968932046128e-01, 4.656258652940775e-01, 7.116348848468405e-02, 3.808680195687000e-01, 3.808680195687002e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_fd_revlb94_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_fd_revlb94", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-7.089650387666725e-09, -7.089585299317215e-09, -7.089238825788653e-09, -7.090305822449395e-09, -7.089616531230264e-09, -7.089616531230264e-09, -1.001713569275360e-05, -1.001709311272724e-05, -1.001427358469741e-05, -1.001064160427103e-05, -1.001694310730479e-05, -1.001694310730479e-05, -7.285481912456630e-03, -7.312379429067512e-03, -8.046735944147376e-03, -7.803637332458743e-03, -7.295292823120516e-03, -7.295292823120516e-03, -1.235601118417862e+00, -1.176764049729321e+00, -3.570689593307510e-03, -4.145936964219947e+00, -1.217641353097580e+00, -1.217641353097580e+00, -4.628512406263087e+04, -3.946856298476408e+04, -2.569260986925913e+02, -5.357262823132607e+05, -4.113589296285283e+04, -4.113589296285283e+04, -2.023197629276229e-06, -2.022018591026617e-06, -2.023071736834128e-06, -2.022155040323234e-06, -2.022600265185763e-06, -2.022600265185763e-06, -9.729857738760979e-05, -9.469609957848756e-05, -9.827903217193376e-05, -9.621514356890863e-05, -9.430420525334966e-05, -9.430420525334966e-05, -1.296507315552748e-02, -9.502492002854003e-03, -1.596660964194226e-02, -1.372486606097682e-02, -1.118383787153314e-02, -1.118383787153314e-02, -1.301783376506255e+01, -1.151295576269614e+00, -1.380405837477166e+01, -1.110112812949773e-04, -7.681478905544512e+00, -7.681478905544512e+00, -6.103576791563460e+05, -3.891961803248146e+05, -1.213903635864628e+06, -7.731580073432740e+01, -5.662479931383702e+05, -5.662479931383696e+05, -1.175058146017944e-02, -1.193484182632580e-02, -1.186684063353534e-02, -1.181580483876333e-02, -1.184119542736994e-02, -1.184119542736994e-02, -1.340309711063806e-02, -2.266689041375429e-02, -1.926880754153938e-02, -1.668655463144266e-02, -1.794406991081345e-02, -1.794406991081345e-02, -7.856296163811938e-03, -4.741011579407143e-01, -2.447816714695287e-01, -9.510516103178811e-02, -1.528056085033270e-01, -1.528056085033270e-01, -3.416926975769360e-02, -3.322189592042692e+02, -1.118907298915096e+02, -1.206753587860583e-01, -2.924727404964727e+01, -2.924727404964727e+01, -2.574582654737714e+04, -3.210406205562253e+07, -3.721375885762988e+06, -3.535714477435717e+01, -1.040305907645089e+06, -1.040305907645093e+06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
