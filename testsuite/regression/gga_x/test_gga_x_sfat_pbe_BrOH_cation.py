
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_sfat_pbe_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_sfat_pbe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.071087086176916e+01, -2.071089878836182e+01, -2.071108986474229e+01, -2.071067299790686e+01, -2.071088191288119e+01, -2.071088191288119e+01, -3.246059340001245e+00, -3.246025664793468e+00, -3.245332034852510e+00, -3.247195133200911e+00, -3.246102610506188e+00, -3.246102610506188e+00, -5.016281359331092e-01, -5.013895365884996e-01, -4.965437727532266e-01, -5.013272905485989e-01, -5.010809493463622e-01, -5.010809493463622e-01, -6.645909887949850e-02, -6.811847272648389e-02, -6.061123755444091e-01, -3.932619029894335e-02, -6.288712491493374e-02, -6.288712491493371e-02, -7.100140967524286e-06, -8.296505351309701e-06, -1.307706799192451e-03, -1.359103444276268e-06, -3.970479697205581e-06, -3.970479697205581e-06, -4.813340932112537e+00, -4.812821750965654e+00, -4.813327324436781e+00, -4.812868818487934e+00, -4.813072063040286e+00, -4.813072063040286e+00, -1.870765724849095e+00, -1.881319298974641e+00, -1.870196777218054e+00, -1.879534828983869e+00, -1.876872859245041e+00, -1.876872859245041e+00, -4.033483334593300e-01, -4.330690135998760e-01, -3.660012022352732e-01, -3.710197036716749e-01, -4.105994196016802e-01, -4.105994196016802e-01, -1.731545380574634e-02, -6.896965069671088e-02, -1.435550096107028e-02, -1.613415612857478e+00, -2.519126445641896e-02, -2.519126445641896e-02, -6.261080401318824e-07, -1.269631085017338e-06, -5.716582967799989e-07, -5.066447807920322e-03, -1.186469372845986e-06, -1.186469372845986e-06, -3.868170992335541e-01, -3.875703896140575e-01, -3.873186883260961e-01, -3.870955944331080e-01, -3.872077839474036e-01, -3.872077839474036e-01, -3.718684154692578e-01, -3.298163556626649e-01, -3.422254885106256e-01, -3.539397438520133e-01, -3.478964057695579e-01, -3.478964057695579e-01, -4.611830102711219e-01, -1.043736458324774e-01, -1.384581941146630e-01, -2.004079002140859e-01, -1.672313496383339e-01, -1.672313496383339e-01, -2.940455946674268e-01, -1.145374006905435e-03, -2.779911951677871e-03, -1.852979845106774e-01, -9.661516720930458e-03, -9.661516720930500e-03, -1.981478015552503e-05, -2.425118948010401e-08, -2.261541252104064e-07, -8.167148282449910e-03, -9.131780989155203e-07, -9.131780989155178e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_sfat_pbe_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_sfat_pbe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.495333123377942e+01, -2.495330153773428e+01, -2.495344603497171e+01, -2.495338491732181e+01, -2.495378443368589e+01, -2.495387790255199e+01, -2.495248870044250e+01, -2.495222614585861e+01, -2.495340116161661e+01, -2.495286515732725e+01, -2.495340116161661e+01, -2.495286515732725e+01, -3.861767786869990e+00, -3.861918689772031e+00, -3.861806165840826e+00, -3.861962388541215e+00, -3.862791569732897e+00, -3.863073718983554e+00, -3.861735075586699e+00, -3.862017870834850e+00, -3.861012694810381e+00, -3.862966104728633e+00, -3.861012694810381e+00, -3.862966104728633e+00, -6.142447617773131e-01, -6.178644509753763e-01, -6.128783900032444e-01, -6.172937852993902e-01, -5.956661929568701e-01, -5.904832412623469e-01, -5.982053587402204e-01, -5.998637716465396e-01, -6.247558746367097e-01, -5.760192859667643e-01, -6.247558746367097e-01, -5.760192859667643e-01, -9.382966854210276e-02, -9.925625394734985e-02, -9.529778726759308e-02, -1.016004742143488e-01, -7.251026329097892e-01, -7.582126389895824e-01, -6.189330828120851e-02, -6.347921951893050e-02, -1.008495906580684e-01, -3.321774041471289e-02, -1.008495906580684e-01, -3.321774041471285e-02, -1.279862600165316e-05, -1.535192654516233e-05, -1.472306177972597e-05, -1.809286847152036e-05, -2.348630285680638e-03, -2.742111471261383e-03, -2.784314291271057e-06, -2.647510691058890e-06, -9.090894713308371e-06, -1.677409015887609e-06, -9.090894713308371e-06, -1.677409015887609e-06, -6.009225718744749e+00, -6.007680428515642e+00, -6.011893694023560e+00, -6.010257874392567e+00, -6.009373403844995e+00, -6.007768620521751e+00, -6.011662676415860e+00, -6.010110107416936e+00, -6.010592578674058e+00, -6.008974945478180e+00, -6.010592578674058e+00, -6.008974945478180e+00, -2.040345519877800e+00, -2.040233319566220e+00, -2.057201109815964e+00, -2.056583022823127e+00, -2.025249660888995e+00, -2.029402686860069e+00, -2.039592645069116e+00, -2.043989823455390e+00, -2.061571492265155e+00, -2.050405716410410e+00, -2.061571492265155e+00, -2.050405716410410e+00, -5.324332546869999e-01, -5.307173828993468e-01, -6.033239392212565e-01, -6.038689235940025e-01, -4.691259657735641e-01, -4.920419378818871e-01, -5.056386447176442e-01, -5.267363583052211e-01, -5.608823130053102e-01, -5.257889756958044e-01, -5.608823130053102e-01, -5.257889756958044e-01, -3.029516119534253e-02, -3.091821442419678e-02, -1.015046729075810e-01, -1.022852508511101e-01, -2.408689982871742e-02, -2.716095109284194e-02, -2.141621451248883e+00, -2.140627700200707e+00, -4.012591156866238e-02, -4.450920254660991e-02, -4.012591156866238e-02, -4.450920254660991e-02, -1.175961825425845e-06, -1.319857249641080e-06, -2.480330357987844e-06, -2.594600700977059e-06, -1.037457493530135e-06, -1.232191720435658e-06, -9.526202297628234e-03, -9.682992477279655e-03, -1.105307735150328e-06, -2.861682294479366e-06, -1.105307735150327e-06, -2.861682294479366e-06, -5.506782591749008e-01, -5.534262927047859e-01, -5.427069020554107e-01, -5.454853335259168e-01, -5.454512959746807e-01, -5.482373509791020e-01, -5.477834402354019e-01, -5.505264757284570e-01, -5.466123957737208e-01, -5.493763443791753e-01, -5.466123957737208e-01, -5.493763443791753e-01, -5.333512213498299e-01, -5.355914935838966e-01, -4.190252840131593e-01, -4.214335204003992e-01, -4.481736001639722e-01, -4.508969061582397e-01, -4.804634023432502e-01, -4.826970955956673e-01, -4.637950787861362e-01, -4.660721105390744e-01, -4.637950787861362e-01, -4.660721105390744e-01, -6.382038492741767e-01, -6.398178437373427e-01, -1.433608706835693e-01, -1.444665143820103e-01, -1.818601627752572e-01, -1.841044677709736e-01, -2.634430269595411e-01, -2.654659108903918e-01, -2.187775612100116e-01, -2.186108663497247e-01, -2.187775612100117e-01, -2.186108663497247e-01, -3.758928928779010e-01, -3.793861683986904e-01, -2.225662318584355e-03, -2.269409333312729e-03, -5.116768429736876e-03, -5.600060532762698e-03, -2.493042900213460e-01, -2.547233966109839e-01, -1.649292250700789e-02, -1.875186189906717e-02, -1.649292250700789e-02, -1.875186189906711e-02, -3.736843511670089e-05, -4.156710003367064e-05, -4.833503301571598e-08, -4.866719736601298e-08, -4.071262389201388e-07, -4.898092418555063e-07, -1.481841289523879e-02, -1.542952737264986e-02, -9.393898205155931e-07, -2.203859750548924e-06, -9.393898205155909e-07, -2.203859750548918e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_sfat_pbe_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_sfat_pbe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.386628487786344e-08, 0.000000000000000e+00, -1.386636138317589e-08, -1.386617388368514e-08, 0.000000000000000e+00, -1.386628070953473e-08, -1.386569338494467e-08, 0.000000000000000e+00, -1.386562730246256e-08, -1.386695007195000e-08, 0.000000000000000e+00, -1.386722805549068e-08, -1.386622501171546e-08, 0.000000000000000e+00, -1.386649590975008e-08, -1.386622501171546e-08, 0.000000000000000e+00, -1.386649590975008e-08, -1.719681259490736e-05, 0.000000000000000e+00, -1.720204468767812e-05, -1.719714334025670e-05, 0.000000000000000e+00, -1.720278001122239e-05, -1.720924533031027e-05, 0.000000000000000e+00, -1.721202588230217e-05, -1.717743755930791e-05, 0.000000000000000e+00, -1.718124386128812e-05, -1.720633483269596e-05, 0.000000000000000e+00, -1.719056699350159e-05, -1.720633483269596e-05, 0.000000000000000e+00, -1.719056699350159e-05, -7.383002531412322e-03, 0.000000000000000e+00, -7.408381142081844e-03, -7.379064901321035e-03, 0.000000000000000e+00, -7.410697215618972e-03, -7.310339047144310e-03, 0.000000000000000e+00, -7.245439823954920e-03, -7.099227912165598e-03, 0.000000000000000e+00, -7.122567863200883e-03, -7.396190551845060e-03, 0.000000000000000e+00, -6.625864131227983e-03, -7.396190551845060e-03, 0.000000000000000e+00, -6.625864131227983e-03, -1.965725071875332e-01, 0.000000000000000e+00, -1.988930747362209e-01, -2.029222469165581e-01, 0.000000000000000e+00, -2.042156009270916e-01, -4.545429664217489e-03, 0.000000000000000e+00, -4.302232457796118e-03, -1.460296382729189e-01, 0.000000000000000e+00, -1.458170299739053e-01, -1.822957282516885e-01, 0.000000000000000e+00, -9.145122112946852e-02, -1.822957282516883e-01, 0.000000000000000e+00, -9.145122112946777e-02, -5.672418140166808e-06, 0.000000000000000e+00, -7.156178606916235e-06, -7.203763281748557e-06, 0.000000000000000e+00, -9.432481631145494e-06, -3.354381105874038e-03, 0.000000000000000e+00, -4.134595134529131e-03, -6.801158461512202e-07, 0.000000000000000e+00, -6.186689853603599e-07, -3.589480008309978e-06, 0.000000000000000e+00, -9.572616131762647e-07, -3.589480008310055e-06, 0.000000000000000e+00, -9.572616131756671e-07, -3.880727283919054e-06, 0.000000000000000e+00, -3.884250764206317e-06, -3.881220464664707e-06, 0.000000000000000e+00, -3.884729166875401e-06, -3.880724821764251e-06, 0.000000000000000e+00, -3.884245798287744e-06, -3.881148464949567e-06, 0.000000000000000e+00, -3.884680769228769e-06, -3.881004072912809e-06, 0.000000000000000e+00, -3.884495822777922e-06, -3.881004072912809e-06, 0.000000000000000e+00, -3.884495822777922e-06, -1.221467878812797e-04, 0.000000000000000e+00, -1.221671548261139e-04, -1.199285283792177e-04, 0.000000000000000e+00, -1.200259087337332e-04, -1.218131091933571e-04, 0.000000000000000e+00, -1.219679925780477e-04, -1.199414832422084e-04, 0.000000000000000e+00, -1.200327634939966e-04, -1.210211100271822e-04, 0.000000000000000e+00, -1.210731756329864e-04, -1.210211100271822e-04, 0.000000000000000e+00, -1.210731756329864e-04, -1.387834164578313e-02, 0.000000000000000e+00, -1.401453319142098e-02, -1.194176907164510e-02, 0.000000000000000e+00, -1.194084819854248e-02, -1.878977369280391e-02, 0.000000000000000e+00, -1.690044597892361e-02, -1.905243904541211e-02, 0.000000000000000e+00, -1.696958710374180e-02, -1.238126246295852e-02, 0.000000000000000e+00, -1.469576801337944e-02, -1.238126246295852e-02, 0.000000000000000e+00, -1.469576801337944e-02, -6.314804832653982e-02, 0.000000000000000e+00, -6.601391311938867e-02, -1.167318783310244e-01, 0.000000000000000e+00, -1.167044975445009e-01, -5.336292799779745e-02, 0.000000000000000e+00, -6.041810908004599e-02, -2.006079702004035e-04, 0.000000000000000e+00, -2.009688082311435e-04, -1.010127697632317e-01, 0.000000000000000e+00, -1.425144594737843e-01, -1.010127697632317e-01, 0.000000000000000e+00, -1.425144594737843e-01, -3.025974559107976e-07, 0.000000000000000e+00, -3.054794281578738e-07, -7.047209713122566e-07, 0.000000000000000e+00, -6.909080295318821e-07, -1.256197619973337e-06, 0.000000000000000e+00, -1.757793108175041e-06, -2.418088498085430e-02, 0.000000000000000e+00, -2.376227150942541e-02, -6.796331882934451e-07, 0.000000000000000e+00, -2.373332192955713e-06, -6.796331882931739e-07, 0.000000000000000e+00, -2.373332192956628e-06, -1.637258585949026e-02, 0.000000000000000e+00, -1.616137398893788e-02, -1.617477653142564e-02, 0.000000000000000e+00, -1.597138755686624e-02, -1.624378410683414e-02, 0.000000000000000e+00, -1.603812825459177e-02, -1.630225754292738e-02, 0.000000000000000e+00, -1.609342017832199e-02, -1.627308365957407e-02, 0.000000000000000e+00, -1.606578545865010e-02, -1.627308365957407e-02, 0.000000000000000e+00, -1.606578545865010e-02, -1.818435370016970e-02, 0.000000000000000e+00, -1.797729323065899e-02, -2.192282502178777e-02, 0.000000000000000e+00, -2.169748233212877e-02, -2.101497850033147e-02, 0.000000000000000e+00, -2.078298446734917e-02, -2.000003109909514e-02, 0.000000000000000e+00, -1.978155486660360e-02, -2.056103337841822e-02, 0.000000000000000e+00, -2.032895716047845e-02, -2.056103337841822e-02, 0.000000000000000e+00, -2.032895716047845e-02, -1.006595352370773e-02, 0.000000000000000e+00, -1.003142720091649e-02, -1.009873203054720e-01, 0.000000000000000e+00, -1.008224896946043e-01, -8.957230765245672e-02, 0.000000000000000e+00, -8.936397962114172e-02, -6.516303941044416e-02, 0.000000000000000e+00, -6.430971246124399e-02, -7.953224785343654e-02, 0.000000000000000e+00, -7.999191393550083e-02, -7.953224785343663e-02, 0.000000000000000e+00, -7.999191393550090e-02, -2.876430055736245e-02, 0.000000000000000e+00, -2.834952045427496e-02, -2.855492751896663e-03, 0.000000000000000e+00, -2.932950616098250e-03, -8.358800808801815e-03, 0.000000000000000e+00, -9.609694583368708e-03, -8.266026650558479e-02, 0.000000000000000e+00, -7.981512454944657e-02, -4.922902755793437e-02, 0.000000000000000e+00, -6.895848402917311e-02, -4.922902755793353e-02, 0.000000000000000e+00, -6.895848402918221e-02, -1.873957083233375e-05, 0.000000000000000e+00, -2.204647628903339e-05, -1.320836028689557e-08, 0.000000000000000e+00, -2.361166025999932e-08, -1.397045134081112e-07, 0.000000000000000e+00, -1.903046629020081e-07, -4.808747358171375e-02, 0.000000000000000e+00, -4.957361354001866e-02, -1.128195002237605e-06, 0.000000000000000e+00, -1.739248066252167e-06, -1.128195002237007e-06, 0.000000000000000e+00, -1.739248066251294e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
