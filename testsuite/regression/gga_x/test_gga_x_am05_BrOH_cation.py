
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_am05_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_am05", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.989028798215932e+01, -1.989033923672987e+01, -1.989059098806804e+01, -1.988982793761573e+01, -1.989022436296946e+01, -1.989022436296946e+01, -3.248553535434465e+00, -3.248552066713377e+00, -3.248598126693571e+00, -3.249135510750432e+00, -3.248630342969292e+00, -3.248630342969292e+00, -6.331143657170228e-01, -6.326470669227191e-01, -6.225520537393158e-01, -6.273220349001851e-01, -6.289110321392639e-01, -6.289110321392639e-01, -1.807656637051376e-01, -1.820586351881909e-01, -7.364782887764805e-01, -1.538883337943774e-01, -1.777564861299917e-01, -1.777564861299915e-01, -4.338265635381610e-02, -4.353272416777645e-02, -8.262502752742197e-02, -3.858018713510365e-02, -3.999030408991091e-02, -3.999030408991087e-02, -4.840215087060777e+00, -4.840956226188379e+00, -4.840253230335942e+00, -4.840907425510756e+00, -4.840588403998948e+00, -4.840588403998948e+00, -1.873190766317418e+00, -1.884761715720572e+00, -1.867994089396659e+00, -1.878154965523828e+00, -1.882197807361234e+00, -1.882197807361234e+00, -5.471704803424204e-01, -5.916673832394947e-01, -5.073685378805959e-01, -5.242967996813995e-01, -5.561472476489385e-01, -5.561472476489385e-01, -1.287892576186585e-01, -1.934269026296750e-01, -1.229233631836673e-01, -1.781861441856516e+00, -1.347491812677360e-01, -1.347491812677360e-01, -3.448964602602819e-02, -3.720233394225717e-02, -2.459136107277551e-02, -9.822818811140915e-02, -3.003085869674934e-02, -3.003085869674935e-02, -5.471550050394290e-01, -5.441300912202852e-01, -5.451765302498848e-01, -5.460535472307163e-01, -5.456128743339994e-01, -5.456128743339994e-01, -5.323149846672781e-01, -4.643666737677776e-01, -4.820639321851404e-01, -5.009802500052344e-01, -4.911045922650765e-01, -4.911045922650765e-01, -6.203269931349125e-01, -2.308811564476220e-01, -2.641345005705381e-01, -3.294484523238471e-01, -2.931065397995700e-01, -2.931065397995700e-01, -4.278475661716140e-01, -8.242024813121157e-02, -9.287959180949770e-02, -3.147044540637569e-01, -1.073031793568401e-01, -1.073031793568401e-01, -4.950439674074852e-02, -2.052507093801303e-02, -2.763336999416941e-02, -1.041923629248287e-01, -2.819251858113619e-02, -2.819251858113616e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_am05_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_am05", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.614153068294767e+01, -2.614149846623064e+01, -2.614163326508129e+01, -2.614157297814702e+01, -2.614195387136916e+01, -2.614203450282922e+01, -2.614079555798315e+01, -2.614055806583864e+01, -2.614159224754646e+01, -2.614114268051141e+01, -2.614159224754646e+01, -2.614114268051141e+01, -4.220560341939310e+00, -4.220678367842989e+00, -4.220595536601789e+00, -4.220716543836236e+00, -4.221478770833431e+00, -4.221734649270579e+00, -4.220627836581407e+00, -4.220880692223484e+00, -4.219785339456271e+00, -4.221744193502888e+00, -4.219785339456271e+00, -4.221744193502888e+00, -7.928915442352122e-01, -7.984888478723183e-01, -7.908119840767436e-01, -7.976841074632822e-01, -7.630191414768170e-01, -7.534053735374208e-01, -7.637351106382597e-01, -7.668432022679820e-01, -8.082137722338639e-01, -7.145479108232039e-01, -8.082137722338639e-01, -7.145479108232039e-01, -1.787513539193076e-01, -1.873142127368172e-01, -1.818578999039929e-01, -1.918289440423310e-01, -9.123170402625639e-01, -9.536853849532038e-01, -1.318622668785960e-01, -1.337583486965796e-01, -1.870690162432330e-01, -9.595827867224598e-02, -1.870690162432327e-01, -9.595827867224581e-02, -1.490349048310811e-02, -1.536620957937994e-02, -1.514047386573848e-02, -1.566791922787340e-02, -4.291764323634310e-02, -4.450669398162121e-02, -1.195915312916119e-02, -1.191891954027700e-02, -1.412141743483290e-02, -9.626168620199755e-03, -1.412141743483294e-02, -9.626168620199761e-03, -6.405083810428093e+00, -6.403524305572787e+00, -6.406899206460607e+00, -6.405278320313135e+00, -6.405188438931798e+00, -6.403587261134352e+00, -6.406746204995029e+00, -6.405180736734366e+00, -6.406011520038268e+00, -6.404405424471769e+00, -6.406011520038268e+00, -6.404405424471769e+00, -2.264924002202705e+00, -2.264798809248356e+00, -2.285591024601787e+00, -2.284874767111384e+00, -2.240391946545087e+00, -2.247388857770390e+00, -2.258309346032408e+00, -2.265448466182039e+00, -2.294641215932007e+00, -2.277871009529927e+00, -2.294641215932007e+00, -2.277871009529927e+00, -7.161312586090178e-01, -7.142884827621435e-01, -7.876973828406082e-01, -7.881092009303403e-01, -6.461954201401170e-01, -6.718631104352348e-01, -6.853573826966588e-01, -7.080380728853406e-01, -7.472259571841370e-01, -7.092682515964112e-01, -7.472259571841371e-01, -7.092682515964113e-01, -9.252398974433804e-02, -9.326205627002375e-02, -1.768971119761550e-01, -1.778705780729148e-01, -8.447219931965534e-02, -8.846958432335131e-02, -2.373761462293061e+00, -2.372702858698663e+00, -1.045488453260869e-01, -1.106862105225757e-01, -1.045488453260869e-01, -1.106862105225757e-01, -1.007855312473154e-02, -1.045950410316234e-02, -1.144933285417227e-02, -1.165511412703044e-02, -7.897226216959291e-03, -7.985642538183775e-03, -6.128128857487747e-02, -6.170211953406261e-02, -8.790102143625522e-03, -1.015278348946824e-02, -8.790102143625529e-03, -1.015278348946828e-02, -7.280604335425901e-01, -7.308787670476071e-01, -7.232648103080375e-01, -7.261189750678503e-01, -7.250349619496166e-01, -7.278846951931290e-01, -7.264350852418023e-01, -7.292540393072940e-01, -7.257429027990612e-01, -7.285764175016067e-01, -7.257429027990612e-01, -7.285764175016067e-01, -7.085678797538635e-01, -7.109103565392679e-01, -5.836206953959774e-01, -5.865866223229612e-01, -6.229272108564864e-01, -6.260912733179002e-01, -6.603788223947719e-01, -6.627861338962490e-01, -6.418932586617999e-01, -6.444032666864646e-01, -6.418932586617999e-01, -6.444032666864646e-01, -8.250900956599070e-01, -8.265330023065310e-01, -2.294121581001154e-01, -2.309904869080951e-01, -2.852654985326901e-01, -2.890290926222445e-01, -4.079850761045536e-01, -4.105352901711492e-01, -3.432020814851384e-01, -3.433250214707836e-01, -3.432020814851385e-01, -3.433250214707835e-01, -5.356110984628969e-01, -5.400794770562423e-01, -4.269465377031605e-02, -4.288454535428150e-02, -5.242129947288186e-02, -5.359215898524032e-02, -3.984803039498022e-01, -4.052836491938659e-01, -7.293393859545896e-02, -7.594812000190074e-02, -7.293393859545902e-02, -7.594812000190088e-02, -1.831459286152848e-02, -1.860324718236687e-02, -5.603440342283343e-03, -5.125209174702067e-03, -7.929800752670635e-03, -8.056040368941921e-03, -7.005831796354599e-02, -7.107346026737421e-02, -7.754841365537376e-03, -9.707605568428814e-03, -7.754841365537361e-03, -9.707605568428774e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_am05_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_am05", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.918471807670507e-09, 0.000000000000000e+00, -1.918476999358268e-09, -1.918388223872147e-09, 0.000000000000000e+00, -1.918416312365036e-09, -1.918194564521221e-09, 0.000000000000000e+00, -1.918118169802668e-09, -1.919136644794900e-09, 0.000000000000000e+00, -1.919319546894430e-09, -1.918418233113060e-09, 0.000000000000000e+00, -1.918893519706808e-09, -1.918418233113060e-09, 0.000000000000000e+00, -1.918893519706808e-09, -3.547599762689045e-06, 0.000000000000000e+00, -3.544477424117525e-06, -3.547140340053852e-06, 0.000000000000000e+00, -3.543833931064996e-06, -3.534125339826276e-06, 0.000000000000000e+00, -3.530624604941048e-06, -3.554368204691308e-06, 0.000000000000000e+00, -3.550531069814595e-06, -3.551280806488700e-06, 0.000000000000000e+00, -3.538802020259216e-06, -3.551280806488700e-06, 0.000000000000000e+00, -3.538802020259216e-06, -3.522793938118855e-03, 0.000000000000000e+00, -3.387195915074766e-03, -3.571534260985651e-03, 0.000000000000000e+00, -3.405718344126832e-03, -4.201827619927120e-03, 0.000000000000000e+00, -4.410666172945841e-03, -4.183932114872321e-03, 0.000000000000000e+00, -4.118452654700918e-03, -3.158202384254537e-03, 0.000000000000000e+00, -5.122609941414546e-03, -3.158202384254537e-03, 0.000000000000000e+00, -5.122609941414546e-03, -9.141072111705282e-01, 0.000000000000000e+00, -8.052282940117553e-01, -8.840362140763237e-01, 0.000000000000000e+00, -7.627765389766865e-01, -1.998678711073913e-03, 0.000000000000000e+00, -1.570117823006225e-03, -2.009955606221154e+00, 0.000000000000000e+00, -1.918428850278155e+00, -7.745404516842974e-01, 0.000000000000000e+00, -5.138631529528928e+00, -7.745404516842953e-01, 0.000000000000000e+00, -5.138631529528928e+00, -1.381360113566485e+04, 0.000000000000000e+00, -1.160813466020853e+04, -1.229864020361413e+04, 0.000000000000000e+00, -1.011820892931376e+04, -8.597134133227885e+01, 0.000000000000000e+00, -7.413191545079147e+01, -5.659773272607811e+04, 0.000000000000000e+00, -5.887568149163650e+04, -1.904503364650247e+04, 0.000000000000000e+00, -1.229810411794633e+05, -1.904503364650248e+04, 0.000000000000000e+00, -1.229810411794634e+05, -3.987158233921722e-07, 0.000000000000000e+00, -3.992363569855428e-07, -3.950164189284731e-07, 0.000000000000000e+00, -3.956575883251254e-07, -3.985236824772550e-07, 0.000000000000000e+00, -3.991229688990411e-07, -3.953491795897447e-07, 0.000000000000000e+00, -3.958716671741973e-07, -3.968100001395921e-07, 0.000000000000000e+00, -3.974366577255444e-07, -3.968100001395921e-07, 0.000000000000000e+00, -3.974366577255444e-07, -5.392548565454416e-05, 0.000000000000000e+00, -5.393716486261840e-05, -5.207888183167060e-05, 0.000000000000000e+00, -5.214260185805337e-05, -5.600405502900113e-05, 0.000000000000000e+00, -5.541801363358743e-05, -5.436733166520733e-05, 0.000000000000000e+00, -5.377532386125047e-05, -5.133931853328039e-05, 0.000000000000000e+00, -5.277358880022734e-05, -5.133931853328039e-05, 0.000000000000000e+00, -5.277358880022734e-05, -3.887495083087172e-03, 0.000000000000000e+00, -3.919972927303057e-03, -6.711466947482302e-04, 0.000000000000000e+00, -6.435175417561683e-04, -6.562855405685809e-03, 0.000000000000000e+00, -5.316398282084289e-03, -1.695480224223711e-03, 0.000000000000000e+00, -1.541726230325887e-03, -2.962678127801777e-03, 0.000000000000000e+00, -3.780830119941650e-03, -2.962678127801692e-03, 0.000000000000000e+00, -3.780830119941610e-03, -5.362415167245141e+00, 0.000000000000000e+00, -5.259630538037548e+00, -7.369999656357982e-01, 0.000000000000000e+00, -7.251007357522641e-01, -7.276362857499232e+00, 0.000000000000000e+00, -6.273568176450770e+00, -7.370953256757069e-06, 0.000000000000000e+00, -7.367751081936502e-06, -3.888666003558598e+00, 0.000000000000000e+00, -3.564709838069345e+00, -3.888666003558598e+00, 0.000000000000000e+00, -3.564709838069345e+00, -1.409803413102594e+05, 0.000000000000000e+00, -1.212002386375451e+05, -6.672454023269785e+04, 0.000000000000000e+00, -6.247092105928081e+04, -2.527952465474521e+05, 0.000000000000000e+00, -2.218422387995801e+05, -2.241690742791368e+01, 0.000000000000000e+00, -2.178398481808282e+01, -1.940032434821920e+05, 0.000000000000000e+00, -7.877764128212559e+04, -1.940032434821920e+05, 0.000000000000000e+00, -7.877764128212543e+04, -1.854599314672510e-04, 0.000000000000000e+00, -1.741411866767543e-04, -8.771566067134265e-04, 0.000000000000000e+00, -8.403143645802338e-04, -6.062687791912058e-04, 0.000000000000000e+00, -5.770776592835558e-04, -3.993463377833176e-04, 0.000000000000000e+00, -3.807110942451525e-04, -4.999895304673790e-04, 0.000000000000000e+00, -4.762861344807024e-04, -4.999895304673790e-04, 0.000000000000000e+00, -4.762861344807024e-04, -5.967007210078429e-05, 0.000000000000000e+00, -5.801674877513056e-05, -1.187838811395679e-02, 0.000000000000000e+00, -1.160420235688039e-02, -7.777328168672494e-03, 0.000000000000000e+00, -7.544779394277627e-03, -3.945933816090417e-03, 0.000000000000000e+00, -3.856578556783526e-03, -5.800339201345104e-03, 0.000000000000000e+00, -5.676721322295321e-03, -5.800339201345104e-03, 0.000000000000000e+00, -5.676721322295321e-03, -6.367838057998159e-04, 0.000000000000000e+00, -5.984937062832026e-04, -3.306070471756659e-01, 0.000000000000000e+00, -3.242713028083252e-01, -1.744506642751287e-01, 0.000000000000000e+00, -1.682343300782633e-01, -5.102785878505489e-02, 0.000000000000000e+00, -4.971028820297996e-02, -9.850613750184341e-02, 0.000000000000000e+00, -9.855809520743235e-02, -9.850613750184303e-02, 0.000000000000000e+00, -9.855809520743278e-02, -1.686228179242406e-02, 0.000000000000000e+00, -1.622511340388324e-02, -8.808129767167082e+01, 0.000000000000000e+00, -8.647342987036608e+01, -3.885475070733548e+01, 0.000000000000000e+00, -3.575664355428076e+01, -5.211394658405696e-02, 0.000000000000000e+00, -4.795117788546145e-02, -1.253551454028085e+01, 0.000000000000000e+00, -1.144187048000953e+01, -1.253551454028082e+01, 0.000000000000000e+00, -1.144187048000954e+01, -4.711416489613208e+03, 0.000000000000000e+00, -4.289492911893309e+03, -4.009724965322775e+06, 0.000000000000000e+00, -4.698001411526080e+06, -4.630622640014859e+05, 0.000000000000000e+00, -3.959540227612497e+05, -1.457288974701866e+01, 0.000000000000000e+00, -1.385848241130971e+01, -2.796194664538848e+05, 0.000000000000000e+00, -1.018457634494741e+05, -2.796194664538852e+05, 0.000000000000000e+00, -1.018457634494745e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
