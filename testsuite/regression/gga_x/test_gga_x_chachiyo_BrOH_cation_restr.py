
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_chachiyo_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_chachiyo", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.103367685249354e+01, -2.103370421998422e+01, -2.103389419407259e+01, -2.103348561330523e+01, -2.103368998745351e+01, -2.103368998745351e+01, -3.488068938459085e+00, -3.488031007397757e+00, -3.487239721883641e+00, -3.489278021725550e+00, -3.488107542955953e+00, -3.488107542955953e+00, -7.002506056712474e-01, -7.002702878915148e-01, -7.028813736885186e-01, -7.076310931507687e-01, -7.057565064168193e-01, -7.057565064168193e-01, -2.218734220639222e-01, -2.221889867047242e-01, -8.082795027572895e-01, -2.017345419343696e-01, -2.071399571175709e-01, -2.071399571175709e-01, -9.000144546379300e-02, -8.987808100601004e-02, -1.414272771231281e-01, -8.289048543808228e-02, -8.230631014645526e-02, -8.230631014645520e-02, -5.055131107443775e+00, -5.054475176393889e+00, -5.055111905625711e+00, -5.054532689475431e+00, -5.054792619748537e+00, -5.054792619748537e+00, -2.124084376020720e+00, -2.133763979493922e+00, -2.125981952617554e+00, -2.134492800917556e+00, -2.128546199930962e+00, -2.128546199930962e+00, -5.831813588976105e-01, -6.045841122539897e-01, -5.439242941116288e-01, -5.391616617386721e-01, -5.889403893543401e-01, -5.889403893543401e-01, -1.839298156138008e-01, -2.472563435710918e-01, -1.777009279357099e-01, -1.818756186767715e+00, -1.825446017905609e-01, -1.825446017905609e-01, -7.477772169671658e-02, -7.984270656872447e-02, -5.222621563757961e-02, -1.520737791205599e-01, -6.317433789139723e-02, -6.317433789139727e-02, -5.515640163725556e-01, -5.554878732130268e-01, -5.541781375312385e-01, -5.530368312175596e-01, -5.536133990801296e-01, -5.536133990801296e-01, -5.344123908972687e-01, -5.126448545737448e-01, -5.192456666914115e-01, -5.253510586277214e-01, -5.220751989283723e-01, -5.220751989283723e-01, -6.350527087690329e-01, -2.854105689096199e-01, -3.151876645133947e-01, -3.673740037969778e-01, -3.380807805322009e-01, -3.380807805322008e-01, -4.731196593302171e-01, -1.427996608263547e-01, -1.520212062321502e-01, -3.435862272726012e-01, -1.562983824632860e-01, -1.562983824632859e-01, -1.004351664568428e-01, -4.577403468096813e-02, -6.031617983582504e-02, -1.540280183885512e-01, -5.938070603671575e-02, -5.938070603671573e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_chachiyo_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_chachiyo", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.523344388868378e+01, -2.523354042502197e+01, -2.523394935087870e+01, -2.523251350530709e+01, -2.523326873613680e+01, -2.523326873613680e+01, -4.057047922649633e+00, -4.057091909866035e+00, -4.058208555907573e+00, -4.057038007408653e+00, -4.057198461792948e+00, -4.057198461792948e+00, -7.627757913370632e-01, -7.614066788685140e-01, -7.277855943090260e-01, -7.344786986865133e-01, -7.335766263840749e-01, -7.335766263840749e-01, -1.772540268247993e-01, -1.809978173358635e-01, -8.950477466127988e-01, -1.264188822822480e-01, -1.458961732812848e-01, -1.458961732812847e-01, -2.292046318758970e-02, -2.301452167269341e-02, -4.275019004951069e-02, -1.999462254542730e-02, -2.043059212168018e-02, -2.043059212168015e-02, -6.213041459593909e+00, -6.215595578206551e+00, -6.213156608741674e+00, -6.215411412789107e+00, -6.214337226129328e+00, -6.214337226129328e+00, -2.174942790848150e+00, -2.194088251296240e+00, -2.155805022928076e+00, -2.172687322540494e+00, -2.194833026074074e+00, -2.194833026074074e+00, -6.887067126270289e-01, -7.741276054238557e-01, -6.338562457959380e-01, -6.815899836231883e-01, -7.027766435974721e-01, -7.027766435974721e-01, -8.483106735424645e-02, -1.704750567065961e-01, -7.863737839203594e-02, -2.333541896916011e+00, -1.007304617161234e-01, -1.007304617161234e-01, -1.767588323186599e-02, -1.929548436894157e-02, -1.286570041623668e-02, -5.560034589749000e-02, -1.555512011129647e-02, -1.555512011129647e-02, -7.242322074789446e-01, -7.124884233774585e-01, -7.164594863164346e-01, -7.198602008142857e-01, -7.181442996692248e-01, -7.181442996692248e-01, -7.071502373488906e-01, -5.608898681511912e-01, -5.999434394332599e-01, -6.406652258860653e-01, -6.197676728479294e-01, -6.197676728479294e-01, -8.103360984846122e-01, -2.227493343192209e-01, -2.777326348417150e-01, -3.924278031520125e-01, -3.304255542810358e-01, -3.304255542810356e-01, -5.155998493529130e-01, -4.252066825619992e-02, -4.934230854749338e-02, -3.854475664813429e-01, -6.750066402712525e-02, -6.750066402712526e-02, -2.618513871074079e-02, -9.959608280642067e-03, -1.401749359291476e-02, -6.378116103275885e-02, -1.459354959697452e-02, -1.459354959697457e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_chachiyo_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_chachiyo", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-7.118166976032546e-09, -7.118126965739699e-09, -7.117861392076936e-09, -7.118458502254958e-09, -7.118158080647998e-09, -7.118158080647998e-09, -9.501805251627911e-06, -9.502129477978791e-06, -9.508704454911159e-06, -9.490076442622715e-06, -9.501277807390149e-06, -9.501277807390149e-06, -6.095317564350389e-03, -6.103470034218619e-03, -6.280622879500239e-03, -6.099359641470550e-03, -6.155970460578151e-03, -6.155970460578151e-03, -8.793444351534896e-01, -8.493906591696261e-01, -3.391378192686778e-03, -1.934086849369353e+00, -1.414941146852936e+00, -1.414941146852936e+00, -1.434537941784863e+04, -1.261382466565119e+04, -8.743575722834619e+01, -6.613620601718337e+04, -3.707941742353475e+04, -3.707941742353478e+04, -2.132314813922257e-06, -2.133583943488652e-06, -2.132353714865020e-06, -2.133474217574551e-06, -2.132967380584328e-06, -2.132967380584328e-06, -7.614533814014281e-05, -7.445798676496003e-05, -7.663180042770562e-05, -7.512185554742266e-05, -7.498342483217174e-05, -7.498342483217174e-05, -1.209099565836264e-02, -1.066119179194274e-02, -1.605613570604041e-02, -1.666138412735996e-02, -1.159279121584300e-02, -1.159279121584300e-02, -5.403750413970081e+00, -7.226957380967609e-01, -6.901722731034954e+00, -1.304911969556925e-04, -3.702662479972060e+00, -3.702662479972060e+00, -1.497422106497232e+05, -7.394394732511838e+04, -2.700102071442272e+05, -2.340282230797366e+01, -1.274515462849910e+05, -1.274515462849908e+05, -1.615478981120556e-02, -1.499038176148042e-02, -1.530207311423764e-02, -1.562493166616242e-02, -1.545456040471841e-02, -1.545456040471841e-02, -1.892143489049817e-02, -2.114688115252665e-02, -1.940749867946222e-02, -1.826881910530715e-02, -1.879695559823088e-02, -1.879695559823088e-02, -8.725446218999637e-03, -3.327474917495540e-01, -1.877801277226657e-01, -8.177538794835620e-02, -1.247144192269481e-01, -1.247144192269481e-01, -2.923948615396229e-02, -9.616107753537426e+01, -4.033433601720741e+01, -1.029460481014491e-01, -1.231716574935734e+01, -1.231716574935733e+01, -5.089135042713029e+03, -5.023443242089972e+06, -4.913792786249090e+05, -1.471717153704222e+01, -1.700104116164561e+05, -1.700104116164567e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
