
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_am05_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_am05", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.989028798212982e+01, -1.989033923666638e+01, -1.989059098798310e+01, -1.988982793691577e+01, -1.989022436015791e+01, -1.989022436015791e+01, -3.248553524434060e+00, -3.248552054220868e+00, -3.248598116052787e+00, -3.249135497483427e+00, -3.248630071327105e+00, -3.248630071327105e+00, -6.331033502502109e-01, -6.326306595640947e-01, -6.225220455325537e-01, -6.273188718040289e-01, -6.260047664208912e-01, -6.260047664208912e-01, -1.806568591183554e-01, -1.819163128489646e-01, -7.359832124134247e-01, -1.538773590419471e-01, -1.629644832208846e-01, -1.629644832208846e-01, -4.336422344265142e-02, -4.350883345816356e-02, -8.258077056244884e-02, -3.857873636346623e-02, -3.892495889702519e-02, -3.892495889702519e-02, -4.840214948830513e+00, -4.840956079635181e+00, -4.840253086396724e+00, -4.840907286305258e+00, -4.840588259851578e+00, -4.840588259851578e+00, -1.873190741348015e+00, -1.884761623810091e+00, -1.867988903261177e+00, -1.878149634034506e+00, -1.882168554101125e+00, -1.882168554101125e+00, -5.471681591637165e-01, -5.916672193428125e-01, -5.070386665652699e-01, -5.240176113800098e-01, -5.554335305811918e-01, -5.554335305811918e-01, -1.287863456828018e-01, -1.934251661570521e-01, -1.228374591334235e-01, -1.781861261550041e+00, -1.345694181781756e-01, -1.345694181781756e-01, -3.448193749486121e-02, -3.719479591375239e-02, -2.458446187594252e-02, -9.822581375634026e-02, -2.972950969513026e-02, -2.972950969513025e-02, -5.471509275413109e-01, -5.441259353388511e-01, -5.451723743495991e-01, -5.460494701993185e-01, -5.456087594384087e-01, -5.456087594384087e-01, -5.323120852304660e-01, -4.643622872649467e-01, -4.820589955328910e-01, -5.009771435658802e-01, -4.911011949206945e-01, -4.911011949206945e-01, -6.203258394991942e-01, -2.308780856846097e-01, -2.641218867625544e-01, -3.294434378419130e-01, -2.931051591569894e-01, -2.931051591569894e-01, -4.278352391680165e-01, -8.241953226731638e-02, -9.285794476978321e-02, -3.146650355067252e-01, -1.072030304854631e-01, -1.072030304854631e-01, -4.949341405194695e-02, -2.052935716055818e-02, -2.762457639655347e-02, -1.041834621710551e-01, -2.791360336956055e-02, -2.791360336956051e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_am05_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_am05", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.614151457464667e+01, -2.614160312171121e+01, -2.614199418724359e+01, -2.614067681283680e+01, -2.614136746945724e+01, -2.614136746945724e+01, -4.220619375326410e+00, -4.220656063212208e+00, -4.221606733697654e+00, -4.220754293223894e+00, -4.220765105198641e+00, -4.220765105198641e+00, -7.957057313539633e-01, -7.942708120609809e-01, -7.582438817467700e-01, -7.652925092936516e-01, -7.643958994435238e-01, -7.643958994435238e-01, -1.831013679171518e-01, -1.869354325972050e-01, -9.336014169427982e-01, -1.328162238464427e-01, -1.515560458699481e-01, -1.515560458699481e-01, -1.514342811081278e-02, -1.541492299052965e-02, -4.373339219148343e-02, -1.193882845763247e-02, -1.278259466425433e-02, -1.278259466425429e-02, -6.404304151367412e+00, -6.406088868476854e+00, -6.404387950945976e+00, -6.405963565115483e+00, -6.405208575004724e+00, -6.405208575004724e+00, -2.264861451304245e+00, -2.285232996275180e+00, -2.243895332184531e+00, -2.261884167058007e+00, -2.286287308133864e+00, -2.286287308133864e+00, -7.152123952424979e-01, -7.879038294905252e-01, -6.592851201927432e-01, -6.968797883901506e-01, -7.287141893166936e-01, -7.287141893166936e-01, -9.289372805825266e-02, -1.773848558715722e-01, -8.651628152683033e-02, -2.373232279410397e+00, -1.076114874696984e-01, -1.076114874696984e-01, -1.027638748658393e-02, -1.155247544883586e-02, -7.940503421435693e-03, -6.149234534552045e-02, -9.592282573762529e-03, -9.592282573762547e-03, -7.294723541985121e-01, -7.246948413067490e-01, -7.264627346748415e-01, -7.278473462994925e-01, -7.271625002163200e-01, -7.271625002163200e-01, -7.097410545628298e-01, -5.851074957879505e-01, -6.245138680376103e-01, -6.615847898279061e-01, -6.431508480506460e-01, -6.431508480506460e-01, -8.258137459310573e-01, -2.302032354725444e-01, -2.871564701330923e-01, -4.092642568205607e-01, -3.432654784714994e-01, -3.432654784714990e-01, -5.378597513416705e-01, -4.278990417988210e-02, -5.301399881996639e-02, -4.019228159088771e-01, -7.444143921740774e-02, -7.444143921740745e-02, -1.846029443041733e-02, -5.365442113571231e-03, -7.993571901017757e-03, -7.056965501797863e-02, -8.970484229542587e-03, -8.970484229542596e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_am05_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_am05", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-9.592372016806875e-10, -9.592011339262825e-10, -9.590781834498053e-10, -9.596140469315702e-10, -9.593279338571168e-10, -9.593279338571168e-10, -1.773019485850901e-06, -1.772743785464110e-06, -1.766187552335499e-06, -1.776224942401400e-06, -1.772518009989871e-06, -1.772518009989871e-06, -1.727461721570929e-03, -1.744268945773692e-03, -2.153200513452490e-03, -2.075610323821286e-03, -2.085617397531050e-03, -2.085617397531050e-03, -4.284435365805956e-01, -4.099011278467560e-01, -8.858130598807627e-04, -9.816051194066379e-01, -7.138205054055755e-01, -7.138205054055767e-01, -6.306010816260922e+03, -5.549401541833037e+03, -3.979911354602999e+01, -2.885740534887598e+04, -1.624039654496519e+04, -1.624039654496523e+04, -1.994879835530976e-07, -1.976684093476845e-07, -1.994115815495357e-07, -1.978051490366561e-07, -1.985615759775103e-07, -1.985615759775103e-07, -2.696566077369552e-05, -2.605536143558523e-05, -2.785555540726781e-05, -2.703563806468958e-05, -2.602746089139404e-05, -2.602746089139404e-05, -1.951729597233275e-03, -3.285888127526923e-04, -2.946109789763567e-03, -8.088307851188165e-04, -1.667553435028347e-03, -1.667553435028347e-03, -2.655287433511833e+00, -3.655030574597554e-01, -3.368824073077787e+00, -3.684680791843165e-06, -1.863873085689129e+00, -1.863873085689129e+00, -6.516973460778145e+04, -3.227195992184884e+04, -1.181400747674939e+05, -1.104830619855351e+01, -5.576140926362351e+04, -5.576140926362351e+04, -8.984810184717758e-05, -4.292414993784993e-04, -2.957266668695597e-04, -1.949424346676678e-04, -2.439786619536420e-04, -2.439786619536420e-04, -2.940883684196616e-05, -5.870080916947720e-03, -3.829955167431347e-03, -1.950434853090791e-03, -2.869004352148131e-03, -2.869004352148131e-03, -3.085891797427113e-04, -1.637066025719731e-01, -8.565149050341543e-02, -2.518108212043067e-02, -4.926594338367091e-02, -4.926594338367096e-02, -8.269235946663588e-03, -4.363488623093416e+01, -1.862070159447048e+01, -2.497676933841681e-02, -5.987882696325704e+00, -5.987882696325712e+00, -2.245380561679935e+03, -2.164593881651228e+06, -2.134053169197060e+05, -7.103600524017776e+00, -7.436267100320800e+04, -7.436267100320819e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
