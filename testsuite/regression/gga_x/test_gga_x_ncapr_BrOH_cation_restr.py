
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_ncapr_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ncapr", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.101603346316108e+01, -2.101605853620441e+01, -2.101624189674105e+01, -2.101586738289663e+01, -2.101605339474981e+01, -2.101605339474981e+01, -3.490411711371718e+00, -3.490369689793740e+00, -3.489484024684848e+00, -3.491687015339740e+00, -3.490445467929849e+00, -3.490445467929849e+00, -7.033652960186202e-01, -7.034591578155703e-01, -7.079622728239661e-01, -7.126594781692698e-01, -7.107202068416901e-01, -7.107202068416901e-01, -2.242567455017524e-01, -2.246668091323795e-01, -8.110970306311529e-01, -2.019191833817242e-01, -2.084451632086943e-01, -2.084451632086943e-01, -2.414437262855695e-01, -2.329432267963263e-01, -1.702417454957410e-01, -2.995676697188380e-01, -2.564564051585020e-01, -2.564564051585019e-01, -5.046472057909789e+00, -5.045739944039095e+00, -5.046449675026055e+00, -5.045803182808543e+00, -5.046094630428208e+00, -5.046094630428208e+00, -2.140605676293729e+00, -2.149924390749827e+00, -2.143486709023248e+00, -2.151693124056183e+00, -2.144374790836680e+00, -2.144374790836680e+00, -5.831155860431300e-01, -6.033013169253195e-01, -5.442342619491012e-01, -5.379850398548854e-01, -5.885845312633361e-01, -5.885845312633361e-01, -1.836147886775299e-01, -2.485777018505218e-01, -1.779348204045831e-01, -1.814950710915918e+00, -1.818659633173902e-01, -1.818659633173902e-01, -2.973953307941337e-01, -2.859169282742618e-01, -1.695594447578584e-01, -1.582141575997814e-01, -2.056369349875684e-01, -2.056369349875686e-01, -5.508612692273922e-01, -5.543228358436314e-01, -5.531096970549180e-01, -5.520967590737996e-01, -5.526029359275423e-01, -5.526029359275423e-01, -5.340161080296044e-01, -5.147933162916596e-01, -5.197823150958603e-01, -5.245789926590484e-01, -5.218848711547449e-01, -5.218848711547449e-01, -6.336818956996048e-01, -2.883028587368975e-01, -3.188985261111338e-01, -3.694183365562134e-01, -3.413719493150669e-01, -3.413719493150669e-01, -4.752115283850475e-01, -1.762984791285032e-01, -1.688654381086795e-01, -3.445214775051657e-01, -1.568849854216861e-01, -1.568849854216862e-01, -2.308186586715718e-01, -2.559057309009818e-01, -2.587206140118957e-01, -1.554628838987434e-01, -1.952196231064414e-01, -1.952196231064413e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_ncapr_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ncapr", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.500819529977578e+01, -2.500829877598155e+01, -2.500872622075792e+01, -2.500718738405977e+01, -2.500799833134182e+01, -2.500799833134182e+01, -4.006680196729099e+00, -4.006732495896493e+00, -4.008040628762265e+00, -4.006528290907624e+00, -4.006839487856938e+00, -4.006839487856938e+00, -7.501592159376449e-01, -7.487866384668025e-01, -7.163594666763319e-01, -7.228555346691294e-01, -7.219166123470114e-01, -7.219166123470114e-01, -1.831116251350225e-01, -1.861053223733720e-01, -8.807079969424773e-01, -1.346530679236840e-01, -1.545382148922499e-01, -1.545382148922498e-01, 1.089252792131620e-01, 1.051607273602931e-01, 2.952592053613241e-02, 1.304523325911374e-01, 1.143060406688532e-01, 1.143060406688532e-01, -6.176496296058712e+00, -6.179461739889963e+00, -6.176628371937127e+00, -6.179246322377593e+00, -6.178001628593753e+00, -6.178001628593753e+00, -2.142289653217723e+00, -2.160532128165973e+00, -2.125042711394849e+00, -2.141017529289094e+00, -2.160889245292621e+00, -2.160889245292621e+00, -6.812786978532257e-01, -7.732303380719351e-01, -6.261094416160389e-01, -6.799069806209106e-01, -6.960492110758172e-01, -6.960492110758172e-01, -7.556891513942306e-02, -1.810544031226548e-01, -6.559440227944860e-02, -2.331269418221853e+00, -1.042605337414764e-01, -1.042605337414764e-01, 1.270204628184027e-01, 1.247192542044927e-01, 7.516126045295499e-02, -2.181455970401385e-02, 9.111946462902981e-02, 9.111946462902976e-02, -7.245296423901085e-01, -7.117743821710073e-01, -7.162034975287983e-01, -7.199137393391972e-01, -7.180527849086901e-01, -7.180527849086901e-01, -7.074520849818243e-01, -5.516700205890758e-01, -5.921069647450367e-01, -6.362613919805609e-01, -6.134549426209571e-01, -6.134549426209571e-01, -8.091290744930963e-01, -2.313713700395244e-01, -2.802571036655403e-01, -3.858902425169616e-01, -3.270288264718521e-01, -3.270288264718521e-01, -5.070764567066429e-01, 3.598497281618397e-02, 7.237884534552503e-03, -3.795302434877528e-01, -5.369817110233120e-02, -5.369817110233125e-02, 1.035957256547417e-01, 1.001326859577488e-01, 1.086148353366360e-01, -4.583546005918555e-02, 8.637748467443382e-02, 8.637748467443380e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_ncapr_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ncapr", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-7.628900309062650e-09, -7.628843019665592e-09, -7.628517447773672e-09, -7.629371258020586e-09, -7.628933950827686e-09, -7.628933950827686e-09, -1.035788737689030e-05, -1.035815683733626e-05, -1.036336783395648e-05, -1.034644318596570e-05, -1.035721172931537e-05, -1.035721172931537e-05, -6.693447332558784e-03, -6.701175673941572e-03, -6.826550167630610e-03, -6.634150833811834e-03, -6.698415855105053e-03, -6.698415855105053e-03, -8.594713328796647e-01, -8.360975912978568e-01, -3.727371313166194e-03, -1.825715461202143e+00, -1.339988647285629e+00, -1.339988647285629e+00, -6.366519429294477e+04, -5.416299179018410e+04, -1.538105248367479e+02, -3.871149902496753e+05, -1.894209845224874e+05, -1.894209845224874e+05, -2.233441725019963e-06, -2.233343940958448e-06, -2.233423828769432e-06, -2.233337759692677e-06, -2.233400041838819e-06, -2.233400041838819e-06, -8.248121171130979e-05, -8.076109336014953e-05, -8.273920044411672e-05, -8.121409050663958e-05, -8.140063074905742e-05, -8.140063074905742e-05, -1.308968266209703e-02, -1.039015786244165e-02, -1.748998460403616e-02, -1.671239458808460e-02, -1.247169101813214e-02, -1.247169101813214e-02, -5.701618257472303e+00, -6.826681469329908e-01, -7.483990498395686e+00, -1.264944302915701e-04, -3.587558352898034e+00, -3.587558352898034e+00, -9.557396698800104e+05, -4.292187929430177e+05, -1.432782885857735e+06, -3.007755961442412e+01, -6.779283668801830e+05, -6.779283668801829e+05, -1.437210453230800e-02, -1.454360869381290e-02, -1.450536020438303e-02, -1.445948218442160e-02, -1.448452678737601e-02, -1.448452678737601e-02, -1.601214636521103e-02, -2.323066932972884e-02, -2.120405256777982e-02, -1.929964842658683e-02, -2.028897880790119e-02, -2.028897880790119e-02, -8.576655228043403e-03, -3.226982076498113e-01, -1.909731115436391e-01, -8.955239361085299e-02, -1.327817677534441e-01, -1.327817677534441e-01, -3.211012426797964e-02, -1.762552083717156e+02, -6.112297415981620e+01, -1.130955613467178e-01, -1.359214732490230e+01, -1.359214732490231e+01, -1.943253046501524e+04, -4.340987374906947e+07, -3.356385319693091e+06, -1.678135082389779e+01, -9.126184774512264e+05, -9.126184774512297e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
