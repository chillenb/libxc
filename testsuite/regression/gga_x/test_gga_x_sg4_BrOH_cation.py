
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_sg4_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_sg4", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.101508363555107e+01, -2.101511251989803e+01, -2.101530670421202e+01, -2.101487560267595e+01, -2.101509214288766e+01, -2.101509214288766e+01, -3.480479273199889e+00, -3.480445582898664e+00, -3.479751716771958e+00, -3.481618690444432e+00, -3.480523012391380e+00, -3.480523012391380e+00, -6.949037765627251e-01, -6.947822867938613e-01, -6.928503512032453e-01, -6.977768080925610e-01, -6.971115464309359e-01, -6.971115464309359e-01, -2.068058664562855e-01, -2.081668146864024e-01, -8.038895641993736e-01, -1.764307394682833e-01, -2.032533006508361e-01, -2.032533006508361e-01, -1.011159533600583e-02, -1.064829602517423e-02, -5.860604532671390e-02, -5.830112786758799e-03, -8.137830703904980e-03, -8.137830703904980e-03, -5.053106835068956e+00, -5.052482241919817e+00, -5.053088948783031e+00, -5.052537401564699e+00, -5.052784434859449e+00, -5.052784434859449e+00, -2.090095970868801e+00, -2.101024210737605e+00, -2.088643927007692e+00, -2.098325171128405e+00, -2.096812719193081e+00, -2.096812719193081e+00, -5.823456166068288e-01, -6.043836228191140e-01, -5.431142927244264e-01, -5.392831106966118e-01, -5.890162089691331e-01, -5.890162089691332e-01, -1.435548214677355e-01, -2.216656013764543e-01, -1.349561493195976e-01, -1.818133595975285e+00, -1.541669787421085e-01, -1.541669787421085e-01, -4.501036564286219e-03, -5.699285895058723e-03, -4.364555024886110e-03, -9.421646060685987e-02, -5.482605672144998e-03, -5.482605672145000e-03, -5.513746498641492e-01, -5.553026724463764e-01, -5.539774661274612e-01, -5.528306772849225e-01, -5.534086390499209e-01, -5.534086390499209e-01, -5.342821551840469e-01, -5.089786293326308e-01, -5.179209495911936e-01, -5.250859371052997e-01, -5.214347290888022e-01, -5.214347290888022e-01, -6.348553433232927e-01, -2.642849744882076e-01, -3.008570823241464e-01, -3.637156563890399e-01, -3.299689435072189e-01, -3.299689435072189e-01, -4.695425830539562e-01, -5.602532088471402e-02, -7.628864262027049e-02, -3.420089060800375e-01, -1.163933772457389e-01, -1.163933772457389e-01, -1.425279816402930e-02, -1.523311716755580e-03, -3.203515640455265e-03, -1.105360674026402e-01, -5.034841091206334e-03, -5.034841091206331e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_sg4_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_sg4", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.534960761598833e+01, -2.534957639353472e+01, -2.534970732048638e+01, -2.534964881508158e+01, -2.535001864573704e+01, -2.535009706468397e+01, -2.534889287653112e+01, -2.534866211726235e+01, -2.534966746811536e+01, -2.534923006692398e+01, -2.534966746811536e+01, -2.534923006692398e+01, -4.102512701127456e+00, -4.102541008836969e+00, -4.102536070140580e+00, -4.102561834939729e+00, -4.103078439538396e+00, -4.103245041641759e+00, -4.102802399205514e+00, -4.102952121488237e+00, -4.101793533777482e+00, -4.103510758786167e+00, -4.101793533777482e+00, -4.103510758786167e+00, -7.860543063483849e-01, -7.892079500971342e-01, -7.848361118682855e-01, -7.886828499942673e-01, -7.692847578620099e-01, -7.645603232546923e-01, -7.724388912471113e-01, -7.739271397965973e-01, -7.954759570498567e-01, -7.499162023553290e-01, -7.954759570498567e-01, -7.499162023553290e-01, -2.013786162412502e-01, -2.095705556369592e-01, -2.040879472429676e-01, -2.134070831494227e-01, -9.029821713988230e-01, -9.342898301420772e-01, -1.506835497138977e-01, -1.527870932867556e-01, -2.103910872569675e-01, -1.285003123909773e-01, -2.103910872569674e-01, -1.285003123909772e-01, -1.303552526404152e-02, -1.385151193271443e-02, -1.365939334172721e-02, -1.463227211616985e-02, -7.559860512031738e-02, -7.976542048030380e-02, -7.836840232391127e-03, -7.706275218415561e-03, -1.162931703401435e-02, -6.618222383882415e-03, -1.162931703401435e-02, -6.618222383882415e-03, -6.221815360347869e+00, -6.220280788734194e+00, -6.224069804989061e+00, -6.222458413345331e+00, -6.221941827960785e+00, -6.220356514938373e+00, -6.223876158109358e+00, -6.222334701438331e+00, -6.222968312385760e+00, -6.221373650741209e+00, -6.222968312385760e+00, -6.221373650741209e+00, -2.302764140624492e+00, -2.302649404445893e+00, -2.319134725025271e+00, -2.318517213621593e+00, -2.290211702335689e+00, -2.293657776012917e+00, -2.304300596892600e+00, -2.307961424004707e+00, -2.321498073110690e+00, -2.312270212402626e+00, -2.321498073110690e+00, -2.312270212402626e+00, -6.948689993299513e-01, -6.930658136811997e-01, -7.732764844554193e-01, -7.739881117855870e-01, -6.284260004699496e-01, -6.524850236572872e-01, -6.701399641719198e-01, -6.920391313717890e-01, -7.246036643517838e-01, -6.878668026225769e-01, -7.246036643517839e-01, -6.878668026225770e-01, -1.430226216581094e-01, -1.414856932445851e-01, -2.017968461937312e-01, -2.028997786506927e-01, -1.426016660320581e-01, -1.414560859781868e-01, -2.332568649667045e+00, -2.331578082854998e+00, -1.310487448838677e-01, -1.286658362965171e-01, -1.310487448838677e-01, -1.286658362965171e-01, -5.879224224121525e-03, -6.109937301221693e-03, -7.540413488072453e-03, -7.654542185475993e-03, -5.638412473910610e-03, -5.971195547303512e-03, -1.199385653956678e-01, -1.207929382108601e-01, -5.758895647814415e-03, -7.908427338489404e-03, -5.758895647814416e-03, -7.908427338489408e-03, -7.226590635882687e-01, -7.256027437724044e-01, -7.105399315830372e-01, -7.135309525902954e-01, -7.145730628577796e-01, -7.175774992913608e-01, -7.181162959962795e-01, -7.210549460820275e-01, -7.163242425056463e-01, -7.192953592487142e-01, -7.163242425056463e-01, -7.192953592487142e-01, -7.059992154686209e-01, -7.083552331336119e-01, -5.769533349653474e-01, -5.794678655806704e-01, -6.062859533191656e-01, -6.091392327150148e-01, -6.408681285048328e-01, -6.432445792741293e-01, -6.226253008603894e-01, -6.250352170460171e-01, -6.226253008603894e-01, -6.250352170460171e-01, -8.088760326390289e-01, -8.107570869434229e-01, -2.589261274580809e-01, -2.605088426672219e-01, -3.111522591216938e-01, -3.141802464490456e-01, -4.071617758341838e-01, -4.093968943758320e-01, -3.569721144479643e-01, -3.567989815259527e-01, -3.569721144479643e-01, -3.567989815259527e-01, -5.304672660218193e-01, -5.341335333649274e-01, -7.422235873696885e-02, -7.472405735156037e-02, -9.912924384419389e-02, -1.022338225803495e-01, -3.908610208571262e-01, -3.968871823197829e-01, -1.305513220500969e-01, -1.231852264785732e-01, -1.305513220500968e-01, -1.231852264785730e-01, -1.864411026875001e-02, -1.931956074808604e-02, -2.028746362222712e-03, -2.033377910504861e-03, -4.127957528165930e-03, -4.390397624345442e-03, -1.269681942587366e-01, -1.276940986908107e-01, -5.454810105412995e-03, -7.248764759690492e-03, -5.454810105412991e-03, -7.248764759690487e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_sg4_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_sg4", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.352262271550149e-08, 0.000000000000000e+00, -1.352270372763329e-08, -1.352259035468778e-08, 0.000000000000000e+00, -1.352268013515724e-08, -1.352226191866148e-08, 0.000000000000000e+00, -1.352227247958056e-08, -1.352263311616676e-08, 0.000000000000000e+00, -1.352274378309577e-08, -1.352261477217815e-08, 0.000000000000000e+00, -1.352238994867520e-08, -1.352261477217815e-08, 0.000000000000000e+00, -1.352238994867520e-08, -1.721928460456908e-05, 0.000000000000000e+00, -1.722872370581716e-05, -1.722013328873543e-05, 0.000000000000000e+00, -1.723024744905881e-05, -1.724755122812582e-05, 0.000000000000000e+00, -1.725434705997656e-05, -1.718895299457039e-05, 0.000000000000000e+00, -1.719732012574464e-05, -1.722745543739810e-05, 0.000000000000000e+00, -1.722006881270738e-05, -1.722745543739810e-05, 0.000000000000000e+00, -1.722006881270738e-05, -9.853830043097117e-03, 0.000000000000000e+00, -9.963339518705322e-03, -9.824945593505012e-03, 0.000000000000000e+00, -9.958304835957325e-03, -9.485868763860534e-03, 0.000000000000000e+00, -9.334507956425949e-03, -9.146458134279556e-03, 0.000000000000000e+00, -9.199801440933438e-03, -1.006157829186898e-02, 0.000000000000000e+00, -8.426233362928142e-03, -1.006157829186898e-02, 0.000000000000000e+00, -8.426233362928142e-03, -1.095834853635622e+00, 0.000000000000000e+00, -9.871016961583662e-01, -1.072847085320881e+00, 0.000000000000000e+00, -9.536037729271640e-01, -5.739675439984626e-03, 0.000000000000000e+00, -5.581121422911450e-03, -2.318218822495736e+00, 0.000000000000000e+00, -2.214340408327111e+00, -9.334717593038672e-01, 0.000000000000000e+00, -4.465542061061067e+00, -9.334717593038671e-01, 0.000000000000000e+00, -4.465542061061063e+00, -4.542965989839772e-01, 0.000000000000000e+00, -4.498452297696372e-01, -4.787804940046891e-01, 0.000000000000000e+00, -4.764752587492287e-01, -3.307419213485402e-01, 0.000000000000000e+00, -3.551749472709465e-01, -4.156210292747021e-01, 0.000000000000000e+00, -4.043268651978509e-01, -4.533667854788794e-01, 0.000000000000000e+00, -1.149520095266548e+00, -4.533667854788805e-01, 0.000000000000000e+00, -1.149520095266551e+00, -4.176182080011230e-06, 0.000000000000000e+00, -4.179852068785247e-06, -4.181278957578313e-06, 0.000000000000000e+00, -4.184783644232377e-06, -4.176412227273869e-06, 0.000000000000000e+00, -4.179983577377830e-06, -4.180786247094949e-06, 0.000000000000000e+00, -4.184464168075983e-06, -4.178834060488364e-06, 0.000000000000000e+00, -4.182336120266939e-06, -4.178834060488364e-06, 0.000000000000000e+00, -4.182336120266939e-06, -1.121717711875780e-04, 0.000000000000000e+00, -1.121905093622642e-04, -1.103494057417352e-04, 0.000000000000000e+00, -1.104355895595712e-04, -1.111122384876298e-04, 0.000000000000000e+00, -1.114645362754372e-04, -1.095562519336456e-04, 0.000000000000000e+00, -1.098532825117765e-04, -1.118952537127559e-04, 0.000000000000000e+00, -1.113840035086326e-04, -1.118952537127559e-04, 0.000000000000000e+00, -1.113840035086326e-04, -2.231521821151218e-02, 0.000000000000000e+00, -2.257532505831987e-02, -2.145319748292766e-02, 0.000000000000000e+00, -2.149064880657392e-02, -3.088390415154135e-02, 0.000000000000000e+00, -2.765982104340026e-02, -3.584281900846512e-02, 0.000000000000000e+00, -3.130819510378649e-02, -1.995564390692257e-02, 0.000000000000000e+00, -2.412765383607873e-02, -1.995564390692257e-02, 0.000000000000000e+00, -2.412765383607875e-02, -3.248469668514097e+00, 0.000000000000000e+00, -3.372875421422074e+00, -8.530862921040966e-01, 0.000000000000000e+00, -8.393943724630328e-01, -3.150592665845028e+00, 0.000000000000000e+00, -3.392517446931804e+00, -2.625427685466041e-04, 0.000000000000000e+00, -2.630637479640064e-04, -3.833143804667249e+00, 0.000000000000000e+00, -3.993459393439952e+00, -3.833143804667249e+00, 0.000000000000000e+00, -3.993459393439952e+00, -5.833329214923439e-01, 0.000000000000000e+00, -5.048960906789163e-01, -5.024077135149342e-01, 0.000000000000000e+00, -4.638584671286342e-01, -2.862378510229224e+00, 0.000000000000000e+00, -3.184707294788324e+00, -1.713167036335091e+00, 0.000000000000000e+00, -1.629292833130757e+00, -1.423086713447662e+00, 0.000000000000000e+00, -1.398598607824586e+00, -1.423086713447659e+00, 0.000000000000000e+00, -1.398598607824584e+00, -3.207316925169684e-02, 0.000000000000000e+00, -3.162342341286047e-02, -3.039239722017865e-02, 0.000000000000000e+00, -2.999083709856201e-02, -3.095881985964552e-02, 0.000000000000000e+00, -3.054496601695966e-02, -3.145235212075660e-02, 0.000000000000000e+00, -3.101713272410424e-02, -3.120373311690792e-02, 0.000000000000000e+00, -3.077905203265828e-02, -3.120373311690792e-02, 0.000000000000000e+00, -3.077905203265828e-02, -3.662745441559137e-02, 0.000000000000000e+00, -3.615394268480712e-02, -3.481758561248594e-02, 0.000000000000000e+00, -3.444775316450869e-02, -3.498751722036521e-02, 0.000000000000000e+00, -3.462375485996610e-02, -3.567630062151206e-02, 0.000000000000000e+00, -3.526144032178323e-02, -3.538372948343082e-02, 0.000000000000000e+00, -3.495669100311594e-02, -3.538372948343082e-02, 0.000000000000000e+00, -3.495669100311594e-02, -1.757579167883373e-02, 0.000000000000000e+00, -1.755730573003778e-02, -3.941211205887699e-01, 0.000000000000000e+00, -3.874631447935078e-01, -2.356123720611212e-01, 0.000000000000000e+00, -2.306175854451675e-01, -1.297752998920971e-01, 0.000000000000000e+00, -1.276946605865446e-01, -1.716261030986176e-01, 0.000000000000000e+00, -1.726984641638337e-01, -1.716261030986177e-01, 0.000000000000000e+00, -1.726984641638338e-01, -4.792060509267956e-02, 0.000000000000000e+00, -4.721600432708691e-02, -2.910476260072864e-01, 0.000000000000000e+00, -2.931931301118357e-01, -4.684674392300436e-01, 0.000000000000000e+00, -5.334780092793675e-01, -1.794073675205117e-01, 0.000000000000000e+00, -1.722528598421267e-01, -3.893082351209985e+00, 0.000000000000000e+00, -5.867285711531122e+00, -3.893082351209995e+00, 0.000000000000000e+00, -5.867285711531146e+00, -3.605731902710255e-01, 0.000000000000000e+00, -3.682045593720124e-01, -1.794217929329195e+00, 0.000000000000000e+00, -3.178276653541476e+00, -1.107577619132071e+00, 0.000000000000000e+00, -1.179146018825832e+00, -4.130815657228124e+00, 0.000000000000000e+00, -4.192273466634165e+00, -2.934510293823009e+00, 0.000000000000000e+00, -1.451679263735938e+00, -2.934510293823013e+00, 0.000000000000000e+00, -1.451679263735942e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
