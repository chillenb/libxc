
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_pbeint_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbeint", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.049949947031580e+01, -2.049953668548064e+01, -2.049975179304375e+01, -2.049919708781228e+01, -2.049948067760813e+01, -2.049948067760813e+01, -3.379233785354526e+00, -3.379210452069352e+00, -3.378754217764571e+00, -3.380189629488321e+00, -3.379287268896073e+00, -3.379287268896073e+00, -6.711987669458146e-01, -6.710416313818771e-01, -6.692198402437500e-01, -6.739406533922255e-01, -6.722725723269332e-01, -6.722725723269332e-01, -2.053787189985454e-01, -2.061912822226627e-01, -7.766405860554966e-01, -1.770282263851119e-01, -1.876161002449471e-01, -1.876161002449471e-01, -1.008744614722920e-02, -1.061654909827983e-02, -5.766340859272095e-02, -5.828257808341075e-03, -7.322536823707301e-03, -7.322536823707301e-03, -4.952129010564287e+00, -4.952078858519500e+00, -4.952134645195853e+00, -4.952090241324425e+00, -4.952099103458482e+00, -4.952099103458482e+00, -2.019671495897909e+00, -2.029885130998915e+00, -2.019203096969633e+00, -2.028170868868768e+00, -2.025594618579877e+00, -2.025594618579877e+00, -5.666010616360467e-01, -5.980262701368045e-01, -5.271368259484615e-01, -5.316312535348617e-01, -5.733661347610971e-01, -5.733661347610971e-01, -1.378527746799181e-01, -2.228694031123873e-01, -1.290159897970709e-01, -1.799956317143428e+00, -1.522652943472668e-01, -1.522652943472668e-01, -4.497166759550583e-03, -5.697596726136944e-03, -4.356245971313620e-03, -9.065912490186384e-02, -5.247941316299052e-03, -5.247941316299052e-03, -5.491952711936866e-01, -5.497017104884436e-01, -5.495215239581651e-01, -5.493699231731866e-01, -5.494449106216509e-01, -5.494449106216509e-01, -5.332554229024337e-01, -4.916918071715062e-01, -5.024402929815771e-01, -5.137707816129652e-01, -5.077474496311954e-01, -5.077474496311954e-01, -6.276203480898334e-01, -2.633282042488539e-01, -2.950797311333994e-01, -3.511746402672331e-01, -3.198155852197451e-01, -3.198155852197451e-01, -4.535208733536805e-01, -5.530676501093116e-02, -7.444947653199982e-02, -3.308100973065078e-01, -1.112047614166138e-01, -1.112047614166138e-01, -1.422957983235898e-02, -1.523263553529505e-03, -3.197186125931836e-03, -1.055269410474304e-01, -4.856041110668762e-03, -4.856041110668758e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_pbeint_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbeint", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.553980106592515e+01, -2.553989779201847e+01, -2.554030889011496e+01, -2.553887017979707e+01, -2.553962672918835e+01, -2.553962672918835e+01, -4.105644453504253e+00, -4.105691111182611e+00, -4.106870101784227e+00, -4.105599673760811e+00, -4.105799365708227e+00, -4.105799365708227e+00, -7.692423950300054e-01, -7.677585835773296e-01, -7.311236013557574e-01, -7.379785782181356e-01, -7.371500035531783e-01, -7.371500035531783e-01, -1.850878016915442e-01, -1.872390869599221e-01, -9.036722548001906e-01, -1.627974889305340e-01, -1.667880885944723e-01, -1.667880885944723e-01, -1.343340709839007e-02, -1.413559716875322e-02, -7.439230133987552e-02, -7.767977181467565e-03, -9.756598474395374e-03, -9.756598474395374e-03, -6.283397483543999e+00, -6.285800675363971e+00, -6.283506572738994e+00, -6.285628174961671e+00, -6.284616698223853e+00, -6.284616698223853e+00, -2.183198506565870e+00, -2.203056998093150e+00, -2.162622813563583e+00, -2.180080787383694e+00, -2.204239007643036e+00, -2.204239007643036e+00, -6.971171436265527e-01, -7.800245844030586e-01, -6.414768484993241e-01, -6.878094132903733e-01, -7.113525782879740e-01, -7.113525782879740e-01, -1.497068099659538e-01, -1.987952944396673e-01, -1.431960168757732e-01, -2.350680707974290e+00, -1.494259850795288e-01, -1.494259850795288e-01, -5.994623116557429e-03, -7.593721318779559e-03, -5.804883396325543e-03, -1.097221232617495e-01, -6.993146873369705e-03, -6.993146873369705e-03, -7.267857446968251e-01, -7.177520676137162e-01, -7.209312631261976e-01, -7.235561231155274e-01, -7.222432546887673e-01, -7.222432546887673e-01, -7.084886108522526e-01, -5.658259264634621e-01, -6.070179792661690e-01, -6.481532286740282e-01, -6.273446097583704e-01, -6.273446097583704e-01, -8.168667966866079e-01, -2.356191007760255e-01, -2.802394590201418e-01, -3.951681858142417e-01, -3.309228968192656e-01, -3.309228968192656e-01, -5.199883478872719e-01, -7.165518660862366e-02, -9.399702824858093e-02, -3.894740929696110e-01, -1.249632268131163e-01, -1.249632268131163e-01, -1.893107374702232e-02, -2.030888002809217e-03, -4.262077964006902e-03, -1.210333616572767e-01, -6.471063562382893e-03, -6.471063562382888e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_pbeint_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbeint", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.539249402192281e-09, -4.539201570739247e-09, -4.538968802742298e-09, -4.539680870245749e-09, -4.539310608468903e-09, -4.539310608468903e-09, -6.401649801425667e-06, -6.401643189104239e-06, -6.400860281195842e-06, -6.397357244224715e-06, -6.401024639005811e-06, -6.401024639005811e-06, -4.483051192520396e-03, -4.497833872552688e-03, -4.834266412468446e-03, -4.686478011717010e-03, -4.724984177721405e-03, -4.724984177721405e-03, -6.581555987245350e-01, -6.461961761493623e-01, -2.448004404846964e-03, -9.936328561419822e-01, -9.053541774820881e-01, -9.053541774820880e-01, -2.441263326641172e+00, -2.579701960703033e+00, -1.494389805098041e+00, -2.216006965274379e+00, -2.816503515896740e+00, -2.816503515896748e+00, -1.292176252093757e-06, -1.291347169227182e-06, -1.292133947303899e-06, -1.291402092328161e-06, -1.291758267788229e-06, -1.291758267788229e-06, -5.905786007149867e-05, -5.758888944296773e-05, -5.979026448462061e-05, -5.848019904251935e-05, -5.788503082190725e-05, -5.788503082190725e-05, -7.938937644410121e-03, -5.781083467865349e-03, -1.078400937569911e-02, -9.396770105563730e-03, -7.468607891626002e-03, -7.468607891626002e-03, -1.148635307781003e+00, -4.465273111917707e-01, -1.256776858661000e+00, -7.027866529058447e-05, -1.390990785805417e+00, -1.390990785805417e+00, -2.919404405556376e+00, -2.608114543493937e+00, -1.638330191896447e+01, -1.774192539571765e+00, -7.624034813104377e+00, -7.624034813104358e+00, -7.906086381496948e-03, -8.082045187921549e-03, -8.020386765471288e-03, -7.969397288216365e-03, -7.994945795190446e-03, -7.994945795190446e-03, -8.825792046951480e-03, -1.547833671634263e-02, -1.321415971184286e-02, -1.126456651494989e-02, -1.222683807102026e-02, -1.222683807102026e-02, -4.784581630714189e-03, -2.435225987325923e-01, -1.491517330970915e-01, -6.134120955388799e-02, -9.896202636961229e-02, -9.896202636961232e-02, -2.149477108631834e-02, -1.357220201475356e+00, -1.385820449959063e+00, -7.310894993928184e-02, -2.037730839822701e+00, -2.037730839822702e+00, -1.969895178989110e+00, -1.279343756036909e+01, -6.192704716362973e+00, -2.044468815644626e+00, -9.629564087369284e+00, -9.629564087369307e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
