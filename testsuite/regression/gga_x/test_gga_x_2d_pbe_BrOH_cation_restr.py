
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_2d_pbe_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_2d_pbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.487383012140653e+02, -1.487388972234387e+02, -1.487417767276330e+02, -1.487329045782436e+02, -1.487375207054736e+02, -1.487375207054736e+02, -1.013561962806824e+01, -1.013557420239201e+01, -1.013488760753170e+01, -1.013889687087325e+01, -1.013592251927098e+01, -1.013592251927098e+01, -1.002538744595455e+00, -1.002146861434649e+00, -9.921759843849414e-01, -1.002553530393370e+00, -9.993415370065605e-01, -9.993415370065605e-01, -1.545393728099305e-01, -1.577974043612880e-01, -1.230775101384557e+00, -1.035640067532160e-01, -1.226998327941958e-01, -1.226998327941958e-01, -1.024448047631807e-03, -1.106238229902179e-03, -1.433388708608697e-02, -4.496281088288455e-04, -6.333398276601732e-04, -6.333398276601732e-04, -1.808867868904449e+01, -1.809139468111399e+01, -1.808883273846416e+01, -1.809123000680162e+01, -1.809003934567075e+01, -1.809003934567075e+01, -4.687241185962350e+00, -4.725959175829177e+00, -4.673512901000846e+00, -4.707732053977051e+00, -4.715178179510859e+00, -4.715178179510859e+00, -7.803007658153173e-01, -8.030764284420465e-01, -7.080049035958235e-01, -6.844832047068379e-01, -7.902205265541924e-01, -7.902205265541924e-01, -6.023215882278678e-02, -1.560642387488432e-01, -5.361673001745346e-02, -4.057457092982618e+00, -7.641196608003617e-02, -7.641196608003617e-02, -3.047288469836216e-04, -4.345978361431305e-04, -2.905895183327034e-04, -2.960782179579712e-02, -3.842314122094651e-04, -3.842314122094651e-04, -6.926879311895955e-01, -7.093866747039249e-01, -7.038891312810646e-01, -6.990295764842205e-01, -7.014930875135912e-01, -7.014930875135912e-01, -6.578025988142747e-01, -6.471520306261355e-01, -6.633758847948258e-01, -6.690699441921041e-01, -6.671479430488553e-01, -6.671479430488553e-01, -8.638553469384221e-01, -2.192646726014323e-01, -2.833234438511910e-01, -4.009328131844756e-01, -3.393072934386659e-01, -3.393072934386659e-01, -5.773672928107818e-01, -1.342229888721953e-02, -2.136307921967561e-02, -3.700245429475075e-01, -4.250862434219809e-02, -4.250862434219810e-02, -1.717598711481823e-03, -6.006226007198860e-05, -1.826560430795000e-04, -3.869125535145582e-02, -3.419997056209219e-04, -3.419997056209214e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_2d_pbe_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_2d_pbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.206859215368066e+02, -2.206868821612553e+02, -2.206913839218646e+02, -2.206770869781068e+02, -2.206845454117307e+02, -2.206845454117307e+02, -1.406588489348325e+01, -1.406600390708964e+01, -1.406928272237653e+01, -1.406765868251544e+01, -1.406654478455544e+01, -1.406654478455544e+01, -1.220381831368274e+00, -1.220072890305524e+00, -1.219446060826700e+00, -1.230989894861677e+00, -1.226706438261712e+00, -1.226706438261712e+00, -2.228516801898140e-01, -2.268431364173820e-01, -1.500601004275014e+00, -1.530861841690741e-01, -1.798540365475004e-01, -1.798540365475004e-01, -1.536669715978286e-03, -1.659354295807842e-03, -2.149570583765072e-02, -6.744419735790020e-04, -9.500091438174309e-04, -9.500091438174309e-04, -2.630346433638615e+01, -2.631363305759750e+01, -2.630394644419222e+01, -2.631292328197660e+01, -2.630861120576592e+01, -2.630861120576592e+01, -5.819700169786250e+00, -5.878950937052305e+00, -5.782802415200971e+00, -5.834211789967961e+00, -5.871119665421529e+00, -5.871119665421529e+00, -9.603555122568560e-01, -1.097003910315742e+00, -8.644189629252974e-01, -9.039460552900530e-01, -9.793158842578131e-01, -9.793158842578131e-01, -8.997203132762245e-02, -2.282679870971414e-01, -8.015280163883602e-02, -5.878425153722683e+00, -1.136682944207604e-01, -1.136682944207604e-01, -4.570932027106944e-04, -6.518965684050045e-04, -4.358841382734449e-04, -4.436065723921188e-02, -5.763468987566210e-04, -5.763468987566210e-04, -9.979824026239511e-01, -9.666439004522612e-01, -9.761720765277334e-01, -9.852211026740599e-01, -9.805547224527658e-01, -9.805547224527658e-01, -9.666231885480139e-01, -7.932743807145753e-01, -8.077905381124227e-01, -8.382157111205255e-01, -8.191250805164469e-01, -8.191250805164469e-01, -1.176111537928977e+00, -3.143301124114010e-01, -3.932874964170944e-01, -5.066569399153339e-01, -4.512448075130596e-01, -4.512448075130595e-01, -7.112292796745466e-01, -2.012944683704035e-02, -3.202809142720475e-02, -4.580976656095508e-01, -6.359183462387805e-02, -6.359183462387805e-02, -2.576388090828614e-03, -9.009338902186804e-05, -2.739840433650491e-04, -5.790974807068435e-02, -5.129993844296132e-04, -5.129993844296126e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_2d_pbe_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_2d_pbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-5.449715916367695e-09, -5.449651768826031e-09, -5.449339375600074e-09, -5.450294352529251e-09, -5.449797810292613e-09, -5.449797810292613e-09, -1.618255783650881e-05, -1.618302505131194e-05, -1.619211092283554e-05, -1.616306828992189e-05, -1.618143555110121e-05, -1.618143555110121e-05, -8.985929629707229e-03, -8.916291733127982e-03, -7.167263275171329e-03, -7.076735619799334e-03, -7.183318893677468e-03, -7.183318893677468e-03, -5.904542433656949e-02, -6.454542960913007e-02, -5.703086094212566e-03, -2.725205218716447e-02, -4.050224087606839e-02, -4.050224087606837e-02, -3.093860093051363e-04, -3.530855852347431e-04, -2.731474242804647e-03, -1.231682641059052e-04, -2.205658072351381e-04, -2.205658072351387e-04, -2.982790911687841e-06, -2.982035008446971e-06, -2.982739111510343e-06, -2.982072068357169e-06, -2.982417297296315e-06, -2.982417297296315e-06, -1.247427618383888e-04, -1.230283561873571e-04, -1.231687212082604e-04, -1.217263086316683e-04, -1.245158238617730e-04, -1.245158238617730e-04, -2.540850163322320e-02, -3.188369558958237e-02, -3.086150471951837e-02, -4.875996562893775e-02, -2.573950436589435e-02, -2.573950436589435e-02, -1.126527090901534e-02, -2.351835343395030e-02, -1.055282821694544e-02, -2.634694626051485e-04, -2.190876914886417e-02, -2.190876914886417e-02, -1.099599934580926e-04, -1.401180178389375e-04, -5.886180883292094e-04, -7.219785982846186e-03, -3.621826231392232e-04, -3.621826231392223e-04, -5.269423563541711e-02, -4.610154455242872e-02, -4.827620673300588e-02, -5.019254751582009e-02, -4.922118771370651e-02, -4.922118771370651e-02, -6.254860552232516e-02, -2.719935830218129e-02, -3.496999519706594e-02, -4.491001654447444e-02, -3.974964495270857e-02, -3.974964495270857e-02, -2.549848108971517e-02, -2.730408062000208e-02, -3.712410442455795e-02, -7.070273756211631e-02, -5.316423064281819e-02, -5.316423064281820e-02, -3.492183674489355e-02, -2.312931626594418e-03, -3.863987840045313e-03, -1.220721850195522e-01, -1.329568660943929e-02, -1.329568660943931e-02, -4.189235490140316e-04, -9.495944029108451e-05, -1.398023065447650e-04, -1.174642385020302e-02, -4.071680990483759e-04, -4.071680990483764e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
