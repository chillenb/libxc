
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_lsrpbe_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_lsrpbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.098089289101177e+01, -2.098091512076340e+01, -2.098109329810084e+01, -2.098072770903928e+01, -2.098090395381467e+01, -2.098090395381467e+01, -3.483976077196589e+00, -3.483943589905260e+00, -3.483194904659840e+00, -3.485224382791619e+00, -3.483974209189476e+00, -3.483974209189476e+00, -7.040353465695782e-01, -7.042071368139818e-01, -7.115008945686272e-01, -7.155869160918884e-01, -7.040934149833681e-01, -7.040934149833681e-01, -2.245642587854367e-01, -2.249257262259381e-01, -8.165088951750578e-01, -1.913590686728472e-01, -2.246398108727785e-01, -2.246398108727785e-01, -2.195208979823122e-04, -3.406329437803000e-04, -5.122292001168686e-02, -1.284437811420370e-12, -3.345356718596122e-04, -3.345356718596122e-04, -5.037655081502439e+00, -5.036986786824011e+00, -5.037593185141741e+00, -5.037073429660656e+00, -5.037302929632756e+00, -5.037302929632756e+00, -2.142077717829300e+00, -2.150766482769166e+00, -2.145028340528802e+00, -2.151756054464177e+00, -2.144234542492832e+00, -2.144234542492832e+00, -5.752430480809408e-01, -5.955524655006110e-01, -5.481518443592869e-01, -5.478687928184530e-01, -5.926085195155651e-01, -5.926085195155651e-01, -1.477813698253241e-01, -2.508174114598419e-01, -1.459780409494799e-01, -1.811706714259807e+00, -1.686018087909567e-01, -1.686018087909567e-01, -4.659386981211532e-13, -1.361436689523015e-10, -3.980155567882754e-11, -8.533362273599790e-02, -1.456420787577605e-10, -1.456420787577605e-10, -5.586357283892948e-01, -5.615225316563198e-01, -5.604939173647794e-01, -5.596916269557036e-01, -5.600927708459579e-01, -5.600927708459579e-01, -5.397626065064555e-01, -5.197623718290286e-01, -5.248444216869070e-01, -5.298340679236520e-01, -5.270468387465286e-01, -5.270468387465286e-01, -6.254468263467029e-01, -2.939097059570360e-01, -3.237051001660347e-01, -3.697351957557977e-01, -3.442965536880088e-01, -3.442965536880088e-01, -4.721459407568218e-01, -4.293996592831938e-02, -7.201298325342537e-02, -3.380638458302633e-01, -1.191148242466556e-01, -1.191148242466556e-01, -5.184077711358545e-04, 0.000000000000000e+00, 0.000000000000000e+00, -1.137036873683012e-01, -9.161001194792796e-12, -9.161001194792783e-12]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_lsrpbe_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_lsrpbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.501255852276912e+01, -2.501265100661870e+01, -2.501306236938030e+01, -2.501154793841492e+01, -2.501260730587523e+01, -2.501260730587523e+01, -3.999659345684885e+00, -3.999708327523200e+00, -4.001219243281340e+00, -3.999463585211749e+00, -3.999701576522382e+00, -3.999701576522382e+00, -7.343849211935165e-01, -7.329543153464336e-01, -6.965473096996008e-01, -7.028597290415909e-01, -7.338659120685818e-01, -7.338659120685818e-01, -1.929739748931656e-01, -1.947692013632696e-01, -9.031854426088317e-01, -1.866487573080488e-01, -1.934709752853285e-01, -1.934709752853285e-01, -2.840589770379431e-03, -4.050793986842199e-03, -1.159212131300604e-01, -7.903433209575389e-11, -3.985053148577019e-03, -3.985053148577019e-03, -6.179362207482562e+00, -6.182290605465821e+00, -6.179661013003292e+00, -6.181938029121542e+00, -6.180864959390865e+00, -6.180864959390865e+00, -2.102947854938621e+00, -2.121351671930337e+00, -2.092085482927852e+00, -2.106340047527473e+00, -2.129882641802388e+00, -2.129882641802388e+00, -6.739408647625742e-01, -7.662986610879760e-01, -6.370648941846940e-01, -6.916785327535355e-01, -7.049740946245470e-01, -7.049740946245470e-01, -2.038017327881336e-01, -2.193379643052185e-01, -1.967728158005462e-01, -2.330515541087523e+00, -1.904961888092133e-01, -1.904961888092133e-01, -2.988551782707896e-11, -6.719603023730831e-09, -2.064398147472616e-09, -1.518479645093178e-01, -7.126084804247937e-09, -7.126084804247914e-09, -7.371031532943764e-01, -7.255733206700763e-01, -7.296714691905215e-01, -7.328650841347236e-01, -7.312649451545997e-01, -7.312649451545997e-01, -7.146904670609728e-01, -5.631796440838791e-01, -6.054716824662449e-01, -6.466884366910803e-01, -6.257097868697803e-01, -6.257097868697804e-01, -8.021872233396455e-01, -2.494191073012032e-01, -2.881542041675120e-01, -3.869634157033747e-01, -3.314659064529378e-01, -3.314659064529378e-01, -5.050925915844821e-01, -1.085923005284386e-01, -1.409342969145829e-01, -3.752472591255360e-01, -1.766522095975558e-01, -1.766522095975558e-01, -5.739633985953360e-03, -2.656637019328649e-80, -1.132544191604799e-24, -1.679920125873220e-01, -5.118386649640547e-10, -5.118386649640152e-10]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_lsrpbe_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_lsrpbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-7.499746187136926e-09, -7.499689811830707e-09, -7.499360916401778e-09, -7.500285636459115e-09, -7.499717103668311e-09, -7.499717103668311e-09, -1.033330854286885e-05, -1.033342151370793e-05, -1.033481904213047e-05, -1.032364843794238e-05, -1.033319057413505e-05, -1.033319057413505e-05, -6.949704691928272e-03, -6.960779382787926e-03, -7.168546444430937e-03, -6.980027359614544e-03, -6.953837701808226e-03, -6.953837701808226e-03, -8.286636609774380e-01, -8.181720027374162e-01, -3.583051831925533e-03, -1.029787976889234e+00, -8.261100521496814e-01, -8.261100521496814e-01, 1.137578090312868e+02, 1.399968597348867e+02, 1.897666237707228e+01, 2.619521473177833e-05, 1.448844389434196e+02, 1.448844389434196e+02, -2.177414226083981e-06, -2.176907150202632e-06, -2.177355010373792e-06, -2.176960859865280e-06, -2.177164870334133e-06, -2.177164870334133e-06, -8.697771755121082e-05, -8.512736150607979e-05, -8.714611811142462e-05, -8.570494123745152e-05, -8.547794228159584e-05, -8.547794228159584e-05, -1.356132111608169e-02, -1.048944336947033e-02, -1.661107883962921e-02, -1.500699646681685e-02, -1.181475954680370e-02, -1.181475954680370e-02, 2.161404531013592e-01, -4.859628896975588e-01, 7.693988623866202e-02, -1.225257936108413e-04, -8.288391646410020e-01, -8.288391646410020e-01, 1.137380347005802e-05, 1.704721785398554e-03, 2.107090463994210e-03, 5.907540610591257e+00, 2.903898945340192e-03, 2.903898945340182e-03, -1.311558843487788e-02, -1.320078115016566e-02, -1.317039342920483e-02, -1.314696342985519e-02, -1.315873381571087e-02, -1.315873381571087e-02, -1.498020375544806e-02, -2.236753372588620e-02, -1.994478016267040e-02, -1.790653231851335e-02, -1.893188129265111e-02, -1.893188129265110e-02, -8.658869822571122e-03, -2.836345256543977e-01, -1.856739383566678e-01, -9.100844944103381e-02, -1.332342749389303e-01, -1.332342749389303e-01, -3.335206678165948e-02, 2.334276968459499e+01, 8.599668010478872e+00, -1.214209326696637e-01, 1.339542607918168e+00, 1.339542607918165e+00, 1.214936022117642e+02, 4.421265081226732e-73, 2.552141963898548e-18, 1.574008700247423e+00, 4.119846750713708e-04, 4.119846750713398e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
