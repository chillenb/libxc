
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_b88_6311g_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_b88_6311g", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.127029420079450e+01, -2.127031713800746e+01, -2.127049578494031e+01, -2.127015294339954e+01, -2.127032168612830e+01, -2.127032168612830e+01, -3.536129467041357e+00, -3.536085392759181e+00, -3.535153027905853e+00, -3.537445490375331e+00, -3.536162116803020e+00, -3.536162116803020e+00, -7.125883449578847e-01, -7.126663127187542e-01, -7.163912937193477e-01, -7.211786688166327e-01, -7.211981363693014e-01, -7.211981363693014e-01, -2.245460434847287e-01, -2.251978302289665e-01, -8.223504858331800e-01, -1.989739406072539e-01, -2.225776005094531e-01, -2.225776005094530e-01, -6.509068994639233e-02, -6.509532660589032e-02, -1.151862279056796e-01, -5.968953363631001e-02, -6.059201235975554e-02, -6.059201235975548e-02, -5.100386783037041e+00, -5.099450050866244e+00, -5.100356073376391e+00, -5.099528940285797e+00, -5.099905277694754e+00, -5.099905277694754e+00, -2.165265644600792e+00, -2.174988177305682e+00, -2.167475021122505e+00, -2.176055746317822e+00, -2.169586638976610e+00, -2.169586638976610e+00, -5.905303976746438e-01, -6.073090257198903e-01, -5.516591806440048e-01, -5.426514763646098e-01, -5.965299637387762e-01, -5.965299637387762e-01, -1.720262090668791e-01, -2.467495167942459e-01, -1.647857813656133e-01, -1.826520067025994e+00, -1.768143915071598e-01, -1.768143915071598e-01, -5.391728287453173e-02, -5.750180573429758e-02, -3.761587165906197e-02, -1.339375575922404e-01, -4.586102466576442e-02, -4.586102466576444e-02, -5.524406605687977e-01, -5.578837966530343e-01, -5.560580380792856e-01, -5.544736936914409e-01, -5.552734722071839e-01, -5.552734722071839e-01, -5.348030603354456e-01, -5.215757101790759e-01, -5.266554869485977e-01, -5.304622051353409e-01, -5.284276028669772e-01, -5.284276028669772e-01, -6.381721592720517e-01, -2.882097054491327e-01, -3.206246913171656e-01, -3.741224275162583e-01, -3.447250670488703e-01, -3.447250670488703e-01, -4.814573690984159e-01, -1.152162060632226e-01, -1.282033976409170e-01, -3.491850230973443e-01, -1.441531619547177e-01, -1.441531619547177e-01, -7.318937029620651e-02, -3.336396486969107e-02, -4.356144036064614e-02, -1.405045290585925e-01, -4.310578319394658e-02, -4.310578319394655e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_b88_6311g_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_b88_6311g", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.509162570135167e+01, -2.509159566528668e+01, -2.509173527988811e+01, -2.509167525374419e+01, -2.509206370931910e+01, -2.509215206722939e+01, -2.509082678977694e+01, -2.509057532940885e+01, -2.509169217399151e+01, -2.509118930792659e+01, -2.509169217399151e+01, -2.509118930792659e+01, -4.039460109202707e+00, -4.039593907112834e+00, -4.039496388832997e+00, -4.039634409507554e+00, -4.040419813361082e+00, -4.040685773059498e+00, -4.039472257653654e+00, -4.039736470726200e+00, -4.038710219746947e+00, -4.040630210934887e+00, -4.038710219746947e+00, -4.040630210934887e+00, -7.621363557148394e-01, -7.666764498764829e-01, -7.604459452729554e-01, -7.659956793593756e-01, -7.386642985882297e-01, -7.316257910233602e-01, -7.404536796025482e-01, -7.427179488475455e-01, -7.749488683644401e-01, -7.067791975560780e-01, -7.749488683644401e-01, -7.067791975560780e-01, -1.879206644370086e-01, -1.950914577646254e-01, -1.901433304615187e-01, -1.985050915113307e-01, -8.764067259405274e-01, -9.132883771701545e-01, -1.477326398836024e-01, -1.496283988701738e-01, -1.961739469923181e-01, -1.128313930370158e-01, -1.961739469923180e-01, -1.128313930370157e-01, -1.791245495216240e-02, -1.850592341611929e-02, -1.823510209084794e-02, -1.891600719170312e-02, -5.397695873088443e-02, -5.594850773858423e-02, -1.416359369029830e-02, -1.410930825296171e-02, -1.690845995897813e-02, -1.142154795411148e-02, -1.690845995897810e-02, -1.142154795411146e-02, -6.178049896660188e+00, -6.176510439747019e+00, -6.180673552258400e+00, -6.179044956068824e+00, -6.178195224236788e+00, -6.176597239924623e+00, -6.180446423222040e+00, -6.178899694494087e+00, -6.179393617077664e+00, -6.177783082997323e+00, -6.179393617077664e+00, -6.177783082997323e+00, -2.201476029898054e+00, -2.201360289418518e+00, -2.219379962682878e+00, -2.218735515815628e+00, -2.183607548891673e+00, -2.188617203001073e+00, -2.199008154909885e+00, -2.204210672389748e+00, -2.225014872679766e+00, -2.212336949368886e+00, -2.225014872679766e+00, -2.212336949368886e+00, -6.860584562175408e-01, -6.843100748244897e-01, -7.706203719791780e-01, -7.713874233561806e-01, -6.184075863195007e-01, -6.432360882126557e-01, -6.672597568177965e-01, -6.889932131615895e-01, -7.168743359612491e-01, -6.800979925238839e-01, -7.168743359612491e-01, -6.800979925238839e-01, -1.104609682896058e-01, -1.111367053065142e-01, -1.932719092084712e-01, -1.941733207878489e-01, -1.017429888675393e-01, -1.059724919653551e-01, -2.324977333222103e+00, -2.323999000107412e+00, -1.217848773202103e-01, -1.263182347938777e-01, -1.217848773202103e-01, -1.263182347938777e-01, -1.189539631028159e-02, -1.234542373737505e-02, -1.356224178121327e-02, -1.380460712610243e-02, -9.385326814407275e-03, -9.511207060390424e-03, -7.566957163381696e-02, -7.620531656849677e-02, -1.041030735261287e-02, -1.211807964435597e-02, -1.041030735261287e-02, -1.211807964435594e-02, -7.215167432569564e-01, -7.244811541089400e-01, -7.081957796572358e-01, -7.112110614926795e-01, -7.126130522210778e-01, -7.156415141677388e-01, -7.164979351044560e-01, -7.194544489302338e-01, -7.145315209839960e-01, -7.175233850314353e-01, -7.145315209839960e-01, -7.175233850314353e-01, -7.053883202942169e-01, -7.077468583307447e-01, -5.604082186630721e-01, -5.631153948463269e-01, -5.960864179596522e-01, -5.991332261447196e-01, -6.357414819053673e-01, -6.381509001874106e-01, -6.152426549186495e-01, -6.176993567117093e-01, -6.152426549186495e-01, -6.176993567117093e-01, -8.058786208478921e-01, -8.078471175324282e-01, -2.418800552620930e-01, -2.432435420793660e-01, -2.898512493471520e-01, -2.928704807866238e-01, -3.931915074299485e-01, -3.955254414959177e-01, -3.376771776661491e-01, -3.376350155357881e-01, -3.376771776661491e-01, -3.376350155357881e-01, -5.146471920991119e-01, -5.186753927368967e-01, -5.370664939520870e-02, -5.394428433683924e-02, -6.563755705822415e-02, -6.702111209904520e-02, -3.817146216618359e-01, -3.880827968246808e-01, -8.842923180441488e-02, -9.110320985071960e-02, -8.842923180441488e-02, -9.110320985071961e-02, -2.225418956102165e-02, -2.264026648085940e-02, -6.611569513944675e-03, -6.038330120871713e-03, -9.340578289707618e-03, -9.495425594748088e-03, -8.507727199272426e-02, -8.621352411554363e-02, -9.210050580624365e-03, -1.156133691254293e-02, -9.210050580624357e-03, -1.156133691254291e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_b88_6311g_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_b88_6311g", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.655202426911582e-08, 0.000000000000000e+00, -1.655212071603428e-08, -1.655195063908316e-08, 0.000000000000000e+00, -1.655206714379287e-08, -1.655148529226729e-08, 0.000000000000000e+00, -1.655146467580180e-08, -1.655232272576007e-08, 0.000000000000000e+00, -1.655253021326902e-08, -1.655199195869867e-08, 0.000000000000000e+00, -1.655193521491877e-08, -1.655199195869867e-08, 0.000000000000000e+00, -1.655193521491877e-08, -2.161093989884442e-05, 0.000000000000000e+00, -2.162012444270826e-05, -2.161167173768286e-05, 0.000000000000000e+00, -2.162153400397546e-05, -2.163628591165842e-05, 0.000000000000000e+00, -2.164224604430611e-05, -2.157971819374130e-05, 0.000000000000000e+00, -2.158729359889623e-05, -2.162224452293735e-05, 0.000000000000000e+00, -2.160721844948861e-05, -2.162224452293735e-05, 0.000000000000000e+00, -2.160721844948861e-05, -1.322564408353242e-02, 0.000000000000000e+00, -1.326750774475762e-02, -1.322250734952869e-02, 0.000000000000000e+00, -1.327294776063481e-02, -1.322113960980596e-02, 0.000000000000000e+00, -1.317476931666168e-02, -1.282734565081642e-02, 0.000000000000000e+00, -1.284841108667029e-02, -1.324170621582191e-02, 0.000000000000000e+00, -1.252964085462307e-02, -1.324170621582191e-02, 0.000000000000000e+00, -1.252964085462307e-02, -1.679453568804114e+00, 0.000000000000000e+00, -1.522327763908455e+00, -1.650964757918155e+00, 0.000000000000000e+00, -1.473996177361398e+00, -7.671606422005119e-03, 0.000000000000000e+00, -7.238397693850354e-03, -3.235266197460005e+00, 0.000000000000000e+00, -3.094947958476192e+00, -1.433503248791429e+00, 0.000000000000000e+00, -7.819226696260048e+00, -1.433503248791429e+00, 0.000000000000000e+00, -7.819226696260051e+00, -2.222224861288671e+04, 0.000000000000000e+00, -1.861421088793673e+04, -1.971970496480532e+04, 0.000000000000000e+00, -1.616298645989363e+04, -1.277102641393627e+02, 0.000000000000000e+00, -1.099514610844969e+02, -9.371936742029178e+04, 0.000000000000000e+00, -9.761433325190663e+04, -3.083244585051059e+04, 0.000000000000000e+00, -2.027153684018809e+05, -3.083244585051061e+04, 0.000000000000000e+00, -2.027153684018809e+05, -5.039877438344866e-06, 0.000000000000000e+00, -5.044356830649769e-06, -5.044797478257251e-06, 0.000000000000000e+00, -5.049116541619850e-06, -5.040091804104830e-06, 0.000000000000000e+00, -5.044478230566148e-06, -5.044313841708842e-06, 0.000000000000000e+00, -5.048802515314676e-06, -5.042440854734520e-06, 0.000000000000000e+00, -5.046753168548409e-06, -5.042440854734520e-06, 0.000000000000000e+00, -5.046753168548409e-06, -1.588655596489737e-04, 0.000000000000000e+00, -1.588936737774149e-04, -1.557106201944276e-04, 0.000000000000000e+00, -1.558458925068264e-04, -1.588805677071093e-04, 0.000000000000000e+00, -1.589395996120704e-04, -1.561590145547474e-04, 0.000000000000000e+00, -1.561494474108380e-04, -1.570182471270322e-04, 0.000000000000000e+00, -1.572928246800006e-04, -1.570182471270322e-04, 0.000000000000000e+00, -1.572928246800006e-04, -2.764654002201952e-02, 0.000000000000000e+00, -2.796254950386044e-02, -2.579600699954453e-02, 0.000000000000000e+00, -2.585201567048571e-02, -3.886638329557777e-02, 0.000000000000000e+00, -3.451628240965601e-02, -4.298872086482721e-02, 0.000000000000000e+00, -3.754739718322752e-02, -2.448372938849265e-02, 0.000000000000000e+00, -2.969212976604002e-02, -2.448372938849265e-02, 0.000000000000000e+00, -2.969212976604002e-02, -8.060812603628952e+00, 0.000000000000000e+00, -7.916975242871561e+00, -1.237243497875738e+00, 0.000000000000000e+00, -1.219202821855988e+00, -1.087316400403937e+01, 0.000000000000000e+00, -9.408461024143712e+00, -3.160343059689117e-04, 0.000000000000000e+00, -3.166696267855048e-04, -5.969270384016953e+00, 0.000000000000000e+00, -5.597044096819577e+00, -5.969270384016953e+00, 0.000000000000000e+00, -5.597044096819577e+00, -2.359544326218207e+05, 0.000000000000000e+00, -2.028238083746892e+05, -1.104361031133897e+05, 0.000000000000000e+00, -1.034231222568216e+05, -4.151742176876361e+05, 0.000000000000000e+00, -3.626837454017014e+05, -3.311890462530580e+01, 0.000000000000000e+00, -3.218212397129557e+01, -3.212537980627019e+05, 0.000000000000000e+00, -1.282640397926146e+05, -3.212537980627017e+05, 0.000000000000000e+00, -1.282640397926145e+05, -3.948582551236324e-02, 0.000000000000000e+00, -3.895965286199522e-02, -3.657402156802501e-02, 0.000000000000000e+00, -3.610206746228714e-02, -3.743178067895710e-02, 0.000000000000000e+00, -3.694950924697891e-02, -3.826715703749674e-02, 0.000000000000000e+00, -3.775686261993731e-02, -3.783436438688206e-02, 0.000000000000000e+00, -3.733833100298201e-02, -3.783436438688206e-02, 0.000000000000000e+00, -3.733833100298201e-02, -4.582214953663687e-02, 0.000000000000000e+00, -4.523695767096099e-02, -4.638919414855396e-02, 0.000000000000000e+00, -4.580766998067896e-02, -4.421441541170495e-02, 0.000000000000000e+00, -4.367294128949122e-02, -4.322980230682993e-02, 0.000000000000000e+00, -4.271195600147863e-02, -4.366303170506876e-02, 0.000000000000000e+00, -4.311089011560959e-02, -4.366303170506876e-02, 0.000000000000000e+00, -4.311089011560959e-02, -2.110758778059772e-02, 0.000000000000000e+00, -2.109542178951214e-02, -6.024354935827626e-01, 0.000000000000000e+00, -5.929453116294268e-01, -3.629109179648308e-01, 0.000000000000000e+00, -3.545562811359298e-01, -1.769818913453297e-01, 0.000000000000000e+00, -1.738422252724566e-01, -2.521518920035501e-01, 0.000000000000000e+00, -2.534232631988288e-01, -2.521518920035504e-01, 0.000000000000000e+00, -2.534232631988289e-01, -6.415580784749886e-02, 0.000000000000000e+00, -6.297840035147773e-02, -1.310081422812065e+02, 0.000000000000000e+00, -1.285881551896105e+02, -5.740070338186034e+01, 0.000000000000000e+00, -5.279959939347852e+01, -2.336376590004296e-01, 0.000000000000000e+00, -2.231076071240443e-01, -1.865978103321095e+01, 0.000000000000000e+00, -1.714286844631447e+01, -1.865978103321095e+01, 0.000000000000000e+00, -1.714286844631447e+01, -7.454506660052664e+03, 0.000000000000000e+00, -6.771643661524328e+03, -6.976878483191574e+06, 0.000000000000000e+00, -8.118280260574955e+06, -7.827751505427746e+05, 0.000000000000000e+00, -6.666905356541296e+05, -2.167421144418132e+01, 0.000000000000000e+00, -2.062391120936716e+01, -4.598950829621548e+05, 0.000000000000000e+00, -1.665276914754919e+05, -4.598950829621562e+05, 0.000000000000000e+00, -1.665276914754924e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
