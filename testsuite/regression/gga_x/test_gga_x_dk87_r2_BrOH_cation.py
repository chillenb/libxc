
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_dk87_r2_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_dk87_r2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.105765821050275e+01, -2.105768157802662e+01, -2.105786031338961e+01, -2.105751110745034e+01, -2.105768344433577e+01, -2.105768344433577e+01, -3.499244519110406e+00, -3.499202249339122e+00, -3.498310556255337e+00, -3.500525115099442e+00, -3.499278430638038e+00, -3.499278430638038e+00, -7.037224152925733e-01, -7.037388583535649e-01, -7.054403460057412e-01, -7.102768941090722e-01, -7.095169094801717e-01, -7.095169094801717e-01, -2.153933417959734e-01, -2.165271181770438e-01, -8.126339134758892e-01, -1.851757403508388e-01, -2.121130158941756e-01, -2.121130158941755e-01, -6.382857754592439e-02, -6.341292571841377e-02, -1.006584463522578e-01, -6.213478848386789e-02, -6.057122412929426e-02, -6.057122412929423e-02, -5.051199739652055e+00, -5.050325496649606e+00, -5.051171516114213e+00, -5.050399539541942e+00, -5.050749998330000e+00, -5.050749998330000e+00, -2.130538678401303e+00, -2.140744901727434e+00, -2.131187423660152e+00, -2.140231538971277e+00, -2.135836043873153e+00, -2.135836043873153e+00, -5.845090784749517e-01, -6.025483031631641e-01, -5.459220267575673e-01, -5.379250789303422e-01, -5.905289949198029e-01, -5.905289949198029e-01, -1.544493522450905e-01, -2.323958942360297e-01, -1.473201382510178e-01, -1.812532094414214e+00, -1.620458054680632e-01, -1.620458054680632e-01, -5.725509600847752e-02, -5.974515846345513e-02, -3.830334106436948e-02, -1.176555966138386e-01, -4.655569946085598e-02, -4.655569946085601e-02, -5.500315743332339e-01, -5.535952618560828e-01, -5.522467159268933e-01, -5.511873223991217e-01, -5.517072729857069e-01, -5.517072729857069e-01, -5.334657691818792e-01, -5.151898470485539e-01, -5.210967430751141e-01, -5.252754974550635e-01, -5.230759741463074e-01, -5.230759741463074e-01, -6.329921921609950e-01, -2.756677589611085e-01, -3.110720774241902e-01, -3.691082122458839e-01, -3.379379268128249e-01, -3.379379268128248e-01, -4.754782594911123e-01, -1.008189187825375e-01, -1.119065029403797e-01, -3.452352353694416e-01, -1.285601498208560e-01, -1.285601498208560e-01, -6.974157302135194e-02, -3.812975181268823e-02, -4.700070212097923e-02, -1.247660900836421e-01, -4.385702052423709e-02, -4.385702052423707e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_dk87_r2_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_dk87_r2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.490005033417549e+01, -2.490002050111746e+01, -2.490015874646175e+01, -2.490009924262506e+01, -2.490048405643802e+01, -2.490057141659940e+01, -2.489926031696590e+01, -2.489901148837739e+01, -2.490011608037050e+01, -2.489961918327495e+01, -2.490011608037050e+01, -2.489961918327495e+01, -4.014922211830962e+00, -4.015003652324956e+00, -4.014951805963203e+00, -4.015034194307555e+00, -4.015680913976191e+00, -4.015896189893867e+00, -4.015067838611349e+00, -4.015273216320752e+00, -4.014197245405063e+00, -4.015994120189455e+00, -4.014197245405063e+00, -4.015994120189455e+00, -7.658752952086718e-01, -7.692018907128616e-01, -7.646078387343057e-01, -7.686593166483575e-01, -7.486692206675064e-01, -7.438960352316273e-01, -7.516439061237077e-01, -7.531545675890486e-01, -7.757446777245912e-01, -7.298627311707450e-01, -7.757446777245912e-01, -7.298627311707450e-01, -2.000218450570874e-01, -2.070301112815670e-01, -2.020448863494195e-01, -2.101447007046382e-01, -8.799514112516965e-01, -9.118728990921637e-01, -1.578619551452431e-01, -1.599367252662099e-01, -2.086499638391154e-01, -1.175517491755716e-01, -2.086499638391153e-01, -1.175517491755715e-01, -8.994361087210342e-03, -9.465000907023780e-03, -9.331264293822443e-03, -9.889384136592570e-03, -4.464485732252606e-02, -4.699666838424015e-02, -6.046642235017515e-03, -5.982171720827601e-03, -8.189971315754035e-03, -4.999957049273495e-03, -8.189971315753988e-03, -4.999957049273622e-03, -6.136114405684355e+00, -6.134575063182260e+00, -6.138978151298867e+00, -6.137341225543288e+00, -6.136271782928493e+00, -6.134668923319770e+00, -6.138728902351084e+00, -6.137181752049664e+00, -6.137581220183093e+00, -6.135963485861097e+00, -6.137581220183093e+00, -6.135963485861097e+00, -2.240413890781028e+00, -2.240301960518992e+00, -2.256462247177674e+00, -2.255858343312188e+00, -2.227974321902833e+00, -2.231379669164846e+00, -2.241741652547097e+00, -2.245368508692392e+00, -2.258975812330279e+00, -2.249756312551743e+00, -2.258975812330279e+00, -2.249756312551743e+00, -6.811344127126373e-01, -6.793888379430550e-01, -7.694322782239722e-01, -7.703292268806032e-01, -6.148316880288444e-01, -6.389750506191816e-01, -6.650031712801762e-01, -6.865268598157729e-01, -7.114237579934637e-01, -6.749853579678993e-01, -7.114237579934636e-01, -6.749853579678993e-01, -1.131380004179800e-01, -1.141046292493289e-01, -2.069916027997465e-01, -2.079531435381083e-01, -1.028497498404081e-01, -1.080408399472480e-01, -2.322347246683851e+00, -2.321390472099571e+00, -1.278754760785437e-01, -1.342046013678780e-01, -1.278754760785437e-01, -1.342046013678780e-01, -4.794867633484746e-03, -4.979539104703362e-03, -5.804877586443690e-03, -5.900112716165855e-03, -4.192777992386811e-03, -4.358654659325431e-03, -7.207569131063829e-02, -7.253201411826557e-02, -4.443808570355087e-03, -5.683115080583968e-03, -4.443808570355144e-03, -5.683115080583918e-03, -7.227091701001011e-01, -7.256904788746702e-01, -7.073226546451877e-01, -7.104117082453483e-01, -7.126150289090677e-01, -7.157106085725630e-01, -7.171590752264995e-01, -7.201569925496030e-01, -7.148779094787620e-01, -7.179240194356200e-01, -7.148779094787620e-01, -7.179240194356200e-01, -7.064679949795413e-01, -7.088262239135970e-01, -5.623145583461092e-01, -5.648136866463088e-01, -5.929260606051951e-01, -5.958244394758725e-01, -6.311075967852361e-01, -6.335199110127760e-01, -6.106884926455250e-01, -6.131100218892482e-01, -6.106884926455250e-01, -6.131100218892482e-01, -8.041470956666781e-01, -8.063204667626808e-01, -2.576668862495324e-01, -2.590306635002963e-01, -3.043155221540006e-01, -3.070433829469872e-01, -3.964831811135583e-01, -3.986820950582198e-01, -3.473082632864272e-01, -3.471324453977562e-01, -3.473082632864272e-01, -3.471324453977562e-01, -5.169022799736849e-01, -5.205560194825135e-01, -4.391344164099875e-02, -4.419575433230737e-02, -5.811248041229305e-02, -5.993228606332615e-02, -3.813874654545069e-01, -3.873968411769636e-01, -8.833176931509251e-02, -9.268753305900325e-02, -8.833176931509248e-02, -9.268753305900328e-02, -1.229127498257345e-02, -1.266803130655865e-02, -2.225113406809080e-03, -2.088713905967063e-03, -3.576672162495727e-03, -3.709669247365180e-03, -8.471443404475752e-02, -8.603961980813077e-02, -4.081402672962974e-03, -5.294073807491878e-03, -4.081402672962954e-03, -5.294073807491810e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_dk87_r2_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_dk87_r2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.608647379562489e-08, 0.000000000000000e+00, -1.608656742707659e-08, -1.608640094688230e-08, 0.000000000000000e+00, -1.608651442562897e-08, -1.608594627821185e-08, 0.000000000000000e+00, -1.608592495995681e-08, -1.608677454863498e-08, 0.000000000000000e+00, -1.608697885562170e-08, -1.608644153810115e-08, 0.000000000000000e+00, -1.608639460168147e-08, -1.608644153810115e-08, 0.000000000000000e+00, -1.608639460168147e-08, -2.082246544929340e-05, 0.000000000000000e+00, -2.083278138919485e-05, -2.082335439639903e-05, 0.000000000000000e+00, -2.083441612824028e-05, -2.085244852059815e-05, 0.000000000000000e+00, -2.085959350287173e-05, -2.078859539127000e-05, 0.000000000000000e+00, -2.079751589566032e-05, -2.083277826863604e-05, 0.000000000000000e+00, -2.082146979787293e-05, -2.083277826863604e-05, 0.000000000000000e+00, -2.082146979787293e-05, -1.212197581650555e-02, 0.000000000000000e+00, -1.223920536699802e-02, -1.209214798154381e-02, 0.000000000000000e+00, -1.223509429354917e-02, -1.173926493509094e-02, 0.000000000000000e+00, -1.157153939871795e-02, -1.132892731286597e-02, 0.000000000000000e+00, -1.138847583067775e-02, -1.233168335719925e-02, 0.000000000000000e+00, -1.048648682223076e-02, -1.233168335719925e-02, 0.000000000000000e+00, -1.048648682223076e-02, -1.296390381203852e+00, 0.000000000000000e+00, -1.184322222322135e+00, -1.280045032293749e+00, 0.000000000000000e+00, -1.153843849445579e+00, -7.055564133732972e-03, 0.000000000000000e+00, -6.818434940013968e-03, -2.441252042126276e+00, 0.000000000000000e+00, -2.335262857426672e+00, -1.108715742468718e+00, 0.000000000000000e+00, -6.009081270350076e+00, -1.108715742468719e+00, 0.000000000000000e+00, -6.009081270350076e+00, -2.467422951276950e+04, 0.000000000000000e+00, -2.053841987104774e+04, -2.175436921062674e+04, 0.000000000000000e+00, -1.769939294958518e+04, -1.149770986230676e+02, 0.000000000000000e+00, -9.812657237073610e+01, -1.098932909480597e+05, 0.000000000000000e+00, -1.147267123514430e+05, -3.465456532671984e+04, 0.000000000000000e+00, -2.357014514836985e+05, -3.465456532671988e+04, 0.000000000000000e+00, -2.357014514836983e+05, -4.848601097509068e-06, 0.000000000000000e+00, -4.853009170923501e-06, -4.850865583664225e-06, 0.000000000000000e+00, -4.855204248131221e-06, -4.848682956849160e-06, 0.000000000000000e+00, -4.853052927750764e-06, -4.850627563584938e-06, 0.000000000000000e+00, -4.855048219965538e-06, -4.849803736488565e-06, 0.000000000000000e+00, -4.854124678153022e-06, -4.849803736488565e-06, 0.000000000000000e+00, -4.854124678153022e-06, -1.391140838068263e-04, 0.000000000000000e+00, -1.391374930531693e-04, -1.367906725653086e-04, 0.000000000000000e+00, -1.368990435568148e-04, -1.379543926040983e-04, 0.000000000000000e+00, -1.383485871344825e-04, -1.359741255600208e-04, 0.000000000000000e+00, -1.362987841770483e-04, -1.386059259142284e-04, 0.000000000000000e+00, -1.380868813003452e-04, -1.386059259142284e-04, 0.000000000000000e+00, -1.380868813003452e-04, -2.680516982420053e-02, 0.000000000000000e+00, -2.711379925790917e-02, -2.237864386532095e-02, 0.000000000000000e+00, -2.230266383678958e-02, -3.738853443494954e-02, 0.000000000000000e+00, -3.335950813865557e-02, -3.913093934868788e-02, 0.000000000000000e+00, -3.432073510235936e-02, -2.379403121913352e-02, 0.000000000000000e+00, -2.884407691051501e-02, -2.379403121913353e-02, 0.000000000000000e+00, -2.884407691051502e-02, -6.281681441203054e+00, 0.000000000000000e+00, -6.157514652357816e+00, -9.363315398111233e-01, 0.000000000000000e+00, -9.228915272323935e-01, -8.563269463477184e+00, 0.000000000000000e+00, -7.359342259414401e+00, -2.703804144209705e-04, 0.000000000000000e+00, -2.708383970951401e-04, -4.558297740082498e+00, 0.000000000000000e+00, -4.235961335283510e+00, -4.558297740082498e+00, 0.000000000000000e+00, -4.235961335283510e+00, -2.821532847102318e+05, 0.000000000000000e+00, -2.424806011950700e+05, -1.293823075046929e+05, 0.000000000000000e+00, -1.212250404830038e+05, -4.794621681826423e+05, 0.000000000000000e+00, -4.152899617065905e+05, -2.727940601080820e+01, 0.000000000000000e+00, -2.652183728067073e+01, -3.767095607203571e+05, 0.000000000000000e+00, -1.457368103938608e+05, -3.767095607203569e+05, 0.000000000000000e+00, -1.457368103938609e+05, -2.675414167102239e-02, 0.000000000000000e+00, -2.619936101598612e-02, -3.140317692971768e-02, 0.000000000000000e+00, -3.087872299462681e-02, -3.048599988356091e-02, 0.000000000000000e+00, -2.993983382789046e-02, -2.924954649538950e-02, 0.000000000000000e+00, -2.871293283654134e-02, -2.993483459614087e-02, 0.000000000000000e+00, -2.939162468413275e-02, -2.993483459614087e-02, 0.000000000000000e+00, -2.939162468413275e-02, -2.566180987381553e-02, 0.000000000000000e+00, -2.527916968092000e-02, -4.277502623442694e-02, 0.000000000000000e+00, -4.230540491568132e-02, -4.242373375460280e-02, 0.000000000000000e+00, -4.195350671349923e-02, -4.183405280299211e-02, 0.000000000000000e+00, -4.131786868783503e-02, -4.238905462102217e-02, 0.000000000000000e+00, -4.185950560966219e-02, -4.238905462102217e-02, 0.000000000000000e+00, -4.185950560966219e-02, -1.864508364407344e-02, 0.000000000000000e+00, -1.849728682609429e-02, -4.640202766410280e-01, 0.000000000000000e+00, -4.571261414421278e-01, -2.902267131511191e-01, 0.000000000000000e+00, -2.846187137548296e-01, -1.600759314773315e-01, 0.000000000000000e+00, -1.574652867836965e-01, -2.135512245093567e-01, 0.000000000000000e+00, -2.148742410068337e-01, -2.135512245093569e-01, 0.000000000000000e+00, -2.148742410068337e-01, -5.892443855583604e-02, 0.000000000000000e+00, -5.801898534385849e-02, -1.187000047086225e+02, 0.000000000000000e+00, -1.163797012534577e+02, -4.964161595564502e+01, 0.000000000000000e+00, -4.537641764968404e+01, -2.193895726814381e-01, 0.000000000000000e+00, -2.103742892535222e-01, -1.483439098379319e+01, 0.000000000000000e+00, -1.343182108004241e+01, -1.483439098379320e+01, 0.000000000000000e+00, -1.343182108004242e+01, -8.007026662692670e+03, 0.000000000000000e+00, -7.239726420806734e+03, -8.952822521565937e+06, 0.000000000000000e+00, -1.028794233647490e+07, -9.531884338404548e+05, 0.000000000000000e+00, -8.060111647990382e+05, -1.727336020178863e+01, 0.000000000000000e+00, -1.640756622877482e+01, -5.325446507176424e+05, 0.000000000000000e+00, -1.907312289949723e+05, -5.325446507176437e+05, 0.000000000000000e+00, -1.907312289949729e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
