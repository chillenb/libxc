
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_pbefe_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbefe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.138407583157543e+01, -2.138409747041184e+01, -2.138427303446890e+01, -2.138394944539804e+01, -2.138410771825825e+01, -2.138410771825825e+01, -3.556182497890165e+00, -3.556138672606906e+00, -3.555212061798739e+00, -3.557497673677406e+00, -3.556215676932447e+00, -3.556215676932447e+00, -7.144995867361092e-01, -7.144621577863175e-01, -7.141317414310003e-01, -7.191713009078512e-01, -7.173885548900446e-01, -7.173885548900446e-01, -2.086160980362006e-01, -2.106962657143862e-01, -8.251182588702074e-01, -1.658977488491340e-01, -1.828078970959429e-01, -1.828078970959429e-01, -8.039064122716945e-03, -8.461278138706486e-03, -4.651082964927845e-02, -4.643268629404240e-03, -5.834413396564593e-03, -5.834413396564593e-03, -5.123056535874470e+00, -5.121984567028263e+00, -5.123020291425029e+00, -5.122073790647665e+00, -5.122506242653110e+00, -5.122506242653110e+00, -2.154871262662784e+00, -2.165959286649278e+00, -2.153659562700434e+00, -2.163549426451695e+00, -2.161466662371842e+00, -2.161466662371842e+00, -5.938565184800861e-01, -6.085644171878971e-01, -5.544737291641402e-01, -5.439326775495100e-01, -5.991048556304330e-01, -5.991048556304330e-01, -1.188000937197803e-01, -2.155932892502335e-01, -1.102159212583806e-01, -1.830065410477788e+00, -1.372675414912936e-01, -1.372675414912936e-01, -3.582642858428542e-03, -4.539198211596291e-03, -3.470812223525192e-03, -7.490654164270515e-02, -4.181255544691939e-03, -4.181255544691939e-03, -5.527614519358810e-01, -5.589735880871780e-01, -5.568695834660136e-01, -5.550581620754376e-01, -5.559706848665893e-01, -5.559706848665893e-01, -5.349282465131789e-01, -5.231662530232309e-01, -5.296011113811392e-01, -5.330004309689466e-01, -5.313686825839358e-01, -5.313686825839358e-01, -6.396259510549748e-01, -2.655079618490956e-01, -3.080842439378901e-01, -3.744188756169413e-01, -3.401657073522024e-01, -3.401657073522024e-01, -4.827561979389218e-01, -4.453856182267912e-02, -6.054093516626088e-02, -3.507631602028536e-01, -9.453718395533929e-02, -9.453718395533930e-02, -1.134429370204809e-02, -1.213405391553690e-03, -2.546951966888106e-03, -8.899804192576800e-02, -3.868979372993077e-03, -3.868979372993074e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_pbefe_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbefe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.509816995124139e+01, -2.509825407248923e+01, -2.509862700299308e+01, -2.509737552277429e+01, -2.509803139738960e+01, -2.509803139738960e+01, -4.068984179942715e+00, -4.068997569073725e+00, -4.069409614233364e+00, -4.069469400935582e+00, -4.069098321234399e+00, -4.069098321234399e+00, -7.902822373386127e-01, -7.897698761254714e-01, -7.813558922012270e-01, -7.870841588916507e-01, -7.852669896348381e-01, -7.852669896348381e-01, -2.375183230253333e-01, -2.386736233315237e-01, -9.182706331715663e-01, -2.004659910284390e-01, -2.150096827832049e-01, -2.150096827832049e-01, -1.071565518587786e-02, -1.127799217779338e-02, -6.154416070498400e-02, -6.190456296819364e-03, -7.777946247334805e-03, -7.777946247334805e-03, -6.161301029979554e+00, -6.163640376724587e+00, -6.161407046237256e+00, -6.163472094712680e+00, -6.162486270708085e+00, -6.162486270708085e+00, -2.355410389354653e+00, -2.368283219707288e+00, -2.352901254864531e+00, -2.364083171240273e+00, -2.363949261277327e+00, -2.363949261277327e+00, -6.874896931508236e-01, -7.689572271218731e-01, -6.353058482790808e-01, -6.761296373273199e-01, -6.997620083700729e-01, -6.997620083700729e-01, -1.511829808016930e-01, -2.548983565220541e-01, -1.409827037001405e-01, -2.318587521947871e+00, -1.700180730694370e-01, -1.700180730694370e-01, -4.776557392375777e-03, -6.051688037663198e-03, -4.627103974335399e-03, -9.771003589057059e-02, -5.574237340443384e-03, -5.574237340443384e-03, -7.223824362815832e-01, -7.078917758571220e-01, -7.126769907451806e-01, -7.168827925651530e-01, -7.147502206618376e-01, -7.147502206618376e-01, -7.063366446586182e-01, -5.795315943399342e-01, -6.031671876275823e-01, -6.357266152142553e-01, -6.178439444270191e-01, -6.178439444270191e-01, -8.045803299178549e-01, -3.041489406340097e-01, -3.423590434477670e-01, -4.118436853575400e-01, -3.718801125275024e-01, -3.718801125275024e-01, -5.340403391038059e-01, -5.899137845322596e-02, -7.971956350684281e-02, -3.926809159931068e-01, -1.212742983429370e-01, -1.212742983429370e-01, -1.511790723331768e-02, -1.617849476498875e-03, -3.395779097917740e-03, -1.147030400229399e-01, -5.157953517755565e-03, -5.157953517755560e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_pbefe_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbefe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-8.643531932327690e-09, -8.643528021493906e-09, -8.643332467883206e-09, -8.643394302967664e-09, -8.643387248437747e-09, -8.643387248437747e-09, -1.076423787759656e-05, -1.076517028112477e-05, -1.078568720005723e-05, -1.074187747605635e-05, -1.076431782281922e-05, -1.076431782281922e-05, -5.791863529468548e-03, -5.769022040233244e-03, -5.123724686478709e-03, -5.013344516691890e-03, -5.082226288518042e-03, -5.082226288518042e-03, -3.013518349885631e-01, -3.114054385619446e-01, -3.377059263314182e-03, -2.812529901318673e-01, -3.120503300336600e-01, -3.120503300336598e-01, -4.576292828898377e-01, -4.835901198844278e-01, -2.819868520801360e-01, -4.153638305835620e-01, -5.279377957125980e-01, -5.279377957125992e-01, -2.707965638141902e-06, -2.711963472507685e-06, -2.708113799926628e-06, -2.711643561802637e-06, -2.710011384560158e-06, -2.710011384560158e-06, -5.999112061672167e-05, -5.944264386481046e-05, -5.854815370660304e-05, -5.808995986768615e-05, -6.038582112219335e-05, -6.038582112219335e-05, -1.419312254436307e-02, -1.415356984706972e-02, -1.827300748636361e-02, -2.194307111309598e-02, -1.392144361830956e-02, -1.392144361830956e-02, -2.431267689435411e-01, -1.478046635638094e-01, -2.603716931505600e-01, -1.733384996387815e-04, -3.375403335770841e-01, -3.375403335770841e-01, -5.471996827010837e-01, -4.888604607329599e-01, -3.070922678329963e+00, -3.443446230008625e-01, -1.429065145778831e+00, -1.429065145778827e+00, -2.113178760472634e-02, -1.991100996305453e-02, -2.032744548292217e-02, -2.068322739286324e-02, -2.050423948202889e-02, -2.050423948202889e-02, -2.418266818987045e-02, -2.035140344770687e-02, -2.163081900672168e-02, -2.289316795367137e-02, -2.232204445112648e-02, -2.232204445112648e-02, -1.156676535642725e-02, -1.051428902058117e-01, -9.014962403822824e-02, -7.336084543231550e-02, -8.463685761138157e-02, -8.463685761138159e-02, -2.782053545494210e-02, -2.557968054110734e-01, -2.634596698926505e-01, -1.062552498360867e-01, -4.174527753048393e-01, -4.174527753048400e-01, -3.693115175087838e-01, -2.397889266897697e+00, -1.160722933793620e+00, -4.117179432415701e-01, -1.804981261145700e+00, -1.804981261145705e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
