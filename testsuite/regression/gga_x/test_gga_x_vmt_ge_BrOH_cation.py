
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_vmt_ge_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_vmt_ge", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.047928073702739e+01, -2.047931900497910e+01, -2.047953699590075e+01, -2.047896666363678e+01, -2.047925870100538e+01, -2.047925870100538e+01, -3.373292260121585e+00, -3.373271088701693e+00, -3.372864528744716e+00, -3.374212302306147e+00, -3.373348451069408e+00, -3.373348451069408e+00, -6.683970395467993e-01, -6.681900729860393e-01, -6.647348291116244e-01, -6.694900729086004e-01, -6.704074753549356e-01, -6.704074753549356e-01, -2.009124060127294e-01, -2.019307180072383e-01, -7.744206982373758e-01, -1.728169234900107e-01, -1.974318729969264e-01, -1.974318729969263e-01, -5.699322126735704e-03, -6.066836159528907e-03, -5.832595709218889e-02, -3.231835986750121e-03, -4.527581330307121e-03, -4.527581330307122e-03, -4.949411890633455e+00, -4.949402218265396e+00, -4.949419205221441e+00, -4.949410531970347e+00, -4.949402653054154e+00, -4.949402653054154e+00, -2.004791426165523e+00, -2.015415587063201e+00, -2.003194780096755e+00, -2.012541329824439e+00, -2.011498792658958e+00, -2.011498792658958e+00, -5.658405220931091e-01, -5.979581920243764e-01, -5.265629289361370e-01, -5.317970701589131e-01, -5.734350113701072e-01, -5.734350113701073e-01, -1.380382846234660e-01, -2.171450109632815e-01, -1.299074671777986e-01, -1.799771330797148e+00, -1.498368936620488e-01, -1.498368936620488e-01, -2.495062195355590e-03, -3.159319964962189e-03, -2.420039144888895e-03, -9.297079134735622e-02, -3.041896449715559e-03, -3.041896449715560e-03, -5.491917928178811e-01, -5.496483622691024e-01, -5.494909378119932e-01, -5.493538525359616e-01, -5.494220653153756e-01, -5.494220653153756e-01, -5.332568105549407e-01, -4.897326240159180e-01, -5.014624284624649e-01, -5.134274634446870e-01, -5.071307094939406e-01, -5.071307094939406e-01, -6.275373104533806e-01, -2.572108914841994e-01, -2.901242165591431e-01, -3.493848797158896e-01, -3.165645028600462e-01, -3.165645028600462e-01, -4.516446705546945e-01, -5.542742809850904e-02, -7.645857541418562e-02, -3.298738960368298e-01, -1.122453304119967e-01, -1.122453304119967e-01, -8.690159937746439e-03, -8.444103660066541e-04, -1.775800983021383e-03, -1.069718348022863e-01, -2.791801816561066e-03, -2.791801816561064e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_vmt_ge_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_vmt_ge", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.561250814811016e+01, -2.561247717730656e+01, -2.561261609996438e+01, -2.561255558598817e+01, -2.561294408212371e+01, -2.561303042556060e+01, -2.561172539427336e+01, -2.561147696033463e+01, -2.561257341034881e+01, -2.561208514502522e+01, -2.561257341034881e+01, -2.561208514502522e+01, -4.126034638431934e+00, -4.126175555702142e+00, -4.126072235548857e+00, -4.126217713840282e+00, -4.127030361997159e+00, -4.127305624930959e+00, -4.126035473280881e+00, -4.126310406334596e+00, -4.125266963783023e+00, -4.127237248811893e+00, -4.125266963783023e+00, -4.127237248811893e+00, -7.752793919209672e-01, -7.805104113315435e-01, -7.733395107506823e-01, -7.797492031483413e-01, -7.478512001454360e-01, -7.392789397498755e-01, -7.489593710981721e-01, -7.517286620067897e-01, -7.897492357367093e-01, -7.065979658838025e-01, -7.897492357367093e-01, -7.065979658838025e-01, -1.845234467791594e-01, -1.915879174862964e-01, -1.866898972915341e-01, -1.950964325709206e-01, -8.918986521357131e-01, -9.317108454356422e-01, -1.523070214628398e-01, -1.538726152826516e-01, -1.926089475999656e-01, -1.318667501167636e-01, -1.926089475999654e-01, -1.318667501167634e-01, -8.104428857076379e-03, -9.040194321956827e-03, -8.927930752139913e-03, -1.021930414550390e-02, -8.143061245942999e-02, -8.453713833249007e-02, -4.344740662149213e-03, -4.272193550037466e-03, -6.758581978694666e-03, -3.670733798040492e-03, -6.758581978694669e-03, -3.670733798040493e-03, -6.294239897197122e+00, -6.292686585454279e+00, -6.296538376069653e+00, -6.294907156542378e+00, -6.294368924781015e+00, -6.292763843519808e+00, -6.296341163412514e+00, -6.294781136097259e+00, -6.295416361657120e+00, -6.293801875750797e+00, -6.295416361657120e+00, -6.293801875750797e+00, -2.223236218189087e+00, -2.223115629510644e+00, -2.242682869862773e+00, -2.241999581787234e+00, -2.201504045837954e+00, -2.207660738976421e+00, -2.218291794439482e+00, -2.224616779749673e+00, -2.250368535338432e+00, -2.235281318001827e+00, -2.250368535338432e+00, -2.235281318001827e+00, -7.006984172632577e-01, -6.989088329851441e-01, -7.799933949978131e-01, -7.805870667592487e-01, -6.316418643070651e-01, -6.570298769510847e-01, -6.769610777189752e-01, -6.991774754886562e-01, -7.318729780891308e-01, -6.944429422326017e-01, -7.318729780891308e-01, -6.944429422326018e-01, -1.367286762096259e-01, -1.365571112375144e-01, -1.930025145562402e-01, -1.937604048843487e-01, -1.306005554753674e-01, -1.329526685987751e-01, -2.351907975633332e+00, -2.350888733225014e+00, -1.379314432508970e-01, -1.351721806268738e-01, -1.379314432508970e-01, -1.351721806268738e-01, -3.259114642661523e-03, -3.387009794543992e-03, -4.180483564284821e-03, -4.243709602327458e-03, -3.131139121591155e-03, -3.330954315767758e-03, -1.080462913307570e-01, -1.089063365282683e-01, -3.192726641264612e-03, -4.455995416264688e-03, -3.192726641264613e-03, -4.455995416264687e-03, -7.253710054691435e-01, -7.282549443177306e-01, -7.165023737997959e-01, -7.194416445965118e-01, -7.195942483288540e-01, -7.225338161999845e-01, -7.221898207372831e-01, -7.250752466206067e-01, -7.208902167246578e-01, -7.238018558795649e-01, -7.208902167246578e-01, -7.238018558795649e-01, -7.073184683915940e-01, -7.096677749042830e-01, -5.704910103946152e-01, -5.733517338909472e-01, -6.087967091192366e-01, -6.119319271467089e-01, -6.482129408643037e-01, -6.506319552813737e-01, -6.282935600510250e-01, -6.307879850175027e-01, -6.282935600510250e-01, -6.307879850175027e-01, -8.163382137832412e-01, -8.180551981139403e-01, -2.375638626313680e-01, -2.388747565072571e-01, -2.862604551440063e-01, -2.895341007665109e-01, -3.992514420736306e-01, -4.017058774725089e-01, -3.385744976131171e-01, -3.386243215668359e-01, -3.385744976131170e-01, -3.386243215668359e-01, -5.236580795684732e-01, -5.279506920558892e-01, -8.086254810585254e-02, -8.125211662861370e-02, -9.859864610871395e-02, -1.003275407742671e-01, -3.893102972371469e-01, -3.959432127166097e-01, -1.167601897556808e-01, -1.149676442811044e-01, -1.167601897556808e-01, -1.149676442811044e-01, -1.572362603348233e-02, -1.701039060929813e-02, -1.124590922288522e-03, -1.127161251822379e-03, -2.288282256050151e-03, -2.433772902411107e-03, -1.131039704630631e-01, -1.140626277490890e-01, -3.027227143378144e-03, -4.042758669912788e-03, -3.027227143378141e-03, -4.042758669912784e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_vmt_ge_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_vmt_ge", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-8.573880425202193e-09, 0.000000000000000e+00, -8.573926169241847e-09, -8.573789447577642e-09, 0.000000000000000e+00, -8.573860064894357e-09, -8.573450028356123e-09, 0.000000000000000e+00, -8.573387245222122e-09, -8.574478714699258e-09, 0.000000000000000e+00, -8.574698017843156e-09, -8.573828606838174e-09, 0.000000000000000e+00, -8.574138450681727e-09, -8.573828606838174e-09, 0.000000000000000e+00, -8.574138450681727e-09, -1.189378586071669e-05, 0.000000000000000e+00, -1.189585503793737e-05, -1.189381495974103e-05, 0.000000000000000e+00, -1.189606655389064e-05, -1.189635904091483e-05, 0.000000000000000e+00, -1.189674789071077e-05, -1.188426840107412e-05, 0.000000000000000e+00, -1.188516367238245e-05, -1.190118426168720e-05, 0.000000000000000e+00, -1.188645799247587e-05, -1.190118426168720e-05, 0.000000000000000e+00, -1.188645799247587e-05, -8.111677773817194e-03, 0.000000000000000e+00, -8.049564535070759e-03, -8.139308377736201e-03, 0.000000000000000e+00, -8.063138945303108e-03, -8.509978245751405e-03, 0.000000000000000e+00, -8.609655679711722e-03, -8.318804184888640e-03, 0.000000000000000e+00, -8.290475344202125e-03, -7.899933130150477e-03, 0.000000000000000e+00, -8.703748178415941e-03, -7.899933130150477e-03, 0.000000000000000e+00, -8.703748178415941e-03, -1.241780654640262e+00, 0.000000000000000e+00, -1.125729873063310e+00, -1.221300909729109e+00, 0.000000000000000e+00, -1.087929553053245e+00, -4.678493019381649e-03, 0.000000000000000e+00, -4.223223613280339e-03, -2.139083117192421e+00, 0.000000000000000e+00, -2.057947000118554e+00, -1.060312996426100e+00, 0.000000000000000e+00, -3.749307816922943e+00, -1.060312996426100e+00, 0.000000000000000e+00, -3.749307816922948e+00, 2.566715178769000e+02, 0.000000000000000e+00, 3.259850783888024e+02, 3.490848371391440e+02, 0.000000000000000e+00, 4.333138997117113e+02, 7.959815910384071e+00, 0.000000000000000e+00, 5.209661427882849e+00, 4.877315748363205e-01, 0.000000000000000e+00, 2.818222900580053e-01, 1.309070232675294e+02, 0.000000000000000e+00, 7.020481442753900e+00, 1.309070232675302e+02, 0.000000000000000e+00, 7.020481442754040e+00, -2.472441992291107e-06, 0.000000000000000e+00, -2.474771999010837e-06, -2.471588327213989e-06, 0.000000000000000e+00, -2.473946892771881e-06, -2.472380352701960e-06, 0.000000000000000e+00, -2.474733460513171e-06, -2.471648060266718e-06, 0.000000000000000e+00, -2.473984048553416e-06, -2.472016015287890e-06, 0.000000000000000e+00, -2.474359666233961e-06, -2.472016015287890e-06, 0.000000000000000e+00, -2.474359666233961e-06, -1.042439122840120e-04, 0.000000000000000e+00, -1.042635872563558e-04, -1.017273409602218e-04, 0.000000000000000e+00, -1.018263657786451e-04, -1.054391270210372e-04, 0.000000000000000e+00, -1.051326250669978e-04, -1.032470559345703e-04, 0.000000000000000e+00, -1.029042507078865e-04, -1.019016069250343e-04, 0.000000000000000e+00, -1.028563891665969e-04, -1.019016069250343e-04, 0.000000000000000e+00, -1.028563891665969e-04, -1.478867597093980e-02, 0.000000000000000e+00, -1.494972232026843e-02, -1.132960283205754e-02, 0.000000000000000e+00, -1.131641543132150e-02, -2.150789087278396e-02, 0.000000000000000e+00, -1.876933344870180e-02, -1.954970042690830e-02, 0.000000000000000e+00, -1.713906173506008e-02, -1.276984231520074e-02, 0.000000000000000e+00, -1.561609857013787e-02, -1.276984231520075e-02, 0.000000000000000e+00, -1.561609857013787e-02, -3.177851278477837e+00, 0.000000000000000e+00, -3.209162495481493e+00, -8.786043310430336e-01, 0.000000000000000e+00, -8.672354968056020e-01, -3.675982352359245e+00, 0.000000000000000e+00, -3.515625134039281e+00, -1.376788393142289e-04, 0.000000000000000e+00, -1.379311752764870e-04, -3.133931776737245e+00, 0.000000000000000e+00, -3.395817159562816e+00, -3.133931776737245e+00, 0.000000000000000e+00, -3.395817159562816e+00, 2.709191949634627e-03, 0.000000000000000e+00, 2.543297089239059e-03, 7.109914700994935e-01, 0.000000000000000e+00, 5.916320793592647e-01, 5.179975924535409e+01, 0.000000000000000e+00, 1.746504035087037e+02, -5.025197920578067e+00, 0.000000000000000e+00, -4.825206954875157e+00, 1.656205758387547e+00, 0.000000000000000e+00, 1.710662488990981e+02, 1.656205758387511e+00, 0.000000000000000e+00, 1.710662488990972e+02, -1.581536600949040e-02, 0.000000000000000e+00, -1.557667793677760e-02, -1.596578224001663e-02, 0.000000000000000e+00, -1.572538308609286e-02, -1.591286744704348e-02, 0.000000000000000e+00, -1.567276796746560e-02, -1.586924912361625e-02, 0.000000000000000e+00, -1.563023805103976e-02, -1.589111474634299e-02, 0.000000000000000e+00, -1.565155150413086e-02, -1.589111474634299e-02, 0.000000000000000e+00, -1.565155150413086e-02, -1.770551656018112e-02, 0.000000000000000e+00, -1.747388070729609e-02, -2.816603351612886e-02, 0.000000000000000e+00, -2.773778158978468e-02, -2.466615997614594e-02, 0.000000000000000e+00, -2.427664579877541e-02, -2.161635731126857e-02, 0.000000000000000e+00, -2.132541972166779e-02, -2.312785937772515e-02, 0.000000000000000e+00, -2.280127404890303e-02, -2.312785937772515e-02, 0.000000000000000e+00, -2.280127404890303e-02, -9.379089929185486e-03, 0.000000000000000e+00, -9.327595257051168e-03, -4.451107371979274e-01, 0.000000000000000e+00, -4.382543552185965e-01, -2.641443640282345e-01, 0.000000000000000e+00, -2.572311983062149e-01, -1.108556999037059e-01, 0.000000000000000e+00, -1.086454162544386e-01, -1.727039272419346e-01, 0.000000000000000e+00, -1.733324456052200e-01, -1.727039272419348e-01, 0.000000000000000e+00, -1.733324456052201e-01, -3.921350458240425e-02, 0.000000000000000e+00, -3.829774830677963e-02, 9.508710009270947e+00, 0.000000000000000e+00, 9.110874424728570e+00, -8.987348495798263e-01, 0.000000000000000e+00, -1.598120240511215e+00, -1.371930194155486e-01, 0.000000000000000e+00, -1.298989437461521e-01, -5.462017224278289e+00, 0.000000000000000e+00, -6.251350028310515e+00, -5.462017224278293e+00, 0.000000000000000e+00, -6.251350028310525e+00, 4.422870100843811e+02, 0.000000000000000e+00, 4.628585961897281e+02, 9.174734206425226e-33, 0.000000000000000e+00, 8.648565261237271e-23, 1.394744677912514e-06, 0.000000000000000e+00, 6.030776865374587e-05, -6.100071709415506e+00, 0.000000000000000e+00, -5.969097985349013e+00, 3.529865138764825e+01, 0.000000000000000e+00, 7.726681275021745e+01, 3.529865138764811e+01, 0.000000000000000e+00, 7.726681275021728e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
