
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_kt1_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_kt1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.198008436839320e+01, -2.198008162146536e+01, -2.198019107451198e+01, -2.198022946307828e+01, -2.198019204276125e+01, -2.198019204276125e+01, -3.712760573080440e+00, -3.712669462043748e+00, -3.710655510555951e+00, -3.714864166250759e+00, -3.712741237273787e+00, -3.712741237273787e+00, -7.275394367738341e-01, -7.278888286466424e-01, -7.397383773257338e-01, -7.455636424749874e-01, -7.473066026707180e-01, -7.473066026707180e-01, -1.623530373641832e-01, -1.648334725088235e-01, -8.552873572415437e-01, -1.228609659736726e-01, -1.559123167413851e-01, -1.559123167413851e-01, -5.605494489703478e-03, -5.903075519892547e-03, -3.255785882459795e-02, -3.231843641654403e-03, -4.511217914905065e-03, -4.511217914905065e-03, -5.214346259406916e+00, -5.212240711125222e+00, -5.214267359846216e+00, -5.212408226057851e+00, -5.213268558720472e+00, -5.213268558720472e+00, -2.480651894733464e+00, -2.483380496928456e+00, -2.503137950998791e+00, -2.505231452262503e+00, -2.471681500742137e+00, -2.471681500742137e+00, -5.825662636370349e-01, -6.043375932528532e-01, -5.385850978185167e-01, -5.366004018954112e-01, -5.895908596923034e-01, -5.895908596923034e-01, -8.505572311025289e-02, -1.634313412727112e-01, -7.874134305129186e-02, -1.839735282200136e+00, -1.000185122381245e-01, -1.000185122381245e-01, -2.495068379995061e-03, -3.159321803705584e-03, -2.419445721657259e-03, -5.278530596144204e-02, -3.039239908458401e-03, -3.039239908458402e-03, -5.506947050861595e-01, -5.537557246399403e-01, -5.526896179196077e-01, -5.517942515277842e-01, -5.522422157470711e-01, -5.522422157470711e-01, -5.338643444014266e-01, -4.982075894350472e-01, -5.100207606226950e-01, -5.199708871061341e-01, -5.148840589925614e-01, -5.148840589925614e-01, -6.359236169377396e-01, -2.085991498599096e-01, -2.524125995969163e-01, -3.343317434083196e-01, -2.905897759252472e-01, -2.905897759252472e-01, -4.519724735366067e-01, -3.111594622261712e-02, -4.246282716146325e-02, -3.181094101809219e-01, -6.734918376423442e-02, -6.734918376423443e-02, -7.901708324263273e-03, -8.444104809444625e-04, -1.775802514138513e-03, -6.314618584986628e-02, -2.791015704031187e-03, -2.791015704031184e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_kt1_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_kt1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.355257888844939e+01, -2.355255645384622e+01, -2.355275393881526e+01, -2.355268356427027e+01, -2.355319663304301e+01, -2.355335076015100e+01, -2.355122270729435e+01, -2.355083386204265e+01, -2.355268921674040e+01, -2.355175365532291e+01, -2.355268921674040e+01, -2.355175365532291e+01, -3.655661818073591e+00, -3.656453072848312e+00, -3.655778585299789e+00, -3.656616234113288e+00, -3.659077848571168e+00, -3.659963476149543e+00, -3.653944954495441e+00, -3.654922704468766e+00, -3.654719509062893e+00, -3.657905505663730e+00, -3.654719509062893e+00, -3.657905505663730e+00, -7.330226940382413e-01, -7.400243637714278e-01, -7.305329839975950e-01, -7.391147280401408e-01, -6.978410689164866e-01, -6.861226362795525e-01, -6.946871016045887e-01, -6.985966340506996e-01, -7.514112239972047e-01, -6.319979216279322e-01, -7.514112239972047e-01, -6.319979216279322e-01, -2.101244716725935e-01, -2.182945005957757e-01, -2.127130942809085e-01, -2.221458993228523e-01, -8.068191967451689e-01, -8.566404426775506e-01, -1.615707085988400e-01, -1.638001661563576e-01, -2.194013372719475e-01, -1.177165208920817e-01, -2.194013372719474e-01, -1.177165208920817e-01, -7.227060032698551e-03, -7.679605592126652e-03, -7.573094928300762e-03, -8.112694597148040e-03, -4.210971871034083e-02, -4.446847936744509e-02, -4.344387337786864e-03, -4.271997079430823e-03, -6.447228461401566e-03, -3.668878950417007e-03, -6.447228461401566e-03, -3.668878950417007e-03, -5.933355034262133e+00, -5.931765163577095e+00, -5.938616037109763e+00, -5.936848735484904e+00, -5.933635078958447e+00, -5.931931072868841e+00, -5.938149645990878e+00, -5.936549507312627e+00, -5.936060707429059e+00, -5.934321249975330e+00, -5.936060707429059e+00, -5.934321249975330e+00, -1.541791647030251e+00, -1.541660324044273e+00, -1.573403889915711e+00, -1.572503614305928e+00, -1.476937611394740e+00, -1.496080562061028e+00, -1.505088084114459e+00, -1.523937885654100e+00, -1.605647222005470e+00, -1.564505087445972e+00, -1.605647222005470e+00, -1.564505087445972e+00, -6.993587764042177e-01, -6.978523611379833e-01, -7.777618325247516e-01, -7.784131299205029e-01, -6.392972865620412e-01, -6.614088733538807e-01, -6.791242077829056e-01, -7.003376226179218e-01, -7.273323883455760e-01, -6.945653414510747e-01, -7.273323883455760e-01, -6.945653414510748e-01, -1.124186673157919e-01, -1.134906932516356e-01, -2.140665184518462e-01, -2.151339589418077e-01, -1.016962489609792e-01, -1.071603835893953e-01, -2.298632355757524e+00, -2.297726298088893e+00, -1.286326108285004e-01, -1.362650088218378e-01, -1.286326108285004e-01, -1.362650088218378e-01, -3.259113952052666e-03, -3.387009012285619e-03, -4.180065989230855e-03, -4.243331451815993e-03, -3.125741230790202e-03, -3.310270306563133e-03, -7.006866310279446e-02, -7.049949355707910e-02, -3.192469351830962e-03, -4.384283002133050e-03, -3.192469351830963e-03, -4.384283002133052e-03, -7.255212057126461e-01, -7.283664509698249e-01, -7.169138921358321e-01, -7.197513603380914e-01, -7.199143876258701e-01, -7.227736147509984e-01, -7.224334374951530e-01, -7.252578829787695e-01, -7.211721271259091e-01, -7.240131087448881e-01, -7.211721271259091e-01, -7.240131087448881e-01, -7.075095372463940e-01, -7.098442431185118e-01, -5.878513797789028e-01, -5.902290296241952e-01, -6.193524485852518e-01, -6.220593786230018e-01, -6.532142258001090e-01, -6.554330209181443e-01, -6.358747533608148e-01, -6.381059263597602e-01, -6.358747533608148e-01, -6.381059263597602e-01, -8.119390656676425e-01, -8.137828634112848e-01, -2.702351882430775e-01, -2.717950156500261e-01, -3.235510888716780e-01, -3.267756731533611e-01, -4.270290275052140e-01, -4.293364645160018e-01, -3.731214245896621e-01, -3.730011327272584e-01, -3.731214245896620e-01, -3.730011327272583e-01, -5.468209249363828e-01, -5.504241024950525e-01, -4.132204474033015e-02, -4.160478061109688e-02, -5.558370875372173e-02, -5.744436561250880e-02, -4.105475233819488e-01, -4.166710707692639e-01, -8.699734757271875e-02, -9.186010680121075e-02, -8.699734757271874e-02, -9.186010680121076e-02, -1.033789451905363e-02, -1.071268874693333e-02, -1.124590922288522e-03, -1.127161251822379e-03, -2.288282255961574e-03, -2.433772897932116e-03, -8.335236402858189e-02, -8.471546383933126e-02, -3.023946492482389e-03, -4.018518532539015e-03, -3.023946492482386e-03, -4.018518532539011e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_kt1_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_kt1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.913743272202873e-08, 0.000000000000000e+00, -2.913758280469071e-08, -2.913705618526752e-08, 0.000000000000000e+00, -2.913730926094561e-08, -2.913577730392545e-08, 0.000000000000000e+00, -2.913549752455576e-08, -2.914003166087178e-08, 0.000000000000000e+00, -2.914091954353180e-08, -2.913721189934130e-08, 0.000000000000000e+00, -2.913869738289579e-08, -2.913721189934130e-08, 0.000000000000000e+00, -2.913869738289579e-08, -4.144107259170911e-05, 0.000000000000000e+00, -4.144333280558974e-05, -4.144055470773748e-05, 0.000000000000000e+00, -4.144313561284127e-05, -4.143122889406785e-05, 0.000000000000000e+00, -4.142781959750147e-05, -4.142066042809703e-05, 0.000000000000000e+00, -4.141833685843224e-05, -4.146878346474689e-05, 0.000000000000000e+00, -4.140681910450775e-05, -4.146878346474689e-05, 0.000000000000000e+00, -4.140681910450775e-05, -2.008957131655911e-02, 0.000000000000000e+00, -1.987867002693345e-02, -2.017290944740074e-02, 0.000000000000000e+00, -1.991349762473952e-02, -2.131503003050626e-02, 0.000000000000000e+00, -2.169653682351126e-02, -2.110966080435316e-02, 0.000000000000000e+00, -2.099137516949460e-02, -1.947455584716378e-02, 0.000000000000000e+00, -2.306232414337591e-02, -1.947455584716378e-02, 0.000000000000000e+00, -2.306232414337591e-02, -5.951026673653365e-02, 0.000000000000000e+00, -5.943027118657882e-02, -5.948588927740554e-02, 0.000000000000000e+00, -5.938939302355743e-02, -1.345473767427502e-02, 0.000000000000000e+00, -1.212473998870797e-02, -5.982792447667615e-02, 0.000000000000000e+00, -5.981825649616724e-02, -5.941871458749858e-02, 0.000000000000000e+00, -5.995141684136009e-02, -5.941871458749857e-02, 0.000000000000000e+00, -5.995141684136007e-02, -5.999999930923648e-02, 0.000000000000000e+00, -5.999999911927893e-02, -5.999999916713167e-02, 0.000000000000000e+00, -5.999999890316009e-02, -5.999920382899389e-02, 0.000000000000000e+00, -5.999900988711532e-02, -5.999999990980200e-02, 0.000000000000000e+00, -5.999999991566524e-02, -5.999999956250308e-02, 0.000000000000000e+00, -5.999999995412083e-02, -5.999999956250308e-02, 0.000000000000000e+00, -5.999999995412079e-02, -8.247851336175881e-06, 0.000000000000000e+00, -8.255757693890473e-06, -8.241694027000481e-06, 0.000000000000000e+00, -8.249803011335639e-06, -8.247476218411777e-06, 0.000000000000000e+00, -8.255529422442626e-06, -8.242193207902519e-06, 0.000000000000000e+00, -8.250120127611997e-06, -8.244722219272828e-06, 0.000000000000000e+00, -8.252770498762953e-06, -8.244722219272828e-06, 0.000000000000000e+00, -8.252770498762953e-06, -4.105675345134940e-04, 0.000000000000000e+00, -4.106499630906427e-04, -3.987704473855553e-04, 0.000000000000000e+00, -3.992019399526426e-04, -4.208043724179019e-04, 0.000000000000000e+00, -4.179258300696937e-04, -4.102617128352948e-04, 0.000000000000000e+00, -4.073381021399754e-04, -3.966020964970210e-04, 0.000000000000000e+00, -4.035790416573681e-04, -3.966020964970210e-04, 0.000000000000000e+00, -4.035790416573681e-04, -2.754048208849979e-02, 0.000000000000000e+00, -2.769854075651198e-02, -2.280154347912252e-02, 0.000000000000000e+00, -2.277588437905150e-02, -3.337056466971072e-02, 0.000000000000000e+00, -3.121794164158514e-02, -3.095170828509515e-02, 0.000000000000000e+00, -2.899121655318641e-02, -2.522088483098432e-02, 0.000000000000000e+00, -2.824905141212463e-02, -2.522088483098432e-02, 0.000000000000000e+00, -2.824905141212463e-02, -5.995958445490470e-02, 0.000000000000000e+00, -5.995802172528038e-02, -5.947267815745036e-02, 0.000000000000000e+00, -5.946216762121143e-02, -5.997292871074273e-02, 0.000000000000000e+00, -5.996662805640390e-02, -4.429380699174163e-04, 0.000000000000000e+00, -4.437290618051618e-04, -5.993075401551787e-02, 0.000000000000000e+00, -5.991282350185132e-02, -5.993075401551787e-02, 0.000000000000000e+00, -5.991282350185132e-02, -5.999999997143194e-02, 0.000000000000000e+00, -5.999999996667670e-02, -5.999999992269361e-02, 0.000000000000000e+00, -5.999999991790614e-02, -5.999999997582901e-02, 0.000000000000000e+00, -5.999999996959559e-02, -5.999389712985675e-02, 0.000000000000000e+00, -5.999374565679141e-02, -5.999999997369800e-02, 0.000000000000000e+00, -5.999999990644282e-02, -5.999999997369795e-02, 0.000000000000000e+00, -5.999999990644286e-02, -2.744597647863983e-02, 0.000000000000000e+00, -2.721631679097617e-02, -2.779012579552894e-02, 0.000000000000000e+00, -2.755771148606563e-02, -2.766909672993123e-02, 0.000000000000000e+00, -2.743691403073652e-02, -2.756861817724298e-02, 0.000000000000000e+00, -2.733868255049653e-02, -2.761887241488999e-02, 0.000000000000000e+00, -2.738783616997029e-02, -2.761887241488999e-02, 0.000000000000000e+00, -2.738783616997029e-02, -2.907209146073432e-02, 0.000000000000000e+00, -2.887430915914591e-02, -3.805908736370898e-02, 0.000000000000000e+00, -3.781787371726699e-02, -3.543928287986232e-02, 0.000000000000000e+00, -3.518192106642468e-02, -3.284184614910757e-02, 0.000000000000000e+00, -3.263299224146485e-02, -3.415428389978679e-02, 0.000000000000000e+00, -3.393586009017419e-02, -3.415428389978679e-02, 0.000000000000000e+00, -3.393586009017419e-02, -2.022891083273366e-02, 0.000000000000000e+00, -2.014167541206005e-02, -5.867644585888430e-02, 0.000000000000000e+00, -5.864622220847029e-02, -5.733264893416549e-02, 0.000000000000000e+00, -5.722903688275544e-02, -5.249805861434300e-02, 0.000000000000000e+00, -5.235208240270064e-02, -5.541701914497275e-02, 0.000000000000000e+00, -5.542298955040134e-02, -5.541701914497279e-02, 0.000000000000000e+00, -5.542298955040134e-02, -4.249191344418759e-02, 0.000000000000000e+00, -4.214961992061191e-02, -5.999926174800491e-02, 0.000000000000000e+00, -5.999924133471404e-02, -5.999758311823000e-02, 0.000000000000000e+00, -5.999724289933499e-02, -5.352039827867603e-02, 0.000000000000000e+00, -5.316616822082570e-02, -5.998549884390834e-02, 0.000000000000000e+00, -5.998197559045434e-02, -5.998549884390834e-02, 0.000000000000000e+00, -5.998197559045435e-02, -5.999999710791460e-02, 0.000000000000000e+00, -5.999999666514718e-02, -5.999999999959497e-02, 0.000000000000000e+00, -5.999999999959125e-02, -5.999999999305741e-02, 0.000000000000000e+00, -5.999999999111612e-02, -5.998778013044760e-02, 0.000000000000000e+00, -5.998696113492794e-02, -5.999999997882720e-02, 0.000000000000000e+00, -5.999999993396921e-02, -5.999999997882716e-02, 0.000000000000000e+00, -5.999999993396919e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
