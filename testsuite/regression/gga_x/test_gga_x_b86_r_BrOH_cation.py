
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_b86_r_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_b86_r", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.047697584208573e+01, -2.047701423197346e+01, -2.047723255706521e+01, -2.047666041467502e+01, -2.047695343015852e+01, -2.047695343015852e+01, -3.372607628470212e+00, -3.372586711311119e+00, -3.372185998900055e+00, -3.373523457725487e+00, -3.372664106733723e+00, -3.372664106733723e+00, -6.680643287388324e-01, -6.678505330169833e-01, -6.641887497825444e-01, -6.689521202967553e-01, -6.698169831575618e-01, -6.698169831575618e-01, -2.002950810374902e-01, -2.013400808166724e-01, -7.740997240306102e-01, -1.724216613565258e-01, -1.970346828723782e-01, -1.970346828723782e-01, -1.916812228734392e-02, -1.981214895711549e-02, -7.159021501214173e-02, -1.308654082015455e-02, -1.625013875645880e-02, -1.625013875645880e-02, -4.949104503756102e+00, -4.949099459435418e+00, -4.949112009772414e+00, -4.949107423147430e+00, -4.949097629236326e+00, -4.949097629236326e+00, -2.002982861084813e+00, -2.013660353197951e+00, -2.001239553054281e+00, -2.010635746062864e+00, -2.009787496742847e+00, -2.009787496742847e+00, -5.657529463864899e-01, -5.979504775419620e-01, -5.264594467391693e-01, -5.317844321729166e-01, -5.733630470778033e-01, -5.733630470778034e-01, -1.404127801100538e-01, -2.164076297059062e-01, -1.328894306600208e-01, -1.799750634479568e+00, -1.501810686782085e-01, -1.501810686782085e-01, -1.070517410013808e-02, -1.272440472805553e-02, -9.197415903786001e-03, -9.957246467257955e-02, -1.141506187397843e-02, -1.141506187397843e-02, -5.491909415573658e-01, -5.496419246428428e-01, -5.494870508348769e-01, -5.493515982500765e-01, -5.494190493560747e-01, -5.494190493560747e-01, -5.332566240559972e-01, -4.895008929664997e-01, -5.013489073713516e-01, -5.133881756242177e-01, -5.070597583024903e-01, -5.070597583024903e-01, -6.275275904862658e-01, -2.563791409593630e-01, -2.894754255484071e-01, -3.491708591089908e-01, -3.161601545180607e-01, -3.161601545180607e-01, -4.514210733712349e-01, -6.971844818706914e-02, -8.715717151903993e-02, -3.297590764586193e-01, -1.152967711691069e-01, -1.152967711691069e-01, -2.490476435713604e-02, -4.540414302630269e-03, -7.984980720875657e-03, -1.107192194291453e-01, -1.058391680817293e-02, -1.058391680817292e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_b86_r_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_b86_r", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.562096788645395e+01, -2.562093686325736e+01, -2.562107534543092e+01, -2.562101491418354e+01, -2.562140245191203e+01, -2.562148830270683e+01, -2.562018931294658e+01, -2.561994191583153e+01, -2.562103281932571e+01, -2.562054778649481e+01, -2.562103281932571e+01, -2.562054778649481e+01, -4.128465371082246e+00, -4.128600874831936e+00, -4.128502301684929e+00, -4.128642020354385e+00, -4.129440795162139e+00, -4.129710937304118e+00, -4.128480384788430e+00, -4.128749415072111e+00, -4.127699412350809e+00, -4.129658967537674e+00, -4.127699412350809e+00, -4.129658967537674e+00, -7.764008997721930e-01, -7.815488132472478e-01, -7.744897472191179e-01, -7.807969184241980e-01, -7.493984192430782e-01, -7.409816307236367e-01, -7.505940696229603e-01, -7.533115440283893e-01, -7.906697365271946e-01, -7.090232928657305e-01, -7.906697365271946e-01, -7.090232928657305e-01, -1.849164629970326e-01, -1.921934316837773e-01, -1.872100007324388e-01, -1.958061117153430e-01, -8.931335511444499e-01, -9.326177414086285e-01, -1.488810528677574e-01, -1.505785054026496e-01, -1.930806246848367e-01, -1.222677714455018e-01, -1.930806246848366e-01, -1.222677714455017e-01, -1.779963966060787e-02, -1.864566668281576e-02, -1.837978494955992e-02, -1.936728833790415e-02, -6.864697239286174e-02, -7.120619508202697e-02, -1.224133418460560e-02, -1.211219186800631e-02, -1.633626540218840e-02, -1.011116998542882e-02, -1.633626540218841e-02, -1.011116998542884e-02, -6.295395231931841e+00, -6.293842349479787e+00, -6.297676605396731e+00, -6.296046384337489e+00, -6.295523383440520e+00, -6.293919092894716e+00, -6.297480941175350e+00, -6.295921360476747e+00, -6.296562855744318e+00, -6.294949306584269e+00, -6.296562855744318e+00, -6.294949306584269e+00, -2.228504908843351e+00, -2.228384464932422e+00, -2.247837921910099e+00, -2.247156834765870e+00, -2.207142812301932e+00, -2.213190051978114e+00, -2.223830700367783e+00, -2.230048288573735e+00, -2.255304858220460e+00, -2.240452781829283e+00, -2.255304858220460e+00, -2.240452781829283e+00, -7.010156575553762e-01, -6.992236596354605e-01, -7.800242772681637e-01, -7.806162507258161e-01, -6.320327178041953e-01, -6.573767692381283e-01, -6.770075688905495e-01, -6.992281838900272e-01, -7.321320074201400e-01, -6.947098987221677e-01, -7.321320074201400e-01, -6.947098987221678e-01, -1.238538991423453e-01, -1.240646143589475e-01, -1.914252999493486e-01, -1.922460042052921e-01, -1.166042201460701e-01, -1.197859612438891e-01, -2.351988817714500e+00, -2.350969286501917e+00, -1.295588893971657e-01, -1.300273646074012e-01, -1.295588893971657e-01, -1.300273646074012e-01, -9.688919444017431e-03, -1.006269555085697e-02, -1.175112989763112e-02, -1.194436515942800e-02, -8.465060323848276e-03, -8.774523465878032e-03, -9.265235983822161e-02, -9.336072196468850e-02, -8.996444986351928e-03, -1.140221284587465e-02, -8.996444986351935e-03, -1.140221284587464e-02, -7.253744727582336e-01, -7.282582258807802e-01, -7.165279039072966e-01, -7.194663095318878e-01, -7.196098084961364e-01, -7.225487430078438e-01, -7.221988734021435e-01, -7.250839606053818e-01, -7.209023090507550e-01, -7.238134760492568e-01, -7.209023090507550e-01, -7.238134760492568e-01, -7.073192165421845e-01, -7.096685123395353e-01, -5.712544376534979e-01, -5.741030000971723e-01, -6.092014673095041e-01, -6.123260431756467e-01, -6.483604795849204e-01, -6.507776188836792e-01, -6.285524416747883e-01, -6.310441530201835e-01, -6.285524416747883e-01, -6.310441530201835e-01, -8.163774361209900e-01, -8.180914585164176e-01, -2.379718561923571e-01, -2.393283785344116e-01, -2.874517743194668e-01, -2.907372011725628e-01, -3.999284305501130e-01, -4.023757441022525e-01, -3.396410550740476e-01, -3.396817229038866e-01, -3.396410550740475e-01, -3.396817229038865e-01, -5.243958450772562e-01, -5.286657349599525e-01, -6.823021320044810e-02, -6.854690313851132e-02, -8.313192404392288e-02, -8.467524050604347e-02, -3.897096634252676e-01, -3.963220184685178e-01, -1.031032851374636e-01, -1.033412953539995e-01, -1.031032851374635e-01, -1.033412953539995e-01, -2.367125079095609e-02, -2.429042563061532e-02, -4.163413899133279e-03, -4.000707938374313e-03, -7.168370994293271e-03, -7.465178722740582e-03, -9.961146967851027e-02, -1.006432411215392e-01, -8.246153252645246e-03, -1.065871468308597e-02, -8.246153252645241e-03, -1.065871468308595e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_b86_r_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_b86_r", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-8.515481537964351e-09, 0.000000000000000e+00, -8.515527111221166e-09, -8.515392944872077e-09, 0.000000000000000e+00, -8.515462738219514e-09, -8.515059123185376e-09, 0.000000000000000e+00, -8.514998507928662e-09, -8.516060930860618e-09, 0.000000000000000e+00, -8.516275004307401e-09, -8.515431244338400e-09, 0.000000000000000e+00, -8.515727645937681e-09, -8.515431244338400e-09, 0.000000000000000e+00, -8.515727645937681e-09, -1.178680229473769e-05, 0.000000000000000e+00, -1.178896833702285e-05, -1.178684559015905e-05, 0.000000000000000e+00, -1.178919976357642e-05, -1.178979182595347e-05, 0.000000000000000e+00, -1.179028865940349e-05, -1.177707351422213e-05, 0.000000000000000e+00, -1.177808762468021e-05, -1.179408860580742e-05, 0.000000000000000e+00, -1.177974448317797e-05, -1.179408860580742e-05, 0.000000000000000e+00, -1.177974448317797e-05, -8.000542263261547e-03, 0.000000000000000e+00, -7.943431169768915e-03, -8.026370508500398e-03, 0.000000000000000e+00, -7.956341635133689e-03, -8.373047948545258e-03, 0.000000000000000e+00, -8.464476447219314e-03, -8.181770940096067e-03, 0.000000000000000e+00, -8.156039534058433e-03, -7.801943485976777e-03, 0.000000000000000e+00, -8.530960663674297e-03, -7.801943485976777e-03, 0.000000000000000e+00, -8.530960663674297e-03, -1.222629665465863e+00, 0.000000000000000e+00, -1.105664904768820e+00, -1.200626858436660e+00, 0.000000000000000e+00, -1.067219299398274e+00, -4.615666914472717e-03, 0.000000000000000e+00, -4.175056986636407e-03, -2.220228690079470e+00, 0.000000000000000e+00, -2.130758811523792e+00, -1.043192754279037e+00, 0.000000000000000e+00, -4.533546372194025e+00, -1.043192754279037e+00, 0.000000000000000e+00, -4.533546372194027e+00, -2.328653194465197e+03, 0.000000000000000e+00, -2.006551738554822e+03, -2.127392245170744e+03, 0.000000000000000e+00, -1.801959955822156e+03, -3.225397588156082e+01, 0.000000000000000e+00, -2.887166593523629e+01, -7.589293437497110e+03, 0.000000000000000e+00, -7.814159512650007e+03, -3.056049407309462e+03, 0.000000000000000e+00, -1.711069102951165e+04, -3.056049407309462e+03, 0.000000000000000e+00, -1.711069102951158e+04, -2.459785432068474e-06, 0.000000000000000e+00, -2.462099685834085e-06, -2.459030205438553e-06, 0.000000000000000e+00, -2.461369811483591e-06, -2.459728921887125e-06, 0.000000000000000e+00, -2.462064176325254e-06, -2.459081101668355e-06, 0.000000000000000e+00, -2.461401283017982e-06, -2.459410164970477e-06, 0.000000000000000e+00, -2.461735249892460e-06, -2.459410164970477e-06, 0.000000000000000e+00, -2.461735249892460e-06, -1.024643277564895e-04, 0.000000000000000e+00, -1.024836042191016e-04, -1.000134504981975e-04, 0.000000000000000e+00, -1.001102634230502e-04, -1.035783891613045e-04, 0.000000000000000e+00, -1.032948539800880e-04, -1.014446038328802e-04, 0.000000000000000e+00, -1.011249053040056e-04, -1.002193443308316e-04, 0.000000000000000e+00, -1.011186067121786e-04, -1.002193443308316e-04, 0.000000000000000e+00, -1.011186067121786e-04, -1.467140690098896e-02, 0.000000000000000e+00, -1.483146517891883e-02, -1.130233616206325e-02, 0.000000000000000e+00, -1.128994230173257e-02, -2.130984528148677e-02, 0.000000000000000e+00, -1.860911669418568e-02, -1.948793852267390e-02, 0.000000000000000e+00, -1.708343995261502e-02, -1.267990948021951e-02, 0.000000000000000e+00, -1.550164553149210e-02, -1.267990948021952e-02, 0.000000000000000e+00, -1.550164553149210e-02, -4.274253073424034e+00, 0.000000000000000e+00, -4.249081516596569e+00, -8.840743342684160e-01, 0.000000000000000e+00, -8.719878894583581e-01, -5.410802460269761e+00, 0.000000000000000e+00, -4.876486688694853e+00, -1.373698882285039e-04, 0.000000000000000e+00, -1.376221396821322e-04, -3.619362902282702e+00, 0.000000000000000e+00, -3.661761156539840e+00, -3.619362902282702e+00, 0.000000000000000e+00, -3.661761156539840e+00, -1.731160910253054e+04, 0.000000000000000e+00, -1.489822682322618e+04, -8.981566425137114e+03, 0.000000000000000e+00, -8.391051231803422e+03, -3.621768451251299e+04, 0.000000000000000e+00, -3.295537290719170e+04, -1.284500089717537e+01, 0.000000000000000e+00, -1.244686045082776e+01, -2.600988421172020e+04, 0.000000000000000e+00, -1.208808051960601e+04, -2.600988421172019e+04, 0.000000000000000e+00, -1.208808051960600e+04, -1.580205251213526e-02, 0.000000000000000e+00, -1.556394537883168e-02, -1.592931137881972e-02, 0.000000000000000e+00, -1.569014090169688e-02, -1.588448927201279e-02, 0.000000000000000e+00, -1.564544380919310e-02, -1.584766314163785e-02, 0.000000000000000e+00, -1.560941774874993e-02, -1.586613212765124e-02, 0.000000000000000e+00, -1.562747577415378e-02, -1.586613212765124e-02, 0.000000000000000e+00, -1.562747577415378e-02, -1.769849237772159e-02, 0.000000000000000e+00, -1.746700954489944e-02, -2.779366845255050e-02, 0.000000000000000e+00, -2.737461205689485e-02, -2.443114174521535e-02, 0.000000000000000e+00, -2.404880732178885e-02, -2.149346530582230e-02, 0.000000000000000e+00, -2.120515272328360e-02, -2.295258826003155e-02, 0.000000000000000e+00, -2.262968021810271e-02, -2.295258826003155e-02, 0.000000000000000e+00, -2.262968021810271e-02, -9.354250360577765e-03, 0.000000000000000e+00, -9.303857362078800e-03, -4.386555631264873e-01, 0.000000000000000e+00, -4.317220429136778e-01, -2.586477932773175e-01, 0.000000000000000e+00, -2.518572119001273e-01, -1.092233475842437e-01, 0.000000000000000e+00, -1.070576178937709e-01, -1.693860945169180e-01, 0.000000000000000e+00, -1.700140295655412e-01, -1.693860945169182e-01, 0.000000000000000e+00, -1.700140295655412e-01, -3.868270510984954e-02, 0.000000000000000e+00, -3.778863560374784e-02, -3.217375808196228e+01, 0.000000000000000e+00, -3.173122326922322e+01, -1.743167602423166e+01, 0.000000000000000e+00, -1.652546929831471e+01, -1.355894424863426e-01, 0.000000000000000e+00, -1.284293408443789e-01, -8.792499696509401e+00, 0.000000000000000e+00, -8.795645237719738e+00, -8.792499696509404e+00, 0.000000000000000e+00, -8.795645237719746e+00, -9.041245716651050e+02, 0.000000000000000e+00, -8.379029008894188e+02, -3.483628519349368e+05, 0.000000000000000e+00, -4.355390249501420e+05, -5.225372460288522e+04, 0.000000000000000e+00, -4.621927645740804e+04, -1.007015663344441e+01, 0.000000000000000e+00, -9.678375057191918e+00, -3.959869823083160e+04, 0.000000000000000e+00, -1.511305950754192e+04, -3.959869823083166e+04, 0.000000000000000e+00, -1.511305950754198e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
