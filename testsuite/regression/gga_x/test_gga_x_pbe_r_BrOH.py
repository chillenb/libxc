
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_pbe_r_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbe_r", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.097416281317162e+01, -2.097418534012595e+01, -2.097436437787758e+01, -2.097399393072553e+01, -2.097417403660057e+01, -2.097417403660057e+01, -3.482033579228772e+00, -3.482001637745290e+00, -3.481267839447629e+00, -3.483271212837153e+00, -3.482031983681980e+00, -3.482031983681980e+00, -7.030624889699059e-01, -7.032187073854977e-01, -7.100517019409950e-01, -7.141541059313083e-01, -7.031149679065610e-01, -7.031149679065610e-01, -2.239965819512761e-01, -2.243192347832595e-01, -8.158203118557880e-01, -1.953848594331608e-01, -2.240581548524706e-01, -2.240581548524706e-01, -2.111500688516464e-02, -2.210633242637404e-02, -8.534103222509098e-02, -1.016956319469306e-02, -2.187618529645446e-02, -2.187618529645446e-02, -5.036739038852796e+00, -5.036083750974019e+00, -5.036678446177490e+00, -5.036168805626652e+00, -5.036393613761738e+00, -5.036393613761738e+00, -2.137777650200507e+00, -2.146554246488212e+00, -2.140575225954395e+00, -2.147371274956685e+00, -2.140193935151021e+00, -2.140193935151021e+00, -5.749997709856340e-01, -5.955320771303216e-01, -5.478919137442093e-01, -5.478252444202898e-01, -5.924114000733111e-01, -5.924114000733111e-01, -1.648895415842248e-01, -2.520456252440382e-01, -1.614102266207050e-01, -1.811643785279178e+00, -1.770063251133682e-01, -1.770063251133682e-01, -9.810830930337789e-03, -1.120904754082275e-02, -8.401733031413221e-03, -1.130073467991877e-01, -1.021307139551924e-02, -1.021307139551924e-02, -5.586340519477027e-01, -5.615075604434124e-01, -5.604851962586783e-01, -5.596866118608421e-01, -5.600860273978328e-01, -5.600860273978328e-01, -5.397618861559965e-01, -5.192311068728425e-01, -5.245695077580084e-01, -5.297262701188029e-01, -5.268655010508463e-01, -5.268655010508461e-01, -6.254214383455139e-01, -2.934516245263101e-01, -3.227918073720039e-01, -3.692364659705642e-01, -3.435354714340138e-01, -3.435354714340138e-01, -4.716082145637160e-01, -7.998807947341921e-02, -1.043741896801120e-01, -3.377884272354940e-01, -1.375404484914174e-01, -1.375404484914174e-01, -2.472359677297372e-02, -3.072130783663926e-03, -5.834329728339608e-03, -1.310274223990072e-01, -8.681081139093222e-03, -8.681081139093208e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_pbe_r_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbe_r", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.503594652550923e+01, -2.503603807238377e+01, -2.503644673401728e+01, -2.503494761810294e+01, -2.503599480212301e+01, -2.503599480212301e+01, -4.005990354584942e+00, -4.006037812077647e+00, -4.007507138578490e+00, -4.005824540069321e+00, -4.006031828363793e+00, -4.006031828363793e+00, -7.368680244874232e-01, -7.354573014810177e-01, -6.992239838177871e-01, -7.055703119161131e-01, -7.363562333263236e-01, -7.363562333263236e-01, -1.905772533013179e-01, -1.930619464345727e-01, -9.052635106977966e-01, -1.589170848123722e-01, -1.913029365450355e-01, -1.913029365450355e-01, -2.787980925026224e-02, -2.916070796002636e-02, -1.017949677855144e-01, -1.353375417733509e-02, -2.885770500262679e-02, -2.885770500262679e-02, -6.182681069364753e+00, -6.185565073208205e+00, -6.182975428298583e+00, -6.185217921200326e+00, -6.184160869525965e+00, -6.184160869525965e+00, -2.111054357686306e+00, -2.129552468258246e+00, -2.100076912789540e+00, -2.114433257779873e+00, -2.138109934068102e+00, -2.138109934068102e+00, -6.747628089347864e-01, -7.663771127044734e-01, -6.379310764080296e-01, -6.918423456500850e-01, -7.056568300780910e-01, -7.056568300780910e-01, -1.532876005686794e-01, -2.021347168755558e-01, -1.483369412614749e-01, -2.330757609728030e+00, -1.507727555123937e-01, -1.507727555123937e-01, -1.305737546742956e-02, -1.490996069260505e-02, -1.117706535423463e-02, -1.225915865877184e-01, -1.358485174826836e-02, -1.358485174826836e-02, -7.371097861616538e-01, -7.256312075764911e-01, -7.297054738459452e-01, -7.328847636884446e-01, -7.312913229710346e-01, -7.312913229710346e-01, -7.146933276728659e-01, -5.647032207319507e-01, -6.063757561979642e-01, -6.470763002567766e-01, -6.263358555297630e-01, -6.263358555297628e-01, -8.022845499727801e-01, -2.428707109825901e-01, -2.876634328109584e-01, -3.882513918828687e-01, -3.326832453871347e-01, -3.326832453871346e-01, -5.065810999676644e-01, -9.761677537896998e-02, -1.188097372021049e-01, -3.760850299628523e-01, -1.330438155859726e-01, -1.330438155859726e-01, -3.258400004414204e-02, -4.095218131701245e-03, -7.773027786279221e-03, -1.264671018733701e-01, -1.155060004613898e-02, -1.155060004613896e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_pbe_r_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbe_r", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-7.417806475490869e-09, -7.417752353425040e-09, -7.417431987838603e-09, -7.418319839781957e-09, -7.417778593029927e-09, -7.417778593029927e-09, -1.019053050713598e-05, -1.019065755251456e-05, -1.019246605616671e-05, -1.018070935101975e-05, -1.019042220979709e-05, -1.019042220979709e-05, -6.821129625167701e-03, -6.831663523532173e-03, -7.037500658411871e-03, -6.851653664927962e-03, -6.825062785310584e-03, -6.825062785310584e-03, -8.414294843328496e-01, -8.251652181521538e-01, -3.525176545925292e-03, -1.527408644843716e+00, -8.369574769289212e-01, -8.369574769289212e-01, -1.221264683250418e+01, -1.223796914443248e+01, -4.778863668359131e+00, -8.694302657072990e+00, -1.271337694649924e+01, -1.271337694649924e+01, -2.159022034743934e-06, -2.158639466630836e-06, -2.158975333447500e-06, -2.158677997526123e-06, -2.158836827936133e-06, -2.158836827936133e-06, -8.537942242242947e-05, -8.355137870072928e-05, -8.556548485012940e-05, -8.413847837745925e-05, -8.388177220150354e-05, -8.388177220150354e-05, -1.339425448892813e-02, -1.044954375084736e-02, -1.639632102499473e-02, -1.492120826740838e-02, -1.168359244742006e-02, -1.168359244742006e-02, -2.128345390744674e+00, -5.655209696010386e-01, -2.409580451590712e+00, -1.220564245247307e-04, -2.059296014868567e+00, -2.059296014868567e+00, -9.223812507473978e+00, -9.239499519661031e+00, -2.644730652592077e+01, -4.358114322752790e+00, -1.364701419314114e+01, -1.364701419314114e+01, -1.310056992110962e-02, -1.315633864398442e-02, -1.313634957147261e-02, -1.312107645710850e-02, -1.312875636984128e-02, -1.312875636984128e-02, -1.496873961572799e-02, -2.198302988759137e-02, -1.967609788303425e-02, -1.774723706137723e-02, -1.871855724081452e-02, -1.871855724081452e-02, -8.623085954960445e-03, -2.954561487028200e-01, -1.847330274702175e-01, -8.933197170367026e-02, -1.309035288725912e-01, -1.309035288725913e-01, -3.276093880743625e-02, -4.107568619113513e+00, -3.897268266158831e+00, -1.194831458507799e-01, -3.781713561097599e+00, -3.781713561097602e+00, -9.164095379114865e+00, -1.591417760619380e+01, -1.369769182000286e+01, -4.633162866663760e+00, -1.993428989494268e+01, -1.993428989494264e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
