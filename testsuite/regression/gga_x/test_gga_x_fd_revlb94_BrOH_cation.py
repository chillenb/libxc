
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_fd_revlb94_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_fd_revlb94", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.088493729096034e+01, -2.088496437229251e+01, -2.088515274041379e+01, -2.088474843486981e+01, -2.088495061630137e+01, -2.088495061630137e+01, -3.465471631463799e+00, -3.465431198797638e+00, -3.464581961683040e+00, -3.466717353716673e+00, -3.465506984517409e+00, -3.465506984517409e+00, -6.990106350204790e-01, -6.991749988589981e-01, -7.063686084657599e-01, -7.108302898753022e-01, -7.136389162206133e-01, -7.136389162206133e-01, -2.398068082875215e-01, -2.383709847900633e-01, -8.061305453904541e-01, -2.462532262241338e-01, -2.485239404225215e-01, -2.485239404225215e-01, -8.737530814391539e-01, -8.372903914169350e-01, -4.312059565201677e-01, -1.135848713161342e+00, -9.167810933717211e-01, -9.167810933717200e-01, -5.020893857603809e+00, -5.020316207090565e+00, -5.020877806463643e+00, -5.020367661103990e+00, -5.020595060782708e+00, -5.020595060782708e+00, -2.138350246673286e+00, -2.146592195953039e+00, -2.143869915844321e+00, -2.151014082969037e+00, -2.140416225810358e+00, -2.140416225810358e+00, -5.791598379067705e-01, -6.017921210854120e-01, -5.406873320457505e-01, -5.364591318666942e-01, -5.854779455789736e-01, -5.854779455789736e-01, -2.840568749200880e-01, -2.858817540112847e-01, -2.858078018156652e-01, -1.810654874951079e+00, -2.433692925146073e-01, -2.433692925146073e-01, -1.140475149935310e+00, -1.083115800032274e+00, -6.334570799796542e-01, -3.089993954218162e-01, -7.597653516421025e-01, -7.597653516421030e-01, -5.503975663566179e-01, -5.530032323493967e-01, -5.520866527518162e-01, -5.513239236226930e-01, -5.517046104965360e-01, -5.517046104965360e-01, -5.338113578713624e-01, -5.114941731926372e-01, -5.160247536209461e-01, -5.217059225863272e-01, -5.184292798318695e-01, -5.184292798318695e-01, -6.319540817468252e-01, -3.112789918813845e-01, -3.289371139239284e-01, -3.675524078135173e-01, -3.433898923029437e-01, -3.433898923029437e-01, -4.722656612550146e-01, -4.589060361129990e-01, -3.830766045445190e-01, -3.421070890801964e-01, -2.582797821790731e-01, -2.582797821790732e-01, -8.089508373340193e-01, -1.015075067633707e+00, -1.000189485519864e+00, -2.661313364392487e-01, -7.224925035911282e-01, -7.224925035911276e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_fd_revlb94_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_fd_revlb94", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.504668603622663e+01, -2.504665746745084e+01, -2.504681313705415e+01, -2.504674977497008e+01, -2.504717396563274e+01, -2.504727963609777e+01, -2.504573973859108e+01, -2.504545121482989e+01, -2.504676415416818e+01, -2.504614841209662e+01, -2.504676415416818e+01, -2.504614841209662e+01, -3.994664840380695e+00, -3.994996638773966e+00, -3.994725713635431e+00, -3.995074338865985e+00, -3.996371672475933e+00, -3.996826249779292e+00, -3.994162074240094e+00, -3.994643589067981e+00, -3.993844565529650e+00, -3.996174787959035e+00, -3.993844565529650e+00, -3.996174787959035e+00, -7.282139871593767e-01, -7.361594117116521e-01, -7.253316026382551e-01, -7.350972201155223e-01, -6.862503201773488e-01, -6.719059622527209e-01, -6.841218982890418e-01, -6.887956758873992e-01, -7.491993519472576e-01, -6.049325217068734e-01, -7.491993519472576e-01, -6.049325217068734e-01, -1.120491171381392e-01, -1.256844002543790e-01, -1.188037102251940e-01, -1.340591183259741e-01, -8.396061169909144e-01, -8.898200849095083e-01, -1.872750199212634e-02, -2.127413404313523e-02, -1.195620439664409e-01, 6.402661676534442e-02, -1.195620439664409e-01, 6.402661676534448e-02, 5.132304433457714e-01, 5.072344642535206e-01, 4.991911281273196e-01, 4.913958821568968e-01, 3.110302127965762e-01, 2.989419589362219e-01, 5.890984138718147e-01, 5.959330997551130e-01, 5.275493374230438e-01, 4.490775786366301e-01, 5.275493374230431e-01, 4.490775786366296e-01, -6.196014358413572e+00, -6.194450293426338e+00, -6.199137850901106e+00, -6.197468184373811e+00, -6.196185455666338e+00, -6.194552248732418e+00, -6.198865696985566e+00, -6.197293940608195e+00, -6.197616727345568e+00, -6.195966877415318e+00, -6.197616727345568e+00, -6.195966877415318e+00, -2.014893205717293e+00, -2.014767127056301e+00, -2.038692596169433e+00, -2.037926854817399e+00, -1.978337391385792e+00, -1.988970126461394e+00, -1.999235562616324e+00, -2.009865549456803e+00, -2.054633620679315e+00, -2.030680730375329e+00, -2.054633620679315e+00, -2.030680730375329e+00, -6.818725020120198e-01, -6.801912649687772e-01, -7.747559397742088e-01, -7.755024541560959e-01, -6.108679189099663e-01, -6.375532577527292e-01, -6.708544099959002e-01, -6.926808450017653e-01, -7.150068924843459e-01, -6.776023675502276e-01, -7.150068924843458e-01, -6.776023675502277e-01, 1.020638852722258e-01, 9.723195942471806e-02, -6.750961394085075e-02, -6.906744185447646e-02, 1.208590407220495e-01, 1.078129556643282e-01, -2.337253980168561e+00, -2.336265392940675e+00, 4.765510101358244e-02, 1.070374164125270e-02, 4.765510101358244e-02, 1.070374164125270e-02, 5.625116744110400e-01, 5.829338066158821e-01, 5.608409107176950e-01, 5.727045890302548e-01, 3.525415218057828e-01, 3.372175229647759e-01, 1.807232808581807e-01, 1.831849274079364e-01, 4.330993681026487e-01, 4.075063692854350e-01, 4.330993681026486e-01, 4.075063692854352e-01, -7.237396445206986e-01, -7.266655313284637e-01, -7.119524492330348e-01, -7.149651997359758e-01, -7.160782262796357e-01, -7.190863709128649e-01, -7.195296441754269e-01, -7.224617724377097e-01, -7.178033874236093e-01, -7.207721870708984e-01, -7.178033874236093e-01, -7.207721870708984e-01, -7.065767168367021e-01, -7.089301801297486e-01, -5.379260280524182e-01, -5.411561515080714e-01, -5.877925781163634e-01, -5.912636315484568e-01, -6.367495053439201e-01, -6.392366367994607e-01, -6.123844711488377e-01, -6.149597663933554e-01, -6.123844711488377e-01, -6.149597663933554e-01, -8.102619878220235e-01, -8.122224672750874e-01, -1.404312192949189e-01, -1.428598872020570e-01, -2.188794677292777e-01, -2.244082645581565e-01, -3.716371676182854e-01, -3.743095490467398e-01, -2.951705307677920e-01, -2.956889105849572e-01, -2.951705307677920e-01, -2.956889105849572e-01, -4.925301103791980e-01, -4.975290859576615e-01, 3.266928580117562e-01, 3.251097433530223e-01, 2.635835775913029e-01, 2.533336168705194e-01, -3.711265992895757e-01, -3.783610125229562e-01, 1.260288589795811e-01, 9.651297389624056e-02, 1.260288589795812e-01, 9.651297389624063e-02, 5.033731694759384e-01, 4.951136566510929e-01, 4.826319949131569e-01, 4.094459600475165e-01, 4.959938016903581e-01, 4.817370435715554e-01, 1.266194494928230e-01, 1.244426113510501e-01, 3.523111150908563e-01, 4.106249256394269e-01, 3.523111150908557e-01, 4.106249256394267e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_fd_revlb94_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_fd_revlb94", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.417782528527969e-08, 0.000000000000000e+00, -1.417789910894212e-08, -1.417765204276284e-08, 0.000000000000000e+00, -1.417777324712556e-08, -1.417704832825043e-08, 0.000000000000000e+00, -1.417692202725924e-08, -1.417900612156705e-08, 0.000000000000000e+00, -1.417941703677951e-08, -1.417772445898048e-08, 0.000000000000000e+00, -1.417838322786929e-08, -1.417772445898048e-08, 0.000000000000000e+00, -1.417838322786929e-08, -2.002979517130514e-05, 0.000000000000000e+00, -2.003154482639503e-05, -2.002962688829805e-05, 0.000000000000000e+00, -2.003157343845853e-05, -2.002753179166133e-05, 0.000000000000000e+00, -2.002651605249282e-05, -2.001823384136923e-05, 0.000000000000000e+00, -2.001783177493178e-05, -2.004293904772384e-05, 0.000000000000000e+00, -2.001438835005382e-05, -2.004293904772384e-05, 0.000000000000000e+00, -2.001438835005382e-05, -1.435079819475280e-02, 0.000000000000000e+00, -1.415206586278461e-02, -1.443116623072377e-02, 0.000000000000000e+00, -1.418609237230728e-02, -1.556303708124893e-02, 0.000000000000000e+00, -1.594632960224158e-02, -1.530690542388783e-02, 0.000000000000000e+00, -1.519158333143425e-02, -1.376444108953279e-02, 0.000000000000000e+00, -1.728716978486316e-02, -1.376444108953279e-02, 0.000000000000000e+00, -1.728716978486316e-02, -3.203385056799603e+00, 0.000000000000000e+00, -2.771519487788818e+00, -3.064358198750621e+00, 0.000000000000000e+00, -2.597900484283843e+00, -8.249426239111110e-03, 0.000000000000000e+00, -7.279376392087226e-03, -8.592310347028334e+00, 0.000000000000000e+00, -8.149352846781509e+00, -2.700423673875748e+00, 0.000000000000000e+00, -2.823523846879912e+01, -2.700423673875748e+00, 0.000000000000000e+00, -2.823523846879911e+01, -5.517709020768506e+05, 0.000000000000000e+00, -4.487313267850050e+05, -4.749892132258970e+05, 0.000000000000000e+00, -3.760293985719722e+05, -1.166416355126561e+03, 0.000000000000000e+00, -9.619594244411536e+02, -3.001092356303984e+06, 0.000000000000000e+00, -3.159657903613859e+06, -8.105819278272426e+05, 0.000000000000000e+00, -6.242012993140928e+06, -8.105819278272426e+05, 0.000000000000000e+00, -6.242012993140925e+06, -4.037467587334539e-06, 0.000000000000000e+00, -4.041316318286257e-06, -4.034996663838117e-06, 0.000000000000000e+00, -4.038926899195606e-06, -4.037311748238128e-06, 0.000000000000000e+00, -4.041220920300603e-06, -4.035191746757755e-06, 0.000000000000000e+00, -4.039050400379974e-06, -4.036216031342620e-06, 0.000000000000000e+00, -4.040118387717475e-06, -4.036216031342620e-06, 0.000000000000000e+00, -4.040118387717475e-06, -1.937832676660503e-04, 0.000000000000000e+00, -1.938219131703006e-04, -1.883666709343476e-04, 0.000000000000000e+00, -1.885673899992682e-04, -1.981147600199669e-04, 0.000000000000000e+00, -1.969071769628019e-04, -1.932922162129008e-04, 0.000000000000000e+00, -1.920548336738705e-04, -1.876137172090451e-04, 0.000000000000000e+00, -1.906133244438316e-04, -1.876137172090451e-04, 0.000000000000000e+00, -1.906133244438316e-04, -2.467678517178281e-02, 0.000000000000000e+00, -2.494148178295813e-02, -1.818451794154974e-02, 0.000000000000000e+00, -1.815646335866612e-02, -3.628989746154331e-02, 0.000000000000000e+00, -3.148123310792617e-02, -3.151697394246193e-02, 0.000000000000000e+00, -2.764516947911595e-02, -2.115476883660194e-02, 0.000000000000000e+00, -2.592926306402085e-02, -2.115476883660194e-02, 0.000000000000000e+00, -2.592926306402085e-02, -3.277278710364865e+01, 0.000000000000000e+00, -3.170095042155002e+01, -2.867973703337525e+00, 0.000000000000000e+00, -2.813865486059362e+00, -4.774448271513641e+01, 0.000000000000000e+00, -3.934453260643890e+01, -2.207792427628098e-04, 0.000000000000000e+00, -2.211795921006701e-04, -2.016875088949350e+01, 0.000000000000000e+00, -1.656446844505636e+01, -2.016875088949350e+01, 0.000000000000000e+00, -1.656446844505636e+01, -8.272845970577521e+06, 0.000000000000000e+00, -7.103779533038121e+06, -3.522156401391247e+06, 0.000000000000000e+00, -3.305923951257528e+06, -1.238647481936530e+07, 0.000000000000000e+00, -1.039950541768335e+07, -1.913616776069127e+02, 0.000000000000000e+00, -1.864985491732097e+02, -1.028904242148320e+07, 0.000000000000000e+00, -3.547474342830704e+06, -1.028904242148320e+07, 0.000000000000000e+00, -3.547474342830702e+06, -2.518174289539071e-02, 0.000000000000000e+00, -2.479899400259951e-02, -2.560818256533539e-02, 0.000000000000000e+00, -2.521652792286901e-02, -2.545405059672342e-02, 0.000000000000000e+00, -2.506473902053805e-02, -2.532948374006780e-02, 0.000000000000000e+00, -2.494451873982483e-02, -2.539142726750519e-02, 0.000000000000000e+00, -2.500432576349467e-02, -2.539142726750519e-02, 0.000000000000000e+00, -2.500432576349467e-02, -2.813838166635789e-02, 0.000000000000000e+00, -2.776987403505318e-02, -4.953999939803787e-02, 0.000000000000000e+00, -4.871311569508804e-02, -4.174057592123444e-02, 0.000000000000000e+00, -4.102756431468307e-02, -3.544244915862968e-02, 0.000000000000000e+00, -3.495384749415846e-02, -3.847975886160687e-02, 0.000000000000000e+00, -3.792004511505782e-02, -3.847975886160687e-02, 0.000000000000000e+00, -3.792004511505782e-02, -1.507470294314296e-02, 0.000000000000000e+00, -1.498299678267994e-02, -1.165789193969615e+00, 0.000000000000000e+00, -1.140386298930727e+00, -5.825188474866062e-01, 0.000000000000000e+00, -5.609326913940417e-01, -1.987422929708481e-01, 0.000000000000000e+00, -1.944892036460441e-01, -3.362985006849812e-01, 0.000000000000000e+00, -3.369135282216561e-01, -3.362985006849813e-01, 0.000000000000000e+00, -3.369135282216561e-01, -6.923431044548679e-02, 0.000000000000000e+00, -6.741917706870286e-02, -1.234407939505772e+03, 0.000000000000000e+00, -1.205135697068185e+03, -4.291879671937161e+02, 0.000000000000000e+00, -3.823396928085369e+02, -2.371797730475973e-01, 0.000000000000000e+00, -2.236874097308154e-01, -8.726331515022203e+01, 0.000000000000000e+00, -7.257784240316266e+01, -8.726331515022207e+01, 0.000000000000000e+00, -7.257784240316269e+01, -1.583524867833415e+05, 0.000000000000000e+00, -1.407170398004021e+05, -3.377256263152055e+08, 0.000000000000000e+00, -3.712873389629254e+08, -2.983682108221417e+07, 0.000000000000000e+00, -2.458542265770504e+07, -1.029831886215444e+02, 0.000000000000000e+00, -9.689567643950794e+01, -1.389417577194190e+07, 0.000000000000000e+00, -4.780717832227921e+06, -1.389417577194193e+07, 0.000000000000000e+00, -4.780717832227938e+06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
