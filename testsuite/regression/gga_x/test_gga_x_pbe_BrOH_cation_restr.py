
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_pbe_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.094585776075135e+01, -2.094588517750054e+01, -2.094607482329994e+01, -2.094566552346408e+01, -2.094587035107293e+01, -2.094587035107293e+01, -3.473575542245103e+00, -3.473537516254884e+00, -3.472743732442373e+00, -3.474783686394665e+00, -3.473613683568402e+00, -3.473613683568402e+00, -6.974841101170852e-01, -6.975027087428124e-01, -6.998349067691024e-01, -7.045907414821944e-01, -7.027391338021576e-01, -7.027391338021576e-01, -2.156360425248998e-01, -2.167046714894039e-01, -8.050735912365226e-01, -1.824146416381604e-01, -1.952326489943308e-01, -1.952326489943308e-01, -1.008745131338667e-02, -1.061655614770240e-02, -5.768293873094114e-02, -5.828258110206493e-03, -7.322538024870727e-03, -7.322538024870727e-03, -5.034955151515561e+00, -5.034337520508363e+00, -5.034937485131230e+00, -5.034392072011946e+00, -5.034636099849553e+00, -5.034636099849553e+00, -2.114444034037362e+00, -2.124257331632181e+00, -2.115862484609289e+00, -2.124528156486087e+00, -2.119171306692418e+00, -2.119171306692418e+00, -5.807380593239666e-01, -6.028208814112775e-01, -5.416608723404128e-01, -5.373346309257213e-01, -5.864743008349814e-01, -5.864743008349814e-01, -1.392025269197052e-01, -2.315077553268411e-01, -1.300512289383946e-01, -1.813615186872777e+00, -1.553580767005539e-01, -1.553580767005539e-01, -4.497166868324146e-03, -5.697597043338518e-03, -4.356246491951163e-03, -9.089068753236233e-02, -5.247941931052691e-03, -5.247941931052691e-03, -5.507629644184276e-01, -5.539097737986096e-01, -5.528194067804416e-01, -5.518992606827593e-01, -5.523601859212975e-01, -5.523601859212975e-01, -5.339837772436038e-01, -5.106198578401084e-01, -5.171007609269389e-01, -5.232090803305226e-01, -5.198868244867593e-01, -5.198868244867593e-01, -6.331100760106909e-01, -2.761019389724050e-01, -3.108418692943656e-01, -3.659017545219916e-01, -3.360499733540874e-01, -3.360499733540874e-01, -4.712506128178061e-01, -5.532113500501180e-02, -7.451517660301363e-02, -3.422096602155984e-01, -1.119931711955678e-01, -1.119931711955679e-01, -1.422960312221648e-02, -1.523263555654575e-03, -3.197186167834918e-03, -1.061235566981964e-01, -4.856041637397728e-03, -4.856041637397724e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_pbe_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.514277967057166e+01, -2.514287946624188e+01, -2.514329717058784e+01, -2.514181295691437e+01, -2.514259434090392e+01, -2.514259434090392e+01, -4.036890979249476e+00, -4.036937341734579e+00, -4.038109035709679e+00, -4.036839729366365e+00, -4.037043880672174e+00, -4.037043880672174e+00, -7.599257833983424e-01, -7.586707270797985e-01, -7.299432547506524e-01, -7.363209739384022e-01, -7.352246004464676e-01, -7.352246004464676e-01, -2.033079964395242e-01, -2.044357908302568e-01, -8.908143923397308e-01, -1.813106819796189e-01, -1.871038018760032e-01, -1.871038018760032e-01, -1.343344148668387e-02, -1.413564408292431e-02, -7.451725553630048e-02, -7.767979192923992e-03, -9.756606475212329e-03, -9.756606475212329e-03, -6.199992675677627e+00, -6.202758576917451e+00, -6.200116545143524e+00, -6.202558322539838e+00, -6.201396313988890e+00, -6.201396313988890e+00, -2.186380541836263e+00, -2.203642710551716e+00, -2.172016662418077e+00, -2.187041199684788e+00, -2.203133279486658e+00, -2.203133279486658e+00, -6.856779343568572e-01, -7.743336850983683e-01, -6.307438462984085e-01, -6.813442625214990e-01, -7.000457040228250e-01, -7.000457040228250e-01, -1.565315258335842e-01, -2.230942823947780e-01, -1.486085191467688e-01, -2.334355803394826e+00, -1.623656166159712e-01, -1.623656166159712e-01, -5.994623841473294e-03, -7.593723432389383e-03, -5.804886864675346e-03, -1.110877116219037e-01, -6.993150968726335e-03, -6.993150968726335e-03, -7.247743843369641e-01, -7.127280316844209e-01, -7.168904497166531e-01, -7.203913769286996e-01, -7.186334157742141e-01, -7.186334157742141e-01, -7.075348432074087e-01, -5.586155545879927e-01, -5.968610061019863e-01, -6.389988849156892e-01, -6.171945778291984e-01, -6.171945778291984e-01, -8.104285234170258e-01, -2.604561056151368e-01, -2.970935319371315e-01, -3.917060662458935e-01, -3.364963803371985e-01, -3.364963803371985e-01, -5.136554578566921e-01, -7.174761527671658e-02, -9.440611804993190e-02, -3.834582576940786e-01, -1.291613522924898e-01, -1.291613522924898e-01, -1.893122858725991e-02, -2.030888016975218e-03, -4.262078243292378e-03, -1.243047638050142e-01, -6.471067071435129e-03, -6.471067071435124e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_pbe_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-7.051255716428797e-09, -7.051206567188481e-09, -7.050916451031687e-09, -7.051649168680389e-09, -7.051275416289761e-09, -7.051275416289761e-09, -9.515127306993470e-06, -9.515414062726171e-06, -9.521108480255429e-06, -9.503984748170623e-06, -9.514553651376676e-06, -9.514553651376676e-06, -6.065404726834052e-03, -6.069668020819723e-03, -6.094066001158309e-03, -5.927315457186102e-03, -5.987667850530107e-03, -5.987667850530107e-03, -6.244599729632108e-01, -6.227689378805344e-01, -3.390613344361485e-03, -8.399035346444638e-01, -7.950141701517544e-01, -7.950141701517542e-01, -2.437199737979207e+00, -2.574814616985741e+00, -1.435079350782026e+00, -2.214831489834198e+00, -2.813846725201965e+00, -2.813846725201972e+00, -2.076279901666908e-06, -2.076493841060263e-06, -2.076275812956089e-06, -2.076464903516703e-06, -2.076396197936658e-06, -2.076396197936658e-06, -7.333071123259944e-05, -7.191516450297596e-05, -7.327858125180541e-05, -7.203799422176662e-05, -7.255868248098815e-05, -7.255868248098815e-05, -1.205984525184401e-02, -9.808866234123068e-03, -1.607274141704318e-02, -1.568279527383551e-02, -1.151447559941488e-02, -1.151447559941488e-02, -9.793546029489657e-01, -3.885065575451455e-01, -1.080974549394575e+00, -1.195507664327887e-04, -1.162182100415354e+00, -1.162182100415354e+00, -2.918345822532329e+00, -2.606680249696042e+00, -1.637010721941382e+01, -1.606129155709224e+00, -7.617955789208670e+00, -7.617955789208653e+00, -1.382937686533374e-02, -1.374283266637934e-02, -1.377313750752417e-02, -1.379874554450262e-02, -1.378599170250775e-02, -1.378599170250775e-02, -1.557108469108438e-02, -2.107347853005710e-02, -1.945425252919184e-02, -1.790540605504260e-02, -1.871206372445761e-02, -1.871206372445761e-02, -8.082414498319921e-03, -2.270635055836820e-01, -1.546357005229728e-01, -8.073329027694189e-02, -1.156174116144489e-01, -1.156174116144489e-01, -2.910051097356984e-02, -1.309575839714000e+00, -1.301263220043932e+00, -1.031640545176401e-01, -1.762629220784015e+00, -1.762629220784016e+00, -1.964047425357804e+00, -1.279232289755105e+01, -6.191051484278828e+00, -1.787116029480896e+00, -9.622175254197241e+00, -9.622175254197263e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
