
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_lv_rpw86_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_lv_rpw86", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.034043453058499e+01, -2.034047053658878e+01, -2.034068685836831e+01, -2.034009614067814e+01, -2.034045305340326e+01, -2.034045305340326e+01, -3.343771741118503e+00, -3.343759646060211e+00, -3.343565390232728e+00, -3.344609488979215e+00, -3.343779764235862e+00, -3.343779764235862e+00, -6.591595750229711e-01, -6.589550887992736e-01, -6.557189208840787e-01, -6.600167891415030e-01, -6.590824364237322e-01, -6.590824364237322e-01, -2.008867082494836e-01, -2.014979755205007e-01, -7.760528427894788e-01, -1.796348610913114e-01, -2.010346071667800e-01, -2.010346071667800e-01, -3.080106382427029e-02, -3.168751540437878e-02, -8.449060631546434e-02, -2.037036959604886e-02, -3.136868741133402e-02, -3.136868741133402e-02, -4.921790253669212e+00, -4.921952685567113e+00, -4.921811303202923e+00, -4.921937524587253e+00, -4.921867084716605e+00, -4.921867084716605e+00, -1.975493638857392e+00, -1.985777689739226e+00, -1.975046739935861e+00, -1.983013109652762e+00, -1.983186646879393e+00, -1.983186646879393e+00, -5.550837432070540e-01, -5.895950052809417e-01, -5.278105244101302e-01, -5.395271689033575e-01, -5.741879133358599e-01, -5.741879133358599e-01, -1.521510756539556e-01, -2.275869031972893e-01, -1.489970567801921e-01, -1.793452134421474e+00, -1.638113693053476e-01, -1.638113693053476e-01, -1.981672872894180e-02, -2.147679714768356e-02, -1.625977567243760e-02, -1.058908512774267e-01, -1.953414273613497e-02, -1.953414273613498e-02, -5.569782211255507e-01, -5.565641186414293e-01, -5.567110025642329e-01, -5.568237935336073e-01, -5.567668075152760e-01, -5.567668075152760e-01, -5.386943088782997e-01, -4.913755361064535e-01, -5.043736771115425e-01, -5.169461315418830e-01, -5.103854095549971e-01, -5.103854095549971e-01, -6.186355120518801e-01, -2.625818428626377e-01, -2.917009065265443e-01, -3.464604481315218e-01, -3.160136120476411e-01, -3.160136120476410e-01, -4.448987152795013e-01, -8.138323775900509e-02, -9.977098322691727e-02, -3.216030245741890e-01, -1.268764067343527e-01, -1.268764067343526e-01, -3.491632099158819e-02, -9.331258068681512e-03, -1.392769820559737e-02, -1.208641965703769e-01, -1.705409404655880e-02, -1.705409404655878e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_lv_rpw86_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_lv_rpw86", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.574094809447326e+01, -2.574102819941736e+01, -2.574140609571504e+01, -2.574009392876212e+01, -2.574099016749603e+01, -2.574099016749603e+01, -4.148304395068998e+00, -4.148338253028345e+00, -4.149438934770053e+00, -4.148420838448815e+00, -4.148339480703624e+00, -4.148339480703624e+00, -7.711611830073611e-01, -7.697430626537128e-01, -7.301229409615676e-01, -7.370335537551402e-01, -7.706473774672830e-01, -7.706473774672830e-01, -1.824411225012966e-01, -1.878981904945747e-01, -9.426655299281923e-01, -1.276889396650360e-01, -1.841347255799698e-01, -1.841347255799698e-01, -2.542250942896986e-02, -2.622174957413744e-02, -7.799079700999872e-02, -1.640883509518985e-02, -2.595651828707217e-02, -2.595651828707217e-02, -6.317358563026538e+00, -6.319424884885509e+00, -6.317571400907299e+00, -6.319178079879864e+00, -6.318416370626303e+00, -6.318416370626303e+00, -2.205070378369506e+00, -2.225489260542860e+00, -2.191822189423787e+00, -2.207846088074427e+00, -2.235815914213475e+00, -2.235815914213475e+00, -6.961695465868796e-01, -7.738921361875983e-01, -6.591585926038040e-01, -7.020404775719733e-01, -7.258468505067956e-01, -7.258468505067956e-01, -1.438775696193268e-01, -1.546519714903682e-01, -1.399955576366037e-01, -2.353775060167856e+00, -1.387719647488148e-01, -1.387719647488148e-01, -1.595845213809899e-02, -1.732901614171543e-02, -1.311420230044426e-02, -1.007824885424198e-01, -1.576270376575718e-02, -1.576270376575723e-02, -7.392849669716449e-01, -7.319285888123639e-01, -7.345671592055857e-01, -7.366040257939943e-01, -7.355852332647526e-01, -7.355852332647526e-01, -7.161027793939383e-01, -5.894232459782418e-01, -6.273875801576176e-01, -6.619204460121481e-01, -6.445228451204312e-01, -6.445228451204313e-01, -8.108321832649957e-01, -2.190152426782613e-01, -2.896440961510482e-01, -4.062663700828218e-01, -3.465017185270888e-01, -3.465017185270887e-01, -5.293661899759399e-01, -7.420588172719837e-02, -9.377304633458051e-02, -3.914470729287001e-01, -1.215055063242900e-01, -1.215055063242899e-01, -2.896126357865480e-02, -7.471528141542430e-03, -1.117446666624069e-02, -1.157021062259325e-01, -1.374694025721822e-02, -1.374694025721827e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_lv_rpw86_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_lv_rpw86", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-3.493249673672566e-09, -3.493216261428508e-09, -3.493041500428969e-09, -3.493589168106057e-09, -3.493232268032692e-09, -3.493232268032692e-09, -4.962384371532704e-06, -4.962348020764464e-06, -4.960532332490814e-06, -4.959455123000194e-06, -4.962281119642445e-06, -4.962281119642445e-06, -3.663750572312291e-03, -3.678730756244431e-03, -4.099157488345700e-03, -3.972304446198925e-03, -3.669204873280027e-03, -3.669204873280027e-03, -6.648911065158947e-01, -6.285473871104656e-01, -1.778488368243282e-03, -1.681179967538079e+00, -6.536621185285942e-01, -6.536621185285942e-01, -6.985398698900547e+02, -6.238940013605990e+02, -1.381225384789897e+01, -3.642467846141265e+03, -6.496412404833160e+02, -6.496412404833160e+02, -9.925902583030159e-07, -9.919160546692903e-07, -9.925189254644607e-07, -9.919947265698212e-07, -9.922477708031300e-07, -9.922477708031300e-07, -4.953368654898400e-05, -4.815786019355288e-05, -5.010911877026794e-05, -4.901482984064693e-05, -4.788391673231478e-05, -4.788391673231478e-05, -6.404233596833424e-03, -4.621084400855148e-03, -7.895887162061700e-03, -6.700233866316274e-03, -5.512271978761102e-03, -5.512271978761102e-03, -1.886156328983876e+00, -6.283162490838340e-01, -2.113790209187294e+00, -5.398816979631373e-05, -1.924181476429718e+00, -1.924181476429718e+00, -4.066864507650030e+03, -2.948083556993716e+03, -8.973309072272486e+03, -6.269957367276202e+00, -4.307663090035023e+03, -4.307663090035005e+03, -5.677863268460462e-03, -5.798417110996585e-03, -5.755079258996022e-03, -5.721743850165081e-03, -5.738418874574680e-03, -5.738418874574680e-03, -6.469406460936351e-03, -1.132601529449401e-02, -9.538949581542763e-03, -8.192910083446371e-03, -8.846843718321028e-03, -8.846843718321026e-03, -3.823198406319756e-03, -2.610039317951340e-01, -1.285138689411593e-01, -4.779836468728005e-02, -7.815716132773627e-02, -7.815716132773633e-02, -1.710874535323583e-02, -1.559780862410446e+01, -7.515628444920663e+00, -6.007476088933376e-02, -3.580365527034941e+00, -3.580365527034930e+00, -4.234070025101796e+02, -8.271490352334396e+04, -1.666612708935318e+04, -4.365565463428009e+00, -7.414586105854127e+03, -7.414586105854129e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
