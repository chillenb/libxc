
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_ssb_d_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ssb_d", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.188313049844783e+01, -2.188315527602776e+01, -2.188334242963802e+01, -2.188297228686554e+01, -2.188315525909172e+01, -2.188315525909172e+01, -3.651658891838951e+00, -3.651593595747671e+00, -3.650176811235147e+00, -3.653337902858195e+00, -3.651669134263639e+00, -3.651669134263639e+00, -7.371840163916673e-01, -7.377087761017741e-01, -7.539264260017515e-01, -7.588207124412157e-01, -7.589893456482770e-01, -7.589893456482770e-01, -2.202173644731029e-01, -2.213614241036225e-01, -8.531165972030834e-01, -1.852353202674240e-01, -2.152383324198997e-01, -2.152383324198996e-01, -1.010644626807126e-02, -1.064210843799786e-02, -5.784313004838287e-02, -5.829173912918505e-03, -8.134889557365932e-03, -8.134889557365932e-03, -5.266095373165116e+00, -5.265919513968704e+00, -5.266096034312722e+00, -5.265940399042950e+00, -5.265999380761882e+00, -5.265999380761882e+00, -2.372906160757510e+00, -2.378159991519766e+00, -2.387861121597425e+00, -2.392417958180904e+00, -2.368678649074545e+00, -2.368678649074545e+00, -5.964227242344508e-01, -6.361729234953653e-01, -5.550985945372638e-01, -5.623269688494265e-01, -6.035606259383789e-01, -6.035606259383789e-01, -1.403307168608264e-01, -2.360766089443449e-01, -1.311271349773721e-01, -1.924051550675406e+00, -1.572876880367814e-01, -1.572876880367814e-01, -4.500540018047515e-03, -5.698334370176791e-03, -4.363473775132816e-03, -9.123902823541338e-02, -5.481085274981870e-03, -5.481085274981872e-03, -5.897135109549922e-01, -5.846114604554128e-01, -5.863066365651420e-01, -5.877970583539859e-01, -5.870424484211023e-01, -5.870424484211023e-01, -5.743013435814687e-01, -5.266577648076988e-01, -5.286955094448514e-01, -5.380411106574592e-01, -5.316268060702086e-01, -5.316268060702086e-01, -6.671987055021656e-01, -2.829676610071146e-01, -3.193471933508933e-01, -3.719118536645485e-01, -3.441851315731401e-01, -3.441851315731401e-01, -4.838104052023624e-01, -5.538927453511852e-02, -7.471957248600500e-02, -3.449693050872745e-01, -1.128205941571134e-01, -1.128205941571134e-01, -1.423988917672887e-02, -1.523270480347264e-03, -3.203252972449010e-03, -1.067444258832489e-01, -5.033572741631383e-03, -5.033572741631378e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_ssb_d_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ssb_d", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.592046312050813e+01, -2.592044371527945e+01, -2.592072201788848e+01, -2.592063169326714e+01, -2.592133256007151e+01, -2.592156750880321e+01, -2.591841424292716e+01, -2.591784607729769e+01, -2.592062852651345e+01, -2.591917353726615e+01, -2.592062852651345e+01, -2.591917353726615e+01, -3.912455006428697e+00, -3.913735155622101e+00, -3.912634184971362e+00, -3.913991764864321e+00, -3.917766860850291e+00, -3.919137445319110e+00, -3.909507884750489e+00, -3.911027753591712e+00, -3.911275608102997e+00, -3.915624498989484e+00, -3.911275608102997e+00, -3.915624498989484e+00, -6.968126508098825e-01, -7.052647601071599e-01, -6.939852008961299e-01, -7.041204553763047e-01, -6.641186330659919e-01, -6.564506794689036e-01, -6.640752835992136e-01, -6.666549064197653e-01, -7.206190339882259e-01, -6.373988842966111e-01, -7.206190339882259e-01, -6.373988842966111e-01, -2.063299209499870e-01, -2.101981046246218e-01, -2.064632201865054e-01, -2.111609461599278e-01, -7.902544680656692e-01, -8.516744065047218e-01, -1.867132205937805e-01, -1.884413775314051e-01, -2.142941386555919e-01, -1.586721676231715e-01, -2.142941386555918e-01, -1.586721676231714e-01, -1.301681887893524e-02, -1.382918255828093e-02, -1.363730243531657e-02, -1.460518888714327e-02, -7.288705064021483e-02, -7.659498056076286e-02, -7.832948102988301e-03, -7.702624897368456e-03, -1.161604434050820e-02, -6.614324405035234e-03, -1.161604434050820e-02, -6.614324405035241e-03, -6.639574434651316e+00, -6.637729895903606e+00, -6.647046612652280e+00, -6.644952686179352e+00, -6.639970017204403e+00, -6.637963921502905e+00, -6.646382848147352e+00, -6.644526435704257e+00, -6.643425468385410e+00, -6.641367315604156e+00, -6.643425468385410e+00, -6.641367315604156e+00, -1.788707819282927e+00, -1.788599058614728e+00, -1.809010455848501e+00, -1.808348457021302e+00, -1.759585272929543e+00, -1.767848763533475e+00, -1.776743120899229e+00, -1.785200457687770e+00, -1.822674417484722e+00, -1.802072403555191e+00, -1.822674417484722e+00, -1.802072403555191e+00, -7.101568990892480e-01, -7.087687045287171e-01, -8.538254165588548e-01, -8.543947219948885e-01, -6.245148407913671e-01, -6.584276234305088e-01, -7.421738501593063e-01, -7.659346544677679e-01, -7.561967654013312e-01, -7.143751202918693e-01, -7.561967654013312e-01, -7.143751202918692e-01, -1.595846911300512e-01, -1.600891890214198e-01, -2.305758673865580e-01, -2.312153994988867e-01, -1.488259508842082e-01, -1.538702042536889e-01, -2.556982881448131e+00, -2.555884974174876e+00, -1.680363084831949e-01, -1.665923949810731e-01, -1.680363084831949e-01, -1.665923949810731e-01, -5.877276779407145e-03, -6.107903743330584e-03, -7.536601748155798e-03, -7.650710733981632e-03, -5.634609338992321e-03, -5.966431677427571e-03, -1.118759511815162e-01, -1.126493748397970e-01, -5.756037734165610e-03, -7.901094158649896e-03, -5.756037734165612e-03, -7.901094158649900e-03, -7.886295823195218e-01, -7.916066503368364e-01, -7.850237041217630e-01, -7.881267790397117e-01, -7.870083130917150e-01, -7.900457903737441e-01, -7.880067629098360e-01, -7.909943033941672e-01, -7.875730186921861e-01, -7.905806526503172e-01, -7.875730186921861e-01, -7.905806526503172e-01, -7.663716860767600e-01, -7.688902730805920e-01, -5.321720757215911e-01, -5.352573992363133e-01, -5.988301493580075e-01, -6.036229621127787e-01, -6.922784601948040e-01, -6.953575212269973e-01, -6.452450762845159e-01, -6.485025401791665e-01, -6.452450762845159e-01, -6.485025401791665e-01, -8.930671935472736e-01, -8.949460858242727e-01, -2.671143307801145e-01, -2.679355077180153e-01, -2.976127394437039e-01, -2.991790016182951e-01, -3.746409937673560e-01, -3.769774136570632e-01, -3.275711885753429e-01, -3.272901299162979e-01, -3.275711885753429e-01, -3.272901299162979e-01, -4.898029131123445e-01, -4.944736442425443e-01, -7.175745407149407e-02, -7.220907794496434e-02, -9.365258647005609e-02, -9.626613576044436e-02, -3.731464369260034e-01, -3.813674506433452e-01, -1.302710381882702e-01, -1.325483863687662e-01, -1.302710381882702e-01, -1.325483863687662e-01, -1.859541104530379e-02, -1.926481685841010e-02, -2.028605766398832e-03, -2.033189601560330e-03, -4.127028409681130e-03, -4.389244385825244e-03, -1.255020849939491e-01, -1.270590980129373e-01, -5.451323246476696e-03, -7.243010748543094e-03, -5.451323246476691e-03, -7.243010748543084e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_ssb_d_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ssb_d", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.649267141522013e-08, 0.000000000000000e+00, -1.649270823909408e-08, -1.649185498363486e-08, 0.000000000000000e+00, -1.649211547693500e-08, -1.649000787412013e-08, 0.000000000000000e+00, -1.648925457006102e-08, -1.649920831342283e-08, 0.000000000000000e+00, -1.650098757754808e-08, -1.649214586006169e-08, 0.000000000000000e+00, -1.649685998149261e-08, -1.649214586006169e-08, 0.000000000000000e+00, -1.649685998149261e-08, -3.060859882312261e-05, 0.000000000000000e+00, -3.058746876025831e-05, -3.060536552653476e-05, 0.000000000000000e+00, -3.058300802058056e-05, -3.051416031871624e-05, 0.000000000000000e+00, -3.048936284514400e-05, -3.065180805426745e-05, 0.000000000000000e+00, -3.062523977116754e-05, -3.063804532913462e-05, 0.000000000000000e+00, -3.054293389029673e-05, -3.063804532913462e-05, 0.000000000000000e+00, -3.054293389029673e-05, -2.140628670633763e-02, 0.000000000000000e+00, -2.119002839971894e-02, -2.148284751790014e-02, 0.000000000000000e+00, -2.123296337577973e-02, -2.207582402984949e-02, 0.000000000000000e+00, -2.207172366406180e-02, -2.153691553410384e-02, 0.000000000000000e+00, -2.154312642818938e-02, -2.061840488089048e-02, 0.000000000000000e+00, -2.095522299215564e-02, -2.061840488089048e-02, 0.000000000000000e+00, -2.095522299215564e-02, -1.307052060601192e+00, 0.000000000000000e+00, -1.242842386054535e+00, -1.320900883994546e+00, 0.000000000000000e+00, -1.241590907372305e+00, -1.301092950197298e-02, 0.000000000000000e+00, -1.138913892621848e-02, -1.647277180547044e+00, 0.000000000000000e+00, -1.597221711637373e+00, -1.132896155155441e+00, 0.000000000000000e+00, -2.289573911595860e+00, -1.132896155155440e+00, 0.000000000000000e+00, -2.289573911595865e+00, -4.538235321096938e+00, 0.000000000000000e+00, -4.492991888524618e+00, -4.780577412146292e+00, 0.000000000000000e+00, -4.756274522409472e+00, -2.661940770701795e+00, 0.000000000000000e+00, -2.676523722690210e+00, -4.158488461520060e+00, 0.000000000000000e+00, -4.046182743148218e+00, -4.530631125962584e+00, 0.000000000000000e+00, -1.146219482897431e+01, -4.530631125963248e+00, 0.000000000000000e+00, -1.146219482894319e+01, -3.094953621497460e-06, 0.000000000000000e+00, -3.099465146583908e-06, -3.054649974735017e-06, 0.000000000000000e+00, -3.060474539200999e-06, -3.092869036158843e-06, 0.000000000000000e+00, -3.098236085892602e-06, -3.058283566318381e-06, 0.000000000000000e+00, -3.062812906838847e-06, -3.074181194541927e-06, 0.000000000000000e+00, -3.079854312462470e-06, -3.074181194541927e-06, 0.000000000000000e+00, -3.079854312462470e-06, -3.191647176705052e-04, 0.000000000000000e+00, -3.192233950018464e-04, -3.119662942392330e-04, 0.000000000000000e+00, -3.122578582684893e-04, -3.213958932945162e-04, 0.000000000000000e+00, -3.208902356742024e-04, -3.152096402025713e-04, 0.000000000000000e+00, -3.145673062121270e-04, -3.131707811250963e-04, 0.000000000000000e+00, -3.153171685226397e-04, -3.131707811250963e-04, 0.000000000000000e+00, -3.153171685226397e-04, -2.554385800166367e-02, 0.000000000000000e+00, -2.568924628486523e-02, 2.269861498916373e-03, 0.000000000000000e+00, 2.465226836867052e-03, -4.138141233753145e-02, 0.000000000000000e+00, -3.407259585358394e-02, 2.503302673493637e-03, 0.000000000000000e+00, 1.030709708729266e-03, -1.905655099177818e-02, 0.000000000000000e+00, -2.384484151285964e-02, -1.905655099177820e-02, 0.000000000000000e+00, -2.384484151285964e-02, -1.832568378656530e+00, 0.000000000000000e+00, -1.862123199033292e+00, -7.754278907796143e-01, 0.000000000000000e+00, -7.686744980562472e-01, -2.064615297638329e+00, 0.000000000000000e+00, -2.003890749597260e+00, -2.621441160125421e-05, 0.000000000000000e+00, -2.613649008076539e-05, -1.998468304994611e+00, 0.000000000000000e+00, -2.381860826133281e+00, -1.998468304994611e+00, 0.000000000000000e+00, -2.381860826133281e+00, -5.829010118632535e+00, 0.000000000000000e+00, -5.048107825409276e+00, -5.022281233388542e+00, 0.000000000000000e+00, -4.638606490458829e+00, -2.850653851121928e+01, 0.000000000000000e+00, -3.170941466941496e+01, -3.051926278795523e+00, 0.000000000000000e+00, -2.941480943994829e+00, -1.418648591812502e+01, 0.000000000000000e+00, -1.393539649981955e+01, -1.418648591812502e+01, 0.000000000000000e+00, -1.393539649981955e+01, 8.951013547835488e-03, 0.000000000000000e+00, 8.775290887101715e-03, 5.259500672911407e-03, 0.000000000000000e+00, 5.282254719119436e-03, 7.020462811911628e-03, 0.000000000000000e+00, 6.966547156992181e-03, 8.118724194078273e-03, 0.000000000000000e+00, 7.989906249940983e-03, 7.614916543063278e-03, 0.000000000000000e+00, 7.520115819371630e-03, 7.614916543063278e-03, 0.000000000000000e+00, 7.520115819371630e-03, 1.092281054429024e-02, 0.000000000000000e+00, 1.071496481795823e-02, -6.285729467153225e-02, 0.000000000000000e+00, -6.196766619601998e-02, -4.793975930464409e-02, 0.000000000000000e+00, -4.665194544459994e-02, -1.787314664973173e-02, 0.000000000000000e+00, -1.733174958361577e-02, -3.436017389077040e-02, 0.000000000000000e+00, -3.360092291551858e-02, -3.436017389077040e-02, 0.000000000000000e+00, -3.360092291551858e-02, 7.667016523435289e-04, 0.000000000000000e+00, 1.027703497858194e-03, -4.753332264333234e-01, 0.000000000000000e+00, -4.710685853900639e-01, -3.473154957731670e-01, 0.000000000000000e+00, -3.436772161834321e-01, -2.116568989724154e-01, 0.000000000000000e+00, -2.080011611111174e-01, -2.807546176331455e-01, 0.000000000000000e+00, -2.825900608039673e-01, -2.807546176331457e-01, 0.000000000000000e+00, -2.825900608039675e-01, -8.386169322890231e-02, 0.000000000000000e+00, -8.205880694785278e-02, -2.436913412186145e+00, 0.000000000000000e+00, -2.439734385910501e+00, -2.398737957712002e+00, 0.000000000000000e+00, -2.449586314211087e+00, -2.507021635564730e-01, 0.000000000000000e+00, -2.345938518781187e-01, -3.027941074028303e+00, 0.000000000000000e+00, -3.531921245889085e+00, -3.027941074028309e+00, 0.000000000000000e+00, -3.531921245889089e+00, -3.601064146537901e+00, 0.000000000000000e+00, -3.675763353901813e+00, -1.788990013275786e+01, 0.000000000000000e+00, -3.167265357100937e+01, -1.104965240107724e+01, 0.000000000000000e+00, -1.176171971689167e+01, -3.377214230226381e+00, 0.000000000000000e+00, -3.306220136284804e+00, -2.922561906890732e+01, 0.000000000000000e+00, -1.446583114218586e+01, -2.922561906891542e+01, 0.000000000000000e+00, -1.446583114218581e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
