
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_vmt84_ge_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_vmt84_ge", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.047965153479931e+01, -2.047968978576549e+01, -2.047990773055351e+01, -2.047933764912285e+01, -2.047962954800179e+01, -2.047962954800179e+01, -3.373395692758411e+00, -3.373374484287135e+00, -3.372967112827636e+00, -3.374316320217380e+00, -3.373451583137630e+00, -3.373451583137630e+00, -6.684353964348918e-01, -6.682246151900206e-01, -6.647904385866089e-01, -6.695678464483374e-01, -6.679618317969936e-01, -6.679618317969936e-01, -2.009580533633175e-01, -2.019302876630379e-01, -7.739831515555778e-01, -1.731826480135663e-01, -1.830530429192009e-01, -1.830530429192009e-01, -5.249621913660510e-03, -5.564717650552503e-03, -5.595132782233008e-02, -2.663765886497989e-03, -3.639244388477020e-03, -3.639244388477020e-03, -4.949466016806209e+00, -4.949455665243693e+00, -4.949473297582341e+00, -4.949464037614086e+00, -4.949456430543478e+00, -4.949456430543478e+00, -2.005065184354127e+00, -2.015680241687702e+00, -2.003488930424866e+00, -2.012826680272516e+00, -2.011730154988178e+00, -2.011730154988178e+00, -5.658506006284070e-01, -5.979593007236328e-01, -5.262544087275550e-01, -5.315213094922504e-01, -5.727456807699777e-01, -5.727456807699777e-01, -1.388556480666965e-01, -2.174665393884410e-01, -1.306550805630250e-01, -1.799776660367525e+00, -1.502825491888394e-01, -1.502825491888394e-01, -1.880452900713483e-03, -2.621820962287618e-03, -2.125591947432368e-03, -9.378609412317067e-02, -2.557444563595834e-03, -2.557444563595834e-03, -5.491880816227438e-01, -5.496458299612574e-01, -5.494878959854576e-01, -5.493505338796403e-01, -5.494188806715543e-01, -5.494188806715543e-01, -5.332539371880017e-01, -4.897622445493576e-01, -5.014745777625245e-01, -5.134310176615716e-01, -5.071383804077068e-01, -5.071383804077068e-01, -6.275359788584504e-01, -2.574235304066981e-01, -2.902349532648782e-01, -3.494112692889014e-01, -3.166265683196695e-01, -3.166265683196695e-01, -4.516628312402569e-01, -5.211173570844828e-02, -7.639532494549495e-02, -3.298453022589515e-01, -1.129762665500900e-01, -1.129762665500900e-01, -7.595369762879306e-03, -2.614060838951754e-04, -1.208651181497277e-03, -1.077874654691155e-01, -2.354705870606448e-03, -2.354705870606447e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_vmt84_ge_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_vmt84_ge", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.561137208610975e+01, -2.561146532300745e+01, -2.561186688866385e+01, -2.561047997279098e+01, -2.561120853016048e+01, -2.561120853016048e+01, -4.125777811104541e+00, -4.125817809188682e+00, -4.126843591817648e+00, -4.125843669898511e+00, -4.125925223998030e+00, -4.125925223998030e+00, -7.777422651197626e-01, -7.763920556087011e-01, -7.433060515961601e-01, -7.500765319843781e-01, -7.491173670360414e-01, -7.491173670360414e-01, -1.876203819680288e-01, -1.905134992240252e-01, -9.121082069276066e-01, -1.521451617643345e-01, -1.627860612306228e-01, -1.627860612306228e-01, -7.817575638185565e-03, -8.170764244243659e-03, -9.985874416062013e-02, -4.911931865455977e-03, -5.886135742115795e-03, -5.886135742115795e-03, -6.293308534173521e+00, -6.295570229495230e+00, -6.293411774759293e+00, -6.295408437556492e+00, -6.294455523690418e+00, -6.294455523690418e+00, -2.222261271484639e+00, -2.241456839323212e+00, -2.203586890336403e+00, -2.220487893314783e+00, -2.241981797432160e+00, -2.241981797432160e+00, -6.997643117636521e-01, -7.802866747742153e-01, -6.445288101038122e-01, -6.882329332373941e-01, -7.135735859360188e-01, -7.135735859360188e-01, -1.355435087489857e-01, -1.924898902553201e-01, -1.308895480875862e-01, -2.351385670053404e+00, -1.350184962307957e-01, -1.350184962307957e-01, -3.915981408688698e-03, -4.786645029752474e-03, -3.544339042349919e-03, -1.098803344260352e-01, -4.273231508558290e-03, -4.273231508558289e-03, -7.268151806088827e-01, -7.179712483426893e-01, -7.210646110898512e-01, -7.236338661714928e-01, -7.223470115207622e-01, -7.223470115207622e-01, -7.084949873904922e-01, -5.718128022894994e-01, -6.103142509012872e-01, -6.494052645655044e-01, -6.295090976744737e-01, -6.295090976744737e-01, -8.171955408754660e-01, -2.375674294552515e-01, -2.875058266108583e-01, -4.003775833943951e-01, -3.383864726490449e-01, -3.383864726490449e-01, -5.257086859252925e-01, -1.011025657357823e-01, -1.070891936285041e-01, -3.926096329091726e-01, -1.150481640140778e-01, -1.150481640140778e-01, -1.072237620510737e-02, -1.165728655694206e-03, -2.842833457700504e-03, -1.131364683629359e-01, -3.966282588889159e-03, -3.966282588889160e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_vmt84_ge_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_vmt84_ge", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.291040505996377e-09, -4.291001099363143e-09, -4.290797565662914e-09, -4.291384452451754e-09, -4.291080955561269e-09, -4.291080955561269e-09, -5.954855621768910e-06, -5.954914538920787e-06, -5.955691631844852e-06, -5.949818221551000e-06, -5.954352098365999e-06, -5.954352098365999e-06, -4.048462643335338e-03, -4.058921556285352e-03, -4.291708774258743e-03, -4.163338584807654e-03, -4.199254787351949e-03, -4.199254787351949e-03, -5.956641542312640e-01, -5.801949127748471e-01, -2.225589103464324e-03, -1.068587807126799e+00, -8.827433321636641e-01, -8.827433321636644e-01, 1.208847081605218e+02, 9.785655348741480e+01, 1.514449322543498e+01, 9.937626093823224e+02, 4.292080713716039e+02, 4.292080713716045e+02, -1.237722096523556e-06, -1.237296536826184e-06, -1.237696800206119e-06, -1.237321200342289e-06, -1.237509532306442e-06, -1.237509532306442e-06, -5.227516135491851e-05, -5.102997280757313e-05, -5.280073180225637e-05, -5.168924737171687e-05, -5.133024802144648e-05, -5.133024802144648e-05, -7.442638509939476e-03, -5.663959375198810e-03, -1.004099645676905e-02, -9.142056065269728e-03, -7.040149292310605e-03, -7.040149292310605e-03, -1.670805582919560e+00, -4.424489206524583e-01, -1.888621517356270e+00, -6.893118052731286e-05, -1.696309531536925e+00, -1.696309531536925e+00, 2.571611333542385e+03, 1.095128996955248e+03, 3.377985034415032e+03, -2.412053544802461e+00, 1.602124172811365e+03, 1.602124172811363e+03, -7.849733332275477e-03, -7.925718041041885e-03, -7.898905781414207e-03, -7.877019161265236e-03, -7.887988117019198e-03, -7.887988117019198e-03, -8.796505578481571e-03, -1.400235494020484e-02, -1.225120330520072e-02, -1.074369951758047e-02, -1.149385305941475e-02, -1.149385305941475e-02, -4.678815262799094e-03, -2.228126606293383e-01, -1.310663617207265e-01, -5.499376638648226e-02, -8.682144992976805e-02, -8.682144992976810e-02, -1.941454105936844e-02, 2.056167494746341e+01, 1.375252405995038e+00, -6.684451028962557e-02, -3.110986546677044e+00, -3.110986546677042e+00, 2.811827513086247e+01, 8.037786591027351e+04, 9.111406967125607e+03, -3.178577865141369e+00, 2.176242465576354e+03, 2.176242465576379e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
