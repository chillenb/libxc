
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_hjs_b88_v2_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_hjs_b88_v2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.099804308883012e+01, -2.099806638770117e+01, -2.099824820766910e+01, -2.099786512680338e+01, -2.099805472487726e+01, -2.099805472487726e+01, -3.431339648073413e+00, -3.431309973461181e+00, -3.430638608807577e+00, -3.432536396212578e+00, -3.431339266724786e+00, -3.431339266724786e+00, -6.401499113959550e-01, -6.401985711856593e-01, -6.436206000114547e-01, -6.478961058322394e-01, -6.401638109975903e-01, -6.401638109975903e-01, -1.588377542419234e-01, -1.594915212323482e-01, -7.554917911090313e-01, -1.298392761359685e-01, -1.590031853463848e-01, -1.590031853463848e-01, -9.840292832109706e-03, -1.129268361928487e-02, -5.780403386109497e-02, 0.000000000000000e+00, -1.094873266170207e-02, -1.094873266170207e-02, -4.995849780960364e+00, -4.995173544789281e+00, -4.995787173824020e+00, -4.995261255069033e+00, -4.995493677266236e+00, -4.995493677266236e+00, -2.062382368108239e+00, -2.071946765968694e+00, -2.063957174323802e+00, -2.071385175297277e+00, -2.066868582678916e+00, -2.066868582678916e+00, -5.158603442843747e-01, -5.366920150976340e-01, -4.885765491748745e-01, -4.891758479780605e-01, -5.335292056249666e-01, -5.335292056249666e-01, -1.082255869945283e-01, -1.834545343884214e-01, -1.039652802521134e-01, -1.755170911107343e+00, -1.144253396958111e-01, -1.144253396958111e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -7.133454689434557e-02, 0.000000000000000e+00, 0.000000000000000e+00, -4.993495921764193e-01, -5.026363138493805e-01, -5.014923938289841e-01, -5.005801485487135e-01, -5.010386305160011e-01, -5.010386305160011e-01, -4.804543364886806e-01, -4.581517816253572e-01, -4.650935613865561e-01, -4.710144796398671e-01, -4.678679715931252e-01, -4.678679715931252e-01, -5.666223906620906e-01, -2.248344046084562e-01, -2.563369684099497e-01, -3.076869714863281e-01, -2.796903353331722e-01, -2.796903353331721e-01, -4.102358476372485e-01, -5.793750616367662e-02, -6.970036342247798e-02, -2.778741956395960e-01, -8.439810368995886e-02, -8.439810368995887e-02, -1.546692407216483e-02, 0.000000000000000e+00, 0.000000000000000e+00, -7.783180189303132e-02, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_hjs_b88_v2_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_hjs_b88_v2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.514661850602728e+01, -2.514670130556190e+01, -2.514708450847943e+01, -2.514572837366484e+01, -2.514666205619008e+01, -2.514666205619008e+01, -3.995461549818485e+00, -3.995494729603659e+00, -3.996574304315163e+00, -3.995574834147658e+00, -3.995495898797019e+00, -3.995495898797019e+00, -6.982664995702969e-01, -6.970937003745653e-01, -6.666552535809568e-01, -6.728908269043730e-01, -6.978405364158232e-01, -6.978405364158232e-01, -1.404057135608598e-01, -1.435039763455476e-01, -8.617670884623346e-01, -8.600227340124757e-02, -1.413297948260503e-01, -1.413297948260503e-01, -1.964819620155299e-02, -2.172501388160618e-02, -7.258812350891582e-03, 0.000000000000000e+00, -2.115765487681665e-02, -2.115765487681665e-02, -6.140571501363388e+00, -6.143033089835421e+00, -6.140823554213130e+00, -6.142737557815982e+00, -6.141832971910700e+00, -6.141832971910700e+00, -2.135435897206734e+00, -2.153087927013323e+00, -2.126239712543176e+00, -2.139942967407513e+00, -2.159560989937804e+00, -2.159560989937804e+00, -6.209819019492785e-01, -7.060512726320501e-01, -5.847018188044435e-01, -6.325954182140175e-01, -6.505843103185840e-01, -6.505843103185840e-01, -5.345751971687106e-02, -1.400694247041976e-01, -5.181092236909926e-02, -2.267455144065780e+00, -6.661487632359465e-02, -6.661487632359465e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -2.044668098959836e-02, 0.000000000000000e+00, 0.000000000000000e+00, -6.765303909287378e-01, -6.653395786548522e-01, -6.692322538743384e-01, -6.723272719359480e-01, -6.707692955534700e-01, -6.707692955534699e-01, -6.542169573149799e-01, -5.175917755877928e-01, -5.536307224043887e-01, -5.899377713352886e-01, -5.712232941286598e-01, -5.712232941286599e-01, -7.419409072962000e-01, -1.916028297712509e-01, -2.424739461237971e-01, -3.404480598882540e-01, -2.873635063703550e-01, -2.873635063703551e-01, -4.595406034237842e-01, -5.295262772969540e-03, -1.607705626623714e-02, -3.246931438151793e-01, -3.574952757368589e-02, -3.574952757368578e-02, -2.742004504753403e-02, 0.000000000000000e+00, 0.000000000000000e+00, -3.208509985264556e-02, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_hjs_b88_v2_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_hjs_b88_v2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-7.270581423524428e-09, -7.270550039141303e-09, -7.270301348390389e-09, -7.270817461496015e-09, -7.270565780920043e-09, -7.270565780920043e-09, -9.608033088760293e-06, -9.608347360730852e-06, -9.615405210300440e-06, -9.595110293686050e-06, -9.608031018134342e-06, -9.608031018134342e-06, -5.974766878711040e-03, -5.977971873829295e-03, -6.026560080423298e-03, -5.873423099696640e-03, -5.976031015728737e-03, -5.976031015728737e-03, -7.023560827123353e-01, -6.847553689771032e-01, -3.205921109330890e-03, -1.587158206170071e+00, -6.973108987076619e-01, -6.973108987076619e-01, -8.664127120479938e+00, -2.541563182783058e+01, -3.401895701917014e+01, 0.000000000000000e+00, -2.555967755288703e+01, -2.555967755288703e+01, -2.192487899800897e-06, -2.193945589015656e-06, -2.192624606684394e-06, -2.193758164132247e-06, -2.193251554568296e-06, -2.193251554568296e-06, -7.334038668506873e-05, -7.187710866668855e-05, -7.334846256840951e-05, -7.220831752605980e-05, -7.232694872825149e-05, -7.232694872825149e-05, -1.265413932073132e-02, -1.096937095394279e-02, -1.535239032311076e-02, -1.514274923951972e-02, -1.120278689767562e-02, -1.120278689767562e-02, -3.479488386526423e+00, -5.227607323467466e-01, -3.770523676292465e+00, -1.342394596293389e-04, -2.514193127351151e+00, -2.514193127351151e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.414101898417702e+01, 0.000000000000000e+00, 0.000000000000000e+00, -1.427159074865524e-02, -1.382460284358670e-02, -1.396982857351723e-02, -1.409321744712851e-02, -1.403030793934806e-02, -1.403030793934806e-02, -1.635387025726433e-02, -1.953127743182104e-02, -1.827555102484794e-02, -1.731225968287070e-02, -1.780254313597853e-02, -1.780254313597851e-02, -9.045364953671638e-03, -2.543939722711324e-01, -1.540880425716612e-01, -7.682522774772062e-02, -1.099619678217496e-01, -1.099619678217500e-01, -2.879994157770831e-02, -3.980174044451035e+01, -1.785175959341273e+01, -1.046962298805010e-01, -7.052140095796022e+00, -7.052140095796041e+00, -4.822637334530528e+01, 0.000000000000000e+00, 0.000000000000000e+00, -8.496888698109560e+00, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
