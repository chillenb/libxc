
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_n12_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_n12", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.076816123256422e+01, -2.076826125160401e+01, -2.076867163496548e+01, -2.076703441037282e+01, -2.076821427874737e+01, -2.076821427874737e+01, -3.469158396399753e+00, -3.469196227561734e+00, -3.470368184978351e+00, -3.469042688851582e+00, -3.469191887366024e+00, -3.469191887366024e+00, -6.995076153964869e-01, -6.992829716913239e-01, -6.953065306398074e-01, -7.000419773970389e-01, -6.994230690143156e-01, -6.994230690143156e-01, -1.933630080572097e-01, -1.939155145968657e-01, -8.287933115817271e-01, -1.429434665748995e-01, -1.935080889780321e-01, -1.935080889780321e-01, -1.211553349408861e-02, -1.247022088280091e-02, -1.574526149682290e-02, -6.995760261719846e-03, -1.239163393983703e-02, -1.239163393983703e-02, -5.241256766110769e+00, -5.242778341638756e+00, -5.241414692186775e+00, -5.242597925794128e+00, -5.242036842081309e+00, -5.242036842081309e+00, -1.941466557827223e+00, -1.954621856376702e+00, -1.935077273693822e+00, -1.945035279812111e+00, -1.959596304460838e+00, -1.959596304460838e+00, -5.765234199896607e-01, -5.990590645331825e-01, -5.465901195422640e-01, -5.496153495015815e-01, -5.962735595942058e-01, -5.962735595942058e-01, -7.068119986285983e-02, -2.086100080143284e-01, -7.369316102612626e-02, -1.895930395607469e+00, -1.088384409847263e-01, -1.088384409847263e-01, -6.787925448307364e-03, -7.583293200341381e-03, -5.946151832885734e-03, -2.528979267354372e-02, -7.022106591487597e-03, -7.022106591487597e-03, -5.586820421110700e-01, -5.632215197495184e-01, -5.616864180083734e-01, -5.604275495412839e-01, -5.610641575673943e-01, -5.610641575673944e-01, -5.391342576158239e-01, -5.091134976703653e-01, -5.207596638378054e-01, -5.298065493040335e-01, -5.253169850184682e-01, -5.253169850184682e-01, -6.307189967882474e-01, -2.579022620705267e-01, -2.904335393633828e-01, -3.459083426734577e-01, -3.142664795022624e-01, -3.142664795022623e-01, -4.566912675363761e-01, -1.445885039699957e-02, -1.776459150537899e-02, -3.174040875653353e-01, -5.246440059251987e-02, -5.246440059251991e-02, -1.330294023080398e-02, -2.359798363299242e-03, -4.296763874555173e-03, -5.201933150072769e-02, -6.116356295712980e-03, -6.116356295712972e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_n12_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_n12", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.279222751885349e+01, -3.279215275176319e+01, -3.279210538433526e+01, -3.279332405751207e+01, -3.279218569696795e+01, -3.279218569696795e+01, -5.068790173233603e+00, -5.068664335126390e+00, -5.065434874893495e+00, -5.072188871005690e+00, -5.068749407568103e+00, -5.068749407568103e+00, -8.233053533873121e-01, -8.221870729782861e-01, -7.804012644867206e-01, -7.890797805951919e-01, -8.229012338324994e-01, -8.229012338324994e-01, -1.740946210384074e-01, -1.731492232013444e-01, -1.000846107356202e+00, -2.683238580333185e-01, -1.736370582144462e-01, -1.736370582144462e-01, -1.479324861233808e-02, -1.517490901301667e-02, -4.625601353185598e-02, -8.943460575344411e-03, -1.509559488830601e-02, -1.509559488830601e-02, -7.177014620694474e+00, -7.172726829771787e+00, -7.176591993620733e+00, -7.173257389978414e+00, -7.174786582466603e+00, -7.174786582466603e+00, -2.653149014191501e+00, -2.699356250353837e+00, -2.604509913884075e+00, -2.643371117733340e+00, -2.737956276481221e+00, -2.737956276481221e+00, -7.054256790230614e-01, -7.710723766066550e-01, -6.686866663492854e-01, -7.004443002393994e-01, -7.325727604056465e-01, -7.325727604056465e-01, -2.669131294728640e-01, -2.689912870508533e-01, -2.615119101322336e-01, -2.417039229846278e+00, -2.808157768115015e-01, -2.808157768115015e-01, -8.691681953025675e-03, -9.649488792236252e-03, -7.660341789057665e-03, -1.146411635909394e-01, -8.975513181745170e-03, -8.975513181745170e-03, -7.385359435800853e-01, -7.295565487480367e-01, -7.325278248652849e-01, -7.350069351175408e-01, -7.337460169644388e-01, -7.337460169644389e-01, -7.155361579133658e-01, -6.042503729266803e-01, -6.368934733768280e-01, -6.640199066444519e-01, -6.502745334711507e-01, -6.502745334711509e-01, -8.076861156034478e-01, -2.476344496767516e-01, -2.701785299836695e-01, -4.019034046193588e-01, -3.279107581972650e-01, -3.279107581972650e-01, -5.383445963236998e-01, -3.486214344060599e-02, -7.995583418044455e-02, -3.921207536707313e-01, -2.032222137018760e-01, -2.032222137018766e-01, -1.600469060164642e-02, -3.109462481467103e-03, -5.597664902490097e-03, -1.916940551654097e-01, -7.870401930799081e-03, -7.870401930799055e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_n12_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_n12", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.310892615833532e-08, 1.310857018330266e-08, 1.310723331170704e-08, 1.311305727381784e-08, 1.310873632970944e-08, 1.310873632970944e-08, 8.028407260575917e-06, 8.026564040184451e-06, 7.974903998399528e-06, 8.059511046323334e-06, 8.027376231453897e-06, 8.027376231453897e-06, -4.114397020022376e-03, -4.111296301642181e-03, -4.393158419475938e-03, -4.225176841516365e-03, -4.113269287123468e-03, -4.113269287123468e-03, -6.929613423373935e-01, -7.071460453198034e-01, -2.220379283542092e-03, 1.158553982866654e+00, -6.988730161649263e-01, -6.988730161649263e-01, 7.534074723717460e+00, 8.249067070809600e+00, 1.535011139736102e+01, -4.181846726263831e-01, 8.398015355556037e+00, 8.398015355556037e+00, 8.461736328091036e-07, 8.241628900874714e-07, 8.439755573783511e-07, 8.268607945997927e-07, 8.348240186305722e-07, 8.348240186305722e-07, 1.849549721028184e-05, 2.143409551270854e-05, 1.385737394570828e-05, 1.652741299582573e-05, 2.546415583750866e-05, 2.546415583750866e-05, -1.146706601658393e-02, -1.360544072060766e-02, -1.339925170003966e-02, -1.633701841962848e-02, -1.072527792421932e-02, -1.072527792421932e-02, 5.789488565450362e+00, -6.529226273747328e-02, 6.165761553994496e+00, -1.828453300161602e-04, 3.352654030050955e+00, 3.352654030050955e+00, -6.544722244237873e-01, 1.632052443255428e-01, -4.274066969693799e+00, 1.477430454498188e+01, -6.225355140988502e-01, -6.225355141025632e-01, -1.779478064569268e-02, -1.637191782023656e-02, -1.686376806652162e-02, -1.725819022535865e-02, -1.705951825463990e-02, -1.705951825463990e-02, -1.969983999157676e-02, -1.569296448638480e-02, -1.545895052060877e-02, -1.651247729897791e-02, -1.588128431436638e-02, -1.588128431436638e-02, -1.157775909973679e-02, -2.095217949687940e-01, -1.656240134195279e-01, -6.314361922640103e-02, -1.085384468837813e-01, -1.085384468837812e-01, -2.329577030819645e-02, 1.290283100980062e+01, 1.367256759502665e+01, -6.972953284958656e-02, 1.080680242508541e+01, 1.080680242508540e+01, 7.561025498967854e+00, -8.122446617914227e+00, -4.491309568320918e+00, 1.273369575308863e+01, -2.861399066663188e+00, -2.861399066669528e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
