
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_c09x_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_c09x", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.032251428882699e+01, -2.032255626742978e+01, -2.032278396608438e+01, -2.032215856658082e+01, -2.032248042326171e+01, -2.032248042326171e+01, -3.339439190435427e+00, -3.339423809465359e+00, -3.339150308064140e+00, -3.340260342289891e+00, -3.339501506137249e+00, -3.339501506137249e+00, -6.585138385356876e-01, -6.582282095947317e-01, -6.528182607706963e-01, -6.575759387283040e-01, -6.589162298340360e-01, -6.589162298340360e-01, -1.970458960722268e-01, -1.978347630454856e-01, -7.638580323831060e-01, -1.753606800578407e-01, -1.956317158537927e-01, -1.956317158537926e-01, -1.258416275999367e-02, -1.325220860139745e-02, -7.100687335773503e-02, -7.255454387591290e-03, -1.012758922461737e-02, -1.012758922461737e-02, -4.920788037131588e+00, -4.920984490467617e+00, -4.920803820607922e+00, -4.920977131954064e+00, -4.920883843977842e+00, -4.920883843977842e+00, -1.967625313573877e+00, -1.978506185984453e+00, -1.965057905717562e+00, -1.974613112541416e+00, -1.974969095513588e+00, -1.974969095513588e+00, -5.608210865266097e-01, -5.963424918901150e-01, -5.213596735422208e-01, -5.298609110081614e-01, -5.688184558706590e-01, -5.688184558706592e-01, -1.538666161763578e-01, -2.163737351916072e-01, -1.468642131315604e-01, -1.795174495797684e+00, -1.572881438040344e-01, -1.572881438040344e-01, -5.601414596632426e-03, -7.092647633318706e-03, -5.431650307061248e-03, -1.106489269613787e-01, -6.823077262492656e-03, -6.823077262492657e-03, -5.486707870758415e-01, -5.482318740727412e-01, -5.483857960525979e-01, -5.485094069899870e-01, -5.484469551345375e-01, -5.484469551345375e-01, -5.330156456442892e-01, -4.826377871066306e-01, -4.961769704761863e-01, -5.101489053953994e-01, -5.028363594065368e-01, -5.028363594065368e-01, -6.256831691349218e-01, -2.526496197181987e-01, -2.836189189189199e-01, -3.437706826666190e-01, -3.100238886094053e-01, -3.100238886094053e-01, -4.449796170083591e-01, -6.823273258668247e-02, -9.147966968750325e-02, -3.256748841407882e-01, -1.279131326093837e-01, -1.279131326093837e-01, -1.773879906999039e-02, -1.895701271684939e-03, -3.986673206797784e-03, -1.236658033912076e-01, -6.265818467546986e-03, -6.265818467546981e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_c09x_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_c09x", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.577614554340606e+01, -2.577611408943399e+01, -2.577625060855784e+01, -2.577619040302410e+01, -2.577657402713510e+01, -2.577665739507218e+01, -2.577538781607901e+01, -2.577514536128041e+01, -2.577620884805440e+01, -2.577574042329127e+01, -2.577620884805440e+01, -2.577574042329127e+01, -4.157484600119873e+00, -4.157608908279823e+00, -4.157520272128462e+00, -4.157648042218846e+00, -4.158420344354549e+00, -4.158680452509472e+00, -4.157530731528835e+00, -4.157788444510008e+00, -4.156718030022466e+00, -4.158665050811194e+00, -4.156718030022466e+00, -4.158665050811194e+00, -7.814462876333018e-01, -7.868555865670105e-01, -7.794330210624294e-01, -7.860749021325818e-01, -7.523990241051954e-01, -7.429515587773374e-01, -7.531308905897321e-01, -7.561801992105700e-01, -7.962852835658131e-01, -7.033140338424776e-01, -7.962852835658131e-01, -7.033140338424776e-01, -1.705043974499878e-01, -1.799676259998109e-01, -1.742194823885143e-01, -1.851417996687168e-01, -8.990829338977522e-01, -9.394272609847431e-01, -1.195321095975956e-01, -1.213028020975735e-01, -1.787969894764972e-01, -9.686292227167970e-02, -1.787969894764971e-01, -9.686292227167960e-02, -1.622474977341062e-02, -1.724071455432799e-02, -1.700159811403843e-02, -1.821299937060257e-02, -8.496197331585334e-02, -9.040207698407517e-02, -9.753149573331581e-03, -9.590633443322262e-03, -1.447402789584759e-02, -8.236633243686191e-03, -1.447402789584759e-02, -8.236633243686191e-03, -6.326420176819304e+00, -6.324866954151564e+00, -6.328532184655521e+00, -6.326907382783625e+00, -6.326539744522799e+00, -6.324938663006172e+00, -6.328351980261131e+00, -6.326792303886878e+00, -6.327500520742280e+00, -6.325891722796095e+00, -6.327500520742280e+00, -6.325891722796095e+00, -2.233480171858937e+00, -2.233356636305236e+00, -2.253877898004959e+00, -2.253171441018122e+00, -2.209117393691323e+00, -2.216087491942289e+00, -2.226864183809560e+00, -2.233954761242158e+00, -2.262785452114365e+00, -2.246263314744783e+00, -2.262785452114365e+00, -2.246263314744783e+00, -7.056631141997173e-01, -7.038532094446980e-01, -7.820259148613620e-01, -7.825677176821345e-01, -6.365139977815837e-01, -6.618966493713079e-01, -6.792299728879677e-01, -7.015788689318895e-01, -7.366618557408374e-01, -6.991146295517827e-01, -7.366618557408375e-01, -6.991146295517829e-01, -1.065035027405358e-01, -1.052567148613930e-01, -1.629702288814947e-01, -1.639886009655024e-01, -1.085106964916318e-01, -1.058149924899111e-01, -2.357646592161122e+00, -2.356616451709817e+00, -1.004081925030768e-01, -1.009785329947658e-01, -1.004081925030768e-01, -1.009785329947658e-01, -7.316710822358245e-03, -7.603835232581227e-03, -9.384248145823318e-03, -9.526279109326961e-03, -7.017289063124006e-03, -7.431556838234239e-03, -1.190313005437761e-01, -1.202757384583171e-01, -7.167093694860514e-03, -9.842715339788739e-03, -7.167093694860515e-03, -9.842715339788741e-03, -7.260580144409473e-01, -7.289250703021164e-01, -7.182801813855429e-01, -7.211949355693715e-01, -7.210059854142370e-01, -7.239209525390805e-01, -7.232817073936980e-01, -7.261495035046860e-01, -7.221434727721791e-01, -7.250340725776356e-01, -7.221434727721791e-01, -7.250340725776356e-01, -7.076373635982490e-01, -7.099849326819188e-01, -5.751231702296977e-01, -5.780268057348859e-01, -6.135692449986256e-01, -6.166956570371175e-01, -6.518215778808244e-01, -6.542309156671646e-01, -6.326164892940033e-01, -6.351079661050312e-01, -6.326164892940033e-01, -6.351079661050312e-01, -8.186641613001130e-01, -8.203011426818262e-01, -2.183051929944324e-01, -2.200330819459423e-01, -2.782293654552842e-01, -2.822610798765011e-01, -4.022022658914772e-01, -4.047054028714053e-01, -3.381126548908100e-01, -3.382567732234128e-01, -3.381126548908100e-01, -3.382567732234129e-01, -5.278565359507140e-01, -5.322261056438680e-01, -8.325909868746886e-02, -8.382380659340642e-02, -1.160588800149857e-01, -1.193154112618932e-01, -3.925413019089080e-01, -3.992189850162153e-01, -1.033853650458019e-01, -9.244094403541799e-02, -1.033853650458018e-01, -9.244094403541796e-02, -2.320857319530806e-02, -2.404998623690584e-02, -2.524706620537732e-03, -2.530477010341241e-03, -5.137193664633733e-03, -5.463820155857601e-03, -1.018659500572675e-01, -1.014952819392297e-01, -6.788759875622967e-03, -9.021574105550110e-03, -6.788759875622961e-03, -9.021574105550103e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_c09x_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_c09x", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-6.686858560151291e-09, 0.000000000000000e+00, -6.686893375176923e-09, -6.686776810081547e-09, 0.000000000000000e+00, -6.686833983246947e-09, -6.686491995311418e-09, 0.000000000000000e+00, -6.686432385263979e-09, -6.687415839499083e-09, 0.000000000000000e+00, -6.687609731319772e-09, -6.686810978605134e-09, 0.000000000000000e+00, -6.687121947830049e-09, -6.686810978605134e-09, 0.000000000000000e+00, -6.687121947830049e-09, -9.443231655403889e-06, 0.000000000000000e+00, -9.444091525420169e-06, -9.443156705773762e-06, 0.000000000000000e+00, -9.444111602851709e-06, -9.442296770066916e-06, 0.000000000000000e+00, -9.441851028265343e-06, -9.437690223812914e-06, 0.000000000000000e+00, -9.437539581562429e-06, -9.449414614662546e-06, 0.000000000000000e+00, -9.436029686746977e-06, -9.449414614662546e-06, 0.000000000000000e+00, -9.436029686746977e-06, -6.738557720940305e-03, 0.000000000000000e+00, -6.649798783069981e-03, -6.774609285869195e-03, 0.000000000000000e+00, -6.665278052555833e-03, -7.276783038260297e-03, 0.000000000000000e+00, -7.442113341888055e-03, -7.150690572672834e-03, 0.000000000000000e+00, -7.101098202438357e-03, -6.473556331604819e-03, 0.000000000000000e+00, -7.970610581046865e-03, -6.473556331604819e-03, 0.000000000000000e+00, -7.970610581046865e-03, -1.383962386954286e+00, 0.000000000000000e+00, -1.213673412605642e+00, -1.334690712694272e+00, 0.000000000000000e+00, -1.147265825247009e+00, -3.875033588214477e-03, 0.000000000000000e+00, -3.426855448878590e-03, -3.149589774196684e+00, 0.000000000000000e+00, -3.006128070329737e+00, -1.171090718880012e+00, 0.000000000000000e+00, -7.284223018108359e+00, -1.171090718880011e+00, 0.000000000000000e+00, -7.284223018108364e+00, -9.812930583889553e-25, 0.000000000000000e+00, -1.396420567533354e-21, -1.796656201973179e-21, 0.000000000000000e+00, -2.876576795347396e-18, -9.294226770115696e+00, 0.000000000000000e+00, -7.180568181407271e+00, -6.230883247760790e-80, 0.000000000000000e+00, -4.626261096822177e-84, -3.571416230994680e-32, 0.000000000000000e+00, -3.425126605171269e-66, -3.571416230995035e-32, 0.000000000000000e+00, -3.425126605172239e-66, -1.903588104208770e-06, 0.000000000000000e+00, -1.905403833344008e-06, -1.902395089217257e-06, 0.000000000000000e+00, -1.904250191563386e-06, -1.903513209845619e-06, 0.000000000000000e+00, -1.905358021120143e-06, -1.902489633511069e-06, 0.000000000000000e+00, -1.904310070741151e-06, -1.902983639289967e-06, 0.000000000000000e+00, -1.904825481077052e-06, -1.902983639289967e-06, 0.000000000000000e+00, -1.904825481077052e-06, -9.038755605796814e-05, 0.000000000000000e+00, -9.040543280683662e-05, -8.791359827777394e-05, 0.000000000000000e+00, -8.800605011755424e-05, -9.225192731245537e-05, 0.000000000000000e+00, -9.173671573072492e-05, -9.005873048428169e-05, 0.000000000000000e+00, -8.952598288604123e-05, -8.763697485201998e-05, 0.000000000000000e+00, -8.895109592835716e-05, -8.763697485201998e-05, 0.000000000000000e+00, -8.895109592835716e-05, -1.163760437810218e-02, 0.000000000000000e+00, -1.176247689908455e-02, -8.556466494050062e-03, 0.000000000000000e+00, -8.542584631155786e-03, -1.710773940827536e-02, 0.000000000000000e+00, -1.484443014352692e-02, -1.484138431360605e-02, 0.000000000000000e+00, -1.301914272323118e-02, -9.977496303146696e-03, 0.000000000000000e+00, -1.222920445371146e-02, -9.977496303146699e-03, 0.000000000000000e+00, -1.222920445371146e-02, -6.683364259249102e+00, 0.000000000000000e+00, -6.693433578352854e+00, -1.144629703392844e+00, 0.000000000000000e+00, -1.125571387119703e+00, -7.966683728711383e+00, 0.000000000000000e+00, -7.493847683349901e+00, -1.038641902748523e-04, 0.000000000000000e+00, -1.040520820252844e-04, -5.761625807333094e+00, 0.000000000000000e+00, -5.532924613379005e+00, -5.761625807333094e+00, 0.000000000000000e+00, -5.532924613379005e+00, -2.850479551787117e-122, 0.000000000000000e+00, -1.002645909896723e-121, -2.319729665307024e-78, 0.000000000000000e+00, -3.191019986580965e-79, -9.629368866965613e-57, 0.000000000000000e+00, -4.402715702033036e-47, -9.073826692991753e+00, 0.000000000000000e+00, -8.662934863704361e+00, -1.833542667270424e-79, 0.000000000000000e+00, -4.060868587305774e-40, -1.833542667269851e-79, 0.000000000000000e+00, -4.060868587305543e-40, -1.181999517639334e-02, 0.000000000000000e+00, -1.163974756363386e-02, -1.204780361159838e-02, 0.000000000000000e+00, -1.186291259781925e-02, -1.196730270199455e-02, 0.000000000000000e+00, -1.178357941404252e-02, -1.190085531579005e-02, 0.000000000000000e+00, -1.171942222838711e-02, -1.193406429779978e-02, 0.000000000000000e+00, -1.175149924339540e-02, -1.193406429779978e-02, 0.000000000000000e+00, -1.175149924339540e-02, -1.319436640421938e-02, 0.000000000000000e+00, -1.302145375839200e-02, -2.327690295142035e-02, 0.000000000000000e+00, -2.289204331978290e-02, -1.967444276614356e-02, 0.000000000000000e+00, -1.933966100881288e-02, -1.671345961771855e-02, 0.000000000000000e+00, -1.648285375564639e-02, -1.814806245493913e-02, 0.000000000000000e+00, -1.788419246004401e-02, -1.814806245493913e-02, 0.000000000000000e+00, -1.788419246004401e-02, -7.095114612021298e-03, 0.000000000000000e+00, -7.051150971986533e-03, -5.013702631351399e-01, 0.000000000000000e+00, -4.914085386129302e-01, -2.625306794843471e-01, 0.000000000000000e+00, -2.534791935177717e-01, -9.317363287829021e-02, 0.000000000000000e+00, -9.119671313625814e-02, -1.556359400967256e-01, 0.000000000000000e+00, -1.559719059163938e-01, -1.556359400967257e-01, 0.000000000000000e+00, -1.559719059163939e-01, -3.251700938121095e-02, 0.000000000000000e+00, -3.167465836799855e-02, -9.760478891078991e+00, 0.000000000000000e+00, -9.574141155902753e+00, -2.138864029057997e+00, 0.000000000000000e+00, -2.264513111036384e+00, -1.116273170575798e-01, 0.000000000000000e+00, -1.053117431180531e-01, -1.190511789836315e+01, 0.000000000000000e+00, -1.339268204374808e+01, -1.190511789836316e+01, 0.000000000000000e+00, -1.339268204374809e+01, -5.516227334096132e-12, 0.000000000000000e+00, -9.004107529006606e-11, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -2.390692556138090e-182, 0.000000000000000e+00, -2.376706891229518e-155, -1.327025437478386e+01, 0.000000000000000e+00, -1.300506642395321e+01, -3.596578428132788e-60, 0.000000000000000e+00, -1.088387975570785e-47, -3.596578428132390e-60, 0.000000000000000e+00, -1.088387975570712e-47]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
