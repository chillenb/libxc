
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_hcth_a_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_hcth_a", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.111356413644225e+01, -2.111362549276767e+01, -2.111391247707056e+01, -2.111299935803827e+01, -2.111347577766039e+01, -2.111347577766039e+01, -3.439510804535075e+00, -3.439512023964246e+00, -3.439626267716979e+00, -3.440082999221324e+00, -3.439595180041106e+00, -3.439595180041106e+00, -6.725293303950005e-01, -6.721914456610502e-01, -6.676201277089616e-01, -6.723758229747935e-01, -6.707429462599658e-01, -6.707429462599658e-01, -2.171433308885816e-01, -2.162114445540644e-01, -7.803727378662848e-01, -2.166955184046125e-01, -2.119476033006563e-01, -2.119476033006563e-01, -1.519341241534697e-01, -1.512587011389397e-01, -2.120736595939118e-01, -1.435676342257484e-01, -1.407689851765214e-01, -1.407689851765214e-01, -5.159100201328008e+00, -5.160482573836689e+00, -5.159165205973562e+00, -5.160385446688064e+00, -5.159799217771742e+00, -5.159799217771742e+00, -2.014553693898410e+00, -2.024784548308549e+00, -2.014291877182090e+00, -2.023106780209847e+00, -2.020577749343486e+00, -2.020577749343486e+00, -5.798539709713305e-01, -6.381323208073268e-01, -5.368842990162255e-01, -5.626949858315247e-01, -5.892101927615221e-01, -5.892101927615221e-01, -2.266053297160508e-01, -2.551532631172622e-01, -2.230274329347670e-01, -1.923262999063872e+00, -2.074519524768823e-01, -2.074519524768823e-01, -1.305654756346807e-01, -1.381816199778811e-01, -8.963753718940010e-02, -2.078991865439218e-01, -1.084521574982147e-01, -1.084521574982147e-01, -5.964807244983705e-01, -5.872351779365319e-01, -5.902071223997699e-01, -5.928781655084173e-01, -5.915158325761933e-01, -5.915158325761933e-01, -5.825537587836747e-01, -4.930042854523853e-01, -5.103014566246361e-01, -5.331589780597669e-01, -5.206809990561247e-01, -5.206809990561247e-01, -6.682035678477406e-01, -2.813841338745021e-01, -3.010554928214775e-01, -3.510154422314359e-01, -3.197474742302054e-01, -3.197474742302054e-01, -4.544510674668336e-01, -2.159672467550540e-01, -2.197113602226402e-01, -3.333118856981232e-01, -1.983159880566507e-01, -1.983159880566507e-01, -1.671560400748060e-01, -8.224524289616927e-02, -1.059866610090014e-01, -1.991403053400913e-01, -1.020260080568575e-01, -1.020260080568574e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_hcth_a_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_hcth_a", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.837360491594749e+01, -2.837373524555908e+01, -2.837425694216435e+01, -2.837231902133566e+01, -2.837334268927415e+01, -2.837334268927415e+01, -4.504942090550829e+00, -4.505040063858906e+00, -4.507412857931426e+00, -4.504139877400811e+00, -4.505168153890145e+00, -4.505168153890145e+00, -8.103500049979160e-01, -8.076655690162396e-01, -7.374141448069275e-01, -7.460494959077938e-01, -7.462170651435770e-01, -7.462170651435770e-01, -1.232787464512962e-01, -1.303964065219834e-01, -9.633615525439740e-01, -5.190867630458519e-02, -7.872256266020480e-02, -7.872256266020485e-02, -2.915626431464221e-02, -2.909772006432677e-02, -2.792020260574464e-02, -2.642307746654069e-02, -2.655910920401405e-02, -2.655910920401412e-02, -7.022424502009596e+00, -7.025749148782028e+00, -7.022573067417238e+00, -7.025508388474988e+00, -7.024114230662969e+00, -7.024114230662969e+00, -2.177976688186702e+00, -2.207046965805500e+00, -2.136018267948932e+00, -2.161786711351411e+00, -2.214286714614569e+00, -2.214286714614569e+00, -7.700682090277023e-01, -8.721685599344913e-01, -7.044995294077080e-01, -7.701296063371160e-01, -7.888751479374809e-01, -7.888751479374809e-01, -1.776398944717241e-02, -8.773104771314172e-02, -1.608034890482697e-02, -2.627387682509701e+00, -2.998763917203590e-02, -2.998763917203590e-02, -2.357299135985715e-02, -2.547565436102131e-02, -1.680771900945407e-02, -1.601992007720611e-02, -2.032727156243546e-02, -2.032727156243555e-02, -8.061353988036772e-01, -8.022900321950626e-01, -8.043543178958479e-01, -8.055259332958695e-01, -8.050064879347759e-01, -8.050064879347759e-01, -7.825151460788305e-01, -5.980348472815683e-01, -6.638710609141339e-01, -7.232794271413644e-01, -6.944057572219555e-01, -6.944057572219555e-01, -9.138494711546646e-01, -1.482996846454961e-01, -2.280759959739447e-01, -4.098595847829044e-01, -3.135672565948877e-01, -3.135672565948875e-01, -5.479652024972037e-01, -2.987741395926077e-02, -2.310595311864688e-02, -4.187992260615810e-01, -1.382904637668402e-02, -1.382904637668417e-02, -3.225597128506336e-02, -1.368209344168516e-02, -1.882088659411287e-02, -1.350942892745232e-02, -1.909242845169436e-02, -1.909242845169396e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_hcth_a_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_hcth_a", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [5.625398637263066e-10, 5.626715663772016e-10, 5.630337876841252e-10, 5.610789505059988e-10, 5.621350029940395e-10, 5.621350029940395e-10, -1.297489505400895e-06, -1.296198222102523e-06, -1.266159179225982e-06, -1.317306742064232e-06, -1.295816334190951e-06, -1.295816334190951e-06, -3.080113823110735e-03, -3.138393548996055e-03, -4.581604420602313e-03, -4.390092080413100e-03, -4.395374195996763e-03, -4.395374195996763e-03, -1.232844284857496e+00, -1.163571707774608e+00, -1.432157646329376e-03, -3.215580000659628e+00, -2.214053938387313e+00, -2.214053938387314e+00, -2.562603025333153e+04, -2.248332091357201e+04, -1.528090230945525e+02, -1.205454761396553e+05, -6.689772406369552e+04, -6.689772406369554e+04, 5.809764847774601e-07, 5.911637862479748e-07, 5.813926903833011e-07, 5.903860794517139e-07, 5.861629593826096e-07, 5.861629593826096e-07, -5.887224811022176e-05, -5.635456832993920e-05, -6.205435060458041e-05, -5.976795980816684e-05, -5.593395529262560e-05, -5.593395529262560e-05, -4.177458848738052e-04, 7.108273178687494e-03, -1.993695030799953e-03, 8.877330221088423e-03, 4.584364175385926e-04, 4.584364175385926e-04, -9.579901132738373e+00, -1.146113706922804e+00, -1.226416296441585e+01, 8.993226058769833e-05, -6.400651849597166e+00, -6.400651849597166e+00, -2.747649011364632e+05, -1.346905207245603e+05, -4.885122805190287e+05, -4.153391344237251e+01, -2.306309511602218e+05, -2.306309511602217e+05, 1.563675706641908e-02, 1.027840476222882e-02, 1.187059295832202e-02, 1.339516079715117e-02, 1.260557701298813e-02, 1.260557701298813e-02, 2.024316928013452e-02, -1.022613821498985e-02, -3.472707965622437e-03, 3.788243798695371e-03, 4.048981035398220e-05, 4.048981035398220e-05, 5.491960737741658e-03, -4.784181555424781e-01, -2.283800906561815e-01, -4.882888666523738e-02, -1.168531257462726e-01, -1.168531257462728e-01, -1.471017508303227e-02, -1.678207641414143e+02, -7.097314824825501e+01, -3.629041132808884e-02, -2.190665955189676e+01, -2.190665955189677e+01, -9.004908689111979e+03, -9.440340274375755e+06, -9.064403692760975e+05, -2.619465430317027e+01, -3.078534631514939e+05, -3.078534631514957e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
