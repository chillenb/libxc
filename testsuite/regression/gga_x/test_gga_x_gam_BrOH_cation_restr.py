
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_gam_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_gam", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.093638143329050e+01, -2.093650110513871e+01, -2.093695188578494e+01, -2.093517311391394e+01, -2.093611669327458e+01, -2.093611669327458e+01, -3.467606986235783e+00, -3.467648141582273e+00, -3.468682511026226e+00, -3.467515265351733e+00, -3.467736184248266e+00, -3.467736184248266e+00, -7.227040990996915e-01, -7.223492450925897e-01, -7.161576131538020e-01, -7.213838191292771e-01, -7.197006359944443e-01, -7.197006359944443e-01, -1.875561279852734e-01, -1.888673017372763e-01, -8.362902547579912e-01, -1.798057659120647e-01, -1.743076161695787e-01, -1.743076161695788e-01, -2.798362202988642e-02, -2.942014615573792e-02, -1.399540058825072e-01, -1.628069718783983e-02, -2.040378512053614e-02, -2.040378512053613e-02, -5.316805797587171e+00, -5.320078799073571e+00, -5.316949059325439e+00, -5.319838514939005e+00, -5.318468189674498e+00, -5.318468189674498e+00, -2.024549783131332e+00, -2.035268528877967e+00, -2.020962492716452e+00, -2.030136507147031e+00, -2.032510004122799e+00, -2.032510004122799e+00, -6.194967273341799e-01, -6.626257233255134e-01, -5.753218704275259e-01, -5.881886663241702e-01, -6.279844863303800e-01, -6.279844863303800e-01, -2.057185326380734e-01, -2.155270874715011e-01, -2.031183404655772e-01, -2.014879801937313e+00, -1.782137283935920e-01, -1.782137283935920e-01, -1.258465357078183e-02, -1.591706194566482e-02, -1.217900680408196e-02, -1.801657122814236e-01, -1.465879201884415e-02, -1.465879201884413e-02, -6.106437846902141e-01, -6.093353035348060e-01, -6.097972079512052e-01, -6.101737039924124e-01, -6.099849683301208e-01, -6.099849683301208e-01, -5.934230030319777e-01, -5.299058405540605e-01, -5.476623111926475e-01, -5.654285424431227e-01, -5.562501313911049e-01, -5.562501313911049e-01, -6.950160981224963e-01, -2.499147297777461e-01, -2.886128991714910e-01, -3.740504798102211e-01, -3.275123207578237e-01, -3.275123207578238e-01, -4.879829093152174e-01, -1.361807682851126e-01, -1.680906388876943e-01, -3.583162575291429e-01, -1.803275723309644e-01, -1.803275723309647e-01, -3.919899462361316e-02, -4.278909892324352e-03, -8.961078776545495e-03, -1.806178693103014e-01, -1.357056004510762e-02, -1.357056004510762e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_gam_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_gam", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.340606975582578e+01, -3.340617118579831e+01, -3.340664044443299e+01, -3.340513083411431e+01, -3.340591930401494e+01, -3.340591930401494e+01, -5.015854900381057e+00, -5.015940316900482e+00, -5.018040363066118e+00, -5.015396998547805e+00, -5.016086094848331e+00, -5.016086094848331e+00, -8.678787388210726e-01, -8.660037743955070e-01, -8.154511988349598e-01, -8.231128695956103e-01, -8.228134843905355e-01, -8.228134843905355e-01, -1.786296512284485e-01, -1.941248603549531e-01, -1.015210306383965e+00, 7.203986257572455e-03, -6.988125717750178e-02, -6.988125717750120e-02, -3.687445467604930e-02, -3.871246354234811e-02, -1.408885591216449e-01, -2.161135100308851e-02, -2.701242068499429e-02, -2.701242068499420e-02, -7.833699756732452e+00, -7.835332905352253e+00, -7.833780450625852e+00, -7.835222520001408e+00, -7.834528011872460e+00, -7.834528011872460e+00, -2.343511288380475e+00, -2.376040597158652e+00, -2.297169150532471e+00, -2.325893938595385e+00, -2.383939614849943e+00, -2.383939614849943e+00, -7.893046096015665e-01, -8.740165473955216e-01, -7.293308651694284e-01, -7.702571455427438e-01, -8.040107385850207e-01, -8.040107385850207e-01, 1.505791454987364e-02, -6.338814862559629e-02, -2.208326438875558e-03, -2.754770945378426e+00, 4.415718624880317e-02, 4.415718624880317e-02, -1.672613900246191e-02, -2.112698682188221e-02, -1.614743437317244e-02, -8.930435933374103e-02, -1.943191565147528e-02, -1.943191565147533e-02, -8.110960073278156e-01, -8.027589591988089e-01, -8.056493074847602e-01, -8.080687764872351e-01, -8.068543408587729e-01, -8.068543408587729e-01, -7.898400131079022e-01, -6.548240636991580e-01, -6.927540688709817e-01, -7.301791395910010e-01, -7.110267603338446e-01, -7.110267603338446e-01, -9.166425053756015e-01, -1.955128401901502e-01, -3.272662868688270e-01, -4.793004420667223e-01, -4.142448656647700e-01, -4.142448656647700e-01, -6.072314392196276e-01, -1.423776875812869e-01, -1.376838431319806e-01, -4.636620126083509e-01, -1.075849839691798e-02, -1.075849839691699e-02, -5.122755006314584e-02, -5.700097984999145e-03, -1.192027639220459e-02, -2.946324829534413e-02, -1.799406798076391e-02, -1.799406798076376e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_gam_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_gam", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.405476558124671e-08, 1.405483285525803e-08, 1.405473383536052e-08, 1.405374104652805e-08, 1.405431791104283e-08, 1.405431791104283e-08, 7.106996840437046e-06, 7.108650175765195e-06, 7.146409543882277e-06, 7.076998021540463e-06, 7.108493401658138e-06, 7.108493401658138e-06, -3.331982000565596e-03, -3.361573670877125e-03, -4.191097321157424e-03, -4.047379382923024e-03, -4.057917607810797e-03, -4.057917607810797e-03, -5.884710512342415e-01, -4.807717974972416e-01, -1.744149793844264e-03, -3.449939765903391e+00, -1.850918551639981e+00, -1.850918551639984e+00, -5.141859421437096e+01, -5.428041404801498e+01, -2.677445292421610e+01, -4.692676361493167e+01, -5.952661417214929e+01, -5.952661417216336e+01, 3.105160132207977e-06, 3.114542711420504e-06, 3.105530854639850e-06, 3.113814660904195e-06, 3.109949432800454e-06, 3.109949432800454e-06, -3.291682950603280e-05, -3.047950300068335e-05, -3.648910850037184e-05, -3.428160727702105e-05, -2.981918016879617e-05, -2.981918016879617e-05, -4.719519215182825e-03, -3.114343168445765e-03, -6.361225067835991e-03, -5.672232628515832e-03, -4.392647330923954e-03, -4.392647330923954e-03, -9.839538457623917e+00, -1.073803642543044e+00, -1.179346649581192e+01, 8.687989072354229e-05, -7.430884224206628e+00, -7.430884224206628e+00, -6.188493443894960e+01, -5.522837010382171e+01, -3.467430935570652e+02, -2.390318720819499e+01, -1.613192751427376e+02, -1.613192751426586e+02, -4.780059761056082e-03, -4.800262919428810e-03, -4.789760950064276e-03, -4.784041109077936e-03, -4.786611533467640e-03, -4.786611533467640e-03, -5.583394166717982e-03, -9.120699926780784e-03, -7.618822770146124e-03, -6.669464563063002e-03, -7.111081752884856e-03, -7.111081752884856e-03, -2.412280692567396e-03, -3.214192824686267e-01, -9.198694171902910e-02, -1.845998275939751e-02, -3.087194771698655e-02, -3.087194771698636e-02, -1.144680405149421e-02, -2.480908299645615e+01, -2.246212489458856e+01, -1.973733695634652e-02, -2.012840273432279e+01, -2.012840273432289e+01, -4.124454291352154e+01, -2.717170262975291e+02, -1.313701033895798e+02, -2.198836115523815e+01, -2.038014777220869e+02, -2.038014777222195e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
