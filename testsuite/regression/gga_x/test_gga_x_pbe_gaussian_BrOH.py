
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_pbe_gaussian_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbe_gaussian", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.094535929179600e+01, -2.094538314937498e+01, -2.094556604634726e+01, -2.094517384822878e+01, -2.094537123431557e+01, -2.094537123431557e+01, -3.473453503027296e+00, -3.473424139902727e+00, -3.472760655602362e+00, -3.474640814388457e+00, -3.473453197115329e+00, -3.473453197115329e+00, -6.982676067074642e-01, -6.983314644035438e-01, -7.020548333059491e-01, -7.063041066214557e-01, -6.982870038112081e-01, -6.982870038112081e-01, -2.171610539799448e-01, -2.180028925017003e-01, -8.126655323048413e-01, -1.803360384269103e-01, -2.173890706809458e-01, -2.173890706809458e-01, -1.700711630418190e-02, -1.780969027568788e-02, -7.043154221475037e-02, -8.175615151669258e-03, -1.762418905606790e-02, -1.762418905606790e-02, -5.032899048500756e+00, -5.032299854237441e+00, -5.032844080025371e+00, -5.032378061835846e+00, -5.032582638308856e+00, -5.032582638308856e+00, -2.114193807076382e+00, -2.123679305900876e+00, -2.115795369069689e+00, -2.123170508041134e+00, -2.118562865986529e+00, -2.118562865986529e+00, -5.739439690015836e-01, -5.954490602120281e-01, -5.467561615223965e-01, -5.476460359385148e-01, -5.915663641112647e-01, -5.915663641112647e-01, -1.448881440334882e-01, -2.378293524464436e-01, -1.422947066373565e-01, -1.811387518040303e+00, -1.598872997957008e-01, -1.598872997957008e-01, -7.887070608539722e-03, -9.012326357721995e-03, -6.754991149185470e-03, -9.542564153042854e-02, -8.211581193198217e-03, -8.211581193198217e-03, -5.586272774022095e-01, -5.614467287259982e-01, -5.604498769359743e-01, -5.596663406662709e-01, -5.600587463960093e-01, -5.600587463960093e-01, -5.397589671253599e-01, -5.167398169568772e-01, -5.233604914215818e-01, -5.292728303011121e-01, -5.260868851166240e-01, -5.260868851166240e-01, -6.253178913356729e-01, -2.823946374249502e-01, -3.155932405370239e-01, -3.667901501242700e-01, -3.391666480127248e-01, -3.391666480127247e-01, -4.690469361992913e-01, -6.565337621686179e-02, -8.711256817156121e-02, -3.365312111595947e-01, -1.195560257488125e-01, -1.195560257488125e-01, -1.992253795388963e-02, -2.468791286868827e-03, -4.689136799606793e-03, -1.139607077215253e-01, -6.979309449017961e-03, -6.979309449017951e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_pbe_gaussian_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbe_gaussian", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.514209675541945e+01, -2.514218361531097e+01, -2.514257870801997e+01, -2.514115620587778e+01, -2.514214249890753e+01, -2.514214249890753e+01, -4.036672917976829e+00, -4.036711699589754e+00, -4.037944406083541e+00, -4.036676715707167e+00, -4.036710060031534e+00, -4.036710060031534e+00, -7.525926679036634e-01, -7.514495382443206e-01, -7.236812961330414e-01, -7.296745178350182e-01, -7.521768328409423e-01, -7.521768328409423e-01, -2.067570329711008e-01, -2.084729388490704e-01, -9.161942953004538e-01, -1.765600839931070e-01, -2.072419740690404e-01, -2.072419740690404e-01, -2.256136528173126e-02, -2.361423204833953e-02, -8.853411252647957e-02, -1.089010443607707e-02, -2.336851960163211e-02, -2.336851960163211e-02, -6.197141544469023e+00, -6.199820711217036e+00, -6.197415372454215e+00, -6.199498570771559e+00, -6.198515408327609e+00, -6.198515408327609e+00, -2.183428095053776e+00, -2.200143674260804e+00, -2.175514365102545e+00, -2.188439687603180e+00, -2.205416709831214e+00, -2.205416709831214e+00, -6.786009507805474e-01, -7.667004734354521e-01, -6.420333895430917e-01, -6.925313922165962e-01, -7.087658976341870e-01, -7.087658976341870e-01, -1.574755782220051e-01, -2.257748566173007e-01, -1.534924933032310e-01, -2.331755628828451e+00, -1.633312237403079e-01, -1.633312237403079e-01, -1.050618515538386e-02, -1.200163428794661e-02, -8.996111225100675e-03, -1.138207848244396e-01, -1.093516812945581e-02, -1.093516812945581e-02, -7.371365243909388e-01, -7.258688048012567e-01, -7.298440599174413e-01, -7.329645567907797e-01, -7.313985449100712e-01, -7.313985449100712e-01, -7.147048408794650e-01, -5.731763770871910e-01, -6.107165190184033e-01, -6.487775422455285e-01, -6.291960289674710e-01, -6.291960289674710e-01, -8.026870218862142e-01, -2.667217605067612e-01, -3.066052288660480e-01, -3.963007687492068e-01, -3.457657018047149e-01, -3.457657018047148e-01, -5.151893923949435e-01, -8.354933017841173e-02, -1.067408183240217e-01, -3.804543129522179e-01, -1.332631987163916e-01, -1.332631987163915e-01, -2.640339111305630e-02, -3.291322858249614e-03, -6.249646116097484e-03, -1.268540223668517e-01, -9.295650469217525e-03, -9.295650469217511e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_pbe_gaussian_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbe_gaussian", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-7.051790966631668e-09, -7.051748189975930e-09, -7.051469786219378e-09, -7.052172014612070e-09, -7.051769139686899e-09, -7.051769139686899e-09, -9.516369853142309e-06, -9.516587044032531e-06, -9.520983458138824e-06, -9.505339844528161e-06, -9.516319406504184e-06, -9.516319406504184e-06, -6.068850651471836e-03, -6.071052616283535e-03, -6.038938878583364e-03, -5.891256789672374e-03, -6.069774327865225e-03, -6.069774327865225e-03, -6.445197213956052e-01, -6.396902123712527e-01, -3.232781713338274e-03, -9.605001651932796e-01, -6.435251351407998e-01, -6.435251351407998e-01, -5.125106740681640e+00, -5.138889732560004e+00, -2.141613398621052e+00, -3.630308435574030e+00, -5.338450518883319e+00, -5.338450518883319e+00, -2.079703177207121e-06, -2.079912147591092e-06, -2.079715946622184e-06, -2.079878587851987e-06, -2.079822916748128e-06, -2.079822916748128e-06, -7.338996686944968e-05, -7.202090222624144e-05, -7.325564192403138e-05, -7.219590726122605e-05, -7.260953648933891e-05, -7.260953648933891e-05, -1.262970708265327e-02, -1.028559954988187e-02, -1.540171124150342e-02, -1.456240342728874e-02, -1.109601000706032e-02, -1.109601000706032e-02, -1.141743031138411e+00, -3.856571574062266e-01, -1.305510302352982e+00, -1.201273811869565e-04, -1.204421708768024e+00, -1.204421708768024e+00, -3.851212137278715e+00, -3.859137290233512e+00, -1.104563192808993e+01, -2.081445827692871e+00, -5.700137553741266e+00, -5.700137553741262e+00, -1.303999040270609e-02, -1.297439426310561e-02, -1.299782612060630e-02, -1.301619724519475e-02, -1.300704951531795e-02, -1.300704951531795e-02, -1.492252023601001e-02, -1.995107756641262e-02, -1.841734180990794e-02, -1.705628202973556e-02, -1.776032140763556e-02, -1.776032140763556e-02, -8.475633475618376e-03, -2.186172673445760e-01, -1.477932088455805e-01, -7.962211360861243e-02, -1.111605037814828e-01, -1.111605037814828e-01, -2.953835792808434e-02, -1.813489267639351e+00, -1.801470394656289e+00, -1.097610956815223e-01, -1.963955216164543e+00, -1.963955216164545e+00, -3.850331537049401e+00, -6.637922524059636e+00, -5.715410745051077e+00, -2.410282181047090e+00, -8.324612091162379e+00, -8.324612091162365e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
