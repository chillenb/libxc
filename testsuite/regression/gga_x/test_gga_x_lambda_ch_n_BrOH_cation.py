
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_lambda_ch_n_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_lambda_ch_n", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.094107602293066e+01, -2.094110368967449e+01, -2.094129402008568e+01, -2.094088101061068e+01, -2.094108784628668e+01, -2.094108784628668e+01, -3.472165887969068e+00, -3.472128380311306e+00, -3.471346469249239e+00, -3.473365476877674e+00, -3.472204877917586e+00, -3.472204877917586e+00, -6.968177791060250e-01, -6.968269125542997e-01, -6.987525645086290e-01, -7.035068093838586e-01, -7.034220323066975e-01, -7.034220323066975e-01, -2.143549533542130e-01, -2.155394991567357e-01, -8.048958125081018e-01, -1.802554530891790e-01, -2.094390421697619e-01, -2.094390421697618e-01, -9.849035449280926e-03, -1.037106039643905e-02, -5.637053435881928e-02, -5.680692951384471e-03, -7.927687883078197e-03, -7.927687883078197e-03, -5.034313649027023e+00, -5.033705600726814e+00, -5.034296385115489e+00, -5.033759419620110e+00, -5.033999492324973e+00, -5.033999492324973e+00, -2.110796540892371e+00, -2.120716525615363e+00, -2.111924212715983e+00, -2.120689598109395e+00, -2.115739162036276e+00, -2.115739162036276e+00, -5.805615512967943e-01, -6.028060507317941e-01, -5.417675426332036e-01, -5.375860180646369e-01, -5.870145176039900e-01, -5.870145176039900e-01, -1.366864157327174e-01, -2.292538785866715e-01, -1.277406962293817e-01, -1.813571692587262e+00, -1.531661546383027e-01, -1.531661546383027e-01, -4.385901550113334e-03, -5.553187142522359e-03, -4.252334482580463e-03, -8.891562043355046e-02, -5.341480286796580e-03, -5.341480286796582e-03, -5.507654118531093e-01, -5.539004934140014e-01, -5.528155139517898e-01, -5.518987217724567e-01, -5.523580830994113e-01, -5.523580830994113e-01, -5.339865782813336e-01, -5.101529092507209e-01, -5.168722116111408e-01, -5.231304008855513e-01, -5.197434978470366e-01, -5.197434978470366e-01, -6.330953136815489e-01, -2.741957252991517e-01, -3.095110683021902e-01, -3.654734535933543e-01, -3.352375765373250e-01, -3.352375765373250e-01, -4.708127987306382e-01, -5.397860448547168e-02, -7.281560115286884e-02, -3.420257835355920e-01, -1.099395963329462e-01, -1.099395963329462e-01, -1.387721562973886e-02, -1.484468792082335e-03, -3.121659209652834e-03, -1.040229785771637e-01, -4.905365142559822e-03, -4.905365142559817e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_lambda_ch_n_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_lambda_ch_n", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.516007305697285e+01, -2.516004331816476e+01, -2.516018768775427e+01, -2.516012657408949e+01, -2.516052586283096e+01, -2.516061914890730e+01, -2.515923204696690e+01, -2.515896983890979e+01, -2.516014286693692e+01, -2.515960810830836e+01, -2.516014286693692e+01, -2.515960810830836e+01, -4.041709453566273e+00, -4.041883374774168e+00, -4.041750768058254e+00, -4.041931465074518e+00, -4.042822169969684e+00, -4.043126973819626e+00, -4.041618561268904e+00, -4.041926953988727e+00, -4.040943364258183e+00, -4.042951084196242e+00, -4.040943364258183e+00, -4.042951084196242e+00, -7.597349158708261e-01, -7.644259416163600e-01, -7.580070411439830e-01, -7.637251518634897e-01, -7.364824161035127e-01, -7.299445080745612e-01, -7.384723093481775e-01, -7.405846949242564e-01, -7.730228895641796e-01, -7.112771214577620e-01, -7.730228895641796e-01, -7.112771214577620e-01, -2.033502849150292e-01, -2.079692831262885e-01, -2.039257788314970e-01, -2.095829651049898e-01, -8.737370698653500e-01, -9.117029591596661e-01, -1.819337508246644e-01, -1.836299076863810e-01, -2.114053190321802e-01, -1.546124491842025e-01, -2.114053190321801e-01, -1.546124491842023e-01, -1.268544620687613e-02, -1.347715578512567e-02, -1.329016080723926e-02, -1.423344623699426e-02, -7.105484181903830e-02, -7.467187260552736e-02, -7.633462797213852e-03, -7.506456663796038e-03, -1.132029461127036e-02, -6.445881008690740e-03, -1.132029461127036e-02, -6.445881008690740e-03, -6.203150917871023e+00, -6.201599292758598e+00, -6.205929757243348e+00, -6.204283879544282e+00, -6.203304281135374e+00, -6.201690823152238e+00, -6.205688683881616e+00, -6.204129644687873e+00, -6.204574910401019e+00, -6.202947663573274e+00, -6.204574910401019e+00, -6.202947663573274e+00, -2.196959689992267e+00, -2.196845850920062e+00, -2.214244503183605e+00, -2.213614510637625e+00, -2.181011736252919e+00, -2.185402609440293e+00, -2.195698480678411e+00, -2.200340818495393e+00, -2.219129329026168e+00, -2.207334012540721e+00, -2.219129329026168e+00, -2.207334012540721e+00, -6.871854989540608e-01, -6.854475608836106e-01, -7.740245770242100e-01, -7.747653418598762e-01, -6.186176208222993e-01, -6.438961833909851e-01, -6.703650155022652e-01, -6.922043145484890e-01, -7.186751884800290e-01, -6.816197514195663e-01, -7.186751884800290e-01, -6.816197514195663e-01, -1.555531623210885e-01, -1.560388974932742e-01, -2.251474815175068e-01, -2.257974117199718e-01, -1.450905527166949e-01, -1.499930433224647e-01, -2.335019006468733e+00, -2.334031052851668e+00, -1.637058312850708e-01, -1.622670393976058e-01, -1.637058312850708e-01, -1.622670393976058e-01, -5.727586849760926e-03, -5.952340019833842e-03, -7.344664360192359e-03, -7.455866876868074e-03, -5.491121061656396e-03, -5.814501376532033e-03, -1.090925217406418e-01, -1.098466852975971e-01, -5.609446039517266e-03, -7.699910379316306e-03, -5.609446039517268e-03, -7.699910379316308e-03, -7.233112943168766e-01, -7.262452074041483e-01, -7.112730286306455e-01, -7.142814426509438e-01, -7.154139381189953e-01, -7.184241776648436e-01, -7.189384872670475e-01, -7.218752206561692e-01, -7.171687955121172e-01, -7.201412700832992e-01, -7.171687955121172e-01, -7.201412700832992e-01, -7.063568149288713e-01, -7.087113171777488e-01, -5.587536555421908e-01, -5.614881687676310e-01, -5.960960068558832e-01, -5.992291633927280e-01, -6.380779275828120e-01, -6.405177454124599e-01, -6.164691208744061e-01, -6.189628509408504e-01, -6.164691208744061e-01, -6.189628509408504e-01, -8.095297401206110e-01, -8.114717968206415e-01, -2.630265574509524e-01, -2.639532468835346e-01, -2.988953524220986e-01, -3.010831459337805e-01, -3.918777486447300e-01, -3.942051858483589e-01, -3.387305793371666e-01, -3.385980496365076e-01, -3.387305793371665e-01, -3.385980496365076e-01, -5.130569453881940e-01, -5.171263054746559e-01, -6.995211601819863e-02, -7.039263814366821e-02, -9.131170715490362e-02, -9.386200572708124e-02, -3.809644146284806e-01, -3.874389155711972e-01, -1.270141980149646e-01, -1.292119774998203e-01, -1.270141980149646e-01, -1.292119774998203e-01, -1.812225818980691e-02, -1.877467689136169e-02, -1.976932855854351e-03, -1.981400449569643e-03, -4.021911235754684e-03, -4.277450262423241e-03, -1.223669623808877e-01, -1.238833169278440e-01, -5.312500351205195e-03, -7.058573089686781e-03, -5.312500351205189e-03, -7.058573089686774e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_lambda_ch_n_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_lambda_ch_n", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.398269536696780e-08, 0.000000000000000e+00, -1.398277310318725e-08, -1.398258628990791e-08, 0.000000000000000e+00, -1.398269381984080e-08, -1.398210590194064e-08, 0.000000000000000e+00, -1.398204225749269e-08, -1.398334109011442e-08, 0.000000000000000e+00, -1.398361555896189e-08, -1.398263694834185e-08, 0.000000000000000e+00, -1.398288995814731e-08, -1.398263694834185e-08, 0.000000000000000e+00, -1.398288995814731e-08, -1.881011733996221e-05, 0.000000000000000e+00, -1.881604187602109e-05, -1.881049543809988e-05, 0.000000000000000e+00, -1.881687731578129e-05, -1.882427828049650e-05, 0.000000000000000e+00, -1.882745202146320e-05, -1.878824395486623e-05, 0.000000000000000e+00, -1.879257531060470e-05, -1.882077190870383e-05, 0.000000000000000e+00, -1.880321643604243e-05, -1.882077190870383e-05, 0.000000000000000e+00, -1.880321643604243e-05, -1.190470776324985e-02, 0.000000000000000e+00, -1.192002918778413e-02, -1.190826730295605e-02, 0.000000000000000e+00, -1.192779147194429e-02, -1.193299887519215e-02, 0.000000000000000e+00, -1.187351597349052e-02, -1.157096634363789e-02, 0.000000000000000e+00, -1.159481231143257e-02, -1.185331316920647e-02, 0.000000000000000e+00, -1.102249944815924e-02, -1.185331316920647e-02, 0.000000000000000e+00, -1.102249944815924e-02, -1.222328943648605e+00, 0.000000000000000e+00, -1.152149036032788e+00, -1.230009133433344e+00, 0.000000000000000e+00, -1.143618674534815e+00, -6.898943458757643e-03, 0.000000000000000e+00, -6.439782871536107e-03, -1.586109798491398e+00, 0.000000000000000e+00, -1.536933893371343e+00, -1.054702686458471e+00, 0.000000000000000e+00, -2.215643989255181e+00, -1.054702686458470e+00, 0.000000000000000e+00, -2.215643989255183e+00, -4.357566729227166e+00, 0.000000000000000e+00, -4.313967715354219e+00, -4.591425447242385e+00, 0.000000000000000e+00, -4.568048901911681e+00, -2.553223725430890e+00, 0.000000000000000e+00, -2.568023542356074e+00, -3.990952706794923e+00, 0.000000000000000e+00, -3.882604721511203e+00, -4.350146222043074e+00, 0.000000000000000e+00, -1.103695612664977e+01, -4.350146222043084e+00, 0.000000000000000e+00, -1.103695612664980e+01, -4.124462536460404e-06, 0.000000000000000e+00, -4.128265733001686e-06, -4.125095250321161e-06, 0.000000000000000e+00, -4.128879214411572e-06, -4.124464982218989e-06, 0.000000000000000e+00, -4.128263369927288e-06, -4.125008396922070e-06, 0.000000000000000e+00, -4.128821088108132e-06, -4.124813100230035e-06, 0.000000000000000e+00, -4.128579092533090e-06, -4.124813100230035e-06, 0.000000000000000e+00, -4.128579092533090e-06, -1.430834616416737e-04, 0.000000000000000e+00, -1.431084985961526e-04, -1.403369499947635e-04, 0.000000000000000e+00, -1.404567923356361e-04, -1.427620226886743e-04, 0.000000000000000e+00, -1.429255299118693e-04, -1.404390861587388e-04, 0.000000000000000e+00, -1.405262787070028e-04, -1.416291303066030e-04, 0.000000000000000e+00, -1.417440352217482e-04, -1.416291303066030e-04, 0.000000000000000e+00, -1.417440352217482e-04, -2.374720272884443e-02, 0.000000000000000e+00, -2.401233382670431e-02, -1.956441604464670e-02, 0.000000000000000e+00, -1.955796043673175e-02, -3.390942341589356e-02, 0.000000000000000e+00, -2.988090780125559e-02, -3.344328175218684e-02, 0.000000000000000e+00, -2.928767448643261e-02, -2.075980540298175e-02, 0.000000000000000e+00, -2.528683518084862e-02, -2.075980540298175e-02, 0.000000000000000e+00, -2.528683518084863e-02, -1.766904263666180e+00, 0.000000000000000e+00, -1.796079012526834e+00, -7.314954702593210e-01, 0.000000000000000e+00, -7.247514767668323e-01, -1.991272400916358e+00, 0.000000000000000e+00, -1.933349655656754e+00, -2.382289672643660e-04, 0.000000000000000e+00, -2.386759002959052e-04, -1.932172987850422e+00, 0.000000000000000e+00, -2.306679755304879e+00, -1.932172987850422e+00, 0.000000000000000e+00, -2.306679755304879e+00, -5.602455434798884e+00, 0.000000000000000e+00, -4.849122297048056e+00, -4.824262408210947e+00, 0.000000000000000e+00, -4.454127047208893e+00, -2.748000785697220e+01, 0.000000000000000e+00, -3.057012949566184e+01, -2.942679109158612e+00, 0.000000000000000e+00, -2.835327634573444e+00, -1.366503110344506e+01, 0.000000000000000e+00, -1.342318487380599e+01, -1.366503110344502e+01, 0.000000000000000e+00, -1.342318487380597e+01, -2.783851584915860e-02, 0.000000000000000e+00, -2.742644555683182e-02, -2.761219463777769e-02, 0.000000000000000e+00, -2.721097887756753e-02, -2.769109043587119e-02, 0.000000000000000e+00, -2.728663455095518e-02, -2.775835501860819e-02, 0.000000000000000e+00, -2.734966189514086e-02, -2.772485148563122e-02, 0.000000000000000e+00, -2.731819674837539e-02, -2.772485148563122e-02, 0.000000000000000e+00, -2.731819674837539e-02, -3.133285390052060e-02, 0.000000000000000e+00, -3.092423183198123e-02, -4.168374020377941e-02, 0.000000000000000e+00, -4.113969168251702e-02, -3.870634011423010e-02, 0.000000000000000e+00, -3.817541960735022e-02, -3.579151149193392e-02, 0.000000000000000e+00, -3.533113469835072e-02, -3.732112069350828e-02, 0.000000000000000e+00, -3.682113638634570e-02, -3.732112069350828e-02, 0.000000000000000e+00, -3.682113638634570e-02, -1.614758591265110e-02, 0.000000000000000e+00, -1.607963360036671e-02, -4.328247524558589e-01, 0.000000000000000e+00, -4.283828025391740e-01, -2.992042944374111e-01, 0.000000000000000e+00, -2.946559152742401e-01, -1.596894455000714e-01, 0.000000000000000e+00, -1.568293269242553e-01, -2.238336945331443e-01, 0.000000000000000e+00, -2.251313864210467e-01, -2.238336945331444e-01, 0.000000000000000e+00, -2.251313864210467e-01, -5.771634237027903e-02, 0.000000000000000e+00, -5.660654848004647e-02, -2.335199538987328e+00, 0.000000000000000e+00, -2.337998455029338e+00, -2.302102570683803e+00, 0.000000000000000e+00, -2.352020658195631e+00, -2.082575794981273e-01, 0.000000000000000e+00, -1.983636751351008e-01, -2.927622358585333e+00, 0.000000000000000e+00, -3.423032825436465e+00, -2.927622358585335e+00, 0.000000000000000e+00, -3.423032825436466e+00, -3.453683163268381e+00, 0.000000000000000e+00, -3.525807529043532e+00, -1.723725505803134e+01, 0.000000000000000e+00, -3.053324517767249e+01, -1.063871586071816e+01, 0.000000000000000e+00, -1.132566791900133e+01, -3.267022767711995e+00, 0.000000000000000e+00, -3.198402959278408e+00, -2.817365246012627e+01, 0.000000000000000e+00, -1.393479075513784e+01, -2.817365246012632e+01, 0.000000000000000e+00, -1.393479075513788e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
