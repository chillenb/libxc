
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_b86_r_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_b86_r", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.047697584201158e+01, -2.047701423185488e+01, -2.047723255697105e+01, -2.047666041393807e+01, -2.047695342689341e+01, -2.047695342689341e+01, -3.372607616480227e+00, -3.372586697706909e+00, -3.372185987320209e+00, -3.373523443294026e+00, -3.372663835198398e+00, -3.372663835198398e+00, -6.680542412952076e-01, -6.678357376008141e-01, -6.641631310266182e-01, -6.689494223895512e-01, -6.673526848466617e-01, -6.673526848466617e-01, -2.001903050959412e-01, -2.012031975392057e-01, -7.736191714572355e-01, -1.724097014851027e-01, -1.821703085294790e-01, -1.821703085294790e-01, -1.914441927596677e-02, -1.978074564704007e-02, -7.151932960041937e-02, -1.308534701268825e-02, -1.508886717403849e-02, -1.508886717403849e-02, -4.949104367559934e+00, -4.949099314287030e+00, -4.949111867470114e+00, -4.949107285908179e+00, -4.949097486491519e+00, -4.949097486491519e+00, -2.002982815665271e+00, -2.013660239107145e+00, -2.001235132690594e+00, -2.010631156406771e+00, -2.009761828435662e+00, -2.009761828435662e+00, -5.657494709268983e-01, -5.979496059284971e-01, -5.261353290774501e-01, -5.315059149291730e-01, -5.726620733938759e-01, -5.726620733938759e-01, -1.404101129337000e-01, -2.164058495809478e-01, -1.327835962304027e-01, -1.799750453600364e+00, -1.500673165365331e-01, -1.500673165365331e-01, -1.069944907185894e-02, -1.272252531085531e-02, -9.188266612643206e-03, -9.957032837916650e-02, -1.108547521331948e-02, -1.108547521331949e-02, -5.491867645860629e-01, -5.496376887199583e-01, -5.494828016802857e-01, -5.493474328190001e-01, -5.494148433196657e-01, -5.494148433196657e-01, -5.332535565902404e-01, -4.894966211430238e-01, -5.013440532202261e-01, -5.133850396889773e-01, -5.070563165662620e-01, -5.070563165662620e-01, -6.275239008242333e-01, -2.563761308375406e-01, -2.894633460213925e-01, -3.491657478339665e-01, -3.161578918919153e-01, -3.161578918919153e-01, -4.514066020861223e-01, -6.971734407372936e-02, -8.712667426267653e-02, -3.297138016043645e-01, -1.152174751369386e-01, -1.152174751369386e-01, -2.489357040550786e-02, -4.542533939118273e-03, -7.975698027500954e-03, -1.107085939094871e-01, -1.031623120539128e-02, -1.031623120539128e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_b86_r_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_b86_r", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.562095237492932e+01, -2.562104512992460e+01, -2.562144537741335e+01, -2.562006561514432e+01, -2.562079030657604e+01, -2.562079030657604e+01, -4.128533126463216e+00, -4.128572164841775e+00, -4.129575874462024e+00, -4.128614908681744e+00, -4.128679455123304e+00, -4.128679455123304e+00, -7.789826123146718e-01, -7.776545474560670e-01, -7.452032927746719e-01, -7.519541523670054e-01, -7.509709993695906e-01, -7.509709993695906e-01, -1.885902451300702e-01, -1.915613285935364e-01, -9.133170794934815e-01, -1.497347947294433e-01, -1.625593622398829e-01, -1.625593622398828e-01, -1.823705090059909e-02, -1.889243077885850e-02, -6.997057376761343e-02, -1.217720102677991e-02, -1.420784915368699e-02, -1.420784915368698e-02, -6.294618881945331e+00, -6.296861599115651e+00, -6.294721337852442e+00, -6.296701243051093e+00, -6.295756183009403e+00, -6.295756183009403e+00, -2.228444720470169e+00, -2.247497460839147e+00, -2.210168385321951e+00, -2.226941816346924e+00, -2.247894929247211e+00, -2.247894929247211e+00, -7.001223978115966e-01, -7.803213684350925e-01, -6.449458429561045e-01, -6.882886754640448e-01, -7.138718887851760e-01, -7.138718887851760e-01, -1.239583476198017e-01, -1.918363318511085e-01, -1.182435369699674e-01, -2.351479156880738e+00, -1.295410644141116e-01, -1.295410644141116e-01, -9.881037686701524e-03, -1.184822971991691e-02, -8.623761244527442e-03, -9.300770238363613e-02, -1.040227397329059e-02, -1.040227397329059e-02, -7.268193965846366e-01, -7.180003056365409e-01, -7.210824794985018e-01, -7.236444658397162e-01, -7.223610163405807e-01, -7.223610163405807e-01, -7.084960372174418e-01, -5.726820728029224e-01, -6.107678408901462e-01, -6.495713595308238e-01, -6.298008192551622e-01, -6.298008192551622e-01, -8.172389537677908e-01, -2.386512689694665e-01, -2.890998716580735e-01, -4.011557788792688e-01, -3.396625757046071e-01, -3.396625757046071e-01, -5.265429921894881e-01, -6.838921193114937e-02, -8.391897325826263e-02, -3.930529848678274e-01, -1.031670144734630e-01, -1.031670144734631e-01, -2.398606486958736e-02, -4.083486474508424e-03, -7.321280882192035e-03, -1.001316422951036e-01, -9.672822119918656e-03, -9.672822119918652e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_b86_r_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_b86_r", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.257752162297719e-09, -4.257713920746363e-09, -4.257514407758511e-09, -4.258083983333330e-09, -4.257789722599373e-09, -4.257789722599373e-09, -5.893942674289776e-06, -5.894011354478853e-06, -5.895020180944197e-06, -5.888790353556332e-06, -5.893456728353125e-06, -5.893456728353125e-06, -3.986095698264741e-03, -3.995827712729667e-03, -4.209713130498786e-03, -4.084490341613197e-03, -4.120140879165964e-03, -4.120140879165964e-03, -5.808805593124174e-01, -5.653281075198853e-01, -2.194133624578242e-03, -1.087306863943813e+00, -8.724233839859131e-01, -8.724233839859130e-01, -1.077045935986317e+03, -9.747210071813507e+02, -1.522337792810304e+01, -3.850086938328569e+03, -2.453927549174946e+03, -2.453927549174949e+03, -1.230471039417817e-06, -1.230099760915412e-06, -1.230448031389472e-06, -1.230120354930991e-06, -1.230286113248225e-06, -1.230286113248225e-06, -5.123698553282074e-05, -5.003092135334222e-05, -5.171853590024156e-05, -5.064255710947844e-05, -5.033499368136755e-05, -5.033499368136755e-05, -7.375573504727030e-03, -5.648086504568839e-03, -9.939818905130375e-03, -9.107980989762036e-03, -6.982551726617328e-03, -6.982551726617328e-03, -2.130900612346960e+00, -4.389957135999324e-01, -2.563721904142636e+00, -6.874795601360895e-05, -1.831022748042396e+00, -1.831022748042396e+00, -8.004654726347064e+03, -4.339457570827084e+03, -1.725225194117636e+04, -6.321667144429555e+00, -8.125369806067535e+03, -8.125369806067530e+03, -7.841108921881749e-03, -7.904473144703343e-03, -7.882092829937905e-03, -7.863880188822061e-03, -7.873011666622548e-03, -7.873011666622548e-03, -8.791048492858819e-03, -1.379139153501556e-02, -1.211935610613913e-02, -1.067423276581334e-02, -1.139507203798849e-02, -1.139507203798849e-02, -4.664548785765390e-03, -2.175823207196313e-01, -1.276105075309792e-01, -5.406559916640601e-02, -8.485148686816503e-02, -8.485148686816504e-02, -1.911613685210572e-02, -1.597532342285483e+01, -8.482275888083192e+00, -6.596803345324614e-02, -4.410864982906873e+00, -4.410864982906872e+00, -4.348651316680148e+02, -1.940848414365179e+05, -2.451553103774754e+04, -4.935171403997212e+00, -1.074637177016802e+04, -1.074637177016803e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
