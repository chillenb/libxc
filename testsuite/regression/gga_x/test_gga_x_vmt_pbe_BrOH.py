
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_vmt_pbe_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_vmt_pbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.096025315972130e+01, -2.096027633526826e+01, -2.096045725482508e+01, -2.096007620545141e+01, -2.096026473365426e+01, -2.096026473365426e+01, -3.477864332362151e+00, -3.477833658668983e+00, -3.477134433492045e+00, -3.479077230077334e+00, -3.477863371146613e+00, -3.477863371146613e+00, -7.006934136856272e-01, -7.008030156411219e-01, -7.060507827236444e-01, -7.102294061155929e-01, -7.007291986253655e-01, -7.007291986253655e-01, -2.204346747626735e-01, -2.210424269376957e-01, -8.142777279808910e-01, -1.868742095600942e-01, -2.205878506070637e-01, -2.205878506070637e-01, -1.105705866350043e-02, -1.187103087579952e-02, -7.231729003106184e-02, -4.534643822475181e-03, -1.174135844082027e-02, -1.174135844082027e-02, -5.034893345898992e+00, -5.034265203553843e+00, -5.034835475146999e+00, -5.034346944915551e+00, -5.034561962537621e+00, -5.034561962537621e+00, -2.125985409842019e+00, -2.135127651752186e+00, -2.128167650741287e+00, -2.135263135941507e+00, -2.129404415479392e+00, -2.129404415479392e+00, -5.744884500304727e-01, -5.954925233560370e-01, -5.473411461229652e-01, -5.477395356389193e-01, -5.920031764288257e-01, -5.920031764288257e-01, -1.524263313488126e-01, -2.442922003344094e-01, -1.495927638461527e-01, -1.811521678427731e+00, -1.669488511870146e-01, -1.669488511870146e-01, -4.374361093600555e-03, -5.002179844045131e-03, -3.748361465165306e-03, -1.003725653623835e-01, -4.557966919081261e-03, -4.557966919081261e-03, -5.586308572076965e-01, -5.614786057628731e-01, -5.604684198011249e-01, -5.596770039402283e-01, -5.600730819052188e-01, -5.600730819052188e-01, -5.397605166715550e-01, -5.180085857029093e-01, -5.239824939106275e-01, -5.295081437026679e-01, -5.264892387366247e-01, -5.264892387366247e-01, -6.253720682276729e-01, -2.876144324777931e-01, -3.190998918177960e-01, -3.680285245800481e-01, -3.413417091240719e-01, -3.413417091240718e-01, -4.703485113009505e-01, -6.632897608030335e-02, -9.096712609749447e-02, -3.371740527971472e-01, -1.260056798092092e-01, -1.260056798092092e-01, -1.357392631136937e-02, -1.368592183343880e-03, -2.599826628726416e-03, -1.200995235071651e-01, -3.871861242802602e-03, -3.871861242802596e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_vmt_pbe_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_vmt_pbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.508782881480606e+01, -2.508791803426393e+01, -2.508831995359757e+01, -2.508685888209641e+01, -2.508787583358117e+01, -2.508787583358117e+01, -4.021141622115479e+00, -4.021184704736051e+00, -4.022534716944708e+00, -4.021061285126247e+00, -4.021180910221580e+00, -4.021180910221580e+00, -7.448572866742220e-01, -7.435882849502696e-01, -7.119281938963542e-01, -7.180754594203000e-01, -7.443962966738988e-01, -7.443962966738988e-01, -1.996594688430764e-01, -2.016351381520262e-01, -9.107184430974063e-01, -1.712654411670929e-01, -2.002244202116368e-01, -2.002244202116368e-01, -2.227193672077997e-02, -2.422942799096158e-02, -1.015328119694553e-01, -6.057849770650571e-03, -2.395959270239126e-02, -2.395959270239126e-02, -6.189695676187589e+00, -6.192479215144576e+00, -6.189979964282161e+00, -6.192144328977388e+00, -6.191123515627854e+00, -6.191123515627854e+00, -2.148608463379353e+00, -2.166117587142904e+00, -2.139318921382092e+00, -2.152876813014438e+00, -2.172883295294075e+00, -2.172883295294075e+00, -6.766475731564172e-01, -7.665320041639657e-01, -6.399499810567757e-01, -6.921740807337438e-01, -7.071772968633123e-01, -7.071772968633123e-01, -1.607395268643187e-01, -2.168854770319469e-01, -1.559981969559399e-01, -2.331235700403942e+00, -1.613606026199089e-01, -1.613606026199089e-01, -5.840372877166709e-03, -6.734890469954676e-03, -5.032981369147202e-03, -1.237624384230032e-01, -6.140239404482422e-03, -6.140239404482422e-03, -7.371224867856945e-01, -7.257448844976894e-01, -7.297716357655862e-01, -7.329227865079150e-01, -7.313424653022834e-01, -7.313424653022833e-01, -7.146987832609483e-01, -5.689576038831664e-01, -6.085163684681436e-01, -6.479026323011122e-01, -6.277353638135609e-01, -6.277353638135609e-01, -8.024775045759640e-01, -2.566322629783979e-01, -2.979657779621899e-01, -3.923366750521874e-01, -3.395236880497386e-01, -3.395236880497385e-01, -5.109201390716765e-01, -9.751827864107791e-02, -1.189152005211749e-01, -3.782633007031091e-01, -1.381033581280993e-01, -1.381033581280992e-01, -2.790601924145382e-02, -1.824789577791840e-03, -3.466435539674640e-03, -1.313502292409831e-01, -5.183809358876811e-03, -5.183809358876803e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_vmt_pbe_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_vmt_pbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-7.239480340852899e-09, -7.239431858482935e-09, -7.239132275049341e-09, -7.239927856369001e-09, -7.239455469173039e-09, -7.239455469173039e-09, -9.859068936784890e-06, -9.859242054378857e-06, -9.862370833473944e-06, -9.848620310037659e-06, -9.858989983164950e-06, -9.858989983164950e-06, -6.441958980030716e-03, -6.448059104492246e-03, -6.524604134233522e-03, -6.358880519422762e-03, -6.444291698869778e-03, -6.444291698869778e-03, -7.337532626484782e-01, -7.244439772828605e-01, -3.380077608128831e-03, -1.171161501923501e+00, -7.314154887475321e-01, -7.314154887475321e-01, 3.361615319557113e+02, 3.270206033799276e+02, 2.036078264601878e+00, 3.949522772238660e+00, 3.399783573525775e+02, 3.399783573525775e+02, -2.120637431494431e-06, -2.120546586547527e-06, -2.120620059532884e-06, -2.120549566725138e-06, -2.120602626258958e-06, -2.120602626258958e-06, -7.922675105676720e-05, -7.764299315664088e-05, -7.923503345672704e-05, -7.800417230263655e-05, -7.811841734646706e-05, -7.811841734646706e-05, -1.302020261884543e-02, -1.037112027592532e-02, -1.590876686386402e-02, -1.474875858657958e-02, -1.139717081496693e-02, -1.139717081496693e-02, -1.358748743029531e+00, -4.595807415836551e-01, -1.565829889625432e+00, -1.211335944627131e-04, -1.479508295705151e+00, -1.479508295705151e+00, 3.067066451382601e+00, 1.703067751612289e+01, 3.684036853655189e+01, -1.562263063146482e+00, 2.637099218556012e+01, 2.637099218556007e+01, -1.307184702596775e-02, -1.306940256543477e-02, -1.307030232116642e-02, -1.307116729310253e-02, -1.307078067928820e-02, -1.307078067928819e-02, -1.494689319444425e-02, -2.096929789826446e-02, -1.905794711803208e-02, -1.741247132625452e-02, -1.825123132875057e-02, -1.825123132875058e-02, -8.552492946680940e-03, -2.525617545220121e-01, -1.650270961892618e-01, -8.444244259879587e-02, -1.207065620744008e-01, -1.207065620744008e-01, -3.114777798443519e-02, 4.128323175314311e+00, -4.545763578253297e-01, -1.146628850131828e-01, -2.246353344961169e+00, -2.246353344961172e+00, 2.360226910501624e+02, 2.199474065329129e-26, 7.820874139929071e-05, -2.764605515841601e+00, 1.758659783517524e+01, 1.758659783517478e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
