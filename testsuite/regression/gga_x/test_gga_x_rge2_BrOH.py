
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_rge2_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_rge2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.050043757423520e+01, -2.050046986024855e+01, -2.050067581344830e+01, -2.050014588947221e+01, -2.050045408320274e+01, -2.050045408320274e+01, -3.379683356830985e+00, -3.379665525635175e+00, -3.379315229320508e+00, -3.380635977034567e+00, -3.379688582629095e+00, -3.379688582629095e+00, -6.714023056954639e-01, -6.713180970412214e-01, -6.715690602198918e-01, -6.757739482697220e-01, -6.713683601977883e-01, -6.713683601977883e-01, -2.080665929620279e-01, -2.086035806900511e-01, -7.866729702223462e-01, -1.805079315734524e-01, -2.081949965206559e-01, -2.081949965206559e-01, -1.704962443934767e-02, -1.785851893296077e-02, -7.213348485144910e-02, -8.179622043800358e-03, -1.767241889130534e-02, -1.767241889130534e-02, -4.950199516757443e+00, -4.950147094441111e+00, -4.950199104433263e+00, -4.950158252714425e+00, -4.950165379050574e+00, -4.950165379050574e+00, -2.022743931200337e+00, -2.032437653971945e+00, -2.023460172834342e+00, -2.030963246808693e+00, -2.028528623999713e+00, -2.028528623999713e+00, -5.601783303306707e-01, -5.910114945398951e-01, -5.329784980087953e-01, -5.415346632377553e-01, -5.787963533924310e-01, -5.787963533924310e-01, -1.500195761028666e-01, -2.330141001590116e-01, -1.471508555785958e-01, -1.797793195422008e+00, -1.630084854500534e-01, -1.630084854500534e-01, -7.890776118593864e-03, -9.017857939614918e-03, -6.758932175101540e-03, -9.888583142714200e-02, -8.216666393895672e-03, -8.216666393895672e-03, -5.573661959014348e-01, -5.577399321255968e-01, -5.576038807925470e-01, -5.574982494873760e-01, -5.575504167694505e-01, -5.575504167694505e-01, -5.389438319899855e-01, -4.989295522405035e-01, -5.096001212650264e-01, -5.201164563876085e-01, -5.145593282822740e-01, -5.145593282822740e-01, -6.202583058992098e-01, -2.719119805307145e-01, -3.013145626206535e-01, -3.527963389777824e-01, -3.241346866302439e-01, -3.241346866302439e-01, -4.522105475314912e-01, -6.696788699547483e-02, -8.982965914728930e-02, -3.259142938557838e-01, -1.241485527272041e-01, -1.241485527272041e-01, -1.998164317290235e-02, -2.468940234457243e-03, -4.690085867622953e-03, -1.183258059235656e-01, -6.983083625171134e-03, -6.983083625171123e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_rge2_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_rge2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.553025008488639e+01, -2.553033488747133e+01, -2.553072583163466e+01, -2.552933689615734e+01, -2.553029470140025e+01, -2.553029470140025e+01, -4.101908786250178e+00, -4.101949389388986e+00, -4.103233538208871e+00, -4.101889462863555e+00, -4.101947143481651e+00, -4.101947143481651e+00, -7.571328093489824e-01, -7.556407196402991e-01, -7.150914172431246e-01, -7.218823857818544e-01, -7.565922025931108e-01, -7.565922025931108e-01, -1.860796983607092e-01, -1.896916601982707e-01, -9.293739910678968e-01, -1.486888301874022e-01, -1.871599621517911e-01, -1.871599621517911e-01, -2.272869038883576e-02, -2.380612386561014e-02, -9.390728913422700e-02, -1.090608793059512e-02, -2.355806465243939e-02, -2.355806465243939e-02, -6.279657348171633e+00, -6.282004523316576e+00, -6.279898234036484e+00, -6.281723306628001e+00, -6.280860196206691e+00, -6.280860196206691e+00, -2.159728822513804e+00, -2.179869814975677e+00, -2.146659542157691e+00, -2.162390264123085e+00, -2.190307236158400e+00, -2.190307236158400e+00, -6.895102292964436e-01, -7.720039591077338e-01, -6.524316710127646e-01, -6.993667633894112e-01, -7.197830716759596e-01, -7.197830716759596e-01, -1.546653264915831e-01, -1.880633326505115e-01, -1.491584044983834e-01, -2.347988472189473e+00, -1.458890186835444e-01, -1.458890186835444e-01, -1.052096853158540e-02, -1.202368111095638e-02, -9.011821911105871e-03, -1.213785872140515e-01, -1.095543509284686e-02, -1.095543509284686e-02, -7.387676707727621e-01, -7.303610951131035e-01, -7.333767357152682e-01, -7.357047774620333e-01, -7.345404684438183e-01, -7.345404684438183e-01, -7.157700827919969e-01, -5.802008100818629e-01, -6.206141564127623e-01, -6.577174329294181e-01, -6.390350837902422e-01, -6.390350837902423e-01, -8.086691891383488e-01, -2.329065518960233e-01, -2.870797019604726e-01, -3.989577753799477e-01, -3.393972411206043e-01, -3.393972411206043e-01, -5.206026752538984e-01, -8.795592695520479e-02, -1.141159949534756e-01, -3.860318214553242e-01, -1.351416982100581e-01, -1.351416982100581e-01, -2.663531540015064e-02, -3.291919969743824e-03, -6.253440522230474e-03, -1.284406993651407e-01, -9.310700394211814e-03, -9.310700394211800e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_rge2_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_rge2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.566914462554557e-09, -4.566871306317729e-09, -4.566644415615160e-09, -4.567351819343566e-09, -4.566891990653530e-09, -4.566891990653530e-09, -6.471271770733732e-06, -6.471237256515267e-06, -6.469221713199933e-06, -6.467207844416592e-06, -6.471143753494488e-06, -6.471143753494488e-06, -4.696093841244987e-03, -4.712307035817265e-03, -5.127438560613430e-03, -4.976867957556987e-03, -4.702019383569928e-03, -4.702019383569928e-03, -7.110913862364706e-01, -6.883210384689727e-01, -2.308755551930901e-03, -1.382965973861528e+00, -7.044674950735140e-01, -7.044674950735140e-01, -1.849398058154341e-01, -2.037590465901713e-01, -9.047988918573545e-01, -2.533901906394844e-02, -2.112687703205307e-01, -2.112687703205307e-01, -1.298759622707659e-06, -1.297890664125650e-06, -1.298667624578805e-06, -1.297992006573469e-06, -1.298318358223985e-06, -1.298318358223985e-06, -6.204548760969110e-05, -6.045728557281592e-05, -6.255929264124434e-05, -6.130747442769148e-05, -6.030701428360542e-05, -6.030701428360542e-05, -8.364776446143394e-03, -6.047623615123981e-03, -1.030731619345794e-02, -8.768938630284252e-03, -7.205801283289113e-03, -7.205801283289113e-03, -1.450360100126839e+00, -5.177883889184959e-01, -1.694959043854074e+00, -7.065450767497143e-05, -1.726369692624128e+00, -1.726369692624128e+00, -2.576541285001608e-02, -3.375903197888043e-02, -9.182905641150116e-02, -1.624572548356362e+00, -5.031169424546184e-02, -5.031169424546180e-02, -7.429992015049961e-03, -7.588279517050271e-03, -7.531344853825522e-03, -7.487567325226387e-03, -7.509462541349782e-03, -7.509462541349782e-03, -8.465745821481244e-03, -1.464995161299489e-02, -1.244479066079656e-02, -1.071904293813745e-02, -1.156374375620885e-02, -1.156374375620884e-02, -5.003484533750196e-03, -2.581147847229411e-01, -1.484239189002673e-01, -6.132423411912308e-02, -9.688212748903147e-02, -9.688212748903155e-02, -2.207063429474035e-02, -6.068095774172919e-01, -1.083049599401829e+00, -7.802727188885773e-02, -2.282822556912776e+00, -2.282822556912779e+00, -1.654633141044145e-01, -5.706089029864737e-03, -1.645310577523899e-02, -2.816912696362237e+00, -6.413053367983175e-02, -6.413053367983140e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
