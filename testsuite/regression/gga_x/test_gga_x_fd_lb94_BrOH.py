
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_fd_lb94_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_fd_lb94", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-3.150626651668864e+01, -3.150606875625131e+01, -3.150563939193653e+01, -3.150886881006643e+01, -3.150615843880690e+01, -3.150615843880690e+01, -5.775585173306780e+00, -5.775222531220854e+00, -5.765499732405314e+00, -5.783485090783464e+00, -5.775423257675445e+00, -5.775423257675445e+00, -1.446035785839763e+00, -1.452939149265504e+00, -1.660666202233114e+00, -1.659252392853413e+00, -1.448510235165281e+00, -1.448510235165281e+00, -7.179330615519504e-01, -6.981557654779367e-01, -1.477972505090027e+00, -9.755380528889286e-01, -7.115542474808277e-01, -7.115542474808277e-01, -2.066565643871892e+00, -2.033687324124549e+00, -1.592697413191439e+00, -2.879978753118603e+00, -2.015038478857250e+00, -2.015038478857250e+00, -6.958548515701957e+00, -6.944562076705736e+00, -6.957156988517950e+00, -6.946280998977468e+00, -6.951319101912629e+00, -6.951319101912629e+00, -4.971762394291738e+00, -4.945674568798161e+00, -5.044219517064158e+00, -5.023185794427167e+00, -4.861731744622447e+00, -4.861731744622447e+00, -9.054524298931370e-01, -6.971203613832753e-01, -8.809897940571083e-01, -6.881520716176323e-01, -8.951890465421790e-01, -8.951890465421790e-01, -1.238694914150668e+00, -1.051828879858261e+00, -1.176603263134804e+00, -2.122858164098316e+00, -1.048740045466575e+00, -1.048740045466575e+00, -2.854412194822774e+00, -2.748236644429289e+00, -2.128100872519544e+00, -1.344666393633798e+00, -2.489757293621935e+00, -2.489757293621936e+00, -5.876668661205646e-01, -6.463692871515565e-01, -6.256947880703346e-01, -6.094361809505532e-01, -6.175950729001797e-01, -6.175950729001797e-01, -5.585686633350958e-01, -9.850295974948915e-01, -8.595542762002871e-01, -7.431016930790799e-01, -8.006111177573262e-01, -8.006111177573262e-01, -7.412684492221504e-01, -1.020612923982014e+00, -9.269218720563493e-01, -7.541883678720728e-01, -8.310011064788769e-01, -8.310011064788768e-01, -9.197711134631333e-01, -1.756069208323136e+00, -1.513134564355920e+00, -6.071330086960147e-01, -1.148260678646424e+00, -1.148260678646425e+00, -2.157102437720871e+00, -3.230023482074566e+00, -2.892828404881313e+00, -1.087431582914471e+00, -2.308507284041598e+00, -2.308507284041601e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_fd_lb94_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_fd_lb94", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.370374980205721e+01, -1.370404814386652e+01, -1.370502029193546e+01, -1.370014201208911e+01, -1.370391013675613e+01, -1.370391013675613e+01, -1.621190328323153e+00, -1.621539634762296e+00, -1.631204150893740e+00, -1.614891550712711e+00, -1.621376893335830e+00, -1.621376893335830e+00, -1.238148923227802e-02, -5.288204955754737e-03, 1.977688952556849e-01, 1.876440824607793e-01, -9.829585928830518e-03, -9.829585928830518e-03, 2.459461569077134e-01, 2.279257854806917e-01, -2.356665676501212e-01, 4.830164928009474e-01, 2.402388259063131e-01, 2.402388259063131e-01, 8.747221089765365e-01, 8.680098514279047e-01, 8.273337249574220e-01, 1.057112770271670e+00, 8.599052508177141e-01, 8.599052508177141e-01, -4.047960436523655e+00, -4.064054432631993e+00, -4.049572786584213e+00, -4.062087296952925e+00, -4.056260260760479e+00, -4.056260260760479e+00, 5.667120189898895e-01, 5.212999573852974e-01, 6.348297006584349e-01, 5.990442264689084e-01, 4.482563150487793e-01, 4.482563150487793e-01, -3.250952916975490e-01, -6.447167415944312e-01, -2.879753592507409e-01, -5.294980307151486e-01, -3.805770899431763e-01, -3.805770899431763e-01, 6.656289054690427e-01, 4.748225958003043e-01, 6.307657483818746e-01, -1.958253225951371e+00, 5.457658257088025e-01, 5.457658257088025e-01, 1.043997507217385e+00, 1.028223033526665e+00, 7.927689220711420e-01, 7.228627798842301e-01, 9.322247996507148e-01, 9.322247996507153e-01, -7.000017333475719e-01, -6.230864276248478e-01, -6.495234177158696e-01, -6.707705321139605e-01, -6.600517762826026e-01, -6.600517762826026e-01, -6.903557531592289e-01, -1.000706342457213e-01, -2.566580293051239e-01, -4.114902070755787e-01, -3.330173325324512e-01, -3.330173325324512e-01, -6.644393538824578e-01, 3.907784025825017e-01, 2.573659273241586e-01, -1.217044348352126e-02, 1.236231752520615e-01, 1.236231752520614e-01, -6.307885529654292e-02, 8.973057232533023e-01, 8.033492549183894e-01, -1.030565289837834e-01, 6.203758006180365e-01, 6.203758006180362e-01, 9.272660557683082e-01, 1.002644331810503e+00, 9.869900457352819e-01, 5.873968326002377e-01, 8.544398102306994e-01, 8.544398102306994e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_fd_lb94_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_fd_lb94", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-7.166773874472264e-08, -7.166729755055983e-08, -7.166444868598394e-08, -7.167169123945914e-08, -7.166751343489545e-08, -7.166751343489545e-08, -9.730201793858600e-05, -9.730366249756091e-05, -9.733287855850247e-05, -9.720014970696749e-05, -9.730120578131490e-05, -9.730120578131490e-05, -6.515630550790645e-02, -6.528506657182788e-02, -6.858015314084466e-02, -6.667271503135840e-02, -6.520385518719136e-02, -6.520385518719136e-02, -9.366712230669487e+00, -9.018186020087944e+00, -3.351318434687082e-02, -2.681689176125274e+01, -9.262026399902680e+00, -9.262026399902680e+00, -1.620777432327733e+05, -1.393342160144550e+05, -1.175853004347071e+03, -1.659043946059830e+06, -1.451962997099120e+05, -1.451962997099120e+05, -2.118672628369641e-05, -2.119166990135107e-05, -2.118713411436639e-05, -2.119097902919983e-05, -2.118938885458962e-05, -2.118938885458962e-05, -8.309941592909620e-04, -8.115992490293489e-04, -8.352538824540072e-04, -8.199594328975480e-04, -8.125265444372660e-04, -8.125265444372660e-04, -1.285703434605169e-01, -1.075626185518432e-01, -1.570150185767988e-01, -1.500336796943300e-01, -1.127795020449743e-01, -1.127795020449743e-01, -7.409058848381333e+01, -7.926986492660235e+00, -7.925094345355073e+01, -1.255913662301220e-03, -4.696916143019389e+01, -4.696916143019389e+01, -1.884946865670080e+06, -1.223520513189648e+06, -3.803075327894367e+06, -3.903856248939866e+02, -1.781199907516311e+06, -1.781199907516310e+06, -1.415021263160521e-01, -1.362925308571555e-01, -1.378205311469963e-01, -1.392327352053345e-01, -1.384984854460099e-01, -1.384984854460099e-01, -1.632202389741792e-01, -2.090206030462752e-01, -1.880726039127376e-01, -1.735942596365766e-01, -1.805363405003565e-01, -1.805363405003565e-01, -8.836177756425163e-02, -3.487373655919568e+00, -1.932762452523548e+00, -8.527802521571781e-01, -1.286046623308301e+00, -1.286046623308301e+00, -3.117915154679782e-01, -1.472583046380431e+03, -5.400735662795917e+02, -1.136068467092539e+00, -1.616087303394514e+02, -1.616087303394515e+02, -9.153136141052897e+04, -8.835986843311378e+07, -1.091596880773982e+07, -1.956866998327979e+02, -3.242656376315699e+06, -3.242656376315715e+06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
