
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_pw86_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pw86", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.103908562677864e+01, -2.103909913474759e+01, -2.103925132290417e+01, -2.103902829972936e+01, -2.103909198200502e+01, -2.103909198200502e+01, -3.513257617327964e+00, -3.513214755037349e+00, -3.512181685222203e+00, -3.514706864476353e+00, -3.513250538046246e+00, -3.513250538046246e+00, -7.151498511653485e-01, -7.153474357175897e-01, -7.216733407036175e-01, -7.259620078782947e-01, -7.152176352513321e-01, -7.152176352513321e-01, -2.225174245342981e-01, -2.235632503170817e-01, -8.268182453829627e-01, -1.831195800138748e-01, -2.228096810808848e-01, -2.228096810808848e-01, -3.112009990619958e-02, -3.200651708249870e-02, -8.411833324374079e-02, -2.063539241637217e-02, -3.168467040943689e-02, -3.168467040943689e-02, -5.029411255942294e+00, -5.028306329928091e+00, -5.029305573386296e+00, -5.028446267826206e+00, -5.028833388213900e+00, -5.028833388213900e+00, -2.173072705904582e+00, -2.182456659074464e+00, -2.175168113761195e+00, -2.182507608483080e+00, -2.176575537320086e+00, -2.176575537320086e+00, -5.784000335481599e-01, -5.923157308921154e-01, -5.518147109179842e-01, -5.451801053387496e-01, -5.944531122076775e-01, -5.944531122076775e-01, -1.500920080303884e-01, -2.418471431162431e-01, -1.470186922358504e-01, -1.801850067083179e+00, -1.630335775338697e-01, -1.630335775338697e-01, -2.007512708321498e-02, -2.175241610634109e-02, -1.646914577807716e-02, -1.048526792901802e-01, -1.978467840597230e-02, -1.978467840597230e-02, -5.571449292402004e-01, -5.585551009328922e-01, -5.578427827685185e-01, -5.574421587495851e-01, -5.576244233181599e-01, -5.576244233181599e-01, -5.387440681864113e-01, -5.271652177602814e-01, -5.289058290444385e-01, -5.293537690499025e-01, -5.288564836788728e-01, -5.288564836788728e-01, -6.220215080206976e-01, -2.886380599593270e-01, -3.242430246505288e-01, -3.755493823544462e-01, -3.487926390972911e-01, -3.487926390972910e-01, -4.792131606872892e-01, -8.117823156482833e-02, -9.903268044374552e-02, -3.422228808286215e-01, -1.251617244277380e-01, -1.251617244277380e-01, -3.525856698371762e-02, -9.458540280581787e-03, -1.411473833374274e-02, -1.192273359173252e-01, -1.727473171274654e-02, -1.727473171274652e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_pw86_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pw86", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.417537395470586e+01, -2.417547226224425e+01, -2.417589675863288e+01, -2.417428733770857e+01, -2.417542591630206e+01, -2.417542591630206e+01, -3.869409127824045e+00, -3.869441742473779e+00, -3.870502637666296e+00, -3.869501030473930e+00, -3.869442384055786e+00, -3.869442384055786e+00, -7.402107905346883e-01, -7.397379636836695e-01, -7.312538976231023e-01, -7.362523803659142e-01, -7.400358369203831e-01, -7.400358369203831e-01, -2.195270292856762e-01, -2.209155431621745e-01, -8.834483078393632e-01, -1.775562876831399e-01, -2.199240042674240e-01, -2.199240042674240e-01, -2.544227496363761e-02, -2.621674812069826e-02, -7.595402406777020e-02, -1.658417110164443e-02, -2.595208755331562e-02, -2.595208755331562e-02, -6.018401306974128e+00, -6.022684487899378e+00, -6.018834596636544e+00, -6.022164942318485e+00, -6.020601363707073e+00, -6.020601363707073e+00, -2.203581991810511e+00, -2.215942910053765e+00, -2.201869590166012e+00, -2.211427575676307e+00, -2.214439947282721e+00, -2.214439947282721e+00, -6.506899663430399e-01, -7.633717789020706e-01, -6.153303678017703e-01, -6.828338186495190e-01, -6.811887261336967e-01, -6.811887261336967e-01, -1.432842930886466e-01, -2.359508940231867e-01, -1.405342089187854e-01, -2.321363063390359e+00, -1.571300313181151e-01, -1.571300313181151e-01, -1.613089529634042e-02, -1.750164838550478e-02, -1.324715407833499e-02, -9.768816873088638e-02, -1.591923223127389e-02, -1.591923223127391e-02, -7.383618040584976e-01, -7.239865638924964e-01, -7.297563864135060e-01, -7.337895289555990e-01, -7.318260524486460e-01, -7.318260524486460e-01, -7.157291832262084e-01, -5.559736893345208e-01, -5.853006602839761e-01, -6.286849710750738e-01, -6.044625682553451e-01, -6.044625682553452e-01, -7.980310942757842e-01, -2.836276290532144e-01, -3.220402662436223e-01, -3.892634852704903e-01, -3.519295524880466e-01, -3.519295524880466e-01, -5.018878305112681e-01, -7.239481510897358e-02, -9.107557742561513e-02, -3.665494461263567e-01, -1.189064257289030e-01, -1.189064257289029e-01, -2.893073601443974e-02, -7.571190462173979e-03, -1.131344360956292e-02, -1.133007095114038e-01, -1.388973008983818e-02, -1.388973008983814e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_pw86_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pw86", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-9.815971621173231e-09, -9.815902787825703e-09, -9.815487226302627e-09, -9.816616284009708e-09, -9.815936227908650e-09, -9.815936227908650e-09, -1.304278070943480e-05, -1.304335125608603e-05, -1.305682948216648e-05, -1.302249631102722e-05, -1.304285192675958e-05, -1.304285192675958e-05, -7.255593723634717e-03, -7.233484227387351e-03, -6.567378005260365e-03, -6.436662687548127e-03, -7.247782396257653e-03, -7.247782396257653e-03, -6.007050054460468e-01, -6.005543879644795e-01, -4.229820374351966e-03, -1.001320617658912e+00, -6.010347017281826e-01, -6.010347017281826e-01, -7.166497106212764e+02, -6.406446969651637e+02, -1.442605837760937e+01, -3.702780440505939e+03, -6.670707986086638e+02, -6.670707986086638e+02, -2.784926967962801e-06, -2.780724398677643e-06, -2.784500704283472e-06, -2.781233935047395e-06, -2.782786842497442e-06, -2.782786842497442e-06, -8.012863003364818e-05, -7.915771522175734e-05, -7.924826678599564e-05, -7.850332786105154e-05, -8.062006541696008e-05, -8.062006541696008e-05, -1.756344141893419e-02, -9.964895918811566e-03, -2.132471997497202e-02, -1.704068037483795e-02, -1.545540912145403e-02, -1.545540912145403e-02, -1.817343834210781e+00, -3.653083553531751e-01, -1.999341345790824e+00, -1.167810076989611e-04, -1.455594859444485e+00, -1.455594859444485e+00, -4.133747950334138e+03, -2.998890777532205e+03, -9.126478536382912e+03, -6.535323321908088e+00, -4.382029115978459e+03, -4.382029115978452e+03, -7.617711523302068e-03, -1.184788934321012e-02, -1.046990788041535e-02, -9.294566234000394e-03, -9.893728502999398e-03, -9.893728502999398e-03, -7.789336072434378e-03, -2.530935883663345e-02, -2.535515985221494e-02, -2.310947739694409e-02, -2.474769129139627e-02, -2.474769129139626e-02, -8.546763452134121e-03, -2.015321496476849e-01, -1.427427725194320e-01, -9.568878468842712e-02, -1.181260716423130e-01, -1.181260716423131e-01, -3.673664088444336e-02, -1.629697986416667e+01, -7.843606640368087e+00, -1.443258054786650e-01, -3.603865345051021e+00, -3.603865345051021e+00, -4.351234984658720e+02, -8.388065427591474e+04, -1.691493126522445e+04, -4.386592705883197e+00, -7.539423771578371e+03, -7.539423771578416e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
