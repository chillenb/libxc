
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_eb88_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_eb88", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.100423348923701e+01, -2.100426138001455e+01, -2.100445268389418e+01, -2.100403633725197e+01, -2.100424492271408e+01, -2.100424492271408e+01, -3.481833893676679e+00, -3.481797143451148e+00, -3.481032929681072e+00, -3.483022887060912e+00, -3.481873763644508e+00, -3.481873763644508e+00, -6.980721372311223e-01, -6.980582516329811e-01, -6.995934443477505e-01, -7.043818596416573e-01, -7.025512477560235e-01, -7.025512477560235e-01, -2.173410915068853e-01, -2.180090623075629e-01, -8.060908867182141e-01, -1.924772487476471e-01, -2.004212151918678e-01, -2.004212151918678e-01, -6.486527548068409e-02, -6.484879295141724e-02, -1.133548685301609e-01, -5.958675771463030e-02, -5.915528796015007e-02, -5.915528796015006e-02, -5.049208514713849e+00, -5.048576565511805e+00, -5.049190295735743e+00, -5.048632253898922e+00, -5.048882260438880e+00, -5.048882260438880e+00, -2.113273825782025e+00, -2.123242379531840e+00, -2.114355922798668e+00, -2.123141327369214e+00, -2.118269265994001e+00, -2.118269265994001e+00, -5.822593932288243e-01, -6.040863287346018e-01, -5.429670870700477e-01, -5.386546673878303e-01, -5.880818188290198e-01, -5.880818188290198e-01, -1.670618853721953e-01, -2.386692631526360e-01, -1.600722511917855e-01, -1.817296626290765e+00, -1.710461103319705e-01, -1.710461103319705e-01, -5.383314470841567e-02, -5.739078998892324e-02, -3.752792634803174e-02, -1.308358604213362e-01, -4.539456990422686e-02, -4.539456990422688e-02, -5.513026299873569e-01, -5.550402589243597e-01, -5.537810599413101e-01, -5.526914530480517e-01, -5.532407701233720e-01, -5.532407701233720e-01, -5.342576177894569e-01, -5.111080589172426e-01, -5.182649996474704e-01, -5.246996652870169e-01, -5.212829775850746e-01, -5.212829775850746e-01, -6.345084526462502e-01, -2.790027022839767e-01, -3.110933220281313e-01, -3.660306727128649e-01, -3.356900203158905e-01, -3.356900203158905e-01, -4.716534126089460e-01, -1.135380963342669e-01, -1.257594253209062e-01, -3.427533961532890e-01, -1.400747324450406e-01, -1.400747324450406e-01, -7.286477702031821e-02, -3.334680434313419e-02, -4.350035284131731e-02, -1.367667934608643e-01, -4.266789551201428e-02, -4.266789551201425e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_eb88_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_eb88", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.524857826178581e+01, -2.524867300518279e+01, -2.524907691754135e+01, -2.524766769199643e+01, -2.524840855137374e+01, -2.524840855137374e+01, -4.064333816231134e+00, -4.064373624878312e+00, -4.065394150061533e+00, -4.064392471975191e+00, -4.064479521094875e+00, -4.064479521094875e+00, -7.675866867834688e-01, -7.663333994310944e-01, -7.362224066773575e-01, -7.427825062640941e-01, -7.417476495660865e-01, -7.417476495660865e-01, -1.879358216765783e-01, -1.910411749004303e-01, -8.994565042349180e-01, -1.430319827642577e-01, -1.597206408206007e-01, -1.597206408206007e-01, -1.787679446128437e-02, -1.822146553443463e-02, -5.217782696887441e-02, -1.396702496250570e-02, -1.501106668801074e-02, -1.501106668801075e-02, -6.213500468578003e+00, -6.216006386723472e+00, -6.213613607957329e+00, -6.215825841809906e+00, -6.214771552851112e+00, -6.214771552851112e+00, -2.203126383452903e+00, -2.221368540349491e+00, -2.186434731902419e+00, -2.202481135750738e+00, -2.221373606956922e+00, -2.221373606956922e+00, -6.894871868797232e-01, -7.740653493386280e-01, -6.349369331527561e-01, -6.815090763786602e-01, -7.033131625755892e-01, -7.033131625755892e-01, -1.047988594885176e-01, -1.877195484769986e-01, -9.815065324800733e-02, -2.333381472815540e+00, -1.183157837204594e-01, -1.183157837204594e-01, -1.200506788343559e-02, -1.351750869785457e-02, -9.313451634627804e-03, -7.154156004943385e-02, -1.125000814056752e-02, -1.125000814056753e-02, -7.243079647366136e-01, -7.124380860811839e-01, -7.164484292707914e-01, -7.198888750721719e-01, -7.181526197786150e-01, -7.181526197786150e-01, -7.072383189490070e-01, -5.642102907904011e-01, -6.012219630254584e-01, -6.407967301416583e-01, -6.203498322456061e-01, -6.203498322456061e-01, -8.102574607617054e-01, -2.374945561897034e-01, -2.882741295697100e-01, -3.956314489693781e-01, -3.368427378628759e-01, -3.368427378628758e-01, -5.188308481857357e-01, -5.114614356299408e-02, -6.266248692545162e-02, -3.869706731101599e-01, -8.472728822879216e-02, -8.472728822879222e-02, -2.192538430706343e-02, -6.290935550839640e-03, -9.334151631170266e-03, -8.076897743726835e-02, -1.051785234435775e-02, -1.051785234435775e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_eb88_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_eb88", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-6.980454580509469e-09, -6.980418709058382e-09, -6.980167833194878e-09, -6.980703431560821e-09, -6.980435772718376e-09, -6.980435772718376e-09, -9.252152696825579e-06, -9.252520723498106e-06, -9.260131481597417e-06, -9.239891335406848e-06, -9.251701832698882e-06, -9.251701832698882e-06, -5.820122516931828e-03, -5.824449891549699e-03, -5.896066497116229e-03, -5.730644884711104e-03, -5.786648484461087e-03, -5.786648484461087e-03, -7.553159591046560e-01, -7.343007987618797e-01, -3.255340922146310e-03, -1.541245060901647e+00, -1.167522317809094e+00, -1.167522317809094e+00, -1.013828877544267e+04, -8.890588133825759e+03, -5.933922726808459e+01, -4.783961392181172e+04, -2.651393194912621e+04, -2.651393194912624e+04, -2.098514648179666e-06, -2.099868878755286e-06, -2.098557339331591e-06, -2.099753022232679e-06, -2.099210865295460e-06, -2.099210865295460e-06, -7.120960671255798e-05, -6.973276320987521e-05, -7.142421031243263e-05, -7.010901910880960e-05, -7.029213771350138e-05, -7.029213771350138e-05, -1.181755749106986e-02, -1.046071277369641e-02, -1.564198249525329e-02, -1.639551257840794e-02, -1.135647472848047e-02, -1.135647472848047e-02, -3.973438775034444e+00, -5.924383653688486e-01, -5.026139676189058e+00, -1.279436758914407e-04, -2.848342959182477e+00, -2.848342959182477e+00, -1.091150315041686e+05, -5.344943632713807e+04, -1.936935310540606e+05, -1.636463696001111e+01, -9.144667095923449e+04, -9.144667095923449e+04, -1.554208309435573e-02, -1.469949515747632e-02, -1.494865846685208e-02, -1.518872145385527e-02, -1.506434471528067e-02, -1.506434471528067e-02, -1.788963285994902e-02, -2.022099258858496e-02, -1.886423064274410e-02, -1.796332625834691e-02, -1.839348499757550e-02, -1.839348499757550e-02, -8.570348521571014e-03, -2.836380827256097e-01, -1.666978303356484e-01, -7.758205817119197e-02, -1.147611432272124e-01, -1.147611432272125e-01, -2.792350421042628e-02, -6.518167210953575e+01, -2.762118047019827e+01, -9.921516796029269e-02, -8.920203724312188e+00, -8.920203724312188e+00, -3.553785442657375e+03, -3.754514604639417e+06, -3.601227636816806e+05, -1.055918175936105e+01, -1.220772537141886e+05, -1.220772537141890e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
