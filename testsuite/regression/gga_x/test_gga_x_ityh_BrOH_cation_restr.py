
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_ityh_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ityh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.093745100680565e+01, -2.093747808729491e+01, -2.093766738884750e+01, -2.093726306413788e+01, -2.093746512308744e+01, -2.093746512308744e+01, -3.368030292132635e+00, -3.367994372794170e+00, -3.367249575670659e+00, -3.369207631479225e+00, -3.368071398586121e+00, -3.368071398586121e+00, -5.755819299702526e-01, -5.753938601883719e-01, -5.720917246901730e-01, -5.770824726742947e-01, -5.754125758383761e-01, -5.754125758383761e-01, -9.007820566653074e-02, -9.209002487609028e-02, -6.844083751316882e-01, -5.461048663145903e-02, -6.802732438574643e-02, -6.802732438574649e-02, -8.535561408211288e-06, -9.952606928255428e-06, -1.639167264827276e-03, -1.644445560975278e-06, -3.262647826900391e-06, -3.262647826900390e-06, -4.940122431974741e+00, -4.939481916547966e+00, -4.940103877102017e+00, -4.939538274118902e+00, -4.939791821875312e+00, -4.939791821875312e+00, -1.985348515637334e+00, -1.995763255893988e+00, -1.985477205815808e+00, -1.994673151685480e+00, -1.991039582845684e+00, -1.991039582845684e+00, -4.682854138589481e-01, -4.961487614273231e-01, -4.284399793547637e-01, -4.306920810393764e-01, -4.748985746907772e-01, -4.748985746907772e-01, -2.390779222346463e-02, -9.489855916520901e-02, -1.958886256175411e-02, -1.705441699263959e+00, -3.474480947720280e-02, -3.474480947720280e-02, -7.553489375937295e-07, -1.536343048394072e-06, -6.868753778198635e-07, -6.650467072727546e-03, -1.200878425446448e-06, -1.200878425446448e-06, -4.457823342731359e-01, -4.478768618691941e-01, -4.471883142881827e-01, -4.465766993933049e-01, -4.468863778612703e-01, -4.468863778612703e-01, -4.294845590196362e-01, -3.915494605496121e-01, -4.034240289667838e-01, -4.142119571991301e-01, -4.086741116508025e-01, -4.086741116508025e-01, -5.259751794308131e-01, -1.394863024506108e-01, -1.795574162651935e-01, -2.486580599219946e-01, -2.119571906160791e-01, -2.119571906160790e-01, -3.525993844967065e-01, -1.440740368455924e-03, -3.572305486336240e-03, -2.305881145044788e-01, -1.290773525284152e-02, -1.290773525284158e-02, -2.398727331603447e-05, -2.934482169488555e-08, -2.713895448241668e-07, -1.089427554659255e-02, -9.514088573972912e-07, -9.514088573972890e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_ityh_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ityh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.511365474968314e+01, -2.511374925581036e+01, -2.511415229775995e+01, -2.511274660001203e+01, -2.511348558398014e+01, -2.511348558398014e+01, -3.964424902566569e+00, -3.964461919471024e+00, -3.965417788057685e+00, -3.964527313171082e+00, -3.964567100718691e+00, -3.964567100718691e+00, -6.820636450732157e-01, -6.810119876750197e-01, -6.562134821678982e-01, -6.625033848925467e-01, -6.613197456068990e-01, -6.613197456068990e-01, -1.245982517268799e-01, -1.270003770760407e-01, -8.116777514355177e-01, -8.304043863860509e-02, -9.901272948898586e-02, -9.901272948898589e-02, -1.706851174187810e-05, -1.990167438300931e-05, -3.229299242484839e-03, -3.288783031762132e-06, -6.524871877751749e-06, -6.524871877751746e-06, -6.104245354513998e+00, -6.106701987392801e+00, -6.104356439304741e+00, -6.106525156452507e+00, -6.105491301383877e+00, -6.105491301383877e+00, -2.122907256552459e+00, -2.140567946711608e+00, -2.107538570583678e+00, -2.123061624220518e+00, -2.140197844278695e+00, -2.140197844278695e+00, -5.956225600909983e-01, -6.707836060898266e-01, -5.428676319924640e-01, -5.803073616981285e-01, -6.082309664109591e-01, -6.082309664109591e-01, -4.146484452186656e-02, -1.296250715565962e-01, -3.468513021949914e-02, -2.225566230546150e+00, -5.700265371760954e-02, -5.700265371760954e-02, -1.510672465627844e-06, -3.072588205278323e-06, -1.373721051837155e-06, -1.263988361217906e-02, -2.401681776204811e-06, -2.401681776204811e-06, -6.186569467742000e-01, -6.094110627111325e-01, -6.125297679641074e-01, -6.152081836685889e-01, -6.138558382221959e-01, -6.138558382221959e-01, -6.009058107288957e-01, -4.791364858307277e-01, -5.102969403488672e-01, -5.438269943208675e-01, -5.264232521550158e-01, -5.264232521550158e-01, -7.071232616119042e-01, -1.770962010864829e-01, -2.218596749489768e-01, -3.140377807718688e-01, -2.630657282531862e-01, -2.630657282531862e-01, -4.344293774196087e-01, -2.843414139740226e-03, -6.939778968041702e-03, -3.010585301883235e-01, -2.357657521709395e-02, -2.357657521709394e-02, -4.795646720394140e-05, -5.868958026183238e-08, -5.427750107653276e-07, -2.013963057223685e-02, -1.902767541995676e-06, -1.902767541995672e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_ityh_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ityh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-7.200469944496246e-09, -7.200435166140282e-09, -7.200183040657806e-09, -7.200702502767795e-09, -7.200444167522159e-09, -7.200444167522159e-09, -9.082970292618378e-06, -9.083355149772295e-06, -9.091384728866319e-06, -9.070641951808315e-06, -9.082568103212477e-06, -9.082568103212477e-06, -4.429255006021358e-03, -4.429566116328801e-03, -4.407338796907750e-03, -4.297285245521693e-03, -4.337801880346646e-03, -4.337801880346646e-03, -1.707547807835638e-01, -1.721743082661905e-01, -2.598894613609947e-03, -1.667279703988155e-01, -1.795933731702202e-01, -1.795933731702205e-01, -2.365700164479910e-04, -2.821632464337325e-04, -1.663676106165561e-02, -4.914067108367376e-05, -1.087393281850300e-04, -1.087393281853188e-04, -2.112369309705062e-06, -2.113899948257672e-06, -2.112419306285197e-06, -2.113770723212895e-06, -2.113155299634674e-06, -2.113155299634674e-06, -6.599025390552204e-05, -6.469693962292744e-05, -6.608995763818970e-05, -6.494056620760994e-05, -6.522918328924516e-05, -6.522918328924516e-05, -8.728264731354241e-03, -8.094136752278188e-03, -1.118712724302526e-02, -1.212714756245830e-02, -8.454419095837253e-03, -8.454419095837253e-03, -1.097576730828696e-01, -1.232035793289975e-01, -1.014462189779579e-01, -1.218251360649844e-04, -1.586865536475458e-01, -1.586865536475458e-01, -2.897832070805109e-05, -5.165835324245972e-05, -8.749169533967807e-05, -5.673979916994391e-02, -8.629119330861783e-05, -8.629119330863389e-05, -1.179856659260377e-02, -1.106348467366178e-02, -1.128292948833056e-02, -1.149255374411451e-02, -1.138413256815034e-02, -1.138413256815034e-02, -1.348328637990035e-02, -1.369003665039333e-02, -1.318637932278180e-02, -1.293963947202725e-02, -1.305171981458255e-02, -1.305171981458255e-02, -6.724339019595137e-03, -9.046594817494143e-02, -6.900975580579523e-02, -4.302529891999902e-02, -5.583448134185327e-02, -5.583448134185328e-02, -1.816403458716901e-02, -1.407566453128650e-02, -2.988398914634309e-02, -5.441827105321789e-02, -1.019194259966028e-01, -1.019194259966104e-01, -5.186806066984857e-04, -3.923623016402619e-06, -1.891023492091163e-05, -9.007356778824210e-02, -8.184378549216610e-05, -8.184378549290680e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
