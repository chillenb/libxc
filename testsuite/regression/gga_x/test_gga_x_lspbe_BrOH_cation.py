
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_lspbe_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_lspbe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.094388843217466e+01, -2.094391595423837e+01, -2.094410588856055e+01, -2.094369502681680e+01, -2.094390070189836e+01, -2.094390070189836e+01, -3.472986161240101e+00, -3.472948359627213e+00, -3.472159687328534e+00, -3.474190624872818e+00, -3.473024819610665e+00, -3.473024819610665e+00, -6.972006604201163e-01, -6.972171895059245e-01, -6.993615501008116e-01, -7.041077575716135e-01, -7.040661588670540e-01, -7.040661588670540e-01, -2.149709090780826e-01, -2.161301920185142e-01, -8.052683492644415e-01, -1.808367740943602e-01, -2.099822573085480e-01, -2.099822573085479e-01, -2.153269631268180e-04, -3.666730764727202e-04, -4.992293330122752e-02, 1.092379932390757e-06, -3.900152754473687e-05, -3.900152754473687e-05, -5.034693900191417e+00, -5.034080239042888e+00, -5.034676404178874e+00, -5.034134482505202e+00, -5.034376877904972e+00, -5.034376877904972e+00, -2.112800327535109e+00, -2.122666204741529e+00, -2.114077793003364e+00, -2.122793307479154e+00, -2.117643137845032e+00, -2.117643137845032e+00, -5.806674319569488e-01, -6.028158022989691e-01, -5.418916474312157e-01, -5.376018901978836e-01, -5.871020630465608e-01, -5.871020630465609e-01, -1.361207417943597e-01, -2.300465827468554e-01, -1.269149250899003e-01, -1.813597880622523e+00, -1.534144648037401e-01, -1.534144648037401e-01, 5.937452412697235e-07, 1.092260355951352e-06, -5.408567905923155e-07, -8.645515748049688e-02, -5.687103903206890e-06, -5.687103903206892e-06, -5.507665007203040e-01, -5.539086379458062e-01, -5.528204504983908e-01, -5.519015939416790e-01, -5.523619195627233e-01, -5.523619195627233e-01, -5.339868176255629e-01, -5.104203435765642e-01, -5.170076793169214e-01, -5.231787900815283e-01, -5.198295431375324e-01, -5.198295431375324e-01, -6.331075789382535e-01, -2.750249160090721e-01, -3.101749129604469e-01, -3.657168091209737e-01, -3.356734154308401e-01, -3.356734154308401e-01, -4.710702061659896e-01, -4.678764921259147e-02, -6.822036499173528e-02, -3.421603457473036e-01, -1.090366348523258e-01, -1.090366348523258e-01, -1.646250009343502e-03, 4.895244300615705e-08, 3.132454751934004e-07, -1.028271391683854e-01, -9.007193939700476e-07, -9.007193939700469e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_lspbe_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_lspbe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.515011940016485e+01, -2.515008972072446e+01, -2.515023458231391e+01, -2.515017337685885e+01, -2.515057373456406e+01, -2.515066757213695e+01, -2.514927371147897e+01, -2.514901034399353e+01, -2.515018957870460e+01, -2.514965120011108e+01, -2.515018957870460e+01, -2.514965120011108e+01, -4.038937103453540e+00, -4.039116807116911e+00, -4.038979128960452e+00, -4.039165978527747e+00, -4.040071490159099e+00, -4.040381762623283e+00, -4.038831056544297e+00, -4.039145745544660e+00, -4.038169212017834e+00, -4.040188322552217e+00, -4.038169212017834e+00, -4.040188322552217e+00, -7.585463452201477e-01, -7.633159228215974e-01, -7.567916321422682e-01, -7.626062922486505e-01, -7.349112875699730e-01, -7.282414743375120e-01, -7.368245713415741e-01, -7.389812037624700e-01, -7.720262930219980e-01, -7.090198637557806e-01, -7.720262930219980e-01, -7.090198637557806e-01, -2.029546673539972e-01, -2.074281946413315e-01, -2.034458573458438e-01, -2.089657164771606e-01, -8.724223376311363e-01, -9.107054631837715e-01, -1.834910073737742e-01, -1.851291029157769e-01, -2.109528521643017e-01, -1.586551366986523e-01, -2.109528521643016e-01, -1.586551366986522e-01, -1.968213592714260e-03, -2.968319489667367e-03, -2.953598226075230e-03, -4.462217229103793e-03, -8.183107732478728e-02, -8.518828814218288e-02, 3.269861380235896e-06, 3.558181415328718e-06, -7.430413103110934e-04, -1.668551665330516e-06, -7.430413103110969e-04, -1.668551665330611e-06, -6.201759631943411e+00, -6.200207518948823e+00, -6.204558364998289e+00, -6.202911336579270e+00, -6.201914013612839e+00, -6.200299647569016e+00, -6.204315490054451e+00, -6.202755942259285e+00, -6.203193904268866e+00, -6.201565579014152e+00, -6.203193904268866e+00, -6.201565579014152e+00, -2.191712284770522e+00, -2.191598366159001e+00, -2.209086907411467e+00, -2.208455267729593e+00, -2.175463391364619e+00, -2.179942461371481e+00, -2.190226206369187e+00, -2.194955820840545e+00, -2.214157141890965e+00, -2.202164938246570e+00, -2.214157141890965e+00, -2.202164938246570e+00, -6.868180725019581e-01, -6.850828294573744e-01, -7.739860286200894e-01, -7.747288815330668e-01, -6.181732243943582e-01, -6.434978943354582e-01, -6.703075501842012e-01, -6.921417072843945e-01, -7.183713997959282e-01, -6.813079226434580e-01, -7.183713997959283e-01, -6.813079226434581e-01, -1.609415138347309e-01, -1.612646766455150e-01, -2.258285417940797e-01, -2.264464747388259e-01, -1.510014335231791e-01, -1.555146742473445e-01, -2.334917883440613e+00, -2.333930286525810e+00, -1.672759623609802e-01, -1.645420959236092e-01, -1.672759623609802e-01, -1.645420959236092e-01, 2.316555773080646e-06, 2.418665048754835e-06, 2.948407550442995e-06, 3.110771767827192e-06, -1.229516580736887e-05, -5.305470311294733e-05, -1.165089066313597e-01, -1.173534596439221e-01, 2.408683884963435e-06, -1.809190859667892e-04, 2.408683884963446e-06, -1.809190859667886e-04, -7.233068784950081e-01, -7.262410268209419e-01, -7.112411104187736e-01, -7.142505888379254e-01, -7.153943583276138e-01, -7.184053851999687e-01, -7.189270340558036e-01, -7.218641919596002e-01, -7.171535380600881e-01, -7.201266020014216e-01, -7.171535380600881e-01, -7.201266020014216e-01, -7.063558567197560e-01, -7.087103726507630e-01, -5.579380536333020e-01, -5.606838678386640e-01, -5.956379638751497e-01, -5.987822222148458e-01, -6.379016182275205e-01, -6.403435686636431e-01, -6.161677857750315e-01, -6.186644520542817e-01, -6.161677857750315e-01, -6.186644520542817e-01, -8.094809348585199e-01, -8.114266163945414e-01, -2.625789674937687e-01, -2.634760181974657e-01, -2.978599313446083e-01, -3.000327290259341e-01, -3.911728580508387e-01, -3.935063499162318e-01, -3.377194335556254e-01, -3.375938170944788e-01, -3.377194335556253e-01, -3.375938170944788e-01, -5.122728959518030e-01, -5.163633212880366e-01, -8.113739582215007e-02, -8.154714957271607e-02, -1.010774552340856e-01, -1.033508193512734e-01, -3.805270922331455e-01, -3.870216721090177e-01, -1.328749162283713e-01, -1.340941894541606e-01, -1.328749162283713e-01, -1.340941894541606e-01, -1.077005368034747e-02, -1.246084918515193e-02, 1.672638835712979e-07, 2.241416705497280e-07, 1.106915394339846e-06, 1.374015517861116e-06, -1.281880735249607e-01, -1.296507358822813e-01, -6.419176982650880e-06, -6.215013384023138e-05, -6.419176982650812e-06, -6.215013384023103e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_lspbe_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_lspbe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.405208546425097e-08, 0.000000000000000e+00, -1.405216341736990e-08, -1.405197372902761e-08, 0.000000000000000e+00, -1.405208220396931e-08, -1.405148701608663e-08, 0.000000000000000e+00, -1.405142096843358e-08, -1.405275216907942e-08, 0.000000000000000e+00, -1.405303248088678e-08, -1.405202535021680e-08, 0.000000000000000e+00, -1.405229320734557e-08, -1.405202535021680e-08, 0.000000000000000e+00, -1.405229320734557e-08, -1.893381835912705e-05, 0.000000000000000e+00, -1.893964615024626e-05, -1.893418195452304e-05, 0.000000000000000e+00, -1.894046144622379e-05, -1.894755577316426e-05, 0.000000000000000e+00, -1.895061926169051e-05, -1.891214993163753e-05, 0.000000000000000e+00, -1.891636073650914e-05, -1.894459650701087e-05, 0.000000000000000e+00, -1.892663214666925e-05, -1.894459650701087e-05, 0.000000000000000e+00, -1.892663214666925e-05, -1.202535694108770e-02, 0.000000000000000e+00, -1.203609137852369e-02, -1.203056682585703e-02, 0.000000000000000e+00, -1.204448112550512e-02, -1.207644421868573e-02, 0.000000000000000e+00, -1.202373091288232e-02, -1.171365155436125e-02, 0.000000000000000e+00, -1.173536698344165e-02, -1.196163712170780e-02, 0.000000000000000e+00, -1.119145832215217e-02, -1.196163712170780e-02, 0.000000000000000e+00, -1.119145832215217e-02, -1.241477005181507e+00, 0.000000000000000e+00, -1.171283544174413e+00, -1.250027569141053e+00, 0.000000000000000e+00, -1.163058358538271e+00, -6.967411587174889e-03, 0.000000000000000e+00, -6.493754343993906e-03, -1.564094339708751e+00, 0.000000000000000e+00, -1.517994926246758e+00, -1.071541103180359e+00, 0.000000000000000e+00, -1.922512863598305e+00, -1.071541103180358e+00, 0.000000000000000e+00, -1.922512863598309e+00, 5.733815341845111e+02, 0.000000000000000e+00, 7.071870974348469e+02, 7.567154030368207e+02, 0.000000000000000e+00, 9.113292597811665e+02, 2.310474883416943e+01, 0.000000000000000e+00, 1.836082220164634e+01, -2.551895128854984e+00, 0.000000000000000e+00, -3.182461613444242e+00, 3.123947890066911e+02, 0.000000000000000e+00, 1.155678505156106e+01, 3.123947890066930e+02, 0.000000000000000e+00, 1.155678505156141e+01, -4.139812684648497e-06, 0.000000000000000e+00, -4.143634702198485e-06, -4.140332952049504e-06, 0.000000000000000e+00, -4.144139406079103e-06, -4.139809267123913e-06, 0.000000000000000e+00, -4.143628876118008e-06, -4.140256190890115e-06, 0.000000000000000e+00, -4.144087770735797e-06, -4.140105340612108e-06, 0.000000000000000e+00, -4.143893365316402e-06, -4.140105340612108e-06, 0.000000000000000e+00, -4.143893365316402e-06, -1.449184290681825e-04, 0.000000000000000e+00, -1.449438586033178e-04, -1.421107101279457e-04, 0.000000000000000e+00, -1.422326862085473e-04, -1.446620079539847e-04, 0.000000000000000e+00, -1.448074670608212e-04, -1.422855762991634e-04, 0.000000000000000e+00, -1.423542537017459e-04, -1.433797666952435e-04, 0.000000000000000e+00, -1.435411246196358e-04, -1.433797666952435e-04, 0.000000000000000e+00, -1.435411246196358e-04, -2.388462834563576e-02, 0.000000000000000e+00, -2.415095078339505e-02, -1.959855919122887e-02, 0.000000000000000e+00, -1.959113579476071e-02, -3.413779494321380e-02, 0.000000000000000e+00, -3.006723989751901e-02, -3.351994489477244e-02, 0.000000000000000e+00, -2.935664658213232e-02, -2.086636116166891e-02, 0.000000000000000e+00, -2.542196490509242e-02, -2.086636116166891e-02, 0.000000000000000e+00, -2.542196490509243e-02, -1.346908084904450e+00, 0.000000000000000e+00, -1.399078581709763e+00, -7.349188799206673e-01, 0.000000000000000e+00, -7.284415516901531e-01, -1.313327689046081e+00, 0.000000000000000e+00, -1.408527955331363e+00, -2.386165636245898e-04, 0.000000000000000e+00, -2.390636183511992e-04, -1.753540670011679e+00, 0.000000000000000e+00, -2.215387201153627e+00, -1.753540670011679e+00, 0.000000000000000e+00, -2.215387201153627e+00, -6.211996106354490e+00, 0.000000000000000e+00, -5.375629006051510e+00, -2.655158534021785e+00, 0.000000000000000e+00, -2.680012912627096e+00, 1.303716618994135e+02, 0.000000000000000e+00, 4.598975825668613e+02, 5.150222846371514e-01, 0.000000000000000e+00, 5.408772966579691e-01, -8.786864222308376e+00, 0.000000000000000e+00, 4.353564750718184e+02, -8.786864222308447e+00, 0.000000000000000e+00, 4.353564750718166e+02, -2.785548970512239e-02, 0.000000000000000e+00, -2.744268327178212e-02, -2.765792801386941e-02, 0.000000000000000e+00, -2.725519364498358e-02, -2.772688232452986e-02, 0.000000000000000e+00, -2.732111291744331e-02, -2.778571301013326e-02, 0.000000000000000e+00, -2.737605799879892e-02, -2.775643742383459e-02, 0.000000000000000e+00, -2.734864794689777e-02, -2.775643742383459e-02, 0.000000000000000e+00, -2.734864794689777e-02, -3.134185478786244e-02, 0.000000000000000e+00, -3.093303698723008e-02, -4.209073803899764e-02, 0.000000000000000e+00, -4.153734825312095e-02, -3.897623772124558e-02, 0.000000000000000e+00, -3.843755189214635e-02, -3.593954677666933e-02, 0.000000000000000e+00, -3.547608750210515e-02, -3.752741796655402e-02, 0.000000000000000e+00, -3.702323758711366e-02, -3.752741796655402e-02, 0.000000000000000e+00, -3.702323758711366e-02, -1.617860268314531e-02, 0.000000000000000e+00, -1.610931039360258e-02, -4.394341362683721e-01, 0.000000000000000e+00, -4.349991999703968e-01, -3.043368149555557e-01, 0.000000000000000e+00, -2.996863347224122e-01, -1.614353835866905e-01, 0.000000000000000e+00, -1.585303826237456e-01, -2.271238103460645e-01, 0.000000000000000e+00, -2.284265497555956e-01, -2.271238103460647e-01, 0.000000000000000e+00, -2.284265497555956e-01, -5.829393039942511e-02, 0.000000000000000e+00, -5.716244024466225e-02, 2.500372431474764e+01, 0.000000000000000e+00, 2.432344806282664e+01, 6.547436540552838e+00, 0.000000000000000e+00, 5.427368498490488e+00, -2.100475943631132e-01, 0.000000000000000e+00, -2.000124083498238e-01, -1.599069018451346e+00, 0.000000000000000e+00, -2.438729667966296e+00, -1.599069018451350e+00, 0.000000000000000e+00, -2.438729667966298e+00, 8.751556667447301e+02, 0.000000000000000e+00, 9.054504135249913e+02, -1.916176301045395e+01, 0.000000000000000e+00, -3.394216130506152e+01, -1.182634351256018e+01, 0.000000000000000e+00, -1.258947125418004e+01, -1.673992913542404e+00, 0.000000000000000e+00, -1.716256170122421e+00, 8.208541750926754e+01, 0.000000000000000e+00, 2.035753615469661e+02, 8.208541750926700e+01, 0.000000000000000e+00, 2.035753615469658e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
