
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_fd_lb94_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_fd_lb94", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-3.150644899443898e+01, -3.150622182784631e+01, -3.150574440335653e+01, -3.150911326758533e+01, -3.150727230289003e+01, -3.150727230289003e+01, -5.775411082018371e+00, -5.774958098049516e+00, -5.764630665211082e+00, -5.783686670684247e+00, -5.775007184162941e+00, -5.775007184162941e+00, -1.399953330280513e+00, -1.406786440611753e+00, -1.596531306925236e+00, -1.598045712045227e+00, -1.588373960426683e+00, -1.588373960426683e+00, -8.297763948284117e-01, -8.054217433523759e-01, -1.545528329931602e+00, -1.060960650222824e+00, -9.332836358236059e-01, -9.332836358236066e-01, -3.084755523810017e+00, -2.987094394165749e+00, -2.029486983341979e+00, -3.684839751480061e+00, -3.218423002343003e+00, -3.218423002343002e+00, -6.960118809590170e+00, -6.945686856031115e+00, -6.959533475152114e+00, -6.946791603862529e+00, -6.952759193993518e+00, -6.952759193993518e+00, -4.953329299111084e+00, -4.926982868691329e+00, -5.070488025168177e+00, -5.046480452018616e+00, -4.882718507940880e+00, -4.882718507940880e+00, -9.201235952891623e-01, -7.126482427077764e-01, -8.952751766555959e-01, -6.682634044650406e-01, -8.980628369370284e-01, -8.980628369370284e-01, -1.395455948156049e+00, -1.147185547601398e+00, -1.415687876481390e+00, -2.126454386939580e+00, -1.122020399320045e+00, -1.122020399320045e+00, -3.608102113050558e+00, -3.521469641606910e+00, -2.116512242170634e+00, -1.544257724500530e+00, -2.565963370548773e+00, -2.565963370548776e+00, -5.868111990623562e-01, -6.502914900507878e-01, -6.283666729893796e-01, -6.099014210474784e-01, -6.191699665214001e-01, -6.191699665214001e-01, -5.507976679452888e-01, -1.012868767631513e+00, -8.775642225293441e-01, -7.437014589078774e-01, -8.098371534447606e-01, -8.098371534447606e-01, -7.589038463266887e-01, -1.107052354412052e+00, -9.990580428491794e-01, -7.727916900899467e-01, -8.747234668283040e-01, -8.747234668283035e-01, -9.447205956261361e-01, -2.135048984944689e+00, -1.867619777849465e+00, -6.334750446902981e-01, -1.281964342209016e+00, -1.281964342209016e+00, -2.992674184123819e+00, -2.947650791751208e+00, -3.103912678350025e+00, -1.329533440791161e+00, -2.432751373102977e+00, -2.432751373102977e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_fd_lb94_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_fd_lb94", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.370470683560301e+01, -1.370504957228523e+01, -1.370609658882594e+01, -1.370100719595000e+01, -1.370374171408260e+01, -1.370374171408260e+01, -1.621671946942132e+00, -1.622105067364424e+00, -1.632158270641293e+00, -1.614988354415568e+00, -1.622230343998747e+00, -1.622230343998747e+00, -5.932778272953420e-02, -5.210764547360903e-02, 1.385959235490082e-01, 1.301624960317201e-01, 1.243126799535457e-01, 1.243126799535457e-01, 3.379864444729667e-01, 3.174720453790720e-01, -1.440940518569661e-01, 5.370953640023055e-01, 4.393905699648770e-01, 4.393905699648771e-01, 1.153696611339908e+00, 1.129619081659269e+00, 1.006430456799261e+00, 1.253257600010828e+00, 1.147456839292667e+00, 1.147456839292665e+00, -4.051205989310659e+00, -4.067816133303467e+00, -4.051898144642796e+00, -4.066562592992572e+00, -4.059663926526424e+00, -4.059663926526424e+00, 5.479670958774767e-01, 5.015313063096810e-01, 6.604723956307965e-01, 6.192163025073486e-01, 4.679701932987514e-01, 4.679701932987514e-01, -3.242654212070397e-01, -6.432086864377679e-01, -2.590513547401296e-01, -5.287251464890788e-01, -3.645672562838523e-01, -3.645672562838523e-01, 7.546841826856640e-01, 5.490864128135666e-01, 7.661219156125343e-01, -1.959300723541526e+00, 5.930288300889397e-01, 5.930288300889397e-01, 1.190438888082946e+00, 1.201187747559347e+00, 7.447878613503346e-01, 8.211442420360362e-01, 9.022021259752676e-01, 9.022021259752673e-01, -6.790838735174470e-01, -5.972536834321258e-01, -6.248229931716540e-01, -6.485589464123380e-01, -6.365776629133296e-01, -6.365776629133296e-01, -6.857138642978465e-01, -5.625506633587053e-02, -2.209207726821178e-01, -3.954181714579608e-01, -3.067481731656709e-01, -3.067481731656709e-01, -6.612592044883248e-01, 4.668808769193790e-01, 3.280288715816251e-01, 9.227299764822115e-03, 1.715435541701926e-01, 1.715435541701919e-01, -4.130689309702551e-02, 1.047439643431298e+00, 9.605975197520207e-01, -8.693623199773232e-02, 6.935155703427824e-01, 6.935155703427822e-01, 1.176653778266263e+00, 8.726186750900253e-01, 9.998007860641083e-01, 7.179186587876006e-01, 8.526645763670707e-01, 8.526645763670715e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_fd_lb94_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_fd_lb94", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-7.166096253802578e-08, -7.166045563308646e-08, -7.165748620027718e-08, -7.166504298344864e-08, -7.166118497476852e-08, -7.166118497476852e-08, -9.728694656267984e-05, -9.728916336108846e-05, -9.733095416522299e-05, -9.718455418332295e-05, -9.728022397503115e-05, -9.728022397503115e-05, -6.446144697392900e-02, -6.460343449075426e-02, -6.800760623295717e-02, -6.597148640460945e-02, -6.654022929733697e-02, -6.654022929733697e-02, -1.071104291781914e+01, -1.025398718734585e+01, -3.558530984806873e-02, -2.647841174599824e+01, -1.828556075939479e+01, -1.828556075939480e+01, -7.782419386195347e+05, -6.660309754417604e+05, -2.226023420743810e+03, -4.505011666496777e+06, -2.257986306099777e+06, -2.257986306099779e+06, -2.115171181422920e-05, -2.115679884677463e-05, -2.115178855367331e-05, -2.115628056594873e-05, -2.115436722258808e-05, -2.115436722258808e-05, -8.287393301303107e-04, -8.088125161881026e-04, -8.377468194382958e-04, -8.198160122708008e-04, -8.134805739685712e-04, -8.134805739685712e-04, -1.227986332776085e-01, -1.023265570765835e-01, -1.642315841344074e-01, -1.618647623994134e-01, -1.170633035302535e-01, -1.170633035302535e-01, -8.810237228078839e+01, -9.436201274820910e+00, -1.157009865389960e+02, -1.249712107817915e-03, -5.421942007551417e+01, -5.421942007551417e+01, -1.095530776794625e+07, -5.002314813292893e+06, -1.696470312222339e+07, -4.580157346795380e+02, -8.023536322282917e+06, -8.023536322282912e+06, -1.492240079290794e-01, -1.436126294741464e-01, -1.452160346253029e-01, -1.468154013405931e-01, -1.459815556046392e-01, -1.459815556046392e-01, -1.705959295790382e-01, -2.231720957520753e-01, -1.993948362809937e-01, -1.821246495809140e-01, -1.903603485879714e-01, -1.903603485879714e-01, -8.404341090474229e-02, -4.097083574549670e+00, -2.187343877552796e+00, -8.728064912075020e-01, -1.386371110743958e+00, -1.386371110743958e+00, -3.091572658979478e-01, -2.532259783444338e+03, -9.076075093015361e+02, -1.073410152601717e+00, -2.100517751267928e+02, -2.100517751267928e+02, -2.440858369933186e+05, -4.724014220359670e+08, -3.802295337306380e+07, -2.588823313994552e+02, -1.078370164970745e+07, -1.078370164970749e+07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
