
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_htbs_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_htbs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.084432405240221e+01, -2.084435216785945e+01, -2.084454736718439e+01, -2.084408557100838e+01, -2.084433829633577e+01, -2.084433829633577e+01, -3.445084566005296e+00, -3.445062746922737e+00, -3.444605028653278e+00, -3.446124125497986e+00, -3.445088019486729e+00, -3.445088019486729e+00, -6.850900227911804e-01, -6.849718511315784e-01, -6.838845186133068e-01, -6.882502800483823e-01, -6.850439642413272e-01, -6.850439642413272e-01, -2.129690003372825e-01, -2.130418199412097e-01, -8.028688670656637e-01, -1.963113412187770e-01, -2.129395253629481e-01, -2.129395253629481e-01, -1.705040511768579e-02, -1.785950602918197e-02, -7.259114199675575e-02, -8.179636081577773e-03, -1.767339198969752e-02, -1.767339198969752e-02, -5.018834165949340e+00, -5.018427844576776e+00, -5.018798522618426e+00, -5.018482493708659e+00, -5.018617487997162e+00, -5.018617487997162e+00, -2.060051067757220e+00, -2.070280304884536e+00, -2.060282774597637e+00, -2.068200753886116e+00, -2.066832753803175e+00, -2.066832753803175e+00, -5.703391293353154e-01, -5.951231120820726e-01, -5.429269349186554e-01, -5.469611515540697e-01, -5.886119359765021e-01, -5.886119359765021e-01, -1.593119594570127e-01, -2.479991311089420e-01, -1.566847651466367e-01, -1.810381704537149e+00, -1.764327534037492e-01, -1.764327534037492e-01, -7.890788560303988e-03, -9.017882246212330e-03, -6.758948629840969e-03, -1.011439911198508e-01, -8.216688940537569e-03, -8.216688940537569e-03, -5.585999008291365e-01, -5.612065009664390e-01, -5.603090265069128e-01, -5.595849408874064e-01, -5.599495638384744e-01, -5.599495638384744e-01, -5.397471788544465e-01, -5.092991472773278e-01, -5.193318192874454e-01, -5.276243456410598e-01, -5.233731802538538e-01, -5.233731802538538e-01, -6.249131451430242e-01, -2.808170103707238e-01, -3.065960583240123e-01, -3.600128664302863e-01, -3.298799668762487e-01, -3.298799668762486e-01, -4.615941889128914e-01, -6.723224553521924e-02, -9.101341629461694e-02, -3.326028892785252e-01, -1.305788602971569e-01, -1.305788602971569e-01, -1.998294029699953e-02, -2.468940298752360e-03, -4.690087237165435e-03, -1.245217160648807e-01, -6.983098223408890e-03, -6.983098223408880e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_htbs_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_htbs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.547216566222245e+01, -2.547224036608649e+01, -2.547260055594943e+01, -2.547137673913818e+01, -2.547220483346184e+01, -2.547220483346184e+01, -4.122202366127530e+00, -4.122222752207465e+00, -4.122953397609200e+00, -4.122568946118648e+00, -4.122230411191389e+00, -4.122230411191389e+00, -7.797603640364290e-01, -7.786018015356659e-01, -7.420783248825916e-01, -7.491709304827840e-01, -7.793407266372553e-01, -7.793407266372553e-01, -1.688937959226044e-01, -1.766657625668042e-01, -9.427712198072677e-01, -1.505173114200514e-01, -1.712935293145574e-01, -1.712935293145574e-01, -2.273387349024772e-02, -2.381267470557596e-02, -9.678716677637587e-02, -1.090618144210370e-02, -2.356452265293002e-02, -2.356452265293002e-02, -6.245719619844859e+00, -6.247787686194771e+00, -6.245932275617622e+00, -6.247540256545287e+00, -6.246777634515604e+00, -6.246777634515604e+00, -2.241359981967573e+00, -2.262235304104665e+00, -2.227332927352555e+00, -2.243991000720419e+00, -2.272500612123396e+00, -2.272500612123396e+00, -6.899630379860142e-01, -7.679284170614409e-01, -6.538986146312691e-01, -6.950260298665984e-01, -7.183760291208821e-01, -7.183760291208821e-01, -1.852153313225433e-01, -1.464999858621697e-01, -1.789339432891200e-01, -2.335543086010002e+00, -1.740611728795867e-01, -1.740611728795867e-01, -1.052105141373865e-02, -1.202384299494977e-02, -9.011931506454626e-03, -1.339628779589159e-01, -1.095558525405009e-02, -1.095558525405009e-02, -7.372443022948931e-01, -7.267805285700550e-01, -7.303856129253017e-01, -7.332807025312319e-01, -7.318204579138704e-01, -7.318204579138704e-01, -7.147515571555378e-01, -5.918526401789759e-01, -6.229995090677055e-01, -6.544175016173045e-01, -6.379868521868171e-01, -6.379868521868172e-01, -8.042032613052958e-01, -1.952686056341770e-01, -2.828937189367471e-01, -4.105696184847840e-01, -3.516995927611856e-01, -3.516995927611855e-01, -5.328595984725744e-01, -8.964297168730027e-02, -1.212663449059073e-01, -3.912347858141756e-01, -1.600864350974585e-01, -1.600864350974585e-01, -2.664392039599937e-02, -3.291920398336480e-03, -6.253449649553913e-03, -1.522693117740123e-01, -9.310797631211854e-03, -9.310797631211841e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_htbs_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_htbs", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-5.874953685785904e-09, -5.874939940586005e-09, -5.874774004952227e-09, -5.875001171587727e-09, -5.874947311533754e-09, -5.874947311533754e-09, -7.542114815837844e-06, -7.542483620276825e-06, -7.551387398226937e-06, -7.529671753082409e-06, -7.542175981543061e-06, -7.542175981543061e-06, -4.547212774892454e-03, -4.551589357816201e-03, -4.827006934086228e-03, -4.680909949316882e-03, -4.548830384343843e-03, -4.548830384343843e-03, -8.957681847947020e-01, -8.357463378465009e-01, -2.467097585402021e-03, -1.672263750969130e+00, -8.773447776457237e-01, -8.773447776457237e-01, -2.520819961088523e-71, -1.461784535641299e-64, -4.074550978066784e-04, 0.000000000000000e+00, -1.124525181363834e-64, -1.124525181363834e-64, -1.806949759620607e-06, -1.808812311060488e-06, -1.807128734899555e-06, -1.808577142278391e-06, -1.807920993427914e-06, -1.807920993427914e-06, -5.836288621831645e-05, -5.681778111477371e-05, -5.897602763619409e-05, -5.771700635545339e-05, -5.665842252771878e-05, -5.665842252771878e-05, -1.027326345099575e-02, -9.657644232334481e-03, -1.239647045604918e-02, -1.324478192302999e-02, -9.216458373240158e-03, -9.216458373240158e-03, -8.697092622937791e-01, -7.776635896733985e-01, -1.080152039497165e+00, -1.127428063857107e-04, -1.478170620317812e+00, -1.478170620317812e+00, 0.000000000000000e+00, -4.886404887578233e-308, 0.000000000000000e+00, -1.390035698470896e-01, -4.419589818754441e-305, -4.419589818752994e-305, -1.279564655988804e-02, -1.227104903659173e-02, -1.245369972022520e-02, -1.259923967307382e-02, -1.252606745731095e-02, -1.252606745731095e-02, -1.473520358268570e-02, -1.502452672256858e-02, -1.468416865495435e-02, -1.470759758102983e-02, -1.471008018935596e-02, -1.471008018935596e-02, -7.914804058035293e-03, -3.566903163556360e-01, -1.629565437635706e-01, -5.961611684899376e-02, -9.203503377182297e-02, -9.203503377182294e-02, -2.213887367918563e-02, -1.016646672768582e-05, -1.625025502347554e-02, -8.400172811182238e-02, -1.053061602430435e+00, -1.053061602430438e+00, -2.121780398340740e-59, 0.000000000000000e+00, 0.000000000000000e+00, -1.321637319649964e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
