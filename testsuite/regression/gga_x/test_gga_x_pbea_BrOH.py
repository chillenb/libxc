
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_pbea_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbea", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.091115339187780e+01, -2.091117875625918e+01, -2.091136601503598e+01, -2.091094918662919e+01, -2.091116614876696e+01, -2.091116614876696e+01, -3.463576020471651e+00, -3.463549447836157e+00, -3.462962068036324e+00, -3.464708776050554e+00, -3.463577107767778e+00, -3.463577107767778e+00, -6.931890871675036e-01, -6.931655200903565e-01, -6.940877305649442e-01, -6.984569312622448e-01, -6.931771410755315e-01, -6.931771410755315e-01, -2.115187737039811e-01, -2.126854208658750e-01, -8.091460850827115e-01, -1.714041110150732e-01, -2.118498656850439e-01, -2.118498656850439e-01, -1.668173889866061e-02, -1.745392973248147e-02, -6.685920123264975e-02, -8.104398356855686e-03, -1.727244019161127e-02, -1.727244019161127e-02, -5.028233020037100e+00, -5.027699770333438e+00, -5.028184661094881e+00, -5.027769925640415e+00, -5.027950714300355e+00, -5.027950714300355e+00, -2.090630228230918e+00, -2.100715612752892e+00, -2.091203034977128e+00, -2.099062084564536e+00, -2.096693930674811e+00, -2.096693930674811e+00, -5.727078825140619e-01, -5.953444673852698e-01, -5.454352558756841e-01, -5.474233363181024e-01, -5.905645791606531e-01, -5.905645791606531e-01, -1.361484309917210e-01, -2.281413082945726e-01, -1.337593101878635e-01, -1.811064704836902e+00, -1.509760831532834e-01, -1.509760831532834e-01, -7.819790086612009e-03, -8.924598907663258e-03, -6.690859328078357e-03, -8.980794934824043e-02, -8.131297091192176e-03, -8.131297091192176e-03, -5.586186673842308e-01, -5.613698737756411e-01, -5.604050604518115e-01, -5.596405571628518e-01, -5.600240828216105e-01, -5.600240828216105e-01, -5.397552773723250e-01, -5.140098955580221e-01, -5.219629986778054e-01, -5.287240276169387e-01, -5.251653667672692e-01, -5.251653667672692e-01, -6.251877198191100e-01, -2.737717131612809e-01, -3.092105382934663e-01, -3.641912131805666e-01, -3.348898042570580e-01, -3.348898042570579e-01, -4.662717407832365e-01, -6.255477464146883e-02, -8.225675110626740e-02, -3.351245029269911e-01, -1.122628012621532e-01, -1.122628012621532e-01, -1.950971876311653e-02, -2.461298104678238e-03, -4.662869994507098e-03, -1.070109694015092e-01, -6.915483964695050e-03, -6.915483964695039e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_pbea_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbea", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.526058097740778e+01, -2.526066304837314e+01, -2.526104432996017e+01, -2.525970010463343e+01, -2.526062413223375e+01, -2.526062413223375e+01, -4.069110693864224e+00, -4.069141327292808e+00, -4.070151788394237e+00, -4.069274367072775e+00, -4.069143783144626e+00, -4.069143783144626e+00, -7.669155397298176e-01, -7.659626342755517e-01, -7.435505354972610e-01, -7.493833888251454e-01, -7.665680605729234e-01, -7.665680605729234e-01, -2.155501493913295e-01, -2.172560048536847e-01, -9.271267872229942e-01, -1.779960183668167e-01, -2.160368001570183e-01, -2.160368001570183e-01, -2.173261999722958e-02, -2.271134312187499e-02, -8.148230343510643e-02, -1.070159472879811e-02, -2.247574531194397e-02, -2.247574531194397e-02, -6.213940075852000e+00, -6.216395216843988e+00, -6.214191464030944e+00, -6.216100447956437e+00, -6.215198115460137e+00, -6.215198115460137e+00, -2.242548254629400e+00, -2.258329999490053e+00, -2.236347476981988e+00, -2.248552068875127e+00, -2.261643916311122e+00, -2.261643916311122e+00, -6.827799520064382e-01, -7.671013376520744e-01, -6.464486058700804e-01, -6.933641206426653e-01, -7.122257141111457e-01, -7.122257141111457e-01, -1.501200671795925e-01, -2.326338226973232e-01, -1.468292515071730e-01, -2.332992426136128e+00, -1.606116057917105e-01, -1.606116057917105e-01, -1.032798974236392e-02, -1.177020539339228e-02, -8.826793173003578e-03, -1.050748531907441e-01, -1.072340539446754e-02, -1.072340539446754e-02, -7.371706903284917e-01, -7.261649878997015e-01, -7.300184821142561e-01, -7.330656990515082e-01, -7.315339799382362e-01, -7.315339799382362e-01, -7.147195812439089e-01, -5.813841976179839e-01, -6.153383577530088e-01, -6.507402427916359e-01, -6.323697127684554e-01, -6.323697127684555e-01, -8.031838453512817e-01, -2.778934422662633e-01, -3.187482031530099e-01, -4.036735414797116e-01, -3.560402727674302e-01, -3.560402727674301e-01, -5.233609843691239e-01, -7.710260179720740e-02, -9.816579340123747e-02, -3.848473651381027e-01, -1.256771670845885e-01, -1.256771670845885e-01, -2.535907978537775e-02, -3.271134379641566e-03, -6.179427685272781e-03, -1.196984168786226e-01, -9.126946259890578e-03, -9.126946259890564e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_pbea_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbea", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-6.636307030289747e-09, -6.636275774221141e-09, -6.636040909101466e-09, -6.636554634314910e-09, -6.636291344590803e-09, -6.636291344590803e-09, -8.786431413978199e-06, -8.786726246160791e-06, -8.793378359875354e-06, -8.774470030338770e-06, -8.786433336624906e-06, -8.786433336624906e-06, -5.351386327437422e-03, -5.347867745320728e-03, -5.171958274246533e-03, -5.053069216032243e-03, -5.350235072291782e-03, -5.350235072291782e-03, -5.175001193455482e-01, -5.161607822240849e-01, -2.930961830510965e-03, -7.598670971978874e-01, -5.174810723813513e-01, -5.174810723813513e-01, -2.275689660476855e+01, -2.181969665987621e+01, -3.053583575064564e+00, -3.532471098140302e+01, -2.268753858043518e+01, -2.268753858043518e+01, -1.986451426670696e-06, -1.987287335542718e-06, -1.986527217901209e-06, -1.987177354005811e-06, -1.986894187933610e-06, -1.986894187933610e-06, -6.293421264067965e-05, -6.189183170444775e-05, -6.263145154006263e-05, -6.182851821696472e-05, -6.259906616141145e-05, -6.259906616141145e-05, -1.178044848614285e-02, -1.008151578992126e-02, -1.430797525712724e-02, -1.412562350793512e-02, -1.043078007890730e-02, -1.043078007890730e-02, -1.004337198733858e+00, -3.021488352078431e-01, -1.135545530677383e+00, -1.177267625348620e-04, -9.830674675489991e-01, -9.830674675489991e-01, -3.824283799822430e+01, -3.370287434274013e+01, -9.884480302428406e+01, -2.276297211123102e+00, -4.956813342203113e+01, -4.956813342203110e+01, -1.296268717605692e-02, -1.274680757081017e-02, -1.282312050656135e-02, -1.288314091276231e-02, -1.285308744732122e-02, -1.285308744732122e-02, -1.486353548855505e-02, -1.791002236749606e-02, -1.704601089627870e-02, -1.624887801418974e-02, -1.667818737625393e-02, -1.667818737625392e-02, -8.292758959472790e-03, -1.734841485359399e-01, -1.210612482634495e-01, -7.031838858854890e-02, -9.447749522274551e-02, -9.447749522274553e-02, -2.635637721410681e-02, -2.866189137926458e+00, -2.203645226961151e+00, -9.968028497747455e-02, -1.803332214634725e+00, -1.803332214634726e+00, -1.573601350336706e+01, -1.763493113819797e+02, -8.502820978875424e+01, -2.207544645366227e+00, -7.726322832364306e+01, -7.726322832364305e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
