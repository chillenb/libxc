
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_hjs_pbe_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_hjs_pbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.088402320244190e+01, -2.088405061555624e+01, -2.088424025221320e+01, -2.088383100621956e+01, -2.088403580466032e+01, -2.088403580466032e+01, -3.411559462984159e+00, -3.411521466513507e+00, -3.410728359371693e+00, -3.412767126849740e+00, -3.411597639249947e+00, -3.411597639249947e+00, -6.357373432401818e-01, -6.357529441798139e-01, -6.380433182519455e-01, -6.427963664516613e-01, -6.409464938561521e-01, -6.409464938561521e-01, -1.554844670745462e-01, -1.565511710059373e-01, -7.432702102254394e-01, -1.228667151766673e-01, -1.354010009838180e-01, -1.354010009838179e-01, -2.953285763267724e-05, -3.473084991985375e-05, -1.261711970403100e-02, -5.472643136458950e-06, -1.094849034538976e-05, -1.094849034538974e-05, -4.972945020460000e+00, -4.972326852704940e+00, -4.972927331924611e+00, -4.972381444938664e+00, -4.972625695483835e+00, -4.972625695483835e+00, -2.052459636232461e+00, -2.062265393079129e+00, -2.053892407375430e+00, -2.062553092056563e+00, -2.057174189088799e+00, -2.057174189088799e+00, -5.194588846741262e-01, -5.422716132923378e-01, -4.804027479734065e-01, -4.768466873098740e-01, -5.252465034605169e-01, -5.252465034605169e-01, -8.118952434111816e-02, -1.710462614255042e-01, -7.256847999154481e-02, -1.751835541926432e+00, -9.664857374808374e-02, -9.664857374808374e-02, -2.503783985523148e-06, -5.110259968176217e-06, -2.276187553553980e-06, -3.737138425983611e-02, -3.988257317687140e-06, -3.988257317687130e-06, -4.908752512988438e-01, -4.935741385011482e-01, -4.926240033679993e-01, -4.918333335731631e-01, -4.922279013756450e-01, -4.922279013756450e-01, -4.743386197291293e-01, -4.491619153904467e-01, -4.558624522515057e-01, -4.623520236577841e-01, -4.588141419823932e-01, -4.588141419823932e-01, -5.724108746357934e-01, -2.152105797187649e-01, -2.497566151548598e-01, -3.048741759369977e-01, -2.749386262130293e-01, -2.749386262130293e-01, -4.098813199343367e-01, -1.122159486112094e-02, -2.419052696550002e-02, -2.816108284789404e-01, -5.591912558171568e-02, -5.591912558171571e-02, -9.089370299715812e-05, -9.701778836822841e-08, -8.979362650836273e-07, -5.063549277764168e-02, -3.156278158077380e-06, -3.156278158077044e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_hjs_pbe_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_hjs_pbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.508063714499205e+01, -2.508073680635270e+01, -2.508115412864305e+01, -2.507967190955097e+01, -2.508045221749696e+01, -2.508045221749696e+01, -3.975254874773364e+00, -3.975300968777882e+00, -3.976466445023195e+00, -3.975207971395754e+00, -3.975407459767652e+00, -3.975407459767652e+00, -6.987769594776906e-01, -6.974989501193031e-01, -6.682522966636555e-01, -6.746288302712200e-01, -6.735437520249716e-01, -6.735437520249716e-01, -1.440021905868774e-01, -1.450906805562190e-01, -8.296238758289798e-01, -1.219839343500448e-01, -1.276851875650835e-01, -1.276851875650835e-01, -6.056213892939609e-05, -7.151986521313938e-05, -2.284944877906401e-02, -1.098800132225982e-05, -2.208833422891653e-05, -2.208833422891649e-05, -6.137802843541500e+00, -6.140568654059531e+00, -6.137926706239541e+00, -6.140368401595924e+00, -6.139206419812606e+00, -6.139206419812606e+00, -2.123568883806306e+00, -2.140764454072051e+00, -2.109447478517664e+00, -2.124357221243375e+00, -2.140231025984177e+00, -2.140231025984177e+00, -6.256794885486583e-01, -7.146479629303615e-01, -5.708582366758078e-01, -6.219907292165343e-01, -6.401016284334248e-01, -6.401016284334248e-01, -9.777290084316216e-02, -1.628072567076453e-01, -9.008716211529302e-02, -2.272967550926837e+00, -1.037117346880172e-01, -1.037117346880172e-01, -5.015265315055762e-06, -1.025728193103109e-05, -4.558592056290465e-06, -5.451207916693211e-02, -7.997812083272408e-06, -7.997812083272388e-06, -6.648813032904006e-01, -6.532216679442590e-01, -6.572980192854185e-01, -6.606901842302796e-01, -6.589913387542291e-01, -6.589913387542291e-01, -6.474699022152259e-01, -4.982507096451886e-01, -5.370563186390419e-01, -5.796035829994248e-01, -5.576061727162780e-01, -5.576061727162780e-01, -7.506482659722918e-01, -2.002301836445714e-01, -2.361769888945442e-01, -3.322282770599858e-01, -2.765444623503461e-01, -2.765444623503465e-01, -4.534890841138198e-01, -2.073215629097805e-02, -3.933008225014240e-02, -3.251066890400605e-01, -7.163668650691329e-02, -7.163668650691336e-02, -1.936911927668168e-04, -1.940440026506324e-07, -1.796697303839082e-06, -6.699957197140026e-02, -6.325302360022977e-06, -6.325302360007207e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_hjs_pbe_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_hjs_pbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-7.052224416458908e-09, -7.052175610196692e-09, -7.051886447875743e-09, -7.052614073044364e-09, -7.052243070895319e-09, -7.052243070895319e-09, -9.508946915709885e-06, -9.509237333218696e-06, -9.515017623553363e-06, -9.497750547620530e-06, -9.508378314008463e-06, -9.508378314008463e-06, -6.036321336486879e-03, -6.041555383788536e-03, -6.085988404136777e-03, -5.919419119298504e-03, -5.979291327417971e-03, -5.979291327417971e-03, -6.091501279650116e-01, -6.078724076914058e-01, -3.375885549269291e-03, -8.154071651947370e-01, -7.750058476315280e-01, -7.750058476315312e-01, -2.579642805832446e-03, -3.582169751438389e-03, -8.212968311516354e-01, -1.149889609057083e-04, -5.173571221291933e-04, -5.173571221280907e-04, -2.077000395211187e-06, -2.077216336658171e-06, -2.076996395718746e-06, -2.077187261667954e-06, -2.077117776993041e-06, -2.077117776993041e-06, -7.342631234094335e-05, -7.201599443541151e-05, -7.334660612812420e-05, -7.211728148331436e-05, -7.266338433213684e-05, -7.266338433213684e-05, -1.182239209357758e-02, -9.289087414951163e-03, -1.574650339804960e-02, -1.483802337779324e-02, -1.126563944603540e-02, -1.126563944603540e-02, -9.204090807238382e-01, -3.829971352724095e-01, -1.004638596956311e+00, -1.187585029562820e-04, -1.106633350274792e+00, -1.106633350274792e+00, -3.626771009402070e-05, -1.193420581390411e-04, -1.707712948701449e-04, -1.335904631884598e+00, -2.211528234944884e-04, -2.211528234946307e-04, -1.264309253701873e-02, -1.289016495752581e-02, -1.282023626023759e-02, -1.275044708632758e-02, -1.278697617944319e-02, -1.278697617944319e-02, -1.402664144249841e-02, -2.081689431382195e-02, -1.904793743214232e-02, -1.725806801577759e-02, -1.820534925080270e-02, -1.820534925080270e-02, -7.707227628920968e-03, -2.240520949111331e-01, -1.535753351267857e-01, -7.887994942704114e-02, -1.137854704049101e-01, -1.137854704049099e-01, -2.868122572018799e-02, -7.097737744407888e-01, -9.587561340085931e-01, -9.873483876156953e-02, -1.580345653699939e+00, -1.580345653699945e+00, -1.241508481266923e-02, -6.560719798718050e-07, -1.228801767656137e-05, -1.577863999030062e+00, -1.820761354606231e-04, -1.820761354704309e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
