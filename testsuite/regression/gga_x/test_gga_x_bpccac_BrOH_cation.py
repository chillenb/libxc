
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_bpccac_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_bpccac", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.097384751697122e+01, -2.097387344823008e+01, -2.097405902230507e+01, -2.097367177592697e+01, -2.097386469034432e+01, -2.097386469034432e+01, -3.481911158800044e+00, -3.481870020708691e+00, -3.481004618306617e+00, -3.483170898025024e+00, -3.481946045815969e+00, -3.481946045815969e+00, -7.015839113789188e-01, -7.016922883357884e-01, -7.066534294341507e-01, -7.112843379796340e-01, -7.121097983434734e-01, -7.121097983434734e-01, -2.251321837540939e-01, -2.255815111812861e-01, -8.094860877895285e-01, -1.921135678041289e-01, -2.198673942355508e-01, -2.198673942355507e-01, -1.589819831667549e-04, -1.919177354463790e-04, -2.476936791910087e-02, -2.802624309727090e-05, -8.978578620429719e-05, -8.978578620429738e-05, -5.038682956869685e+00, -5.038009120323355e+00, -5.038662971761694e+00, -5.038067914372651e+00, -5.038335208870341e+00, -5.038335208870341e+00, -2.137034663262630e+00, -2.146152305556972e+00, -2.140368729547610e+00, -2.148381233666941e+00, -2.140521458638232e+00, -2.140521458638232e+00, -5.818072868499546e-01, -6.029157570713775e-01, -5.432404366450477e-01, -5.377656972638720e-01, -5.880378500965933e-01, -5.880378500965933e-01, -1.389860242849463e-01, -2.468791550917364e-01, -1.283340495567170e-01, -1.813866024868119e+00, -1.585966153689748e-01, -1.585966153689748e-01, -1.467378813673621e-05, -2.840321949920441e-05, -3.247612959880412e-05, -7.625483359595579e-02, -4.589717615657966e-05, -4.589717615658013e-05, -5.507775254685814e-01, -5.539920453218867e-01, -5.528708026600633e-01, -5.519307927312023e-01, -5.524009861399628e-01, -5.524009861399628e-01, -5.339892328129956e-01, -5.134702766183690e-01, -5.184887215064344e-01, -5.236888722748698e-01, -5.207525764090870e-01, -5.207525764090870e-01, -6.332335295300267e-01, -2.892290266469712e-01, -3.196668977741098e-01, -3.685490123734819e-01, -3.411951373254085e-01, -3.411951373254085e-01, -4.740155523458807e-01, -2.101855554028146e-02, -4.642727046052199e-02, -3.436646568108472e-01, -1.092697154896161e-01, -1.092697154896162e-01, -4.081239004209565e-04, -1.183977266794481e-06, -7.697108735696050e-06, -1.012744670968675e-01, -3.814186068740621e-05, -3.814186068740594e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_bpccac_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_bpccac", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.503963143183882e+01, -2.503960244147032e+01, -2.503975311130042e+01, -2.503969081368731e+01, -2.504010381219900e+01, -2.504020414315173e+01, -2.503873064099126e+01, -2.503845360469573e+01, -2.503970595197211e+01, -2.503912496941736e+01, -2.503970595197211e+01, -2.503912496941736e+01, -4.006962513581461e+00, -4.007214660891384e+00, -4.007013461388380e+00, -4.007277384496595e+00, -4.008368576249261e+00, -4.008747371186182e+00, -4.006666745455307e+00, -4.007060458681256e+00, -4.006171562533480e+00, -4.008334480512033e+00, -4.006171562533480e+00, -4.008334480512033e+00, -7.433551978036871e-01, -7.493142252208180e-01, -7.411857130879256e-01, -7.484718406217005e-01, -7.133516542763485e-01, -7.042091275277380e-01, -7.139076991512410e-01, -7.168821957524401e-01, -7.596899642872226e-01, -6.714350469165864e-01, -7.596899642872226e-01, -6.714350469165864e-01, -1.824819358280930e-01, -1.873402403778227e-01, -1.833477374713051e-01, -1.895472578350872e-01, -8.557362134184153e-01, -8.986321511458579e-01, -2.579526903591526e-01, -2.570875300680521e-01, -1.898511983030890e-01, -1.700602247547489e-01, -1.898511983030889e-01, -1.700602247547487e-01, -5.864679511039744e-04, -7.035504519353079e-04, -6.961346401893917e-04, -8.585631810498546e-04, -8.103729491114491e-02, -9.147767621890200e-02, -1.174513902215741e-04, -1.099997416978995e-04, -4.122388445641517e-04, -1.182484841033551e-04, -4.122388445641534e-04, -1.182484841033589e-04, -6.186727239696600e+00, -6.185169498256506e+00, -6.189749569617160e+00, -6.188089474433158e+00, -6.186893074083998e+00, -6.185268354845550e+00, -6.189486455439133e+00, -6.187921053896521e+00, -6.188277078334692e+00, -6.186636492053156e+00, -6.188277078334692e+00, -6.186636492053156e+00, -2.117056160146864e+00, -2.116939325669845e+00, -2.136345994497283e+00, -2.135676228655911e+00, -2.094596190651470e+00, -2.100937089605252e+00, -2.111122623883904e+00, -2.117655783478262e+00, -2.144913281150376e+00, -2.129129200075431e+00, -2.144913281150376e+00, -2.129129200075431e+00, -6.826610668878225e-01, -6.809577122901511e-01, -7.735856447249788e-01, -7.743505371149819e-01, -6.130273682354426e-01, -6.389427656511883e-01, -6.697043606811508e-01, -6.914837395484985e-01, -7.149862432249537e-01, -6.778163227594978e-01, -7.149862432249537e-01, -6.778163227594979e-01, -1.872531350214126e-01, -1.854914888758948e-01, -2.213510576626965e-01, -2.203682674121845e-01, -1.863892649826668e-01, -1.848700408683606e-01, -2.333869917810687e+00, -2.332886067590334e+00, -1.740104365927712e-01, -1.919362244740040e-01, -1.740104365927712e-01, -1.919362244740040e-01, -5.810806077421744e-05, -6.068501761122729e-05, -1.150866202843887e-04, -1.156474551043090e-04, -1.158817781169145e-04, -1.459937159921283e-04, -1.687104799032090e-01, -1.700507976182294e-01, -8.624023372712343e-05, -2.259582771159351e-04, -8.624023372711844e-05, -2.259582771159377e-04, -7.232619683933197e-01, -7.261985227323394e-01, -7.109101498974820e-01, -7.139308550454617e-01, -7.151927171011480e-01, -7.182119565510697e-01, -7.188097516025788e-01, -7.217512989708418e-01, -7.169968564857796e-01, -7.199760411939439e-01, -7.169968564857796e-01, -7.199760411939439e-01, -7.063461676871209e-01, -7.087008223975232e-01, -5.476410170351846e-01, -5.505616325016668e-01, -5.903017773589996e-01, -5.935895485558861e-01, -6.359798127720451e-01, -6.384463678514434e-01, -6.127792701816799e-01, -6.153119949249812e-01, -6.127792701816799e-01, -6.153119949249812e-01, -8.089723147478058e-01, -8.109564495504678e-01, -2.359067378093611e-01, -2.367814979529979e-01, -2.743931259672331e-01, -2.771185159635546e-01, -3.819063511031731e-01, -3.843486308367217e-01, -3.216915743850611e-01, -3.217451962307835e-01, -3.216915743850612e-01, -3.217451962307836e-01, -5.022946023297711e-01, -5.067128828168069e-01, -7.535292520088908e-02, -7.659834345270490e-02, -1.346559189431960e-01, -1.415989323353406e-01, -3.752009905518955e-01, -3.819815097465071e-01, -1.719843792885049e-01, -1.609265724865315e-01, -1.719843792885049e-01, -1.609265724865315e-01, -1.568704241473668e-03, -1.770312562028944e-03, -4.066265655789435e-06, -5.471703005902508e-06, -2.746588740759636e-05, -3.421309674602993e-05, -1.678293423918729e-01, -1.683764842971398e-01, -1.060565217613761e-04, -1.763062518037683e-04, -1.060565217613724e-04, -1.763062518037710e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_bpccac_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_bpccac", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.481382968705746e-08, 0.000000000000000e+00, -1.481390984005548e-08, -1.481368650021861e-08, 0.000000000000000e+00, -1.481380579053147e-08, -1.481312612588252e-08, 0.000000000000000e+00, -1.481303145757701e-08, -1.481474580140884e-08, 0.000000000000000e+00, -1.481509506628687e-08, -1.481374945341686e-08, 0.000000000000000e+00, -1.481419488521801e-08, -1.481374945341686e-08, 0.000000000000000e+00, -1.481419488521801e-08, -2.033766300392316e-05, 0.000000000000000e+00, -2.034217470491717e-05, -2.033783466698696e-05, 0.000000000000000e+00, -2.034272024816207e-05, -2.034576662085520e-05, 0.000000000000000e+00, -2.034737031553268e-05, -2.031888411077158e-05, 0.000000000000000e+00, -2.032148554348668e-05, -2.034992980562691e-05, 0.000000000000000e+00, -2.032685362139533e-05, -2.034992980562691e-05, 0.000000000000000e+00, -2.032685362139533e-05, -1.351901532356179e-02, 0.000000000000000e+00, -1.345729887670210e-02, -1.355045921109557e-02, 0.000000000000000e+00, -1.347516665696018e-02, -1.395876851748730e-02, 0.000000000000000e+00, -1.403961945192858e-02, -1.360637069338641e-02, 0.000000000000000e+00, -1.358619815848380e-02, -1.326730608888437e-02, 0.000000000000000e+00, -1.376650659966693e-02, -1.326730608888437e-02, 0.000000000000000e+00, -1.376650659966693e-02, -1.778756711095212e+00, 0.000000000000000e+00, -1.641290825787172e+00, -1.768169161511798e+00, 0.000000000000000e+00, -1.603891364165433e+00, -7.810125565175155e-03, 0.000000000000000e+00, -7.132073170470606e-03, 1.001691938234353e-01, 0.000000000000000e+00, -2.090732404599249e-02, -1.526428353844981e+00, 0.000000000000000e+00, -1.517905613565701e+00, -1.526428353844980e+00, 0.000000000000000e+00, -1.517905613565709e+00, 1.288155584042172e+02, 0.000000000000000e+00, 1.282110459473762e+02, 1.364776452671072e+02, 0.000000000000000e+00, 1.366528555230095e+02, 6.589453678752731e+01, 0.000000000000000e+00, 6.252055242220494e+01, 1.131999453994259e+02, 0.000000000000000e+00, 1.099588735559314e+02, 1.273054186685568e+02, 0.000000000000000e+00, 3.148476554155540e+02, 1.273054186685571e+02, 0.000000000000000e+00, 3.148476554155561e+02, -4.304378230497348e-06, 0.000000000000000e+00, -4.308405471559384e-06, -4.303608909107748e-06, 0.000000000000000e+00, -4.307662580939216e-06, -4.304307618824039e-06, 0.000000000000000e+00, -4.308359967153012e-06, -4.303647913826635e-06, 0.000000000000000e+00, -4.307685412913582e-06, -4.304006527612122e-06, 0.000000000000000e+00, -4.308036629405770e-06, -4.304006527612122e-06, 0.000000000000000e+00, -4.308036629405770e-06, -1.697044724917812e-04, 0.000000000000000e+00, -1.697356758673149e-04, -1.659040607932646e-04, 0.000000000000000e+00, -1.660585501032713e-04, -1.708211331278374e-04, 0.000000000000000e+00, -1.705701384734722e-04, -1.675435305124741e-04, 0.000000000000000e+00, -1.672211946207796e-04, -1.666262831230256e-04, 0.000000000000000e+00, -1.676824717693157e-04, -1.666262831230256e-04, 0.000000000000000e+00, -1.676824717693157e-04, -2.541850204561253e-02, 0.000000000000000e+00, -2.569766666506906e-02, -1.995201230641839e-02, 0.000000000000000e+00, -1.993428582570046e-02, -3.673842896662089e-02, 0.000000000000000e+00, -3.216654829343758e-02, -3.432105333557939e-02, 0.000000000000000e+00, -3.007817085501146e-02, -2.204004486849246e-02, 0.000000000000000e+00, -2.691667556528698e-02, -2.204004486849246e-02, 0.000000000000000e+00, -2.691667556528698e-02, 1.926368661589275e-01, 0.000000000000000e+00, -4.676089517281661e-02, -9.813224003481472e-01, 0.000000000000000e+00, -9.853258542500851e-01, 1.938518439824704e+00, 0.000000000000000e+00, 7.507154534179515e-01, -2.426209842947382e-04, 0.000000000000000e+00, -2.430691248247394e-04, -1.733494733111285e+00, 0.000000000000000e+00, -1.181632226672241e+00, -1.733494733111285e+00, 0.000000000000000e+00, -1.181632226672241e+00, 1.569769821674544e+02, 0.000000000000000e+00, 1.358872740963281e+02, 1.369149974170678e+02, 0.000000000000000e+00, 1.263696624496861e+02, 7.876801399421693e+02, 0.000000000000000e+00, 8.817474656433445e+02, 2.179149058377418e+01, 0.000000000000000e+00, 2.128434782652601e+01, 3.875871135130763e+02, 0.000000000000000e+00, 3.894595635663713e+02, 3.875871135130684e+02, 0.000000000000000e+00, 3.894595635663811e+02, -2.802792825416991e-02, 0.000000000000000e+00, -2.760759606254309e-02, -2.813065242641159e-02, 0.000000000000000e+00, -2.771197874571083e-02, -2.809459606447525e-02, 0.000000000000000e+00, -2.767516120579165e-02, -2.806535560383029e-02, 0.000000000000000e+00, -2.764577788492752e-02, -2.808011608907891e-02, 0.000000000000000e+00, -2.766057146776075e-02, -2.808011608907891e-02, 0.000000000000000e+00, -2.766057146776075e-02, -3.143282159697847e-02, 0.000000000000000e+00, -3.102202203389286e-02, -4.707819467489306e-02, 0.000000000000000e+00, -4.639745464232511e-02, -4.206586585525538e-02, 0.000000000000000e+00, -4.143125881414014e-02, -3.753894112384352e-02, 0.000000000000000e+00, -3.704119303937175e-02, -3.981782010686313e-02, 0.000000000000000e+00, -3.926528364898451e-02, -3.981782010686313e-02, 0.000000000000000e+00, -3.926528364898451e-02, -1.650065273323632e-02, 0.000000000000000e+00, -1.641705227260177e-02, -6.336881817864194e-01, 0.000000000000000e+00, -6.255920757572022e-01, -4.009160259223244e-01, 0.000000000000000e+00, -3.920766140794761e-01, -1.835591524833185e-01, 0.000000000000000e+00, -1.800290948027354e-01, -2.754545847931231e-01, 0.000000000000000e+00, -2.766708527220002e-01, -2.754545847931232e-01, 0.000000000000000e+00, -2.766708527220003e-01, -6.541925418775298e-02, 0.000000000000000e+00, -6.398492734473574e-02, 6.251577916310220e+01, 0.000000000000000e+00, 6.221807946693688e+01, 4.141243745789613e+01, 0.000000000000000e+00, 3.900635164325362e+01, -2.313295095384653e-01, 0.000000000000000e+00, -2.194791814309328e-01, 5.696686438121968e+00, 0.000000000000000e+00, 1.791906905209144e+00, 5.696686438121957e+00, 0.000000000000000e+00, 1.791906905209135e+00, 1.050846886561943e+02, 0.000000000000000e+00, 1.077197296293180e+02, 4.674544822735395e+02, 0.000000000000000e+00, 8.318492098665906e+02, 2.951104770799753e+02, 0.000000000000000e+00, 3.153734733760639e+02, 7.298405661268554e+00, 0.000000000000000e+00, 6.485874849362507e+00, 8.060086917945721e+02, 0.000000000000000e+00, 4.018496500751259e+02, 8.060086917945523e+02, 0.000000000000000e+00, 4.018496500751309e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
