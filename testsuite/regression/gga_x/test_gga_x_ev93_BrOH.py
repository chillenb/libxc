
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_ev93_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ev93", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.093765043432819e+01, -2.093766519274614e+01, -2.093782061573762e+01, -2.093757718676007e+01, -2.093765746856666e+01, -2.093765746856666e+01, -3.499150045294456e+00, -3.499102147854329e+00, -3.497931864725452e+00, -3.500692598877388e+00, -3.499140315637207e+00, -3.499140315637207e+00, -7.252486051252914e-01, -7.259305457959853e-01, -7.491202193705911e-01, -7.525030320271600e-01, -7.254896928513477e-01, -7.254896928513477e-01, -2.518939100153783e-01, -2.508142990982618e-01, -8.270784060287855e-01, -2.307459257086629e-01, -2.515155603154816e-01, -2.515155603154816e-01, -1.509040332492302e-02, -1.585695285888276e-02, -7.855724408838576e-02, -7.042195248365062e-03, -1.569065527891730e-02, -1.569065527891730e-02, -5.012508704910047e+00, -5.011634300127381e+00, -5.012425962769250e+00, -5.011745894443272e+00, -5.012049602713101e+00, -5.012049602713101e+00, -2.252992406204887e+00, -2.258257356827348e+00, -2.261610164749882e+00, -2.265603348290863e+00, -2.245653328484407e+00, -2.245653328484407e+00, -5.755747612072739e-01, -5.925230434557333e-01, -5.492398466222341e-01, -5.446502995049479e-01, -5.915599649227821e-01, -5.915599649227821e-01, -1.881509662247516e-01, -2.948949546767637e-01, -1.850539324383992e-01, -1.802456258361920e+00, -2.078252318896696e-01, -2.078252318896696e-01, -6.791544967872045e-03, -7.777575169838655e-03, -5.826815204817551e-03, -1.168374479813126e-01, -7.087130250550797e-03, -7.087130250550797e-03, -5.574968626216102e-01, -5.588589823684222e-01, -5.582653943148026e-01, -5.578830955771760e-01, -5.580648840629314e-01, -5.580648840629314e-01, -5.390003833864234e-01, -5.293965333079653e-01, -5.266210670664222e-01, -5.273882199469553e-01, -5.262646999278362e-01, -5.262646999278361e-01, -6.221289902529880e-01, -3.349469595982301e-01, -3.550587230405310e-01, -3.804758327951752e-01, -3.648120177269176e-01, -3.648120177269176e-01, -4.826513596413934e-01, -7.072491605906331e-02, -1.025739722016282e-01, -3.421415586817169e-01, -1.540386310361793e-01, -1.540386310361793e-01, -1.779443551117142e-02, -2.112491665671746e-03, -4.021235525002811e-03, -1.469098823615487e-01, -6.016394388902466e-03, -6.016394388902457e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_ev93_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ev93", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.419458503492825e+01, -2.419471481994291e+01, -2.419523431527006e+01, -2.419311018846137e+01, -2.419465397656884e+01, -2.419465397656884e+01, -3.769362085229590e+00, -3.769468393118169e+00, -3.772544201438119e+00, -3.768041817525435e+00, -3.769432819794102e+00, -3.769432819794102e+00, -6.414759595309824e-01, -6.391066156107557e-01, -5.801461364282993e-01, -5.867211975213867e-01, -6.406186575821462e-01, -6.406186575821462e-01, -1.565018470334187e-01, -1.569274375907543e-01, -8.271314495717108e-01, -1.855138848033932e-01, -1.565493877803477e-01, -1.565493877803477e-01, -2.142147863473979e-02, -2.262510147981228e-02, -1.278805741664895e-01, -9.520620216624438e-03, -2.238543753069119e-02, -2.238543753069119e-02, -6.075745162924205e+00, -6.080489139404166e+00, -6.076225826375776e+00, -6.079914727141100e+00, -6.078186454683960e+00, -6.078186454683960e+00, -1.754871815839393e+00, -1.775959555239314e+00, -1.738093769937035e+00, -1.754237470744535e+00, -1.792044097735410e+00, -1.792044097735410e+00, -6.444354764719213e-01, -7.664567409654923e-01, -6.057593591770095e-01, -6.884418678299392e-01, -6.809931363616637e-01, -6.809931363616637e-01, -2.195775764345354e-01, -2.009100308598476e-01, -2.110864149348500e-01, -2.330886327034155e+00, -1.979918350852177e-01, -1.979918350852177e-01, -9.176647372271203e-03, -1.055023775776110e-02, -7.897557485940839e-03, -1.742345412440226e-01, -9.615077721741343e-03, -9.615077721741350e-03, -7.382581128649207e-01, -7.262123477751574e-01, -7.308797406763549e-01, -7.342316107625688e-01, -7.325848913514296e-01, -7.325848913514296e-01, -7.155476665718323e-01, -5.072651458956136e-01, -5.726538932076410e-01, -6.342026617325808e-01, -6.036366612504439e-01, -6.036366612504439e-01, -8.018566526942630e-01, -2.080614594850502e-01, -2.304763993436435e-01, -3.389117496020408e-01, -2.730942648112434e-01, -2.730942648112434e-01, -4.502635034409804e-01, -1.157639586090042e-01, -1.613976307260873e-01, -3.445948965344512e-01, -1.934107592225767e-01, -1.934107592225772e-01, -2.550715275313524e-02, -2.821611863060940e-03, -5.392996437483359e-03, -1.837569081788775e-01, -8.145066227750700e-03, -8.145066227750667e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_ev93_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ev93", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-9.424881350715494e-09, -9.424731678290159e-09, -9.424080694058858e-09, -9.426531291639067e-09, -9.424802278737364e-09, -9.424802278737364e-09, -1.434295374033015e-05, -1.434243731274666e-05, -1.432583735852546e-05, -1.434222109318247e-05, -1.434244375291757e-05, -1.434244375291757e-05, -1.107177355422651e-02, -1.111085962146244e-02, -1.190435657236706e-02, -1.157381508627979e-02, -1.108611370405720e-02, -1.108611370405720e-02, -1.396273455249879e+00, -1.381301626292743e+00, -5.324357753277839e-03, -1.836379437502927e+00, -1.392871887309610e+00, -1.392871887309610e+00, 5.808409252267516e+01, 5.770562552220404e+01, 9.219599523446963e+00, 4.438943430766743e+01, 5.995822922216948e+01, 5.995822922216948e+01, -2.461337202168219e-06, -2.454268852853878e-06, -2.460621965720658e-06, -2.455126014377101e-06, -2.457705609060759e-06, -2.457705609060759e-06, -1.442536089191585e-04, -1.408701074939969e-04, -1.449559689812645e-04, -1.423306683802298e-04, -1.409390350895913e-04, -1.409390350895913e-04, -1.792597009735603e-02, -8.904085495164565e-03, -2.241162631150708e-02, -1.459921573823625e-02, -1.494742936243304e-02, -1.494742936243304e-02, -1.000474894035486e+00, -8.119417488522264e-01, -1.284554399010562e+00, -1.042322882397965e-04, -1.911262623051684e+00, -1.911262623051684e+00, 4.712641981976909e+01, 4.696859961001785e+01, 1.345871351976380e+02, 2.863205672669672e+00, 6.936063179432806e+01, 6.936063179433162e+01, -8.588000612576474e-03, -1.080853231034585e-02, -1.005222124137519e-02, -9.437748747994515e-03, -9.748322745606480e-03, -9.748322745606480e-03, -9.359270386351108e-03, -3.421311259194620e-02, -2.738523232799317e-02, -2.067075118922616e-02, -2.410126722145832e-02, -2.410126722145834e-02, -7.542282484034985e-03, -4.749149109217529e-01, -3.144365624336972e-01, -1.445511284929171e-01, -2.227478375741365e-01, -2.227478375741364e-01, -5.180207876431343e-02, 9.759261607755507e+00, 4.716031015077363e+00, -1.794571556971195e-01, -8.994725176672251e-01, -8.994725176672017e-01, 4.286667023351584e+01, 8.248456605486294e+01, 7.064384749310386e+01, -1.164428706770455e+00, 1.015952270611856e+02, 1.015952270611689e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
