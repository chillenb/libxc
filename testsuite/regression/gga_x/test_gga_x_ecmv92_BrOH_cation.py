
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_ecmv92_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ecmv92", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.103792553795898e+01, -2.103795204558049e+01, -2.103813959908628e+01, -2.103774378771561e+01, -2.103794127353864e+01, -2.103794127353864e+01, -3.491188731519754e+00, -3.491148668017872e+00, -3.490308251486449e+00, -3.492432741901943e+00, -3.491225125306233e+00, -3.491225125306233e+00, -7.024660227434272e-01, -7.025392582802953e-01, -7.064287356196641e-01, -7.111211999271256e-01, -7.116165128064480e-01, -7.116165128064480e-01, -2.220353866481682e-01, -2.227588583512114e-01, -8.108278095983661e-01, -1.924442649319728e-01, -2.182785384372408e-01, -2.182785384372408e-01, -1.141671694107530e-02, -1.202125148136944e-02, -6.479393476023090e-02, -6.586442633909275e-03, -9.190463792568195e-03, -9.190463792568195e-03, -5.054857738387726e+00, -5.054189946640628e+00, -5.054838036989116e+00, -5.054248323237275e+00, -5.054513112586386e+00, -5.054513112586386e+00, -2.135511486247193e+00, -2.144951740941567e+00, -2.138063290176097e+00, -2.146376726034457e+00, -2.139535169070975e+00, -2.139535169070975e+00, -5.834832526367453e-01, -6.047091569590085e-01, -5.447036040798188e-01, -5.394581974579078e-01, -5.898041736937576e-01, -5.898041736937576e-01, -1.513237452076354e-01, -2.418092520973785e-01, -1.420203326506665e-01, -1.819187422731924e+00, -1.660838554328926e-01, -1.660838554328926e-01, -5.085379954003686e-03, -6.438581745754677e-03, -4.930057058360440e-03, -1.006776591277157e-01, -6.192663045956556e-03, -6.192663045956558e-03, -5.518652899678080e-01, -5.556209663232650e-01, -5.543837640735423e-01, -5.532997955918204e-01, -5.538488615433340e-01, -5.538488615433340e-01, -5.346500796553852e-01, -5.141770104016208e-01, -5.198140642957396e-01, -5.253526147419948e-01, -5.222858374686247e-01, -5.222858374686247e-01, -6.351550218407253e-01, -2.848120368589533e-01, -3.171741349573510e-01, -3.688074081481944e-01, -3.403140196636425e-01, -3.403140196636424e-01, -4.746177884288874e-01, -6.211429472451985e-02, -8.325326724017035e-02, -3.443447697659937e-01, -1.225228419408167e-01, -1.225228419408167e-01, -1.608175160212374e-02, -1.721313703600930e-03, -3.619581632906929e-03, -1.164402242099251e-01, -5.687148869416533e-03, -5.687148869416529e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_ecmv92_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ecmv92", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.516079745248165e+01, -2.516076802699898e+01, -2.516091602490015e+01, -2.516085414409708e+01, -2.516126154176865e+01, -2.516135871368197e+01, -2.515992333875885e+01, -2.515965278400185e+01, -2.516086987934684e+01, -2.516030981513321e+01, -2.516086987934684e+01, -2.516030981513321e+01, -4.033126197868924e+00, -4.033347170492784e+00, -4.033173366981654e+00, -4.033404107132888e+00, -4.034416646866864e+00, -4.034766315219638e+00, -4.032913093100472e+00, -4.033273203986102e+00, -4.032343024857949e+00, -4.034449058343654e+00, -4.032343024857949e+00, -4.034449058343654e+00, -7.519657329393450e-01, -7.574814122590171e-01, -7.499498641384612e-01, -7.566880260923887e-01, -7.243102041331313e-01, -7.160817454126154e-01, -7.253891765744985e-01, -7.280610705886071e-01, -7.672376867884236e-01, -6.883911381489286e-01, -7.672376867884236e-01, -6.883911381489286e-01, -1.908721567373971e-01, -1.957456983461232e-01, -1.917000620241048e-01, -1.977411214826836e-01, -8.653356745066511e-01, -9.065527250055756e-01, -1.726868482595671e-01, -1.741273242212004e-01, -1.985612906004718e-01, -1.541918219885065e-01, -1.985612906004719e-01, -1.541918219885066e-01, -1.469548004001229e-02, -1.561077995276147e-02, -1.539412706249580e-02, -1.648415482529838e-02, -8.039208791174432e-02, -8.424456903987936e-02, -8.848578702860040e-03, -8.701489655869457e-03, -1.311660666377633e-02, -7.471490727232515e-03, -1.311660666377636e-02, -7.471490727232515e-03, -6.209391426397643e+00, -6.207834529551129e+00, -6.212263378173483e+00, -6.210609204758674e+00, -6.209549614206390e+00, -6.207928899094187e+00, -6.212013954485582e+00, -6.210449592596270e+00, -6.210863693919148e+00, -6.209228454045906e+00, -6.210863693919148e+00, -6.209228454045906e+00, -2.153671691633623e+00, -2.153555533235818e+00, -2.172300261013613e+00, -2.171642581788509e+00, -2.133507317606944e+00, -2.139158594369432e+00, -2.149420272096010e+00, -2.155286910714751e+00, -2.179558932872195e+00, -2.165169231163052e+00, -2.179558932872195e+00, -2.165169231163052e+00, -6.865317080004060e-01, -6.848085336146523e-01, -7.748265050813575e-01, -7.755440099027588e-01, -6.171415067309162e-01, -6.428722063789111e-01, -6.712100990884848e-01, -6.930856259634208e-01, -7.185654268203666e-01, -6.813518633343716e-01, -7.185654268203666e-01, -6.813518633343719e-01, -1.586328755120867e-01, -1.586741691264770e-01, -2.112885531243051e-01, -2.118536150838316e-01, -1.500773117248579e-01, -1.537668923394339e-01, -2.337255410511454e+00, -2.336262293635089e+00, -1.612664800832249e-01, -1.562986980194586e-01, -1.612664800832249e-01, -1.562986980194586e-01, -6.640058105626115e-03, -6.900609716714514e-03, -8.513757817814884e-03, -8.642689912248192e-03, -6.364452277162615e-03, -6.738705942567956e-03, -1.179593144911853e-01, -1.188233360317031e-01, -6.502374990859133e-03, -8.923020985116912e-03, -6.502374990859129e-03, -8.923020985116917e-03, -7.231665217053559e-01, -7.260818297653906e-01, -7.119688208758398e-01, -7.149644877901782e-01, -7.158942473831258e-01, -7.188852910185849e-01, -7.191685457902406e-01, -7.220872298173161e-01, -7.175320158546299e-01, -7.204855220771608e-01, -7.175320158546299e-01, -7.204855220771608e-01, -7.059696692611025e-01, -7.083222299710108e-01, -5.536350606706667e-01, -5.564975752129517e-01, -5.944282752481835e-01, -5.976643862383918e-01, -6.385563300932408e-01, -6.410129139932745e-01, -6.160895348613399e-01, -6.186115615157081e-01, -6.160895348613399e-01, -6.186115615157081e-01, -8.104460563565745e-01, -8.123593695931137e-01, -2.467227372748750e-01, -2.476591955498773e-01, -2.844774222540995e-01, -2.869959491261094e-01, -3.868971232494809e-01, -3.893063661484742e-01, -3.290526395516675e-01, -3.290375142625853e-01, -3.290526395516674e-01, -3.290375142625855e-01, -5.080010911404645e-01, -5.123071083925224e-01, -7.929556768518640e-02, -7.976948578643438e-02, -1.017191525658002e-01, -1.042398949748346e-01, -3.786229297538102e-01, -3.853111476707477e-01, -1.328553191163494e-01, -1.327651092155396e-01, -1.328553191163498e-01, -1.327651092155397e-01, -2.097716105742612e-02, -2.172912189587152e-02, -2.292284708842878e-03, -2.297428973577041e-03, -4.662981148218415e-03, -4.959126374201910e-03, -1.283451225752614e-01, -1.296841993334979e-01, -6.157568951788415e-03, -8.180542704666983e-03, -6.157568951788412e-03, -8.180542704666985e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_ecmv92_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ecmv92", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.463291208092287e-08, 0.000000000000000e+00, -1.463299246705140e-08, -1.463278583604265e-08, 0.000000000000000e+00, -1.463290071684609e-08, -1.463226059238003e-08, 0.000000000000000e+00, -1.463218206314911e-08, -1.463368943427658e-08, 0.000000000000000e+00, -1.463400228335346e-08, -1.463284291474783e-08, 0.000000000000000e+00, -1.463318536461491e-08, -1.463284291474783e-08, 0.000000000000000e+00, -1.463318536461491e-08, -1.989631645156718e-05, 0.000000000000000e+00, -1.990150382283854e-05, -1.989658121370666e-05, 0.000000000000000e+00, -1.990218371558337e-05, -1.990719137074175e-05, 0.000000000000000e+00, -1.990950912479480e-05, -1.987595849324185e-05, 0.000000000000000e+00, -1.987935198825779e-05, -1.990801212026471e-05, 0.000000000000000e+00, -1.988710957121438e-05, -1.990801212026471e-05, 0.000000000000000e+00, -1.988710957121438e-05, -1.299068347802971e-02, 0.000000000000000e+00, -1.295713245127425e-02, -1.301201555398136e-02, 0.000000000000000e+00, -1.297134586333816e-02, -1.328202398074712e-02, 0.000000000000000e+00, -1.331203459669290e-02, -1.292454795337105e-02, 0.000000000000000e+00, -1.292033950700124e-02, -1.281213254137099e-02, 0.000000000000000e+00, -1.282356703222809e-02, -1.281213254137099e-02, 0.000000000000000e+00, -1.282356703222809e-02, -1.580737969606160e+00, 0.000000000000000e+00, -1.466355153513434e+00, -1.575836957948531e+00, 0.000000000000000e+00, -1.439523486413637e+00, -7.512808648263928e-03, 0.000000000000000e+00, -6.913232410847102e-03, -2.295879518865378e+00, 0.000000000000000e+00, -2.218467371574725e+00, -1.358129581348432e+00, 0.000000000000000e+00, -3.513357986060226e+00, -1.358129581348427e+00, 0.000000000000000e+00, -3.513357986060258e+00, -8.131064562302557e+00, 0.000000000000000e+00, -8.048814666228063e+00, -8.566455234575630e+00, 0.000000000000000e+00, -8.521588474649734e+00, -4.658739992696431e+00, 0.000000000000000e+00, -4.672924833843191e+00, -7.451367546797789e+00, 0.000000000000000e+00, -7.249179369196971e+00, -8.118716649823757e+00, 0.000000000000000e+00, -2.060551805490097e+01, -8.118716649805783e+00, 0.000000000000000e+00, -2.060551805489964e+01, -4.295522150525796e-06, 0.000000000000000e+00, -4.299491587203446e-06, -4.295979996019808e-06, 0.000000000000000e+00, -4.299935085605442e-06, -4.295514031532256e-06, 0.000000000000000e+00, -4.299482828296483e-06, -4.295907138134759e-06, 0.000000000000000e+00, -4.299885934537031e-06, -4.295781568069672e-06, 0.000000000000000e+00, -4.299717816363814e-06, -4.295781568069672e-06, 0.000000000000000e+00, -4.299717816363814e-06, -1.607496352271603e-04, 0.000000000000000e+00, -1.607787271247116e-04, -1.573170422625545e-04, 0.000000000000000e+00, -1.574595761557826e-04, -1.613448442415305e-04, 0.000000000000000e+00, -1.612446473423430e-04, -1.584017010799516e-04, 0.000000000000000e+00, -1.582278421721796e-04, -1.582505751089462e-04, 0.000000000000000e+00, -1.589678751937264e-04, -1.582505751089462e-04, 0.000000000000000e+00, -1.589678751937264e-04, -2.497740309088895e-02, 0.000000000000000e+00, -2.525385236991436e-02, -2.071382620556322e-02, 0.000000000000000e+00, -2.073818376699850e-02, -3.591070608838023e-02, 0.000000000000000e+00, -3.152723041249066e-02, -3.501901472162214e-02, 0.000000000000000e+00, -3.064411510386667e-02, -2.174594591273611e-02, 0.000000000000000e+00, -2.652125176339280e-02, -2.174594591273604e-02, 0.000000000000000e+00, -2.652125176339273e-02, -2.885297580271656e+00, 0.000000000000000e+00, -2.922476780419003e+00, -1.011749889866890e+00, 0.000000000000000e+00, -1.000932036706809e+00, -3.307826782860825e+00, 0.000000000000000e+00, -3.177501271002188e+00, -2.531943412460227e-04, 0.000000000000000e+00, -2.536922014739997e-04, -3.009207749119968e+00, 0.000000000000000e+00, -3.455484596759698e+00, -3.009207749119968e+00, 0.000000000000000e+00, -3.455484596759698e+00, -1.046123414580252e+01, 0.000000000000000e+00, -9.054557206089035e+00, -9.007160673477959e+00, 0.000000000000000e+00, -8.316123708407815e+00, -5.130122611445860e+01, 0.000000000000000e+00, -5.706561923573160e+01, -5.132281807553830e+00, 0.000000000000000e+00, -4.947149312922906e+00, -2.551350551091008e+01, 0.000000000000000e+00, -2.505517897114484e+01, -2.551350551095868e+01, 0.000000000000000e+00, -2.505517897118608e+01, -3.249455051228074e-02, 0.000000000000000e+00, -3.213199632299066e-02, -2.931699529702940e-02, 0.000000000000000e+00, -2.892251307737205e-02, -2.989044428289622e-02, 0.000000000000000e+00, -2.950597771139387e-02, -3.068590804612955e-02, 0.000000000000000e+00, -3.029699645372592e-02, -3.023899065233500e-02, 0.000000000000000e+00, -2.985280285025731e-02, -3.023899065233500e-02, 0.000000000000000e+00, -2.985280285025731e-02, -4.028834993786429e-02, 0.000000000000000e+00, -3.980635996124911e-02, -4.532229993878725e-02, 0.000000000000000e+00, -4.468873063253812e-02, -4.106653161956909e-02, 0.000000000000000e+00, -4.046958521587272e-02, -3.731626123510957e-02, 0.000000000000000e+00, -3.683218820763379e-02, -3.918792899117465e-02, 0.000000000000000e+00, -3.865339307306005e-02, -3.918792899117465e-02, 0.000000000000000e+00, -3.865339307306005e-02, -1.701812315368535e-02, 0.000000000000000e+00, -1.697729111603096e-02, -5.625281066048674e-01, 0.000000000000000e+00, -5.555751291513766e-01, -3.650495011351166e-01, 0.000000000000000e+00, -3.578056116914777e-01, -1.756700105703747e-01, 0.000000000000000e+00, -1.723687695804345e-01, -2.578175454532270e-01, 0.000000000000000e+00, -2.590712003513798e-01, -2.578175454532279e-01, 0.000000000000000e+00, -2.590712003513800e-01, -6.290276054712854e-02, 0.000000000000000e+00, -6.158116183513129e-02, -4.268736429998135e+00, 0.000000000000000e+00, -4.272545154820183e+00, -4.137594211018001e+00, 0.000000000000000e+00, -4.214549590459424e+00, -2.239937358090643e-01, 0.000000000000000e+00, -2.128177593654086e-01, -4.926201247878100e+00, 0.000000000000000e+00, -5.641348986254963e+00, -4.926201247878035e+00, 0.000000000000000e+00, -5.641348986254964e+00, -6.439681430488060e+00, 0.000000000000000e+00, -6.573246782641601e+00, -3.219170949498603e+01, 0.000000000000000e+00, -5.702201275497552e+01, -1.986655985442543e+01, 0.000000000000000e+00, -2.114886344745388e+01, -5.514257938801618e+00, 0.000000000000000e+00, -5.386698476131567e+00, -5.259732634039881e+01, 0.000000000000000e+00, -2.601230294925962e+01, -5.259732634036209e+01, 0.000000000000000e+00, -2.601230294927604e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
