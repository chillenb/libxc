
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_hjs_pbe_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_hjs_pbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.088354720935160e+01, -2.088357106332598e+01, -2.088375395072816e+01, -2.088336181141815e+01, -2.088355914991590e+01, -2.088355914991590e+01, -3.411442191142043e+00, -3.411412851168203e+00, -3.410749997526179e+00, -3.412629060665640e+00, -3.411441897079822e+00, -3.411441897079822e+00, -6.365043122410062e-01, -6.365659551787264e-01, -6.402598777599969e-01, -6.445069924435602e-01, -6.365229026819090e-01, -6.365229026819090e-01, -1.570455542801302e-01, -1.578853907883131e-01, -7.508984549784748e-01, -1.208526099295708e-01, -1.572733378491018e-01, -1.572733378491018e-01, -1.698633045250985e-04, -2.006422990362118e-04, -2.116823449373277e-02, -1.535280278683610e-05, -1.931818906399688e-04, -1.931818906399688e-04, -4.970893114164773e+00, -4.970293372054019e+00, -4.970838090980320e+00, -4.970371646791381e+00, -4.970576421358268e+00, -4.970576421358268e+00, -2.052217233713100e+00, -2.061695562228746e+00, -2.053827649266111e+00, -2.061198072542634e+00, -2.056567511492601e+00, -2.056567511492601e+00, -5.126901955379246e-01, -5.349636839822968e-01, -4.855329199774597e-01, -4.870789664891854e-01, -5.303503327759242e-01, -5.303503327759242e-01, -8.660789503679286e-02, -1.773001513546397e-01, -8.414942276383724e-02, -1.749609829951224e+00, -1.010230828851315e-01, -1.010230828851315e-01, -1.374722449117996e-05, -2.075657068347611e-05, -8.569160382678987e-06, -4.124725347357992e-02, -1.556748764452525e-05, -1.556748764452527e-05, -4.987677056728353e-01, -5.011606478701666e-01, -5.003010245399280e-01, -4.996349187276408e-01, -4.999672951726483e-01, -4.999672951726483e-01, -4.800692655131101e-01, -4.553180779670306e-01, -4.621668094070489e-01, -4.684277172692140e-01, -4.650473204499866e-01, -4.650473204499866e-01, -5.646838314690782e-01, -2.214919424954158e-01, -2.545029101763257e-01, -3.058024998440657e-01, -2.780999415951473e-01, -2.780999415951472e-01, -4.077143863250360e-01, -1.778198737952775e-02, -3.421489176251304e-02, -2.760482464468137e-01, -6.284457634510698e-02, -6.284457634510700e-02, -3.030740452747485e-04, -4.131805192230179e-07, -2.840073447136191e-06, -5.772887339915193e-02, -9.463317867452870e-06, -9.463317867445313e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_hjs_pbe_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_hjs_pbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.507993309636676e+01, -2.508001983953742e+01, -2.508041457978726e+01, -2.507899398635527e+01, -2.507997877689306e+01, -2.507997877689306e+01, -3.975033125891434e+00, -3.975071691621678e+00, -3.976298460824199e+00, -3.975041032492422e+00, -3.975070157869415e+00, -3.975070157869415e+00, -6.912880114975016e-01, -6.901211724777786e-01, -6.619898963903870e-01, -6.679639518338729e-01, -6.908636534005362e-01, -6.908636534005362e-01, -1.472872604326740e-01, -1.490695561848194e-01, -8.551400795398011e-01, -1.173554741659317e-01, -1.477847332569529e-01, -1.477847332569529e-01, -3.707153601379079e-04, -4.405198888868439e-04, -3.442944398115052e-02, -3.109672503966110e-05, -4.235281400764797e-04, -4.235281400764797e-04, -6.134947498400651e+00, -6.137626585161512e+00, -6.135221312631733e+00, -6.137304447713500e+00, -6.136321306276778e+00, -6.136321306276778e+00, -2.120646432624726e+00, -2.137286499724389e+00, -2.112876502658131e+00, -2.125711670237410e+00, -2.142502888920738e+00, -2.142502888920738e+00, -6.186493858912191e-01, -7.070254961069502e-01, -5.821839123971602e-01, -6.331291440604787e-01, -6.488238252582700e-01, -6.488238252582700e-01, -9.887014459183917e-02, -1.657247045966150e-01, -9.508785662846016e-02, -2.270368759304588e+00, -1.046575351716449e-01, -1.046575351716449e-01, -2.780431487902558e-05, -4.224423559944749e-05, -1.725048301777797e-05, -5.720760218755774e-02, -3.153631049283795e-05, -3.153631049284838e-05, -6.771359543950740e-01, -6.662827073997544e-01, -6.701559820019336e-01, -6.731648236622585e-01, -6.716585934726511e-01, -6.716585934726511e-01, -6.546461823065902e-01, -5.129634154575986e-01, -5.509629135073036e-01, -5.893670654877677e-01, -5.696249625967643e-01, -5.696249625967643e-01, -7.429236020692214e-01, -2.063166056656966e-01, -2.462175814135644e-01, -3.369872236911374e-01, -2.858859609961892e-01, -2.858859609961893e-01, -4.551556113292586e-01, -3.015572215104608e-02, -5.056357010433557e-02, -3.223121421622881e-01, -7.571263750232742e-02, -7.571263750232751e-02, -6.744266373712595e-04, -8.265193554809936e-07, -5.690277887493086e-06, -6.973382391891179e-02, -1.906577519332701e-05, -1.906577519332145e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_hjs_pbe_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_hjs_pbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-7.052889123190656e-09, -7.052846644908911e-09, -7.052569117467828e-09, -7.053266467597952e-09, -7.052867457401035e-09, -7.052867457401035e-09, -9.510350020048775e-06, -9.510570177747832e-06, -9.515049698745378e-06, -9.499269193077509e-06, -9.510301213705239e-06, -9.510301213705239e-06, -6.046294204358101e-03, -6.049429744652533e-03, -6.031572328895550e-03, -5.884529770939833e-03, -6.047554057142012e-03, -6.047554057142012e-03, -6.298484725218971e-01, -6.244658081520238e-01, -3.215251122199599e-03, -9.318353278545952e-01, -6.287351397602525e-01, -6.287351397602525e-01, -7.644904004055178e-02, -9.480726797344416e-02, -1.509723122550312e+00, -1.224960540463095e-03, -9.388133272996976e-02, -9.388133272996976e-02, -2.080464435316534e-06, -2.080675439385104e-06, -2.080477427150025e-06, -2.080641654024747e-06, -2.080585287694699e-06, -2.080585287694699e-06, -7.348300838284084e-05, -7.212030288894856e-05, -7.333215225506566e-05, -7.228108741195090e-05, -7.271644492469314e-05, -7.271644492469314e-05, -1.237036500660592e-02, -9.710279337078116e-03, -1.507023044882492e-02, -1.382972456128452e-02, -1.085128818664008e-02, -1.085128818664008e-02, -1.077314618544141e+00, -3.794028070194261e-01, -1.227834244354207e+00, -1.193280537370057e-04, -1.151744425050126e+00, -1.151744425050126e+00, -1.066406804616222e-03, -2.218938833094247e-03, -1.297655834777109e-03, -1.767512302937897e+00, -1.969360365772352e-03, -1.969360365775216e-03, -1.189284238779719e-02, -1.213318475789518e-02, -1.206275861271567e-02, -1.199802584232739e-02, -1.203173887068296e-02, -1.203173887068297e-02, -1.347697378552478e-02, -1.967182932378912e-02, -1.800320769999164e-02, -1.642909308146061e-02, -1.725560423888460e-02, -1.725560423888459e-02, -8.056897607411372e-03, -2.161583106588447e-01, -1.460517954367121e-01, -7.760203237798420e-02, -1.092634141856754e-01, -1.092634141856755e-01, -2.906455416543383e-02, -1.198793797346847e+00, -1.466602943035186e+00, -1.044969747904835e-01, -1.786316585219230e+00, -1.786316585219219e+00, -1.168378681348798e-01, -3.477979814530155e-06, -8.927330327023740e-05, -2.163831662593358e+00, -1.172293872751353e-03, -1.172293872749177e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
