
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_pbepow_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbepow", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.103107801227045e+01, -2.103110078789805e+01, -2.103127770100880e+01, -2.103093730054205e+01, -2.103110490304206e+01, -2.103110490304206e+01, -3.499386448273551e+00, -3.499338490985566e+00, -3.498316275981380e+00, -3.500759046538918e+00, -3.499413610778806e+00, -3.499413610778806e+00, -7.103721757277486e-01, -7.106595756890192e-01, -7.206527547169856e-01, -7.251258303879040e-01, -7.257801994569848e-01, -7.257801994569848e-01, -2.313927439608931e-01, -2.322892686288391e-01, -8.179336322026247e-01, -1.948403129471821e-01, -2.259739119671002e-01, -2.259739119671001e-01, -1.010901778339421e-02, -1.064519895848392e-02, -5.821575006303165e-02, -5.829643141542093e-03, -8.136359247134468e-03, -8.136359247147586e-03, -5.046159000565337e+00, -5.045369340700961e+00, -5.046134222805987e+00, -5.045436890672651e+00, -5.045752104012998e+00, -5.045752104012998e+00, -2.182792962244882e+00, -2.190815191921954e+00, -2.189115100734067e+00, -2.196174824119360e+00, -2.184209044891041e+00, -2.184209044891041e+00, -5.840126646975068e-01, -6.030976752601104e-01, -5.458780136754466e-01, -5.380664227980663e-01, -5.898330205423516e-01, -5.898330205423516e-01, -1.449187330226336e-01, -2.484938907447388e-01, -1.350554311508638e-01, -1.814353387330449e+00, -1.643983991381187e-01, -1.643983991381187e-01, -4.500788652124874e-03, -5.698810318461080e-03, -4.364016650687222e-03, -9.282569386772963e-02, -5.481847831202092e-03, -5.481847831155944e-03, -5.507972791160228e-01, -5.541436737187316e-01, -5.529618730007932e-01, -5.519833810868484e-01, -5.524714955000264e-01, -5.524714955000264e-01, -5.339935416289991e-01, -5.195912580908317e-01, -5.214028591641569e-01, -5.246506342685633e-01, -5.225309289812059e-01, -5.225309289812059e-01, -6.334632933415978e-01, -2.964808943282409e-01, -3.303962608460727e-01, -3.741787498688089e-01, -3.505625818269219e-01, -3.505625818269219e-01, -4.799224720372509e-01, -5.569999719028199e-02, -7.548917006429648e-02, -3.466738463936679e-01, -1.160469044330801e-01, -1.160469044330801e-01, -1.424632210915008e-02, -1.523291283200754e-03, -3.203384873756739e-03, -1.094737232828565e-01, -5.034209105356052e-03, -5.034209105336916e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_pbepow_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbepow", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.481807893316629e+01, -2.481805139179268e+01, -2.481821448419366e+01, -2.481814983273329e+01, -2.481858991200324e+01, -2.481870409467345e+01, -2.481706056740355e+01, -2.481675433597357e+01, -2.481816271888891e+01, -2.481749089146604e+01, -2.481816271888891e+01, -2.481749089146604e+01, -3.940605895772290e+00, -3.941015435486334e+00, -3.940676242459435e+00, -3.941107616432391e+00, -3.942602640184645e+00, -3.943130471755273e+00, -3.939898289093766e+00, -3.940463734251886e+00, -3.939764312513150e+00, -3.942240931918744e+00, -3.939764312513150e+00, -3.942240931918744e+00, -7.140814559317329e-01, -7.216495868992191e-01, -7.114043217116603e-01, -7.206185274280540e-01, -6.793928376178671e-01, -6.701837407775940e-01, -6.795527614333255e-01, -6.826102139208086e-01, -7.346196102251638e-01, -6.514580732784361e-01, -7.346196102251638e-01, -6.514580732784361e-01, -2.086098983999030e-01, -2.091652704093748e-01, -2.068090076050001e-01, -2.078445334136608e-01, -8.231328837872200e-01, -8.735713131618855e-01, -2.042760440251817e-01, -2.059733357552234e-01, -2.157458860575914e-01, -1.740321593128145e-01, -2.157458860575927e-01, -1.740321593128033e-01, -1.302620424225921e-02, -1.384038343392156e-02, -1.364838362636836e-02, -1.461877081660315e-02, -7.421684022991094e-02, -7.815231906661951e-02, -7.834903152563546e-03, -7.704458553648213e-03, -1.162270574424164e-02, -6.616282117680270e-03, -1.162270574434492e-02, -6.616282115915842e-03, -6.157524910691853e+00, -6.155955395177501e+00, -6.161001958063452e+00, -6.159314989007755e+00, -6.157714050329799e+00, -6.156067943656263e+00, -6.160697707074245e+00, -6.159120090843639e+00, -6.159309829996894e+00, -6.157643992619802e+00, -6.159309829996894e+00, -6.157643992619802e+00, -2.014875943512457e+00, -2.014765422734760e+00, -2.033125178907953e+00, -2.032487139882861e+00, -1.995174885258812e+00, -2.000502430935525e+00, -2.010118255217073e+00, -2.015838831986148e+00, -2.041624555055922e+00, -2.026256883056300e+00, -2.041624555055922e+00, -2.026256883056300e+00, -6.741601750539492e-01, -6.725246699404198e-01, -7.728447824518827e-01, -7.736512697219617e-01, -6.023249161720607e-01, -6.295428305887757e-01, -6.685734705757271e-01, -6.902482719929224e-01, -7.081693746326879e-01, -6.707487572461568e-01, -7.081693746326879e-01, -6.707487572461568e-01, -1.734296473460891e-01, -1.742108423790837e-01, -2.467516563884044e-01, -2.471964165573755e-01, -1.605797956729277e-01, -1.667925701762309e-01, -2.331936217204364e+00, -2.330959396194015e+00, -1.849439657699007e-01, -1.835603639168884e-01, -1.849439657699007e-01, -1.835603639168884e-01, -5.878255304775457e-03, -6.108925532921198e-03, -7.538516389905037e-03, -7.652635290931249e-03, -5.636519187143510e-03, -5.968823597720386e-03, -1.175390487373277e-01, -1.183199922765829e-01, -5.757473289632577e-03, -7.904775527204555e-03, -5.757473288994556e-03, -7.904775527622041e-03, -7.231810429489667e-01, -7.261219638434890e-01, -7.102990391318649e-01, -7.133409133662996e-01, -7.148235713479645e-01, -7.178580859919972e-01, -7.185965740326418e-01, -7.215461972081143e-01, -7.167110449736703e-01, -7.197015522868069e-01, -7.167110449736703e-01, -7.197015522868069e-01, -7.063288366819939e-01, -7.086837406137340e-01, -5.273274592265162e-01, -5.304838476812566e-01, -5.791740102040394e-01, -5.827728173294601e-01, -6.322067077643209e-01, -6.347247554262845e-01, -6.058904310278659e-01, -6.085026596711753e-01, -6.058904310278659e-01, -6.085026596711753e-01, -8.080272212132691e-01, -8.100843772227310e-01, -2.714376541565799e-01, -2.717087691458891e-01, -2.851124525457881e-01, -2.856443449245261e-01, -3.652091220506535e-01, -3.677069686343077e-01, -3.093430232148822e-01, -3.091781649803448e-01, -3.093430232148819e-01, -3.091781649803447e-01, -4.829007041645609e-01, -4.877370972600041e-01, -7.296591258855689e-02, -7.344209995945244e-02, -9.642197264159758e-02, -9.932588760915896e-02, -3.641947663631524e-01, -3.715069279739992e-01, -1.396920003353907e-01, -1.435151736023163e-01, -1.396920003353847e-01, -1.435151736023241e-01, -1.861981299146009e-02, -1.929224110369082e-02, -2.028676541140753e-03, -2.033284345105119e-03, -4.127495405519698e-03, -4.389823955310787e-03, -1.343659639340876e-01, -1.361852352424021e-01, -5.453074353208605e-03, -7.245899829941920e-03, -5.453074353154293e-03, -7.245899829903490e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_pbepow_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbepow", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.632209166805646e-08, 0.000000000000000e+00, -1.632217576648449e-08, -1.632188106289083e-08, 0.000000000000000e+00, -1.632202276735968e-08, -1.632116526269909e-08, 0.000000000000000e+00, -1.632100885395479e-08, -1.632354482539205e-08, 0.000000000000000e+00, -1.632404151283434e-08, -1.632196818209605e-08, 0.000000000000000e+00, -1.632279824651638e-08, -1.632196818209605e-08, 0.000000000000000e+00, -1.632279824651638e-08, -2.320639641990263e-05, 0.000000000000000e+00, -2.320791961224097e-05, -2.320613846085126e-05, 0.000000000000000e+00, -2.320785734633579e-05, -2.320184559704282e-05, 0.000000000000000e+00, -2.320017509968210e-05, -2.319428819058823e-05, 0.000000000000000e+00, -2.319327413245296e-05, -2.322182303501721e-05, 0.000000000000000e+00, -2.318765393974248e-05, -2.322182303501721e-05, 0.000000000000000e+00, -2.318765393974248e-05, -1.642999351397644e-02, 0.000000000000000e+00, -1.627789482455904e-02, -1.649157114051374e-02, 0.000000000000000e+00, -1.630914704858869e-02, -1.712815192833398e-02, 0.000000000000000e+00, -1.718808461579392e-02, -1.668333113722953e-02, 0.000000000000000e+00, -1.666826256000487e-02, -1.591143385660588e-02, 0.000000000000000e+00, -1.602033881432088e-02, -1.591143385660588e-02, 0.000000000000000e+00, -1.602033881432088e-02, -1.494014532033846e+00, 0.000000000000000e+00, -1.457246038860551e+00, -1.534104466044565e+00, 0.000000000000000e+00, -1.479703661281983e+00, -9.469147626565876e-03, 0.000000000000000e+00, -8.443468599857703e-03, -1.501361084510303e+00, 0.000000000000000e+00, -1.464053887598846e+00, -1.301170956934678e+00, 0.000000000000000e+00, -1.719670117131496e+00, -1.301170956934651e+00, 0.000000000000000e+00, -1.719670117131549e+00, -2.479329969033101e+00, 0.000000000000000e+00, -2.454997192868093e+00, -2.612907921907131e+00, 0.000000000000000e+00, -2.600267523298859e+00, -1.511020367610184e+00, 0.000000000000000e+00, -1.527223334814249e+00, -2.268415963822157e+00, 0.000000000000000e+00, -2.206777262924625e+00, -2.474315549004401e+00, 0.000000000000000e+00, -6.273916948414754e+00, -2.474315461778043e+00, 0.000000000000000e+00, -6.273924991991692e+00, -4.621121793743057e-06, 0.000000000000000e+00, -4.625552171261792e-06, -4.617671984177823e-06, 0.000000000000000e+00, -4.622215891285657e-06, -4.620911619687413e-06, 0.000000000000000e+00, -4.625424272975878e-06, -4.617951661999581e-06, 0.000000000000000e+00, -4.622393562630850e-06, -4.619368626246004e-06, 0.000000000000000e+00, -4.623878517141237e-06, -4.619368626246004e-06, 0.000000000000000e+00, -4.623878517141237e-06, -2.075181354530246e-04, 0.000000000000000e+00, -2.075555159485540e-04, -2.031236382185726e-04, 0.000000000000000e+00, -2.033074155636527e-04, -2.079225659352418e-04, 0.000000000000000e+00, -2.079403418372583e-04, -2.042911632127509e-04, 0.000000000000000e+00, -2.041723804587908e-04, -2.042852490091581e-04, 0.000000000000000e+00, -2.052517767544129e-04, -2.042852490091581e-04, 0.000000000000000e+00, -2.052517767544129e-04, -2.850992121605924e-02, 0.000000000000000e+00, -2.881407604050635e-02, -2.060335165473956e-02, 0.000000000000000e+00, -2.056598003585456e-02, -4.206431011613043e-02, 0.000000000000000e+00, -3.643327753658869e-02, -3.581480370071707e-02, 0.000000000000000e+00, -3.142535993922237e-02, -2.437282468914483e-02, 0.000000000000000e+00, -2.990134044832464e-02, -2.437282468914483e-02, 0.000000000000000e+00, -2.990134044832464e-02, -1.291116244677630e+00, 0.000000000000000e+00, -1.321967699036736e+00, -7.680454644954418e-01, 0.000000000000000e+00, -7.635650301156013e-01, -1.406035394043568e+00, 0.000000000000000e+00, -1.394529104029398e+00, -2.499817435508993e-04, 0.000000000000000e+00, -2.504314830861844e-04, -1.557550868095283e+00, 0.000000000000000e+00, -2.022578767701389e+00, -1.557550868095283e+00, 0.000000000000000e+00, -2.022578767701389e+00, -3.183802385868294e+00, 0.000000000000000e+00, -2.755700500569513e+00, -2.742088118198769e+00, 0.000000000000000e+00, -2.531692610272657e+00, -1.562237654436731e+01, 0.000000000000000e+00, -1.738144688915882e+01, -1.891391935523730e+00, 0.000000000000000e+00, -1.820942917779000e+00, -7.767060507402119e+00, 0.000000000000000e+00, -7.633179819379398e+00, -7.767058995275860e+00, 0.000000000000000e+00, -7.633179908863356e+00, -2.833821968742815e-02, 0.000000000000000e+00, -2.790423725293337e-02, -2.900013588619211e-02, 0.000000000000000e+00, -2.855158455293631e-02, -2.876574937605847e-02, 0.000000000000000e+00, -2.832097858255617e-02, -2.857249030907016e-02, 0.000000000000000e+00, -2.813470930371276e-02, -2.866899869834932e-02, 0.000000000000000e+00, -2.822777550513888e-02, -2.866899869834932e-02, 0.000000000000000e+00, -2.822777550513888e-02, -3.159543018003291e-02, 0.000000000000000e+00, -3.118107986450138e-02, -5.696547204736832e-02, 0.000000000000000e+00, -5.607032968445656e-02, -4.841070068481665e-02, 0.000000000000000e+00, -4.757198425088126e-02, -4.064656316651875e-02, 0.000000000000000e+00, -4.007987145097146e-02, -4.440938118639309e-02, 0.000000000000000e+00, -4.375620228199183e-02, -4.440938118639309e-02, 0.000000000000000e+00, -4.375620228199183e-02, -1.709635645823025e-02, 0.000000000000000e+00, -1.698537354138769e-02, -5.232969561796857e-01, 0.000000000000000e+00, -5.203445205173117e-01, -4.103560742531400e-01, 0.000000000000000e+00, -4.072726248618231e-01, -2.246123480760757e-01, 0.000000000000000e+00, -2.201699747557920e-01, -3.267806060328619e-01, 0.000000000000000e+00, -3.287514215503303e-01, -3.267806060328619e-01, 0.000000000000000e+00, -3.287514215503307e-01, -7.939273130671530e-02, 0.000000000000000e+00, -7.747796622080860e-02, -1.377494771964723e+00, 0.000000000000000e+00, -1.379896085780107e+00, -1.399859700945895e+00, 0.000000000000000e+00, -1.438086745715078e+00, -2.749261836811065e-01, 0.000000000000000e+00, -2.595025582767329e-01, -2.015497521163939e+00, 0.000000000000000e+00, -2.455445340141140e+00, -2.015497521163256e+00, 0.000000000000000e+00, -2.455445340137877e+00, -1.967572278330225e+00, 0.000000000000000e+00, -2.009148160183179e+00, -9.793048035359279e+00, 0.000000000000000e+00, -1.734709092666328e+01, -6.045122225441887e+00, 0.000000000000000e+00, -6.435734532460466e+00, -2.235673543835748e+00, 0.000000000000000e+00, -2.198030061865090e+00, -1.601610132412912e+01, 0.000000000000000e+00, -7.922954292112241e+00, -1.601609757152503e+01, 0.000000000000000e+00, -7.922955225103681e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
