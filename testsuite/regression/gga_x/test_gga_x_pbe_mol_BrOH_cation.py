
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_pbe_mol_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbe_mol", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.120902786603795e+01, -2.120904943599541e+01, -2.120922387140841e+01, -2.120890133837452e+01, -2.120905917273222e+01, -2.120905917273222e+01, -3.529412767470444e+00, -3.529365872974284e+00, -3.528368294451962e+00, -3.530773058825571e+00, -3.529441884143168e+00, -3.529441884143168e+00, -7.132466808634476e-01, -7.133812813020379e-01, -7.184679033974305e-01, -7.232163354874506e-01, -7.226702603369372e-01, -7.226702603369372e-01, -2.230365865441659e-01, -2.241884980134650e-01, -8.225135580709488e-01, -1.875721982890585e-01, -2.178836312620486e-01, -2.178836312620485e-01, -1.010720349900996e-02, -1.064301953321501e-02, -5.794925181016428e-02, -5.829312177874989e-03, -8.135323025063279e-03, -8.135323025063279e-03, -5.083681245516061e+00, -5.082727741825082e+00, -5.083649793012298e+00, -5.082807833406781e+00, -5.083191055668147e+00, -5.083191055668147e+00, -2.172297869366044e+00, -2.181781995493989e+00, -2.175079260337569e+00, -2.183477391180069e+00, -2.176173706343077e+00, -2.176173706343077e+00, -5.890931623542648e-01, -6.056365106924373e-01, -5.505718998059927e-01, -5.409614738636508e-01, -5.948906930185613e-01, -5.948906930185615e-01, -1.415271030850269e-01, -2.387331701833849e-01, -1.321662125133904e-01, -1.821630867661923e+00, -1.590975891627856e-01, -1.590975891627856e-01, -4.500613915870619e-03, -5.698475181291587e-03, -4.363637364450396e-03, -9.168170373770812e-02, -5.481314003335668e-03, -5.481314003335670e-03, -5.516865890492696e-01, -5.563835819109250e-01, -5.547585539496501e-01, -5.533871193244874e-01, -5.540746353861978e-01, -5.540746353861978e-01, -5.344141056545402e-01, -5.219563851470813e-01, -5.257910794667783e-01, -5.287683062894402e-01, -5.270560080610756e-01, -5.270560080610756e-01, -6.363392215853152e-01, -2.854031783196062e-01, -3.212390216841245e-01, -3.747784006552194e-01, -3.461495733894518e-01, -3.461495733894518e-01, -4.818929674064677e-01, -5.547754970984846e-02, -7.493578321716643e-02, -3.490512652212103e-01, -1.136990372049204e-01, -1.136990372049204e-01, -1.424176986084832e-02, -1.523276876915552e-03, -3.203292696703374e-03, -1.074939819674083e-01, -5.033763876326531e-03, -5.033763876326525e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_pbe_mol_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbe_mol", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.490244469096006e+01, -2.490241564358014e+01, -2.490256299825756e+01, -2.490250156772656e+01, -2.490290674164958e+01, -2.490300385614795e+01, -2.490157157159452e+01, -2.490130178809602e+01, -2.490251700643572e+01, -2.490195658629473e+01, -2.490251700643572e+01, -2.490195658629473e+01, -3.993822389458032e+00, -3.994015119719399e+00, -3.993865823716867e+00, -3.994066590601054e+00, -3.995001760612750e+00, -3.995323379175631e+00, -3.993679202857636e+00, -3.994006689651397e+00, -3.993057172268957e+00, -3.995086292206878e+00, -3.993057172268957e+00, -3.995086292206878e+00, -7.506226723815016e-01, -7.550770506983486e-01, -7.489883810345678e-01, -7.544031246932142e-01, -7.292008468812996e-01, -7.235366688772081e-01, -7.315536218943928e-01, -7.333834994218478e-01, -7.633919406831696e-01, -7.106040837328844e-01, -7.633919406831696e-01, -7.106040837328844e-01, -2.093346474393941e-01, -2.131565903315656e-01, -2.093964181365650e-01, -2.141371449022612e-01, -8.631411606869048e-01, -9.002701326868163e-01, -1.911851670123058e-01, -1.929185827969135e-01, -2.173773753660951e-01, -1.626517995853438e-01, -2.173773753660950e-01, -1.626517995853437e-01, -1.301964963046596e-02, -1.383256037738202e-02, -1.364064414696907e-02, -1.460928397237240e-02, -7.327963097139772e-02, -7.705354518042908e-02, -7.833538594644630e-03, -7.703178766289353e-03, -1.161805408546219e-02, -6.614915548954194e-03, -1.161805408546219e-02, -6.614915548954194e-03, -6.151015685903563e+00, -6.149465316006052e+00, -6.154062339295219e+00, -6.152408600070999e+00, -6.151182612696489e+00, -6.149564800673465e+00, -6.153796806868143e+00, -6.152238631434024e+00, -6.152577674614373e+00, -6.150943625086724e+00, -6.152577674614373e+00, -6.150943625086724e+00, -2.178430589301932e+00, -2.178319951084615e+00, -2.194755445892135e+00, -2.194149847618152e+00, -2.164933933279396e+00, -2.168580152410978e+00, -2.178701504640341e+00, -2.182630775629357e+00, -2.198453457788228e+00, -2.188073492517852e+00, -2.198453457788228e+00, -2.188073492517852e+00, -6.795068427716506e-01, -6.777980629246321e-01, -7.705685772000953e-01, -7.713934148219251e-01, -6.112208370653431e-01, -6.364371023685264e-01, -6.665592659046221e-01, -6.881825557514890e-01, -7.111639952783030e-01, -6.743260325657046e-01, -7.111639952783030e-01, -6.743260325657047e-01, -1.632621351260797e-01, -1.638281692125423e-01, -2.352234538070002e-01, -2.358432748879774e-01, -1.519974089576893e-01, -1.573226871846102e-01, -2.325232433233796e+00, -2.324262444226999e+00, -1.723604297483144e-01, -1.708605420592000e-01, -1.723604297483144e-01, -1.708605420592000e-01, -5.877572546713529e-03, -6.108212584767651e-03, -7.537180019240950e-03, -7.651292009094857e-03, -5.635185921679048e-03, -5.967153639325910e-03, -1.134769400566038e-01, -1.142531470845701e-01, -5.756471321312498e-03, -7.902205110458525e-03, -5.756471321312499e-03, -7.902205110458527e-03, -7.221092266946637e-01, -7.250721541057025e-01, -7.082433980961153e-01, -7.112912419962674e-01, -7.129860703557633e-01, -7.160368764155861e-01, -7.170460951543677e-01, -7.200124213260264e-01, -7.150051388057667e-01, -7.180126168952369e-01, -7.150051388057667e-01, -7.180126168952369e-01, -7.057942505658856e-01, -7.081517817576256e-01, -5.519279354359281e-01, -5.546016230612230e-01, -5.888812122692885e-01, -5.920141404634373e-01, -6.322883351463068e-01, -6.347391795495859e-01, -6.097464731126087e-01, -6.122392110926883e-01, -6.097464731126087e-01, -6.122392110926883e-01, -8.055921181987575e-01, -8.076624716747122e-01, -2.711210333977978e-01, -2.719256336103466e-01, -3.026059799675048e-01, -3.043973352235245e-01, -3.874461717170350e-01, -3.897123606451827e-01, -3.375892141404039e-01, -3.373841949877122e-01, -3.375892141404039e-01, -3.373841949877122e-01, -5.068608247968872e-01, -5.108245826513286e-01, -7.211483439244594e-02, -7.257361692746815e-02, -9.445849804867734e-02, -9.715397208291039e-02, -3.761870421049466e-01, -3.825819034441637e-01, -1.328440642894118e-01, -1.354857806024831e-01, -1.328440642894118e-01, -1.354857806024831e-01, -1.860276445597000e-02, -1.927307979509089e-02, -2.028627318747455e-03, -2.033218385792256e-03, -4.127169700519261e-03, -4.389419660820316e-03, -1.279300799711270e-01, -1.295537462053172e-01, -5.451851943786086e-03, -7.243882775874147e-03, -5.451851943786080e-03, -7.243882775874139e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_pbe_mol_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbe_mol", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.709633010533989e-08, 0.000000000000000e+00, -1.709642632980743e-08, -1.709621150738013e-08, 0.000000000000000e+00, -1.709634011184373e-08, -1.709565164185689e-08, 0.000000000000000e+00, -1.709558838748801e-08, -1.709699559395159e-08, 0.000000000000000e+00, -1.709729991972239e-08, -1.709626848357412e-08, 0.000000000000000e+00, -1.709648301065292e-08, -1.709626848357412e-08, 0.000000000000000e+00, -1.709648301065292e-08, -2.278464480465180e-05, 0.000000000000000e+00, -2.279278963025645e-05, -2.278522404150153e-05, 0.000000000000000e+00, -2.279398454470327e-05, -2.280548433055543e-05, 0.000000000000000e+00, -2.281026400619319e-05, -2.275565991703759e-05, 0.000000000000000e+00, -2.276197036302891e-05, -2.279716874646061e-05, 0.000000000000000e+00, -2.277799788082707e-05, -2.279716874646061e-05, 0.000000000000000e+00, -2.277799788082707e-05, -1.410626809779974e-02, 0.000000000000000e+00, -1.416101413938447e-02, -1.409792002646471e-02, 0.000000000000000e+00, -1.416600125239278e-02, -1.395833598226667e-02, 0.000000000000000e+00, -1.382463531542190e-02, -1.350437322911966e-02, 0.000000000000000e+00, -1.355283914276876e-02, -1.413562829801962e-02, 0.000000000000000e+00, -1.254227227354132e-02, -1.413562829801962e-02, 0.000000000000000e+00, -1.254227227354132e-02, -1.307889333663824e+00, 0.000000000000000e+00, -1.243876973097139e+00, -1.323009580017902e+00, 0.000000000000000e+00, -1.242403600427253e+00, -8.185998262218655e-03, 0.000000000000000e+00, -7.716156537820516e-03, -1.598306870652720e+00, 0.000000000000000e+00, -1.550970055773204e+00, -1.131226780889754e+00, 0.000000000000000e+00, -2.134628182436872e+00, -1.131226780889754e+00, 0.000000000000000e+00, -2.134628182436875e+00, -3.902585094108586e+00, 0.000000000000000e+00, -3.863720148942388e+00, -4.112225399197246e+00, 0.000000000000000e+00, -4.091542833131578e+00, -2.308565460590246e+00, 0.000000000000000e+00, -2.324684800178376e+00, -3.573359118884602e+00, 0.000000000000000e+00, -3.476326941297769e+00, -3.895635294625356e+00, 0.000000000000000e+00, -9.882345752402976e+00, -3.895635294625366e+00, 0.000000000000000e+00, -9.882345752403003e+00, -5.078346789120476e-06, 0.000000000000000e+00, -5.082997443065566e-06, -5.079916060351750e-06, 0.000000000000000e+00, -5.084517297858861e-06, -5.078390227736325e-06, 0.000000000000000e+00, -5.083018313590601e-06, -5.079737434234220e-06, 0.000000000000000e+00, -5.084399564041459e-06, -5.079186040694159e-06, 0.000000000000000e+00, -5.083767831632966e-06, -5.079186040694159e-06, 0.000000000000000e+00, -5.083767831632966e-06, -1.663781064213317e-04, 0.000000000000000e+00, -1.664065881228535e-04, -1.634125194155694e-04, 0.000000000000000e+00, -1.635466661431709e-04, -1.653831323888022e-04, 0.000000000000000e+00, -1.657565571064353e-04, -1.628974092235604e-04, 0.000000000000000e+00, -1.631753000537952e-04, -1.652584387216905e-04, 0.000000000000000e+00, -1.650025369500347e-04, -1.652584387216905e-04, 0.000000000000000e+00, -1.650025369500347e-04, -2.889787084542906e-02, 0.000000000000000e+00, -2.922292613290298e-02, -2.435320790096577e-02, 0.000000000000000e+00, -2.435165511858636e-02, -4.103599835034329e-02, 0.000000000000000e+00, -3.626707434062044e-02, -4.150494298678384e-02, 0.000000000000000e+00, -3.633511953543420e-02, -2.535787281433173e-02, 0.000000000000000e+00, -3.085022450847899e-02, -2.535787281433174e-02, 0.000000000000000e+00, -3.085022450847899e-02, -1.678922286146158e+00, 0.000000000000000e+00, -1.709490529499981e+00, -7.547127058893249e-01, 0.000000000000000e+00, -7.483421425274098e-01, -1.877187762056068e+00, 0.000000000000000e+00, -1.831589623619160e+00, -2.967311574654662e-04, 0.000000000000000e+00, -2.972919455779656e-04, -1.877642263046214e+00, 0.000000000000000e+00, -2.284633857386497e+00, -1.877642263046214e+00, 0.000000000000000e+00, -2.284633857386497e+00, -5.016021940126156e+00, 0.000000000000000e+00, -4.341545301782461e+00, -4.319485569548832e+00, 0.000000000000000e+00, -3.988073312681264e+00, -2.460579733929586e+01, 0.000000000000000e+00, -2.737361081157776e+01, -2.713697822510805e+00, 0.000000000000000e+00, -2.614207704971178e+00, -1.223518846412212e+01, 0.000000000000000e+00, -1.202002339843106e+01, -1.223518846412208e+01, 0.000000000000000e+00, -1.202002339843104e+01, -3.486612247039735e-02, 0.000000000000000e+00, -3.435329435948994e-02, -3.438747875330001e-02, 0.000000000000000e+00, -3.389360130999590e-02, -3.455389643005766e-02, 0.000000000000000e+00, -3.405454761943478e-02, -3.469538473288268e-02, 0.000000000000000e+00, -3.418832894720950e-02, -3.462474030313031e-02, 0.000000000000000e+00, -3.412141626635071e-02, -3.462474030313031e-02, 0.000000000000000e+00, -3.412141626635071e-02, -3.931058052266027e-02, 0.000000000000000e+00, -3.879844522658238e-02, -4.951165139729156e-02, 0.000000000000000e+00, -4.889630696612634e-02, -4.677494972895679e-02, 0.000000000000000e+00, -4.616252241937981e-02, -4.396689327143841e-02, 0.000000000000000e+00, -4.340950264507056e-02, -4.548405957079830e-02, 0.000000000000000e+00, -4.488477988251902e-02, -4.548405957079830e-02, 0.000000000000000e+00, -4.488477988251902e-02, -2.008079957736369e-02, 0.000000000000000e+00, -2.000450128586502e-02, -4.618444415339846e-01, 0.000000000000000e+00, -4.576427167103119e-01, -3.309445380437926e-01, 0.000000000000000e+00, -3.268152422832472e-01, -1.882161905752514e-01, 0.000000000000000e+00, -1.849538345732731e-01, -2.562590897594813e-01, 0.000000000000000e+00, -2.578923619483963e-01, -2.562590897594814e-01, 0.000000000000000e+00, -2.578923619483965e-01, -6.844684043456845e-02, 0.000000000000000e+00, -6.721236870555131e-02, -2.109772454654420e+00, 0.000000000000000e+00, -2.112578619628127e+00, -2.095127747538783e+00, 0.000000000000000e+00, -2.143374195648372e+00, -2.492037896114638e-01, 0.000000000000000e+00, -2.377811423451600e-01, -2.743693945632992e+00, 0.000000000000000e+00, -3.238730311601247e+00, -2.743693945632995e+00, 0.000000000000000e+00, -3.238730311601250e+00, -3.094046302170125e+00, 0.000000000000000e+00, -3.158846609837347e+00, -1.543188362040484e+01, 0.000000000000000e+00, -2.733546600547296e+01, -9.524846633995278e+00, 0.000000000000000e+00, -1.013997624489264e+01, -3.057482376501295e+00, 0.000000000000000e+00, -2.996229519831817e+00, -2.522665542962417e+01, 0.000000000000000e+00, -1.247770743237849e+01, -2.522665542962421e+01, 0.000000000000000e+00, -1.247770743237852e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
