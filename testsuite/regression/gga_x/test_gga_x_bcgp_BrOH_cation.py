
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_bcgp_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_bcgp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.108482271905332e+01, -2.108484701632980e+01, -2.108502853904364e+01, -2.108466553336269e+01, -2.108484529056486e+01, -2.108484529056486e+01, -3.503145381852137e+00, -3.503102599188807e+00, -3.502199483067052e+00, -3.504435085551138e+00, -3.503178796024416e+00, -3.503178796024416e+00, -7.058897030109209e-01, -7.059736548653262e-01, -7.098258509719350e-01, -7.145668861690697e-01, -7.143010429088630e-01, -7.143010429088630e-01, -2.197446294329622e-01, -2.208652873636635e-01, -8.145772936772308e-01, -1.853085267029916e-01, -2.147975846572699e-01, -2.147975846572698e-01, -1.010666862734863e-02, -1.064237702516854e-02, -5.787089759287083e-02, -5.829214597705096e-03, -8.135017524489599e-03, -8.135017524489599e-03, -5.060628761671795e+00, -5.059832953648459e+00, -5.060603784146347e+00, -5.059901049291792e+00, -5.060218921883750e+00, -5.060218921883750e+00, -2.145470747176915e+00, -2.155094441258525e+00, -2.147652779200608e+00, -2.156162814120854e+00, -2.149729607196607e+00, -2.149729607196607e+00, -5.851584488573952e-01, -6.043000236378862e-01, -5.465295639148278e-01, -5.393728646779898e-01, -5.912457768788268e-01, -5.912457768788268e-01, -1.405285989780527e-01, -2.355264374817677e-01, -1.313170862353835e-01, -1.817823544710377e+00, -1.575021484199356e-01, -1.575021484199356e-01, -4.500562396605192e-03, -5.698376370763718e-03, -4.363525539409874e-03, -9.134626504010057e-02, -5.481156616319360e-03, -5.481156616319362e-03, -5.512490598276183e-01, -5.552106121960048e-01, -5.538389262723118e-01, -5.526815508645712e-01, -5.532615567248015e-01, -5.532615567248015e-01, -5.342107157459943e-01, -5.166612437773493e-01, -5.217081074402750e-01, -5.261417335636720e-01, -5.236777751817339e-01, -5.236777751817339e-01, -6.348088518863335e-01, -2.812229174748242e-01, -3.165061902340573e-01, -3.706444529471836e-01, -3.414931405924156e-01, -3.414931405924156e-01, -4.769301725282558e-01, -5.541212583308804e-02, -7.477329181807141e-02, -3.458692415492959e-01, -1.130094195396576e-01, -1.130094195396576e-01, -1.424042793536195e-02, -1.523272629287806e-03, -3.203265518997746e-03, -1.069132028844536e-01, -5.033632609505431e-03, -5.033632609505427e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_bcgp_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_bcgp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.501299155960946e+01, -2.501296225547016e+01, -2.501310878984672e+01, -2.501304739801159e+01, -2.501345107571067e+01, -2.501354704094762e+01, -2.501212801412686e+01, -2.501186042136489e+01, -2.501306313230360e+01, -2.501251050927376e+01, -2.501306313230360e+01, -2.501251050927376e+01, -4.013240395166529e+00, -4.013431265221045e+00, -4.013283692695964e+00, -4.013482453127698e+00, -4.014414621425043e+00, -4.014734944073083e+00, -4.013103512669699e+00, -4.013429635239310e+00, -4.012472548037659e+00, -4.014505463311926e+00, -4.012472548037659e+00, -4.014505463311926e+00, -7.534942897848670e-01, -7.581611182481134e-01, -7.517811686355953e-01, -7.574631999048658e-01, -7.307009545455366e-01, -7.244407525979651e-01, -7.327783301682618e-01, -7.348027651522817e-01, -7.667532499713243e-01, -7.079159358438242e-01, -7.667532499713243e-01, -7.079159358438242e-01, -2.053222512456703e-01, -2.094867003902243e-01, -2.056166515781263e-01, -2.107648703171004e-01, -8.665652998768171e-01, -9.044915492129066e-01, -1.863014396395916e-01, -1.879895610237505e-01, -2.133197081229242e-01, -1.591776618660810e-01, -2.133197081229241e-01, -1.591776618660810e-01, -1.301771738925236e-02, -1.383025426463471e-02, -1.363836267303050e-02, -1.460648749085106e-02, -7.300446095868494e-02, -7.673106191386460e-02, -7.833136284403590e-03, -7.702801447614002e-03, -1.161668276379609e-02, -6.614512651181321e-03, -1.161668276379609e-02, -6.614512651181321e-03, -6.174147974394150e+00, -6.172596410500685e+00, -6.177091374341089e+00, -6.175439973551022e+00, -6.174309685176092e+00, -6.172692837466585e+00, -6.176835290562837e+00, -6.175276082261787e+00, -6.175656795498021e+00, -6.174024668420669e+00, -6.175656795498021e+00, -6.174024668420669e+00, -2.180623454585577e+00, -2.180511149054840e+00, -2.197533942631036e+00, -2.196914304758286e+00, -2.165531648089344e+00, -2.169659199221969e+00, -2.179850189116213e+00, -2.184243165330253e+00, -2.202050983371135e+00, -2.190725589025818e+00, -2.202050983371135e+00, -2.190725589025818e+00, -6.827151158338809e-01, -6.809957455341369e-01, -7.721676705868056e-01, -7.729550185385210e-01, -6.142003263908383e-01, -6.395029137968239e-01, -6.683017889268520e-01, -6.900216798909282e-01, -7.143703876403652e-01, -6.774189920595032e-01, -7.143703876403651e-01, -6.774189920595033e-01, -1.602275545270399e-01, -1.607227109106846e-01, -2.294352966229850e-01, -2.300559560260140e-01, -1.494572870681904e-01, -1.545062186659030e-01, -2.329770545453510e+00, -2.328792436005174e+00, -1.684392675221029e-01, -1.666151833634225e-01, -1.684392675221029e-01, -1.666151833634225e-01, -5.877371246041979e-03, -6.108002382762284e-03, -7.536786019793905e-03, -7.650895971409647e-03, -5.634792846733741e-03, -5.966661308294996e-03, -1.122871180439363e-01, -1.130619642542446e-01, -5.756175912816639e-03, -7.901447322774199e-03, -5.756175912816641e-03, -7.901447322774202e-03, -7.226764753440806e-01, -7.256258695809361e-01, -7.096475092782690e-01, -7.126778752216840e-01, -7.141186524676060e-01, -7.171510998575709e-01, -7.179335627080752e-01, -7.208863127265200e-01, -7.160171613751852e-01, -7.190086880671659e-01, -7.160171613751852e-01, -7.190086880671659e-01, -7.060610880502579e-01, -7.084171930610574e-01, -5.541731480241234e-01, -5.568901863881001e-01, -5.917571539135191e-01, -5.949038536966195e-01, -6.348305193066939e-01, -6.372787174077630e-01, -6.125802263979541e-01, -6.150770313942895e-01, -6.125802263979541e-01, -6.150770313942895e-01, -8.074080694355832e-01, -8.094217492219831e-01, -2.657724193579104e-01, -2.666253683577156e-01, -2.992233456463476e-01, -3.012168231496761e-01, -3.886817983004078e-01, -3.909851855586435e-01, -3.368103341633765e-01, -3.366509689058148e-01, -3.368103341633765e-01, -3.366509689058148e-01, -5.088439350445517e-01, -5.128848606804770e-01, -7.186488556464424e-02, -7.231856825186085e-02, -9.388302444995937e-02, -9.651756369673954e-02, -3.779255309514522e-01, -3.843833901730634e-01, -1.308263124291696e-01, -1.331009906955002e-01, -1.308263124291696e-01, -1.331009906955002e-01, -1.859773948921548e-02, -1.926743226556595e-02, -2.028612805472693e-03, -2.033198937774022e-03, -4.127073670306420e-03, -4.389300459995057e-03, -1.260353773780775e-01, -1.276002810265885e-01, -5.451491549905991e-03, -7.243288115131054e-03, -5.451491549905984e-03, -7.243288115131047e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_bcgp_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_bcgp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.569798017710996e-08, 0.000000000000000e+00, -1.569806785977473e-08, -1.569786286371023e-08, 0.000000000000000e+00, -1.569798258481481e-08, -1.569733312295306e-08, 0.000000000000000e+00, -1.569726674375501e-08, -1.569866190993025e-08, 0.000000000000000e+00, -1.569895915874999e-08, -1.569791800778298e-08, 0.000000000000000e+00, -1.569816902411812e-08, -1.569791800778298e-08, 0.000000000000000e+00, -1.569816902411812e-08, -2.104269831380671e-05, 0.000000000000000e+00, -2.104966632805739e-05, -2.104316389305794e-05, 0.000000000000000e+00, -2.105066520911147e-05, -2.105983527679267e-05, 0.000000000000000e+00, -2.106371431639860e-05, -2.101735387418488e-05, 0.000000000000000e+00, -2.102257318404928e-05, -2.105448327984673e-05, 0.000000000000000e+00, -2.103557993186257e-05, -2.105448327984673e-05, 0.000000000000000e+00, -2.103557993186257e-05, -1.320626285821611e-02, 0.000000000000000e+00, -1.323636637365933e-02, -1.320570320993403e-02, 0.000000000000000e+00, -1.324347066029368e-02, -1.317218257531693e-02, 0.000000000000000e+00, -1.308320073216218e-02, -1.276147946657649e-02, 0.000000000000000e+00, -1.279527859737858e-02, -1.318152300365153e-02, 0.000000000000000e+00, -1.203810442418068e-02, -1.318152300365153e-02, 0.000000000000000e+00, -1.203810442418068e-02, -1.303188142959008e+00, 0.000000000000000e+00, -1.232711043103022e+00, -1.314087963490667e+00, 0.000000000000000e+00, -1.226597287898106e+00, -7.657233987963828e-03, 0.000000000000000e+00, -7.174339547048310e-03, -1.651054644932660e+00, 0.000000000000000e+00, -1.600786231763727e+00, -1.125534049339285e+00, 0.000000000000000e+00, -2.264785091940223e+00, -1.125534049339284e+00, 0.000000000000000e+00, -2.264785091940225e+00, -4.322131827533014e+00, 0.000000000000000e+00, -4.278971246930449e+00, -4.554180772144923e+00, 0.000000000000000e+00, -4.531111143996755e+00, -2.542537830968864e+00, 0.000000000000000e+00, -2.558527815980493e+00, -3.958087945277189e+00, 0.000000000000000e+00, -3.850622405441029e+00, -4.314631343201097e+00, 0.000000000000000e+00, -1.094618061796632e+01, -4.314631343201107e+00, 0.000000000000000e+00, -1.094618061796634e+01, -4.642729853461960e-06, 0.000000000000000e+00, -4.646999829918387e-06, -4.643715530594153e-06, 0.000000000000000e+00, -4.647954954148725e-06, -4.642746597371562e-06, 0.000000000000000e+00, -4.647005399658997e-06, -4.643592958213519e-06, 0.000000000000000e+00, -4.647873549585086e-06, -4.643265527064943e-06, 0.000000000000000e+00, -4.647485647125475e-06, -4.643265527064943e-06, 0.000000000000000e+00, -4.647485647125475e-06, -1.575815791767988e-04, 0.000000000000000e+00, -1.576089226223906e-04, -1.546399492146704e-04, 0.000000000000000e+00, -1.547700371957599e-04, -1.570004829314585e-04, 0.000000000000000e+00, -1.572476459340981e-04, -1.545209989004787e-04, 0.000000000000000e+00, -1.546815531131400e-04, -1.561880862982215e-04, 0.000000000000000e+00, -1.561727883926151e-04, -1.561880862982215e-04, 0.000000000000000e+00, -1.561727883926151e-04, -2.661238428854209e-02, 0.000000000000000e+00, -2.691035047600162e-02, -2.211373296342726e-02, 0.000000000000000e+00, -2.210865678017215e-02, -3.792065009910844e-02, 0.000000000000000e+00, -3.345290609143834e-02, -3.775843685654023e-02, 0.000000000000000e+00, -3.306234500862819e-02, -2.329785112763529e-02, 0.000000000000000e+00, -2.836531010416278e-02, -2.329785112763530e-02, 0.000000000000000e+00, -2.836531010416277e-02, -1.795917218189207e+00, 0.000000000000000e+00, -1.826816764862889e+00, -7.686825643956305e-01, 0.000000000000000e+00, -7.618347174384615e-01, -2.017407007009908e+00, 0.000000000000000e+00, -1.962687848824172e+00, -2.693364289003277e-04, 0.000000000000000e+00, -2.698431256498353e-04, -1.981974748571535e+00, 0.000000000000000e+00, -2.384463982216542e+00, -1.981974748571535e+00, 0.000000000000000e+00, -2.384463982216542e+00, -5.556218604057833e+00, 0.000000000000000e+00, -4.809103536772752e+00, -4.784540184876353e+00, 0.000000000000000e+00, -4.417450036186460e+00, -2.725425126694695e+01, 0.000000000000000e+00, -3.031940025435884e+01, -2.954404515738998e+00, 0.000000000000000e+00, -2.846403964898320e+00, -1.355250150918831e+01, 0.000000000000000e+00, -1.331328168446283e+01, -1.355250150918827e+01, 0.000000000000000e+00, -1.331328168446281e+01, -3.153892889397792e-02, 0.000000000000000e+00, -3.107319685703938e-02, -3.121586424295461e-02, 0.000000000000000e+00, -3.076426678611965e-02, -3.132837547283531e-02, 0.000000000000000e+00, -3.087262020441145e-02, -3.142413110722225e-02, 0.000000000000000e+00, -3.096275333321076e-02, -3.137638195418835e-02, 0.000000000000000e+00, -3.091771701712113e-02, -3.137638195418835e-02, 0.000000000000000e+00, -3.091771701712113e-02, -3.552089290927977e-02, 0.000000000000000e+00, -3.505783243250474e-02, -4.628379199931903e-02, 0.000000000000000e+00, -4.569074834256222e-02, -4.326174020544829e-02, 0.000000000000000e+00, -4.267860328925295e-02, -4.025352364659890e-02, 0.000000000000000e+00, -3.973857745245202e-02, -4.184786821689273e-02, 0.000000000000000e+00, -4.129075514159274e-02, -4.184786821689273e-02, 0.000000000000000e+00, -4.129075514159274e-02, -1.824508332156968e-02, 0.000000000000000e+00, -1.817111737193305e-02, -4.609533427524808e-01, 0.000000000000000e+00, -4.564350047183088e-01, -3.231848026139190e-01, 0.000000000000000e+00, -3.186159122335259e-01, -1.767871865827494e-01, 0.000000000000000e+00, -1.736600004579016e-01, -2.450379497672893e-01, 0.000000000000000e+00, -2.465131975750971e-01, -2.450379497672895e-01, 0.000000000000000e+00, -2.465131975750973e-01, -6.404693487777452e-02, 0.000000000000000e+00, -6.284465778905701e-02, -2.324665979974049e+00, 0.000000000000000e+00, -2.327579306777113e+00, -2.298682415223975e+00, 0.000000000000000e+00, -2.349806994097202e+00, -2.318951100643466e-01, 0.000000000000000e+00, -2.210261421348474e-01, -2.958882802677303e+00, 0.000000000000000e+00, -3.473159939959916e+00, -2.958882802677304e+00, 0.000000000000000e+00, -3.473159939959916e+00, -3.426045363198767e+00, 0.000000000000000e+00, -3.497678524505570e+00, -1.709450162312901e+01, 0.000000000000000e+00, -3.028045662303980e+01, -1.055079112598568e+01, 0.000000000000000e+00, -1.123211248919349e+01, -3.300004346596106e+00, 0.000000000000000e+00, -3.232007855792319e+00, -2.794208831539629e+01, 0.000000000000000e+00, -1.382049463217290e+01, -2.794208831539633e+01, 0.000000000000000e+00, -1.382049463217294e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
