
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_lambda_ch_n_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_lambda_ch_n", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.094107602281950e+01, -2.094110368951011e+01, -2.094129401997889e+01, -2.094088100982044e+01, -2.094108784243311e+01, -2.094108784243311e+01, -3.472165873709627e+00, -3.472128364145906e+00, -3.471346455532550e+00, -3.473365459735342e+00, -3.472204600226710e+00, -3.472204600226710e+00, -6.968086560090024e-01, -6.968138062947588e-01, -6.987339010217364e-01, -7.035048461652029e-01, -7.016692474517653e-01, -7.016692474517653e-01, -2.142572964440744e-01, -2.154119339858840e-01, -8.044266382978779e-01, -1.802420456912086e-01, -1.934258888144820e-01, -1.934258888144820e-01, -9.831022993404825e-03, -1.034675498496510e-02, -5.629152972202637e-02, -5.679892053073762e-03, -7.136228396675488e-03, -7.136228396675488e-03, -5.034313514475325e+00, -5.033705456537254e+00, -5.034296244038907e+00, -5.033759283964505e+00, -5.033999350562931e+00, -5.033999350562931e+00, -2.110796478368196e+00, -2.120716393469032e+00, -2.111921163644277e+00, -2.120686301108045e+00, -2.115719235212351e+00, -2.115719235212351e+00, -5.805571062994576e-01, -6.028046170782795e-01, -5.414478472395152e-01, -5.373080449503550e-01, -5.863247898481388e-01, -5.863247898481388e-01, -1.366827160933678e-01, -2.292519465347991e-01, -1.276038599901963e-01, -1.813571511176444e+00, -1.530815606524107e-01, -1.530815606524107e-01, -4.382661735708527e-03, -5.552560635372143e-03, -4.245390196523180e-03, -8.891390619704424e-02, -5.114392741954474e-03, -5.114392741954474e-03, -5.507611585776540e-01, -5.538961911218031e-01, -5.528111901451555e-01, -5.518944875165446e-01, -5.523538052776787e-01, -5.523538052776787e-01, -5.339833809504160e-01, -5.101487521916332e-01, -5.168673961540137e-01, -5.231272363241714e-01, -5.197400157454908e-01, -5.197400157454908e-01, -6.330896159048238e-01, -2.741927788801131e-01, -3.095004521924249e-01, -3.654682837620568e-01, -3.352346784157176e-01, -3.352346784157176e-01, -4.707965040784690e-01, -5.397740600944836e-02, -7.277974569418416e-02, -3.419754182273370e-01, -1.098398913780774e-01, -1.098398913780774e-01, -1.386846757920470e-02, -1.484465600430578e-03, -3.115771018449102e-03, -1.040109297857332e-01, -4.732460894025519e-03, -4.732460894025515e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_lambda_ch_n_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_lambda_ch_n", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.516005818766411e+01, -2.516015713106764e+01, -2.516057250595334e+01, -2.515910094362536e+01, -2.515987549038605e+01, -2.515987549038605e+01, -4.041796400776229e+00, -4.041841101235337e+00, -4.042974565339164e+00, -4.041772746764773e+00, -4.041947427735683e+00, -4.041947427735683e+00, -7.620738556197761e-01, -7.608556589754162e-01, -7.331786649166094e-01, -7.395246365543505e-01, -7.383883640615277e-01, -7.383883640615277e-01, -2.056455191500316e-01, -2.067434925238265e-01, -8.929215081935522e-01, -1.827880656009427e-01, -1.891686097414116e-01, -1.891686097414116e-01, -1.309336628343986e-02, -1.377810075585085e-02, -7.291911970864226e-02, -7.570494294810511e-03, -9.508945714783243e-03, -9.508945714783243e-03, -6.202375195093546e+00, -6.205106923606787e+00, -6.202497651923031e+00, -6.204909255186072e+00, -6.203761389574779e+00, -6.203761389574779e+00, -2.196902783355341e+00, -2.213929556943909e+00, -2.183200642833936e+00, -2.198013771471143e+00, -2.213208413562735e+00, -2.213208413562735e+00, -6.863196455163119e-01, -7.743966197238605e-01, -6.314869282484968e-01, -6.814458918726088e-01, -7.005825779072945e-01, -7.005825779072945e-01, -1.557986437141933e-01, -2.254731318143165e-01, -1.476381362460169e-01, -2.334525123603894e+00, -1.629007775453890e-01, -1.629007775453890e-01, -5.842127804739639e-03, -7.400682613013388e-03, -5.657460431814882e-03, -1.094708512520114e-01, -6.815540941524247e-03, -6.815540941524248e-03, -7.247815260429168e-01, -7.127806731306610e-01, -7.169225222564526e-01, -7.204101183328346e-01, -7.186583952273813e-01, -7.186583952273813e-01, -7.075364198693882e-01, -5.601235170678491e-01, -5.976662016183665e-01, -6.393001960222408e-01, -6.177185000526358e-01, -6.177185000526358e-01, -8.105074387484579e-01, -2.634901091672098e-01, -2.999854784713589e-01, -3.930445235027688e-01, -3.386638463628648e-01, -3.386638463628648e-01, -5.151005841096584e-01, -7.017321243598347e-02, -9.261241411464870e-02, -3.842352351343280e-01, -1.281789983935487e-01, -1.281789983935487e-01, -1.845432088616511e-02, -1.979171851263352e-03, -4.153617597524445e-03, -1.231323677906413e-01, -6.306698393431387e-03, -6.306698393431382e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_lambda_ch_n_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_lambda_ch_n", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-6.991367117585063e-09, -6.991320027467224e-09, -6.991037039922393e-09, -6.991739162136311e-09, -6.991381730200065e-09, -6.991381730200065e-09, -9.406539810289553e-06, -9.406843188783283e-06, -9.412932732681248e-06, -9.395204980659517e-06, -9.405996552604669e-06, -9.405996552604669e-06, -5.956665328803577e-03, -5.959724016128532e-03, -5.952987371771695e-03, -5.791586662911352e-03, -5.851441936827781e-03, -5.851441936827781e-03, -5.934927119825237e-01, -5.930590139207300e-01, -3.335475169744532e-03, -7.805600267754792e-01, -7.464289153835680e-01, -7.464289153835677e-01, -2.166901963479229e+00, -2.289304631410906e+00, -1.280932279483903e+00, -1.968984097992495e+00, -2.501605961987924e+00, -2.501605961987930e+00, -2.063181677099201e-06, -2.063493237088815e-06, -2.063181703089136e-06, -2.063456979491488e-06, -2.063347671953148e-06, -2.063347671953148e-06, -7.154799752439605e-05, -7.019843299232009e-05, -7.142282671870736e-05, -7.024223577262771e-05, -7.084762833959317e-05, -7.084762833959317e-05, -1.193971114446249e-02, -9.780660287619354e-03, -1.589226209946822e-02, -1.562155201403218e-02, -1.141099408605824e-02, -1.141099408605824e-02, -8.908623484336772e-01, -3.640538740888405e-01, -9.810100337561616e-01, -1.192261240414719e-04, -1.069512834600381e+00, -1.069512834600381e+00, -2.594366879894960e+00, -2.317341716633677e+00, -1.455339529109853e+01, -1.444107137827183e+00, -6.772529728043461e+00, -6.772529728043446e+00, -1.381558610642663e-02, -1.370517227552382e-02, -1.374380236349782e-02, -1.377635835720584e-02, -1.376012429939581e-02, -1.376012429939581e-02, -1.556370812715579e-02, -2.070513888385035e-02, -1.921973675037248e-02, -1.778002425563355e-02, -1.853484515762938e-02, -1.853484515762938e-02, -8.056958967121414e-03, -2.152979552477491e-01, -1.484687044134627e-01, -7.912436741287171e-02, -1.122448292018855e-01, -1.122448292018856e-01, -2.858015588827406e-02, -1.168314081435053e+00, -1.164440785259363e+00, -1.016208709906363e-01, -1.597521183273612e+00, -1.597521183273614e+00, -1.746441246967506e+00, -1.137189301382746e+01, -5.503704821071407e+00, -1.616188817510195e+00, -8.554300481342532e+00, -8.554300481342553e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
