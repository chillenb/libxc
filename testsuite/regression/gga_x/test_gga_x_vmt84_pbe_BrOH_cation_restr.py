
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_vmt84_pbe_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_vmt84_pbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.096187266880139e+01, -2.096189925140662e+01, -2.096208661252272e+01, -2.096168969537554e+01, -2.096188783150913e+01, -2.096188783150913e+01, -3.478295822193420e+00, -3.478256062300922e+00, -3.477422409486219e+00, -3.479532699209179e+00, -3.478331998423481e+00, -3.478331998423481e+00, -6.997613879813906e-01, -6.998259433226733e-01, -7.035774317393171e-01, -7.082803478412238e-01, -7.063734484006098e-01, -7.063734484006098e-01, -2.205571618697520e-01, -2.213028186618418e-01, -8.072498675074742e-01, -1.904139109800724e-01, -2.018091481873460e-01, -2.018091481873460e-01, -4.590832114965044e-03, -4.948375061465355e-03, -4.670452575295206e-02, -1.739750702625225e-03, -2.866336382092097e-03, -2.866336382092099e-03, -5.037112402875255e+00, -5.036462900321345e+00, -5.037093418283034e+00, -5.036519862494524e+00, -5.036777078340964e+00, -5.036777078340964e+00, -2.126867243679666e+00, -2.136308356819312e+00, -2.129309821725911e+00, -2.137627083658623e+00, -2.130914097846293e+00, -2.130914097846293e+00, -5.813437688736796e-01, -6.028772701947951e-01, -5.423741294187221e-01, -5.374253416849688e-01, -5.869748826185227e-01, -5.869748826185227e-01, -1.480206265513357e-01, -2.397408150561629e-01, -1.383682092903457e-01, -1.813767169055118e+00, -1.637372867191291e-01, -1.637372867191291e-01, -1.007710706411284e-03, -1.738496045517723e-03, -1.606517679513727e-03, -9.494450304827727e-02, -1.927433868356197e-03, -1.927433868356196e-03, -5.507700006357137e-01, -5.539570102779866e-01, -5.528485283229795e-01, -5.519166345826092e-01, -5.523830626287451e-01, -5.523830626287451e-01, -5.339856160604853e-01, -5.122071793392462e-01, -5.178824627257561e-01, -5.234837594444351e-01, -5.203782726546968e-01, -5.203782726546968e-01, -6.331806311940874e-01, -2.829437978422733e-01, -3.155434792197038e-01, -3.673675419520490e-01, -3.388508418697432e-01, -3.388508418697432e-01, -4.727815289395438e-01, -4.174284458333958e-02, -7.193988546123008e-02, -3.429963813428631e-01, -1.191440031049423e-01, -1.191440031049424e-01, -7.058833877734412e-03, -1.943584974731886e-05, -5.177692931378336e-04, -1.127695632861656e-01, -1.754963069128275e-03, -1.754963069128273e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_vmt84_pbe_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_vmt84_pbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.508517627634116e+01, -2.508527894693743e+01, -2.508570451280079e+01, -2.508417762243399e+01, -2.508498206997444e+01, -2.508498206997444e+01, -4.020404416240357e+00, -4.020456466998861e+00, -4.021758992222639e+00, -4.020258762851539e+00, -4.020563740279099e+00, -4.020563740279099e+00, -7.525539664427241e-01, -7.511677109624865e-01, -7.186379479124694e-01, -7.251364928153246e-01, -7.241851460649299e-01, -7.241851460649299e-01, -1.943056643907531e-01, -1.956092168951486e-01, -8.836232217050608e-01, -1.754478319054975e-01, -1.788590295143261e-01, -1.788590295143261e-01, -8.511296348639039e-03, -8.855363025622075e-03, -1.200022099341250e-01, -5.188553271503881e-03, -6.472750215713866e-03, -6.472750215713870e-03, -6.192087236640766e+00, -6.194967154190670e+00, -6.192215819878562e+00, -6.194758272760612e+00, -6.193549078787854e+00, -6.193549078787854e+00, -2.149462189126019e+00, -2.167606341778389e+00, -2.132634718302911e+00, -2.148458274295793e+00, -2.167874719559454e+00, -2.167874719559454e+00, -6.835302234004627e-01, -7.741245976683492e-01, -6.282477870897165e-01, -6.810075551593850e-01, -6.982535987976242e-01, -6.982535987976242e-01, -1.635202175402752e-01, -2.135622671792242e-01, -1.577325372669266e-01, -2.333792790560783e+00, -1.609958863712009e-01, -1.609958863712009e-01, -3.776551756156458e-03, -5.082932009234015e-03, -3.883972339182084e-03, -1.329331511485481e-01, -4.680977852712856e-03, -4.680977852712855e-03, -7.247497531965117e-01, -7.125530167653780e-01, -7.167832809044741e-01, -7.203282391215710e-01, -7.185496614889011e-01, -7.185496614889011e-01, -7.075290217730239e-01, -5.534482899007218e-01, -5.941496065041967e-01, -6.379977994827125e-01, -6.154434517010822e-01, -6.154434517010822e-01, -8.101666410404944e-01, -2.486781946881205e-01, -2.863503165369336e-01, -3.870813127285335e-01, -3.287576097721835e-01, -3.287576097721834e-01, -5.086968083408537e-01, -1.141548216924389e-01, -1.345043303425154e-01, -3.808178707140307e-01, -1.385249515045695e-01, -1.385249515045695e-01, -1.143415214864926e-02, -2.213006260176797e-04, -2.388917145241256e-03, -1.360443696018754e-01, -4.337770565733351e-03, -4.337770565733350e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_vmt84_pbe_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_vmt84_pbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-7.251161310532246e-09, -7.251105212334909e-09, -7.250791086146302e-09, -7.251627054272371e-09, -7.251198218296363e-09, -7.251198218296363e-09, -9.879705036941299e-06, -9.879934251705222e-06, -9.884262264355578e-06, -9.869235926547433e-06, -9.879027246772502e-06, -9.879027246772502e-06, -6.436641095105589e-03, -6.445208890618400e-03, -6.582843382779428e-03, -6.397219733533905e-03, -6.459093875122919e-03, -6.459093875122919e-03, -7.398781323728842e-01, -7.330010248241378e-01, -3.578005623633861e-03, -1.064142613386589e+00, -9.797784100200490e-01, -9.797784100200492e-01, 3.531893315988176e+02, 2.941047716773197e+02, 3.461555474610004e+01, 2.095941075468636e+03, 1.100605665239958e+03, 1.100605665239959e+03, -2.119893413877028e-06, -2.119781387036427e-06, -2.119875584584691e-06, -2.119776889384208e-06, -2.119843748556091e-06, -2.119843748556091e-06, -7.952766926472318e-05, -7.787523177342402e-05, -7.974831855950206e-05, -7.829140674006463e-05, -7.849409538143175e-05, -7.849409538143175e-05, -1.246193185181716e-02, -9.903620855309275e-03, -1.667844218452234e-02, -1.588726591082947e-02, -1.186018348937502e-02, -1.186018348937502e-02, -1.140002180860558e+00, -4.816100123574212e-01, -1.166660717833078e+00, -1.206430952746660e-04, -1.487697794535641e+00, -1.487697794535641e+00, 4.441344007112742e+03, 2.345651186546730e+03, 8.285188126750549e+03, 1.008293046409379e+00, 3.917721146121335e+03, 3.917721146121335e+03, -1.387849589073359e-02, -1.386951595795517e-02, -1.387267393512011e-02, -1.387570365736790e-02, -1.387425050405762e-02, -1.387425050405762e-02, -1.560007575192685e-02, -2.232944446427312e-02, -2.024280063301867e-02, -1.832310184136933e-02, -1.930463907376749e-02, -1.930463907376749e-02, -8.167738737494221e-03, -2.711359789372470e-01, -1.770506251142490e-01, -8.625678361861859e-02, -1.275068609644751e-01, -1.275068609644751e-01, -3.087677663045550e-02, 3.803924846461340e+01, 1.014837158915757e+01, -1.083906599775154e-01, -1.777564265403790e+00, -1.777564265403790e+00, 9.553776909021283e+01, 1.921802292341032e+04, 1.256905078516939e+04, -1.487942070392352e+00, 5.259311769600597e+03, 5.259311769600625e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
