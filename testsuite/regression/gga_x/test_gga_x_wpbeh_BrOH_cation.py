
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_wpbeh_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_wpbeh", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.092869433403842e+01, -2.092871831010476e+01, -2.092889808777036e+01, -2.092853987394027e+01, -2.092871716319731e+01, -2.092871716319731e+01, -3.478375011622941e+00, -3.478331378529006e+00, -3.477408019628484e+00, -3.479674143476339e+00, -3.478406809001922e+00, -3.478406809001922e+00, -7.010288596469476e-01, -7.010825788345030e-01, -7.033598849545322e-01, -7.081829614907762e-01, -7.066394053435857e-01, -7.066394053435857e-01, -2.154046323973267e-01, -2.163988416668532e-01, -8.090685073204893e-01, -1.826073902366715e-01, -2.106929197220694e-01, -2.106929197220692e-01, -1.011217353115165e-02, -1.064899076753667e-02, -5.850430240468659e-02, -5.830218125271262e-03, -8.138160769592900e-03, -8.138160769592900e-03, -5.024253601388857e+00, -5.023526833246805e+00, -5.024231380449717e+00, -5.023589568974550e+00, -5.023878724044814e+00, -5.023878724044814e+00, -2.124303132549299e+00, -2.134487098589600e+00, -2.124867783912286e+00, -2.133926826672731e+00, -2.129580691015668e+00, -2.129580691015668e+00, -5.808967841789198e-01, -6.013063596867931e-01, -5.426490897585736e-01, -5.361621211493539e-01, -5.868822074605561e-01, -5.868822074605562e-01, -1.385495508034139e-01, -2.318582779962251e-01, -1.295518096707824e-01, -1.809158596153861e+00, -1.551935699575423e-01, -1.551935699575423e-01, -4.501092166508293e-03, -5.699392564393920e-03, -4.364675784403482e-03, -9.081538466137931e-02, -5.482775661017878e-03, -5.482775661017880e-03, -5.500741674059586e-01, -5.525476968312142e-01, -5.516224563746641e-01, -5.508956483818421e-01, -5.512531612830305e-01, -5.512531612830305e-01, -5.336377330071844e-01, -5.131482068561917e-01, -5.180716487241653e-01, -5.222865846089350e-01, -5.198346149104294e-01, -5.198346149104294e-01, -6.314734016255725e-01, -2.758626903044161e-01, -3.100638968832035e-01, -3.678833579208733e-01, -3.367663848195063e-01, -3.367663848195063e-01, -4.736529855114181e-01, -5.600873594539644e-02, -7.518114170513383e-02, -3.435657452919331e-01, -1.115541474001600e-01, -1.115541474001600e-01, -1.425425098602782e-02, -1.523316297485062e-03, -3.203544967432723e-03, -1.056508537297260e-01, -5.034982848438753e-03, -5.034982848438748e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_wpbeh_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_wpbeh", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.481507637999412e+01, -2.481504818217769e+01, -2.481520364466394e+01, -2.481514060813459e+01, -2.481556363345927e+01, -2.481566965109247e+01, -2.481412763978378e+01, -2.481383897782035e+01, -2.481515466455991e+01, -2.481453604411598e+01, -2.481515466455991e+01, -2.481453604411598e+01, -3.969797700164384e+00, -3.969999490717373e+00, -3.969842132522819e+00, -3.970052624017646e+00, -3.971010857375319e+00, -3.971341763938520e+00, -3.969630783692747e+00, -3.969966507421447e+00, -3.969033160470365e+00, -3.971072338002912e+00, -3.969033160470365e+00, -3.971072338002912e+00, -7.549562595466536e-01, -7.574754460287892e-01, -7.540185177756116e-01, -7.570167613319475e-01, -7.440399038078888e-01, -7.417053063391061e-01, -7.482020235603677e-01, -7.488913945459431e-01, -7.632515880318193e-01, -7.315512850571860e-01, -7.632515880318193e-01, -7.315512850571860e-01, -1.961499376477820e-01, -2.012635764637286e-01, -1.969680896001191e-01, -2.038570845055737e-01, -8.669118339791174e-01, -8.972269166316712e-01, -1.830824876765104e-01, -1.846188647927236e-01, -2.040032958033685e-01, -1.564071292587351e-01, -2.040032958033683e-01, -1.564071292587349e-01, -1.303761627510324e-02, -1.385400846281681e-02, -1.366186322562659e-02, -1.463530102644520e-02, -7.404004557048961e-02, -7.713179991072344e-02, -7.837274743008505e-03, -7.706682717173464e-03, -1.163080012305993e-02, -6.618657614425923e-03, -1.163080012305993e-02, -6.618657614425923e-03, -6.150530002498923e+00, -6.148960110332304e+00, -6.154059756092207e+00, -6.152370266597681e+00, -6.150721663856624e+00, -6.149074128456701e+00, -6.153750438017332e+00, -6.152172130490834e+00, -6.152341287497630e+00, -6.150673365993694e+00, -6.152341287497630e+00, -6.150673365993694e+00, -2.235741869092775e+00, -2.235635645332551e+00, -2.249681243536719e+00, -2.249129207538429e+00, -2.228290088226358e+00, -2.230319752572285e+00, -2.240482940264928e+00, -2.242663099312061e+00, -2.248974219104179e+00, -2.243437512972784e+00, -2.248974219104179e+00, -2.243437512972784e+00, -6.759566515532309e-01, -6.742723659436375e-01, -7.734653422442325e-01, -7.743063348726076e-01, -6.075242517722252e-01, -6.327481348606233e-01, -6.687134359233798e-01, -6.903408985140700e-01, -7.083764681194186e-01, -6.713639000103240e-01, -7.083764681194189e-01, -6.713639000103245e-01, -1.564123412454597e-01, -1.570351891602422e-01, -2.221467515959703e-01, -2.226195986918119e-01, -1.452413879017865e-01, -1.505781955921802e-01, -2.334046602829770e+00, -2.333073669487253e+00, -1.659863612592520e-01, -1.645014899795787e-01, -1.659863612592520e-01, -1.645014899795787e-01, -5.879441558731005e-03, -6.110164246968535e-03, -7.540839030756560e-03, -7.654969925051052e-03, -5.638837170014336e-03, -5.971727622098801e-03, -1.076410875626852e-01, -1.083732466117575e-01, -5.759214700151319e-03, -7.909246521357136e-03, -5.759214700151321e-03, -7.909246521357140e-03, -7.239011539842821e-01, -7.268337744843700e-01, -7.109247477715687e-01, -7.139876931865007e-01, -7.156188415673737e-01, -7.186648233408336e-01, -7.194343626305494e-01, -7.223859354627411e-01, -7.175410242755021e-01, -7.205378134551548e-01, -7.175410242755021e-01, -7.205378134551548e-01, -7.067477717267430e-01, -7.091010764090125e-01, -5.537743296157039e-01, -5.561230753906641e-01, -5.853431348036146e-01, -5.884387867490738e-01, -6.314906145330489e-01, -6.339988987458053e-01, -6.068402080532573e-01, -6.093675309115033e-01, -6.068402080532573e-01, -6.093675309115033e-01, -8.085364805227492e-01, -8.106570601172490e-01, -2.536962701250347e-01, -2.545839754530406e-01, -2.978336182413259e-01, -3.012995091009596e-01, -3.919656762514059e-01, -3.939956330988610e-01, -3.485030432741678e-01, -3.483263147469430e-01, -3.485030432741676e-01, -3.483263147469429e-01, -5.093517107903842e-01, -5.127143062394223e-01, -7.321691017733174e-02, -7.363019809505829e-02, -9.086995322118020e-02, -9.298424765200503e-02, -3.752079814622616e-01, -3.812007001814787e-01, -1.266784798483081e-01, -1.296231600936358e-01, -1.266784798483080e-01, -1.296231600936356e-01, -1.864956167823026e-02, -1.932569046409355e-02, -2.028762020091499e-03, -2.033398894562082e-03, -4.128061182191456e-03, -4.390526299825439e-03, -1.219317978343600e-01, -1.235228296473085e-01, -5.455199462443495e-03, -7.249407419418407e-03, -5.455199462443490e-03, -7.249407419418399e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_wpbeh_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_wpbeh", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.564604657024289e-08, 0.000000000000000e+00, -1.564612960258840e-08, -1.564587498561030e-08, 0.000000000000000e+00, -1.564600493337511e-08, -1.564524522271391e-08, 0.000000000000000e+00, -1.564512515063000e-08, -1.564718486577588e-08, 0.000000000000000e+00, -1.564759672151270e-08, -1.564594831579934e-08, 0.000000000000000e+00, -1.564654935078447e-08, -1.564594831579934e-08, 0.000000000000000e+00, -1.564654935078447e-08, -2.137595389385926e-05, 0.000000000000000e+00, -2.138282612605704e-05, -2.137640177783333e-05, 0.000000000000000e+00, -2.138380037022636e-05, -2.139250545037753e-05, 0.000000000000000e+00, -2.139619737097757e-05, -2.135067608104476e-05, 0.000000000000000e+00, -2.135578896992026e-05, -2.138800308049990e-05, 0.000000000000000e+00, -2.136834917078808e-05, -2.138800308049990e-05, 0.000000000000000e+00, -2.136834917078808e-05, -1.264368045533776e-02, 0.000000000000000e+00, -1.282152299428450e-02, -1.259054627426478e-02, 0.000000000000000e+00, -1.281155835318162e-02, -1.185177458129158e-02, 0.000000000000000e+00, -1.153866363010230e-02, -1.136714626334863e-02, 0.000000000000000e+00, -1.147442603934208e-02, -1.297086916745449e-02, 0.000000000000000e+00, -1.024368983332486e-02, -1.297086916745449e-02, 0.000000000000000e+00, -1.024368983332486e-02, -1.358720194316329e+00, 0.000000000000000e+00, -1.264831463753845e+00, -1.358903248914644e+00, 0.000000000000000e+00, -1.237530203924001e+00, -7.377244238087971e-03, 0.000000000000000e+00, -7.173744967795020e-03, -1.641069338933030e+00, 0.000000000000000e+00, -1.594073473310560e+00, -1.169585127674590e+00, 0.000000000000000e+00, -2.261747047227542e+00, -1.169585127674589e+00, 0.000000000000000e+00, -2.261747047227551e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -2.265816385801622e+00, 0.000000000000000e+00, -3.072601853456764e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -4.441483702451465e-06, 0.000000000000000e+00, -4.445788219251769e-06, -4.436993550913362e-06, 0.000000000000000e+00, -4.441449064251586e-06, -4.441223202883983e-06, 0.000000000000000e+00, -4.445630985105590e-06, -4.437371596697488e-06, 0.000000000000000e+00, -4.441689956021562e-06, -4.439201060196095e-06, 0.000000000000000e+00, -4.443617565397014e-06, -4.439201060196095e-06, 0.000000000000000e+00, -4.443617565397014e-06, -1.382701325199852e-04, 0.000000000000000e+00, -1.382921301113646e-04, -1.364330941608116e-04, 0.000000000000000e+00, -1.365297257484390e-04, -1.359834152351820e-04, 0.000000000000000e+00, -1.366842141624527e-04, -1.343815143086632e-04, 0.000000000000000e+00, -1.350257597146799e-04, -1.389929441609332e-04, 0.000000000000000e+00, -1.376236784031756e-04, -1.389929441609332e-04, 0.000000000000000e+00, -1.376236784031756e-04, -2.690105513886058e-02, 0.000000000000000e+00, -2.719780317096150e-02, -1.861028985312981e-02, 0.000000000000000e+00, -1.852401326603206e-02, -3.852328467138190e-02, 0.000000000000000e+00, -3.394356669604338e-02, -3.323264965329157e-02, 0.000000000000000e+00, -2.923426298325453e-02, -2.330712042125884e-02, 0.000000000000000e+00, -2.849068758557853e-02, -2.330712042125878e-02, 0.000000000000000e+00, -2.849068758557854e-02, -1.877239614187253e+00, 0.000000000000000e+00, -1.895548971060134e+00, -7.907861921942174e-01, 0.000000000000000e+00, -7.846075604479480e-01, -2.204256755070585e+00, 0.000000000000000e+00, -2.082133326298386e+00, -2.242318681854255e-04, 0.000000000000000e+00, -2.246006091685534e-04, -1.951026287732524e+00, 0.000000000000000e+00, -2.333444308074043e+00, -1.951026287732524e+00, 0.000000000000000e+00, -2.333444308074043e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -4.229303639581478e+00, 0.000000000000000e+00, -4.090505747885141e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -2.346841758551136e-02, 0.000000000000000e+00, -2.306897986848468e-02, -2.605892977171752e-02, 0.000000000000000e+00, -2.560729276982433e-02, -2.523715146970455e-02, 0.000000000000000e+00, -2.479486759989744e-02, -2.447923519570765e-02, 0.000000000000000e+00, -2.406311090382577e-02, -2.486634755673378e-02, 0.000000000000000e+00, -2.443688999880253e-02, -2.486634755673378e-02, 0.000000000000000e+00, -2.443688999880253e-02, -2.530322762670954e-02, 0.000000000000000e+00, -2.496444941219944e-02, -4.479863939201173e-02, 0.000000000000000e+00, -4.434663281962453e-02, -4.392831733730058e-02, 0.000000000000000e+00, -4.334896550458726e-02, -3.915188732825754e-02, 0.000000000000000e+00, -3.860384704649501e-02, -4.215807741269359e-02, 0.000000000000000e+00, -4.157228906118959e-02, -4.215807741269359e-02, 0.000000000000000e+00, -4.157228906118959e-02, -1.559109448516739e-02, 0.000000000000000e+00, -1.542825180983159e-02, -4.820598450907584e-01, 0.000000000000000e+00, -4.767668882700883e-01, -3.039975949004695e-01, 0.000000000000000e+00, -2.960013181980597e-01, -1.649806112790788e-01, 0.000000000000000e+00, -1.625294392953482e-01, -2.078545109922508e-01, 0.000000000000000e+00, -2.091462114268766e-01, -2.078545109922509e-01, 0.000000000000000e+00, -2.091462114268769e-01, -6.155393309398319e-02, 0.000000000000000e+00, -6.073022051896711e-02, -1.587551171782066e+00, 0.000000000000000e+00, -1.668731818891211e+00, -4.290605915395842e+00, 0.000000000000000e+00, -4.375366291887577e+00, -2.309409650832303e-01, 0.000000000000000e+00, -2.212771938434928e-01, -3.384343044191783e+00, 0.000000000000000e+00, -3.710339453792513e+00, -3.384343044191799e+00, 0.000000000000000e+00, -3.710339453792508e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -3.823879301213537e+00, 0.000000000000000e+00, -3.710520915316839e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
