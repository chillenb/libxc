
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_apbe_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_apbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.113552964333337e+01, -2.113554980060126e+01, -2.113572254795707e+01, -2.113539081628032e+01, -2.113553958128631e+01, -2.113553958128631e+01, -3.513874261236635e+00, -3.513839703772207e+00, -3.513035114601673e+00, -3.515166972895391e+00, -3.513871455920566e+00, -3.513871455920566e+00, -7.102555259082534e-01, -7.103985085224790e-01, -7.162034459486497e-01, -7.204374842180792e-01, -7.103033825110471e-01, -7.103033825110471e-01, -2.225383137018374e-01, -2.233553903441586e-01, -8.239920492711167e-01, -1.843251767313330e-01, -2.227589328427064e-01, -2.227589328427064e-01, -1.701382186330845e-02, -1.781740353828798e-02, -7.074869441616567e-02, -8.176239127835525e-03, -1.763180750264283e-02, -1.763180750264283e-02, -5.068071172846985e+00, -5.067236152000236e+00, -5.067992670479505e+00, -5.067343274443570e+00, -5.067633009060653e+00, -5.067633009060653e+00, -2.156544633008424e+00, -2.165786580162919e+00, -2.158775854678083e+00, -2.165967446356166e+00, -2.159904026541888e+00, -2.159904026541888e+00, -5.798491091153931e-01, -5.973250038635007e-01, -5.526773077181700e-01, -5.502349368816110e-01, -5.970268717646395e-01, -5.970268717646395e-01, -1.470560335076818e-01, -2.436213529168841e-01, -1.444981522551625e-01, -1.817134553019664e+00, -1.629592581092172e-01, -1.629592581092172e-01, -7.887647525362229e-03, -9.013188780829396e-03, -6.755605425643412e-03, -9.622486551133445e-02, -8.212374059060213e-03, -8.212374059060213e-03, -5.591592422110744e-01, -5.630131065094485e-01, -5.616516961496002e-01, -5.605814482248987e-01, -5.611177136814760e-01, -5.611177136814760e-01, -5.401027320401026e-01, -5.245577848242821e-01, -5.292847920305460e-01, -5.331701118850959e-01, -5.310181124277115e-01, -5.310181124277115e-01, -6.274574783049101e-01, -2.894744393489614e-01, -3.230800346749627e-01, -3.730244290458697e-01, -3.462411669934453e-01, -3.462411669934452e-01, -4.764748513542575e-01, -6.588821242258552e-02, -8.767040093441439e-02, -3.411524186156266e-01, -1.211347890227582e-01, -1.211347890227582e-01, -1.993188656416975e-02, -2.468814000211385e-03, -4.689283824712369e-03, -1.154764187791056e-01, -6.979897485465014e-03, -6.979897485465004e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_apbe_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_apbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.496609677941408e+01, -2.496618521419904e+01, -2.496658412363214e+01, -2.496513590315906e+01, -2.496614338026649e+01, -2.496614338026649e+01, -4.004928016865509e+00, -4.004967613614875e+00, -4.006221799737633e+00, -4.004910829516057e+00, -4.004965442815507e+00, -4.004965442815507e+00, -7.476218827523570e-01, -7.465529842117303e-01, -7.216104348777861e-01, -7.273984550550192e-01, -7.472325704712924e-01, -7.472325704712924e-01, -2.102576983134850e-01, -2.115231117375538e-01, -9.088905250521861e-01, -1.841047815903890e-01, -2.106007585781904e-01, -2.106007585781904e-01, -2.258801012799569e-02, -2.364485861742638e-02, -8.969813934766704e-02, -1.089260206814637e-02, -2.339877015766886e-02, -2.339877015766886e-02, -6.160908624113484e+00, -6.163753233336211e+00, -6.161198899114230e+00, -6.163410735027359e+00, -6.162367776249548e+00, -6.162367776249548e+00, -2.176700082239476e+00, -2.192585703876462e+00, -2.169946934995882e+00, -2.182193209969664e+00, -2.196721384621994e+00, -2.196721384621994e+00, -6.735162025477478e-01, -7.644413243994509e-01, -6.371115917772395e-01, -6.895923591414966e-01, -7.037553533701336e-01, -7.037553533701336e-01, -1.634921240028173e-01, -2.338963605884691e-01, -1.594919626194741e-01, -2.324840100008151e+00, -1.704159728545240e-01, -1.704159728545240e-01, -1.050849475522468e-02, -1.200508374953113e-02, -8.998568584210538e-03, -1.165103782090215e-01, -1.093833928596843e-02, -1.093833928596843e-02, -7.364473820720965e-01, -7.239584251243113e-01, -7.283457558703950e-01, -7.318044530878226e-01, -7.300672086441623e-01, -7.300672086441623e-01, -7.142551581410124e-01, -5.687580407963262e-01, -6.059558815725868e-01, -6.448336637432824e-01, -6.247080964965734e-01, -6.247080964965736e-01, -8.001352830756207e-01, -2.729604391329896e-01, -3.092509914141930e-01, -3.936318515242437e-01, -3.452697021678026e-01, -3.452697021678025e-01, -5.113624352752597e-01, -8.442762547502497e-02, -1.087063021816568e-01, -3.774132577374888e-01, -1.379118407668012e-01, -1.379118407668012e-01, -2.644048591421952e-02, -3.291415242830216e-03, -6.250236823207160e-03, -1.313035366594879e-01, -9.298003457552086e-03, -9.298003457552072e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_apbe_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_apbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-8.139445259116867e-09, -8.139400903526097e-09, -8.139094690865434e-09, -8.139823183847324e-09, -8.139422773077405e-09, -8.139422773077405e-09, -1.088700036021889e-05, -1.088730459518221e-05, -1.089386673051377e-05, -1.087333032435907e-05, -1.088697132725985e-05, -1.088697132725985e-05, -6.781568423366737e-03, -6.780211222951303e-03, -6.634203251346491e-03, -6.477997153610562e-03, -6.781227991401019e-03, -6.781227991401019e-03, -6.730826201637560e-01, -6.714927069206782e-01, -3.665580151593971e-03, -9.270364935982377e-01, -6.731348177985703e-01, -6.731348177985703e-01, -4.334658341475039e+00, -4.347077040656947e+00, -1.846285531971201e+00, -3.066011545090734e+00, -4.515872266852615e+00, -4.515872266852615e+00, -2.416452333616644e-06, -2.417034921675966e-06, -2.416501143065844e-06, -2.416954332510198e-06, -2.416766856393114e-06, -2.416766856393114e-06, -8.068809163150860e-05, -7.928665280967149e-05, -8.039057707173887e-05, -7.931027322988987e-05, -8.009130755422189e-05, -8.009130755422189e-05, -1.451827765457116e-02, -1.208364410959923e-02, -1.767131609193528e-02, -1.703342490821539e-02, -1.280103293224880e-02, -1.280103293224880e-02, -1.041791826967460e+00, -3.839730161061783e-01, -1.195202347991785e+00, -1.411185561736891e-04, -1.132212115948125e+00, -1.132212115948125e+00, -3.252531486863059e+00, -3.259554820769911e+00, -9.329306142097906e+00, -1.829445087925529e+00, -4.814543074715994e+00, -4.814543074715988e+00, -1.540828432200724e-02, -1.525729432882227e-02, -1.531109216561780e-02, -1.535316840343088e-02, -1.533215679593948e-02, -1.533215679593948e-02, -1.764684250913836e-02, -2.250802110700065e-02, -2.109432099228135e-02, -1.979521282864065e-02, -2.047965884663005e-02, -2.047965884663005e-02, -9.949933354708842e-03, -2.249904750546174e-01, -1.572891744552008e-01, -8.904882398510879e-02, -1.215279158941620e-01, -1.215279158941621e-01, -3.321859912597977e-02, -1.556513642323482e+00, -1.567566159508872e+00, -1.245601561835425e-01, -1.772882516867228e+00, -1.772882516867229e+00, -3.257594849101828e+00, -5.604431282502157e+00, -4.826029867148138e+00, -2.177014228601988e+00, -7.030880940072203e+00, -7.030880940072187e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
