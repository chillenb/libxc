
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_pw86_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pw86", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.103953987674332e+01, -2.103955540483915e+01, -2.103971176835229e+01, -2.103947895122577e+01, -2.103958852464489e+01, -2.103958852464489e+01, -3.513360739028815e+00, -3.513305930014968e+00, -3.512124722964470e+00, -3.514845353622353e+00, -3.513379961319687e+00, -3.513379961319687e+00, -7.133931205113351e-01, -7.135686322838539e-01, -7.189064807211852e-01, -7.236966726850653e-01, -7.216686863274044e-01, -7.216686863274044e-01, -2.201168529727571e-01, -2.214546819657601e-01, -8.219810832672174e-01, -1.854042028979521e-01, -2.155358544138040e-01, -2.155358544138039e-01, -2.439317361489939e-02, -2.502847566657702e-02, -7.590776505471505e-02, -1.768205772638955e-02, -2.109151586198805e-02, -2.109151586198804e-02, -5.031413053170272e+00, -5.030273967437775e+00, -5.031373777947390e+00, -5.030367910452451e+00, -5.030827867727306e+00, -5.030827867727306e+00, -2.173186022054684e+00, -2.182882023531571e+00, -2.175382068685672e+00, -2.184027815547875e+00, -2.177380565815247e+00, -2.177380565815247e+00, -5.854273178854010e-01, -5.996428518085892e-01, -5.479460798410365e-01, -5.350667671336036e-01, -5.904750587307900e-01, -5.904750587307901e-01, -1.463752845829174e-01, -2.350804262136811e-01, -1.381396410926715e-01, -1.804063197235501e+00, -1.592704521540481e-01, -1.592704521540481e-01, -1.472604352490101e-02, -1.716308893834657e-02, -1.216864935397082e-02, -1.029359608593546e-01, -1.504008269593886e-02, -1.504008269593887e-02, -5.490102972940166e-01, -5.509951490605136e-01, -5.500656057843759e-01, -5.494729898302857e-01, -5.497467020292621e-01, -5.497467020292621e-01, -5.330700665593583e-01, -5.219815330781661e-01, -5.237614147686586e-01, -5.236661107681078e-01, -5.234645013496784e-01, -5.234645013496784e-01, -6.298075718732691e-01, -2.813948322261016e-01, -3.187511816998733e-01, -3.750340702749155e-01, -3.456694319983419e-01, -3.456694319983419e-01, -4.819877163730316e-01, -7.434764555040238e-02, -9.091240738541161e-02, -3.485896254398922e-01, -1.196908039802162e-01, -1.196908039802162e-01, -3.066387174244072e-02, -6.625524101402014e-03, -1.113488777260772e-02, -1.146645383539168e-01, -1.399119187142185e-02, -1.399119187142183e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_pw86_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pw86", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.417609842086403e+01, -2.417607149750999e+01, -2.417622928360447e+01, -2.417616653395928e+01, -2.417659280814699e+01, -2.417670288082357e+01, -2.417511645100553e+01, -2.417482071090433e+01, -2.417617925415704e+01, -2.417553245742395e+01, -2.417617925415704e+01, -2.417553245742395e+01, -3.869546170696181e+00, -3.869687157431293e+00, -3.869582489346544e+00, -3.869728458866723e+00, -3.870518187660822e+00, -3.870788006918598e+00, -3.869528166070825e+00, -3.869793343919925e+00, -3.868822972901151e+00, -3.870690231346259e+00, -3.868822972901151e+00, -3.870690231346259e+00, -7.422370613423321e-01, -7.442301814840254e-01, -7.414577422067019e-01, -7.438407224968518e-01, -7.329224083360624e-01, -7.312261664664650e-01, -7.372838515880926e-01, -7.377805642124503e-01, -7.489880672023100e-01, -7.330021721846257e-01, -7.489880672023100e-01, -7.330021721846257e-01, -2.128089629648685e-01, -2.184302939868713e-01, -2.139113733275154e-01, -2.204298467077078e-01, -8.520278720123043e-01, -8.787656624902124e-01, -1.783229559231640e-01, -1.803829079796233e-01, -2.214926669732421e-01, -1.405934571941814e-01, -2.214926669732420e-01, -1.405934571941813e-01, -1.921767339158205e-02, -1.996717567897442e-02, -1.967798516961727e-02, -2.053997802654550e-02, -6.488881892796147e-02, -6.755541758492314e-02, -1.422312949996244e-02, -1.411772417687182e-02, -1.792388315232570e-02, -1.161369625298947e-02, -1.792388315232571e-02, -1.161369625298947e-02, -6.022125071009965e+00, -6.020545934241062e+00, -6.026624588704640e+00, -6.024892274364317e+00, -6.022365708852243e+00, -6.020688672461710e+00, -6.026226392640369e+00, -6.024637007957342e+00, -6.024434687295598e+00, -6.022728210497326e+00, -6.024434687295598e+00, -6.022728210497326e+00, -2.204851408601575e+00, -2.204748825577713e+00, -2.217852222184856e+00, -2.217324339911958e+00, -2.200136018729794e+00, -2.201248427750385e+00, -2.211165593672531e+00, -2.212548684080322e+00, -2.216240454767997e+00, -2.211843801326963e+00, -2.216240454767997e+00, -2.211843801326963e+00, -6.582056107100123e-01, -6.565611499174820e-01, -7.695279431743413e-01, -7.706608517361154e-01, -5.923799607755432e-01, -6.164047240252037e-01, -6.622240942937675e-01, -6.832634907356703e-01, -6.899476533427064e-01, -6.537583802002808e-01, -6.899476533427069e-01, -6.537583802002808e-01, -1.384018986928608e-01, -1.391777774851541e-01, -2.281014916842048e-01, -2.289803256282914e-01, -1.276934728026677e-01, -1.328824650643507e-01, -2.324292316833005e+00, -2.323367932059516e+00, -1.510384894567888e-01, -1.546497168661755e-01, -1.510384894567888e-01, -1.546497168661755e-01, -1.156182634911200e-02, -1.200414778675248e-02, -1.363737299482033e-02, -1.387080405935005e-02, -9.633424448369940e-03, -9.870762027522930e-03, -9.447138050036892e-02, -9.512649910477144e-02, -1.045345580237823e-02, -1.269343638235895e-02, -1.045345580237824e-02, -1.269343638235896e-02, -7.244732679596324e-01, -7.274255165911141e-01, -7.077960987739370e-01, -7.110151361668542e-01, -7.142665950408164e-01, -7.174317538562629e-01, -7.192232380583408e-01, -7.222356517595582e-01, -7.168073613846688e-01, -7.198922355192882e-01, -7.168073613846688e-01, -7.198922355192882e-01, -7.073126918889612e-01, -7.096653100594427e-01, -5.441174443281326e-01, -5.463280440543261e-01, -5.710705758224612e-01, -5.739432100423763e-01, -6.169071421530093e-01, -6.194568115272928e-01, -5.908795599930089e-01, -5.933457592106798e-01, -5.908795599930089e-01, -5.933457592106798e-01, -8.032674287605134e-01, -8.058765734216187e-01, -2.748510555249039e-01, -2.760004563348260e-01, -3.139058810727466e-01, -3.159019032252040e-01, -3.857301578340008e-01, -3.876945954961211e-01, -3.467835281258006e-01, -3.464201951039421e-01, -3.467835281258003e-01, -3.464201951039421e-01, -5.006733966293139e-01, -5.038231370379186e-01, -6.435646623788276e-02, -6.467704469753058e-02, -8.046345173047868e-02, -8.239021144579778e-02, -3.677004987874603e-01, -3.732856841057017e-01, -1.110177724597764e-01, -1.142695881479193e-01, -1.110177724597765e-01, -1.142695881479194e-01, -2.451260147236497e-02, -2.501481938189108e-02, -5.450176965953330e-03, -5.154939596345605e-03, -8.766000638289263e-03, -9.041162226914314e-03, -1.068019449653397e-01, -1.082344860783937e-01, -9.418863517475085e-03, -1.199454253785797e-02, -9.418863517475080e-03, -1.199454253785794e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_pw86_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pw86", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.962999527632030e-08, 0.000000000000000e+00, -1.963010200808734e-08, -1.962981204987471e-08, 0.000000000000000e+00, -1.962996885846607e-08, -1.962908157917877e-08, 0.000000000000000e+00, -1.962896251695480e-08, -1.963115401525065e-08, 0.000000000000000e+00, -1.963160276462040e-08, -1.962989328304117e-08, 0.000000000000000e+00, -1.963044145611240e-08, -1.962989328304117e-08, 0.000000000000000e+00, -1.963044145611240e-08, -2.607625440474106e-05, 0.000000000000000e+00, -2.608843057815019e-05, -2.607727554266641e-05, 0.000000000000000e+00, -2.609033570840566e-05, -2.611089046061332e-05, 0.000000000000000e+00, -2.611906233764530e-05, -2.603567477446881e-05, 0.000000000000000e+00, -2.604607416634961e-05, -2.608945776786605e-05, 0.000000000000000e+00, -2.607368382372107e-05, -2.608945776786605e-05, 0.000000000000000e+00, -2.607368382372107e-05, -1.471729987710029e-02, 0.000000000000000e+00, -1.495283264560130e-02, -1.464849939828945e-02, 0.000000000000000e+00, -1.493726993362718e-02, -1.377217703256817e-02, 0.000000000000000e+00, -1.340183520223583e-02, -1.320792434357048e-02, 0.000000000000000e+00, -1.333363630028140e-02, -1.519488536856335e-02, 0.000000000000000e+00, -1.139092869285548e-02, -1.519488536856335e-02, 0.000000000000000e+00, -1.139092869285548e-02, -1.191422711472626e+00, 0.000000000000000e+00, -1.115404066979352e+00, -1.193397239269118e+00, 0.000000000000000e+00, -1.105283582385418e+00, -8.594950827247629e-03, 0.000000000000000e+00, -8.476735801765285e-03, -1.877642221672295e+00, 0.000000000000000e+00, -1.804584431925496e+00, -1.025648508772349e+00, 0.000000000000000e+00, -3.901370848724071e+00, -1.025648508772349e+00, 0.000000000000000e+00, -3.901370848724079e+00, -4.119923520881572e+03, 0.000000000000000e+00, -3.544465718735853e+03, -3.757749907825420e+03, 0.000000000000000e+00, -3.176333081655740e+03, -4.479742639975972e+01, 0.000000000000000e+00, -3.921544649656400e+01, -1.354088578291672e+04, 0.000000000000000e+00, -1.394499521465307e+04, -5.421059830670175e+03, 0.000000000000000e+00, -3.050354443718317e+04, -5.421059830670175e+03, 0.000000000000000e+00, -3.050354443718318e+04, -5.556971274714272e-06, 0.000000000000000e+00, -5.562484288296529e-06, -5.548136703411933e-06, 0.000000000000000e+00, -5.553952248466636e-06, -5.556484648545393e-06, 0.000000000000000e+00, -5.562193280219167e-06, -5.548908091210747e-06, 0.000000000000000e+00, -5.554445259053229e-06, -5.552476029517013e-06, 0.000000000000000e+00, -5.558226162561444e-06, -5.552476029517013e-06, 0.000000000000000e+00, -5.558226162561444e-06, -1.605304978860246e-04, 0.000000000000000e+00, -1.605558067945687e-04, -1.584668423442569e-04, 0.000000000000000e+00, -1.585777589607042e-04, -1.575293492196515e-04, 0.000000000000000e+00, -1.584720274346952e-04, -1.558178013097491e-04, 0.000000000000000e+00, -1.566647747038451e-04, -1.614978618977182e-04, 0.000000000000000e+00, -1.598373574987142e-04, -1.614978618977182e-04, 0.000000000000000e+00, -1.598373574987142e-04, -3.332947455189676e-02, 0.000000000000000e+00, -3.370599842140831e-02, -1.974893435969592e-02, 0.000000000000000e+00, -1.948047661597556e-02, -4.684457133710584e-02, 0.000000000000000e+00, -4.169177727179185e-02, -3.818246418363425e-02, 0.000000000000000e+00, -3.382186802011841e-02, -2.918249497731795e-02, 0.000000000000000e+00, -3.556616015056969e-02, -2.918249497731787e-02, 0.000000000000000e+00, -3.556616015056967e-02, -3.820043762280066e+00, 0.000000000000000e+00, -3.776095709591155e+00, -7.754721241989430e-01, 0.000000000000000e+00, -7.661417611183940e-01, -4.992037143139075e+00, 0.000000000000000e+00, -4.406627786700777e+00, -2.326616285402774e-04, 0.000000000000000e+00, -2.329261489320597e-04, -3.070273924340405e+00, 0.000000000000000e+00, -3.069834164448204e+00, -3.070273924340405e+00, 0.000000000000000e+00, -3.069834164448204e+00, -3.093391586053005e+04, 0.000000000000000e+00, -2.662108706331787e+04, -1.602370528052071e+04, 0.000000000000000e+00, -1.497086021308050e+04, -6.451604631159788e+04, 0.000000000000000e+00, -5.863949625516029e+04, -1.370295825531171e+01, 0.000000000000000e+00, -1.330126751883047e+01, -4.640723160288495e+04, 0.000000000000000e+00, -2.148400918867909e+04, -4.640723160288482e+04, 0.000000000000000e+00, -2.148400918867905e+04, -1.771408896264077e-02, 0.000000000000000e+00, -1.726754015624188e-02, -2.719519282624954e-02, 0.000000000000000e+00, -2.655880799815293e-02, -2.425174371348391e-02, 0.000000000000000e+00, -2.364429880902265e-02, -2.146611334916089e-02, 0.000000000000000e+00, -2.095475995343795e-02, -2.289419635253202e-02, 0.000000000000000e+00, -2.233337598901470e-02, -2.289419635253202e-02, 0.000000000000000e+00, -2.233337598901470e-02, -1.599381922373962e-02, 0.000000000000000e+00, -1.575388841911374e-02, -5.223729687464080e-02, 0.000000000000000e+00, -5.174034265355604e-02, -5.316506924609481e-02, 0.000000000000000e+00, -5.257425645674306e-02, -4.924972440830006e-02, 0.000000000000000e+00, -4.854914020070615e-02, -5.247257816735098e-02, 0.000000000000000e+00, -5.177703486512347e-02, -5.247257816735098e-02, 0.000000000000000e+00, -5.177703486512347e-02, -1.704232516009305e-02, 0.000000000000000e+00, -1.666060141566930e-02, -4.232138561003384e-01, 0.000000000000000e+00, -4.182823465752304e-01, -2.918345189218286e-01, 0.000000000000000e+00, -2.883376589698106e-01, -1.917071828451624e-01, 0.000000000000000e+00, -1.888735370898699e-01, -2.359392579655868e-01, 0.000000000000000e+00, -2.377795246739318e-01, -2.359392579655872e-01, 0.000000000000000e+00, -2.377795246739319e-01, -7.168661222901811e-02, 0.000000000000000e+00, -7.079220036136695e-02, -4.538804937394424e+01, 0.000000000000000e+00, -4.464560766056363e+01, -2.168476297784024e+01, 0.000000000000000e+00, -2.017384517472393e+01, -2.721293725326080e-01, 0.000000000000000e+00, -2.617183489821636e-01, -8.355270057199158e+00, 0.000000000000000e+00, -7.988433947212083e+00, -8.355270057199146e+00, 0.000000000000000e+00, -7.988433947212077e+00, -1.583086720579502e+03, 0.000000000000000e+00, -1.464305942397101e+03, -6.239723917536279e+05, 0.000000000000000e+00, -7.799526269025487e+05, -9.346177845392397e+04, 0.000000000000000e+00, -8.264019841441854e+04, -9.645169652797788e+00, 0.000000000000000e+00, -9.218079917911734e+00, -7.056126789320860e+04, 0.000000000000000e+00, -2.689255783377494e+04, -7.056126789320874e+04, 0.000000000000000e+00, -2.689255783377508e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
