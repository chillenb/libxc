
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_pbepow_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbepow", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.103107801214336e+01, -2.103110078771323e+01, -2.103127770086821e+01, -2.103093729959982e+01, -2.103110489772784e+01, -2.103110489772784e+01, -3.499386419741608e+00, -3.499338458679567e+00, -3.498316248999431e+00, -3.500759012109255e+00, -3.499413271524680e+00, -3.499413271524680e+00, -7.103553985765260e-01, -7.106353018764455e-01, -7.206235712586598e-01, -7.251226224758759e-01, -7.229839805411519e-01, -7.229839805411519e-01, -2.313137881003062e-01, -2.321871623017337e-01, -8.173324947114530e-01, -1.948256591359933e-01, -2.096924956155610e-01, -2.096924956155610e-01, -1.009051431390694e-02, -1.062022673937618e-02, -5.813231384168023e-02, -5.828820935195168e-03, -7.323796429175859e-03, -7.323796429090998e-03, -5.046158866543437e+00, -5.045369196035532e+00, -5.046134081689742e+00, -5.045436755502832e+00, -5.045751961896464e+00, -5.045751961896464e+00, -2.182792872672016e+00, -2.190815032016793e+00, -2.189111157755450e+00, -2.196170548762719e+00, -2.184182165261720e+00, -2.184182165261720e+00, -5.840077190363351e-01, -6.030961063813789e-01, -5.455549684526600e-01, -5.377887212650713e-01, -5.891512961818698e-01, -5.891512961818698e-01, -1.449142288314359e-01, -2.484918956917406e-01, -1.348996937461126e-01, -1.814353205414008e+00, -1.643072595200921e-01, -1.643072595200921e-01, -4.497463646470111e-03, -5.698167483940775e-03, -4.356885513248900e-03, -9.282392336400141e-02, -5.248704074234778e-03, -5.248704074234781e-03, -5.507930158065568e-01, -5.541393408953778e-01, -5.529575232638957e-01, -5.519791329531429e-01, -5.524671984475686e-01, -5.524671984475686e-01, -5.339903417078239e-01, -5.195869546496541e-01, -5.213977000225342e-01, -5.246474379884359e-01, -5.225273996920747e-01, -5.225273996920747e-01, -6.334571563495063e-01, -2.964782961163708e-01, -3.303883844639403e-01, -3.741734697629592e-01, -3.505583735400601e-01, -3.505583735400601e-01, -4.799030990508762e-01, -5.569873598383727e-02, -7.545054269284289e-02, -3.466174653154963e-01, -1.159252477940297e-01, -1.159252477940385e-01, -1.423732679054411e-02, -1.523287698090734e-03, -3.197341481647211e-03, -1.094604993765529e-01, -4.856720257866095e-03, -4.856720257935303e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_pbepow_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbepow", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.481806516263153e+01, -2.481818215869029e+01, -2.481864700357632e+01, -2.481690745314822e+01, -2.481782681427488e+01, -2.481782681427488e+01, -3.940810689068131e+00, -3.940891955574012e+00, -3.942866589560782e+00, -3.940181050838024e+00, -3.941003123089521e+00, -3.941003123089521e+00, -7.178572645357215e-01, -7.159961851789104e-01, -6.746629261069610e-01, -6.810679799076872e-01, -6.803654380679633e-01, -6.803654380679633e-01, -2.088236285180768e-01, -2.072406402486431e-01, -8.488351339391029e-01, -2.051326821993900e-01, -2.055472681414904e-01, -2.055472681414886e-01, -1.344567466176736e-02, -1.415030075720976e-02, -7.624235689970704e-02, -7.770229394079377e-03, -9.761635716439116e-03, -9.761635717333468e-03, -6.156740243883423e+00, -6.160158587934599e+00, -6.156891102770818e+00, -6.159908991326904e+00, -6.158477022126379e+00, -6.158477022126379e+00, -2.014820719845960e+00, -2.032806224485432e+00, -1.997813334359984e+00, -2.012955188693212e+00, -2.033844479062712e+00, -2.033844479062712e+00, -6.733471426383656e-01, -7.732502299863555e-01, -6.162211762205370e-01, -6.795670184786820e-01, -6.898785794448771e-01, -6.898785794448771e-01, -1.738247259942136e-01, -2.469750080153243e-01, -1.638050443120613e-01, -2.331447898821547e+00, -1.843817732769288e-01, -1.843817732769288e-01, -5.995810559373119e-03, -7.596004039830730e-03, -5.807441052960136e-03, -1.179307912678368e-01, -6.996197302208437e-03, -6.996197302452871e-03, -7.246548384027465e-01, -7.118236286068141e-01, -7.163444643485984e-01, -7.200747415085912e-01, -7.182097882804406e-01, -7.182097882804406e-01, -7.075086537742211e-01, -5.289088620474992e-01, -5.809793337688790e-01, -6.334684099464102e-01, -6.071995417334491e-01, -6.071995417334491e-01, -8.090643020062340e-01, -2.715726494470473e-01, -2.853587315150125e-01, -3.664612724347797e-01, -3.092589383058367e-01, -3.092589383058366e-01, -4.853351642846260e-01, -7.320487172632603e-02, -9.790111626542233e-02, -3.679077610220080e-01, -1.417188613023129e-01, -1.417188613022774e-01, -1.896203833920258e-02, -2.030984580730914e-03, -4.262699346399159e-03, -1.352841572398606e-01, -6.473779635057534e-03, -6.473779634246223e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_pbepow_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbepow", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-8.161066858588307e-09, -8.160975957428842e-09, -8.160543529005907e-09, -8.161896582933170e-09, -8.161191602806923e-09, -8.161191602806923e-09, -1.160357912994885e-05, -1.160349908798532e-05, -1.160050528307625e-05, -1.159689073993723e-05, -1.160236437594838e-05, -1.160236437594838e-05, -8.178012529926773e-03, -8.201780276707408e-03, -8.583600593479353e-03, -8.338377834405421e-03, -8.416802068642379e-03, -8.416802068642379e-03, -7.385744663006175e-01, -7.542334382232729e-01, -4.473511622342803e-03, -7.412190999163284e-01, -8.040966221993169e-01, -8.040966221993175e-01, -1.233025473047680e+00, -1.302976121249384e+00, -7.599506385627496e-01, -1.119136299554365e+00, -1.422455011413837e+00, -1.422454686043597e+00, -2.311668026907334e-06, -2.309971480072546e-06, -2.311583491405320e-06, -2.310085839075401e-06, -2.310811304518558e-06, -2.310811304518558e-06, -1.037684214757186e-04, -1.016077568391214e-04, -1.039689145543849e-04, -1.021188657787351e-04, -1.023980023195418e-04, -1.023980023195418e-04, -1.433064938869071e-02, -1.029232550172256e-02, -1.953692204177633e-02, -1.674733449883579e-02, -1.344523706502989e-02, -1.344523706502989e-02, -6.533415724564784e-01, -3.828992893012502e-01, -7.002653952992973e-01, -1.251032182411159e-04, -9.004639358581239e-01, -9.004639358581239e-01, -1.474344572569327e+00, -1.317162308167545e+00, -8.274166557734763e+00, -9.278200984066142e-01, -3.850412645466335e+00, -3.850412778878352e+00, -1.405988169650589e-02, -1.438716536499047e-02, -1.427092395701782e-02, -1.417606059398671e-02, -1.422344507202279e-02, -1.422344507202279e-02, -1.569352925382188e-02, -2.825762016582061e-02, -2.399414537425010e-02, -2.018073857510937e-02, -2.204033991148430e-02, -2.204033991148430e-02, -8.520353443123291e-03, -2.609120787843521e-01, -2.044365151611234e-01, -1.111867996037076e-01, -1.638891275022338e-01, -1.638891275022346e-01, -3.921448549377970e-02, -6.893565895389235e-01, -7.100423824794043e-01, -1.335199440716559e-01, -1.123178040296489e+00, -1.123178040304063e+00, -9.950743675623961e-01, -6.460617083054314e+00, -3.127385245094009e+00, -1.108357230194820e+00, -4.863264249393850e+00, -4.863265415864981e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
