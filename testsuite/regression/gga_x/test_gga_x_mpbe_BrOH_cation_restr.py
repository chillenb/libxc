
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_mpbe_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_mpbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.095946625901881e+01, -2.095949296848774e+01, -2.095968067723026e+01, -2.095928187677325e+01, -2.095948103062448e+01, -2.095948103062448e+01, -3.477570728492264e+00, -3.477531251917939e+00, -3.476704110465977e+00, -3.478802916371367e+00, -3.477607226928646e+00, -3.477607226928646e+00, -6.993756221274451e-01, -6.994311187982305e-01, -7.028804627322629e-01, -7.075964515724694e-01, -7.057016548674709e-01, -7.057016548674709e-01, -2.190379726057503e-01, -2.199332637231188e-01, -8.068914745821154e-01, -1.867438704260515e-01, -1.992855387284468e-01, -1.992855387284468e-01, -1.001068198785715e-02, -1.053629798620478e-02, -5.771883175220552e-02, -5.782446065976136e-03, -7.265646928627961e-03, -7.265646928627956e-03, -5.036785725117069e+00, -5.036140864831902e+00, -5.036766932574596e+00, -5.036197475971968e+00, -5.036452771234532e+00, -5.036452771234532e+00, -2.124502716279276e+00, -2.134033539409868e+00, -2.126700847872533e+00, -2.135104719651112e+00, -2.128709499227081e+00, -2.128709499227081e+00, -5.812520175651950e-01, -6.028673454945771e-01, -5.422647853218018e-01, -5.374105985929509e-01, -5.868995255272156e-01, -5.868995255272156e-01, -1.422247076435756e-01, -2.364712319644003e-01, -1.327040577859306e-01, -1.813739942738169e+00, -1.591870792844950e-01, -1.591870792844950e-01, -4.461651189940281e-03, -5.652836521263911e-03, -4.322269003313313e-03, -9.197363894007719e-02, -5.207000186369534e-03, -5.207000186369534e-03, -5.507680806528470e-01, -5.539485724772280e-01, -5.528428549858653e-01, -5.519128580882755e-01, -5.523783815372418e-01, -5.523783815372418e-01, -5.339848807393721e-01, -5.119403647946659e-01, -5.177614721101832e-01, -5.234424133555684e-01, -5.203040903879742e-01, -5.203040903879742e-01, -6.331685357659789e-01, -2.807406091939599e-01, -3.143375347606586e-01, -3.671102810293875e-01, -3.382660673508147e-01, -3.382660673508147e-01, -4.725224040955207e-01, -5.530155054884227e-02, -7.489501878882406e-02, -3.428695093027375e-01, -1.141800373736969e-01, -1.141800373736970e-01, -1.412539591740255e-02, -1.511141266716804e-03, -3.171869449783111e-03, -1.080193410331984e-01, -4.818125135035386e-03, -4.818125135035384e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_mpbe_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_mpbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.509396881760701e+01, -2.509407098866856e+01, -2.509449518209177e+01, -2.509297570753318e+01, -2.509377614814987e+01, -2.509377614814987e+01, -4.023158701174251e+00, -4.023209618946661e+00, -4.024486104178782e+00, -4.023031775808264e+00, -4.023316733210732e+00, -4.023316733210732e+00, -7.540710147893759e-01, -7.527209176709788e-01, -7.213801798581447e-01, -7.278282730663926e-01, -7.268298148458218e-01, -7.268298148458218e-01, -1.991959738685025e-01, -2.001290488875706e-01, -8.850264545265017e-01, -1.828306732840825e-01, -1.854980569556560e-01, -1.854980569556560e-01, -1.334102591472540e-02, -1.404053344469577e-02, -7.570752026068578e-02, -7.708735482606843e-03, -9.684853797740776e-03, -9.684853797740789e-03, -6.193223398673815e+00, -6.196085623379276e+00, -6.193351249484657e+00, -6.195878079113136e+00, -6.194676203829119e+00, -6.194676203829119e+00, -2.158745605708851e+00, -2.176545524518710e+00, -2.142852835226192e+00, -2.158347260554614e+00, -2.176542590027381e+00, -2.176542590027381e+00, -6.838730299306655e-01, -7.741536341243485e-01, -6.286623698048405e-01, -6.810540062802455e-01, -6.985312209402988e-01, -6.985312209402988e-01, -1.633841389373309e-01, -2.218090624723303e-01, -1.553319320743649e-01, -2.333871284954445e+00, -1.667667989645640e-01, -1.667667989645640e-01, -5.948240247231865e-03, -7.535906428109035e-03, -5.761668256046544e-03, -1.154880870210296e-01, -6.941048465974200e-03, -6.941048465974202e-03, -7.247539485412305e-01, -7.125774004878537e-01, -7.167986138132000e-01, -7.203377020517137e-01, -7.185618786572803e-01, -7.185618786572803e-01, -7.075303537798154e-01, -5.544965615023641e-01, -5.946119388714733e-01, -6.381442697281901e-01, -6.157187541098640e-01, -6.157187541098640e-01, -8.102028455832457e-01, -2.555472075589276e-01, -2.906822856589334e-01, -3.880953723101461e-01, -3.310164482944923e-01, -3.310164482944922e-01, -5.097157408310272e-01, -7.271334640497247e-02, -9.692367418865176e-02, -3.813120136780629e-01, -1.350577470819845e-01, -1.350577470819846e-01, -1.881717164133855e-02, -2.014804049343174e-03, -4.228830865651300e-03, -1.299686540262345e-01, -6.422726112530314e-03, -6.422726112530302e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_mpbe_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_mpbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-7.220776461080020e-09, -7.220721577744887e-09, -7.220411551685829e-09, -7.221229470071773e-09, -7.220810277781268e-09, -7.220810277781268e-09, -9.820152553162029e-06, -9.820394431684397e-06, -9.825020699118267e-06, -9.809520803342178e-06, -9.819495686618881e-06, -9.819495686618881e-06, -6.364185577839514e-03, -6.371535229901163e-03, -6.472716324932916e-03, -6.292067513104838e-03, -6.354025454519401e-03, -6.354025454519401e-03, -6.885912594096353e-01, -6.862334946336622e-01, -3.543079812480178e-03, -8.975937342012333e-01, -8.711377044573122e-01, -8.711377044573118e-01, -9.678801931822620e-01, -1.024483467237144e+00, -7.500732708984454e-01, -8.712897106831899e-01, -1.110765757960855e+00, -1.110765757956242e+00, -2.113535576283322e-06, -2.113475413766837e-06, -2.113519932600094e-06, -2.113467029187962e-06, -2.113512337816272e-06, -2.113512337816272e-06, -7.808671340369339e-05, -7.650575919594263e-05, -7.820213646076339e-05, -7.681283750691429e-05, -7.714098734349484e-05, -7.714098734349484e-05, -1.239864700474124e-02, -9.889531485574735e-03, -1.657997606501229e-02, -1.585772999051384e-02, -1.180703893831354e-02, -1.180703893831354e-02, -8.842537862968195e-01, -4.243834319275798e-01, -9.420522308725409e-01, -1.204793204370208e-04, -1.180457744679857e+00, -1.180457744679857e+00, -1.146429286978216e+00, -1.025606076493076e+00, -6.454654374263488e+00, -1.135982118223080e+00, -3.003521686139649e+00, -3.003521686136868e+00, -1.386874029334639e-02, -1.385054828141760e-02, -1.385706325217960e-02, -1.386277527334954e-02, -1.385999192686711e-02, -1.385999192686711e-02, -1.559197247613166e-02, -2.208734109156745e-02, -2.011178732762538e-02, -1.826151675131832e-02, -1.921248907642808e-02, -1.921248907642808e-02, -8.155194574999967e-03, -2.504568897257488e-01, -1.692242627867274e-01, -8.511745633582765e-02, -1.243581014846333e-01, -1.243581014846333e-01, -3.053054250699124e-02, -6.646104277404742e-01, -7.723099368211341e-01, -1.074509718112942e-01, -1.502068899024483e+00, -1.502068899024482e+00, -7.884227636945031e-01, -5.013657284322548e+00, -2.430111419269161e+00, -1.461133831297285e+00, -3.792769609239804e+00, -3.792769609247944e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
