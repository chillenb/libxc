
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_lbm_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_lbm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=False, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.430163478126330e+01, -3.430165550927121e+01, -3.430189972712607e+01, -3.430155726855787e+01, -3.430164444407333e+01, -3.430164444407333e+01, -5.729062307850053e+00, -5.728992027963089e+00, -5.727297027754086e+00, -5.731432942726459e+00, -5.729050565892154e+00, -5.729050565892154e+00, -1.169297515439321e+00, -1.169780393430356e+00, -1.186619402383043e+00, -1.193213690590517e+00, -1.169465315950472e+00, -1.169465315950472e+00, -3.774476824597626e-01, -3.777171090084804e-01, -1.348776939353588e+00, -3.373040863593908e-01, -3.774644275293175e-01, -3.774644275293175e-01, -1.235725487317987e-01, -1.248755169417810e-01, -2.152107853363293e-01, -1.144114859084098e-01, -1.236636889988496e-01, -1.236636889988496e-01, -8.191650011555934e+00, -8.189527179790693e+00, -8.191445931780216e+00, -8.189795102107617e+00, -8.190542995458269e+00, -8.190542995458269e+00, -3.571931039864480e+00, -3.585467467150627e+00, -3.578152491638075e+00, -3.588651093730458e+00, -3.573102818800843e+00, -3.573102818800843e+00, -9.431440421743245e-01, -9.569791725016235e-01, -8.998155311641979e-01, -8.849788535088570e-01, -9.692101408777835e-01, -9.692101408777835e-01, -3.048606248009793e-01, -4.289700470890669e-01, -2.963883122021312e-01, -2.911415552594685e+00, -3.124446072208940e-01, -3.124446072208940e-01, -1.122596889536632e-01, -1.152918364901147e-01, -8.817503820962305e-02, -2.392228962535028e-01, -1.046771231759195e-01, -1.046771231759195e-01, -8.901371207649894e-01, -9.011427941140422e-01, -8.973526809211321e-01, -8.943060635092538e-01, -8.958415115266956e-01, -8.958415115266956e-01, -8.589026796922090e-01, -8.604098456962522e-01, -8.624741472147349e-01, -8.624323042951116e-01, -8.622801098899604e-01, -8.622801098899604e-01, -1.005961843839029e+00, -4.955983146909225e-01, -5.424888979975263e-01, -6.139146130248713e-01, -5.747234959583756e-01, -5.747234959583756e-01, -7.825152092448054e-01, -2.164750452414006e-01, -2.375860371041884e-01, -5.582289063114497e-01, -2.610384452567335e-01, -2.610384452567335e-01, -1.355217000564105e-01, -8.210537769063035e-02, -9.401603201701564e-02, -2.482916097307578e-01, -9.390248567523712e-02, -9.390248567523714e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_lbm_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_lbm", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=False, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
