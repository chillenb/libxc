
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_optb86b_vdw_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_optb86b_vdw", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.048401246760342e+01, -2.048405047429193e+01, -2.048426774811451e+01, -2.048370129435417e+01, -2.048399123608222e+01, -2.048399123608222e+01, -3.374740277435616e+00, -3.374718536467560e+00, -3.374298880942796e+00, -3.375669744876073e+00, -3.374795823075384e+00, -3.374795823075384e+00, -6.691543705105283e-01, -6.689647848556959e-01, -6.660639974679622e-01, -6.707941297193798e-01, -6.719498841024566e-01, -6.719498841024566e-01, -2.034714129189343e-01, -2.042479277126698e-01, -7.751397256042669e-01, -1.791796023868223e-01, -2.012626162777927e-01, -2.012626162777927e-01, -2.340249162949087e-02, -2.415287555093858e-02, -8.291863714494216e-02, -1.616948964094524e-02, -1.991832231232542e-02, -1.991832231232541e-02, -4.950029653169169e+00, -4.950010403407152e+00, -4.950036571450623e+00, -4.950019441130484e+00, -4.950015524595662e+00, -4.950015524595662e+00, -2.009260524308033e+00, -2.019726687389659e+00, -2.008095839303855e+00, -2.017291192750796e+00, -2.015686161616594e+00, -2.015686161616594e+00, -5.660229861705481e-01, -5.979732120106552e-01, -5.267814493438068e-01, -5.318219057294661e-01, -5.735834598267217e-01, -5.735834598267218e-01, -1.517729911714252e-01, -2.226427561334407e-01, -1.444744030910192e-01, -1.799811568003715e+00, -1.584592804184579e-01, -1.584592804184579e-01, -1.327438752849709e-02, -1.571664899035030e-02, -1.131678540423919e-02, -1.114467791179936e-01, -1.403364740949472e-02, -1.403364740949473e-02, -5.491934229788480e-01, -5.496608809644420e-01, -5.494984555656348e-01, -5.493581930767302e-01, -5.494278854037193e-01, -5.494278854037193e-01, -5.332571660884937e-01, -4.902571406845742e-01, -5.017041705828522e-01, -5.135069487807334e-01, -5.072778001590212e-01, -5.072778001590212e-01, -6.275562821011000e-01, -2.609048440947915e-01, -2.922188681622994e-01, -3.498840309404504e-01, -3.176379156660064e-01, -3.176379156660064e-01, -4.521532504187366e-01, -8.103213546256265e-02, -9.953859694883282e-02, -3.301263532052837e-01, -1.257906465988658e-01, -1.257906465988658e-01, -3.020102606120544e-02, -5.697577247369670e-03, -9.928360502312501e-03, -1.215662604273864e-01, -1.302058025232436e-02, -1.302058025232435e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_optb86b_vdw_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_optb86b_vdw", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.559415814015077e+01, -2.559412728983932e+01, -2.559426724692424e+01, -2.559420653682328e+01, -2.559459728826871e+01, -2.559468478489181e+01, -2.559336559765042e+01, -2.559311473286916e+01, -2.559422417380031e+01, -2.559372834564435e+01, -2.559422417380031e+01, -2.559372834564435e+01, -4.120476965627772e+00, -4.120631641160967e+00, -4.120516259973628e+00, -4.120676374525303e+00, -4.121524318526932e+00, -4.121812596135949e+00, -4.120441793950815e+00, -4.120731762467629e+00, -4.119704821482723e+00, -4.121702623947342e+00, -4.119704821482723e+00, -4.121702623947342e+00, -7.723210031613650e-01, -7.778212512145146e-01, -7.702856823957617e-01, -7.770302097852968e-01, -7.433411772712749e-01, -7.341161402288338e-01, -7.441032160277309e-01, -7.470865055547954e-01, -7.874273667578177e-01, -6.973047788601264e-01, -7.874273667578177e-01, -6.973047788601264e-01, -1.762103022466688e-01, -1.841602127176211e-01, -1.789785338870342e-01, -1.883191710823688e-01, -8.886730086027148e-01, -9.294937848915772e-01, -1.368760884076597e-01, -1.385205247129660e-01, -1.842657586885366e-01, -1.126401597429143e-01, -1.842657586885365e-01, -1.126401597429142e-01, -2.107044720964998e-02, -2.203310068973406e-02, -2.171784077225434e-02, -2.283677952278020e-02, -7.430820857087131e-02, -7.658400954566108e-02, -1.470385064803892e-02, -1.455748363916416e-02, -1.940324034213388e-02, -1.211851813048568e-02, -1.940324034213388e-02, -1.211851813048570e-02, -6.291824594967152e+00, -6.290270307623408e+00, -6.294160726025330e+00, -6.292527280654585e+00, -6.291955552344215e+00, -6.290348699449706e+00, -6.293960107156415e+00, -6.292399067803929e+00, -6.293020525084986e+00, -6.291403947663303e+00, -6.293020525084986e+00, -6.291403947663303e+00, -2.207075548358703e+00, -2.206953970428995e+00, -2.227064282976059e+00, -2.226369813053009e+00, -2.183608172255263e+00, -2.190291520117606e+00, -2.200916414041255e+00, -2.207745589319871e+00, -2.235677330464551e+00, -2.219572676727784e+00, -2.235677330464551e+00, -2.219572676727784e+00, -6.999920400689507e-01, -6.982081567090529e-01, -7.799321960697073e-01, -7.805293056871085e-01, -6.307432769497541e-01, -6.562458938876933e-01, -6.768676266352739e-01, -6.990753784953941e-01, -7.313081388591255e-01, -6.938569387908917e-01, -7.313081388591255e-01, -6.938569387908918e-01, -1.156782077276980e-01, -1.156305533013596e-01, -1.782009736275207e-01, -1.790512001717954e-01, -1.102183625011844e-01, -1.123427127679627e-01, -2.351748255090973e+00, -2.350729593558759e+00, -1.188005953366830e-01, -1.189658620903268e-01, -1.188005953366830e-01, -1.189658620903268e-01, -1.169672512567899e-02, -1.214725359756655e-02, -1.411184974404582e-02, -1.434571091958396e-02, -1.012753583095773e-02, -1.047413035821288e-02, -9.234744949773689e-02, -9.310942579226544e-02, -1.080631303717836e-02, -1.358269148423179e-02, -1.080631303717838e-02, -1.358269148423179e-02, -7.253643259254519e-01, -7.282486252678323e-01, -7.164518960340986e-01, -7.193929164377963e-01, -7.195637644972712e-01, -7.225045943732832e-01, -7.221722204496200e-01, -7.250583133295766e-01, -7.208666171077159e-01, -7.237791915671160e-01, -7.208666171077159e-01, -7.237791915671160e-01, -7.073170382348485e-01, -7.096663653159334e-01, -5.685115097448268e-01, -5.714123820622408e-01, -6.078583056661870e-01, -6.110216365242904e-01, -6.479007777023956e-01, -6.503240605296718e-01, -6.277219438871988e-01, -6.302230648794305e-01, -6.277219438871988e-01, -6.302230648794305e-01, -8.162601351219421e-01, -8.179831557079744e-01, -2.263715047679516e-01, -2.278320627185774e-01, -2.791885320305091e-01, -2.827707590833367e-01, -3.973936806843404e-01, -3.998758581463526e-01, -3.347628180491409e-01, -3.348687524539775e-01, -3.347628180491409e-01, -3.348687524539775e-01, -5.217235468380728e-01, -5.260918774938642e-01, -7.418830036413984e-02, -7.447619625285262e-02, -8.710731885019819e-02, -8.821158226788649e-02, -3.883255139740147e-01, -3.950197074687343e-01, -9.854734253912294e-02, -9.710447382616151e-02, -9.854734253912294e-02, -9.710447382616152e-02, -2.775485035608036e-02, -2.844094349011232e-02, -5.114420485456122e-03, -4.899815343289253e-03, -8.693612573167687e-03, -9.037217468488326e-03, -9.549142880341217e-02, -9.627823233298476e-02, -9.872647653248500e-03, -1.272415810467103e-02, -9.872647653248497e-03, -1.272415810467101e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_optb86b_vdw_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_optb86b_vdw", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-8.698745216995243e-09, 0.000000000000000e+00, -8.698791285016578e-09, -8.698648624788630e-09, 0.000000000000000e+00, -8.698721104163337e-09, -8.698296276496481e-09, 0.000000000000000e+00, -8.698228349325213e-09, -8.699388246011100e-09, 0.000000000000000e+00, -8.699619824340851e-09, -8.698689795843418e-09, 0.000000000000000e+00, -8.699031695738504e-09, -8.698689795843418e-09, 0.000000000000000e+00, -8.699031695738504e-09, -1.213338917561846e-05, 0.000000000000000e+00, -1.213518914087669e-05, -1.213337992719767e-05, 0.000000000000000e+00, -1.213534620802605e-05, -1.213483176396656e-05, 0.000000000000000e+00, -1.213492886722892e-05, -1.212448010402425e-05, 0.000000000000000e+00, -1.212505135767708e-05, -1.214105927266594e-05, 0.000000000000000e+00, -1.212536418036069e-05, -1.214105927266594e-05, 0.000000000000000e+00, -1.212536418036069e-05, -8.393434276856853e-03, 0.000000000000000e+00, -8.314417651800217e-03, -8.427222363391097e-03, 0.000000000000000e+00, -8.330131271106054e-03, -8.887868637819983e-03, 0.000000000000000e+00, -9.023781044038939e-03, -8.703047698547781e-03, 0.000000000000000e+00, -8.663387087594902e-03, -8.138977943340476e-03, 0.000000000000000e+00, -9.300339942877505e-03, -8.138977943340476e-03, 0.000000000000000e+00, -9.300339942877505e-03, -1.427171628172559e+00, 0.000000000000000e+00, -1.276821649836173e+00, -1.392647404702554e+00, 0.000000000000000e+00, -1.223408663572773e+00, -4.836436120586723e-03, 0.000000000000000e+00, -4.337584719624766e-03, -2.806051561706857e+00, 0.000000000000000e+00, -2.687522965270610e+00, -1.214189135329833e+00, 0.000000000000000e+00, -6.109446961373413e+00, -1.214189135329833e+00, 0.000000000000000e+00, -6.109446961373413e+00, -3.065803017736240e+03, 0.000000000000000e+00, -2.642572022092036e+03, -2.801741553154681e+03, 0.000000000000000e+00, -2.374136501355114e+03, -4.435044390385705e+01, 0.000000000000000e+00, -3.982743096371642e+01, -9.974828829958933e+03, 0.000000000000000e+00, -1.026994683685227e+04, -4.021344322210850e+03, 0.000000000000000e+00, -2.249285983776456e+04, -4.021344322210854e+03, 0.000000000000000e+00, -2.249285983776445e+04, -2.498633406101535e-06, 0.000000000000000e+00, -2.500996765386154e-06, -2.497557670790299e-06, 0.000000000000000e+00, -2.499956804260824e-06, -2.498560204335012e-06, 0.000000000000000e+00, -2.500951400920985e-06, -2.497637342853878e-06, 0.000000000000000e+00, -2.500006788054846e-06, -2.498092977555178e-06, 0.000000000000000e+00, -2.500476331545002e-06, -2.498092977555178e-06, 0.000000000000000e+00, -2.500476331545002e-06, -1.093692833530445e-04, 0.000000000000000e+00, -1.093902502618036e-04, -1.066130281010316e-04, 0.000000000000000e+00, -1.067195391343962e-04, -1.109522829639612e-04, 0.000000000000000e+00, -1.105315753194340e-04, -1.085361911581663e-04, 0.000000000000000e+00, -1.080829505519980e-04, -1.066259834290428e-04, 0.000000000000000e+00, -1.078208352930149e-04, -1.066259834290428e-04, 0.000000000000000e+00, -1.078208352930149e-04, -1.504527071580019e-02, 0.000000000000000e+00, -1.520837289359419e-02, -1.138340020966748e-02, 0.000000000000000e+00, -1.136858865593239e-02, -2.195358447577096e-02, 0.000000000000000e+00, -1.912452018548093e-02, -1.967311734509759e-02, 0.000000000000000e+00, -1.725037355199071e-02, -1.296303143633556e-02, 0.000000000000000e+00, -1.586340603515976e-02, -1.296303143633556e-02, 0.000000000000000e+00, -1.586340603515977e-02, -5.865169990988463e+00, 0.000000000000000e+00, -5.818633758601595e+00, -1.081413896431977e+00, 0.000000000000000e+00, -1.065500909785380e+00, -7.492781018101577e+00, 0.000000000000000e+00, -6.715605040075943e+00, -1.382867571831528e-04, 0.000000000000000e+00, -1.385392242557210e-04, -4.819023991164237e+00, 0.000000000000000e+00, -4.743911806344288e+00, -4.819023991164237e+00, 0.000000000000000e+00, -4.743911806344288e+00, -2.274627919178178e+04, 0.000000000000000e+00, -1.957531550737744e+04, -1.180492435807109e+04, 0.000000000000000e+00, -1.102868080805552e+04, -4.761736051076755e+04, 0.000000000000000e+00, -4.333791091434653e+04, -1.805037852220518e+01, 0.000000000000000e+00, -1.749111449820663e+01, -3.418552243110380e+04, 0.000000000000000e+00, -1.590013288303101e+04, -3.418552243110374e+04, 0.000000000000000e+00, -1.590013288303099e+04, -1.584097616531898e-02, 0.000000000000000e+00, -1.560116117711056e-02, -1.603759331786215e-02, 0.000000000000000e+00, -1.579472521425844e-02, -1.596828581306424e-02, 0.000000000000000e+00, -1.572609332787199e-02, -1.591111603570363e-02, 0.000000000000000e+00, -1.567060164939790e-02, -1.593973517107519e-02, 0.000000000000000e+00, -1.569838133311620e-02, -1.593973517107519e-02, 0.000000000000000e+00, -1.569838133311620e-02, -1.771893475497090e-02, 0.000000000000000e+00, -1.748700587778971e-02, -2.909624885034790e-02, 0.000000000000000e+00, -2.864157397953533e-02, -2.519896317721215e-02, 0.000000000000000e+00, -2.479146952834241e-02, -2.187339310726865e-02, 0.000000000000000e+00, -2.157674721571543e-02, -2.350854234066005e-02, 0.000000000000000e+00, -2.317356091869485e-02, -2.350854234066005e-02, 0.000000000000000e+00, -2.317356091869485e-02, -9.428297339793340e-03, 0.000000000000000e+00, -9.374538630592422e-03, -5.137751986516425e-01, 0.000000000000000e+00, -5.049248807227931e-01, -2.905262734461362e-01, 0.000000000000000e+00, -2.820429905208461e-01, -1.151361226865184e-01, 0.000000000000000e+00, -1.127931915219560e-01, -1.835371419678954e-01, 0.000000000000000e+00, -1.841133162118198e-01, -1.835371419678956e-01, 0.000000000000000e+00, -1.841133162118199e-01, -4.055233777081137e-02, 0.000000000000000e+00, -3.957238800281517e-02, -4.413618731779898e+01, 0.000000000000000e+00, -4.354673599194792e+01, -2.430356924873601e+01, 0.000000000000000e+00, -2.308142214151971e+01, -1.410289736412267e-01, 0.000000000000000e+00, -1.333798541899983e-01, -1.224688040105221e+01, 0.000000000000000e+00, -1.213077762501218e+01, -1.224688040105222e+01, 0.000000000000000e+00, -1.213077762501219e+01, -1.192803774139102e+03, 0.000000000000000e+00, -1.105863469843533e+03, -4.575052217738596e+05, 0.000000000000000e+00, -5.720182850989786e+05, -6.864449830140524e+04, 0.000000000000000e+00, -6.072136854588742e+04, -1.404382286623461e+01, 0.000000000000000e+00, -1.348577378216182e+01, -5.205922703218080e+04, 0.000000000000000e+00, -1.987426039382096e+04, -5.205922703218086e+04, 0.000000000000000e+00, -1.987426039382103e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
