
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_pbe_gaussian_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbe_gaussian", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.094583528816031e+01, -2.094586270541855e+01, -2.094605235254457e+01, -2.094564304515443e+01, -2.094584787685471e+01, -2.094584787685471e+01, -3.473570748250419e+00, -3.473532723040343e+00, -3.472738957151762e+00, -3.474778879038419e+00, -3.473608890393534e+00, -3.473608890393534e+00, -6.974827413230276e-01, -6.975013297208477e-01, -6.998332740137027e-01, -7.045891088886281e-01, -7.027375121619824e-01, -7.027375121619824e-01, -2.156353740854906e-01, -2.167039998703195e-01, -8.050721206194830e-01, -1.824141607548158e-01, -1.952320733979369e-01, -1.952320733979369e-01, -1.008745354488904e-02, -1.061655847606542e-02, -5.768293218950528e-02, -5.828259454037198e-03, -7.322539688327935e-03, -7.322539688327935e-03, -5.034951007722212e+00, -5.034333405648390e+00, -5.034933342526211e+00, -5.034387954951432e+00, -5.034631970799579e+00, -5.034631970799579e+00, -2.114438949909142e+00, -2.124252280332231e+00, -2.115857271676289e+00, -2.124522970724767e+00, -2.119166305308919e+00, -2.119166305308919e+00, -5.807373443385052e-01, -6.028206436596243e-01, -5.416601347488925e-01, -5.373343473917092e-01, -5.864736398946340e-01, -5.864736398946340e-01, -1.392023148716686e-01, -2.315070837278515e-01, -1.300510508458333e-01, -1.813614509827710e+00, -1.553577353394819e-01, -1.553577353394819e-01, -4.497167911457763e-03, -5.697598356128070e-03, -4.356247486510542e-03, -9.089062401126161e-02, -5.247943129539045e-03, -5.247943129539045e-03, -5.507628870194086e-01, -5.539095652002028e-01, -5.528192435372726e-01, -5.518991356292885e-01, -5.523600417021861e-01, -5.523600417021861e-01, -5.339837413253788e-01, -5.106188740111424e-01, -5.171000143303287e-01, -5.232086072121666e-01, -5.198862114791210e-01, -5.198862114791210e-01, -6.331098036089146e-01, -2.761010855244465e-01, -3.108409324294976e-01, -3.659009809410125e-01, -3.360490786054854e-01, -3.360490786054854e-01, -4.712496897315629e-01, -5.532113109527798e-02, -7.451515255969955e-02, -3.422090735756726e-01, -1.119930278632336e-01, -1.119930278632336e-01, -1.422960611637776e-02, -1.523263912433433e-03, -3.197186911949963e-03, -1.061234370220518e-01, -4.856042747587158e-03, -4.856042747587153e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_pbe_gaussian_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbe_gaussian", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.514280107277717e+01, -2.514290086819902e+01, -2.514331857195330e+01, -2.514183436196380e+01, -2.514261574395051e+01, -2.514261574395051e+01, -4.036894910958209e+00, -4.036941273258728e+00, -4.038112963013836e+00, -4.036843664693643e+00, -4.037047812254349e+00, -4.037047812254349e+00, -7.599264984518308e-01, -7.586714356911360e-01, -7.299437137694302e-01, -7.363214519560528e-01, -7.352250863771473e-01, -7.352250863771473e-01, -2.033073401615912e-01, -2.044351936565375e-01, -8.908152730264670e-01, -1.813096921099570e-01, -1.871029039948661e-01, -1.871029039948661e-01, -1.343344409006635e-02, -1.413564674186625e-02, -7.451719646212895e-02, -7.767980916205173e-03, -9.756608540132798e-03, -9.756608540132798e-03, -6.199997030420076e+00, -6.202762910081650e+00, -6.200120899004386e+00, -6.202562657351878e+00, -6.201400657751739e+00, -6.201400657751739e+00, -2.186381696903272e+00, -2.203643961305716e+00, -2.172017600506376e+00, -2.187042228774354e+00, -2.203134585290197e+00, -2.203134585290197e+00, -6.856785677900650e-01, -7.743339715840674e-01, -6.307444573573454e-01, -6.813445910999804e-01, -7.000463187287764e-01, -7.000463187287764e-01, -1.565308426685843e-01, -2.230931717284071e-01, -1.486079180949578e-01, -2.334356624067519e+00, -1.623647426626348e-01, -1.623647426626348e-01, -5.994625196190202e-03, -7.593725113358129e-03, -5.804888113029032e-03, -1.110874428049762e-01, -6.993152474005673e-03, -6.993152474005673e-03, -7.247744840960311e-01, -7.127282843028098e-01, -7.168906518645739e-01, -7.203915346202125e-01, -7.186335959978284e-01, -7.186335959978284e-01, -7.075348903404158e-01, -5.586160888344956e-01, -5.968615966029344e-01, -6.389993673309963e-01, -6.171951345380201e-01, -6.171951345380201e-01, -8.104288483155211e-01, -2.604551737619529e-01, -2.970930549335351e-01, -3.917063990667583e-01, -3.364963802910934e-01, -3.364963802910934e-01, -5.136559420470883e-01, -7.174756729840563e-02, -9.440598674281342e-02, -3.834586440074554e-01, -1.291608553259881e-01, -1.291608553259881e-01, -1.893123164387923e-02, -2.030888489739891e-03, -4.262079216535450e-03, -1.243043290817656e-01, -6.471068469139748e-03, -6.471068469139742e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_pbe_gaussian_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbe_gaussian", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-7.051125666728315e-09, -7.051076517788714e-09, -7.050786405261483e-09, -7.051519118389501e-09, -7.051145368041360e-09, -7.051145368041360e-09, -9.514962085432215e-06, -9.515248828811926e-06, -9.520942976939186e-06, -9.503819838482896e-06, -9.514388430936469e-06, -9.514388430936469e-06, -6.065314126809283e-03, -6.069577779476749e-03, -6.093986933776789e-03, -5.927237991368692e-03, -5.987589262222808e-03, -5.987589262222808e-03, -6.244582304392394e-01, -6.227667393581923e-01, -3.390560586641372e-03, -8.399082652698876e-01, -7.950155864921168e-01, -7.950155864921166e-01, -2.437254700289494e+00, -2.574872660989204e+00, -1.435109542816274e+00, -2.214881529293345e+00, -2.813910255723212e+00, -2.813910255723219e+00, -2.076239936742635e-06, -2.076453835620480e-06, -2.076235846606720e-06, -2.076424901393006e-06, -2.076356212226466e-06, -2.076356212226466e-06, -7.332979194213060e-05, -7.191425102876195e-05, -7.327769072560629e-05, -7.203710795550670e-05, -7.255775288696203e-05, -7.255775288696203e-05, -1.205962936694065e-02, -9.808665077582192e-03, -1.607246123737962e-02, -1.568247956918502e-02, -1.151426533103573e-02, -1.151426533103573e-02, -9.793680925359274e-01, -3.885075344598202e-01, -1.080990402059263e+00, -1.195483077312910e-04, -1.162192970098573e+00, -1.162192970098573e+00, -2.918411774287335e+00, -2.606739140299948e+00, -1.637047690322945e+01, -1.606158435676618e+00, -7.618127826659911e+00, -7.618127826659894e+00, -1.382908376691122e-02, -1.374255015384056e-02, -1.377285129764019e-02, -1.379845624426891e-02, -1.378570394840216e-02, -1.378570394840216e-02, -1.557075170637974e-02, -2.107316021128879e-02, -1.945391935961735e-02, -1.790506597801587e-02, -1.871172536308396e-02, -1.871172536308396e-02, -8.082249557455859e-03, -2.270630710299641e-01, -1.546346831443546e-01, -8.073214491497552e-02, -1.156161753886181e-01, -1.156161753886182e-01, -2.910007578755617e-02, -1.309603648691659e+00, -1.301289324305807e+00, -1.031623991337103e-01, -1.762655958636173e+00, -1.762655958636174e+00, -1.964091623286851e+00, -1.279261211995275e+01, -6.191191417562662e+00, -1.787144629788785e+00, -9.622392563800318e+00, -9.622392563800341e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
