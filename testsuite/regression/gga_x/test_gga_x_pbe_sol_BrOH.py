
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_pbe_sol_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbe_sol", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.047380468242081e+01, -2.047383822132419e+01, -2.047404781086584e+01, -2.047349740643791e+01, -2.047382186844854e+01, -2.047382186844854e+01, -3.371654390895831e+00, -3.371639026780723e+00, -3.371356008139460e+00, -3.372558889232665e+00, -3.371660851443145e+00, -3.371660851443145e+00, -6.667811720280026e-01, -6.666048277077226e-01, -6.637144610967908e-01, -6.680711145377803e-01, -6.667142337221796e-01, -6.667142337221796e-01, -2.010995871196983e-01, -2.021782639490537e-01, -7.836865050939350e-01, -1.662505074273866e-01, -2.014014118851475e-01, -2.014014118851475e-01, -1.697376883798625e-02, -1.777135389482992e-02, -6.894084158063361e-02, -8.172489462321469e-03, -1.758632346312507e-02, -1.758632346312507e-02, -4.946681642644529e+00, -4.946681302207970e+00, -4.946686453002835e+00, -4.946686103962046e+00, -4.946674446522885e+00, -4.946674446522885e+00, -1.999598861553175e+00, -2.010019283335989e+00, -1.999094194320107e+00, -2.007192384932717e+00, -2.007373621693284e+00, -2.007373621693284e+00, -5.591966552047491e-01, -5.909367071708770e-01, -5.319197984671932e-01, -5.413720817447810e-01, -5.780144632558335e-01, -5.780144632558335e-01, -1.361353626015717e-01, -2.187332818374617e-01, -1.334725506713570e-01, -1.797562308167849e+00, -1.483560490346242e-01, -1.483560490346242e-01, -7.884180068869340e-03, -9.008010558289174e-03, -6.751916473730174e-03, -9.186625830025090e-02, -8.207613627001309e-03, -8.207613627001309e-03, -5.573601817744612e-01, -5.576852251790222e-01, -5.575722243947098e-01, -5.574801381382714e-01, -5.575260015634207e-01, -5.575260015634207e-01, -5.389412555125126e-01, -4.965561455834216e-01, -5.084704918044251e-01, -5.197003732849942e-01, -5.138384266081502e-01, -5.138384266081502e-01, -6.201649065752528e-01, -2.606150523721502e-01, -2.940468037814642e-01, -3.504410464986842e-01, -3.198223753708979e-01, -3.198223753708977e-01, -4.497609218923267e-01, -6.453549667444254e-02, -8.455853906457463e-02, -3.247254247024817e-01, -1.130050759765129e-01, -1.130050759765129e-01, -1.987609853499134e-02, -2.468674347786815e-03, -4.688395969500713e-03, -1.076805120065455e-01, -6.976365127951342e-03, -6.976365127951332e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_pbe_sol_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbe_sol", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.563072747559202e+01, -2.563080770755210e+01, -2.563118540361356e+01, -2.562987118092502e+01, -2.563076962200047e+01, -2.563076962200047e+01, -4.131502244607093e+00, -4.131534167563473e+00, -4.132581584381247e+00, -4.131652440857256e+00, -4.131536263245622e+00, -4.131536263245622e+00, -7.729880445705517e-01, -7.717810530641784e-01, -7.403899951373010e-01, -7.467854648288176e-01, -7.725496363551454e-01, -7.725496363551454e-01, -2.030497099689689e-01, -2.059370535255317e-01, -9.401065268757450e-01, -1.568027288501160e-01, -2.039076996112872e-01, -2.039076996112872e-01, -2.242938939684010e-02, -2.346266959536785e-02, -8.328523521723170e-02, -1.087763232590929e-02, -2.321881510826798e-02, -2.321881510826798e-02, -6.293146605218614e+00, -6.295298518319108e+00, -6.293367915480287e+00, -6.295041138899052e+00, -6.294248458034797e+00, -6.294248458034797e+00, -2.234514785820302e+00, -2.252686959705341e+00, -2.224798236743628e+00, -2.238944877684090e+00, -2.259550121883772e+00, -2.259550121883772e+00, -6.931751740776526e-01, -7.722980147549244e-01, -6.563645219658730e-01, -6.999998648563245e-01, -7.227291696634136e-01, -7.227291696634136e-01, -1.367013708643751e-01, -2.082473071147226e-01, -1.330976063261048e-01, -2.348896176357135e+00, -1.420956811412790e-01, -1.420956811412790e-01, -1.049465056366450e-02, -1.198442090203499e-02, -8.983846659120437e-03, -1.027601301435571e-01, -1.091934397564941e-02, -1.091934397564941e-02, -7.387916091677090e-01, -7.305766493881012e-01, -7.335019256289557e-01, -7.357766033194789e-01, -7.346371582127245e-01, -7.346371582127245e-01, -7.157803550796534e-01, -5.886005872642299e-01, -6.247908508172226e-01, -6.593085026170951e-01, -6.417481118484721e-01, -6.417481118484721e-01, -8.090358355404822e-01, -2.572548003095432e-01, -3.071404433733986e-01, -4.070622524627278e-01, -3.530099374954419e-01, -3.530099374954417e-01, -5.291861401566426e-01, -7.950321859097835e-02, -9.826462411823222e-02, -3.903148645843200e-01, -1.163886269084594e-01, -1.163886269084594e-01, -2.621997134679304e-02, -3.290856765886515e-03, -6.246688228055710e-03, -1.107446336646211e-01, -9.283904093977686e-03, -9.283904093977672e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_pbe_sol_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbe_sol", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.222590772480928e-09, -4.222558701778101e-09, -4.222372529611103e-09, -4.222898565747206e-09, -4.222574219749198e-09, -4.222574219749198e-09, -5.826302390359088e-06, -5.826360208368130e-06, -5.826987187232187e-06, -5.820966791819380e-06, -5.826232851297972e-06, -5.826232851297972e-06, -3.947252597147623e-03, -3.954530208965679e-03, -4.110350601247570e-03, -3.999729084974273e-03, -3.949952888557535e-03, -3.949952888557535e-03, -5.066650266879751e-01, -4.952216647969135e-01, -2.024525128526810e-03, -9.751832077640935e-01, -5.034423268312669e-01, -5.034423268312669e-01, -9.032347941199591e+00, -9.048759651927378e+00, -3.441129608564208e+00, -6.443731615815321e+00, -9.400327297621823e+00, -9.400327297621823e+00, -1.225114912600826e-06, -1.224815895160586e-06, -1.225080216274167e-06, -1.224847784192466e-06, -1.224967513345099e-06, -1.224967513345099e-06, -4.984501963992657e-05, -4.874235332452946e-05, -5.000553840372144e-05, -4.914296495331683e-05, -4.888221023901157e-05, -4.888221023901157e-05, -7.639875794188703e-03, -5.898892673149750e-03, -9.360908078988959e-03, -8.440336480656679e-03, -6.652505126288320e-03, -6.652505126288320e-03, -1.432827891661582e+00, -3.521552947860720e-01, -1.616523405931430e+00, -6.890423469021562e-05, -1.346012533368364e+00, -1.346012533368364e+00, -6.836318220589490e+00, -6.846924192975584e+00, -1.959937297957353e+01, -3.061356357520902e+00, -1.011305208984599e+01, -1.011305208984598e+01, -7.375871190737315e-03, -7.423581159902364e-03, -7.406459043509902e-03, -7.393337939029852e-03, -7.399920922780932e-03, -7.399920922780932e-03, -8.424619812084056e-03, -1.265771827823659e-02, -1.124311046400044e-02, -1.007602722937892e-02, -1.066059268514664e-02, -1.066059268514664e-02, -4.869495816297099e-03, -1.796490416917913e-01, -1.099164149671675e-01, -5.167125951966138e-02, -7.666411168308225e-02, -7.666411168308228e-02, -1.889460917637751e-02, -2.975469373271056e+00, -2.772314394976839e+00, -6.859045386235031e-02, -2.575415962105798e+00, -2.575415962105800e+00, -6.774321182702905e+00, -1.179993615148914e+01, -1.015498325568696e+01, -3.153318509262022e+00, -1.477340771304792e+01, -1.477340771304789e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
