
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_am05_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_am05", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.988978584620527e+01, -1.988983045418705e+01, -1.989007032506467e+01, -1.988933904464082e+01, -1.988980902934491e+01, -1.988980902934491e+01, -3.248411597442235e+00, -3.248411584288465e+00, -3.248545458335906e+00, -3.249003931825796e+00, -3.248425428399082e+00, -3.248425428399082e+00, -6.306625422899511e-01, -6.302514388991227e-01, -6.210345395725161e-01, -6.254496171138755e-01, -6.305111996978626e-01, -6.305111996978626e-01, -1.840079042259486e-01, -1.853058143575823e-01, -7.493631425466276e-01, -1.513002229843733e-01, -1.843787881501825e-01, -1.843787881501825e-01, -4.400622238316571e-02, -4.461659642865668e-02, -8.436343706639282e-02, -3.814881558540414e-02, -4.418068235221267e-02, -4.418068235221267e-02, -4.838117928947534e+00, -4.838835338101529e+00, -4.838194353668507e+00, -4.838752121903148e+00, -4.838481268244860e+00, -4.838481268244860e+00, -1.871877729934578e+00, -1.883079929704629e+00, -1.869393990037736e+00, -1.878092410556952e+00, -1.882801183795702e+00, -1.882801183795702e+00, -5.411226721567443e-01, -5.851305074764288e-01, -5.138247205150340e-01, -5.333557577686716e-01, -5.612519560585266e-01, -5.612519560585266e-01, -1.293707638541134e-01, -1.984217713612321e-01, -1.262155668510271e-01, -1.779774270674754e+00, -1.366209260948727e-01, -1.366209260948727e-01, -3.738767832340504e-02, -3.867970570402016e-02, -2.954143653380680e-02, -9.703824359140742e-02, -3.512701746569206e-02, -3.512701746569206e-02, -5.557257327284371e-01, -5.528398347284605e-01, -5.538602590219051e-01, -5.546588032698049e-01, -5.542579486826834e-01, -5.542579486826834e-01, -5.378872436526545e-01, -4.729279594342768e-01, -4.903910516307323e-01, -5.076805080944506e-01, -4.987066011331325e-01, -4.987066011331326e-01, -6.135407926346387e-01, -2.375070524376245e-01, -2.708927171303191e-01, -3.316544799290710e-01, -2.984403863527291e-01, -2.984403863527289e-01, -4.273412022776619e-01, -8.394034779490200e-02, -9.485600993605524e-02, -3.107144602077582e-01, -1.094923601540023e-01, -1.094923601540022e-01, -4.855698899631455e-02, -2.579420144866867e-02, -3.057689037381150e-02, -1.042112442200468e-01, -3.139514787134808e-02, -3.139514787134808e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_am05_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_am05", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.614081251621380e+01, -2.614088958518821e+01, -2.614126044490974e+01, -2.613999785059892e+01, -2.614085293378487e+01, -2.614085293378487e+01, -4.220398430237853e+00, -4.220429494489109e+00, -4.221456036529529e+00, -4.220580583467433e+00, -4.220432386206220e+00, -4.220432386206220e+00, -7.871002908989078e-01, -7.857349355566754e-01, -7.488202928581723e-01, -7.556259139153042e-01, -7.866051522859047e-01, -7.866051522859047e-01, -1.979213433872151e-01, -2.017404751438751e-01, -9.601829582227625e-01, -1.341710281805018e-01, -1.990769629733704e-01, -1.990769629733704e-01, -1.815761844519061e-02, -1.862761507006219e-02, -4.931759381706152e-02, -1.300301931069602e-02, -1.844120804779211e-02, -1.844120804779211e-02, -6.401454192558126e+00, -6.403183289389589e+00, -6.401633541630513e+00, -6.402978020789094e+00, -6.402338211675507e+00, -6.402338211675507e+00, -2.260818364840965e+00, -2.280607123006905e+00, -2.248955518892535e+00, -2.264409728410040e+00, -2.289588809100060e+00, -2.289588809100060e+00, -7.076598275581796e-01, -7.793476694885821e-01, -6.702841911332634e-01, -7.090486458549130e-01, -7.372186379463826e-01, -7.372186379463826e-01, -9.793377049101511e-02, -1.902728740262170e-01, -9.655713462667545e-02, -2.370473370018051e+00, -1.129309785085058e-01, -1.129309785085058e-01, -1.268521534340645e-02, -1.351408913634777e-02, -1.026350474020488e-02, -6.370686404282566e-02, -1.228498104086556e-02, -1.228498104086555e-02, -7.409336166676094e-01, -7.365478216980029e-01, -7.381902589775217e-01, -7.394022666213226e-01, -7.388016023223065e-01, -7.388016023223065e-01, -7.171718236909207e-01, -6.007451224680205e-01, -6.381721885053988e-01, -6.710332545071522e-01, -6.546993153166489e-01, -6.546993153166490e-01, -8.169853774464424e-01, -2.467698597928672e-01, -3.044612855814337e-01, -4.145999739786518e-01, -3.561548002669121e-01, -3.561548002669122e-01, -5.397599759306776e-01, -4.722211561483727e-02, -5.905949623064393e-02, -3.986810958681354e-01, -7.998568264142250e-02, -7.998568264142253e-02, -2.047933171175058e-02, -7.135811026523820e-03, -9.499812208347870e-03, -7.627593801422018e-02, -1.081670571984754e-02, -1.081670571984755e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_am05_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_am05", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-9.593861176038817e-10, -9.593547185580277e-10, -9.592397212794204e-10, -9.597534089504445e-10, -9.593693491602783e-10, -9.593693491602783e-10, -1.773593467181257e-06, -1.773368910361611e-06, -1.766899837909185e-06, -1.776532809536231e-06, -1.773447754946091e-06, -1.773447754946091e-06, -1.829289451267002e-03, -1.845057825101725e-03, -2.252626928247538e-03, -2.175406838146823e-03, -1.835004382471527e-03, -1.835004382471527e-03, -3.691795089413145e-01, -3.528045312507012e-01, -7.527180900677175e-04, -1.015745118047667e+00, -3.642671122093143e-01, -3.642671122093143e-01, -1.809008585845938e+03, -1.590505005251944e+03, -2.517006054855839e+01, -1.282698627780173e+04, -1.656665111777593e+03, -1.656665111777593e+03, -1.999926845770205e-07, -1.982258538059020e-07, -1.998152705331059e-07, -1.984414030478193e-07, -1.990818448816565e-07, -1.990818448816565e-07, -2.714097532943734e-05, -2.625279860910809e-05, -2.763994917033696e-05, -2.693784127157716e-05, -2.588767704104639e-05, -2.588767704104639e-05, -2.016649129346528e-03, -3.121155250480088e-04, -2.623553061791596e-03, -8.090060594346265e-04, -1.542178524456291e-03, -1.542178524456291e-03, -2.383991283902395e+00, -3.136973144191531e-01, -2.584456384280300e+00, -3.684684677403166e-06, -1.672604644759151e+00, -1.672604644759151e+00, -1.444449888686926e+04, -9.923367767541045e+03, -3.051174633642869e+04, -1.019160220903716e+01, -1.447406947804926e+04, -1.447406947804925e+04, -5.762600917931515e-05, -3.265218542093807e-04, -2.164158301548000e-04, -1.402080371919190e-04, -1.771367479815402e-04, -1.771367479815345e-04, -3.350617472591624e-05, -5.138161063482215e-03, -3.316179334525304e-03, -1.760205467454214e-03, -2.517755474164593e-03, -2.517755474164581e-03, -2.916160777068624e-04, -1.391811390492193e-01, -7.342563235295245e-02, -2.369792442625791e-02, -4.361122242429628e-02, -4.361122242429652e-02, -8.048402844136339e-03, -2.941697866309863e+01, -1.290710377829263e+01, -2.509459284615681e-02, -4.958117123823365e+00, -4.958117123823373e+00, -1.065225628261967e+03, -4.536111754181348e+05, -7.046425614428215e+04, -6.019790375789622e+00, -2.559813543615918e+04, -2.559813543615927e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
