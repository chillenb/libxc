
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_pw91_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pw91", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.105498906475952e+01, -2.105501263675514e+01, -2.105519525308965e+01, -2.105480770735053e+01, -2.105500084837239e+01, -2.105500084837239e+01, -3.491733216165104e+00, -3.491704078979028e+00, -3.491047382024355e+00, -3.492919509926601e+00, -3.491733104384995e+00, -3.491733104384995e+00, -7.009694404580019e-01, -7.010010023235913e-01, -7.037425548897944e-01, -7.080583957338337e-01, -7.009772367951134e-01, -7.009772367951134e-01, -2.171513233854875e-01, -2.179925133966555e-01, -8.166553970462554e-01, -1.821429003140981e-01, -2.173774316863732e-01, -2.173774316863732e-01, -1.169413290165627e-03, -1.351298610260088e-03, -4.814119596456697e-02, -1.016373798603742e-04, -1.334565013905374e-03, -1.334565013905374e-03, -5.057256949542985e+00, -5.056590330527456e+00, -5.057195308982683e+00, -5.056676869639634e+00, -5.056905826604305e+00, -5.056905826604305e+00, -2.119419868789494e+00, -2.129168197022080e+00, -2.120689278165909e+00, -2.128269849709707e+00, -2.124397880700728e+00, -2.124397880700728e+00, -5.769893265703688e-01, -5.972582232108419e-01, -5.496560624693199e-01, -5.498216878869632e-01, -5.946715298101815e-01, -5.946715298101815e-01, -1.467158905430716e-01, -2.387433843013181e-01, -1.443083400078327e-01, -1.816919129206615e+00, -1.623666601285941e-01, -1.623666601285941e-01, -9.385118654776322e-05, -1.415079809470505e-04, -1.006188984943122e-04, -8.753121790082335e-02, -1.301346163637433e-04, -1.301346163637434e-04, -5.590879946782951e-01, -5.630055283890170e-01, -5.617068866540793e-01, -5.606356159742383e-01, -5.611797218723531e-01, -5.611797218723531e-01, -5.399294148184254e-01, -5.191151488712092e-01, -5.261260227970499e-01, -5.318859960599913e-01, -5.288549444466503e-01, -5.288549444466503e-01, -6.273326174668110e-01, -2.825017902654940e-01, -3.156809811841209e-01, -3.682350942255428e-01, -3.398442834550379e-01, -3.398442834550378e-01, -4.710973505127675e-01, -3.829583635878858e-02, -7.215231387992729e-02, -3.381986660469193e-01, -1.199731921753645e-01, -1.199731921753645e-01, -1.644134240711035e-03, -3.603433447324023e-06, -2.344898870572324e-05, -1.144359757371595e-01, -9.608079107145323e-05, -9.608079107145232e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_pw91_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pw91", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.523133146372584e+01, -2.523141306564153e+01, -2.523179277766812e+01, -2.523045621841320e+01, -2.523137436682362e+01, -2.523137436682362e+01, -4.064092354631886e+00, -4.064123909093615e+00, -4.065159076109644e+00, -4.064237536771630e+00, -4.064125896376161e+00, -4.064125896376161e+00, -7.629120808553085e-01, -7.618341913541570e-01, -7.347756692759930e-01, -7.408641702695680e-01, -7.625199575597525e-01, -7.625199575597525e-01, -2.063978937164940e-01, -2.087533049950045e-01, -9.252352431475783e-01, -1.695052115563599e-01, -2.070879573787753e-01, -2.070879573787753e-01, -4.797378207864269e-03, -5.538470783414681e-03, -1.343109003810857e-01, -4.151412094721711e-04, -5.470002286112623e-03, -5.470002286112623e-03, -6.205139408104743e+00, -6.207548786213213e+00, -6.205386217840646e+00, -6.207259617459669e+00, -6.206373853147642e+00, -6.206373853147642e+00, -2.216911297478544e+00, -2.233860804772362e+00, -2.208823956223099e+00, -2.221988853421992e+00, -2.239090183419819e+00, -2.239090183419819e+00, -6.820185275803455e-01, -7.657705347698950e-01, -6.457129613304308e-01, -6.921861196944071e-01, -7.114090353621102e-01, -7.114090353621102e-01, -1.718402321387688e-01, -2.181658676755782e-01, -1.647824562447041e-01, -2.328944634794981e+00, -1.611070846924823e-01, -1.611070846924823e-01, -3.832325046151366e-04, -5.788371377263786e-04, -4.114467478183909e-04, -1.630967365046248e-01, -5.323447756009267e-04, -5.323447756009278e-04, -7.355794499349881e-01, -7.249036992806782e-01, -7.286962721516795e-01, -7.316021714659733e-01, -7.301527696256586e-01, -7.301527696256586e-01, -7.134687737789126e-01, -5.797135425311520e-01, -6.146083829006309e-01, -6.498543463849505e-01, -6.316504515710479e-01, -6.316504515710479e-01, -8.017884133955436e-01, -2.636582696135786e-01, -3.091434048557826e-01, -4.016675034486610e-01, -3.509944099669143e-01, -3.509944099669143e-01, -5.215082415703781e-01, -1.185994389505501e-01, -1.634490536950664e-01, -3.841050233566862e-01, -1.548007799398330e-01, -1.548007799398329e-01, -6.731879921618230e-03, -1.455256645314626e-05, -9.525107498635591e-05, -1.468160916921590e-01, -3.926967038631437e-04, -3.926967038631420e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_pw91_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pw91", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-7.195959759243040e-09, -7.195931307071927e-09, -7.195693038255972e-09, -7.196161189136803e-09, -7.195945685214877e-09, -7.195945685214877e-09, -9.467611759067709e-06, -9.467941953955056e-06, -9.475462209965609e-06, -9.454491437368980e-06, -9.467620259721788e-06, -9.467620259721788e-06, -5.840390802811582e-03, -5.840412626855794e-03, -5.787475117283050e-03, -5.645382490064034e-03, -5.840514442706795e-03, -5.840514442706795e-03, -6.472145813100638e-01, -6.374006070279360e-01, -3.160903048773599e-03, -1.102783520281688e+00, -6.446040218900755e-01, -6.446040218900755e-01, 1.445766044934087e+02, 1.454510745992660e+02, 2.794166860754669e+01, 9.473180955875769e+01, 1.510898833593942e+02, 1.510898833593942e+02, -2.178866980393540e-06, -2.180496134998122e-06, -2.179020913598232e-06, -2.180287807642078e-06, -2.179719152328964e-06, -2.179719152328964e-06, -7.032788499228608e-05, -6.900987099230652e-05, -7.021618928915588e-05, -6.918986683616398e-05, -6.957383626246029e-05, -6.957383626246029e-05, -1.272340493690619e-02, -1.154795907256356e-02, -1.543481906509686e-02, -1.581751379220493e-02, -1.130368352912900e-02, -1.130368352912900e-02, -7.603694746492378e-01, -4.229332951629065e-01, -9.954661915817126e-01, -1.347948623364405e-04, -1.338025501052001e+00, -1.338025501052001e+00, 1.003118011855370e+02, 1.017292770497621e+02, 2.904901379365351e+02, 7.198399314706351e+00, 1.503213301904392e+02, 1.503213301904405e+02, -1.671728079141215e-02, -1.471188377022468e-02, -1.510449230444709e-02, -1.562268283161341e-02, -1.532971294453321e-02, -1.532971294453321e-02, -1.931285782085375e-02, -1.937050398281598e-02, -1.837410130500017e-02, -1.777767864032189e-02, -1.806421814429220e-02, -1.806421814429220e-02, -9.453561390274881e-03, -2.250010353062639e-01, -1.446594098814014e-01, -7.666897875777345e-02, -1.066441915723612e-01, -1.066441915723613e-01, -2.857748982025387e-02, 3.070825590319133e+01, 1.287470636363206e+01, -1.074655943845030e-01, -3.878714844609465e-01, -3.878714844609548e-01, 1.092508593704832e+02, 1.622293183338675e+02, 1.441892828616720e+02, -5.537582454536013e-01, 2.181772826661663e+02, 2.181772826661627e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
