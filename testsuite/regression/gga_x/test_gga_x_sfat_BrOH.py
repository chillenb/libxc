
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_sfat_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_sfat", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.082337604168055e+01, -2.082339982142035e+01, -2.082358307425868e+01, -2.082319213284026e+01, -2.082338793727673e+01, -2.082338793727673e+01, -3.263906492814924e+00, -3.263880389633727e+00, -3.263306543245603e+00, -3.265033209394619e+00, -3.263907887257151e+00, -3.263907887257151e+00, -5.028828283370020e-01, -5.026756836180485e-01, -4.983864431869302e-01, -5.028083923203667e-01, -5.028049987956755e-01, -5.028049987956755e-01, -7.199149798587075e-02, -7.343315796523502e-02, -6.187880693404981e-01, -4.032438866187611e-02, -7.241892729950217e-02, -7.241892729950217e-02, -3.395910759733014e-05, -3.901891059734907e-05, -2.474780398313111e-03, -3.754093418498588e-06, -3.781305732752516e-05, -3.781305732752516e-05, -4.834704877550166e+00, -4.834128917295035e+00, -4.834652288187526e+00, -4.834204344595730e+00, -4.834400554318942e+00, -4.834400554318942e+00, -1.878708315131038e+00, -1.889006909068461e+00, -1.879060086526835e+00, -1.887076937222247e+00, -1.885244223076782e+00, -1.885244223076782e+00, -3.990722663402094e-01, -4.275081906439793e-01, -3.730696656284515e-01, -3.813023465041633e-01, -4.169904397016154e-01, -4.169904397016154e-01, -2.084853725475242e-02, -7.702428825095932e-02, -2.012078136547650e-02, -1.615913915302554e+00, -2.863119231065463e-02, -2.863119231065463e-02, -3.370317864506066e-06, -5.030272889430742e-06, -2.118171358429842e-06, -6.230952910907126e-03, -3.805269323104886e-06, -3.805269323104886e-06, -3.947792049978527e-01, -3.959742372275757e-01, -3.955823637364583e-01, -3.952508413599122e-01, -3.954192197560143e-01, -3.954192197560143e-01, -3.774150037856074e-01, -3.386228227878333e-01, -3.507964770334835e-01, -3.613987967026356e-01, -3.559768058808903e-01, -3.559768058808903e-01, -4.553918291707926e-01, -1.135376845898178e-01, -1.465060533008944e-01, -2.029707651306741e-01, -1.728722810053944e-01, -1.728722810053943e-01, -2.942804545970155e-01, -1.989155475209165e-03, -4.680095055029383e-03, -1.820878187610812e-01, -1.241147693503094e-02, -1.241147693503094e-02, -5.463096087175989e-05, -1.032544013017006e-07, -7.077908190650791e-07, -1.096705262810724e-02, -2.335963823129191e-06, -2.335963823129181e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_sfat_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_sfat", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.502131781449912e+01, -2.502139980904327e+01, -2.502178058957033e+01, -2.502043761233300e+01, -2.502136093036799e+01, -2.502136093036799e+01, -3.881672574049473e+00, -3.881702200405021e+00, -3.882683712416163e+00, -3.881851806740579e+00, -3.881705071474118e+00, -3.881705071474118e+00, -6.150897530682773e-01, -6.142031900754141e-01, -5.918458908492036e-01, -5.975784394661019e-01, -6.147667476223595e-01, -6.147667476223595e-01, -1.018610585368439e-01, -1.038706573889881e-01, -7.685718825841019e-01, -6.071948578933270e-02, -1.024584804888045e-01, -1.024584804888045e-01, -6.783712141039576e-05, -7.793232815583372e-05, -4.744902036577543e-03, -7.507039759759362e-06, -7.552605903329672e-05, -7.552605903329672e-05, -6.011181048347638e+00, -6.013503361867396e+00, -6.011419166887280e+00, -6.013224869359997e+00, -6.012370623162978e+00, -6.012370623162978e+00, -2.050884028610907e+00, -2.067696732701195e+00, -2.042784907575852e+00, -2.055866393818270e+00, -2.072897357092053e+00, -2.072897357092053e+00, -5.264710072526464e-01, -5.954568162206878e-01, -4.923787593932051e-01, -5.274550112189097e-01, -5.531620276364001e-01, -5.531620276364001e-01, -3.428429374536849e-02, -1.063747948947795e-01, -3.317201838519175e-02, -2.136367824983710e+00, -4.510980722927898e-02, -4.510980722927898e-02, -6.739692551655455e-06, -1.005851282273164e-05, -4.235870779894311e-06, -1.141815570855543e-02, -7.609257542368908e-06, -7.609257542368908e-06, -5.631338754511402e-01, -5.555496561369118e-01, -5.581663843530911e-01, -5.602605102768797e-01, -5.592043856854033e-01, -5.592043856854033e-01, -5.411971698993929e-01, -4.352507688239363e-01, -4.632801450433735e-01, -4.911267377979134e-01, -4.767436283919848e-01, -4.767436283919848e-01, -6.306825322509534e-01, -1.501292977727846e-01, -1.913282266540820e-01, -2.695270203913687e-01, -2.269788067918870e-01, -2.269788067918869e-01, -3.807003887244823e-01, -3.843270669238385e-03, -8.737019964938367e-03, -2.496704895397836e-01, -2.148873580372612e-02, -2.148873580372612e-02, -1.090721210546358e-04, -2.065075463008730e-07, -1.415531091370536e-06, -1.917013631687214e-02, -4.671387717614221e-06, -4.671387717614200e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_sfat_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_sfat", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-7.142879056341323e-09, -7.142849209964958e-09, -7.142608497053980e-09, -7.143099405723636e-09, -7.142864215492866e-09, -7.142864215492866e-09, -8.672950501385757e-06, -8.673236762021562e-06, -8.679715716072970e-06, -8.661392634097331e-06, -8.672953578484226e-06, -8.672953578484226e-06, -3.639961046865192e-03, -3.638711976064306e-03, -3.578088113111489e-03, -3.502258134748488e-03, -3.639574353089680e-03, -3.639574353089680e-03, -1.269519342574934e-01, -1.274429427886681e-01, -2.122515613623306e-03, -1.382757392706905e-01, -1.271673197394338e-01, -1.271673197394338e-01, -2.161938060801809e-03, -2.446637324049775e-03, -4.493468529800394e-02, -2.390505527655645e-04, -2.440747102433824e-03, -2.440747102433824e-03, -2.050451193231169e-06, -2.051912063929486e-06, -2.050588953533388e-06, -2.051724982732634e-06, -2.051215625238692e-06, -2.051215625238692e-06, -6.094315194951834e-05, -5.982129736946301e-05, -6.089475563472710e-05, -6.001887480841970e-05, -6.024666753976195e-05, -6.024666753976195e-05, -7.390299452427944e-03, -7.000651409437082e-03, -8.718427144237085e-03, -9.161769356685613e-03, -6.694162231421105e-03, -6.694162231421105e-03, -1.191162260143878e-01, -8.774015216387361e-02, -1.274033337099561e-01, -1.133238611577623e-04, -1.412885563226108e-01, -1.412885563226108e-01, -2.256308457161691e-04, -3.249878835052363e-04, -3.033562027094645e-04, -8.606081389916209e-02, -3.289959618289596e-04, -3.289959618287346e-04, -9.238563842929775e-03, -8.668358604711063e-03, -8.842195520741702e-03, -8.996765595435099e-03, -8.916949564748240e-03, -8.916949564748240e-03, -1.053791053368146e-02, -1.038332746293908e-02, -1.010808451321284e-02, -1.001015738057855e-02, -1.005282531490662e-02, -1.005282531490662e-02, -5.859093516440590e-03, -6.184463981326112e-02, -4.774630238572678e-02, -3.183455615660799e-02, -3.967164983098424e-02, -3.967164983098423e-02, -1.435828134764713e-02, -3.419668490867732e-02, -6.450822682296353e-02, -4.266675440671810e-02, -1.278247225577809e-01, -1.278247225577799e-01, -2.716438030917943e-03, -1.315187556414956e-05, -7.085105481358740e-05, -1.353820062726554e-01, -2.734844320955176e-04, -2.734844320953895e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
