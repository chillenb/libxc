
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_xpbe_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_xpbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.101682696412459e+01, -2.101685244482556e+01, -2.101703696792438e+01, -2.101665640176437e+01, -2.101684567757015e+01, -2.101684567757015e+01, -3.489620819902409e+00, -3.489579514041531e+00, -3.488710351373293e+00, -3.490884470842208e+00, -3.489655415519062e+00, -3.489655415519062e+00, -7.027046972792912e-01, -7.027820798549264e-01, -7.067599421601662e-01, -7.114795212141902e-01, -7.095610172027632e-01, -7.095610172027632e-01, -2.207147506783188e-01, -2.215808895867660e-01, -8.104974333751271e-01, -1.889950250253763e-01, -2.011336630186222e-01, -2.011336630186222e-01, -1.073244801729507e-02, -1.129522794813679e-02, -6.121977573158847e-02, -6.201341437638759e-03, -7.791081891607974e-03, -7.791081891607974e-03, -5.047485577009599e+00, -5.046768685285653e+00, -5.047463827441571e+00, -5.046830776812502e+00, -5.047115923291761e+00, -5.047115923291761e+00, -2.136527722616130e+00, -2.146001172224867e+00, -2.138984303258233e+00, -2.147341767726348e+00, -2.140572405847188e+00, -2.140572405847188e+00, -5.830629202923536e-01, -6.034924629040846e-01, -5.441205578364404e-01, -5.381520695532529e-01, -5.885821648599429e-01, -5.885821648599429e-01, -1.460323310546841e-01, -2.387593326324557e-01, -1.366232808720364e-01, -1.815521582707682e+00, -1.618688677408216e-01, -1.618688677408216e-01, -4.785091297976289e-03, -6.062309318361878e-03, -4.635025917138448e-03, -9.602675920987762e-02, -5.583788381870427e-03, -5.583788381870427e-03, -5.509735905975532e-01, -5.544974264457175e-01, -5.532737470145600e-01, -5.522438212992015e-01, -5.527595626705980e-01, -5.527595626705980e-01, -5.340805102676712e-01, -5.143383523982268e-01, -5.196318228486885e-01, -5.246595946053155e-01, -5.218607238078028e-01, -5.218607238078028e-01, -6.338837297077828e-01, -2.829514622873230e-01, -3.165189002952182e-01, -3.689741336986906e-01, -3.403496911696472e-01, -3.403496911696472e-01, -4.747679653398232e-01, -5.873194629901612e-02, -7.895862735922501e-02, -3.443173781691725e-01, -1.177462921630627e-01, -1.177462921630627e-01, -1.513826220615396e-02, -1.620814919450973e-03, -3.401900709488496e-03, -1.117226524103350e-01, -5.166817393796086e-03, -5.166817393796081e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_xpbe_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_xpbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.504568041180803e+01, -2.504578285693515e+01, -2.504620757176194e+01, -2.504468403662903e+01, -2.504548670284065e+01, -2.504548670284065e+01, -4.014995844653508e+00, -4.015046599807556e+00, -4.016319262030043e+00, -4.014870198058874e+00, -4.015153484997951e+00, -4.015153484997951e+00, -7.529735936535744e-01, -7.516476792866748e-01, -7.210576656996167e-01, -7.274629334764354e-01, -7.264416609823235e-01, -7.264416609823235e-01, -1.992475431527071e-01, -2.003153900935401e-01, -8.835292333158699e-01, -1.799989257071155e-01, -1.842068293917811e-01, -1.842068293917811e-01, -1.428953392639839e-02, -1.503586345318403e-02, -7.868311661818729e-02, -8.264705630747054e-03, -1.037972692345876e-02, -1.037972692345876e-02, -6.182876771149788e+00, -6.185779476218132e+00, -6.183006268249048e+00, -6.185568829931054e+00, -6.184350149448373e+00, -6.184350149448373e+00, -2.158337100697751e+00, -2.175919746796582e+00, -2.142938444271497e+00, -2.158239414789616e+00, -2.175776514748002e+00, -2.175776514748002e+00, -6.824991724827845e-01, -7.734248651426876e-01, -6.273863170588836e-01, -6.802339486183566e-01, -6.971619400603386e-01, -6.971619400603386e-01, -1.598949174054360e-01, -2.199218884057802e-01, -1.523771646944189e-01, -2.331777642601131e+00, -1.630515280910672e-01, -1.630515280910672e-01, -6.378144417579123e-03, -8.079278765557892e-03, -6.175777780454740e-03, -1.157425040957760e-01, -7.439974219161989e-03, -7.439974219161989e-03, -7.244918828007422e-01, -7.119332241051387e-01, -7.162775760419862e-01, -7.199277165974303e-01, -7.180953237831307e-01, -7.180953237831307e-01, -7.074054890711065e-01, -5.536514321425541e-01, -5.934116163897595e-01, -6.370158368778250e-01, -6.144946772804148e-01, -6.144946772804148e-01, -8.093804569626902e-01, -2.553607785587168e-01, -2.913174694790399e-01, -3.876650644908228e-01, -3.313132053771358e-01, -3.313132053771358e-01, -5.089702202690416e-01, -7.583083307053792e-02, -9.921576458084856e-02, -3.806113069873928e-01, -1.327262824856797e-01, -1.327262824856797e-01, -2.013294437552567e-02, -2.160925690128393e-03, -4.534832780125401e-03, -1.282060400350806e-01, -6.884569226634395e-03, -6.884569226634388e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_xpbe_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_xpbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-7.536672645287171e-09, -7.536617891242194e-09, -7.536301491668442e-09, -7.537117627933066e-09, -7.536700358331914e-09, -7.536700358331914e-09, -1.020792623401090e-05, -1.020820667886330e-05, -1.021368695575775e-05, -1.019640895611493e-05, -1.020727821422384e-05, -1.020727821422384e-05, -6.561648809607588e-03, -6.567838247480218e-03, -6.637542997260582e-03, -6.453802263180546e-03, -6.518257346130517e-03, -6.518257346130517e-03, -7.047883592823970e-01, -7.010502625339577e-01, -3.660146534380688e-03, -9.767326486049942e-01, -9.119209010979688e-01, -9.119209010979685e-01, -3.013956490681803e+00, -3.184038459761055e+00, -1.764821299165928e+00, -2.739384662498435e+00, -3.480074989971135e+00, -3.480074989971142e+00, -2.213098373262384e-06, -2.213193500105948e-06, -2.213088523571418e-06, -2.213172730430922e-06, -2.213154603228575e-06, -2.213154603228575e-06, -7.999180726866775e-05, -7.840259583631941e-05, -8.004132558255278e-05, -7.864528803846316e-05, -7.907415929485171e-05, -7.907415929485171e-05, -1.291407705260771e-02, -1.041026866465152e-02, -1.723897945090718e-02, -1.666581264090467e-02, -1.231484511365595e-02, -1.231484511365595e-02, -1.172821768494331e+00, -4.467995872726433e-01, -1.298715789833300e+00, -1.268552863100532e-04, -1.369688277426982e+00, -1.369688277426982e+00, -3.609598503838734e+00, -3.224029091319762e+00, -2.024639783531955e+01, -1.954918539934174e+00, -9.421827749263667e+00, -9.421827749263647e+00, -1.464291079030492e-02, -1.458296913986928e-02, -1.460398117507399e-02, -1.462186947778558e-02, -1.461298465903707e-02, -1.461298465903707e-02, -1.647633454980473e-02, -2.278440155631692e-02, -2.088782653522226e-02, -1.910200767200074e-02, -2.002501500063831e-02, -2.002501500063831e-02, -8.580905078634547e-03, -2.570660204503011e-01, -1.722195509414362e-01, -8.756510867183531e-02, -1.269295214564817e-01, -1.269295214564817e-01, -3.147949242117858e-02, -1.611645770301065e+00, -1.594515103798477e+00, -1.111785233220829e-01, -2.121564889824171e+00, -2.121564889824174e+00, -2.428404494840524e+00, -1.582295704518094e+01, -7.657590674425419e+00, -2.157586344973678e+00, -1.190067880064371e+01, -1.190067880064374e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
