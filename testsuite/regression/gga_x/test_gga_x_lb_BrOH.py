
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_lb_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_lb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=False, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.422324177571561e+01, -3.422320665100001e+01, -3.422328204220328e+01, -3.422385250824482e+01, -3.422322131217420e+01, -3.422322131217420e+01, -5.829706271113969e+00, -5.829579270757017e+00, -5.826327001815621e+00, -5.833164604957354e+00, -5.829665785758768e+00, -5.829665785758768e+00, -1.226287220177962e+00, -1.227388695791750e+00, -1.259074397696718e+00, -1.265435040230452e+00, -1.226678190169457e+00, -1.226678190169457e+00, -4.059477694451670e-01, -4.060380958091318e-01, -1.392106833540830e+00, -3.607376612603078e-01, -4.059093926758309e-01, -4.059093926758309e-01, -1.236222023595440e-01, -1.249636548815258e-01, -2.199848204734155e-01, -1.132628304350175e-01, -1.237501797587290e-01, -1.237501797587290e-01, -8.007157279251945e+00, -8.001006445697646e+00, -8.006551350933131e+00, -8.001768551343357e+00, -8.003974250734727e+00, -8.003974250734727e+00, -3.788414218135634e+00, -3.800008733078985e+00, -3.798762342900869e+00, -3.807826765069648e+00, -3.782597112025397e+00, -3.782597112025397e+00, -9.503726413061808e-01, -8.843644936694761e-01, -9.104112249509275e-01, -8.402750366589933e-01, -9.682611672068687e-01, -9.682611672068687e-01, -3.210826593831992e-01, -4.609131918973944e-01, -3.125308229310810e-01, -2.691677744600945e+00, -3.321413049038708e-01, -3.321413049038708e-01, -1.111515959555422e-01, -1.140254672168107e-01, -8.722588799552862e-02, -2.477252351694108e-01, -1.035232644185639e-01, -1.035232644185639e-01, -7.776907112315224e-01, -8.266551339169328e-01, -8.111976157683053e-01, -7.978168043193073e-01, -8.046828365493542e-01, -8.046828365493542e-01, -7.419834456547355e-01, -8.937190673260147e-01, -8.757029574605449e-01, -8.464256189300605e-01, -8.624848118948807e-01, -8.624848118948807e-01, -9.344836031511549e-01, -5.333764252749518e-01, -5.819471478757126e-01, -6.433524795097461e-01, -6.112857139565075e-01, -6.112857139565075e-01, -8.156591100895910e-01, -2.204446670717818e-01, -2.445170804986287e-01, -5.754938809843122e-01, -2.737965509175571e-01, -2.737965509175568e-01, -1.356553646975839e-01, -8.175866767084991e-02, -9.335740927122005e-02, -2.604863324396365e-01, -9.292185843026469e-02, -9.292185843026471e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_lb_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_lb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=False, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
