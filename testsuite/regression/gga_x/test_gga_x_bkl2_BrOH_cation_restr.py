
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_bkl2_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_bkl2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.038002690503701e+01, -2.038006750532894e+01, -2.038029159438728e+01, -2.037968664831681e+01, -2.037999742706440e+01, -2.037999742706440e+01, -3.351903070432436e+00, -3.351885525555614e+00, -3.351562336272059e+00, -3.352761119260924e+00, -3.351962835312150e+00, -3.351962835312150e+00, -6.621659568691234e-01, -6.619050302608307e-01, -6.572191415990429e-01, -6.620008755462335e-01, -6.604477641470246e-01, -6.604477641470246e-01, -1.981310774217394e-01, -1.990252715457580e-01, -7.672803880909224e-01, -1.724176862253141e-01, -1.812047119070083e-01, -1.812047119070083e-01, -5.598204274200731e-03, -5.896918244670555e-03, -5.162149920325726e-02, -3.231372209765843e-03, -4.060474954228751e-03, -4.060474954228751e-03, -4.931259423810895e+00, -4.931379806236525e+00, -4.931272075845111e+00, -4.931378238211283e+00, -4.931316460863774e+00, -4.931316460863774e+00, -1.981442178948223e+00, -1.992226710578926e+00, -1.979231172319016e+00, -1.988708783000204e+00, -1.988520013791161e+00, -1.988520013791161e+00, -5.626626479020211e-01, -5.969300723616193e-01, -5.229498536396054e-01, -5.302883023737498e-01, -5.698098760209006e-01, -5.698098760209006e-01, -1.386848233092043e-01, -2.154762947833382e-01, -1.299791539734459e-01, -1.796847815737009e+00, -1.504668707939737e-01, -1.504668707939737e-01, -2.493218703619551e-03, -3.158952218554724e-03, -2.415487263972893e-03, -8.943418024742109e-02, -2.909913156546658e-03, -2.909913156546658e-03, -5.488558465107957e-01, -5.487433494423734e-01, -5.487835678928797e-01, -5.488122132158669e-01, -5.487973439696270e-01, -5.487973439696270e-01, -5.331001278695835e-01, -4.852618289111113e-01, -4.981195267598022e-01, -5.113462701745106e-01, -5.044103141177069e-01, -5.044103141177069e-01, -6.263553156067154e-01, -2.539294316198315e-01, -2.859439021137468e-01, -3.458491669821935e-01, -3.124493832300664e-01, -3.124493832300664e-01, -4.474354075158260e-01, -4.868941408538920e-02, -7.018616202254106e-02, -3.271825472732943e-01, -1.120395836727917e-01, -1.120395836727917e-01, -8.002435185348109e-03, -8.444081655323325e-04, -1.772450099569052e-03, -1.061534770580922e-01, -2.692579657505099e-03, -2.692579657505096e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_bkl2_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_bkl2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.571457379614131e+01, -2.571466548387731e+01, -2.571506319776417e+01, -2.571369926452316e+01, -2.571441534928347e+01, -2.571441534928347e+01, -4.145573287747270e+00, -4.145611736543638e+00, -4.146601968831377e+00, -4.145667344663660e+00, -4.145719320163029e+00, -4.145719320163029e+00, -7.817272628705459e-01, -7.803532730994112e-01, -7.461202168911422e-01, -7.529915509905595e-01, -7.520715206554874e-01, -7.520715206554874e-01, -1.821390933978987e-01, -1.856431639219212e-01, -9.168859016282840e-01, -1.435534266477939e-01, -1.545025161363584e-01, -1.545025161363585e-01, -7.523407664967022e-03, -7.994927613657762e-03, -8.263680240152969e-02, -4.308496298109922e-03, -5.414255264091364e-03, -5.414255264091364e-03, -6.313651597514760e+00, -6.315798594720580e+00, -6.313750142611171e+00, -6.315645548484001e+00, -6.314740195808534e+00, -6.314740195808534e+00, -2.229535989590090e+00, -2.249250439388002e+00, -2.209664920906571e+00, -2.227077042388161e+00, -2.250064110183958e+00, -2.250064110183958e+00, -7.028854167999965e-01, -7.815610600781856e-01, -6.475969632219140e-01, -6.897160161416885e-01, -7.165592322401311e-01, -7.165592322401311e-01, -1.443863730198474e-01, -1.822038778978965e-01, -1.426912904938578e-01, -2.355028068837088e+00, -1.309295098158616e-01, -1.309295098158616e-01, -3.324291604826594e-03, -4.211936330464535e-03, -3.220671933908668e-03, -1.229842265307987e-01, -3.879907473978371e-03, -3.879907473978371e-03, -7.272473963913303e-01, -7.190928395821079e-01, -7.219544413626839e-01, -7.243230800432751e-01, -7.231375147684828e-01, -7.231375147684828e-01, -7.086977108301877e-01, -5.747683628748969e-01, -6.133161660958307e-01, -6.516815557288544e-01, -6.322323584190231e-01, -6.322323584190231e-01, -8.186464012539122e-01, -2.295787623265027e-01, -2.840331739575080e-01, -4.022962729913256e-01, -3.384579103444994e-01, -3.384579103444994e-01, -5.284050196889446e-01, -7.949640172533128e-02, -1.054689682743212e-01, -3.946628112993236e-01, -1.269655653567308e-01, -1.269655653567308e-01, -1.181492353012122e-02, -1.125877554043110e-03, -2.363266799425403e-03, -1.270049366618559e-01, -3.590118542202127e-03, -3.590118542202124e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_bkl2_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_bkl2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-3.693438482565572e-09, -3.693401524601816e-09, -3.693217700721726e-09, -3.693767977118123e-09, -3.693482407654286e-09, -3.693482407654286e-09, -5.179420028301800e-06, -5.179431947464560e-06, -5.179199108357949e-06, -5.175670358077858e-06, -5.178934927929004e-06, -5.178934927929004e-06, -3.608171309961306e-03, -3.620085862959722e-03, -3.904497548061188e-03, -3.783880118661947e-03, -3.814257125769698e-03, -3.814257125769698e-03, -6.083599042177590e-01, -5.875423774565235e-01, -1.970950861755778e-03, -1.171312553043535e+00, -9.459382186475030e-01, -9.459382186475032e-01, 8.738210885883491e+00, 1.724479490697191e+01, 8.279583944194989e+00, 1.345878028973167e-05, 1.198426703114858e-01, 1.198426703114876e-01, -1.057235066938725e-06, -1.056697165196457e-06, -1.057206249012168e-06, -1.056731443574703e-06, -1.056964598510227e-06, -1.056964598510227e-06, -4.778269697500159e-05, -4.656144677803134e-05, -4.846342823027316e-05, -4.736623525871407e-05, -4.678048020930023e-05, -4.678048020930023e-05, -6.439680598285767e-03, -4.781756170725996e-03, -8.727664686119820e-03, -7.744937020057525e-03, -6.070295066142286e-03, -6.070295066142286e-03, -1.365239687986135e+00, -4.770963235604940e-01, -1.334774479204333e+00, -5.816344416208507e-05, -1.808813719815395e+00, -1.808813719815395e+00, 9.608197113213447e-10, 3.313528971412290e-05, 1.058205242267937e-01, 5.945381802455399e-01, 4.317570303016448e-02, 4.317570303016364e-02, -6.585832173552587e-03, -6.688198487516894e-03, -6.651997089358465e-03, -6.622391704041142e-03, -6.637203805075769e-03, -6.637203805075769e-03, -7.367476671688763e-03, -1.245800449752740e-02, -1.068083383313786e-02, -9.199185932335372e-03, -9.927530442597697e-03, -9.927530442597697e-03, -3.953690483584599e-03, -2.298343265246519e-01, -1.281034266300422e-01, -4.939553441939002e-02, -8.097580672338586e-02, -8.097580672338588e-02, -1.730001040425632e-02, 9.479092782056806e+00, 3.126592214642246e+00, -5.890614939828141e-02, -1.959993700927249e+00, -1.959993700927253e+00, 5.409074453012435e+01, 8.528160066763532e-54, 2.349443322497796e-14, -1.510599941181629e+00, 3.246481980710293e-02, 3.246481980710271e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
