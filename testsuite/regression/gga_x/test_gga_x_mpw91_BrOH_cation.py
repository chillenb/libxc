
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_mpw91_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_mpw91", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.107168452784746e+01, -2.107171123078929e+01, -2.107189951889186e+01, -2.107150079871428e+01, -2.107169982962495e+01, -2.107169982962495e+01, -3.495399310335299e+00, -3.495360892470912e+00, -3.494558368562336e+00, -3.496617444409132e+00, -3.495437761283113e+00, -3.495437761283113e+00, -7.015371053800590e-01, -7.015422343995925e-01, -7.033925507137613e-01, -7.081780482578286e-01, -7.083248660732608e-01, -7.083248660732608e-01, -2.179587040889648e-01, -2.187854964971840e-01, -8.103714001262459e-01, -1.902259137513008e-01, -2.149700892264498e-01, -2.149700892264498e-01, -8.605771100060448e-04, -1.017748517932384e-03, -5.575087510882330e-02, -1.798017804197872e-04, -5.110757509224069e-04, -5.110757509224074e-04, -5.062291722171845e+00, -5.061583896263276e+00, -5.062270399476486e+00, -5.061645357085178e+00, -5.061926824528235e+00, -5.061926824528235e+00, -2.124804971175603e+00, -2.134786895217749e+00, -2.125972990423690e+00, -2.134779827856723e+00, -2.129778879176117e+00, -2.129778879176117e+00, -5.843452269226228e-01, -6.049169344249852e-01, -5.453807326161384e-01, -5.398895196715074e-01, -5.907359357389017e-01, -5.907359357389018e-01, -1.560692740883500e-01, -2.376136649303271e-01, -1.474386466068319e-01, -1.819669493327817e+00, -1.665421904953066e-01, -1.665421904953066e-01, -9.938705319331264e-05, -1.813085213438293e-04, -1.958384620118369e-04, -1.058281842021737e-01, -2.713488274715048e-04, -2.713488274715051e-04, -5.514807389066205e-01, -5.557750298398827e-01, -5.543641937212831e-01, -5.531268705196266e-01, -5.537539403293434e-01, -5.537539403293434e-01, -5.341248726631872e-01, -5.136149376227883e-01, -5.203570547185565e-01, -5.261716130915512e-01, -5.230888249763737e-01, -5.230888249763737e-01, -6.354561253914945e-01, -2.794465309749478e-01, -3.125493331764666e-01, -3.679253308272866e-01, -3.375464251495200e-01, -3.375464251495200e-01, -4.740022474584728e-01, -5.055562708787363e-02, -8.236095045954456e-02, -3.443612189966997e-01, -1.276363334424916e-01, -1.276363334424916e-01, -2.014276206463707e-03, -9.772925048121183e-06, -5.437367633831692e-05, -1.220555447444608e-01, -2.294022531840530e-04, -2.294022531840523e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_mpw91_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_mpw91", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.521490355956858e+01, -2.521487330209855e+01, -2.521501275087753e+01, -2.521495260971120e+01, -2.521534107034006e+01, -2.521542894933405e+01, -2.521410849169270e+01, -2.521385775277376e+01, -2.521496974425262e+01, -2.521447034854682e+01, -2.521496974425262e+01, -2.521447034854682e+01, -4.060172996921808e+00, -4.060306402696819e+00, -4.060209328753581e+00, -4.060346906679676e+00, -4.061133401876821e+00, -4.061399604519148e+00, -4.060187883154960e+00, -4.060452325158829e+00, -4.059419681289375e+00, -4.061347175676230e+00, -4.059419681289375e+00, -4.061347175676230e+00, -7.657760076611005e-01, -7.703942938978203e-01, -7.640575629877054e-01, -7.697038699362319e-01, -7.419016502049531e-01, -7.347364638622510e-01, -7.436504481378763e-01, -7.459571100707852e-01, -7.787838510823545e-01, -7.095794370415511e-01, -7.787838510823545e-01, -7.095794370415511e-01, -1.901545239700277e-01, -1.969211766395328e-01, -1.921094869376857e-01, -2.000919136799217e-01, -8.806267867248084e-01, -9.178999465539803e-01, -1.563372574861440e-01, -1.580275320908629e-01, -1.983616708659719e-01, -1.343021799967112e-01, -1.983616708659719e-01, -1.343021799967112e-01, -2.888916035757153e-03, -3.399650931866251e-03, -3.361999753322579e-03, -4.052527659868431e-03, -1.229217358952948e-01, -1.280769507692716e-01, -6.804164984757620e-04, -6.416597377176114e-04, -2.106645547087720e-03, -6.681168529844527e-04, -2.106645547087719e-03, -6.681168529844556e-04, -6.205695063222042e+00, -6.204152043532538e+00, -6.208247962968511e+00, -6.206618247561728e+00, -6.205836848269881e+00, -6.204236770440046e+00, -6.208027347635055e+00, -6.206477175682450e+00, -6.207002386324784e+00, -6.205390446903316e+00, -6.207002386324784e+00, -6.205390446903316e+00, -2.210760385913091e+00, -2.210643941892240e+00, -2.228821504585578e+00, -2.228172346921036e+00, -2.192619340873695e+00, -2.197705131745576e+00, -2.208146983744793e+00, -2.213428589293613e+00, -2.234607344020331e+00, -2.221731142279667e+00, -2.234607344020331e+00, -2.221731142279667e+00, -6.895328091392465e-01, -6.877743221616625e-01, -7.728994081447321e-01, -7.736218811121977e-01, -6.215813545033119e-01, -6.465223770556453e-01, -6.696111576281077e-01, -6.914592698243156e-01, -7.204245400954008e-01, -6.834950534858371e-01, -7.204245400954009e-01, -6.834950534858372e-01, -1.417017584757786e-01, -1.410588225480121e-01, -1.993673221509960e-01, -2.001718002696049e-01, -1.383515155857158e-01, -1.387531816983148e-01, -2.331502390477330e+00, -2.330513402968454e+00, -1.400911416355346e-01, -1.378116671848553e-01, -1.400911416355346e-01, -1.378116671848553e-01, -3.569304764670008e-04, -3.725041583065308e-04, -6.649974595625286e-04, -6.692013585638016e-04, -6.417246603744962e-04, -7.883798152992392e-04, -1.327085426954541e-01, -1.340368175995663e-01, -4.996612675143222e-04, -1.192585167650042e-03, -4.996612675143210e-04, -1.192585167650043e-03, -7.216944987677512e-01, -7.246146822696808e-01, -7.102107787159327e-01, -7.132050710231429e-01, -7.142330420684336e-01, -7.172277971334039e-01, -7.176036057495181e-01, -7.205213503319469e-01, -7.159226062050068e-01, -7.188779709202429e-01, -7.159226062050068e-01, -7.188779709202429e-01, -7.051806012030400e-01, -7.075411724028244e-01, -5.631230784806120e-01, -5.658531620284529e-01, -5.991469105913447e-01, -6.022091905780516e-01, -6.387000696435530e-01, -6.411123414926188e-01, -6.183354110071689e-01, -6.208005274096783e-01, -6.183354110071689e-01, -6.208005274096783e-01, -8.084244432586495e-01, -8.103317149171982e-01, -2.449768285181055e-01, -2.462607500804306e-01, -2.914003617310869e-01, -2.943589677350374e-01, -3.950059217099022e-01, -3.973577933715775e-01, -3.390132641262844e-01, -3.389720300526513e-01, -3.390132641262843e-01, -3.389720300526513e-01, -5.171173595903943e-01, -5.211828102968958e-01, -1.211496224851393e-01, -1.219276087782183e-01, -1.431951546159386e-01, -1.432735632367815e-01, -3.836324352877709e-01, -3.900453150000482e-01, -1.267929154788149e-01, -1.203957233699300e-01, -1.267929154788149e-01, -1.203957233699300e-01, -6.958322808277648e-03, -7.730672849003501e-03, -3.116306507390460e-05, -4.025928197514164e-05, -1.782716969632919e-04, -2.172394055998638e-04, -1.237122547216840e-01, -1.241191896471663e-01, -5.920212304809005e-04, -9.527963383113851e-04, -5.920212304808987e-04, -9.527963383113869e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_mpw91_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_mpw91", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.458686266725393e-08, 0.000000000000000e+00, -1.458694661314559e-08, -1.458678461386293e-08, 0.000000000000000e+00, -1.458688984490066e-08, -1.458635000506108e-08, 0.000000000000000e+00, -1.458631885356125e-08, -1.458723623529465e-08, 0.000000000000000e+00, -1.458744694856842e-08, -1.458682545187705e-08, 0.000000000000000e+00, -1.458685996786466e-08, -1.458682545187705e-08, 0.000000000000000e+00, -1.458685996786466e-08, -1.921054243840079e-05, 0.000000000000000e+00, -1.921803845839164e-05, -1.921110935561662e-05, 0.000000000000000e+00, -1.921916510495844e-05, -1.923052475388520e-05, 0.000000000000000e+00, -1.923517442313271e-05, -1.918450320343162e-05, 0.000000000000000e+00, -1.919050517229405e-05, -1.922085477126301e-05, 0.000000000000000e+00, -1.920605219267118e-05, -1.922085477126301e-05, 0.000000000000000e+00, -1.920605219267118e-05, -1.192172386116376e-02, 0.000000000000000e+00, -1.194417128524900e-02, -1.192392112820853e-02, 0.000000000000000e+00, -1.195088556855179e-02, -1.198010688809563e-02, 0.000000000000000e+00, -1.195528711403688e-02, -1.163174788486600e-02, 0.000000000000000e+00, -1.164518186900869e-02, -1.189659740619296e-02, 0.000000000000000e+00, -1.141651202029870e-02, -1.189659740619296e-02, 0.000000000000000e+00, -1.141651202029870e-02, -1.506910690318088e+00, 0.000000000000000e+00, -1.372921091790037e+00, -1.485997121206157e+00, 0.000000000000000e+00, -1.333165476571325e+00, -6.910644088302124e-03, 0.000000000000000e+00, -6.484861827871859e-03, -2.670859311732284e+00, 0.000000000000000e+00, -2.564220288354457e+00, -1.288137549475745e+00, 0.000000000000000e+00, -5.157068654951657e+00, -1.288137549475744e+00, 0.000000000000000e+00, -5.157068654951659e+00, 6.006099456516808e+02, 0.000000000000000e+00, 5.859995509398792e+02, 6.234327692618164e+02, 0.000000000000000e+00, 6.095046080476424e+02, 6.814838923399024e+01, 0.000000000000000e+00, 5.619007745947314e+01, 6.224962295821126e+02, 0.000000000000000e+00, 6.088854582322166e+02, 6.164323298056886e+02, 0.000000000000000e+00, 1.688295579834880e+03, 6.164323298056898e+02, 0.000000000000000e+00, 1.688295579834903e+03, -4.405569554493993e-06, 0.000000000000000e+00, -4.409521110048997e-06, -4.408983648007393e-06, 0.000000000000000e+00, -4.412824245560297e-06, -4.405711713838212e-06, 0.000000000000000e+00, -4.409600636152738e-06, -4.408641553589498e-06, 0.000000000000000e+00, -4.412601674529337e-06, -4.407353666258108e-06, 0.000000000000000e+00, -4.411185153105590e-06, -4.407353666258108e-06, 0.000000000000000e+00, -4.411185153105590e-06, -1.442136771559719e-04, 0.000000000000000e+00, -1.442393488140265e-04, -1.412940901395275e-04, 0.000000000000000e+00, -1.414181858705324e-04, -1.443661336135790e-04, 0.000000000000000e+00, -1.443806645508779e-04, -1.418494538076830e-04, 0.000000000000000e+00, -1.418014294669486e-04, -1.423925989002003e-04, 0.000000000000000e+00, -1.427418396755420e-04, -1.423925989002003e-04, 0.000000000000000e+00, -1.427418396755420e-04, -2.447763507811037e-02, 0.000000000000000e+00, -2.475553647896793e-02, -2.217392702085997e-02, 0.000000000000000e+00, -2.221337395528318e-02, -3.457550515948544e-02, 0.000000000000000e+00, -3.063105052573236e-02, -3.713929839421560e-02, 0.000000000000000e+00, -3.245722492114717e-02, -2.159851208948419e-02, 0.000000000000000e+00, -2.622488189576379e-02, -2.159851208948420e-02, 0.000000000000000e+00, -2.622488189576379e-02, -4.474831308180574e+00, 0.000000000000000e+00, -4.513384889916300e+00, -1.069903701082107e+00, 0.000000000000000e+00, -1.055524498526297e+00, -5.134822363758602e+00, 0.000000000000000e+00, -4.951243892859488e+00, -2.714160997714375e-04, 0.000000000000000e+00, -2.719570847984207e-04, -4.219925490259863e+00, 0.000000000000000e+00, -4.372924790898379e+00, -4.219925490259863e+00, 0.000000000000000e+00, -4.372924790898379e+00, 9.155132069736409e+02, 0.000000000000000e+00, 7.919706787659120e+02, 7.509528497050027e+02, 0.000000000000000e+00, 6.941193967688615e+02, 4.138921444253472e+03, 0.000000000000000e+00, 4.516561446819914e+03, -2.575352347876147e+00, 0.000000000000000e+00, -2.344029908962325e+00, 2.131617312540614e+03, 0.000000000000000e+00, 1.949042499235151e+03, 2.131617312540608e+03, 0.000000000000000e+00, 1.949042499235152e+03, -3.527411809457229e-02, 0.000000000000000e+00, -3.487962562016723e-02, -3.141686968825697e-02, 0.000000000000000e+00, -3.100468344328353e-02, -3.212878073741304e-02, 0.000000000000000e+00, -3.172168489974914e-02, -3.307673318553714e-02, 0.000000000000000e+00, -3.266743222589661e-02, -3.253968140256963e-02, 0.000000000000000e+00, -3.213105088374166e-02, -3.253968140256963e-02, 0.000000000000000e+00, -3.213105088374166e-02, -4.092240499070337e-02, 0.000000000000000e+00, -4.036093181397486e-02, -4.176595133095020e-02, 0.000000000000000e+00, -4.122903856901723e-02, -3.937677441331189e-02, 0.000000000000000e+00, -3.887542317258366e-02, -3.789827737818253e-02, 0.000000000000000e+00, -3.743585733939520e-02, -3.860395054221698e-02, 0.000000000000000e+00, -3.810758466237912e-02, -3.860395054221698e-02, 0.000000000000000e+00, -3.810758466237912e-02, -1.817198618399135e-02, 0.000000000000000e+00, -1.814908741402623e-02, -5.395535708406878e-01, 0.000000000000000e+00, -5.314767905796262e-01, -3.300669998862705e-01, 0.000000000000000e+00, -3.226395728119750e-01, -1.599133620845528e-01, 0.000000000000000e+00, -1.570377534472034e-01, -2.296112239980085e-01, 0.000000000000000e+00, -2.307517338387545e-01, -2.296112239980087e-01, 0.000000000000000e+00, -2.307517338387546e-01, -5.780741387604588e-02, 0.000000000000000e+00, -5.671229714339349e-02, 7.114737206025895e+01, 0.000000000000000e+00, 6.967724719542866e+01, 1.975516422245062e+01, 0.000000000000000e+00, 1.569967168020326e+01, -2.094871834458057e-01, 0.000000000000000e+00, -1.998276114674882e-01, -7.370608138838931e+00, 0.000000000000000e+00, -8.795850130064947e+00, -7.370608138838940e+00, 0.000000000000000e+00, -8.795850130064956e+00, 4.389393873447009e+02, 0.000000000000000e+00, 4.424800085782268e+02, 3.401000137792363e+03, 0.000000000000000e+00, 5.810887737131696e+03, 1.818791812354994e+03, 0.000000000000000e+00, 1.901410636079244e+03, -8.109939725856595e+00, 0.000000000000000e+00, -8.022546903360491e+00, 4.269534859875661e+03, 0.000000000000000e+00, 2.059980869239074e+03, 4.269534859875655e+03, 0.000000000000000e+00, 2.059980869239088e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
