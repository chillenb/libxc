
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_kgg99_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_kgg99", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.004323132533490e+01, -2.004324648601929e+01, -2.004339649011282e+01, -2.004316923193226e+01, -2.004327656607383e+01, -2.004327656607383e+01, -3.346233540056213e+00, -3.346181369131525e+00, -3.345057394452598e+00, -3.347647225682753e+00, -3.346251907689753e+00, -3.346251907689753e+00, -6.811140319720963e-01, -6.813859061555563e-01, -6.902830610323373e-01, -6.946267106352194e-01, -6.948278200427089e-01, -6.948278200427089e-01, -2.247953869752016e-01, -2.248439317233212e-01, -7.840254676490118e-01, -2.055717962211457e-01, -2.244452646470532e-01, -2.244452646470533e-01, 2.831244984426856e-04, 2.981545125478323e-04, -1.335269329662144e-01, 1.632366748299749e-04, 2.278553348633566e-04, 2.278553348633566e-04, -4.792421642422624e+00, -4.791263157863275e+00, -4.792381264793073e+00, -4.791358335943182e+00, -4.791827238320200e+00, -4.791827238320200e+00, -2.090032395956248e+00, -2.098017692363796e+00, -2.095378948840566e+00, -2.102413386528367e+00, -2.091885980578064e+00, -2.091885980578064e+00, -5.576242974832910e-01, -5.686933010666713e-01, -5.218865137329487e-01, -5.085652991025442e-01, -5.624891907092292e-01, -5.624891907092293e-01, -1.848237036571336e-01, -2.518699531514048e-01, -1.780251043042736e-01, -1.710196510179648e+00, -1.856067564923948e-01, -1.856067564923948e-01, 1.260232983701405e-04, 1.595737707873599e-04, 1.222038603785150e-04, -1.489764630975066e-01, 1.535088479561191e-04, 1.535088479561191e-04, -5.169136041391696e-01, -5.223630152268924e-01, -5.204704298566030e-01, -5.188800067026289e-01, -5.196767629937962e-01, -5.196767629937962e-01, -5.004295906284244e-01, -4.981893078344118e-01, -4.988549510026982e-01, -4.988659330618936e-01, -4.986288775597153e-01, -4.986288775597153e-01, -5.977127355191626e-01, -2.894574340467173e-01, -3.166169376655214e-01, -3.587068172884683e-01, -3.351808972241916e-01, -3.351808972241918e-01, -4.601587641640889e-01, -1.341963820903861e-01, -1.459351184185729e-01, -3.322304913670197e-01, -1.562720999784539e-01, -1.562720999784538e-01, -9.008134431581848e-02, 4.265039176457929e-05, 8.969407609045288e-05, -1.532467526186942e-01, 1.409713736854154e-04, 1.409713736854154e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_kgg99_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_kgg99", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.306431872669585e+01, -2.306429242431360e+01, -2.306443583423705e+01, -2.306437747410828e+01, -2.306476822999885e+01, -2.306486560463515e+01, -2.306344679969184e+01, -2.306318098797013e+01, -2.306439070580936e+01, -2.306382328731333e+01, -2.306439070580936e+01, -2.306382328731333e+01, -3.685807044686958e+00, -3.686046385684308e+00, -3.685854828884727e+00, -3.686105495168748e+00, -3.687129295994928e+00, -3.687485362038907e+00, -3.685516533458508e+00, -3.685886468320317e+00, -3.685076606314392e+00, -3.687082240105436e+00, -3.685076606314392e+00, -3.687082240105436e+00, -6.857433101525855e-01, -6.907880141727001e-01, -6.839050731644852e-01, -6.900614975211081e-01, -6.606324071165758e-01, -6.531467391289850e-01, -6.616317814241975e-01, -6.640594423354931e-01, -6.997603314194160e-01, -6.265974369406502e-01, -6.997603314194160e-01, -6.265974369406502e-01, -1.652305945233288e-01, -1.716429026581781e-01, -1.672432226758518e-01, -1.747376679172724e-01, -7.891347252494758e-01, -8.270710761008773e-01, -1.297293799208876e-01, -1.313907861712091e-01, -1.725138323235926e-01, -9.939525293268492e-02, -1.725138323235927e-01, -9.939525293268477e-02, 3.650321622157143e-04, 3.878898226352945e-04, 3.825100668646835e-04, 4.097647503679770e-04, -5.080036750524459e-02, -5.234154435677202e-02, 2.194310129208298e-04, 2.157746474815641e-04, 3.256435860385636e-04, 1.853117049144217e-04, 3.256435860385636e-04, 1.853117049144217e-04, -5.712167362890265e+00, -5.710713790375325e+00, -5.715337043712974e+00, -5.713775989105836e+00, -5.712339785766531e+00, -5.710816403029553e+00, -5.715059564885469e+00, -5.713598278134532e+00, -5.713793444192913e+00, -5.712252033387486e+00, -5.713793444192913e+00, -5.712252033387486e+00, -1.964377334338219e+00, -1.964271326477843e+00, -1.981381395090543e+00, -1.980781414887287e+00, -1.945852657916554e+00, -1.951063046830562e+00, -1.960428897517767e+00, -1.965818803342657e+00, -1.987991528465139e+00, -1.974875857564730e+00, -1.987991528465139e+00, -1.974875857564730e+00, -6.282198287967296e-01, -6.266598134656693e-01, -7.186252311859146e-01, -7.194691070425741e-01, -5.638737958325800e-01, -5.878107218383947e-01, -6.209020082015070e-01, -6.409581839686498e-01, -6.584285472660463e-01, -6.240362557907807e-01, -6.584285472660468e-01, -6.240362557907808e-01, -9.757443950373415e-02, -9.813075168216660e-02, -1.697098410085964e-01, -1.705031666061152e-01, -9.008917636944425e-02, -9.368597056078116e-02, -2.169033773822304e+00, -2.168140582741284e+00, -1.071634498787147e-01, -1.109894689283598e-01, -1.071634498787147e-01, -1.109894689283598e-01, 1.646148513285273e-04, 1.710747133142185e-04, 2.111312925794728e-04, 2.143267729679766e-04, 1.578783177169687e-04, 1.671987117937147e-04, -6.792469742637981e-02, -6.841917125835884e-02, 1.612486938026649e-04, 2.214461062718499e-04, 1.612486938026649e-04, 2.214461062718499e-04, -6.750213767824580e-01, -6.778151253353208e-01, -6.606258354170740e-01, -6.635128485758365e-01, -6.655592124215329e-01, -6.684475755233492e-01, -6.697759862663621e-01, -6.725750669424622e-01, -6.676572700390012e-01, -6.704998004177397e-01, -6.676572700390012e-01, -6.704998004177397e-01, -6.601912028467880e-01, -6.623996747352876e-01, -5.048882534295837e-01, -5.075039219763927e-01, -5.429590252491079e-01, -5.459856492609635e-01, -5.866569777897916e-01, -5.889729835560263e-01, -5.640465892856157e-01, -5.664007099771338e-01, -5.640465892856157e-01, -5.664007099771338e-01, -7.510072574730015e-01, -7.530579009380612e-01, -2.126394564442275e-01, -2.138529273865734e-01, -2.556535699902533e-01, -2.584144160981260e-01, -3.528393160843901e-01, -3.550335041053750e-01, -2.998337145267337e-01, -2.998427902373253e-01, -2.998337145267340e-01, -2.998427902373256e-01, -4.632650341544765e-01, -4.671969134868533e-01, -5.077655471523134e-02, -5.096070299125701e-02, -6.024761249404235e-02, -6.131167392386570e-02, -3.453907248412837e-01, -3.515425359676446e-01, -7.848698631951528e-02, -8.057116027377348e-02, -7.848698631951520e-02, -8.057116027377351e-02, -2.500838210293857e-02, -2.530121644123881e-02, 5.680205423972381e-05, 5.693187922292660e-05, 1.155790343340330e-04, 1.229276329869241e-04, -7.556210968808644e-02, -7.653499295414125e-02, 1.527367590114153e-04, 2.029716789675946e-04, 1.527367590114153e-04, 2.029716789675945e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_kgg99_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_kgg99", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.853304101625915e-08, 0.000000000000000e+00, -1.853314469786935e-08, -1.853290456463357e-08, 0.000000000000000e+00, -1.853304550928480e-08, -1.853228296667773e-08, 0.000000000000000e+00, -1.853220661966552e-08, -1.853382866926039e-08, 0.000000000000000e+00, -1.853417526655426e-08, -1.853296897931087e-08, 0.000000000000000e+00, -1.853325217726301e-08, -1.853296897931087e-08, 0.000000000000000e+00, -1.853325217726301e-08, -2.482522543992075e-05, 0.000000000000000e+00, -2.483345076656451e-05, -2.482577525948648e-05, 0.000000000000000e+00, -2.483463020228265e-05, -2.484546570813821e-05, 0.000000000000000e+00, -2.485004982711170e-05, -2.479531696895929e-05, 0.000000000000000e+00, -2.480147728493920e-05, -2.483912716771867e-05, 0.000000000000000e+00, -2.481683653654889e-05, -2.483912716771867e-05, 0.000000000000000e+00, -2.481683653654889e-05, -1.567810418322832e-02, 0.000000000000000e+00, -1.569008603808192e-02, -1.568645870649854e-02, 0.000000000000000e+00, -1.570106584446302e-02, -1.581348342421796e-02, 0.000000000000000e+00, -1.579406832413883e-02, -1.536030420386223e-02, 0.000000000000000e+00, -1.537362163313220e-02, -1.559669374692055e-02, 0.000000000000000e+00, -1.513030386257120e-02, -1.559669374692055e-02, 0.000000000000000e+00, -1.513030386257120e-02, -2.046009669911366e+00, 0.000000000000000e+00, -1.852450005879155e+00, -2.009932415607379e+00, 0.000000000000000e+00, -1.792239469860243e+00, -9.082902676278337e-03, 0.000000000000000e+00, -8.475246683423789e-03, -3.982880781443507e+00, 0.000000000000000e+00, -3.808895073015396e+00, -1.745830668186381e+00, 0.000000000000000e+00, -9.750834117215977e+00, -1.745830668186382e+00, 0.000000000000000e+00, -9.750834117215982e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.638536123271492e+02, 0.000000000000000e+00, -1.410198770205215e+02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -5.486334244463239e-06, 0.000000000000000e+00, -5.491375850995758e-06, -5.487602822194722e-06, 0.000000000000000e+00, -5.492605005934140e-06, -5.486359368078114e-06, 0.000000000000000e+00, -5.491385573959748e-06, -5.487448608199712e-06, 0.000000000000000e+00, -5.492502772036730e-06, -5.487020933261748e-06, 0.000000000000000e+00, -5.492000618001927e-06, -5.487020933261748e-06, 0.000000000000000e+00, -5.492000618001927e-06, -1.905602625606327e-04, 0.000000000000000e+00, -1.905942987818862e-04, -1.866601152162761e-04, 0.000000000000000e+00, -1.868250809445489e-04, -1.908684441470866e-04, 0.000000000000000e+00, -1.908572234634045e-04, -1.875070949803585e-04, 0.000000000000000e+00, -1.874134305936244e-04, -1.880439156814826e-04, 0.000000000000000e+00, -1.885818590187661e-04, -1.880439156814826e-04, 0.000000000000000e+00, -1.885818590187661e-04, -3.140258652360746e-02, 0.000000000000000e+00, -3.175440071138926e-02, -2.613971166718137e-02, 0.000000000000000e+00, -2.613283096555538e-02, -4.473728890638477e-02, 0.000000000000000e+00, -3.946803283273154e-02, -4.464189846342208e-02, 0.000000000000000e+00, -3.908992072005103e-02, -2.750211305373828e-02, 0.000000000000000e+00, -3.347931857007586e-02, -2.750211305373826e-02, 0.000000000000000e+00, -3.347931857007588e-02, -1.010451223122533e+01, 0.000000000000000e+00, -9.917624658288021e+00, -1.515798627311457e+00, 0.000000000000000e+00, -1.493483090585495e+00, -1.367496151368749e+01, 0.000000000000000e+00, -1.180821365469755e+01, -3.183438355256445e-04, 0.000000000000000e+00, -3.189420830651379e-04, -7.422213229224226e+00, 0.000000000000000e+00, -6.920190491794317e+00, -7.422213229224226e+00, 0.000000000000000e+00, -6.920190491794317e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -4.209243110194561e+01, 0.000000000000000e+00, -4.090581636104052e+01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -3.722172616848376e-02, 0.000000000000000e+00, -3.667061734828566e-02, -3.689662349032773e-02, 0.000000000000000e+00, -3.636195179981275e-02, -3.701636164155431e-02, 0.000000000000000e+00, -3.647655401967712e-02, -3.711323809919870e-02, 0.000000000000000e+00, -3.656708898683726e-02, -3.706558751219552e-02, 0.000000000000000e+00, -3.652246193918303e-02, -3.706558751219552e-02, 0.000000000000000e+00, -3.652246193918303e-02, -4.188722545667662e-02, 0.000000000000000e+00, -4.134087847454199e-02, -5.486898486393277e-02, 0.000000000000000e+00, -5.414762427586742e-02, -5.104063331689862e-02, 0.000000000000000e+00, -5.035143295860364e-02, -4.755342121476638e-02, 0.000000000000000e+00, -4.694627996374029e-02, -4.938715367232204e-02, 0.000000000000000e+00, -4.873077454162372e-02, -4.938715367232204e-02, 0.000000000000000e+00, -4.873077454162372e-02, -2.156888629532973e-02, 0.000000000000000e+00, -2.148061924412388e-02, -7.341935147439220e-01, 0.000000000000000e+00, -7.225134973756604e-01, -4.402720742031996e-01, 0.000000000000000e+00, -4.299791512420855e-01, -2.106886911851608e-01, 0.000000000000000e+00, -2.068631720629266e-01, -3.040455001014059e-01, 0.000000000000000e+00, -3.055326895822487e-01, -3.040455001014059e-01, 0.000000000000000e+00, -3.055326895822484e-01, -7.599582451124083e-02, 0.000000000000000e+00, -7.451672350720188e-02, -1.681145966496715e+02, 0.000000000000000e+00, -1.650048948920301e+02, -7.345344102207412e+01, 0.000000000000000e+00, -6.752179631280907e+01, -2.740483381984135e-01, 0.000000000000000e+00, -2.610752493177192e-01, -2.352950315147181e+01, 0.000000000000000e+00, -2.152678691985445e+01, -2.352950315147180e+01, 0.000000000000000e+00, -2.152678691985445e+01, -9.416660742635471e+03, 0.000000000000000e+00, -8.561327522284853e+03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -2.734822833703337e+01, 0.000000000000000e+00, -2.601111531039786e+01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
