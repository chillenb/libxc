
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_pbe_sol_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbe_sol", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.047429329582377e+01, -2.047433183461929e+01, -2.047455056849990e+01, -2.047397621553883e+01, -2.047427042543273e+01, -2.047427042543273e+01, -3.371783662050814e+00, -3.371763071171287e+00, -3.371369860686557e+00, -3.372694092588217e+00, -3.371840510106957e+00, -3.371840510106957e+00, -6.676297686485100e-01, -6.674058874422899e-01, -6.634208902622059e-01, -6.681990600127642e-01, -6.689204244751994e-01, -6.689204244751994e-01, -1.987654960185333e-01, -1.999582979410913e-01, -7.736878599496514e-01, -1.685221663004010e-01, -1.947095542239168e-01, -1.947095542239167e-01, -1.010108449105039e-02, -1.063567044952878e-02, -5.707986096965749e-02, -5.828194894717659e-03, -8.131826848792540e-03, -8.131826848792540e-03, -4.948755242936912e+00, -4.948755633997704e+00, -4.948762973877403e+00, -4.948763186832463e+00, -4.948751144222728e+00, -4.948751144222728e+00, -2.000397382586319e+00, -2.011167693203960e+00, -1.998400447820070e+00, -2.007885636687612e+00, -2.007367239481787e+00, -2.007367239481787e+00, -5.656493097916278e-01, -5.979420223321620e-01, -5.263351259679873e-01, -5.317704334486982e-01, -5.732788362167567e-01, -5.732788362167568e-01, -1.318655679856424e-01, -2.130674731437747e-01, -1.238221400753491e-01, -1.799727988310445e+00, -1.448489714877843e-01, -1.448489714877843e-01, -4.500023952083930e-03, -5.697343826351576e-03, -4.362357250787834e-03, -8.815668823130730e-02, -5.479512499181122e-03, -5.479512499181124e-03, -5.491900260446076e-01, -5.496348786887519e-01, -5.494828228161179e-01, -5.493491586597183e-01, -5.494157771503856e-01, -5.494157771503856e-01, -5.332564245157009e-01, -4.892001042394350e-01, -5.012112358275991e-01, -5.133431980784797e-01, -5.069762652556300e-01, -5.069762652556300e-01, -6.275169070675226e-01, -2.541651651589387e-01, -2.882389517914099e-01, -3.488837142905169e-01, -3.155352437749004e-01, -3.155352437749004e-01, -4.511292710685237e-01, -5.474861043169112e-02, -7.316707437485945e-02, -3.296147662101337e-01, -1.068675004267923e-01, -1.068675004267923e-01, -1.422643290217290e-02, -1.523228226140708e-03, -3.202981454722825e-03, -1.016409795561231e-01, -5.032261220298363e-03, -5.032261220298359e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_pbe_sol_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbe_sol", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.563144203781645e+01, -2.563141094538415e+01, -2.563154883181401e+01, -2.563148851363241e+01, -2.563187475220570e+01, -2.563195993909226e+01, -2.563066910000552e+01, -2.563042310260371e+01, -2.563150652654807e+01, -2.563102584752428e+01, -2.563150652654807e+01, -2.563102584752428e+01, -4.131656554418185e+00, -4.131784072685607e+00, -4.131692499742355e+00, -4.131823723415885e+00, -4.132602009906902e+00, -4.132864598096864e+00, -4.131692465161607e+00, -4.131952766803979e+00, -4.130893195892535e+00, -4.132836765758769e+00, -4.130893195892535e+00, -4.132836765758769e+00, -7.781232185193430e-01, -7.831118709504583e-01, -7.762686145259913e-01, -7.823776110722667e-01, -7.520451217265097e-01, -7.440200132929952e-01, -7.534478430204903e-01, -7.560370116957198e-01, -7.920160934114980e-01, -7.145685362108906e-01, -7.920160934114980e-01, -7.145685362108906e-01, -1.900467831867917e-01, -1.967568286110932e-01, -1.919565994892430e-01, -1.999564639642090e-01, -8.950098577455956e-01, -9.338995178220871e-01, -1.586279240693416e-01, -1.602721520937565e-01, -1.982234290665485e-01, -1.344131843110963e-01, -1.982234290665483e-01, -1.344131843110961e-01, -1.299755975723254e-02, -1.380620260617556e-02, -1.361456816912959e-02, -1.457733182103922e-02, -7.028065545640111e-02, -7.355929982928992e-02, -7.828933456373954e-03, -7.698859566077638e-03, -1.160237057370802e-02, -6.610304259544062e-03, -1.160237057370802e-02, -6.610304259544062e-03, -6.296767742193774e+00, -6.295215419670063e+00, -6.299027585460202e+00, -6.297398639067022e+00, -6.296894790119794e+00, -6.295291514719153e+00, -6.298833868827364e+00, -6.297274868779582e+00, -6.297924234812136e+00, -6.296311883608183e+00, -6.297924234812136e+00, -6.296311883608183e+00, -2.238023286728970e+00, -2.237903447494568e+00, -2.257029183845811e+00, -2.256354862563086e+00, -2.217707264462748e+00, -2.223436690441663e+00, -2.234080037353556e+00, -2.239993656773665e+00, -2.263939449085702e+00, -2.249698696273337e+00, -2.263939449085702e+00, -2.249698696273337e+00, -7.014200721284836e-01, -6.996247892635560e-01, -7.800588123544518e-01, -7.806488402395170e-01, -6.325489866955911e-01, -6.578263585983826e-01, -6.770604052100501e-01, -6.992859212179022e-01, -7.324546160902411e-01, -6.950448528909667e-01, -7.324546160902412e-01, -6.950448528909668e-01, -1.370382183548693e-01, -1.371904476628619e-01, -2.007061527734995e-01, -2.014662591727850e-01, -1.292517334270726e-01, -1.326555683319989e-01, -2.352078912266263e+00, -2.351059052601675e+00, -1.416723732635817e-01, -1.402946793741078e-01, -1.416723732635817e-01, -1.402946793741078e-01, -5.875267797527364e-03, -6.105805926801882e-03, -7.532670066317195e-03, -7.646758694947750e-03, -5.630687576433667e-03, -5.961520345419035e-03, -1.016857837218752e-01, -1.024380350259511e-01, -5.753089857117983e-03, -7.893535952521217e-03, -5.753089857117984e-03, -7.893535952521218e-03, -7.253782272586153e-01, -7.282617775346545e-01, -7.165563801186204e-01, -7.194937957234757e-01, -7.196269836996709e-01, -7.225652055152245e-01, -7.222087792038242e-01, -7.250934903329060e-01, -7.209155984760180e-01, -7.238262376974351e-01, -7.209155984760180e-01, -7.238262376974351e-01, -7.073200195248376e-01, -7.096693037668546e-01, -5.724051362444217e-01, -5.752299158695773e-01, -6.097410933393946e-01, -6.128492940138560e-01, -6.485381312962825e-01, -6.509528204928668e-01, -6.288793917207410e-01, -6.313672271168225e-01, -6.288793917207410e-01, -6.313672271168225e-01, -8.164215236262518e-01, -8.181321269301902e-01, -2.448883271772155e-01, -2.461484714682282e-01, -2.917407679989194e-01, -2.948327421977989e-01, -4.010135649434318e-01, -4.034442850944421e-01, -3.419072370742686e-01, -3.419137824563884e-01, -3.419072370742686e-01, -3.419137824563884e-01, -5.255215110547014e-01, -5.297465232470558e-01, -6.938010896057679e-02, -6.978490786179652e-02, -8.838392506180079e-02, -9.047890064954091e-02, -3.902794823824194e-01, -3.968557927084710e-01, -1.142868900864285e-01, -1.144794841187869e-01, -1.142868900864285e-01, -1.144794841187869e-01, -1.854540894842811e-02, -1.920863757209805e-02, -2.028461093405398e-03, -2.032995648197699e-03, -4.126070065653867e-03, -4.388054770167351e-03, -1.103926919880733e-01, -1.115540564983115e-01, -5.447727404059481e-03, -7.237078579760613e-03, -5.447727404059476e-03, -7.237078579760606e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_pbe_sol_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbe_sol", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-8.444332608785667e-09, 0.000000000000000e+00, -8.444378000245280e-09, -8.444247250149815e-09, 0.000000000000000e+00, -8.444315975637044e-09, -8.443920861118116e-09, 0.000000000000000e+00, -8.443863211699296e-09, -8.444886212841384e-09, 0.000000000000000e+00, -8.445093217173972e-09, -8.444284391443636e-09, 0.000000000000000e+00, -8.444562301039965e-09, -8.444284391443636e-09, 0.000000000000000e+00, -8.444562301039965e-09, -1.164954244264420e-05, 0.000000000000000e+00, -1.165186602956952e-05, -1.164960812246912e-05, 0.000000000000000e+00, -1.165212927449309e-05, -1.165319224557549e-05, 0.000000000000000e+00, -1.165385938379155e-05, -1.163945655143324e-05, 0.000000000000000e+00, -1.164065995712238e-05, -1.165667179597592e-05, 0.000000000000000e+00, -1.164288985758338e-05, -1.165667179597592e-05, 0.000000000000000e+00, -1.164288985758338e-05, -7.837110130870023e-03, 0.000000000000000e+00, -7.790027141569408e-03, -7.859283182445505e-03, 0.000000000000000e+00, -7.801672552420431e-03, -8.152267121615455e-03, 0.000000000000000e+00, -8.221905119776775e-03, -7.956997673381667e-03, 0.000000000000000e+00, -7.938079115699262e-03, -7.663785463845173e-03, 0.000000000000000e+00, -8.177117957832970e-03, -7.663785463845173e-03, 0.000000000000000e+00, -8.177117957832970e-03, -1.109256743627125e+00, 0.000000000000000e+00, -1.013644426933166e+00, -1.096091013231923e+00, 0.000000000000000e+00, -9.849501079576809e-01, -4.524123019523098e-03, 0.000000000000000e+00, -4.109137599102016e-03, -1.803363921990513e+00, 0.000000000000000e+00, -1.737406071096375e+00, -9.491934599806447e-01, 0.000000000000000e+00, -3.053378902101426e+00, -9.491934599806446e-01, 0.000000000000000e+00, -3.053378902101429e+00, -8.697088875131138e+00, 0.000000000000000e+00, -8.607772839702585e+00, -9.161319456930567e+00, 0.000000000000000e+00, -9.111464062787093e+00, -4.831328133878198e+00, 0.000000000000000e+00, -4.828009118097612e+00, -7.976657472719740e+00, 0.000000000000000e+00, -7.760372613276342e+00, -8.686125273948113e+00, 0.000000000000000e+00, -2.205632882511748e+01, -8.686125273948132e+00, 0.000000000000000e+00, -2.205632882511752e+01, -2.444921264509295e-06, 0.000000000000000e+00, -2.447216535933901e-06, -2.444293385304456e-06, 0.000000000000000e+00, -2.446609872511752e-06, -2.444871384091911e-06, 0.000000000000000e+00, -2.447184940331189e-06, -2.444332847128103e-06, 0.000000000000000e+00, -2.446633987425808e-06, -2.444611633755473e-06, 0.000000000000000e+00, -2.446914094319387e-06, -2.444611633755473e-06, 0.000000000000000e+00, -2.446914094319387e-06, -9.946000910483998e-05, 0.000000000000000e+00, -9.947852199453891e-05, -9.715183164695212e-05, 0.000000000000000e+00, -9.724420753911432e-05, -1.003400953194488e-04, 0.000000000000000e+00, -1.001255749039176e-04, -9.834004449433688e-05, 0.000000000000000e+00, -9.808697896729310e-05, -9.745536693038300e-05, 0.000000000000000e+00, -9.821038652605610e-05, -9.745536693038300e-05, 0.000000000000000e+00, -9.821038652605610e-05, -1.452479990933482e-02, 0.000000000000000e+00, -1.468369057065403e-02, -1.127199612758523e-02, 0.000000000000000e+00, -1.126052275847095e-02, -2.105438774070369e-02, 0.000000000000000e+00, -1.840587535138642e-02, -1.941821514646846e-02, 0.000000000000000e+00, -1.702054279806835e-02, -1.256976744124055e-02, 0.000000000000000e+00, -1.536055146682866e-02, -1.256976744124056e-02, 0.000000000000000e+00, -1.536055146682865e-02, -2.596130312584448e+00, 0.000000000000000e+00, -2.618342872926327e+00, -7.582144497715393e-01, 0.000000000000000e+00, -7.489819197077804e-01, -3.038736052414647e+00, 0.000000000000000e+00, -2.881336077637980e+00, -1.370271688040574e-04, 0.000000000000000e+00, -1.372793490718168e-04, -2.561560626317022e+00, 0.000000000000000e+00, -2.816336090088838e+00, -2.561560626317022e+00, 0.000000000000000e+00, -2.816336090088838e+00, -1.120033614413274e+01, 0.000000000000000e+00, -9.694261829885953e+00, -9.642052281947464e+00, 0.000000000000000e+00, -8.902344747108048e+00, -5.490915568200317e+01, 0.000000000000000e+00, -6.107232526682854e+01, -5.012740213782457e+00, 0.000000000000000e+00, -4.834570903944559e+00, -2.731210907760536e+01, 0.000000000000000e+00, -2.681130673198988e+01, -2.731210907760526e+01, 0.000000000000000e+00, -2.681130673198986e+01, -1.578766033619086e-02, 0.000000000000000e+00, -1.555018725310984e-02, -1.588882348626831e-02, 0.000000000000000e+00, -1.565104888191279e-02, -1.585327936495540e-02, 0.000000000000000e+00, -1.561541533958044e-02, -1.582410758709663e-02, 0.000000000000000e+00, -1.558670945025982e-02, -1.583876372475142e-02, 0.000000000000000e+00, -1.560111731954655e-02, -1.583876372475142e-02, 0.000000000000000e+00, -1.560111731954655e-02, -1.769095927779739e-02, 0.000000000000000e+00, -1.745964100940604e-02, -2.725483057105296e-02, 0.000000000000000e+00, -2.685126608356514e-02, -2.412550982577004e-02, 0.000000000000000e+00, -2.375359529544245e-02, -2.134739728303868e-02, 0.000000000000000e+00, -2.106234399782908e-02, -2.273526917289781e-02, 0.000000000000000e+00, -2.241718144493169e-02, -2.273526917289781e-02, 0.000000000000000e+00, -2.241718144493169e-02, -9.326483588996008e-03, 0.000000000000000e+00, -9.277374410111131e-03, -3.966132010528061e-01, 0.000000000000000e+00, -3.909218522337928e-01, -2.427681594402368e-01, 0.000000000000000e+00, -2.369434891811695e-01, -1.067330795464487e-01, 0.000000000000000e+00, -1.046453146967679e-01, -1.629819266099112e-01, 0.000000000000000e+00, -1.636427752110399e-01, -1.629819266099113e-01, 0.000000000000000e+00, -1.636427752110400e-01, -3.790648121134799e-02, 0.000000000000000e+00, -3.705013459454740e-02, -4.437955699215259e+00, 0.000000000000000e+00, -4.440059733651029e+00, -4.204266069321943e+00, 0.000000000000000e+00, -4.265190855746932e+00, -1.333766820446442e-01, 0.000000000000000e+00, -1.264233794103626e-01, -4.597773735072492e+00, 0.000000000000000e+00, -5.132639788894459e+00, -4.597773735072494e+00, 0.000000000000000e+00, -5.132639788894463e+00, -6.880835536307283e+00, 0.000000000000000e+00, -7.022181801564214e+00, -3.447404306422076e+01, 0.000000000000000e+00, -6.106351796428032e+01, -2.127214832762428e+01, 0.000000000000000e+00, -2.264442811490217e+01, -5.166382021605004e+00, 0.000000000000000e+00, -5.033216121401366e+00, -5.629815526394207e+01, 0.000000000000000e+00, -2.783878384237689e+01, -5.629815526394217e+01, 0.000000000000000e+00, -2.783878384237698e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
