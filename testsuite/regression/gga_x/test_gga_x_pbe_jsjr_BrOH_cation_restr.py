
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_pbe_jsjr_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbe_jsjr", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.061421040133397e+01, -2.061424555367606e+01, -2.061445541136225e+01, -2.061393131376399e+01, -2.061419830922979e+01, -2.061419830922979e+01, -3.402222367429714e+00, -3.402196390979654e+00, -3.401679466284074e+00, -3.403224577055034e+00, -3.402273235954142e+00, -3.402273235954142e+00, -6.767101485496080e-01, -6.765616504715889e-01, -6.746507677537630e-01, -6.794289922646437e-01, -6.777577984328633e-01, -6.777577984328633e-01, -2.043369578569812e-01, -2.054332790812646e-01, -7.828667851363413e-01, -1.734992184421304e-01, -1.850318007527492e-01, -1.850318007527492e-01, -1.008466644517660e-02, -1.061321935475040e-02, -5.728497306928841e-02, -5.827746018466622e-03, -7.321393357308298e-03, -7.321393357308298e-03, -4.974184231544034e+00, -4.973999136061503e+00, -4.974184334333873e+00, -4.974020797210190e+00, -4.974085599051689e+00, -4.974085599051689e+00, -2.035736827721463e+00, -2.046166951023499e+00, -2.034900527238730e+00, -2.044089973102989e+00, -2.041923394949410e+00, -2.041923394949410e+00, -5.701413631779479e-01, -5.993678378135023e-01, -5.306885596289019e-01, -5.332047164499785e-01, -5.767062901269392e-01, -5.767062901269392e-01, -1.346970017898635e-01, -2.195083494528812e-01, -1.261765069625549e-01, -1.803786369821096e+00, -1.486940174512743e-01, -1.486940174512743e-01, -4.496896812642936e-03, -5.697078028977214e-03, -4.355665175007691e-03, -8.925731827413240e-02, -5.247248606633567e-03, -5.247248606633567e-03, -5.496447186813419e-01, -5.508812924692483e-01, -5.504534486043312e-01, -5.500893677238390e-01, -5.502714311166889e-01, -5.502714311166889e-01, -5.334655907617600e-01, -4.957088445225135e-01, -5.059674896931742e-01, -5.162567598529830e-01, -5.108144858241793e-01, -5.108144858241793e-01, -6.291507401276903e-01, -2.615498261243429e-01, -2.955628414228910e-01, -3.540889692256294e-01, -3.219798697354494e-01, -3.219798697354494e-01, -4.572430708719766e-01, -5.498559969865713e-02, -7.370050583946086e-02, -3.333858605191694e-01, -1.088270134959484e-01, -1.088270134959484e-01, -1.422258670489282e-02, -1.523241583178312e-03, -3.197044830202893e-03, -1.034021825508847e-01, -4.855424281966903e-03, -4.855424281966900e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_pbe_jsjr_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbe_jsjr", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.547867652497728e+01, -2.547877144565155e+01, -2.547917708842053e+01, -2.547776519667163e+01, -2.547850732328271e+01, -2.547850732328271e+01, -4.101131461626011e+00, -4.101172756469169e+00, -4.102228242489907e+00, -4.101172402428129e+00, -4.101279835331173e+00, -4.101279835331173e+00, -7.733172410531823e-01, -7.720151676277726e-01, -7.408970083319499e-01, -7.475213831041776e-01, -7.464942799477895e-01, -7.464942799477895e-01, -1.954032146139914e-01, -1.975116720570902e-01, -9.065947517819635e-01, -1.660880826304355e-01, -1.744763006780110e-01, -1.744763006780110e-01, -1.342232706063827e-02, -1.412233108233601e-02, -7.301717656096546e-02, -7.765932290769295e-03, -9.752033631755792e-03, -9.752033631755792e-03, -6.266611062597560e+00, -6.269012144732807e+00, -6.266720002174026e+00, -6.268839714260634e+00, -6.267828987712176e+00, -6.267828987712176e+00, -2.216899955623670e+00, -2.235318929533487e+00, -2.200057231049556e+00, -2.216205321111422e+00, -2.235378569551496e+00, -2.235378569551496e+00, -6.958124110116432e-01, -7.785668675109946e-01, -6.407002751241587e-01, -6.862472930731567e-01, -7.097538300498301e-01, -7.097538300498301e-01, -1.441122964100572e-01, -2.071821356936032e-01, -1.374629950563671e-01, -2.346464266092342e+00, -1.478600279289827e-01, -1.478600279289827e-01, -5.993544146641765e-03, -7.591648914144569e-03, -5.802564122762169e-03, -1.055863245164169e-01, -6.990380653531103e-03, -6.990380653531103e-03, -7.262238686968089e-01, -7.164560997534022e-01, -7.198570942676372e-01, -7.226951386213774e-01, -7.212722984161344e-01, -7.212722984161344e-01, -7.082166291314068e-01, -5.684934042942952e-01, -6.066068639233696e-01, -6.464364940125624e-01, -6.260426089007306e-01, -6.260426089007306e-01, -8.152416401681493e-01, -2.487955914294809e-01, -2.930018489033516e-01, -3.983778673586594e-01, -3.391375679873566e-01, -3.391375679873566e-01, -5.227109807361685e-01, -7.047327395306605e-02, -9.145033801953936e-02, -3.901814878679828e-01, -1.198374511863698e-01, -1.198374511863698e-01, -1.890327571842509e-02, -2.030800137385627e-03, -4.261513096140845e-03, -1.159804880793810e-01, -6.468600205200304e-03, -6.468600205200299e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_pbe_jsjr_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbe_jsjr", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-5.081246871720330e-09, -5.081205177127000e-09, -5.080978280228710e-09, -5.081599474747886e-09, -5.081279878879672e-09, -5.081279878879672e-09, -6.964424956376510e-06, -6.964556630604034e-06, -6.966916219363323e-06, -6.957525311013294e-06, -6.963911316312899e-06, -6.963911316312899e-06, -4.599815296639232e-03, -4.607776917530618e-03, -4.758314173535561e-03, -4.621553202851339e-03, -4.664720733891107e-03, -4.664720733891107e-03, -5.713579410973525e-01, -5.630417650598402e-01, -2.547877078599730e-03, -8.851537398978961e-01, -7.844406476978643e-01, -7.844406476978644e-01, -3.530858602931763e+00, -3.729584864095832e+00, -2.016382228958605e+00, -3.211420811156493e+00, -4.078715559574234e+00, -4.078715559574245e+00, -1.479033777273824e-06, -1.478815572166005e-06, -1.479015550061422e-06, -1.478823047048490e-06, -1.478927751148360e-06, -1.478927751148360e-06, -5.763487695570897e-05, -5.638178175201671e-05, -5.792712315599858e-05, -5.681787909348268e-05, -5.679298631253271e-05, -5.679298631253271e-05, -8.758687414253530e-03, -6.863208618698670e-03, -1.175258737243395e-02, -1.103201266754416e-02, -8.319302532421857e-03, -8.319302532421857e-03, -1.195353535319357e+00, -3.881113396979959e-01, -1.341667579240935e+00, -8.357965227781124e-05, -1.308048318655875e+00, -1.308048318655875e+00, -4.232018129959122e+00, -3.779531680051186e+00, -2.373116952498879e+01, -2.134657540996410e+00, -1.104354899242890e+01, -1.104354899242888e+01, -9.582928417526176e-03, -9.609047953840202e-03, -9.599862268379956e-03, -9.592545079942998e-03, -9.596245931066569e-03, -9.596245931066569e-03, -1.076084053173997e-02, -1.594194146232718e-02, -1.428848733401787e-02, -1.280157064033990e-02, -1.355446986394890e-02, -1.355446986394890e-02, -5.663261388629234e-03, -2.107373772334850e-01, -1.331848249128987e-01, -6.190881909919239e-02, -9.343976231008011e-02, -9.343976231008014e-02, -2.206326198101116e-02, -1.847323034887474e+00, -1.792987104983884e+00, -7.697215870224344e-02, -2.208674936197949e+00, -2.208674936197951e+00, -2.842607917082287e+00, -1.855449441331089e+01, -8.978547213688442e+00, -2.275206875687249e+00, -1.394932512119772e+01, -1.394932512119775e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
