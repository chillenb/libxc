
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_vmt84_pbe_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_vmt84_pbe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.096187266891607e+01, -2.096189925157552e+01, -2.096208661263650e+01, -2.096168969619717e+01, -2.096188783566520e+01, -2.096188783566520e+01, -3.478295839322734e+00, -3.478256081711749e+00, -3.477422425870128e+00, -3.479532719827573e+00, -3.478332288437100e+00, -3.478332288437100e+00, -6.997724776522267e-01, -6.998419723612521e-01, -7.036017973244200e-01, -7.082829419345867e-01, -7.087136150591788e-01, -7.087136150591788e-01, -2.206516726673567e-01, -2.214264450128414e-01, -8.077496354470082e-01, -1.904271069513364e-01, -2.166655601177435e-01, -2.166655601177434e-01, -4.602064922548979e-03, -4.963343977827976e-03, -4.683238391307458e-02, -1.740295794830930e-03, -3.393605908499133e-03, -3.393605908499134e-03, -5.037112537303237e+00, -5.036463044604107e+00, -5.037093559358724e+00, -5.036519998036095e+00, -5.036777220170240e+00, -5.036777220170240e+00, -2.126867312908009e+00, -2.136308496237593e+00, -2.129313828048734e+00, -2.137631292943585e+00, -2.130938366565545e+00, -2.130938366565545e+00, -5.813483231973910e-01, -6.028787355070280e-01, -5.426944194333390e-01, -5.377032514258551e-01, -5.876628467365490e-01, -5.876628467365490e-01, -1.480233853623617e-01, -2.397426355686285e-01, -1.385021882985805e-01, -1.813767350581813e+00, -1.637743737556531e-01, -1.637743737556531e-01, -1.009669103850482e-03, -1.738449286037966e-03, -1.611069397469013e-03, -9.494612946062468e-02, -2.079295023487551e-03, -2.079295023487550e-03, -5.507742563480816e-01, -5.539613196283040e-01, -5.528528582059828e-01, -5.519208721460376e-01, -5.523873449926384e-01, -5.523873449926384e-01, -5.339888141128257e-01, -5.122113795811402e-01, -5.178873462827018e-01, -5.234869307102235e-01, -5.203817643654778e-01, -5.203817643654778e-01, -6.331864318630087e-01, -2.829466156276674e-01, -3.155543684684996e-01, -3.673727507778780e-01, -3.388541717459136e-01, -3.388541717459136e-01, -4.727985346468047e-01, -4.174500299651175e-02, -7.197635454041824e-02, -3.430480330114276e-01, -1.192042759364573e-01, -1.192042759364573e-01, -7.063832753142115e-03, -2.195040043168053e-05, -5.225314533511212e-04, -1.127821081504252e-01, -1.870661466350873e-03, -1.870661466350870e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_vmt84_pbe_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_vmt84_pbe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.508519091549260e+01, -2.508516163697560e+01, -2.508530986552143e+01, -2.508524802802854e+01, -2.508565571076030e+01, -2.508575331461430e+01, -2.508431326833276e+01, -2.508404197486497e+01, -2.508526361199506e+01, -2.508470052002162e+01, -2.508526361199506e+01, -2.508470052002162e+01, -4.020293765317749e+00, -4.020515079142998e+00, -4.020340914162542e+00, -4.020572033832702e+00, -4.021584176675737e+00, -4.021933804803864e+00, -4.020078730935509e+00, -4.020438796324951e+00, -4.019512677390075e+00, -4.021614276676975e+00, -4.019512677390075e+00, -4.021614276676975e+00, -7.498365642869220e-01, -7.552724398693790e-01, -7.478500536687530e-01, -7.544883749185320e-01, -7.226707919622475e-01, -7.146456600695499e-01, -7.238360325643580e-01, -7.264415150417347e-01, -7.649190831000251e-01, -6.881431074082649e-01, -7.649190831000251e-01, -6.881431074082649e-01, -1.919772647666846e-01, -1.966938660416857e-01, -1.927041701420962e-01, -1.985677865591998e-01, -8.628455222625248e-01, -9.037248552359928e-01, -1.747281603151138e-01, -1.761583378593481e-01, -1.996610093940336e-01, -1.575642314334501e-01, -1.996610093940335e-01, -1.575642314334500e-01, -8.290286118099781e-03, -8.718101302309387e-03, -8.594706352199798e-03, -9.097680957654822e-03, -1.168222459961063e-01, -1.224183942344392e-01, -5.239141735450474e-03, -5.136016166096781e-03, -7.545849045790073e-03, -4.446111511931477e-03, -7.545849045790066e-03, -4.446111511931488e-03, -6.192864837452491e+00, -6.191309455839565e+00, -6.195794371957991e+00, -6.194139722240965e+00, -6.193025918041982e+00, -6.191405519719757e+00, -6.195539656115914e+00, -6.193976707044826e+00, -6.194366711746831e+00, -6.192731237292124e+00, -6.194366711746831e+00, -6.192731237292124e+00, -2.149519880902471e+00, -2.149404438720142e+00, -2.167932348882770e+00, -2.167280191493777e+00, -2.129894247967949e+00, -2.135383746848165e+00, -2.145606860553691e+00, -2.151316895451028e+00, -2.174918498109295e+00, -2.160852968549773e+00, -2.174918498109295e+00, -2.160852968549773e+00, -6.843851564993958e-01, -6.826684099349549e-01, -7.737448378836330e-01, -7.745007922166559e-01, -6.151750693731354e-01, -6.408376835651707e-01, -6.699466704467699e-01, -6.917483053761035e-01, -7.163838236059952e-01, -6.792600098527235e-01, -7.163838236059952e-01, -6.792600098527235e-01, -1.636247396560954e-01, -1.634201368184891e-01, -2.132847952835591e-01, -2.138391250710442e-01, -1.562724254733578e-01, -1.590959794605757e-01, -2.334285378585359e+00, -2.333300015547351e+00, -1.642423604635739e-01, -1.585015343385141e-01, -1.642423604635739e-01, -1.585015343385141e-01, -3.701302924474141e-03, -3.851335235932883e-03, -5.045715878231388e-03, -5.119469690193981e-03, -3.781435119202113e-03, -3.976428935800206e-03, -1.323593762375320e-01, -1.335034994686817e-01, -3.849810686117944e-03, -5.216201223009027e-03, -3.849810686117945e-03, -5.216201223009027e-03, -7.232786576070199e-01, -7.262142699317083e-01, -7.110414564539771e-01, -7.140576049496885e-01, -7.152718118232284e-01, -7.182877425404276e-01, -7.188550567663612e-01, -7.217948499766773e-01, -7.170579057292842e-01, -7.200346334520855e-01, -7.170579057292842e-01, -7.200346334520855e-01, -7.063493639755390e-01, -7.087039662512129e-01, -5.520235511383585e-01, -5.548670020520812e-01, -5.925323701060636e-01, -5.957586510702809e-01, -6.367672447836401e-01, -6.392235057380551e-01, -6.141821325640251e-01, -6.166995542710534e-01, -6.141821325640251e-01, -6.166995542710534e-01, -8.091753100497708e-01, -8.111438068185043e-01, -2.482226224665879e-01, -2.491342813479893e-01, -2.851318242530669e-01, -2.875756927734781e-01, -3.858812774146479e-01, -3.882745633637241e-01, -3.287720897407991e-01, -3.287424359182454e-01, -3.287720897407991e-01, -3.287424359182454e-01, -5.065482948871823e-01, -5.108217386556696e-01, -1.136100356428780e-01, -1.146834497539521e-01, -1.345214616529933e-01, -1.344960034243530e-01, -3.774507144769953e-01, -3.841065807546173e-01, -1.398081704800778e-01, -1.375699852865939e-01, -1.398081704800776e-01, -1.375699852865939e-01, -1.126407378559299e-02, -1.159892147526886e-02, -1.416134877768720e-04, -3.282319523377968e-04, -2.209461656812190e-03, -2.548496991461171e-03, -1.354879144132796e-01, -1.365932674349848e-01, -3.662593254753336e-03, -4.828538831395964e-03, -3.662593254753333e-03, -4.828538831395959e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_vmt84_pbe_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_vmt84_pbe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.450228297957321e-08, 0.000000000000000e+00, -1.450236226244528e-08, -1.450215302727392e-08, 0.000000000000000e+00, -1.450226782207676e-08, -1.450162347065452e-08, 0.000000000000000e+00, -1.450154087383308e-08, -1.450309397047009e-08, 0.000000000000000e+00, -1.450341424826593e-08, -1.450221122107395e-08, 0.000000000000000e+00, -1.450258164332062e-08, -1.450221122107395e-08, 0.000000000000000e+00, -1.450258164332062e-08, -1.975686814465638e-05, 0.000000000000000e+00, -1.976195190037541e-05, -1.975712266749118e-05, 0.000000000000000e+00, -1.976261424636241e-05, -1.976740720492411e-05, 0.000000000000000e+00, -1.976964126978914e-05, -1.973682269037480e-05, 0.000000000000000e+00, -1.974012037792946e-05, -1.976850817939617e-05, 0.000000000000000e+00, -1.974760642704788e-05, -1.976850817939617e-05, 0.000000000000000e+00, -1.974760642704788e-05, -1.288729910492598e-02, 0.000000000000000e+00, -1.285767877443469e-02, -1.290711515654957e-02, 0.000000000000000e+00, -1.287137791107260e-02, -1.315323411229035e-02, 0.000000000000000e+00, -1.317334912099163e-02, -1.279474956558636e-02, 0.000000000000000e+00, -1.279362135502945e-02, -1.271842853811602e-02, 0.000000000000000e+00, -1.263737129109963e-02, -1.271842853811602e-02, 0.000000000000000e+00, -1.263737129109963e-02, -1.534386533490172e+00, 0.000000000000000e+00, -1.427163283059373e+00, -1.532059650169525e+00, 0.000000000000000e+00, -1.403492616497054e+00, -7.454170911640451e-03, 0.000000000000000e+00, -6.864970996710044e-03, -2.164133818937723e+00, 0.000000000000000e+00, -2.093602707057374e+00, -1.319273999917084e+00, 0.000000000000000e+00, -3.026945995481179e+00, -1.319273999917083e+00, 0.000000000000000e+00, -3.026945995481192e+00, 7.928844874143025e+02, 0.000000000000000e+00, 6.352279656511658e+02, 6.720926925330272e+02, 0.000000000000000e+00, 5.210996016447965e+02, 7.547666697793132e+01, 0.000000000000000e+00, 6.327252506060695e+01, 4.113055875116441e+03, 0.000000000000000e+00, 4.272181976887299e+03, 1.189156171950191e+03, 0.000000000000000e+00, 8.887610219891394e+03, 1.189156171950189e+03, 0.000000000000000e+00, 8.887610219891438e+03, -4.237815916808260e-06, 0.000000000000000e+00, -4.241759365164782e-06, -4.237587442132604e-06, 0.000000000000000e+00, -4.241539716963002e-06, -4.237773471283552e-06, 0.000000000000000e+00, -4.241730490911619e-06, -4.237577882970476e-06, 0.000000000000000e+00, -4.241531308090539e-06, -4.237722872828625e-06, 0.000000000000000e+00, -4.241653717100147e-06, -4.237722872828625e-06, 0.000000000000000e+00, -4.241653717100147e-06, -1.590409838116083e-04, 0.000000000000000e+00, -1.590696671728072e-04, -1.556803671322724e-04, 0.000000000000000e+00, -1.558205846806367e-04, -1.595294299613073e-04, 0.000000000000000e+00, -1.594604978111168e-04, -1.566529897032335e-04, 0.000000000000000e+00, -1.565095485282161e-04, -1.566559682543887e-04, 0.000000000000000e+00, -1.573065361230298e-04, -1.566559682543887e-04, 0.000000000000000e+00, -1.573065361230298e-04, -2.478730893556747e-02, 0.000000000000000e+00, -2.506125313612028e-02, -1.981388182032656e-02, 0.000000000000000e+00, -1.980040061071166e-02, -3.566138435631027e-02, 0.000000000000000e+00, -3.129999801265337e-02, -3.400354852230135e-02, 0.000000000000000e+00, -2.979184851419125e-02, -2.155938372990852e-02, 0.000000000000000e+00, -2.630356755013953e-02, -2.155938372990853e-02, 0.000000000000000e+00, -2.630356755013953e-02, -2.244160946146447e+00, 0.000000000000000e+00, -2.314245472595493e+00, -9.682335153289467e-01, 0.000000000000000e+00, -9.582561566281580e-01, -2.263667426670197e+00, 0.000000000000000e+00, -2.377795780198920e+00, -2.410624422136185e-04, 0.000000000000000e+00, -2.415103063862147e-04, -2.677939786546717e+00, 0.000000000000000e+00, -3.197444323070939e+00, -2.677939786546717e+00, 0.000000000000000e+00, -3.197444323070939e+00, 9.604020821505095e+03, 0.000000000000000e+00, 8.269181637378764e+03, 4.849977774238309e+03, 0.000000000000000e+00, 4.540387059067535e+03, 1.799023210612040e+04, 0.000000000000000e+00, 1.531168225913273e+04, 1.991701165542663e+00, 0.000000000000000e+00, 2.039969443197104e+00, 1.409836629626598e+04, 0.000000000000000e+00, 5.240667521834391e+03, 1.409836629626596e+04, 0.000000000000000e+00, 5.240667521834386e+03, -2.796703705932427e-02, 0.000000000000000e+00, -2.754963788676378e-02, -2.794646966529971e-02, 0.000000000000000e+00, -2.753420935367171e-02, -2.795364958873092e-02, 0.000000000000000e+00, -2.753968073244078e-02, -2.796057085308364e-02, 0.000000000000000e+00, -2.754491482526629e-02, -2.795726176318232e-02, 0.000000000000000e+00, -2.754239418827893e-02, -2.795726176318232e-02, 0.000000000000000e+00, -2.754239418827893e-02, -3.140636035485701e-02, 0.000000000000000e+00, -3.099623000077505e-02, -4.497359428311665e-02, 0.000000000000000e+00, -4.434781341009465e-02, -4.078433254574939e-02, 0.000000000000000e+00, -4.019036361085556e-02, -3.688938919409475e-02, 0.000000000000000e+00, -3.640576448489880e-02, -3.887706161096983e-02, 0.000000000000000e+00, -3.834464775709211e-02, -3.887706161096983e-02, 0.000000000000000e+00, -3.834464775709211e-02, -1.637413174051149e-02, 0.000000000000000e+00, -1.629641109283221e-02, -5.455577771851010e-01, 0.000000000000000e+00, -5.390161635521924e-01, -3.575418021278848e-01, 0.000000000000000e+00, -3.506753140723755e-01, -1.741562249703725e-01, 0.000000000000000e+00, -1.708967404431523e-01, -2.543747756608658e-01, 0.000000000000000e+00, -2.556392931272201e-01, -2.543747756608661e-01, 0.000000000000000e+00, -2.556392931272201e-01, -6.240806246556535e-02, 0.000000000000000e+00, -6.110499715639982e-02, 7.664165307191853e+01, 0.000000000000000e+00, 7.550835263921830e+01, 2.252250635728178e+01, 0.000000000000000e+00, 1.831861986003657e+01, -2.224125168149866e-01, 0.000000000000000e+00, -2.113368334319549e-01, -2.803540512166339e+00, 0.000000000000000e+00, -4.139840888824883e+00, -2.803540512166369e+00, 0.000000000000000e+00, -4.139840888824886e+00, 2.049859806086451e+02, 0.000000000000000e+00, 1.786949714237222e+02, 2.182068053136451e+04, 0.000000000000000e+00, 6.460960955801820e+04, 2.576111813421841e+04, 0.000000000000000e+00, 2.437230545831948e+04, -2.936207764657967e+00, 0.000000000000000e+00, -3.010112632975988e+00, 2.004220369513528e+04, 0.000000000000000e+00, 7.037117126512654e+03, 2.004220369513535e+04, 0.000000000000000e+00, 7.037117126512685e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
