
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_2d_b88_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_2d_b88", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.484458101778549e+02, -1.484464147415789e+02, -1.484493178176535e+02, -1.484403187012647e+02, -1.484450034330621e+02, -1.484450034330621e+02, -9.961931100617294e+00, -9.961920588851793e+00, -9.962038566304965e+00, -9.964631772862090e+00, -9.962274895169998e+00, -9.962274895169998e+00, -9.265876824793022e-01, -9.259389382707007e-01, -9.116650909328766e-01, -9.213855052282667e-01, -9.209093222241781e-01, -9.209093222241781e-01, -1.670286948535499e-01, -1.686105585017872e-01, -1.146883584810204e+00, -1.334781651442250e-01, -1.635716059364226e-01, -1.635716059364226e-01, -3.336179065949414e-02, -3.329002074196318e-02, -5.992982718157688e-02, -3.096149162933280e-02, -3.112101610511379e-02, -3.112101610511377e-02, -1.797944093863981e+01, -1.798305571441433e+01, -1.797963209580557e+01, -1.798282283312239e+01, -1.798125977424748e+01, -1.798125977424748e+01, -4.426539459173893e+00, -4.467819087975466e+00, -4.404751566296714e+00, -4.441119423235900e+00, -4.459988822617975e+00, -4.459988822617975e+00, -7.328747023410004e-01, -7.859125369268178e-01, -6.610119670796075e-01, -6.635724408523083e-01, -7.469425260728094e-01, -7.469425260728095e-01, -1.034224600501537e-01, -1.815307976936835e-01, -9.725378173108842e-02, -4.029726067903500e+00, -1.113014994498218e-01, -1.113014994498218e-01, -2.794775297629550e-02, -2.975305375676780e-02, -1.890847524231646e-02, -7.309032569627893e-02, -2.328001597553794e-02, -2.328001597553795e-02, -6.871088869101740e-01, -6.937479334409875e-01, -6.917113848068557e-01, -6.897933334607209e-01, -6.907792172154313e-01, -6.907792172154313e-01, -6.552733707438181e-01, -5.950471863605586e-01, -6.162994227762404e-01, -6.348457681319390e-01, -6.254929940687983e-01, -6.254929940687983e-01, -8.446007793999519e-01, -2.318358259503341e-01, -2.787740025380543e-01, -3.687379061171244e-01, -3.191020623850105e-01, -3.191020623850104e-01, -5.303074203130745e-01, -5.989231303129448e-02, -6.827791661870637e-02, -3.397591479347712e-01, -8.210536802497875e-02, -8.210536802497874e-02, -3.743299594316929e-02, -1.714948330522182e-02, -2.241833843888634e-02, -7.898544755515996e-02, -2.183086058206657e-02, -2.183086058206656e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_2d_b88_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_2d_b88", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.211507780471109e+02, -2.211503518418677e+02, -2.211518746142891e+02, -2.211511484473489e+02, -2.211555643109998e+02, -2.211563846798106e+02, -2.211431758557327e+02, -2.211405959994427e+02, -2.211514228949541e+02, -2.211470407110025e+02, -2.211514228949541e+02, -2.211470407110025e+02, -1.432116678066982e+01, -1.432107241918240e+01, -1.432125957029812e+01, -1.432113611914339e+01, -1.432321766999864e+01, -1.432385739553529e+01, -1.432331722440742e+01, -1.432384163350160e+01, -1.431746987392326e+01, -1.432599882941502e+01, -1.431746987392326e+01, -1.432599882941502e+01, -1.190280956885691e+00, -1.197097133068198e+00, -1.187610016102771e+00, -1.195950573531871e+00, -1.152715492561857e+00, -1.141833740061966e+00, -1.159608141394122e+00, -1.163052824596910e+00, -1.210612485588283e+00, -1.107062677735961e+00, -1.210612485588283e+00, -1.107062677735961e+00, -1.656206680040967e-01, -1.740855319570886e-01, -1.680454318594481e-01, -1.778965048856522e-01, -1.464773129487954e+00, -1.539456437913732e+00, -1.183107911010415e-01, -1.205172347711001e-01, -1.760646781711429e-01, -7.894145356511148e-02, -1.760646781711429e-01, -7.894145356511147e-02, -6.221554781222006e-03, -6.429243069367296e-03, -6.318042999648920e-03, -6.556985331551361e-03, -2.464391624659632e-02, -2.602525046444968e-02, -5.014229772447699e-03, -5.005270741500836e-03, -5.881884906938388e-03, -3.889052281174390e-03, -5.881884906938409e-03, -3.889052281174421e-03, -2.648465662640653e+01, -2.647504047163316e+01, -2.649354723286390e+01, -2.648362763643069e+01, -2.648518393024558e+01, -2.647535943886007e+01, -2.649281219380374e+01, -2.648316016722560e+01, -2.648918442913001e+01, -2.647934893384612e+01, -2.648918442913001e+01, -2.647934893384612e+01, -5.956003309257154e+00, -5.955547624189690e+00, -6.023116488437595e+00, -6.020625017157061e+00, -5.898518721800579e+00, -5.914483871823390e+00, -5.956208862411961e+00, -5.973006095666634e+00, -6.037028803804342e+00, -5.995609464895552e+00, -6.037028803804342e+00, -5.995609464895552e+00, -9.787682607792008e-01, -9.748847710494731e-01, -1.120275757459456e+00, -1.121418489614856e+00, -8.450227261600219e-01, -8.922099870551716e-01, -9.061083030819433e-01, -9.516878729297183e-01, -1.039121339166448e+00, -9.618694028784160e-01, -1.039121339166448e+00, -9.618694028784163e-01, -7.554788390058959e-02, -7.635236495591015e-02, -1.742228925766002e-01, -1.753831669253124e-01, -6.656210900512453e-02, -7.097909099345763e-02, -5.925060168869898e+00, -5.921117230782457e+00, -8.855827156492008e-02, -9.416514681564411e-02, -8.855827156492008e-02, -9.416514681564411e-02, -4.210184166798168e-03, -4.388593303291597e-03, -4.768548152460452e-03, -4.868071610894465e-03, -3.085641059941851e-03, -3.098882155402521e-03, -4.212643497096040e-02, -4.251964116398196e-02, -3.537661041269174e-03, -4.049989916864827e-03, -3.537661041269167e-03, -4.049989916864845e-03, -1.003877197000823e+00, -1.009971104657394e+00, -9.851394490653981e-01, -9.911819095101647e-01, -9.909862070085594e-01, -9.970872626049435e-01, -9.963927576722602e-01, -1.002429401026726e+00, -9.936198372093896e-01, -9.996889480485747e-01, -9.936198372093896e-01, -9.996889480485747e-01, -9.682799915817556e-01, -9.731441938319513e-01, -7.497377433485987e-01, -7.544944729966524e-01, -8.015061649518611e-01, -8.068373778335953e-01, -8.584778062982670e-01, -8.630915875181906e-01, -8.287416988898464e-01, -8.334000550359190e-01, -8.287416988898464e-01, -8.334000550359190e-01, -1.200744134090080e+00, -1.204272288347502e+00, -2.390557075333466e-01, -2.409017420698270e-01, -3.050281888198847e-01, -3.090679727634083e-01, -4.475386155756830e-01, -4.511120156337522e-01, -3.702716830311081e-01, -3.699832964869086e-01, -3.702716830311080e-01, -3.699832964869085e-01, -6.618092556841187e-01, -6.684168766263470e-01, -2.436833143842015e-02, -2.453129928290639e-02, -3.314351558822766e-02, -3.428887960966314e-02, -4.186404045072734e-01, -4.278276289652101e-01, -5.414721325196307e-02, -5.724891716868811e-02, -5.414721325196309e-02, -5.724891716868807e-02, -7.846365674856508e-03, -7.987903788238920e-03, -2.389669196786228e-03, -2.130949403571471e-03, -3.283486268166121e-03, -3.314410359965830e-03, -5.117024386852693e-02, -5.221764413636367e-02, -3.030858328343673e-03, -3.873345025656372e-03, -3.030858328343675e-03, -3.873345025656416e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_2d_b88_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_2d_b88", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-6.833252231568720e-09, 0.000000000000000e+00, -6.833292474606879e-09, -6.833169588468135e-09, 0.000000000000000e+00, -6.833232427693253e-09, -6.832865468571626e-09, 0.000000000000000e+00, -6.832807771756276e-09, -6.833799813996196e-09, 0.000000000000000e+00, -6.833998369007856e-09, -6.833204948010556e-09, 0.000000000000000e+00, -6.833493190628484e-09, -6.833204948010556e-09, 0.000000000000000e+00, -6.833493190628484e-09, -1.768723024050071e-05, 0.000000000000000e+00, -1.769404146772539e-05, -1.768771965119891e-05, 0.000000000000000e+00, -1.769504511709136e-05, -1.770479243346194e-05, 0.000000000000000e+00, -1.770883630497851e-05, -1.766310160960356e-05, 0.000000000000000e+00, -1.766840094944564e-05, -1.769751892586721e-05, 0.000000000000000e+00, -1.768192042388836e-05, -1.769751892586721e-05, 0.000000000000000e+00, -1.768192042388836e-05, -1.236065637598152e-02, 0.000000000000000e+00, -1.251846725648828e-02, -1.231826387435524e-02, 0.000000000000000e+00, -1.250952503597721e-02, -1.184089338722121e-02, 0.000000000000000e+00, -1.164114020019373e-02, -1.141600794796735e-02, 0.000000000000000e+00, -1.148598544624609e-02, -1.268068950400711e-02, 0.000000000000000e+00, -1.046611826722105e-02, -1.268068950400711e-02, 0.000000000000000e+00, -1.046611826722105e-02, -1.106872094921262e+00, 0.000000000000000e+00, -1.017813113059160e+00, -1.095895128321726e+00, 0.000000000000000e+00, -9.952114163673618e-01, -7.222093180333891e-03, 0.000000000000000e+00, -7.059447352409152e-03, -1.990480092809729e+00, 0.000000000000000e+00, -1.907692503414398e+00, -9.516653537651334e-01, 0.000000000000000e+00, -4.646265442174248e+00, -9.516653537651329e-01, 0.000000000000000e+00, -4.646265442174249e+00, -1.258781844894752e+04, 0.000000000000000e+00, -1.055414326381915e+04, -1.117289394179903e+04, 0.000000000000000e+00, -9.167101548491424e+03, -7.429900736603379e+01, 0.000000000000000e+00, -6.398627448125773e+01, -5.273766550138159e+04, 0.000000000000000e+00, -5.492770914924541e+04, -1.743662451740483e+04, 0.000000000000000e+00, -1.129273389453459e+05, -1.743662451740485e+04, 0.000000000000000e+00, -1.129273389453458e+05, -3.517034681595699e-06, 0.000000000000000e+00, -3.520547805966603e-06, -3.518175263151410e-06, 0.000000000000000e+00, -3.521652687577196e-06, -3.517064997236498e-06, 0.000000000000000e+00, -3.520562109932184e-06, -3.518044034330265e-06, 0.000000000000000e+00, -3.521566127158833e-06, -3.517644376821710e-06, 0.000000000000000e+00, -3.521106956996336e-06, -3.517644376821710e-06, 0.000000000000000e+00, -3.521106956996336e-06, -1.408906902780308e-04, 0.000000000000000e+00, -1.409155733322425e-04, -1.381929078054108e-04, 0.000000000000000e+00, -1.383114430886256e-04, -1.405193443868728e-04, 0.000000000000000e+00, -1.406862703115116e-04, -1.382102839235268e-04, 0.000000000000000e+00, -1.383095713822363e-04, -1.395776643142440e-04, 0.000000000000000e+00, -1.395880788826587e-04, -1.395776643142440e-04, 0.000000000000000e+00, -1.395880788826587e-04, -2.944500306860437e-02, 0.000000000000000e+00, -2.980119697662048e-02, -3.426943499328160e-02, 0.000000000000000e+00, -3.448920445516322e-02, -3.999567764615243e-02, 0.000000000000000e+00, -3.618020910361892e-02, -5.594892793785781e-02, 0.000000000000000e+00, -4.836670459944526e-02, -2.673799852320976e-02, 0.000000000000000e+00, -3.221907294748930e-02, -2.673799852320976e-02, 0.000000000000000e+00, -3.221907294748929e-02, -4.784132840844923e+00, 0.000000000000000e+00, -4.700294632402024e+00, -7.921756506046345e-01, 0.000000000000000e+00, -7.814228964021290e-01, -6.419390172154324e+00, 0.000000000000000e+00, -5.567550394415264e+00, -3.078174846565492e-04, 0.000000000000000e+00, -3.084947601252743e-04, -3.572329807196272e+00, 0.000000000000000e+00, -3.372952408775733e+00, -3.572329807196272e+00, 0.000000000000000e+00, -3.372952408775733e+00, -1.319190010733980e+05, 0.000000000000000e+00, -1.135756262596449e+05, -6.202225343491145e+04, 0.000000000000000e+00, -5.813085948317980e+04, -2.291547104288056e+05, 0.000000000000000e+00, -2.001391132090126e+05, -1.929915454711300e+01, 0.000000000000000e+00, -1.876498140017243e+01, -1.783504743141897e+05, 0.000000000000000e+00, -7.150239715570802e+04, -1.783504743141896e+05, 0.000000000000000e+00, -7.150239715570802e+04, -6.125985971937608e-02, 0.000000000000000e+00, -6.054307615868802e-02, -4.989472435016485e-02, 0.000000000000000e+00, -4.936113536470976e-02, -5.302029404162694e-02, 0.000000000000000e+00, -5.245852163450110e-02, -5.623064853314783e-02, 0.000000000000000e+00, -5.556936275809302e-02, -5.454508341392187e-02, 0.000000000000000e+00, -5.393564156650161e-02, -5.454508341392187e-02, 0.000000000000000e+00, -5.393564156650161e-02, -7.641940318625114e-02, 0.000000000000000e+00, -7.538921499552050e-02, -4.326108266965798e-02, 0.000000000000000e+00, -4.284462356306941e-02, -4.510235353982067e-02, 0.000000000000000e+00, -4.472474246890742e-02, -4.993798758092474e-02, 0.000000000000000e+00, -4.941766357430424e-02, -4.717248919258110e-02, 0.000000000000000e+00, -4.665068416486228e-02, -4.717248919258110e-02, 0.000000000000000e+00, -4.665068416486228e-02, -2.736015678944925e-02, 0.000000000000000e+00, -2.750036330448649e-02, -4.068391137494831e-01, 0.000000000000000e+00, -4.011893498638328e-01, -2.624840972182340e-01, 0.000000000000000e+00, -2.579405878588176e-01, -1.560419788629946e-01, 0.000000000000000e+00, -1.537195403958025e-01, -1.992697280835913e-01, 0.000000000000000e+00, -2.005717653911005e-01, -1.992697280835912e-01, 0.000000000000000e+00, -2.005717653911006e-01, -5.915825543527117e-02, 0.000000000000000e+00, -5.840367630276583e-02, -7.630031822842730e+01, 0.000000000000000e+00, -7.489356465769768e+01, -3.350744185234864e+01, 0.000000000000000e+00, -3.081891444761329e+01, -2.210802372012267e-01, 0.000000000000000e+00, -2.134886509420812e-01, -1.091506825523710e+01, 0.000000000000000e+00, -1.002605105730449e+01, -1.091506825523710e+01, 0.000000000000000e+00, -1.002605105730449e+01, -4.252959139099960e+03, 0.000000000000000e+00, -3.864656616218391e+03, -3.820492217587023e+06, 0.000000000000000e+00, -4.427552571105145e+06, -4.336147105435191e+05, 0.000000000000000e+00, -3.694171816954770e+05, -1.264730107812239e+01, 0.000000000000000e+00, -1.204240541046512e+01, -2.536901521376055e+05, 0.000000000000000e+00, -9.270293015031303e+04, -2.536901521376063e+05, 0.000000000000000e+00, -9.270293015031333e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
