
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_cap_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_cap", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.077212829713748e+01, -2.077216088801495e+01, -2.077236430931491e+01, -2.077187821938437e+01, -2.077212459909686e+01, -2.077212459909686e+01, -3.433810595202550e+00, -3.433780599961200e+00, -3.433171485706774e+00, -3.434882860786811e+00, -3.433857668102563e+00, -3.433857668102563e+00, -6.853016679338320e-01, -6.852240270503132e-01, -6.852718721506814e-01, -6.899910826220349e-01, -6.911309913511834e-01, -6.911309913511834e-01, -2.145537194576020e-01, -2.148878264107586e-01, -7.926021764847013e-01, -1.970013640750749e-01, -2.151054206314326e-01, -2.151054206314325e-01, -2.132167745311923e-01, -2.079094479562951e-01, -1.835459460731625e-01, -2.405649679043036e-01, -2.129723447584269e-01, -2.129723447584267e-01, -5.005461030765197e+00, -5.005114662274279e+00, -5.005454535434678e+00, -5.005148606598176e+00, -5.005280258486692e+00, -5.005280258486692e+00, -2.069225813861878e+00, -2.079237248379715e+00, -2.069779847048768e+00, -2.078569774527407e+00, -2.074570553863168e+00, -2.074570553863168e+00, -5.749908136264676e-01, -6.015133725137258e-01, -5.358866396826251e-01, -5.358783093436916e-01, -5.819863800272487e-01, -5.819863800272487e-01, -1.882008781418633e-01, -2.399086292432595e-01, -1.837908558717372e-01, -1.809964106498020e+00, -1.810741871383428e-01, -1.810741871383428e-01, -2.314181611009312e-01, -2.303470856694484e-01, -1.409627390995536e-01, -1.686886039794571e-01, -1.700690880517620e-01, -1.700690880517621e-01, -5.504836025620934e-01, -5.527853939277780e-01, -5.520182854430753e-01, -5.513471730224666e-01, -5.516860564649479e-01, -5.516860564649479e-01, -5.338908745471080e-01, -5.018796795169830e-01, -5.108416497641780e-01, -5.197417381345524e-01, -5.150190352972842e-01, -5.150190352972842e-01, -6.315665983484735e-01, -2.759013726652745e-01, -3.049672579815152e-01, -3.589729746913316e-01, -3.284392282077913e-01, -3.284392282077913e-01, -4.630450744702825e-01, -1.896167258200124e-01, -1.823807696904599e-01, -3.371434209011476e-01, -1.628858091285612e-01, -1.628858091285613e-01, -2.137749380779125e-01, -1.776902468772666e-01, -1.963089874014941e-01, -1.624333941551092e-01, -1.610799499425365e-01, -1.610799499425364e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_cap_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_cap", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.541954534897129e+01, -2.541951486025459e+01, -2.541965560582177e+01, -2.541959494172507e+01, -2.541998692292889e+01, -2.542007569105971e+01, -2.541874230899905e+01, -2.541848914842917e+01, -2.541961218992489e+01, -2.541910758302362e+01, -2.541961218992489e+01, -2.541910758302362e+01, -4.089767991743969e+00, -4.089930851214202e+00, -4.089808161596621e+00, -4.089977016414368e+00, -4.090843157958392e+00, -4.091138357641439e+00, -4.089709118778552e+00, -4.090007155298955e+00, -4.088997926469670e+00, -4.091001048407906e+00, -4.088997926469670e+00, -4.091001048407906e+00, -7.657911444834699e-01, -7.713465813951649e-01, -7.637361502103505e-01, -7.705508328681997e-01, -7.363843051209048e-01, -7.268997151570600e-01, -7.369772963536574e-01, -7.400436463592192e-01, -7.810108295171424e-01, -6.874929395189736e-01, -7.810108295171424e-01, -6.874929395189736e-01, -1.658411847074277e-01, -1.754010624029672e-01, -1.696745001958354e-01, -1.806143322041958e-01, -8.812222779400188e-01, -9.221064913932672e-01, -1.076129437144343e-01, -1.097142730110858e-01, -1.740172247051502e-01, -5.946712806680936e-02, -1.740172247051501e-01, -5.946712806680930e-02, 4.936042294934073e-02, 4.926512668183301e-02, 4.849697095986132e-02, 4.827079500128201e-02, 2.595819635949415e-02, 2.334341669144043e-02, 5.140783411186466e-02, 5.176873069891196e-02, 4.973475047757749e-02, 3.983118839394933e-02, 4.973475047757749e-02, 3.983118839394929e-02, -6.253574145072881e+00, -6.252024139471963e+00, -6.256023981726500e+00, -6.254390920229106e+00, -6.253710819438076e+00, -6.252105879465671e+00, -6.255812928228791e+00, -6.254255994713575e+00, -6.254828623515441e+00, -6.253212878306546e+00, -6.254828623515441e+00, -6.253212878306546e+00, -2.185045965653753e+00, -2.184924604504599e+00, -2.205194473870949e+00, -2.204498578538346e+00, -2.160756664725028e+00, -2.167701536319100e+00, -2.178260744636198e+00, -2.185329021186139e+00, -2.214218152659855e+00, -2.197702970714023e+00, -2.214218152659855e+00, -2.197702970714023e+00, -6.949664622561580e-01, -6.931992175496724e-01, -7.767928732145861e-01, -7.774436402327305e-01, -6.260116551128259e-01, -6.514280404401167e-01, -6.736565301308054e-01, -6.957075762318917e-01, -7.262595839653400e-01, -6.890010681913507e-01, -7.262595839653400e-01, -6.890010681913507e-01, -4.791592445135849e-02, -4.959703678271980e-02, -1.545293803893310e-01, -1.556573286038126e-01, -3.748439127115145e-02, -4.348243424966244e-02, -2.342695944805864e+00, -2.341690295461095e+00, -7.008463112474164e-02, -8.387103257619710e-02, -7.008463112474164e-02, -8.387103257619710e-02, 4.720514495305739e-02, 4.894164925346650e-02, 4.902488495513414e-02, 5.001468048459987e-02, 3.167185634168165e-02, 3.077366832634692e-02, -7.735609808819188e-03, -7.549343549224783e-03, 3.779173093405631e-02, 3.770583680617257e-02, 3.779173093405633e-02, 3.770583680617264e-02, -7.239881503549556e-01, -7.268985789199899e-01, -7.136623569057290e-01, -7.166261483569288e-01, -7.171868686312861e-01, -7.201548331374172e-01, -7.202020142700478e-01, -7.231101441323313e-01, -7.186852643611989e-01, -7.216224893850028e-01, -7.186852643611989e-01, -7.216224893850028e-01, -7.065934036957675e-01, -7.089457891628171e-01, -5.637743099095551e-01, -5.666684011941960e-01, -6.032554616400481e-01, -6.064138591831854e-01, -6.437794694803157e-01, -6.462011844650142e-01, -6.232800004609111e-01, -6.257735990187434e-01, -6.232800004609111e-01, -6.257735990187434e-01, -8.127729111188943e-01, -8.145734453620361e-01, -2.121582560337258e-01, -2.139161083488746e-01, -2.717991095543292e-01, -2.757656071267628e-01, -3.939093340210184e-01, -3.963849609530171e-01, -3.305572020604045e-01, -3.307036550512136e-01, -3.305572020604044e-01, -3.307036550512136e-01, -5.173350459374092e-01, -5.216987648082748e-01, 2.837876253957786e-02, 2.805969934643036e-02, 1.322475830474108e-02, 1.075880911869784e-02, -3.852176773147498e-01, -3.918872798842463e-01, -2.759166839774542e-02, -3.643072388064235e-02, -2.759166839774552e-02, -3.643072388064238e-02, 5.076701881609381e-02, 5.022171596422605e-02, 3.478197829492112e-02, 3.034594436057582e-02, 4.008456009889458e-02, 3.952385136323269e-02, -2.529976954135242e-02, -2.653425848994360e-02, 3.149144186782930e-02, 3.745512980478422e-02, 3.149144186782917e-02, 3.745512980478428e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_cap_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_cap", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.152815533308958e-08, 0.000000000000000e+00, -1.152821916429343e-08, -1.152806215618227e-08, 0.000000000000000e+00, -1.152815144116665e-08, -1.152766005354410e-08, 0.000000000000000e+00, -1.152760438251195e-08, -1.152871502279721e-08, 0.000000000000000e+00, -1.152894820974400e-08, -1.152810501310064e-08, 0.000000000000000e+00, -1.152833448269049e-08, -1.152810501310064e-08, 0.000000000000000e+00, -1.152833448269049e-08, -1.563606688845144e-05, 0.000000000000000e+00, -1.564008724660258e-05, -1.563626780245580e-05, 0.000000000000000e+00, -1.564061115374817e-05, -1.564440978808790e-05, 0.000000000000000e+00, -1.564618428652531e-05, -1.562022197967212e-05, 0.000000000000000e+00, -1.562282143224676e-05, -1.564528099964559e-05, 0.000000000000000e+00, -1.562873328308107e-05, -1.564528099964559e-05, 0.000000000000000e+00, -1.562873328308107e-05, -1.038467834439855e-02, 0.000000000000000e+00, -1.032253846786059e-02, -1.041478143833754e-02, 0.000000000000000e+00, -1.033776062808877e-02, -1.085216737823844e-02, 0.000000000000000e+00, -1.098223536190720e-02, -1.060867000897868e-02, 0.000000000000000e+00, -1.057211489162837e-02, -1.016212213306206e-02, 0.000000000000000e+00, -1.124634766155407e-02, -1.016212213306206e-02, 0.000000000000000e+00, -1.124634766155407e-02, -1.822484898602456e+00, 0.000000000000000e+00, -1.606823639075209e+00, -1.762726027548000e+00, 0.000000000000000e+00, -1.526181076434578e+00, -5.994578616357650e-03, 0.000000000000000e+00, -5.459477025011751e-03, -4.283934538335594e+00, 0.000000000000000e+00, -4.076908242890436e+00, -1.544091387946881e+00, 0.000000000000000e+00, -1.246901318932257e+01, -1.544091387946880e+00, 0.000000000000000e+00, -1.246901318932257e+01, -1.091344716354759e+05, 0.000000000000000e+00, -8.989780347547702e+04, -9.519228260908149e+04, 0.000000000000000e+00, -7.650220220078106e+04, -3.537425597422416e+02, 0.000000000000000e+00, -2.970085498713676e+02, -5.315790849747962e+05, 0.000000000000000e+00, -5.570574010656389e+05, -1.564015628119599e+05, 0.000000000000000e+00, -1.124587140764752e+06, -1.564015628119601e+05, 0.000000000000000e+00, -1.124587140764752e+06, -3.405628465769329e-06, 0.000000000000000e+00, -3.408750674892534e-06, -3.406606151004395e-06, 0.000000000000000e+00, -3.409696701005250e-06, -3.405653359289409e-06, 0.000000000000000e+00, -3.408762152357344e-06, -3.406492428514713e-06, 0.000000000000000e+00, -3.409621712208841e-06, -3.406150610446672e-06, 0.000000000000000e+00, -3.409228477587637e-06, -3.406150610446672e-06, 0.000000000000000e+00, -3.409228477587637e-06, -1.330004609803191e-04, 0.000000000000000e+00, -1.330256625763280e-04, -1.297588517396745e-04, 0.000000000000000e+00, -1.298857823817981e-04, -1.346595378994926e-04, 0.000000000000000e+00, -1.342212031234638e-04, -1.318081533512516e-04, 0.000000000000000e+00, -1.313322737266930e-04, -1.299531271724747e-04, 0.000000000000000e+00, -1.312047619654422e-04, -1.299531271724747e-04, 0.000000000000000e+00, -1.312047619654422e-04, -1.963663658922879e-02, 0.000000000000000e+00, -1.985439943957068e-02, -1.658920462137055e-02, 0.000000000000000e+00, -1.660522351032659e-02, -2.822456283071615e-02, 0.000000000000000e+00, -2.477583391862068e-02, -2.802659369358152e-02, 0.000000000000000e+00, -2.451780964516984e-02, -1.712211545735065e-02, 0.000000000000000e+00, -2.086931290601620e-02, -1.712211545735065e-02, 0.000000000000000e+00, -2.086931290601620e-02, -1.380856353670528e+01, 0.000000000000000e+00, -1.343801767485712e+01, -1.509117553034222e+00, 0.000000000000000e+00, -1.483213828300852e+00, -1.951037072106516e+01, 0.000000000000000e+00, -1.639311100107972e+01, -2.026507358049755e-04, 0.000000000000000e+00, -2.030455606550828e-04, -9.143847922436336e+00, 0.000000000000000e+00, -7.912979081760556e+00, -9.143847922436336e+00, 0.000000000000000e+00, -7.912979081760556e+00, -1.408845052605724e+06, 0.000000000000000e+00, -1.210307296218065e+06, -6.249674185043891e+05, 0.000000000000000e+00, -5.860268192537088e+05, -2.262394037160532e+06, 0.000000000000000e+00, -1.932451034671601e+06, -7.004389281340700e+01, 0.000000000000000e+00, -6.818240038601789e+01, -1.822343410623232e+06, 0.000000000000000e+00, -6.695945271935401e+05, -1.822343410623231e+06, 0.000000000000000e+00, -6.695945271935401e+05, -2.479399971082595e-02, 0.000000000000000e+00, -2.445877243926945e-02, -2.346914977082833e-02, 0.000000000000000e+00, -2.314854755049603e-02, -2.381206679987600e-02, 0.000000000000000e+00, -2.348964525929215e-02, -2.418071959603627e-02, 0.000000000000000e+00, -2.384842077603952e-02, -2.398522104811694e-02, 0.000000000000000e+00, -2.365805887923172e-02, -2.398522104811694e-02, 0.000000000000000e+00, -2.365805887923172e-02, -2.876693346879551e-02, 0.000000000000000e+00, -2.840084430930532e-02, -3.611483354635168e-02, 0.000000000000000e+00, -3.558193745220622e-02, -3.228602878786998e-02, 0.000000000000000e+00, -3.181213268820907e-02, -2.951138211246085e-02, 0.000000000000000e+00, -2.913405248472686e-02, -3.082310231118722e-02, 0.000000000000000e+00, -3.040526218498249e-02, -3.082310231118722e-02, 0.000000000000000e+00, -3.040526218498249e-02, -1.363341301160949e-02, 0.000000000000000e+00, -1.360006973787774e-02, -6.593931579210915e-01, 0.000000000000000e+00, -6.466281289744583e-01, -3.556151189950562e-01, 0.000000000000000e+00, -3.444972389917021e-01, -1.415671191758769e-01, 0.000000000000000e+00, -1.387738403189696e-01, -2.219886315020785e-01, 0.000000000000000e+00, -2.227019363269491e-01, -2.219886315020787e-01, 0.000000000000000e+00, -2.227019363269492e-01, -5.022707448995838e-02, 0.000000000000000e+00, -4.909337803793207e-02, -3.695227941013276e+02, 0.000000000000000e+00, -3.615683306169794e+02, -1.414133982862199e+02, 0.000000000000000e+00, -1.276472964300147e+02, -1.770847072567719e-01, 0.000000000000000e+00, -1.680096252201270e-01, -3.477457382982726e+01, 0.000000000000000e+00, -3.009209488908055e+01, -3.477457382982725e+01, 0.000000000000000e+00, -3.009209488908055e+01, -3.350983370108894e+04, 0.000000000000000e+00, -3.006253816273847e+04, -5.001179567041177e+07, 0.000000000000000e+00, -5.634998373927652e+07, -4.900322570913156e+06, 0.000000000000000e+00, -4.096161527000884e+06, -4.077928909492021e+01, 0.000000000000000e+00, -3.854181352519045e+01, -2.523981681696351e+06, 0.000000000000000e+00, -8.878967661675580e+05, -2.523981681696357e+06, 0.000000000000000e+00, -8.878967661675613e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
