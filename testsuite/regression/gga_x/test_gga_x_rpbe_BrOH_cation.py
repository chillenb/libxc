
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_rpbe_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_rpbe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.098637570476156e+01, -2.098640097457651e+01, -2.098658473607455e+01, -2.098620730874432e+01, -2.098639491735091e+01, -2.098639491735091e+01, -3.485627112824169e+00, -3.485584598784679e+00, -3.484687551594801e+00, -3.486909652072971e+00, -3.485660445231870e+00, -3.485660445231870e+00, -7.033824576971539e-01, -7.035274890481922e-01, -7.095927396865189e-01, -7.141807129506254e-01, -7.152716211988308e-01, -7.152716211988308e-01, -2.283122513279953e-01, -2.286360769491386e-01, -8.112228059472895e-01, -2.003607454881242e-01, -2.244008474067469e-01, -2.244008474067468e-01, -1.011217354967865e-02, -1.064899078704721e-02, -5.870031516958291e-02, -5.830218135953091e-03, -8.138160784503223e-03, -8.138160784503223e-03, -5.040355334928062e+00, -5.039656351136469e+00, -5.040334309682580e+00, -5.039717046961257e+00, -5.039994746961886e+00, -5.039994746961886e+00, -2.146759273225654e+00, -2.155594131830216e+00, -2.150871324438175e+00, -2.158621259416866e+00, -2.149729319147213e+00, -2.149729319147213e+00, -5.822829701443879e-01, -6.029577831488930e-01, -5.438021479643653e-01, -5.378345199419938e-01, -5.884289223847914e-01, -5.884289223847914e-01, -1.515850083061948e-01, -2.513293746662277e-01, -1.408938867254587e-01, -1.813978778181696e+00, -1.715069022416198e-01, -1.715069022416198e-01, -4.501092174754964e-03, -5.699392574836056e-03, -4.364675792400219e-03, -9.509222078884308e-02, -5.482775671063140e-03, -5.482775671063142e-03, -5.507821657410017e-01, -5.540271171341744e-01, -5.528919830540195e-01, -5.519430785305206e-01, -5.524174216779947e-01, -5.524174216779947e-01, -5.339902495964086e-01, -5.147233738450787e-01, -5.191046636592003e-01, -5.239025606722330e-01, -5.211380526593647e-01, -5.211380526593647e-01, -6.332864757648736e-01, -2.934963795750321e-01, -3.230794877235013e-01, -3.697042252229950e-01, -3.433578412237457e-01, -3.433578412237457e-01, -4.752243143951393e-01, -5.610195407095957e-02, -7.652561080908953e-02, -3.442865827219663e-01, -1.208208161380267e-01, -1.208208161380267e-01, -1.425425101214373e-02, -1.523316300276004e-03, -3.203544973302094e-03, -1.135474253874175e-01, -5.034982857663592e-03, -5.034982857663587e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_rpbe_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_rpbe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.499376879261843e+01, -2.499374008540065e+01, -2.499389313299453e+01, -2.499383038904447e+01, -2.499424856050664e+01, -2.499435155125735e+01, -2.499284543240080e+01, -2.499256279874220e+01, -2.499384509096444e+01, -2.499324665553198e+01, -2.499384509096444e+01, -2.499324665553198e+01, -3.993822996684021e+00, -3.994104216847041e+00, -3.993877523490440e+00, -3.994172378390097e+00, -3.995338070911814e+00, -3.995744366755154e+00, -3.993451078505760e+00, -3.993876487259583e+00, -3.993022845427125e+00, -3.995243352949043e+00, -3.993022845427125e+00, -3.995243352949043e+00, -7.373505953404663e-01, -7.437469422782131e-01, -7.350303157114041e-01, -7.428554936120905e-01, -7.051348545812743e-01, -6.951985037071928e-01, -7.052408332389866e-01, -7.084804815509134e-01, -7.547454541405073e-01, -6.589108705707348e-01, -7.547454541405073e-01, -6.589108705707348e-01, -1.808520572534421e-01, -1.847151868031322e-01, -1.811442479855014e-01, -1.863528425253153e-01, -8.491196361826686e-01, -8.937502860787551e-01, -1.822705484680845e-01, -1.830501009003769e-01, -1.878823087868311e-01, -1.824642814817506e-01, -1.878823087868310e-01, -1.824642814817504e-01, -1.303761629899009e-02, -1.385400848819942e-02, -1.366186325065716e-02, -1.463530105325926e-02, -7.596593310481210e-02, -8.022113756772861e-02, -7.837274757367561e-03, -7.706682731293256e-03, -1.163080014436929e-02, -6.618657626552290e-03, -1.163080014436929e-02, -6.618657626552290e-03, -6.180452396933618e+00, -6.178892333515420e+00, -6.183567397702765e+00, -6.181901896608308e+00, -6.180622977398914e+00, -6.178993978175970e+00, -6.183295894385675e+00, -6.181728076780061e+00, -6.182050130227944e+00, -6.180404472620359e+00, -6.182050130227944e+00, -6.180404472620359e+00, -2.089203978796221e+00, -2.089086466433866e+00, -2.109063547795551e+00, -2.108382856217672e+00, -2.064884029007641e+00, -2.071772844725230e+00, -2.081903928899850e+00, -2.088976756799463e+00, -2.118746128400044e+00, -2.101766352275964e+00, -2.118746128400044e+00, -2.101766352275964e+00, -6.809436214958288e-01, -6.792532899309548e-01, -7.734175236246841e-01, -7.741916534458658e-01, -6.109152609588580e-01, -6.370663570402847e-01, -6.694514145423759e-01, -6.912078679270554e-01, -7.135823589357956e-01, -6.763699828951703e-01, -7.135823589357955e-01, -6.763699828951703e-01, -1.886517654210109e-01, -1.888783344267085e-01, -2.102094992274931e-01, -2.104278102412117e-01, -1.764583214444982e-01, -1.823325752498242e-01, -2.333429765228088e+00, -2.332447486295995e+00, -1.880457810108494e-01, -1.734933942786388e-01, -1.880457810108494e-01, -1.734933942786388e-01, -5.879441569503017e-03, -6.110164258163266e-03, -7.540839044572501e-03, -7.654969939076097e-03, -5.638837180345527e-03, -5.971727633039896e-03, -1.262773510124046e-01, -1.270608154912789e-01, -5.759214710703059e-03, -7.909246535848055e-03, -5.759214710703061e-03, -7.909246535848059e-03, -7.232430720860972e-01, -7.261806383292667e-01, -7.107711529014262e-01, -7.137965641150075e-01, -7.151079699841663e-01, -7.181306566782024e-01, -7.187604325755860e-01, -7.217038241701355e-01, -7.169309869215378e-01, -7.199127420855090e-01, -7.169309869215378e-01, -7.199127420855090e-01, -7.063420892150096e-01, -7.086968023303974e-01, -5.435483534388679e-01, -5.465328550416000e-01, -5.881156244816624e-01, -5.914603952694409e-01, -6.351789629074149e-01, -6.376556586671497e-01, -6.113771197250039e-01, -6.139244486871178e-01, -6.113771197250039e-01, -6.139244486871178e-01, -8.087588301777596e-01, -8.107590709275810e-01, -2.341985756281111e-01, -2.348963358974418e-01, -2.686012258649606e-01, -2.712202828286204e-01, -3.782928596627869e-01, -3.807718750171469e-01, -3.161401917754093e-01, -3.162377256900648e-01, -3.161401917754091e-01, -3.162377256900646e-01, -4.983427977369575e-01, -5.028803289463417e-01, -7.454496921854471e-02, -7.505502475361867e-02, -1.002729502485271e-01, -1.036294097232134e-01, -3.730524259522632e-01, -3.799420072117617e-01, -1.536662129478288e-01, -1.571551667534733e-01, -1.536662129478288e-01, -1.571551667534734e-01, -1.864956171239904e-02, -1.932569049950109e-02, -2.028762023808494e-03, -2.033398898287572e-03, -4.128061189754679e-03, -4.390526307869538e-03, -1.477187576369757e-01, -1.497873070984669e-01, -5.455199472438233e-03, -7.249407432700401e-03, -5.455199472438227e-03, -7.249407432700393e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_rpbe_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_rpbe", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.513064737566825e-08, 0.000000000000000e+00, -1.513072846045777e-08, -1.513049131882013e-08, 0.000000000000000e+00, -1.513061506634833e-08, -1.512990070078850e-08, 0.000000000000000e+00, -1.512979433690209e-08, -1.513166544886250e-08, 0.000000000000000e+00, -1.513204294486754e-08, -1.513055891420110e-08, 0.000000000000000e+00, -1.513107684567768e-08, -1.513055891420110e-08, 0.000000000000000e+00, -1.513107684567768e-08, -2.091661631680781e-05, 0.000000000000000e+00, -2.092061095609883e-05, -2.091671204898552e-05, 0.000000000000000e+00, -2.092105009602063e-05, -2.092249383564668e-05, 0.000000000000000e+00, -2.092351996941560e-05, -2.089896256073917e-05, 0.000000000000000e+00, -2.090092878494299e-05, -2.092948688546464e-05, 0.000000000000000e+00, -2.090435808951224e-05, -2.092948688546464e-05, 0.000000000000000e+00, -2.090435808951224e-05, -1.411567011449445e-02, 0.000000000000000e+00, -1.402773676755753e-02, -1.415654874504172e-02, 0.000000000000000e+00, -1.404910047427183e-02, -1.468914026249742e-02, 0.000000000000000e+00, -1.481185682705882e-02, -1.433633248729610e-02, 0.000000000000000e+00, -1.430296391958732e-02, -1.379479254883804e-02, 0.000000000000000e+00, -1.466904310833932e-02, -1.379479254883804e-02, 0.000000000000000e+00, -1.466904310833932e-02, -1.871097139257996e+00, 0.000000000000000e+00, -1.737786754474578e+00, -1.867309152472148e+00, 0.000000000000000e+00, -1.704505455503917e+00, -8.147623522226081e-03, 0.000000000000000e+00, -7.391818313369825e-03, -2.321033827365221e+00, 0.000000000000000e+00, -2.263399895892605e+00, -1.608613622926417e+00, 0.000000000000000e+00, -1.801459099249744e+00, -1.608613622926416e+00, 0.000000000000000e+00, -1.801459099249750e+00, 0.000000000000000e+00, 0.000000000000000e+00, -2.773605429518419e-292, -2.693936877908264e-291, 0.000000000000000e+00, -7.765252845059574e-254, -8.237879739827757e-10, 0.000000000000000e+00, -1.536227976768564e-08, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -4.373149702540220e-06, 0.000000000000000e+00, -4.377262448146536e-06, -4.371847732786440e-06, 0.000000000000000e+00, -4.376004262179795e-06, -4.373051334673770e-06, 0.000000000000000e+00, -4.377200553112101e-06, -4.371934553026227e-06, 0.000000000000000e+00, -4.376057850982964e-06, -4.372503616288203e-06, 0.000000000000000e+00, -4.376634443610939e-06, -4.372503616288203e-06, 0.000000000000000e+00, -4.376634443610939e-06, -1.791626266622884e-04, 0.000000000000000e+00, -1.791959250733653e-04, -1.750210963916804e-04, 0.000000000000000e+00, -1.751871641290581e-04, -1.806860085234020e-04, 0.000000000000000e+00, -1.803206318892521e-04, -1.771076027357464e-04, 0.000000000000000e+00, -1.766694658029789e-04, -1.755863666327072e-04, 0.000000000000000e+00, -1.769249070953454e-04, -1.755863666327072e-04, 0.000000000000000e+00, -1.769249070953454e-04, -2.605392990959454e-02, 0.000000000000000e+00, -2.633846250926480e-02, -2.010047587748543e-02, 0.000000000000000e+00, -2.007843512926200e-02, -3.780988075461066e-02, 0.000000000000000e+00, -3.303407257578612e-02, -3.465716410815144e-02, 0.000000000000000e+00, -3.038084810039306e-02, -2.252782028601071e-02, 0.000000000000000e+00, -2.753725549438555e-02, -2.252782028601071e-02, 0.000000000000000e+00, -2.753725549438555e-02, -8.550001897762629e-01, 0.000000000000000e+00, -9.414280400943418e-01, -1.137775131790093e+00, 0.000000000000000e+00, -1.128130180467988e+00, -5.990103108800137e-01, 0.000000000000000e+00, -7.976880443128626e-01, -2.443033652771046e-04, 0.000000000000000e+00, -2.447519698609637e-04, -1.924834665564390e+00, 0.000000000000000e+00, -3.001130223152961e+00, -1.924834665564390e+00, 0.000000000000000e+00, -3.001130223152961e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -3.886467143232863e-02, 0.000000000000000e+00, -3.559504590583995e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -2.810048908412356e-02, 0.000000000000000e+00, -2.767699164856615e-02, -2.832924778973787e-02, 0.000000000000000e+00, -2.790388903991279e-02, -2.824917414531307e-02, 0.000000000000000e+00, -2.782400171594508e-02, -2.818296683934718e-02, 0.000000000000000e+00, -2.775921924866180e-02, -2.821621625692499e-02, 0.000000000000000e+00, -2.779173383411183e-02, -2.821621625692499e-02, 0.000000000000000e+00, -2.779173383411183e-02, -3.147111422059876e-02, 0.000000000000000e+00, -3.105948053515340e-02, -4.907940670054802e-02, 0.000000000000000e+00, -4.834976572132890e-02, -4.333680611818699e-02, 0.000000000000000e+00, -4.266360736267782e-02, -3.820636024913331e-02, 0.000000000000000e+00, -3.769438289832686e-02, -4.076790743642878e-02, 0.000000000000000e+00, -4.019549127155319e-02, -4.076790743642878e-02, 0.000000000000000e+00, -4.019549127155319e-02, -1.663587896814886e-02, 0.000000000000000e+00, -1.654629010252446e-02, -6.651644657431961e-01, 0.000000000000000e+00, -6.572615485544079e-01, -4.285575352016000e-01, 0.000000000000000e+00, -4.192289136122932e-01, -1.923010155256673e-01, 0.000000000000000e+00, -1.885347978166354e-01, -2.928838196418246e-01, 0.000000000000000e+00, -2.941118170934569e-01, -2.928838196418250e-01, 0.000000000000000e+00, -2.941118170934570e-01, -6.827000785567459e-02, 0.000000000000000e+00, -6.672064258727171e-02, -6.933362049982092e-11, 0.000000000000000e+00, -1.064319239517993e-10, -3.429533441575574e-05, 0.000000000000000e+00, -1.129104052683013e-04, -2.399728599448006e-01, 0.000000000000000e+00, -2.274054236058931e-01, -5.379466090379247e-01, 0.000000000000000e+00, -1.310446239359531e+00, -5.379466090379265e-01, 0.000000000000000e+00, -1.310446239359534e+00, -1.817570895455257e-178, 0.000000000000000e+00, -4.058635175595714e-164, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -5.211345687584152e-01, 0.000000000000000e+00, -5.644225227148997e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
