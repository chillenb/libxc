
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_b86_r_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_b86_r", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.047648747069789e+01, -2.047652087996780e+01, -2.047673009288172e+01, -2.047618180754349e+01, -2.047650458667505e+01, -2.047650458667505e+01, -3.372478629532481e+00, -3.372463002894910e+00, -3.372172825764920e+00, -3.373388243895945e+00, -3.372484958561030e+00, -3.372484958561030e+00, -6.672828199309959e-01, -6.671172200560370e-01, -6.646077646424879e-01, -6.689447956304728e-01, -6.672197263655110e-01, -6.672197263655110e-01, -2.020489765306719e-01, -2.030347545437902e-01, -7.839993248359419e-01, -1.694943794020327e-01, -2.023206774942239e-01, -2.023206774942239e-01, -2.657153573515573e-02, -2.748376847396100e-02, -8.092592429164930e-02, -1.601561114319561e-02, -2.720428394696173e-02, -2.720428394696173e-02, -4.947031266477022e+00, -4.947025653691010e+00, -4.947035548024842e+00, -4.947031098800519e+00, -4.947021342733783e+00, -4.947021342733783e+00, -2.002225101475275e+00, -2.012553499697049e+00, -2.001873995146632e+00, -2.009896049060226e+00, -2.009751754425326e+00, -2.009751754425326e+00, -5.592963927061563e-01, -5.909439839632880e-01, -5.320277979811755e-01, -5.413880317103611e-01, -5.780933065080631e-01, -5.780933065080631e-01, -1.429347088261528e-01, -2.212612448203592e-01, -1.397604574314351e-01, -1.797584775959657e+00, -1.528255925835250e-01, -1.528255925835250e-01, -1.554505046826539e-02, -1.709330390889926e-02, -1.290516634384304e-02, -1.014145040330941e-01, -1.555476709956769e-02, -1.555476709956769e-02, -5.573607608040742e-01, -5.576905385719914e-01, -5.575752893298717e-01, -5.574818874077663e-01, -5.575283625450108e-01, -5.575283625450108e-01, -5.389415032155166e-01, -4.968077418071649e-01, -5.085861650988576e-01, -5.197418209720658e-01, -5.139111918886400e-01, -5.139111918886400e-01, -6.201740067995715e-01, -2.622631679538059e-01, -2.949644172895414e-01, -3.506961665977787e-01, -3.203198955493711e-01, -3.203198955493710e-01, -4.500226076387393e-01, -7.762332228793736e-02, -9.577895735622705e-02, -3.248497116361500e-01, -1.198532340527103e-01, -1.198532340527103e-01, -3.042303233613407e-02, -6.644130133578586e-03, -1.046602954431336e-02, -1.141385601031319e-01, -1.347972646443682e-02, -1.347972646443681e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_b86_r_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_b86_r", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.562025242897401e+01, -2.562033316048661e+01, -2.562071230719085e+01, -2.561938991847910e+01, -2.562029484533370e+01, -2.562029484533370e+01, -4.128314021787013e+00, -4.128346942415417e+00, -4.129421564914770e+00, -4.128444766895645e+00, -4.128348540001301e+00, -4.128348540001301e+00, -7.711010432238420e-01, -7.698550379970454e-01, -7.371074794181997e-01, -7.435706902842362e-01, -7.706486695867200e-01, -7.706486695867200e-01, -1.998628183693164e-01, -2.030303743914751e-01, -9.389085864345087e-01, -1.483047524637260e-01, -2.008111361568440e-01, -2.008111361568440e-01, -2.597170591316348e-02, -2.689891907678227e-02, -7.742182437153745e-02, -1.518821396202317e-02, -2.662468950990161e-02, -2.662468950990161e-02, -6.291772406393009e+00, -6.293944856898365e+00, -6.291995776325093e+00, -6.293684971169379e+00, -6.292884883601999e+00, -6.292884883601999e+00, -2.224853282308031e+00, -2.243346311271178e+00, -2.214599650548695e+00, -2.229010423563476e+00, -2.250760202809955e+00, -2.250760202809955e+00, -6.927873922666929e-01, -7.722691155239754e-01, -6.559454588145438e-01, -6.999367742167866e-01, -7.224214809676186e-01, -7.224214809676186e-01, -1.244132747663837e-01, -2.007795803654464e-01, -1.213690424571582e-01, -2.348806952079810e+00, -1.319151115148148e-01, -1.319151115148148e-01, -1.472923400742062e-02, -1.628459261345094e-02, -1.228197500550614e-02, -9.292434296600270e-02, -1.482151684290204e-02, -1.482151684290204e-02, -7.387892978170522e-01, -7.305555291927495e-01, -7.334897241887093e-01, -7.357696313350267e-01, -7.346277536683520e-01, -7.346277536683520e-01, -7.157793656227576e-01, -5.876428449653055e-01, -6.243428558041100e-01, -6.591457762650986e-01, -6.414642813083190e-01, -6.414642813083191e-01, -8.089997188010013e-01, -2.519057252447165e-01, -3.039409112753736e-01, -4.061015366368289e-01, -3.511948939122276e-01, -3.511948939122275e-01, -5.281938279834482e-01, -7.504757513796767e-02, -8.965486926754879e-02, -3.898384462794744e-01, -1.053651030861189e-01, -1.053651030861189e-01, -2.980746569589673e-02, -6.042812989246761e-03, -9.747382552599182e-03, -1.002792553417478e-01, -1.280900933903177e-02, -1.280900933903176e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_b86_r_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_b86_r", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.258170920792329e-09, -4.258137635006982e-09, -4.257947045510672e-09, -4.258492960695008e-09, -4.258153718878678e-09, -4.258153718878678e-09, -5.894917866761787e-06, -5.894964672519827e-06, -5.895278018532318e-06, -5.889740069950906e-06, -5.894841494662725e-06, -5.894841494662725e-06, -4.034183573299610e-03, -4.042700647869771e-03, -4.237548154284435e-03, -4.121398957514274e-03, -4.037330250428672e-03, -4.037330250428672e-03, -5.413291817953102e-01, -5.267297974181600e-01, -2.055721701240923e-03, -1.167967978947755e+00, -5.371122586762871e-01, -5.371122586762871e-01, -4.222342185971274e+02, -3.793632392264789e+02, -1.214508651080073e+01, -2.088907385059577e+03, -3.949697129113267e+02, -3.949697129113267e+02, -1.232570076990297e-06, -1.232210219631945e-06, -1.232529263120460e-06, -1.232249521481388e-06, -1.232391299611988e-06, -1.232391299611988e-06, -5.136515846982368e-05, -5.019315414684907e-05, -5.158345627480160e-05, -5.066445040791711e-05, -5.028446774142000e-05, -5.028446774142000e-05, -7.715773414206250e-03, -5.913472819523952e-03, -9.460616540662325e-03, -8.472952946210843e-03, -6.709770037219932e-03, -6.709770037219932e-03, -2.115594700567018e+00, -3.979216545431842e-01, -2.341178560124523e+00, -6.907584359861070e-05, -1.735954377085428e+00, -1.735954377085428e+00, -2.330978853556725e+03, -1.696482777636072e+03, -5.159392657824221e+03, -6.563191803847564e+00, -2.479231773080228e+03, -2.479231773080226e+03, -7.381093032909962e-03, -7.439682793612807e-03, -7.418610546137948e-03, -7.402473117862883e-03, -7.410559946391620e-03, -7.410559946391620e-03, -8.428579306392197e-03, -1.288050389076221e-02, -1.137045519031138e-02, -1.014134919412817e-02, -1.075420845874671e-02, -1.075420845874671e-02, -4.882658039503335e-03, -1.946740182106530e-01, -1.156412255785357e-01, -5.278797548602577e-02, -7.925202908468584e-02, -7.925202908468590e-02, -1.925409450954099e-02, -1.293570230482013e+01, -7.285013965605046e+00, -6.962308766546825e-02, -4.089380022168086e+00, -4.089380022168092e+00, -2.588640406029814e+02, -4.686527586305085e+04, -9.481031253520217e+03, -4.985611524616451e+00, -4.258146326388577e+03, -4.258146326388592e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
