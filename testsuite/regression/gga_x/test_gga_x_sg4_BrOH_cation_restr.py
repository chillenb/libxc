
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_sg4_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_sg4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.101508363544309e+01, -2.101511251973815e+01, -2.101530670412920e+01, -2.101487560199386e+01, -2.101509214005875e+01, -2.101509214005875e+01, -3.480479267761432e+00, -3.480445576710899e+00, -3.479751711273256e+00, -3.481618683971290e+00, -3.480522772833789e+00, -3.480522772833789e+00, -6.948987389806626e-01, -6.947751654831014e-01, -6.928387760105341e-01, -6.977756600050968e-01, -6.960754799320426e-01, -6.960754799320426e-01, -2.066906895550099e-01, -2.080179407914884e-01, -8.034900638092256e-01, -1.764182377425409e-01, -1.867355560091257e-01, -1.867355560091257e-01, -1.009307133305383e-02, -1.062329175682994e-02, -5.852013586666308e-02, -5.829290201654702e-03, -7.324846123497549e-03, -7.324846123497549e-03, -5.053106700448790e+00, -5.052482098426927e+00, -5.053088808058121e+00, -5.052537265865023e+00, -5.052784293681420e+00, -5.052784293681420e+00, -2.090095921308133e+00, -2.101024091696916e+00, -2.088641733373608e+00, -2.098322736925359e+00, -2.096797760737453e+00, -2.096797760737453e+00, -5.823413151652319e-01, -6.043821474219023e-01, -5.427967913224215e-01, -5.390049686406565e-01, -5.883219973730875e-01, -5.883219973730875e-01, -1.435545606850011e-01, -2.216636230754248e-01, -1.348542141067610e-01, -1.818133415031432e+00, -1.540849655148986e-01, -1.540849655148986e-01, -4.497711045915296e-03, -5.698643110172761e-03, -4.357418470295519e-03, -9.421468765976941e-02, -5.249339712025496e-03, -5.249339712025496e-03, -5.513703807283564e-01, -5.552983849411992e-01, -5.539731491069627e-01, -5.528264354875341e-01, -5.534043600243767e-01, -5.534043600243767e-01, -5.342789075721134e-01, -5.089745399823983e-01, -5.179163406278429e-01, -5.250827906654320e-01, -5.214312671518270e-01, -5.214312671518270e-01, -6.348494312977089e-01, -2.642816370586361e-01, -3.008449830568051e-01, -3.637105193235844e-01, -3.299667311468457e-01, -3.299667311468457e-01, -4.695277093022752e-01, -5.602402645456631e-02, -7.624852025062975e-02, -3.419611600159679e-01, -1.163902877880595e-01, -1.163902877880595e-01, -1.424378385303797e-02, -1.523307817561857e-03, -3.197470940197223e-03, -1.105244904917822e-01, -4.857286217951440e-03, -4.857286217951436e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_sg4_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_sg4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.534959200481693e+01, -2.534967806787331e+01, -2.535005785520680e+01, -2.534877749713317e+01, -2.534944876668825e+01, -2.534944876668825e+01, -4.102526829533183e+00, -4.102548923699653e+00, -4.103161719153808e+00, -4.102877231559053e+00, -4.102652216046448e+00, -4.102652216046448e+00, -7.876242632504028e-01, -7.867493551988524e-01, -7.669140243316085e-01, -7.731819301925772e-01, -7.717725149385311e-01, -7.717725149385311e-01, -2.055773154389617e-01, -2.088778950795210e-01, -9.187098173631887e-01, -1.517403069891858e-01, -1.728084289908250e-01, -1.728084289908250e-01, -1.345589945290581e-02, -1.416255633545786e-02, -7.774107777400394e-02, -7.772106268387365e-03, -9.765833733218984e-03, -9.765833733218984e-03, -6.221048163247005e+00, -6.223264207333735e+00, -6.221149266569711e+00, -6.223105519372944e+00, -6.222171077828967e+00, -6.222171077828967e+00, -2.302706767303178e+00, -2.318826001878035e+00, -2.291934244541673e+00, -2.306130590040740e+00, -2.316881751575724e+00, -2.316881751575724e+00, -6.939694668587364e-01, -7.736335100391395e-01, -6.406577670324429e-01, -6.812534920438349e-01, -7.066815737993059e-01, -7.066815737993059e-01, -1.422464407833081e-01, -2.023496251985151e-01, -1.421063764344893e-01, -2.332073458836091e+00, -1.283598916409837e-01, -1.283598916409837e-01, -5.996800086948886e-03, -7.597906343818681e-03, -5.809572551992249e-03, -1.203673851133307e-01, -6.998739464171819e-03, -6.998739464171819e-03, -7.241341812361086e-01, -7.120387049183228e-01, -7.160786203105219e-01, -7.195888422733452e-01, -7.178130835611409e-01, -7.178130835611409e-01, -7.071796352835805e-01, -5.782128683923047e-01, -6.077151587541306e-01, -6.420584838034576e-01, -6.238324863355043e-01, -6.238324863355043e-01, -8.098218440244783e-01, -2.597203064851952e-01, -3.126758571437492e-01, -4.082821790314836e-01, -3.568851718441265e-01, -3.568851718441264e-01, -5.323052854209500e-01, -7.447408746765562e-02, -1.007131901116867e-01, -3.938957552763470e-01, -1.269967186929943e-01, -1.269967186929944e-01, -1.898785158692136e-02, -2.031065055523793e-03, -4.263217153664612e-03, -1.273406604390235e-01, -6.476043141632029e-03, -6.476043141632024e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_sg4_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_sg4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-6.761331610916441e-09, -6.761317622634477e-09, -6.761133599720635e-09, -6.761344225488795e-09, -6.761251186668845e-09, -6.761251186668845e-09, -8.612001771075662e-06, -8.612594826697583e-06, -8.625474556059777e-06, -8.596568180499286e-06, -8.611882404821993e-06, -8.611882404821993e-06, -4.954510553009358e-03, -4.946114529598151e-03, -4.705333001368488e-03, -4.586586807208259e-03, -4.639356959869429e-03, -4.639356959869429e-03, -5.191819383431298e-01, -5.046735462864931e-01, -2.833483370703631e-03, -1.132609088690683e+00, -8.272237175477158e-01, -8.272237175477161e-01, -2.259335353684933e-01, -2.387557011665972e-01, -1.713523799534193e-01, -2.050488869142962e-01, -2.606298429987834e-01, -2.606298429987840e-01, -2.089008168973824e-06, -2.091515328646840e-06, -2.089098610682064e-06, -2.091312235184604e-06, -2.090292222246189e-06, -2.090292222246189e-06, -5.609057783333015e-05, -5.519624973614662e-05, -5.564431821340475e-05, -5.485254534597566e-05, -5.582107072095824e-05, -5.582107072095824e-05, -1.122258202152518e-02, -1.073612583595788e-02, -1.459684969950299e-02, -1.671837857764541e-02, -1.092803109449818e-02, -1.092803109449818e-02, -1.656060098781458e+00, -4.230940141554498e-01, -1.643678668213834e+00, -1.314015128083347e-04, -2.000711175757123e+00, -2.000711175757123e+00, -2.701280444403997e-01, -2.413316205299992e-01, -1.516023484740242e+00, -8.352293217022889e-01, -7.054866921559824e-01, -7.054866921559809e-01, -1.592350490970535e-02, -1.509527872268315e-02, -1.537539595706571e-02, -1.561675539759383e-02, -1.549511260255756e-02, -1.549511260255756e-02, -1.819474525609925e-02, -1.731592841707723e-02, -1.740252027772804e-02, -1.773393220937330e-02, -1.758456748074539e-02, -1.758456748074539e-02, -8.783746624393851e-03, -1.953812521748624e-01, -1.165421103958927e-01, -6.436400811365144e-02, -8.608381371891620e-02, -8.608381371891625e-02, -2.378505674002988e-02, -1.460598680914254e-01, -2.502615270918029e-01, -8.790812732359329e-02, -2.464385659094547e+00, -2.464385659094544e+00, -1.823582569150137e-01, -1.183709352844959e+00, -5.729934392777545e-01, -2.081482794040705e+00, -8.910633256331336e-01, -8.910633256331354e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
