
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_dk87_r1_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_dk87_r1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.105846151969971e+01, -2.105848494934281e+01, -2.105866386548485e+01, -2.105831373706358e+01, -2.105848657095373e+01, -2.105848657095373e+01, -3.499217227550088e+00, -3.499175088934591e+00, -3.498286422672616e+00, -3.500495707815551e+00, -3.499251295335778e+00, -3.499251295335778e+00, -7.036385055774352e-01, -7.036531930362689e-01, -7.053226163379658e-01, -7.101587797860534e-01, -7.094386753809256e-01, -7.094386753809256e-01, -2.155097498551858e-01, -2.166207143723659e-01, -8.125582255026371e-01, -1.856518215172134e-01, -2.123414898880004e-01, -2.123414898880003e-01, -6.796760925122299e-02, -6.741953356665256e-02, -1.030857674143598e-01, -6.706014673793145e-02, -6.478644570811128e-02, -6.478644570811126e-02, -5.051484528270364e+00, -5.050611021605755e+00, -5.051456336795806e+00, -5.050685011300732e+00, -5.051035169572897e+00, -5.051035169572897e+00, -2.130174923529379e+00, -2.140381344901355e+00, -2.130822580837127e+00, -2.139864982954047e+00, -2.135475398580564e+00, -2.135475398580564e+00, -5.845189972779178e-01, -6.025677741783542e-01, -5.459195789288307e-01, -5.379505187489226e-01, -5.905478052957616e-01, -5.905478052957617e-01, -1.555536845665083e-01, -2.327731262277661e-01, -1.484978570088298e-01, -1.812585508672821e+00, -1.627216634948404e-01, -1.627216634948404e-01, -6.206171066389158e-02, -6.445462074358543e-02, -4.113933693574359e-02, -1.192225859099677e-01, -4.996866820874514e-02, -4.996866820874517e-02, -5.500307282880486e-01, -5.536118237916681e-01, -5.522568474013818e-01, -5.511920309688420e-01, -5.517146614004049e-01, -5.517146614004049e-01, -5.334631081410535e-01, -5.151316568466385e-01, -5.210866179175393e-01, -5.253032375883626e-01, -5.230888496898740e-01, -5.230888496898740e-01, -6.330155529220409e-01, -2.758554491699060e-01, -3.110977317658952e-01, -3.690551411118264e-01, -3.378864903192440e-01, -3.378864903192440e-01, -4.754218231351095e-01, -1.034076394395016e-01, -1.140095645750789e-01, -3.452102708535182e-01, -1.296601071963082e-01, -1.296601071963082e-01, -7.374857170800592e-02, -4.199168012911182e-02, -5.112200003888220e-02, -1.259593533073278e-01, -4.709548186178916e-02, -4.709548186178913e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_dk87_r1_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_dk87_r1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.490650136043121e+01, -2.490647148308349e+01, -2.490660934249189e+01, -2.490654991231077e+01, -2.490693388340362e+01, -2.490702081420404e+01, -2.490571498663084e+01, -2.490546706324794e+01, -2.490656681936313e+01, -2.490607273588863e+01, -2.490656681936313e+01, -2.490607273588863e+01, -4.016600811176488e+00, -4.016680260483182e+00, -4.016630164539430e+00, -4.016710431748562e+00, -4.017352076455354e+00, -4.017565455839351e+00, -4.016751672481363e+00, -4.016954931940055e+00, -4.015876337513905e+00, -4.017669577945678e+00, -4.015876337513905e+00, -4.017669577945678e+00, -7.661597168625927e-01, -7.695154630721076e-01, -7.648809182147465e-01, -7.689697427526643e-01, -7.487342009833300e-01, -7.438574785885860e-01, -7.516600009628128e-01, -7.532043211785359e-01, -7.760914965626410e-01, -7.291658687465163e-01, -7.760914965626410e-01, -7.291658687465163e-01, -1.991395990393549e-01, -2.062347914323082e-01, -2.012214609488051e-01, -2.094183297512744e-01, -8.802959519925214e-01, -9.123026379348950e-01, -1.564568678931341e-01, -1.585333085573321e-01, -2.077617732875346e-01, -1.159263092666813e-01, -2.077617732875345e-01, -1.159263092666813e-01, -7.437243519410684e-03, -7.901549037639528e-03, -7.791920629270361e-03, -8.345278623551991e-03, -4.279468805377971e-02, -4.514951704483935e-02, -4.476168636601575e-03, -4.401760688340050e-03, -6.636855358504941e-03, -3.779587224105121e-03, -6.636855358504975e-03, -3.779587224105281e-03, -6.136731683280823e+00, -6.135193065403157e+00, -6.139574085258389e+00, -6.137938600205672e+00, -6.136887968450630e+00, -6.135286283976521e+00, -6.139326771231336e+00, -6.137780371582790e+00, -6.138187480975439e+00, -6.136571105631159e+00, -6.138187480975439e+00, -6.136571105631159e+00, -2.240203206235488e+00, -2.240091007789305e+00, -2.256351720932792e+00, -2.255745481954211e+00, -2.227479563630631e+00, -2.230971120816126e+00, -2.241342881269944e+00, -2.245052340929453e+00, -2.259009549215873e+00, -2.249625090622283e+00, -2.259009549215873e+00, -2.249625090622283e+00, -6.813734344658047e-01, -6.796262805404770e-01, -7.693791230087573e-01, -7.702754792866481e-01, -6.150952212483113e-01, -6.392255267880474e-01, -6.649722524201109e-01, -6.864978015733340e-01, -7.116225796928493e-01, -6.751904351459764e-01, -7.116225796928493e-01, -6.751904351459765e-01, -1.113254258817737e-01, -1.123100901058381e-01, -2.055495756875794e-01, -2.065168771424758e-01, -1.010432186455656e-01, -1.062502070590924e-01, -2.322183880428125e+00, -2.321227145385862e+00, -1.262539815616850e-01, -1.327905566820236e-01, -1.262539815616850e-01, -1.327905566820236e-01, -3.359039654724211e-03, -3.490844245474601e-03, -4.306796602943099e-03, -4.372017696127795e-03, -3.219634242472166e-03, -3.409103107725174e-03, -7.033672994911540e-02, -7.077610959702664e-02, -3.289310931655011e-03, -4.514406683126908e-03, -3.289310931655060e-03, -4.514406683126929e-03, -7.226896597344888e-01, -7.256718712499656e-01, -7.072730282151678e-01, -7.103617270293362e-01, -7.125677579975339e-01, -7.156637600905683e-01, -7.171210733540577e-01, -7.201196862199150e-01, -7.148344693775024e-01, -7.178811851463529e-01, -7.148344693775024e-01, -7.178811851463529e-01, -7.064649990690238e-01, -7.088233166877174e-01, -5.625425401579855e-01, -5.650471049742786e-01, -5.931884059166930e-01, -5.960845650102882e-01, -6.312047717012582e-01, -6.336147128768110e-01, -6.108863948891761e-01, -6.133061309775880e-01, -6.108863948891761e-01, -6.133061309775880e-01, -8.040950477700145e-01, -8.062664864212378e-01, -2.564840216570955e-01, -2.578614574573875e-01, -3.035833218879236e-01, -3.063517353550987e-01, -3.965917677671572e-01, -3.987961490348521e-01, -3.470705096387505e-01, -3.469032484877188e-01, -3.470705096387505e-01, -3.469032484877188e-01, -5.171006947509190e-01, -5.207646112665161e-01, -4.202163838747112e-02, -4.230447646772637e-02, -5.622161930282709e-02, -5.805446137999896e-02, -3.815656952976821e-01, -3.875797178060026e-01, -8.666128701714726e-02, -9.112853521020889e-02, -8.666128701714727e-02, -9.112853521020883e-02, -1.062752962837397e-02, -1.101098567436254e-02, -1.159957941051172e-03, -1.162492331343944e-03, -2.359026401814181e-03, -2.508780860877601e-03, -8.308248563028066e-02, -8.440370061259861e-02, -3.114948422802026e-03, -4.138520015015865e-03, -3.114948422802070e-03, -4.138520015015837e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_dk87_r1_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_dk87_r1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.605923155973902e-08, 0.000000000000000e+00, -1.605932519570109e-08, -1.605916087860991e-08, 0.000000000000000e+00, -1.605927376789908e-08, -1.605871078610021e-08, 0.000000000000000e+00, -1.605869152008994e-08, -1.605951464136288e-08, 0.000000000000000e+00, -1.605971427803578e-08, -1.605920071411587e-08, 0.000000000000000e+00, -1.605914073433434e-08, -1.605920071411587e-08, 0.000000000000000e+00, -1.605914073433434e-08, -2.076759147502814e-05, 0.000000000000000e+00, -2.077793175837082e-05, -2.076848451280606e-05, 0.000000000000000e+00, -2.077957196058876e-05, -2.079769343630725e-05, 0.000000000000000e+00, -2.080487056223255e-05, -2.073367971104181e-05, 0.000000000000000e+00, -2.074263240429758e-05, -2.077785688648495e-05, 0.000000000000000e+00, -2.076668976971025e-05, -2.077785688648495e-05, 0.000000000000000e+00, -2.076668976971025e-05, -1.209381063359255e-02, 0.000000000000000e+00, -1.220871396701576e-02, -1.206482402074855e-02, 0.000000000000000e+00, -1.220483332860958e-02, -1.172581952992812e-02, 0.000000000000000e+00, -1.156442393968068e-02, -1.131881321060972e-02, 0.000000000000000e+00, -1.137635013390671e-02, -1.229855135664395e-02, 0.000000000000000e+00, -1.051314981916016e-02, -1.229855135664395e-02, 0.000000000000000e+00, -1.051314981916016e-02, -1.312838231881635e+00, 0.000000000000000e+00, -1.197532673750113e+00, -1.295136703231701e+00, 0.000000000000000e+00, -1.165487030567275e+00, -7.038519401596876e-03, 0.000000000000000e+00, -6.799138248056029e-03, -2.498160816602243e+00, 0.000000000000000e+00, -2.389082205208738e+00, -1.122327921506928e+00, 0.000000000000000e+00, -6.203641727274861e+00, -1.122327921506928e+00, 0.000000000000000e+00, -6.203641727274865e+00, -2.699423630437038e+04, 0.000000000000000e+00, -2.244333652359250e+04, -2.377129305085925e+04, 0.000000000000000e+00, -1.931417482117499e+04, -1.216776288441620e+02, 0.000000000000000e+00, -1.037204954885399e+02, -1.215114546006679e+05, 0.000000000000000e+00, -1.269160306652765e+05, -3.800017519657683e+04, 0.000000000000000e+00, -2.601756453740931e+05, -3.800017519657685e+04, 0.000000000000000e+00, -2.601756453740926e+05, -4.846680546692565e-06, 0.000000000000000e+00, -4.851080034648205e-06, -4.849113040992911e-06, 0.000000000000000e+00, -4.853437575105645e-06, -4.846770983291386e-06, 0.000000000000000e+00, -4.851128836541158e-06, -4.848859739812957e-06, 0.000000000000000e+00, -4.853271711604257e-06, -4.847969672233310e-06, 0.000000000000000e+00, -4.852277109495015e-06, -4.847969672233310e-06, 0.000000000000000e+00, -4.852277109495015e-06, -1.390505174012112e-04, 0.000000000000000e+00, -1.390739804378333e-04, -1.367050927795047e-04, 0.000000000000000e+00, -1.368139359015508e-04, -1.379563169862598e-04, 0.000000000000000e+00, -1.383308550659707e-04, -1.359541051242028e-04, 0.000000000000000e+00, -1.362601379430363e-04, -1.384856177763349e-04, 0.000000000000000e+00, -1.380053411961584e-04, -1.384856177763349e-04, 0.000000000000000e+00, -1.380053411961584e-04, -2.674418588169468e-02, 0.000000000000000e+00, -2.705233655377957e-02, -2.243105318245268e-02, 0.000000000000000e+00, -2.235613654639645e-02, -3.728810852224589e-02, 0.000000000000000e+00, -3.327602924577164e-02, -3.919390097041823e-02, 0.000000000000000e+00, -3.437283199049815e-02, -2.375045047835983e-02, 0.000000000000000e+00, -2.878668729257634e-02, -2.375045047835984e-02, 0.000000000000000e+00, -2.878668729257634e-02, -6.505963774825196e+00, 0.000000000000000e+00, -6.374754236166829e+00, -9.541582105972325e-01, 0.000000000000000e+00, -9.403336210079714e-01, -8.887221594769446e+00, 0.000000000000000e+00, -7.627844255760007e+00, -2.710487849397452e-04, 0.000000000000000e+00, -2.715086080809565e-04, -4.697223848911272e+00, 0.000000000000000e+00, -4.348613504946937e+00, -4.697223848911272e+00, 0.000000000000000e+00, -4.348613504946937e+00, -3.132510014770350e+05, 0.000000000000000e+00, -2.691928906448926e+05, -1.430355540003786e+05, 0.000000000000000e+00, -1.340307199633583e+05, -5.285290375743662e+05, 0.000000000000000e+00, -4.570202032631956e+05, -2.851594709760172e+01, 0.000000000000000e+00, -2.772617974525637e+01, -4.165393661010511e+05, 0.000000000000000e+00, -1.601396052475062e+05, -4.165393661010508e+05, 0.000000000000000e+00, -1.601396052475063e+05, -2.680734768742411e-02, 0.000000000000000e+00, -2.624971974992465e-02, -3.147983843923183e-02, 0.000000000000000e+00, -3.095512106663836e-02, -3.056916249792561e-02, 0.000000000000000e+00, -3.002184575445052e-02, -2.932883221647742e-02, 0.000000000000000e+00, -2.879034735770342e-02, -3.001747232590189e-02, 0.000000000000000e+00, -2.947271274977977e-02, -3.001747232590189e-02, 0.000000000000000e+00, -2.947271274977977e-02, -2.565795815761436e-02, 0.000000000000000e+00, -2.527466482435016e-02, -4.266891189701947e-02, 0.000000000000000e+00, -4.219887921481911e-02, -4.230709958648698e-02, 0.000000000000000e+00, -4.183927163759268e-02, -4.179699942639985e-02, 0.000000000000000e+00, -4.128281647310860e-02, -4.229937876470979e-02, 0.000000000000000e+00, -4.177202798738773e-02, -4.229937876470979e-02, 0.000000000000000e+00, -4.177202798738773e-02, -1.868469873098928e-02, 0.000000000000000e+00, -1.853836307069547e-02, -4.701279791491323e-01, 0.000000000000000e+00, -4.630505158493581e-01, -2.922786150113121e-01, 0.000000000000000e+00, -2.865008426368097e-01, -1.597717844384067e-01, 0.000000000000000e+00, -1.571579959070214e-01, -2.139007214823412e-01, 0.000000000000000e+00, -2.152081097658202e-01, -2.139007214823414e-01, 0.000000000000000e+00, -2.152081097658201e-01, -5.878417857952184e-02, 0.000000000000000e+00, -5.787634548318762e-02, -1.257278717818881e+02, 0.000000000000000e+00, -1.232515251915409e+02, -5.224687135736701e+01, 0.000000000000000e+00, -4.771680681159507e+01, -2.187748644992975e-01, 0.000000000000000e+00, -2.097774509058993e-01, -1.542120152238153e+01, 0.000000000000000e+00, -1.392645045290046e+01, -1.542120152238153e+01, 0.000000000000000e+00, -1.392645045290049e+01, -8.707333392264236e+03, 0.000000000000000e+00, -7.866474815251775e+03, -1.009650242241296e+07, 0.000000000000000e+00, -1.156852451107778e+07, -1.062346436998397e+06, 0.000000000000000e+00, -8.969265799909581e+05, -1.796414959257236e+01, 0.000000000000000e+00, -1.705868217529126e+01, -5.873598380814212e+05, 0.000000000000000e+00, -2.099073939993964e+05, -5.873598380814226e+05, 0.000000000000000e+00, -2.099073939993972e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
