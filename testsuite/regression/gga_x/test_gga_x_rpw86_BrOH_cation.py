
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_rpw86_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_rpw86", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.125832396093392e+01, -2.125833610776937e+01, -2.125848402968435e+01, -2.125830137563810e+01, -2.125838373020826e+01, -2.125838373020826e+01, -3.555634797128474e+00, -3.555576235789716e+00, -3.554309032631302e+00, -3.557186836058861e+00, -3.555650523695737e+00, -3.555650523695737e+00, -7.230994698530089e-01, -7.232926959421651e-01, -7.289715507132373e-01, -7.338226758571531e-01, -7.315673320541599e-01, -7.315673320541599e-01, -2.231349935232602e-01, -2.245049574808500e-01, -8.329418064668768e-01, -1.877544314990877e-01, -2.184344558703856e-01, -2.184344558703855e-01, -2.408411168470018e-02, -2.471433627966753e-02, -7.585953634805874e-02, -1.744755104161976e-02, -2.081896511435527e-02, -2.081896511435526e-02, -5.074075631314052e+00, -5.072675285910432e+00, -5.074025661125637e+00, -5.072789155910645e+00, -5.073357485392485e+00, -5.073357485392485e+00, -2.203707574346343e+00, -2.213508428383782e+00, -2.205993714904857e+00, -2.214739756383743e+00, -2.207905842958778e+00, -2.207905842958778e+00, -5.920606703282594e-01, -6.020487276165939e-01, -5.544895627842553e-01, -5.380137684270483e-01, -5.968080017819628e-01, -5.968080017819628e-01, -1.478819581625498e-01, -2.381702592663914e-01, -1.394951855138674e-01, -1.810868584913632e+00, -1.611626074031698e-01, -1.611626074031698e-01, -1.452943301028690e-02, -1.693563790115929e-02, -1.200905690178395e-02, -1.036063633731361e-01, -1.484352091819189e-02, -1.484352091819190e-02, -5.496980313089217e-01, -5.530941761712248e-01, -5.516571938126981e-01, -5.506496349806427e-01, -5.511296178145038e-01, -5.511296178145038e-01, -5.333703667706091e-01, -5.290544914241837e-01, -5.301967235605188e-01, -5.284662596243975e-01, -5.292469335209011e-01, -5.292469335209011e-01, -6.325915912166757e-01, -2.852309713444111e-01, -3.232099109217990e-01, -3.802132046736065e-01, -3.505497031285536e-01, -3.505497031285536e-01, -4.885435806674457e-01, -7.422823276903442e-02, -9.117124979889160e-02, -3.531629326263387e-01, -1.208261189017668e-01, -1.208261189017668e-01, -3.029522938981881e-02, -6.536093213727244e-03, -1.098566520877243e-02, -1.156834037794325e-01, -1.380779922643600e-02, -1.380779922643599e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_rpw86_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_rpw86", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.410921178294302e+01, -2.410918418426511e+01, -2.410933288444747e+01, -2.410927213507452e+01, -2.410967790387227e+01, -2.410977840370949e+01, -2.410831146537476e+01, -2.410803643939722e+01, -2.410928615196501e+01, -2.410870149618788e+01, -2.410928615196501e+01, -2.410870149618788e+01, -3.875766483117384e+00, -3.875832830079430e+00, -3.875793487175915e+00, -3.875860052659359e+00, -3.876454893216815e+00, -3.876652718967616e+00, -3.875940973304171e+00, -3.876124330959581e+00, -3.875071619194107e+00, -3.876779869616963e+00, -3.875071619194107e+00, -3.876779869616963e+00, -7.490862747759133e-01, -7.506175229160611e-01, -7.484547173620356e-01, -7.502824133866397e-01, -7.414949989377154e-01, -7.402493826239180e-01, -7.461482062302298e-01, -7.464901896094227e-01, -7.546189750103630e-01, -7.435512035338856e-01, -7.546189750103630e-01, -7.435512035338856e-01, -2.162881498744235e-01, -2.219621632998930e-01, -2.173863917653239e-01, -2.239646987337974e-01, -8.596049427364872e-01, -8.840352508325373e-01, -1.814732424447239e-01, -1.835622618691896e-01, -2.251034141504253e-01, -1.433330978172015e-01, -2.251034141504250e-01, -1.433330978172015e-01, -1.902387812618195e-02, -1.977382876173566e-02, -1.948766939705896e-02, -2.035202284820347e-02, -6.618547788594628e-02, -6.896425027672223e-02, -1.404813247381506e-02, -1.394322827918545e-02, -1.773099185543648e-02, -1.147342512446828e-02, -1.773099185543646e-02, -1.147342512446828e-02, -5.989696900471327e+00, -5.988136170737884e+00, -5.993931520034889e+00, -5.992226201371838e+00, -5.989923779731082e+00, -5.988270808591744e+00, -5.993557041840631e+00, -5.991986207555210e+00, -5.991869164397069e+00, -5.990188814935030e+00, -5.991869164397069e+00, -5.990188814935030e+00, -2.232419801255862e+00, -2.232316959573896e+00, -2.245194652346834e+00, -2.244669666018201e+00, -2.228592815935533e+00, -2.229451377630821e+00, -2.239458353009358e+00, -2.240584600025160e+00, -2.242952606285052e+00, -2.239195146521194e+00, -2.242952606285052e+00, -2.239195146521194e+00, -6.578439391808011e-01, -6.561745592361906e-01, -7.658890575322876e-01, -7.671033990658331e-01, -5.935824091627823e-01, -6.168267257720504e-01, -6.584577314484686e-01, -6.793285998608316e-01, -6.883445489824888e-01, -6.526075407373767e-01, -6.883445489824890e-01, -6.526075407373767e-01, -1.412210987369209e-01, -1.419964143768228e-01, -2.319967100086014e-01, -2.328866036346333e-01, -1.303716602917424e-01, -1.356183901525165e-01, -2.313949223154660e+00, -2.313043415610360e+00, -1.539128381929248e-01, -1.574680494411213e-01, -1.539128381929248e-01, -1.574680494411213e-01, -1.141485300584903e-02, -1.185159897403244e-02, -1.346987923900314e-02, -1.370027460983334e-02, -9.519070600149093e-03, -9.756520503469366e-03, -9.663377306343861e-02, -9.730523769753896e-02, -1.032482982831110e-02, -1.255044269878409e-02, -1.032482982831111e-02, -1.255044269878410e-02, -7.233806015988627e-01, -7.263658585132194e-01, -7.045960512484761e-01, -7.078547914195363e-01, -7.117276010385174e-01, -7.149414131173765e-01, -7.173233597789964e-01, -7.203727786156346e-01, -7.145813102298926e-01, -7.177095238939176e-01, -7.145813102298926e-01, -7.177095238939176e-01, -7.068684124787693e-01, -7.092240198740689e-01, -5.488121843914125e-01, -5.509514076421453e-01, -5.725861951828617e-01, -5.753073794241444e-01, -6.140246555140545e-01, -6.165222732875993e-01, -5.901341947440408e-01, -5.925343172486003e-01, -5.901341947440408e-01, -5.925343172486003e-01, -7.991715630060381e-01, -8.018897224059340e-01, -2.793593513487342e-01, -2.805212947929245e-01, -3.187976864042055e-01, -3.207984752766800e-01, -3.897356492687811e-01, -3.916750555835133e-01, -3.516331374668006e-01, -3.512501062007644e-01, -3.516331374668004e-01, -3.512501062007644e-01, -5.051928230749598e-01, -5.082174945645128e-01, -6.559600702236218e-02, -6.593113293047487e-02, -8.230089740188183e-02, -8.428739686978716e-02, -3.700709972717285e-01, -3.754685054192579e-01, -1.134012259688755e-01, -1.166333469187482e-01, -1.134012259688755e-01, -1.166333469187481e-01, -2.432834013927418e-02, -2.483824353570669e-02, -5.377311458856384e-03, -5.086325612320971e-03, -8.652246200233644e-03, -8.924687227246906e-03, -1.091080452455894e-01, -1.105620790117259e-01, -9.306251861328224e-03, -1.185560552908656e-02, -9.306251861328215e-03, -1.185560552908656e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_rpw86_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_rpw86", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.144581939443567e-08, 0.000000000000000e+00, -2.144594182619920e-08, -2.144569226432827e-08, 0.000000000000000e+00, -2.144584938246718e-08, -2.144503022237444e-08, 0.000000000000000e+00, -2.144497218344189e-08, -2.144647202298203e-08, 0.000000000000000e+00, -2.144680773379666e-08, -2.144575646495027e-08, 0.000000000000000e+00, -2.144588640855720e-08, -2.144575646495027e-08, 0.000000000000000e+00, -2.144588640855720e-08, -2.768074526347723e-05, 0.000000000000000e+00, -2.769643966218224e-05, -2.768217550124049e-05, 0.000000000000000e+00, -2.769898593853372e-05, -2.772809240177512e-05, 0.000000000000000e+00, -2.773946859894442e-05, -2.763058403769431e-05, 0.000000000000000e+00, -2.764464471878091e-05, -2.769367111110373e-05, 0.000000000000000e+00, -2.768291689001792e-05, -2.769367111110373e-05, 0.000000000000000e+00, -2.768291689001792e-05, -1.514873164741652e-02, 0.000000000000000e+00, -1.542419668766659e-02, -1.506763966677252e-02, 0.000000000000000e+00, -1.540412485486441e-02, -1.406687099644783e-02, 0.000000000000000e+00, -1.366239256943870e-02, -1.347737969250401e-02, 0.000000000000000e+00, -1.361450797549668e-02, -1.573159561217906e-02, 0.000000000000000e+00, -1.154234880520514e-02, -1.573159561217906e-02, 0.000000000000000e+00, -1.154234880520514e-02, -1.198829643363013e+00, 0.000000000000000e+00, -1.123254912355379e+00, -1.201390019239280e+00, 0.000000000000000e+00, -1.113701644627269e+00, -8.856686823848580e-03, 0.000000000000000e+00, -8.825453950559878e-03, -1.876564993868236e+00, 0.000000000000000e+00, -1.803934802243560e+00, -1.032250127920971e+00, 0.000000000000000e+00, -3.862148364313223e+00, -1.032250127920971e+00, 0.000000000000000e+00, -3.862148364313224e+00, -4.050962380811396e+03, 0.000000000000000e+00, -3.483826795662580e+03, -3.693421479597913e+03, 0.000000000000000e+00, -3.120433584081062e+03, -4.297159060363611e+01, 0.000000000000000e+00, -3.761707367015640e+01, -1.334195453788552e+04, 0.000000000000000e+00, -1.374085250696423e+04, -5.333706095430766e+03, 0.000000000000000e+00, -3.004906128506661e+04, -5.333706095430778e+03, 0.000000000000000e+00, -3.004906128506662e+04, -6.279204957570924e-06, 0.000000000000000e+00, -6.285204660793037e-06, -6.274891837897723e-06, 0.000000000000000e+00, -6.281047003449262e-06, -6.278944376529899e-06, 0.000000000000000e+00, -6.285045949127045e-06, -6.275247865371388e-06, 0.000000000000000e+00, -6.281272147050308e-06, -6.277046058754081e-06, 0.000000000000000e+00, -6.283147662079658e-06, -6.277046058754081e-06, 0.000000000000000e+00, -6.283147662079658e-06, -1.635724161214289e-04, 0.000000000000000e+00, -1.635979804821900e-04, -1.615532409555107e-04, 0.000000000000000e+00, -1.616642891720018e-04, -1.603112557165237e-04, 0.000000000000000e+00, -1.613282812889991e-04, -1.586340668556807e-04, 0.000000000000000e+00, -1.595545454927210e-04, -1.647779053252829e-04, 0.000000000000000e+00, -1.629323656868675e-04, -1.647779053252829e-04, 0.000000000000000e+00, -1.629323656868675e-04, -3.581925321878902e-02, 0.000000000000000e+00, -3.623300644873786e-02, -2.428394556793323e-02, 0.000000000000000e+00, -2.401879930432079e-02, -4.962049282192531e-02, 0.000000000000000e+00, -4.447731206954275e-02, -4.565562839670439e-02, 0.000000000000000e+00, -4.032233285889085e-02, -3.176314041708971e-02, 0.000000000000000e+00, -3.854243917465178e-02, -3.176314041708964e-02, 0.000000000000000e+00, -3.854243917465176e-02, -3.763945210183778e+00, 0.000000000000000e+00, -3.722993697743716e+00, -7.774369868663999e-01, 0.000000000000000e+00, -7.681523921721073e-01, -4.902518238642009e+00, 0.000000000000000e+00, -4.336763992918453e+00, -2.879855958512073e-04, 0.000000000000000e+00, -2.883546434137159e-04, -3.046670929436178e+00, 0.000000000000000e+00, -3.059102168527105e+00, -3.046670929436178e+00, 0.000000000000000e+00, -3.059102168527105e+00, -3.049111611170402e+04, 0.000000000000000e+00, -2.623992596583896e+04, -1.578797726322554e+04, 0.000000000000000e+00, -1.475078884688199e+04, -6.354244301332278e+04, 0.000000000000000e+00, -5.773851696577962e+04, -1.329163624209312e+01, 0.000000000000000e+00, -1.290035243967945e+01, -4.572549617980362e+04, 0.000000000000000e+00, -2.114779774418175e+04, -4.572549617980357e+04, 0.000000000000000e+00, -2.114779774418173e+04, -2.352574626193242e-02, 0.000000000000000e+00, -2.296879890950907e-02, -3.360606848996533e-02, 0.000000000000000e+00, -3.287808990244982e-02, -3.062642253628974e-02, 0.000000000000000e+00, -2.991442700913894e-02, -2.767343871036540e-02, 0.000000000000000e+00, -2.705396102127674e-02, -2.920209211795808e-02, 0.000000000000000e+00, -2.853396782819591e-02, -2.920209211795808e-02, 0.000000000000000e+00, -2.853396782819591e-02, -2.194379155789349e-02, 0.000000000000000e+00, -2.162100365554951e-02, -5.387570821166622e-02, 0.000000000000000e+00, -5.339298864933603e-02, -5.614471137242037e-02, 0.000000000000000e+00, -5.559472948811627e-02, -5.495157511217984e-02, 0.000000000000000e+00, -5.422205770866755e-02, -5.666008032852397e-02, 0.000000000000000e+00, -5.595056871867449e-02, -5.666008032852397e-02, 0.000000000000000e+00, -5.595056871867449e-02, -2.075915869846168e-02, 0.000000000000000e+00, -2.037514315763274e-02, -4.257368719316312e-01, 0.000000000000000e+00, -4.208215402119664e-01, -2.945754562116564e-01, 0.000000000000000e+00, -2.911325460267380e-01, -1.965979094946928e-01, 0.000000000000000e+00, -1.937631970565349e-01, -2.393662078998648e-01, 0.000000000000000e+00, -2.412633176769325e-01, -2.393662078998650e-01, 0.000000000000000e+00, -2.412633176769324e-01, -7.383691255807399e-02, 0.000000000000000e+00, -7.298959615547151e-02, -4.354495153515504e+01, 0.000000000000000e+00, -4.283111503908349e+01, -2.084455983925579e+01, 0.000000000000000e+00, -1.940776690252858e+01, -2.828416995836877e-01, 0.000000000000000e+00, -2.726412998531003e-01, -8.182395729168677e+00, 0.000000000000000e+00, -7.857637455290115e+00, -8.182395729168666e+00, 0.000000000000000e+00, -7.857637455290126e+00, -1.552845711074843e+03, 0.000000000000000e+00, -1.435717141142192e+03, -6.154192514191871e+05, 0.000000000000000e+00, -7.692188680101444e+05, -9.214677603565987e+04, 0.000000000000000e+00, -8.147028278427948e+04, -9.438806355086003e+00, 0.000000000000000e+00, -9.025464295526282e+00, -6.950199992707533e+04, 0.000000000000000e+00, -2.647960004477148e+04, -6.950199992707557e+04, 0.000000000000000e+00, -2.647960004477153e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
