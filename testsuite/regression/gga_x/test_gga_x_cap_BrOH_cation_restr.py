
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_cap_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_cap", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.077212829704293e+01, -2.077216088787112e+01, -2.077236430921576e+01, -2.077187821862645e+01, -2.077212459559222e+01, -2.077212459559222e+01, -3.433810581576800e+00, -3.433780584510639e+00, -3.433171472607572e+00, -3.434882844379955e+00, -3.433857390901635e+00, -3.433857390901635e+00, -6.852904232207427e-01, -6.852075729726680e-01, -6.852421369836315e-01, -6.899879317726336e-01, -6.882282288828726e-01, -6.882282288828726e-01, -2.144432282048911e-01, -2.147453538528623e-01, -7.921048210516021e-01, -1.969898702392391e-01, -2.007834311511189e-01, -2.007834311511190e-01, -2.132673897290470e-01, -2.079723216780219e-01, -1.835518559593454e-01, -2.405625821142178e-01, -2.160626513227088e-01, -2.160626513227086e-01, -5.005460895348344e+00, -5.005114517678939e+00, -5.005454393760799e+00, -5.005148470109435e+00, -5.005280116284702e+00, -5.005280116284702e+00, -2.069225755581737e+00, -2.079237119958879e+00, -2.069774633179778e+00, -2.078564449791502e+00, -2.074541695698761e+00, -2.074541695698761e+00, -5.749868038515910e-01, -6.015121914159158e-01, -5.355640224128467e-01, -5.355998814334132e-01, -5.812901999312541e-01, -5.812901999312541e-01, -1.881973130601922e-01, -2.399069315753268e-01, -1.837296653952097e-01, -1.809963925586195e+00, -1.807470026619823e-01, -1.807470026619823e-01, -2.314246902758746e-01, -2.302895235166366e-01, -1.409798633125907e-01, -1.686836594479450e-01, -1.708335907241384e-01, -1.708335907241385e-01, -5.504793836284958e-01, -5.527811324827400e-01, -5.520140061943941e-01, -5.513429720675816e-01, -5.516818174090126e-01, -5.516818174090126e-01, -5.338877019369777e-01, -5.018754040093578e-01, -5.108367872435570e-01, -5.197385858118541e-01, -5.150155660990389e-01, -5.150155660990389e-01, -6.315617534645278e-01, -2.758983040470132e-01, -3.049541529303146e-01, -3.589677770530830e-01, -3.284362479716302e-01, -3.284362479716302e-01, -4.630292463477912e-01, -1.896166992952395e-01, -1.823665020032915e-01, -3.370949529724263e-01, -1.626996426256837e-01, -1.626996426256837e-01, -2.137643538001295e-01, -1.775998558902336e-01, -1.963427208322648e-01, -1.624240246525366e-01, -1.616604701541528e-01, -1.616604701541527e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_cap_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_cap", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.541953010469531e+01, -2.541962527390260e+01, -2.542003130710366e+01, -2.541861572950334e+01, -2.541935989034476e+01, -2.541935989034476e+01, -4.089849426764641e+00, -4.089892594813581e+00, -4.090990768300728e+00, -4.089858148614193e+00, -4.089999774304985e+00, -4.089999774304985e+00, -7.685817025268412e-01, -7.671624226803021e-01, -7.316772599646706e-01, -7.385141673813617e-01, -7.376692469569132e-01, -7.376692469569132e-01, -1.707326339126988e-01, -1.752861309002262e-01, -9.021951947261068e-01, -1.086707185976375e-01, -1.341047619961250e-01, -1.341047619961250e-01, 4.931702392883503e-02, 4.838460303182821e-02, 2.461118898270719e-02, 5.158311451837487e-02, 4.832096279454307e-02, 4.832096279454304e-02, -6.252799232905122e+00, -6.255207555524981e+00, -6.252908449109641e+00, -6.255034553134537e+00, -6.254020852973770e+00, -6.254020852973770e+00, -2.184985331458781e+00, -2.204846626837828e+00, -2.164235348098728e+00, -2.181801286219360e+00, -2.205995171732035e+00, -2.205995171732035e+00, -6.940857747891581e-01, -7.771195118591294e-01, -6.389642098659110e-01, -6.848490737430940e-01, -7.080753336145451e-01, -7.080753336145451e-01, -4.876291539090995e-02, -1.550947905400213e-01, -4.056451874985591e-02, -2.342193219768263e+00, -7.739454514726045e-02, -7.739454514726045e-02, 4.811952467392099e-02, 4.951949612898947e-02, 3.118777685562244e-02, -7.642167467017577e-03, 3.776528866747304e-02, 3.776528866747310e-02, -7.254465051778031e-01, -7.151475162133545e-01, -7.186741309478928e-01, -7.216592045127611e-01, -7.201570774460569e-01, -7.201570774460569e-01, -7.077718862166359e-01, -5.652249866487381e-01, -6.048389328464714e-01, -6.449926593040777e-01, -6.245293507003032e-01, -6.245293507003032e-01, -8.136783722086199e-01, -2.130400695541904e-01, -2.737959553843127e-01, -3.951510953380930e-01, -3.306325988060420e-01, -3.306325988060420e-01, -5.195309315217082e-01, 2.821854732861864e-02, 1.196069163895687e-02, -3.885925738608125e-01, -3.226138510477487e-02, -3.226138510477485e-02, 5.047933434102998e-02, 3.255830012396210e-02, 3.977898839182156e-02, -2.592276401945538e-02, 3.563972345283115e-02, 3.563972345283118e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_cap_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_cap", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.764093624379530e-09, -5.764053399352714e-09, -5.763816108988136e-09, -5.764415807647744e-09, -5.764109873613224e-09, -5.764109873613224e-09, -7.819038394703658e-06, -7.819219577085046e-06, -7.822648484864243e-06, -7.810760786859478e-06, -7.818501710625466e-06, -7.818501710625466e-06, -5.176773020393544e-03, -5.188080324082568e-03, -5.458442758384308e-03, -5.295183755284432e-03, -5.340930239304446e-03, -5.340930239304446e-03, -8.542380161771410e-01, -8.183408787563707e-01, -2.858257024350960e-03, -2.089045710556636e+00, -1.450953046795381e+00, -1.450953046795381e+00, -4.930574161272472e+04, -4.242883242754819e+04, -1.615048506501413e+02, -2.720179847720132e+05, -1.396654520563506e+05, -1.396654520563507e+05, -1.703594463988475e-06, -1.704075400950694e-06, -1.703603561242145e-06, -1.704028212866512e-06, -1.703844462370117e-06, -1.703844462370117e-06, -6.650653380458704e-05, -6.491114835422772e-05, -6.722004230871932e-05, -6.578493123941515e-05, -6.528821993116572e-05, -6.528821993116572e-05, -9.872600244763569e-03, -8.298663064225205e-03, -1.319989385351385e-02, -1.308352000945230e-02, -9.414298419337244e-03, -9.414298419337244e-03, -6.810473560108866e+00, -7.480311617737073e-01, -8.912159864582081e+00, -1.014239863329535e-04, -4.246116941889480e+00, -4.246116941889480e+00, -6.511323273278493e+05, -3.025001672849730e+05, -1.042389737822107e+06, -3.455119944814607e+01, -4.927960647449153e+05, -4.927960647449149e+05, -1.231270494450193e-02, -1.165394714907745e-02, -1.182495265547999e-02, -1.200679352349356e-02, -1.191033684225471e-02, -1.191033684225471e-02, -1.429154260889379e-02, -1.792330888839322e-02, -1.602376724738988e-02, -1.466082900331091e-02, -1.530646948651953e-02, -1.530646948651953e-02, -6.808558016055007e-03, -3.264767597720424e-01, -1.749889343800590e-01, -7.007916208179733e-02, -1.111740193826438e-01, -1.111740193826438e-01, -2.482793081823610e-02, -1.827521787017714e+02, -6.709982981474037e+01, -8.622923411047011e-02, -1.614389399745561e+01, -1.614389399745560e+01, -1.584908688760850e+04, -2.649384327932056e+07, -2.231563146761113e+06, -1.981587110005528e+01, -6.612562505765181e+05, -6.612562505765206e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
