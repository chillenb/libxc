
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_revssb_d_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_revssb_d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.190513353337818e+01, -2.190515843406082e+01, -2.190534956572856e+01, -2.190494027755233e+01, -2.190514599599974e+01, -2.190514599599974e+01, -3.644883465720162e+00, -3.644839564697631e+00, -3.643786133341354e+00, -3.646377685732424e+00, -3.644876413628694e+00, -3.644876413628694e+00, -7.358788347310451e-01, -7.362818124749466e-01, -7.501210171935839e-01, -7.544785468630546e-01, -7.360196917865793e-01, -7.360196917865793e-01, -2.200275916670366e-01, -2.209367816160917e-01, -8.517030059920840e-01, -1.814402947058102e-01, -2.202771071374064e-01, -2.202771071374064e-01, -1.700677993912059e-02, -1.780930658264923e-02, -7.043138910325755e-02, -8.175580812910820e-03, -1.762380701321813e-02, -1.762380701321813e-02, -5.275683486825539e+00, -5.275596592651834e+00, -5.275679441484995e+00, -5.275611680877203e+00, -5.275629690766356e+00, -5.275629690766356e+00, -2.324963187580974e+00, -2.331374081237557e+00, -2.332471005355290e+00, -2.337390675860592e+00, -2.319734576341688e+00, -2.319734576341688e+00, -5.916119040431334e-01, -6.313767398424430e-01, -5.624692261157077e-01, -5.746620715627595e-01, -6.111085445156276e-01, -6.111085445156276e-01, -1.451767711691406e-01, -2.403806573214717e-01, -1.425915324037474e-01, -1.926697979314440e+00, -1.604987357172953e-01, -1.604987357172953e-01, -7.887038140688085e-03, -9.012279727075049e-03, -6.754952082544789e-03, -9.545456536519176e-02, -8.211534778632738e-03, -8.211534778632738e-03, -6.007212197926439e-01, -5.964272249471895e-01, -5.979039229375217e-01, -5.990985277861013e-01, -5.984958073591270e-01, -5.984958073591270e-01, -5.816189024380898e-01, -5.320925149357061e-01, -5.374576596034443e-01, -5.480050073163538e-01, -5.414990903137710e-01, -5.414990903137709e-01, -6.622100166746191e-01, -2.868712934911103e-01, -3.217094720977719e-01, -3.731889295950417e-01, -3.457582926221426e-01, -3.457582926221426e-01, -4.811839423645063e-01, -6.565246087228718e-02, -8.712442714764948e-02, -3.410093779981393e-01, -1.196999354736451e-01, -1.196999354736451e-01, -1.992210950813665e-02, -2.468788476318747e-03, -4.689126081936429e-03, -1.140931937439825e-01, -6.979272634848751e-03, -6.979272634848740e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_revssb_d_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_revssb_d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.628896232649689e+01, -2.628913765656849e+01, -2.628980557106096e+01, -2.628693669685757e+01, -2.628905574487611e+01, -2.628905574487611e+01, -4.023634342504895e+00, -4.023781546376854e+00, -4.027997236698845e+00, -4.021590973608212e+00, -4.023727188163325e+00, -4.023727188163325e+00, -7.207311563067731e-01, -7.191826012653825e-01, -6.864608612136139e-01, -6.916215183653687e-01, -7.201674281056177e-01, -7.201674281056177e-01, -2.116566718895537e-01, -2.130046707674429e-01, -8.945008802514277e-01, -1.805726232057866e-01, -2.120322705489908e-01, -2.120322705489908e-01, -2.255983079583579e-02, -2.361248515816618e-02, -8.853464491814780e-02, -1.088994471032183e-02, -2.336679380781513e-02, -2.336679380781513e-02, -6.679988652402554e+00, -6.686355913974523e+00, -6.680633471433996e+00, -6.685584883248758e+00, -6.683270530674046e+00, -6.683270530674046e+00, -1.924842175813499e+00, -1.944038770055385e+00, -1.911598285227772e+00, -1.926419122085749e+00, -1.955644485868649e+00, -1.955644485868649e+00, -7.126985133787257e-01, -8.454838697088665e-01, -6.702004827401727e-01, -7.663110960810861e-01, -7.549710624044575e-01, -7.549710624044575e-01, -1.587599988626081e-01, -2.322003046979565e-01, -1.548643424151587e-01, -2.558137871839415e+00, -1.659084759560167e-01, -1.659084759560167e-01, -1.050603707957953e-02, -1.200141650657593e-02, -8.995955642540462e-03, -1.139952722083951e-01, -1.093496801710900e-02, -1.093496801710900e-02, -8.031282962274009e-01, -7.996951389651900e-01, -8.013771064234491e-01, -8.022895612836612e-01, -8.018692349445983e-01, -8.018692349445983e-01, -7.769938964850459e-01, -5.697553278240512e-01, -6.340365970214893e-01, -7.086685595305094e-01, -6.713701955073772e-01, -6.713701955073771e-01, -8.854787642138813e-01, -2.740310877269014e-01, -3.110659414621037e-01, -3.937498556719254e-01, -3.449344491464637e-01, -3.449344491464637e-01, -5.117822163610136e-01, -8.353760196711948e-02, -1.068009561495794e-01, -3.864043885903039e-01, -1.340395732125266e-01, -1.340395732125265e-01, -2.640129411075363e-02, -3.291315009253097e-03, -6.249605631979035e-03, -1.276076305235955e-01, -9.295500853856813e-03, -9.295500853856799e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_revssb_d_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_revssb_d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-7.388128414617028e-09, -7.387869756412697e-09, -7.386933326939134e-09, -7.391164464468039e-09, -7.387990189219395e-09, -7.387990189219395e-09, -1.338530559036794e-05, -1.338407209401483e-05, -1.334777681954357e-05, -1.339872364326199e-05, -1.338444323628981e-05, -1.338444323628981e-05, -9.341219736467078e-03, -9.356966537049621e-03, -9.478068513349832e-03, -9.269456020670898e-03, -9.347150686290825e-03, -9.347150686290825e-03, -6.402522198439202e-01, -6.389826658969796e-01, -4.823747973454300e-03, -9.264972296817182e-01, -6.403258674301466e-01, -6.403258674301466e-01, -5.177806241020506e+00, -5.191185340556777e+00, -2.145531690452366e+00, -3.673121580556743e+00, -5.392461303584193e+00, -5.392461303584193e+00, -1.435142133201107e-06, -1.418631315712435e-06, -1.433486127646998e-06, -1.420647492500622e-06, -1.426628531844640e-06, -1.426628531844640e-06, -1.359057158266110e-04, -1.330067949572544e-04, -1.361920960993536e-04, -1.339327614190251e-04, -1.335251712103113e-04, -1.335251712103113e-04, -1.202892054120597e-02, 7.363330186234336e-04, -1.527880429364662e-02, -9.399942635218159e-04, -9.093982901830370e-03, -9.093982901830370e-03, -1.117184489166056e+00, -3.770079772389773e-01, -1.274546934794421e+00, -1.577258663390919e-05, -1.166050485049984e+00, -1.166050485049984e+00, -3.896149914721041e+00, -3.903921981860869e+00, -1.115826512959742e+01, -2.064564840079525e+00, -5.762255160304186e+00, -5.762255160304707e+00, 2.853416020342635e-03, 1.709852910733231e-03, 2.283862809793151e-03, 2.604973323551972e-03, 2.458355418789961e-03, 2.458355418789961e-03, 3.566121164193692e-03, -2.564782481467651e-02, -1.883187406962059e-02, -7.786834247331481e-03, -1.372655167276091e-02, -1.372655167276090e-02, 1.857066062550916e-04, -2.199329212293394e-01, -1.563516615326645e-01, -9.232237670036263e-02, -1.247404652154297e-01, -1.247404652154297e-01, -3.688251344100399e-02, -1.822478779317672e+00, -1.797195248917802e+00, -1.131565608680263e-01, -1.924257821240881e+00, -1.924257821240882e+00, -3.891261567895001e+00, -6.710394751820728e+00, -5.778649681153697e+00, -2.359073579601922e+00, -8.411719979337057e+00, -8.411719979340274e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
