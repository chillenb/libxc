
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_ssb_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ssb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.176864833612809e+01, -2.176867234417377e+01, -2.176885669980575e+01, -2.176849798382244e+01, -2.176867487094014e+01, -2.176867487094014e+01, -3.632367741082162e+00, -3.632303937958782e+00, -3.630921048264748e+00, -3.634019060047957e+00, -3.632378818702786e+00, -3.632378818702786e+00, -7.283283722060377e-01, -7.287386427243846e-01, -7.421539335621841e-01, -7.472040314717163e-01, -7.447120773237835e-01, -7.447120773237835e-01, -2.099034448867996e-01, -2.110734136830422e-01, -8.444179626066021e-01, -1.770219059317070e-01, -1.894559632256758e-01, -1.894559632256758e-01, -1.008539597038218e-02, -1.061409048909377e-02, -5.739442947932876e-02, -5.827883505555138e-03, -7.321693584336308e-03, -7.321693584336308e-03, -5.236030289516436e+00, -5.235780742541241e+00, -5.236027863584036e+00, -5.235807206119937e+00, -5.235896858247571e+00, -5.235896858247571e+00, -2.350551018400354e+00, -2.355974162759213e+00, -2.364941671801454e+00, -2.369610451942816e+00, -2.346693189162932e+00, -2.346693189162932e+00, -5.912609348643559e-01, -6.313019961191494e-01, -5.492471235027077e-01, -5.575475100064801e-01, -5.978620707637942e-01, -5.978620707637942e-01, -1.361698733467303e-01, -2.251524105839898e-01, -1.274093268993193e-01, -1.910733757483975e+00, -1.510503852247332e-01, -1.510503852247332e-01, -4.496969505939562e-03, -5.697216238107709e-03, -4.355813288387397e-03, -8.972744221943230e-02, -5.247426659960278e-03, -5.247426659960278e-03, -5.851635776330499e-01, -5.800326718825145e-01, -5.817314718681287e-01, -5.832299651035214e-01, -5.824707001510814e-01, -5.824707001510814e-01, -5.698986429102167e-01, -5.182617210552615e-01, -5.229416697936575e-01, -5.335168361708906e-01, -5.266995305022810e-01, -5.266995305022810e-01, -6.621631656701634e-01, -2.699724201453946e-01, -3.061818396384485e-01, -3.636077041530211e-01, -3.328731756514652e-01, -3.328731756514652e-01, -4.753737911467267e-01, -5.507819190102922e-02, -7.393035271148865e-02, -3.391071462822485e-01, -1.097900948461944e-01, -1.097900948461944e-01, -1.422443778755005e-02, -1.523248163519021e-03, -3.197082759729265e-03, -1.042154746804789e-01, -4.855582480215247e-03, -4.855582480215241e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_ssb_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ssb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.572736872960294e+01, -2.572758151849922e+01, -2.572832341124926e+01, -2.572516168400879e+01, -2.572684741716280e+01, -2.572684741716280e+01, -3.907591238941649e+00, -3.907788840796140e+00, -3.912459058545076e+00, -3.905088983858347e+00, -3.907922323227725e+00, -3.907922323227725e+00, -7.149794004914998e-01, -7.130795430104940e-01, -6.739672319554887e-01, -6.792836276552023e-01, -6.788617641273204e-01, -6.788617641273204e-01, -2.020812224200749e-01, -2.036986582447806e-01, -8.321647585962341e-01, -1.736339223004612e-01, -1.822926014139571e-01, -1.822926014139571e-01, -1.342509349185082e-02, -1.412564422028975e-02, -7.340776759420932e-02, -7.766444910518442e-03, -9.753173927992978e-03, -9.753173927992975e-03, -6.576001429683936e+00, -6.583175605072586e+00, -6.576308869944942e+00, -6.582643307312081e+00, -6.579656485017355e+00, -6.579656485017355e+00, -1.795281802880071e+00, -1.817265577051590e+00, -1.765469732812813e+00, -1.784697650239920e+00, -1.822118296470968e+00, -1.822118296470968e+00, -7.103591531155763e-01, -8.478328331002546e-01, -6.454833002368456e-01, -7.489863614539843e-01, -7.345919539428316e-01, -7.345919539428316e-01, -1.483243008063140e-01, -2.165903219143287e-01, -1.411106667115763e-01, -2.534590879535198e+00, -1.538265539483131e-01, -1.538265539483131e-01, -5.993815851072530e-03, -7.592168261335089e-03, -5.803143845717925e-03, -1.071622551971786e-01, -6.991072128017039e-03, -6.991072128017039e-03, -7.843208094990324e-01, -7.809458164619660e-01, -7.828540703725479e-01, -7.837823086022677e-01, -7.833828797241754e-01, -7.833828797241754e-01, -7.619177119965583e-01, -5.466409486671640e-01, -6.066104272409232e-01, -6.905909369004041e-01, -6.473316891634243e-01, -6.473316891634243e-01, -8.873238502548267e-01, -2.579770165685075e-01, -2.975224742358562e-01, -3.867742877207728e-01, -3.347905376241551e-01, -3.347905376241550e-01, -5.047532057693884e-01, -7.080297504438360e-02, -9.224527020575532e-02, -3.848541739837813e-01, -1.228293681227280e-01, -1.228293681227280e-01, -1.891023309559872e-02, -2.030823351717908e-03, -4.261656105879532e-03, -1.185675564420512e-01, -6.469216092289782e-03, -6.469216092289776e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_ssb_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ssb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-8.348737367994309e-09, -8.348411044747288e-09, -8.347305658981119e-09, -8.352153391753499e-09, -8.349564204019539e-09, -8.349564204019539e-09, -1.497590248808396e-05, -1.497427378814592e-05, -1.493491424467477e-05, -1.499165837375142e-05, -1.497250646693911e-05, -1.497250646693911e-05, -9.836216913710227e-03, -9.865166525275772e-03, -1.027707652180968e-02, -1.002717412397984e-02, -1.010592674363491e-02, -1.010592674363491e-02, -5.830817888259948e-01, -5.790669227128173e-01, -5.739306256231090e-03, -8.527835050773224e-01, -7.698763667501416e-01, -7.698763667501417e-01, -3.272123091828322e+00, -3.455594660219540e+00, -1.876004090436276e+00, -2.977156915273933e+00, -3.777809241975357e+00, -3.777809241975357e+00, -1.639896864853593e-06, -1.621031385449648e-06, -1.639107664693864e-06, -1.622452201500853e-06, -1.630291983636202e-06, -1.630291983636202e-06, -1.554191697341417e-04, -1.517315869008250e-04, -1.569713220575722e-04, -1.536807251061985e-04, -1.526198572047659e-04, -1.526198572047659e-04, -1.194945460343523e-02, 1.120849683296334e-03, -1.708741875240221e-02, 9.234678285390905e-04, -1.004102925694166e-02, -1.004102925694166e-02, -1.125927357280173e+00, -3.857704302035058e-01, -1.260608784610920e+00, -1.896869614706810e-05, -1.241037150944823e+00, -1.241037150944823e+00, -3.919273650659395e+00, -3.501592098664216e+00, -2.191945584765430e+01, -1.990043758024481e+00, -1.020720242841509e+01, -1.020720242841647e+01, 4.613995574205474e-03, 2.684905643737972e-03, 3.584749265406532e-03, 4.154616732394028e-03, 3.890756517166560e-03, 3.890756517166560e-03, 5.720524984138025e-03, -2.742114846467614e-02, -2.123023052875106e-02, -8.224104728580733e-03, -1.556164993816200e-02, -1.556164993816200e-02, 3.491739923840945e-04, -2.210963643276528e-01, -1.516418722103622e-01, -8.712896797745101e-02, -1.183857385690782e-01, -1.183857385690783e-01, -3.589763035912928e-02, -1.719525896752057e+00, -1.670828441107471e+00, -1.003197757463650e-01, -2.065693366578394e+00, -2.065693366578394e+00, -2.636850754800327e+00, -1.714045191617614e+01, -8.300845998024505e+00, -2.125329670737118e+00, -1.288958551640546e+01, -1.288958551639929e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
