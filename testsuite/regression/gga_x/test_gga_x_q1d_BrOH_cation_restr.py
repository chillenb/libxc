
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_q1d_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_q1d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.905431535710408e+01, -1.905444907153692e+01, -1.905493065578442e+01, -1.905294334426848e+01, -1.905400081236020e+01, -1.905400081236020e+01, -2.892706374418821e+00, -2.892893433800976e+00, -2.897276555558319e+00, -2.890190350159619e+00, -2.893000382020186e+00, -2.893000382020186e+00, -4.215010498333803e-01, -4.167073971885621e-01, -2.952105803874878e-01, -3.028578898897541e-01, -3.054027772630336e-01, -3.054027772630336e-01, -1.079877329492961e-02, -1.254174670030970e-02, -5.363200185087823e-01, -2.062321074943524e-03, -4.219139050934276e-03, -4.219139050934310e-03, -1.374287668590736e-07, -1.647427105718945e-07, -2.144122897031552e-05, -2.521269088867237e-08, -5.640461338782827e-08, -5.640461338794231e-08, -4.790267060161176e+00, -4.793471683317380e+00, -4.790407622324304e+00, -4.793237360728485e+00, -4.791900294623403e+00, -4.791900294623403e+00, -8.165373612592280e-01, -8.484310460251900e-01, -7.550490866287097e-01, -7.820671636536619e-01, -8.652878467173765e-01, -8.652878467173765e-01, -5.074879630472533e-01, -5.965231721285270e-01, -4.540487025777038e-01, -5.273339246164078e-01, -5.268458825938236e-01, -5.268458825938236e-01, -4.167324863335852e-04, -4.406735092515692e-03, -3.313388180826573e-04, -1.796552830140010e+00, -9.665231555492689e-04, -9.665231555492689e-04, -1.329159462491505e-08, -2.555453349771160e-08, -2.863693880024840e-08, -1.057500956660374e-04, -3.415411463500084e-08, -3.415411463466076e-08, -5.497806160929630e-01, -5.486114340800425e-01, -5.494453692327061e-01, -5.497774566804976e-01, -5.496498173549818e-01, -5.496498173549818e-01, -5.336479160745446e-01, -3.170899965289909e-01, -4.203775333974003e-01, -4.916494488095794e-01, -4.608876915437497e-01, -4.608876915437497e-01, -6.252809900524517e-01, -1.168629801561913e-02, -3.352452369926277e-02, -1.943368019314180e-01, -8.794268282467210e-02, -8.794268282467221e-02, -2.855973560597796e-01, -1.786520792939120e-05, -4.664195721256464e-05, -2.443017823799032e-01, -2.594218106003506e-04, -2.594218106004012e-04, -3.471750146083687e-07, -1.080838351286147e-09, -6.955006013282044e-09, -2.082832267434251e-04, -3.040992336924730e-08, -3.040992337269874e-08])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_q1d_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_q1d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.264503566284347e+01, -3.264472701781784e+01, -3.264402419665863e+01, -3.264860308478046e+01, -3.264610835797718e+01, -3.264610835797718e+01, -6.218691839565281e+00, -6.218026914856254e+00, -6.202808663413159e+00, -6.230449352357370e+00, -6.218044512677510e+00, -6.218044512677510e+00, -1.496423275993142e+00, -1.497521651335690e+00, -1.390833787420000e+00, -1.411395228051170e+00, -1.413990938404500e+00, -1.413990938404500e+00, -7.043784548117431e-02, -8.223326410110648e-02, -1.695924923193794e+00, -1.142160347486405e-02, -2.564966967300627e-02, -2.564966967300622e-02, -5.497179324988207e-07, -6.589752958232238e-07, -8.606795232158565e-05, -1.008508166737160e-07, -2.256188300204433e-07, -2.256188300109775e-07, -7.166902307786772e+00, -7.154024273189854e+00, -7.166378706232418e+00, -7.155006614171660e+00, -7.160316732750214e+00, -7.160316732750214e+00, -4.032398164231399e+00, -4.118494218181315e+00, -3.869140457829894e+00, -3.951821458379495e+00, -4.151201444408072e+00, -4.151201444408072e+00, -9.706169408323937e-01, -7.963249461607006e-01, -9.615621677510499e-01, -7.184315096402147e-01, -9.354403838730546e-01, -9.354403838730546e-01, -1.857370687143115e-03, -2.636602019260300e-02, -1.447923229422608e-03, -2.393199856191387e+00, -4.830772471949126e-03, -4.830772471949126e-03, -5.316639157941783e-08, -1.022181918761537e-07, -1.145478944396571e-07, -4.347979997199070e-04, -1.366166213222786e-07, -1.366166213285384e-07, -7.273844905099619e-01, -7.310373737889628e-01, -7.278893271519249e-01, -7.268462499276941e-01, -7.271951686382466e-01, -7.271951686382466e-01, -7.082547175307804e-01, -1.092434554190290e+00, -9.528272234766024e-01, -7.644299733166908e-01, -8.486155758320785e-01, -8.486155758320785e-01, -8.382931343116299e-01, -7.556071341155741e-02, -2.184412758554577e-01, -7.801063047736830e-01, -5.027166443545703e-01, -5.027166443545705e-01, -1.010827472054570e+00, -7.165390638662960e-05, -1.883131756283476e-04, -7.002487154974975e-01, -1.121867154961130e-03, -1.121867154960721e-03, -1.388723207507327e-06, -4.323353467656526e-09, -2.782002776163482e-08, -8.863710786028241e-04, -1.216398276862103e-07, -1.216398277049988e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_q1d_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_q1d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.832871284729827e-08, 1.832776843843465e-08, 1.832469393125762e-08, 1.833872231653887e-08, 1.833121145246545e-08, 1.833121145246545e-08, 3.779768506334840e-05, 3.779036015136432e-05, 3.761674323809608e-05, 3.788907378383267e-05, 3.778525902983399e-05, 3.778525902983399e-05, 3.332870259246208e-02, 3.336832782974946e-02, 2.991152196055584e-02, 2.940074819332130e-02, 2.987847112265715e-02, 2.987847112265715e-02, 4.155774024488273e-01, 4.827970983520601e-01, 1.821089741209663e-02, 1.176489619019373e-01, 2.174602827191928e-01, 2.174602827191894e-01, 5.415337135364296e-02, 5.723319063862483e-02, 3.446573347573560e-02, 4.911951869923339e-02, 6.244700923570692e-02, 6.244700923021753e-02, 3.154702201537344e-06, 3.107372974650294e-06, 3.152725372933164e-06, 3.110938310279542e-06, 3.130584302261200e-06, 3.130584302261200e-06, 3.410802925168141e-04, 3.417029459445623e-04, 3.231281106300101e-04, 3.245705918617114e-04, 3.494273248988552e-04, 3.494273248988552e-04, 3.999559165825369e-02, 3.202291846915407e-04, 6.258324631172363e-02, 6.844479279872139e-03, 3.274697752466404e-02, 3.274697752466404e-02, 4.385180108339577e-02, 9.301695477262055e-02, 4.386740134825708e-02, -3.144236143421861e-06, 9.193111431758308e-02, 9.193111431758308e-02, 6.470374887357143e-02, 5.781162861393899e-02, 3.632144451641210e-01, 4.672112080591801e-02, 1.690223921763781e-01, 1.690223921673087e-01, -8.168506021798465e-03, -2.366231632680297e-04, -3.207375875814547e-03, -5.520066588483623e-03, -4.380826074578894e-03, -4.380826074578894e-03, -1.147924730286311e-02, 1.154709430676532e-01, 8.241703046512036e-02, 3.326641401161239e-02, 5.764696131521594e-02, 5.764696131521594e-02, 1.099080443837376e-03, 1.264771705798326e-01, 2.289210719941113e-01, 4.373959752318794e-01, 3.994421129058283e-01, 3.994421129058284e-01, 1.598747207563150e-01, 3.110473474239022e-02, 3.317271854612224e-02, 5.305629785714765e-01, 6.783505882266186e-02, 6.783505882265208e-02, 4.373627107764960e-02, 2.834943436760630e-01, 1.372424323151857e-01, 6.326566117770786e-02, 2.134800906877471e-01, 2.134800907129606e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
