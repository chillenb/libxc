
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_bayesian_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_bayesian", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.082637182725429e+01, -2.082640033268311e+01, -2.082659243497872e+01, -2.082616699104127e+01, -2.082638061489056e+01, -2.082638061489056e+01, -3.452035012212180e+00, -3.451997913882996e+00, -3.451225231987939e+00, -3.453224633694021e+00, -3.452073746610849e+00, -3.452073746610849e+00, -6.932843942125451e-01, -6.933204208274123e-01, -6.963661560277314e-01, -7.010506564660484e-01, -6.991808787903405e-01, -6.991808787903405e-01, -2.184276138401479e-01, -2.190445744160128e-01, -8.000808049297621e-01, -1.919496980002691e-01, -2.011625184175210e-01, -2.011625184175210e-01, -1.646120007576795e-02, -1.727057686766856e-02, -7.969864741945459e-02, -9.709412428277404e-03, -1.208944637653210e-02, -1.208944637653211e-02, -5.009942895123697e+00, -5.009432008874206e+00, -5.009929579007224e+00, -5.009478393731806e+00, -5.009678126749845e+00, -5.009678126749845e+00, -2.104670795722632e+00, -2.114161239468766e+00, -2.106761970024662e+00, -2.115116711968700e+00, -2.108922378846421e+00, -2.108922378846421e+00, -5.772464025394058e-01, -6.011506530595433e-01, -5.383117589210773e-01, -5.353956309934736e-01, -5.830594644449546e-01, -5.830594644449546e-01, -1.585070921875135e-01, -2.393676823279474e-01, -1.500875899434746e-01, -1.808858918419626e+00, -1.682121359570627e-01, -1.682121359570627e-01, -7.527346090678580e-03, -9.487053301504105e-03, -7.211742022192462e-03, -1.128540136420347e-01, -8.689378883073001e-03, -8.689378883073001e-03, -5.504065901666128e-01, -5.524441933036848e-01, -5.516955595191230e-01, -5.510961153648416e-01, -5.513921174581303e-01, -5.513921174581303e-01, -5.340442399582993e-01, -5.075163640436446e-01, -5.138671972902670e-01, -5.204654691085995e-01, -5.168071488815763e-01, -5.168071488815763e-01, -6.312028857441196e-01, -2.804395999897839e-01, -3.119423958513580e-01, -3.638161645704157e-01, -3.350972703169424e-01, -3.350972703169423e-01, -4.684102098270980e-01, -7.733631157221335e-02, -9.824854699028636e-02, -3.400593880122422e-01, -1.303194077113589e-01, -1.303194077113588e-01, -2.286214728873583e-02, -2.579396881714932e-03, -5.368665182714983e-03, -1.253437962768662e-01, -8.045536029042651e-03, -8.045536029042642e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_bayesian_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_bayesian", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.511121185355930e+01, -2.511131669862265e+01, -2.511174858241462e+01, -2.511018941126942e+01, -2.511101124867664e+01, -2.511101124867664e+01, -4.020888485340634e+00, -4.020942829956554e+00, -4.022298542222408e+00, -4.020706112599581e+00, -4.021050571411156e+00, -4.021050571411156e+00, -7.516407490434789e-01, -7.502320739205652e-01, -7.169875308296916e-01, -7.235197402966989e-01, -7.225983277104331e-01, -7.225983277104331e-01, -1.872243483907644e-01, -1.894170637824283e-01, -8.828057358487490e-01, -1.562682424379821e-01, -1.657776668516232e-01, -1.657776668516232e-01, -2.089837348831822e-02, -2.185548569700346e-02, -8.455698788748309e-02, -1.258987947409808e-02, -1.553283507397593e-02, -1.553283507397594e-02, -6.203529833002515e+00, -6.206525908260467e+00, -6.203663234345391e+00, -6.206308242050828e+00, -6.205050863594169e+00, -6.205050863594169e+00, -2.143795394850686e+00, -2.162183736382165e+00, -2.126280378989201e+00, -2.142357224020165e+00, -2.162635210429095e+00, -2.162635210429095e+00, -6.839033655695778e-01, -7.762832108976720e-01, -6.283550489623628e-01, -6.828037638874760e-01, -6.988582968387311e-01, -6.988582968387311e-01, -1.355462527836043e-01, -1.965073241375610e-01, -1.300895060748962e-01, -2.340306754598873e+00, -1.380719380729158e-01, -1.380719380729158e-01, -9.807313049961486e-03, -1.229537668009148e-02, -9.291639695557352e-03, -1.060107936906832e-01, -1.119732647184215e-02, -1.119732647184215e-02, -7.263118720750339e-01, -7.145418899253453e-01, -7.187418613237332e-01, -7.221779381873353e-01, -7.204652153516471e-01, -7.204652153516471e-01, -7.086299759309908e-01, -5.528194251885646e-01, -5.941207189203604e-01, -6.390097791827400e-01, -6.158765876147345e-01, -6.158765876147345e-01, -8.124098465067322e-01, -2.380879714412345e-01, -2.817746469313178e-01, -3.864729253511932e-01, -3.271853799700357e-01, -3.271853799700357e-01, -5.080835851791060e-01, -8.313630827874921e-02, -9.885121664507382e-02, -3.805564692254051e-01, -1.139308385305193e-01, -1.139308385305193e-01, -2.856176218954707e-02, -3.400304467940875e-03, -7.017584790126947e-03, -1.113432555840186e-01, -1.037430234357584e-02, -1.037430234357585e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_bayesian_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_bayesian", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-6.727821189818580e-09, -6.727757841374990e-09, -6.727434279426001e-09, -6.728377624164759e-09, -6.727889292450504e-09, -6.727889292450504e-09, -9.311583747928411e-06, -9.311723160467216e-06, -9.314022059923947e-06, -9.302942837486702e-06, -9.310853072487861e-06, -9.310853072487861e-06, -6.161187304760285e-03, -6.171067260728034e-03, -6.343945347585389e-03, -6.163117946783493e-03, -6.221580330641175e-03, -6.221580330641175e-03, -7.713353387970104e-01, -7.564452817629332e-01, -3.415708372902400e-03, -1.352128769432173e+00, -1.112477591177505e+00, -1.112477591177504e+00, -1.551389606745679e+02, -1.526784511749636e+02, -1.301639596672370e+01, -2.600880611881140e+02, -2.434674900075798e+02, -2.434674900075797e+02, -1.927068436752097e-06, -1.925858205280246e-06, -1.927006674364201e-06, -1.925938562917244e-06, -1.926459988949219e-06, -1.926459988949219e-06, -7.675511084510743e-05, -7.511771712524489e-05, -7.707183321836576e-05, -7.562340720177923e-05, -7.568668039319635e-05, -7.568668039319635e-05, -1.166787435523787e-02, -8.416742760468759e-03, -1.570783686368403e-02, -1.387564832965489e-02, -1.104140005891161e-02, -1.104140005891161e-02, -2.553387695432122e+00, -5.567732093291824e-01, -3.053174014330240e+00, -1.020133705124521e-04, -2.237520426464769e+00, -2.237520426464769e+00, -4.183119788510379e+02, -3.003415489461764e+02, -1.541110930029512e+03, -7.070433239264755e+00, -7.210015272129182e+02, -7.210015272129284e+02, -1.092283344889291e-02, -1.173718344325669e-02, -1.148930065027987e-02, -1.125072562985662e-02, -1.137393605674599e-02, -1.137393605674599e-02, -1.201600042176257e-02, -2.135940001630145e-02, -1.912419879172666e-02, -1.678457197586522e-02, -1.802545665886476e-02, -1.802545665886476e-02, -6.997933047648795e-03, -2.864267183232008e-01, -1.767531457752334e-01, -8.279215652429452e-02, -1.239498151275494e-01, -1.239498151275494e-01, -2.955338299045693e-02, -1.299158084282255e+01, -8.455164170539968e+00, -1.032132965098868e-01, -5.230168377106738e+00, -5.230168377106726e+00, -9.075360085701720e+01, -3.825323783897312e+03, -1.040679250197209e+03, -5.798101091305096e+00, -9.294895784294282e+02, -9.294895784294023e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
