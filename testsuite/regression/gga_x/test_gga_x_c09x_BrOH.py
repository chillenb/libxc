
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_c09x_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_c09x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.032202189252562e+01, -2.032205842578838e+01, -2.032227623974306e+01, -2.032167690451803e+01, -2.032204070059206e+01, -2.032204070059206e+01, -3.339306413905540e+00, -3.339295232676063e+00, -3.339125859309957e+00, -3.340126076596932e+00, -3.339314888024653e+00, -3.339314888024653e+00, -6.572605519049063e-01, -6.570262818070000e-01, -6.527526482259383e-01, -6.571001166534680e-01, -6.571727511127354e-01, -6.571727511127354e-01, -1.980174320501030e-01, -1.989204667398806e-01, -7.746226913767633e-01, -1.709555459671336e-01, -1.982608860684101e-01, -1.982608860684101e-01, -2.121848963219001e-02, -2.222537324566123e-02, -8.650861701715115e-02, -1.017920343854884e-02, -2.199376273059570e-02, -2.199376273059570e-02, -4.918707877909565e+00, -4.918897521935119e+00, -4.918731648774332e+00, -4.918879031113707e+00, -4.918798770058205e+00, -4.918798770058205e+00, -1.966733329066510e+00, -1.977258232624830e+00, -1.965870646877264e+00, -1.974036730701523e+00, -1.975092594632499e+00, -1.975092594632499e+00, -5.544762542742070e-01, -5.894569850042223e-01, -5.271840520182045e-01, -5.393225999753611e-01, -5.736552683466847e-01, -5.736552683466847e-01, -1.533986490167875e-01, -2.192532211468662e-01, -1.492787887579977e-01, -1.793028876585448e+00, -1.578792983478091e-01, -1.578792983478091e-01, -9.819745187296260e-03, -1.122236454697710e-02, -8.411219331481694e-03, -1.135968799795851e-01, -1.022531411946056e-02, -1.022531411946056e-02, -5.569428223815611e-01, -5.564507439238066e-01, -5.566265327114849e-01, -5.567609556998460e-01, -5.566932349640797e-01, -5.566932349640797e-01, -5.386717650646934e-01, -4.903091509306040e-01, -5.037303507163721e-01, -5.165985538473782e-01, -5.099009844308913e-01, -5.099009844308913e-01, -6.184761492131547e-01, -2.574732405770015e-01, -2.889334047078324e-01, -3.454861965820085e-01, -3.144023384819470e-01, -3.144023384819469e-01, -4.438345867534379e-01, -8.050160179355904e-02, -1.062252667856675e-01, -3.210268886607403e-01, -1.306579802234327e-01, -1.306579802234327e-01, -2.486787250676985e-02, -3.072489451607011e-03, -5.836610780175389e-03, -1.243260315598404e-01, -8.690163809064833e-03, -8.690163809064821e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_c09x_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_c09x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.577543085327140e+01, -2.577550978682807e+01, -2.577588433405293e+01, -2.577459131367847e+01, -2.577547229285446e+01, -2.577547229285446e+01, -4.157327925851495e+00, -4.157359542412610e+00, -4.158399168967259e+00, -4.157488402700467e+00, -4.157361897055170e+00, -4.157361897055170e+00, -7.758404126116601e-01, -7.745171833746805e-01, -7.384109952701273e-01, -7.451324818946119e-01, -7.753605330693136e-01, -7.753605330693136e-01, -1.927270795459037e-01, -1.969477620881259e-01, -9.457845539550797e-01, -1.222996584183178e-01, -1.940145861600023e-01, -1.940145861600023e-01, -2.829122383362908e-02, -2.963346355775080e-02, -1.094848250110045e-01, -1.357227125139845e-02, -2.932466234136045e-02, -2.932466234136045e-02, -6.322799658604970e+00, -6.324810872169855e+00, -6.323006980231537e+00, -6.324570804535589e+00, -6.323828979480557e+00, -6.323828979480557e+00, -2.229418333373015e+00, -2.248958819568034e+00, -2.217642034488896e+00, -2.232931280502324e+00, -2.257813463427741e+00, -2.257813463427741e+00, -6.973478480364416e-01, -7.741074589820730e-01, -6.603935175315714e-01, -7.023778862847865e-01, -7.268486957861445e-01, -7.268486957861445e-01, -9.825043369734061e-02, -1.784629521453446e-01, -9.492265213277620e-02, -2.354435945740633e+00, -1.027791426634402e-01, -1.027791426634402e-01, -1.309299358306168e-02, -1.496315272930279e-02, -1.121495910864226e-02, -1.042486559349765e-01, -1.363375215928074e-02, -1.363375215928074e-02, -7.393348966159259e-01, -7.321029462593459e-01, -7.346935298368202e-01, -7.366958254974126e-01, -7.356940319575720e-01, -7.356940319575720e-01, -7.161340217594782e-01, -5.918511679104494e-01, -6.286748508679951e-01, -6.625405655507584e-01, -6.454377332181889e-01, -6.454377332181890e-01, -8.110833824195661e-01, -2.381514787730325e-01, -2.988032801099827e-01, -4.086504765439490e-01, -3.511455132650303e-01, -3.511455132650302e-01, -5.318544079049637e-01, -1.038157740175667e-01, -1.168511208798974e-01, -3.926945888771277e-01, -8.767891863347463e-02, -8.767891863347461e-02, -3.315603445033823e-02, -4.096652602142681e-03, -7.782147706900518e-03, -8.314333080227215e-02, -1.158688507875311e-02, -1.158688507875309e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_c09x_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_c09x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-3.343777266453830e-09, -3.343746552456381e-09, -3.343583093858889e-09, -3.344086588103821e-09, -3.343761289923929e-09, -3.343761289923929e-09, -4.722677158467014e-06, -4.722659296437761e-06, -4.721390267614387e-06, -4.719573473481558e-06, -4.722587500385652e-06, -4.722587500385652e-06, -3.418478676100406e-03, -3.430498811399713e-03, -3.751049727609187e-03, -3.639276410890920e-03, -3.422867763495076e-03, -3.422867763495076e-03, -5.550332957293610e-01, -5.313750438663067e-01, -1.681406400608133e-03, -1.588221837716818e+00, -5.478895539047519e-01, -5.478895539047519e-01, -4.271716962183226e-03, -1.430231659906031e-02, -2.335024968935787e+00, -6.885518227174990e-30, -1.451842000513359e-02, -1.451842000513359e-02, -9.539002191845627e-07, -9.533309789264668e-07, -9.538395410990476e-07, -9.533969605629242e-07, -9.536117179837373e-07, -9.536117179837373e-07, -4.537297325373344e-05, -4.418527548291119e-05, -4.579073367292958e-05, -4.485091463874266e-05, -4.403972299979385e-05, -4.403972299979385e-05, -6.114455701656451e-03, -4.470246719635403e-03, -7.529287370876412e-03, -6.464314632923695e-03, -5.274780111459316e-03, -5.274780111459316e-03, -3.398219375219724e+00, -4.808510749052534e-01, -3.751310340973177e+00, -5.222396506234926e-05, -2.602676949411295e+00, -2.602676949411295e+00, -2.476322010088574e-31, -5.029083987934037e-23, -5.651920225803016e-24, -7.326482779226597e+00, -1.289207392184969e-22, -1.289207392184941e-22, -5.513373241364251e-03, -5.612580693982573e-03, -5.576778039734788e-03, -5.549352702095265e-03, -5.563062422541853e-03, -5.563062422541853e-03, -6.285489635999507e-03, -1.066279962731639e-02, -9.085366704388488e-03, -7.868216022393069e-03, -8.463191230526700e-03, -8.463191230526700e-03, -3.696710296362008e-03, -2.093428383987120e-01, -1.118828765004319e-01, -4.463665962789791e-02, -7.106487572273194e-02, -7.106487572273198e-02, -1.606154764800168e-02, -1.600331336568306e+00, -4.744794299330048e+00, -5.683326249591326e-02, -6.500114539895398e+00, -6.500114539895402e+00, -2.716752166850718e-02, -1.448553512302919e-275, -1.691983461665575e-78, -7.936245301934314e+00, -2.412944963319412e-26, -2.412944963318706e-26])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
