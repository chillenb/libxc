
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_bkl1_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_bkl1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.250818125843027e+01, -2.250817166157676e+01, -2.250826446538942e+01, -2.250840446124583e+01, -2.250831184565342e+01, -2.250831184565342e+01, -3.811143061025992e+00, -3.811047083990129e+00, -3.808921618372463e+00, -3.813340756054305e+00, -3.811120142478079e+00, -3.811120142478079e+00, -7.964474121955353e-01, -7.972778063279815e-01, -8.200726374210665e-01, -8.247184623712569e-01, -8.217040632326668e-01, -8.217040632326668e-01, -2.665385536329274e-01, -2.680034694571452e-01, -9.111733458755160e-01, -2.149020409974444e-01, -2.580054529289685e-01, -2.580054529289684e-01, -5.608886601262724e-03, -5.911878459418605e-03, -5.211067754566727e-02, -3.231828235362773e-03, -4.511373500303336e-03, -4.511373500303336e-03, -5.320201694162190e+00, -5.317530436083778e+00, -5.320099658116660e+00, -5.317741120967645e+00, -5.318836085525623e+00, -5.318836085525623e+00, -2.490246676662572e+00, -2.497113919860649e+00, -2.502393874201191e+00, -2.508579678885348e+00, -2.488002435172870e+00, -2.488002435172870e+00, -6.307762283813301e-01, -6.189297103810859e-01, -5.938629610799857e-01, -5.569113829947643e-01, -6.331743107210838e-01, -6.331743107210839e-01, -1.488570868227365e-01, -2.799494963230467e-01, -1.375687061265379e-01, -1.859443980099246e+00, -1.759291762231116e-01, -1.759291762231116e-01, -2.495062181128035e-03, -3.159308523315817e-03, -2.419444403228468e-03, -9.064414837979362e-02, -3.039244844894564e-03, -3.039244844894564e-03, -5.559634577725137e-01, -5.680358312162437e-01, -5.638428850913648e-01, -5.603242634572498e-01, -5.620876445044310e-01, -5.620876445044310e-01, -5.363925602457247e-01, -5.816272481886857e-01, -5.698209724681583e-01, -5.558838405836114e-01, -5.626927000929536e-01, -5.626927000929536e-01, -6.515993404488674e-01, -3.407152707600605e-01, -3.823584514274000e-01, -4.222470712050878e-01, -4.031166377486291e-01, -4.031166377486290e-01, -5.379956089197369e-01, -4.905727055867350e-02, -7.081633896899353e-02, -3.842001011778291e-01, -1.176310887974774e-01, -1.176310887974774e-01, -8.011471812533521e-03, -8.444103660066541e-04, -1.775800982983423e-03, -1.099627031912181e-01, -2.791011926047167e-03, -2.791011926047165e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_bkl1_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_bkl1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.350897953546776e+01, -2.350895478351061e+01, -2.350912469314229e+01, -2.350906019519648e+01, -2.350951152114401e+01, -2.350963621026678e+01, -2.350787424573803e+01, -2.350754874220788e+01, -2.350907002710855e+01, -2.350832608540908e+01, -2.350907002710855e+01, -2.350832608540908e+01, -3.720396594854251e+00, -3.720764099280654e+00, -3.720460574747029e+00, -3.720847589290795e+00, -3.722212544131795e+00, -3.722694906610537e+00, -3.719780987650992e+00, -3.720291857842755e+00, -3.719609777523846e+00, -3.721906842750869e+00, -3.719609777523846e+00, -3.721906842750869e+00, -6.913466317680866e-01, -6.952172993373253e-01, -6.899968565962152e-01, -6.946067536419372e-01, -6.776458742769110e-01, -6.765608031878222e-01, -6.817533710717156e-01, -6.821285531051698e-01, -7.031289711981218e-01, -7.005638530046695e-01, -7.031289711981218e-01, -7.005638530046695e-01, -2.616747630973913e-01, -2.573703638549536e-01, -2.565666524279338e-01, -2.520996174457088e-01, -7.947920547027512e-01, -8.307126220504871e-01, -2.705642063300072e-01, -2.730371720248481e-01, -2.692861942306057e-01, -2.126347268882874e-01, -2.692861942306055e-01, -2.126347268882874e-01, -7.269048716371588e-03, -7.773048989149507e-03, -7.667024720772864e-03, -8.323554204291400e-03, -8.131010739572923e-02, -8.548147960967521e-02, -4.344387369822295e-03, -4.271997090607983e-03, -6.453600852176175e-03, -3.668879709128618e-03, -6.453600852176175e-03, -3.668879709128618e-03, -5.880235517341505e+00, -5.878681749682923e+00, -5.884915894451614e+00, -5.883203385509188e+00, -5.880485378008548e+00, -5.878829888469401e+00, -5.884501424000184e+00, -5.882937600762291e+00, -5.882639797872809e+00, -5.880953336792073e+00, -5.882639797872809e+00, -5.880953336792073e+00, -2.041143318251065e+00, -2.041052076221171e+00, -2.051983112661782e+00, -2.051518770463552e+00, -2.041769469626274e+00, -2.041045555918799e+00, -2.050020293290480e+00, -2.049837342329602e+00, -2.049388368576103e+00, -2.046644453508163e+00, -2.049388368576103e+00, -2.046644453508163e+00, -6.368193090531397e-01, -6.352929972474862e-01, -7.537204307228185e-01, -7.549806217341202e-01, -5.687567507480024e-01, -5.943379529427897e-01, -6.476802555600670e-01, -6.681920807782360e-01, -6.703080024241154e-01, -6.343741104693358e-01, -6.703080024241155e-01, -6.343741104693358e-01, -2.043101696549392e-01, -2.061263196745549e-01, -3.263576852120090e-01, -3.267611082236237e-01, -1.854055734791649e-01, -1.949781984453533e-01, -2.277701023059362e+00, -2.276822101163382e+00, -2.309639787272644e-01, -2.384388766886557e-01, -2.309639787272644e-01, -2.384388766886557e-01, -3.259113952053183e-03, -3.387009012286247e-03, -4.180066034042400e-03, -4.243331488769798e-03, -3.125747396156381e-03, -3.310340710816014e-03, -1.296275321015891e-01, -1.304508763278770e-01, -3.192469374985889e-03, -4.384844424412874e-03, -3.192469374985889e-03, -4.384844424412876e-03, -7.164557014740283e-01, -7.195581588268540e-01, -6.935154214877235e-01, -6.967694100879344e-01, -7.013186566913799e-01, -7.045749212467489e-01, -7.080397618186435e-01, -7.111526455686229e-01, -7.046576900873712e-01, -7.078404716033628e-01, -7.046576900873712e-01, -7.078404716033628e-01, -7.031751234697131e-01, -7.055469639440468e-01, -5.081769983043549e-01, -5.106298414662255e-01, -5.471206140624328e-01, -5.504053554469055e-01, -6.018108166443814e-01, -6.043527385976635e-01, -5.726965735166218e-01, -5.752318930638501e-01, -5.726965735166218e-01, -5.752318930638501e-01, -7.862886273550609e-01, -7.890325174553704e-01, -3.423853549394371e-01, -3.419233787130455e-01, -3.308029759135893e-01, -3.290633503626473e-01, -3.576362280716476e-01, -3.596042007606006e-01, -3.270618774043001e-01, -3.263679408618825e-01, -3.270618774043001e-01, -3.263679408618824e-01, -4.667601919718274e-01, -4.703426089056031e-01, -8.003488923000109e-02, -8.054105946495356e-02, -1.050967793541949e-01, -1.082725133491447e-01, -3.468929179091704e-01, -3.531060151772244e-01, -1.590425024081165e-01, -1.672227258409835e-01, -1.590425024081165e-01, -1.672227258409835e-01, -1.146173991611325e-02, -1.222163164044951e-02, -1.124590922288522e-03, -1.127161251822379e-03, -2.288282255961574e-03, -2.433772897932116e-03, -1.524913520748768e-01, -1.549038118497118e-01, -3.023949029024477e-03, -4.018598586138916e-03, -3.023949029024474e-03, -4.018598586138912e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_bkl1_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_bkl1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-3.292367316637400e-08, 0.000000000000000e+00, -3.292385996454526e-08, -3.292346347036264e-08, 0.000000000000000e+00, -3.292370750009446e-08, -3.292242010232931e-08, 0.000000000000000e+00, -3.292231672307244e-08, -3.292479770425113e-08, 0.000000000000000e+00, -3.292534417522971e-08, -3.292356691074632e-08, 0.000000000000000e+00, -3.292385998036971e-08, -3.292356691074632e-08, 0.000000000000000e+00, -3.292385998036971e-08, -4.355270839558815e-05, 0.000000000000000e+00, -4.357001578595695e-05, -4.355403340215110e-05, 0.000000000000000e+00, -4.357262802879537e-05, -4.359914839262954e-05, 0.000000000000000e+00, -4.360995520306688e-05, -4.349282341766592e-05, 0.000000000000000e+00, -4.350680231071187e-05, -4.357596156186585e-05, 0.000000000000000e+00, -4.354307490930850e-05, -4.357596156186585e-05, 0.000000000000000e+00, -4.354307490930850e-05, -2.618843345217212e-02, 0.000000000000000e+00, -2.640571057868770e-02, -2.613170880656451e-02, 0.000000000000000e+00, -2.640199464189396e-02, -2.523998492647417e-02, 0.000000000000000e+00, -2.471469200264555e-02, -2.428713420297448e-02, 0.000000000000000e+00, -2.446442269493718e-02, -2.651647035570914e-02, 0.000000000000000e+00, -2.079764240342269e-02, -2.651647035570914e-02, 0.000000000000000e+00, -2.079764240342269e-02, -1.381665397353064e+00, 0.000000000000000e+00, -1.451473605883352e+00, -1.484193681529726e+00, 0.000000000000000e+00, -1.540318003579429e+00, -1.523331977401219e-02, 0.000000000000000e+00, -1.457063899750577e-02, -3.906295150844184e-01, 0.000000000000000e+00, -4.064567813683375e-01, -1.229128394671144e+00, 0.000000000000000e+00, 3.539783781956196e-01, -1.229128394671142e+00, 0.000000000000000e+00, 3.539783781956191e-01, 1.285175610756762e+01, 0.000000000000000e+00, 2.354343334252653e+01, 2.545438830608338e+01, 0.000000000000000e+00, 4.591864982836050e+01, 1.862025103383233e+01, 0.000000000000000e+00, 1.545108471076450e+01, 4.495696634589816e-05, 0.000000000000000e+00, 1.628717444018289e-05, 2.778933376590446e+00, 0.000000000000000e+00, 2.928067539252837e-03, 2.778933376590480e+00, 0.000000000000000e+00, 2.928067539252939e-03, -9.818218770166111e-06, 0.000000000000000e+00, -9.827181170259017e-06, -9.821961394338252e-06, 0.000000000000000e+00, -9.830805511513979e-06, -9.818339154474919e-06, 0.000000000000000e+00, -9.827242942194027e-06, -9.821552009900634e-06, 0.000000000000000e+00, -9.830536631217667e-06, -9.820207639195630e-06, 0.000000000000000e+00, -9.829016348699381e-06, -9.820207639195630e-06, 0.000000000000000e+00, -9.829016348699381e-06, -2.964215189470478e-04, 0.000000000000000e+00, -2.964692735415676e-04, -2.922048939534407e-04, 0.000000000000000e+00, -2.924198277746260e-04, -2.916147072425873e-04, 0.000000000000000e+00, -2.931949486091039e-04, -2.882588576759579e-04, 0.000000000000000e+00, -2.896170497782994e-04, -2.970531936345009e-04, 0.000000000000000e+00, -2.948239330923081e-04, -2.970531936345009e-04, 0.000000000000000e+00, -2.948239330923081e-04, -5.545951110138386e-02, 0.000000000000000e+00, -5.608703416611490e-02, -4.725238774686372e-02, 0.000000000000000e+00, -4.725182408872942e-02, -7.837004490795731e-02, 0.000000000000000e+00, -6.945022787072549e-02, -8.047581736428130e-02, 0.000000000000000e+00, -7.044522798722481e-02, -4.880165951030886e-02, 0.000000000000000e+00, -5.932129305029889e-02, -4.880165951030888e-02, 0.000000000000000e+00, -5.932129305029889e-02, 4.645169164582495e-01, 0.000000000000000e+00, 4.460136700216717e-01, -4.216432809556684e-01, 0.000000000000000e+00, -4.263152122673243e-01, 6.943269805312517e-01, 0.000000000000000e+00, 5.638741703209003e-01, -5.758162232824894e-04, 0.000000000000000e+00, -5.769059053239781e-04, 1.971872309133260e-01, 0.000000000000000e+00, -1.224998680783574e-01, 1.971872309133260e-01, 0.000000000000000e+00, -1.224998680783574e-01, 2.036772277299562e-09, 0.000000000000000e+00, 2.048278970320707e-09, 7.758954044830887e-05, 0.000000000000000e+00, 5.878412767457582e-05, 6.049054977237116e-02, 0.000000000000000e+00, 6.101533362267472e-01, 2.958028723060785e+00, 0.000000000000000e+00, 2.884553144738332e+00, 1.515269550131822e-04, 0.000000000000000e+00, 1.380079524726544e+00, 1.515269550131762e-04, 0.000000000000000e+00, 1.380079524726530e+00, -6.770399577421034e-02, 0.000000000000000e+00, -6.670855258318918e-02, -6.672802919794353e-02, 0.000000000000000e+00, -6.577174602227961e-02, -6.707269622519815e-02, 0.000000000000000e+00, -6.610486222608598e-02, -6.736113670838934e-02, 0.000000000000000e+00, -6.637744768029910e-02, -6.721760614781448e-02, 0.000000000000000e+00, -6.624156767871460e-02, -6.721760614781448e-02, 0.000000000000000e+00, -6.624156767871460e-02, -7.633999117415322e-02, 0.000000000000000e+00, -7.534546412101820e-02, -9.229650970413036e-02, 0.000000000000000e+00, -9.124372197681113e-02, -8.920504622174687e-02, 0.000000000000000e+00, -8.809305093313720e-02, -8.490532966264648e-02, 0.000000000000000e+00, -8.383720081600227e-02, -8.739235180261080e-02, 0.000000000000000e+00, -8.625537585692097e-02, -8.739235180261080e-02, 0.000000000000000e+00, -8.625537585692097e-02, -3.895486802339988e-02, 0.000000000000000e+00, -3.881028250295458e-02, -4.715381713102072e-01, 0.000000000000000e+00, -4.741861348300461e-01, -4.726441163565965e-01, 0.000000000000000e+00, -4.752541048379949e-01, -3.459709380871285e-01, 0.000000000000000e+00, -3.403682339369333e-01, -4.349789111091565e-01, 0.000000000000000e+00, -4.386506940212638e-01, -4.349789111091567e-01, 0.000000000000000e+00, -4.386506940212642e-01, -1.272555547102366e-01, 0.000000000000000e+00, -1.252174438135004e-01, 1.957541340576984e+01, 0.000000000000000e+00, 1.913572623282281e+01, 6.898291719334740e+00, 0.000000000000000e+00, 6.127578200055559e+00, -4.697453418573775e-01, 0.000000000000000e+00, -4.492590588132750e-01, 1.288657074774366e+00, 0.000000000000000e+00, 1.044437253906311e+00, 1.288657074774366e+00, 0.000000000000000e+00, 1.044437253906311e+00, 9.972987362016403e+01, 0.000000000000000e+00, 1.205222553047661e+02, 1.248732835472309e-62, 0.000000000000000e+00, 4.316565290339841e-45, 1.153161914204816e-15, 0.000000000000000e+00, 1.045008725103114e-12, 1.526338717022738e+00, 0.000000000000000e+00, 1.432425818225245e+00, 2.787277015482823e-02, 0.000000000000000e+00, 2.618723516211586e-01, 2.787277015482792e-02, 0.000000000000000e+00, 2.618723516211577e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
