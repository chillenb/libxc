
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_g96_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_g96", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.111681588092949e+01, -2.111684204307798e+01, -2.111703279656346e+01, -2.111660290287690e+01, -2.111682905907421e+01, -2.111682905907421e+01, -3.496002699990059e+00, -3.495976883092059e+00, -3.495411612312288e+00, -3.497127101704895e+00, -3.496004314116030e+00, -3.496004314116030e+00, -6.993050834933187e-01, -6.992937760662710e-01, -7.012166306717482e-01, -7.055388454068926e-01, -6.992973674300830e-01, -6.992973674300830e-01, -2.176779769908477e-01, -2.182120037757208e-01, -8.163658491766654e-01, -1.943045068406329e-01, -2.178025549497704e-01, -2.178025549497704e-01, -2.145977749225983e-01, -2.100588248855575e-01, -1.717487506510959e-01, -3.427743879605701e-01, -2.081543597962759e-01, -2.081543597962759e-01, -5.078392284321716e+00, -5.077847237723799e+00, -5.078342848376455e+00, -5.077918949408813e+00, -5.078103966366636e+00, -5.078103966366636e+00, -2.111867847290888e+00, -2.121687472394746e+00, -2.113013818149838e+00, -2.120629209791062e+00, -2.117125432246353e+00, -2.117125432246353e+00, -5.782248996490413e-01, -6.004748257780804e-01, -5.506320418845109e-01, -5.526567450615127e-01, -5.963599453539989e-01, -5.963599453539989e-01, -1.850700634827541e-01, -2.456065648533697e-01, -1.789152034797878e-01, -1.826705953671414e+00, -1.827912635522965e-01, -1.827912635522965e-01, -3.412164458494683e-01, -3.197691853741230e-01, -2.488596139187675e-01, -1.630972259174577e-01, -2.894402884086230e-01, -2.894402884086231e-01, -5.615029680649741e-01, -5.660176783586665e-01, -5.646121988310163e-01, -5.633876810150247e-01, -5.640170764602705e-01, -5.640170764602705e-01, -5.420044722460695e-01, -5.185216479160136e-01, -5.268840215038033e-01, -5.339994566862841e-01, -5.303075964384217e-01, -5.303075964384217e-01, -6.307119418405281e-01, -2.846826889250736e-01, -3.151185320264313e-01, -3.673958035872905e-01, -3.385940646499905e-01, -3.385940646499905e-01, -4.703477181748202e-01, -1.843528971882066e-01, -1.727865109033683e-01, -3.381257909888185e-01, -1.619630467288541e-01, -1.619630467288541e-01, -2.218536132493659e-01, -4.926938095920657e-01, -3.795631850158176e-01, -1.538531670411642e-01, -2.720180434998967e-01, -2.720180434998972e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_g96_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_g96", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.556561427587330e+01, -2.556569306217408e+01, -2.556606605433482e+01, -2.556477546931089e+01, -2.556565564530016e+01, -2.556565564530016e+01, -4.123501879041963e+00, -4.123532635661160e+00, -4.124547482645709e+00, -4.123672542233310e+00, -4.123535263779131e+00, -4.123535263779131e+00, -7.709804723058972e-01, -7.697180427919686e-01, -7.355216291251893e-01, -7.421113371149568e-01, -7.705224252540546e-01, -7.705224252540546e-01, -1.933356553815538e-01, -1.974861805842611e-01, -9.385171836950201e-01, -1.158428249516419e-01, -1.946043913320647e-01, -1.946043913320647e-01, 1.241622951246527e-01, 1.202393207708795e-01, 3.402115221769989e-02, 2.194479259557041e-01, 1.191760122333294e-01, 1.191760122333294e-01, -6.273904414107282e+00, -6.275985732703644e+00, -6.274118629626446e+00, -6.275736955305283e+00, -6.274969804522025e+00, -6.274969804522025e+00, -2.220425814072540e+00, -2.239443831162149e+00, -2.209327437614053e+00, -2.224202768464402e+00, -2.247605533679033e+00, -2.247605533679033e+00, -6.916267338821674e-01, -7.696940688894596e-01, -6.549819991806620e-01, -6.976088615016904e-01, -7.209214203967984e-01, -7.209214203967984e-01, -5.690223560579841e-02, -1.771414465821546e-01, -5.869475559380302e-02, -2.340968621316462e+00, -8.660656047942739e-02, -8.660656047942739e-02, 2.187295279495674e-01, 2.031818047584186e-01, 1.584131181152748e-01, -3.456153427520501e-03, 1.838507810301342e-01, 1.838507810301342e-01, -7.371065481904757e-01, -7.281631657996165e-01, -7.312272187269194e-01, -7.336845791056452e-01, -7.324436528084459e-01, -7.324436528084459e-01, -7.144350540058186e-01, -5.875458130594823e-01, -6.235414528141158e-01, -6.573490672744915e-01, -6.401665868900457e-01, -6.401665868900457e-01, -8.062803208103875e-01, -2.389506896762850e-01, -2.991189093521268e-01, -4.060492798420176e-01, -3.500353013944560e-01, -3.500353013944559e-01, -5.281470397591456e-01, 4.836507336389363e-02, 1.428545740180109e-02, -3.896542901886360e-01, -3.835227555274993e-02, -3.835227555274994e-02, 1.257483730269244e-01, 3.257253553613563e-01, 2.478424700875975e-01, -3.703090670362029e-02, 1.736035682940084e-01, 1.736035682940087e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_g96_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_g96", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-6.558278761753601e-09, -6.558257446924466e-09, -6.558054213498535e-09, -6.558405466505194e-09, -6.558268424972473e-09, -6.558268424972473e-09, -8.607889172866071e-06, -8.608170683226416e-06, -8.614505111939335e-06, -8.596318106021446e-06, -8.607887280081150e-06, -8.607887280081150e-06, -5.490487618230708e-03, -5.497080000326133e-03, -5.670505723264912e-03, -5.517409644442786e-03, -5.492957337536725e-03, -5.492957337536725e-03, -7.543693551361575e-01, -7.273628248908852e-01, -2.896886908783370e-03, -2.153336556564520e+00, -7.462653984515981e-01, -7.462653984515981e-01, -1.831864730046159e+04, -1.558220758018186e+04, -1.048050019465929e+02, -2.291793816256999e+05, -1.624124398221170e+04, -1.624124398221170e+04, -2.014462235293704e-06, -2.016952686205771e-06, -2.014702015537525e-06, -2.016638458997738e-06, -2.015755536802766e-06, -2.015755536802766e-06, -6.875915936562538e-05, -6.723539893014103e-05, -6.899772146221524e-05, -6.779625360300697e-05, -6.743870143871396e-05, -6.743870143871396e-05, -1.156318152202301e-02, -1.168592426146770e-02, -1.402387393480801e-02, -1.518238238879504e-02, -1.029642383741703e-02, -1.029642383741703e-02, -6.070492602220526e+00, -6.348053415027580e-01, -6.480349719410834e+00, -1.362709196856995e-04, -3.795905153284168e+00, -3.795905153284168e+00, -2.618332655832060e+05, -1.641448383062195e+05, -5.135659991818285e+05, -3.320884057117654e+01, -2.386876603672679e+05, -2.386876603672678e+05, -1.958421621832531e-02, -1.514389107165166e-02, -1.610627604781221e-02, -1.718084131793511e-02, -1.659449084459823e-02, -1.659449084459822e-02, -2.471467196285088e-02, -1.788487970747633e-02, -1.669885584638313e-02, -1.637625601630228e-02, -1.644698932028568e-02, -1.644698932028568e-02, -9.457341829009895e-03, -2.799825463641222e-01, -1.566636868383530e-01, -7.194687954725189e-02, -1.059050638772779e-01, -1.059050638772780e-01, -2.653021467112817e-02, -1.337524306957482e+02, -4.684328186800185e+01, -9.838540829757622e-02, -1.334089126076638e+01, -1.334089126076637e+01, -1.014495206249988e+04, -1.635360052164195e+07, -1.698942986816413e+06, -1.614693214063868e+01, -4.422226143768053e+05, -4.422226143768076e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
