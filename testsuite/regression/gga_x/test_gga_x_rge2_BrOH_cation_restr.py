
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_rge2_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_rge2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.050092386268219e+01, -2.050096096225175e+01, -2.050117574898266e+01, -2.050062276003545e+01, -2.050090542287918e+01, -2.050090542287918e+01, -3.379810066109770e+00, -3.379786406643930e+00, -3.379322682939821e+00, -3.380771271002234e+00, -3.379863172473319e+00, -3.379863172473319e+00, -6.716571238618196e-01, -6.715147244642453e-01, -6.702290572087003e-01, -6.749231137124010e-01, -6.732330920359382e-01, -6.732330920359382e-01, -2.085863730787781e-01, -2.090655778422472e-01, -7.770330975369506e-01, -1.839494727117166e-01, -1.928438001768032e-01, -1.928438001768032e-01, -1.009361797191096e-02, -1.062394252218471e-02, -5.850825567955437e-02, -5.829393891563088e-03, -7.325075324349047e-03, -7.325075324349047e-03, -4.952269422912386e+00, -4.952216109820530e+00, -4.952274926185712e+00, -4.952227730720083e+00, -4.952237898749934e+00, -4.952237898749934e+00, -2.023217143652836e+00, -2.033252519899513e+00, -2.023228067005332e+00, -2.032020065226579e+00, -2.028829686054465e+00, -2.028829686054465e+00, -5.666649222833103e-01, -5.980279194711764e-01, -5.272223904508363e-01, -5.316348629807386e-01, -5.734134126410694e-01, -5.734134126410694e-01, -1.446283407286742e-01, -2.295605723920505e-01, -1.351711000254975e-01, -1.799960515823197e+00, -1.595191808712229e-01, -1.595191808712229e-01, -4.497765974125182e-03, -5.698748146755443e-03, -4.357535306704816e-03, -9.377840623785565e-02, -5.249479090668188e-03, -5.249479090668188e-03, -5.491953445056751e-01, -5.497030273413783e-01, -5.495221564703247e-01, -5.493702122906677e-01, -5.494453493568336e-01, -5.494453493568336e-01, -5.332554324434868e-01, -4.920022755824088e-01, -5.025415855196036e-01, -5.137907167494120e-01, -5.077965349918432e-01, -5.077965349918432e-01, -6.276226084848558e-01, -2.679979298009463e-01, -2.974785094473273e-01, -3.515073520184235e-01, -3.208049591318708e-01, -3.208049591318707e-01, -4.538281038834763e-01, -5.602345949543241e-02, -7.612285757751315e-02, -3.309393639178771e-01, -1.163845919712993e-01, -1.163845919712993e-01, -1.424511073085347e-02, -1.523312319541579e-03, -3.197499761134390e-03, -1.101899280974847e-01, -4.857410425678456e-03, -4.857410425678452e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_rge2_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_rge2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.553095751551568e+01, -2.553105494694053e+01, -2.553146800186588e+01, -2.553001881935196e+01, -2.553078102476926e+01, -2.553078102476926e+01, -4.102135771518309e+00, -4.102184361634219e+00, -4.103407732740449e+00, -4.102059222186130e+00, -4.102292916016733e+00, -4.102292916016733e+00, -7.665999815981781e-01, -7.650359955848511e-01, -7.256086155761931e-01, -7.325948470998899e-01, -7.318779371769614e-01, -7.318779371769614e-01, -1.741697970008924e-01, -1.769414450215439e-01, -9.013746941961411e-01, -1.555102885736039e-01, -1.553098699162129e-01, -1.553098699162129e-01, -1.345801364232578e-02, -1.416506067164012e-02, -7.746871793341478e-02, -7.772516795709681e-03, -9.766733700860215e-03, -9.766733700860215e-03, -6.282515623873042e+00, -6.284938490530749e+00, -6.282625530500631e+00, -6.284764507918889e+00, -6.283744902433172e+00, -6.283744902433172e+00, -2.164075784911559e+00, -2.184804165750581e+00, -2.141171300728526e+00, -2.159469593578118e+00, -2.186645768828764e+00, -2.186645768828764e+00, -6.967243502289484e-01, -7.800141912300512e-01, -6.409551957886095e-01, -6.877866064351540e-01, -7.110599345913806e-01, -7.110599345913806e-01, -1.602797203135195e-01, -1.855050333485207e-01, -1.545343926056790e-01, -2.350654277746449e+00, -1.503658761789519e-01, -1.503658761789519e-01, -5.997018274548260e-03, -7.598322042878849e-03, -5.810032599488673e-03, -1.187900391714163e-01, -6.999288361258411e-03, -6.999288361258411e-03, -7.267853037245900e-01, -7.177437767075319e-01, -7.209273063078457e-01, -7.235543334836807e-01, -7.222405222545820e-01, -7.222405222545820e-01, -7.084885572473817e-01, -5.640285671849993e-01, -6.064041921855993e-01, -6.480284331047518e-01, -6.270417149217615e-01, -6.270417149217615e-01, -8.168525342626861e-01, -2.207429754175813e-01, -2.699945426490233e-01, -3.932870649165895e-01, -3.259003572580956e-01, -3.259003572580955e-01, -5.182163990877224e-01, -7.429864121803344e-02, -9.968406526011599e-02, -3.887088167464088e-01, -1.353193341463649e-01, -1.353193341463649e-01, -1.899283329368334e-02, -2.031083033639218e-03, -4.263331849803827e-03, -1.315502383440529e-01, -6.476532588799954e-03, -6.476532588799949e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_rge2_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_rge2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.566448315686895e-09, -4.566398736221340e-09, -4.566160421412987e-09, -4.566898454470829e-09, -4.566514268673843e-09, -4.566514268673843e-09, -6.470100241793575e-06, -6.470068975024246e-06, -6.468710784070135e-06, -6.466157295245293e-06, -6.469438923333386e-06, -6.469438923333386e-06, -4.599098132989302e-03, -4.616631241346935e-03, -5.040049794877882e-03, -4.881795731399920e-03, -4.919450717702494e-03, -4.919450717702494e-03, -7.708377168936854e-01, -7.503305532607781e-01, -2.500379645113616e-03, -1.217695380386010e+00, -1.105702887968060e+00, -1.105702887968059e+00, -2.122717016556302e-02, -2.553754855416285e-02, -3.251657089440264e-01, -6.131760421817354e-03, -1.386599990421400e-02, -1.386599990421405e-02, -1.296500787581086e-06, -1.295605281599370e-06, -1.296455700490604e-06, -1.295665193839651e-06, -1.296048900982382e-06, -1.296048900982382e-06, -6.182135551837468e-05, -6.019035729736896e-05, -6.281767837070019e-05, -6.135245110151616e-05, -6.043876773402468e-05, -6.043876773402468e-05, -8.003963903000537e-03, -5.785280769218314e-03, -1.089571803787266e-02, -9.409109894205271e-03, -7.518601509503546e-03, -7.518601509503546e-03, -1.096796397355317e+00, -5.473588493937233e-01, -1.120241440848686e+00, -7.032435895791439e-05, -1.617620263683564e+00, -1.617620263683564e+00, -5.520853523741469e-03, -7.482043457079248e-03, -6.885240323378077e-02, -9.935602651405794e-01, -3.172116495838903e-02, -3.172116495838891e-02, -7.906864368197264e-03, -8.087392948122812e-03, -8.023659365673610e-03, -7.971336887734357e-03, -7.997508370300761e-03, -7.997508370300761e-03, -8.826024468668169e-03, -1.585964588021965e-02, -1.337147230652293e-02, -1.131080939651950e-02, -1.231754254867592e-02, -1.231754254867592e-02, -4.788722833483082e-03, -2.880211051025588e-01, -1.668645103958051e-01, -6.329293474464653e-02, -1.055337736437372e-01, -1.055337736437373e-01, -2.204836450403566e-02, -2.596555886813756e-01, -4.768702233739075e-01, -7.443726874986405e-02, -1.736162593827880e+00, -1.736162593827882e+00, -3.059670883125995e-02, -5.811344466543672e-03, -8.621119587341719e-03, -1.597561681260625e+00, -3.855449030410862e-02, -3.855449030410870e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
