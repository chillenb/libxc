
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_rpw86_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_rpw86", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.125832396077253e+01, -2.125833610754334e+01, -2.125848402956429e+01, -2.125830137479857e+01, -2.125838372570758e+01, -2.125838372570758e+01, -3.555634789566699e+00, -3.555576227206424e+00, -3.554309025050680e+00, -3.557186827135824e+00, -3.555650285920493e+00, -3.555650285920493e+00, -7.230982299913021e-01, -7.232915621155431e-01, -7.289728303028817e-01, -7.338229212618463e-01, -7.318310219964584e-01, -7.318310219964584e-01, -2.230273337851978e-01, -2.243658085091761e-01, -8.326089517875518e-01, -1.877404778152564e-01, -2.009270754173462e-01, -2.009270754173462e-01, -2.405969283479455e-02, -2.468231362096490e-02, -7.578938124445246e-02, -1.744623145078036e-02, -1.954661777547429e-02, -1.954661777547429e-02, -5.074075500399234e+00, -5.072675143307563e+00, -5.074025522542501e+00, -5.072789023766697e+00, -5.073357345425727e+00, -5.073357345425727e+00, -2.203707503176149e+00, -2.213508287787302e+00, -2.205993663142784e+00, -2.214739401644885e+00, -2.207901146518028e+00, -2.207901146518028e+00, -5.920549684009082e-01, -6.020464386329435e-01, -5.541867970904902e-01, -5.377382481396992e-01, -5.961454192670170e-01, -5.961454192670170e-01, -1.478780699253890e-01, -2.381681679642340e-01, -1.393676413808058e-01, -1.810868399587887e+00, -1.610030104612133e-01, -1.610030104612133e-01, -1.452254544533173e-02, -1.693294653703965e-02, -1.199967814766540e-02, -1.036041202135977e-01, -1.448475573925928e-02, -1.448475573925929e-02, -5.496937087494059e-01, -5.530896487749961e-01, -5.516526521475550e-01, -5.506452907526500e-01, -5.511251793441087e-01, -5.511251793441087e-01, -5.333672574917837e-01, -5.290507455978288e-01, -5.301923477019547e-01, -5.284630776693351e-01, -5.292434714773956e-01, -5.292434714773956e-01, -6.325833413784722e-01, -2.852277285380926e-01, -3.231991944255106e-01, -3.802081205817356e-01, -3.505466987513864e-01, -3.505466987513864e-01, -4.885267515449938e-01, -7.422714431313399e-02, -9.113904957711635e-02, -3.531092303018996e-01, -1.207111923114129e-01, -1.207111923114129e-01, -3.028374725077023e-02, -6.539828509844978e-03, -1.097511635774133e-02, -1.156715995437936e-01, -1.350586712877154e-02, -1.350586712877154e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_rpw86_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_rpw86", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.410919798372200e+01, -2.410930250992769e+01, -2.410972815357374e+01, -2.410817395170664e+01, -2.410899381400105e+01, -2.410899381400105e+01, -3.875799557998457e+00, -3.875826658259556e+00, -3.876553716927738e+00, -3.876032536015013e+00, -3.875925483012198e+00, -3.875925483012198e+00, -7.498256832550489e-01, -7.493302037579814e-01, -7.408305898718053e-01, -7.463144836184848e-01, -7.446206470626515e-01, -7.446206470626515e-01, -2.191718547152289e-01, -2.207386519068733e-01, -8.714234644501609e-01, -1.825253344031924e-01, -1.962707586782833e-01, -1.962707586782833e-01, -1.941236355617782e-02, -1.993715678683602e-02, -6.761482578952537e-02, -1.399592247970654e-02, -1.571421024538338e-02, -1.571421024538338e-02, -5.988916618784902e+00, -5.993078959250536e+00, -5.989097387764033e+00, -5.992771709261520e+00, -5.991029085888175e+00, -5.991029085888175e+00, -2.232368340848353e+00, -2.244932143430882e+00, -2.229016488931825e+00, -2.240015916254641e+00, -2.241043725198967e+00, -2.241043725198967e+00, -6.570120291381245e-01, -7.665007008304607e-01, -6.053458045955125e-01, -6.690237708501763e-01, -6.708714405391319e-01, -6.708714405391319e-01, -1.416104522744510e-01, -2.324428547155265e-01, -1.330721906472344e-01, -2.313496391855282e+00, -1.556920393789079e-01, -1.556920393789079e-01, -1.164027040793967e-02, -1.358552144870571e-02, -9.640172752095350e-03, -9.697056986879714e-02, -1.163612949838130e-02, -1.163612949838131e-02, -7.248770769916092e-01, -7.062300740716291e-01, -7.133392339390556e-01, -7.188521310648642e-01, -7.161498101840466e-01, -7.161498101840466e-01, -7.080485669199535e-01, -5.498827252925067e-01, -5.739470810460724e-01, -6.152756278038592e-01, -5.913361984378155e-01, -5.913361984378155e-01, -8.005465008439374e-01, -2.799419439194053e-01, -3.198004584290235e-01, -3.907072021453545e-01, -3.514394650759323e-01, -3.514394650759324e-01, -5.067031031515632e-01, -6.576415287824433e-02, -8.331023986468213e-02, -3.727775789041076e-01, -1.150411439785899e-01, -1.150411439785898e-01, -2.458694607166388e-02, -5.234282608443062e-03, -8.792488988359336e-03, -1.098411001486232e-01, -1.084808206934784e-02, -1.084808206934783e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_rpw86_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_rpw86", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.072294030528265e-08, -1.072288541185143e-08, -1.072250060230982e-08, -1.072331994267054e-08, -1.072291075532579e-08, -1.072291075532579e-08, -1.384429659202172e-05, -1.384529075053763e-05, -1.386689105193603e-05, -1.381880806387448e-05, -1.384415358064652e-05, -1.384415358064652e-05, -7.643782169948065e-03, -7.618700758108021e-03, -6.932820763586744e-03, -6.773015020230071e-03, -6.859969349197307e-03, -6.859969349197307e-03, -5.798999091839117e-01, -5.779020101813119e-01, -4.432298518851656e-03, -9.197638684273423e-01, -7.779164708558171e-01, -7.779164708558176e-01, -1.871790640998868e+03, -1.690034091747358e+03, -2.004977959922633e+01, -6.769318908522547e+03, -4.296169269855007e+03, -4.296169269855009e+03, -3.141101801523335e-06, -3.138984133423230e-06, -3.140996989637651e-06, -3.139129396703801e-06, -3.140047855879924e-06, -3.140047855879924e-06, -8.179261403557201e-05, -8.080439046186093e-05, -8.041021350533141e-05, -7.954757298010893e-05, -8.193072878311594e-05, -8.193072878311594e-05, -1.801294826339772e-02, -1.207559553412651e-02, -2.347020448302390e-02, -2.142776845754942e-02, -1.742760191842908e-02, -1.742760191842908e-02, -1.871681897837032e+00, -3.863819503871164e-01, -2.299946427087569e+00, -1.440850435787240e-04, -1.530733345582743e+00, -1.530733345582743e+00, -1.409861479251059e+04, -7.628197264130373e+03, -3.024704901757121e+04, -6.546770057770590e+00, -1.424676797299757e+04, -1.424676797299754e+04, -1.162220861808533e-02, -1.661956971590775e-02, -1.513363454587424e-02, -1.368040178497748e-02, -1.443248807112563e-02, -1.443248807112563e-02, -1.089032553303779e-02, -2.681684117494153e-02, -2.793480748748421e-02, -2.729250004703692e-02, -2.815181622611361e-02, -2.815181622611361e-02, -1.028283210307473e-02, -2.116318505555982e-01, -1.464264485048380e-01, -9.758636896025373e-02, -1.201623899913661e-01, -1.201623899913661e-01, -3.670997187402262e-02, -2.159243054805670e+01, -1.004947981933308e+01, -1.388832873437409e-01, -4.013178375444323e+00, -4.013178375444326e+00, -7.459915052492413e+02, -3.428298226112200e+05, -4.322243657094808e+04, -4.613768992623841e+00, -1.884820080559575e+04, -1.884820080559580e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
