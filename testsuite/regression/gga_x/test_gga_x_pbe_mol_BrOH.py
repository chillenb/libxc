
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_pbe_mol_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbe_mol", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.120855819584596e+01, -2.120857696329356e+01, -2.120874590697367e+01, -2.120843688593907e+01, -2.120856738082191e+01, -2.120856738082191e+01, -3.529301442243373e+00, -3.529264956860343e+00, -3.528408006736393e+00, -3.530633348382400e+00, -3.529297711065761e+00, -3.529297711065761e+00, -7.147573254663652e-01, -7.149282677832349e-01, -7.214548810917806e-01, -7.256866169768290e-01, -7.148152413579548e-01, -7.148152413579548e-01, -2.244663508960041e-01, -2.252812859335091e-01, -8.282884708505794e-01, -1.856814335137294e-01, -2.246864402262688e-01, -2.246864402262688e-01, -1.701591186150828e-02, -1.781980776680755e-02, -7.084873984398080e-02, -8.176433909197141e-03, -1.763418217362301e-02, -1.763418217362301e-02, -5.081640044864809e+00, -5.080715358668754e+00, -5.081552595564787e+00, -5.080833476262624e+00, -5.081155590387949e+00, -5.081155590387949e+00, -2.172272227620234e+00, -2.181437778240234e+00, -2.174716920243493e+00, -2.181851784479987e+00, -2.175291110382107e+00, -2.175291110382107e+00, -5.821103835622280e-01, -5.980542739150537e-01, -5.549417468318054e-01, -5.512383175151145e-01, -5.991230712402912e-01, -5.991230712402912e-01, -1.477660038973626e-01, -2.456321105485170e-01, -1.452213664281640e-01, -1.819368609964629e+00, -1.639854404320749e-01, -1.639854404320749e-01, -7.887827638907297e-03, -9.013457844260143e-03, -6.755797092805554e-03, -9.648020527992757e-02, -8.212621416870946e-03, -8.212621416870946e-03, -5.593668742758406e-01, -5.636224444729799e-01, -5.621197742907759e-01, -5.609381894286966e-01, -5.615303453517413e-01, -5.615303453517413e-01, -5.402369822195046e-01, -5.275130133578609e-01, -5.315476943823626e-01, -5.346724226793723e-01, -5.329105078400896e-01, -5.329105078400896e-01, -6.282888134454920e-01, -2.919878658909011e-01, -3.257992146931796e-01, -3.753669506560526e-01, -3.488582665658401e-01, -3.488582665658400e-01, -4.792765173887154e-01, -6.596207733204951e-02, -8.784744710827749e-02, -3.429063689154191e-01, -1.216481560090869e-01, -1.216481560090869e-01, -1.993480072179037e-02, -2.468821247753679e-03, -4.689329916186373e-03, -1.159694672586299e-01, -6.980080999079289e-03, -6.980080999079278e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_pbe_mol_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbe_mol", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.490172607548256e+01, -2.490181495500149e+01, -2.490221486459854e+01, -2.490075938405482e+01, -2.490177291909403e+01, -2.490177291909403e+01, -3.993697607783445e+00, -3.993737247342385e+00, -3.994992306072697e+00, -3.993677642234299e+00, -3.993735007860721e+00, -3.993735007860721e+00, -7.461532296048534e-01, -7.451184055679152e-01, -7.214035672270294e-01, -7.271097483408874e-01, -7.457761067123782e-01, -7.457761067123782e-01, -2.117889220384639e-01, -2.128917171300074e-01, -9.064203141315031e-01, -1.868658544106391e-01, -2.120809662108490e-01, -2.120809662108490e-01, -2.259631799093909e-02, -2.365440964251904e-02, -9.006875861930194e-02, -1.089338025333046e-02, -2.340820388645437e-02, -2.340820388645437e-02, -6.147384685449893e+00, -6.150285670540257e+00, -6.147680558922525e+00, -6.149936228221509e+00, -6.148872888522380e+00, -6.148872888522380e+00, -2.175871487813597e+00, -2.191417541494062e+00, -2.169604120043206e+00, -2.181574387979186e+00, -2.195067436982284e+00, -2.195067436982284e+00, -6.716828098447801e-01, -7.635738554584363e-01, -6.353496362549281e-01, -6.884757061050866e-01, -7.019258312765920e-01, -7.019258312765920e-01, -1.655376659967987e-01, -2.370211315744920e-01, -1.615399797634983e-01, -2.322185046867142e+00, -1.729164220221883e-01, -1.729164220221883e-01, -1.050921437602263e-02, -1.200615837548577e-02, -8.999334150864074e-03, -1.173855682032143e-01, -1.093932720731671e-02, -1.093932720731671e-02, -7.361793183102924e-01, -7.232232216127112e-01, -7.277668855082247e-01, -7.313549169760263e-01, -7.295520809860815e-01, -7.295520809860815e-01, -7.140799396839530e-01, -5.673141887872073e-01, -6.042635365242865e-01, -6.433664914720363e-01, -6.230720186053123e-01, -6.230720186053123e-01, -7.991571617017630e-01, -2.755483035753351e-01, -3.105734481880935e-01, -3.928337373753392e-01, -3.453784323992968e-01, -3.453784323992967e-01, -5.101448446356361e-01, -8.470590013606190e-02, -1.093386501622240e-01, -3.763796363842627e-01, -1.394721137830401e-01, -1.394721137830400e-01, -2.645205599108167e-02, -3.291444228690012e-03, -6.250421097329607e-03, -1.327979741690798e-01, -9.298736534282568e-03, -9.298736534282554e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_pbe_mol_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbe_mol", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-8.548979003254702e-09, -8.548934440215187e-09, -8.548618923685022e-09, -8.549350978677193e-09, -8.548956477851869e-09, -8.548956477851869e-09, -1.139594958862639e-05, -1.139629032356586e-05, -1.140377157067185e-05, -1.138122050728102e-05, -1.139593065605773e-05, -1.139593065605773e-05, -7.035676459801626e-03, -7.032781876590171e-03, -6.839170608099247e-03, -6.680449110649318e-03, -7.034788627719397e-03, -7.034788627719397e-03, -6.811749626010942e-01, -6.808257298075393e-01, -3.823950631145087e-03, -9.127130178629418e-01, -6.816242754382723e-01, -6.816242754382723e-01, -4.088149201334011e+00, -4.100085400960941e+00, -1.751758675877466e+00, -2.890360983239137e+00, -4.259285122067222e+00, -4.259285122067222e+00, -2.544525234489509e-06, -2.545276749389798e-06, -2.544590431674629e-06, -2.545174987028070e-06, -2.544927683157658e-06, -2.544927683157658e-06, -8.320550308821474e-05, -8.180013253090733e-05, -8.284143800617263e-05, -8.175982016450830e-05, -8.269048395263796e-05, -8.269048395263796e-05, -1.522489933176047e-02, -1.277856250133099e-02, -1.851798384071845e-02, -1.798244713617487e-02, -1.344253154663025e-02, -1.344253154663025e-02, -1.006655253764591e+00, -3.820991766351347e-01, -1.156155285933020e+00, -1.492306447969289e-04, -1.104857990252116e+00, -1.104857990252116e+00, -3.066181665744562e+00, -3.072899477203169e+00, -8.795013685793428e+00, -1.746466446292131e+00, -4.538848254439984e+00, -4.538848254439980e+00, -1.633110488293679e-02, -1.614082589783005e-02, -1.620855840128570e-02, -1.626153828949205e-02, -1.623506603254020e-02, -1.623506603254020e-02, -1.870958223344826e-02, -2.343557214868619e-02, -2.209018641903131e-02, -2.083509462851669e-02, -2.150203644983503e-02, -2.150203644983503e-02, -1.051912848558136e-02, -2.265103234016991e-01, -1.602701503201036e-01, -9.241515200757865e-02, -1.250580368133518e-01, -1.250580368133518e-01, -3.454617735742616e-02, -1.474767766274198e+00, -1.491694380924454e+00, -1.299831193036363e-01, -1.707095147102191e+00, -1.707095147102193e+00, -3.072661549195067e+00, -5.282860207539773e+00, -4.549262676571645e+00, -2.096615144726361e+00, -6.628158123967012e+00, -6.628158123966998e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
