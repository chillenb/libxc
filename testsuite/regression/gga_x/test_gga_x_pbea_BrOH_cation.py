
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_pbea_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbea", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.091163214062245e+01, -2.091166128879853e+01, -2.091185567147323e+01, -2.091142067082496e+01, -2.091163939056553e+01, -2.091163939056553e+01, -3.463696126569697e+00, -3.463661572446736e+00, -3.462947600487882e+00, -3.464846703268621e+00, -3.463738443292636e+00, -3.463738443292636e+00, -6.929746074352026e-01, -6.929125561622369e-01, -6.927589288031719e-01, -6.975864698123164e-01, -6.971434610219966e-01, -6.971434610219966e-01, -2.084571005129426e-01, -2.099083135525309e-01, -8.011345512152204e-01, -1.729157044622175e-01, -2.032498858823967e-01, -2.032498858823967e-01, -1.000751778522379e-02, -1.053097395355020e-02, -5.537512541268050e-02, -5.797055793102428e-03, -8.067928775783330e-03, -8.067928775783330e-03, -5.030289527186223e+00, -5.029739929622735e+00, -5.030274679808032e+00, -5.029789326333153e+00, -5.030005209402454e+00, -5.030005209402454e+00, -2.091150528724447e+00, -2.101572836540266e+00, -2.090879460394038e+00, -2.100105853590220e+00, -2.097026343125494e+00, -2.097026343125494e+00, -5.794608371630088e-01, -6.027010137281323e-01, -5.404851550157485e-01, -5.374159707775603e-01, -5.861001097156248e-01, -5.861001097156248e-01, -1.307044306580251e-01, -2.208713635132445e-01, -1.222532623606628e-01, -1.813289373100620e+00, -1.464740007158824e-01, -1.464740007158824e-01, -4.480080577759386e-03, -5.666372583908845e-03, -4.333716941123203e-03, -8.579183530203097e-02, -5.441763121592452e-03, -5.441763121592454e-03, -5.507535651749120e-01, -5.538127032441146e-01, -5.527621303442191e-01, -5.518675779639545e-01, -5.523165396274633e-01, -5.523165396274633e-01, -5.339839668591013e-01, -5.074634798804672e-01, -5.154775646219545e-01, -5.226200796251190e-01, -5.188468962927324e-01, -5.188468962927324e-01, -6.329633926830514e-01, -2.662011336576812e-01, -3.032142639415839e-01, -3.630497408463520e-01, -3.310265041675534e-01, -3.310265041675533e-01, -4.682284706921741e-01, -5.314710336187380e-02, -7.092862745368708e-02, -3.406582775120134e-01, -1.052904246385012e-01, -1.052904246385012e-01, -1.405498483505396e-02, -1.519913597842003e-03, -3.190757028928706e-03, -9.975510969491998e-02, -4.998949710204530e-03, -4.998949710204525e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_pbea_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbea", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.526129190650139e+01, -2.526126158147405e+01, -2.526140114967275e+01, -2.526134092681537e+01, -2.526172979601391e+01, -2.526181769005999e+01, -2.526049663193717e+01, -2.526024574958925e+01, -2.526135811399201e+01, -2.526085875862559e+01, -2.526135811399201e+01, -2.526085875862559e+01, -4.069264930876721e+00, -4.069384152057404e+00, -4.069299526306896e+00, -4.069422019489449e+00, -4.070172756820650e+00, -4.070425843583596e+00, -4.069317474268211e+00, -4.069566368489482e+00, -4.068515657199562e+00, -4.070416159443432e+00, -4.068515657199562e+00, -4.070416159443432e+00, -7.709949468628481e-01, -7.749960739881560e-01, -7.695013433276271e-01, -7.743730560410288e-01, -7.510254394247190e-01, -7.455966418345479e-01, -7.536702906967875e-01, -7.554099047730943e-01, -7.825878714663790e-01, -7.315716914673918e-01, -7.825878714663790e-01, -7.315716914673918e-01, -2.087340660558415e-01, -2.140281588555722e-01, -2.096622499762524e-01, -2.159740664321455e-01, -8.862261037724454e-01, -9.213742288887806e-01, -1.801512843327995e-01, -1.820403115801277e-01, -2.171694074368609e-01, -1.474135807641085e-01, -2.171694074368609e-01, -1.474135807641085e-01, -1.277175476879047e-02, -1.355386669302814e-02, -1.336538618812792e-02, -1.429458729019519e-02, -6.755068793682426e-02, -7.080408774448893e-02, -7.745263471619610e-03, -7.618405940858588e-03, -1.142027327068203e-02, -6.533744613568059e-03, -1.142027327068203e-02, -6.533744613568059e-03, -6.217554294864968e+00, -6.216007484075354e+00, -6.220132923298252e+00, -6.218498537620499e+00, -6.217697412610863e+00, -6.216092996382053e+00, -6.219909986987314e+00, -6.218355975053616e+00, -6.218874846025267e+00, -6.217258359716658e+00, -6.218874846025267e+00, -6.217258359716658e+00, -2.245096659106506e+00, -2.244983291346948e+00, -2.261652823417281e+00, -2.261035679069625e+00, -2.231653493951550e+00, -2.235311028309619e+00, -2.245727652390030e+00, -2.249643745058615e+00, -2.264975285050285e+00, -2.254827500809969e+00, -2.264975285050285e+00, -2.254827500809969e+00, -6.908782787141187e-01, -6.891139957182002e-01, -7.744353974911677e-01, -7.751541910245504e-01, -6.230248862980837e-01, -6.478738816438270e-01, -6.709725043578720e-01, -6.928655500719312e-01, -7.217569120015905e-01, -6.847735299962679e-01, -7.217569120015905e-01, -6.847735299962679e-01, -1.467968427259486e-01, -1.474225745267646e-01, -2.268802391562372e-01, -2.276534183624423e-01, -1.362569897870931e-01, -1.412738169662876e-01, -2.336098591857029e+00, -2.335106870604299e+00, -1.571924890566959e-01, -1.583704577550392e-01, -1.571924890566959e-01, -1.583704577550392e-01, -5.823531328430517e-03, -6.051915368473692e-03, -7.451489477611030e-03, -7.564732374393980e-03, -5.561206685835223e-03, -5.882009472354920e-03, -1.018284574033423e-01, -1.025346687286314e-01, -5.691627537868371e-03, -7.780748981712516e-03, -5.691627537868371e-03, -7.780748981712518e-03, -7.233591581657968e-01, -7.262905334701315e-01, -7.116136381346974e-01, -7.146108470052914e-01, -7.156240130474042e-01, -7.186258922647578e-01, -7.190619345024605e-01, -7.219941286027044e-01, -7.173328696321513e-01, -7.202990641213730e-01, -7.173328696321513e-01, -7.202990641213730e-01, -7.063672515121909e-01, -7.087216051304166e-01, -5.665174577091497e-01, -5.691541766957324e-01, -6.006235701974332e-01, -6.036535345155276e-01, -6.398922585994311e-01, -6.423109949594272e-01, -6.195088150166156e-01, -6.219745902330159e-01, -6.195088150166156e-01, -6.219745902330159e-01, -8.100485190764743e-01, -8.119525803878408e-01, -2.697307577487615e-01, -2.707945222289925e-01, -3.085050165656915e-01, -3.107526951581382e-01, -3.984885059479097e-01, -4.007662420181149e-01, -3.478507278148942e-01, -3.476596008296813e-01, -3.478507278148941e-01, -3.476596008296812e-01, -5.204968866588521e-01, -5.243839165604226e-01, -6.663237467827021e-02, -6.702927701648131e-02, -8.585830638671146e-02, -8.813116461980465e-02, -3.851922638922495e-01, -3.914881122168762e-01, -1.189330444893897e-01, -1.216042113338910e-01, -1.189330444893897e-01, -1.216042113338910e-01, -1.813011128960270e-02, -1.876409276687196e-02, -2.020217159127988e-03, -2.023438271851658e-03, -4.095955459440919e-03, -4.353521426230672e-03, -1.145142573669311e-01, -1.159808277130395e-01, -5.382167198547163e-03, -7.140779280267451e-03, -5.382167198547157e-03, -7.140779280267445e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_pbea_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbea", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.327136525444572e-08, 0.000000000000000e+00, -1.327144065925102e-08, -1.327128207367078e-08, 0.000000000000000e+00, -1.327138017908691e-08, -1.327086400537940e-08, 0.000000000000000e+00, -1.327082366266041e-08, -1.327180725621387e-08, 0.000000000000000e+00, -1.327202469346920e-08, -1.327132331739640e-08, 0.000000000000000e+00, -1.327143281349071e-08, -1.327132331739640e-08, 0.000000000000000e+00, -1.327143281349071e-08, -1.756709121100747e-05, 0.000000000000000e+00, -1.757387898283560e-05, -1.756760139464087e-05, 0.000000000000000e+00, -1.757489628678523e-05, -1.758509447793517e-05, 0.000000000000000e+00, -1.758927164045900e-05, -1.754343920624181e-05, 0.000000000000000e+00, -1.754886173002707e-05, -1.757654698509808e-05, 0.000000000000000e+00, -1.756286484620760e-05, -1.757654698509808e-05, 0.000000000000000e+00, -1.756286484620760e-05, -1.074127983372353e-02, 0.000000000000000e+00, -1.079593914409576e-02, -1.073065678799376e-02, 0.000000000000000e+00, -1.079820201186899e-02, -1.057644010270834e-02, 0.000000000000000e+00, -1.046133966580813e-02, -1.022559284555945e-02, 0.000000000000000e+00, -1.026688870213322e-02, -1.079712499303655e-02, 0.000000000000000e+00, -9.463548077327043e-03, -1.079712499303655e-02, 0.000000000000000e+00, -9.463548077327043e-03, -1.013745880656603e+00, 0.000000000000000e+00, -9.568770517805273e-01, -1.020773376645833e+00, 0.000000000000000e+00, -9.514949588362011e-01, -6.237183307812446e-03, 0.000000000000000e+00, -5.908956362540989e-03, -1.364221994042934e+00, 0.000000000000000e+00, -1.319198296713137e+00, -8.749280118173544e-01, 0.000000000000000e+00, -2.139281873323066e+00, -8.749280118173539e-01, 0.000000000000000e+00, -2.139281873323068e+00, -4.416117307689014e+01, 0.000000000000000e+00, -4.134700829472995e+01, -4.393817295952964e+01, 0.000000000000000e+00, -4.097511536338012e+01, -5.532276189720475e+00, 0.000000000000000e+00, -5.287109065722681e+00, -6.729587306433366e+01, 0.000000000000000e+00, -6.697361577089576e+01, -4.920497200349953e+01, 0.000000000000000e+00, -1.714819183888650e+02, -4.920497200349965e+01, 0.000000000000000e+00, -1.714819183888653e+02, -3.964605145358005e-06, 0.000000000000000e+00, -3.968214661905610e-06, -3.966352152106283e-06, 0.000000000000000e+00, -3.969906031347989e-06, -3.964665730135355e-06, 0.000000000000000e+00, -3.968246643040142e-06, -3.966165311198375e-06, 0.000000000000000e+00, -3.969783603604034e-06, -3.965529402551258e-06, 0.000000000000000e+00, -3.969069910541920e-06, -3.965529402551258e-06, 0.000000000000000e+00, -3.969069910541920e-06, -1.258598055867389e-04, 0.000000000000000e+00, -1.258812345194171e-04, -1.236599443481039e-04, 0.000000000000000e+00, -1.237603965358055e-04, -1.250026690546280e-04, 0.000000000000000e+00, -1.253138379913320e-04, -1.231562695738009e-04, 0.000000000000000e+00, -1.233960553307923e-04, -1.251270093327343e-04, 0.000000000000000e+00, -1.248537042081842e-04, -1.251270093327343e-04, 0.000000000000000e+00, -1.248537042081842e-04, -2.235283295595884e-02, 0.000000000000000e+00, -2.260562783935557e-02, -1.919956088236596e-02, 0.000000000000000e+00, -1.920321739939295e-02, -3.161901010222791e-02, 0.000000000000000e+00, -2.800072910592008e-02, -3.262994569115422e-02, 0.000000000000000e+00, -2.855653600112382e-02, -1.966981354306323e-02, 0.000000000000000e+00, -2.390819357134592e-02, -1.966981354306323e-02, 0.000000000000000e+00, -2.390819357134592e-02, -1.822861480559660e+00, 0.000000000000000e+00, -1.836033779821119e+00, -6.133537200136917e-01, 0.000000000000000e+00, -6.073564893581818e-01, -2.158055340287489e+00, 0.000000000000000e+00, -2.029702279449468e+00, -2.340806046278392e-04, 0.000000000000000e+00, -2.345260955707171e-04, -1.806974651119426e+00, 0.000000000000000e+00, -2.047376066990547e+00, -1.806974651119426e+00, 0.000000000000000e+00, -2.047376066990547e+00, -1.147445251484868e+02, 0.000000000000000e+00, -9.908790140812714e+01, -8.065950458550647e+01, 0.000000000000000e+00, -7.482444583797945e+01, -4.000592989072649e+02, 0.000000000000000e+00, -4.105958576470416e+02, -3.949528228998988e+00, 0.000000000000000e+00, -3.815395681626202e+00, -2.305069042810699e+02, 0.000000000000000e+00, -1.677404474139121e+02, -2.305069042810694e+02, 0.000000000000000e+00, -1.677404474139119e+02, -2.765436269452797e-02, 0.000000000000000e+00, -2.725023704887205e-02, -2.712290991393649e-02, 0.000000000000000e+00, -2.673774428154965e-02, -2.730631033969549e-02, 0.000000000000000e+00, -2.691583225742409e-02, -2.746303522652042e-02, 0.000000000000000e+00, -2.706464736309542e-02, -2.738459235124007e-02, 0.000000000000000e+00, -2.699005387127558e-02, -2.738459235124007e-02, 0.000000000000000e+00, -2.699005387127558e-02, -3.123477577057330e-02, 0.000000000000000e+00, -3.082828321110628e-02, -3.774305450980018e-02, 0.000000000000000e+00, -3.728527413764637e-02, -3.600722585267178e-02, 0.000000000000000e+00, -3.555059512603159e-02, -3.425801455989683e-02, 0.000000000000000e+00, -3.382893027831173e-02, -3.522121245275019e-02, 0.000000000000000e+00, -3.476294487251318e-02, -3.522121245275019e-02, 0.000000000000000e+00, -3.476294487251318e-02, -1.581690831540488e-02, 0.000000000000000e+00, -1.576292724221181e-02, -3.589159585335218e-01, 0.000000000000000e+00, -3.552473687711435e-01, -2.510884770399422e-01, 0.000000000000000e+00, -2.477039067355929e-01, -1.429960691464869e-01, 0.000000000000000e+00, -1.405502986771790e-01, -1.933866629030822e-01, 0.000000000000000e+00, -1.946266383319601e-01, -1.933866629030823e-01, 0.000000000000000e+00, -1.946266383319602e-01, -5.213889067486550e-02, 0.000000000000000e+00, -5.122756794583496e-02, -5.254862474688989e+00, 0.000000000000000e+00, -5.226843821349354e+00, -3.974277231141101e+00, 0.000000000000000e+00, -3.925359620819863e+00, -1.906957718400994e-01, 0.000000000000000e+00, -1.821348128264686e-01, -3.315145984018846e+00, 0.000000000000000e+00, -3.621939488643374e+00, -3.315145984018847e+00, 0.000000000000000e+00, -3.621939488643375e+00, -2.626368160636293e+01, 0.000000000000000e+00, -2.578610568014345e+01, -7.485743261003654e+02, 0.000000000000000e+00, -1.153455042015258e+03, -2.623129835062212e+02, 0.000000000000000e+00, -2.592879447655598e+02, -3.742494552299318e+00, 0.000000000000000e+00, -3.633906439007645e+00, -4.208692794602021e+02, 0.000000000000000e+00, -1.876158589784299e+02, -4.208692794602031e+02, 0.000000000000000e+00, -1.876158589784304e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
