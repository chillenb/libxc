
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_2d_b88_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_2d_b88", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.484458101776021e+02, -1.484464147409326e+02, -1.484493178169002e+02, -1.484403186938682e+02, -1.484450034113023e+02, -1.484450034113023e+02, -9.961931088448560e+00, -9.961920574860150e+00, -9.962038552366781e+00, -9.964631757884572e+00, -9.962273702160468e+00, -9.962273702160468e+00, -9.265774223602640e-01, -9.259240321167771e-01, -9.116379308645446e-01, -9.213828095254386e-01, -9.184955338764024e-01, -9.184955338764024e-01, -1.668959069615966e-01, -1.684368892860630e-01, -1.145941680202380e+00, -1.334643401422692e-01, -1.450134073599970e-01, -1.450134073599970e-01, -3.335137184626073e-02, -3.327653284394415e-02, -5.989249795457659e-02, -3.096050344802411e-02, -3.049756416067639e-02, -3.049756416067638e-02, -1.797944008135610e+01, -1.798305480816571e+01, -1.797963120453885e+01, -1.798282196976499e+01, -1.798125888250921e+01, -1.798125888250921e+01, -4.426539391112747e+00, -4.467818767044009e+00, -4.404741025189112e+00, -4.441107933100025e+00, -4.459920255868974e+00, -4.459920255868974e+00, -7.328675840086956e-01, -7.859104648000683e-01, -6.603740137749068e-01, -6.630069271889844e-01, -7.454701607770111e-01, -7.454701607770111e-01, -1.034191084304335e-01, -1.815283972620582e-01, -9.715466655390378e-02, -4.029725392710381e+00, -1.111202109981074e-01, -1.111202109981074e-01, -2.794241467591686e-02, -2.974632870989862e-02, -1.890512339282278e-02, -7.308812039206240e-02, -2.311188972679146e-02, -2.311188972679147e-02, -6.871000481974675e-01, -6.937391771612649e-01, -6.917025555653011e-01, -6.897845873706926e-01, -6.907704291561934e-01, -6.907704291561934e-01, -6.552666636900794e-01, -5.950393351183030e-01, -6.162905626371458e-01, -6.348395800724275e-01, -6.254862706163405e-01, -6.254862706163405e-01, -8.445916596299090e-01, -2.318314789398618e-01, -2.787572026962964e-01, -3.687297319209516e-01, -3.190994962964712e-01, -3.190994962964712e-01, -5.302833805659448e-01, -5.989171705520277e-02, -6.825786041672555e-02, -3.396887810050486e-01, -8.200459628008323e-02, -8.200459628008321e-02, -3.742545932628438e-02, -1.715047186588452e-02, -2.241368678599112e-02, -7.897634504785236e-02, -2.166239011672840e-02, -2.166239011672838e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_2d_b88_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_2d_b88", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.211505649446504e+02, -2.211515115311938e+02, -2.211559744958354e+02, -2.211418859316074e+02, -2.211492318158844e+02, -2.211492318158844e+02, -1.432111959057538e+01, -1.432119783409780e+01, -1.432353752955681e+01, -1.432357942189627e+01, -1.432173496792742e+01, -1.432173496792742e+01, -1.193685674806914e+00, -1.191775389396333e+00, -1.147270221248133e+00, -1.161329842317338e+00, -1.158209838123402e+00, -1.158209838123402e+00, -1.699120932429754e-01, -1.730496793492936e-01, -1.502390245189407e+00, -1.194199966188064e-01, -1.380300573756318e-01, -1.380300573756318e-01, -6.328864356147635e-03, -6.441805925201527e-03, -2.534977702106753e-02, -5.009555445842221e-03, -5.292414982789079e-03, -5.292414982789060e-03, -2.647984897831877e+01, -2.648858789675647e+01, -2.648027213605991e+01, -2.648798661322488e+01, -2.648426713541718e+01, -2.648426713541718e+01, -5.955775480575999e+00, -6.021870884845339e+00, -5.906502786237634e+00, -5.964609575522011e+00, -6.016335637705938e+00, -6.016335637705938e+00, -9.768287345747022e-01, -1.120847741125946e+00, -8.689088510716140e-01, -9.291631051501101e-01, -1.001209452316521e+00, -1.001209452316521e+00, -7.595134922268905e-02, -1.748041678276643e-01, -6.881697825771231e-02, -5.923089005668926e+00, -9.139515738702432e-02, -9.139515738702432e-02, -4.302982812099648e-03, -4.818373316467916e-03, -3.091098458701123e-03, -4.232352784422644e-02, -3.835402564087722e-03, -3.835402564087729e-03, -1.006929015546451e+00, -9.881651111616038e-01, -9.940413107748104e-01, -9.994157270524199e-01, -9.966590092753829e-01, -9.966590092753829e-01, -9.707160082688500e-01, -7.521194408577343e-01, -8.041753574066169e-01, -8.607875779279521e-01, -8.310739251014411e-01, -8.310739251014411e-01, -1.202512469030662e+00, -2.399807257265324e-01, -3.070546537379827e-01, -4.493286873246041e-01, -3.701267121054312e-01, -3.701267121054311e-01, -6.651188679485867e-01, -2.445003155437195e-02, -3.372265951711446e-02, -4.232535121250366e-01, -5.571497554745865e-02, -5.571497554745856e-02, -7.917492460032401e-03, -2.260351087830175e-03, -3.298532857765317e-03, -5.169723405890611e-02, -3.559715260844650e-03, -3.559715260844651e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_2d_b88_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_2d_b88", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-3.416636176538851e-09, -3.416600504005925e-09, -3.416418310047796e-09, -3.416949545235875e-09, -3.416674534076035e-09, -3.416674534076035e-09, -8.845317712936944e-06, -8.845690941288892e-06, -8.853407182176329e-06, -8.832875583456914e-06, -8.844859331654251e-06, -8.844859331654251e-06, -6.219831705580562e-03, -6.207000756214612e-03, -5.870649898282794e-03, -5.725506764488682e-03, -5.791204156857859e-03, -5.791204156857859e-03, -5.301916789645507e-01, -5.214855124108008e-01, -3.573443940165000e-03, -9.741129636578620e-01, -7.673369398946362e-01, -7.673369398946361e-01, -5.739666808835011e+03, -5.034259955688114e+03, -3.437212244690707e+01, -2.690548436994237e+04, -1.492916119215527e+04, -1.492916119215529e+04, -1.759395247615997e-06, -1.759956629210133e-06, -1.759406410967474e-06, -1.759902164759744e-06, -1.759687477218042e-06, -1.759687477218042e-06, -7.045157357134176e-05, -6.912608540232362e-05, -7.030175839630865e-05, -6.913031941253349e-05, -6.979332268442364e-05, -6.979332268442364e-05, -1.481157039886007e-02, -1.718998477054881e-02, -1.900095931274999e-02, -2.595181458914776e-02, -1.461745503067962e-02, -1.461745503067962e-02, -2.370913106617313e+00, -3.933804654313232e-01, -2.980869340532863e+00, -1.540778945225411e-04, -1.736847269334842e+00, -1.736847269334842e+00, -6.102975913995851e+04, -3.001379512917203e+04, -1.068220847215667e+05, -9.514434526637817e+00, -5.086124232728572e+04, -5.086124232728570e+04, -3.045014267427915e-02, -2.481352589234076e-02, -2.636927952042220e-02, -2.794939948495318e-02, -2.711967261767160e-02, -2.711967261767160e-02, -3.795141833141837e-02, -2.152599078131504e-02, -2.245653214979585e-02, -2.483837863555728e-02, -2.345521241918069e-02, -2.345521241918069e-02, -1.371642772934060e-02, -2.019966989006605e-01, -1.300975215805947e-01, -7.743674685396457e-02, -9.996367869484796e-02, -9.996367869484797e-02, -2.939208866514465e-02, -3.779511516093398e+01, -1.605318020904827e+01, -1.086490512107383e-01, -5.229002834020753e+00, -5.229002834020756e+00, -2.024858388788888e+03, -2.051585156734272e+06, -1.994469319425856e+05, -6.168852635527602e+00, -6.770591379656787e+04, -6.770591379656807e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
