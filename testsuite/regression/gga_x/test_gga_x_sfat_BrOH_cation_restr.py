
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_sfat_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_sfat", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.082385410484347e+01, -2.082388143258391e+01, -2.082407141997304e+01, -2.082366342509326e+01, -2.082386746596721e+01, -2.082386746596721e+01, -3.264027813806730e+00, -3.263993834214094e+00, -3.263293560423993e+00, -3.265171792583336e+00, -3.264070940111177e+00, -3.264070940111177e+00, -5.038993045101223e-01, -5.036486099222760e-01, -4.985803384165013e-01, -5.034061205372000e-01, -5.018800417179459e-01, -5.018800417179459e-01, -6.689020568080385e-02, -6.847091833422070e-02, -6.085943371850691e-01, -4.029039244282339e-02, -5.015443403853218e-02, -5.015443403853218e-02, -7.053365814324698e-06, -8.224183826463426e-06, -1.338292905113708e-03, -1.359012876915781e-06, -2.696272182130325e-06, -2.696272182130325e-06, -4.836765414841427e+00, -4.836171643490657e+00, -4.836748776962346e+00, -4.836224443625938e+00, -4.836458630324847e+00, -4.836458630324847e+00, -1.879297037202798e+00, -1.889940928069938e+00, -1.878654022626953e+00, -1.888059236745860e+00, -1.885483512019827e+00, -1.885483512019827e+00, -4.052429103244472e-01, -4.342463980624560e-01, -3.674085314858111e-01, -3.719511609379801e-01, -4.118196335539106e-01, -4.118196335539106e-01, -1.815477552800726e-02, -7.030191214402284e-02, -1.499677858274526e-02, -1.618118625469573e+00, -2.592544036290431e-02, -2.592544036290431e-02, -6.242476030023958e-07, -1.269675055419190e-06, -5.676564490802295e-07, -5.288321379218206e-03, -9.924383816938176e-07, -9.924383816938172e-07, -3.872679099846081e-01, -3.885726823035908e-01, -3.881542415400252e-01, -3.877723909189419e-01, -3.879665163574341e-01, -3.879665163574341e-01, -3.720890972281740e-01, -3.312384776293180e-01, -3.438109944199064e-01, -3.554403467981602e-01, -3.494857665836316e-01, -3.494857665836316e-01, -4.625221723787563e-01, -1.054740960831177e-01, -1.391374906770504e-01, -2.011606660690766e-01, -1.677946222978601e-01, -1.677946222978601e-01, -2.952724322131318e-01, -1.177975857192932e-03, -2.885298267689105e-03, -1.860158063405451e-01, -1.002169821825834e-02, -1.002169821825838e-02, -1.981845308764970e-05, -2.425189994866879e-08, -2.242876470602252e-07, -8.514562217806203e-03, -7.862728676092399e-07, -7.862728676092380e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_sfat_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_sfat", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.502201238037999e+01, -2.502210658664736e+01, -2.502250876859736e+01, -2.502110752240990e+01, -2.502184410656793e+01, -2.502184410656793e+01, -3.881884458261434e+00, -3.881919441862963e+00, -3.882828143722872e+00, -3.882018547751014e+00, -3.882024079288152e+00, -3.882024079288152e+00, -6.206288566015801e-01, -6.196624023068416e-01, -5.969517823234483e-01, -6.030439321570512e-01, -6.018398498918860e-01, -6.018398498918860e-01, -9.473441443394016e-02, -9.683515005031815e-02, -7.471750797985008e-01, -6.071478760021705e-02, -7.339862345596031e-02, -7.339862345596028e-02, -1.410316661351606e-05, -1.644353545531347e-05, -2.613044799516573e-03, -2.717878115217843e-06, -5.391965596128064e-06, -5.391965596128062e-06, -6.014002075994080e+00, -6.016399842057252e+00, -6.014110722803073e+00, -6.016227468970235e+00, -6.015218042773980e+00, -6.015218042773980e+00, -2.053867374957821e+00, -2.071202457457209e+00, -2.039178935244502e+00, -2.054413856351621e+00, -2.070646477762843e+00, -2.070646477762843e+00, -5.335817312413574e-01, -6.032285112844165e-01, -4.829617739469216e-01, -5.162660605752342e-01, -5.454348608130610e-01, -5.454348608130610e-01, -3.043819702532872e-02, -9.809777535954997e-02, -2.566188579977630e-02, -2.138980495789709e+00, -4.141957545811264e-02, -4.141957545811264e-02, -1.248460497714480e-06, -2.539216402011478e-06, -1.135272324790193e-06, -9.814349967964988e-03, -1.984774219656995e-06, -1.984774219656995e-06, -5.516972767430609e-01, -5.437658166873279e-01, -5.464462305857140e-01, -5.487436314927704e-01, -5.475840536989608e-01, -5.475840536989608e-01, -5.342591737763662e-01, -4.231547541769095e-01, -4.517859771372436e-01, -4.824126400008265e-01, -4.665202144507057e-01, -4.665202144507057e-01, -6.386679060826561e-01, -1.398783389347358e-01, -1.809959349181339e-01, -2.661568466124096e-01, -2.190906028537589e-01, -2.190906028537589e-01, -3.802429915999898e-01, -2.306315361466586e-03, -5.517415998491161e-03, -2.534843942836904e-01, -1.773119006077297e-02, -1.773119006077286e-02, -3.961224003867144e-05, -4.850371366316308e-08, -4.485697223886906e-07, -1.527226795003389e-02, -1.572477203634890e-06, -1.572477203634886e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_sfat_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_sfat", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-7.142238357338420e-09, -7.142204061325257e-09, -7.141954848592015e-09, -7.142467118316088e-09, -7.142212442665138e-09, -7.142212442665138e-09, -8.671808592706845e-06, -8.672179257269326e-06, -8.679929131059122e-06, -8.660049944788938e-06, -8.671437394569644e-06, -8.671437394569644e-06, -3.655665697287233e-03, -3.655050556569625e-03, -3.614681857811115e-03, -3.529069050894200e-03, -3.561656977017651e-03, -3.561656977017651e-03, -1.200056066133218e-01, -1.207656620288023e-01, -2.192479438390730e-03, -1.265145060969123e-01, -1.304711445290088e-01, -1.304711445290087e-01, -3.229994679827152e-04, -3.852179046983557e-04, -2.155828330633897e-02, -6.712043583023690e-05, -1.485097094456543e-04, -1.485097094462592e-04, -2.047213249884946e-06, -2.048717447295187e-06, -2.047262655900763e-06, -2.048590725198927e-06, -2.047985524878971e-06, -2.047985524878971e-06, -6.088103163845758e-05, -5.972382633370913e-05, -6.093705849017774e-05, -5.990965576068010e-05, -6.021588865372402e-05, -6.021588865372402e-05, -7.088735820146150e-03, -6.678048087619140e-03, -8.972696054976630e-03, -9.821438580565672e-03, -6.886093420222952e-03, -6.886093420222952e-03, -1.014726100986468e-01, -8.703206309083898e-02, -9.781244276323424e-02, -1.127744177720031e-04, -1.325628646821553e-01, -1.325628646821553e-01, -3.958305390278628e-05, -7.055951863745954e-05, -1.195076940607238e-04, -6.542970266690587e-02, -1.178642377195841e-04, -1.178642377194119e-04, -9.633935509704830e-03, -9.017137168085644e-03, -9.201875022799663e-03, -9.377835155253280e-03, -9.286880807822797e-03, -9.286880807822797e-03, -1.096784468088776e-02, -1.077873225080456e-02, -1.048663425587618e-02, -1.038765368085347e-02, -1.042842582560588e-02, -1.042842582560588e-02, -5.584515475242521e-03, -6.310982149441936e-02, -4.891038965573945e-02, -3.196513958874134e-02, -4.043951328298133e-02, -4.043951328298134e-02, -1.410768946061487e-02, -1.835374591267891e-02, -3.693780388487677e-02, -4.028995364579505e-02, -1.052567075390071e-01, -1.052567075390202e-01, -7.076466479377544e-04, -5.359756688323944e-06, -2.583127692956442e-05, -9.596965392665950e-02, -1.117913361240710e-04, -1.117913361246440e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
