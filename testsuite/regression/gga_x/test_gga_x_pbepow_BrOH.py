
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_pbepow_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbepow", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.103060952708066e+01, -2.103062934379907e+01, -2.103080050931241e+01, -2.103047436563811e+01, -2.103061928595266e+01, -2.103061928595266e+01, -3.499277444820835e+00, -3.499240089371291e+00, -3.498358644477067e+00, -3.500620616614475e+00, -3.499273138035660e+00, -3.499273138035660e+00, -7.128955702817826e-01, -7.132316907637065e-01, -7.254342454546739e-01, -7.293355704081480e-01, -7.130126039970495e-01, -7.130126039970495e-01, -2.312649092409916e-01, -2.316520856391526e-01, -8.222837900592653e-01, -1.931095820075496e-01, -2.313537753398205e-01, -2.313537753398205e-01, -1.702846024137291e-02, -1.783424318890124e-02, -7.145046838636360e-02, -8.177603106919663e-03, -1.764844011863023e-02, -1.764844011863023e-02, -5.044118332548642e+00, -5.043352237576456e+00, -5.044046626561290e+00, -5.043450814000963e+00, -5.043715583286493e+00, -5.043715583286493e+00, -2.183351723072786e+00, -2.191079799357345e+00, -2.187935584475377e+00, -2.193916050351347e+00, -2.182723095285936e+00, -2.182723095285936e+00, -5.770936560056535e-01, -5.956864545122836e-01, -5.501565004642407e-01, -5.481629326059705e-01, -5.940698717697710e-01, -5.940698717697710e-01, -1.519671686529497e-01, -2.556122908364029e-01, -1.494906972396405e-01, -1.812120426723931e+00, -1.698796462946770e-01, -1.698796462946770e-01, -7.888908788757757e-03, -9.015072952064293e-03, -6.756947609666846e-03, -9.801396371675998e-02, -8.214106233246853e-03, -8.214106233299974e-03, -5.586463694781053e-01, -5.616203356181677e-01, -5.605503010051873e-01, -5.597237927798323e-01, -5.601361945942779e-01, -5.601361945942779e-01, -5.397671574616220e-01, -5.243634463315882e-01, -5.269918564641249e-01, -5.306006132775959e-01, -5.283957526101040e-01, -5.283957526101040e-01, -6.256144332195940e-01, -3.022212171980989e-01, -3.330188127292950e-01, -3.742597085698057e-01, -3.516800104745749e-01, -3.516800104745749e-01, -4.768890477299136e-01, -6.640626876894266e-02, -8.891209809923994e-02, -3.403607041474832e-01, -1.247053472238217e-01, -1.247053472238251e-01, -1.995229829765725e-02, -2.468864749770380e-03, -4.689606576211210e-03, -1.189048138798728e-01, -6.981182567318062e-03, -6.981182567318064e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_pbepow_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbepow", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.481733318905552e+01, -2.481743502302044e+01, -2.481787354189659e+01, -2.481620626794030e+01, -2.481738702479627e+01, -2.481738702479627e+01, -3.940559882775919e+00, -3.940626737410362e+00, -3.942625320299678e+00, -3.940015485224668e+00, -3.940611054691650e+00, -3.940611054691650e+00, -7.066633036134927e-01, -7.049697336035436e-01, -6.663069077790305e-01, -6.722387607236330e-01, -7.060486926816499e-01, -7.060486926816499e-01, -2.005448652113010e-01, -1.999975278040572e-01, -8.818539986131954e-01, -1.982808345101481e-01, -2.003076075074229e-01, -2.003076075074229e-01, -2.264620787341929e-02, -2.371176745043686e-02, -9.229847722764389e-02, -1.089805157938214e-02, -2.346485722895591e-02, -2.346485722895591e-02, -6.153841766345788e+00, -6.157153773172356e+00, -6.154179045798779e+00, -6.156754385316543e+00, -6.155542972180543e+00, -6.155542972180543e+00, -2.011369747261260e+00, -2.028704721265126e+00, -2.001774330755541e+00, -2.014904569517386e+00, -2.036915023075510e+00, -2.036915023075510e+00, -6.667131197389797e-01, -7.657655531945283e-01, -6.292636704810046e-01, -6.905116785956340e-01, -6.992387771565766e-01, -6.992387771565766e-01, -1.771828171681956e-01, -2.430560657377283e-01, -1.731063055214903e-01, -2.328869551609075e+00, -1.857046769958926e-01, -1.857046769958926e-01, -1.051353413124704e-02, -1.201260934470976e-02, -9.003929813469952e-03, -1.226191580137893e-01, -1.094525769652196e-02, -1.094525769659404e-02, -7.370606543409152e-01, -7.251839321163019e-01, -7.294467337009910e-01, -7.327367648922168e-01, -7.310917900280204e-01, -7.310917900280204e-01, -7.146722818332130e-01, -5.469068832067105e-01, -5.971499527582416e-01, -6.436642602546270e-01, -6.204185769995300e-01, -6.204185769995301e-01, -8.015206873126407e-01, -2.674964985826047e-01, -2.868636313980896e-01, -3.726194098820374e-01, -3.176548517155496e-01, -3.176548517155502e-01, -4.888892658641927e-01, -8.638033717862427e-02, -1.131363794799677e-01, -3.667132688618912e-01, -1.485426378004967e-01, -1.485426378005112e-01, -2.652154189488262e-02, -3.291618210585899e-03, -6.251527203811427e-03, -1.414776469477352e-01, -9.303137124666554e-03, -9.303137124532948e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_pbepow_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbepow", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-8.161904507069329e-09, -8.161825382045950e-09, -8.161413866644578e-09, -8.162710774873132e-09, -8.161863268406518e-09, -8.161863268406518e-09, -1.160570285234451e-05, -1.160562166458202e-05, -1.160147347967349e-05, -1.159877658984060e-05, -1.160546334406658e-05, -1.160546334406658e-05, -8.294391329428642e-03, -8.313047556839613e-03, -8.556594965868363e-03, -8.339953588955977e-03, -8.301319973243761e-03, -8.301319973243761e-03, -8.392768913270852e-01, -8.472791734536741e-01, -4.143831048083483e-03, -8.899997194643876e-01, -8.425882008782130e-01, -8.425882008782130e-01, -2.607687183970227e+00, -2.616646456233808e+00, -1.182979088283315e+00, -1.835937453781962e+00, -2.718217027236683e+00, -2.718217027236683e+00, -2.315704925601067e-06, -2.314058492585167e-06, -2.315531144130671e-06, -2.314251019884360e-06, -2.314867920923892e-06, -2.314867920923892e-06, -1.039088939047404e-04, -1.018255545469180e-04, -1.038865666062939e-04, -1.022969993986206e-04, -1.023937272403303e-04, -1.023937272403303e-04, -1.497432715196154e-02, -1.075828088026481e-02, -1.846585738329984e-02, -1.560979451791322e-02, -1.288064495251377e-02, -1.288064495251377e-02, -8.134179547483125e-01, -4.128060563454378e-01, -9.445180653347294e-01, -1.256901212259857e-04, -9.857656505837462e-01, -9.857656505837462e-01, -1.947536444625766e+00, -1.952382312521062e+00, -5.587606523322227e+00, -1.251673804469048e+00, -2.883812900198864e+00, -2.883812958410700e+00, -1.321159021507711e-02, -1.349752333234715e-02, -1.339414080474126e-02, -1.331505767409578e-02, -1.335456566665355e-02, -1.335456566665355e-02, -1.505296898587396e-02, -2.622777145268263e-02, -2.230991807811735e-02, -1.911901098175507e-02, -2.067459346808237e-02, -2.067459346808237e-02, -8.901656235654958e-03, -2.697069441297336e-01, -2.034176208597623e-01, -1.085004896681119e-01, -1.579352148888749e-01, -1.579352148888744e-01, -3.939004355514544e-02, -9.827224567166327e-01, -1.036372543253641e+00, -1.400695338004958e-01, -1.331934219551559e+00, -1.331934219550648e+00, -1.961892103454676e+00, -3.352699307325067e+00, -2.887953153935400e+00, -1.638844453402593e+00, -4.210600084696655e+00, -4.210599967286658e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
