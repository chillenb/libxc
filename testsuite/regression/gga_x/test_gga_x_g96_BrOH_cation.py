
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_g96_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_g96", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.111730059017425e+01, -2.111733065480740e+01, -2.111752873854372e+01, -2.111708010752647e+01, -2.111730602341394e+01, -2.111730602341394e+01, -3.496125111747124e+00, -3.496091481773836e+00, -3.495399678909806e+00, -3.497266409661616e+00, -3.496169321096875e+00, -3.496169321096875e+00, -6.990405436444432e-01, -6.989839163577443e-01, -6.994620902831385e-01, -7.042678514905212e-01, -7.051290014412976e-01, -7.051290014412976e-01, -2.187393450066087e-01, -2.191220309963848e-01, -8.081948670451841e-01, -2.005519113253893e-01, -2.193403281173315e-01, -2.193403281173315e-01, -3.588782007673955e-01, -3.431255344818093e-01, -2.067589440927880e-01, -4.857059474520745e-01, -3.804841753672935e-01, -3.804841753672931e-01, -5.080468733554280e+00, -5.079906831934648e+00, -5.080453480822083e+00, -5.079957283324527e+00, -5.080178260912297e+00, -5.080178260912297e+00, -2.112245726813067e+00, -2.122408478954917e+00, -2.112919071291577e+00, -2.121853337022854e+00, -2.117601865303027e+00, -2.117601865303027e+00, -5.850307325025286e-01, -6.079988844056253e-01, -5.455635797688201e-01, -5.425008550471903e-01, -5.918257905912584e-01, -5.918257905912585e-01, -1.929897778242740e-01, -2.442859680891685e-01, -1.889548253994002e-01, -1.828965297839234e+00, -1.845741277378563e-01, -1.845741277378563e-01, -4.977097948517005e-01, -4.623394203151787e-01, -2.659017057381693e-01, -1.773564249390616e-01, -3.187476235123485e-01, -3.187476235123488e-01, -5.539469617527757e-01, -5.586133159471305e-01, -5.571758498708808e-01, -5.558402685976144e-01, -5.565263286875395e-01, -5.565263286875395e-01, -5.360868733108946e-01, -5.118992545516896e-01, -5.202475585394266e-01, -5.278302110178295e-01, -5.238758725910078e-01, -5.238758725910078e-01, -6.386666301200008e-01, -2.812183795597655e-01, -3.111976840509265e-01, -3.662853775947985e-01, -3.353102235092222e-01, -3.353102235092222e-01, -4.723249838387981e-01, -2.161106878936976e-01, -1.979631730346478e-01, -3.436759415236941e-01, -1.677992462546222e-01, -1.677992462546221e-01, -3.302710629198047e-01, -4.910203185407984e-01, -4.447437690596806e-01, -1.679186009497119e-01, -3.031017395909542e-01, -3.031017395909540e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_g96_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_g96", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.556632425305479e+01, -2.556629310773389e+01, -2.556642912254074e+01, -2.556636927889155e+01, -2.556675113685932e+01, -2.556683447699841e+01, -2.556556716058498e+01, -2.556532528647013e+01, -2.556638748030798e+01, -2.556591863649125e+01, -2.556638748030798e+01, -2.556591863649125e+01, -4.123658956290666e+00, -4.123777489874425e+00, -4.123693739467451e+00, -4.123815410109946e+00, -4.124569165278621e+00, -4.124822700759116e+00, -4.123717151663031e+00, -4.123967420196915e+00, -4.122900511088783e+00, -4.124821400096933e+00, -4.122900511088783e+00, -4.124821400096933e+00, -7.763287386751330e-01, -7.814888041846126e-01, -7.744048508531086e-01, -7.807373696891986e-01, -7.486734491432372e-01, -7.397558952446602e-01, -7.496371726288635e-01, -7.525118591058254e-01, -7.905630696728024e-01, -7.027664678671106e-01, -7.905630696728024e-01, -7.027664678671106e-01, -1.706954066489025e-01, -1.804757229277943e-01, -1.746141945819637e-01, -1.857640371523574e-01, -8.930634233699963e-01, -9.323120227077772e-01, -1.092231665518505e-01, -1.114630659861377e-01, -1.791008304800600e-01, -5.501020646164843e-02, -1.791008304800599e-01, -5.501020646164839e-02, 2.317231994708841e-01, 2.249726979295929e-01, 2.212960106196402e-01, 2.134045950357195e-01, 7.607044968747702e-02, 6.995137464803611e-02, 3.143668672467220e-01, 3.204674831599468e-01, 2.467511862846388e-01, 2.331436035026291e-01, 2.467511862846386e-01, 2.331436035026289e-01, -6.277506930303226e+00, -6.275962091291047e+00, -6.279692734085216e+00, -6.278073742314828e+00, -6.277630144656449e+00, -6.276035928883907e+00, -6.279505680396461e+00, -6.277954256829211e+00, -6.278625204740775e+00, -6.277022508020803e+00, -6.278625204740775e+00, -6.277022508020803e+00, -2.224296295909028e+00, -2.224174503717508e+00, -2.244154175978891e+00, -2.243461475835196e+00, -2.201259980549534e+00, -2.207837103150134e+00, -2.218523838830855e+00, -2.225229076420571e+00, -2.252357265305013e+00, -2.236667442683171e+00, -2.252357265305013e+00, -2.236667442683171e+00, -6.998738838387298e-01, -6.980787448443464e-01, -7.774030550191664e-01, -7.779991613872554e-01, -6.313527787212747e-01, -6.564824551082543e-01, -6.747364326974640e-01, -6.968893578202883e-01, -7.306466085309196e-01, -6.933902980389133e-01, -7.306466085309198e-01, -6.933902980389134e-01, -3.966598450697190e-02, -4.187077458052903e-02, -1.584940018288683e-01, -1.596823988943206e-01, -2.689413650130521e-02, -3.449798377382084e-02, -2.344136335550362e+00, -2.343121561851128e+00, -6.713181671859764e-02, -8.367837256654585e-02, -6.713181671859764e-02, -8.367837256654585e-02, 3.207965226737576e-01, 3.321797738353637e-01, 2.984309713997134e-01, 3.052311558976170e-01, 1.790993666174695e-01, 1.668129599485128e-01, 1.254947595469160e-02, 1.306283114778919e-02, 2.311484566138962e-01, 1.968726111952793e-01, 2.311484566138961e-01, 1.968726111952799e-01, -7.235366901424630e-01, -7.264351648596762e-01, -7.141311435009052e-01, -7.170646021620927e-01, -7.172946769605291e-01, -7.202352945865921e-01, -7.200297793621736e-01, -7.229197787074906e-01, -7.186494047966003e-01, -7.215640223073260e-01, -7.186494047966003e-01, -7.215640223073260e-01, -7.060551384979614e-01, -7.084059856758330e-01, -5.712107907364421e-01, -5.740577987254495e-01, -6.086245455545842e-01, -6.117113267033665e-01, -6.466622243491150e-01, -6.490609311599538e-01, -6.274292918349568e-01, -6.299015205460957e-01, -6.274292918349568e-01, -6.299015205460957e-01, -8.136212569271252e-01, -8.153331090464792e-01, -2.183751879906630e-01, -2.201825030530216e-01, -2.790393877192175e-01, -2.830118903889396e-01, -3.998151953745175e-01, -4.022746968927748e-01, -3.375260750047405e-01, -3.376396003536602e-01, -3.375260750047404e-01, -3.376396003536601e-01, -5.243525331268729e-01, -5.286254000519126e-01, 8.227990681297680e-02, 8.148126891540015e-02, 4.962652701722724e-02, 4.487881589823141e-02, -3.896078279332561e-01, -3.961828517304411e-01, -1.585296808092181e-02, -2.828295129780941e-02, -1.585296808092178e-02, -2.828295129780929e-02, 2.074859182048344e-01, 2.015845658822140e-01, 3.608774651341810e-01, 2.906790408626431e-01, 3.018019278565913e-01, 2.855820239354817e-01, -1.332929911333741e-02, -1.489277169973876e-02, 1.805231847544710e-01, 2.032876793694669e-01, 1.805231847544710e-01, 2.032876793694669e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_g96_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_g96", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.311536610394364e-08, 0.000000000000000e+00, -1.311544265593569e-08, -1.311530939350949e-08, 0.000000000000000e+00, -1.311540139132314e-08, -1.311494370873752e-08, 0.000000000000000e+00, -1.311492898722179e-08, -1.311558896009761e-08, 0.000000000000000e+00, -1.311574995168545e-08, -1.311534158541141e-08, 0.000000000000000e+00, -1.311528618076831e-08, -1.311534158541141e-08, 0.000000000000000e+00, -1.311528618076831e-08, -1.721016523819583e-05, 0.000000000000000e+00, -1.721669966766711e-05, -1.721065027329957e-05, 0.000000000000000e+00, -1.721767517623941e-05, -1.722739571539954e-05, 0.000000000000000e+00, -1.723139874169706e-05, -1.718731827758022e-05, 0.000000000000000e+00, -1.719248708902599e-05, -1.721947607285963e-05, 0.000000000000000e+00, -1.720582479442574e-05, -1.721947607285963e-05, 0.000000000000000e+00, -1.720582479442574e-05, -1.093532416461420e-02, 0.000000000000000e+00, -1.091075498602809e-02, -1.095355161653110e-02, 0.000000000000000e+00, -1.092195086933969e-02, -1.125537611612142e-02, 0.000000000000000e+00, -1.134148189188574e-02, -1.097913554336091e-02, 0.000000000000000e+00, -1.095710464658567e-02, -1.080676592928768e-02, 0.000000000000000e+00, -1.143918480511769e-02, -1.080676592928768e-02, 0.000000000000000e+00, -1.143918480511769e-02, -1.832257970389149e+00, 0.000000000000000e+00, -1.615237072024886e+00, -1.771934461460551e+00, 0.000000000000000e+00, -1.534526615977557e+00, -6.324789078189908e-03, 0.000000000000000e+00, -5.855936011253646e-03, -4.370343420332237e+00, 0.000000000000000e+00, -4.156403339946515e+00, -1.552239420047976e+00, 0.000000000000000e+00, -1.314225094762351e+01, -1.552239420047975e+00, 0.000000000000000e+00, -1.314225094762350e+01, -2.336438130613828e+05, 0.000000000000000e+00, -1.886706754082908e+05, -1.996723927983208e+05, 0.000000000000000e+00, -1.568344768370564e+05, -4.612461501613455e+02, 0.000000000000000e+00, -3.817895592938111e+02, -1.371868356118386e+06, 0.000000000000000e+00, -1.449965645984788e+06, -3.483330387724179e+05, 0.000000000000000e+00, -2.814657881998601e+06, -3.483330387724180e+05, 0.000000000000000e+00, -2.814657881998599e+06, -4.020892055453871e-06, 0.000000000000000e+00, -4.024414009647694e-06, -4.026111696459706e-06, 0.000000000000000e+00, -4.029461352604830e-06, -4.021128325311059e-06, 0.000000000000000e+00, -4.024549181887740e-06, -4.025606763621939e-06, 0.000000000000000e+00, -4.029134269161287e-06, -4.023599819066903e-06, 0.000000000000000e+00, -4.026949918640010e-06, -4.023599819066903e-06, 0.000000000000000e+00, -4.026949918640010e-06, -1.371969896250570e-04, 0.000000000000000e+00, -1.372225465695048e-04, -1.340139825321954e-04, 0.000000000000000e+00, -1.341411984190161e-04, -1.384894525310048e-04, 0.000000000000000e+00, -1.381581162189512e-04, -1.356904271964619e-04, 0.000000000000000e+00, -1.353183843723967e-04, -1.344643445630749e-04, 0.000000000000000e+00, -1.354726218767066e-04, -1.344643445630749e-04, 0.000000000000000e+00, -1.354726218767066e-04, -2.193166655142131e-02, 0.000000000000000e+00, -2.218129330735872e-02, -2.191236028391377e-02, 0.000000000000000e+00, -2.203453764043997e-02, -3.098386822421156e-02, 0.000000000000000e+00, -2.743399018456692e-02, -3.547127021166605e-02, 0.000000000000000e+00, -3.090386386551861e-02, -1.939918079619063e-02, 0.000000000000000e+00, -2.352966462389097e-02, -1.939918079619064e-02, 0.000000000000000e+00, -2.352966462389097e-02, -1.480769578447419e+01, 0.000000000000000e+00, -1.437625155159336e+01, -1.526150162188583e+00, 0.000000000000000e+00, -1.499624774558237e+00, -2.118804960534479e+01, 0.000000000000000e+00, -1.765836742238638e+01, -2.707416017488742e-04, 0.000000000000000e+00, -2.713382955287491e-04, -9.555619028628429e+00, 0.000000000000000e+00, -8.149600271101168e+00, -9.555619028628429e+00, 0.000000000000000e+00, -8.149600271101168e+00, -3.913914694552596e+06, 0.000000000000000e+00, -3.359412002358139e+06, -1.607742363457197e+06, 0.000000000000000e+00, -1.510250860025734e+06, -5.526952495839080e+06, 0.000000000000000e+00, -4.582428122497763e+06, -8.033475392497913e+01, 0.000000000000000e+00, -7.825230601698834e+01, -4.703655081433620e+06, 0.000000000000000e+00, -1.546338259076274e+06, -4.703655081433618e+06, 0.000000000000000e+00, -1.546338259076275e+06, -3.944192391238943e-02, 0.000000000000000e+00, -3.912829195686277e-02, -3.126367656952259e-02, 0.000000000000000e+00, -3.093302692525163e-02, -3.305975565252502e-02, 0.000000000000000e+00, -3.273876450672119e-02, -3.519881675624306e-02, 0.000000000000000e+00, -3.484540560484564e-02, -3.403304945017678e-02, 0.000000000000000e+00, -3.369693999368058e-02, -3.403304945017678e-02, 0.000000000000000e+00, -3.369693999368058e-02, -5.316861477674457e-02, 0.000000000000000e+00, -5.258837707065007e-02, -3.816272134067316e-02, 0.000000000000000e+00, -3.763552058057854e-02, -3.530726701308570e-02, 0.000000000000000e+00, -3.484766279964239e-02, -3.435928434005787e-02, 0.000000000000000e+00, -3.395584139841486e-02, -3.461218321778625e-02, 0.000000000000000e+00, -3.417167981045201e-02, -3.461218321778625e-02, 0.000000000000000e+00, -3.417167981045201e-02, -1.773450924700586e-02, 0.000000000000000e+00, -1.780365145211338e-02, -6.630250861204543e-01, 0.000000000000000e+00, -6.501457416904773e-01, -3.583612032377379e-01, 0.000000000000000e+00, -3.473550356886024e-01, -1.480469819575805e-01, 0.000000000000000e+00, -1.452294890471079e-01, -2.265220596500052e-01, 0.000000000000000e+00, -2.273244338418810e-01, -2.265220596500055e-01, 0.000000000000000e+00, -2.273244338418811e-01, -5.295258900012109e-02, 0.000000000000000e+00, -5.184906727685864e-02, -4.869762886393829e+02, 0.000000000000000e+00, -4.756141062512318e+02, -1.732563818925731e+02, 0.000000000000000e+00, -1.549830439551629e+02, -1.894622226686542e-01, 0.000000000000000e+00, -1.803619882038901e-01, -3.818972079762936e+01, 0.000000000000000e+00, -3.247999933575507e+01, -3.818972079762936e+01, 0.000000000000000e+00, -3.247999933575506e+01, -6.484802339169800e+04, 0.000000000000000e+00, -5.739934960015994e+04, -1.866232580426311e+08, 0.000000000000000e+00, -1.988546986042803e+08, -1.462110610274916e+07, 0.000000000000000e+00, -1.187637569784887e+07, -4.491618471826977e+01, 0.000000000000000e+00, -4.236300951883083e+01, -6.225324207696609e+06, 0.000000000000000e+00, -2.107350995056686e+06, -6.225324207696628e+06, 0.000000000000000e+00, -2.107350995056695e+06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
