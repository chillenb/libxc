
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_ecmv92_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ecmv92", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.103744949654577e+01, -2.103747256217813e+01, -2.103765355925697e+01, -2.103727429805609e+01, -2.103746100776701e+01, -2.103746100776701e+01, -3.491072624214570e+00, -3.491041624211067e+00, -3.490333978631314e+00, -3.492294089348512e+00, -3.491071551433027e+00, -3.491071551433027e+00, -7.035781390735624e-01, -7.036949727412192e-01, -7.092068251324020e-01, -7.133879623167316e-01, -7.036164988427241e-01, -7.036164988427241e-01, -2.218507934213287e-01, -2.224027512859656e-01, -8.174568327085063e-01, -1.893852057147390e-01, -2.219857892684421e-01, -2.219857892684421e-01, -1.919574430234958e-02, -2.009924903622914e-02, -7.851310416645611e-02, -9.236572672607727e-03, -1.988994959993636e-02, -1.988994959993636e-02, -5.052801985621421e+00, -5.052154141651623e+00, -5.052742172458965e+00, -5.052238323880558e+00, -5.052460434481596e+00, -5.052460434481596e+00, -2.135447287455716e+00, -2.144563242487171e+00, -2.137737203278532e+00, -2.144809114793664e+00, -2.138718120987422e+00, -2.138718120987422e+00, -5.766366840422523e-01, -5.972722880684127e-01, -5.494008043607325e-01, -5.495565938002107e-01, -5.941879323450867e-01, -5.941879323450867e-01, -1.562832524318855e-01, -2.467106258054998e-01, -1.532174630044164e-01, -1.816947353556364e+00, -1.699098427970107e-01, -1.699098427970107e-01, -8.910668650827359e-03, -1.018127041659161e-02, -7.631256858005285e-03, -1.051192711616238e-01, -9.276640514412392e-03, -9.276640514412392e-03, -5.595997242922126e-01, -5.630931506199359e-01, -5.619322987577455e-01, -5.609764677087655e-01, -5.614614535206609e-01, -5.614614535206609e-01, -5.404797581844366e-01, -5.200653045973105e-01, -5.259653201780288e-01, -5.314057721440917e-01, -5.284358595582869e-01, -5.284358595582869e-01, -6.272869481639135e-01, -2.897116221629896e-01, -3.208606778487015e-01, -3.695383690100753e-01, -3.429102217603100e-01, -3.429102217603099e-01, -4.722372396628249e-01, -7.339283123560404e-02, -9.654638378408148e-02, -3.384869337541819e-01, -1.297055080704919e-01, -1.297055080704919e-01, -2.248126767024752e-02, -2.789732840934526e-03, -5.298368429013501e-03, -1.235970487464231e-01, -7.884832757476349e-03, -7.884832757476338e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_ecmv92_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ecmv92", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.516007299287159e+01, -2.516016207220777e+01, -2.516056395151852e+01, -2.515910515959487e+01, -2.516011993286365e+01, -2.516011993286365e+01, -4.033009460386982e+00, -4.033052822979493e+00, -4.034410889783372e+00, -4.032925939785033e+00, -4.033048943087259e+00, -4.033048943087259e+00, -7.463855859507066e-01, -7.450864239109662e-01, -7.123945202846653e-01, -7.186108007173899e-01, -7.459137879353148e-01, -7.459137879353148e-01, -1.984275946487446e-01, -2.005576114298371e-01, -9.132419547099817e-01, -1.680739222067052e-01, -1.990414787227143e-01, -1.990414787227143e-01, -2.540437946406859e-02, -2.658060957089826e-02, -9.609757550675398e-02, -1.229765114513173e-02, -2.630422611439233e-02, -2.630422611439233e-02, -6.205748526349518e+00, -6.208483548161205e+00, -6.206028020421981e+00, -6.208154665938064e+00, -6.207151413124518e+00, -6.207151413124518e+00, -2.150181654336843e+00, -2.167974147170955e+00, -2.140494113383897e+00, -2.154281513232399e+00, -2.175138714615818e+00, -2.175138714615818e+00, -6.786430304138551e-01, -7.674789245686306e-01, -6.418438120428350e-01, -6.935384003027667e-01, -7.092223978480590e-01, -7.092223978480590e-01, -1.567020985170920e-01, -2.138278181204415e-01, -1.521460138224453e-01, -2.334145328185846e+00, -1.578493339898387e-01, -1.578493339898387e-01, -1.186445057740007e-02, -1.355047433950664e-02, -1.015751778437586e-02, -1.194575269531026e-01, -1.234628210633900e-02, -1.234628210633900e-02, -7.368605527800621e-01, -7.264831371061250e-01, -7.301892248269043e-01, -7.330516880243055e-01, -7.316195825473624e-01, -7.316195825473625e-01, -7.143252288425587e-01, -5.704238167480610e-01, -6.103162591458343e-01, -6.496274086120382e-01, -6.295573953580275e-01, -6.295573953580279e-01, -8.035895390973156e-01, -2.544273239704650e-01, -2.969964819230427e-01, -3.931632313149023e-01, -3.395780939261591e-01, -3.395780939261588e-01, -5.121591118881594e-01, -9.143360476326640e-02, -1.139457963137778e-01, -3.793213080155856e-01, -1.344131119173426e-01, -1.344131119173423e-01, -2.971044513551209e-02, -3.718981650278369e-03, -7.060281573075171e-03, -1.278530790642362e-01, -1.049636154941010e-02, -1.049636154941008e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_ecmv92_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ecmv92", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-7.317173432737215e-09, -7.317125998508559e-09, -7.316827929758578e-09, -7.317606421453476e-09, -7.317149140225987e-09, -7.317149140225987e-09, -9.950987415536882e-06, -9.951163234380258e-06, -9.954353279601245e-06, -9.940421927370010e-06, -9.950908284289666e-06, -9.950908284289666e-06, -6.520799643932615e-03, -6.527734181819555e-03, -6.630992790136640e-03, -6.461003580317590e-03, -6.523432899291562e-03, -6.523432899291562e-03, -7.580423939507869e-01, -7.469450220230996e-01, -3.413210863786567e-03, -1.269477419430305e+00, -7.551502418110110e-01, -7.551502418110110e-01, -8.480675125339694e+00, -8.500709605374180e+00, -3.421475740073561e+00, -6.023233560761621e+00, -8.830882389983145e+00, -8.830882389983145e+00, -2.152337230734264e-06, -2.152556565775193e-06, -2.152350436156248e-06, -2.152521078370836e-06, -2.152461853664896e-06, -2.152461853664896e-06, -8.050200402891613e-05, -7.886620095138081e-05, -8.054959302951669e-05, -7.927662675709513e-05, -7.930989146657251e-05, -7.930989146657251e-05, -1.314683169296569e-02, -1.090976955555201e-02, -1.605970836294437e-02, -1.515799509902187e-02, -1.151756578234162e-02, -1.151756578234162e-02, -1.652268660162766e+00, -4.861082833415296e-01, -1.878756304335773e+00, -1.273605836081522e-04, -1.659724133632755e+00, -1.659724133632755e+00, -6.389916382141510e+00, -6.401855873435386e+00, -1.832413773736323e+01, -3.212387683699773e+00, -9.455791026762684e+00, -9.455791026762267e+00, -1.570319509918412e-02, -1.387690360308108e-02, -1.421491270840669e-02, -1.464572649839033e-02, -1.440487942453355e-02, -1.440487942453355e-02, -1.894483713145631e-02, -2.118913332688846e-02, -1.923639069094471e-02, -1.765381265341000e-02, -1.844135382442363e-02, -1.844135382442353e-02, -8.945621307071045e-03, -2.625189755901786e-01, -1.693203781926042e-01, -8.546103415510155e-02, -1.228335131259435e-01, -1.228335131259435e-01, -3.149067381119244e-02, -2.920632016324687e+00, -2.830253235907624e+00, -1.157765144401711e-01, -2.894124650950056e+00, -2.894124650950073e+00, -6.367252094899600e+00, -1.101951821167882e+01, -9.486309086745441e+00, -3.548437192712665e+00, -1.381087869041876e+01, -1.381087869043066e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
