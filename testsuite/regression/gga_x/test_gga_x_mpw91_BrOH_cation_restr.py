
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_mpw91_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_mpw91", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.107168452773222e+01, -2.107171123062007e+01, -2.107189951879376e+01, -2.107150079796330e+01, -2.107169982613678e+01, -2.107169982613678e+01, -3.495399298528053e+00, -3.495360879080683e+00, -3.494558357142552e+00, -3.496617430223239e+00, -3.495437494108950e+00, -3.495437494108950e+00, -7.015281925580149e-01, -7.015293894206968e-01, -7.033715764925055e-01, -7.081758477816020e-01, -7.063292658220812e-01, -7.063292658220812e-01, -2.178543292203308e-01, -2.186498505624787e-01, -8.099090543753360e-01, -1.902131739979672e-01, -1.997906448327937e-01, -1.997906448327937e-01, -8.545072624780740e-04, -1.008450550647801e-03, -5.562058456426808e-02, -1.796762089895697e-04, -3.752516164169615e-04, -3.752516164169612e-04, -5.062291587705317e+00, -5.061583752492017e+00, -5.062270258658584e+00, -5.061645221519881e+00, -5.061926683123344e+00, -5.061926683123344e+00, -2.124804908155252e+00, -2.134786761790286e+00, -2.125969356079565e+00, -2.134776000057076e+00, -2.129756925303291e+00, -2.129756925303291e+00, -5.843406966777280e-01, -6.049154130060879e-01, -5.450615191949617e-01, -5.396113705513360e-01, -5.900447990644795e-01, -5.900447990644795e-01, -1.560676220810434e-01, -2.376118238812029e-01, -1.473314912198076e-01, -1.819669312381238e+00, -1.664517266971926e-01, -1.664517266971926e-01, -9.919758852783757e-05, -1.813229248339189e-04, -1.941305243050408e-04, -1.058263026809066e-01, -2.318077276691254e-04, -2.318077276691256e-04, -5.514765009857678e-01, -5.557707389078180e-01, -5.543598874976844e-01, -5.531226474627097e-01, -5.537496769128594e-01, -5.537496769128594e-01, -5.341215844743115e-01, -5.136107646672153e-01, -5.203522898895225e-01, -5.261684504890966e-01, -5.230853391457463e-01, -5.230853391457463e-01, -6.354500257521233e-01, -2.794434978440918e-01, -3.125375333981427e-01, -3.679201205764305e-01, -3.375434173038662e-01, -3.375434173038662e-01, -4.739859079615112e-01, -5.055357499237351e-02, -8.232146312042375e-02, -3.443107233553954e-01, -1.276162572932621e-01, -1.276162572932621e-01, -2.009189437033512e-03, -9.652860807165870e-06, -5.390028378111458e-05, -1.220440439140418e-01, -2.073416211306208e-04, -2.073416211306208e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_mpw91_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_mpw91", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.521488843091455e+01, -2.521498268042030e+01, -2.521538500990438e+01, -2.521398312282598e+01, -2.521472004849597e+01, -2.521472004849597e+01, -4.060239689925316e+00, -4.060278106390496e+00, -4.061266498852283e+00, -4.060320096651849e+00, -4.060383626956034e+00, -4.060383626956034e+00, -7.680858700568736e-01, -7.668814926636807e-01, -7.383163334748366e-01, -7.448033698305494e-01, -7.437124758218898e-01, -7.437124758218898e-01, -1.935718822133929e-01, -1.961516873602173e-01, -8.995570557583455e-01, -1.571871011390809e-01, -1.689819469926231e-01, -1.689819469926231e-01, -3.145345755775023e-03, -3.709015674725906e-03, -1.257100797434423e-01, -6.610629018912651e-04, -1.382508630833635e-03, -1.382508630833639e-03, -6.204923642786968e+00, -6.207433207924010e+00, -6.205036907446681e+00, -6.207252352098270e+00, -6.206196516910575e+00, -6.206196516910575e+00, -2.210702184707483e+00, -2.228496989984996e+00, -2.195161743923358e+00, -2.210787650254328e+00, -2.228172177302597e+00, -2.228172177302597e+00, -6.886563483393824e-01, -7.732621433237511e-01, -6.342791625557833e-01, -6.806976606544584e-01, -7.023994683182998e-01, -7.023994683182998e-01, -1.413694973106888e-01, -1.997702339929594e-01, -1.385003517129270e-01, -2.331007991069863e+00, -1.383671273104732e-01, -1.383671273104732e-01, -3.644684495445215e-04, -6.672002281329370e-04, -7.150517738478861e-04, -1.333747756530066e-01, -8.538137718081920e-04, -8.538137718081948e-04, -7.231576218134927e-01, -7.117113038299679e-01, -7.157339026753082e-01, -7.190657476341221e-01, -7.174036786197876e-01, -7.174036786197876e-01, -7.063634390542995e-01, -5.644910202876096e-01, -6.006816278937879e-01, -6.399084867732414e-01, -6.195704138410845e-01, -6.195704138410845e-01, -8.093841253079451e-01, -2.456199457974002e-01, -2.928838499661674e-01, -3.961851844373946e-01, -3.389931410929437e-01, -3.389931410929437e-01, -5.191599141520644e-01, -1.215420958502080e-01, -1.432726775097935e-01, -3.868718194975402e-01, -1.230795558474063e-01, -1.230795558474063e-01, -7.347139784018615e-03, -3.528495649744108e-05, -1.978066582968099e-04, -1.239137135536930e-01, -7.636380149168888e-04, -7.636380149168841e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_mpw91_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_mpw91", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-7.293452320190780e-09, -7.293418614790404e-09, -7.293167214711392e-09, -7.293670795947220e-09, -7.293421357630912e-09, -7.293421357630912e-09, -9.607144981361011e-06, -9.607568331698217e-06, -9.616424768955477e-06, -9.593752006992362e-06, -9.606726214550378e-06, -9.606726214550378e-06, -5.966677293531977e-03, -5.968991873645659e-03, -5.984359017994014e-03, -5.819285788406364e-03, -5.877832133278165e-03, -5.877832133278165e-03, -7.185948350519892e-01, -7.029343360293229e-01, -3.347995511465870e-03, -1.308250767648386e+00, -1.057814881190012e+00, -1.057814881190011e+00, 2.964198230187482e+02, 3.080294996137420e+02, 3.090980090720840e+01, 3.079341584739851e+02, 3.662528636817652e+02, 3.662528636817682e+02, -2.203772264285554e-06, -2.205451601666455e-06, -2.203827703085340e-06, -2.205310404258177e-06, -2.204634334123394e-06, -2.204634334123394e-06, -7.211326310074687e-05, -7.067806440425754e-05, -7.218705026108244e-05, -7.091305051135405e-05, -7.128514702401677e-05, -7.128514702401677e-05, -1.230815959287992e-02, -1.109691073820432e-02, -1.624825927622079e-02, -1.732794914890216e-02, -1.185278347476615e-02, -1.185278347476615e-02, -2.247645254254949e+00, -5.313333567127505e-01, -2.526242599308725e+00, -1.358431710379220e-04, -2.168939459993548e+00, -2.168939459993548e+00, 4.238918119108386e+02, 3.609214700620854e+02, 2.169865528028458e+03, -1.228777756594097e+00, 1.010923797780182e+03, 1.010923797780188e+03, -1.753812462666843e-02, -1.560478980827343e-02, -1.596196776946322e-02, -1.643539349170572e-02, -1.616702087489079e-02, -1.616702087489079e-02, -2.031981543982120e-02, -2.074799137193575e-02, -1.956238814203748e-02, -1.883292445165252e-02, -1.917719444033284e-02, -1.917719444033284e-02, -9.080623344645048e-03, -2.677434785857540e-01, -1.631612728935970e-01, -7.923221124670329e-02, -1.150935725943967e-01, -1.150935725943967e-01, -2.862918387269371e-02, 3.520383659468001e+01, 8.813887853850137e+00, -1.022968453964983e-01, -4.115314239682873e+00, -4.115314239682875e+00, 2.205286726330623e+02, 2.204669476841412e+03, 9.319324468859863e+02, -4.034183368183911e+00, 1.282520452012683e+03, 1.282520452012682e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
