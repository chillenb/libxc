
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_pbe_tca_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbe_tca", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.097384748901567e+01, -2.097387342022103e+01, -2.097405899435300e+01, -2.097367174723229e+01, -2.097386465815473e+01, -2.097386465815473e+01, -3.481911132815412e+00, -3.481869992199215e+00, -3.481004593226160e+00, -3.483170868137874e+00, -3.481945740765347e+00, -3.481945740765347e+00, -7.015714478768565e-01, -7.016742093558704e-01, -7.066248297809270e-01, -7.112813107062127e-01, -7.093274984481188e-01, -7.093274984481188e-01, -2.250590445859942e-01, -2.254717954699661e-01, -8.089651987590830e-01, -1.986835862256967e-01, -2.081985193758324e-01, -2.081985193758324e-01, -1.244597729760368e-02, -1.309780405505510e-02, -7.022959447290013e-02, -7.193617573117951e-03, -9.036737285519673e-03, -9.036737285519673e-03, -5.038682818670497e+00, -5.038008972191849e+00, -5.038662826841473e+00, -5.038067775105862e+00, -5.038335063180981e+00, -5.038335063180981e+00, -2.137034775076941e+00, -2.146152321728213e+00, -2.140364243141744e+00, -2.148376551735186e+00, -2.140494051744118e+00, -2.140494051744118e+00, -5.818026651909977e-01, -6.029142734006230e-01, -5.429197168354045e-01, -5.374878245414767e-01, -5.873509540962785e-01, -5.873509540962785e-01, -1.599481443871463e-01, -2.478260712988005e-01, -1.504195573180746e-01, -1.813865842987625e+00, -1.731447377018879e-01, -1.731447377018879e-01, -5.551001610073614e-03, -7.032302410833819e-03, -5.376281925422727e-03, -1.080862419721508e-01, -6.476788986161756e-03, -6.476788986161756e-03, -5.507732683966547e-01, -5.539877317276889e-01, -5.528664691854943e-01, -5.519265532533968e-01, -5.523967011150555e-01, -5.523967011150555e-01, -5.339860344944621e-01, -5.134660461117926e-01, -5.184837914805146e-01, -5.236856963560318e-01, -5.207490777633589e-01, -5.207490777633589e-01, -6.332276696073134e-01, -2.892709151495018e-01, -3.196578324286816e-01, -3.685437813352477e-01, -3.411916368892428e-01, -3.411916368892428e-01, -4.739980770394939e-01, -6.746884818531579e-02, -8.996744808487989e-02, -3.436121766863253e-01, -1.300246562063676e-01, -1.300246562063676e-01, -1.754908515496834e-02, -1.880383390066875e-03, -3.946515576066779e-03, -1.239970543474550e-01, -5.993180946312655e-03, -5.993180946312650e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_pbe_tca_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbe_tca", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.503961702365578e+01, -2.503972204955209e+01, -2.504015406468957e+01, -2.503859221068104e+01, -2.503941555235438e+01, -2.503941555235438e+01, -4.007088591411992e+00, -4.007145426807432e+00, -4.008557986257968e+00, -4.006863612962711e+00, -4.007253331060526e+00, -4.007253331060526e+00, -7.463389607244217e-01, -7.448344384400012e-01, -7.087731337427098e-01, -7.153935266517769e-01, -7.145780153522030e-01, -7.145780153522030e-01, -1.844892917068396e-01, -1.861855330705136e-01, -8.776258158103324e-01, -1.651550012107924e-01, -1.681480866355660e-01, -1.681480866355661e-01, -1.655627773261429e-02, -1.741778316233009e-02, -8.826852726783978e-02, -9.584432581733845e-03, -1.203321077414459e-02, -1.203321077414459e-02, -6.185948472970610e+00, -6.188919643976168e+00, -6.186080830085347e+00, -6.188703859713703e+00, -6.187456904289084e+00, -6.187456904289084e+00, -2.116994809826480e+00, -2.136008603588015e+00, -2.097760555217721e+00, -2.114384229333496e+00, -2.137019370618864e+00, -2.137019370618864e+00, -6.818130404640017e-01, -7.739699475239279e-01, -6.262343060877521e-01, -6.807534294741932e-01, -6.968308909686151e-01, -6.968308909686151e-01, -1.578385624103530e-01, -2.006719952715906e-01, -1.523699990700648e-01, -2.333378086901948e+00, -1.530776296407108e-01, -1.530776296407108e-01, -7.397613332247426e-03, -9.369250362189593e-03, -7.160365436063276e-03, -1.228678488625518e-01, -8.626164698550801e-03, -8.626164698550801e-03, -7.247335432135538e-01, -7.124240179817968e-01, -7.167058640912042e-01, -7.202838236581811e-01, -7.184898582572640e-01, -7.184898582572640e-01, -7.075258531698405e-01, -5.491045925786832e-01, -5.919500921150394e-01, -6.372155575289813e-01, -6.140483051362063e-01, -6.140483051362063e-01, -8.099717130852366e-01, -2.354852732047791e-01, -2.757174875746051e-01, -3.831310324523563e-01, -3.217173740756454e-01, -3.217173740756454e-01, -5.045175519787700e-01, -8.541818359029871e-02, -1.091034847177328e-01, -3.786344156633407e-01, -1.337428969687862e-01, -1.337428969687862e-01, -2.330219935399078e-02, -2.506874967770868e-03, -5.260072634476756e-03, -1.309163734516426e-01, -7.982400697617437e-03, -7.982400697617430e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_pbe_tca_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbe_tca", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-7.406934567832659e-09, -7.406872758705792e-09, -7.406539081920410e-09, -7.407459902332734e-09, -7.406985771917920e-09, -7.406985771917920e-09, -1.016995923301729e-05, -1.017013853324361e-05, -1.017328413065205e-05, -1.016009234149448e-05, -1.016919361747570e-05, -1.016919361747570e-05, -6.744397168769609e-03, -6.756875135014486e-03, -7.000612939335158e-03, -6.798269123807535e-03, -6.861095107755445e-03, -6.861095107755445e-03, -8.571877535117455e-01, -8.434164905157984e-01, -3.731822490984928e-03, -1.353373641594410e+00, -1.188615427189520e+00, -1.188615427189520e+00, -5.668122096137530e+00, -5.986966743487333e+00, -3.220498409656201e+00, -5.156056698364494e+00, -6.548193268319251e+00, -6.548193268319269e+00, -2.153195432277053e-06, -2.152817379019367e-06, -2.153166400958899e-06, -2.152832836997832e-06, -2.153010299921868e-06, -2.153010299921868e-06, -8.486041615534656e-05, -8.299096526058487e-05, -8.534901545009339e-05, -8.369224169257918e-05, -8.358003767581060e-05, -8.358003767581060e-05, -1.277881005542104e-02, -9.971614712981663e-03, -1.716006414059381e-02, -1.603802528304590e-02, -1.213063532237938e-02, -1.213063532237938e-02, -1.867144963334282e+00, -5.890638077621621e-01, -2.101047697291280e+00, -1.214224341382185e-04, -2.018756793434672e+00, -2.018756793434672e+00, -6.794806352365319e+00, -6.068165267356931e+00, -3.809997552430795e+01, -3.378820301402276e+00, -1.773024156060919e+01, -1.773024156060915e+01, -1.390819741365877e-02, -1.395998429502965e-02, -1.394176290163463e-02, -1.392710271421417e-02, -1.393449314319921e-02, -1.393449314319921e-02, -1.561313427283004e-02, -2.336788204550980e-02, -2.087329273179369e-02, -1.864431565019442e-02, -1.976994294731775e-02, -1.976994294731775e-02, -8.229497601099322e-03, -3.167450314738655e-01, -1.982884184653006e-01, -9.088990623973671e-02, -1.380367531323975e-01, -1.380367531323976e-01, -3.234890180870025e-02, -2.952404573998774e+00, -2.854552196457830e+00, -1.126470801107197e-01, -3.463851409032500e+00, -3.463851409032503e+00, -4.562519502886357e+00, -2.979158506177826e+01, -1.441586866298512e+01, -3.576977051813103e+00, -2.239550279547264e+01, -2.239550279547269e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
