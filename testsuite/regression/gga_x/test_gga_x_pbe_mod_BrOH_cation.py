
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_pbe_mod_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbe_mod", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.094586479491268e+01, -2.094589221155561e+01, -2.094608185688164e+01, -2.094567256010509e+01, -2.094587738955557e+01, -2.094587738955557e+01, -3.473577058768845e+00, -3.473539034524367e+00, -3.472745242500093e+00, -3.474785210136196e+00, -3.473615465400007e+00, -3.473615465400007e+00, -6.974940948059125e-01, -6.975168890862403e-01, -6.998553031681235e-01, -7.045933529360284e-01, -7.046179548231650e-01, -7.046179548231650e-01, -2.157331683700821e-01, -2.168315126758324e-01, -8.055499867656959e-01, -1.824281694924036e-01, -2.110160719259655e-01, -2.110160719259654e-01, -1.010593028148226e-02, -1.064149013198763e-02, -5.776349872460108e-02, -5.829079870216381e-03, -8.134595773167670e-03, -8.134595773167670e-03, -5.034956582413203e+00, -5.034338952028262e+00, -5.034938922209734e+00, -5.034393495639575e+00, -5.034637533382040e+00, -5.034637533382040e+00, -2.114445696495126e+00, -2.124259053281810e+00, -2.115867375590481e+00, -2.124533277448886e+00, -2.119193731217492e+00, -2.119193731217492e+00, -5.807427533542847e-01, -6.028223967279294e-01, -5.419809284822383e-01, -5.376126778959397e-01, -5.871638278840752e-01, -5.871638278840752e-01, -1.392061979669104e-01, -2.315098810345919e-01, -1.301878979899808e-01, -1.813615579955672e+00, -1.554360579154294e-01, -1.554360579154294e-01, -4.500491262706709e-03, -5.698239944969156e-03, -4.363371151709381e-03, -9.089246956980140e-02, -5.480939329834783e-03, -5.480939329834785e-03, -5.507672424429675e-01, -5.539141429429015e-01, -5.528237830264948e-01, -5.519035347892794e-01, -5.523645098749792e-01, -5.523645098749792e-01, -5.339869859465116e-01, -5.106243328240478e-01, -5.171058255465641e-01, -5.232123944672256e-01, -5.198905006918083e-01, -5.198905006918083e-01, -6.331158827673931e-01, -2.761051289393222e-01, -3.108528278039484e-01, -3.659071756896214e-01, -3.360532481479507e-01, -3.360532481479507e-01, -4.712673563423077e-01, -5.532236306077708e-02, -7.455157727609071e-02, -3.422605004980850e-01, -1.120904247730653e-01, -1.120904247730653e-01, -1.423857592795258e-02, -1.523266764215711e-03, -3.203227993496561e-03, -1.061357619727355e-01, -5.033451380588345e-03, -5.033451380588340e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_pbe_mod_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbe_mod", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.514278775329112e+01, -2.514275811999271e+01, -2.514290337181238e+01, -2.514284209286861e+01, -2.514324330013175e+01, -2.514333757374127e+01, -2.514193836424331e+01, -2.514167407865234e+01, -2.514285822339856e+01, -2.514231698413979e+01, -2.514285822339856e+01, -2.514231698413979e+01, -4.036797429366854e+00, -4.036982069096512e+00, -4.036840063017967e+00, -4.037032164013513e+00, -4.037950329527663e+00, -4.038265270852647e+00, -4.036678457216606e+00, -4.036998532826920e+00, -4.036027959899441e+00, -4.038056884567387e+00, -4.036027959899441e+00, -4.038056884567387e+00, -7.575036294557810e-01, -7.623581338497644e-01, -7.557191524859566e-01, -7.616390460233832e-01, -7.334029906079961e-01, -7.265472219562915e-01, -7.352154070767530e-01, -7.374333443657698e-01, -7.711864883107341e-01, -7.062450266946364e-01, -7.711864883107341e-01, -7.062450266946364e-01, -2.010162503991430e-01, -2.056357949507421e-01, -2.016115581080901e-01, -2.072897408567486e-01, -8.712791006986984e-01, -9.098881753117884e-01, -1.804819579923480e-01, -1.821280883816164e-01, -2.089897403782657e-01, -1.547838056044132e-01, -2.089897403782656e-01, -1.547838056044131e-01, -1.301505051013334e-02, -1.382707154144042e-02, -1.363521395951889e-02, -1.460262828136499e-02, -7.262885648964450e-02, -7.629147922590002e-02, -7.832580855628797e-03, -7.702280518473460e-03, -1.161478989476627e-02, -6.613956427040870e-03, -1.161478989476627e-02, -6.613956427040870e-03, -6.200767463254619e+00, -6.199214974378111e+00, -6.203581060384376e+00, -6.201933161768459e+00, -6.200922606352574e+00, -6.199307550310360e+00, -6.203336840128864e+00, -6.201776901580560e+00, -6.202209418453673e+00, -6.200580276468988e+00, -6.202209418453673e+00, -6.200580276468988e+00, -2.186437215158098e+00, -2.186323055621697e+00, -2.203959545202125e+00, -2.203324928180955e+00, -2.169711020654590e+00, -2.174333880206102e+00, -2.184612176354284e+00, -2.189480421244551e+00, -2.209293271177430e+00, -2.197014203813530e+00, -2.209293271177430e+00, -2.197014203813530e+00, -6.865410942434080e-01, -6.848079963928685e-01, -7.739597563557349e-01, -7.747040570459813e-01, -6.178285581759133e-01, -6.431936575075305e-01, -6.702679264488177e-01, -6.920984781670757e-01, -7.181465887943872e-01, -6.810758035591854e-01, -7.181465887943871e-01, -6.810758035591854e-01, -1.563232690333247e-01, -1.567353987989489e-01, -2.227789792526287e-01, -2.234090330412798e-01, -1.461574548919961e-01, -1.508692639860223e-01, -2.334849128158813e+00, -2.333861777233214e+00, -1.635338500118145e-01, -1.614345274206683e-01, -1.635338500118145e-01, -1.614345274206683e-01, -5.877093316585787e-03, -6.107712163658045e-03, -7.536242066367086e-03, -7.650349203169116e-03, -5.634250197848281e-03, -5.965981659886852e-03, -1.107001772627517e-01, -1.114728546319404e-01, -5.755768072345368e-03, -7.900401260945321e-03, -5.755768072345370e-03, -7.900401260945322e-03, -7.233039216654028e-01, -7.262382276306695e-01, -7.112193959747963e-01, -7.142296116800705e-01, -7.153811302469368e-01, -7.183926956208050e-01, -7.189193355238550e-01, -7.218567809812125e-01, -7.171432575593538e-01, -7.201167226346035e-01, -7.171432575593538e-01, -7.201167226346035e-01, -7.063552114960394e-01, -7.087097365417515e-01, -5.572335217929162e-01, -5.599918628264426e-01, -5.952800445744427e-01, -5.984341501920518e-01, -6.377745617870083e-01, -6.402181564085851e-01, -6.159423124176291e-01, -6.184414218555414e-01, -6.159423124176291e-01, -6.184414218555414e-01, -8.094475508529588e-01, -8.113957603957032e-01, -2.599961095522179e-01, -2.609164531378216e-01, -2.959802190170315e-01, -2.982146991609086e-01, -3.905320557491779e-01, -3.928736079163805e-01, -3.365522506196709e-01, -3.364411015442166e-01, -3.365522506196709e-01, -3.364411015442166e-01, -5.115887512168484e-01, -5.157027161728686e-01, -7.152339508353316e-02, -7.197016341634507e-02, -9.310346629510642e-02, -9.565678703501833e-02, -3.801659931181682e-01, -3.866806514439344e-01, -1.281863776506068e-01, -1.300166749522787e-01, -1.281863776506068e-01, -1.300166749522787e-01, -1.859080654406201e-02, -1.925964090294317e-02, -2.028592765842384e-03, -2.033172084543920e-03, -4.126941080112548e-03, -4.389135879728157e-03, -1.235522519952517e-01, -1.250431901693347e-01, -5.450994012579135e-03, -7.242467202572229e-03, -5.450994012579128e-03, -7.242467202572220e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_pbe_mod_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbe_mod", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.410255397344940e-08, 0.000000000000000e+00, -1.410263206992053e-08, -1.410244012437206e-08, 0.000000000000000e+00, -1.410254932171608e-08, -1.410194847511708e-08, 0.000000000000000e+00, -1.410188050159881e-08, -1.410323745519498e-08, 0.000000000000000e+00, -1.410352239910272e-08, -1.410249250645282e-08, 0.000000000000000e+00, -1.410277232166751e-08, -1.410249250645282e-08, 0.000000000000000e+00, -1.410277232166751e-08, -1.902749007247406e-05, 0.000000000000000e+00, -1.903322677584048e-05, -1.902784045099269e-05, 0.000000000000000e+00, -1.903402345572943e-05, -1.904083917505237e-05, 0.000000000000000e+00, -1.904380213823115e-05, -1.900602290930344e-05, 0.000000000000000e+00, -1.901012270492748e-05, -1.903836884403270e-05, 0.000000000000000e+00, -1.902005632719991e-05, -1.903836884403270e-05, 0.000000000000000e+00, -1.902005632719991e-05, -1.212717678545679e-02, 0.000000000000000e+00, -1.213269523747187e-02, -1.213427959965166e-02, 0.000000000000000e+00, -1.214176094139483e-02, -1.220680439680194e-02, 0.000000000000000e+00, -1.216422638342219e-02, -1.184513003391840e-02, 0.000000000000000e+00, -1.186367109635761e-02, -1.205002852705442e-02, 0.000000000000000e+00, -1.137774176134274e-02, -1.205002852705442e-02, 0.000000000000000e+00, -1.137774176134274e-02, -1.288164254830774e+00, 0.000000000000000e+00, -1.210482211402142e+00, -1.293930596890231e+00, 0.000000000000000e+00, -1.198960536356606e+00, -7.024769921165789e-03, 0.000000000000000e+00, -6.536763096693220e-03, -1.707135759896760e+00, 0.000000000000000e+00, -1.653359995330149e+00, -1.110597456559390e+00, 0.000000000000000e+00, -2.424004745625786e+00, -1.110597456559389e+00, 0.000000000000000e+00, -2.424004745625788e+00, -4.901138985566025e+00, 0.000000000000000e+00, -4.852012600610781e+00, -5.164072517527399e+00, 0.000000000000000e+00, -5.137656374153632e+00, -2.861121191200781e+00, 0.000000000000000e+00, -2.876397405561943e+00, -4.489227639177258e+00, 0.000000000000000e+00, -4.367362634300152e+00, -4.892941257123519e+00, 0.000000000000000e+00, -1.241481422331086e+01, -4.892941257123533e+00, 0.000000000000000e+00, -1.241481422331089e+01, -4.150667838426266e-06, 0.000000000000000e+00, -4.154503431544466e-06, -4.151102105070531e-06, 0.000000000000000e+00, -4.154924934028343e-06, -4.150659940192981e-06, 0.000000000000000e+00, -4.154494959671081e-06, -4.151033064173979e-06, 0.000000000000000e+00, -4.154878264937969e-06, -4.150916186027175e-06, 0.000000000000000e+00, -4.154720244144165e-06, -4.150916186027175e-06, 0.000000000000000e+00, -4.154720244144165e-06, -1.466490711640459e-04, 0.000000000000000e+00, -1.466749132291480e-04, -1.437687565985118e-04, 0.000000000000000e+00, -1.438930753734342e-04, -1.464985605347971e-04, 0.000000000000000e+00, -1.466132038743571e-04, -1.440555446799436e-04, 0.000000000000000e+00, -1.440940607888637e-04, -1.449950715643868e-04, 0.000000000000000e+00, -1.452241159301062e-04, -1.449950715643868e-04, 0.000000000000000e+00, -1.452241159301062e-04, -2.398660337703514e-02, 0.000000000000000e+00, -2.425377312989127e-02, -1.962178342502128e-02, 0.000000000000000e+00, -1.961368330213607e-02, -3.431145722126375e-02, 0.000000000000000e+00, -3.020709008473706e-02, -3.357260483242012e-02, 0.000000000000000e+00, -2.940407963402525e-02, -2.094417501068687e-02, 0.000000000000000e+00, -2.552114811459625e-02, -2.094417501068688e-02, 0.000000000000000e+00, -2.552114811459625e-02, -1.943014887536633e+00, 0.000000000000000e+00, -1.973870748287817e+00, -7.807364045703143e-01, 0.000000000000000e+00, -7.733242419634166e-01, -2.196245420212894e+00, 0.000000000000000e+00, -2.128427894019246e+00, -2.388796929211092e-04, 0.000000000000000e+00, -2.393268194449166e-04, -2.107170748595040e+00, 0.000000000000000e+00, -2.498188293656272e+00, -2.107170748595040e+00, 0.000000000000000e+00, -2.498188293656272e+00, -6.302035839486517e+00, 0.000000000000000e+00, -5.454632858957560e+00, -5.426572031055248e+00, 0.000000000000000e+00, -5.010227800063140e+00, -3.091035039483054e+01, 0.000000000000000e+00, -3.438577578028735e+01, -3.272697865086655e+00, 0.000000000000000e+00, -3.153533074981453e+00, -1.537112620988254e+01, 0.000000000000000e+00, -1.509841354695362e+01, -1.537112620988249e+01, 0.000000000000000e+00, -1.509841354695360e+01, -2.786690398586519e-02, 0.000000000000000e+00, -2.745360425089172e-02, -2.768899005451450e-02, 0.000000000000000e+00, -2.728520890112974e-02, -2.775105852029805e-02, 0.000000000000000e+00, -2.734439277571506e-02, -2.780412672782534e-02, 0.000000000000000e+00, -2.739382112865506e-02, -2.777773100499475e-02, 0.000000000000000e+00, -2.736917071410120e-02, -2.777773100499475e-02, 0.000000000000000e+00, -2.736917071410120e-02, -3.134798280706536e-02, 0.000000000000000e+00, -3.093903330784335e-02, -4.242981577564842e-02, 0.000000000000000e+00, -4.186754127653391e-02, -3.918279991374102e-02, 0.000000000000000e+00, -3.863759357224630e-02, -3.604519045153558e-02, 0.000000000000000e+00, -3.557945454522612e-02, -3.767951764592593e-02, 0.000000000000000e+00, -3.717210147847259e-02, -3.767951764592593e-02, 0.000000000000000e+00, -3.717210147847259e-02, -1.619976428810202e-02, 0.000000000000000e+00, -1.612953123519486e-02, -4.565710567898245e-01, 0.000000000000000e+00, -4.517022169160504e-01, -3.117798785923622e-01, 0.000000000000000e+00, -3.067552157367386e-01, -1.629529102510733e-01, 0.000000000000000e+00, -1.600039937840079e-01, -2.305819922174817e-01, 0.000000000000000e+00, -2.318751452347266e-01, -2.305819922174818e-01, 0.000000000000000e+00, -2.318751452347266e-01, -5.877919787916747e-02, 0.000000000000000e+00, -5.762645938222589e-02, -2.617600334156065e+00, 0.000000000000000e+00, -2.620604779179325e+00, -2.573243896542622e+00, 0.000000000000000e+00, -2.627713708681807e+00, -2.114833922793784e-01, 0.000000000000000e+00, -2.013235027545897e-01, -3.236131384433601e+00, 0.000000000000000e+00, -3.770221093887554e+00, -3.236131384433603e+00, 0.000000000000000e+00, -3.770221093887558e+00, -3.884030428890273e+00, 0.000000000000000e+00, -3.965050982947684e+00, -1.939020050272054e+01, 0.000000000000000e+00, -3.434678670655614e+01, -1.196730677552823e+01, 0.000000000000000e+00, -1.273999781588270e+01, -3.613205484250106e+00, 0.000000000000000e+00, -3.535994547608251e+00, -3.169069836599279e+01, 0.000000000000000e+00, -1.567408437600830e+01, -3.169069836599285e+01, 0.000000000000000e+00, -1.567408437600834e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
