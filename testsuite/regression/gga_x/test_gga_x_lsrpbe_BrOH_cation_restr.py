
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_lsrpbe_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_lsrpbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.098136588547775e+01, -2.098139143285984e+01, -2.098157595650763e+01, -2.098119440708150e+01, -2.098138423894449e+01, -2.098138423894449e+01, -3.484090108294124e+00, -3.484048198931825e+00, -3.483165119043656e+00, -3.485362594189379e+00, -3.484123847071392e+00, -3.484123847071392e+00, -7.025611857924822e-01, -7.026817349309474e-01, -7.081385525108456e-01, -7.127796588930758e-01, -7.108068523088991e-01, -7.108068523088991e-01, -2.254321588967172e-01, -2.259944110474627e-01, -8.099284791310926e-01, -1.934252878442510e-01, -2.066298797052666e-01, -2.066298797052666e-01, -1.407543494836448e-10, -1.345298055855264e-09, -2.984157619940453e-02, 0.000000000000000e+00, -9.433670117758969e-17, -9.433670117758969e-17, -5.039702358605376e+00, -5.039013512263412e+00, -5.039681746506098e+00, -5.039073449936142e+00, -5.039346945272245e+00, -5.039346945272245e+00, -2.141962618874119e+00, -2.150968699047933e+00, -2.145601901262051e+00, -2.153515774341777e+00, -2.145210123401453e+00, -2.145210123401453e+00, -5.820848789636570e-01, -6.029404614818923e-01, -5.432493860087186e-01, -5.375304790373652e-01, -5.875854142050183e-01, -5.875854142050183e-01, -1.373299358191219e-01, -2.453142282985298e-01, -1.256843960755370e-01, -1.813936204748750e+00, -1.624055938260089e-01, -1.624055938260089e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -7.582302001886249e-02, 0.000000000000000e+00, 0.000000000000000e+00, -5.507761928256790e-01, -5.540096117026628e-01, -5.528797310044563e-01, -5.519342691318413e-01, -5.524070076353818e-01, -5.524070076353818e-01, -5.339866771802962e-01, -5.141594647885374e-01, -5.188429778607723e-01, -5.238153340124305e-01, -5.209786851716213e-01, -5.209786851716213e-01, -6.332605831760617e-01, -2.894550706583208e-01, -3.207932815947602e-01, -3.691652524330390e-01, -3.421974078114802e-01, -3.421974078114802e-01, -4.746637934337433e-01, -2.584689789793510e-02, -5.092209459285758e-02, -3.439649231061573e-01, -1.067712636657500e-01, -1.067712636657500e-01, -5.821010550154298e-07, 0.000000000000000e+00, 0.000000000000000e+00, -9.855289283182192e-02, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_lsrpbe_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_lsrpbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.501327307505834e+01, -2.501337933074730e+01, -2.501381469972662e+01, -2.501223459082487e+01, -2.501306779896192e+01, -2.501306779896192e+01, -3.999891716497408e+00, -3.999950762112272e+00, -4.001414189600639e+00, -3.999629946785491e+00, -4.000058932656345e+00, -4.000058932656345e+00, -7.435949101577977e-01, -7.420583918064966e-01, -7.053969298980416e-01, -7.120077020966663e-01, -7.112098744819587e-01, -7.112098744819587e-01, -1.913422535798914e-01, -1.916123548684178e-01, -8.748122193579685e-01, -1.988749741627539e-01, -1.869499997188135e-01, -1.869499997188135e-01, -6.976970010681158e-09, -5.876982491884371e-08, -9.350870132449197e-02, -1.651067679684258e-25, -8.172460146551993e-15, -8.172460146552325e-15, -6.182234309761770e+00, -6.185257176900788e+00, -6.182368802872684e+00, -6.185037478960473e+00, -6.183769124643653e+00, -6.183769124643653e+00, -2.106695795679320e+00, -2.125681781022016e+00, -2.087495740462099e+00, -2.104046148931657e+00, -2.126742201505833e+00, -2.126742201505833e+00, -6.808520607717822e-01, -7.738692634263400e-01, -6.251411039543098e-01, -6.805919331575460e-01, -6.960170294073043e-01, -6.960170294073043e-01, -2.086276255481750e-01, -2.263105082714007e-01, -1.992638580328065e-01, -2.333106940505299e+00, -1.980232818299718e-01, -1.980232818299718e-01, -6.406989406109593e-37, -1.174456724992853e-24, -2.311679879738563e-17, -1.468095882842923e-01, -1.927495729770462e-17, -1.927495729770383e-17, -7.247219993044789e-01, -7.123397315651945e-01, -7.166543281082426e-01, -7.202536256036431e-01, -7.184496635293985e-01, -7.184496635293985e-01, -7.075232983797032e-01, -5.471536713315845e-01, -5.907805957017734e-01, -6.367488895483870e-01, -6.132587607379273e-01, -6.132587607379273e-01, -8.098456790064626e-01, -2.468001396726290e-01, -2.775223522182975e-01, -3.815276336671123e-01, -3.203211818528503e-01, -3.203211818528504e-01, -5.026690025489995e-01, -8.787647574949374e-02, -1.231346527961866e-01, -3.775654884146075e-01, -1.734043673746670e-01, -1.734043673746670e-01, -1.646226609452257e-05, -2.552969914668012e-151, -6.494084857020368e-50, -1.666965794178746e-01, -4.196710606809018e-18, -4.196710606808897e-18])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_lsrpbe_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_lsrpbe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-7.499013780804593e-09, -7.498949011330221e-09, -7.498604958254768e-09, -7.499569766599636e-09, -7.499072190410799e-09, -7.499072190410799e-09, -1.033163546838050e-05, -1.033179425432078e-05, -1.033444887466501e-05, -1.032198654045566e-05, -1.033082967058266e-05, -1.033082967058266e-05, -6.889340143165799e-03, -6.902810201060406e-03, -7.162420545902197e-03, -6.955360153025776e-03, -7.019588716202214e-03, -7.019588716202214e-03, -8.100568342338947e-01, -8.085577182262166e-01, -3.807908660157293e-03, -8.007846701357312e-01, -9.617148318179648e-01, -9.617148318179644e-01, 1.003230123946726e-03, 7.422689426745892e-03, 3.221134768349011e+01, 1.206231606516781e-19, 3.340748742869781e-09, 3.340748742869924e-09, -2.173718522623686e-06, -2.173195038245699e-06, -2.173683358030789e-06, -2.173221400312830e-06, -2.173459373348806e-06, -2.173459373348806e-06, -8.681505841976321e-05, -8.490679443758038e-05, -8.729612744861361e-05, -8.561020861491759e-05, -8.551110903628445e-05, -8.551110903628445e-05, -1.296075162325853e-02, -1.001681385686613e-02, -1.742939284511962e-02, -1.613558794484598e-02, -1.228896985045599e-02, -1.228896985045599e-02, 8.597374450065370e-01, -4.574731497085448e-01, 1.381444343139043e+00, -1.219431101827274e-04, -4.806039838366989e-01, -4.806039838366989e-01, 1.169600296981281e-30, 9.963574322586655e-19, 1.099498622509561e-10, 7.269373746865044e+00, 3.577050967886276e-11, 3.577050967886124e-11, -1.393049940531413e-02, -1.402037773236697e-02, -1.398895378779546e-02, -1.396320479214375e-02, -1.397615721284486e-02, -1.397615721284486e-02, -1.562508962891685e-02, -2.386371624664338e-02, -2.121958110936532e-02, -1.883967827363865e-02, -2.003975680659636e-02, -2.003975680659636e-02, -8.270227908651251e-03, -2.934032383575402e-01, -1.979050880320941e-01, -9.293170670240226e-02, -1.408732646837920e-01, -1.408732646837921e-01, -3.304322418744431e-02, 3.473344229146598e+01, 1.452866671362244e+01, -1.148277043726517e-01, 2.713736836412675e+00, 2.713736836412673e+00, 7.410193457414518e-01, 2.511080335538210e-143, 4.805516099861803e-43, 3.668414237055387e+00, 1.104794807410335e-11, 1.104794807410308e-11])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
