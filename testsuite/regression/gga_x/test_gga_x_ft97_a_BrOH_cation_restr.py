
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_ft97_a_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ft97_a", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.086758019784484e+01, -2.086760775520905e+01, -2.086779738353094e+01, -2.086738601090591e+01, -2.086759201325928e+01, -2.086759201325928e+01, -3.461396065389541e+00, -3.461356668664419e+00, -3.460531283274998e+00, -3.462624341803883e+00, -3.461432269789516e+00, -3.461432269789516e+00, -6.972610428167535e-01, -6.973803720864138e-01, -7.032379589427064e-01, -7.078035548020362e-01, -7.058201342164608e-01, -7.058201342164608e-01, -2.304027212303254e-01, -2.300747578736601e-01, -8.038803835126893e-01, -2.145943823299815e-01, -2.185068904994839e-01, -2.185068904994839e-01, -6.906494088726625e-02, -6.913328618412407e-02, -1.274839486098074e-01, -6.288695740183206e-02, -6.268227772657116e-02, -6.268227772657113e-02, -5.017762505806034e+00, -5.017206534427029e+00, -5.017747340043933e+00, -5.017256350324207e+00, -5.017474762309564e+00, -5.017474762309564e+00, -2.127831112622030e+00, -2.136497526478541e+00, -2.132174335452877e+00, -2.139739043678501e+00, -2.130604741201736e+00, -2.130604741201736e+00, -5.785807404345091e-01, -6.015984755276270e-01, -5.397418701065400e-01, -5.359596788147828e-01, -5.842744854063351e-01, -5.842744854063351e-01, -1.924888209597274e-01, -2.613574300259314e-01, -1.846910667695126e-01, -1.810103595765208e+00, -1.942580320152935e-01, -1.942580320152935e-01, -5.668644797339468e-02, -6.058324361257691e-02, -3.971856067431553e-02, -1.504959327793032e-01, -4.804092007050307e-02, -4.804092007050308e-02, -5.503241864212786e-01, -5.528293086499184e-01, -5.519458483137344e-01, -5.512122706511740e-01, -5.515781750552496e-01, -5.515781750552496e-01, -5.337748474711234e-01, -5.102846434088159e-01, -5.153657994691887e-01, -5.213445800163169e-01, -5.179406483230057e-01, -5.179406483230057e-01, -6.317305986959127e-01, -2.973617487803873e-01, -3.224899741017943e-01, -3.664104884996200e-01, -3.406682576358639e-01, -3.406682576358639e-01, -4.710830892110433e-01, -1.272793803957035e-01, -1.430857096322657e-01, -3.414480430550047e-01, -1.616954772527180e-01, -1.616954772527180e-01, -7.805263851856066e-02, -3.488621856970407e-02, -4.573125805845033e-02, -1.579147091894484e-01, -4.514282449854242e-02, -4.514282449854240e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_ft97_a_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ft97_a", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.507065195026680e+01, -2.507076021751467e+01, -2.507120160751042e+01, -2.506959161935542e+01, -2.507044090432503e+01, -2.507044090432503e+01, -4.003084085019260e+00, -4.003149248358610e+00, -4.004753473645239e+00, -4.002724170489775e+00, -4.003258712888935e+00, -4.003258712888935e+00, -7.381761256159635e-01, -7.364023728880628e-01, -6.919111784833614e-01, -6.988860874534544e-01, -6.983869361404783e-01, -6.983869361404783e-01, -1.587838177598703e-01, -1.620427536175740e-01, -8.708271459044415e-01, -1.267030017312585e-01, -1.353004822202530e-01, -1.353004822202530e-01, -2.075412389369941e-02, -2.122859301958249e-02, -6.663035997140207e-02, -1.579752938296125e-02, -1.718441120380504e-02, -1.718441120380503e-02, -6.198477042502807e+00, -6.201507964644050e+00, -6.198611931105100e+00, -6.201287747197157e+00, -6.200016183806929e+00, -6.200016183806929e+00, -2.059371071809981e+00, -2.080689316134429e+00, -2.034027744262342e+00, -2.052800121039909e+00, -2.083504789534811e+00, -2.083504789534811e+00, -6.820065189308182e-01, -7.753055959573506e-01, -6.257216110670255e-01, -6.821237922990550e-01, -6.974973897547649e-01, -6.974973897547649e-01, -1.138185463655213e-01, -1.598748691760879e-01, -1.094561120760863e-01, -2.337264874340790e+00, -1.134587141321929e-01, -1.134587141321929e-01, -1.348524559268123e-02, -1.529974649950746e-02, -1.062441846216464e-02, -8.793773536736771e-02, -1.283077423814371e-02, -1.283077423814372e-02, -7.252825480037546e-01, -7.136175544183196e-01, -7.177170095193491e-01, -7.211082138309277e-01, -7.194117490614296e-01, -7.194117490614296e-01, -7.077961981443087e-01, -5.435951758203916e-01, -5.909581141655792e-01, -6.383995144312790e-01, -6.144422127475765e-01, -6.144422127475765e-01, -8.114448741677143e-01, -2.000025979455878e-01, -2.508223848987148e-01, -3.772478290458078e-01, -3.076532283593549e-01, -3.076532283593548e-01, -4.990475359179581e-01, -6.523474122801107e-02, -7.963389687591148e-02, -3.765288194824273e-01, -9.589933245292327e-02, -9.589933245292317e-02, -2.587973996501962e-02, -6.929463688015103e-03, -1.043293836963688e-02, -9.364998976811907e-02, -1.198580846314664e-02, -1.198580846314666e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_ft97_a_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ft97_a", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-6.969623168425920e-09, -6.969551760185062e-09, -6.969200141047661e-09, -6.970263280618296e-09, -6.969711053331470e-09, -6.969711053331470e-09, -9.796280815429923e-06, -9.796291749160769e-06, -9.795581313285897e-06, -9.789374389016876e-06, -9.795349384276707e-06, -9.795349384276707e-06, -6.830557137075982e-03, -6.852771979273118e-03, -7.370934013434157e-03, -7.144641552373374e-03, -7.202814231084984e-03, -7.202814231084984e-03, -1.100651150612541e+00, -1.066572004198949e+00, -3.732173704987138e-03, -2.162854408703817e+00, -1.694600979628432e+00, -1.694600979628432e+00, -1.054054210834017e+04, -9.243057189326782e+03, -6.196928854506811e+01, -4.971702208483146e+04, -2.756402794400335e+04, -2.756402794400335e+04, -1.989682515225492e-06, -1.988532858525816e-06, -1.989622621960246e-06, -1.988607808116477e-06, -1.989103613782185e-06, -1.989103613782185e-06, -9.011531095838709e-05, -8.784626265535649e-05, -9.131089843507184e-05, -8.927837137121731e-05, -8.828131214167423e-05, -8.828131214167423e-05, -1.216800765848811e-02, -8.941630714949843e-03, -1.650562620100310e-02, -1.451545157433405e-02, -1.146039286832927e-02, -1.146039286832927e-02, -4.811678591915972e+00, -8.561657635111426e-01, -5.964390746089050e+00, -1.087207315321219e-04, -3.777660657016621e+00, -3.777660657016621e+00, -1.133579231352238e+05, -5.554858049132771e+04, -2.013505587133687e+05, -1.792582298819763e+01, -9.506121852541011e+04, -9.506121852541005e+04, -1.225064694223309e-02, -1.250252160781757e-02, -1.241553014823819e-02, -1.234272415872097e-02, -1.237932805392191e-02, -1.237932805392191e-02, -1.367905947361363e-02, -2.358645181930754e-02, -2.020833617574414e-02, -1.732907065169450e-02, -1.875083923159223e-02, -1.875083923159223e-02, -7.397901462409111e-03, -4.143151429688199e-01, -2.360655026907486e-01, -9.344113199544296e-02, -1.518879166258789e-01, -1.518879166258789e-01, -3.275069178077188e-02, -6.793433594498016e+01, -2.923355369462143e+01, -1.115421940508277e-01, -1.046364940510040e+01, -1.046364940510040e+01, -3.693749012101496e+03, -3.893596865425184e+06, -3.740030317831524e+05, -1.215118697061371e+01, -1.268999068571991e+05, -1.268999068571995e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
