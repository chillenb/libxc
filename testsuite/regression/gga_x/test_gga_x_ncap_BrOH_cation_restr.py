
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_ncap_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ncap", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.099505167466797e+01, -2.099507735047717e+01, -2.099526231187338e+01, -2.099487885230342e+01, -2.099506970496038e+01, -2.099506970496038e+01, -3.485676733827821e+00, -3.485635617416669e+00, -3.484770772785244e+00, -3.486936678966911e+00, -3.485711461530890e+00, -3.485711461530890e+00, -7.019658508553523e-01, -7.020496842715179e-01, -7.063441789980661e-01, -7.110373899889791e-01, -7.091066519530326e-01, -7.091066519530326e-01, -2.242549658550023e-01, -2.245720581238521e-01, -8.095936331568593e-01, -2.036883660403873e-01, -2.092125917792501e-01, -2.092125917792501e-01, -2.968635996477164e-01, -2.857438303989197e-01, -1.898793965356807e-01, -3.747138317722378e-01, -3.182487324536970e-01, -3.182487324536967e-01, -5.042877054139315e+00, -5.042177353201219e+00, -5.042856004968537e+00, -5.042238129892989e+00, -5.042516147500347e+00, -5.042516147500347e+00, -2.135633663248310e+00, -2.144958214214741e+00, -2.138457540499072e+00, -2.146662365981598e+00, -2.139441361465821e+00, -2.139441361465821e+00, -5.824257699049714e-01, -6.031402401272632e-01, -5.435076032778958e-01, -5.377719472578508e-01, -5.879598503845574e-01, -5.879598503845574e-01, -1.894083563130129e-01, -2.496927784089600e-01, -1.843446235065817e-01, -1.814501217050964e+00, -1.848371426763642e-01, -1.848371426763642e-01, -3.737175071641329e-01, -3.574735688731275e-01, -2.109009948253783e-01, -1.682980677479002e-01, -2.558113680115739e-01, -2.558113680115742e-01, -5.508264158428967e-01, -5.541838966664437e-01, -5.530105122057541e-01, -5.520282735751074e-01, -5.525194007177369e-01, -5.525194007177369e-01, -5.340043434006844e-01, -5.137869754658069e-01, -5.190389240227068e-01, -5.241571429966339e-01, -5.212992221663039e-01, -5.212992221663039e-01, -6.334914032588614e-01, -2.884593266313284e-01, -3.183634541503698e-01, -3.686325159046070e-01, -3.405672062919052e-01, -3.405672062919052e-01, -4.742677090029472e-01, -1.977850201930779e-01, -1.842382816769253e-01, -3.439240605799876e-01, -1.629824487184594e-01, -1.629824487184594e-01, -2.806355808904115e-01, -3.261024074272232e-01, -3.262260756639064e-01, -1.623304774973695e-01, -2.429845448181086e-01, -2.429845448181085e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_ncap_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ncap", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.503963161402572e+01, -2.503973469986423e+01, -2.504016120291368e+01, -2.503862815573956e+01, -2.503943595746285e+01, -2.503943595746285e+01, -4.012321648365280e+00, -4.012373917396333e+00, -4.013681356331102e+00, -4.012171129462649e+00, -4.012481039294644e+00, -4.012481039294644e+00, -7.508078224121864e-01, -7.494082620285197e-01, -7.159901146636525e-01, -7.225450570864584e-01, -7.216424113008251e-01, -7.216424113008251e-01, -1.793004112562206e-01, -1.826457531179647e-01, -8.816993073058964e-01, -1.266740450970749e-01, -1.486741990683357e-01, -1.486741990683356e-01, 1.478654209301135e-01, 1.429483447393353e-01, 5.451954322196539e-02, 1.758957064189002e-01, 1.545015371268665e-01, 1.545015371268665e-01, -6.182713976955185e+00, -6.185641588795525e+00, -6.182844505519526e+00, -6.185429059105153e+00, -6.184200064101827e+00, -6.184200064101827e+00, -2.140278174632981e+00, -2.158860316142428e+00, -2.122187388850812e+00, -2.138488001921925e+00, -2.159445665470640e+00, -2.159445665470640e+00, -6.822060085837467e-01, -7.735716220575555e-01, -6.269893001621281e-01, -6.803322667683530e-01, -6.969527958650235e-01, -6.969527958650235e-01, -6.181350010609411e-02, -1.735625301496868e-01, -5.126921868643283e-02, -2.332230760060946e+00, -9.460613186856119e-02, -9.460613186856119e-02, 1.711151391647317e-01, 1.681840940041565e-01, 1.015074172167724e-01, -4.439195141850835e-03, 1.230535141947780e-01, 1.230535141947781e-01, -7.246126537800384e-01, -7.120711012663458e-01, -7.164231401280130e-01, -7.200702185432746e-01, -7.182406520927668e-01, -7.182406520927668e-01, -7.074812726862926e-01, -5.521904729381321e-01, -5.929419174042643e-01, -6.369597578831474e-01, -6.142723675088337e-01, -6.142723675088337e-01, -8.095262904402331e-01, -2.259055690218238e-01, -2.772538532548057e-01, -3.860588843344898e-01, -3.259912917696801e-01, -3.259912917696801e-01, -5.075191729646336e-01, 6.245516997799345e-02, 2.950059793057931e-02, -3.800123872721383e-01, -4.053273496017626e-02, -4.053273496017630e-02, 1.416924901304485e-01, 1.348335515567840e-01, 1.462588777830416e-01, -3.184215474389245e-02, 1.166287004549232e-01, 1.166287004549233e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_ncap_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ncap", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-7.478478471555679e-09, -7.478421838147460e-09, -7.478101340294548e-09, -7.478945350023249e-09, -7.478512869660726e-09, -7.478512869660726e-09, -1.016656227295514e-05, -1.016681452741825e-05, -1.017164752593911e-05, -1.015552633353964e-05, -1.016588444574571e-05, -1.016588444574571e-05, -6.603759648001363e-03, -6.612577597631252e-03, -6.772916063164888e-03, -6.580101580009910e-03, -6.642705941912131e-03, -6.642705941912131e-03, -8.877169237601498e-01, -8.606625891561552e-01, -3.671748163551372e-03, -1.965967910948791e+00, -1.414783538153662e+00, -1.414783538153662e+00, -8.033816686762233e+04, -6.825748298022122e+04, -1.844971827827021e+02, -4.935149097375651e+05, -2.403148540292211e+05, -2.403148540292212e+05, -2.188900890213060e-06, -2.188815009943111e-06, -2.188883741259060e-06, -2.188808160412103e-06, -2.188864978716017e-06, -2.188864978716017e-06, -8.194614530433424e-05, -8.019490544684222e-05, -8.230455969059960e-05, -8.074792542345265e-05, -8.080210424730793e-05, -8.080210424730793e-05, -1.283838013228286e-02, -1.020481246050914e-02, -1.716513430427324e-02, -1.639544531002998e-02, -1.222761393606362e-02, -1.222761393606362e-02, -6.425229241450338e+00, -7.234270874438499e-01, -8.481186688305449e+00, -1.242678923441146e-04, -3.940947741593809e+00, -3.940947741593809e+00, -1.222003676162631e+06, -5.470331271362948e+05, -1.820268196104207e+06, -3.497879304330567e+01, -8.613434183705130e+05, -8.613434183705127e+05, -1.418511421003985e-02, -1.428706032322577e-02, -1.426545354923361e-02, -1.423852004287945e-02, -1.425336962596797e-02, -1.425336962596797e-02, -1.585489852681237e-02, -2.290955337456426e-02, -2.082042791669945e-02, -1.891448429098268e-02, -1.989539869892210e-02, -1.989539869892210e-02, -8.420558259982983e-03, -3.346638191108317e-01, -1.939901631283964e-01, -8.853116660395362e-02, -1.327450256077356e-01, -1.327450256077357e-01, -3.167844770048886e-02, -2.120973422912989e+02, -7.236953475235349e+01, -1.112840602689897e-01, -1.545378015018330e+01, -1.545378015018330e+01, -2.437006680729310e+04, -5.602900613449863e+07, -4.300984149667924e+06, -1.918763005264144e+01, -1.159912082244863e+06, -1.159912082244867e+06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
