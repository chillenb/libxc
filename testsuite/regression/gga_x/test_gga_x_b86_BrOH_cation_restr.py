
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_b86_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_b86", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.103505196129247e+01, -2.103507690531637e+01, -2.103526000067799e+01, -2.103488739984115e+01, -2.103507236554474e+01, -2.103507236554474e+01, -3.493850887192356e+00, -3.493808639766534e+00, -3.492917835889767e+00, -3.495130411657759e+00, -3.493884455866117e+00, -3.493884455866117e+00, -7.041556168227970e-01, -7.042513948869281e-01, -7.087580803045538e-01, -7.134637850410893e-01, -7.115240195611993e-01, -7.115240195611993e-01, -2.224109431654312e-01, -2.231954013514492e-01, -8.119856640738309e-01, -1.913880682176093e-01, -2.032033503455080e-01, -2.032033503455080e-01, -1.099837863126460e-02, -1.157502780869088e-02, -6.266396819285631e-02, -6.355203124962278e-03, -7.984293646037756e-03, -7.984293646037756e-03, -5.050636893070122e+00, -5.049893574136542e+00, -5.050614055684067e+00, -5.049957672092574e+00, -5.050253764542653e+00, -5.050253764542653e+00, -2.142949819389488e+00, -2.152305855081672e+00, -2.145753559864927e+00, -2.154003382397732e+00, -2.146765576453123e+00, -2.146765576453123e+00, -5.836680205931352e-01, -6.036555137080144e-01, -5.447679783901958e-01, -5.383527071619515e-01, -5.891259464099831e-01, -5.891259464099831e-01, -1.486849397399168e-01, -2.413210977076564e-01, -1.391924542283549e-01, -1.815983633727978e+00, -1.643126402626935e-01, -1.643126402626935e-01, -4.903837563108961e-03, -6.212718060444974e-03, -4.749988849157134e-03, -9.808533027844926e-02, -5.722284844322836e-03, -5.722284844322836e-03, -5.510236813623778e-01, -5.546398932865767e-01, -5.533831667365452e-01, -5.523263396725576e-01, -5.528554779265431e-01, -5.528554779265431e-01, -5.341033785857748e-01, -5.153682904422314e-01, -5.203028062280720e-01, -5.250268619647624e-01, -5.223722035984598e-01, -5.223722035984598e-01, -6.340721131598636e-01, -2.852620108422653e-01, -3.183277443450680e-01, -3.698407647699275e-01, -3.416395510134753e-01, -3.416395510134753e-01, -4.757451737971782e-01, -6.012644793984152e-02, -8.076148395165404e-02, -3.448897619654809e-01, -1.200035104139397e-01, -1.200035104139398e-01, -1.551278670439376e-02, -1.661049763758117e-03, -3.486331275494142e-03, -1.139325158462914e-01, -5.294976083995263e-03, -5.294976083995259e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_b86_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_b86", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.501719651234131e+01, -2.501729986578428e+01, -2.501772700961827e+01, -2.501618999296279e+01, -2.501699995238823e+01, -2.501699995238823e+01, -4.008219274047913e+00, -4.008271630790822e+00, -4.009581114421153e+00, -4.008066698651954e+00, -4.008378671301347e+00, -4.008378671301347e+00, -7.506018971967299e-01, -7.492459562914536e-01, -7.178275739124331e-01, -7.242520174202062e-01, -7.232633247059864e-01, -7.232633247059864e-01, -1.973271439351641e-01, -1.984056845688624e-01, -8.810994521055235e-01, -1.789278696300457e-01, -1.825870901768794e-01, -1.825870901768794e-01, -1.464222663239302e-02, -1.540667591099125e-02, -8.034634615624880e-02, -8.469508352767765e-03, -1.063656893979698e-02, -1.063656893979698e-02, -6.178081190285360e+00, -6.181027300658084e+00, -6.178212475294008e+00, -6.180813360621780e+00, -6.179576703919583e+00, -6.179576703919583e+00, -2.148010052435481e+00, -2.165760107749732e+00, -2.132111680050280e+00, -2.147561395453588e+00, -2.165783419049749e+00, -2.165783419049749e+00, -6.815402684993384e-01, -7.731911474054237e-01, -6.263504190633830e-01, -6.799403745624633e-01, -6.963078032764756e-01, -6.963078032764756e-01, -1.608326204674135e-01, -2.180738218901347e-01, -1.535271042560892e-01, -2.331117602174023e+00, -1.628182554422800e-01, -1.628182554422800e-01, -6.536290185007668e-03, -8.279472884571636e-03, -6.328668758827357e-03, -1.174612795334253e-01, -7.624167526451193e-03, -7.624167526451190e-03, -7.244232081545336e-01, -7.117296009055448e-01, -7.161233034072692e-01, -7.198127704688253e-01, -7.179608935925852e-01, -7.179608935925852e-01, -7.073745793204627e-01, -5.519680132002766e-01, -5.923324128081464e-01, -6.364517073738999e-01, -6.136876070193770e-01, -6.136876070193770e-01, -8.091088785183713e-01, -2.528888394220747e-01, -2.888383940365475e-01, -3.862508788581137e-01, -3.293049192630219e-01, -3.293049192630219e-01, -5.073728598381829e-01, -7.746824762878575e-02, -1.010912330860539e-01, -3.796793322747558e-01, -1.338578625369911e-01, -1.338578625369912e-01, -2.062757370894583e-02, -2.214557291137158e-03, -4.647311303737437e-03, -1.295120759234965e-01, -7.055030180481114e-03, -7.055030180481110e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_b86_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_b86", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-7.670313092871529e-09, -7.670256330466886e-09, -7.669931372730932e-09, -7.670777382842337e-09, -7.670344406478694e-09, -7.670344406478694e-09, -1.040664371686489e-05, -1.040691686618854e-05, -1.041220889385228e-05, -1.039510704375989e-05, -1.040596779090528e-05, -1.040596779090528e-05, -6.715243159338073e-03, -6.722325036597983e-03, -6.814341318535730e-03, -6.624694550981714e-03, -6.690255793208263e-03, -6.690255793208263e-03, -7.358011412570795e-01, -7.309889143738358e-01, -3.742102011054913e-03, -1.034551279257017e+00, -9.594799048326135e-01, -9.594799048326134e-01, -3.291971006318294e+00, -3.477686390937209e+00, -1.922136878565348e+00, -2.992306238797100e+00, -3.801274761227899e+00, -3.801274761229569e+00, -2.249493626946867e-06, -2.249528449816632e-06, -2.249481058852824e-06, -2.249512027977479e-06, -2.249519253116703e-06, -2.249519253116703e-06, -8.218054715236148e-05, -8.052629183421555e-05, -8.228240392059872e-05, -8.082765802808175e-05, -8.120170273110045e-05, -8.120170273110045e-05, -1.315430998380105e-02, -1.056063704596112e-02, -1.757268377496101e-02, -1.691649622740916e-02, -1.253681056274185e-02, -1.253681056274185e-02, -1.260378957648462e+00, -4.706946277094500e-01, -1.397932535090058e+00, -1.286758565612204e-04, -1.460310298570495e+00, -1.460310298570495e+00, -3.942910644417167e+00, -3.521692132992046e+00, -2.211528582983808e+01, -2.118075661855445e+00, -1.029153584218676e+01, -1.029153584218916e+01, -1.483853669872717e-02, -1.479246717699019e-02, -1.480862443246610e-02, -1.482248027311082e-02, -1.481561461022821e-02, -1.481561461022821e-02, -1.669149647421327e-02, -2.331147934346854e-02, -2.130248065267255e-02, -1.942393269276229e-02, -2.039169298450106e-02, -2.039169298450106e-02, -8.706212128236884e-03, -2.687748895836910e-01, -1.786637222250565e-01, -8.972248686875593e-02, -1.307928558236933e-01, -1.307928558236933e-01, -3.221546487406676e-02, -1.755954132563392e+00, -1.733477534011628e+00, -1.135800032930778e-01, -2.285742645849115e+00, -2.285742645849108e+00, -2.652166476143450e+00, -1.728438440954087e+01, -8.364751500348232e+00, -2.328098704076867e+00, -1.299923107775344e+01, -1.299923107774547e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
