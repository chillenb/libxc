
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_hjs_pbe_sol_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_hjs_pbe_sol", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.041162959088981e+01, -2.041166312705873e+01, -2.041187270773015e+01, -2.041132234805960e+01, -2.041164677544761e+01, -2.041164677544761e+01, -3.309629309694989e+00, -3.309613939446487e+00, -3.309330751007847e+00, -3.310533909808338e+00, -3.309635766733764e+00, -3.309635766733764e+00, -6.052705969533501e-01, -6.050895584672390e-01, -6.020782991198960e-01, -6.064357443613952e-01, -6.052019700103115e-01, -6.052019700103115e-01, -1.416465957349159e-01, -1.427682810003587e-01, -7.221545376856271e-01, -1.072988450244478e-01, -1.419621675396951e-01, -1.419621675396951e-01, -1.693787959552628e-04, -1.999523882379777e-04, -2.012771798547644e-02, -1.535183919883933e-05, -1.925325755015928e-04, -1.925325755015928e-04, -4.884629148783436e+00, -4.884629281294656e+00, -4.884634005875075e+00, -4.884634024511090e+00, -4.884622195648719e+00, -4.884622195648719e+00, -1.937590512373889e+00, -1.948014587151663e+00, -1.937079844856206e+00, -1.945181044247453e+00, -1.945374991234030e+00, -1.945374991234030e+00, -4.983724429797330e-01, -5.307493335983825e-01, -4.711497301719837e-01, -4.811922069240016e-01, -5.172171805145532e-01, -5.172171805145532e-01, -7.839625881066767e-02, -1.585928721639356e-01, -7.590192673664962e-02, -1.735920661029269e+00, -9.005307616895628e-02, -9.005307616895628e-02, -1.374649755152660e-05, -2.075426884393718e-05, -8.568840774047470e-06, -3.825764173864623e-02, -1.556623183191782e-05, -1.556623183191781e-05, -4.976222646698401e-01, -4.976818304135333e-01, -4.976584347511990e-01, -4.976397211918874e-01, -4.976484369932734e-01, -4.976484369932734e-01, -4.793368968538868e-01, -4.355788551941918e-01, -4.477524909751431e-01, -4.593173965404404e-01, -4.532767412596416e-01, -4.532767412596416e-01, -5.598361567304377e-01, -2.000479359057326e-01, -2.334233372581372e-01, -2.901185586512953e-01, -2.593313808811759e-01, -2.593313808811759e-01, -3.889248079215449e-01, -1.704960208342323e-02, -3.215509368967032e-02, -2.650254285631166e-01, -5.694387354032071e-02, -5.694387354032071e-02, -3.016946836235454e-04, -4.131804896833521e-07, -2.840064399619832e-06, -5.215253252202559e-02, -9.462948805279026e-06, -9.462948805320054e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_hjs_pbe_sol_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_hjs_pbe_sol", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.556826029125023e+01, -2.556834058620545e+01, -2.556871846997289e+01, -2.556740321748612e+01, -2.556830247166041e+01, -2.556830247166041e+01, -4.069352804868711e+00, -4.069384814093128e+00, -4.070434596982659e+00, -4.069501297523336e+00, -4.069386865951031e+00, -4.069386865951031e+00, -7.124563211000147e-01, -7.112431460027456e-01, -6.796825279604324e-01, -6.860759005971696e-01, -7.120156873316507e-01, -7.120156873316507e-01, -1.462375259829994e-01, -1.493367226704643e-01, -8.794029651890176e-01, -9.893861697635907e-02, -1.471625253820534e-01, -1.471625253820534e-01, -3.680600900850469e-04, -4.367667769649173e-04, -3.055910733118651e-02, -3.109105276760085e-05, -4.199909742673376e-04, -4.199909742673376e-04, -6.231229223845943e+00, -6.233383944781205e+00, -6.231450816336368e+00, -6.233126223458470e+00, -6.232332530858215e+00, -6.232332530858215e+00, -2.172989986394303e+00, -2.191147651067960e+00, -2.163288120394203e+00, -2.177427938326534e+00, -2.197982495808773e+00, -2.197982495808773e+00, -6.336711403201921e-01, -7.124350243705220e-01, -5.969900587745527e-01, -6.404918895942933e-01, -6.631715033975899e-01, -6.631715033975899e-01, -7.939135122303727e-02, -1.488441506113181e-01, -7.602387060190584e-02, -2.287639485295443e+00, -8.456927727707243e-02, -8.456927727707243e-02, -2.780002845619567e-05, -4.223076573963052e-05, -1.724859290872645e-05, -4.780881871899028e-02, -3.152893383910544e-05, -3.152893383910464e-05, -6.786301983679210e-01, -6.707684754594352e-01, -6.735855725995712e-01, -6.757631640486204e-01, -6.746738126411692e-01, -6.746738126411692e-01, -6.555998338602468e-01, -5.291622384288803e-01, -5.655400988906978e-01, -6.000548409297765e-01, -5.825331227065653e-01, -5.825331227065653e-01, -7.491194061819498e-01, -1.981523064773694e-01, -2.484690503327164e-01, -3.490152689560260e-01, -2.949277180328621e-01, -2.949277180328621e-01, -4.700765686504831e-01, -2.731738754288605e-02, -4.354619324230140e-02, -3.328433718802655e-01, -6.055399275540686e-02, -6.055399275540668e-02, -6.670496037204949e-04, -8.265191701434575e-07, -5.690223409414467e-06, -5.546734752441600e-02, -1.906359318584418e-05, -1.906359318590531e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_hjs_pbe_sol_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_hjs_pbe_sol", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.223230137270348e-09, -4.223197906504170e-09, -4.223011238362724e-09, -4.223539891239810e-09, -4.223213498303579e-09, -4.223213498303579e-09, -5.827850354005150e-06, -5.827906795293335e-06, -5.828495548654301e-06, -5.822540350098872e-06, -5.827780102533674e-06, -5.827780102533674e-06, -3.902568204943009e-03, -3.910268893661531e-03, -4.076200432863684e-03, -3.966455513774097e-03, -3.905420393283064e-03, -3.905420393283064e-03, -4.735925502691083e-01, -4.607131952884836e-01, -2.002391801468113e-03, -9.295875161452271e-01, -4.698901698824165e-01, -4.698901698824165e-01, -1.322697861163674e-01, -1.639012440136173e-01, -2.379504119295747e+00, -2.097143175229293e-03, -1.622732133357999e-01, -1.622732133357999e-01, -1.224440551058835e-06, -1.224126972880247e-06, -1.224404403152160e-06, -1.224160648706941e-06, -1.224285631702645e-06, -1.224285631702645e-06, -4.978556519612997e-05, -4.868579129205740e-05, -4.994468788368176e-05, -4.908388577453975e-05, -4.882815036724665e-05, -4.882815036724665e-05, -7.352039730938697e-03, -5.490269747366733e-03, -8.992321259572670e-03, -7.867842352958863e-03, -6.389879626659805e-03, -6.389879626659805e-03, -1.334874847494972e+00, -3.438571628634928e-01, -1.500373918922448e+00, -6.804775649766596e-05, -1.271140210011600e+00, -1.271140210011600e+00, -1.821858196536337e-03, -3.815843418074651e-03, -2.189218000199448e-03, -2.536644147193021e+00, -3.368800590180699e-03, -3.368800590180668e-03, -6.697137137067354e-03, -6.849904683501229e-03, -6.799405460717153e-03, -6.757725461365162e-03, -6.778938340837291e-03, -6.778938340837292e-03, -7.592415309624540e-03, -1.228529525912621e-02, -1.078154753605893e-02, -9.499236832690014e-03, -1.014319012502958e-02, -1.014319012502958e-02, -4.561772621669411e-03, -1.748265498488127e-01, -1.062170195551464e-01, -4.887907163445736e-02, -7.316139818469701e-02, -7.316139818469712e-02, -1.824371962838132e-02, -1.935381139957447e+00, -2.211394111931341e+00, -6.305676792399158e-02, -2.292908413817769e+00, -2.292908413817786e+00, -2.020929466377502e-01, -4.923633606635769e-06, -1.449014458214377e-04, -2.763976881062305e+00, -1.983801505231094e-03, -1.983801505222751e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
