
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_lambda_oc2_n_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_lambda_oc2_n", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.091690909387082e+01, -2.091693423209660e+01, -2.091712083949342e+01, -2.091670770762805e+01, -2.091692172850416e+01, -2.091692172850416e+01, -3.465123494211528e+00, -3.465096550822691e+00, -3.464499057719350e+00, -3.466263535543583e+00, -3.465124397406817e+00, -3.465124397406817e+00, -6.938247537187648e-01, -6.938081453098766e-01, -6.948956049709895e-01, -6.992630463189929e-01, -6.938153144405800e-01, -6.938153144405800e-01, -2.116504786493916e-01, -2.128553309217598e-01, -8.096559882516825e-01, -1.701163702566066e-01, -2.119942775372697e-01, -2.119942775372697e-01, -1.498008869429571e-02, -1.568855082011460e-02, -6.270159567114701e-02, -7.195392538367136e-03, -1.552511049714843e-02, -1.552511049714843e-02, -5.029058236752165e+00, -5.028514159577357e+00, -5.029008793475385e+00, -5.028585638038438e+00, -5.028770333602883e+00, -5.028770333602883e+00, -2.093046208749893e+00, -2.103112763988164e+00, -2.093659250769206e+00, -2.101505818380351e+00, -2.099037307530813e+00, -2.099037307530813e+00, -5.729093038238254e-01, -5.953644607628659e-01, -5.456472327297395e-01, -5.474646373234191e-01, -5.907324950635268e-01, -5.907324950635268e-01, -1.329609121736950e-01, -2.274853832441346e-01, -1.308049201180706e-01, -1.811126386334652e+00, -1.489399970720910e-01, -1.489399970720910e-01, -6.941387592014753e-03, -7.932174018302159e-03, -5.945315189870928e-03, -8.585498906590033e-02, -7.227416117739445e-03, -7.227416117739445e-03, -5.586203848823863e-01, -5.613846638782861e-01, -5.604137889441969e-01, -5.596456273639230e-01, -5.600308660815783e-01, -5.600308660815783e-01, -5.397560198314874e-01, -5.143869495517147e-01, -5.221840578316099e-01, -5.288202688017312e-01, -5.253192597968595e-01, -5.253192597968595e-01, -6.252124764953613e-01, -2.737529606452908e-01, -3.095557040901126e-01, -3.645195516304582e-01, -3.352938052918201e-01, -3.352938052918200e-01, -4.666431968471672e-01, -5.830505827133291e-02, -7.794936551248711e-02, -3.353298798955072e-01, -1.091042271419375e-01, -1.091042271419375e-01, -1.755136787136415e-02, -2.172424822168176e-03, -4.126459566708061e-03, -1.040287388256762e-01, -6.142642158061844e-03, -6.142642158061835e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_lambda_oc2_n_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_lambda_oc2_n", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.524347103905057e+01, -2.524355363270239e+01, -2.524393639964089e+01, -2.524258363216438e+01, -2.524351447659911e+01, -2.524351447659911e+01, -4.065106634007830e+00, -4.065137872658638e+00, -4.066164846636477e+00, -4.065258175718427e+00, -4.065140017500081e+00, -4.065140017500081e+00, -7.660167046528323e-01, -7.650745927309563e-01, -7.433063267899455e-01, -7.490831034221130e-01, -7.656730295980213e-01, -7.656730295980213e-01, -2.173524506639679e-01, -2.187944009286131e-01, -9.260179262850816e-01, -1.835792160932670e-01, -2.177544294514187e-01, -2.177544294514187e-01, -1.991199265737724e-02, -2.084736137353852e-02, -8.062732552905930e-02, -9.588133648237906e-03, -2.063031035492107e-02, -2.063031035492107e-02, -6.211260274521535e+00, -6.213745917951650e+00, -6.211514712387769e+00, -6.213447415650115e+00, -6.212534070327540e+00, -6.212534070327540e+00, -2.241673245725388e+00, -2.257229974838224e+00, -2.235807075462972e+00, -2.247818192021837e+00, -2.260240697278277e+00, -2.260240697278277e+00, -6.822162933789298e-01, -7.670276433327208e-01, -6.458728578721279e-01, -6.932189716269519e-01, -7.117300969087749e-01, -7.117300969087749e-01, -1.554372436616291e-01, -2.378701179135136e-01, -1.521091392128149e-01, -2.332765216856480e+00, -1.664187615987505e-01, -1.664187615987505e-01, -9.249891399858967e-03, -1.056832600225719e-02, -7.921455139208992e-03, -1.067936674243153e-01, -9.629286572178901e-03, -9.629286572178901e-03, -7.371639772500057e-01, -7.261099140729592e-01, -7.299854007558768e-01, -7.330462228325231e-01, -7.315080971610730e-01, -7.315080971610730e-01, -7.147166565385943e-01, -5.806582818974118e-01, -6.147550079902289e-01, -6.504322422896008e-01, -6.319185798950222e-01, -6.319185798950223e-01, -8.030933051983753e-01, -2.813276447421613e-01, -3.200437988484547e-01, -4.031934336515165e-01, -3.560753426246930e-01, -3.560753426246930e-01, -5.227064719508278e-01, -7.554940810993338e-02, -9.863921354910186e-02, -3.843924806207715e-01, -1.297812352135621e-01, -1.297812352135620e-01, -2.331611279223945e-02, -2.896353519007605e-03, -5.500591985530386e-03, -1.236297516944392e-01, -8.184797433234126e-03, -8.184797433234114e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_lambda_oc2_n_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_lambda_oc2_n", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-6.699061062234644e-09, -6.699028578934428e-09, -6.698788683787425e-09, -6.699322495119165e-09, -6.699044725618221e-09, -6.699044725618221e-09, -8.883537666792391e-06, -8.883829843800057e-06, -8.890391932141407e-06, -8.871555099398642e-06, -8.883536569550037e-06, -8.883536569550037e-06, -5.410785167415931e-03, -5.406830692882660e-03, -5.209528932696173e-03, -5.091270364608134e-03, -5.409480587660187e-03, -5.409480587660187e-03, -5.048364686197588e-01, -5.059515141032893e-01, -2.965513624634947e-03, -6.501151424952358e-01, -5.056008401193065e-01, -5.056008401193065e-01, -2.744003632448885e+00, -2.752217663574675e+00, -1.185365149359670e+00, -1.938872825654056e+00, -2.859077398365247e+00, -2.859077398365247e+00, -2.001764264489528e-06, -2.002522866130843e-06, -2.001832287092831e-06, -2.002422314284394e-06, -2.002167264388849e-06, -2.002167264388849e-06, -6.340727313312522e-05, -6.238186023457865e-05, -6.306441261682632e-05, -6.227714104993524e-05, -6.312988778233931e-05, -6.312988778233931e-05, -1.190173837309229e-02, -1.011941961608542e-02, -1.445997992455909e-02, -1.420303678100126e-02, -1.053058892869815e-02, -1.053058892869815e-02, -6.984366175065194e-01, -2.763449019786114e-01, -8.033804637831250e-01, -1.181723406671076e-04, -7.771772601547626e-01, -7.771772601547626e-01, -2.056802185030930e+00, -2.061396012086750e+00, -5.899914354490564e+00, -1.191701849812963e+00, -3.044804728695740e+00, -3.044804728695740e+00, -1.297793423852151e-02, -1.278950627638538e-02, -1.285648289573313e-02, -1.290890038673762e-02, -1.288269030792403e-02, -1.288269030792403e-02, -1.487528036544724e-02, -1.812168776063050e-02, -1.723169001403427e-02, -1.637962448959698e-02, -1.683951622528845e-02, -1.683951622528844e-02, -8.326461916963132e-03, -1.665969748950276e-01, -1.199800039888566e-01, -7.110633852603987e-02, -9.500334597628957e-02, -9.500334597628958e-02, -2.666455157795228e-02, -9.960514035659516e-01, -1.013433926028233e+00, -1.008521605397024e-01, -1.178686092992310e+00, -1.178686092992312e+00, -2.062691904940336e+00, -3.543329303656976e+00, -3.051416599160824e+00, -1.448002037740963e+00, -4.446277701736721e+00, -4.446277701736713e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
