
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_ecmv92_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ecmv92", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.103792553784335e+01, -2.103795204541039e+01, -2.103813959897331e+01, -2.103774378689680e+01, -2.103794126941830e+01, -2.103794126941830e+01, -3.491188714399542e+00, -3.491148648617518e+00, -3.490308235113710e+00, -3.492432721291564e+00, -3.491224834665936e+00, -3.491224834665936e+00, -7.024547358368031e-01, -7.025229321114884e-01, -7.064036189765406e-01, -7.111185242634958e-01, -7.091999955166305e-01, -7.091999955166305e-01, -2.219404028183679e-01, -2.226346583160251e-01, -8.103242565279757e-01, -1.924310776420331e-01, -2.034703247731932e-01, -2.034703247731932e-01, -1.139586143691843e-02, -1.199311631782770e-02, -6.470594304179014e-02, -6.585514513694971e-03, -8.273353529756706e-03, -8.273353529756704e-03, -5.054857603641380e+00, -5.054189802112222e+00, -5.054837895629026e+00, -5.054248187377572e+00, -5.054512970500173e+00, -5.054512970500173e+00, -2.135511416291926e+00, -2.144951600472639e+00, -2.138059147092269e+00, -2.146372386399857e+00, -2.139510292179253e+00, -2.139510292179253e+00, -5.834786717272475e-01, -6.047077061676259e-01, -5.443823480000654e-01, -5.391796672946391e-01, -5.891141386493501e-01, -5.891141386493501e-01, -1.513206911478523e-01, -2.418074380653071e-01, -1.418863249872577e-01, -1.819187241466984e+00, -1.660341831917780e-01, -1.660341831917780e-01, -5.081623945842105e-03, -6.437855191591898e-03, -4.922012921058433e-03, -1.006756890961983e-01, -5.929525309000045e-03, -5.929525309000045e-03, -5.518610601069842e-01, -5.556166726573318e-01, -5.543794600434356e-01, -5.532955734509886e-01, -5.538446001469973e-01, -5.538446001469973e-01, -5.346467983956797e-01, -5.141727908799286e-01, -5.198091655395168e-01, -5.253494361522045e-01, -5.222823350096562e-01, -5.222823350096562e-01, -6.351491803612367e-01, -2.848092143152152e-01, -3.171631185392421e-01, -3.688021764649770e-01, -3.403106397329392e-01, -3.403106397329393e-01, -4.746006741604352e-01, -6.211295308507748e-02, -8.321448667346069e-02, -3.442928639343277e-01, -1.224393428775473e-01, -1.224393428775473e-01, -1.607163635960274e-02, -1.721310481838354e-03, -3.612755859934912e-03, -1.164275929751511e-01, -5.486754940770458e-03, -5.486754940770454e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_ecmv92_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ecmv92", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.516078273984584e+01, -2.516088508465928e+01, -2.516131012784567e+01, -2.515978806224590e+01, -2.516058985150189e+01, -2.516058985150189e+01, -4.033236680359795e+00, -4.033288732513021e+00, -4.034591484549956e+00, -4.033093150379772e+00, -4.033396315353496e+00, -4.033396315353496e+00, -7.547242035995669e-01, -7.533191823949817e-01, -7.201788617243271e-01, -7.267231871261121e-01, -7.257881955142391e-01, -7.257881955142391e-01, -1.932813282859849e-01, -1.946967817040131e-01, -8.863056457836164e-01, -1.734117545343686e-01, -1.772858277010511e-01, -1.772858277010510e-01, -1.516712025929572e-02, -1.595803819487333e-02, -8.238209997998459e-02, -8.775654038337886e-03, -1.101989066665210e-02, -1.101989066665210e-02, -6.208613068347045e+00, -6.211436398948766e+00, -6.208739358009889e+00, -6.211231865092314e+00, -6.210046178623291e+00, -6.210046178623291e+00, -2.153613643836715e+00, -2.171971496071549e+00, -2.136329204634694e+00, -2.152350506708960e+00, -2.172355685743268e+00, -2.172355685743268e+00, -6.856735488678966e-01, -7.751870020497500e-01, -6.302505028585405e-01, -6.823099158033052e-01, -7.003924530142988e-01, -7.003924530142988e-01, -1.586545777488932e-01, -2.115714048948615e-01, -1.520088213194956e-01, -2.336758949288997e+00, -1.584888316039481e-01, -1.584888316039481e-01, -6.772844891384799e-03, -8.578706929019832e-03, -6.556971855389676e-03, -1.183927897403630e-01, -7.899221110929895e-03, -7.899221110929878e-03, -7.246273556710232e-01, -7.134701167444170e-01, -7.173932299259048e-01, -7.206311112994599e-01, -7.190121073502675e-01, -7.190121073502675e-01, -7.071482833275674e-01, -5.550694049630212e-01, -5.960505058753541e-01, -6.397870528023553e-01, -6.173531694746714e-01, -6.173531694746714e-01, -8.114095111788171e-01, -2.471907534599267e-01, -2.857337149696345e-01, -3.881051983921202e-01, -3.290455534987908e-01, -3.290455534987915e-01, -5.101662629818989e-01, -7.953348223642258e-02, -1.030076920406859e-01, -3.820068904815646e-01, -1.328302357211648e-01, -1.328302357211646e-01, -2.135992115015984e-02, -2.294864723414288e-03, -4.815618944172710e-03, -1.290214190488233e-01, -7.309607074647839e-03, -7.309607074647831e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_ecmv92_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ecmv92", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-7.316476137027198e-09, -7.316421638227848e-09, -7.316110663883426e-09, -7.316922928907343e-09, -7.316507070985646e-09, -7.316507070985646e-09, -9.949455050233174e-06, -9.949691205574706e-06, -9.954175231058266e-06, -9.938827730111016e-06, -9.948778856582892e-06, -9.948778856582892e-06, -6.487321127310141e-03, -6.496382476717077e-03, -6.649652137305079e-03, -6.461342726544454e-03, -6.523364861308881e-03, -6.523364861308881e-03, -7.611515124082747e-01, -7.528124576291412e-01, -3.604310338206549e-03, -1.128254229436377e+00, -1.020916840989159e+00, -1.020916840989162e+00, -4.043133764126656e+00, -4.270952655662894e+00, -2.334000910266777e+00, -3.676247376196382e+00, -4.669585120356082e+00, -4.669585120359473e+00, -2.148753025061945e-06, -2.148978367288302e-06, -2.148748807918113e-06, -2.148947857150624e-06, -2.148874446654117e-06, -2.148874446654117e-06, -8.038209696729044e-05, -7.869414795546723e-05, -8.064817092286618e-05, -7.915811811622030e-05, -7.930785161949517e-05, -7.930785161949517e-05, -1.255760732409623e-02, -1.036299924468362e-02, -1.679703364440433e-02, -1.635045959101422e-02, -1.196046946859208e-02, -1.196046946859208e-02, -1.452140327964329e+00, -5.031563214633485e-01, -1.620732232942317e+00, -1.267215204718193e-04, -1.632250921715389e+00, -1.632250921715389e+00, -4.844353101927222e+00, -4.326609847943121e+00, -2.716803246625221e+01, -2.519183929117033e+00, -1.264290245134578e+01, -1.264290245135403e+01, -1.615610414814810e-02, -1.455924799203811e-02, -1.484848368861072e-02, -1.524512955625536e-02, -1.502233758115320e-02, -1.502233758115320e-02, -2.002350212601236e-02, -2.250182810155137e-02, -2.038313797226129e-02, -1.853642614492494e-02, -1.945953866284741e-02, -1.945953866284741e-02, -8.498977278533472e-03, -2.795173173947424e-01, -1.807084214058840e-01, -8.700310745644632e-02, -1.292254740430104e-01, -1.292254740430100e-01, -3.111938659069367e-02, -2.135346479498067e+00, -2.089658019264066e+00, -1.091551310286037e-01, -2.659496421610847e+00, -2.659496421610840e+00, -3.256155601087494e+00, -2.123761993390093e+01, -1.027740296264097e+01, -2.724891594070439e+00, -1.596937333872900e+01, -1.596937333875792e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
