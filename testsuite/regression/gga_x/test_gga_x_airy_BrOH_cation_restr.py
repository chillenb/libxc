
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_airy_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_airy", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.976365601429940e+01, -1.976370445522227e+01, -1.976394753760443e+01, -1.976322628658521e+01, -1.976360025316917e+01, -1.976360025316917e+01, -3.236228859565769e+00, -3.236219437573719e+00, -3.236082053756652e+00, -3.236936877154113e+00, -3.236295575590382e+00, -3.236295575590382e+00, -6.367844804727898e-01, -6.364960665879000e-01, -6.310701182829075e-01, -6.357107001600527e-01, -6.342476961429062e-01, -6.342476961429062e-01, -1.868507751295693e-01, -1.880143770521111e-01, -7.383117172414301e-01, -1.602736934867028e-01, -1.692262770164372e-01, -1.692262770164371e-01, -4.288162708666089e-02, -4.289019801437371e-02, -8.173738489300103e-02, -3.944256847188734e-02, -3.909252880202132e-02, -3.909252880202129e-02, -4.807148463491413e+00, -4.807917642665467e+00, -4.807187634792521e+00, -4.807866542338511e+00, -4.807535631395584e+00, -4.807535631395584e+00, -1.901891210433876e+00, -1.912522033560308e+00, -1.899089311994280e+00, -1.908457096119116e+00, -1.909142639112841e+00, -1.909142639112841e+00, -5.442660485111849e-01, -5.891122340251391e-01, -5.050075852765401e-01, -5.211354670806314e-01, -5.520626963554888e-01, -5.520626963554888e-01, -1.341418462307380e-01, -2.009776880480433e-01, -1.277349159776423e-01, -1.774547922406345e+00, -1.404471018338585e-01, -1.404471018338585e-01, -3.569865184395991e-02, -3.798339493060077e-02, -2.480727960812213e-02, -1.005700477235025e-01, -3.000809374625411e-02, -3.000809374625413e-02, -5.463693651621845e-01, -5.418743189506424e-01, -5.433951253740845e-01, -5.447050389416962e-01, -5.440440040615332e-01, -5.440440040615332e-01, -5.320039361562969e-01, -4.667301847295829e-01, -4.806084721931519e-01, -4.975476892522081e-01, -4.882935386624900e-01, -4.882935386624900e-01, -6.174311820968981e-01, -2.389911945018637e-01, -2.719612110437257e-01, -3.323962706002015e-01, -2.993011670890155e-01, -2.993011670890155e-01, -4.302911884267472e-01, -8.126895409940986e-02, -9.334660250369138e-02, -3.150194670790111e-01, -1.113408122057741e-01, -1.113408122057741e-01, -4.833275057567953e-02, -2.230752955018389e-02, -2.889629443014735e-02, -1.079252176902946e-01, -2.820823686670504e-02, -2.820823686670502e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_airy_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_airy", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.575160200474902e+01, -2.575171814887738e+01, -2.575218555185648e+01, -2.575045853217219e+01, -2.575137043119249e+01, -2.575137043119249e+01, -4.100667167750694e+00, -4.100740379067563e+00, -4.102534495045423e+00, -4.100195367606691e+00, -4.100853797980807e+00, -4.100853797980807e+00, -7.599365024702652e-01, -7.584696551448706e-01, -7.259952529430103e-01, -7.324802397983305e-01, -7.314735319651255e-01, -7.314735319651255e-01, -1.841600685380510e-01, -1.876894404589784e-01, -8.934326466146992e-01, -1.351155473287630e-01, -1.532993835196482e-01, -1.532993835196517e-01, -1.214939854135770e-02, -1.252026131955194e-02, -4.946615640827686e-02, -8.810155012437225e-03, -9.779739221099391e-03, -9.779739221099404e-03, -6.370955187011557e+00, -6.373929208546867e+00, -6.371088247680900e+00, -6.373714020320523e+00, -6.372466791576983e+00, -6.372466791576983e+00, -2.172626460327877e+00, -2.190517632584779e+00, -2.156612632188725e+00, -2.172230353606322e+00, -2.190495340394965e+00, -2.190495340394965e+00, -6.995514743412088e-01, -7.903039265211050e-01, -6.410662424018334e-01, -6.981850400824642e-01, -7.161290467491855e-01, -7.161290467491855e-01, -1.006040553903527e-01, -1.795439648428440e-01, -9.485492144351027e-02, -2.380619260979635e+00, -1.113655163462322e-01, -1.113655163462322e-01, -7.457154602433610e-03, -8.541156017590392e-03, -6.007619898722370e-03, -7.073899851597837e-02, -7.252413511350785e-03, -7.252413511350763e-03, -7.308325038634648e-01, -7.269445789583986e-01, -7.287035292489864e-01, -7.298270424427477e-01, -7.293011876961774e-01, -7.293011876961774e-01, -7.103585563064485e-01, -5.590210334227567e-01, -6.051105552251196e-01, -6.562374653523523e-01, -6.305590169588411e-01, -6.305590169588411e-01, -8.281747432895021e-01, -2.319184436313415e-01, -2.851313112376108e-01, -3.906997456301528e-01, -3.327540906398228e-01, -3.327540906398197e-01, -5.136992921657489e-01, -4.795230408459558e-02, -6.128075195688840e-02, -3.856815866213620e-01, -8.220692424293762e-02, -8.220692424293773e-02, -1.570418433560554e-02, -3.838184340997595e-03, -5.746420902645479e-03, -7.887925953160672e-02, -6.764955109682855e-03, -6.764955109682870e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_airy_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_airy", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.518951223560215e-09, -1.518844593331340e-09, -1.518509196577906e-09, -1.520092740521690e-09, -1.519243282700100e-09, -1.519243282700100e-09, -3.429753130275887e-06, -3.429043533637932e-06, -3.412226749775920e-06, -3.438755804495158e-06, -3.428571713783072e-06, -3.428571713783072e-06, -3.178332131526748e-03, -3.195148935265791e-03, -3.462360453090872e-03, -3.359545367422747e-03, -3.388823752124617e-03, -3.388823752124617e-03, -4.818361910177365e-01, -4.642656516761599e-01, -1.689262160607442e-03, -1.066114245101389e+00, -7.855579740778177e-01, -7.855579740778160e-01, -6.653345775607670e+03, -5.819051291915055e+03, -3.568737759431027e+01, -3.198460216145833e+04, -1.757985584013557e+04, -1.757985584013555e+04, -1.560447359614129e-07, -1.492218206282756e-07, -1.557621915792494e-07, -1.497386360407132e-07, -1.525704961266332e-07, -1.525704961266332e-07, -4.208677837094820e-05, -4.112347691896486e-05, -4.238972059846113e-05, -4.154712853266462e-05, -4.138688766786402e-05, -4.138688766786402e-05, -3.556014112002108e-03, 1.606933928432406e-03, -5.671580587416537e-03, 1.491236714367462e-03, -2.804761660391533e-03, -2.804761660391533e-03, -2.636097075618936e+00, -4.014150290744329e-01, -3.289965262097645e+00, 2.076552616186169e-05, -1.969840339418412e+00, -1.969840339418412e+00, -7.327775733319891e+04, -3.571864785176186e+04, -1.287464445262177e+05, -1.007491470817216e+01, -6.079307282457436e+04, -6.079307282457433e+04, 3.379300641134025e-03, 2.366286909156932e-03, 2.847536702241157e-03, 3.168867002746820e-03, 3.019693025729308e-03, 3.019693025729308e-03, 3.574213773747494e-03, -1.091272037163831e-02, -7.499796645537988e-03, -2.187099087075556e-03, -5.047901963663701e-03, -5.047901963663701e-03, 1.182502299730027e-03, -1.829004824376357e-01, -1.020918735655161e-01, -4.407224692011463e-02, -6.871964754977974e-02, -6.871964754977886e-02, -1.523107161095458e-02, -3.928035599071950e+01, -1.661777270906223e+01, -4.865478820578614e-02, -5.791324880539076e+00, -5.791324880539078e+00, -2.302473379910870e+03, -2.548013150773139e+06, -2.425812044623150e+05, -6.758449312075509e+00, -8.120295648346383e+04, -8.120295648346415e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
