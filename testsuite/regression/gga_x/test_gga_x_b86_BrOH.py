
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_b86_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_b86", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.103457908565223e+01, -2.103460079023414e+01, -2.103477766833868e+01, -2.103442065608987e+01, -2.103458986277661e+01, -2.103458986277661e+01, -3.493736745053596e+00, -3.493703989540590e+00, -3.492948202560398e+00, -3.494991828247946e+00, -3.493734780714036e+00, -3.493734780714036e+00, -7.054552603940830e-01, -7.055975319300924e-01, -7.117131989171039e-01, -7.158834984858705e-01, -7.055027942008284e-01, -7.055027942008284e-01, -2.226303508674800e-01, -2.232233974832555e-01, -8.187455630201614e-01, -1.886600838471668e-01, -2.227790360384221e-01, -2.227790360384221e-01, -1.853438124947784e-02, -1.940786754968181e-02, -7.626378182373199e-02, -8.914155417236787e-03, -1.920574441727683e-02, -1.920574441727683e-02, -5.048590094094279e+00, -5.047869052638406e+00, -5.048522951801958e+00, -5.047962183448155e+00, -5.048210746693221e+00, -5.048210746693221e+00, -2.142928953437187e+00, -2.151964390991530e+00, -2.145376601659939e+00, -2.152391085801547e+00, -2.145920974843065e+00, -2.145920974843065e+00, -5.768014536961340e-01, -5.962184842445497e-01, -5.496627358718656e-01, -5.487439294818989e-01, -5.941379295647460e-01, -5.941379295647460e-01, -1.540745538815191e-01, -2.467323487039553e-01, -1.511632934013446e-01, -1.813745769214519e+00, -1.685239114180330e-01, -1.685239114180330e-01, -8.599587270897029e-03, -9.826158128240966e-03, -7.365034686548601e-03, -1.026754226007799e-01, -8.953092173872379e-03, -8.953092173872379e-03, -5.588360210211722e-01, -5.620844262616566e-01, -5.609327748421390e-01, -5.600303028665569e-01, -5.604820820710686e-01, -5.604820820710686e-01, -5.398930338727316e-01, -5.211000876884784e-01, -5.263074512119500e-01, -5.310267964270310e-01, -5.284175655873669e-01, -5.284175655873669e-01, -6.262004097060224e-01, -2.905245076540114e-01, -3.221341960826939e-01, -3.705039331173792e-01, -3.441787210080854e-01, -3.441787210080854e-01, -4.732902377812124e-01, -7.119472434835905e-02, -9.403703394458164e-02, -3.389961651236144e-01, -1.275568126817117e-01, -1.275568126817117e-01, -2.170910552782229e-02, -2.692085818879249e-03, -5.113080795097244e-03, -1.215657948980998e-01, -7.609689292941819e-03, -7.609689292941808e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_b86_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_b86", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.501648765027228e+01, -2.501657760748492e+01, -2.501698137353030e+01, -2.501550825245545e+01, -2.501653507018687e+01, -2.501653507018687e+01, -4.007992870417142e+00, -4.008036468308742e+00, -4.009400245008195e+00, -4.007900481529660e+00, -4.008032367483303e+00, -4.008032367483303e+00, -7.426011922653470e-01, -7.413579160332103e-01, -7.107269150552233e-01, -7.167945844730408e-01, -7.421493830996261e-01, -7.421493830996261e-01, -2.008962075975138e-01, -2.026969285444848e-01, -9.076128771716283e-01, -1.734271627133210e-01, -2.014062522889913e-01, -2.014062522889913e-01, -2.455762797231391e-02, -2.569905088496148e-02, -9.454111449713939e-02, -1.187106592370805e-02, -2.543174173595018e-02, -2.543174173595018e-02, -6.175218065466626e+00, -6.178071918168681e+00, -6.175509348164455e+00, -6.177728385072891e+00, -6.176682161609850e+00, -6.176682161609850e+00, -2.144806255043389e+00, -2.161998976784392e+00, -2.135952176715780e+00, -2.149249993357837e+00, -2.168344347692807e+00, -2.168344347692807e+00, -6.745667700598356e-01, -7.656487670120903e-01, -6.379265046491274e-01, -6.910153541314693e-01, -7.051439805436334e-01, -7.051439805436334e-01, -1.599659007646109e-01, -2.196857129133768e-01, -1.555288789876940e-01, -2.328531696486333e+00, -1.625871811060293e-01, -1.625871811060293e-01, -1.145273135490348e-02, -1.308155286067015e-02, -9.805804859226903e-03, -1.193348248913389e-01, -1.191907777916611e-02, -1.191907777916611e-02, -7.368559292994734e-01, -7.249993670924432e-01, -7.291887971222319e-01, -7.324726167349562e-01, -7.308252146589354e-01, -7.308252146589354e-01, -7.145251009238257e-01, -5.670443581280050e-01, -6.065504392996143e-01, -6.463229660759930e-01, -6.259121508221024e-01, -6.259121508221025e-01, -8.014784827652566e-01, -2.588773806734526e-01, -2.988105563750311e-01, -3.911316172447642e-01, -3.391342016114035e-01, -3.391342016114034e-01, -5.092407423079915e-01, -8.960652127041130e-02, -1.129655585227538e-01, -3.769737860134222e-01, -1.365198831117864e-01, -1.365198831117863e-01, -2.872966106502731e-02, -3.588908861622628e-03, -6.814014554523463e-03, -1.298946325662872e-01, -1.013261603498481e-02, -1.013261603498480e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_b86_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_b86", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-7.671043370665152e-09, -7.670993966762011e-09, -7.670682459680220e-09, -7.671493285267167e-09, -7.671018078307770e-09, -7.671018078307770e-09, -1.040822173156230e-05, -1.040842668941509e-05, -1.041233967939161e-05, -1.039677252657898e-05, -1.040814979679326e-05, -1.040814979679326e-05, -6.734642827770780e-03, -6.739450078530195e-03, -6.773426167427867e-03, -6.603895414390516e-03, -6.736517281534864e-03, -6.736517281534864e-03, -7.469161954667952e-01, -7.388115174121450e-01, -3.555135615456687e-03, -1.174460654651412e+00, -7.449679673641632e-01, -7.449679673641632e-01, -6.915060783334877e+00, -6.932698504046750e+00, -2.846630838175751e+00, -4.903744643989219e+00, -7.201940148627464e+00, -7.201940148627464e+00, -2.253264268157876e-06, -2.253299433758237e-06, -2.253258979100835e-06, -2.253286481625891e-06, -2.253295272155780e-06, -2.253295272155780e-06, -8.227479923382274e-05, -8.067329908485236e-05, -8.222088263101398e-05, -8.097807821271179e-05, -8.123238256076918e-05, -8.123238256076918e-05, -1.377293470302326e-02, -1.107032791882092e-02, -1.681523918888748e-02, -1.571457076349135e-02, -1.207407033234050e-02, -1.207407033234050e-02, -1.453751338543539e+00, -4.614948416208062e-01, -1.658188160208398e+00, -1.292970335266015e-04, -1.500612120577836e+00, -1.500612120577836e+00, -5.202195394982065e+00, -5.212483168669721e+00, -1.491943384366395e+01, -2.725790827562560e+00, -7.699073123594173e+00, -7.699073123593857e+00, -1.398654320957394e-02, -1.395614475431571e-02, -1.396702561187939e-02, -1.397565306297151e-02, -1.397138538062625e-02, -1.397138538062625e-02, -1.599809173777409e-02, -2.200901520836366e-02, -2.012915964627421e-02, -1.849259187418955e-02, -1.933138428591806e-02, -1.933138428591807e-02, -9.126300654385314e-03, -2.558169550517756e-01, -1.691701718726550e-01, -8.831020435229228e-02, -1.250630872446675e-01, -1.250630872446676e-01, -3.264918623596080e-02, -2.418791149836832e+00, -2.377350010037760e+00, -1.206435082774005e-01, -2.520659194550385e+00, -2.520659194550393e+00, -5.193679716925663e+00, -8.968503992123757e+00, -7.721490085712441e+00, -3.092201918533303e+00, -1.124439492467647e+01, -1.124439492467847e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
