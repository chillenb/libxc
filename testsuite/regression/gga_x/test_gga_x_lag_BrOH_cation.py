
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_lag_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_lag", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.997210206405422e+01, -1.997215198710290e+01, -1.997240039100420e+01, -1.997165709476645e+01, -1.997204280471352e+01, -1.997204280471352e+01, -3.264364495395539e+00, -3.264361753049401e+00, -3.264378589222622e+00, -3.264969567067086e+00, -3.264440146907508e+00, -3.264440146907508e+00, -6.364165789798928e-01, -6.359390603956584e-01, -6.254170372014216e-01, -6.302369039260662e-01, -6.315987258225162e-01, -6.315987258225162e-01, -1.809832796217797e-01, -1.822627076931568e-01, -7.403337063631903e-01, -1.551464753880233e-01, -1.782523935657489e-01, -1.782523935657488e-01, -4.376220643548354e-02, -4.378490161642906e-02, -8.227938377116248e-02, -4.012158892503654e-02, -4.071214126929861e-02, -4.071214126929859e-02, -4.855990625020135e+00, -4.856630473546970e+00, -4.856024619310242e+00, -4.856589394947186e+00, -4.856312385107286e+00, -4.856312385107286e+00, -1.881443964333279e+00, -1.893212193488071e+00, -1.875874517466509e+00, -1.886218026689842e+00, -1.890729135270897e+00, -1.890729135270897e+00, -5.496580420772300e-01, -5.925312570916345e-01, -5.098167526911647e-01, -5.253682812489049e-01, -5.585187892841121e-01, -5.585187892841121e-01, -1.312530388732510e-01, -1.942681747914236e-01, -1.253100968915165e-01, -1.784297647657829e+00, -1.365935769700309e-01, -1.365935769700309e-01, -3.627432366809037e-02, -3.864843323925800e-02, -2.527082279154912e-02, -9.965378886424522e-02, -3.081305425968749e-02, -3.081305425968751e-02, -5.473748183021407e-01, -5.448818806559594e-01, -5.457370271598468e-01, -5.464570885022563e-01, -5.460944657197435e-01, -5.460944657197435e-01, -5.323970403557104e-01, -4.668004316729958e-01, -4.844631779308481e-01, -5.027626369613911e-01, -4.932722109880929e-01, -4.932722109880929e-01, -6.213309416914587e-01, -2.312033476003666e-01, -2.645352498329659e-01, -3.311126362928271e-01, -2.941163991187660e-01, -2.941163991187660e-01, -4.300810258139716e-01, -8.189080767260461e-02, -9.331878504492075e-02, -3.163574715920416e-01, -1.093728975699678e-01, -1.093728975699678e-01, -4.934784416015819e-02, -2.255619931003613e-02, -2.933410742797839e-02, -1.061743260531552e-01, -2.895886101360472e-02, -2.895886101360470e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_lag_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_lag", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.611048998221385e+01, -2.611045747641251e+01, -2.611058833928873e+01, -2.611052892136604e+01, -2.611090092587712e+01, -2.611097741591469e+01, -2.610979019588219e+01, -2.610956167464766e+01, -2.611054874931934e+01, -2.611012606582474e+01, -2.611054874931934e+01, -2.611012606582474e+01, -4.224595332357368e+00, -4.224665589837021e+00, -4.224624561716871e+00, -4.224694764686346e+00, -4.225332687248697e+00, -4.225542783359139e+00, -4.224786391467709e+00, -4.224986664148711e+00, -4.223838475670358e+00, -4.225695620868695e+00, -4.223838475670358e+00, -4.225695620868695e+00, -7.987810604027711e-01, -8.038204140983329e-01, -7.968865550004643e-01, -8.030802759678470e-01, -7.712130348996408e-01, -7.622049161345718e-01, -7.723014214300697e-01, -7.751998349003415e-01, -8.126906149749888e-01, -7.243216306879232e-01, -8.126906149749888e-01, -7.243216306879232e-01, -1.776009492105129e-01, -1.870357457765749e-01, -1.812241309778091e-01, -1.921465621022045e-01, -9.187327855832057e-01, -9.576023446110909e-01, -1.269093248664715e-01, -1.287753914805174e-01, -1.861204349009316e-01, -9.436382032971938e-02, -1.861204349009315e-01, -9.436382032971928e-02, -1.234074742188104e-02, -1.283137154034893e-02, -1.264588212920542e-02, -1.321985409140341e-02, -4.616001840847788e-02, -4.808998254187666e-02, -9.320289581196706e-03, -9.270689351384982e-03, -1.151194258694158e-02, -7.559526211793836e-03, -1.151194258694156e-02, -7.559526211793806e-03, -6.391527303174456e+00, -6.389974237583732e+00, -6.393262971303048e+00, -6.391651061123860e+00, -6.391627762429986e+00, -6.390034736295902e+00, -6.393117065505892e+00, -6.391558049100524e+00, -6.392413569114350e+00, -6.390816214664973e+00, -6.392413569114350e+00, -6.390816214664973e+00, -2.291914833967267e+00, -2.291789665152687e+00, -2.312247729845614e+00, -2.311537231652419e+00, -2.268446595254253e+00, -2.275154860971187e+00, -2.286157338943207e+00, -2.292989282234736e+00, -2.320479308334236e+00, -2.304562054537042e+00, -2.320479308334236e+00, -2.304562054537042e+00, -7.159878262561049e-01, -7.141317155951177e-01, -7.862774547545107e-01, -7.867187561639083e-01, -6.469763240409152e-01, -6.721555531734251e-01, -6.838959526194552e-01, -7.065100102630405e-01, -7.464750432314078e-01, -7.087273671329355e-01, -7.464750432314078e-01, -7.087273671329356e-01, -9.304198840858456e-02, -9.349435110082517e-02, -1.719021935472847e-01, -1.729240823284988e-01, -8.631752952649006e-02, -8.948346982720391e-02, -2.369708073252061e+00, -2.368656328191921e+00, -1.017978486318258e-01, -1.065481684299309e-01, -1.017978486318258e-01, -1.065481684299309e-01, -7.740271603812817e-03, -8.034000869858676e-03, -8.929672819733296e-03, -9.086348377957838e-03, -6.243254875629562e-03, -6.370096488857134e-03, -6.577547623572182e-02, -6.625201616955141e-02, -6.850285943623249e-03, -8.169622532199081e-03, -6.850285943623295e-03, -8.169622532199092e-03, -7.276084643111749e-01, -7.304405542033937e-01, -7.220121966576474e-01, -7.248803501332934e-01, -7.240222635788985e-01, -7.268895725154064e-01, -7.256615600948643e-01, -7.284945514063786e-01, -7.248460174866755e-01, -7.276955176883741e-01, -7.248460174866755e-01, -7.276955176883741e-01, -7.083935809679577e-01, -7.107374329445553e-01, -5.875476861112509e-01, -5.904245535723838e-01, -6.239231829360070e-01, -6.269821191673124e-01, -6.591301251398770e-01, -6.615186375459909e-01, -6.415479854318782e-01, -6.440253260390330e-01, -6.415479854318782e-01, -6.440253260390330e-01, -8.234988115964752e-01, -8.249816396053703e-01, -2.275656542685329e-01, -2.292909697619336e-01, -2.877941058401500e-01, -2.918326169880385e-01, -4.116144238976391e-01, -4.141233067554243e-01, -3.478790537438398e-01, -3.479955442125239e-01, -3.478790537438398e-01, -3.479955442125239e-01, -5.394614790321370e-01, -5.437711297545478e-01, -4.574124873313875e-02, -4.597705333472062e-02, -5.713164043144214e-02, -5.841366483263861e-02, -4.002770690746194e-01, -4.068958629942969e-01, -7.550500121969768e-02, -7.701626179485278e-02, -7.550500121969764e-02, -7.701626179485281e-02, -1.588460200208582e-02, -1.624535491737609e-02, -4.252081832132131e-03, -3.878205790728006e-03, -6.032818577864364e-03, -6.148760642226988e-03, -7.276033970821771e-02, -7.364784359230993e-02, -6.114132562620140e-03, -7.741516455891316e-03, -6.114132562620157e-03, -7.741516455891271e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_lag_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_lag", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.628023708375483e-09, 0.000000000000000e+00, -2.628035194553098e-09, -2.627964044515666e-09, 0.000000000000000e+00, -2.627991865408622e-09, -2.627800845278051e-09, 0.000000000000000e+00, -2.627750265727303e-09, -2.628473953849626e-09, 0.000000000000000e+00, -2.628608435844433e-09, -2.627986726206608e-09, 0.000000000000000e+00, -2.628285730697678e-09, -2.627986726206608e-09, 0.000000000000000e+00, -2.628285730697678e-09, -4.093029794074037e-06, 0.000000000000000e+00, -4.091819694856255e-06, -4.092799168909110e-06, 0.000000000000000e+00, -4.091529346591907e-06, -4.086597414656397e-06, 0.000000000000000e+00, -4.084874009455794e-06, -4.094695123311137e-06, 0.000000000000000e+00, -4.092892207414360e-06, -4.096333768632721e-06, 0.000000000000000e+00, -4.087109698402275e-06, -4.096333768632721e-06, 0.000000000000000e+00, -4.087109698402275e-06, -3.416793090227197e-03, 0.000000000000000e+00, -3.321609221651680e-03, -3.452302552148442e-03, 0.000000000000000e+00, -3.335234343318735e-03, -3.939896058617017e-03, 0.000000000000000e+00, -4.112333992294516e-03, -3.910957091090900e-03, 0.000000000000000e+00, -3.857545227603251e-03, -3.158493649101917e-03, 0.000000000000000e+00, -4.784508393683593e-03, -3.158493649101917e-03, 0.000000000000000e+00, -4.784508393683593e-03, -9.367581803660917e-01, 0.000000000000000e+00, -8.130359800093394e-01, -8.981854883632818e-01, 0.000000000000000e+00, -7.620479500180606e-01, -1.949456054204110e-03, 0.000000000000000e+00, -1.619866256834051e-03, -2.195012036819444e+00, 0.000000000000000e+00, -2.094233322945857e+00, -7.906468903032334e-01, 0.000000000000000e+00, -5.456647568585650e+00, -7.906468903032333e-01, 0.000000000000000e+00, -5.456647568585648e+00, -1.484002046122919e+04, 0.000000000000000e+00, -1.241203789117360e+04, -1.314863041709610e+04, 0.000000000000000e+00, -1.075764239995324e+04, -8.101336646356580e+01, 0.000000000000000e+00, -6.973559394779025e+01, -6.327910389336626e+04, 0.000000000000000e+00, -6.593457225701386e+04, -2.064698415138756e+04, 0.000000000000000e+00, -1.366721112706974e+05, -2.064698415138759e+04, 0.000000000000000e+00, -1.366721112706976e+05, -6.784373545316352e-07, 0.000000000000000e+00, -6.791538999764569e-07, -6.763017112931593e-07, 0.000000000000000e+00, -6.770883013330263e-07, -6.783232906882974e-07, 0.000000000000000e+00, -6.790861872195543e-07, -6.764907992765642e-07, 0.000000000000000e+00, -6.772096935065077e-07, -6.773403339189362e-07, 0.000000000000000e+00, -6.781161965535622e-07, -6.773403339189362e-07, 0.000000000000000e+00, -6.781161965535622e-07, -5.022127759636424e-05, 0.000000000000000e+00, -5.023200388688866e-05, -4.856044013008136e-05, 0.000000000000000e+00, -4.861833401753698e-05, -5.204119643021684e-05, 0.000000000000000e+00, -5.152288064661944e-05, -5.055000614722280e-05, 0.000000000000000e+00, -5.003120788709120e-05, -4.797717484287014e-05, 0.000000000000000e+00, -4.919475041229782e-05, -4.797717484287014e-05, 0.000000000000000e+00, -4.919475041229782e-05, -4.823290458085451e-03, 0.000000000000000e+00, -4.870854435867988e-03, -2.374594810271699e-03, 0.000000000000000e+00, -2.348934433847609e-03, -7.477665473687917e-03, 0.000000000000000e+00, -6.314989588200081e-03, -4.502763683541238e-03, 0.000000000000000e+00, -3.985074286554704e-03, -3.967034920170765e-03, 0.000000000000000e+00, -4.930380787322021e-03, -3.967034920170765e-03, 0.000000000000000e+00, -4.930380787322022e-03, -5.550752408994934e+00, 0.000000000000000e+00, -5.463305697930942e+00, -7.930712205273002e-01, 0.000000000000000e+00, -7.796693770470202e-01, -7.398942708689667e+00, 0.000000000000000e+00, -6.451904570396530e+00, -2.817520328340744e-05, 0.000000000000000e+00, -2.821188224300543e-05, -4.178702528549014e+00, 0.000000000000000e+00, -3.888560183682960e+00, -4.178702528549014e+00, 0.000000000000000e+00, -3.888560183682960e+00, -1.598036884443852e+05, 0.000000000000000e+00, -1.373609935111793e+05, -7.455522865863578e+04, 0.000000000000000e+00, -6.982651990691690e+04, -2.795644273000067e+05, 0.000000000000000e+00, -2.438178338641740e+05, -2.157592729303569e+01, 0.000000000000000e+00, -2.095745337054554e+01, -2.169112269600744e+05, 0.000000000000000e+00, -8.609164052654443e+04, -2.169112269600739e+05, 0.000000000000000e+00, -8.609164052654443e+04, -2.340312297954224e-03, 0.000000000000000e+00, -2.283164740209898e-03, -3.287184955658547e-03, 0.000000000000000e+00, -3.216697153375897e-03, -3.013483610977044e-03, 0.000000000000000e+00, -2.945608237669665e-03, -2.746616387657562e-03, 0.000000000000000e+00, -2.686637972090756e-03, -2.885425600665428e-03, 0.000000000000000e+00, -2.821435862318622e-03, -2.885425600665428e-03, 0.000000000000000e+00, -2.821435862318622e-03, -2.058403638266772e-03, 0.000000000000000e+00, -2.025755463816455e-03, -1.163904269600999e-02, 0.000000000000000e+00, -1.140367484592260e-02, -8.706039311492020e-03, 0.000000000000000e+00, -8.511364927833579e-03, -6.172838042929145e-03, 0.000000000000000e+00, -6.070991580500814e-03, -7.402756288457811e-03, 0.000000000000000e+00, -7.277293534675420e-03, -7.402756288457811e-03, 0.000000000000000e+00, -7.277293534675420e-03, -2.031534863807411e-03, 0.000000000000000e+00, -1.992818357230652e-03, -3.403060279303902e-01, 0.000000000000000e+00, -3.331572496449313e-01, -1.690984887988914e-01, 0.000000000000000e+00, -1.623541130712502e-01, -4.862312005410509e-02, 0.000000000000000e+00, -4.744657576504125e-02, -9.162521095480317e-02, 0.000000000000000e+00, -9.164808661386477e-02, -9.162521095480326e-02, 0.000000000000000e+00, -9.164808661386471e-02, -1.640976470510663e-02, 0.000000000000000e+00, -1.587217859935094e-02, -8.313797379649273e+01, 0.000000000000000e+00, -8.159553759301620e+01, -3.653623488949657e+01, 0.000000000000000e+00, -3.366330153962444e+01, -5.325314259516493e-02, 0.000000000000000e+00, -4.963077283607545e-02, -1.256477328955735e+01, 0.000000000000000e+00, -1.173353813903524e+01, -1.256477328955735e+01, 0.000000000000000e+00, -1.173353813903524e+01, -4.936903700714735e+03, 0.000000000000000e+00, -4.479055366898978e+03, -4.756883319202243e+06, 0.000000000000000e+00, -5.531377997473242e+06, -5.314085262104477e+05, 0.000000000000000e+00, -4.521988185643774e+05, -1.455549952774642e+01, 0.000000000000000e+00, -1.387650631098805e+01, -3.098336763304126e+05, 0.000000000000000e+00, -1.119556504785849e+05, -3.098336763304131e+05, 0.000000000000000e+00, -1.119556504785853e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
