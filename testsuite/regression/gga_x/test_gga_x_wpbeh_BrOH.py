
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_wpbeh_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_wpbeh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.092822552286294e+01, -2.092824638471364e+01, -2.092842015875647e+01, -2.092807693770587e+01, -2.092823585007568e+01, -2.092823585007568e+01, -3.478262850003296e+00, -3.478228971817463e+00, -3.477441619594913e+00, -3.479536267481406e+00, -3.478260242348200e+00, -3.478260242348200e+00, -7.019886737848953e-01, -7.020694801643690e-01, -7.052148203237334e-01, -7.095666328516265e-01, -7.020144481416801e-01, -7.020144481416801e-01, -2.165751290990245e-01, -2.174556205302342e-01, -8.154700599478311e-01, -1.805988242552893e-01, -2.168111270892761e-01, -2.168111270892761e-01, -1.705040508644690e-02, -1.785950599646070e-02, -7.084233862198501e-02, -8.179636066591460e-03, -1.767339195731723e-02, -1.767339195731723e-02, -5.022216264681508e+00, -5.021511080621463e+00, -5.022150611932529e+00, -5.021602160921769e+00, -5.021844945336838e+00, -5.021844945336838e+00, -2.123923449346502e+00, -2.133783223784036e+00, -2.125014996850418e+00, -2.132719826299522e+00, -2.129077548678505e+00, -2.129077548678505e+00, -5.740418768634524e-01, -5.939927161227900e-01, -5.471105713575390e-01, -5.461680894441716e-01, -5.911511550638197e-01, -5.911511550638197e-01, -1.443669541282191e-01, -2.379704113453096e-01, -1.418316349361357e-01, -1.806943173052380e+00, -1.598325051136677e-01, -1.598325051136677e-01, -7.890788545846888e-03, -9.017882229690227e-03, -6.758948617457568e-03, -9.508084632289186e-02, -8.216688925483370e-03, -8.216688925483370e-03, -5.580510480121378e-01, -5.601540684850826e-01, -5.593508791626871e-01, -5.587639840081877e-01, -5.590527451444581e-01, -5.590527451444581e-01, -5.393711764876574e-01, -5.189929612898658e-01, -5.239324873280780e-01, -5.282482623247214e-01, -5.257764814052505e-01, -5.257764814052505e-01, -6.237346207320341e-01, -2.817337776265256e-01, -3.152380945158111e-01, -3.687289044465937e-01, -3.404141133478430e-01, -3.404141133478429e-01, -4.712971190234433e-01, -6.630969049204175e-02, -8.707563325016926e-02, -3.376343265837494e-01, -1.190170162490841e-01, -1.190170162490842e-01, -1.998294026038780e-02, -2.468940294228894e-03, -4.690087228572496e-03, -1.134512535828931e-01, -6.983098210614814e-03, -6.983098210614803e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_wpbeh_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_wpbeh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.481434458454313e+01, -2.481444019199109e+01, -2.481485992605958e+01, -2.481329449681430e+01, -2.481439506139696e+01, -2.481439506139696e+01, -3.969677216785012e+00, -3.969717906110033e+00, -3.971003142964823e+00, -3.969634175005511e+00, -3.969715053721566e+00, -3.969715053721566e+00, -7.525102328411123e-01, -7.519527202243838e-01, -7.412174326584631e-01, -7.464895655239645e-01, -7.523042797730475e-01, -7.523042797730475e-01, -2.070674815103606e-01, -2.103923737208654e-01, -9.026437772824093e-01, -1.779044959435519e-01, -2.080506834160902e-01, -2.080506834160902e-01, -2.273387344859587e-02, -2.381267466194759e-02, -8.577146065095824e-02, -1.090618142212195e-02, -2.356452260975631e-02, -2.356452260975631e-02, -6.146845113757904e+00, -6.150206477964525e+00, -6.147187047628967e+00, -6.149800716155696e+00, -6.148571050018838e+00, -6.148571050018838e+00, -2.234134285984007e+00, -2.247445822910897e+00, -2.231083807183020e+00, -2.241540758992230e+00, -2.246890785459534e+00, -2.246890785459534e+00, -6.682584803808220e-01, -7.664697795327218e-01, -6.317919599685436e-01, -6.905204543804188e-01, -6.993043313820894e-01, -6.993043313820894e-01, -1.592120590320865e-01, -2.217132333259257e-01, -1.554626386000590e-01, -2.330989488190803e+00, -1.664121354163272e-01, -1.664121354163272e-01, -1.052105139446252e-02, -1.202384297292030e-02, -9.011931489943425e-03, -1.116388334980246e-01, -1.095558523397783e-02, -1.095558523397783e-02, -7.376941373939718e-01, -7.259453086276675e-01, -7.302969131312036e-01, -7.335626912436494e-01, -7.319414517818256e-01, -7.319414517818256e-01, -7.151304912334785e-01, -5.667725130614680e-01, -6.006956768451731e-01, -6.429119536474239e-01, -6.206158615702205e-01, -6.206158615702205e-01, -8.021590993977781e-01, -2.622820356961357e-01, -3.151370497855792e-01, -3.957970274152132e-01, -3.560118941680687e-01, -3.560118941680686e-01, -5.110482414820076e-01, -8.184070556914354e-02, -1.036967834953750e-01, -3.746666715544845e-01, -1.337943703817055e-01, -1.337943703817056e-01, -2.664392034718374e-02, -3.291920392305191e-03, -6.253449638096661e-03, -1.274118104042619e-01, -9.310797614153085e-03, -9.310797614153071e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_wpbeh_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_wpbeh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-7.823821002989037e-09, -7.823756540392412e-09, -7.823396385490088e-09, -7.824453330627849e-09, -7.823787614381075e-09, -7.823787614381075e-09, -1.069124555820413e-05, -1.069151667319395e-05, -1.069715858670507e-05, -1.067832242413959e-05, -1.069120284012596e-05, -1.069120284012596e-05, -6.240404097235743e-03, -6.222469451977768e-03, -5.660130972439235e-03, -5.544972224511508e-03, -6.234096696265071e-03, -6.234096696265071e-03, -6.360210915616995e-01, -6.190737541598995e-01, -3.566759477828371e-03, -9.455557737384048e-01, -6.312225291125260e-01, -6.312225291125260e-01, 0.000000000000000e+00, 0.000000000000000e+00, -3.460695991809749e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -2.225749804875018e-06, -2.223610635233374e-06, -2.225528457782498e-06, -2.223865438212815e-06, -2.224661679538232e-06, -2.224661679538232e-06, -6.903235659504020e-05, -6.816221543539144e-05, -6.834467530226311e-05, -6.765947409638702e-05, -6.939082229047995e-05, -6.939082229047995e-05, -1.415607047163474e-02, -9.639303826621044e-03, -1.729896787150099e-02, -1.457800173021521e-02, -1.233171034483853e-02, -1.233171034483853e-02, -1.064001710783853e+00, -4.036020926682582e-01, -1.212279493661172e+00, -1.126980099821888e-04, -1.128221688014853e+00, -1.128221688014853e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -2.348694677256827e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.079449480011095e-02, -1.194677336914124e-02, -1.156678587572429e-02, -1.124767010976704e-02, -1.141003998561401e-02, -1.141003998561383e-02, -1.209418403866816e-02, -2.157184253140624e-02, -2.069758564170989e-02, -1.840458303110306e-02, -1.976765306604614e-02, -1.976765306604621e-02, -8.043778127706472e-03, -2.257022887754454e-01, -1.361373821027241e-01, -8.227359869303291e-02, -1.021983444825705e-01, -1.021983444825709e-01, -3.145244674298879e-02, -2.988248025238669e+00, -2.374843347767444e+00, -1.214336292273968e-01, -1.870068552518095e+00, -1.870068552518102e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -2.291460423908454e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
