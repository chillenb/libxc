
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_pbeint_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbeint", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.049901298074475e+01, -2.049904536739582e+01, -2.049925161645427e+01, -2.049872004713681e+01, -2.049902954406544e+01, -2.049902954406544e+01, -3.379106792551775e+00, -3.379089223881827e+00, -3.378746082929051e+00, -3.380054335316296e+00, -3.379112150929764e+00, -3.379112150929764e+00, -6.708410850934183e-01, -6.707400028003740e-01, -6.703262704051465e-01, -6.745707811860665e-01, -6.708011151391917e-01, -6.708011151391917e-01, -2.061903959824582e-01, -2.069457454315195e-01, -7.864028788058198e-01, -1.743760336658104e-01, -2.063895816943715e-01, -2.063895816943715e-01, -1.700696436108034e-02, -1.780949901968648e-02, -7.034898543945427e-02, -8.175610630959798e-03, -1.762400049639952e-02, -1.762400049639952e-02, -4.950058865890665e+00, -4.950009512125229e+00, -4.950058762344611e+00, -4.950020297143614e+00, -4.950026318208196e+00, -4.950026318208196e+00, -2.019121760176868e+00, -2.028993017943018e+00, -2.019548210061416e+00, -2.027200772480475e+00, -2.025367994759054e+00, -2.025367994759054e+00, -5.601175852773090e-01, -5.910101581715561e-01, -5.329088511552099e-01, -5.415303416216396e-01, -5.787537291462241e-01, -5.787537291462241e-01, -1.428663868897666e-01, -2.277240970445955e-01, -1.401587205296019e-01, -1.797789042086141e+00, -1.560577110865084e-01, -1.560577110865084e-01, -7.887066454574831e-03, -9.012319708334764e-03, -6.754986498320094e-03, -9.502835046415072e-02, -8.211575059112590e-03, -8.211575059112590e-03, -5.573661569739349e-01, -5.577390599634946e-01, -5.576034834699816e-01, -5.574980697186512e-01, -5.575501423783172e-01, -5.575501423783172e-01, -5.389438193581083e-01, -4.986895835503615e-01, -5.095217091733871e-01, -5.200988478679242e-01, -5.145193268917522e-01, -5.145193268917522e-01, -6.202565001994440e-01, -2.685110618456283e-01, -2.996589040964821e-01, -3.525146016045966e-01, -3.234068736536315e-01, -3.234068736536314e-01, -4.519464051992806e-01, -6.560511887001709e-02, -8.690340243088596e-02, -3.258088711369408e-01, -1.182746247903438e-01, -1.182746247903438e-01, -1.992228746008800e-02, -2.468790697874702e-03, -4.689135456642421e-03, -1.127207179336430e-01, -6.979305097084861e-03, -6.979305097084850e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_pbeint_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbeint", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.553909485943202e+01, -2.553917904795520e+01, -2.553956818767545e+01, -2.553818929147945e+01, -2.553913914429236e+01, -2.553913914429236e+01, -4.105419143744555e+00, -4.105458191636408e+00, -4.106699943580809e+00, -4.105429911763179e+00, -4.105456715957727e+00, -4.105456715957727e+00, -7.603306835265344e-01, -7.589287623225116e-01, -7.217607366784113e-01, -7.283621098101083e-01, -7.598222981527031e-01, -7.598222981527031e-01, -1.938573577686550e-01, -1.967981294676104e-01, -9.309812372637889e-01, -1.577221549152174e-01, -1.947251333506057e-01, -1.947251333506057e-01, -2.256037737232569e-02, -2.361298512055482e-02, -8.802585147638126e-02, -1.089008432623096e-02, -2.336729031288224e-02, -2.336729031288224e-02, -6.280540688720677e+00, -6.282868765523627e+00, -6.280779653108281e+00, -6.282589872318665e+00, -6.281733641475790e+00, -6.281733641475790e+00, -2.179225963785296e+00, -2.198503444956077e+00, -2.167566283804103e+00, -2.182579230490123e+00, -2.207529530621643e+00, -2.207529530621643e+00, -6.898841730644167e-01, -7.720123696199537e-01, -6.528586041977774e-01, -6.993940695188487e-01, -7.200474468671617e-01, -7.200474468671617e-01, -1.480299225136480e-01, -2.020438461394876e-01, -1.437049957244512e-01, -2.348014615283307e+00, -1.485191532863669e-01, -1.485191532863669e-01, -1.050616714356882e-02, -1.200160097021749e-02, -8.996088479949897e-03, -1.115705983273836e-01, -1.093513726718601e-02, -1.093513726718601e-02, -7.387679006366926e-01, -7.303665679494776e-01, -7.333792063786783e-01, -7.357058806016066e-01, -7.345421650659256e-01, -7.345421650659256e-01, -7.157701545489994e-01, -5.816086596672139e-01, -6.210928731881115e-01, -6.578278303245703e-01, -6.392829532941120e-01, -6.392829532941120e-01, -8.086805710504409e-01, -2.455682123479548e-01, -2.947683277191361e-01, -4.005675306214674e-01, -3.432292211843768e-01, -3.432292211843767e-01, -5.221379366712273e-01, -8.324693229584927e-02, -1.055022211873329e-01, -3.866605936644708e-01, -1.269073716081248e-01, -1.269073716081248e-01, -2.640175499299742e-02, -3.291322016182470e-03, -6.249642983140620e-03, -1.207222951564696e-01, -9.295630002546859e-03, -9.295630002546846e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_pbeint_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbeint", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.539709884531950e-09, -4.539668250177839e-09, -4.539446524123756e-09, -4.540129034628489e-09, -4.539688228805418e-09, -4.539688228805418e-09, -6.402785897234570e-06, -6.402771340480361e-06, -6.401314072239234e-06, -6.398394850091153e-06, -6.402669311863201e-06, -6.402669311863201e-06, -4.561875392935839e-03, -4.575150590763788e-03, -4.890694716448918e-03, -4.752291692086836e-03, -4.566746029593279e-03, -4.566746029593279e-03, -6.310684405894929e-01, -6.158135531032367e-01, -2.270753154987044e-03, -1.124240752024099e+00, -6.267834990756692e-01, -6.267834990756692e-01, -5.160169455321940e+00, -5.177499811195260e+00, -2.300277750524911e+00, -3.635079242472984e+00, -5.378484079638333e+00, -5.378484079638333e+00, -1.294421595160467e-06, -1.293617198226325e-06, -1.294336093299016e-06, -1.293710682710408e-06, -1.294013699877415e-06, -1.294013699877415e-06, -5.923613374373996e-05, -5.780806830817174e-05, -5.959492728919593e-05, -5.847499123272675e-05, -5.779384291773625e-05, -5.779384291773625e-05, -8.298472760305599e-03, -6.043773886605467e-03, -1.021526952903639e-02, -8.756152883681345e-03, -7.161243775257353e-03, -7.161243775257353e-03, -1.357566084697103e+00, -4.289701353659933e-01, -1.555542432890504e+00, -7.060889046098236e-05, -1.438917745052995e+00, -1.438917745052995e+00, -3.856059949610478e+00, -3.865512810807203e+00, -1.106296359841793e+01, -2.348421673948847e+00, -5.709640086052507e+00, -5.709640086052506e+00, -7.429514831134330e-03, -7.584491288618806e-03, -7.529106417632349e-03, -7.486248908419893e-03, -7.507714466756825e-03, -7.507714466756825e-03, -8.465480002045589e-03, -1.435229498003308e-02, -1.232145511963386e-02, -1.067892638153112e-02, -1.148970557188316e-02, -1.148970557188316e-02, -4.999722891616020e-03, -2.238776360979170e-01, -1.356150817369869e-01, -5.961989518472202e-02, -9.186752591099809e-02, -9.186752591099816e-02, -2.156474582602748e-02, -1.921727759144445e+00, -1.985213421228837e+00, -7.679008164400891e-02, -2.313051858987379e+00, -2.313051858987383e+00, -3.881668103137973e+00, -6.638866837687313e+00, -5.718435648098815e+00, -2.840440905701832e+00, -8.336703947660489e+00, -8.336703947660473e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
