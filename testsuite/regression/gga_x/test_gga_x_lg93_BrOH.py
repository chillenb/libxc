
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_lg93_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_lg93", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.086844319669396e+01, -2.086845808328797e+01, -2.086861352665704e+01, -2.086836801661412e+01, -2.086845030313101e+01, -2.086845030313101e+01, -3.486748152177539e+00, -3.486702248253169e+00, -3.485585156188772e+00, -3.488250292838522e+00, -3.486739395360126e+00, -3.486739395360126e+00, -7.131429622547258e-01, -7.133957899849610e-01, -7.207613992811552e-01, -7.250106024385774e-01, -7.132307876985053e-01, -7.132307876985053e-01, -2.220802877101608e-01, -2.231793183141638e-01, -8.222168512260907e-01, -1.817007092626199e-01, -2.223898505989468e-01, -2.223898505989468e-01, -2.754361646478179e-02, -2.844741580513018e-02, -8.112733404371737e-02, -1.689487263744086e-02, -2.815897834987418e-02, -2.815897834987418e-02, -4.998540948812229e+00, -4.997781427855929e+00, -4.998469573893727e+00, -4.997878819636140e+00, -4.998140876396748e+00, -4.998140876396748e+00, -2.170240415299369e+00, -2.179456436190595e+00, -2.172526989201140e+00, -2.179752425151630e+00, -2.173320551057782e+00, -2.173320551057782e+00, -5.736636907453605e-01, -5.922488935444610e-01, -5.473965518106275e-01, -5.439116436342505e-01, -5.896013724422252e-01, -5.896013724422252e-01, -1.479015539882322e-01, -2.406186445698560e-01, -1.449518273573489e-01, -1.801605095596940e+00, -1.613204081063142e-01, -1.613204081063142e-01, -1.640201036575128e-02, -1.800720794682482e-02, -1.359974696763365e-02, -1.023641536841795e-01, -1.638540837415186e-02, -1.638540837415186e-02, -5.574928656143465e-01, -5.586786071894516e-01, -5.581864137370383e-01, -5.578513541643570e-01, -5.580127408504050e-01, -5.580127408504050e-01, -5.389999462926969e-01, -5.248142500570424e-01, -5.248068093168543e-01, -5.258313970884343e-01, -5.245206771020744e-01, -5.245206771020744e-01, -6.217644992721332e-01, -2.878362567989142e-01, -3.238568264738423e-01, -3.744495456334183e-01, -3.484178807487557e-01, -3.484178807487557e-01, -4.773720342630355e-01, -7.786412297838617e-02, -9.621309971136457e-02, -3.402521397020226e-01, -1.230940752619485e-01, -1.230940752619485e-01, -3.144936955507506e-02, -6.977186430651228e-03, -1.106096573097805e-02, -1.172708505164889e-01, -1.421193895276482e-02, -1.421193895276481e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_lg93_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_lg93", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.413287190194020e+01, -2.413301062478583e+01, -2.413355675419445e+01, -2.413128668295295e+01, -2.413294566761226e+01, -2.413294566761226e+01, -3.785610230940645e+00, -3.785670718983930e+00, -3.787502063447350e+00, -3.785164524605888e+00, -3.785657463768491e+00, -3.785657463768491e+00, -7.252218799452248e-01, -7.250533959484736e-01, -7.248784621341413e-01, -7.294191333565992e-01, -7.251563210119377e-01, -7.251563210119377e-01, -2.214483695432563e-01, -2.226476390749312e-01, -8.593007822171606e-01, -1.799216078151185e-01, -2.217888123819270e-01, -2.217888123819270e-01, -2.579645412847456e-02, -2.665042429557787e-02, -7.766606143768143e-02, -1.578651435059887e-02, -2.638005041783373e-02, -2.638005041783373e-02, -6.097040760876896e+00, -6.102469178667634e+00, -6.097590648301468e+00, -6.101811930129499e+00, -6.099837476980426e+00, -6.099837476980426e+00, -2.183315693281875e+00, -2.193776785817716e+00, -2.184065053904120e+00, -2.192181575564113e+00, -2.189538986754318e+00, -2.189538986754318e+00, -6.426157552735837e-01, -7.680854606535585e-01, -6.051198563291319e-01, -6.916497479582279e-01, -6.790633405524764e-01, -6.790633405524764e-01, -1.451315683693343e-01, -2.389938108357644e-01, -1.423450541646152e-01, -2.335924862916845e+00, -1.591904227957938e-01, -1.591904227957938e-01, -1.532567055996406e-02, -1.682808028668895e-02, -1.270880608970736e-02, -9.919142183390915e-02, -1.531256919690719e-02, -1.531256919690719e-02, -7.382981766185108e-01, -7.273467741145928e-01, -7.314294578224831e-01, -7.344745794962879e-01, -7.329641023944797e-01, -7.329641023944797e-01, -7.155558415925033e-01, -5.414731616765416e-01, -5.736803143042642e-01, -6.357907732179778e-01, -6.017968217138969e-01, -6.017968217138969e-01, -8.039268926688843e-01, -2.866681885114049e-01, -3.235474324590582e-01, -3.811475669194094e-01, -3.498306551401312e-01, -3.498306551401311e-01, -4.896154352257934e-01, -7.425571369881158e-02, -9.271937075910411e-02, -3.565398782646982e-01, -1.204571631834458e-01, -1.204571631834458e-01, -2.947042932935208e-02, -6.520437467572234e-03, -1.033310305506689e-02, -1.147767454159913e-01, -1.328028864538911e-02, -1.328028864538910e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_lg93_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_lg93", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-9.347494853603909e-09, -9.347321922636252e-09, -9.346602419931694e-09, -9.349432760920504e-09, -9.347403221678515e-09, -9.347403221678515e-09, -1.381825557507268e-05, -1.381843438414690e-05, -1.382085921743659e-05, -1.380471645691784e-05, -1.381811215281702e-05, -1.381811215281702e-05, -7.674389756259901e-03, -7.641772661240993e-03, -6.714078513639008e-03, -6.591253139073850e-03, -7.662802478529185e-03, -7.662802478529185e-03, -5.812101489279893e-01, -5.830907580550453e-01, -4.577753152975198e-03, -9.373180935228745e-01, -5.821474332658575e-01, -5.821474332658575e-01, -4.879271174977703e+02, -4.390485784150443e+02, -1.215477299114018e+01, -2.283384592720262e+03, -4.570977720002427e+02, -4.570977720002427e+02, -2.299627480030393e-06, -2.289272755793824e-06, -2.298582665777250e-06, -2.290530862729367e-06, -2.294293966555064e-06, -2.294293966555064e-06, -8.203295698105894e-05, -8.122971350871743e-05, -8.086908517404558e-05, -8.025328131052413e-05, -8.303059621052351e-05, -8.303059621052351e-05, -1.781981522373574e-02, -8.150839942028785e-03, -2.208965091119343e-02, -1.297810054057751e-02, -1.485287021877936e-02, -1.485287021877936e-02, -1.664896176747205e+00, -3.455425652146320e-01, -1.834803504302145e+00, -9.534319658352820e-05, -1.350628799786602e+00, -1.350628799786602e+00, -2.543255004998354e+03, -1.872493861896434e+03, -5.682440035242352e+03, -5.787172568634712e+00, -2.737482163134330e+03, -2.737482163134329e+03, -8.511125622583215e-03, -1.002360820261428e-02, -9.563547190282767e-03, -9.157645081148325e-03, -9.367992278185314e-03, -9.367992278185314e-03, -9.332994881601490e-03, -2.726741033695822e-02, -2.665667283424511e-02, -1.957284942947034e-02, -2.398192202675928e-02, -2.398192202675927e-02, -6.844968836427869e-03, -1.933500005853500e-01, -1.401255265029210e-01, -1.013969143448592e-01, -1.197959561327755e-01, -1.197959561327756e-01, -3.936801510942604e-02, -1.344172773482419e+01, -6.809120013373797e+00, -1.561968640950717e-01, -3.280285594043433e+00, -3.280285594043435e+00, -2.999076716608704e+02, -4.630693515470262e+04, -9.948686532876338e+03, -3.994251884277868e+00, -4.674567304812839e+03, -4.674567304812850e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
