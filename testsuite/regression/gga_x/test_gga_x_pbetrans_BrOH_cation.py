
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_pbetrans_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbetrans", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.097127352584739e+01, -2.097129951910101e+01, -2.097148525560581e+01, -2.097109708919609e+01, -2.097129050178464e+01, -2.097129050178464e+01, -3.481352029813227e+00, -3.481310990009564e+00, -3.480447846158780e+00, -3.482610092910689e+00, -3.481387021140071e+00, -3.481387021140071e+00, -7.014175195549025e-01, -7.015244518929848e-01, -7.064480820151228e-01, -7.110793377212148e-01, -7.119079215398805e-01, -7.119079215398805e-01, -2.250491565757234e-01, -2.254922561331064e-01, -8.093091611212324e-01, -1.982480073839642e-01, -2.198547039475628e-01, -2.198547039475627e-01, -1.016181322820031e-02, -1.070031432097542e-02, -5.806368743114113e-02, -5.861366917534210e-03, -8.179609732826285e-03, -8.179609732826285e-03, -5.038214636105499e+00, -5.037544204440016e+00, -5.038194790910174e+00, -5.037602739637975e+00, -5.037868623355520e+00, -5.037868623355520e+00, -2.136390272896056e+00, -2.145513934105521e+00, -2.139703558025255e+00, -2.147721269429359e+00, -2.139890620358053e+00, -2.139890620358053e+00, -5.817246411596640e-01, -6.028894349460820e-01, -5.431545301411300e-01, -5.377341188743212e-01, -5.879619834805230e-01, -5.879619834805230e-01, -1.398561747847163e-01, -2.476663526355257e-01, -1.307241889370210e-01, -1.813791148067535e+00, -1.659791790059785e-01, -1.659791790059785e-01, -4.525425393682624e-03, -5.729801401270390e-03, -4.387529789346744e-03, -9.131055457252205e-02, -5.511281275047564e-03, -5.511281275047565e-03, -5.507690523725393e-01, -5.539689718758648e-01, -5.528528116297112e-01, -5.519170521251732e-01, -5.523851157207775e-01, -5.523851157207775e-01, -5.339853124110394e-01, -5.133510296847008e-01, -5.184012941760434e-01, -5.236351747056307e-01, -5.206819379992214e-01, -5.206819379992214e-01, -6.332033140905562e-01, -2.891379613744970e-01, -3.195363437761150e-01, -3.684537480525486e-01, -3.410780042001225e-01, -3.410780042001225e-01, -4.739033640559184e-01, -5.561232172419267e-02, -7.492333579877436e-02, -3.435946569112048e-01, -1.125522118902329e-01, -1.125522118902329e-01, -1.431716097021517e-02, -1.531709508287350e-03, -3.220977304078192e-03, -1.065764214390291e-01, -5.061319465835346e-03, -5.061319465835342e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_pbetrans_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbetrans", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.504241424589881e+01, -2.504238524673054e+01, -2.504253586896102e+01, -2.504247357801353e+01, -2.504288647864627e+01, -2.504298675179260e+01, -2.504151394204546e+01, -2.504123702291084e+01, -2.504248872788901e+01, -2.504190812967714e+01, -2.504248872788901e+01, -2.504190812967714e+01, -4.007516655673941e+00, -4.007768400902292e+00, -4.007567555836692e+00, -4.007831050594024e+00, -4.008921246984386e+00, -4.009299670601914e+00, -4.007221969066624e+00, -4.007615257456536e+00, -4.006725767321572e+00, -4.008888038753919e+00, -4.006725767321572e+00, -4.008888038753919e+00, -7.434854187971425e-01, -7.494438578242753e-01, -7.413160041563496e-01, -7.486015391983343e-01, -7.134775329880519e-01, -7.043307841120839e-01, -7.140325942441864e-01, -7.170083878856954e-01, -7.598181122301796e-01, -6.715120520771604e-01, -7.598181122301796e-01, -6.715120520771604e-01, -1.819300847839498e-01, -1.870799097676991e-01, -1.829969834907988e-01, -1.893925188441352e-01, -8.558851984139770e-01, -8.987773481605394e-01, -1.724320659661439e-01, -1.726440668053883e-01, -1.893859471280692e-01, -1.978850601959646e-01, -1.893859471280692e-01, -1.978850601959649e-01, -1.308670247642894e-02, -1.390312923877036e-02, -1.371021443821925e-02, -1.468285982521518e-02, -7.296119126775474e-02, -7.663203124846424e-02, -7.875895946188420e-03, -7.744879706968080e-03, -1.167882315557370e-02, -6.650516243450541e-03, -1.167882315557370e-02, -6.650516243450541e-03, -6.187264638981689e+00, -6.185706906462917e+00, -6.190283673723080e+00, -6.188623699048563e+00, -6.187430306035396e+00, -6.185805664878958e+00, -6.190020859861973e+00, -6.188455471719122e+00, -6.188812778534217e+00, -6.187172299989147e+00, -6.188812778534217e+00, -6.187172299989147e+00, -2.117418776435862e+00, -2.117301912299835e+00, -2.136715262729134e+00, -2.136045307370940e+00, -2.094943827632090e+00, -2.101289447675049e+00, -2.111477165338272e+00, -2.118014692741847e+00, -2.145288151968949e+00, -2.129496558417238e+00, -2.145288151968949e+00, -2.129496558417238e+00, -6.827468661704368e-01, -6.810431337555547e-01, -7.736189692789817e-01, -7.743830005608791e-01, -6.131135969222110e-01, -6.390277579939667e-01, -6.697417116781600e-01, -6.915232918802021e-01, -7.150679294638540e-01, -6.778963259533096e-01, -7.150679294638540e-01, -6.778963259533096e-01, -1.598787023133730e-01, -1.618350941860134e-01, -2.012134275205948e-01, -2.016818018839592e-01, -1.467496854269137e-01, -1.526329663027398e-01, -2.333963932420084e+00, -2.332979902106482e+00, -2.647003044979823e-01, -1.962324263132324e-01, -2.647003044979823e-01, -1.962324263132324e-01, -5.909620020074367e-03, -6.141514968426134e-03, -7.577916603588010e-03, -7.692655742674326e-03, -5.665381779491426e-03, -5.998926754952683e-03, -1.110089007867892e-01, -1.117855291310529e-01, -5.787598203180341e-03, -7.944001497547620e-03, -5.787598203180343e-03, -7.944001497547624e-03, -7.232731604515271e-01, -7.262094388663360e-01, -7.109392809574383e-01, -7.139595784673604e-01, -7.152157975498132e-01, -7.182346309816450e-01, -7.188275724517948e-01, -7.217688302039532e-01, -7.170173280575808e-01, -7.199961663618601e-01, -7.170173280575808e-01, -7.199961663618601e-01, -7.063513555623886e-01, -7.087059819546381e-01, -5.477358514390446e-01, -5.506566344749043e-01, -5.903868440868336e-01, -5.936741846587328e-01, -6.360404007524078e-01, -6.385067657753969e-01, -6.128535708707056e-01, -6.153861865653324e-01, -6.128535708707056e-01, -6.153861865653324e-01, -8.090104969885235e-01, -8.109932988402709e-01, -2.349941393435038e-01, -2.359570597377417e-01, -2.743531429319949e-01, -2.770909686465596e-01, -3.819742136890710e-01, -3.844168719096202e-01, -3.217358432780527e-01, -3.217900605064193e-01, -3.217358432780526e-01, -3.217900605064193e-01, -5.023822761983666e-01, -5.068008009421613e-01, -7.185604366354902e-02, -7.230398612466114e-02, -9.347253526668806e-02, -9.602441119542889e-02, -3.752624337610732e-01, -3.820429478910997e-01, -1.284389829406572e-01, -1.311581850111802e-01, -1.284389829406572e-01, -1.311581850111803e-01, -1.869257632151060e-02, -1.936495918118765e-02, -2.039834029613040e-03, -2.044437472055784e-03, -4.149793164152657e-03, -4.413435453191622e-03, -1.237857460146754e-01, -1.252855279869559e-01, -5.481118109414772e-03, -7.282462021630552e-03, -5.481118109414767e-03, -7.282462021630544e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_pbetrans_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbetrans", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.478236001276018e-08, 0.000000000000000e+00, -1.478243998690238e-08, -1.478221702250620e-08, 0.000000000000000e+00, -1.478233608031462e-08, -1.478165763829145e-08, 0.000000000000000e+00, -1.478156306500255e-08, -1.478327508456645e-08, 0.000000000000000e+00, -1.478362383525472e-08, -1.478227987812619e-08, 0.000000000000000e+00, -1.478272505452015e-08, -1.478227987812619e-08, 0.000000000000000e+00, -1.478272505452015e-08, -2.029607840210046e-05, 0.000000000000000e+00, -2.030057342270873e-05, -2.029624878064077e-05, 0.000000000000000e+00, -2.030111644240377e-05, -2.030413708474717e-05, 0.000000000000000e+00, -2.030573030947070e-05, -2.027735708438202e-05, 0.000000000000000e+00, -2.027994500080048e-05, -2.030832306246320e-05, 0.000000000000000e+00, -2.028527794321342e-05, -2.030832306246320e-05, 0.000000000000000e+00, -2.028527794321342e-05, -1.349402342314201e-02, 0.000000000000000e+00, -1.343210148047010e-02, -1.352552064775916e-02, 0.000000000000000e+00, -1.344997263133392e-02, -1.393466641815326e-02, 0.000000000000000e+00, -1.401601496513849e-02, -1.358317619553387e-02, 0.000000000000000e+00, -1.356283584996181e-02, -1.324200426757684e-02, 0.000000000000000e+00, -1.374680103944024e-02, -1.324200426757684e-02, 0.000000000000000e+00, -1.374680103944024e-02, -1.785741917713068e+00, 0.000000000000000e+00, -1.643293217539393e+00, -1.771861868546302e+00, 0.000000000000000e+00, -1.604312651002245e+00, -7.795588866994185e-03, 0.000000000000000e+00, -7.118169327394075e-03, -2.517934940360027e+00, 0.000000000000000e+00, -2.462904548250656e+00, -1.530974359421028e+00, 0.000000000000000e+00, 3.845934647137945e-01, -1.530974359421027e+00, 0.000000000000000e+00, 3.845934647138143e-01, -5.035469906211478e+00, 0.000000000000000e+00, -4.984973412568676e+00, -5.305584037251161e+00, 0.000000000000000e+00, -5.278410951527738e+00, -2.936724808144295e+00, 0.000000000000000e+00, -2.952057310993394e+00, -4.612384761880262e+00, 0.000000000000000e+00, -4.487179279937298e+00, -5.027087050807480e+00, 0.000000000000000e+00, -1.275536974829584e+01, -5.027087050807492e+00, 0.000000000000000e+00, -1.275536974829587e+01, -4.294983028802643e-06, 0.000000000000000e+00, -4.299001704284244e-06, -4.294209862783352e-06, 0.000000000000000e+00, -4.298255090865688e-06, -4.294912288494874e-06, 0.000000000000000e+00, -4.298956132865485e-06, -4.294249283182459e-06, 0.000000000000000e+00, -4.298278195544479e-06, -4.294609287106571e-06, 0.000000000000000e+00, -4.298630978094428e-06, -4.294609287106571e-06, 0.000000000000000e+00, -4.298630978094428e-06, -1.694213614853055e-04, 0.000000000000000e+00, -1.694525192436997e-04, -1.656249825071750e-04, 0.000000000000000e+00, -1.657792663473525e-04, -1.705426336775617e-04, 0.000000000000000e+00, -1.702901172428830e-04, -1.672682223679579e-04, 0.000000000000000e+00, -1.669445834063542e-04, -1.663425915479198e-04, 0.000000000000000e+00, -1.674008904841077e-04, -1.663425915479198e-04, 0.000000000000000e+00, -1.674008904841077e-04, -2.536552398588299e-02, 0.000000000000000e+00, -2.564408865043239e-02, -1.990669356194361e-02, 0.000000000000000e+00, -1.988896479564153e-02, -3.666360632888068e-02, 0.000000000000000e+00, -3.210022406158689e-02, -3.424392297526267e-02, 0.000000000000000e+00, -3.001065917425996e-02, -2.199340472557071e-02, 0.000000000000000e+00, -2.685999083257543e-02, -2.199340472557072e-02, 0.000000000000000e+00, -2.685999083257543e-02, -1.758337624587522e+00, 0.000000000000000e+00, -1.692801484432094e+00, -1.175597366921008e+00, 0.000000000000000e+00, -1.162732360245669e+00, -2.205001576474562e+00, 0.000000000000000e+00, -2.045563930498175e+00, -2.420686478934135e-04, 0.000000000000000e+00, -2.425157413686098e-04, 2.708173725232418e+00, 0.000000000000000e+00, -1.681780658259725e+00, 2.708173725232418e+00, 0.000000000000000e+00, -1.681780658259725e+00, -6.474954065212458e+00, 0.000000000000000e+00, -5.604299404940693e+00, -5.575442864422106e+00, 0.000000000000000e+00, -5.147677463266968e+00, -3.175819134367039e+01, 0.000000000000000e+00, -3.532882764749342e+01, -3.352614547157900e+00, 0.000000000000000e+00, -3.230600579101377e+00, -1.579281665611968e+01, 0.000000000000000e+00, -1.551244341078769e+01, -1.579281665611963e+01, 0.000000000000000e+00, -1.551244341078767e+01, -2.796289596444724e-02, 0.000000000000000e+00, -2.754351834198746e-02, -2.806664774678043e-02, 0.000000000000000e+00, -2.764888877641581e-02, -2.803023023980511e-02, 0.000000000000000e+00, -2.761172171374840e-02, -2.800068628949470e-02, 0.000000000000000e+00, -2.758205117371220e-02, -2.801559799423846e-02, 0.000000000000000e+00, -2.759698810906375e-02, -2.801559799423846e-02, 0.000000000000000e+00, -2.759698810906375e-02, -3.135946050670281e-02, 0.000000000000000e+00, -3.094961639950150e-02, -4.699012125936031e-02, 0.000000000000000e+00, -4.631038704827627e-02, -4.198070802728254e-02, 0.000000000000000e+00, -4.134715851457463e-02, -3.745772668323278e-02, 0.000000000000000e+00, -3.696099777043804e-02, -3.973432310000681e-02, 0.000000000000000e+00, -3.918287064984472e-02, -3.973432310000681e-02, 0.000000000000000e+00, -3.918287064984472e-02, -1.646330023707981e-02, 0.000000000000000e+00, -1.637983490161700e-02, -6.370626450436877e-01, 0.000000000000000e+00, -6.285227344338975e-01, -4.005590552064807e-01, 0.000000000000000e+00, -3.916943008647722e-01, -1.832289124021315e-01, 0.000000000000000e+00, -1.797042123006620e-01, -2.750403664860112e-01, 0.000000000000000e+00, -2.762530130531637e-01, -2.750403664860114e-01, 0.000000000000000e+00, -2.762530130531637e-01, -6.529781612111728e-02, 0.000000000000000e+00, -6.386543826080927e-02, -2.686980333304837e+00, 0.000000000000000e+00, -2.690029089060884e+00, -2.639525185724120e+00, 0.000000000000000e+00, -2.695046328735915e+00, -2.308812726858025e-01, 0.000000000000000e+00, -2.190504773283302e-01, -3.299018441047087e+00, 0.000000000000000e+00, -3.682368022724519e+00, -3.299018441047087e+00, 0.000000000000000e+00, -3.682368022724519e+00, -3.990358398654450e+00, 0.000000000000000e+00, -4.073572726249562e+00, -1.992237758327989e+01, 0.000000000000000e+00, -3.528943533954783e+01, -1.229570630241101e+01, 0.000000000000000e+00, -1.308958789107365e+01, -3.688351592460762e+00, 0.000000000000000e+00, -3.606310527457569e+00, -3.255997425416663e+01, 0.000000000000000e+00, -1.610395788483868e+01, -3.255997425416668e+01, 0.000000000000000e+00, -1.610395788483873e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
