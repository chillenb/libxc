
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_pbefe_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbefe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.138360250132047e+01, -2.138362132907926e+01, -2.138379138097733e+01, -2.138348134345931e+01, -2.138361171109971e+01, -2.138361171109971e+01, -3.556067096860298e+00, -3.556033096020739e+00, -3.555244881704407e+00, -3.557356673318197e+00, -3.556064757779759e+00, -3.556064757779759e+00, -7.148734559582030e-01, -7.148611863752654e-01, -7.151138922867017e-01, -7.197052057742729e-01, -7.148657622708354e-01, -7.148657622708354e-01, -2.144867921935147e-01, -2.161634325952986e-01, -8.329384968059198e-01, -1.657461765198418e-01, -2.149799094319271e-01, -2.149799094319271e-01, -1.357358055564600e-02, -1.421684916129824e-02, -5.740016842259545e-02, -6.514842502876326e-03, -1.406871297956215e-02, -1.406871297956215e-02, -5.121009897441290e+00, -5.119970663975439e+00, -5.120911134312545e+00, -5.120102961651717e+00, -5.120466537146755e+00, -5.120466537146755e+00, -2.154192010076134e+00, -2.164938773327805e+00, -2.154224076499390e+00, -2.162641713730881e+00, -2.161260848302793e+00, -2.161260848302793e+00, -5.868386069042637e-01, -6.008007465690306e-01, -5.593578063803767e-01, -5.546688816062734e-01, -6.040686045054802e-01, -6.040686045054802e-01, -1.255763975150814e-01, -2.253527040516572e-01, -1.237695550612382e-01, -1.827771406619251e+00, -1.430189391513300e-01, -1.430189391513300e-01, -6.284814059694172e-03, -7.182270417538167e-03, -5.383187030790796e-03, -7.942695761525745e-02, -6.544153416654902e-03, -6.544153416654902e-03, -5.602460933427593e-01, -5.659647649444493e-01, -5.639838886477343e-01, -5.623975140463517e-01, -5.631959232291290e-01, -5.631959232291290e-01, -5.408143174464687e-01, -5.296273893649240e-01, -5.356668505836317e-01, -5.388984410611377e-01, -5.373076416617972e-01, -5.373076416617972e-01, -6.313706523130769e-01, -2.756438713523512e-01, -3.159862865850863e-01, -3.755716466390371e-01, -3.447698727502294e-01, -3.447698727502293e-01, -4.806390639156691e-01, -5.324822743778813e-02, -7.171962913410829e-02, -3.449118001558474e-01, -1.024319605414643e-01, -1.024319605414643e-01, -1.590630236128646e-02, -1.966638927604645e-03, -3.735772468543052e-03, -9.769742017345603e-02, -5.561768028917552e-03, -5.561768028917544e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_pbefe_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbefe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.509749768931717e+01, -2.509757090379162e+01, -2.509792462034969e+01, -2.509672521867548e+01, -2.509753607364384e+01, -2.509753607364384e+01, -4.068791996075388e+00, -4.068804235653809e+00, -4.069310698914077e+00, -4.069303524901061e+00, -4.068815623030443e+00, -4.068815623030443e+00, -7.878607697411625e-01, -7.874657413902734e-01, -7.814674911221210e-01, -7.866212573626430e-01, -7.877136615850796e-01, -7.877136615850796e-01, -2.391551404903718e-01, -2.401121529064223e-01, -9.354283978725052e-01, -1.983832714056872e-01, -2.394131694653350e-01, -2.394131694653350e-01, -1.807643134154808e-02, -1.893085044118333e-02, -7.543196821993077e-02, -8.684445353869481e-03, -1.873364252788460e-02, -1.873364252788460e-02, -6.158501976496408e+00, -6.160766897225572e+00, -6.158733983574793e+00, -6.160494992635224e+00, -6.159661048839829e+00, -6.159661048839829e+00, -2.354417419579742e+00, -2.366843908954535e+00, -2.353724405452157e+00, -2.363297303162080e+00, -2.364105930004231e+00, -2.364105930004231e+00, -6.801105577376720e-01, -7.615489973176747e-01, -6.448327042082194e-01, -6.872009437783577e-01, -7.078220213680466e-01, -7.078220213680466e-01, -1.579444111858719e-01, -2.619968359987692e-01, -1.552391561471386e-01, -2.316030191791195e+00, -1.753313846959407e-01, -1.753313846959407e-01, -8.377892304146884e-03, -9.573581463167164e-03, -7.175603151456321e-03, -1.029077546482567e-01, -8.722982957432714e-03, -8.722982957432714e-03, -7.351525423709749e-01, -7.213180053947968e-01, -7.260073943835503e-01, -7.298342119645731e-01, -7.278977355233159e-01, -7.278977355233159e-01, -7.133733717420689e-01, -5.900608903116709e-01, -6.146766279280599e-01, -6.451063875334017e-01, -6.286303173547519e-01, -6.286303173547521e-01, -7.970666135528006e-01, -3.110031920695058e-01, -3.479363775091037e-01, -4.142337006514414e-01, -3.765902888284623e-01, -3.765902888284623e-01, -5.332521720364851e-01, -7.019567195376018e-02, -9.361725875203392e-02, -3.879319842370850e-01, -1.299741100109279e-01, -1.299741100109279e-01, -2.117814808778768e-02, -2.622110467350452e-03, -4.980554309836666e-03, -1.239099279087354e-01, -7.413795533349786e-03, -7.413795533349776e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_pbefe_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbefe", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-8.644235486949605e-09, -8.644232097275473e-09, -8.644038699656830e-09, -8.644097740449302e-09, -8.644235189597363e-09, -8.644235189597363e-09, -1.076525476044918e-05, -1.076599004820562e-05, -1.078443048823969e-05, -1.074355157090206e-05, -1.076544949539397e-05, -1.076544949539397e-05, -5.622371601999810e-03, -5.598755225096337e-03, -4.890981171409319e-03, -4.805632662908664e-03, -5.613985437550392e-03, -5.613985437550392e-03, -3.645453168367644e-01, -3.743757465013534e-01, -3.383382064699298e-03, -3.399462509741098e-01, -3.678916666419511e-01, -3.678916666419511e-01, -9.677877394005175e-01, -9.711080150156379e-01, -4.389488771337635e-01, -6.813978240612077e-01, -1.008803695601584e+00, -1.008803695601584e+00, -2.712135415087787e-06, -2.716018651412700e-06, -2.712512789169526e-06, -2.715532522198187e-06, -2.714154614810318e-06, -2.714154614810318e-06, -5.980226244988867e-05, -5.928178834598433e-05, -5.884706959620814e-05, -5.846036549276263e-05, -6.067955079084724e-05, -6.067955079084724e-05, -1.491542238179935e-02, -1.492652133585605e-02, -1.788137462510283e-02, -2.024388546995100e-02, -1.353933702285457e-02, -1.353933702285457e-02, -3.034572627071240e-01, -1.624592379205461e-01, -3.526245547940228e-01, -1.742252271367247e-04, -3.711108723513082e-01, -3.711108723513082e-01, -7.228173858127509e-01, -7.246137509393398e-01, -2.073804576593366e+00, -4.647313650410170e-01, -1.070307949532152e+00, -1.070307949532151e+00, -2.005531286431939e-02, -1.901140963976019e-02, -1.937547782458537e-02, -1.966498455018485e-02, -1.951946237905264e-02, -1.951946237905264e-02, -2.313897555149111e-02, -2.000257317977965e-02, -2.104963280494425e-02, -2.200219286837371e-02, -2.157689603592326e-02, -2.157689603592326e-02, -1.221033609465767e-02, -1.125335233433730e-01, -9.497567322624013e-02, -7.427898960518878e-02, -8.677495333089072e-02, -8.677495333089071e-02, -2.883971543147017e-02, -3.646364566725120e-01, -3.846203876343530e-01, -1.157054549996004e-01, -4.959187024518949e-01, -4.959187024518956e-01, -7.281077362323164e-01, -1.244338543081067e+00, -1.071853790073661e+00, -6.102452701531095e-01, -1.562738726936353e+00, -1.562738726936350e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
