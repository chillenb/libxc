
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_gg99_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_gg99", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.104397602135618e+01, -2.104399164024057e+01, -2.104415021869011e+01, -2.104389268432781e+01, -2.104398351511447e+01, -2.104398351511447e+01, -3.509132397193271e+00, -3.509091939026962e+00, -3.508125078134383e+00, -3.510535663818652e+00, -3.509126536749493e+00, -3.509126536749493e+00, -7.147374295272763e-01, -7.150129031974163e-01, -7.248876839493804e-01, -7.289330798288827e-01, -7.148328671696791e-01, -7.148328671696791e-01, -2.304493042370334e-01, -2.306180963240414e-01, -8.252808380041791e-01, -2.060512233502930e-01, -2.304607398555646e-01, -2.304607398555646e-01, -7.806211815995286e-02, -7.886047616201680e-02, -1.334032380129820e-01, 0.000000000000000e+00, -7.809571641314811e-02, -7.809571641314811e-02, -5.034467824354969e+00, -5.033387908324748e+00, -5.034364802581229e+00, -5.033524975885077e+00, -5.033903291628506e+00, -5.033903291628506e+00, -2.182081498006127e+00, -2.190425698255846e+00, -2.185782382204817e+00, -2.192250785591125e+00, -2.182990879354817e+00, -2.182990879354817e+00, -5.781393787794352e-01, -5.909990088237791e-01, -5.513978637900382e-01, -5.452814252402318e-01, -5.945425784237245e-01, -5.945425784237245e-01, -1.867207038638386e-01, -2.619318523002158e-01, -1.814822843932460e-01, -1.797930142759265e+00, -1.910201496848638e-01, -1.910201496848638e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.473102874881117e-01, 0.000000000000000e+00, 0.000000000000000e+00, -5.520530619117990e-01, -5.568504564747172e-01, -5.551509315990050e-01, -5.538190097095302e-01, -5.544861067650005e-01, -5.544861067650005e-01, -5.330798865778343e-01, -5.262370271931095e-01, -5.283681317157288e-01, -5.298506297913341e-01, -5.288943657254822e-01, -5.288943657254822e-01, -6.209812194910629e-01, -3.025786255011517e-01, -3.312470613805564e-01, -3.752737313552423e-01, -3.510516335946341e-01, -3.510516335946341e-01, -4.784893579486287e-01, -1.345189067553006e-01, -1.467147990720266e-01, -3.415931247217752e-01, -1.600472654121539e-01, -1.600472654121539e-01, -8.555815415661810e-02, 0.000000000000000e+00, 0.000000000000000e+00, -1.522225207630583e-01, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_gg99_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_gg99", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.439854475666222e+01, -2.439863597449805e+01, -2.439904026866805e+01, -2.439754661642759e+01, -2.439859288397235e+01, -2.439859288397235e+01, -3.903042961373207e+00, -3.903087773445356e+00, -3.904480991564094e+00, -3.902908721232375e+00, -3.903082635726507e+00, -3.903082635726507e+00, -7.223198393882382e-01, -7.210958634904839e-01, -6.902776939043610e-01, -6.962742690779445e-01, -7.218751858654959e-01, -7.218751858654959e-01, -1.892767471695537e-01, -1.920385615196616e-01, -8.832257968012510e-01, -1.387178394946804e-01, -1.901026238015193e-01, -1.901026238015193e-01, -2.434623240080536e-02, -2.486982252648308e-02, -5.876414022706821e-02, 0.000000000000000e+00, -2.462308426346556e-02, -2.462308426346556e-02, -6.034018946755759e+00, -6.037095067202423e+00, -6.034332218189300e+00, -6.036724074707011e+00, -6.035597710151637e+00, -6.035597710151637e+00, -2.083360323195219e+00, -2.100469163816276e+00, -2.074116717787398e+00, -2.087402270110077e+00, -2.107175528914976e+00, -2.107175528914976e+00, -6.573607400688944e-01, -7.517054523755599e-01, -6.214641110249086e-01, -6.769897381145989e-01, -6.876475782027177e-01, -6.876475782027177e-01, -1.074000257536214e-01, -1.906015663956443e-01, -1.055021552131936e-01, -2.286054790503826e+00, -1.199729769076016e-01, -1.199729769076016e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -7.320930860571512e-02, 0.000000000000000e+00, 0.000000000000000e+00, -7.257839518454356e-01, -7.121617248252806e-01, -7.169498079803625e-01, -7.207233507785051e-01, -7.188282720633428e-01, -7.188282720633428e-01, -7.041271985887584e-01, -5.517043201557971e-01, -5.907524271870525e-01, -6.313056099030315e-01, -6.103177313666877e-01, -6.103177313666875e-01, -7.865837474072590e-01, -2.392409707727237e-01, -2.864638557757485e-01, -3.804603086174626e-01, -3.290665675247409e-01, -3.290665675247408e-01, -4.954223484799463e-01, -5.695241994131153e-02, -6.900226801717851e-02, -3.668600997696833e-01, -8.879054779102133e-02, -8.879054779102132e-02, -2.724189965576867e-02, 0.000000000000000e+00, 0.000000000000000e+00, -8.461703362141129e-02, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_gg99_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_gg99", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-9.267409467941999e-09, -9.267358197170663e-09, -9.267007233071121e-09, -9.267849243490388e-09, -9.267383451275576e-09, -9.267383451275576e-09, -1.241645071114299e-05, -1.241678092389695e-05, -1.242380695287323e-05, -1.240117760297388e-05, -1.241640897749775e-05, -1.241640897749775e-05, -7.845403735169405e-03, -7.848366691726004e-03, -7.854312813319414e-03, -7.657326078915749e-03, -7.846628555654451e-03, -7.846628555654451e-03, -9.185321629938911e-01, -8.984894663057548e-01, -4.194522318853523e-03, -2.044899480189057e+00, -9.128085217311965e-01, -9.128085217311965e-01, -3.560060022384078e+03, -3.124768586454609e+03, -4.746033522168475e+01, 0.000000000000000e+00, -3.254860735989318e+03, -3.254860735989318e+03, -2.748972843717605e-06, -2.749580965871065e-06, -2.749022930278719e-06, -2.749496003128518e-06, -2.749302509335388e-06, -2.749302509335388e-06, -9.539951959656876e-05, -9.354061032888115e-05, -9.535146732213841e-05, -9.390054618040840e-05, -9.419837597943627e-05, -9.419837597943627e-05, -1.654057479884082e-02, -1.370824687947191e-02, -2.014012025764644e-02, -1.935250882341646e-02, -1.457599271007280e-02, -1.457599271007280e-02, -4.526252024106253e+00, -6.698824667583944e-01, -4.917193142026537e+00, -1.600955838063200e-04, -3.254851849643599e+00, -3.254851849643599e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.911843580641836e+01, 0.000000000000000e+00, 0.000000000000000e+00, -1.742109492388779e-02, -1.730096540784184e-02, -1.734648257931921e-02, -1.738015043791976e-02, -1.736358543186394e-02, -1.736358543186394e-02, -1.993951974601130e-02, -2.583165647240704e-02, -2.405074772893983e-02, -2.252270389522591e-02, -2.332086749259089e-02, -2.332086749259091e-02, -1.129111234738144e-02, -3.269116263874436e-01, -2.008774357158417e-01, -1.029302253775087e-01, -1.451443905673138e-01, -1.451443905673139e-01, -3.821090144718279e-02, -5.565549037867243e+01, -2.424179034604601e+01, -1.424759304613410e-01, -9.360174469588907e+00, -9.360174469588909e+00, -2.089756207877223e+03, 0.000000000000000e+00, 0.000000000000000e+00, -1.136736782828889e+01, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
