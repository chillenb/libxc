
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_dk87_r2_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_dk87_r2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.105718801316039e+01, -2.105720834557084e+01, -2.105738120559384e+01, -2.105704661438017e+01, -2.105719804907177e+01, -2.105719804907177e+01, -3.499130151093705e+00, -3.499097380037852e+00, -3.498340954640376e+00, -3.500386302436553e+00, -3.499128201873719e+00, -3.499128201873719e+00, -7.044500448823123e-01, -7.044998453505390e-01, -7.072928928094459e-01, -7.116512313433673e-01, -7.044645231090538e-01, -7.044645231090538e-01, -2.171912069968849e-01, -2.181734204150472e-01, -8.196181002977035e-01, -1.819837566716674e-01, -2.174615785816034e-01, -2.174615785816034e-01, -5.852471656813740e-02, -5.898501228231358e-02, -1.014180401906335e-01, -5.710978788858671e-02, -5.841566103105794e-02, -5.841566103105794e-02, -5.049164742816528e+00, -5.048316899011479e+00, -5.049084956109759e+00, -5.048425592163150e+00, -5.048720031557395e+00, -5.048720031557395e+00, -2.130165500948555e+00, -2.140039900115993e+00, -2.131308004726157e+00, -2.139005001193896e+00, -2.135331530247851e+00, -2.135331530247851e+00, -5.776158424396733e-01, -5.950788518604725e-01, -5.504860661444537e-01, -5.480965145201805e-01, -5.948076070542204e-01, -5.948076070542204e-01, -1.553734188165411e-01, -2.377686219817427e-01, -1.516305642658561e-01, -1.810292220599794e+00, -1.643928269386310e-01, -1.643928269386310e-01, -5.615533106433598e-02, -5.690315002294914e-02, -4.362988287334651e-02, -1.161669237815066e-01, -5.164122327758183e-02, -5.164122327758185e-02, -5.579300502470673e-01, -5.609534633396618e-01, -5.597633732150513e-01, -5.589061529435394e-01, -5.593252157894487e-01, -5.593252157894487e-01, -5.392007470564273e-01, -5.213181661822730e-01, -5.271168754534317e-01, -5.311932365905332e-01, -5.290379236561417e-01, -5.290379236561417e-01, -6.250642819542909e-01, -2.820505383226947e-01, -3.164668305612550e-01, -3.700478812529985e-01, -3.414891304353047e-01, -3.414891304353046e-01, -4.732384499321108e-01, -1.013059649517365e-01, -1.136340137641990e-01, -3.393854038149179e-01, -1.313574357618114e-01, -1.313574357618113e-01, -6.387580211229973e-02, -4.558731109990601e-02, -4.909255572440292e-02, -1.250290895107711e-01, -4.664104368329530e-02, -4.664104368329533e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_dk87_r2_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_dk87_r2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.489934834776045e+01, -2.489942979355924e+01, -2.489980727867891e+01, -2.489847333864980e+01, -2.489939118128926e+01, -2.489939118128926e+01, -4.014757306102364e+00, -4.014782953045966e+00, -4.015654985079191e+00, -4.015005601169412e+00, -4.014787598881550e+00, -4.014787598881550e+00, -7.624297752709775e-01, -7.616176607433283e-01, -7.421331309983952e-01, -7.478611455258579e-01, -7.621331821554468e-01, -7.621331821554468e-01, -2.121744399642913e-01, -2.145654630566841e-01, -9.171040115015833e-01, -1.590438929881240e-01, -2.128855270213877e-01, -2.128855270213877e-01, -1.424767306686700e-02, -1.485780341645851e-02, -5.581044636490760e-02, -7.631250190469413e-03, -1.470426482324118e-02, -1.470426482324118e-02, -6.132512280547231e+00, -6.135238126762269e+00, -6.132790351973092e+00, -6.134909778984393e+00, -6.133909330793201e+00, -6.133909330793201e+00, -2.238036226862803e+00, -2.253349266133344e+00, -2.232371644319025e+00, -2.244273175561948e+00, -2.255904862527846e+00, -2.255904862527846e+00, -6.731188962190739e-01, -7.626550037432571e-01, -6.374595827872958e-01, -6.867490917657784e-01, -7.020315600114976e-01, -7.020315600114976e-01, -1.199624648219465e-01, -2.179840283947035e-01, -1.182229329650873e-01, -2.319334772999568e+00, -1.367295350554172e-01, -1.367295350554172e-01, -7.390437876109331e-03, -8.249479383212953e-03, -6.209573953882251e-03, -7.636314675339620e-02, -7.510965815352800e-03, -7.510965815352827e-03, -7.368874671767723e-01, -7.226443168563706e-01, -7.277273861970645e-01, -7.317120847869268e-01, -7.297175133173947e-01, -7.297175133173947e-01, -7.147764053294349e-01, -5.761060944617068e-01, -6.069711913137879e-01, -6.419786100746382e-01, -6.233162935009190e-01, -6.233162935009191e-01, -7.979679604252760e-01, -2.703691993007596e-01, -3.169376512766631e-01, -4.012026447537127e-01, -3.555217669931566e-01, -3.555217669931565e-01, -5.191868353437717e-01, -5.202679910680499e-02, -6.926387628109164e-02, -3.805806875614099e-01, -9.792817433162312e-02, -9.792817433162307e-02, -1.656356110105117e-02, -3.062682509957970e-03, -4.815021009211086e-03, -9.339647057074640e-02, -6.457809723515046e-03, -6.457809723515008e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_dk87_r2_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_dk87_r2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-8.043970308502162e-09, -8.043942932634637e-09, -8.043689933699794e-09, -8.044140781236037e-09, -8.043956965412998e-09, -8.043956965412998e-09, -1.041505209566515e-05, -1.041554511682467e-05, -1.042737638979502e-05, -1.039816781041845e-05, -1.041512819910950e-05, -1.041512819910950e-05, -6.014639851299012e-03, -6.005373852620561e-03, -5.712876055854967e-03, -5.584083995695059e-03, -6.011420309866017e-03, -6.011420309866017e-03, -6.026587494562308e-01, -5.940455451764217e-01, -3.394273744831981e-03, -1.256870254367253e+00, -6.003154901223372e-01, -6.003154901223372e-01, -2.847869824569841e+03, -2.482956486035451e+03, -3.164382750822915e+01, -2.321169240207694e+04, -2.586679878559354e+03, -2.586679878559354e+03, -2.429365730994123e-06, -2.430452397620635e-06, -2.429465884540032e-06, -2.430311245989588e-06, -2.429943303788538e-06, -2.429943303788538e-06, -6.954288926194001e-05, -6.844038458209453e-05, -6.915069532817164e-05, -6.829414839221492e-05, -6.931163555425576e-05, -6.931163555425576e-05, -1.414220621927656e-02, -1.162716543609115e-02, -1.709231923989566e-02, -1.703034625637857e-02, -1.262968388077242e-02, -1.262968388077242e-02, -2.788189515367365e+00, -4.182130499146440e-01, -3.024776550482765e+00, -1.359093194950012e-04, -1.992257333657134e+00, -1.992257333657134e+00, -2.622796707471393e+04, -1.763142773601279e+04, -5.443763335944459e+04, -1.218540747176265e+01, -2.569813352669808e+04, -2.569813352669806e+04, -1.188740317773647e-02, -1.443974072658212e-02, -1.389406950498737e-02, -1.325074232062785e-02, -1.360287693897624e-02, -1.360287693897624e-02, -1.247475397598391e-02, -2.049800463556753e-02, -2.026839970648972e-02, -1.986090337245470e-02, -2.017278157132351e-02, -2.017278157132351e-02, -9.670703833601425e-03, -2.104418731278891e-01, -1.359273306752037e-01, -7.914290621396421e-02, -1.042068210025394e-01, -1.042068210025394e-01, -2.996485425061478e-02, -3.776009812678955e+01, -1.574697638233726e+01, -1.156777440991017e-01, -5.800263895510311e+00, -5.800263895510313e+00, -1.651004149707660e+03, -9.606023800937183e+05, -1.366536329545544e+05, -7.041453529661374e+00, -4.595457480019383e+04, -4.595457480019406e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
