
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_ft97_b_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ft97_b", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.119128427608202e+01, -2.119130108705935e+01, -2.119146404095592e+01, -2.119118701175115e+01, -2.119129240638297e+01, -2.119129240638297e+01, -3.465348588525011e+00, -3.465316765237487e+00, -3.464587414514505e+00, -3.466588338190521e+00, -3.465347151278534e+00, -3.465347151278534e+00, -6.983225982369626e-01, -6.984965142164318e-01, -7.063704383909810e-01, -7.103620621624016e-01, -6.983813263627122e-01, -6.983813263627122e-01, -2.259586213725641e-01, -2.258177137813537e-01, -8.102424343948548e-01, -2.078906532919639e-01, -2.258704278909959e-01, -2.258704278909959e-01, -6.863351027006992e-02, -6.951735423712477e-02, -1.298450098470854e-01, -6.101083738361997e-02, -6.883947956147894e-02, -6.883947956147894e-02, -5.044894633799879e+00, -5.044046395129645e+00, -5.044814819767859e+00, -5.044155127008951e+00, -5.044449280973338e+00, -5.044449280973338e+00, -2.126642814700547e+00, -2.135013544382673e+00, -2.129980340790100e+00, -2.136432085850771e+00, -2.128174197698737e+00, -2.128174197698737e+00, -5.716253379813500e-01, -5.942544983969482e-01, -5.445694183117811e-01, -5.461170016453333e-01, -5.891867828053192e-01, -5.891867828053192e-01, -1.904359946303139e-01, -2.611568924829887e-01, -1.851208959609946e-01, -1.807732886851842e+00, -1.942517816217929e-01, -1.942517816217929e-01, -5.984233950433608e-02, -6.159893840571150e-02, -4.708991825810063e-02, -1.477747398172654e-01, -5.593201438038619e-02, -5.593201438038620e-02, -5.582566185757887e-01, -5.604334139306185e-01, -5.596509837083711e-01, -5.590454032919088e-01, -5.593475072212688e-01, -5.593475072212688e-01, -5.395165722374617e-01, -5.156304844874756e-01, -5.213027629709172e-01, -5.273049929766014e-01, -5.239657661831105e-01, -5.239657661831105e-01, -6.239719584886420e-01, -2.980088075205556e-01, -3.234004046572819e-01, -3.667334182970282e-01, -3.420038626727538e-01, -3.420038626727538e-01, -4.683423138584506e-01, -1.293865608640937e-01, -1.453634620421015e-01, -3.354889113589061e-01, -1.629705719582424e-01, -1.629705719582424e-01, -7.559697428380281e-02, -4.318146292440626e-02, -4.980070760258471e-02, -1.550233440726037e-01, -5.011587963342119e-02, -5.011587963342119e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_ft97_b_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ft97_b", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.468108619049143e+01, -2.468118742056184e+01, -2.468162339797336e+01, -2.467996602647706e+01, -2.468113970646685e+01, -2.468113970646685e+01, -3.998075402661413e+00, -3.998130745506497e+00, -3.999813761637428e+00, -3.997750440524944e+00, -3.998120701308310e+00, -3.998120701308310e+00, -7.277555164324516e-01, -7.260662935599882e-01, -6.804187671551926e-01, -6.872426476720880e-01, -7.271439785924778e-01, -7.271439785924778e-01, -1.724908643128022e-01, -1.763262081390525e-01, -9.018018263537072e-01, -1.241118384508053e-01, -1.736461088225196e-01, -1.736461088225196e-01, -2.637089869783747e-02, -2.716031028127571e-02, -7.333486743148658e-02, -1.768044562584425e-02, -2.688638498510025e-02, -2.688638498510025e-02, -6.158816000859296e+00, -6.162116179590959e+00, -6.159151902080515e+00, -6.161718036711870e+00, -6.160511149502872e+00, -6.160511149502872e+00, -2.055787039453117e+00, -2.076501992881110e+00, -2.041201531107816e+00, -2.057361311545206e+00, -2.088799962403246e+00, -2.088799962403246e+00, -6.753459973807254e-01, -7.677221393810673e-01, -6.381916444749013e-01, -6.933762416766989e-01, -7.067581616008140e-01, -7.067581616008140e-01, -1.115795279410367e-01, -1.669510712933950e-01, -1.083054892430995e-01, -2.334866446061588e+00, -1.133243481507636e-01, -1.133243481507636e-01, -1.722328629717375e-02, -1.852356654644965e-02, -1.404198538235751e-02, -8.722092119021307e-02, -1.684437056105469e-02, -1.684437056105471e-02, -7.375815650123633e-01, -7.267980873236375e-01, -7.306606368295055e-01, -7.336479498431294e-01, -7.321536273268976e-01, -7.321536273268976e-01, -7.150067063534516e-01, -5.611081936366685e-01, -6.063343960050392e-01, -6.485251325213872e-01, -6.272634183935429e-01, -6.272634183935430e-01, -8.037733995734282e-01, -2.139587993474178e-01, -2.687039213029459e-01, -3.836830218326708e-01, -3.220735336713547e-01, -3.220735336713547e-01, -5.024354146151554e-01, -7.117972539327777e-02, -8.465937318190453e-02, -3.747896029278353e-01, -9.598416958388192e-02, -9.598416958388191e-02, -2.995982295037035e-02, -9.255178210788613e-03, -1.258205117459190e-02, -9.127894275976213e-02, -1.475851771103535e-02, -1.475851771103531e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_ft97_b_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ft97_b", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-9.049345061796173e-09, -9.049269476256595e-09, -9.048849825176735e-09, -9.050089226301277e-09, -9.049305889758952e-09, -9.049305889758952e-09, -1.017241844127722e-05, -1.017236022944724e-05, -1.016920568374804e-05, -1.016665676477362e-05, -1.017222807316430e-05, -1.017222807316430e-05, -6.916114907146092e-03, -6.936242126468791e-03, -7.432631054246610e-03, -7.220346490702884e-03, -6.923495438381806e-03, -6.923495438381806e-03, -1.002595862017653e+00, -9.709574721612740e-01, -3.448385492407279e-03, -2.301360346606535e+00, -9.933257696107481e-01, -9.933257696107481e-01, -2.908374946365835e+03, -2.550709253768515e+03, -3.976390202686852e+01, -2.156934645469720e+04, -2.656944198595656e+03, -2.656944198595656e+03, -2.459730475381831e-06, -2.457518611861704e-06, -2.459501412431058e-06, -2.457781726241346e-06, -2.458602428263755e-06, -2.458602428263755e-06, -9.010189760789945e-05, -8.790223456729614e-05, -9.069879160382811e-05, -8.896858576931410e-05, -8.783768406513339e-05, -8.783768406513339e-05, -1.265352818497220e-02, -9.298113772490494e-03, -1.556570517530717e-02, -1.344748350138332e-02, -1.093439740488350e-02, -1.093439740488350e-02, -4.551006806337191e+00, -7.653866884930746e-01, -4.990988319629459e+00, -1.086368692449275e-04, -3.519584618822497e+00, -3.519584618822497e+00, -2.431699691057861e+04, -1.658507898743635e+04, -5.106534171833335e+04, -1.704025816312626e+01, -2.418485344485180e+04, -2.418485344485179e+04, -1.144932964503414e-02, -1.167256730885426e-02, -1.159395344627538e-02, -1.153236527083360e-02, -1.156331337921710e-02, -1.156331337921710e-02, -1.304719668637152e-02, -2.177530139258117e-02, -1.876381054972067e-02, -1.634568615050829e-02, -1.754018965550735e-02, -1.754018965550735e-02, -7.689737635867685e-03, -3.651165028573485e-01, -2.103230468644399e-01, -9.038868077794125e-02, -1.398496718931735e-01, -1.398496718931736e-01, -3.270496170111831e-02, -4.607520734051090e+01, -2.089916535722604e+01, -1.166358044520596e-01, -9.112593636204620e+00, -9.112593636204624e+00, -1.704717906239846e+03, -8.041595236649328e+05, -1.212786701800198e+05, -1.108617853718369e+01, -4.293031599767579e+04, -4.293031599767598e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
