
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_pw91_mod_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pw91_mod", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.105547994081006e+01, -2.105550702824420e+01, -2.105569632266652e+01, -2.105529189489479e+01, -2.105549401347887e+01, -2.105549401347887e+01, -3.491858157690416e+00, -3.491820400258359e+00, -3.491033082612353e+00, -3.493065032359235e+00, -3.491897061649399e+00, -3.491897061649399e+00, -7.003940671548886e-01, -7.003818702869669e-01, -7.018175835134658e-01, -7.066335714841924e-01, -7.048039971098493e-01, -7.048039971098493e-01, -2.158908303753404e-01, -2.168649414376390e-01, -8.087338643092737e-01, -1.847381432563354e-01, -1.964488591182081e-01, -1.964488591182081e-01, -1.589025914652729e-04, -1.913407200552088e-04, -2.479351180000564e-02, -2.822227629167898e-05, -6.407416508865871e-05, -6.407416508865863e-05, -5.059312870455492e+00, -5.058625529804326e+00, -5.059292383459246e+00, -5.058685440711787e+00, -5.058958411574032e+00, -5.058958411574032e+00, -2.119791383561757e+00, -2.129872883105590e+00, -2.120660336053085e+00, -2.129561584001912e+00, -2.124934516784983e+00, -2.124934516784983e+00, -5.838201665405472e-01, -6.047388629190943e-01, -5.445178242640996e-01, -5.394041489455611e-01, -5.895669599925109e-01, -5.895669599925109e-01, -1.391722927980910e-01, -2.332142902568557e-01, -1.284044600882534e-01, -1.819165016958694e+00, -1.580316820356794e-01, -1.580316820356794e-01, -1.475774751015060e-05, -2.862879143413861e-05, -3.238948534576056e-05, -7.650390893868667e-02, -3.861928489189784e-05, -3.861928489189783e-05, -5.514188438846017e-01, -5.556154398367855e-01, -5.542368217784542e-01, -5.530275592266692e-01, -5.536404092377863e-01, -5.536404092377863e-01, -5.340996752884576e-01, -5.128038511743656e-01, -5.197964467433251e-01, -5.258285650011553e-01, -5.226407468847681e-01, -5.226407468847681e-01, -6.352487255310785e-01, -2.766109131619643e-01, -3.108423777447907e-01, -3.672470851380383e-01, -3.365032221282152e-01, -3.365032221282152e-01, -4.732218929378170e-01, -2.115088978286411e-02, -4.659384437168092e-02, -3.438536213948759e-01, -1.094945244258671e-01, -1.094945244258671e-01, -4.100436759482895e-04, -1.174511597764905e-06, -7.678148467413988e-06, -1.014696260300039e-01, -3.435061296937380e-05, -3.435061296937381e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_pw91_mod_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pw91_mod", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.523189179452082e+01, -2.523198555793211e+01, -2.523238659692990e+01, -2.523099192479871e+01, -2.523172494583383e+01, -2.523172494583383e+01, -4.064264266803987e+00, -4.064301657810467e+00, -4.065266505460251e+00, -4.064361880572999e+00, -4.064407071368458e+00, -4.064407071368458e+00, -7.697231412058020e-01, -7.685497382530064e-01, -7.410218528352970e-01, -7.474659071942952e-01, -7.463325247809527e-01, -7.463325247809527e-01, -1.993938379588515e-01, -2.013449429502712e-01, -9.011497161188380e-01, -1.748384520187108e-01, -1.796406683025453e-01, -1.796406683025452e-01, -6.499600952702903e-04, -7.832782126923748e-04, -8.680756445506282e-02, -1.146145346860944e-04, -2.611223866927329e-04, -2.611223866927350e-04, -6.207956098380009e+00, -6.210444006511716e+00, -6.208068471659830e+00, -6.210264794556498e+00, -6.209217925677263e+00, -6.209217925677263e+00, -2.219770004987181e+00, -2.237258819642474e+00, -2.205077324602334e+00, -2.220406286612704e+00, -2.236689364337621e+00, -2.236689364337621e+00, -6.892225385667610e-01, -7.734503944271609e-01, -6.348934468958866e-01, -6.809118168233255e-01, -7.029063816655523e-01, -7.029063816655523e-01, -1.859586039708606e-01, -2.138733783518331e-01, -1.852520277455448e-01, -2.331549831647426e+00, -1.645019344753942e-01, -1.645019344753942e-01, -5.981060980976306e-05, -1.162893569493117e-04, -1.318659344104537e-04, -1.693603746562316e-01, -1.572192653411976e-04, -1.572192653412003e-04, -7.232495383847883e-01, -7.118779539451370e-01, -7.158720604690894e-01, -7.191820468656643e-01, -7.175305851805227e-01, -7.175305851805227e-01, -7.064170648581648e-01, -5.656363160488106e-01, -6.013270004661820e-01, -6.402565633913886e-01, -6.200477013297265e-01, -6.200477013297265e-01, -8.095964646255230e-01, -2.541851739206040e-01, -2.973273159348711e-01, -3.972318067428409e-01, -3.411644760274984e-01, -3.411644760274985e-01, -5.202609456654936e-01, -7.636588139528187e-02, -1.386203919626891e-01, -3.874614299520555e-01, -1.657894716795633e-01, -1.657894716795634e-01, -1.682683974476845e-03, -4.732803362088725e-06, -3.107202593764551e-05, -1.678327306752949e-01, -1.398082484303869e-04, -1.398082484303848e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_pw91_mod_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pw91_mod", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-7.195699245049042e-09, -7.195666530190938e-09, -7.195420030368570e-09, -7.195908862054244e-09, -7.195667082650296e-09, -7.195667082650296e-09, -9.467171547853208e-06, -9.467598367722239e-06, -9.476548102212311e-06, -9.453818695076848e-06, -9.466770436149038e-06, -9.466770436149038e-06, -5.854343992187611e-03, -5.855689375579756e-03, -5.841058000084570e-03, -5.681590804671979e-03, -5.739722860031243e-03, -5.739722860031243e-03, -6.560058499758690e-01, -6.471224732372924e-01, -3.289332232818640e-03, -9.697407559057729e-01, -8.936736175748047e-01, -8.936736175748046e-01, 6.473498257166966e+01, 6.880687964403572e+01, 3.222910571792470e+01, 5.624332659771659e+01, 7.294149361939019e+01, 7.294149361939165e+01, -2.175439963679003e-06, -2.177116394224295e-06, -2.175495467986538e-06, -2.176975607042756e-06, -2.176300511048779e-06, -2.176300511048779e-06, -7.028804060068711e-05, -6.892637958039770e-05, -7.026862108962661e-05, -6.906416749957195e-05, -6.954271490122492e-05, -6.954271490122492e-05, -1.213669892930467e-02, -1.095569794280263e-02, -1.601294017991570e-02, -1.710882568057252e-02, -1.169198116859049e-02, -1.169198116859049e-02, 1.332494395229205e-02, -4.406944461300014e-01, 6.124060377282616e-01, -1.341108737910787e-04, -1.199257151471076e+00, -1.199257151471076e+00, 7.326418518892159e+01, 6.627156591076955e+01, 4.217862865278990e+02, 1.071113508069672e+01, 1.962081950251324e+02, 1.962081950251355e+02, -1.729436515613209e-02, -1.540586487770087e-02, -1.575590655623487e-02, -1.621863104443103e-02, -1.595645033121934e-02, -1.595645033121934e-02, -2.002953286076918e-02, -2.036498143397516e-02, -1.927112125222182e-02, -1.858815311483117e-02, -1.891368717010391e-02, -1.891368717010391e-02, -8.965387902859178e-03, -2.417179919536673e-01, -1.543285616769744e-01, -7.760012980276491e-02, -1.114062364066374e-01, -1.114062364066375e-01, -2.809129072358895e-02, 3.132001667433271e+01, 2.011954868780617e+01, -1.005981398609200e-01, 1.730624621399073e+00, 1.730624621399073e+00, 5.366317737606917e+01, 3.114826685895970e+02, 1.541718373976515e+02, 3.382278550212783e+00, 2.474769682965836e+02, 2.474769682965853e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
