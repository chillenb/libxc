
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_kt1_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_kt1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.197964751712996e+01, -2.197964511600797e+01, -2.197975431984163e+01, -2.197979127176160e+01, -2.197964524846119e+01, -2.197964524846119e+01, -3.712682936512581e+00, -3.712610909114386e+00, -3.710786340695327e+00, -3.714720104677212e+00, -3.712661711465387e+00, -3.712661711465387e+00, -7.306006088696322e-01, -7.310022674989003e-01, -7.455915380939993e-01, -7.507827709861620e-01, -7.307404412509877e-01, -7.307404412509877e-01, -1.706566225877203e-01, -1.729095221533870e-01, -8.571788803673047e-01, -1.234356240132421e-01, -1.713313488754706e-01, -1.713313488754706e-01, -9.451696050853961e-03, -9.900236930036187e-03, -4.026723954590471e-02, -4.534199549535315e-03, -9.797055279085573e-03, -9.797055279085573e-03, -5.212357822418436e+00, -5.210316383301802e+00, -5.212158717309236e+00, -5.210571181678488e+00, -5.211296366457090e+00, -5.211296366457090e+00, -2.483801196220345e+00, -2.486293840158593e+00, -2.498235408969175e+00, -2.499938394350310e+00, -2.467422283245540e+00, -2.467422283245540e+00, -5.749308861250932e-01, -5.966302259838311e-01, -5.443022183492513e-01, -5.470345812733050e-01, -5.944364226830439e-01, -5.944364226830439e-01, -9.049267906483102e-02, -1.730741385873937e-01, -8.929775614131152e-02, -1.837384907590338e+00, -1.046986146928141e-01, -1.046986146928141e-01, -4.374080254098029e-03, -4.998869225683547e-03, -3.746656320672353e-03, -5.616630717837281e-02, -4.554732476008406e-03, -4.554732476008406e-03, -5.586446393718725e-01, -5.615314838684482e-01, -5.605056469583050e-01, -5.597033262300276e-01, -5.601047069765160e-01, -5.601047069765160e-01, -5.396573645936489e-01, -5.066204019915947e-01, -5.177532010250422e-01, -5.266544105598653e-01, -5.220990943422192e-01, -5.220990943422192e-01, -6.276575178160564e-01, -2.198652904114951e-01, -2.628295147992142e-01, -3.368887103664151e-01, -2.977520938601034e-01, -2.977520938601033e-01, -4.504475342680082e-01, -3.729317114272128e-02, -5.051152980920665e-02, -3.137857773511915e-01, -7.331352660621501e-02, -7.331352660621501e-02, -1.107748537414660e-02, -1.368592859330638e-03, -2.599831620465492e-03, -6.991692970036482e-02, -3.870910662780965e-03, -3.870910662780959e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_kt1_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_kt1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.355179341431366e+01, -2.355192491940751e+01, -2.355244619566898e+01, -2.355029401944607e+01, -2.355186331232280e+01, -2.355186331232280e+01, -3.655763833467830e+00, -3.655877854135551e+00, -3.659159128101359e+00, -3.654275825315400e+00, -3.655838036325315e+00, -3.655838036325315e+00, -7.260182041879797e-01, -7.243962009426714e-01, -6.798432618652083e-01, -6.843772776812421e-01, -7.254321567486046e-01, -7.254321567486046e-01, -2.256155813056547e-01, -2.286188412466794e-01, -8.648080390494168e-01, -1.635831114099134e-01, -2.265164625566450e-01, -2.265164625566450e-01, -1.260192543801730e-02, -1.319993054627877e-02, -5.365200860575868e-02, -6.045555123117099e-03, -1.306237397608027e-02, -1.306237397608027e-02, -5.929592213206260e+00, -5.934604155246063e+00, -5.930099305822261e+00, -5.933996535620647e+00, -5.932171425262024e+00, -5.932171425262024e+00, -1.532186057321740e+00, -1.562687901813341e+00, -1.499412879441146e+00, -1.523532144543370e+00, -1.594454528116137e+00, -1.594454528116137e+00, -6.924281203537822e-01, -7.705567294600476e-01, -6.602508052736827e-01, -7.010122312037151e-01, -7.191024737143179e-01, -7.191024737143179e-01, -1.201877728933609e-01, -2.272136730205581e-01, -1.186473576856848e-01, -2.295757631468108e+00, -1.389772941442968e-01, -1.389772941442968e-01, -5.832068411163143e-03, -6.665101438441744e-03, -4.995527442602304e-03, -7.479174548696926e-02, -6.072940828187207e-03, -6.072940828187207e-03, -7.387786946891417e-01, -7.305150727515269e-01, -7.334611832677291e-01, -7.357494427212383e-01, -7.346035084561067e-01, -7.346035084561067e-01, -7.159347959450539e-01, -6.014883104421622e-01, -6.324838928739440e-01, -6.631033189190872e-01, -6.473767507902949e-01, -6.473767507902949e-01, -8.053894345989511e-01, -2.856253572255977e-01, -3.388829166069441e-01, -4.320075333475580e-01, -3.827387250887405e-01, -3.827387250887404e-01, -5.495023827961697e-01, -4.969123788112198e-02, -6.727035980833712e-02, -4.091593953015260e-01, -9.755168376772978e-02, -9.755168376772980e-02, -1.476935720386562e-02, -1.824789577791840e-03, -3.466435504187309e-03, -9.306640707731402e-02, -5.161196026170597e-03, -5.161196026170589e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_kt1_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_kt1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.457024970462253e-08, -1.457010823848453e-08, -1.456937297014644e-08, -1.457169168258781e-08, -1.457017597084265e-08, -1.457017597084265e-08, -2.072492522972928e-05, -2.072475136940251e-05, -2.071656443704143e-05, -2.071311739184369e-05, -2.072448291414267e-05, -2.072448291414267e-05, -1.015914158946932e-02, -1.018676167645068e-02, -1.092524028455702e-02, -1.070827922928989e-02, -1.016920785474571e-02, -1.016920785474571e-02, -2.967538912784231e-02, -2.965795297400472e-02, -5.964807461309258e-03, -2.990960843420687e-02, -2.967022933565853e-02, -2.967022933565853e-02, -2.999999680698964e-02, -2.999999615639031e-02, -2.999895098535874e-02, -2.999999983087901e-02, -2.999999631412034e-02, -2.999999631412034e-02, -4.133105599519598e-06, -4.130166998725898e-06, -4.132795429805716e-06, -4.130510627030078e-06, -4.131611680933994e-06, -4.131611680933994e-06, -2.062188459082051e-04, -2.005460883079356e-04, -2.085686676257886e-04, -2.040614854708459e-04, -1.994333330279873e-04, -1.994333330279873e-04, -1.413736789048140e-02, -1.170886799054341e-02, -1.570943093078594e-02, -1.444639867579984e-02, -1.301702198290690e-02, -1.301702198290690e-02, -2.997360524767782e-02, -2.966609066098439e-02, -2.997493157383263e-02, -2.226988248776979e-04, -2.995284181123701e-02, -2.995284181123701e-02, -2.999999985353185e-02, -2.999999975014974e-02, -2.999999992115428e-02, -2.999603894951902e-02, -2.999999982779374e-02, -2.999999982779374e-02, -1.320377687432580e-02, -1.336225912943033e-02, -1.330530434659269e-02, -1.326147249653267e-02, -1.328339854622248e-02, -1.328339854622248e-02, -1.417455691278754e-02, -1.837910076203098e-02, -1.711641315303685e-02, -1.596571141489470e-02, -1.654876906531310e-02, -1.654876906531310e-02, -1.038787817485716e-02, -2.917814223383646e-02, -2.840796328686458e-02, -2.609364818287020e-02, -2.748232321313896e-02, -2.748232321313897e-02, -2.115017212748282e-02, -2.999922810030482e-02, -2.999740754995131e-02, -2.680227909122726e-02, -2.998853887524246e-02, -2.998853887524247e-02, -2.999999397580472e-02, -2.999999999859621e-02, -2.999999998171961e-02, -2.999050515255835e-02, -2.999999991016322e-02, -2.999999991016322e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
