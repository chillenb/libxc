
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_ssb_sw_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ssb_sw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.106927495531444e+01, -2.106931823846832e+01, -2.106955363097168e+01, -2.106890881587666e+01, -2.106924055858119e+01, -2.106924055858119e+01, -3.469320524586982e+00, -3.469295052192028e+00, -3.468793104886368e+00, -3.470326984162020e+00, -3.469373615648498e+00, -3.469373615648498e+00, -6.935643241197055e-01, -6.935874508968098e-01, -6.967502002694759e-01, -7.014239792570592e-01, -6.995452688950771e-01, -6.995452688950771e-01, -2.157524427506620e-01, -2.168172851945264e-01, -8.006775283212857e-01, -1.823614052640695e-01, -1.952727657646687e-01, -1.952727657646687e-01, -1.008732446509968e-02, -1.061640512507447e-02, -5.766662450072543e-02, -5.828232258375507e-03, -7.322483846663006e-03, -7.322483846663006e-03, -5.107059957580530e+00, -5.107516076216736e+00, -5.107086644056218e+00, -5.107489134236657e+00, -5.107287226570152e+00, -5.107287226570152e+00, -2.105994904611014e+00, -2.115434447351841e+00, -2.108183982966391e+00, -2.116512894681626e+00, -2.110151168183701e+00, -2.110151168183701e+00, -5.817622883518708e-01, -6.226253923489080e-01, -5.411722171351403e-01, -5.516864778169830e-01, -5.890379641211673e-01, -5.890379641211673e-01, -1.390819171860455e-01, -2.315340109762296e-01, -1.299397971589223e-01, -1.874993882565151e+00, -1.552518281832307e-01, -1.552518281832307e-01, -4.497152338905960e-03, -5.697570974086162e-03, -4.356218573016263e-03, -9.083185555626497e-02, -5.247908599564582e-03, -5.247908599564583e-03, -5.754908828474751e-01, -5.725704363971040e-01, -5.735687917987482e-01, -5.744184526117747e-01, -5.739905255424038e-01, -5.739905255424038e-01, -5.598083104200053e-01, -5.077513346892252e-01, -5.159409453065655e-01, -5.291422238176517e-01, -5.214532006865465e-01, -5.214532006865465e-01, -6.528495087563416e-01, -2.762476477642238e-01, -3.108480525665468e-01, -3.639401458980300e-01, -3.352771558666907e-01, -3.352771558666907e-01, -4.686017658871892e-01, -5.530726884875203e-02, -7.448313969859238e-02, -3.405046339079433e-01, -1.118986511593901e-01, -1.118986511593901e-01, -1.422929106002834e-02, -1.523261646548907e-03, -3.197178033321355e-03, -1.060375192458619e-01, -4.856011842119349e-03, -4.856011842119346e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_ssb_sw_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ssb_sw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.670188477646174e+01, -2.670202875101572e+01, -2.670258029939423e+01, -2.670043997101929e+01, -2.670157409272952e+01, -2.670157409272952e+01, -4.195247928004663e+00, -4.195367835474162e+00, -4.198243348335679e+00, -4.194041525512012e+00, -4.195492825995969e+00, -4.195492825995969e+00, -7.549751285894276e-01, -7.530876544261241e-01, -7.148471939512011e-01, -7.213082126279733e-01, -7.203716366137326e-01, -7.203716366137326e-01, -2.033734522421813e-01, -2.042431154665242e-01, -8.928899983030379e-01, -1.818926142551449e-01, -1.878435464405067e-01, -1.878435464405068e-01, -1.343295275518385e-02, -1.413506018400742e-02, -7.445847769195317e-02, -7.767885648304574e-03, -9.756402436218461e-03, -9.756402436218461e-03, -6.648141690786225e+00, -6.651870537039120e+00, -6.648306615459090e+00, -6.651598994496315e+00, -6.650039244755885e+00, -6.650039244755885e+00, -2.139063449312617e+00, -2.156594842796317e+00, -2.124194787166299e+00, -2.139107403283440e+00, -2.156623912894331e+00, -2.156623912894331e+00, -7.208365185044449e-01, -8.275141557453399e-01, -6.564671386060030e-01, -7.306206866811493e-01, -7.411041790124987e-01, -7.411041790124987e-01, -1.563919629210438e-01, -2.239872298228690e-01, -1.484356870086206e-01, -2.492969470681179e+00, -1.625641912008279e-01, -1.625641912008279e-01, -5.994573291131309e-03, -7.593628804594544e-03, -5.804782662144506e-03, -1.109219015674888e-01, -6.993026641421993e-03, -6.993026641421996e-03, -7.668851088436980e-01, -7.612389375092935e-01, -7.634552000499206e-01, -7.650715001637007e-01, -7.642831696443648e-01, -7.642831696443648e-01, -7.462109646992592e-01, -5.561811781720106e-01, -6.170149022935394e-01, -6.837049342483782e-01, -6.511994360445321e-01, -6.511994360445321e-01, -8.670244384962199e-01, -2.608599595732604e-01, -2.946074396746473e-01, -3.861558011431184e-01, -3.295592173786933e-01, -3.295592173786933e-01, -5.104199483734216e-01, -7.169696668708635e-02, -9.429894620454125e-02, -3.876134616357604e-01, -1.289952932086322e-01, -1.289952932086323e-01, -1.893001212443263e-02, -2.030882931609479e-03, -4.262051072814152e-03, -1.241262273378477e-01, -6.470956202509174e-03, -6.470956202509172e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_ssb_sw_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ssb_sw", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-3.520479338848728e-09, -3.520316331902203e-09, -3.519778045956859e-09, -3.522199489585563e-09, -3.520904141109270e-09, -3.520904141109270e-09, -6.889969769254602e-06, -6.888839432162064e-06, -6.861928737557941e-06, -6.903338611781587e-06, -6.887950312342332e-06, -6.887950312342332e-06, -6.055570189087587e-03, -6.082518115307768e-03, -6.423503742601697e-03, -6.242173527216351e-03, -6.302080640682372e-03, -6.302080640682372e-03, -6.251254999236345e-01, -6.252954758730337e-01, -3.243248271615730e-03, -8.310455934357484e-01, -7.875615034376189e-01, -7.875615034376188e-01, -2.484425949182197e+00, -2.624650282387376e+00, -1.457280466647759e+00, -2.257990683091463e+00, -2.868566861031129e+00, -2.868566861030471e+00, -6.523620477637015e-07, -6.443101315642597e-07, -6.520248327854624e-07, -6.449156442158610e-07, -6.482581982182037e-07, -6.482581982182037e-07, -7.750795831184651e-05, -7.595119860892751e-05, -7.752130431576031e-05, -7.619369670566996e-05, -7.657843097360303e-05, -7.657843097360303e-05, -7.462145654493773e-03, -8.843178959292412e-04, -1.143829459419500e-02, -2.216597121861099e-03, -6.223854713367121e-03, -6.223854713367121e-03, -9.786387436431649e-01, -3.846119015085652e-01, -1.082032124497903e+00, -1.001852378572948e-05, -1.153351520527041e+00, -1.153351520527041e+00, -2.975261081142347e+00, -2.657470299510964e+00, -1.668866963144327e+01, -1.620022734094974e+00, -7.766207148480907e+00, -7.766207148478125e+00, -6.297415153877990e-04, -1.164815394131809e-03, -8.884723878589253e-04, -7.310052488329328e-04, -8.014528711388983e-04, -8.014528711388983e-04, -7.012495706483906e-04, -2.083373807450578e-02, -1.489558063394134e-02, -6.665061003928142e-03, -1.085263802728396e-02, -1.085263802728396e-02, -8.249605307292523e-04, -2.266215753642958e-01, -1.579222202300786e-01, -8.319718131707869e-02, -1.217384155879924e-01, -1.217384155879924e-01, -2.902532624529736e-02, -1.330488744439859e+00, -1.318216230983008e+00, -9.405686079284234e-02, -1.766128831821961e+00, -1.766128831821959e+00, -2.001857703982594e+00, -1.304214455043103e+01, -6.311849807316785e+00, -1.793749626511297e+00, -9.809458095316426e+00, -9.809458095314353e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
