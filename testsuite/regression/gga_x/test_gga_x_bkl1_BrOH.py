
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_bkl1_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_bkl1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.250774739457534e+01, -2.250773903108076e+01, -2.250783305349304e+01, -2.250796739340322e+01, -2.250774188613004e+01, -2.250774188613004e+01, -3.811065767973172e+00, -3.810989864959553e+00, -3.809061462541954e+00, -3.813193135116683e+00, -3.811042963392175e+00, -3.811042963392175e+00, -8.025360042512014e-01, -8.033830626660049e-01, -8.283277191384482e-01, -8.322749311299793e-01, -8.028369753882657e-01, -8.028369753882657e-01, -2.676140143441527e-01, -2.680860830750899e-01, -9.087896510874753e-01, -2.151348995266411e-01, -2.677327324866916e-01, -2.677327324866916e-01, -1.075164903563424e-02, -1.149430413866502e-02, -6.780745120465784e-02, -4.534584845232395e-03, -1.136972971922674e-02, -1.136972971922674e-02, -5.318221574480724e+00, -5.315632277203967e+00, -5.317967945218165e+00, -5.315954420898722e+00, -5.316877580476428e+00, -5.316877580476428e+00, -2.491740891565732e+00, -2.498354342543951e+00, -2.499960268178875e+00, -2.505136605588818e+00, -2.485379735199423e+00, -2.485379735199423e+00, -6.228319483623009e-01, -6.103404706749250e-01, -5.959489194848672e-01, -5.683762115676044e-01, -6.364707920902064e-01, -6.364707920902064e-01, -1.589736153433113e-01, -2.914873440334141e-01, -1.570324600002858e-01, -1.857013499450824e+00, -1.841677103342866e-01, -1.841677103342866e-01, -4.374324053870064e-03, -5.001704742627152e-03, -3.748124735774939e-03, -9.737766486104447e-02, -4.557502868344941e-03, -4.557502868344941e-03, -5.628012464831418e-01, -5.738566261245048e-01, -5.699387632296776e-01, -5.668721447974745e-01, -5.684085579032037e-01, -5.684085579032037e-01, -5.424518776109947e-01, -5.836703318706529e-01, -5.727384709589110e-01, -5.609587355235617e-01, -5.666750939491360e-01, -5.666750939491360e-01, -6.423271439332880e-01, -3.490878435904901e-01, -3.849316318910380e-01, -4.209399022541723e-01, -4.027267964446769e-01, -4.027267964446768e-01, -5.329796085246612e-01, -6.180109435044780e-02, -8.664267343778810e-02, -3.756920637991614e-01, -1.286942530339207e-01, -1.286942530339207e-01, -1.309512904244966e-02, -1.368592183343880e-03, -2.599826628736618e-03, -1.227971696871052e-01, -3.871733948428772e-03, -3.871733948428767e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_bkl1_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_bkl1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.350824505818220e+01, -2.350835410552711e+01, -2.350880744483860e+01, -2.350702247231451e+01, -2.350830284305284e+01, -2.350830284305284e+01, -3.720346347763503e+00, -3.720407037627031e+00, -3.722231488420518e+00, -3.719880277267194e+00, -3.720393409485028e+00, -3.720393409485028e+00, -6.877770484422238e-01, -6.869944204084568e-01, -6.774577541408588e-01, -6.817199776776177e-01, -6.874890770637961e-01, -6.874890770637961e-01, -2.346240951816100e-01, -2.308594473286694e-01, -8.371529528879332e-01, -2.634744948284463e-01, -2.333650857169333e-01, -2.333650857169333e-01, -2.038681390622735e-02, -2.207603369796698e-02, -1.006879187547502e-01, -6.056215350793749e-03, -2.183205983793211e-02, -2.183205983793211e-02, -5.876566811421612e+00, -5.881023538293810e+00, -5.877017697144988e+00, -5.880483066897688e+00, -5.878857713753931e+00, -5.878857713753931e+00, -2.040520778471139e+00, -2.050666639239567e+00, -2.041363255079909e+00, -2.048772853815931e+00, -2.047970813046881e+00, -2.047970813046881e+00, -6.298888782374795e-01, -7.481343400622745e-01, -5.941612058510533e-01, -6.676795932582200e-01, -6.620761738056176e-01, -6.620761738056176e-01, -2.169881526086664e-01, -3.149803420175292e-01, -2.137697080093820e-01, -2.274900432307464e+00, -2.420778431835023e-01, -2.420778431835023e-01, -5.839301114362179e-03, -6.724373305895519e-03, -5.027472381823960e-03, -1.373444757695708e-01, -6.130056302153165e-03, -6.130056302153165e-03, -7.316755471383100e-01, -7.102662550004033e-01, -7.177394772867463e-01, -7.236703719276518e-01, -7.206878496730239e-01, -7.206878496730239e-01, -7.111590201257102e-01, -5.226659381554776e-01, -5.637381794779507e-01, -6.135990215828566e-01, -5.872253520644219e-01, -5.872253520644221e-01, -7.816165778710821e-01, -3.245271504346479e-01, -3.190617622857290e-01, -3.619801970543455e-01, -3.274050563377308e-01, -3.274050563377308e-01, -4.697134504893551e-01, -9.416289891524514e-02, -1.245854183779543e-01, -3.478206689925568e-01, -1.769918046729064e-01, -1.769918046729064e-01, -2.534077115483440e-02, -1.824789577791840e-03, -3.466435539887971e-03, -1.688168416520774e-01, -5.180614780984849e-03, -5.180614780984841e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_bkl1_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_bkl1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.646338840337781e-08, -1.646330960888185e-08, -1.646272317098867e-08, -1.646401810692242e-08, -1.646334881362035e-08, -1.646334881362035e-08, -2.178359308404630e-05, -2.178435434374780e-05, -2.180166913762059e-05, -2.175336184291937e-05, -2.178361343907570e-05, -2.178361343907570e-05, -1.300193266859418e-02, -1.298233951459912e-02, -1.214030456108576e-02, -1.188950605291889e-02, -1.299518964893290e-02, -1.299518964893290e-02, -9.512723169754662e-01, -9.851570396425962e-01, -7.235264228670885e-03, -3.513783143753399e-01, -9.629251071319398e-01, -9.629251071319398e-01, 2.701761655433789e+02, 2.627525121880061e+02, 4.095453642712633e+00, 3.422451351880575e+00, 2.731642647445830e+02, 2.731642647445830e+02, -4.919416388180789e-06, -4.921208217533037e-06, -4.919576442402158e-06, -4.920970134888917e-06, -4.920369734406865e-06, -4.920369734406865e-06, -1.480279095721051e-04, -1.460509772143563e-04, -1.466048864655210e-04, -1.451223250639392e-04, -1.484081000057384e-04, -1.484081000057384e-04, -2.922920267164286e-02, -2.479765515333036e-02, -3.549392839739277e-02, -3.485828055926794e-02, -2.587819910189045e-02, -2.587819910189045e-02, 1.606154331526293e-01, -3.110791219065290e-01, 1.582840655315239e-01, -2.895886900799184e-04, -8.405523398782960e-02, -8.405523398782960e-02, 2.669711217513410e+00, 1.445362800667844e+01, 3.139976079819780e+01, 1.165001854596351e+00, 2.236430184718781e+01, 2.236430184718773e+01, -3.171341015344058e-02, -3.132780169116646e-02, -3.146709544196020e-02, -3.157445964777088e-02, -3.152097859855290e-02, -3.152097859855290e-02, -3.633330942677217e-02, -4.402658441857007e-02, -4.227296376110566e-02, -4.025755599793249e-02, -4.137948351200722e-02, -4.137948351200722e-02, -2.041004911054640e-02, -2.805740212141437e-01, -2.513320994591269e-01, -1.710626951312347e-01, -2.188240399638992e-01, -2.188240399638994e-01, -6.457475539484699e-02, 5.347679395104892e+00, 1.734954663833710e+00, -2.462076960331914e-01, 4.055987237116198e-01, 4.055987237116197e-01, 1.896517493889491e+02, 4.026106105139172e-26, 7.865882283631923e-05, 4.886421725125015e-01, 1.509233674808547e+01, 1.509233674808510e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
