
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_ncapr_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ncapr", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.101556071379628e+01, -2.101558253069043e+01, -2.101575964669475e+01, -2.101540080071903e+01, -2.101557155234982e+01, -2.101557155234982e+01, -3.490297507138447e+00, -3.490264932218544e+00, -3.489513967060090e+00, -3.491548555133442e+00, -3.490295621032210e+00, -3.490295621032210e+00, -7.046534178059197e-01, -7.047944028860607e-01, -7.109449284252787e-01, -7.151032288362508e-01, -7.047004797211307e-01, -7.047004797211307e-01, -2.231807539331962e-01, -2.236059538448339e-01, -8.178823433964274e-01, -1.966730915658518e-01, -2.232736257182306e-01, -2.232736257182306e-01, -1.578700059175382e-01, -1.553890200581208e-01, -1.482008450758661e-01, -2.269195723325080e-01, -1.539630040231444e-01, -1.539630040231444e-01, -5.044425963834546e+00, -5.043715771324425e+00, -5.044359898106368e+00, -5.043807565174696e+00, -5.044052211186708e+00, -5.044052211186708e+00, -2.140596475683146e+00, -2.149593764322796e+00, -2.143089413411064e+00, -2.150068313222918e+00, -2.143522684170329e+00, -2.143522684170329e+00, -5.762574917234475e-01, -5.958813443665525e-01, -5.491351828001697e-01, -5.483598833674626e-01, -5.935977460633316e-01, -5.935977460633316e-01, -1.794061279544664e-01, -2.511721726423240e-01, -1.740945174014222e-01, -1.812715993592193e+00, -1.821688077208875e-01, -1.821688077208875e-01, -2.252028046832387e-01, -2.150770549524385e-01, -1.667927502625603e-01, -1.488399385488418e-01, -1.947981694463985e-01, -1.947981694463985e-01, -5.586983281756371e-01, -5.617886319894462e-01, -5.606829416565218e-01, -5.598232273053513e-01, -5.602527250297580e-01, -5.602527250297580e-01, -5.397969825195097e-01, -5.205323873120727e-01, -5.257944336976524e-01, -5.305803130898231e-01, -5.279346480830183e-01, -5.279346480830183e-01, -6.258293485700533e-01, -2.920911974688243e-01, -3.222112428367135e-01, -3.700838174327775e-01, -3.438323339374320e-01, -3.438323339374318e-01, -4.727655580331424e-01, -1.561590005343057e-01, -1.537355366720082e-01, -3.386408632771303e-01, -1.548901747573500e-01, -1.548901747573499e-01, -1.648893998026072e-01, -2.740289389780746e-01, -2.348513245864079e-01, -1.472481171352212e-01, -1.813436362256794e-01, -1.813436362256797e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_ncapr_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ncapr", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.500748637489547e+01, -2.500757643893484e+01, -2.500798047949784e+01, -2.500650561443714e+01, -2.500753385283460e+01, -2.500753385283460e+01, -4.006453915569588e+00, -4.006497466496802e+00, -4.007859905727075e+00, -4.006362140372448e+00, -4.006493381919677e+00, -4.006493381919677e+00, -7.420272911475327e-01, -7.407592690166782e-01, -7.086468462338357e-01, -7.148325569327755e-01, -7.415667437710950e-01, -7.415667437710950e-01, -1.939091941796445e-01, -1.967979629862061e-01, -9.072665053580584e-01, -1.367758501961640e-01, -1.947752957349650e-01, -1.947752957349650e-01, 6.664158395724590e-02, 6.475587371523293e-02, -3.058921338063728e-04, 1.020568845851658e-01, 6.417929427009209e-02, 6.417929427009209e-02, -6.173632046022836e+00, -6.176504606016644e+00, -6.173925186138992e+00, -6.176158767699613e+00, -6.175105769279567e+00, -6.175105769279567e+00, -2.138876472024815e+00, -2.156566322052407e+00, -2.129210607968250e+00, -2.142948185177253e+00, -2.163637854164729e+00, -2.163637854164729e+00, -6.743084924302696e-01, -7.657005747648117e-01, -6.376804154043560e-01, -6.909665428399908e-01, -7.048872361172185e-01, -7.048872361172185e-01, -8.834722864966142e-02, -1.931135738625553e-01, -8.859625099470075e-02, -2.328685188953223e+00, -1.122932903710491e-01, -1.122932903710491e-01, 1.011992661429705e-01, 9.703379943071404e-02, 7.521290795665461e-02, -3.473232194342318e-02, 8.789121272986458e-02, 8.789121272986457e-02, -7.369578366984942e-01, -7.250677826148458e-01, -7.292850071366940e-01, -7.325808552192853e-01, -7.309287803744638e-01, -7.309287803744638e-01, -7.146078694290928e-01, -5.668002501355256e-01, -6.063167005930949e-01, -6.461412501656383e-01, -6.256819606324342e-01, -6.256819606324342e-01, -8.015151454348138e-01, -2.447521201924073e-01, -2.937298549405650e-01, -3.908484956072050e-01, -3.377514032307205e-01, -3.377514032307203e-01, -5.089862719761865e-01, 1.093665211119770e-02, -1.950734271696219e-02, -3.768310043964164e-01, -6.716696466691505e-02, -6.716696466691503e-02, 6.787752304120449e-02, 1.117288383336724e-01, 1.024580601773827e-01, -6.434377321126965e-02, 8.169478589417872e-02, 8.169478589417879e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_ncapr_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_ncapr", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-7.629628300607460e-09, -7.629578437984995e-09, -7.629266425097891e-09, -7.630084727056790e-09, -7.629602753463368e-09, -7.629602753463368e-09, -1.035946027807969e-05, -1.035966233718195e-05, -1.036350324913774e-05, -1.034810104405096e-05, -1.035938768344162e-05, -1.035938768344162e-05, -6.717799153646842e-03, -6.723493742262429e-03, -6.803443129651942e-03, -6.629499833131682e-03, -6.719987810665199e-03, -6.719987810665199e-03, -8.070224844510041e-01, -7.886889029411636e-01, -3.539593907318209e-03, -1.886106170065925e+00, -8.017595774414658e-01, -8.017595774414658e-01, -1.237345295949466e+04, -1.058520316108969e+04, -7.861595249607738e+01, -1.370767147051186e+05, -1.103164096059155e+04, -1.103164096059155e+04, -2.237197700426149e-06, -2.237104348139632e-06, -2.237179731545136e-06, -2.237107318901961e-06, -2.237162569568511e-06, -2.237162569568511e-06, -8.260044351746840e-05, -8.093242328664162e-05, -8.263984368900416e-05, -8.133821566127985e-05, -8.140926824870766e-05, -8.140926824870766e-05, -1.370487222159793e-02, -1.088097240764982e-02, -1.673425677573038e-02, -1.553545655383070e-02, -1.200977415460672e-02, -1.200977415460672e-02, -4.823610068009425e+00, -5.986962603313201e-01, -5.171405932952235e+00, -1.270989915860949e-04, -3.155261748815673e+00, -3.155261748815673e+00, -1.560345684767404e+05, -1.000718672128102e+05, -3.117723782419644e+05, -2.540565008686524e+01, -1.456253177154967e+05, -1.456253177154966e+05, -1.350304138330497e-02, -1.369193496140359e-02, -1.364673534674373e-02, -1.359830161231098e-02, -1.362441509443160e-02, -1.362441509443160e-02, -1.536553102780282e-02, -2.192066857038237e-02, -2.003394394967218e-02, -1.836865564065819e-02, -1.922969402632474e-02, -1.922969402632474e-02, -8.981337041529496e-03, -2.880988949500131e-01, -1.758792030818140e-01, -8.807239018154646e-02, -1.260247302995508e-01, -1.260247302995508e-01, -3.252988656522297e-02, -9.964228503993471e+01, -3.551016166695324e+01, -1.201112917048021e-01, -1.046797854375545e+01, -1.046797854375545e+01, -6.924411179033340e+03, -7.940071984528193e+06, -9.365221688061330e+05, -1.267758260684520e+01, -2.667433898885287e+05, -2.667433898885300e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
