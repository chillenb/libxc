
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_optb88_vdw_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_optb88_vdw", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.082770455676815e+01, -2.082773650021501e+01, -2.082793837803563e+01, -2.082746189036221e+01, -2.082770304984382e+01, -2.082770304984382e+01, -3.443905385355569e+00, -3.443875084779664e+00, -3.443259001042078e+00, -3.444984204062811e+00, -3.443952325448396e+00, -3.443952325448396e+00, -6.868713405906244e-01, -6.867631138136778e-01, -6.856744149393126e-01, -6.904761049700772e-01, -6.908345880660676e-01, -6.908345880660676e-01, -2.091883698264698e-01, -2.101396633552913e-01, -7.946377865197886e-01, -1.823006282199973e-01, -2.066459365589923e-01, -2.066459365589922e-01, -5.654453883012048e-02, -5.657709482137872e-02, -1.019560944123478e-01, -5.166215359946773e-02, -5.256732317335038e-02, -5.256732317335035e-02, -5.016676681654580e+00, -5.016270460871835e+00, -5.016667740440953e+00, -5.016308976112624e+00, -5.016465460754264e+00, -5.016465460754264e+00, -2.069395956729944e+00, -2.079827169144801e+00, -2.068927324951023e+00, -2.078124651807340e+00, -2.075420805528012e+00, -2.075420805528012e+00, -5.766312244017198e-01, -6.021982964191002e-01, -5.374562477389232e-01, -5.366932000488256e-01, -5.835821730293194e-01, -5.835821730293194e-01, -1.552651566644718e-01, -2.273981518982988e-01, -1.484749162366215e-01, -1.811910463159418e+00, -1.609194220814553e-01, -1.609194220814553e-01, -4.662193398370874e-02, -4.977338740889527e-02, -3.259615589014657e-02, -1.197139659972494e-01, -3.974980561778224e-02, -3.974980561778227e-02, -5.506795043312440e-01, -5.533852925246217e-01, -5.524802193718875e-01, -5.516905220593339e-01, -5.520890763045776e-01, -5.520890763045776e-01, -5.339669328703399e-01, -5.030798254328301e-01, -5.123489423297738e-01, -5.209897647180168e-01, -5.164629840366977e-01, -5.164629840366977e-01, -6.323528563771610e-01, -2.679818866907497e-01, -3.013096491613233e-01, -3.596070897426280e-01, -3.275715322841120e-01, -3.275715322841120e-01, -4.641116246484600e-01, -1.018715389419791e-01, -1.139538065262089e-01, -3.380848185726368e-01, -1.297528131479241e-01, -1.297528131479241e-01, -6.373091806415711e-02, -2.877381096471438e-02, -3.764183265266805e-02, -1.262415558394873e-01, -3.735531328799849e-02, -3.735531328799847e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_optb88_vdw_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_optb88_vdw", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.542155618055002e+01, -2.542152537376954e+01, -2.542166248935959e+01, -2.542160258942289e+01, -2.542198646634302e+01, -2.542207134020508e+01, -2.542078631172025e+01, -2.542054150950244e+01, -2.542162039966458e+01, -2.542114116155555e+01, -2.542162039966458e+01, -2.542114116155555e+01, -4.098988950249601e+00, -4.099102906176384e+00, -4.099023036029215e+00, -4.099139878843276e+00, -4.099879463844866e+00, -4.100128072363215e+00, -4.099057164112322e+00, -4.099301432891906e+00, -4.098236591624991e+00, -4.100137654289047e+00, -4.098236591624991e+00, -4.100137654289047e+00, -7.742263284180769e-01, -7.788499043679808e-01, -7.724993897247053e-01, -7.781583188599814e-01, -7.499892978752640e-01, -7.425835601225435e-01, -7.516855607754095e-01, -7.540674557376342e-01, -7.872217057653179e-01, -7.153871215237617e-01, -7.872217057653179e-01, -7.153871215237617e-01, -1.876425195445482e-01, -1.952780240607878e-01, -1.901358947952804e-01, -1.990161976542775e-01, -8.903199964895870e-01, -9.276017318038703e-01, -1.446017973899741e-01, -1.465378365153083e-01, -1.960137225777584e-01, -1.083265865026219e-01, -1.960137225777583e-01, -1.083265865026217e-01, -1.611138525886437e-02, -1.666120419495670e-02, -1.641781690202350e-02, -1.704980573344271e-02, -4.983686312300385e-02, -5.171610746142842e-02, -1.262803637143507e-02, -1.257478349742726e-02, -1.517945274855615e-02, -1.019751195617076e-02, -1.517945274855612e-02, -1.019751195617075e-02, -6.247996204704720e+00, -6.246451364985769e+00, -6.250351668396518e+00, -6.248726848075097e+00, -6.248127995099699e+00, -6.246530231308046e+00, -6.250149087414919e+00, -6.248597377995354e+00, -6.249201777011248e+00, -6.247593960340870e+00, -6.249201777011248e+00, -6.247593960340870e+00, -2.234196815507747e+00, -2.234078605859699e+00, -2.252637148207987e+00, -2.251976831829462e+00, -2.215276180892555e+00, -2.220602904745068e+00, -2.231178250883438e+00, -2.236687054467043e+00, -2.258729041745812e+00, -2.245433243423625e+00, -2.258729041745812e+00, -2.245433243423625e+00, -6.957038232930568e-01, -6.939213232652715e-01, -7.759106294569620e-01, -7.765726663173425e-01, -6.275921286560562e-01, -6.525413184315281e-01, -6.728241064737476e-01, -6.948457990524176e-01, -7.264482962595799e-01, -6.893454573239567e-01, -7.264482962595799e-01, -6.893454573239567e-01, -1.053221805037354e-01, -1.060575738946443e-01, -1.908069764574578e-01, -1.917484647046377e-01, -9.660288669080376e-02, -1.008845655668967e-01, -2.340127007056043e+00, -2.339124592491577e+00, -1.173970418828230e-01, -1.227869943812275e-01, -1.173970418828230e-01, -1.227869943812275e-01, -1.057119615576493e-02, -1.097154241457697e-02, -1.209362694409665e-02, -1.230875567460627e-02, -8.388887238983822e-03, -8.513236929921324e-03, -7.092162139988968e-02, -7.141506783500849e-02, -9.281606899724825e-03, -1.086014326078788e-02, -9.281606899724839e-03, -1.086014326078790e-02, -7.236280434190859e-01, -7.265474675316687e-01, -7.128724242161962e-01, -7.158408562424449e-01, -7.165046838458374e-01, -7.194806337792921e-01, -7.196455007435795e-01, -7.225610758477738e-01, -7.180618427981502e-01, -7.210069323103486e-01, -7.180618427981502e-01, -7.210069323103486e-01, -7.064372288951246e-01, -7.087906844516301e-01, -5.693065301729402e-01, -5.720561716567824e-01, -6.050351098802821e-01, -6.080857980639818e-01, -6.433701580020059e-01, -6.457753659147418e-01, -6.237306859027856e-01, -6.261958152964233e-01, -6.237306859027856e-01, -6.261958152964233e-01, -8.118119312677304e-01, -8.136252064728339e-01, -2.413335399708172e-01, -2.427750818909898e-01, -2.918315539912422e-01, -2.950467599010445e-01, -3.993771104949360e-01, -4.017560120564843e-01, -3.420929967351648e-01, -3.420768639483865e-01, -3.420929967351648e-01, -3.420768639483864e-01, -5.228155217724064e-01, -5.269108538131542e-01, -4.954749027662789e-02, -4.977352507160249e-02, -6.094957474711088e-02, -6.229789379687215e-02, -3.877197035690357e-01, -3.941566219918325e-01, -8.368837273500493e-02, -8.667063300549745e-02, -8.368837273500490e-02, -8.667063300549747e-02, -2.011505043989609e-02, -2.047744899224681e-02, -5.809377623638512e-03, -5.315822146788093e-03, -8.275814143414611e-03, -8.423030921689570e-03, -8.045206402400720e-02, -8.157245992435849e-02, -8.228568039617721e-03, -1.034782194062812e-02, -8.228568039617717e-03, -1.034782194062811e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_optb88_vdw_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_optb88_vdw", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.189319932270836e-08, 0.000000000000000e+00, -1.189326713248166e-08, -1.189312773096069e-08, 0.000000000000000e+00, -1.189321507502056e-08, -1.189275857395312e-08, 0.000000000000000e+00, -1.189272533356412e-08, -1.189357068280499e-08, 0.000000000000000e+00, -1.189375931550212e-08, -1.189316369990676e-08, 0.000000000000000e+00, -1.189324289758810e-08, -1.189316369990676e-08, 0.000000000000000e+00, -1.189324289758810e-08, -1.577169650869487e-05, 0.000000000000000e+00, -1.577737431995861e-05, -1.577210231395149e-05, 0.000000000000000e+00, -1.577820927898623e-05, -1.578628759365989e-05, 0.000000000000000e+00, -1.578964420190906e-05, -1.575154232156390e-05, 0.000000000000000e+00, -1.575594708427117e-05, -1.578035065154946e-05, 0.000000000000000e+00, -1.576716777687483e-05, -1.578035065154946e-05, 0.000000000000000e+00, -1.576716777687483e-05, -9.934075562991359e-03, 0.000000000000000e+00, -9.935907093307017e-03, -9.941702225330053e-03, 0.000000000000000e+00, -9.943444242923139e-03, -1.006740227599857e-02, 0.000000000000000e+00, -1.007721424256675e-02, -9.789160814382965e-03, 0.000000000000000e+00, -9.790649222453018e-03, -9.871450780153583e-03, 0.000000000000000e+00, -9.775757626719669e-03, -9.871450780153583e-03, 0.000000000000000e+00, -9.775757626719669e-03, -1.364207093705311e+00, 0.000000000000000e+00, -1.230347626876388e+00, -1.337149240966417e+00, 0.000000000000000e+00, -1.186934021546608e+00, -5.753294217864901e-03, 0.000000000000000e+00, -5.364016000838322e-03, -2.705567230213349e+00, 0.000000000000000e+00, -2.586640067984635e+00, -1.162881027284655e+00, 0.000000000000000e+00, -6.653591361081935e+00, -1.162881027284654e+00, 0.000000000000000e+00, -6.653591361081936e+00, -1.911916037034100e+04, 0.000000000000000e+00, -1.601615900254090e+04, -1.696739219749641e+04, 0.000000000000000e+00, -1.390840090632804e+04, -1.102755322497959e+02, 0.000000000000000e+00, -9.494543961281308e+01, -8.059174255146984e+04, 0.000000000000000e+00, -8.393977016558555e+04, -2.652343259253029e+04, 0.000000000000000e+00, -1.743310777397571e+05, -2.652343259253031e+04, 0.000000000000000e+00, -1.743310777397571e+05, -3.571666978488627e-06, 0.000000000000000e+00, -3.574889874219500e-06, -3.573959080278803e-06, 0.000000000000000e+00, -3.577107610691135e-06, -3.571757931756959e-06, 0.000000000000000e+00, -3.574940057599864e-06, -3.573724968683585e-06, 0.000000000000000e+00, -3.576955002190482e-06, -3.572868198078521e-06, 0.000000000000000e+00, -3.576007666306201e-06, -3.572868198078521e-06, 0.000000000000000e+00, -3.576007666306201e-06, -1.216642078655871e-04, 0.000000000000000e+00, -1.216861716567747e-04, -1.190909393781023e-04, 0.000000000000000e+00, -1.191981376345572e-04, -1.220973691714891e-04, 0.000000000000000e+00, -1.220190477442255e-04, -1.198678482994092e-04, 0.000000000000000e+00, -1.197407792279145e-04, -1.198532026757604e-04, 0.000000000000000e+00, -1.203345457976782e-04, -1.198532026757604e-04, 0.000000000000000e+00, -1.203345457976782e-04, -2.002903005379072e-02, 0.000000000000000e+00, -2.025518888102621e-02, -1.777847438971951e-02, 0.000000000000000e+00, -1.780214864386027e-02, -2.840500970484711e-02, 0.000000000000000e+00, -2.511189435142804e-02, -2.988829074551754e-02, 0.000000000000000e+00, -2.612971161387380e-02, -1.762324256805290e-02, 0.000000000000000e+00, -2.141782410005753e-02, -1.762324256805290e-02, 0.000000000000000e+00, -2.141782410005753e-02, -6.890595069881239e+00, 0.000000000000000e+00, -6.764066765276019e+00, -1.023804649245419e+00, 0.000000000000000e+00, -1.008503284869033e+00, -9.317116581532865e+00, 0.000000000000000e+00, -8.050091314878605e+00, -2.173646717208100e-04, 0.000000000000000e+00, -2.177919382593803e-04, -5.063934256275609e+00, 0.000000000000000e+00, -4.714008272572782e+00, -5.063934256275609e+00, 0.000000000000000e+00, -4.714008272572782e+00, -2.028781307711476e+05, 0.000000000000000e+00, -1.743920137457302e+05, -9.496748622718791e+04, 0.000000000000000e+00, -8.893649715359343e+04, -3.570606067504829e+05, 0.000000000000000e+00, -3.119401800467273e+05, -2.853804539880501e+01, 0.000000000000000e+00, -2.773188576674676e+01, -2.762544942864232e+05, 0.000000000000000e+00, -1.103263367993330e+05, -2.762544942864231e+05, 0.000000000000000e+00, -1.103263367993329e+05, -2.659089079683388e-02, 0.000000000000000e+00, -2.622476864572974e-02, -2.516806365380099e-02, 0.000000000000000e+00, -2.482965955083954e-02, -2.558733954981899e-02, 0.000000000000000e+00, -2.524349048895732e-02, -2.599585621491290e-02, 0.000000000000000e+00, -2.563792751707322e-02, -2.578427197092002e-02, 0.000000000000000e+00, -2.543349200244660e-02, -2.578427197092002e-02, 0.000000000000000e+00, -2.543349200244660e-02, -3.058162345520868e-02, 0.000000000000000e+00, -3.018868430512699e-02, -3.474753505179443e-02, 0.000000000000000e+00, -3.428661305374348e-02, -3.238154280696949e-02, 0.000000000000000e+00, -3.195509706293933e-02, -3.078467632142906e-02, 0.000000000000000e+00, -3.040434985426899e-02, -3.155286522015880e-02, 0.000000000000000e+00, -3.114193481596751e-02, -3.155286522015880e-02, 0.000000000000000e+00, -3.114193481596751e-02, -1.458992460891381e-02, 0.000000000000000e+00, -1.456345079608770e-02, -4.900954915635716e-01, 0.000000000000000e+00, -4.820649945950824e-01, -2.889694428534046e-01, 0.000000000000000e+00, -2.818011461501072e-01, -1.337164408380404e-01, 0.000000000000000e+00, -1.312615103795252e-01, -1.957629985082744e-01, 0.000000000000000e+00, -1.966569335845193e-01, -1.957629985082745e-01, 0.000000000000000e+00, -1.966569335845194e-01, -4.814323989848230e-02, 0.000000000000000e+00, -4.719356045928527e-02, -1.131172562623320e+02, 0.000000000000000e+00, -1.110288711055622e+02, -4.955828216840656e+01, 0.000000000000000e+00, -4.558059464944042e+01, -1.734333343221578e-01, 0.000000000000000e+00, -1.652419217772769e-01, -1.601620736616479e+01, 0.000000000000000e+00, -1.467354300735931e+01, -1.601620736616479e+01, 0.000000000000000e+00, -1.467354300735930e+01, -6.416419217923511e+03, 0.000000000000000e+00, -5.829065635525463e+03, -5.997204924344218e+06, 0.000000000000000e+00, -6.978566436282073e+06, -6.729819231032231e+05, 0.000000000000000e+00, -5.731995098302816e+05, -1.861068921896578e+01, 0.000000000000000e+00, -1.770407365007092e+01, -3.955130594712752e+05, 0.000000000000000e+00, -1.432282517905215e+05, -3.955130594712761e+05, 0.000000000000000e+00, -1.432282517905219e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
