
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_lambda_lo_n_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_lambda_lo_n", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.094586577002072e+01, -2.094589318640378e+01, -2.094608283099669e+01, -2.094567353807846e+01, -2.094587836544694e+01, -2.094587836544694e+01, -3.473577921763476e+00, -3.473539896895520e+00, -3.472746090526360e+00, -3.474786083329225e+00, -3.473616327671341e+00, -3.473616327671341e+00, -6.974948028460155e-01, -6.975176170076458e-01, -6.998566501702661e-01, -7.045946723321994e-01, -7.046194774241643e-01, -7.046194774241643e-01, -2.157353133292726e-01, -2.168335072493462e-01, -8.055506251923656e-01, -1.824317719696792e-01, -2.110185800648941e-01, -2.110185800648940e-01, -1.010638467331694e-02, -1.064196845257236e-02, -5.776595185806820e-02, -5.829342365693931e-03, -8.134961767112861e-03, -8.134961767112861e-03, -5.034956359562372e+00, -5.034338722201022e+00, -5.034938699067763e+00, -5.034393266336134e+00, -5.034637306960063e+00, -5.034637306960063e+00, -2.114450256929673e+00, -2.124263442898545e+00, -2.115872394825125e+00, -2.124538136074206e+00, -2.119197987472111e+00, -2.119197987472111e+00, -5.807428328204302e-01, -6.028223495726839e-01, -5.419810550494889e-01, -5.376126336508453e-01, -5.871638709474650e-01, -5.871638709474651e-01, -1.392105310472956e-01, -2.315135516063730e-01, -1.301921196245823e-01, -1.813615441252579e+00, -1.554398911309732e-01, -1.554398911309732e-01, -4.500693974632746e-03, -5.698496541916811e-03, -4.363567569173860e-03, -9.089592137418161e-02, -5.481186022366647e-03, -5.481186022366647e-03, -5.507672212696901e-01, -5.539141004206716e-01, -5.528237457224490e-01, -5.519035036738219e-01, -5.523644754522581e-01, -5.523644754522581e-01, -5.339869753830033e-01, -5.106248168613218e-01, -5.171059832587519e-01, -5.232123834133861e-01, -5.198905547935553e-01, -5.198905547935553e-01, -6.331158317933545e-01, -2.761081270314941e-01, -3.108548147843846e-01, -3.659076630993303e-01, -3.360543465780269e-01, -3.360543465780269e-01, -4.712678311876951e-01, -5.532473095012157e-02, -7.455462565043867e-02, -3.422607106249629e-01, -1.120941416149490e-01, -1.120941416149490e-01, -1.423921501084348e-02, -1.523335400679482e-03, -3.203372292002175e-03, -1.061394241370514e-01, -5.033677957425321e-03, -5.033677957425316e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_lambda_lo_n_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_lambda_lo_n", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.514276546181732e+01, -2.514273582867886e+01, -2.514288108191176e+01, -2.514281980269667e+01, -2.514322101304951e+01, -2.514331528822773e+01, -2.514191605944907e+01, -2.514165177054491e+01, -2.514283593297487e+01, -2.514229468343604e+01, -2.514283593297487e+01, -2.514229468343604e+01, -4.036790401142748e+00, -4.036975058588131e+00, -4.036833036979622e+00, -4.037025156822167e+00, -4.037943367825448e+00, -4.038258325931769e+00, -4.036671382664179e+00, -4.036991477624058e+00, -4.036020925899543e+00, -4.038049886053896e+00, -4.036020925899543e+00, -4.038049886053896e+00, -7.575000741674336e-01, -7.623548661851767e-01, -7.557154971844131e-01, -7.616357461704428e-01, -7.333979193108794e-01, -7.265415742342616e-01, -7.352100181653853e-01, -7.374281465430240e-01, -7.711836256355191e-01, -7.062363515233073e-01, -7.711836256355191e-01, -7.062363515233073e-01, -2.010119469112367e-01, -2.056315325488905e-01, -2.016073145894932e-01, -2.072855787414952e-01, -8.712752010103225e-01, -9.098854020187952e-01, -1.804790028078596e-01, -1.821250449132792e-01, -2.089852977870147e-01, -1.547837494815196e-01, -2.089852977870146e-01, -1.547837494815195e-01, -1.301563332762139e-02, -1.382769023720623e-02, -1.363582405650043e-02, -1.460328098947261e-02, -7.263160253040632e-02, -7.629429953068367e-02, -7.832933054510903e-03, -7.702626893264473e-03, -1.161531068305838e-02, -6.614253708635067e-03, -1.161531068305838e-02, -6.614253708635067e-03, -6.200764836251572e+00, -6.199212345884266e+00, -6.203578484857310e+00, -6.201930583042416e+00, -6.200919981989550e+00, -6.199304923367725e+00, -6.203334259947073e+00, -6.201774319858523e+00, -6.202206818064566e+00, -6.200577673064628e+00, -6.202206818064566e+00, -6.200577673064628e+00, -2.186419678706641e+00, -2.186305518510977e+00, -2.203942450233078e+00, -2.203307824431432e+00, -2.169692058811322e+00, -2.174315344003586e+00, -2.184593615705687e+00, -2.189462274420265e+00, -2.209276989172797e+00, -2.196997041191711e+00, -2.209276989172797e+00, -2.196997041191711e+00, -6.865402107308612e-01, -6.848071202982760e-01, -7.739597389229637e-01, -7.747040433202669e-01, -6.178274209443366e-01, -6.431926692148621e-01, -6.702678641234587e-01, -6.920984068687798e-01, -7.181458971351973e-01, -6.810750799690058e-01, -7.181458971351973e-01, -6.810750799690060e-01, -1.563242944454833e-01, -1.567362890076375e-01, -2.227744057164890e-01, -2.234044269701927e-01, -1.461590489772895e-01, -1.508704966323544e-01, -2.334849101713716e+00, -2.333861751323932e+00, -1.635331586712385e-01, -1.614326790184056e-01, -1.635331586712385e-01, -1.614326790184056e-01, -5.877357777486940e-03, -6.107987000165948e-03, -7.536580926906182e-03, -7.650693201943015e-03, -5.634503348677594e-03, -5.966249570153434e-03, -1.107028688440079e-01, -1.114755786593582e-01, -5.756026885953091e-03, -7.900755836589566e-03, -5.756026885953091e-03, -7.900755836589566e-03, -7.233039409828248e-01, -7.262382468405818e-01, -7.112193860400636e-01, -7.142296037237100e-01, -7.153811393176561e-01, -7.183927058411780e-01, -7.189193533314600e-01, -7.218567991999559e-01, -7.171432718320438e-01, -7.201167376419363e-01, -7.171432718320438e-01, -7.201167376419363e-01, -7.063552236178063e-01, -7.087097486218682e-01, -5.572311181885855e-01, -5.599895019032418e-01, -5.952788564569952e-01, -5.984329977609549e-01, -6.377742047529629e-01, -6.402178054583060e-01, -6.159416023192176e-01, -6.184407209095666e-01, -6.159416023192176e-01, -6.184407209095666e-01, -8.094475170165920e-01, -8.113957334885479e-01, -2.599905054380322e-01, -2.609108444032112e-01, -2.959750252329241e-01, -2.982096035052091e-01, -3.905298790314279e-01, -3.928714573610466e-01, -3.365485267813922e-01, -3.364374172987776e-01, -3.365485267813922e-01, -3.364374172987776e-01, -5.115864178586610e-01, -5.157004625178040e-01, -7.152613969560846e-02, -7.197291838252677e-02, -9.310655778215521e-02, -9.565987608394984e-02, -3.801647657014377e-01, -3.866794949951482e-01, -1.281882115670243e-01, -1.300178280193839e-01, -1.281882115670243e-01, -1.300178280193839e-01, -1.859163471559826e-02, -1.926049802471128e-02, -2.028684154724581e-03, -2.033263670356316e-03, -4.127126873270808e-03, -4.389333444158583e-03, -1.235541222089382e-01, -1.250450094950706e-01, -5.451238967610661e-03, -7.242792440857124e-03, -5.451238967610656e-03, -7.242792440857118e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_lambda_lo_n_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_lambda_lo_n", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.410267343345232e-08, 0.000000000000000e+00, -1.410275153003807e-08, -1.410255957655484e-08, 0.000000000000000e+00, -1.410266877615618e-08, -1.410206791037175e-08, 0.000000000000000e+00, -1.410199992951755e-08, -1.410335697856264e-08, 0.000000000000000e+00, -1.410364193939661e-08, -1.410261196138315e-08, 0.000000000000000e+00, -1.410289182298736e-08, -1.410261196138315e-08, 0.000000000000000e+00, -1.410289182298736e-08, -1.902775177000020e-05, 0.000000000000000e+00, -1.903348809365449e-05, -1.902810209591805e-05, 0.000000000000000e+00, -1.903428469787026e-05, -1.904109931071914e-05, 0.000000000000000e+00, -1.904406187189504e-05, -1.900628549080887e-05, 0.000000000000000e+00, -1.901038483888107e-05, -1.903863087204887e-05, 0.000000000000000e+00, -1.902031711173668e-05, -1.903863087204887e-05, 0.000000000000000e+00, -1.902031711173668e-05, -1.212749629514643e-02, 0.000000000000000e+00, -1.213299678627802e-02, -1.213460554111595e-02, 0.000000000000000e+00, -1.214206480669644e-02, -1.220721752755631e-02, 0.000000000000000e+00, -1.216467098657606e-02, -1.184554652541008e-02, 0.000000000000000e+00, -1.186407767694623e-02, -1.205030155105098e-02, 0.000000000000000e+00, -1.137831222611174e-02, -1.205030155105098e-02, 0.000000000000000e+00, -1.137831222611174e-02, -1.288277388801323e+00, 0.000000000000000e+00, -1.210581739459383e+00, -1.294039991534850e+00, 0.000000000000000e+00, -1.199054456644677e+00, -7.024949439580735e-03, 0.000000000000000e+00, -6.536893476698846e-03, -1.707351750133932e+00, 0.000000000000000e+00, -1.653567617686397e+00, -1.110693330555705e+00, 0.000000000000000e+00, -2.424384880876219e+00, -1.110693330555705e+00, 0.000000000000000e+00, -2.424384880876222e+00, -4.902161828414882e+00, 0.000000000000000e+00, -4.853025023553612e+00, -5.165150049768715e+00, 0.000000000000000e+00, -5.138728160288052e+00, -2.861698347073383e+00, 0.000000000000000e+00, -2.876975179078677e+00, -4.490165339105600e+00, 0.000000000000000e+00, -4.368274898868301e+00, -4.893962669299254e+00, 0.000000000000000e+00, -1.241740717895505e+01, -4.893962669299265e+00, 0.000000000000000e+00, -1.241740717895509e+01, -4.150686677584281e-06, 0.000000000000000e+00, -4.154522302804611e-06, -4.151120584856987e-06, 0.000000000000000e+00, -4.154943457619542e-06, -4.150678760825884e-06, 0.000000000000000e+00, -4.154513820016796e-06, -4.151051576420750e-06, 0.000000000000000e+00, -4.154896809423494e-06, -4.150934839909085e-06, 0.000000000000000e+00, -4.154738940524282e-06, -4.150934839909085e-06, 0.000000000000000e+00, -4.154738940524282e-06, -1.466545435385965e-04, 0.000000000000000e+00, -1.466803868944000e-04, -1.437740038013439e-04, 0.000000000000000e+00, -1.438983298973410e-04, -1.465043498999796e-04, 0.000000000000000e+00, -1.466189020133506e-04, -1.440611306902090e-04, 0.000000000000000e+00, -1.440995565574048e-04, -1.450001880967326e-04, 0.000000000000000e+00, -1.452294412205182e-04, -1.450001880967326e-04, 0.000000000000000e+00, -1.452294412205182e-04, -2.398687067414598e-02, 0.000000000000000e+00, -2.425404227027604e-02, -1.962175332244208e-02, 0.000000000000000e+00, -1.961365031584280e-02, -3.431194733330373e-02, 0.000000000000000e+00, -3.020747133444048e-02, -3.357260906194622e-02, 0.000000000000000e+00, -2.940408895660674e-02, -2.094436389489234e-02, 0.000000000000000e+00, -2.552139568367516e-02, -2.094436389489234e-02, 0.000000000000000e+00, -2.552139568367516e-02, -1.943338184484765e+00, 0.000000000000000e+00, -1.974196891041457e+00, -7.808231234578366e-01, 0.000000000000000e+00, -7.734097438829339e-01, -2.196623007423678e+00, 0.000000000000000e+00, -2.128786482528146e+00, -2.388792412635043e-04, 0.000000000000000e+00, -2.393263651117350e-04, -2.107488746849965e+00, 0.000000000000000e+00, -2.498533118729192e+00, -2.107488746849965e+00, 0.000000000000000e+00, -2.498533118729192e+00, -6.303352397770521e+00, 0.000000000000000e+00, -5.455772384603301e+00, -5.427705512037583e+00, 0.000000000000000e+00, -5.011274321544939e+00, -3.091680580954034e+01, 0.000000000000000e+00, -3.439295618777199e+01, -3.273311507890096e+00, 0.000000000000000e+00, -3.154124798219793e+00, -1.537433689783863e+01, 0.000000000000000e+00, -1.510156600358119e+01, -1.537433689783859e+01, 0.000000000000000e+00, -1.510156600358116e+01, -2.786676651040601e-02, 0.000000000000000e+00, -2.745346737394897e-02, -2.768894014698298e-02, 0.000000000000000e+00, -2.728515713905031e-02, -2.775097814483179e-02, 0.000000000000000e+00, -2.734431120233628e-02, -2.780402066501910e-02, 0.000000000000000e+00, -2.739371495988246e-02, -2.777763779962168e-02, 0.000000000000000e+00, -2.736907686747892e-02, -2.777763779962168e-02, 0.000000000000000e+00, -2.736907686747892e-02, -3.134779822634599e-02, 0.000000000000000e+00, -3.093885090350052e-02, -4.243087463187346e-02, 0.000000000000000e+00, -4.186857086647395e-02, -3.918339103396537e-02, 0.000000000000000e+00, -3.863816259572555e-02, -3.604540097112077e-02, 0.000000000000000e+00, -3.557965860245296e-02, -3.767990563392402e-02, 0.000000000000000e+00, -3.717247953943242e-02, -3.767990563392402e-02, 0.000000000000000e+00, -3.717247953943242e-02, -1.619974804284020e-02, 0.000000000000000e+00, -1.612951138777125e-02, -4.566119490299109e-01, 0.000000000000000e+00, -4.517423384078768e-01, -3.118008497574248e-01, 0.000000000000000e+00, -3.067753314383247e-01, -1.629577056441392e-01, 0.000000000000000e+00, -1.600086478609410e-01, -2.305927129045411e-01, 0.000000000000000e+00, -2.318858472085994e-01, -2.305927129045412e-01, 0.000000000000000e+00, -2.318858472085996e-01, -5.878071829138019e-02, 0.000000000000000e+00, -5.762790957700409e-02, -2.618129864573356e+00, 0.000000000000000e+00, -2.621134666891266e+00, -2.573750809239273e+00, 0.000000000000000e+00, -2.628228854589813e+00, -2.114877710193694e-01, 0.000000000000000e+00, -2.013274691021481e-01, -3.236701141978116e+00, 0.000000000000000e+00, -3.770859644058778e+00, -3.236701141978118e+00, 0.000000000000000e+00, -3.770859644058782e+00, -3.884840114421060e+00, 0.000000000000000e+00, -3.965877386917794e+00, -1.939425229829321e+01, 0.000000000000000e+00, -3.435396368941533e+01, -1.196980711291715e+01, 0.000000000000000e+00, -1.274265949887539e+01, -3.613845201450407e+00, 0.000000000000000e+00, -3.536618124983938e+00, -3.169731696880288e+01, 0.000000000000000e+00, -1.567735743680035e+01, -3.169731696880293e+01, 0.000000000000000e+00, -1.567735743680040e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
