
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_gga_x_pbetrans_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbetrans", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.097079984818241e+01, -2.097082246603671e+01, -2.097100176004322e+01, -2.097062982725923e+01, -2.097081112079675e+01, -2.097081112079675e+01, -3.481237279515372e+00, -3.481205489436070e+00, -3.480475813050710e+00, -3.482471907274477e+00, -3.481235758449920e+00, -3.481235758449920e+00, -7.027508793130102e-01, -7.029029891588217e-01, -7.096044422954095e-01, -7.137120554222678e-01, -7.028018852538115e-01, -7.028018852538115e-01, -2.236938286425676e-01, -2.240352452965262e-01, -8.155721444149198e-01, -1.946671931050666e-01, -2.237614212726493e-01, -2.237614212726493e-01, -1.710044351093456e-02, -1.790732436435065e-02, -7.077689276859098e-02, -8.220844664666447e-03, -1.772080825011350e-02, -1.772080825011350e-02, -5.036166125989434e+00, -5.035515678545035e+00, -5.036106017231005e+00, -5.035600140721767e+00, -5.035823201749167e+00, -5.035823201749167e+00, -2.136450947747781e+00, -2.145254761814074e+00, -2.139199879233413e+00, -2.146017996395787e+00, -2.138946340707470e+00, -2.138946340707470e+00, -5.748900013794467e-01, -5.955055166899091e-01, -5.477792895749065e-01, -5.477864729454724e-01, -5.923142421668532e-01, -5.923142421668532e-01, -1.473599061277153e-01, -2.514607068919569e-01, -1.458614901023650e-01, -1.811562352730233e+00, -1.745432669095363e-01, -1.745432669095363e-01, -7.930707340125740e-03, -9.062160230502759e-03, -6.792347548731447e-03, -9.583968930136623e-02, -8.256986333206463e-03, -8.256986333206463e-03, -5.586270675098509e-01, -5.614856603918248e-01, -5.604687641204051e-01, -5.596743159706941e-01, -5.600716737852153e-01, -5.600716737852153e-01, -5.397574202199714e-01, -5.190492993869942e-01, -5.244544106223891e-01, -5.296618675221612e-01, -5.267772482164952e-01, -5.267772482164951e-01, -6.253908552298867e-01, -2.929788657312357e-01, -3.224523339667955e-01, -3.690760103300358e-01, -3.432991468409081e-01, -3.432991468409080e-01, -4.714289492844150e-01, -6.598401948906085e-02, -8.751573459700182e-02, -3.376881761144646e-01, -1.202330586049709e-01, -1.202330586049709e-01, -2.003165346100157e-02, -2.482472527542362e-03, -4.715107881843292e-03, -1.146327138046318e-01, -7.017912925403779e-03, -7.017912925403770e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_gga_x_pbetrans_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbetrans", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.504168714925229e+01, -2.504177852016264e+01, -2.504218668166566e+01, -2.504069044176758e+01, -2.504173533068697e+01, -2.504173533068697e+01, -4.007411965295987e+00, -4.007459121302054e+00, -4.008920234953887e+00, -4.007252107185859e+00, -4.007453290063024e+00, -4.007453290063024e+00, -7.374613741534775e-01, -7.360589538324314e-01, -7.000859777954073e-01, -7.064222119823476e-01, -7.369525606979572e-01, -7.369525606979572e-01, -1.911168783366183e-01, -1.935753476888895e-01, -9.057211374261488e-01, -1.620491527812556e-01, -1.918342531593668e-01, -1.918342531593668e-01, -2.268267419824474e-02, -2.374081626025710e-02, -8.885811397544520e-02, -1.095011701425267e-02, -2.349379474997677e-02, -2.349379474997677e-02, -6.183617117794672e+00, -6.186492247444400e+00, -6.183910588942783e+00, -6.186146180959131e+00, -6.185092331841496e+00, -6.185092331841496e+00, -2.113611154221887e+00, -2.132056346840096e+00, -2.102727575660535e+00, -2.117041404948533e+00, -2.140512582543399e+00, -2.140512582543399e+00, -6.749544244208256e-01, -7.664164037643116e-01, -6.381295158796860e-01, -6.919022828582787e-01, -7.058231636820168e-01, -7.058231636820168e-01, -2.067516029015346e-01, -2.031202675940345e-01, -2.224558965213788e-01, -2.330878152503709e+00, -1.883693651018528e-01, -1.883693651018528e-01, -1.056409610389247e-02, -1.206767427265642e-02, -9.045631099706219e-03, -1.140601424636222e-01, -1.099533583013829e-02, -1.099533583013829e-02, -7.371194196241326e-01, -7.256632577092612e-01, -7.297290467877385e-01, -7.329021162040146e-01, -7.313117483004710e-01, -7.313117483004710e-01, -7.146994202591165e-01, -5.650431222515314e-01, -6.065801997194196e-01, -6.471824067164004e-01, -6.264873552399560e-01, -6.264873552399559e-01, -8.023301514188913e-01, -2.436769759769339e-01, -2.882969909052950e-01, -3.885565359930074e-01, -3.331383998847632e-01, -3.331383998847631e-01, -5.069186467810617e-01, -8.388721570937374e-02, -1.070478877385804e-01, -3.762694180380768e-01, -1.407414478640738e-01, -1.407414478640738e-01, -2.654452485419004e-02, -3.309553578483629e-03, -6.284204722500546e-03, -1.347770714105781e-01, -9.346845353329719e-03, -9.346845353329707e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_gga_x_pbetrans_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("gga_x_pbetrans", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-7.391917673886826e-09, -7.391863949569459e-09, -7.391545331774986e-09, -7.392426670660940e-09, -7.391890001407793e-09, -7.391890001407793e-09, -1.015078533461014e-05, -1.015091432014127e-05, -1.015278267255778e-05, -1.014095654162674e-05, -1.015067871236056e-05, -1.015067871236056e-05, -6.786816975472117e-03, -6.797107413127316e-03, -6.996035655800033e-03, -6.811613577273914e-03, -6.790661966605599e-03, -6.790661966605599e-03, -8.340860211314605e-01, -8.182229441861999e-01, -3.509945271744235e-03, -1.465934732411414e+00, -8.297365341331681e-01, -8.297365341331681e-01, -5.264736314211417e+00, -5.278807039667559e+00, -2.195990794741790e+00, -3.729720332147418e+00, -5.483803226952590e+00, -5.483803226952590e+00, -2.152135747682600e-06, -2.151768034543661e-06, -2.152090559223992e-06, -2.151804774157537e-06, -2.151958171620473e-06, -2.151958171620473e-06, -8.487986786711198e-05, -8.306815973527679e-05, -8.505659497799051e-05, -8.364262089630145e-05, -8.340506931809721e-05, -8.340506931809721e-05, -1.334499716948046e-02, -1.042132707171547e-02, -1.633458920811597e-02, -1.487804591437739e-02, -1.164254869110504e-02, -1.164254869110504e-02, 3.284270286640655e-01, -5.580661548616782e-01, 1.007905471178957e+00, -1.217265159091776e-04, -1.071617636192188e+00, -1.071617636192188e+00, -3.956678592086491e+00, -3.964782626789206e+00, -1.134803330258972e+01, -2.129970476618378e+00, -5.856178813956186e+00, -5.856178813956184e+00, -1.306848404843061e-02, -1.312137186061581e-02, -1.310241787134270e-02, -1.308794298588809e-02, -1.309522391585223e-02, -1.309522391585223e-02, -1.493259526838682e-02, -2.188271266669615e-02, -1.960041619024356e-02, -1.768971014868181e-02, -1.865239336553435e-02, -1.865239336553436e-02, -8.599522638044123e-03, -2.925959017606333e-01, -1.833271481001849e-01, -8.888637159566624e-02, -1.300992395969571e-01, -1.300992395969571e-01, -3.260640305481852e-02, -1.860308546307695e+00, -1.845598500927893e+00, -1.189716708151677e-01, -1.470012027324613e+00, -1.470012027324611e+00, -3.955103796731370e+00, -6.819889802230448e+00, -5.872033463217578e+00, -1.735322841061547e+00, -8.552543238826839e+00, -8.552543238826821e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
