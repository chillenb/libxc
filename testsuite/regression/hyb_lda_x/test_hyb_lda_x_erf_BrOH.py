
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_lda_x_erf_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_lda_x_erf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.965300643887414e+01, -1.965305455148444e+01, -1.965330462553050e+01, -1.965251605571326e+01, -1.965303151564770e+01, -1.965303151564770e+01, -3.061006734362779e+00, -3.061013500371339e+00, -3.061332186214941e+00, -3.061466413547825e+00, -3.061023947808359e+00, -3.061023947808359e+00, -4.658450208687954e-01, -4.652268493229352e-01, -4.492175369597126e-01, -4.538217760692176e-01, -4.656195532892917e-01, -4.656195532892917e-01, -5.697485042492444e-02, -5.857186814978694e-02, -5.859180097033749e-01, -2.770055234347631e-02, -5.745245043059875e-02, -5.745245043059875e-02, -1.824120569187669e-05, -2.095790209884382e-05, -1.347414868003116e-03, -2.018010948464145e-06, -2.031070277862206e-05, -2.031070277862206e-05, -4.662616683419031e+00, -4.663475282897976e+00, -4.662707272681865e+00, -4.663374842261576e+00, -4.663053080693063e+00, -4.663053080693063e+00, -1.650563847674661e+00, -1.663306562122422e+00, -1.645412776761744e+00, -1.655357852359049e+00, -1.665858887566272e+00, -1.665858887566272e+00, -3.882345278344973e-01, -4.331970229267487e-01, -3.617212056910258e-01, -3.828970261214899e-01, -4.082340866348091e-01, -4.082340866348091e-01, -1.280151876014244e-02, -5.783245797660846e-02, -1.237668733318209e-02, -1.615891648403960e+00, -1.857849316094164e-02, -1.857849316094164e-02, -1.811760956051168e-06, -2.703827802826423e-06, -1.138785144629184e-06, -3.500034494232978e-03, -2.045548311702774e-06, -2.045548311702774e-06, -4.048221413442049e-01, -4.019527806524831e-01, -4.029812703238714e-01, -4.037748323106575e-01, -4.033776441320787e-01, -4.033776441320787e-01, -3.875884955445065e-01, -3.191695154910179e-01, -3.390383704206900e-01, -3.575298918887597e-01, -3.481001264436459e-01, -3.481001264436459e-01, -4.607696433857104e-01, -9.118772860250299e-02, -1.245730863802332e-01, -1.872423089778132e-01, -1.535255701464951e-01, -1.535255701464951e-01, -2.757398651686170e-01, -1.077442172299670e-03, -2.588643444544394e-03, -1.710337939294196e-01, -7.329756258518761e-03, -7.329756258518761e-03, -2.933627582914608e-05, -5.552525707177485e-08, -3.805743623267021e-07, -6.443526625402885e-03, -1.255847173828345e-06, -1.255847173828339e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_lda_x_erf_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_lda_x_erf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.626008251233824e+01, -2.626014666332281e+01, -2.626048009973714e+01, -2.625942865958750e+01, -2.626011594847284e+01, -2.626011594847284e+01, -4.135642661071030e+00, -4.135651686859167e+00, -4.136076810584416e+00, -4.136255868490457e+00, -4.135665623636226e+00, -4.135665623636226e+00, -6.665884102762123e-01, -6.657531257556787e-01, -6.441129270130621e-01, -6.503382318523968e-01, -6.662837570526682e-01, -6.662837570526682e-01, -9.678252815415321e-02, -9.925769906412332e-02, -8.284754387043287e-01, -4.971803145491017e-02, -9.752353911366074e-02, -9.752353911366074e-02, -3.645071872083434e-05, -4.187586283550357e-05, -2.654061292585485e-03, -4.035213514389175e-06, -4.058349813345457e-05, -4.058349813345457e-05, -6.271825357826301e+00, -6.272970408822822e+00, -6.271946170069788e+00, -6.272836458535578e+00, -6.272407348795743e+00, -6.272407348795743e+00, -2.253404802644886e+00, -2.270421382731862e+00, -2.246525973571305e+00, -2.259806744517538e+00, -2.273829705794514e+00, -2.273829705794514e+00, -5.615155883613937e-01, -6.224410042354358e-01, -5.255061396967811e-01, -5.542718392752095e-01, -5.886355271960108e-01, -5.886355271960108e-01, -2.394811308354166e-02, -9.811264666509409e-02, -2.318649237340079e-02, -2.207101746294561e+00, -3.414217713987412e-02, -3.414217713987412e-02, -3.622846477141302e-06, -5.406339281930659e-06, -2.277258758850413e-06, -6.802172727639812e-03, -4.090269773404739e-06, -4.090269773404739e-06, -5.840112254691330e-01, -5.801215628494113e-01, -5.815158466936492e-01, -5.825915880044905e-01, -5.820531719026680e-01, -5.820531719026680e-01, -5.606389694835191e-01, -4.675514561182353e-01, -4.946401048131266e-01, -5.198071049257579e-01, -5.069781253602934e-01, -5.069781253602934e-01, -6.597297917343768e-01, -1.484727132129701e-01, -1.970709686222614e-01, -2.857416254915052e-01, -2.383431015947458e-01, -2.383431015947458e-01, -4.081352194680752e-01, -2.126752556899632e-03, -5.057054496153832e-03, -2.630294315875352e-01, -1.399222781442488e-02, -1.399222781442487e-02, -5.860260344390610e-05, -1.110484866855078e-07, -7.610985845356290e-07, -1.234678779974631e-02, -2.511327637803056e-06, -2.511327637803044e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
