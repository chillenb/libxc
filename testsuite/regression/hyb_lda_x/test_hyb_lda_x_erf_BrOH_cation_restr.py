
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_lda_x_erf_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_lda_x_erf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.965351519759785e+01, -1.965357047786321e+01, -1.965383330203556e+01, -1.965301048824371e+01, -1.965343920029688e+01, -1.965343920029688e+01, -3.061155562720948e+00, -3.061162521529487e+00, -3.061402365722607e+00, -3.061597593136227e+00, -3.061241625166932e+00, -3.061241625166932e+00, -4.696218122273405e-01, -4.689534698599417e-01, -4.528831231670570e-01, -4.577696226829782e-01, -4.567302626251344e-01, -4.567302626251344e-01, -5.107991055019684e-02, -5.274705260385364e-02, -5.706632609859426e-01, -2.734229056451893e-02, -3.586118563306171e-02, -3.586118563306171e-02, -3.790785822700273e-06, -4.419813945202689e-06, -7.207011551932671e-04, -7.306687989633705e-07, -1.449474742928854e-06, -1.449474742928854e-06, -4.664722955518474e+00, -4.665609632113491e+00, -4.664767116743143e+00, -4.665549837773499e+00, -4.665170610062980e+00, -4.665170610062980e+00, -1.652588287394742e+00, -1.665721474035193e+00, -1.643000894202530e+00, -1.654606653433588e+00, -1.664483549404120e+00, -1.664483549404120e+00, -3.939735182701328e-01, -4.395184209886559e-01, -3.547931462677361e-01, -3.739408420467081e-01, -4.024581970683932e-01, -4.024581970683932e-01, -1.087329124311938e-02, -5.124627991110253e-02, -8.832161542372057e-03, -1.617968186811181e+00, -1.648344367688714e-02, -1.648344367688714e-02, -3.356559798433617e-07, -6.826445888571012e-07, -3.052334050892092e-07, -2.933729013425523e-03, -5.336106621102137e-07, -5.336106621102137e-07, -3.965278464807243e-01, -3.934956147638642e-01, -3.945624735518914e-01, -3.954413192629440e-01, -3.950014052430736e-01, -3.950014052430736e-01, -3.822098895040366e-01, -3.099603682716059e-01, -3.305227037456273e-01, -3.509996666846338e-01, -3.405320277403335e-01, -3.405320277403335e-01, -4.673402599943448e-01, -8.247910378218969e-02, -1.157888690478053e-01, -1.846370655908681e-01, -1.470754820326252e-01, -1.470754820326252e-01, -2.755805080821077e-01, -6.335185168129965e-04, -1.568192970522964e-03, -1.741539501287618e-01, -5.784537067910648e-03, -5.784537067910648e-03, -1.064633093864897e-05, -1.304188652786554e-08, -1.206075108105109e-07, -4.857239205615514e-03, -4.227714696034081e-07, -4.227714696034070e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_lda_x_erf_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_lda_x_erf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.626076086615885e+01, -2.626083457414153e+01, -2.626118501094595e+01, -2.626008791156816e+01, -2.626065953510141e+01, -2.626065953510141e+01, -4.135841196616580e+00, -4.135850479597551e+00, -4.136170429339572e+00, -4.136430860729059e+00, -4.135956003057117e+00, -4.135956003057117e+00, -6.716911892832069e-01, -6.707882605388882e-01, -6.490692064905748e-01, -6.556749751117426e-01, -6.542700507332885e-01, -6.542700507332885e-01, -8.757757439307562e-02, -9.019222312044203e-02, -8.079419308260627e-01, -4.911664784281160e-02, -6.322116811149302e-02, -6.322116811149303e-02, -7.579259967670658e-06, -8.836642221542388e-06, -1.426975587281532e-03, -1.461188898508840e-06, -2.898483784185320e-06, -2.898483784185320e-06, -6.274634337902117e+00, -6.275816833055825e+00, -6.274693232471394e+00, -6.275737089759341e+00, -6.275231341751044e+00, -6.275231341751044e+00, -2.256108257696253e+00, -2.273646206955060e+00, -2.243305082833123e+00, -2.258803592554742e+00, -2.271993109231254e+00, -2.271993109231254e+00, -5.693013389192433e-01, -6.309944150229641e-01, -5.160848512482773e-01, -5.421109973654611e-01, -5.808067474422366e-01, -5.808067474422366e-01, -2.047672870630459e-02, -8.783891943179414e-02, -1.675925851609696e-02, -2.209874944326117e+00, -3.047853265523695e-02, -3.047853265523695e-02, -6.712712892884118e-07, -1.365156407450622e-06, -6.104320958286881e-07, -5.719595216909563e-03, -1.067133255477024e-06, -1.067133255477024e-06, -5.727657125363909e-01, -5.686531067639403e-01, -5.701001750959495e-01, -5.712921512012981e-01, -5.706955053858727e-01, -5.706955053858727e-01, -5.533391054765174e-01, -4.549775633455311e-01, -4.830364147592459e-01, -5.109239524704070e-01, -4.966744710591829e-01, -4.966744710591829e-01, -6.686087107578458e-01, -1.355427965556467e-01, -1.844081851529563e-01, -2.820991824358318e-01, -2.292018343695372e-01, -2.292018343695372e-01, -4.079165985315619e-01, -1.255392687258012e-03, -3.083954038607349e-03, -2.674113170919836e-01, -1.111647839563459e-02, -1.111647839563459e-02, -2.127974122359420e-05, -2.608359176659389e-08, -2.412076354220994e-07, -9.374874452153500e-03, -8.454831952332850e-07, -8.454831952332826e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
