
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data

# test_hyb_mgga_xc_pwb6k_BrOH_cation_2_zk() not generated due to NaN in reference data

# test_hyb_mgga_xc_pwb6k_BrOH_cation_2_vrho() not generated due to NaN in reference data

# test_hyb_mgga_xc_pwb6k_BrOH_cation_2_vsigma() not generated due to NaN in reference data


def test_hyb_mgga_xc_pwb6k_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_pwb6k", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-3.917471522259908e-05, -3.917480666326107e-05, -3.917448580994359e-05, -3.917464000171363e-05, -3.917370661284050e-05, -3.917353614629186e-05, -3.917629863541938e-05, -1.288903459261014e-05, -3.917458068216103e-05, -1.289073908921086e-05, -1.288958340162796e-05, -1.289073908921086e-05, -9.736017306137146e-05, -9.886367289552889e-04, -9.740204464570460e-05, -9.735530818568934e-05, -9.822010467490669e-05, -9.836539849110365e-05, -9.790757137319168e-05, -9.790629966980647e-05, -9.729402451750201e-05, -9.864377055930199e-05, -9.889006949787293e-04, -9.864377055930199e-05, -1.598021136832216e-02, -1.587732578179836e-02, -1.602089576144582e-02, -5.098471821363094e-04, -4.114473626398109e-04, -4.002819791111868e-04, -4.423410711125472e-04, -1.642148573775559e-02, -1.568044317361094e-02, -1.744678139345269e-02, -5.221601539425430e-04, -3.595109734647280e-04, -1.383354092125630e-01, -2.213261213527670e-03, -1.358014431510194e-01, -2.403488136983947e-03, -1.307465560947332e-04, -1.205958836055364e-02, -4.749088701407264e-04, -6.018513592451910e-04, -1.657575353644815e-03, -1.568334970197396e-04, -1.657575353644813e-03, -3.259754731379892e-01, -2.488380848205206e-07, -2.962619560765819e-07, -1.204977028068718e+01, -3.614441360692285e-07, -1.369328487948551e+00, -1.858739859238974e-05, -4.323597275975776e-08, -4.164211249938712e-08, -1.714330888829856e-07, -5.937558937201641e-08, -1.714330888829856e-07, -5.937558937201650e-08, -2.142970877238849e-04, -2.143947668998532e-04, -2.154129641843859e-04, -2.154737088125122e-04, -2.143753374258293e-04, -2.144436129220083e-04, -2.153320653488454e-04, -2.154230263490136e-04, -4.879961484479221e-04, -2.149339532731893e-04, -2.148555739380095e-04, -4.882054926856168e-04, -1.944242748623182e-04, -1.956546176212729e-04, -2.040971999716786e-04, -2.050672636811983e-04, -1.858348377518730e-04, -1.894256678757295e-04, -1.941389662564622e-04, -1.979234998132929e-04, -2.066228492472903e-04, -2.641639124623456e-03, -2.066228492472903e-04, -2.016267458454632e-04, -3.586644100332346e-03, -1.984749290175147e-02, -5.902229191384951e-03, -6.100674969653332e-03, -2.399912821112885e-03, -2.924792828982732e-03, -3.713215909314464e-03, -4.152186423106574e-03, -4.129666106188163e-03, -2.014640642022206e-02, -4.129666106188163e-03, -3.818541505057819e-03, -1.713638317542423e-04, -1.749515202272950e-04, -1.344952233432972e-01, -8.122433137230451e-04, -1.328304702162773e-04, -1.618868627766432e-04, -6.086905474663295e-04, -6.096641189618415e-04, -3.303159540359673e-04, -5.499997404761364e-04, -3.303159540359673e-04, -5.499997404761368e-04, -3.228303714073314e+01, -1.423732486051375e-08, -3.675346069887306e-08, -3.380916324129726e-08, -1.155903845103495e-07, -1.495151775033683e-07, -6.330664591218255e-05, -6.758971769825938e-01, -2.312280484993115e-08, -1.815147565698924e-07, -2.312280484993116e-08, -1.815147565698921e-07, -1.523286877826459e-02, -1.524284434597390e-02, -1.226307593787927e-02, -1.229734908041867e-02, -1.983160539830672e-02, -1.970666739122217e-02, -1.977746314944726e-02, -1.407928874276906e-02, -1.980452801724910e-02, -1.968033565964845e-02, -1.980452801724910e-02, -1.364639295755820e-02, -1.540502385540512e-02, -1.544442653266387e-02, -3.714854154865281e-03, -2.619498423429564e-02, -5.382732871768650e-03, -2.431986097731804e-02, -8.088897413086583e-03, -8.099914334837512e-03, -6.546057339452723e-03, -6.580595753777842e-03, -6.546057339452723e-03, -2.350005329694931e-02, -4.544884577858044e-03, -1.600564578451296e-02, -1.220851966237409e-03, -1.236433003658097e-03, -7.129940082659059e-02, -1.813737633046031e-03, -4.596769162591872e-02, -3.247634464642370e-03, -2.604639184018682e-03, -2.634993344082617e-03, -2.604639184018683e-03, -5.701619287669108e-02, -3.068584316748001e-03, -3.226248135181511e-03, -1.404516281424835e+00, -1.391711463467844e+00, -2.879547791471354e-05, -3.267286621866256e-05, -4.721642627211042e-03, -5.897262349908831e-03, -1.400649061265286e-04, -2.026869013936484e-04, -1.400649061265287e-04, -2.026869013936485e-04, -8.271235436698682e+00, -7.918925502147195e+00, -9.646380217293459e-10, -9.667967023757173e-10, -4.818582270800353e+01, -4.495849352159821e+01, -5.342280621683502e-01, -5.221142930065400e-01, -5.111234781891840e-08, -1.468760044713086e-07, -5.111234781891842e-08, -2.538022450106644e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
