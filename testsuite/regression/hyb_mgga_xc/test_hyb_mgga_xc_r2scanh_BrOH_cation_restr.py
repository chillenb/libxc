
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_r2scanh_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_r2scanh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.962405442938383e+01, -1.962415962314146e+01, -1.962462370976028e+01, -1.962306206350312e+01, -1.962388080530009e+01, -1.962388080530009e+01, -2.859536230341754e+00, -2.859645968675113e+00, -2.862594142608066e+00, -2.861652064457790e+00, -2.861465152026187e+00, -3.413136720986349e+00, -5.594196261542911e-01, -6.665148357892479e-01, -6.472139070199020e-01, -6.534264789831751e-01, -6.520922957509840e-01, -6.520922957509840e-01, -1.799471061406789e-01, -1.828547046376225e-01, -6.295739606176428e-01, -1.330525431070657e-01, -1.515403918694626e-01, -1.515403918694626e-01, -3.315229984845230e-03, -3.565251098236312e-03, -2.986175553288429e-02, -1.518166405619352e-03, -2.148225700702488e-03, -2.148225700702488e-03, -5.128505700580097e+00, -5.129498307060150e+00, -5.128555580330747e+00, -4.945823649319586e+00, -5.129006664119593e+00, -5.129006664119593e+00, -1.600995452526319e+00, -1.620591605572044e+00, -1.586389069258625e+00, -1.603663425541979e+00, -1.619053366859754e+00, -1.939755289153650e+00, -5.955007181316018e-01, -6.473851225736499e-01, -5.507159828083200e-01, -5.735862406265286e-01, -6.052258189992480e-01, -5.727497183850997e-01, -9.510858866717423e-02, -1.767410468880313e-01, -8.895667392681594e-02, -1.902233576032576e+00, -1.079370339996617e-01, -1.079370339996617e-01, -4.152857973636034e-03, -1.453147935966740e-03, -1.231617142908017e-03, -6.322987706660352e-02, -4.792389887958392e-03, -1.450647839306351e-03, -6.019186572832544e-01, -5.982579783546992e-01, -5.949215084894721e-01, -6.006137316023090e-01, -6.000829034911057e-01, -6.000829034911057e-01, -5.861262974658922e-01, -5.018849263367284e-01, -5.262605584184672e-01, -5.502644798798770e-01, -5.380304840025829e-01, -5.191849914919830e-01, -6.771821764332173e-01, -2.036893318920354e-01, -2.700507769423262e-01, -3.217808576540070e-01, -3.108680745532760e-01, -3.108680745532760e-01, -4.222826600014329e-01, -2.835524201237110e-02, -4.069031082103573e-02, -3.462786393515070e-01, -7.786002668274992e-02, -7.049206495258892e-02, -4.924754099686233e-03, -2.286862143770844e-04, -7.361409383581721e-04, -6.595423947139535e-02, -1.349107570372466e-03, -1.349107570372460e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_r2scanh_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_r2scanh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.886440596295803e+01, -2.886445680632293e+01, -2.886471965568965e+01, -2.886396041505033e+01, -2.886435306935959e+01, -2.886435306935959e+01, -4.442474351588590e+00, -4.442702079000855e+00, -4.448780455659355e+00, -4.446719048664630e+00, -4.446487380376294e+00, -4.263144908513782e+00, -7.814763013989976e-01, -7.953809666994882e-01, -7.577669418020267e-01, -7.722318129415107e-01, -7.690593823142912e-01, -7.690593823142912e-01, -2.146815386144252e-01, -2.197258798905797e-01, -8.484077071283914e-01, -1.209249837244972e-01, -1.624081124467535e-01, -1.624081124467536e-01, 5.562636519004510e-02, 5.941273444084365e-02, 1.316446553343932e-01, 2.352878088886273e-02, 3.436491093552817e-02, 3.436491093552817e-02, -6.702273499853804e+00, -6.704406809344134e+00, -6.702386846991660e+00, -6.953884493249132e+00, -6.703347198882762e+00, -6.703347198882762e+00, -2.447098060119801e+00, -2.481855125272502e+00, -2.421063073894274e+00, -2.451731574824628e+00, -2.479218433049804e+00, -2.403898071033529e+00, -7.682568594942514e-01, -8.446538669092530e-01, -7.033522749028706e-01, -7.405288084113572e-01, -7.826570542275185e-01, -8.215696844220827e-01, -1.223865089668546e-01, -1.881307019004724e-01, -1.144610248501269e-01, -2.447787156120373e+00, -8.435879735026942e-02, -8.435879735026959e-02, -5.438481464556945e-03, 2.260871346311443e-02, 1.326094912940940e-02, -8.140655196759142e-02, -6.269776285882302e-03, 1.926017765152267e-02, -7.933056856421351e-01, -7.863966061066882e-01, -7.947331386217494e-01, -7.908099968220638e-01, -7.898028781451053e-01, -7.898028781451053e-01, -7.721135663969376e-01, -6.449197102488844e-01, -6.822974280072746e-01, -7.185922209003760e-01, -7.001515349291293e-01, -7.237931583848359e-01, -8.808514255161872e-01, -2.676759238186703e-01, -3.280630824347016e-01, -4.767487543724386e-01, -3.887373726086602e-01, -3.887373726086601e-01, -6.304129073691828e-01, 1.352953147558373e-01, 1.044776708901142e-01, -4.448188224002662e-01, -1.001990112818730e-01, -7.857248032312920e-03, 9.232585679202616e-02, 1.690436208863571e-03, 7.715412960540017e-03, -8.024845914750764e-04, 1.659478600820880e-02, 1.659478600821258e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_r2scanh_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_r2scanh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-6.512062389993900e-09, -6.512087520142448e-09, -6.512138135829316e-09, -6.511771546658983e-09, -6.511972472415482e-09, -6.511972472415482e-09, 5.481663899478172e-06, 5.478431782113525e-06, 5.392177561721982e-06, 5.425249987544028e-06, 5.423940530042188e-06, -6.187912162006926e-06, 8.431310002255294e-03, -3.646163723490177e-03, -4.045684637514299e-03, -3.917953407176096e-03, -3.944677587174953e-03, -3.944677587174953e-03, -5.974539054757656e-01, -5.598649990735640e-01, 5.663646752264431e-03, -1.903670722114473e+00, -1.173882574994433e+00, -1.173882574994431e+00, -2.385096791814965e+04, -2.231289323341116e+04, -2.529436034957421e+02, -4.524305128974261e+04, -3.915311832239263e+04, -3.915311832239263e+04, -1.487001821985306e-06, -1.487431724892589e-06, -1.487034607343561e-06, -1.767065515382879e-06, -1.487211670577393e-06, -1.487211670577393e-06, 7.155873096281477e-05, 6.633295267473935e-05, 7.569277254991744e-05, 7.087187452755367e-05, 6.669678853044692e-05, -5.690540951402031e-05, -5.960707805560310e-03, -4.407464487980571e-03, -7.971520251408364e-03, -6.869789476067567e-03, -5.617591658554926e-03, -2.986208998659867e-04, 1.864566373302051e+01, -6.436678923952667e-01, 2.455330555932872e+01, -6.767506000581571e-05, -4.196823921102653e+00, -4.196823921102646e+00, -7.736205210221016e+06, -4.373850244436208e+04, -1.700786158253522e+05, 9.785358932030275e+01, -3.410319607231406e+06, -8.532984033645794e+04, -6.022847669419482e-03, -6.187303632410643e-03, -5.601573440200208e-03, -6.114787770468782e-03, -6.140434535140920e-03, -6.140434535140920e-03, -6.660878059898222e-03, -1.135312317245685e-02, -9.500622564184217e-03, -8.062604448033476e-03, -8.749150825770107e-03, -3.154747209150134e-03, -3.705286515402770e-03, 7.059230495902707e-01, -1.236697378448690e-01, 5.064123864940002e-02, -7.105966397254672e-02, -7.105966397254673e-02, 1.219261876324875e-02, -2.928660836291475e+02, -1.010873239063279e+02, -4.579940883397274e-02, 4.217737175452453e+01, -1.904340955815987e+01, -9.641948598432735e+03, -2.105566789413712e+05, -1.658680514855896e+05, -2.411621290175992e+01, -1.117606409392211e+05, -1.117606409392438e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_r2scanh_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_r2scanh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.597830237230090e-03, 1.597818051429097e-03, 1.597765725223468e-03, 1.597946420892924e-03, 1.597851509439437e-03, 1.597851509439437e-03, 4.964084310332210e-03, 4.965970916907215e-03, 5.015795734951847e-03, 4.995175028013653e-03, 4.997893004315179e-03, 4.493009851135424e-03, 4.987648043582225e-03, 1.952268142539894e-02, 1.989302577281343e-02, 1.979346614940643e-02, 1.981376734192874e-02, 1.981376734192874e-02, 5.888108594352612e-02, 5.799705948796688e-02, 1.145662728608024e-03, 7.627992523028437e-02, 6.862078507030628e-02, 6.862078507030615e-02, 8.378404872848860e-02, 9.139317655504497e-02, 1.758134383745521e-01, 3.066567400788925e-02, 5.261534001392010e-02, 5.261534001392010e-02, 3.498140907408110e-03, 3.500253850480251e-03, 3.498266652694574e-03, 5.438990028607808e-03, 3.499194390854866e-03, 3.499194390854866e-03, 6.499914486419569e-03, 6.849900152149487e-03, 6.233967668094327e-03, 6.537407622193190e-03, 6.831334580830349e-03, 7.579626262129787e-03, 2.222026769979616e-02, 2.078259769195285e-02, 2.361275305980720e-02, 2.287752206901619e-02, 2.194074324993581e-02, 3.273635981685913e-02, 3.373568968246680e-05, 6.054979855959999e-02, 2.053156450825374e-05, 8.281589237778041e-03, 8.991411233682853e-02, 8.991411233682833e-02, -1.203320554725956e-08, 2.769777068932674e-02, 4.834374855132242e-02, -4.734424242939958e-06, -7.166326450462825e-08, 4.229850876755266e-02, 2.172108515595294e-02, 2.228192521734159e-02, 2.384455957785360e-02, 2.204294142491307e-02, 2.213152322409345e-02, 2.213152322409345e-02, 2.223843195570571e-02, 2.540125874087806e-02, 2.438066035094866e-02, 2.337100775092275e-02, 2.388191293904121e-02, 3.350341729482819e-02, 2.010579247751074e-02, 2.613107387137566e-03, 4.230084254134310e-02, 3.499069117131778e-02, 3.743560594682462e-02, 3.743560594682464e-02, 3.700764058042313e-02, 1.783307777916680e-01, 1.571142038103525e-01, 3.371715961469113e-02, 9.432648980286314e-06, 1.213164049207699e-01, 9.509721260369730e-02, 2.578993260998738e-03, 1.865146087459551e-02, 1.268854473041839e-01, 4.393032537477153e-02, 4.393032537478009e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
