
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_r2scanh_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_r2scanh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.089003964976949e+01, -2.089010182566368e+01, -2.089042408222713e+01, -2.088949998585145e+01, -2.088997764627773e+01, -2.088997764627773e+01, -3.106117800420426e+00, -3.106228648459911e+00, -3.109390328808677e+00, -3.110207136154617e+00, -3.109037772014875e+00, -3.109037772014875e+00, -5.753056978129173e-01, -5.745301762851738e-01, -5.567251207202193e-01, -5.665352533404523e-01, -5.639335431519324e-01, -5.639335431519324e-01, -1.772911101522610e-01, -1.796852903835968e-01, -6.327442936192852e-01, -1.179015307580289e-01, -1.397985148927788e-01, -1.397985148927788e-01, -3.008642748310946e-03, -3.227356549265402e-03, -2.610099046294440e-02, -1.418384375686484e-03, -1.979375630447279e-03, -1.979375630447280e-03, -5.127609857630429e+00, -5.128612692023658e+00, -5.127678403118556e+00, -5.128562828900385e+00, -5.128106667924384e+00, -5.128106667924384e+00, -1.893555797256458e+00, -1.914074573649100e+00, -1.887263713417612e+00, -1.905587541498060e+00, -1.908098493972131e+00, -1.908098493972131e+00, -5.827645582540653e-01, -6.339762921734542e-01, -5.257542821645168e-01, -5.459969990560066e-01, -5.936202385750983e-01, -5.936202385750983e-01, -7.757914755254955e-02, -1.707681833804688e-01, -7.123644761853824e-02, -1.778057585636159e+00, -9.724790142615952e-02, -9.724790142615954e-02, -1.023530863466607e-03, -1.398240543911597e-03, -1.169923449890545e-03, -4.621403339644154e-02, -1.394405468020435e-03, -1.394405468020435e-03, -6.006932648286262e-01, -5.970275344131506e-01, -5.983149032289357e-01, -5.993775114995080e-01, -5.988447136552554e-01, -5.988447136552554e-01, -5.837889494069035e-01, -5.004971332617579e-01, -5.245182933174630e-01, -5.482077422398343e-01, -5.360184766480852e-01, -5.360184766480852e-01, -6.580044773695665e-01, -2.213474567925615e-01, -2.640788395638538e-01, -3.440476571133145e-01, -3.031019242283550e-01, -3.031019242283551e-01, -4.538408439145439e-01, -2.471735130597012e-02, -3.545286040207447e-02, -3.374005700047500e-01, -6.169052207400862e-02, -6.169052207400863e-02, -4.607228168132079e-03, -2.649996765459184e-04, -6.920156954138017e-04, -5.812036523082149e-02, -1.285036977613097e-03, -1.285036977613100e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_r2scanh_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_r2scanh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.717377696542936e+01, -2.717387409670149e+01, -2.717431299660701e+01, -2.717286873294450e+01, -2.717362448093739e+01, -2.717362448093739e+01, -4.396268692171674e+00, -4.396358970519071e+00, -4.398662775247162e+00, -4.396887853000469e+00, -4.397152244799147e+00, -4.397152244799147e+00, -8.189086005693849e-01, -8.175267670264315e-01, -7.862112201622053e-01, -7.993711841989140e-01, -7.962893581258166e-01, -7.962893581258166e-01, -2.043242710792824e-01, -2.095610150736966e-01, -8.578918061711311e-01, -1.583997133212099e-01, -1.641877388044826e-01, -1.641877388044825e-01, -3.070277422717015e-03, -5.183331650344148e-03, -4.233831963305202e-02, -2.639759812170548e-03, -3.638188607087357e-03, -3.638188607087358e-03, -6.702636481181536e+00, -6.704768385775007e+00, -6.702742381336765e+00, -6.704624075530025e+00, -6.703713273844854e+00, -6.703713273844854e+00, -2.342695203290856e+00, -2.373712759604141e+00, -2.324116153319098e+00, -2.353128894710424e+00, -2.369030497855319e+00, -2.369030497855319e+00, -7.775129670779694e-01, -8.596965441063191e-01, -7.245366737433303e-01, -7.686900213448568e-01, -7.914419397673012e-01, -7.914419397673012e-01, -1.120400821660394e-01, -1.590419884503958e-01, -1.051120910917815e-01, -2.578921725840520e+00, -1.057347864997573e-01, -1.057347864997579e-01, -1.919283414200455e-03, -2.603477259474207e-03, -2.168785977998241e-03, -7.174551320662474e-02, -2.583354708776327e-03, -2.583354708776327e-03, -7.948584241803334e-01, -7.876486854565009e-01, -7.902166540122061e-01, -7.923187257938564e-01, -7.912707544542266e-01, -7.912707544542266e-01, -7.751151404454427e-01, -6.445277038339291e-01, -6.827788867108743e-01, -7.198637695111290e-01, -7.011773398458865e-01, -7.011773398458865e-01, -9.020421264520859e-01, -2.454663901113980e-01, -3.164439830086693e-01, -4.594518685968123e-01, -3.849304540478051e-01, -3.849304540478051e-01, -5.911166486606979e-01, -3.768228205999265e-02, -5.633490782327059e-02, -4.516095580713177e-01, -8.881826673244288e-02, -8.881826673244292e-02, -8.280096353367598e-03, -5.070044082196807e-04, -1.302111551760988e-03, -7.113800316896179e-02, -2.382804263542899e-03, -2.382804263542901e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_r2scanh_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_r2scanh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.581486931577821e-09, -5.581432260239775e-09, -5.580981486535579e-09, -5.581789375402544e-09, -5.581395718004604e-09, -5.581395718004604e-09, -1.227656547765304e-05, -1.227786925255023e-05, -1.231129539328218e-05, -1.229870113872917e-05, -1.230291807148068e-05, -1.230291807148068e-05, -2.530925030710889e-03, -2.525349682841281e-03, -2.439931242394733e-03, -2.750996632310135e-03, -2.654092605120187e-03, -2.654092605120187e-03, -8.894706786493741e-01, -8.634550664668333e-01, -3.381128688528824e-04, -6.396012959845756e-01, -1.402534167387562e+00, -1.402534167387570e+00, -7.272271899897301e+02, -2.645575478107804e+01, 3.980367746874505e+00, 5.602078475651042e+02, 4.203698144223972e+02, 4.203698144223982e+02, -1.493746099191862e-06, -1.494112986084783e-06, -1.493638752690951e-06, -1.493967528014722e-06, -1.493994550445582e-06, -1.493994550445582e-06, -8.305610730778717e-05, -7.702854337562478e-05, -8.164283917477588e-05, -7.595677136427172e-05, -8.029287829258568e-05, -8.029287829258568e-05, -8.939350697080097e-03, -6.330945743975089e-03, -1.329548262375023e-02, -1.193717726296171e-02, -8.211292813032137e-03, -8.211292813032137e-03, -2.326590005816843e-01, -1.103993124551332e+00, -3.194751915222005e-04, -1.313118256734700e-04, -2.992294246531939e+00, -2.992294246532015e+00, 1.039420807909619e+03, 6.453873983774045e+02, 2.970077930155011e+03, 1.227500037773934e+00, 1.383249195468418e+03, 1.383249195468417e+03, -6.014803633734678e-03, -6.509761252324008e-03, -6.381094824178556e-03, -6.235787473267083e-03, -6.312779312962319e-03, -6.312779312962319e-03, -6.455495685043395e-03, -1.236522283204979e-02, -1.047898046266822e-02, -9.018837788042010e-03, -9.740881613378239e-03, -9.740881613378240e-03, -5.793545680682043e-03, -3.651714023652879e-01, -1.975490403953021e-01, -6.815868927011999e-02, -1.147552579146440e-01, -1.147552579146441e-01, -2.304837625785384e-02, -5.494492260573880e-01, 1.997927878521222e+00, -7.022497332116939e-02, -6.764764995942505e-01, -6.764764995942409e-01, 1.054907475332101e+02, 1.535695514663600e+04, 2.840426235606174e+03, -4.689876572843217e+00, 1.810638265730569e+03, 1.810638265730576e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_r2scanh_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_r2scanh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([8.993906784951549e-04, 8.993888856419145e-04, 8.993553741391007e-04, 8.993812610726263e-04, 8.993713474530856e-04, 8.993713474530856e-04, 7.797958268234031e-03, 7.799022135160514e-03, 7.827650047899379e-03, 7.826365955196316e-03, 7.822736143507170e-03, 7.822736143507170e-03, 1.282978043848741e-02, 1.277190430096243e-02, 1.174804700782891e-02, 1.356297048477610e-02, 1.299965145314712e-02, 1.299965145314712e-02, 8.380958161714117e-02, 8.526886647803587e-02, 1.875825623793983e-03, 3.230266460750037e-02, 8.246112956309219e-02, 8.246112956309179e-02, 3.291269621185877e-03, 9.542174125091963e-04, 9.760792889087181e-04, 3.229028909009259e-06, 1.761138747032443e-05, 1.761138747032371e-05, 3.510536702473133e-03, 3.512522523643283e-03, 3.510404375444831e-03, 3.512166606544024e-03, 3.511655311812649e-03, 3.511655311812649e-03, 1.046028165275509e-02, 9.956977568389884e-03, 1.015783395071034e-02, 9.676802180089953e-03, 1.031883183937746e-02, 1.031883183937746e-02, 3.218337169561617e-02, 2.960262014036128e-02, 3.851085955599430e-02, 3.721748140735193e-02, 3.096568334039643e-02, 3.096568334039643e-02, 9.771513246493672e-03, 9.942441874736128e-02, 6.856911910990408e-03, 1.516177343391712e-02, 6.736228883217861e-02, 6.736228883217774e-02, 1.034135636503336e-07, 5.656302244234471e-07, 3.559153873367940e-06, 2.405571256865685e-03, 1.105628973604499e-06, 1.105628973604508e-06, 2.223587485018818e-02, 2.334657575393643e-02, 2.310426075853650e-02, 2.278297535181311e-02, 2.295842353266948e-02, 2.295842353266948e-02, 2.309283593713698e-02, 2.736199154080557e-02, 2.656572758515543e-02, 2.567573004074310e-02, 2.624126389716304e-02, 2.624126389716305e-02, 3.060449069556075e-02, 6.825380403736081e-02, 6.450151060460127e-02, 5.334792968986411e-02, 5.783725595544970e-02, 5.783725595544975e-02, 3.880973213239976e-02, 3.692331897336751e-03, 1.412441765765604e-03, 5.084630331281174e-02, 1.181315116007910e-02, 1.181315116007905e-02, 3.219139884328565e-06, 1.535746132401470e-09, 5.413122678110553e-06, 3.064688622458355e-02, 2.073127166605654e-06, 2.073127166605412e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
