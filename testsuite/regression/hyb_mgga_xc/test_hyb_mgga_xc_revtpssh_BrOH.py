
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_revtpssh_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_revtpssh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.807764888084745e+01, -1.807769629389133e+01, -1.807793953392238e+01, -1.807716289427586e+01, -1.807767361462827e+01, -1.807767361462827e+01, -3.022052192302616e+00, -3.022049605779566e+00, -3.022079170208400e+00, -3.022302094538274e+00, -3.022065457536168e+00, -3.361646962493117e+00, -6.336279344058866e-01, -6.728335304915013e-01, -6.616370957457832e-01, -6.636798446016801e-01, -6.731216348204978e-01, -6.731216348204978e-01, -1.947318054863819e-01, -1.968744480987071e-01, -7.549154120816874e-01, -1.602400055941225e-01, -1.953746571991814e-01, -1.953746571991814e-01, -1.528598037032289e-02, -1.600561803159790e-02, -6.275832137443955e-02, -7.357738471721661e-03, -1.583872712725290e-02, -1.583872712725290e-02, -5.050673904161164e+00, -5.051725228030923e+00, -5.050785702849727e+00, -4.500259323087111e+00, -5.051207295467398e+00, -5.051207295467398e+00, -1.737106990550509e+00, -1.747618368291237e+00, -1.732918949677914e+00, -1.741083334023340e+00, -1.749660265607180e+00, -1.918996319337769e+00, -5.875300659415049e-01, -6.435837136576160e-01, -5.556830516906807e-01, -5.838548502599850e-01, -6.116530454979100e-01, -5.681959203277634e-01, -1.117892354078517e-01, -2.035110369509376e-01, -1.105049382995451e-01, -1.875250425743331e+00, -1.384624539673137e-01, -1.384624539673137e-01, -7.140385427162345e-03, -8.110175110512010e-03, -6.078115802003978e-03, -7.333417613386754e-02, -7.417216123541110e-03, -7.390049612014986e-03, -6.191560840517343e-01, -6.155464564519139e-01, -5.682956092629561e-01, -6.179259365277507e-01, -6.174305666842048e-01, -6.174305666842048e-01, -6.002145279790416e-01, -5.118166605093636e-01, -5.381003914474557e-01, -5.627239529175043e-01, -5.501901354079667e-01, -5.102158019109332e-01, -6.709382799441863e-01, -2.407768582636440e-01, -2.847968123318290e-01, -3.466540778496087e-01, -3.192029701627307e-01, -3.192029701627307e-01, -4.372155668135427e-01, -5.851005706047267e-02, -7.742384213506141e-02, -3.424205775230058e-01, -9.285660676733891e-02, -1.048653414780348e-01, -1.792477901783530e-02, -2.221918259577647e-03, -4.219849334669478e-03, -1.001082492206703e-01, -6.281170187764575e-03, -6.281170187764573e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_revtpssh_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_revtpssh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.429719665659118e+01, -2.429725943004133e+01, -2.429758226551413e+01, -2.429655388116783e+01, -2.429722939803063e+01, -2.429722939803063e+01, -3.938670758598859e+00, -3.938706309256729e+00, -3.939921179183783e+00, -3.939756404566870e+00, -3.938698926882062e+00, -4.112929526560830e+00, -8.125221734481710e-01, -7.521922045291888e-01, -7.131966125052637e-01, -7.316853518544651e-01, -7.531853627125008e-01, -7.531853627125008e-01, -2.262621269466115e-01, -2.311768147981579e-01, -9.767001208190145e-01, -1.560960597940534e-01, -2.276983648964434e-01, -2.276983648964434e-01, -2.022481990018708e-02, -2.116196480891670e-02, -7.740222161686867e-02, -9.799848191723986e-03, -2.094106483827742e-02, -2.094106483827742e-02, -6.086471421503242e+00, -6.086409381158949e+00, -6.086459185186826e+00, -6.017833450138749e+00, -6.086447567418409e+00, -6.086447567418409e+00, -2.240917580089945e+00, -2.257086828294482e+00, -2.234488049545283e+00, -2.246930452475246e+00, -2.260448830283151e+00, -2.331695065492697e+00, -7.515055650904197e-01, -8.072105841900492e-01, -7.114525461743841e-01, -7.446891133392305e-01, -7.786445981783086e-01, -7.488742798747045e-01, -1.447297241791121e-01, -2.066736596942964e-01, -1.430497235594488e-01, -2.336672710929228e+00, -1.367436864629645e-01, -1.367436864629645e-01, -9.378355947954338e-03, -1.079783059283852e-02, -8.091028438449492e-03, -9.506498002709859e-02, -9.739837471101496e-03, -9.840178185174749e-03, -7.537482425340067e-01, -7.521675409820859e-01, -7.467247322684131e-01, -7.222812018260392e-01, -7.527115871245869e-01, -7.527115871245869e-01, -7.317508388906850e-01, -6.572796745824080e-01, -6.844565799143142e-01, -7.039239712878214e-01, -6.946136208410300e-01, -6.734936141955679e-01, -8.467789666708699e-01, -3.084260919762666e-01, -3.389288536258905e-01, -4.428797331688382e-01, -4.028776075434118e-01, -3.992091877445725e-01, -5.644142078204508e-01, -7.306826204329528e-02, -9.264805059230959e-02, -4.440228873709147e-01, -1.202429661418273e-01, -1.121908067784116e-01, -2.374160155972035e-02, -2.962216416840060e-03, -5.623192047896471e-03, -1.072841368892860e-01, -8.365266604760471e-03, -8.365266604760455e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_revtpssh_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_revtpssh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [2.040411672300714e-09, 2.040305937485516e-09, 2.039827610222961e-09, 2.041550257440906e-09, 2.040356080524250e-09, 2.040356080524250e-09, 7.196730755036909e-06, 7.195710370280897e-06, 7.163951474315276e-06, 7.173975559565928e-06, 7.196311170696795e-06, -6.185756932709446e-06, 6.832612361268660e-03, -2.544608904160258e-03, -2.700851102255289e-03, -2.527742533301912e-03, -2.541053393447735e-03, -2.541053393447735e-03, -3.382483439031536e-01, -3.235334038191725e-01, 3.606057050289891e-03, -6.126194761633866e-01, -3.337346628787672e-01, -3.337346628787672e-01, -6.860183111258598e+00, -6.800063459468874e+00, -2.184166295232844e+00, -2.462062929288404e+00, -7.111591689212360e+00, -7.111591689212205e+00, -7.145707725361414e-06, -7.206720614918513e-06, -7.152444560422423e-06, 1.414111217671781e-07, -7.176180011958710e-06, -7.176180011958710e-06, 7.963350798674822e-05, 7.597974350718984e-05, 8.120021438399986e-05, 7.827698436887680e-05, 7.517692273090708e-05, -5.019658021884579e-05, -1.022294944086050e-02, -1.594544215287603e-02, -9.385276276851633e-03, -1.282199828976728e-02, -1.120577594243396e-02, 4.481164381436312e-03, 1.518629818479282e+01, -2.865430964852301e-01, 1.593803831778537e+01, -1.352142231327741e-04, -1.023275162760314e+00, -1.023275162760314e+00, 2.094039157335959e+06, -3.101504076549579e+00, -1.219149326311610e+01, 9.631878151631059e+01, 1.783597725998737e+06, -3.825818644822977e+00, -1.354668363737505e-01, -6.908890311564858e-02, -1.264946037911247e-02, -1.507954716595342e-01, -9.149076466347697e-02, -9.149076466347697e-02, -1.131004628475226e-01, -1.612341974865389e-02, -2.156248369316217e-02, -3.236131873317565e-02, -2.578738601339108e-02, 4.889542576942187e-03, -1.042513206027050e-02, 4.601642495939922e-01, -7.594575992616920e-02, 6.821499604541906e-02, -4.377095819376985e-02, -5.187659934951050e-02, 2.155452406380649e-02, -2.084812525139875e+00, -1.713877160088688e+00, -5.103050785168146e-02, 3.411796543480803e+01, -1.775125551152341e+00, -2.688198331507651e+00, -3.444909854964156e+00, -6.761839606327303e+00, -2.124457162713522e+00, -5.379950527483019e+00, -5.379950527488917e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_revtpssh_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_revtpssh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.397725680063423e-04, 1.397754137272786e-04, 1.397875630071094e-04, 1.397412955076923e-04, 1.397740690996015e-04, 1.397740690996015e-04, -4.766134017241855e-04, -4.764275048795705e-04, -4.707329213315501e-04, -4.729199508353980e-04, -4.765595498544380e-04, 3.890651339381707e-03, -1.690128936904671e-03, 6.010058830933587e-03, 4.678497730745857e-03, 4.616192034059410e-03, 6.047280413409124e-03, 6.047280413409124e-03, 2.074894328241324e-02, 2.219085158067999e-02, -6.242326668047915e-04, 2.168253631692836e-03, 2.114967766638458e-02, 2.114967766638458e-02, 4.580734114108668e-07, 5.568880213860155e-07, 4.739762636582458e-05, 3.405834780080957e-09, 5.685497505698132e-07, 5.685497505700684e-07, 1.648673986459515e-02, 1.663003008865974e-02, 1.650251483172192e-02, 7.044618370883668e-04, 1.655836262725808e-02, 1.655836262725808e-02, -1.013479431364658e-03, -9.967663318897278e-04, -1.017773405364212e-03, -1.008422572935158e-03, -9.913945354096899e-04, 5.412125173745200e-03, 4.122772578993823e-02, 7.464409588962699e-02, 3.218947263866910e-02, 4.954193737577275e-02, 4.942741731099975e-02, 2.294019423361343e-03, -1.404796673543655e-04, 7.025863173200756e-03, -1.601999756788031e-04, 1.694721487717173e-02, 2.088998872268871e-03, 2.088998872268871e-03, -2.720767010529309e-08, 1.379414376054397e-10, 1.548789421306755e-08, -3.173988266138442e-05, -3.133618704281147e-08, 6.744535249584695e-09, 4.622142345941432e-01, 2.378823448703079e-01, 6.900607245633521e-03, 5.138878335667453e-01, 3.130668908574913e-01, 3.130668908574913e-01, 3.524801927718002e-01, 4.351101426260942e-02, 6.298647822833417e-02, 9.690457294820667e-02, 7.654255559216842e-02, 4.918538387586275e-03, 5.799741347100830e-02, -2.796562508804890e-03, 1.866204107511322e-02, -5.620552649111930e-03, 2.257787327981870e-02, 2.641819187706019e-02, -3.222268515305402e-03, 3.118706400825541e-05, 9.011653107286516e-05, 4.252505152504131e-02, -1.253166570378924e-04, 6.481364551357842e-04, 2.261519830327444e-07, 1.929498134462647e-11, 1.141881253012045e-09, 6.995379251672931e-04, 5.275992241784002e-09, 5.275992254176339e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
