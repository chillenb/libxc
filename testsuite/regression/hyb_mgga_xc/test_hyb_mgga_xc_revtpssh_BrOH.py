
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_revtpssh_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_revtpssh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.037003484874244e+01, -2.037008834162468e+01, -2.037045531622759e+01, -2.036958420717023e+01, -2.037006189069194e+01, -2.037006189069194e+01, -3.100641976286509e+00, -3.100661163548648e+00, -3.101440392065562e+00, -3.102674454195196e+00, -3.100653584632621e+00, -3.100653584632621e+00, -6.156720367760615e-01, -6.152155734592464e-01, -6.053933594741768e-01, -6.111974070626414e-01, -6.155060244983798e-01, -6.155060244983798e-01, -1.924223444191528e-01, -1.943146250086059e-01, -7.250191791933894e-01, -1.514124634388299e-01, -1.929605303073955e-01, -1.929605303073955e-01, -1.528477994963788e-02, -1.600387696961878e-02, -6.240100638298488e-02, -7.356007080660863e-03, -1.583723478973270e-02, -1.583723478973270e-02, -5.046299255392046e+00, -5.047362120295207e+00, -5.046467705849456e+00, -5.047291018089076e+00, -5.046763605610625e+00, -5.046763605610625e+00, -1.879039623104697e+00, -1.894773577108594e+00, -1.876901641137468e+00, -1.889217179495492e+00, -1.892470750586317e+00, -1.892470750586317e+00, -5.619609751741528e-01, -5.966005843628903e-01, -5.260293706351397e-01, -5.426956104380459e-01, -5.867708421332614e-01, -5.867708421332614e-01, -1.238781360192517e-01, -2.011304936448861e-01, -1.215172535987678e-01, -1.698034082617246e+00, -1.353396221616283e-01, -1.353396221616283e-01, -7.096471366611302e-03, -8.108270331923699e-03, -6.077482499621330e-03, -8.341679570321534e-02, -7.387827847816462e-03, -7.387827847816462e-03, -5.874095833130367e-01, -5.991476027514187e-01, -5.968107039431573e-01, -5.938427422791908e-01, -5.954774981397102e-01, -5.954774981397102e-01, -5.583527672928827e-01, -5.094941059865199e-01, -5.332986358292613e-01, -5.527238651045513e-01, -5.429974577065027e-01, -5.429974577065027e-01, -6.207823492075687e-01, -2.434716900435647e-01, -2.810803222916742e-01, -3.481829081074202e-01, -3.136042998587814e-01, -3.136042998587812e-01, -4.501258037715893e-01, -5.835238022427153e-02, -7.667147784602181e-02, -3.296819831649636e-01, -1.029232474164399e-01, -1.029232474164399e-01, -1.790009264173867e-02, -2.221835247876394e-03, -4.219737241794574e-03, -9.812002996954304e-02, -6.279452137431447e-03, -6.279452137431443e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_revtpssh_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_revtpssh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.457387556309878e+01, -2.457392396935091e+01, -2.457433868868817e+01, -2.457355258738608e+01, -2.457389929358974e+01, -2.457389929358974e+01, -3.898460918228421e+00, -3.898489597092210e+00, -3.899439750078764e+00, -3.898722280814237e+00, -3.898491221413510e+00, -3.898491221413510e+00, -7.860038404825442e-01, -7.844245146908204e-01, -7.401288538863466e-01, -7.476736508103702e-01, -7.854316965471367e-01, -7.854316965471367e-01, -2.270599616131878e-01, -2.320110506145953e-01, -9.673575912161685e-01, -1.464499808728548e-01, -2.285254918835817e-01, -2.285254918835817e-01, -2.022009842625511e-02, -2.115512465848550e-02, -7.615244777231382e-02, -9.792944366951639e-03, -2.093520307429137e-02, -2.093520307429137e-02, -6.079685304646715e+00, -6.079677778901877e+00, -6.079764227266050e+00, -6.079754044449119e+00, -6.079574049602862e+00, -6.079574049602862e+00, -2.264656104642626e+00, -2.292588282772505e+00, -2.258515536456464e+00, -2.280921581077025e+00, -2.290825040418960e+00, -2.290825040418960e+00, -7.165714335065519e-01, -7.886288068090155e-01, -6.813323757826001e-01, -7.216368646744333e-01, -7.435896813639895e-01, -7.435896813639895e-01, -1.253348081849476e-01, -2.061267446971611e-01, -1.222873868841829e-01, -2.265164955709580e+00, -1.320928191474996e-01, -1.320928191474996e-01, -9.448031376202946e-03, -1.079023611070073e-02, -8.088506369685602e-03, -9.447641198078717e-02, -9.831326306383361e-03, -9.831326306383363e-03, -7.470463782448412e-01, -7.401438518261567e-01, -7.414730790380611e-01, -7.432573848141001e-01, -7.422627903819281e-01, -7.422627903819280e-01, -7.278815129650261e-01, -6.511016138481999e-01, -6.728683453884705e-01, -6.869715356620898e-01, -6.795983144384026e-01, -6.795983144384026e-01, -8.245303132201303e-01, -2.716196941216962e-01, -3.388008663108644e-01, -4.459377994684141e-01, -3.948738974145530e-01, -3.948738974145529e-01, -5.725512717752427e-01, -7.250286469846190e-02, -9.016177120422755e-02, -4.268585066402778e-01, -1.074264957709484e-01, -1.074264957709484e-01, -2.364436601179249e-02, -2.961884527408633e-03, -5.622744432677625e-03, -1.024404721103158e-01, -8.358418939296335e-03, -8.358418939296326e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_revtpssh_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_revtpssh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.783611479687961e-08, -1.783649801522894e-08, -1.783740505569978e-08, -1.783115660319042e-08, -1.783632347556309e-08, -1.783632347556309e-08, -9.068012819893454e-06, -9.070246770344820e-06, -9.139205440708650e-06, -9.148396783105068e-06, -9.068212564602217e-06, -9.068212564602217e-06, -2.076177744828763e-03, -2.110202733878922e-03, -2.967196915116510e-03, -3.052539390768665e-03, -2.088815936136116e-03, -2.088815936136116e-03, -3.682202191496489e-01, -3.569082134211479e-01, 1.676118676422907e-04, -8.783533677659072e-01, -3.649887334673502e-01, -3.649887334673502e-01, -7.139088978299365e+00, -7.151554691201117e+00, -2.822958852542535e+00, -5.104887622154242e+00, -7.428885237344339e+00, -7.428885237344339e+00, -7.188399625398926e-06, -7.249301375502152e-06, -7.194587450497689e-06, -7.241931232038343e-06, -7.219541484684824e-06, -7.219541484684824e-06, -6.065601622216609e-05, -5.958327342186266e-05, -5.937739413027040e-05, -5.846774615816350e-05, -6.172246401522664e-05, -6.172246401522664e-05, -1.564648845229671e-02, -8.460026886175295e-03, -1.310334500281618e-02, -5.934318113014035e-03, -1.668150665460852e-02, -1.668150665460852e-02, -1.297365148706485e+00, -3.058040623877922e-01, -1.461253947310312e+00, -4.714700897010907e-05, -1.219665027941766e+00, -1.219665027941766e+00, -5.416045626043279e+00, -5.422768645267295e+00, -1.551674802771163e+01, -2.611275134412089e+00, -8.008049450598824e+00, -8.008049450599795e+00, -1.206735977651827e-01, -7.698127056456777e-02, -9.068557642964616e-02, -1.035651066007104e-01, -9.688042486723900e-02, -9.688042486723902e-02, -6.090919277475296e-02, -1.818690247443325e-02, -2.584402458104048e-02, -4.032041744576557e-02, -3.190866007043254e-02, -3.190866007043255e-02, -4.372464913016755e-03, -1.436105484381036e-01, -8.654228668286651e-02, -5.553435593011277e-02, -6.757869156583726e-02, -6.757869156583735e-02, -2.574383467557165e-02, -2.421699528481526e+00, -2.324008885692979e+00, -8.352124785759288e-02, -2.276680307470202e+00, -2.276680307470204e+00, -5.356870119250102e+00, -9.361102112925115e+00, -8.050962734957077e+00, -2.773664363393626e+00, -1.169876919326603e+01, -1.169876919326411e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_revtpssh_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_revtpssh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_revtpssh_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_revtpssh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.623366670623046e-03, 2.623443508879357e-03, 2.623791765377448e-03, 2.622543456137437e-03, 2.623407019465756e-03, 2.623407019465756e-03, 2.595204182180700e-03, 2.596218564173077e-03, 2.628616074372458e-03, 2.641929264664115e-03, 2.595305998895600e-03, 2.595305998895600e-03, 3.256158099170625e-03, 3.279599680951939e-03, 3.771797599791999e-03, 4.447682722465038e-03, 3.265568595698942e-03, 3.265568595698942e-03, 2.293144852058712e-02, 2.469053756154553e-02, 1.063467946490342e-04, 2.581303392722022e-03, 2.344283377896404e-02, 2.344283377896404e-02, 4.470045116228637e-07, 5.430627115261182e-07, 4.480750759555032e-05, 3.345069541074593e-09, 5.545358670801505e-07, 5.545358670801496e-07, 1.645845122891119e-02, 1.660108993332203e-02, 1.647452167068248e-02, 1.658533009128171e-02, 1.652924672078460e-02, 1.652924672078460e-02, 5.618307083895399e-03, 5.851531263847813e-03, 5.447294817504462e-03, 5.624519900281525e-03, 6.006687133501062e-03, 6.006687133501062e-03, 3.615636732279222e-02, 1.926559064690062e-02, 2.355240428815026e-02, 1.309676051168887e-02, 4.411041432060465e-02, 4.411041432060465e-02, 7.028022059770444e-04, 7.757002838972189e-03, 8.400573680585432e-04, 2.590077163881742e-03, 2.218324078914364e-03, 2.218324078914364e-03, 5.333250990514489e-09, 7.442418592075727e-09, 1.523236097846087e-08, 1.124569919545994e-04, 6.623156095512588e-09, 6.623156095534672e-09, 2.163511444105429e-01, 2.015561312060220e-01, 2.207688136254938e-01, 2.310722540018128e-01, 2.268494193991842e-01, 2.268494193991843e-01, 6.001568318847042e-02, 4.521609087463985e-02, 6.562150826128935e-02, 9.696357104612294e-02, 7.892624578937019e-02, 7.892624578937027e-02, 1.313091757323677e-02, 1.332861659936888e-02, 2.106077542308920e-02, 3.310115407925141e-02, 3.004637334512059e-02, 3.004637334512057e-02, 3.632058790896013e-02, 2.941335892317213e-05, 8.560395773651199e-05, 4.073282786896370e-02, 6.434786321379033e-04, 6.434786321379068e-04, 2.198865058968536e-07, 1.904838140778685e-11, 1.125131226379161e-09, 6.958633225823643e-04, 5.186210144609623e-09, 5.186210150149302e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
