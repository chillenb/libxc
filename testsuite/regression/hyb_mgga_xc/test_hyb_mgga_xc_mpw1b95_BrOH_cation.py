
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_mpw1b95_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_mpw1b95", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.461607396272209e+01, -1.461609261371548e+01, -1.461622269484510e+01, -1.461594420272059e+01, -1.461608342296859e+01, -1.461608342296859e+01, -2.473664311475526e+00, -2.473637685288726e+00, -2.473062784876614e+00, -2.474319882898640e+00, -2.473594518808762e+00, -2.473594518808762e+00, -5.223304460797111e-01, -5.221301134968508e-01, -5.183992838104506e-01, -5.212400928050328e-01, -5.220503886152851e-01, -5.220503886152851e-01, -1.601739297692990e-01, -1.611770043823306e-01, -6.165948247383221e-01, -1.367546673589188e-01, -1.512149510365418e-01, -1.512149510365418e-01, -5.955386751503149e-04, -7.043158971282035e-04, -3.866296752889656e-02, -1.244080022804452e-04, -3.530339334863040e-04, -3.530339334863044e-04, -3.551058045021328e+00, -3.550604562249354e+00, -3.551043557172452e+00, -3.550643156417163e+00, -3.550824683690909e+00, -3.550824683690909e+00, -1.502974545784512e+00, -1.510013839356855e+00, -1.503045810000705e+00, -1.509255786098398e+00, -1.506846161052642e+00, -1.506846161052642e+00, -4.358065098434492e-01, -4.571280894292395e-01, -4.097049780334717e-01, -4.159376108870224e-01, -4.406436526831239e-01, -4.406436526831240e-01, -1.098738174297397e-01, -1.714400706290040e-01, -1.035871544823290e-01, -1.321939359768413e+00, -1.185157474938819e-01, -1.185157474938819e-01, -6.877344731991290e-05, -1.254615575021983e-04, -1.355243426047498e-04, -7.380607799799058e-02, -1.875811650873755e-04, -1.875811650873757e-04, -4.141784122638190e-01, -4.161950948506498e-01, -4.155443858647621e-01, -4.149658648528228e-01, -4.152604680411450e-01, -4.152604680411450e-01, -4.032574744403768e-01, -3.795995804944425e-01, -3.867437804749770e-01, -3.933944216182746e-01, -3.899615082530410e-01, -3.899615082530410e-01, -4.804214868016191e-01, -2.033338142460243e-01, -2.299297461106714e-01, -2.770058673766275e-01, -2.511184965247536e-01, -2.511184965247536e-01, -3.525209325962378e-01, -3.504869719979366e-02, -5.721589770045619e-02, -2.621314283661680e-01, -8.962244976854854e-02, -8.962244976854855e-02, -1.394266368806273e-03, -6.762997360015175e-06, -3.761467861488868e-05, -8.554862815184637e-02, -1.586569416896244e-04, -1.586569416896240e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_mpw1b95_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_mpw1b95", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.751299147814612e+01, -1.751296563998227e+01, -1.751306621190387e+01, -1.751302028611359e+01, -1.751329239919399e+01, -1.751334594412950e+01, -1.751244395900781e+01, -1.751226987542034e+01, -1.751303358670491e+01, -1.751269196123957e+01, -1.751303358670491e+01, -1.751269196123957e+01, -2.905444290849077e+00, -2.905560425389256e+00, -2.905459115177830e+00, -2.905583928393189e+00, -2.905927698916309e+00, -2.906068827116500e+00, -2.905219185144873e+00, -2.905408777351517e+00, -2.905000082358000e+00, -2.905815017820657e+00, -2.905000082358000e+00, -2.905815017820657e+00, -6.077012515738743e-01, -6.102222040431439e-01, -6.063658815155651e-01, -6.095514029043440e-01, -5.852150419444495e-01, -5.804474970665231e-01, -5.849451939272884e-01, -5.859620980147316e-01, -6.080768524662589e-01, -5.650013935776690e-01, -6.080768524662589e-01, -5.650013935776690e-01, -1.600746357493681e-01, -1.599206694048194e-01, -1.626006273823383e-01, -1.625400346091178e-01, -7.359799191489056e-01, -7.500353086940004e-01, -1.261469487842052e-01, -1.259448737909262e-01, -1.417496464022196e-01, -1.404391485493970e-01, -1.417496464022197e-01, -1.404391485493970e-01, -2.001524100988561e-03, -2.352033394689345e-03, -2.329684202690909e-03, -2.803574203417150e-03, -8.569167032271909e-02, -8.906032938444726e-02, -4.708585585972799e-04, -4.442243680811473e-04, -1.454415317503687e-03, -4.674557944417651e-04, -1.454415317503686e-03, -4.674557944417671e-04, -4.364850108379531e+00, -4.363847654310550e+00, -4.366543737694456e+00, -4.365487061987840e+00, -4.364941874319132e+00, -4.363904132339670e+00, -4.366397584451141e+00, -4.365390985042461e+00, -4.365717934619075e+00, -4.364671556643640e+00, -4.365717934619075e+00, -4.364671556643640e+00, -1.600070743868948e+00, -1.599892771133563e+00, -1.612202126392988e+00, -1.611737602775573e+00, -1.587178289403082e+00, -1.589979277984022e+00, -1.597647531592449e+00, -1.600558934263582e+00, -1.615946645078385e+00, -1.608442775546799e+00, -1.615946645078385e+00, -1.608442775546799e+00, -5.286012354645486e-01, -5.274689516361353e-01, -5.789108402486465e-01, -5.789483019543716e-01, -4.903232182901637e-01, -4.985952969809586e-01, -5.150793181080634e-01, -5.244267119046730e-01, -5.447220385373801e-01, -5.288609502007047e-01, -5.447220385373802e-01, -5.288609502007047e-01, -1.058252865805260e-01, -1.050283092841352e-01, -1.601422674410249e-01, -1.602648680937997e-01, -1.030646760716882e-01, -1.017972350804497e-01, -1.674113345391211e+00, -1.673485277764381e+00, -1.111037288005064e-01, -1.053953432781713e-01, -1.111037288005064e-01, -1.053953432781713e-01, -2.471551786352880e-04, -2.578035625034281e-04, -4.603627230688153e-04, -4.632120096967217e-04, -4.446721545517530e-04, -5.454177369315583e-04, -9.461626453848375e-02, -9.544570552843525e-02, -3.479977698358980e-04, -8.236907385246700e-04, -3.479977698358972e-04, -8.236907385246712e-04, -5.369808653503644e-01, -5.383788443794501e-01, -5.321047746051988e-01, -5.335035467103739e-01, -5.339496987603412e-01, -5.353533459941258e-01, -5.353853818397170e-01, -5.367707554059606e-01, -5.346832335806079e-01, -5.360771086678598e-01, -5.346832335806079e-01, -5.360771086678598e-01, -5.235485638061822e-01, -5.247305413997233e-01, -4.354918510881280e-01, -4.365909298313018e-01, -4.604502805181480e-01, -4.617324396567405e-01, -4.862603899234541e-01, -4.873452944534373e-01, -4.732225279295680e-01, -4.742745428040341e-01, -4.732225279295680e-01, -4.742745428040341e-01, -6.060040965464693e-01, -6.063387011827663e-01, -1.980349014550419e-01, -1.982314550551601e-01, -2.369215672686255e-01, -2.374370598892869e-01, -3.191337389437143e-01, -3.200822932444219e-01, -2.742117258236909e-01, -2.741392235845039e-01, -2.742117258236908e-01, -2.741392235845039e-01, -4.059145695848320e-01, -4.071209494381380e-01, -8.425958700289524e-02, -8.477745650655860e-02, -1.004399692412569e-01, -1.002646393187673e-01, -3.121740120426347e-01, -3.119523132826861e-01, -9.412271772777740e-02, -8.800959616764718e-02, -9.412271772777740e-02, -8.800959616764717e-02, -4.820832491027859e-03, -5.351078315932524e-03, -2.158588404527487e-05, -2.786559832038016e-05, -1.234710935938997e-04, -1.502443299735549e-04, -9.048700353971169e-02, -9.038860455744510e-02, -4.113579737951253e-04, -6.584135818545367e-04, -4.113579737951240e-04, -6.584135818545380e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_mpw1b95_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_mpw1b95", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-9.770047027000936e-09, 0.000000000000000e+00, -9.770140331327920e-09, -9.769992476268175e-09, 0.000000000000000e+00, -9.770100271833223e-09, -9.769702282515219e-09, 0.000000000000000e+00, -9.769718947094668e-09, -9.770326674793744e-09, 0.000000000000000e+00, -9.770508033552693e-09, -9.770024071447994e-09, 0.000000000000000e+00, -9.770105626739659e-09, -9.770024071447994e-09, 0.000000000000000e+00, -9.770105626739659e-09, -1.089647671694250e-05, 0.000000000000000e+00, -1.089715316703296e-05, -1.089695769628685e-05, 0.000000000000000e+00, -1.089755235275866e-05, -1.090707397527376e-05, 0.000000000000000e+00, -1.090878195434923e-05, -1.089767670273733e-05, 0.000000000000000e+00, -1.089780814688738e-05, -1.090161606106001e-05, 0.000000000000000e+00, -1.090653917038793e-05, -1.090161606106001e-05, 0.000000000000000e+00, -1.090653917038793e-05, -3.813663895884964e-03, 0.000000000000000e+00, -3.659101279990837e-03, -3.879612334493644e-03, 0.000000000000000e+00, -3.684834862971573e-03, -4.710900741207771e-03, 0.000000000000000e+00, -4.930873002762627e-03, -4.838645999628060e-03, 0.000000000000000e+00, -4.808043000168157e-03, -3.500069179500220e-03, 0.000000000000000e+00, -5.439680814778767e-03, -3.500069179500220e-03, 0.000000000000000e+00, -5.439680814778767e-03, -7.413138302598328e-01, 0.000000000000000e+00, -7.147198600142824e-01, -7.158441233637776e-01, 0.000000000000000e+00, -6.860279904168002e-01, -5.357388376150407e-04, 0.000000000000000e+00, -2.285914816525098e-04, -1.475959050232389e+00, 0.000000000000000e+00, -1.448154176857020e+00, -8.088436930884799e-01, 0.000000000000000e+00, -1.230007361749201e+00, -8.088436930884791e-01, 0.000000000000000e+00, -1.230007361749199e+00, 4.163721255185255e+02, 0.000000000000000e+00, 4.056079675543076e+02, 4.322782414137019e+02, 0.000000000000000e+00, 4.218545259195120e+02, 4.786267746625921e+01, 0.000000000000000e+00, 3.934357606529018e+01, 4.309966004792020e+02, 0.000000000000000e+00, 4.217690607105053e+02, 4.257355153697766e+02, 0.000000000000000e+00, 1.182964508203458e+03, 4.257355153697774e+02, 0.000000000000000e+00, 1.182964508203474e+03, -2.747981572480334e-06, 0.000000000000000e+00, -2.750398765641850e-06, -2.749448889217072e-06, 0.000000000000000e+00, -2.751813578511170e-06, -2.748058193003284e-06, 0.000000000000000e+00, -2.750441244205963e-06, -2.749313017601623e-06, 0.000000000000000e+00, -2.751729976418493e-06, -2.748738751889333e-06, 0.000000000000000e+00, -2.751109035091537e-06, -2.748738751889333e-06, 0.000000000000000e+00, -2.751109035091537e-06, -8.837417167031711e-05, 0.000000000000000e+00, -8.841891255855657e-05, -8.663783952186567e-05, 0.000000000000000e+00, -8.673221053682870e-05, -8.888871535879982e-05, 0.000000000000000e+00, -8.887780857543215e-05, -8.738138641057610e-05, 0.000000000000000e+00, -8.733897086141940e-05, -8.703736858282461e-05, 0.000000000000000e+00, -8.737796771438988e-05, -8.703736858282461e-05, 0.000000000000000e+00, -8.737796771438988e-05, -8.480763396652708e-03, 0.000000000000000e+00, -8.631128224587456e-03, -3.351896544989363e-03, 0.000000000000000e+00, -3.481020540398897e-03, -9.159573392714251e-03, 0.000000000000000e+00, -9.419356024123519e-03, 3.612548464607762e-03, 0.000000000000000e+00, -3.227074013339680e-04, -7.767765293435537e-03, 0.000000000000000e+00, -8.197613858732607e-03, -7.767765293435543e-03, 0.000000000000000e+00, -8.197613858732610e-03, -2.686951721228155e+00, 0.000000000000000e+00, -2.734992394224815e+00, -5.945056575401582e-01, 0.000000000000000e+00, -5.889623988717784e-01, -3.018171019920272e+00, 0.000000000000000e+00, -3.050687983337054e+00, -9.359242138117582e-05, 0.000000000000000e+00, -9.372373876065138e-05, -2.372085668513940e+00, 0.000000000000000e+00, -2.631094847694415e+00, -2.372085668513940e+00, 0.000000000000000e+00, -2.631094847694415e+00, 6.343777217626437e+02, 0.000000000000000e+00, 5.484770549524120e+02, 5.201712248392566e+02, 0.000000000000000e+00, 4.807531709472952e+02, 2.869988695273290e+03, 0.000000000000000e+00, 3.126206463691426e+03, -1.043444841269636e+00, 0.000000000000000e+00, -9.324382790774804e-01, 1.486817977448866e+03, 0.000000000000000e+00, 1.346630882357057e+03, 1.486817977448863e+03, 0.000000000000000e+00, 1.346630882357057e+03, -9.726797338245200e-03, 0.000000000000000e+00, -9.732330819114249e-03, -9.310757250163029e-03, 0.000000000000000e+00, -9.241215270085609e-03, -9.092917950906462e-03, 0.000000000000000e+00, -9.041808213241902e-03, -9.092453828249974e-03, 0.000000000000000e+00, -9.065884746808240e-03, -9.055847205736605e-03, 0.000000000000000e+00, -9.016743463734144e-03, -9.055847205736605e-03, 0.000000000000000e+00, -9.016743463734144e-03, -9.201203785862887e-03, 0.000000000000000e+00, -9.224921617703583e-03, -1.942222824530352e-02, 0.000000000000000e+00, -1.922536238773585e-02, -1.651958389009614e-02, 0.000000000000000e+00, -1.633997929929397e-02, -1.330550335783449e-02, 0.000000000000000e+00, -1.318745566588095e-02, -1.494059324866216e-02, 0.000000000000000e+00, -1.482227586418890e-02, -1.494059324866216e-02, 0.000000000000000e+00, -1.482227586418890e-02, -2.307243317175148e-03, 0.000000000000000e+00, -2.517610948325278e-03, -2.889638051559732e-01, 0.000000000000000e+00, -2.862176518021095e-01, -1.648195813467402e-01, 0.000000000000000e+00, -1.627018086417598e-01, -5.870696875395982e-02, 0.000000000000000e+00, -5.770809442463776e-02, -1.042398624007538e-01, 0.000000000000000e+00, -1.045626008421650e-01, -1.042398624007539e-01, 0.000000000000000e+00, -1.045626008421650e-01, -2.436167799617737e-02, 0.000000000000000e+00, -2.418682919028336e-02, 4.973775056346456e+01, 0.000000000000000e+00, 4.869454250135887e+01, 1.429527517747573e+01, 0.000000000000000e+00, 1.136252053656885e+01, -5.699846300937392e-02, 0.000000000000000e+00, -6.316367764545031e-02, -4.214132763196583e+00, 0.000000000000000e+00, -5.447653614374642e+00, -4.214132763196589e+00, 0.000000000000000e+00, -5.447653614374648e+00, 3.043231756564326e+02, 0.000000000000000e+00, 3.064703094924199e+02, 2.358243018488788e+03, 0.000000000000000e+00, 4.026103403185911e+03, 1.260451667142215e+03, 0.000000000000000e+00, 1.315603941901514e+03, -4.793430044022355e+00, 0.000000000000000e+00, -4.831759577505962e+00, 2.969280404281277e+03, 0.000000000000000e+00, 1.424155826707487e+03, 2.969280404281273e+03, 0.000000000000000e+00, 1.424155826707497e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_mpw1b95_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_mpw1b95", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-1.453789028236753e-05, -1.453795539533437e-05, -1.453819599291548e-05, -1.453817725604425e-05, -1.453863452856280e-05, -1.453895670951458e-05, -1.453519611389047e-05, -1.453456982004614e-05, -1.453809985687147e-05, -1.453592645007412e-05, -1.453809985687147e-05, -1.453592645007412e-05, -2.773989440474821e-04, -2.777448485755736e-04, -2.774399024960354e-04, -2.778084148197651e-04, -2.786639438061573e-04, -2.789831013985793e-04, -2.764684431128833e-04, -2.768336125599870e-04, -2.773459159014582e-04, -2.778996350686698e-04, -2.773459159014582e-04, -2.778996350686698e-04, -2.491933376166078e-03, -2.642184406024723e-03, -2.443485038052027e-03, -2.625098956656117e-03, -1.892260784642392e-03, -1.718606872764310e-03, -1.784285750730145e-03, -1.842295697882058e-03, -2.877173658706024e-03, -1.074779912048118e-03, -2.877173658706024e-03, -1.074779912048118e-03, -2.393230896972181e-03, -2.713708004130124e-03, -2.615544232205190e-03, -3.002092192391819e-03, -2.055021085824489e-03, -2.505285064109242e-03, -9.520634906531265e-04, -9.656735293285018e-04, -2.354546618229709e-03, -4.301318033992195e-04, -2.354546618229706e-03, -4.301318033992202e-04, -2.997087148185276e-07, -3.518866688465333e-07, -3.601478287499169e-07, -4.346246878873608e-07, -2.296147427444176e-05, -2.686840224581216e-05, -6.513783696351832e-08, -6.041348501259918e-08, -2.169816319607273e-07, -1.113827375369721e-07, -2.169816319607280e-07, -1.113827375369724e-07, -2.269464053455427e-04, -2.269942041936558e-04, -2.280519143712854e-04, -2.280628082763925e-04, -2.270020733267227e-04, -2.270268297199039e-04, -2.279506377716149e-04, -2.279975920571464e-04, -2.275163759208161e-04, -2.275310559213020e-04, -2.275163759208161e-04, -2.275310559213020e-04, -2.646821730286466e-04, -2.646819876534644e-04, -2.699096506917164e-04, -2.698297537548436e-04, -2.456280887323677e-04, -2.511417099558468e-04, -2.500045673272401e-04, -2.554573505090169e-04, -2.824632236149086e-04, -2.694761276964254e-04, -2.824632236149086e-04, -2.694761276964254e-04, -6.347379240705518e-03, -6.390511160701925e-03, -1.184698105674906e-02, -1.195811997073223e-02, -6.321235538715860e-03, -6.490396976230268e-03, -1.327119950005738e-02, -1.243099175812918e-02, -6.676694104181627e-03, -6.989931597318513e-03, -6.676694104181627e-03, -6.989931597318513e-03, -2.781922350892201e-04, -2.928988132952843e-04, -1.076133359808841e-03, -1.086732839708232e-03, -2.304560833431565e-04, -2.641079765903469e-04, -1.927400997080872e-03, -1.929892281417028e-03, -4.987911163701257e-04, -7.898358953142875e-04, -4.987911163701257e-04, -7.898358953142875e-04, -4.030688190349819e-08, -3.894187119486963e-08, -7.056855839852068e-08, -6.799578383656435e-08, -1.755342139979134e-07, -2.301047862615557e-07, -1.134151689771698e-04, -1.109104482960024e-04, -9.269830704810115e-08, -2.249914142493880e-07, -9.269830704810089e-08, -2.249914142493877e-07, -1.717652751912049e-02, -1.713619248568862e-02, -1.386428745944997e-02, -1.386672723675737e-02, -1.491063312506914e-02, -1.490782769044810e-02, -1.587685030660696e-02, -1.584744786659725e-02, -1.538304991477683e-02, -1.536705133539403e-02, -1.538304991477683e-02, -1.536705133539403e-02, -1.929224223085034e-02, -1.920034085401544e-02, -4.370113379078337e-03, -4.409813643531602e-03, -6.427959367186009e-03, -6.497529364432018e-03, -9.824749734082082e-03, -9.829088996211842e-03, -7.943079478903152e-03, -7.949467297785930e-03, -7.943079478903152e-03, -7.949467297785928e-03, -1.059149578002199e-02, -1.072681605893395e-02, -1.540683307611430e-03, -1.564565636171346e-03, -2.429583102321081e-03, -2.531861492405219e-03, -6.287727115763946e-03, -6.323005669183542e-03, -4.006584648178532e-03, -4.059123384598535e-03, -4.006584648178535e-03, -4.059123384598537e-03, -4.805309699537307e-03, -4.900319655551454e-03, -1.988346384035491e-05, -2.028650905216560e-05, -4.476415823168420e-05, -5.025037174718308e-05, -9.841532611841538e-03, -1.007052461472450e-02, -2.184009360754973e-04, -3.122002109861319e-04, -2.184009360754975e-04, -3.122002109861319e-04, -6.466774595219028e-07, -7.290699924745556e-07, -5.755693045808994e-09, -1.026365461509461e-08, -2.775916785357306e-08, -3.528415037704372e-08, -2.162876966262462e-04, -2.221903081659497e-04, -1.636920504245606e-07, -1.823002569306333e-07, -1.636920504245608e-07, -1.823002569306335e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
