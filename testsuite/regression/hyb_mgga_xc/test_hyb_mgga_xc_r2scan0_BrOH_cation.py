
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_r2scan0_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_r2scan0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.636887671690203e+01, -1.636896396584100e+01, -1.636934903956805e+01, -1.690232992767030e+01, -1.689065931363730e+01, -1.745850882404391e+01, -2.595874084998098e+00, -2.848010341530145e+00, -2.848389713792868e+00, -2.848492527368339e+00, -2.848188115121266e+00, -2.596259417357014e+00, -4.797794729466394e-01, -5.155001527768546e-01, -5.424364789199442e-01, -4.936404098803622e-01, -4.697883788959686e-01, -5.475378901611457e-01, -1.442670369917849e-01, -1.532031256204570e-01, -5.627449657515659e-01, -1.126604363034855e-01, -1.376269311596096e-01, -1.352870952221737e-01, -3.237199286502855e-03, -3.814127702799185e-03, -2.606916937923050e-02, -1.500945524845617e-03, -1.902358687898489e-03, -1.902358687898489e-03, -4.285360580261693e+00, -4.278981352166098e+00, -4.278194434447001e+00, -4.278925822445543e+00, -4.203959497594024e+00, -4.196930214591819e+00, -1.630544294957282e+00, -1.642540309544704e+00, -1.600072962238096e+00, -1.610933282307696e+00, -1.491073650137045e+00, -1.641442636521132e+00, -4.800454345642327e-01, -5.433341350023585e-01, -4.626950345238436e-01, -4.818443758990011e-01, -4.891240281279329e-01, -5.085686455449694e-01, -7.549702336701417e-02, -1.395631587724296e-01, -7.445862714116444e-02, -1.589261372350372e+00, -9.838777379436042e-02, -9.838777379436042e-02, -1.333772630014565e-03, -1.204035659885830e-03, -1.237908331367211e-03, -4.398104257433594e-02, -1.505342280276471e-03, -1.505342280276463e-03, -5.055735445333368e-01, -5.024793424560960e-01, -5.005005608115864e-01, -5.029620620023598e-01, -5.012318996522251e-01, -5.023151269150048e-01, -4.937856812482125e-01, -4.143069669378301e-01, -4.286929253251187e-01, -4.623308469522846e-01, -4.520706103778969e-01, -4.416523472158081e-01, -5.620795491075524e-01, -2.008011877050755e-01, -2.127441266280652e-01, -2.853426057096705e-01, -2.774244101745333e-01, -2.474601723042954e-01, -3.886757513660233e-01, -3.636461541225351e-02, -3.446598103820075e-02, -3.045557835084621e-01, -5.984909232793573e-02, -5.984909232793575e-02, -1.098197972507427e-02, -1.945335323762752e-04, -2.811027792846340e-03, -6.629939852890544e-02, -1.116671689770233e-03, -1.901580075236210e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_r2scan0_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_r2scan0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.404754190253551e+01, -2.404730363890496e+01, -2.404759082489061e+01, -2.404734006187020e+01, -2.404777732759916e+01, -2.404759407288444e+01, -2.412054666948461e+01, -2.263568628444841e+01, -2.412848454310285e+01, -2.264382900877952e+01, -2.264165729223644e+01, -2.264141478548383e+01, -3.579012937552715e+00, -3.669597833253088e+00, -3.559273509255067e+00, -3.559130494189773e+00, -3.560922840227552e+00, -3.561259589627568e+00, -3.560622097500177e+00, -3.560672389875019e+00, -3.558416446186522e+00, -3.562241327665660e+00, -3.668581965977301e+00, -3.581976259667956e+00, -6.594589924225236e-01, -6.651278824709814e-01, -6.652326087713721e-01, -7.018353691916425e-01, -6.422401425769948e-01, -6.360221230063973e-01, -6.721924548378788e-01, -6.433982679306373e-01, -6.701823327784220e-01, -6.118859740519901e-01, -6.791047412892415e-01, -6.133563681921607e-01, -1.815846809621753e-01, -1.949611331234775e-01, -1.914958339496569e-01, -2.064168781658722e-01, -6.803894732811187e-01, -7.116272564461585e-01, -1.025175785001500e-01, -1.128686087551956e-01, -1.563646120102924e-01, -1.222962887595728e-02, -1.569412428282337e-01, -1.062019866570994e-01, 1.143603627387488e-01, 1.214795433331665e-01, -6.034926087648287e-03, 1.277473332253494e-01, -3.455909395259633e-02, 1.659592444253359e-01, 6.328639584335004e-02, 6.197482221759166e-02, 1.029221146974256e-01, 5.394158381607098e-02, 1.029221146974256e-01, 5.394158381607079e-02, -5.591258637812481e+00, -5.589962399164890e+00, -5.593990680068563e+00, -5.592623081201880e+00, -5.592306305654702e+00, -5.590955109040442e+00, -5.593850577525589e+00, -5.592535270318973e+00, -5.825568231480066e+00, -5.583524931222457e+00, -5.592160062629313e+00, -5.831511120776872e+00, -2.015583595651298e+00, -2.016202176704040e+00, -2.035354072567879e+00, -2.035340216226902e+00, -1.973450107587630e+00, -1.979224045730065e+00, -1.991927272144030e+00, -1.997851967146066e+00, -2.068563502835340e+00, -2.058321534813570e+00, -2.039432622435597e+00, -2.027954216268125e+00, -6.486600293638082e-01, -7.016588184255147e-01, -7.090953656646299e-01, -7.100304302059076e-01, -5.803096947332902e-01, -6.043838177509903e-01, -6.128438733095011e-01, -6.333229799383615e-01, -6.744506938190643e-01, -6.984585103591824e-01, -6.737144763490450e-01, -6.419740939103692e-01, -2.604160150992181e-02, -2.756662003526843e-02, -1.763646575905093e-01, -1.649183020452648e-01, 1.736363644285889e-02, 4.578514160654430e-03, -2.047063403439763e+00, -2.046254254590318e+00, -5.376430461397136e-02, -7.737663297565842e-02, -5.376430461397148e-02, -7.737663297565843e-02, -2.406101669391065e-03, 4.442485094943189e-02, 4.516466392814046e-02, 4.581052445406564e-02, 4.707537802554704e-02, 5.072787552787057e-02, 8.104838001756065e-02, -5.781967960647630e-02, 4.299892319291474e-02, 6.874103522544568e-02, 4.299892319291466e-02, 6.874103522545431e-02, -6.645254551805397e-01, -6.668133773991605e-01, -6.590747185940108e-01, -6.613910561630875e-01, -6.649355311588416e-01, -6.669181243999902e-01, -6.694357765529499e-01, -6.629613124319267e-01, -6.653549813663199e-01, -6.673598681684181e-01, -6.695423310980658e-01, -6.620498377009602e-01, -6.454337715619386e-01, -6.473411526252780e-01, -5.442484409036680e-01, -5.831469725128321e-01, -5.731033148586124e-01, -6.226281049477700e-01, -6.034072364200090e-01, -6.052770030041419e-01, -5.882211218311815e-01, -5.902143316638057e-01, -5.867698950159245e-01, -6.314353789634783e-01, -7.287898554379010e-01, -7.820032568846677e-01, -2.294802377272433e-01, -2.307623741582212e-01, -2.792547416750187e-01, -2.955593746612011e-01, -3.937148652490374e-01, -3.958801044885188e-01, -3.466834892358712e-01, -3.468578351865379e-01, -3.465621854071770e-01, -3.422597734861417e-01, -4.961326383727022e-01, -5.002103736754544e-01, -4.677205708196312e-02, -4.672710070875873e-02, 9.410558363675323e-02, 8.564886419334977e-02, -3.783746395254957e-01, -3.856075594394622e-01, -6.358161863239745e-04, -2.094153503268052e-02, -6.358161863253622e-04, -2.094153503268128e-02, -1.429655204931473e-02, -1.419512424266582e-02, -1.377651115554053e-04, -1.092625019739491e-04, -3.711532364430453e-03, -3.662254385918753e-03, -8.490947715586031e-02, -8.491010910066743e-02, 4.358082758578007e-02, 6.278156995260491e-02, 4.285028812179516e-02, -3.134721845413456e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_r2scan0_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_r2scan0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.377202162687429e-08, 8.754823619740888e-09, -1.377140188497120e-08, -1.377188323385800e-08, 8.754422046695865e-09, -1.377135634329774e-08, -1.377163831396086e-08, 8.752727524043654e-09, -1.377064023490401e-08, -1.770670763025150e-08, 8.902357889976835e-10, -8.425736121445408e-09, -1.793306253475694e-08, 4.323325233883475e-10, -8.654245169811701e-09, -8.793855040131970e-09, 1.520217232794523e-10, -8.794400569866149e-09, -9.613349403244321e-06, 2.513760466289678e-06, -1.176318518767324e-05, -1.053378346185053e-05, 6.735514678910315e-07, -1.053391885818284e-05, -1.053899147154255e-05, 6.763666257311692e-07, -1.053972121692587e-05, -1.053363808490502e-05, 6.749236188886372e-07, -1.053304004917779e-05, -1.053874999321348e-05, 6.754313041245301e-07, -1.053794356505965e-05, -1.175263753965074e-05, 2.530926022444482e-06, -9.610196205899670e-06, 7.345015919795140e-03, 2.031620287388696e-02, 7.213097064110477e-03, -6.400434217062193e-04, 4.281776270998719e-03, -5.004840073091600e-03, -7.108077796251561e-03, 1.392688120735120e-03, -7.309253536038141e-03, -6.944235900293748e-03, 1.558564987383650e-03, -1.864799058651998e-03, 8.224944451577669e-03, 2.239562307205753e-02, 9.038072443737128e-03, -6.240861984854185e-03, 1.376283626443728e-03, -8.065233460373515e-03, 7.508357376330460e-02, 6.670520382248003e-01, -1.114303325347461e+00, 3.180550864345646e-01, 1.163093417363446e+00, -7.758909587854901e-01, -3.637803806398422e-03, 5.669790476871719e-04, -3.342740502748803e-04, -3.743615954778055e+00, 1.443889722439502e+00, -3.542971839208815e+00, -1.348066975979421e+00, 1.038644129504970e-01, -1.487862253168983e+01, -1.339861805584533e+00, 1.202747537402744e-01, -8.134338772064779e-01, -1.026388490076084e+05, 3.066236822326313e+02, -9.097107651357712e+04, -4.872692406809032e+04, 2.284973763524638e+02, -8.306951879408707e+04, -4.768517344142046e+01, 6.745939117371837e+00, -5.577811060541939e+02, -2.223561012985017e+05, 6.583058466910715e+02, -2.302691407490057e+05, -1.251931336442002e+05, 2.193515687533467e+01, -4.690328595659499e+05, -1.251931336442002e+05, 2.193515687533478e+01, -4.690328595659481e+05, -2.415874034612075e-06, 4.635143166230940e-07, -2.418432221244632e-06, -2.546209033549276e-06, 2.052460731194121e-07, -2.548728640319611e-06, -2.545370992777608e-06, 2.047214146967644e-07, -2.547893191769117e-06, -2.546153355413298e-06, 2.052136593017906e-07, -2.548701015448943e-06, -4.289635163367472e-06, 8.049804149389111e-07, -2.248276118630693e-06, -2.416774589793702e-06, 4.628864643596083e-07, -4.465389062565042e-06, -8.877222822196827e-05, 3.324950970727656e-05, -8.885107769001075e-05, -8.594186647951078e-05, 3.392419759366471e-05, -8.609353277570919e-05, -1.024357655030158e-04, 1.017385045664765e-05, -1.018982809713062e-04, -1.002549138243188e-04, 1.010485610635608e-05, -9.970530504999019e-05, -7.884191602146740e-05, 4.726735463968434e-05, -7.263086938374443e-05, -8.550865050202601e-05, 3.393388567856715e-05, -8.702506638683138e-05, -6.586506033613136e-03, 1.537970814483033e-02, -2.197358509516844e-02, -8.898661993125837e-03, 4.721454012323087e-03, -8.941114068311801e-03, -1.659658122405603e-02, 6.427593397213827e-03, -1.440134567031030e-02, -1.458602283866737e-02, 6.434655367787209e-03, -1.272716331450838e-02, -6.116886011242051e-03, 1.281708416257613e-02, -2.468587871297213e-02, -9.963224725853159e-03, 5.124406733353916e-03, -1.248916968220571e-02, -1.533969301105477e+01, 5.256014201362460e+00, -1.469639515177616e+01, 4.478589562287186e-02, 3.734229916397888e-01, -1.282370709009903e+00, -2.563530742405678e+01, 1.410613550671018e+00, -2.093545359665038e+01, -1.189441994031521e-04, 1.882446141031536e-05, -1.191892688010269e-04, -1.020344224374556e+01, 1.282873116116745e+00, -8.153851374811733e+00, -1.020344224374556e+01, 1.282873116116745e+00, -8.153851374811735e+00, -1.423672908308838e+06, 6.885161767949311e+02, -2.690984780993921e+05, -2.042138454113815e+05, 5.359189029274509e+04, -1.827008285226678e+05, -1.164158664012203e+06, 3.658975410779611e+03, -1.105228931199812e+06, -1.067773179211353e+02, 3.450397443620979e+00, -4.818078033438879e+00, -4.346863795875688e+05, 1.271939246895683e+03, -4.749857163997448e+05, -4.346863795875678e+05, 1.271939246895683e+03, -4.749857163998017e+05, -1.346452198217681e-02, 9.878286956075786e-03, -1.319898098377060e-02, -1.347859995307813e-02, 9.135542784350111e-03, -1.323770589628091e-02, -1.520083043438340e-02, 1.686148784943105e-02, -1.471727564152897e-02, -1.655657906053886e-02, 1.208701231262895e-02, -1.201904273984777e-02, -1.499781274654059e-02, 1.623203090348926e-02, -1.453746002429027e-02, -1.699359168868655e-02, 1.224047301919733e-02, -1.189604286559708e-02, -1.372837672991739e-02, 1.339238784145689e-02, -1.348393495329615e-02, -3.631287909157191e-03, 4.939373896880159e-02, -2.437303002787840e-02, -1.052822564100734e-02, 2.870075650695616e-02, -3.828772021098837e-02, -1.709259315120849e-02, 1.053269933023646e-02, -1.680708085957867e-02, -1.825055751425799e-02, 1.053876496444686e-02, -1.794184252666465e-02, -1.077573959144631e-02, 2.548840081007020e-02, -3.677159247487180e-02, -2.744273575300921e-03, 1.267607161662677e-02, -1.279562785330179e-02, -4.915568297134425e-01, 2.319252634072655e-01, -4.782696282518928e-01, -4.022998394035587e-02, 9.983513173461944e-02, -2.433005047630872e-01, -3.528772803550845e-02, 1.172672982806425e-01, -4.585368703421663e-02, -1.146032741518654e-01, 1.271237351586763e-01, -1.149984392927820e-01, -1.143088754768679e-01, 1.277125325086717e-01, -5.421973614577209e-02, -3.105924378693154e-02, 1.446350631423485e-02, -3.025235641951908e-02, 5.683752294461436e+02, 1.246877659658531e+03, 5.698567456228299e+02, -2.185179913753128e+02, 6.230204803589169e+01, -1.913617543499762e+02, -3.797391478948067e-02, 1.832750805744794e-01, -3.354796276301450e-02, -4.196164177674663e+01, 1.361744822663103e+01, -3.327685032924851e+01, -4.196164177674632e+01, 1.361744822663146e+01, -3.327685032924845e+01, 2.092748066342814e+04, 6.998505000654623e+04, 2.279498013132643e+04, -1.084712729109563e+06, 2.071891923547654e+06, -1.071474148885274e+06, -4.441158307765026e+07, -7.710377625517517e+07, -4.313111651599176e+07, 5.111672626238560e+01, 1.090354285230524e+02, 5.131334530439109e+01, -8.235336474049463e+05, 2.332036826600692e+02, -5.697169820620464e+05, -8.203630873641912e+05, 6.574323764919770e+03, -6.127905876520319e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_r2scan0_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_r2scan0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.318324670453558e-03, 1.318273049130072e-03, 1.318312925449784e-03, 1.318264688202181e-03, 1.318278187364883e-03, 1.318213123431796e-03, 1.362293585832362e-03, 6.855440399597413e-04, 1.374716089075470e-03, 6.980647109360167e-04, 7.106595417208327e-04, 7.106747825266556e-04, 3.390519211893032e-03, 3.735618207010697e-03, 3.711070102583498e-03, 3.710952954415792e-03, 3.712946805831449e-03, 3.713399443370288e-03, 3.712004721821269e-03, 3.711953968368546e-03, 3.710671233760744e-03, 3.714284823296511e-03, 3.730071627452928e-03, 3.391593448167914e-03, 3.547420556139316e-03, 3.952132916954634e-03, 4.166903817715422e-03, 1.677955177989796e-02, 1.610744278451683e-02, 1.619160599354898e-02, 1.872768054191610e-02, 5.298928132854034e-03, 4.561117055047918e-03, 1.523463780303025e-03, 1.581180169890787e-02, 1.646631469218064e-02, -1.425398880917261e-03, 5.920033968951205e-02, 5.412183626722321e-04, 5.978618061960767e-02, 1.460140215530861e-02, 1.319155478472651e-03, 5.951704165398961e-02, 5.935941482532643e-02, 6.458058767088282e-02, 1.037121330783941e-01, 6.421629263805986e-02, -1.798812141429760e-03, 1.630863568678058e-01, 1.734763268192843e-01, -1.390358652998601e-06, 1.866989343821185e-01, -1.244514225167196e-05, 2.090399352938053e-01, 7.673647178506525e-02, 7.555687445913152e-02, 1.410212708991916e-01, 9.734964360487763e-02, 1.410212708991916e-01, 9.734964360487726e-02, 2.711722960942342e-03, 2.712480797103213e-03, 2.882299240118585e-03, 2.882976950195185e-03, 2.880750020310179e-03, 2.881443456470854e-03, 2.882171337886462e-03, 2.882913414624170e-03, 4.710821748533790e-03, 2.554262121390418e-03, 2.713120534262136e-03, 4.871817290457148e-03, 5.664974278978295e-03, 5.668811468440491e-03, 5.569633566838222e-03, 5.573905160665603e-03, 6.265147985477693e-03, 6.265724480250817e-03, 6.245741454163720e-03, 6.246175210410120e-03, 6.270029965099687e-03, 5.141427017900335e-03, 5.572578031896072e-03, 5.583975148742304e-03, 6.514064356642060e-03, 2.896026624064810e-02, 1.586974557917190e-02, 1.596677657365803e-02, 1.869622425819239e-02, 1.839230331401750e-02, 1.798056305262171e-02, 1.758904205657843e-02, 7.733761108829892e-03, 3.153276029154163e-02, 1.672977814454484e-02, 1.755490829842207e-02, 8.060584220057448e-02, 7.976201646363863e-02, -1.872256577619435e-04, 6.210454142077029e-02, 1.192954349073397e-01, 1.149435453636223e-01, 6.747145422862830e-03, 6.751289552888588e-03, 9.976284953444495e-02, 9.678794159433438e-02, 9.976284953444481e-02, 9.678794159433442e-02, -2.230747582891658e-07, 4.400050512371187e-02, 5.415169603140392e-02, 5.051247424643504e-02, 1.496501088461822e-01, 1.687670178941948e-01, 1.594608080215491e-01, 7.909968478226660e-06, 5.952835049035733e-02, 1.684587949908146e-01, 5.952835049035719e-02, 1.684587949908347e-01, 1.576819522782182e-02, 1.566748552986837e-02, 1.645241321627186e-02, 1.638700274647131e-02, 1.650233307016597e-02, 1.616588016614745e-02, 1.980449135186400e-02, 1.332854897787685e-02, 1.631210544013891e-02, 1.600046399190536e-02, 2.045356358341656e-02, 1.315534376337642e-02, 1.376056537842912e-02, 1.368083005700831e-02, 5.009867755742282e-03, 2.265966862395088e-02, 5.476133400340859e-03, 3.416577678867670e-02, 1.763175283487674e-02, 1.755770542983251e-02, 1.818740180060779e-02, 1.811872077913709e-02, 6.446392707419802e-03, 3.526323994130381e-02, 2.663844323335912e-03, 2.521676097998508e-02, 4.821866832890197e-02, 4.797125952614760e-02, 1.114144371524142e-02, 4.644990508219977e-02, 6.213507519172875e-03, 1.411159589044608e-02, 3.141154032868764e-02, 3.146056419830117e-02, 3.117329884580642e-02, 1.347434280857277e-02, 2.113452555754648e-02, 2.109611796230330e-02, -7.824051493649298e-06, -7.817319767200386e-06, 1.359607508002410e-01, 1.331449984323080e-01, 2.997026027657133e-03, 3.313271701999999e-03, 9.951907034112781e-02, 9.556307027014921e-02, 9.951907034112624e-02, 9.556307027014843e-02, -2.823240510741988e-07, -2.549566053580273e-07, 3.004000663503915e-04, 3.078371936367352e-04, -2.697560720647362e-08, -2.312291408645481e-08, -7.538367263826344e-05, -2.842408692977863e-05, 9.570419903229919e-02, 1.553957199134630e-01, 9.571778487211065e-02, -2.933100063770470e-08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
