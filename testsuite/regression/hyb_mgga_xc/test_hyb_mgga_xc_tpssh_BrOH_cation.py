
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_tpssh_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_tpssh", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.807812194810370e+01, -1.807817642527505e+01, -1.807843227975636e+01, -1.916018296624258e+01, -1.913481953739545e+01, -2.027970722218233e+01, -3.157797854817218e+00, -3.359578730547803e+00, -3.359168231383868e+00, -3.359634916376238e+00, -3.359240377475448e+00, -3.157695220807698e+00, -6.369663869072477e-01, -6.565487855812567e-01, -6.835310642042411e-01, -6.340138766573495e-01, -6.261759706409455e-01, -6.852316041971268e-01, -1.787284698046812e-01, -1.891371456802272e-01, -7.753237057482449e-01, -1.666600976919850e-01, -1.854519201266567e-01, -1.787623829693217e-01, -9.095399087628506e-03, -7.816581400317490e-03, -4.235481958655914e-02, -5.246284271624568e-03, -7.321279439129187e-03, -7.321279439129187e-03, -5.006156966967573e+00, -4.983035777161195e+00, -4.982071079104760e+00, -4.982968026276366e+00, -4.745571548122649e+00, -4.725232238282317e+00, -1.926037444948870e+00, -1.936706118303815e+00, -1.907463766870731e+00, -1.916449987158080e+00, -1.827171686066884e+00, -1.935602487985095e+00, -5.631306570786081e-01, -6.415422027035413e-01, -5.445159040525331e-01, -5.667902069348475e-01, -5.748386856167397e-01, -5.983585195988163e-01, -1.264716659127955e-01, -1.828415536819274e-01, -1.187331425701914e-01, -1.856934908596660e+00, -1.418465964799313e-01, -1.418465964799313e-01, -3.253624259187743e-03, -5.128651139578910e-03, -3.927181060205246e-03, -6.568596271443358e-02, -4.932982918622332e-03, -4.932982918622331e-03, -6.010567687913199e-01, -5.968289110576741e-01, -5.598323861201314e-01, -5.833676782177027e-01, -5.604090345761745e-01, -5.825166233688694e-01, -5.998142829768590e-01, -4.858134824185416e-01, -5.010208886330448e-01, -5.469767023375863e-01, -5.336450332882877e-01, -5.141726111474059e-01, -6.525741990787488e-01, -2.503305849631488e-01, -2.632837770858630e-01, -3.400770120332900e-01, -3.212470503601771e-01, -2.981212923604529e-01, -4.579399648285964e-01, -4.328466231587529e-02, -6.730769268950468e-02, -3.518183337962538e-01, -1.015809515698806e-01, -1.015809515698807e-01, -1.239698699017617e-02, -1.370967725913492e-03, -3.029002958763079e-03, -8.134169083005816e-02, -4.530246875942408e-03, -3.068499650301899e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_tpssh_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_tpssh", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.429782656250701e+01, -2.429783350676924e+01, -2.429790997524308e+01, -2.429789434357091e+01, -2.429819137052616e+01, -2.429829197961843e+01, -2.428819041147766e+01, -2.538957509511143e+01, -2.425910664599140e+01, -2.536807380510123e+01, -2.531210865087648e+01, -2.531173121126914e+01, -4.123204096545763e+00, -3.911735347507763e+00, -4.089950497821795e+00, -4.089756413984240e+00, -4.092949349796972e+00, -4.093418397636220e+00, -4.094180242667093e+00, -4.094240270194812e+00, -4.089281538188740e+00, -4.094492417608524e+00, -3.911465606658767e+00, -4.128239829500831e+00, -8.155666039719872e-01, -8.171580233062883e-01, -8.237346724318677e-01, -7.747558136208378e-01, -6.968186110227704e-01, -6.908480465555459e-01, -7.305404545330446e-01, -7.856059915927008e-01, -8.178968103491069e-01, -7.869251429647762e-01, -7.374422995337352e-01, -6.752097848754670e-01, -2.217040983858790e-01, -2.188335730565961e-01, -2.475521524107634e-01, -2.290450755189949e-01, -8.077672457346780e-01, -9.360880662031658e-01, -1.686789380181881e-01, -1.611782127478727e-01, -1.729303779720442e-01, -1.559001704647402e-01, -1.725005654897160e-01, -1.156004287486083e-01, -1.171390753569485e-02, -1.244459376093125e-02, -7.053746125918381e-03, -1.314276584172453e-02, -3.931521105026328e-02, -6.901499179648959e-02, -7.049822050077575e-03, -6.932454702762787e-03, -1.045382213223029e-02, -5.953441221786694e-03, -1.045382213223029e-02, -5.953441221786693e-03, -6.219718796355577e+00, -6.218282226703769e+00, -6.165518095068945e+00, -6.164068666901268e+00, -6.165931843861437e+00, -6.164480356646318e+00, -6.165545155280133e+00, -6.164079933444550e+00, -6.036102110735594e+00, -6.226700559070841e+00, -6.229884153047187e+00, -6.030603560467621e+00, -2.296370599582998e+00, -2.297586751615309e+00, -2.327122960081744e+00, -2.327416776767765e+00, -2.241384516322910e+00, -2.249336120962421e+00, -2.268696634856458e+00, -2.276769047878868e+00, -2.352638829524109e+00, -2.261707897300096e+00, -2.332916234280508e+00, -2.316922339049163e+00, -7.891030898979032e-01, -7.388010167567569e-01, -8.275147604195732e-01, -8.260233340853013e-01, -6.868952149810029e-01, -7.108312336197820e-01, -7.253306015434875e-01, -7.436393832022975e-01, -8.154408870265616e-01, -7.342307546542138e-01, -7.889818210669102e-01, -7.568540451674979e-01, -1.430270205962913e-01, -1.437715120041272e-01, -2.200214932780943e-01, -2.142895692310486e-01, -1.374527572182472e-01, -1.403262162966023e-01, -2.362554233942290e+00, -2.361476441304784e+00, -1.561759325257835e-01, -1.491279713235317e-01, -1.561759325257835e-01, -1.491279713235317e-01, -3.035609379933537e-03, -5.497701701941649e-03, -6.783517769024228e-03, -6.886293424740909e-03, -5.071333974917966e-03, -5.370046442008179e-03, -1.028871021926852e-01, -6.624920885225982e-02, -5.181624199288158e-03, -7.110573272508598e-03, -5.181624199288155e-03, -7.110573272508598e-03, -7.476682778628360e-01, -7.498667127262583e-01, -7.494367532546207e-01, -7.515320008853779e-01, -7.347239624054532e-01, -7.368007306997925e-01, -7.434863312725469e-01, -7.481486096740182e-01, -7.352630155032325e-01, -7.373324998431821e-01, -7.431886140790717e-01, -7.491813731074711e-01, -7.256300178453008e-01, -7.271304700856837e-01, -6.601215744756750e-01, -6.265026541706851e-01, -6.978580431640664e-01, -6.605089095175283e-01, -6.910011208162582e-01, -6.928921009910081e-01, -6.838454666101774e-01, -6.857221519566878e-01, -7.085257243909603e-01, -6.755588967922513e-01, -8.778346356638530e-01, -8.397940721858940e-01, -2.561027716560128e-01, -2.570153078651174e-01, -3.364924024798929e-01, -3.235294016066470e-01, -4.458357870508686e-01, -4.705837809270967e-01, -3.859308834961304e-01, -3.862308711055956e-01, -3.896909842956706e-01, -3.862321895996608e-01, -5.851845109454606e-01, -5.890427091206411e-01, -5.620886306210143e-02, -5.626853876786349e-02, -8.458198747339563e-02, -8.678586943262057e-02, -4.544798194435652e-01, -4.641947531031525e-01, -1.180666618288148e-01, -1.177464138851431e-01, -1.180666618288148e-01, -1.177464138851431e-01, -1.622259991180150e-02, -1.623505370742068e-02, -1.825818323009878e-03, -1.829990967411729e-03, -4.000921937148757e-03, -3.991676008207619e-03, -1.051522398713701e-01, -1.056163596222049e-01, -4.907387324811737e-03, -6.518385521909672e-03, -4.907472557148492e-03, -3.742985258007232e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_tpssh_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_tpssh", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.179146616952067e-09, 1.632299740738916e-08, -4.180831095302251e-09, -4.179316058771911e-09, 1.632281531815958e-08, -4.180978807645989e-09, -4.179879065105394e-09, 1.632194962686794e-08, -4.181632002893378e-09, -1.290028653216160e-08, 1.681128096525148e-09, -2.104118114070485e-08, -1.176844260648676e-08, 1.040077494933590e-09, -2.137108943544322e-08, -2.175818178143774e-08, 1.901913855295419e-10, -2.176182682856997e-08, -7.750452273304811e-06, 1.992835391539789e-06, -7.403929544303346e-06, -8.256017789315392e-06, -8.684204420653223e-08, -8.254893574320904e-06, -8.274039555314747e-06, -8.099898526860927e-08, -8.278421621818221e-06, -8.227262317541081e-06, -7.810231836052006e-09, -8.226819813835772e-06, -8.252058527626476e-06, -8.309824999442562e-08, -8.287252761484305e-06, -7.395245903660577e-06, 2.014333244399318e-06, -7.772817137509053e-06, 5.151345582099873e-03, 1.678551982122472e-02, 5.126100431811381e-03, -1.678238199580833e-03, 5.423561443435744e-03, -3.108195398741070e-03, -5.046788200507512e-03, -9.425843689836636e-04, -5.142018172456042e-03, -4.737183393904338e-03, 1.963974858059240e-03, -1.697548953603449e-03, 5.920149719596179e-03, 1.827409235954092e-02, 5.815515110056630e-03, -4.541712277223200e-03, -9.792494789804494e-04, -5.313350501753300e-03, 2.011982235664207e-01, 2.702442215881226e-01, -4.786833842207343e-01, 5.788643093809265e-02, 1.717454016048493e+00, -1.935131845257031e-01, -2.261352172973071e-03, 4.541487251158564e-04, -8.282624534152706e-04, -7.254721755797104e-01, -8.500938301556973e-01, -9.541366152128014e-01, -1.013321947947991e+00, 6.270267360397608e-02, -1.259144333385779e+00, -1.012976470868950e+00, 4.940317242462440e-02, -2.203212937486843e+00, -4.278283940320247e+00, 6.503625725762166e-02, -4.295641725555227e+00, -9.713282054424935e+04, 4.319997251161638e-02, -4.506458860294617e+00, -1.062387325050778e+02, 1.898945288236659e-01, -2.094838585734800e+00, -3.145530785256352e+00, 1.718201979602087e-02, -3.177813675156113e+00, -4.093985480557127e+00, 1.593449015833041e-04, -7.006775818539241e+00, -4.093985480556866e+00, 1.593449030231248e-04, -7.006775818535915e+00, -1.007131560418083e-05, 1.212049563996485e-06, -1.008235635689638e-05, -1.065237704977802e-05, 3.317575724213617e-07, -1.065971590423224e-05, -1.054562222075534e-05, 3.290463534225210e-07, -1.055371437801957e-05, -1.064399631710477e-05, 3.315853905045581e-07, -1.065450989131939e-05, -3.759699442053671e-06, 1.973178058786088e-06, -9.746868078734806e-06, -9.910453162857469e-06, 1.664934574120892e-06, -5.133923266850237e-06, -7.095407943242480e-05, 2.547677291037734e-05, -7.103413696850025e-05, -6.896472205192238e-05, 2.577346472285374e-05, -6.910826235521632e-05, -7.551488840100795e-05, -4.352545833079520e-06, -7.524906811577132e-05, -7.376230495995100e-05, -3.965184424609691e-06, -7.353574388460827e-05, -5.398152218889635e-05, 5.510525269401742e-05, -6.149703628836628e-05, -6.869677557512725e-05, 2.579056401763329e-05, -6.974836676863041e-05, -6.624469464599212e-03, 1.685055866171986e-02, -1.572817558322249e-02, -2.237703462288264e-02, 1.145928147382431e-02, -2.437621326972282e-02, -8.424447829074769e-03, -8.764503809949128e-04, -1.003194737823052e-02, -1.271230916541470e-02, 1.111105451551602e-03, -1.501912104298153e-02, -8.624576332029123e-03, 1.576162979394650e-02, -1.944517624506011e-02, -1.378031823594339e-02, 1.267222258928703e-03, -1.281307771358599e-02, -7.774201998190218e-01, -1.260315385138884e+00, -8.057354074961470e-01, -5.518899155341384e-02, 1.884094133827209e-01, -4.711626352657936e-01, -1.343700003185316e+00, 5.047916744735522e-01, -1.407032157920170e+00, -1.662163968254950e-04, 1.103061888243071e-05, -1.667632676000688e-04, -1.383670234382469e+00, 9.671707164700396e-01, -1.891697474406043e+00, -1.383670234382469e+00, 9.671707164700399e-01, -1.891697474406043e+00, -2.826258380117791e+06, 4.308952200999792e-03, -2.108548890765190e+00, -2.991175707166504e+00, 1.771227854522087e-03, -2.636464399635350e+00, -2.145085024414012e+01, 1.973973873299123e-01, -2.355870211374136e+01, -1.561327911298549e+00, -9.513861207885603e-02, -1.432763937873935e+01, -4.035863113325676e+00, 4.633268670546061e-02, -1.287522436545175e+01, -4.035863113325129e+00, 4.633268670866467e-02, -1.287522436545155e+01, -2.635923388216214e-01, 1.556876667372448e-01, -2.692667607789945e-01, -1.211766586540795e-01, 7.013033178729969e-02, -1.228487296107336e-01, -3.540979521653617e-02, 2.854173962715128e-02, -3.566477266424768e-02, -2.621596570031685e-02, 7.755056509029465e-02, -2.036050923109901e-01, -3.936102409045152e-02, 2.844678322191177e-02, -3.963249600808802e-02, -2.459739822598110e-02, 7.130485331465936e-02, -1.803442790030104e-01, -2.772136160315105e-01, 9.127838166432575e-02, -2.838327557723089e-01, -5.593410818358555e-03, 4.171675587447692e-02, -9.836730752670900e-03, -1.572508750092702e-02, 3.418768088501185e-02, -2.388451251553465e-02, -5.625847199006448e-02, 6.876888714820187e-03, -5.622905168544479e-02, -3.711256398351571e-02, 4.745690375226313e-03, -3.736639004852139e-02, -2.490567627974041e-02, 3.649168550993880e-02, -2.246403330842846e-02, -1.057395264463718e-02, 1.446102646156605e-02, -6.068304064061298e-03, -3.059570296052099e-01, 2.603020768769133e-01, -2.991741741986343e-01, 2.861017108434727e-03, 1.293366217986240e-01, -1.189260870558766e-01, -8.953115858674163e-02, 1.002619245721037e-01, -1.483301745393968e-02, -7.447797234770567e-02, 1.392636194347903e-01, -7.477793715093617e-02, -5.300794243029568e-02, 1.241536581940427e-01, 1.371618265420108e-03, -1.526924641905702e-02, -4.493408503460366e-03, -1.603954180968667e-02, 1.232652846234461e+03, 2.694521307414693e+03, 1.235718127625085e+03, 1.332279467076110e+00, -5.631342258151522e+00, 6.984306958136692e-01, -3.296633973628722e-02, 1.405419403036321e-01, -3.994639239604060e-02, -2.953401699199740e-01, -3.430957102165723e+00, -1.441554024930224e+00, -2.953401699199771e-01, -3.430957102165708e+00, -1.441554024930231e+00, 2.959861434941815e+05, 6.479515260786286e+05, 2.996977223693266e+05, -1.397490079872202e+01, 2.092950480531392e+01, -1.381643963623995e+01, 1.159185161680235e+08, 2.550966372381582e+08, 1.184594050805657e+08, 7.156786878960094e+01, 1.596633496187010e+02, 7.193392831122935e+01, -1.047432016290516e+01, 7.330441306099990e-03, -1.336885455013057e+01, -9.736147721866898e+00, 1.481375340897815e+00, -1.223750740666201e+06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_tpssh_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_tpssh", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.397647587897829e-04, 1.397938437603123e-04, 1.397685503618367e-04, 1.397965913578012e-04, 1.397789985904898e-04, 1.398120234840402e-04, 1.349957424634280e-04, 1.671409875984769e-03, 1.231273722096804e-04, 1.659980724513523e-03, 1.676398913739333e-03, 1.676620566963434e-03, 1.445830191915025e-03, -5.698189447725095e-04, 1.564468568756123e-03, 1.563354110701123e-03, 1.582954494315112e-03, 1.586370905275754e-03, 1.550880713796589e-03, 1.550884775663981e-03, 1.561220255068712e-03, 1.593335115286665e-03, -5.705831089052548e-04, 1.475691539453350e-03, -1.739296091350192e-03, -1.819991493858547e-03, -2.037616645838675e-03, 1.281180282297330e-03, 1.143050470756578e-03, 1.089487394062717e-03, 7.926861857646902e-04, -2.064525379105117e-03, -1.862673135035818e-03, -1.161728620562362e-03, 1.675212482527855e-03, 9.064802241924419e-04, -4.099816838866737e-03, 7.247720402769084e-04, -4.545703761122759e-03, 8.486513370299952e-04, 1.273052512658030e-04, -7.595770808214592e-04, 1.044546772210271e-03, 1.128377611379512e-03, 1.650399783877503e-03, 2.831114859756144e-05, 1.650399783877502e-03, -8.597968464734870e-05, -4.393087207125025e-10, -3.910572725744514e-10, -6.484145225806789e-08, -9.099365333738285e-09, -1.072932190675475e-05, -5.586026649132784e-06, -2.275664583783976e-11, -2.319008774029883e-11, 6.947573387452211e-11, 9.277827489602477e-12, 6.947573387452211e-11, 9.277827489602103e-12, 1.182219036072969e-02, 1.182590784830589e-02, 1.208720668628947e-02, 1.208640739712253e-02, 1.196132867520429e-02, 1.196151146242275e-02, 1.207730370649785e-02, 1.208020115399495e-02, 6.272314905097850e-04, 1.194441590946216e-02, 1.166056309031255e-02, 3.448635354967325e-04, 1.726577381539334e-03, 1.742601354710249e-03, 1.872342346841118e-03, 1.884754479858518e-03, 1.752836239114876e-03, 1.802938946195811e-03, 1.873018684023924e-03, 1.927617624103869e-03, 1.869082105698178e-03, -1.092338706985496e-03, 1.910789680417585e-03, 1.830768114854043e-03, 1.870286520305280e-02, -2.894238798986851e-03, 4.320826795856374e-02, 4.700604093906392e-02, 1.083743324302032e-02, 1.526539498760667e-02, 2.205521512785847e-02, 2.760345806873974e-02, 2.524631421160781e-02, -3.673057540758028e-03, 3.027525676393064e-02, 2.466373884304423e-02, 3.060732827905076e-05, 3.187229705488145e-05, -1.806030275518676e-03, -3.097088701541853e-04, 6.502635302115338e-06, 1.430999066975187e-05, 9.542352561780614e-03, 9.559438342407914e-03, 2.022578301125077e-05, 1.311166877440028e-04, 2.022578301125129e-05, 1.311166877440038e-04, -2.324841163640925e-09, -6.004686168298706e-11, 4.969913930254928e-12, 4.433655174115516e-12, -1.295733949360146e-10, -1.176135164425546e-10, -3.750831572888107e-05, -7.070089819108397e-05, -1.830481067932649e-10, -1.286030279936721e-10, -1.830481067932651e-10, -1.286030279937324e-10, 3.036312621924017e-01, 3.191514517081991e-01, 1.446819114145562e-01, 1.501107353661223e-01, 6.993541237676258e-03, 6.973558760647126e-03, -3.717767863808100e-02, 3.442545871837043e-01, 7.012850444999715e-03, 6.991267330680234e-03, -3.223055630612326e-02, 3.060512504384324e-01, 4.257097451232994e-01, 4.403446585166685e-01, 1.729342566082452e-02, -2.144289896698308e-03, 2.949345311374681e-02, -2.698857057887120e-03, 7.633066956839538e-02, 7.706021339435123e-02, 5.040114046035566e-02, 5.118390303428526e-02, 4.319129259952040e-02, -2.564494858384563e-03, 3.981536372076513e-02, 2.602261715017581e-03, 9.505260792060334e-04, 9.846742722626775e-04, -5.833438764284830e-03, 5.964908710117491e-04, -1.009864729095042e-02, 5.233656799069905e-03, 4.719570286716386e-03, 4.814535832197537e-03, 1.851192903079476e-03, -9.581810682330865e-03, 1.305071157728949e-02, 1.411987860722295e-02, -4.683022679463971e-06, -4.684929632640156e-06, 1.043622733018923e-06, 1.302764602302249e-06, 1.280831548287432e-02, 1.924709470911382e-02, 1.727748250265371e-05, 3.138667882206001e-05, 1.727748250265378e-05, 3.138667882205997e-05, -6.573377023087524e-08, -7.210119742741973e-08, 8.629703604405310e-15, 8.671269814437127e-15, -3.257247036028644e-09, -4.152008647339269e-09, -6.532383291311264e-05, -7.785999856471002e-05, 6.453133225437475e-12, 3.856306689212274e-11, -1.471794871566935e-09, -2.624135408375411e-08])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
