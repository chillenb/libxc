
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_tpssh_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_tpssh", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.016563957010213e+01, -2.016569651703753e+01, -2.016602889005816e+01, -2.016518345007893e+01, -2.016561510158239e+01, -2.016561510158239e+01, -3.148048122971080e+00, -3.148058098285973e+00, -3.148531960822469e+00, -3.150108675036376e+00, -3.148996158334648e+00, -3.148996158334648e+00, -6.299196961330331e-01, -6.295059489767852e-01, -6.213712502218615e-01, -6.275364621008536e-01, -6.278968107782037e-01, -6.278968107782037e-01, -1.921260526075898e-01, -1.935706758967609e-01, -7.186380633092999e-01, -1.615392253023906e-01, -1.839358029146028e-01, -1.839358029146028e-01, -9.095340246920672e-03, -9.577345104856659e-03, -5.198336545314439e-02, -5.246172013690331e-03, -7.321135260883850e-03, -7.321135260883850e-03, -4.979071408321145e+00, -4.980091696198856e+00, -4.979182679760235e+00, -4.980081177979331e+00, -4.979555279757146e+00, -4.979555279757146e+00, -1.895389216796786e+00, -1.908965868007954e+00, -1.890655279828841e+00, -1.902535243836661e+00, -1.905292460557378e+00, -1.905292460557378e+00, -5.740792353928819e-01, -6.066673979778980e-01, -5.252552501644903e-01, -5.342742141260780e-01, -5.839077480087731e-01, -5.839077480087732e-01, -1.246731062125825e-01, -2.041546242357744e-01, -1.167079766508766e-01, -1.703707634486793e+00, -1.383951455378249e-01, -1.383951455378249e-01, -4.050442184796997e-03, -5.128416068702854e-03, -3.927034276675533e-03, -8.172565575905716e-02, -4.932845336731401e-03, -4.932845336731400e-03, -5.806234035213003e-01, -5.875808110885661e-01, -5.866336598396655e-01, -5.848880722521510e-01, -5.858945145005920e-01, -5.858945145005920e-01, -5.526849414725078e-01, -4.952531090514167e-01, -5.192163161178512e-01, -5.420847328581105e-01, -5.305717141402280e-01, -5.305717141402280e-01, -6.310811158325653e-01, -2.434807236799738e-01, -2.778934680981250e-01, -3.490459188498924e-01, -3.098241767528232e-01, -3.098241767528233e-01, -4.528326936689868e-01, -4.978792749113600e-02, -6.707808325041169e-02, -3.381080270260696e-01, -1.005524837064665e-01, -1.005524837064665e-01, -1.281472265245932e-02, -1.370940088643057e-03, -2.882905210680403e-03, -9.530734532637031e-02, -4.530106299157807e-03, -4.530106299157797e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_tpssh_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_tpssh", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.504934878226452e+01, -2.505016529461315e+01, -2.504941412371183e+01, -2.505021321205003e+01, -2.504978206812494e+01, -2.505069346597186e+01, -2.504904140217069e+01, -2.504975623829034e+01, -2.504937515451184e+01, -2.505025247491348e+01, -2.504937515451184e+01, -2.505025247491348e+01, -3.882900712895956e+00, -3.882698338791923e+00, -3.882958650426740e+00, -3.882723871938780e+00, -3.883955042338311e+00, -3.884105768628186e+00, -3.884196097448085e+00, -3.884122137606744e+00, -3.882194652792820e+00, -3.885089085260870e+00, -3.882194652792820e+00, -3.885089085260870e+00, -7.829040990828883e-01, -7.874406775420797e-01, -7.807746994699680e-01, -7.863477780351493e-01, -7.452338792090329e-01, -7.374289117921925e-01, -7.488651881026296e-01, -7.517120913358735e-01, -7.839318685352025e-01, -7.103198759768167e-01, -7.839318685352025e-01, -7.103198759768167e-01, -1.941449466730178e-01, -2.000782177814965e-01, -1.980566549567744e-01, -2.056192349244532e-01, -9.032756113151956e-01, -9.421460541397523e-01, -1.544922202579310e-01, -1.559622918324157e-01, -1.808476914081943e-01, -1.602901778672801e-01, -1.808476914081942e-01, -1.602901778672801e-01, -1.171350455531945e-02, -1.244442964767051e-02, -1.227168534073605e-02, -1.314241122780183e-02, -6.535551419989459e-02, -6.861581287892372e-02, -7.049318139715504e-03, -6.932059490180022e-03, -1.045330327571456e-02, -5.952567532133388e-03, -1.045330327571456e-02, -5.952567532133393e-03, -6.187906111100664e+00, -6.186813160806082e+00, -6.187727738361152e+00, -6.186656856631653e+00, -6.188019312202890e+00, -6.186903732044239e+00, -6.187873250029613e+00, -6.186746095832535e+00, -6.187715689383048e+00, -6.186722822616772e+00, -6.187715689383048e+00, -6.186722822616772e+00, -2.263623732102505e+00, -2.265056093497841e+00, -2.293028910982001e+00, -2.293592293725527e+00, -2.240831428652524e+00, -2.247641867172987e+00, -2.266934817911852e+00, -2.273987878496832e+00, -2.295008366685966e+00, -2.284045185973735e+00, -2.295008366685966e+00, -2.284045185973735e+00, -7.323944849096344e-01, -7.318018172661497e-01, -7.909476830800265e-01, -7.914077531044910e-01, -6.603312147152151e-01, -6.831962883101858e-01, -6.969611718471591e-01, -7.137498179312914e-01, -7.606481042405675e-01, -7.245816183292328e-01, -7.606481042405676e-01, -7.245816183292331e-01, -1.376635755761556e-01, -1.375779360963674e-01, -1.929026908177537e-01, -1.932885516903232e-01, -1.295629464442268e-01, -1.327584387589313e-01, -2.257616793225299e+00, -2.256781495875285e+00, -1.445886733020524e-01, -1.365739858222610e-01, -1.445886733020524e-01, -1.365739858222610e-01, -5.289384381298307e-03, -5.496941298693324e-03, -6.782618765016795e-03, -6.885315200373381e-03, -5.070832903418048e-03, -5.369380450706715e-03, -9.909598933164840e-02, -9.986167336414314e-02, -5.180195411003333e-03, -7.110359399063820e-03, -5.180195411003330e-03, -7.110359399063818e-03, -7.355949092221130e-01, -7.378673377223369e-01, -7.365577859982305e-01, -7.388227735619080e-01, -7.356293652373574e-01, -7.379021750319935e-01, -7.351654770864025e-01, -7.374418693655961e-01, -7.353375078610652e-01, -7.376184190556407e-01, -7.353375078610653e-01, -7.376184190556407e-01, -7.194242045597468e-01, -7.210955054801731e-01, -6.417326608594469e-01, -6.440942570225320e-01, -6.726815209824681e-01, -6.747597980696687e-01, -6.903385859037128e-01, -6.921550717100297e-01, -6.820362849522899e-01, -6.843176440767952e-01, -6.820362849522899e-01, -6.843176440767952e-01, -8.263992656123066e-01, -8.277450543209233e-01, -2.397954534811980e-01, -2.407408384953381e-01, -3.034973710945984e-01, -3.066478024191616e-01, -4.437204295722545e-01, -4.453095389980817e-01, -3.766582525712810e-01, -3.766004685783751e-01, -3.766582525712809e-01, -3.766004685783751e-01, -5.775297868434410e-01, -5.824262256828092e-01, -6.435402981639510e-02, -6.475228901002476e-02, -8.371142422194541e-02, -8.591966045027344e-02, -4.315303231785984e-01, -4.427431301351142e-01, -1.146738819580818e-01, -1.142767995827157e-01, -1.146738819580818e-01, -1.142767995827157e-01, -1.673181848029980e-02, -1.733365331903504e-02, -1.825733502333797e-03, -1.829854881329693e-03, -3.714247786353586e-03, -3.950221894125728e-03, -1.099853209699245e-01, -1.112053930362927e-01, -4.905897290624470e-03, -6.518220245065828e-03, -4.905897290624467e-03, -6.518220245065823e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_tpssh_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_tpssh", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.376541364887440e-08, 4.394449201574557e-10, -2.376579345386657e-08, -2.376624125824849e-08, 4.394653995121968e-10, -2.376639099624344e-08, -2.376731502371549e-08, 4.395297892571282e-10, -2.376838723712151e-08, -2.375805304912791e-08, 4.392266903376305e-10, -2.375651822230679e-08, -2.376602751111669e-08, 4.393892545918013e-10, -2.376007796239382e-08, -2.376602751111669e-08, 4.393892545918013e-10, -2.376007796239382e-08, -2.103417107571604e-05, 1.904619658089490e-06, -2.103807103627155e-05, -2.103890997905473e-05, 1.905074395664440e-06, -2.104181938837099e-05, -2.113883434521657e-05, 1.915054397461407e-06, -2.115900987202179e-05, -2.107066238814824e-05, 1.892142402799617e-06, -2.107702729399044e-05, -2.103603631113925e-05, 1.903120108237034e-06, -2.116518620770353e-05, -2.103603631113925e-05, 1.903120108237034e-06, -2.116518620770353e-05, -7.611256415872431e-03, 3.018867992961956e-03, -7.560882488280287e-03, -7.658944886208914e-03, 2.984327249393496e-03, -7.584906546271769e-03, -8.379242055980098e-03, 2.105148723593510e-03, -8.493257037538620e-03, -8.303987024286169e-03, 1.979352644664631e-03, -8.322468249943628e-03, -7.703111187379801e-03, 2.238087083874927e-03, -8.220836515067010e-03, -7.703111187379801e-03, 2.238087083874927e-03, -8.220836515067010e-03, -6.440107291305914e-01, -6.415207785254832e-01, -6.181442909975142e-01, -6.284784059311141e-01, -6.040511118797578e-01, -5.900436293162239e-01, -2.697101309886630e-03, 1.865246751370776e-03, -2.094272759884408e-03, -1.334193757779324e+00, -6.974433132065594e-01, -1.301399119340704e+00, -9.115359431621841e-01, -1.423819006607673e+00, 3.048062794055894e+00, -9.115359431621819e-01, -1.423819006607687e+00, 3.048062794055944e+00, 6.840995501890306e+00, -1.874860949538604e+01, 3.447481467547137e+00, 7.764381601187019e+00, -2.018468822838668e+01, 3.587002128008951e+00, -3.595889838331576e-01, -3.803107799137335e+00, -1.018156231674293e+00, -2.505212590645421e+00, -3.226612919880917e+00, -2.232482076721602e+00, -4.406005846958880e+00, 5.874420380354707e-03, -1.117784269742865e+01, -4.406005846959610e+00, 5.874420380452601e-03, -1.117784269741996e+01, -1.030508336980745e-05, 9.321668284317074e-07, -1.031228917015115e-05, -1.041498612467917e-05, 9.443708370631332e-07, -1.041835126916248e-05, -1.031127643989888e-05, 9.328447603292538e-07, -1.031586672779562e-05, -1.040538596570164e-05, 9.436114556331501e-07, -1.041236673943958e-05, -1.036115338579527e-05, 9.382674283301596e-07, -1.036535562740168e-05, -1.036115338579527e-05, 9.382674283301596e-07, -1.036535562740168e-05, -9.045924051005941e-05, -2.734597867844546e-07, -9.004538311068637e-05, -8.663845944211092e-05, -3.421345661895148e-07, -8.636056859498612e-05, -8.845145582305050e-05, -1.212639581130356e-06, -8.880667056040439e-05, -8.494946504081921e-05, -1.297852450261965e-06, -8.523965352121127e-05, -9.025340236369045e-05, 1.668335981186782e-07, -8.808100095064600e-05, -9.025340236369045e-05, 1.668335981186782e-07, -8.808100095064600e-05, -2.863129737088603e-02, 1.003232890031837e-02, -2.916383541305611e-02, -3.577417308928800e-02, 1.808414587574407e-02, -3.731271774467285e-02, -3.257770505424934e-02, 1.280620106678248e-02, -3.202156794747606e-02, -2.619652131913379e-02, 2.408832162304946e-02, -2.900290802904319e-02, -2.812124352294657e-02, 1.072187880298743e-02, -3.342502205894819e-02, -2.812124352294656e-02, 1.072187880298743e-02, -3.342502205894819e-02, -1.313545809508539e+00, -1.176115143787986e+00, -1.391287240639641e+00, -5.571538892314916e-01, -3.787496333543526e-01, -5.559937124818275e-01, -1.341461590222897e+00, -1.358309670814186e+00, -1.530882152668454e+00, -2.257847559307302e-04, 1.256785353731731e-04, -2.263184032973163e-04, -1.308819037986505e+00, -1.215704734043846e+00, -2.062221009099534e+00, -1.308819037986504e+00, -1.215704734043846e+00, -2.062221009099533e+00, -5.671732255433133e+00, 2.237745870428778e-03, -4.908912745125411e+00, -4.882883380199071e+00, 9.851213846703260e-04, -4.508087512285087e+00, -2.517387907735699e+01, -4.412603220231251e+00, -2.907840626796759e+01, -1.727608535182110e+00, -2.672442035352083e+00, -1.659328166760134e+00, -1.383307987459050e+01, 1.626347130396611e-02, -1.359339948439013e+01, -1.383307987458593e+01, 1.626347130207101e-02, -1.359339948438994e+01, -2.566370787205372e-01, 1.075514919111817e-01, -2.601208732661195e-01, -1.358962682626341e-01, 6.501608791877946e-02, -1.370415170513450e-01, -1.668360028290226e-01, 7.807837546302397e-02, -1.687327457627890e-01, -2.016568080230021e-01, 9.120106574955932e-02, -2.034699848428897e-01, -1.830445702206767e-01, 8.438213607884848e-02, -1.849022443720440e-01, -1.830445702206766e-01, 8.438213607884849e-02, -1.849022443720439e-01, -1.567578160247662e-01, 6.083009969451252e-02, -1.615930505141490e-01, -1.766805853227193e-02, 2.372703097050888e-03, -1.776872394356428e-02, -2.969584528048224e-02, 1.189825584555071e-02, -3.017707943778780e-02, -6.222955969025459e-02, 2.873910954439146e-02, -6.202286029650943e-02, -4.268119416952385e-02, 1.892564696533183e-02, -4.246697729503729e-02, -4.268119416952385e-02, 1.892564696533184e-02, -4.246697729503729e-02, -2.346033226201053e-02, 1.347495825312329e-02, -2.505602157003886e-02, -2.835406225635956e-01, -1.931805408231373e-01, -2.819820047661162e-01, -1.595065472918224e-01, -8.417998082489594e-02, -1.568938209440905e-01, -9.470530747785394e-02, 2.497936447433212e-02, -9.384416823548543e-02, -9.957372297957806e-02, -2.419322472926652e-02, -1.006660588168223e-01, -9.957372297957796e-02, -2.419322472926650e-02, -1.006660588168224e-01, -3.391958745257547e-02, 7.089687724116801e-03, -3.331524456175582e-02, -3.495238461172856e-01, -3.981250078710808e+00, -4.358019045259662e-01, -9.083648738002783e-01, -2.642269801908009e+00, -1.238765527274691e+00, -1.530467600093186e-01, 6.174851546454860e-02, -1.432318784409229e-01, -1.730155471995979e+00, -2.265702164090969e+00, -2.778727489295878e+00, -1.730155471996026e+00, -2.265702164090888e+00, -2.778727489295911e+00, -2.313576086941367e+00, -2.118355357636387e+00, -2.615411214922510e+00, -1.745072127686974e+01, 4.127744526362455e-03, -3.091353833101748e+01, -9.941608140766169e+00, -1.372459674731491e+00, -1.089403485421020e+01, -1.798113033603919e+00, -3.198930981304023e+00, -1.896725427492598e+00, -2.853129092966646e+01, 2.082691001140744e-02, -1.410823523997724e+01, -2.853129092963973e+01, 2.082691003043525e-02, -1.410823523997159e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_tpssh_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_tpssh", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.657846136375426e-03, 1.658453604657342e-03, 1.657926711494819e-03, 1.658511737287515e-03, 1.658150166277036e-03, 1.658843699143791e-03, 1.657251080810088e-03, 1.657690347241932e-03, 1.657900016590733e-03, 1.658125110517816e-03, 1.657900016590733e-03, 1.658125110517816e-03, 2.456390725873915e-03, 2.452405532050613e-03, 2.457643896061552e-03, 2.452929359631715e-03, 2.478684358216320e-03, 2.481627013103001e-03, 2.484524295412002e-03, 2.481596227321338e-03, 2.454265043694878e-03, 2.500889625884707e-03, 2.454265043694878e-03, 2.500889625884707e-03, 3.724694275941940e-03, 3.712982377320615e-03, 3.740377988382314e-03, 3.709458853279883e-03, 3.689554755043621e-03, 3.734869797080223e-03, 4.150718316799020e-03, 4.252728667472368e-03, 3.392276963467731e-03, 3.313264620069649e-03, 3.392276963467731e-03, 3.313264620069649e-03, 6.763445223514665e-03, 6.957947344717349e-03, 7.450325682436127e-03, 7.808786252234764e-03, 5.759183600675134e-04, 5.565579844916569e-04, 1.218209235372262e-03, 1.259200742990372e-03, 4.707526303629428e-03, 1.710717428095879e-03, 4.707526303629443e-03, 1.710717428095900e-03, 3.899840441442792e-09, 3.900267130161098e-09, 5.611664571900668e-09, 5.611802102592218e-09, 4.340080676188658e-06, 4.347357633275985e-06, -3.597227184274436e-11, -3.597368658746884e-11, -9.053371641745004e-10, -9.053519024714594e-10, -9.053371641999909e-10, -9.053519024969496e-10, 1.125297059076550e-02, 1.125866204072330e-02, 1.137667165039584e-02, 1.137793977499808e-02, 1.126227429896400e-02, 1.126423407758320e-02, 1.136806560626795e-02, 1.137277889418438e-02, 1.131427638932003e-02, 1.131813856448952e-02, 1.131427638932003e-02, 1.131813856448952e-02, 2.601064041073111e-03, 2.597334469936678e-03, 2.669225527572105e-03, 2.664319394851414e-03, 2.338872333182492e-03, 2.411593114305731e-03, 2.388465902960579e-03, 2.461974152494035e-03, 2.845190835993891e-03, 2.659422796010251e-03, 2.845190835993891e-03, 2.659422796010251e-03, 2.770734181329674e-02, 2.849630962474988e-02, 2.508522343175379e-02, 2.642794025494390e-02, 1.736887551331705e-02, 2.224633123110692e-02, 8.944354920119460e-03, 1.347150263824539e-02, 3.276791327398062e-02, 2.847922491085305e-02, 3.276791327398064e-02, 2.847922491085305e-02, 1.880263447709680e-04, 1.909817008425407e-04, 2.383115005374783e-03, 2.406522266800477e-03, 1.434605134879559e-04, 1.481983954890915e-04, 3.013873774179131e-03, 3.014775587266747e-03, 6.032512547155974e-04, 7.968343295355557e-04, 6.032512547155978e-04, 7.968343295355570e-04, -2.054787498823913e-11, -2.054794651312609e-11, -8.726991468784841e-11, -8.726994318759314e-11, -5.038655908280336e-10, -5.038418135620356e-10, 3.990825696535848e-05, 3.954094980809151e-05, -4.487357205301569e-10, -4.487326074808849e-10, -4.487357205302746e-10, -4.487326074810029e-10, 1.899898712685369e-01, 1.962420233940406e-01, 1.329004003459978e-01, 1.370611152354259e-01, 1.538326338269062e-01, 1.591398501420382e-01, 1.733433999406888e-01, 1.789191033537923e-01, 1.634963562632616e-01, 1.689594396052169e-01, 1.634963562632616e-01, 1.689594396052169e-01, 5.618402904593506e-02, 5.975372889864691e-02, 1.895374282478870e-02, 1.934395335786470e-02, 3.134473719120466e-02, 3.225186879336941e-02, 5.738477295629800e-02, 5.796346960626753e-02, 4.187145318775375e-02, 4.252337664253177e-02, 4.187145318775375e-02, 4.252337664253174e-02, 1.784151066930421e-02, 1.949186325149468e-02, 4.129946895394494e-03, 4.191924823531345e-03, 7.475519782609730e-03, 7.792318081325763e-03, 2.068637793252771e-02, 2.076966146606571e-02, 1.345040898835039e-02, 1.362303159407494e-02, 1.345040898835038e-02, 1.362303159407495e-02, 1.970153898423150e-02, 2.045080789503795e-02, 3.677756360797106e-06, 3.677511190219475e-06, 1.116050070939648e-05, 1.120212368441948e-05, 2.828412216782016e-02, 3.370956413744350e-02, 1.359896138801928e-04, 1.461998091165612e-04, 1.359896138801904e-04, 1.461998091165589e-04, 1.142782681820166e-10, 1.154102608693467e-10, -2.681403441279415e-13, -2.681302959939220e-13, -3.645024634774512e-11, -3.645006455875371e-11, 1.448199233339622e-04, 1.540047727497483e-04, -4.629573430618763e-10, -4.629900384130805e-10, -4.629573463097522e-10, -4.629900416609566e-10])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
