
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_tpssh_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_tpssh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.807764888084746e+01, -1.807769629389133e+01, -1.807793953392238e+01, -1.807716289427586e+01, -1.807767361462827e+01, -1.807767361462827e+01, -3.022052192302616e+00, -3.022049605779566e+00, -3.022079170208400e+00, -3.022302094538274e+00, -3.022065457536168e+00, -3.359333800141559e+00, -6.336279344058866e-01, -6.890461005132904e-01, -6.817598858486233e-01, -6.819994198132689e-01, -6.892341074491634e-01, -6.892341074491634e-01, -1.988561626993636e-01, -2.006458339049386e-01, -7.549154120816874e-01, -1.683027809677861e-01, -1.993998615559520e-01, -1.993998615559520e-01, -1.530723307412611e-02, -1.602990978195162e-02, -6.361717134722432e-02, -7.359160448819328e-03, -1.586279843107256e-02, -1.586279843107256e-02, -4.979856109953428e+00, -4.980840142637030e+00, -4.979960466385315e+00, -4.500259323087111e+00, -4.980355511029828e+00, -4.980355511029828e+00, -1.737106990550509e+00, -1.747618368291237e+00, -1.732918949677914e+00, -1.741083334023340e+00, -1.749660265607180e+00, -1.925084385719583e+00, -5.813562887772756e-01, -6.342392758314115e-01, -5.517119057993122e-01, -5.768071347761262e-01, -6.041433540963772e-01, -5.681959203277634e-01, -1.117892354078517e-01, -2.124358509528567e-01, -1.105049382995451e-01, -1.854778266888126e+00, -1.451710206569359e-01, -1.451710206569359e-01, -7.140385427162345e-03, -8.112313089971962e-03, -6.079898388839945e-03, -7.333417613386754e-02, -7.417216123541110e-03, -7.391845248313315e-03, -6.100580324378149e-01, -6.061590583471805e-01, -5.682956092629561e-01, -6.086927851134173e-01, -6.081552238102562e-01, -6.081552238102562e-01, -5.912301482107093e-01, -5.066614838007687e-01, -5.309045971981480e-01, -5.542208566256256e-01, -5.422773288528833e-01, -5.102158019109332e-01, -6.618228624791829e-01, -2.407768582636440e-01, -2.893374606892441e-01, -3.466540778496087e-01, -3.207368078074951e-01, -3.207368078074951e-01, -4.372155668135427e-01, -5.918591230750463e-02, -7.887735109299818e-02, -3.401808659374037e-01, -9.285660676733891e-02, -1.087059983087399e-01, -1.794625445556386e-02, -2.221964612649981e-03, -4.220293972289482e-03, -1.037488207612103e-01, -6.282477665975368e-03, -6.282477665975367e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_tpssh_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_tpssh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.429719665659120e+01, -2.429725943004133e+01, -2.429758226551413e+01, -2.429655388116783e+01, -2.429722939803063e+01, -2.429722939803063e+01, -3.938670758598859e+00, -3.938706309256729e+00, -3.939921179183783e+00, -3.939756404566870e+00, -3.938698926882062e+00, -4.090147246828868e+00, -8.125221734481710e-01, -7.204407777511206e-01, -6.823823027717332e-01, -6.994370410208470e-01, -7.214491828162157e-01, -7.214491828162157e-01, -2.148482671474288e-01, -2.196579134655650e-01, -9.767001208190145e-01, -1.671204610357904e-01, -2.162425062614588e-01, -2.162425062614588e-01, -2.030857856715213e-02, -2.125758935020062e-02, -8.046315334154319e-02, -9.805521886881058e-03, -2.103581404990391e-02, -2.103581404990391e-02, -6.190814114255070e+00, -6.190607521897636e+00, -6.190786045154951e+00, -6.017833450138749e+00, -6.190718527126871e+00, -6.190718527126871e+00, -2.240917580089945e+00, -2.257086828294482e+00, -2.234488049545283e+00, -2.246930452475246e+00, -2.260448830283151e+00, -2.300185710961856e+00, -7.572987255290782e-01, -8.193114402960296e-01, -7.118848799242632e-01, -7.526386736214208e-01, -7.874494985882142e-01, -7.488742798747045e-01, -1.447297241791121e-01, -2.031196739228310e-01, -1.430497235594488e-01, -2.366888472198262e+00, -1.472568661624174e-01, -1.472568661624174e-01, -9.378355947954338e-03, -1.080635010486505e-02, -8.098130196040552e-03, -9.506498002709859e-02, -9.739837471101496e-03, -9.847338161837407e-03, -7.591726156016524e-01, -7.605946546861803e-01, -7.467247322684131e-01, -7.282076911456702e-01, -7.598262030587410e-01, -7.598262030587410e-01, -7.382186136168818e-01, -6.611604121778409e-01, -6.930843729684302e-01, -7.145427214954401e-01, -7.045522755824047e-01, -6.734936141955679e-01, -8.585805891054337e-01, -3.084260919762666e-01, -3.243356436669140e-01, -4.428797331688382e-01, -3.912988987253646e-01, -3.881447641490126e-01, -5.644142078204508e-01, -7.552433128413022e-02, -9.758967799604676e-02, -4.414336374124118e-01, -1.202429661418273e-01, -1.221831598253516e-01, -2.382647316185416e-02, -2.962401763326108e-03, -5.624967804641355e-03, -1.167307439726131e-01, -8.370481803427650e-03, -8.370481803427641e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_tpssh_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_tpssh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.991248764100528e-09, 1.991140139418727e-09, 1.990649554123228e-09, 1.992419169310887e-09, 1.991191647409574e-09, 1.991191647409574e-09, 7.269491741248684e-06, 7.268536888360373e-06, 7.238715827065752e-06, 7.247960395362726e-06, 7.269088386469813e-06, -4.151667648993590e-06, 6.981708258490046e-03, -2.681900021797512e-03, -2.959235562808274e-03, -2.766925251778659e-03, -2.674764352242761e-03, -2.674764352242761e-03, -3.842237581749017e-01, -3.626849553466919e-01, 3.597469678149549e-03, -5.938492238361972e-01, -3.777780242577069e-01, -3.777780242577069e-01, -4.426597446114553e+00, -4.391761356674301e+00, -1.514342284756252e+00, -1.573377455205558e+00, -4.593239965197950e+00, -4.593239965198170e+00, -4.890919233925488e-06, -4.940392636292561e-06, -4.896375902617115e-06, 1.276309038946339e-07, -4.915625851822806e-06, -4.915625851822806e-06, 8.051654765403645e-05, 7.698614434931386e-05, 8.202235229307633e-05, 7.920467171784002e-05, 7.621507414794587e-05, -3.696286298606364e-05, -4.618168951601854e-03, -8.180146377453634e-03, -4.636672207748552e-03, -5.739397781044015e-03, -5.105706023037802e-03, 5.176914342940519e-03, 1.798776369531052e+01, -3.235180606505095e-01, 1.891957186782783e+01, -7.499332441713486e-05, -9.676065474201107e-01, -9.676065474201107e-01, 3.304320582813472e+06, -1.984328084539131e+00, -7.800235935934614e+00, 1.213237765359561e+02, 2.810438109406716e+06, -2.446128458929761e+00, -9.923856225386289e-02, -4.644670225043321e-02, -1.218321881424378e-02, -1.228387833447561e-01, -6.413708267239096e-02, -6.413708267239096e-02, -7.993556508920624e-02, -7.076550979674910e-03, -9.612751663918432e-03, -1.679854120360733e-02, -1.225983083012506e-02, 6.041560640654359e-03, -5.094944354032991e-03, 5.067568527356439e-01, -7.865679590088787e-02, 7.689218472940861e-02, -3.563942193659260e-02, -4.260871237628350e-02, 2.428043671730779e-02, -1.426769816754543e+00, -1.224514535967316e+00, -2.405535713750932e-02, 4.155756427181652e+01, -1.450490033477343e+00, -1.730858535631333e+00, -2.197721902606693e+00, -4.317945822166741e+00, -1.737496524466628e+00, -3.438896449356495e+00, -3.438896449363482e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_tpssh_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_tpssh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.397725680063549e-04, 1.397754137272786e-04, 1.397875630071094e-04, 1.397412955076923e-04, 1.397740690996015e-04, 1.397740690996015e-04, -4.766134017241855e-04, -4.764275048795705e-04, -4.707329213315501e-04, -4.729199508353980e-04, -4.765595498544380e-04, 1.567158390554510e-03, -1.690128936904671e-03, 2.015087673246686e-03, 1.530779668122030e-03, 1.208830014692285e-03, 2.028960305931246e-03, 2.028960305931246e-03, 9.028689424009435e-03, 9.640861588124397e-03, -6.242326668047915e-04, 1.014206078932809e-03, 9.198414332940198e-03, 9.198414332940198e-03, 1.511595816625495e-07, 1.851689465551332e-07, 2.147799170238544e-05, 1.022586753975266e-09, 1.887312043083934e-07, 1.887312043084797e-07, 1.127099589305085e-02, 1.138922864506074e-02, 1.128400481431289e-02, 7.044618370883668e-04, 1.133008345096930e-02, 1.133008345096930e-02, -1.013479431364658e-03, -9.967663318897278e-04, -1.017773405364212e-03, -1.008422572935158e-03, -9.913945354096899e-04, 2.040954458278273e-03, 1.907378081012459e-02, 4.124671991392886e-02, 1.389428972776631e-02, 2.390784694116257e-02, 2.419706321450873e-02, 2.294019423361343e-03, -1.404796673543655e-04, 3.017677982094585e-03, -1.601999756788031e-04, 8.895152087952780e-03, 9.995798144818008e-04, 9.995798144818008e-04, -2.720767010529309e-08, 7.853216625998515e-11, 4.572057755658540e-09, -3.173988266138442e-05, -3.133618704281147e-08, 2.026182555789589e-09, 3.423023569992569e-01, 1.635634077536496e-01, 6.900607245633521e-03, 4.219580361479064e-01, 2.231124217913203e-01, 2.231124217913203e-01, 2.528814135492188e-01, 1.961025048593512e-02, 3.138096708680298e-02, 5.446623108319347e-02, 4.030735759227941e-02, 4.918538387586275e-03, 3.049795089124386e-02, -2.796562508804890e-03, 7.475533612126399e-03, -5.620552649111930e-03, 7.330453804608792e-03, 1.063238824395506e-02, -3.222268515305402e-03, 1.388301270235734e-05, 4.282307699972884e-05, 1.732131873497554e-02, -1.253166570378924e-04, 3.186029967242431e-04, 7.656445877388939e-08, 5.355184571426067e-12, 3.278646098176906e-10, 3.425432205656987e-04, 1.561433194129571e-09, 1.561433206673672e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
