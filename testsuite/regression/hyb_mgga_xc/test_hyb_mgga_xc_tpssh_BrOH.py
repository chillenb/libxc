
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_tpssh_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_tpssh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.016507772063519e+01, -2.016512727046365e+01, -2.016544520595435e+01, -2.016463656176237e+01, -2.016510298123931e+01, -2.016510298123931e+01, -3.148196275760363e+00, -3.148209310719116e+00, -3.148814350474231e+00, -3.150254256909128e+00, -3.148205508750296e+00, -3.148205508750296e+00, -6.279916943727663e-01, -6.276468579352932e-01, -6.208850813510377e-01, -6.265686808952995e-01, -6.278660973545813e-01, -6.278660973545813e-01, -1.962970281148023e-01, -1.978654838137308e-01, -7.321097197987173e-01, -1.593274268175119e-01, -1.967398404073132e-01, -1.967398404073132e-01, -1.530645839235974e-02, -1.602878513810154e-02, -6.336790182362881e-02, -7.358053520485347e-03, -1.586183441329610e-02, -1.586183441329610e-02, -4.976860551400227e+00, -4.977847848160889e+00, -4.977003209993027e+00, -4.977768782708022e+00, -4.977310285124767e+00, -4.977310285124767e+00, -1.894139808174793e+00, -1.907261535283546e+00, -1.892081226974319e+00, -1.902263978006022e+00, -1.905828743760039e+00, -1.905828743760039e+00, -5.658949255564029e-01, -5.979824641382084e-01, -5.316331838019207e-01, -5.447349630737496e-01, -5.894106045945573e-01, -5.894106045945573e-01, -1.294622072220849e-01, -2.097435197727315e-01, -1.270940405195322e-01, -1.701563217608369e+00, -1.421585818241315e-01, -1.421585818241315e-01, -7.098363516536080e-03, -8.111094529574384e-03, -6.079493112201444e-03, -8.573647345558713e-02, -7.390423913681447e-03, -7.390423913681447e-03, -5.858041211729952e-01, -5.948474082756212e-01, -5.932850738579040e-01, -5.910610134810557e-01, -5.923084382125162e-01, -5.923084382125162e-01, -5.580877021485211e-01, -5.056088696621552e-01, -5.286219820787585e-01, -5.486363958244588e-01, -5.385918130406433e-01, -5.385918130406433e-01, -6.222651677573430e-01, -2.504961232671390e-01, -2.856415823892505e-01, -3.516048414708923e-01, -3.164100123238945e-01, -3.164100123238945e-01, -4.521781525547897e-01, -5.907768423588093e-02, -7.833431855036728e-02, -3.325518383606422e-01, -1.070891160699639e-01, -1.070891160699639e-01, -1.793032782886807e-02, -2.221911649528538e-03, -4.220222388406082e-03, -1.020892131744806e-01, -6.281378893112598e-03, -6.281378893112593e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_tpssh_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_tpssh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.504905242897640e+01, -2.504910168825596e+01, -2.504950987309405e+01, -2.504870910288301e+01, -2.504907670710402e+01, -2.504907670710402e+01, -3.882832049643139e+00, -3.882870124805145e+00, -3.884166285016388e+00, -3.884227710707612e+00, -3.882859050599782e+00, -3.882859050599782e+00, -7.754102708810630e-01, -7.738505603829792e-01, -7.297765969328396e-01, -7.389605761823969e-01, -7.748470317113355e-01, -7.748470317113355e-01, -2.180193835027735e-01, -2.234941104868998e-01, -9.535059721604888e-01, -1.512418235948660e-01, -2.196525712381052e-01, -2.196525712381052e-01, -2.030550782639475e-02, -2.125313377363319e-02, -7.953533544325446e-02, -9.801101168953332e-03, -2.103199545840760e-02, -2.103199545840760e-02, -6.184746647970885e+00, -6.184583955524592e+00, -6.184799873064493e+00, -6.184669692538773e+00, -6.184569981558411e+00, -6.184569981558411e+00, -2.260465502401613e+00, -2.288640110370939e+00, -2.249796147636587e+00, -2.272213812556706e+00, -2.292513079548106e+00, -2.292513079548106e+00, -7.219896943830354e-01, -7.844392181320732e-01, -6.812876791397534e-01, -7.165502367077075e-01, -7.506359677483586e-01, -7.506359677483586e-01, -1.372077224818249e-01, -2.017492992550131e-01, -1.335890192944412e-01, -2.254719281923684e+00, -1.407013273085039e-01, -1.407013273085039e-01, -9.455573844735608e-03, -1.080148396496506e-02, -8.096512677394601e-03, -1.015561317742610e-01, -9.841664150575009e-03, -9.841664150575004e-03, -7.476536871378880e-01, -7.469183773002696e-01, -7.463344155482240e-01, -7.463276983985723e-01, -7.462582650444194e-01, -7.462582650444194e-01, -7.273049608141449e-01, -6.576012246346272e-01, -6.840219944053976e-01, -6.984283381848748e-01, -6.915437911886818e-01, -6.915437911886818e-01, -8.200341168347544e-01, -2.598342637977600e-01, -3.295656005467941e-01, -4.492308752552513e-01, -3.929306711280429e-01, -3.929306711280427e-01, -5.793362263128775e-01, -7.511612111311231e-02, -9.563105833885201e-02, -4.299108877527588e-01, -1.172963440913718e-01, -1.172963440913718e-01, -2.376327148759049e-02, -2.962189960177785e-03, -5.624681710789119e-03, -1.117326879119001e-01, -8.366094574346618e-03, -8.366094574346609e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_tpssh_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_tpssh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.177318326225958e-08, -1.177348896311497e-08, -1.177416576578569e-08, -1.176917476410254e-08, -1.177335021712824e-08, -1.177335021712824e-08, -1.005251794198582e-05, -1.005426377858486e-05, -1.010505648429212e-05, -1.007502219571875e-05, -1.005285778346392e-05, -1.005285778346392e-05, -3.218409756682110e-03, -3.243212413310528e-03, -3.843246035876865e-03, -3.781153858196331e-03, -3.227617298119657e-03, -3.227617298119657e-03, -3.989297940661427e-01, -3.769415895738213e-01, -4.722288757026110e-04, -9.411412533334750e-01, -3.925047915700524e-01, -3.925047915700524e-01, -4.607709648264019e+00, -4.620326735830108e+00, -1.981458170638126e+00, -3.265131130510445e+00, -4.799587303459203e+00, -4.799587303459203e+00, -4.924494273827743e-06, -4.973871157003954e-06, -4.929515188884334e-06, -4.967899628997449e-06, -4.949727064128732e-06, -4.949727064128732e-06, -4.513285925343501e-05, -4.332169423357928e-05, -4.462569734355562e-05, -4.314882711106807e-05, -4.471180144264050e-05, -4.471180144264050e-05, -1.249896573712637e-02, -1.150276534860545e-02, -1.300257057021956e-02, -1.044936809948301e-02, -1.259432360395098e-02, -1.259432360395098e-02, -1.142242297850627e+00, -3.465646728222951e-01, -1.305017507306693e+00, -8.081879128372933e-05, -1.201344392332451e+00, -1.201344392332451e+00, -3.463832575893770e+00, -3.470631843869006e+00, -9.931844858315976e+00, -1.986470012920691e+00, -5.125875905294811e+00, -5.125875905294579e+00, -1.017932009244489e-01, -5.551757212353088e-02, -6.824362619126641e-02, -8.121420904780768e-02, -7.433840725545110e-02, -7.433840725545104e-02, -5.823250595735735e-02, -8.506720306420627e-03, -1.303977167722138e-02, -2.423587132317003e-02, -1.754422819045072e-02, -1.754422819045073e-02, -6.975274558806962e-03, -1.618925580441393e-01, -8.318386141700301e-02, -4.141158405142029e-02, -5.095893138316847e-02, -5.095893138316859e-02, -1.623312184134922e-02, -1.667110480421625e+00, -1.694495551303971e+00, -6.615502820567895e-02, -1.931782894120728e+00, -1.931782894120732e+00, -3.462918174290079e+00, -5.973110786016000e+00, -5.141734885136600e+00, -2.363745434654731e+00, -7.485882444944983e+00, -7.485882444950286e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_tpssh_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_tpssh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_tpssh_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_tpssh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.657983138496784e-03, 1.658043486983072e-03, 1.658304314703031e-03, 1.657323036281273e-03, 1.658014948945202e-03, 1.658014948945202e-03, 2.461270563424847e-03, 2.462086112869806e-03, 2.487512430797157e-03, 2.490072415305000e-03, 2.461403338540114e-03, 2.461403338540114e-03, 3.815867928709542e-03, 3.820087532409506e-03, 3.704936775610406e-03, 4.129116958841357e-03, 3.818191999199962e-03, 3.818191999199962e-03, 1.115392080740613e-02, 1.220637331483112e-02, 5.123814537294162e-04, 1.337246429858563e-03, 1.147154110383752e-02, 1.147154110383752e-02, 1.447858810795602e-07, 1.772098866362054e-07, 1.969451753697099e-05, 9.884465549505508e-10, 1.806598590567794e-07, 1.806598590567791e-07, 1.124702748766746e-02, 1.136460463327000e-02, 1.126026814303756e-02, 1.135160875669305e-02, 1.130537160020076e-02, 1.130537160020076e-02, 2.561446174171146e-03, 2.626102152045930e-03, 2.423209767297078e-03, 2.468630620267748e-03, 2.795586853004281e-03, 2.795586853004281e-03, 2.690781231662690e-02, 2.049036780565962e-02, 2.042895174429924e-02, 1.492114292373517e-02, 3.157341406040521e-02, 3.157341406040521e-02, 3.249597781919993e-04, 3.548762498119498e-03, 3.885215883533978e-04, 2.976266570880084e-03, 1.023496897394560e-03, 1.023496897394560e-03, 1.570541600375427e-09, 2.220440885929186e-09, 4.426771385973421e-09, 5.250047744494095e-05, 1.958376107253385e-09, 1.958376107260213e-09, 1.778405601792682e-01, 1.434304330524877e-01, 1.630289904193027e-01, 1.771044683566361e-01, 1.704584718182102e-01, 1.704584718182102e-01, 5.585928825939016e-02, 2.159068556464170e-02, 3.512674238578390e-02, 5.918036875358868e-02, 4.509090496999665e-02, 4.509090496999667e-02, 1.455344566755956e-02, 5.825261361563772e-03, 1.006054634504256e-02, 2.183654129768406e-02, 1.597855323741730e-02, 1.597855323741731e-02, 2.120562107026500e-02, 1.274864927841043e-05, 3.910864876371996e-05, 3.031092980670137e-02, 2.983801579571617e-04, 2.983801579571634e-04, 7.312209432508963e-08, 5.214669051280075e-12, 3.182823437002905e-10, 3.222780094587907e-04, 1.511324792152721e-09, 1.511324797905646e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
