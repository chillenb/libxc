
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_mpw1b95_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_mpw1b95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.461607396264879e+01, -1.461609261360064e+01, -1.461622269480045e+01, -1.461594420217888e+01, -1.461608342049443e+01, -1.461608342049443e+01, -2.473664296951449e+00, -2.473637668123994e+00, -2.473062780164152e+00, -2.474319868073059e+00, -2.473594450413854e+00, -2.473594450413854e+00, -5.223247340000082e-01, -5.221210771915814e-01, -5.183797501735263e-01, -5.212393644687797e-01, -5.203047174493858e-01, -5.203047174493858e-01, -1.601458260933429e-01, -1.611407068952498e-01, -6.164650649758027e-01, -1.367485528319833e-01, -1.451730158456493e-01, -1.451730158456493e-01, -5.913701784805089e-04, -6.979309149397624e-04, -3.857490654184541e-02, -1.243217562459444e-04, -2.596758023081092e-04, -2.596758023081090e-04, -3.551057957428473e+00, -3.550604468689378e+00, -3.551043465483045e+00, -3.550643068094073e+00, -3.550824591676774e+00, -3.550824591676774e+00, -1.502974507135434e+00, -1.510013755500155e+00, -1.503043908670516e+00, -1.509253784538236e+00, -1.506833221577080e+00, -1.506833221577080e+00, -4.358048880609721e-01, -4.571285537062118e-01, -4.095622679367887e-01, -4.157698156256560e-01, -4.402836161781450e-01, -4.402836161781450e-01, -1.098734864856123e-01, -1.714392392267959e-01, -1.035279024245913e-01, -1.321939256094560e+00, -1.185313887620036e-01, -1.185313887620036e-01, -6.864301496901350e-05, -1.254717290307770e-04, -1.343514402823007e-04, -7.380477826498455e-02, -1.604274900966224e-04, -1.604274900966226e-04, -4.141763771271617e-01, -4.161930496272731e-01, -4.155423370030665e-01, -4.149638353180813e-01, -4.152584290660576e-01, -4.152584290660576e-01, -4.032558878204231e-01, -3.795977169610482e-01, -3.867416991237703e-01, -3.933929296415642e-01, -3.899598664494393e-01, -3.899598664494393e-01, -4.804223259298946e-01, -2.033326257417425e-01, -2.299259387893232e-01, -2.770036170506447e-01, -2.511171336949410e-01, -2.511171336949410e-01, -3.525147189874948e-01, -3.504730508130321e-02, -5.719016082782400e-02, -2.621190446189460e-01, -8.963486455953831e-02, -8.963486455953831e-02, -1.390775566163682e-03, -6.679956873391294e-06, -3.728944842113260e-05, -8.554171904077881e-02, -1.434912987119731e-04, -1.434912987119731e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_mpw1b95_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_mpw1b95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.751297855912892e+01, -1.751304324911047e+01, -1.751331917168782e+01, -1.751235691766638e+01, -1.751286277553435e+01, -1.751286277553435e+01, -2.905502354359506e+00, -2.905521516988708e+00, -2.905998266605662e+00, -2.905313981171812e+00, -2.905407585713442e+00, -2.905407585713442e+00, -6.089669735783045e-01, -6.079650949632304e-01, -5.828196747600765e-01, -5.854541611066034e-01, -5.855215360336042e-01, -5.855215360336042e-01, -1.599721809166283e-01, -1.625376752301980e-01, -7.434473065255217e-01, -1.260429862070359e-01, -1.383814914053713e-01, -1.383814914053713e-01, -2.177501749290575e-03, -2.567824116247146e-03, -8.752059369524094e-02, -4.575587278384507e-04, -9.570272461463251e-04, -9.570272461463272e-04, -4.364348938558631e+00, -4.366015465007827e+00, -4.364423065609203e+00, -4.365894342460997e+00, -4.365194809709417e+00, -4.365194809709417e+00, -1.599981783323783e+00, -1.611969925178931e+00, -1.588577899181115e+00, -1.599102575109060e+00, -1.612192160269649e+00, -1.612192160269649e+00, -5.280383044366476e-01, -5.789287361972608e-01, -4.944463357129089e-01, -5.198029483556200e-01, -5.368823039911640e-01, -5.368823039911640e-01, -1.054192529254033e-01, -1.602034686818819e-01, -1.023828006874341e-01, -1.673799383587258e+00, -1.078831740659103e-01, -1.078831740659103e-01, -2.523059524002715e-04, -4.618573327562438e-04, -4.950469707888309e-04, -9.503198280756293e-02, -5.911226958134277e-04, -5.911226958134296e-04, -5.376808230670143e-01, -5.328053067849595e-01, -5.346527145374529e-01, -5.360792144468161e-01, -5.353813477419722e-01, -5.353813477419722e-01, -5.241405463295234e-01, -4.360420023907063e-01, -4.610922825072937e-01, -4.868036476642902e-01, -4.737492496893170e-01, -4.737492496893170e-01, -6.061686214907525e-01, -1.981327993265916e-01, -2.371773302199928e-01, -3.196095454409237e-01, -2.741770377489369e-01, -2.741770377489369e-01, -4.065222027333414e-01, -8.452091425981453e-02, -1.003785979390500e-01, -3.120537749960207e-01, -9.072700670671524e-02, -9.072700670671523e-02, -5.087780078320562e-03, -2.443054973588450e-05, -1.368931593615580e-04, -9.043541475152118e-02, -5.286725048496145e-04, -5.286725048496112e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_mpw1b95_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_mpw1b95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.885046839556908e-09, -4.885023187014151e-09, -4.884855307355431e-09, -4.885208677098558e-09, -4.885032426920933e-09, -4.885032426920933e-09, -5.448407941095379e-06, -5.448628088091114e-06, -5.453963930262750e-06, -5.448871641754929e-06, -5.452037385014462e-06, -5.452037385014462e-06, -1.868602417489766e-03, -1.891819583701197e-03, -2.412165799141519e-03, -2.411718692457388e-03, -2.396229069289511e-03, -2.396229069289511e-03, -3.640809055571570e-01, -3.505483650024430e-01, -1.806735248870957e-04, -7.310209508567379e-01, -5.636434898823942e-01, -5.636434898823941e-01, 2.053170451492932e+02, 2.133686195013105e+02, 2.167512396238589e+01, 2.132519222940937e+02, 2.536696639830123e+02, 2.536696639830145e+02, -1.374594838474580e-06, -1.375315386466275e-06, -1.374624623459833e-06, -1.375260503162170e-06, -1.374961714243782e-06, -1.374961714243782e-06, -4.419827212371042e-05, -4.334250438415738e-05, -4.444190804123526e-05, -4.368034064498801e-05, -4.360543188980816e-05, -4.360543188980816e-05, -4.277343250618426e-03, -1.707702870328697e-03, -4.664118039227449e-03, 6.885564424196147e-04, -4.007687115040990e-03, -4.007687115040990e-03, -1.355944455940267e+00, -2.958609386037540e-01, -1.524029786848851e+00, -4.682900699345990e-05, -1.264567456112311e+00, -1.264567456112311e+00, 2.936412459562680e+02, 2.499907577727312e+02, 1.503121299377944e+03, -4.935020584798667e-01, 7.003241982418145e+02, 7.003241982418187e+02, -4.865009570923265e-03, -4.637888609168100e-03, -4.533562691321625e-03, -4.539540270095696e-03, -4.518056349977718e-03, -4.518056349977718e-03, -4.606518568989732e-03, -9.661686757375925e-03, -8.214668528760991e-03, -6.623090705552894e-03, -7.440608939855532e-03, -7.440608939855532e-03, -1.205109049654215e-03, -1.437929597648048e-01, -8.188056745837344e-02, -2.910134996114451e-02, -5.219993277411992e-02, -5.219993277411996e-02, -1.213628266036542e-02, 2.460639674326814e+01, 6.378574405796670e+00, -3.008466671570997e-02, -2.467016434449782e+00, -2.467016434449782e+00, 1.528147429581269e+02, 1.527983061091603e+03, 6.452752620750822e+02, -2.407775420434823e+00, 8.884205918425678e+02, 8.884205918425665e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_mpw1b95_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_mpw1b95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-1.453792283978471e-05, -1.453818662584219e-05, -1.453879561912927e-05, -1.453488296950892e-05, -1.453701315010626e-05, -1.453701315010626e-05, -2.775718393848247e-04, -2.776240936498513e-04, -2.788234851368839e-04, -2.766509746532341e-04, -2.776228584892479e-04, -2.776228584892479e-04, -2.566454190939865e-03, -2.533371885065624e-03, -1.804185727185526e-03, -1.813146546056280e-03, -1.838213172349539e-03, -1.838213172349539e-03, -2.555797814259009e-03, -2.812007899408073e-03, -2.283128744728795e-03, -9.589339535762655e-04, -1.555106140527363e-03, -1.555106140527362e-03, -3.258796894617046e-07, -3.975288282833202e-07, -2.492603401189000e-05, -6.277512067909956e-08, -1.524265052365561e-07, -1.524265052365564e-07, -2.269702985532985e-04, -2.280573663706722e-04, -2.270144524712743e-04, -2.279741091301697e-04, -2.275237198577517e-04, -2.275237198577517e-04, -2.646821746696447e-04, -2.698698241827689e-04, -2.483762463982107e-04, -2.527232363479489e-04, -2.759354158000614e-04, -2.759354158000614e-04, -6.369241708602159e-03, -1.190292719782858e-02, -6.412473447449897e-03, -1.282699419954386e-02, -6.819996236865639e-03, -6.819996236865639e-03, -2.855271797554048e-04, -1.081443713068554e-03, -2.474314630730053e-04, -1.928645477872851e-03, -6.389134607717199e-04, -6.389134607717198e-04, -3.950316868999526e-08, -6.927478027200196e-08, -2.025449349540546e-07, -1.121481555037163e-04, -1.603352375432031e-07, -1.603352375432027e-07, -1.715653870777054e-02, -1.386575190372423e-02, -1.490949299207765e-02, -1.586232602812442e-02, -1.537527207624292e-02, -1.537527207624292e-02, -1.924636234980064e-02, -4.390069527485070e-03, -6.462968674229307e-03, -9.827025162610095e-03, -7.946372527416517e-03, -7.946372527416517e-03, -1.066059606991729e-02, -1.552655076970212e-03, -2.480934733989058e-03, -6.305605209934963e-03, -4.033158041228320e-03, -4.033158041228323e-03, -4.854046670396275e-03, -2.008518762128271e-05, -4.752137100784840e-05, -9.965204787316353e-03, -2.644635392811541e-04, -2.644635392811544e-04, -6.882113065106681e-07, -7.619803347053765e-09, -3.151297056615350e-08, -2.192720144245662e-04, -1.623227288495196e-07, -1.623227288495198e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
