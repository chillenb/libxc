
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_b88b95_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b88b95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.439532392997623e+01, -1.439535754572237e+01, -1.439553316634681e+01, -1.439498207275904e+01, -1.439534144477329e+01, -1.439534144477329e+01, -2.458885721434630e+00, -2.458872503364157e+00, -2.458560758140464e+00, -2.458869572710551e+00, -2.458893270387472e+00, -4.050367130738147e+75, -5.831250503259244e-01, -7.477910303950869e+120, -5.362017980048431e+77, -9.479913219774575e+103, -2.474541930828076e+77, -8.935971205565204e+103, -3.514909593220619e+47, -4.333976573206035e+105, -7.354420493363513e-01, -2.407422225661934e+113, -4.640039584740992e+105, -1.181366644148552e+120, -9.498420515195332e+86, -1.980438071703516e+102, -2.609002217517145e+112, -4.002669206244540e+117, -3.217554997677313e+137, -4.290621846444573e+92, -3.842257236692542e+81, -1.201165855649578e+118, -1.153567089968816e+99, -3.560602995630560e+00, -3.183485190264007e+108, -4.779371382676860e+84, -1.438003137184757e+00, -1.444182198083723e+00, -1.435669679598083e+00, -1.440384607031979e+00, -1.445251090138549e+00, -2.416465267934423e+76, -2.926277779212835e+87, -2.505630813104130e+106, -4.058590617404611e+87, -3.305217132903483e+106, -2.615205068043951e+87, -4.598324829525972e-01, -3.961831105505021e-01, -3.866403615174382e+98, -3.763620738480115e-01, -3.150907440691257e+30, -5.229207941829533e+79, -1.644498341151778e+123, -1.147408535797945e+01, -1.001813871230799e+84, -5.932571536577168e+141, -6.595325524703060e-01, -1.083156088136912e+01, -1.116759617103289e+84, -1.346863301170828e+116, -4.750171677228102e+110, -4.360111628699100e-01, -7.346443764851200e+101, -3.224975024038805e+79, -3.408433991683276e+118, -3.229184754523477e+111, -1.284909122826603e+78, -3.828411468153361e+111, -1.679706885977973e+97, -2.605113547307215e+120, -4.062712123329231e-01, -5.649283537061636e+120, -2.653945668215592e-01, -9.497350648703135e+109, -3.055544072755955e-01, -6.375883415804131e+85, -1.352061020002278e+97, -3.710780150213180e-01, -6.588016491836898e+126, -2.671692772077347e+126, -1.543154050553941e+124, -3.926931101724928e-01, -1.995602162711806e+125, -5.612286511884229e+127, -4.107225971008771e+133, -4.953528130256400e+26, -1.345937907859278e+90, -2.834612901201745e+115, -1.297221335338107e+129]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_b88b95_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b88b95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.909330548046774e+01, -1.909335234834255e+01, -1.909359541086425e+01, -1.909282732008665e+01, -1.909332991213808e+01, -1.909332991213808e+01, -3.113707413794533e+00, -3.113724444743666e+00, -3.114346519028383e+00, -3.114353523596140e+00, -3.113726884154625e+00, -2.986001605228102e+73, -5.761808655921282e-01, -3.471577271602683e+118, -3.813769558091282e+75, -5.093206409445598e+101, -1.767626541211899e+75, -4.802499391421393e+101, -3.945779280900124e+45, -2.281546783550429e+103, -6.620909582792134e-01, -1.182220460373842e+111, -2.441918392659549e+103, -5.495065802264003e+117, -5.944745182845868e+84, -1.062956864573370e+100, -1.286477236302253e+110, -1.875371016217486e+115, -1.300856593929020e+135, -2.530419229485681e+90, -2.636765734854132e+79, -5.746830107209370e+115, -6.552763527392041e+96, -4.692749351059906e+00, -1.654504049443068e+106, -3.163258045146415e+82, -1.747301360783238e+00, -1.761435024137714e+00, -1.741494341066858e+00, -1.752586444258506e+00, -1.764361852183634e+00, -1.758450585046492e+74, -1.857012200089273e+85, -1.316293637147777e+104, -2.570909981486986e+85, -1.733806045493270e+104, -1.660797926224962e+85, -5.611575991779324e-01, 4.954817242910117e-02, -2.175334745410502e+96, 4.150712743875976e-02, -5.475267304901054e+28, -3.597146976254428e+77, -7.447836397825902e+120, 4.501499007024084e+00, -6.459440961180442e+81, -2.322373179145221e+139, 2.173101514381366e-01, 4.258683427472398e+00, -7.193532714446839e+81, -6.498387548187633e+113, -2.401334253412316e+108, -5.665404264662386e-01, -4.024663843570073e+99, -2.243510026184135e+77, -1.612098957563012e+116, -1.620447852440465e+109, -9.084052116156117e+75, -1.919199004166437e+109, -9.622770070077427e+94, -1.212953651963168e+118, -5.037374660634951e-01, -2.625151619328184e+118, -1.862626436694093e-01, -4.816453307396642e+107, -3.198358493890389e-01, -4.109011781752257e+83, -7.734114654142989e+94, -4.173568516314156e-01, -2.891780834689887e+124, -1.177415688974453e+124, -6.961402235412793e+121, 7.035867674400484e-02, -8.881987945273619e+122, -2.436484617220890e+125, -1.696663352935330e+131, -8.868774156746550e+24, -8.219998867354965e+87, -1.350931010773381e+113, -5.555607136694425e+126]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_b88b95_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b88b95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-6.683671316305241e-09, -6.683617094429892e-09, -6.683327506786023e-09, -6.684217342506521e-09, -6.683643107809337e-09, -6.683643107809337e-09, -2.652578629997179e-06, -2.653944616784034e-06, -2.694717548576890e-06, -2.678563970767050e-06, -2.652934770891446e-06, 3.611183973768950e-07, 2.673533534476443e-02, 3.941097385029284e-04, 3.799431167664001e-04, 3.938778783996458e-04, 3.944992245747863e-04, 3.944992245747863e-04, 1.246984943346839e-01, 1.239366518981627e-01, 1.760456217269015e-02, 1.045812477662681e-01, 1.243750857838237e-01, 1.243750857838237e-01, 1.483002659351524e+00, 1.461127723634534e+00, 3.688577212357971e-01, 5.769407226911740e-01, 1.530755950642056e+00, 1.530755950642056e+00, 1.453736687930685e-07, 1.458043041888032e-07, 1.454218615150981e-07, -1.608809784849962e-06, 1.455886560898379e-07, 1.455886560898379e-07, 3.556499430129528e-05, 2.961637278675892e-05, 3.830634252828379e-05, 3.335718753996999e-05, 2.825241983876462e-05, 4.560527694729273e-06, 2.307464554648975e-03, 2.403905038768437e-03, 2.404420631256585e-03, 2.718201463881373e-03, 2.236944059199423e-03, 6.791019848459574e-03, 1.421274445177463e+03, 6.301827137802912e-02, 1.426278381623299e+03, 1.018104838934350e-05, 1.811533858886079e-01, 1.811533858886079e-01, 1.899203482656985e+11, 7.205778765347505e-01, 2.916964238351237e+00, 2.914488822498542e+04, 1.464355565173700e+11, 8.967688847525177e-01, 5.839777880290904e-03, 5.126884935562507e-03, -2.849582624735957e-03, 5.558721673500573e-03, 5.458326463393287e-03, 5.458326463393287e-03, 6.410891160410613e-03, 4.234358622639493e-03, 4.564271664013611e-03, 5.062883048958963e-03, 4.777443233609706e-03, 7.747394643918718e-03, 1.701368846026909e-03, 5.199126730679313e+00, 2.504554727979144e-02, 3.019681089235993e-01, 1.963120549010907e-02, 1.963120549010909e-02, 6.572083927269207e-02, 3.552370283632718e-01, 2.774451865529561e-01, 2.176388178964183e-02, 4.166891815581035e+03, 2.945340602547146e-01, 5.646075952423090e-01, 8.830044668346589e-01, 1.664516591406490e+00, 3.603084291008690e-01, 1.281384950950778e+00, 1.281384950950780e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_b88b95_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b88b95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-3.917658360446694e-05, -3.917641123231473e-05, -3.917551531534577e-05, -3.917834055818163e-05, -3.917649376224852e-05, -3.917649376224852e-05, -9.887043367868360e-04, -9.887007300229396e-04, -9.885308710347032e-04, -9.884593417231744e-04, -9.886951608360740e-04, -1.088127057943561e-04, -1.609190699825020e-02, -5.445291569199639e-04, -4.457820990753864e-04, -4.906601057525088e-04, -5.472813192835486e-04, -5.472813192835486e-04, -3.206213529051575e-03, -3.405537879639008e-03, -1.195932061492321e-02, -5.814545647093815e-04, -3.261184954610921e-03, -3.261184954610921e-03, -2.854209542879652e-06, -3.221278524971632e-06, -5.226901242205083e-05, -1.293516305052723e-07, -3.273217523713364e-06, -3.273217523713362e-06, -2.260864214897733e-04, -2.271450500191080e-04, -2.262036616335068e-04, -4.884199834238407e-04, -2.266163582445033e-04, -2.266163582445033e-04, -2.666387509531268e-03, -2.634635771704018e-03, -2.679393442276249e-03, -2.654371911375143e-03, -2.628347316080931e-03, -2.306579532512466e-04, -3.845479206558942e-03, -6.138139092064929e-03, -3.099991179148219e-03, -4.630928458942915e-03, -4.456210690564821e-03, -1.896391590989731e-02, -3.163010342284969e-01, -1.247515588512206e-03, -3.222752639339310e-01, -6.611528428383694e-04, -5.957261388792424e-04, -5.957261388792424e-04, -1.643503726705519e+01, -2.149252785121762e-07, -3.744939857928815e-07, -6.222606556189200e-01, -1.566836490373383e+01, -2.037749800117448e-07, -1.545821994428226e-02, -1.286815826809269e-02, -1.926676861498073e-02, -1.443319322647636e-02, -1.406840723169111e-02, -1.406840723169111e-02, -1.518402873384943e-02, -4.466058127057368e-03, -6.217108914199265e-03, -8.637116875835189e-03, -7.277045233318473e-03, -2.296871231034412e-02, -4.772113583317611e-03, -8.655545137078187e-02, -2.494354187499923e-03, -4.513165412366922e-02, -3.364268121579992e-03, -3.364268121579991e-03, -2.999566309076233e-02, -3.972220325135665e-05, -7.876582863330349e-05, -5.684563294075566e-03, -4.271985534400362e-01, -2.856852191688238e-04, -1.725217491921660e-06, -5.898705933133634e-09, -7.323067647325690e-08, -3.037106231478319e-04, -1.809211503248215e-07, -1.809211503248210e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
