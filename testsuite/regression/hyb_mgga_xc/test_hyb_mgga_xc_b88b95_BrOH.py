
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_b88b95_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b88b95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.524002082834250e+01, -1.524003781637723e+01, -1.524016890001766e+01, -1.523988957038647e+01, -1.524002932556475e+01, -1.524002932556475e+01, -2.577010951229747e+00, -2.576989085974651e+00, -2.576479417256960e+00, -2.577690128756910e+00, -2.577011694287354e+00, -2.577011694287354e+00, -5.422565604289599e-01, -5.420988422324463e-01, -5.394921586026650e-01, -5.422504034354463e-01, -5.421958529905618e-01, -5.421958529905618e-01, -1.694476677063970e-01, -1.703708789580221e-01, -6.488357245387907e-01, -1.427237722917329e-01, -1.697094359115513e-01, -1.697094359115513e-01, -4.570024213736745e-02, -4.622535899861584e-02, -8.275470073207232e-02, -4.136866949846319e-02, -4.577590777045436e-02, -4.577590777045436e-02, -3.699797304322948e+00, -3.699343741531065e+00, -3.699754784968439e+00, -3.699402083867669e+00, -3.699559162456983e+00, -3.699559162456983e+00, -1.566321514498099e+00, -1.573365047825066e+00, -1.566991045007865e+00, -1.572461496368701e+00, -1.570262269545313e+00, -1.570262269545313e+00, -4.486408270222731e-01, -4.708834302252454e-01, -4.300296788624603e-01, -4.375864624209889e-01, -4.616471414456131e-01, -4.616471414456131e-01, -1.234113810066964e-01, -1.844978541389275e-01, -1.203401078728070e-01, -1.374702137232207e+00, -1.294439788598159e-01, -1.294439788598159e-01, -4.059038671429302e-02, -4.168678915959250e-02, -3.188218446458790e-02, -9.391762238606599e-02, -3.784875078624340e-02, -3.784875078624341e-02, -4.366921655525772e-01, -4.385044405693233e-01, -4.378857019225458e-01, -4.373832410758406e-01, -4.376371820130218e-01, -4.376371820130218e-01, -4.239041612866160e-01, -4.000483860199713e-01, -4.072958160469436e-01, -4.137064177369241e-01, -4.104040513272930e-01, -4.104040513272930e-01, -4.950860362877380e-01, -2.177215304584597e-01, -2.443160653202671e-01, -2.892087691679888e-01, -2.646845536892560e-01, -2.646845536892560e-01, -3.655504190709269e-01, -8.275785964016980e-02, -9.231462561600014e-02, -2.691591985707373e-01, -1.048691387193286e-01, -1.048691387193285e-01, -5.020817266033278e-02, -2.964834976771244e-02, -3.398127691240364e-02, -9.984060315270241e-02, -3.395326392642460e-02, -3.395326392642460e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_b88b95_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b88b95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.826675646320887e+01, -1.826681559491796e+01, -1.826708935437555e+01, -1.826612079944442e+01, -1.826678756478758e+01, -1.826678756478758e+01, -3.025663142264955e+00, -3.025680468611104e+00, -3.026253073127724e+00, -3.025496935061279e+00, -3.025686936999117e+00, -3.025686936999117e+00, -6.242932764630383e-01, -6.232716674673090e-01, -5.957515665893249e-01, -5.987091995571543e-01, -6.239196048398220e-01, -6.239196048398220e-01, -1.733582038786885e-01, -1.762291299792188e-01, -7.861325730706669e-01, -1.236648119810536e-01, -1.742389567038431e-01, -1.742389567038431e-01, -1.582241365249243e-02, -1.625269156780304e-02, -4.410534974668417e-02, -1.108128112821825e-02, -1.608969032107485e-02, -1.608969032107485e-02, -4.548720730927727e+00, -4.550420617184638e+00, -4.548894116980557e+00, -4.550215913539255e+00, -4.549592769938594e+00, -4.549592769938594e+00, -1.657435580467675e+00, -1.669816953401814e+00, -1.650403519372001e+00, -1.660037988233549e+00, -1.675010327928148e+00, -1.675010327928148e+00, -5.440198814948806e-01, -5.963232782006873e-01, -5.209538687789496e-01, -5.482558019338780e-01, -5.638225505987537e-01, -5.638225505987537e-01, -8.948663432520865e-02, -1.688467812135767e-01, -8.845740976950002e-02, -1.742139960700959e+00, -1.036586355503508e-01, -1.036586355503508e-01, -1.080495843926678e-02, -1.154841701407824e-02, -8.765031687830348e-03, -5.774233081921160e-02, -1.049946694906144e-02, -1.049946694906144e-02, -5.686997566636803e-01, -5.633409149634471e-01, -5.652646981175092e-01, -5.667473995212252e-01, -5.660059730571835e-01, -5.660059730571835e-01, -5.512148119536286e-01, -4.628880549611973e-01, -4.886025010855881e-01, -5.130062746024960e-01, -5.006776570323062e-01, -5.006776570323063e-01, -6.245578924135340e-01, -2.125292831655835e-01, -2.550183541160805e-01, -3.346383332555887e-01, -2.916177541397050e-01, -2.916177541397049e-01, -4.229518574838094e-01, -4.208965112064546e-02, -5.307342836910901e-02, -3.222916451909978e-01, -7.321809264061495e-02, -7.321809264061495e-02, -1.789055071196612e-02, -6.014522892746355e-03, -8.029047031891631e-03, -7.001199512567011e-02, -9.229067724992690e-03, -9.229067724992690e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_b88b95_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b88b95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-5.083263856105220e-09, -5.083241383406903e-09, -5.083069414658160e-09, -5.083439073702875e-09, -5.083252601423785e-09, -5.083252601423785e-09, -5.731841230682990e-06, -5.732025920087142e-06, -5.736727245209370e-06, -5.732143714214567e-06, -5.731793810511625e-06, -5.731793810511625e-06, -2.232207195581820e-03, -2.254267160881886e-03, -2.777499647797864e-03, -2.756493455654624e-03, -2.240339478284367e-03, -2.240339478284367e-03, -3.643473746157787e-01, -3.488198756690964e-01, -1.219236953831919e-04, -9.565488608536715e-01, -3.595845403804817e-01, -3.595845403804817e-01, -2.013977963229826e+03, -1.766303632342766e+03, -2.633589302266721e+01, -1.493232991822478e+04, -1.839867829881993e+03, -1.839867829881993e+03, -1.433058826552643e-06, -1.433723764020642e-06, -1.433125031016656e-06, -1.433641838211590e-06, -1.433402155239430e-06, -1.433402155239430e-06, -4.718512907919818e-05, -4.626853482934408e-05, -4.731844093471132e-05, -4.660059505171975e-05, -4.638893549798378e-05, -4.638893549798378e-05, -4.613905946250685e-03, -1.575499326724890e-03, -4.744273707610813e-03, -8.913665737836449e-04, -4.170654118882512e-03, -4.170654118882512e-03, -2.364185195621287e+00, -3.093171738074214e-01, -2.551998667082910e+00, -4.984391885533070e-05, -1.623176370756080e+00, -1.623176370756080e+00, -1.683482597850692e+04, -1.148116411563402e+04, -3.535079572136902e+04, -1.040562425430992e+01, -1.674207200622775e+04, -1.674207200622776e+04, -4.293605205994618e-03, -4.647621768679196e-03, -4.516549216438311e-03, -4.415587494225196e-03, -4.465525550167219e-03, -4.465525550167219e-03, -3.999788697670511e-03, -9.646404011783755e-03, -8.181814892327752e-03, -6.713769822760432e-03, -7.457207912842010e-03, -7.457207912842010e-03, -1.020069460532607e-03, -1.435913091033384e-01, -8.077854376466130e-02, -3.029381176418655e-02, -5.229516270831479e-02, -5.229516270831483e-02, -1.290187885766742e-02, -3.098846714699455e+01, -1.335573538022230e+01, -3.037759494375276e-02, -4.943707371936140e+00, -4.943707371936142e+00, -1.180373503738038e+03, -5.577944098959645e+05, -8.400724062975257e+04, -5.986456868199363e+00, -2.971946677317486e+04, -2.971946677317497e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_b88b95_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b88b95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_b88b95_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b88b95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-1.453792881020835e-05, -1.453815844837191e-05, -1.453871124683689e-05, -1.453496057061442e-05, -1.453805385589584e-05, -1.453805385589584e-05, -2.775436576906803e-04, -2.775855508915998e-04, -2.787195116710247e-04, -2.766666961361983e-04, -2.775631483849621e-04, -2.775631483849621e-04, -2.355930769489709e-03, -2.326155936325914e-03, -1.624213943089691e-03, -1.639251645310494e-03, -2.345189621909301e-03, -2.345189621909301e-03, -3.960154996545132e-03, -4.321891409453982e-03, -2.589762119739679e-03, -1.210365121099308e-03, -4.071359626015101e-03, -4.071359626015101e-03, -2.971904688411089e-06, -3.390279689868400e-06, -6.932569228204634e-05, -2.686526026535870e-07, -3.421491950835473e-06, -3.421491950835474e-06, -2.270364236199089e-04, -2.280904403504870e-04, -2.271411325631901e-04, -2.279606871468378e-04, -2.275802814273013e-04, -2.275802814273013e-04, -2.619657172859747e-04, -2.670105022861876e-04, -2.519477275473951e-04, -2.557893556152959e-04, -2.791220374975574e-04, -2.791220374975574e-04, -6.561847842347336e-03, -1.240282339943801e-02, -6.733639062756232e-03, -1.215298748333417e-02, -6.923214536847441e-03, -6.923214536847441e-03, -4.299701434995194e-04, -1.456751740288871e-03, -4.869407601727779e-04, -1.934623506917164e-03, -8.147950457462470e-04, -8.147950457462470e-04, -2.575035527888732e-07, -3.760377772443233e-07, -4.770189010703516e-07, -1.807137943766328e-04, -4.274533259165149e-07, -4.274533259165147e-07, -1.720174471106644e-02, -1.414907958778020e-02, -1.514525674058078e-02, -1.598746071056006e-02, -1.555812503198624e-02, -1.555812503198624e-02, -1.879262873722554e-02, -4.786032157844813e-03, -6.887839697489260e-03, -9.933193977300818e-03, -8.256756186165932e-03, -8.256756186165934e-03, -1.114619740287045e-02, -2.039219582609204e-03, -3.148116437615883e-03, -6.753927378774448e-03, -4.714931968855889e-03, -4.714931968855887e-03, -5.187298369985341e-03, -4.672243692400858e-05, -1.115648744901561e-04, -1.094343744547512e-02, -4.028470824938104e-04, -4.028470824938113e-04, -3.464829181194732e-06, -1.603449443640014e-08, -8.721126006235346e-08, -4.396724529975842e-04, -3.942186910684218e-07, -3.942186910684204e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
