
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_x1b95_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_x1b95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-5.825696953334194e+00, -5.825703534504632e+00, -5.825753365504761e+00, -5.825645146733414e+00, -5.825700253434153e+00, -5.825700253434153e+00, -1.015373804573639e+00, -1.015365223547144e+00, -1.015156185409396e+00, -1.015517641030280e+00, -1.015374727735204e+00, -1.015374727735204e+00, -2.284261965132691e-01, -2.282438538299465e-01, -2.240379100567814e-01, -2.248862847248816e-01, -2.283582410768344e-01, -2.283582410768344e-01, -7.142116034137441e-02, -7.206655601679421e-02, -2.834777936777719e-01, -5.744551174863776e-02, -7.161381675665453e-02, -7.161381675665453e-02, -1.294394344372993e-02, -1.310565147858106e-02, -2.698085042667058e-02, -1.164299285869814e-02, -1.297795698123481e-02, -1.297795698123481e-02, -1.438841560877296e+00, -1.438691334198136e+00, -1.438827132106623e+00, -1.438710339711909e+00, -1.438763142374687e+00, -1.438763142374687e+00, -6.163496833209650e-01, -6.191262374425061e-01, -6.163005196598593e-01, -6.184574624606711e-01, -6.183092561396955e-01, -6.183092561396955e-01, -1.906252296538898e-01, -2.039004417529317e-01, -1.842239418603811e-01, -1.917994097916664e-01, -1.957483977079776e-01, -1.957483977079776e-01, -4.708422883664379e-02, -7.502158665957420e-02, -4.612758417191052e-02, -5.625130307977547e-01, -5.094408019348532e-02, -5.094408019348532e-02, -1.142346210878284e-02, -1.173558357649981e-02, -8.974812204906368e-03, -3.336904941307476e-02, -1.065526563389861e-02, -1.065526563389861e-02, -1.866875524507976e-01, -1.868333721537364e-01, -1.867906119427153e-01, -1.867508489331475e-01, -1.867718832921597e-01, -1.867718832921597e-01, -1.824224070354929e-01, -1.677532264949690e-01, -1.720004968664663e-01, -1.759105727953304e-01, -1.739315886464638e-01, -1.739315886464638e-01, -2.146582775987755e-01, -8.974793082632293e-02, -1.022930849308027e-01, -1.243548119440801e-01, -1.122833020835977e-01, -1.122833020835976e-01, -1.547097251155266e-01, -2.620628457381967e-02, -3.158157215460387e-02, -1.178599542992605e-01, -3.947993791210966e-02, -3.947993791210966e-02, -1.424885058887818e-02, -8.338889497157408e-03, -9.559097278081215e-03, -3.764833745664019e-02, -9.556983538007765e-03, -9.556983538007765e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_x1b95_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_x1b95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-6.998779336639287e+00, -6.998801506396983e+00, -6.998904124861183e+00, -6.998540954630343e+00, -6.998790997951797e+00, -6.998790997951797e+00, -1.212149025795042e+00, -1.212151282801651e+00, -1.212234868243325e+00, -1.211936735838956e+00, -1.212157344632615e+00, -1.212157344632615e+00, -2.851118487489499e-01, -2.846103476168971e-01, -2.705384419225915e-01, -2.707053013516987e-01, -2.849271594505238e-01, -2.849271594505238e-01, -8.452580460768608e-02, -8.600186888221292e-02, -3.737226428942622e-01, -6.084963496364142e-02, -8.498692980592262e-02, -8.498692980592262e-02, -4.822096945597960e-03, -5.000208459250313e-03, -2.309130132190544e-02, -3.149569474320558e-03, -4.949103927601943e-03, -4.949103927601943e-03, -1.776411045733659e+00, -1.777013694410670e+00, -1.776472077787413e+00, -1.776940720308878e+00, -1.776720815240432e+00, -1.776720815240432e+00, -6.759813942667995e-01, -6.804608035112109e-01, -6.731091749201908e-01, -6.765895497940682e-01, -6.827625449971009e-01, -6.827625449971009e-01, -2.395411531185750e-01, -2.540362767507384e-01, -2.327336311979675e-01, -2.389132560156755e-01, -2.461287516032072e-01, -2.461287516032072e-01, -4.441742103911155e-02, -8.087182630817907e-02, -4.385665488271862e-02, -7.011434187401394e-01, -5.071011723316304e-02, -5.071011723316304e-02, -3.069212164583943e-03, -3.293754422066829e-03, -2.497695035189372e-03, -3.071236477319095e-02, -2.995197214038939e-03, -2.995197214038937e-03, -2.394277287904360e-01, -2.392953704140664e-01, -2.394303069221232e-01, -2.394668234113091e-01, -2.394563045681793e-01, -2.394563045681793e-01, -2.319005805055371e-01, -2.046900585834483e-01, -2.143136403730972e-01, -2.226852298275626e-01, -2.186119864156989e-01, -2.186119864156989e-01, -2.661858946375317e-01, -1.006770414323499e-01, -1.201263687140939e-01, -1.560297238378612e-01, -1.365184534218036e-01, -1.365184534218036e-01, -1.908049181806584e-01, -2.110482015081834e-02, -2.848847136587992e-02, -1.510622908921601e-01, -3.698298218343218e-02, -3.698298218343218e-02, -5.555122038265815e-03, -1.692766613910864e-03, -2.265752286355272e-03, -3.542348118311064e-02, -2.626915159559840e-03, -2.626915159559840e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_x1b95_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_x1b95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.831002870504056e-09, -1.830994295860089e-09, -1.830933146475755e-09, -1.831074237655412e-09, -1.830998537118478e-09, -1.830998537118478e-09, -1.431878316157645e-06, -1.431925937688955e-06, -1.433565968537760e-06, -1.437896403219673e-06, -1.431833669306708e-06, -1.431833669306708e-06, 4.635794175526535e-04, 4.427456302189693e-04, -6.520247636317427e-05, -1.132250837482301e-04, 4.559403625147736e-04, 4.559403625147736e-04, -3.839676388243410e-02, -3.094855001584712e-02, 1.321664978054938e-03, -1.914743302391364e-01, -3.597520489357436e-02, -3.597520489357436e-02, -5.551237254440535e+02, -4.854069510326231e+02, -5.077161677340517e+00, -4.192086222819331e+03, -5.056551890345842e+02, -5.056551890345842e+02, -4.515294762840504e-07, -4.515254586626955e-07, -4.515328333296847e-07, -4.515294329250714e-07, -4.515224519276444e-07, -4.515224519276444e-07, -1.425188359681599e-05, -1.399379587433115e-05, -1.437640808331662e-05, -1.417396277963091e-05, -1.391128743093592e-05, -1.391128743093592e-05, 1.149054348936879e-03, 3.595444648601404e-03, 2.254154839523831e-03, 6.212697957650896e-03, 9.394479585839673e-04, 9.394479585839673e-04, -5.512557186524127e-01, -6.443226586950508e-02, -5.937835335226798e-01, 1.051984975377688e-05, -3.736679361234320e-01, -3.736679361234320e-01, -4.726761130757070e+03, -3.220929333858311e+03, -9.919177179783104e+03, -2.072415892185832e+00, -4.696611840506983e+03, -4.696611840506985e+03, 2.594791551165233e-03, 1.926614253578785e-03, 2.167262793732160e-03, 2.354982064952600e-03, 2.261900468307750e-03, 2.261900468307750e-03, 3.985162362476169e-03, -7.693093108110931e-04, 1.576626405718961e-04, 1.299052803987967e-03, 7.111871966678429e-04, 7.111871966678437e-04, 3.216819025875019e-03, -2.656366025938113e-02, -1.027421756933770e-02, 5.070801889413206e-03, -2.067288471768864e-03, -2.067288471768864e-03, 2.244869277739925e-04, -6.246078951805613e+00, -2.559010757319852e+00, 1.867507746476275e-02, -1.116393890616714e+00, -1.116393890616715e+00, -3.233876233533633e+02, -1.568662217699119e+05, -2.361541357102426e+04, -1.343844530387052e+00, -8.340978304424545e+03, -8.340978304424576e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_x1b95_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_x1b95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-1.453792881020835e-05, -1.453815844837191e-05, -1.453871124683689e-05, -1.453496057061442e-05, -1.453805385589584e-05, -1.453805385589584e-05, -2.775436576906803e-04, -2.775855508915998e-04, -2.787195116710247e-04, -2.766666961361983e-04, -2.775631483849621e-04, -2.775631483849621e-04, -2.355930769489709e-03, -2.326155936325914e-03, -1.624213943089691e-03, -1.639251645310494e-03, -2.345189621909301e-03, -2.345189621909301e-03, -3.960154996545132e-03, -4.321891409453982e-03, -2.589762119739679e-03, -1.210365121099308e-03, -4.071359626015101e-03, -4.071359626015101e-03, -2.971904688411089e-06, -3.390279689868400e-06, -6.932569228204634e-05, -2.686526026535870e-07, -3.421491950835473e-06, -3.421491950835474e-06, -2.270364236199089e-04, -2.280904403504870e-04, -2.271411325631901e-04, -2.279606871468378e-04, -2.275802814273013e-04, -2.275802814273013e-04, -2.619657172859747e-04, -2.670105022861876e-04, -2.519477275473951e-04, -2.557893556152959e-04, -2.791220374975574e-04, -2.791220374975574e-04, -6.561847842347336e-03, -1.240282339943801e-02, -6.733639062756232e-03, -1.215298748333417e-02, -6.923214536847441e-03, -6.923214536847441e-03, -4.299701434995194e-04, -1.456751740288871e-03, -4.869407601727779e-04, -1.934623506917164e-03, -8.147950457462470e-04, -8.147950457462470e-04, -2.575035527888732e-07, -3.760377772443233e-07, -4.770189010703516e-07, -1.807137943766328e-04, -4.274533259165149e-07, -4.274533259165147e-07, -1.720174471106644e-02, -1.414907958778020e-02, -1.514525674058078e-02, -1.598746071056006e-02, -1.555812503198624e-02, -1.555812503198624e-02, -1.879262873722554e-02, -4.786032157844813e-03, -6.887839697489260e-03, -9.933193977300818e-03, -8.256756186165932e-03, -8.256756186165934e-03, -1.114619740287045e-02, -2.039219582609204e-03, -3.148116437615883e-03, -6.753927378774448e-03, -4.714931968855889e-03, -4.714931968855887e-03, -5.187298369985341e-03, -4.672243692400858e-05, -1.115648744901561e-04, -1.094343744547512e-02, -4.028470824938104e-04, -4.028470824938113e-04, -3.464829181194732e-06, -1.603449443640014e-08, -8.721126006235346e-08, -4.396724529975842e-04, -3.942186910684218e-07, -3.942186910684204e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
