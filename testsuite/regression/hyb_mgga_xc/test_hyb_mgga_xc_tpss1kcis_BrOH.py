
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_tpss1kcis_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_tpss1kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.748054823904345e+01, -1.748059407411411e+01, -1.748082921893757e+01, -1.748007842693657e+01, -1.748057214964800e+01, -1.748057214964800e+01, -2.925010496939825e+00, -2.925007998629498e+00, -2.925036671552956e+00, -2.925252204650807e+00, -2.925023325075141e+00, -3.252330071695680e+00, -6.147359957251339e-01, -6.726452995817996e-01, -6.662659771333980e-01, -6.662123421443980e-01, -6.728080169437016e-01, -6.728080169437016e-01, -1.950653654698198e-01, -1.965778723219501e-01, -7.321283051570252e-01, -1.669843922147658e-01, -1.955307248934514e-01, -1.955307248934514e-01, -1.495572839485565e-02, -1.566877720185096e-02, -6.286903537844719e-02, -7.136155431597789e-03, -1.550743080469093e-02, -1.550743080469093e-02, -4.812946352756162e+00, -4.813870764049143e+00, -4.813044265732524e+00, -4.354331940810188e+00, -4.813415675706519e+00, -4.813415675706519e+00, -1.682359957169742e+00, -1.692527357454179e+00, -1.678308918029616e+00, -1.686206169172675e+00, -1.694502468829721e+00, -1.865981921875435e+00, -5.584612321300189e-01, -6.062064306846052e-01, -5.315647768810313e-01, -5.529769027731604e-01, -5.792902827417330e-01, -5.514044179646667e-01, -1.089948848378309e-01, -2.102177396169488e-01, -1.077466633152432e-01, -1.791984444487551e+00, -1.442995004087728e-01, -1.442995004087728e-01, -7.004582960702058e-03, -7.872284491274448e-03, -5.910903538395929e-03, -7.159361156925698e-02, -7.275804894075708e-03, -7.173447846862025e-03, -5.803212446853460e-01, -5.765895566989503e-01, -5.514930488040668e-01, -5.789568105334988e-01, -5.784397595307101e-01, -5.784397595307101e-01, -5.621034826993727e-01, -4.863440894411705e-01, -5.075007551520367e-01, -5.280951555111941e-01, -5.175106672459443e-01, -4.952639664597084e-01, -6.339628687006643e-01, -2.341986608997672e-01, -2.826658791417881e-01, -3.368364277565924e-01, -3.111765544246474e-01, -3.111765544246474e-01, -4.245695254400879e-01, -5.845163381818799e-02, -7.792470451632046e-02, -3.267079781211261e-01, -9.058802478478144e-02, -1.081698558354760e-01, -1.748548209518599e-02, -2.150314232901130e-03, -4.091772547579501e-03, -1.033649161294603e-01, -6.097039949199456e-03, -6.097039949199448e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_tpss1kcis_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_tpss1kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.349311576753369e+01, -2.349317645101102e+01, -2.349348853816928e+01, -2.349249439272374e+01, -2.349314741888200e+01, -2.349314741888200e+01, -3.811392020098068e+00, -3.811426387769981e+00, -3.812600857924557e+00, -3.812441616180833e+00, -3.811419254618220e+00, -3.956844814414417e+00, -7.879355882727213e-01, -6.997035821799764e-01, -6.656271216644470e-01, -6.774241227149966e-01, -7.006097945390813e-01, -7.006097945390813e-01, -2.054266828741714e-01, -2.094096728794289e-01, -9.467956185019322e-01, -1.710849493781961e-01, -2.065835278701234e-01, -2.065835278701234e-01, -2.023264751749448e-02, -2.120398245670080e-02, -8.191586558818389e-02, -9.564533874815394e-03, -2.099019220807515e-02, -2.099019220807515e-02, -5.976019263266240e+00, -5.975677643873849e+00, -5.975976477877316e+00, -5.821644148976591e+00, -5.975855834113964e+00, -5.975855834113964e+00, -2.169680701812028e+00, -2.185317560115058e+00, -2.163462814707453e+00, -2.175495627590695e+00, -2.188568809147778e+00, -2.224250322233154e+00, -7.209270446819842e-01, -7.795508659186201e-01, -6.778243900856173e-01, -7.160670509392414e-01, -7.496320287028999e-01, -7.263246396493612e-01, -1.410117465704286e-01, -2.023841817796878e-01, -1.393802574326543e-01, -2.281189557404440e+00, -1.512642311429069e-01, -1.512642311429069e-01, -9.197287064966208e-03, -1.056294751521848e-02, -7.957262724709136e-03, -9.274595447891196e-02, -9.551290387457712e-03, -9.626740117868130e-03, -7.187034725113438e-01, -7.212683210571935e-01, -7.242386137064946e-01, -7.196787367479536e-01, -7.200419850015860e-01, -7.200419850015860e-01, -6.991970919710884e-01, -6.280701371602726e-01, -6.583928258723502e-01, -6.786038348922229e-01, -6.692537208895244e-01, -6.533588043298076e-01, -8.178398000453075e-01, -2.998141234338426e-01, -3.096908554753937e-01, -4.300956793312074e-01, -3.676966826287711e-01, -3.676966826287711e-01, -5.477807768169264e-01, -7.706815182280524e-02, -9.965992116783909e-02, -4.155864250272316e-01, -1.172235278041628e-01, -1.261938284921046e-01, -2.355537037134144e-02, -2.872989891819194e-03, -5.484301338314601e-03, -1.208904647741542e-01, -8.183670371259210e-03, -8.183670371259198e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_tpss1kcis_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_tpss1kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [3.674100935562552e-09, 3.673990745918795e-09, 3.673478114824356e-09, 3.675275423232661e-09, 3.674043097502006e-09, 3.674043097502006e-09, 1.122837104617489e-05, 1.122764413260717e-05, 1.120408122220777e-05, 1.120949175741342e-05, 1.122794745362561e-05, -3.861358748932930e-06, 1.143668561093754e-02, -2.425793447570580e-03, -2.689087635858124e-03, -2.618346957805748e-03, -2.418980871353683e-03, -2.418980871353683e-03, -3.226235180362066e-01, -3.031053705242790e-01, 5.474172356856126e-03, -4.798582712514798e-01, -3.168257354672588e-01, -3.168257354672588e-01, 1.744204887948401e+01, 1.627644341962561e+01, -1.771575470727440e-01, 1.520991757081784e+01, 1.723611738455650e+01, 1.723611738455649e+01, -4.761774545088581e-06, -4.811163554534520e-06, -4.767221067180819e-06, 1.330190972492533e-06, -4.786438342804637e-06, -4.786438342804637e-06, 1.279772124566303e-04, 1.235400651769971e-04, 1.298405951096775e-04, 1.263076725209273e-04, 1.226237754289877e-04, -3.384678115018732e-05, -3.712141450071598e-03, -7.594800224389453e-03, -3.637256563028425e-03, -4.730408117975317e-03, -4.295251213607309e-03, 1.763838775666532e-02, 2.781428665539990e+01, -2.771125744688910e-01, 2.932026747415652e+01, -6.965446910523119e-05, -7.568095140706219e-01, -7.568095140706219e-01, 3.745392609384051e+06, 1.716069026542103e+01, 9.166139164540263e+01, 1.805542044318103e+02, 3.197396687388302e+06, 2.343488732375804e+01, -1.088329139857294e-01, -4.900541397671639e-02, 3.672379474323229e-02, -7.704623460509971e-02, -6.891874123005162e-02, -6.891874123005162e-02, -8.643786050500410e-02, -5.368232043847334e-03, -7.999801419361725e-03, -1.568813931509730e-02, -1.080680404813459e-02, 3.171654812444957e-02, -4.577274660730934e-03, 8.869724857144905e-01, -6.691488750031736e-02, 1.643695045741584e-01, -3.422425983735197e-02, -3.422425983735201e-02, 5.639913609867190e-02, 9.299526831199145e-02, -4.961012812759350e-01, -1.677095159901046e-02, 6.372584621975204e+01, -9.570932644129437e-01, 5.671855187948703e+00, 7.605316383223136e+01, 7.599854840094292e+01, -1.124194971640353e+00, 3.935548390411896e+01, 3.935548390411897e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_tpss1kcis_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_tpss1kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.351134824060913e-04, 1.351162332697026e-04, 1.351279775735391e-04, 1.350832523241025e-04, 1.351149334629481e-04, 1.351149334629481e-04, -4.607262883333793e-04, -4.605465880502514e-04, -4.550418239538317e-04, -4.571559524742181e-04, -4.606742315259568e-04, 1.334068812625482e-03, -1.633791305674515e-03, 2.991289043176874e-04, 1.098401065266567e-04, 1.809742927817654e-04, 3.049870165447901e-04, 3.049870165447901e-04, -5.398919644611918e-03, -5.531509085344403e-03, -6.034249112446317e-04, -1.793563222407567e-03, -5.435241599926076e-03, -5.435241599926076e-03, -6.522095560843604e-05, -7.100826576665957e-05, -4.190107448885443e-04, -5.340458837882892e-06, -7.271866933625820e-05, -7.271866933625812e-05, 1.088617439699681e-02, 1.100340661222411e-02, 1.089907180855553e-02, 6.809797758520879e-04, 1.094475932517812e-02, 1.094475932517812e-02, -9.796967836525027e-04, -9.635407874934034e-04, -9.838476251854045e-04, -9.748084871706522e-04, -9.583480508960335e-04, 1.506805524995332e-03, 1.106579775658366e-02, 3.376554723125270e-02, 6.319440717328908e-03, 1.525678246718988e-02, 1.614368765195834e-02, 2.217552109249298e-03, -1.357970117758867e-04, -2.650451229950236e-03, -1.548599764895096e-04, 7.754777677395575e-03, -2.070745101903855e-03, -2.070745101903855e-03, -2.630074776844999e-08, -8.187704636883027e-06, -1.804378451062986e-05, -3.068188657267161e-05, -3.029164747471775e-08, -8.374358553861640e-06, 3.767186177374946e-01, 1.699673419857123e-01, 6.670587004112404e-03, 2.667788846503776e-01, 2.386930104839705e-01, 2.386930104839705e-01, 2.730912514818602e-01, 9.700262614934627e-03, 2.096363000825565e-02, 4.543509023624525e-02, 3.019674290988344e-02, 4.754587108000066e-03, 2.339760974476922e-02, -2.703343758511394e-03, -2.294347147361521e-03, -5.433200894141533e-03, -1.199553388339898e-03, -1.199553388339898e-03, -3.114859564795223e-03, -3.368762418384339e-04, -5.243462533013305e-04, 2.179916041670454e-03, -1.211394351366293e-04, -1.352905579588476e-03, -3.508189777569762e-05, -6.802427940834996e-07, -4.816866340343564e-06, -1.469622936246201e-03, -8.501574720885710e-06, -8.501574720885678e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
