
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_tpss1kcis_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_tpss1kcis", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.748100556341833e+01, -1.748105822751208e+01, -1.748130556695600e+01, -1.853655990635782e+01, -1.851857333535514e+01, -1.960823405113389e+01, -3.068803723743494e+00, -3.252573604781608e+00, -3.252133146255764e+00, -3.252602068736634e+00, -3.252218705540833e+00, -3.068635939888055e+00, -6.179680082388164e-01, -6.425324473570462e-01, -6.678506907847230e-01, -6.256019809962690e-01, -6.074676342863091e-01, -6.691089959391188e-01, -1.794913691959358e-01, -1.866375851159713e-01, -7.647425078101445e-01, -1.654161423494251e-01, -1.813980302385263e-01, -1.752837357550210e-01, -8.877128756955699e-03, -7.638222672961844e-03, -4.255844057056154e-02, -5.096351928954858e-03, -7.083418462631023e-03, -7.083418462631023e-03, -4.828588379214640e+00, -4.815991323132538e+00, -4.815084866079387e+00, -4.815927496785521e+00, -4.585897611005483e+00, -4.575719277029486e+00, -1.868844999860199e+00, -1.878750059962786e+00, -1.849471511420091e+00, -1.857908381265831e+00, -1.775680946144012e+00, -1.877704781988152e+00, -5.463748140968807e-01, -6.129692476418517e-01, -5.250031767016828e-01, -5.438336482651159e-01, -5.568600729480645e-01, -5.738075023094023e-01, -1.252529626494181e-01, -1.851174294090136e-01, -1.193466407305740e-01, -1.794046876087618e+00, -1.428087014393688e-01, -1.428087014393688e-01, -3.156445152230515e-03, -4.967918458383412e-03, -3.832742953920759e-03, -6.680573557852547e-02, -4.794193916280598e-03, -4.794193916280599e-03, -5.716116019314197e-01, -5.676372068395283e-01, -5.432992149010900e-01, -5.566352894149288e-01, -5.438573017545036e-01, -5.559730741250088e-01, -5.591756300007901e-01, -4.677268768694376e-01, -4.841907867644451e-01, -5.211808831942546e-01, -5.094215939509290e-01, -4.954150050695478e-01, -6.257188954978687e-01, -2.477494860126801e-01, -2.623891669097942e-01, -3.340244267211599e-01, -3.120593350297836e-01, -2.948648784472346e-01, -4.414640848073977e-01, -4.231926812915508e-02, -6.623511624485258e-02, -3.362761381370457e-01, -1.008800596104783e-01, -1.008800596104783e-01, -1.215160120477296e-02, -1.326082094003503e-03, -2.974010287410830e-03, -7.938600460842724e-02, -4.390482343908348e-03, -3.049257508639977e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_tpss1kcis_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_tpss1kcis", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.349372462387898e+01, -2.349373149443676e+01, -2.349380520489886e+01, -2.349379036032555e+01, -2.349407751395020e+01, -2.349417447527443e+01, -2.349627050028754e+01, -2.452287277892865e+01, -2.348947259731157e+01, -2.451580465210620e+01, -2.449659623862733e+01, -2.449623678993473e+01, -3.975841192404096e+00, -3.805910109772119e+00, -3.956669278066568e+00, -3.956467987773296e+00, -3.959489913158330e+00, -3.959988875971057e+00, -3.958786527256670e+00, -3.958842425053775e+00, -3.955783259680775e+00, -3.961222493514275e+00, -3.805499658420008e+00, -3.980553899925931e+00, -7.909498357062041e-01, -7.923564924942881e-01, -7.926132645635274e-01, -7.295115467879004e-01, -6.756117113160225e-01, -6.698440195924935e-01, -6.959575184806760e-01, -7.747446893651746e-01, -7.920863587347498e-01, -7.642955100821027e-01, -7.150472054742681e-01, -6.520218195147803e-01, -2.286150351823935e-01, -1.995722621557755e-01, -2.351730450718639e-01, -2.067039508510050e-01, -7.856797714648320e-01, -9.265019677237496e-01, -1.716942384152839e-01, -1.659154015973861e-01, -1.737654120899622e-01, -1.707104106719875e-01, -1.740731623627333e-01, -1.364126139409600e-01, -1.165057320325504e-02, -1.233306367231977e-02, -7.147803049721867e-03, -1.298494328298801e-02, -4.381721320582559e-02, -7.165156844542163e-02, -6.906974857520959e-03, -6.795411456510842e-03, -1.012691154906458e-02, -5.818010266631787e-03, -1.012691154906458e-02, -5.818010266631787e-03, -5.982536512909704e+00, -5.981178629810056e+00, -5.978758617524770e+00, -5.977410028794044e+00, -5.979083612728472e+00, -5.977734114828779e+00, -5.978777697089241e+00, -5.977418442333033e+00, -5.831336972225880e+00, -5.981091582378657e+00, -5.982328728784011e+00, -5.829893876948940e+00, -2.209807842855709e+00, -2.210981925534245e+00, -2.238703534184883e+00, -2.239003063815156e+00, -2.168046456249478e+00, -2.176126272676176e+00, -2.194034961380766e+00, -2.202236895808498e+00, -2.252030156443637e+00, -2.186732351469592e+00, -2.244199127890069e+00, -2.229050921582375e+00, -7.324717138924771e-01, -7.099743371251235e-01, -7.868262394954491e-01, -7.863358794307465e-01, -6.519666491598428e-01, -6.786409584862214e-01, -6.935496425587949e-01, -7.121599623506153e-01, -7.574341254992628e-01, -7.080775477050039e-01, -7.557547857110587e-01, -7.265795755290800e-01, -1.462335502463122e-01, -1.467883075982139e-01, -2.286950157708286e-01, -2.057987881944672e-01, -1.437348417237405e-01, -1.454289295146884e-01, -2.284278982727243e+00, -2.283351256951899e+00, -1.608351028011193e-01, -1.522676762981937e-01, -1.608351028011193e-01, -1.522676762981938e-01, -2.978788746657249e-03, -5.353940936391440e-03, -6.597108641416587e-03, -6.695949878867105e-03, -5.042939297699521e-03, -5.321624284513453e-03, -1.074400855315069e-01, -7.399436388553660e-02, -5.140346445450468e-03, -6.957152641110200e-03, -5.140346445450469e-03, -6.957152641110203e-03, -7.080576565886558e-01, -7.097939400636554e-01, -7.109130781615163e-01, -7.126179604974803e-01, -7.126847770855236e-01, -7.145724111438555e-01, -7.172447892112960e-01, -7.099863297427302e-01, -7.132063032625865e-01, -7.150873954119845e-01, -7.168644170958027e-01, -7.104443020264257e-01, -6.901642363746839e-01, -6.915397600334168e-01, -6.155698940355555e-01, -6.011680108784246e-01, -6.474463572419945e-01, -6.341094278506971e-01, -6.696636522081874e-01, -6.712238360090739e-01, -6.588984126470863e-01, -6.605562151123754e-01, -6.597116764325406e-01, -6.489159687806688e-01, -8.262846009310809e-01, -8.091940080219642e-01, -2.438724931294552e-01, -2.445830202743408e-01, -3.342900893303299e-01, -2.981132184357813e-01, -4.284316142598130e-01, -4.260483869470615e-01, -3.576184898659213e-01, -3.579211511491054e-01, -3.575927255928059e-01, -3.780527122700260e-01, -5.550817806766527e-01, -5.598838185891331e-01, -5.493067459709826e-02, -5.497304932931174e-02, -8.544265082140708e-02, -8.743459213831732e-02, -4.191593595244695e-01, -4.288782574833566e-01, -1.214342489768476e-01, -1.212378475808580e-01, -1.214342489768476e-01, -1.212378475808579e-01, -1.590419541001184e-02, -1.589992177996976e-02, -1.768108442696854e-03, -1.772132791278594e-03, -3.926661446511624e-03, -3.919034939860263e-03, -1.025957302775597e-01, -1.029662309320171e-01, -4.804203385761209e-03, -6.338894878830485e-03, -5.103246576891918e-03, -3.887266333605132e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_tpss1kcis_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_tpss1kcis", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.778978480161192e-09, 1.825319810437199e-08, -1.780349780630131e-09, -1.779136354943043e-09, 1.825299218097690e-08, -1.780492402576476e-09, -1.779701844314296e-09, 1.825201317285359e-08, -1.781118745253064e-09, -1.029802743340410e-08, 1.214152706489099e-09, -2.040821187522498e-08, -1.054363353861558e-08, 7.239735397978916e-10, -2.065773224286173e-08, -2.083142843380563e-08, 3.696281577631618e-10, -2.083490493387909e-08, -7.667274617754280e-06, 1.616047005052497e-06, -5.553107530846339e-06, -8.097709142684028e-06, 7.571461025073887e-07, -8.096965862049100e-06, -8.114236028549418e-06, 7.632810785428938e-07, -8.117451250244831e-06, -8.105605969787787e-06, 7.604620562703304e-07, -8.105161374080158e-06, -8.097939273379168e-06, 7.611491335213282e-07, -8.122157118045392e-06, -5.547911608009667e-06, 1.628905514699845e-06, -7.688278927456132e-06, 1.064594177658906e-02, 2.326548288357911e-02, 1.064439106399719e-02, 5.715357570690153e-04, 3.118016491794328e-03, -3.931024130151336e-03, -5.581044955610335e-03, 7.738511773248914e-04, -5.718464178393148e-03, -5.063222012726730e-03, 1.728653294207948e-03, -1.418741636491022e-04, 1.169748503487248e-02, 2.534783694716880e-02, 1.163198409182414e-02, -4.921410358747172e-03, 7.946270039869112e-04, -6.180021264272706e-03, 4.399360512651136e-01, 5.356877752098084e-01, -7.483758820611867e-01, 6.311164848509938e-01, 9.173705824366913e-01, -5.091261186392247e-01, -2.248116008993700e-03, 4.849940151278515e-04, -2.506972383349085e-04, -1.083333171668037e+00, 2.865623203877963e-01, -1.250381638020632e+00, -8.612232276650587e-01, 1.295162113851324e-01, -1.123318097126822e+00, -8.574604379867588e-01, 1.370417907417327e-01, -4.749923356944012e-01, 6.630151997370280e+01, 1.408648043640663e+02, 6.628527613973402e+01, -9.229169417898373e+04, 9.672378983792134e+01, 4.402458509941481e+01, -7.699754097562359e+01, 7.450002609065539e+00, 1.631194272911066e+00, 9.060871838416163e+01, 1.872728268388463e+02, 9.057779843570634e+01, 3.928885218353333e+00, 1.570739123573291e+01, 1.150127251692173e+00, 3.928885218353331e+00, 1.570739123573291e+01, 1.150127251692156e+00, -9.607655915493762e-06, 7.406163965005897e-07, -9.617842267374027e-06, -9.850675587355961e-06, 4.667569006548299e-07, -9.857394686625190e-06, -9.753144580864214e-06, 4.644651333927464e-07, -9.760548172839276e-06, -9.843028360018231e-06, 4.666124921572787e-07, -9.852629259898001e-06, -2.369230586596734e-06, 1.109369460429406e-06, -9.484631281801211e-06, -9.660078471365101e-06, 7.417036762561486e-07, -2.555548232396872e-06, -6.914193647836968e-05, 1.982815503278142e-05, -6.919421840860471e-05, -6.722957401218219e-05, 1.993361004977396e-05, -6.734728811481945e-05, -7.611304932149651e-05, 9.276743163272719e-06, -7.565686182818672e-05, -7.428666652367249e-05, 9.407856301063217e-06, -7.385976516568302e-05, -5.934303549599044e-05, 3.510816478410754e-05, -2.715235925680457e-05, -6.692084644079428e-05, 1.995254289449986e-05, -6.801728756488682e-05, -8.433374794829059e-03, 8.210163329218470e-03, 2.884273070573906e-03, -1.878184501638433e-02, 5.576133340335013e-03, -2.003906185748544e-02, -1.076117427042576e-02, 5.454389197825840e-03, -1.003944320862694e-02, -1.164666809212528e-02, 6.199806938241156e-03, -1.218094935970170e-02, -9.676581277491117e-03, 7.627894787121652e-03, 2.720587316850921e-03, -1.091086848429357e-02, 5.159320373516752e-03, -1.108328583358240e-02, -1.231502704559097e+00, 4.473204793290813e-01, -1.221012362034563e+00, 2.293299322217794e-01, 3.367947088993164e-01, -5.599797415141401e-01, -7.910731121591553e-01, 1.447219470372827e+00, -8.500644972274743e-01, -1.520591511295350e-04, 2.559984198517193e-05, -1.525243961712667e-04, -1.104109712706470e+00, 1.321952419830507e+00, -1.574091558726299e+00, -1.104109712706470e+00, 1.321952419830508e+00, -1.574091558726299e+00, -2.725054879199557e+06, 1.304543798536627e+02, 6.319821288570877e+01, 1.854230188788414e+01, 4.282950125950092e+01, 1.888180640340051e+01, 8.444363827686458e+02, 1.729804248087280e+03, 8.424557298574182e+02, -3.318617976403582e-01, 3.420508879608914e+00, -5.447533851550572e+00, 2.082218076466430e+02, 4.242308733134032e+02, 1.998224988828611e+02, 2.082218076466425e+02, 4.242308733134022e+02, 1.998224988828606e+02, -2.134251258923689e-01, 1.870926682004660e-02, -2.172701434163867e-01, -9.735021502665037e-02, 1.380918447773287e-02, -9.851916821976422e-02, 5.445343264735058e-02, 3.987362879293782e-02, 5.474234510800038e-02, 5.418108614200381e-02, 2.213228705645074e-02, -1.520103414266308e-01, 5.828154192060273e-02, 3.973904711945472e-02, 5.855592199778920e-02, 4.908394358841307e-02, 2.134385045507546e-02, -1.351912983704289e-01, -2.008558700161670e-01, 2.638950310111752e-02, -2.052501173888827e-01, -8.338322156451833e-03, 2.403199373134608e-02, 1.086860578527458e-02, -1.686056473283809e-02, 1.648848183352640e-02, 1.013345538643156e-02, -3.723022351377539e-02, 1.208045604086899e-02, -3.720599029154822e-02, -2.592708692913490e-02, 1.114544906669407e-02, -2.602302039581081e-02, -2.298111525455358e-02, 1.703739241585671e-02, 1.342218832591263e-02, -9.136233309838298e-03, 8.636935990687903e-03, 4.859209997452926e-03, -3.147146617845745e-01, 1.824238410543680e-01, -3.081546136300735e-01, 7.443029057333536e-02, 1.097366643483841e-01, -1.623269793353636e-01, 3.328563977693436e-02, 5.282328456537712e-02, -4.203523836427894e-02, -8.551537947605437e-02, 8.116175333270492e-02, -8.552847602737994e-02, -8.567150236562752e-02, 8.084950755355912e-02, 5.447469754166544e-02, -1.950005266247856e-02, 1.150187247377807e-02, -1.908260363759903e-02, 1.774913007803732e+03, 3.724081992666042e+03, 1.777267815812494e+03, -1.026911313933896e+00, 1.494473695590585e+00, -1.090413161468264e+00, -4.111435059244709e-02, 7.777802897390242e-02, -3.875328896653280e-02, -1.889972210586596e+00, 1.045767700390934e+00, -2.391012748872483e+00, -1.889972210586596e+00, 1.045767700390929e+00, -2.391012748872487e+00, 3.317371181737699e+06, 6.687788564792499e+06, 3.320914888636670e+06, 9.580482772571310e+01, 1.982141054762614e+02, 9.581930245606912e+01, 1.244513193174665e+13, 2.489028628770615e+13, 1.244513438502433e+13, 1.131586963144118e+02, 2.312041581182508e+02, 1.136186610139973e+02, 6.640556583780216e+01, 1.528191375542113e+02, 6.366815074344198e+01, 2.430905639361591e+03, 4.881819284601788e+03, -1.169847683963184e+06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_tpss1kcis_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_tpss1kcis", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.351059334965832e-04, 1.351340489683019e-04, 1.351095986831088e-04, 1.351367049792078e-04, 1.351196986374735e-04, 1.351516227012389e-04, 1.350786142329698e-04, 1.597325621420894e-03, 1.351083075042717e-04, 1.597773868535175e-03, 1.597562933667866e-03, 1.597773868535175e-03, 1.330767163907789e-03, -4.617780155487078e-04, 1.331628001088872e-03, 1.330639639979961e-03, 1.348477124179017e-03, 1.351502405148274e-03, 1.342226699262503e-03, 1.342232921243813e-03, 1.329038643579940e-03, 1.357508981271449e-03, -4.621939351292973e-04, 1.357508981271449e-03, -1.681319554972737e-03, -1.759325110729928e-03, -1.659576242979986e-03, 3.810666467578005e-04, 1.578209663309461e-04, 1.299972638016133e-04, 2.128074304942559e-04, -1.531744804166875e-03, -1.800584030534623e-03, -1.123004333210283e-03, 4.256465310763715e-04, 4.106108171700448e-05, -2.274848134921615e-03, -4.756657161796385e-03, -2.475494827275489e-03, -4.949690820719511e-03, -2.028395681019592e-05, -5.878460796784172e-04, -1.734146528498019e-03, -2.110030479943207e-03, -3.816843201096294e-03, -8.014144498742211e-04, -3.816843201096287e-03, -8.311369515910373e-05, -1.043043660255350e-05, -1.182225218417130e-05, -5.363752263017029e-08, -1.379770767177054e-05, -4.553312836156647e-06, -2.010659044872972e-04, -2.763132461238502e-06, -2.699228434987419e-06, -7.887949265029860e-06, -4.374759010181496e-06, -7.887949265029860e-06, -4.374759010181496e-06, 1.089307122604839e-02, 1.089630794585061e-02, 1.101624614446131e-02, 1.101536827146962e-02, 1.090161882748414e-02, 1.090163689602349e-02, 1.100722765842479e-02, 1.100971634038191e-02, 6.802125623082063e-04, 1.095567488465135e-02, 1.095460957340619e-02, 6.803578617038206e-04, 1.366166991924539e-03, 1.379185180028145e-03, 1.490614527615556e-03, 1.500632826484070e-03, 1.261063566051847e-03, 1.302409917776151e-03, 1.363595406157462e-03, 1.408809568426718e-03, 1.522524423457010e-03, -9.671659579350888e-04, 1.522524423457010e-03, 1.455240051607104e-03, 1.191509881090840e-02, 1.140547012777797e-03, 3.670598606319196e-02, 3.919982168859958e-02, 4.244657316825438e-03, 6.932411570337345e-03, 1.089752407113314e-02, 1.457826784201529e-02, 1.698849102939111e-02, 1.310688844512650e-03, 1.698849102939111e-02, 1.293538512309487e-02, -8.961408092138148e-04, -9.078331785600884e-04, -8.789235403457038e-04, -2.209048829156776e-03, -7.531335542384554e-04, -8.764542693918726e-04, 7.794840105091314e-03, 7.808426585121575e-03, -1.486683466364195e-03, -2.244220775836690e-03, -1.486683466364196e-03, -2.244220775836692e-03, -2.188306894132810e-09, -1.124794149059135e-06, -2.426716680441652e-06, -2.204489440211444e-06, -9.752854036963071e-06, -1.200274759126681e-05, -4.775579069983211e-04, -2.795597506149986e-05, -1.920857543040916e-06, -1.148099801882861e-05, -1.920857543040916e-06, -1.148099801882859e-05, 3.358148061406337e-01, 3.460504039776858e-01, 1.493650118989341e-01, 1.530537755818514e-01, 6.760423196420382e-03, 6.741106801958888e-03, 6.794293018159930e-03, 2.442635398863310e-01, 6.779088763499724e-03, 6.758225086324225e-03, 6.779088763499724e-03, 2.168897836522400e-01, 2.953539901529382e-01, 3.048619930004370e-01, 7.619181080521573e-03, -9.218766173295393e-04, 1.759340562588011e-02, 2.898268307395124e-03, 4.328288705243043e-02, 4.382531802524470e-02, 2.699411749616631e-02, 2.753929905864595e-02, 2.699411749616633e-02, 4.490507902369021e-03, 2.521610500342150e-02, 3.903537424747689e-03, -2.455873099855128e-03, -2.462009091864407e-03, -3.321087913003567e-03, -2.340592713670959e-03, -5.531699772409479e-03, 3.723054885956412e-04, -1.587258028942663e-03, -1.581729962628536e-03, -1.587258028942658e-03, -5.369028712277118e-03, 3.774530914383623e-03, 4.336042563989600e-03, -4.526921923481839e-06, -4.528765311552150e-06, -2.671929158837026e-04, -2.956705184179962e-04, 1.649631138315491e-03, 4.126172455562356e-03, -8.639246212455700e-04, -1.180403997849004e-03, -8.639246212455681e-04, -1.180403997849007e-03, -6.354264455651272e-08, -6.969782417983906e-08, -2.021802976282284e-07, -2.022125162431746e-07, -3.148672134827690e-09, -4.013608359094627e-09, -6.314637181600887e-05, -7.526466527921968e-05, -4.444053744410149e-06, -1.000129553425262e-05, -4.444053744410145e-06, -2.393766920966299e-08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
