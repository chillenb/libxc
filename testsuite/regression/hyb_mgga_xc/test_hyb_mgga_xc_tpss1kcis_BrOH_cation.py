
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_tpss1kcis_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_tpss1kcis", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.949841201970378e+01, -1.949846703779190e+01, -1.949878795301345e+01, -1.949797113847426e+01, -1.949838820388278e+01, -1.949838820388278e+01, -3.052618092241635e+00, -3.052625861320220e+00, -3.053032825478135e+00, -3.054561895228945e+00, -3.053492126358301e+00, -3.053492126358301e+00, -6.164215356986690e-01, -6.160788703493083e-01, -6.094688921775046e-01, -6.150469041759697e-01, -6.157997583909169e-01, -6.157997583909169e-01, -1.896855565904880e-01, -1.909384749717686e-01, -7.047490330691072e-01, -1.612148495378349e-01, -1.799298465529006e-01, -1.799298465529005e-01, -8.831862340305533e-03, -9.303227543611171e-03, -5.123132774270879e-02, -5.084349243012885e-03, -7.090503129982811e-03, -7.090503129982812e-03, -4.812166961365113e+00, -4.813124836755414e+00, -4.812273274637413e+00, -4.813116765589746e+00, -4.812620290576941e+00, -4.812620290576941e+00, -1.838464665350629e+00, -1.851196056878961e+00, -1.833984150367166e+00, -1.845110644767016e+00, -1.847773559706322e+00, -1.847773559706322e+00, -5.523925853849286e-01, -5.821428933262370e-01, -5.076847132914704e-01, -5.146838121734304e-01, -5.611495325564450e-01, -5.611495325564451e-01, -1.239937189472327e-01, -2.025914399806590e-01, -1.160695536160823e-01, -1.648201786994596e+00, -1.379902622302584e-01, -1.379902622302584e-01, -3.924775315449647e-03, -4.971317797543288e-03, -3.815767154995616e-03, -8.105168518633489e-02, -4.784682360094391e-03, -4.784682360094392e-03, -5.520747534096074e-01, -5.584880882824440e-01, -5.574217970716476e-01, -5.557254335746787e-01, -5.566823107419416e-01, -5.566823107419416e-01, -5.299527012790601e-01, -4.761417543337325e-01, -4.969087962588506e-01, -5.167615930962974e-01, -5.067737612825629e-01, -5.067737612825629e-01, -6.066746023583649e-01, -2.404170798819596e-01, -2.728049841402559e-01, -3.383850978573096e-01, -3.018658346234978e-01, -3.018658346234978e-01, -4.372940952634582e-01, -4.899120993290902e-02, -6.619643974738479e-02, -3.254564327556482e-01, -1.002689017517942e-01, -1.002689017517942e-01, -1.246199003014888e-02, -1.327609448807855e-03, -2.793269543289287e-03, -9.491613963136571e-02, -4.395462665001080e-03, -4.395462665001077e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_tpss1kcis_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_tpss1kcis", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.422590896665666e+01, -2.422669084839881e+01, -2.422597195549087e+01, -2.422673699462965e+01, -2.422632685893423e+01, -2.422720010270863e+01, -2.422561344726880e+01, -2.422629668637773e+01, -2.422593683916337e+01, -2.422677298024537e+01, -2.422593683916337e+01, -2.422677298024537e+01, -3.755759891779081e+00, -3.755595046979967e+00, -3.755811638590201e+00, -3.755618694705952e+00, -3.756720269871015e+00, -3.756875852724959e+00, -3.757001068854631e+00, -3.756957183169415e+00, -3.755115567095606e+00, -3.757803667296936e+00, -3.755115567095606e+00, -3.757803667296936e+00, -7.507391627362822e-01, -7.553910631325526e-01, -7.487514926737417e-01, -7.544804675892832e-01, -7.180920609195348e-01, -7.099180707304372e-01, -7.207643964928191e-01, -7.236627077343647e-01, -7.574307140644947e-01, -6.799564650874219e-01, -7.574307140644947e-01, -6.799564650874219e-01, -1.889717032575847e-01, -1.941683559012455e-01, -1.919565680330178e-01, -1.986279476245763e-01, -8.698607744147892e-01, -9.063887700177564e-01, -1.595230924301035e-01, -1.600415315518562e-01, -1.769335404348327e-01, -1.640624156285994e-01, -1.769335404348326e-01, -1.640624156285993e-01, -1.148296335313226e-02, -1.217582950933478e-02, -1.204545837218821e-02, -1.286951870892112e-02, -6.681358015909175e-02, -6.967497023683698e-02, -6.863760359171121e-03, -6.751543851778802e-03, -1.014952598224333e-02, -5.860371166315007e-03, -1.014952598224333e-02, -5.860371166315007e-03, -5.973200549283753e+00, -5.972179603952581e+00, -5.972884963741256e+00, -5.971879587048273e+00, -5.973302227383886e+00, -5.972257315446967e+00, -5.973030529934151e+00, -5.971977788922257e+00, -5.972947911126674e+00, -5.972015248061208e+00, -5.972947911126674e+00, -5.972015248061208e+00, -2.189475162292540e+00, -2.190791013653446e+00, -2.217461182974406e+00, -2.217963464960211e+00, -2.167540043928085e+00, -2.174598519757137e+00, -2.192374115125255e+00, -2.199654159279993e+00, -2.219933115526308e+00, -2.208191103283577e+00, -2.219933115526308e+00, -2.208191103283577e+00, -6.964721972289473e-01, -6.959486563509426e-01, -7.585239109741142e-01, -7.589515109129246e-01, -6.284463837242618e-01, -6.484332360842492e-01, -6.684033315321738e-01, -6.829948225808616e-01, -7.217317034889331e-01, -6.912181859146144e-01, -7.217317034889332e-01, -6.912181859146143e-01, -1.420293655431703e-01, -1.419079036381940e-01, -1.945448998577197e-01, -1.947917175232797e-01, -1.342926373594751e-01, -1.364947349885329e-01, -2.174570450945891e+00, -2.173793989532155e+00, -1.488847393196117e-01, -1.415426823272081e-01, -1.488847393196117e-01, -1.415426823272081e-01, -5.149237644446817e-03, -5.348250039206184e-03, -6.609537060005643e-03, -6.708098374291246e-03, -4.980160652855831e-03, -5.262307195154359e-03, -1.021949204619975e-01, -1.027369736545467e-01, -5.096315268443489e-03, -6.926551268854805e-03, -5.096315268443490e-03, -6.926551268854807e-03, -7.048013652253017e-01, -7.067990271511941e-01, -7.010293335596846e-01, -7.029337083208204e-01, -7.009270182679553e-01, -7.028555760954975e-01, -7.016600037418947e-01, -7.035961444694080e-01, -7.011585576364524e-01, -7.030942497649579e-01, -7.011585576364524e-01, -7.030942497649579e-01, -6.957175547765251e-01, -6.971874306304406e-01, -6.095469099206435e-01, -6.117842175129248e-01, -6.388856294914916e-01, -6.408784835866246e-01, -6.560042779646948e-01, -6.575345937248754e-01, -6.479749141305746e-01, -6.498830217054882e-01, -6.479749141305746e-01, -6.498830217054882e-01, -7.925253747279645e-01, -7.937380376710715e-01, -2.355344567239787e-01, -2.363557275705983e-01, -2.913006020314207e-01, -2.945357766701688e-01, -4.193031601342954e-01, -4.207570205136005e-01, -3.569253127995829e-01, -3.571765967271113e-01, -3.569253127995828e-01, -3.571765967271112e-01, -5.480036880138659e-01, -5.525198549365977e-01, -6.533539904334168e-02, -6.569413988984379e-02, -8.508796807263586e-02, -8.700305381767978e-02, -4.074587451422779e-01, -4.166683137711427e-01, -1.192765075791792e-01, -1.185178780176535e-01, -1.192765075791791e-01, -1.185178780176535e-01, -1.646186685123771e-02, -1.703043385096707e-02, -1.773713029136313e-03, -1.777674735774048e-03, -3.616534219958023e-03, -3.842357853520584e-03, -1.142807324850455e-01, -1.150696121685349e-01, -4.825438234057961e-03, -6.355500183847126e-03, -4.825438234057956e-03, -6.355500183847120e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_tpss1kcis_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_tpss1kcis", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.286126365449237e-08, 3.972783528724853e-10, -2.286159314038773e-08, -2.286205823785195e-08, 3.972855672000201e-10, -2.286216891530043e-08, -2.286310039847906e-08, 3.972956338705542e-10, -2.286408733496650e-08, -2.285418102457612e-08, 3.971887705403350e-10, -2.285268842382840e-08, -2.286183148709488e-08, 3.972478871599759e-10, -2.285612732304071e-08, -2.286183148709488e-08, 3.972478871599759e-10, -2.285612732304071e-08, -2.010790433973721e-05, 1.822334436197774e-06, -2.011087589995488e-05, -2.011237767363945e-05, 1.822656242812998e-06, -2.011437252752221e-05, -2.020619343476720e-05, 1.829906101491355e-06, -2.022448718382122e-05, -2.014259051432468e-05, 1.815701487388886e-06, -2.014781164354766e-05, -2.011028672120411e-05, 1.822512894576209e-06, -2.023015581674739e-05, -2.011028672120411e-05, 1.822512894576209e-06, -2.023015581674739e-05, -7.566880915771450e-03, 2.387647235934390e-03, -7.469363897439902e-03, -7.619510105235107e-03, 2.374549033828667e-03, -7.489509774688320e-03, -8.293234886387488e-03, 2.046970890108928e-03, -8.467078004201338e-03, -8.259913644955628e-03, 1.996240321002670e-03, -8.250311836879307e-03, -7.285517073824977e-03, 2.020601757546980e-03, -8.453982444953448e-03, -7.285517073824977e-03, 2.020601757546980e-03, -8.453982444953448e-03, -1.042674802112946e+00, 2.963821861632172e-01, -8.982425967391325e-01, -1.025023396442301e+00, 2.991477570461392e-01, -8.547820190778888e-01, -2.791649694338665e-03, 1.301574174583510e-03, -2.165268805571599e-03, -1.617097352494589e+00, 3.966898042501257e-01, -1.545424692391554e+00, -8.839440084055969e-01, 2.784247617127029e-01, -2.362825938323480e+00, -8.839440084055964e-01, 2.784247617127029e-01, -2.362825938323482e+00, 1.441695454197628e+01, 3.729886272720442e+01, 1.445911942057382e+01, 1.419641861565155e+01, 3.731140113325480e+01, 1.421897768878481e+01, -8.260468220587340e-01, 3.437924347696589e+00, -8.476852969965378e-01, 2.592033381727281e+01, 5.960111301255585e+01, 2.602583002476875e+01, 1.644079821419109e+01, 4.133319257031602e+01, 9.969729911196728e+00, 1.644079821419112e+01, 4.133319257031611e+01, 9.969729911196739e+00, -9.808473357361822e-06, 4.665936244808322e-07, -9.815049019885393e-06, -9.913111783848443e-06, 4.690225280808046e-07, -9.916201903942038e-06, -9.814364944894301e-06, 4.666900961074775e-07, -9.818569317900992e-06, -9.904093841174264e-06, 4.688342101117538e-07, -9.910467965274543e-06, -9.861809798213279e-06, 4.678302406456950e-07, -9.865653754273330e-06, -9.861809798213279e-06, 4.678302406456950e-07, -9.865653754273330e-06, -8.931139789079717e-05, 1.101918543980785e-05, -8.890194078034472e-05, -8.557586138525499e-05, 1.093370756655216e-05, -8.530782254107709e-05, -8.775409686274932e-05, 1.063323352259435e-05, -8.787311662584767e-05, -8.435169867487119e-05, 1.055966538118364e-05, -8.440389464195554e-05, -8.869944510163792e-05, 1.116538381880432e-05, -8.709223477088925e-05, -8.869944510163792e-05, 1.116538381880432e-05, -8.709223477088925e-05, -2.527021782192160e-02, 7.243521014930513e-03, -2.559580878763860e-02, -2.608953468391350e-02, 1.051978664794307e-02, -2.699864349225817e-02, -3.013827839136674e-02, 9.384554361541285e-03, -2.895665674262959e-02, -1.883802705389035e-02, 1.532284164088927e-02, -2.188602105693248e-02, -2.435677757025366e-02, 7.240599477451246e-03, -2.906219436995004e-02, -2.435677757025366e-02, 7.240599477451246e-03, -2.906219436995004e-02, -1.651829033918780e+00, 5.826010374287748e-01, -1.689434440614908e+00, -7.236302797796383e-01, 1.613601439882683e-01, -7.153913463003743e-01, -1.815279396338753e+00, 6.948993744104164e-01, -1.768135701974132e+00, -2.014568949920868e-04, 7.910104944682452e-05, -2.018321031552708e-04, -1.876708133428570e+00, 6.024715839063024e-01, -2.318159747113680e+00, -1.876708133428570e+00, 6.024715839063024e-01, -2.318159747113680e+00, 4.543278648609616e+01, 1.017713684837507e+02, 4.616499628990154e+01, 3.116247228150230e+01, 7.170783289874230e+01, 3.152068541129904e+01, 2.634466477503985e+02, 5.797687543375405e+02, 2.604984380056968e+02, -2.255175651203799e+00, 1.604068979576885e+00, -2.138091438049718e+00, 8.563369154993362e+01, 1.978211657015150e+02, 8.594842665413576e+01, 8.563369154993345e+01, 1.978211657015146e+02, 8.594842665413560e+01, -1.747055979857326e-01, 2.355036505556557e-02, -1.764591319743750e-01, -1.049400404192280e-01, 1.558199810046993e-02, -1.056758335224073e-01, -1.266629582434916e-01, 1.744659168895767e-02, -1.278393892428701e-01, -1.489372867957343e-01, 1.958326478509264e-02, -1.500466652313948e-01, -1.373690565259202e-01, 1.842839543354407e-02, -1.385140878433752e-01, -1.373690565259202e-01, 1.842839543354407e-02, -1.385140878433751e-01, -4.487156296073866e-02, 3.301504969059918e-02, -4.777841201005706e-02, -1.793911258582731e-02, 1.003375234291979e-02, -1.778725932653737e-02, -2.539855558553025e-02, 1.121646965192402e-02, -2.555682839112674e-02, -4.932393445164867e-02, 1.345399771534375e-02, -4.916754330810586e-02, -3.477341629277282e-02, 1.216229544500835e-02, -3.452544506844792e-02, -3.477341629277282e-02, 1.216229544500835e-02, -3.452544506844792e-02, -1.761096978394798e-02, 8.148157487541663e-03, -1.861226610014243e-02, -3.795526081332993e-01, 9.004046932476630e-02, -3.731392174485347e-01, -2.128826905283409e-01, 6.387132405231849e-02, -2.045637675357249e-01, -9.712662830602412e-02, 4.299180398810154e-02, -9.588173878045958e-02, -1.247710719140897e-01, 5.319379495126957e-02, -1.252523771524427e-01, -1.247710719140896e-01, 5.319379495126958e-02, -1.252523771524428e-01, -3.382449117027091e-02, 1.429777110348806e-02, -3.258397267777838e-02, -6.502622157752462e-01, 3.344300945733585e+00, -6.540127654343162e-01, -1.390685178733093e+00, 1.880882556782996e+00, -1.447657912300930e+00, -1.446378781708259e-01, 6.552783605750760e-02, -1.276253941332007e-01, -2.485912393420977e+00, 1.298163467852013e+00, -3.073409608428116e+00, -2.485912393420982e+00, 1.298163467852009e+00, -3.073409608428118e+00, 7.249875508525218e+00, 2.123039371297008e+01, 7.178987686420882e+00, 6.455278621091029e+02, 1.324578091104037e+03, 6.325979943995505e+02, 1.410373577572930e+02, 3.026655580868376e+02, 1.403765738759170e+02, -2.773101761264839e+00, 1.423316117185628e+00, -2.704419700765729e+00, 1.110710569467669e+02, 2.766448223722097e+02, 1.248693068053134e+02, 1.110710569467674e+02, 2.766448223722106e+02, 1.248693068053138e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_tpss1kcis_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_tpss1kcis", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.594610252732910e-03, 1.595186544790560e-03, 1.594688180163365e-03, 1.595243079018088e-03, 1.594906599394015e-03, 1.595564890575135e-03, 1.594033013307660e-03, 1.594448921788547e-03, 1.594660468030661e-03, 1.594871705052703e-03, 1.594660468030661e-03, 1.594871705052703e-03, 2.259671220879905e-03, 2.255941950836545e-03, 2.260827742411607e-03, 2.256421872114201e-03, 2.280206073925550e-03, 2.282876732064024e-03, 2.285718649259172e-03, 2.282965939820132e-03, 2.257732910759962e-03, 2.300697449635936e-03, 2.257732910759962e-03, 2.300697449635936e-03, 2.765259403191560e-03, 2.737042592237042e-03, 2.782143296458909e-03, 2.734952353169057e-03, 2.756446557295527e-03, 2.797934072450763e-03, 3.106166827622074e-03, 3.185041338288865e-03, 2.469771956850631e-03, 2.446171177325582e-03, 2.469771956850631e-03, 2.446171177325582e-03, -2.754056203990892e-03, -4.038539583717413e-03, -2.530769129660280e-03, -3.908043803325035e-03, 3.868409815781445e-04, 3.290205396373519e-04, -1.383260170974954e-03, -1.830958723278560e-03, -2.249887065323218e-03, -7.017400951469126e-04, -2.249887065323215e-03, -7.017400951469113e-04, -1.042986967224933e-05, -1.182206679631596e-05, -1.187229189215107e-05, -1.379695134374602e-05, -1.716385217984746e-04, -2.006908616399904e-04, -2.762177032391030e-06, -2.698455874560370e-06, -7.886630477443821e-06, -4.371020584795985e-06, -7.886630477443823e-06, -4.371020584795983e-06, 1.086195202983438e-02, 1.086695615926654e-02, 1.098437152442456e-02, 1.098534773175906e-02, 1.087115510035205e-02, 1.087276520435536e-02, 1.097611005233416e-02, 1.098022641208891e-02, 1.092256823207832e-02, 1.092589833927575e-02, 1.092256823207832e-02, 1.092589833927575e-02, 2.090680434003061e-03, 2.084197474479388e-03, 2.137297090945350e-03, 2.130194744860376e-03, 1.847225320032442e-03, 1.911174774321316e-03, 1.878179796195868e-03, 1.942329125771450e-03, 2.307273198767827e-03, 2.134649029636551e-03, 2.307273198767827e-03, 2.134649029636551e-03, 2.062191833556196e-02, 2.105466068657939e-02, 1.759099867088497e-02, 1.836200230221335e-02, 1.290000760462293e-02, 1.634068356413644e-02, 5.577898644112244e-03, 8.893128209041267e-03, 2.425803158111412e-02, 2.160820440040883e-02, 2.425803158111413e-02, 2.160820440040883e-02, -8.791891373281962e-04, -8.859978016477352e-04, -1.805478387297306e-03, -1.779143474896514e-03, -7.352063382689385e-04, -8.602431731178471e-04, 2.478379276676425e-03, 2.478702361687892e-03, -1.441323240693938e-03, -2.099373064466521e-03, -1.441323240693939e-03, -2.099373064466523e-03, -1.130517322533368e-06, -1.123827205089138e-06, -2.425062783498794e-06, -2.202900125336309e-06, -9.746508542331873e-06, -1.199355562126430e-05, -4.687924897582535e-04, -5.374301435825588e-04, -1.917402279027787e-06, -1.147939566494059e-05, -1.917402279027787e-06, -1.147939566494058e-05, 1.507040464668266e-01, 1.541017697402197e-01, 1.205832938523681e-01, 1.232754791471583e-01, 1.380963478091919e-01, 1.414333022002053e-01, 1.512359736164116e-01, 1.546739010148289e-01, 1.451299885738274e-01, 1.485356732327447e-01, 1.451299885738274e-01, 1.485356732327447e-01, 2.194477119762080e-02, 2.340495049094415e-02, 9.284376925926700e-03, 9.537088998208590e-03, 2.041672720151379e-02, 2.101245939919268e-02, 4.495219774320794e-02, 4.537768553165342e-02, 3.026138428619711e-02, 3.065232367955140e-02, 3.026138428619710e-02, 3.065232367955139e-02, 1.261112058138662e-02, 1.362913418718528e-02, -1.873603954231559e-03, -1.849871801648540e-03, -1.988551622030335e-04, -7.514658045835922e-05, 1.139239448319785e-02, 1.154563524663713e-02, 3.790352136891370e-03, 3.884162373782332e-03, 3.790352136891367e-03, 3.884162373782339e-03, 1.136788661143491e-02, 1.161598032602158e-02, -1.743935151798719e-04, -1.732044262727690e-04, -2.661914492282326e-04, -2.945677388549500e-04, 1.720446698736735e-02, 1.867808862577161e-02, -8.529102114564798e-04, -1.163491251277267e-03, -8.529102114564778e-04, -1.163491251277270e-03, -1.028502862795401e-05, -1.088123851562740e-05, -2.020187433660934e-07, -2.019539938158108e-07, -2.317161103951245e-06, -2.776348196333758e-06, -9.063818622700775e-04, -1.041950922971095e-03, -4.434767730852855e-06, -9.999963925821123e-06, -4.434767730852855e-06, -9.999963925821119e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
