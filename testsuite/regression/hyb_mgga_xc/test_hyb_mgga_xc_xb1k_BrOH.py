
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_xb1k_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_xb1k", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-8.316967406475118e+00, -8.316976754200066e+00, -8.317048124810011e+00, -8.316894419209621e+00, -8.316972088681032e+00, -8.316972088681032e+00, -1.428586989968501e+00, -1.428574917941804e+00, -1.428286990838635e+00, -1.428872024292806e+00, -1.428587877839558e+00, -1.428587877839558e+00, -3.114351593073099e-01, -3.112583335969592e-01, -3.074400966215297e-01, -3.087957608396902e-01, -3.113687642574622e-01, -3.113687642574622e-01, -9.727292175290662e-02, -9.800117951972287e-02, -3.801411956999629e-01, -7.964760372538268e-02, -9.748690770972825e-02, -9.748690770972825e-02, -1.854797750188872e-02, -1.877903795029958e-02, -3.848436561649786e-02, -1.668775371076924e-02, -1.859607345234569e-02, -1.859607345234569e-02, -2.037176421456047e+00, -2.036946425316487e+00, -2.037154609507604e+00, -2.036975779275699e+00, -2.037055995175092e+00, -2.037055995175092e+00, -8.675164226826794e-01, -8.714308543947135e-01, -8.676430799725643e-01, -8.706840858223027e-01, -8.700235222464319e-01, -8.700235222464319e-01, -2.589002555404936e-01, -2.745575414943640e-01, -2.492668175550818e-01, -2.568461570669991e-01, -2.661117015392477e-01, -2.661117015392477e-01, -6.626272223047475e-02, -1.037325856014197e-01, -6.484517876430851e-02, -7.774590158328309e-01, -7.115622157350283e-02, -7.115622157350283e-02, -1.637314710362887e-02, -1.682028096677091e-02, -1.286338250264228e-02, -4.735643868327088e-02, -1.527186614238130e-02, -1.527186614238131e-02, -2.528433096114255e-01, -2.534382143873839e-01, -2.532425903476878e-01, -2.530788362171874e-01, -2.531624902971064e-01, -2.531624902971064e-01, -2.463186608400961e-01, -2.292070565681865e-01, -2.342610422877818e-01, -2.388399443179592e-01, -2.365077276963020e-01, -2.365077276963020e-01, -2.888734352388845e-01, -1.234553564232307e-01, -1.397930567014335e-01, -1.679599015653034e-01, -1.525701130734982e-01, -1.525701130734982e-01, -2.104846588671501e-01, -3.742320424265085e-02, -4.494657261323266e-02, -1.578899572812704e-01, -5.566705425205705e-02, -5.566705425205705e-02, -2.041618370680827e-02, -1.195238592201405e-02, -1.370124616091670e-02, -5.305800902600062e-02, -1.369782797697199e-02, -1.369782797697199e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_xb1k_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_xb1k", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-9.981877616315797e+00, -9.981909521971026e+00, -9.982057299407025e+00, -9.981534667408415e+00, -9.981894397589464e+00, -9.981894397589464e+00, -1.692399536235076e+00, -1.692405689679337e+00, -1.692616194845671e+00, -1.692201231183087e+00, -1.692411904916385e+00, -1.692411904916385e+00, -3.750523017197801e-01, -3.744167933944811e-01, -3.569144367262641e-01, -3.578133020411251e-01, -3.748189006474228e-01, -3.748189006474228e-01, -1.083614975665623e-01, -1.101741971101016e-01, -4.829795429546557e-01, -7.870561258039815e-02, -1.089231077205044e-01, -1.089231077205044e-01, -6.891277471376070e-03, -7.143647292346914e-03, -3.236335023795703e-02, -4.512157191563211e-03, -7.070658761056206e-03, -7.070658761056206e-03, -2.510243743891053e+00, -2.511134854941997e+00, -2.510334317761947e+00, -2.511027253162228e+00, -2.510701324029996e+00, -2.510701324029996e+00, -9.366302555971664e-01, -9.431699907859418e-01, -9.327089246143545e-01, -9.377923851427340e-01, -9.461843239858965e-01, -9.461843239858965e-01, -3.201589076068418e-01, -3.446248237266449e-01, -3.090513667441614e-01, -3.207879116545556e-01, -3.302365467794085e-01, -3.302365467794085e-01, -5.936354898496542e-02, -1.050623165851658e-01, -5.842336241677384e-02, -9.766504965063467e-01, -6.653609581718058e-02, -6.653609581718058e-02, -4.397214711008936e-03, -4.718061174009690e-03, -3.577905612840113e-03, -4.222802725955624e-02, -4.290287310526559e-03, -4.290287310526554e-03, -3.265261365713967e-01, -3.250537825949087e-01, -3.256532461098401e-01, -3.260584986136486e-01, -3.258624373809254e-01, -3.258624373809254e-01, -3.163706925009206e-01, -2.731118040204777e-01, -2.869470191514612e-01, -2.995352160731352e-01, -2.932884036705087e-01, -2.932884036705087e-01, -3.610328139532661e-01, -1.308499139164302e-01, -1.561392963512574e-01, -2.033881467987546e-01, -1.777366885515197e-01, -1.777366885515197e-01, -2.523353321042014e-01, -2.970410938126980e-02, -3.960452037478820e-02, -1.964229670921150e-01, -4.970690275961451e-02, -4.970690275961451e-02, -7.932915848648648e-03, -2.426204704190126e-03, -3.247055197594335e-03, -4.752881229677310e-02, -3.763101911859176e-03, -3.763101911859176e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_xb1k_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_xb1k", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.688332788090166e-09, -2.688320647478615e-09, -2.688230579524034e-09, -2.688430326311292e-09, -2.688326682886163e-09, -2.688326682886163e-09, -2.563417125823447e-06, -2.563502024016756e-06, -2.565980787471745e-06, -2.567908374613238e-06, -2.563372370028586e-06, -2.563372370028586e-06, -2.417742276670442e-04, -2.628168597509249e-04, -7.711065912871394e-04, -8.013847608230793e-04, -2.495021721942185e-04, -2.495021721942185e-04, -1.211760837323803e-01, -1.119407675583768e-01, 9.425304281901654e-04, -3.680774536662696e-01, -1.182465657717777e-01, -1.182465657717777e-01, -7.963495271315211e+02, -6.964201721883325e+02, -7.494260678037755e+00, -6.009231466082662e+03, -7.254692685707906e+02, -7.254692685707906e+02, -7.105740339397129e-07, -7.107526939874848e-07, -7.105945905519812e-07, -7.107332477671722e-07, -7.106626382855903e-07, -7.106626382855903e-07, -2.282545741202248e-05, -2.239968856157590e-05, -2.294672437764349e-05, -2.261326189616049e-05, -2.237555742187800e-05, -2.237555742187800e-05, -3.689432953044684e-04, 2.227793940205287e-03, 4.114178633558398e-04, 4.335782603048537e-03, -4.075033075115015e-04, -4.075033075115015e-04, -8.909845081565737e-01, -1.239327324046847e-01, -9.681403495998614e-01, -5.445113506902417e-06, -6.424130067710738e-01, -6.424130067710738e-01, -6.775604091165132e+03, -4.617253903757503e+03, -1.421914801253694e+04, -3.179474911413094e+00, -6.732713601981627e+03, -6.732713601981630e+03, 7.162019400953233e-04, 1.865334683362726e-04, 3.919141625803200e-04, 5.428970207361355e-04, 4.695835619326185e-04, 4.695835619326185e-04, 1.810311973770139e-03, -3.097886442436931e-03, -2.037401873083617e-03, -8.152718431032263e-04, -1.441696307025569e-03, -1.441696307025568e-03, 2.096572647087086e-03, -5.597100124228709e-02, -2.837795284159075e-02, -4.184571453310200e-03, -1.511703069801536e-02, -1.511703069801537e-02, -3.215955707508688e-03, -9.136292994861135e+00, -3.842528717677801e+00, 5.789695401132285e-03, -1.781859357588661e+00, -1.781859357588663e+00, -4.640589839350872e+02, -2.248428016964338e+05, -3.384963818346403e+04, -2.154607233788071e+00, -1.195675286601549e+04, -1.195675286601554e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_xb1k_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_xb1k", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-1.453792881020835e-05, -1.453815844837191e-05, -1.453871124683689e-05, -1.453496057061442e-05, -1.453805385589584e-05, -1.453805385589584e-05, -2.775436576906803e-04, -2.775855508915998e-04, -2.787195116710247e-04, -2.766666961361983e-04, -2.775631483849621e-04, -2.775631483849621e-04, -2.355930769489709e-03, -2.326155936325914e-03, -1.624213943089691e-03, -1.639251645310494e-03, -2.345189621909301e-03, -2.345189621909301e-03, -3.960154996545132e-03, -4.321891409453982e-03, -2.589762119739679e-03, -1.210365121099308e-03, -4.071359626015101e-03, -4.071359626015101e-03, -2.971904688411089e-06, -3.390279689868400e-06, -6.932569228204634e-05, -2.686526026535870e-07, -3.421491950835473e-06, -3.421491950835474e-06, -2.270364236199089e-04, -2.280904403504870e-04, -2.271411325631901e-04, -2.279606871468378e-04, -2.275802814273013e-04, -2.275802814273013e-04, -2.619657172859747e-04, -2.670105022861876e-04, -2.519477275473951e-04, -2.557893556152959e-04, -2.791220374975574e-04, -2.791220374975574e-04, -6.561847842347336e-03, -1.240282339943801e-02, -6.733639062756232e-03, -1.215298748333417e-02, -6.923214536847441e-03, -6.923214536847441e-03, -4.299701434995194e-04, -1.456751740288871e-03, -4.869407601727779e-04, -1.934623506917164e-03, -8.147950457462470e-04, -8.147950457462470e-04, -2.575035527888732e-07, -3.760377772443233e-07, -4.770189010703516e-07, -1.807137943766328e-04, -4.274533259165149e-07, -4.274533259165147e-07, -1.720174471106644e-02, -1.414907958778020e-02, -1.514525674058078e-02, -1.598746071056006e-02, -1.555812503198624e-02, -1.555812503198624e-02, -1.879262873722554e-02, -4.786032157844813e-03, -6.887839697489260e-03, -9.933193977300818e-03, -8.256756186165932e-03, -8.256756186165934e-03, -1.114619740287045e-02, -2.039219582609204e-03, -3.148116437615883e-03, -6.753927378774448e-03, -4.714931968855889e-03, -4.714931968855887e-03, -5.187298369985341e-03, -4.672243692400858e-05, -1.115648744901561e-04, -1.094343744547512e-02, -4.028470824938104e-04, -4.028470824938113e-04, -3.464829181194732e-06, -1.603449443640014e-08, -8.721126006235346e-08, -4.396724529975842e-04, -3.942186910684218e-07, -3.942186910684204e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
