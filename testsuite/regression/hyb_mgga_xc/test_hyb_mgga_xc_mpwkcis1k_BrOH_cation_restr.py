
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_mpwkcis1k_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_mpwkcis1k", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.248337721182871e+01, -1.248339345984215e+01, -1.248350511695614e+01, -1.248326251945165e+01, -1.248338403028546e+01, -1.248338403028546e+01, -2.112201498462090e+00, -2.112181767192512e+00, -2.111768876307477e+00, -2.112798375626543e+00, -2.112189263135745e+00, -2.112189263135745e+00, -4.482406198617257e-01, -4.480787008963506e-01, -4.451787546490604e-01, -4.479414499323696e-01, -4.470407704753558e-01, -4.470407704753558e-01, -1.397604308341859e-01, -1.406870523775194e-01, -5.169846925431494e-01, -1.195346018977889e-01, -1.269262690427517e-01, -1.269262690427518e-01, -5.441517313365906e-04, -6.405398329029767e-04, -3.381257544110188e-02, -1.190657876649700e-04, -2.443733783763465e-04, -2.443733783763464e-04, -3.034592199345508e+00, -3.034252800773758e+00, -3.034579259763079e+00, -3.034279674461726e+00, -3.034418592580264e+00, -3.034418592580264e+00, -1.282101511269219e+00, -1.288081876642694e+00, -1.281972287716370e+00, -1.287235268159458e+00, -1.285480993066051e+00, -1.285480993066051e+00, -3.792945147819977e-01, -4.058354675351490e-01, -3.565704091742639e-01, -3.659367566601115e-01, -3.835716135314999e-01, -3.835716135314999e-01, -9.601577957684489e-02, -1.491915630791488e-01, -9.055152366962263e-02, -1.144017489220436e+00, -1.036486499112869e-01, -1.036486499112869e-01, -6.789815102914047e-05, -1.208365562319719e-04, -1.342990786686713e-04, -6.458042334820972e-02, -1.566938143942747e-04, -1.566938143942748e-04, -3.699251786010759e-01, -3.644498836787873e-01, -3.654186757815151e-01, -3.667960703414240e-01, -3.660225334685757e-01, -3.660225334685757e-01, -3.696595493542796e-01, -3.275517446474011e-01, -3.345092939679148e-01, -3.420507310908963e-01, -3.380496336236323e-01, -3.380496336236323e-01, -4.249115906350608e-01, -1.766113711280339e-01, -1.996938520583156e-01, -2.415354543266788e-01, -2.183171501197387e-01, -2.183171501197387e-01, -3.056667802548351e-01, -3.069731593026051e-02, -4.995537149877324e-02, -2.295477974277389e-01, -7.867861879827422e-02, -7.867861879827422e-02, -1.260035532565007e-03, -8.062569733586055e-06, -3.831071915653877e-05, -7.503301508253860e-02, -1.413110616576850e-04, -1.413110616576850e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_mpwkcis1k_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_mpwkcis1k", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.499787435057909e+01, -1.499793068602081e+01, -1.499816897663343e+01, -1.499733101001707e+01, -1.499777181434140e+01, -1.499777181434140e+01, -2.500703305880206e+00, -2.500728524364065e+00, -2.501360670482678e+00, -2.500607798016032e+00, -2.500738354707687e+00, -2.500738354707687e+00, -5.220300925377757e-01, -5.211549953562205e-01, -4.998520668616407e-01, -5.035779525824949e-01, -5.031662132520688e-01, -5.031662132520688e-01, -1.436207677329608e-01, -1.459668608244451e-01, -6.068643455873044e-01, -1.135415421067304e-01, -1.246158100980892e-01, -1.246158100980891e-01, -2.009234245922724e-03, -2.362934980226628e-03, -7.772619348148214e-02, -4.400257702447889e-04, -9.037135734304911e-04, -9.037135734304932e-04, -3.764213380374891e+00, -3.765761581409787e+00, -3.764278796068269e+00, -3.765645712601192e+00, -3.765000957130934e+00, -3.765000957130934e+00, -1.374463308805322e+00, -1.385177612332233e+00, -1.363862733083528e+00, -1.373257426124028e+00, -1.385589026151463e+00, -1.385589026151463e+00, -4.711449645943805e-01, -5.303221520544584e-01, -4.391409901559551e-01, -4.737443196723669e-01, -4.800479586884388e-01, -4.800479586884388e-01, -9.487388930100155e-02, -1.430049309612490e-01, -9.231201804882837e-02, -1.481100623490101e+00, -9.736601380634577e-02, -9.736601380634577e-02, -2.504278495249370e-04, -4.463150896545627e-04, -4.971810767423788e-04, -8.552824248103966e-02, -5.794105813672981e-04, -5.794105813672995e-04, -4.964540324211097e-01, -4.858401904356104e-01, -4.893850948591399e-01, -4.924656424267408e-01, -4.909109906532856e-01, -4.909109906532856e-01, -4.882938055094193e-01, -3.860469748535988e-01, -4.108017217612937e-01, -4.381703343224590e-01, -4.239783999256654e-01, -4.239783999256654e-01, -5.532262347935611e-01, -1.758797437950826e-01, -2.103036879077793e-01, -2.844049762952470e-01, -2.435557691590613e-01, -2.435557691590613e-01, -3.606497018122472e-01, -7.486904789351950e-02, -8.875844942102362e-02, -2.800062314007168e-01, -8.257918661531959e-02, -8.257918661531960e-02, -4.616363398003906e-03, -2.964432255556031e-05, -1.417225977998804e-04, -8.221456853410584e-02, -5.228084831826455e-04, -5.228084831826427e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_mpwkcis1k_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_mpwkcis1k", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.031982106447593e-09, -4.031955775538364e-09, -4.031793567494178e-09, -4.032186091817036e-09, -4.031986840046985e-09, -4.031986840046985e-09, -4.576037766633763e-06, -4.576049861479903e-06, -4.575731670410435e-06, -4.571289879506737e-06, -4.574839725597179e-06, -4.574839725597179e-06, -2.100824945197818e-03, -2.111243371876480e-03, -2.338747168050206e-03, -2.259835942490811e-03, -2.278392171037801e-03, -2.278392171037801e-03, -2.484131165334408e-01, -2.362023866425197e-01, -1.257135953192867e-03, -5.553260426724304e-01, -4.148238074560980e-01, -4.148238074560980e-01, 1.936517507360768e+02, 2.005366650071162e+02, 1.997403669176327e+01, 2.115069182920618e+02, 2.460918996795861e+02, 2.460918996795880e+02, -8.997806017445646e-07, -8.973413340423202e-07, -8.996537884033125e-07, -8.975016361924000e-07, -8.985579081518020e-07, -8.985579081518020e-07, -3.580517405434856e-05, -3.496723550584099e-05, -3.610989050430188e-05, -3.536596666127788e-05, -3.518890860896394e-05, -3.518890860896394e-05, -1.151782864434975e-03, 4.518890798232023e-03, -2.553234130719364e-03, 2.412551214353683e-03, -6.238123084068457e-04, -6.238123084068457e-04, -1.018438140625934e+00, -2.231653642930860e-01, -1.124212946323479e+00, -2.259045437235811e-05, -9.513544974043460e-01, -9.513544974043460e-01, 3.011018446864875e+02, 2.488237252869595e+02, 1.571694937689378e+03, 1.019187557662465e-01, 7.094769386064336e+02, 7.094769386064370e+02, 5.597285964668374e-02, 2.121520325999147e-02, 2.844673456885576e-02, 3.742998027186754e-02, 3.248219760842912e-02, 3.248219760842912e-02, 6.408690709003449e-02, -4.235402837545494e-03, -1.098917259110625e-03, 4.876203816057035e-03, 1.253624190064858e-03, 1.253624190064858e-03, 2.408636509742284e-03, -1.055484697275364e-01, -5.715678898079490e-02, -1.656763659022791e-02, -3.298074482299972e-02, -3.298074482299975e-02, -6.266736956720637e-03, 2.245277015406802e+01, 6.153775074809458e+00, -9.283805914554959e-03, -1.742170926937924e+00, -1.742170926937925e+00, 1.407566958240971e+02, 1.963121191391176e+03, 7.020413905348005e+02, -1.631997925563817e+00, 9.108809356792964e+02, 9.108809356792958e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_mpwkcis1k_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_mpwkcis1k", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-2.225738067303268e-05, -2.225832597075143e-05, -2.226243568011586e-05, -2.224846767396443e-05, -2.225579685867193e-05, -2.225579685867193e-05, -1.100405766156735e-04, -1.100869070535667e-04, -1.113476776058723e-04, -1.111541020879621e-04, -1.110558413560542e-04, -1.110558413560542e-04, -7.396949977800084e-04, -7.365203588223319e-04, -6.641406533641932e-04, -7.458492986521685e-04, -7.223624493226054e-04, -7.223624493226054e-04, -6.301535105338226e-03, -6.674412403169828e-03, -1.753314167256654e-04, -2.023812388926538e-03, -3.344623405728120e-03, -3.344623405728119e-03, -1.113694779371635e-05, -1.285236885747820e-05, -1.863823599127706e-04, -2.730339627504157e-06, -5.995553449920433e-06, -5.995553449920434e-06, -6.582439468701352e-04, -6.656778103548261e-04, -6.587191632750560e-04, -6.652754828664474e-04, -6.619276008172174e-04, -6.619276008172174e-04, -3.324491121991690e-04, -3.528630780174791e-04, -3.211158806832823e-04, -3.390507836996255e-04, -3.495540398449825e-04, -3.495540398449825e-04, -7.721774271229101e-03, -9.230077577291031e-03, -4.728611452943694e-03, -4.148073374365607e-03, -8.615243571154124e-03, -8.615243571154124e-03, -9.041686634716211e-04, -2.720836276726217e-03, -8.130367074913018e-04, -4.863629281838531e-04, -1.924252653311610e-03, -1.924252653311611e-03, -1.125244932497379e-06, -2.306127532078429e-06, -1.087601758757306e-05, -5.031711377588360e-04, -6.062699065573351e-06, -6.062699065573351e-06, -1.090300081498044e-01, -6.796099322414377e-02, -8.031851946196610e-02, -9.282369173190962e-02, -8.629867963381387e-02, -8.629867963381385e-02, -4.393643582970453e-02, -1.002971556687929e-02, -1.566832691965533e-02, -2.699345661707706e-02, -2.002709249341337e-02, -2.002709249341336e-02, -6.185989915594988e-03, -3.731964525249487e-03, -4.915921866170212e-03, -7.337041906847279e-03, -6.706221814821713e-03, -6.706221814821710e-03, -7.399763020199048e-03, -1.737928386111211e-04, -2.806657804003979e-04, -1.185864214776807e-02, -1.015823335364390e-03, -1.015823335364390e-03, -1.058471613971554e-05, -2.019903156448384e-07, -2.549855629294416e-06, -9.834574397058458e-04, -7.397109987854942e-06, -7.397109987854936e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
