
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_bb1k_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_bb1k", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.229185714045311e+01, -1.229187291098681e+01, -1.229198240825547e+01, -1.229174693217442e+01, -1.229186471850395e+01, -1.229186471850395e+01, -2.088045307964614e+00, -2.088022931911100e+00, -2.087536855521329e+00, -2.088566311469531e+00, -2.087971288509650e+00, -2.087971288509650e+00, -4.449840275539164e-01, -4.447862432162772e-01, -4.409680677611731e-01, -4.432738225799587e-01, -4.441537806557687e-01, -4.441537806557687e-01, -1.368366160048269e-01, -1.376665429759715e-01, -5.272262902954375e-01, -1.180166975234043e-01, -1.288334595553052e-01, -1.288334595553051e-01, -3.766555209990438e-02, -3.766219017436975e-02, -6.622321250755235e-02, -3.457631251232667e-02, -3.507561636407195e-02, -3.507561636407194e-02, -2.992883367011928e+00, -2.992513469890113e+00, -2.992871458104589e+00, -2.992544865578592e+00, -2.992693056300508e+00, -2.992693056300508e+00, -1.269178741253641e+00, -1.275076285177603e+00, -1.269227967409440e+00, -1.274426492695570e+00, -1.272432718199568e+00, -1.272432718199568e+00, -3.713441874782503e-01, -3.904955212622061e-01, -3.495379797794780e-01, -3.564461906539484e-01, -3.754818133592027e-01, -3.754818133592027e-01, -9.976758914769139e-02, -1.469955396623862e-01, -9.538994404037340e-02, -1.121513108635380e+00, -1.036797461335721e-01, -1.036797461335721e-01, -3.123990219989836e-02, -3.330823223000019e-02, -2.178281559614857e-02, -7.710485122843828e-02, -2.655551115957424e-02, -2.655551115957425e-02, -3.535502968439240e-01, -3.549789933425070e-01, -3.545022031366162e-01, -3.540852819575032e-01, -3.542962399680050e-01, -3.542962399680050e-01, -3.446472164688931e-01, -3.229669168810618e-01, -3.293368972879796e-01, -3.353703167862471e-01, -3.322588320503341e-01, -3.322588320503341e-01, -4.104175567517845e-01, -1.735541203845535e-01, -1.959508972693473e-01, -2.364603198406463e-01, -2.140721963018577e-01, -2.140721963018578e-01, -3.002602579461477e-01, -6.625594901981402e-02, -7.368329659536901e-02, -2.241471083567317e-01, -8.341257177998328e-02, -8.341257177998328e-02, -4.231894013687269e-02, -1.934194665037218e-02, -2.524359620758881e-02, -8.117868077744030e-02, -2.496150622385610e-02, -2.496150622385608e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_bb1k_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_bb1k", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.473760515632946e+01, -1.473758268051782e+01, -1.473766827178194e+01, -1.473762888789120e+01, -1.473785906644163e+01, -1.473790333330033e+01, -1.473714178753755e+01, -1.473699445503633e+01, -1.473764024577229e+01, -1.473735101791220e+01, -1.473764024577229e+01, -1.473735101791220e+01, -2.457669267111972e+00, -2.457775463662730e+00, -2.457680682941266e+00, -2.457795400622020e+00, -2.458064887374028e+00, -2.458181237870842e+00, -2.457430192459992e+00, -2.457595895619043e+00, -2.457306253757834e+00, -2.457918943963324e+00, -2.457306253757834e+00, -2.457918943963324e+00, -5.225884625281166e-01, -5.246951006809417e-01, -5.214089169389191e-01, -5.240898248487309e-01, -5.021905466771828e-01, -4.979857248831289e-01, -5.016097912242047e-01, -5.024468587038416e-01, -5.217552906830794e-01, -4.838734652129997e-01, -5.217552906830794e-01, -4.838734652129997e-01, -1.360774293225809e-01, -1.355714344044515e-01, -1.386516974245631e-01, -1.381128140226190e-01, -6.381627745508087e-01, -6.484735439264750e-01, -1.013789177602851e-01, -1.011052013357546e-01, -1.168589822082832e-01, -1.106182645088409e-01, -1.168589822082831e-01, -1.106182645088409e-01, -1.025349553075616e-02, -1.058431899916109e-02, -1.043295953691229e-02, -1.081130292501449e-02, -3.098076474811128e-02, -3.186348073635383e-02, -8.141583913673794e-03, -8.111928037189825e-03, -9.683376022228530e-03, -6.566389598895437e-03, -9.683376022228509e-03, -6.566389598895429e-03, -3.682438395979992e+00, -3.681605180773090e+00, -3.683862047633718e+00, -3.682983790608180e+00, -3.682515124332847e+00, -3.681652667423264e+00, -3.683739185437707e+00, -3.682902602870576e+00, -3.683168027703064e+00, -3.682298150677141e+00, -3.683168027703064e+00, -3.682298150677141e+00, -1.351735081870573e+00, -1.351569557084912e+00, -1.362069199419837e+00, -1.361672125785432e+00, -1.340238429326451e+00, -1.342662005496349e+00, -1.349181444373468e+00, -1.351686126147492e+00, -1.365496787797960e+00, -1.359057580843079e+00, -1.365496787797960e+00, -1.359057580843079e+00, -4.526370559855432e-01, -4.516998130615869e-01, -4.939734820188994e-01, -4.939338704719675e-01, -4.217559228006319e-01, -4.273282579357059e-01, -4.414826008471842e-01, -4.484278395896916e-01, -4.654122062979462e-01, -4.536000880565239e-01, -4.654122062979461e-01, -4.536000880565239e-01, -6.942638156595873e-02, -6.946525292957194e-02, -1.319075837712667e-01, -1.320054014919067e-01, -6.406809625208408e-02, -6.491156155697417e-02, -1.417913675434973e+00, -1.417394809597106e+00, -8.239363525557561e-02, -8.108105564878532e-02, -8.239363525557561e-02, -8.108105564878532e-02, -6.847213643585657e-03, -7.106016747346633e-03, -7.795592018342722e-03, -7.935121838258338e-03, -5.389323973506112e-03, -5.457180988696271e-03, -4.498992388441352e-02, -4.520021889376988e-02, -5.986343256149980e-03, -6.947129012182835e-03, -5.986343256149995e-03, -6.947129012182835e-03, -4.580962614228307e-01, -4.591865521330079e-01, -4.540607539888385e-01, -4.551323669653528e-01, -4.555080437022687e-01, -4.565894916151810e-01, -4.566858869207359e-01, -4.577625874076179e-01, -4.560996847455447e-01, -4.571783183682814e-01, -4.560996847455447e-01, -4.571783183682814e-01, -4.464072570659724e-01, -4.473269637456713e-01, -3.729706634800189e-01, -3.737837965169230e-01, -3.943329212917542e-01, -3.952884684402114e-01, -4.160070366434210e-01, -4.168282333420787e-01, -4.051227220439187e-01, -4.059062359568695e-01, -4.051227220439187e-01, -4.059062359568695e-01, -5.171569030766838e-01, -5.172839619393295e-01, -1.669070829354207e-01, -1.670325315933889e-01, -2.024307619369496e-01, -2.027375849967524e-01, -2.751162784910354e-01, -2.758160990796334e-01, -2.356702895743318e-01, -2.356217734191364e-01, -2.356702895743318e-01, -2.356217734191364e-01, -3.484609387495149e-01, -3.492469880733903e-01, -3.064139808891876e-02, -3.075145843800182e-02, -3.810685937038033e-02, -3.862875385868104e-02, -2.697065793607513e-01, -2.688018728113099e-01, -5.567919797352137e-02, -5.552307043394908e-02, -5.567919797352138e-02, -5.552307043394908e-02, -1.270353875926379e-02, -1.291412079575050e-02, -3.819938685798037e-03, -3.486859930635589e-03, -5.382694731608954e-03, -5.469354682501879e-03, -5.230378505533562e-02, -5.255916371135453e-02, -5.290872197657924e-03, -6.632857614741062e-03, -5.290872197657933e-03, -6.632857614741050e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_bb1k_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_bb1k", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-8.131590366795823e-09, 0.000000000000000e+00, -8.131674055011635e-09, -8.131542239715377e-09, 0.000000000000000e+00, -8.131638670749036e-09, -8.131296499814608e-09, 0.000000000000000e+00, -8.131314352474820e-09, -8.131847735300372e-09, 0.000000000000000e+00, -8.132010386675553e-09, -8.131570035363966e-09, 0.000000000000000e+00, -8.131662761329510e-09, -8.131570035363966e-09, 0.000000000000000e+00, -8.131662761329510e-09, -8.772306252668456e-06, 0.000000000000000e+00, -8.771999218145942e-06, -8.772705187135865e-06, 0.000000000000000e+00, -8.772244617402602e-06, -8.780105443475878e-06, 0.000000000000000e+00, -8.781149972789463e-06, -8.776783018157890e-06, 0.000000000000000e+00, -8.776080927969179e-06, -8.776366307650810e-06, 0.000000000000000e+00, -8.782591847131594e-06, -8.776366307650810e-06, 0.000000000000000e+00, -8.782591847131594e-06, -2.547817775069068e-03, 0.000000000000000e+00, -2.384348246147865e-03, -2.615802233585866e-03, 0.000000000000000e+00, -2.410113456048927e-03, -3.473421793404317e-03, 0.000000000000000e+00, -3.709198775294831e-03, -3.643365650645517e-03, 0.000000000000000e+00, -3.607164652797940e-03, -2.221003085631706e-03, 0.000000000000000e+00, -4.344271846578357e-03, -2.221003085631706e-03, 0.000000000000000e+00, -4.344271846578357e-03, -6.377789783593281e-01, 0.000000000000000e+00, -6.129395513405386e-01, -6.089059076683967e-01, 0.000000000000000e+00, -5.826570848943090e-01, 2.000409505971447e-04, 0.000000000000000e+00, 4.748094960956976e-04, -1.474788787901589e+00, 0.000000000000000e+00, -1.439917758973279e+00, -7.183856163286483e-01, 0.000000000000000e+00, -2.177878117386239e+00, -7.183856163286478e-01, 0.000000000000000e+00, -2.177878117386239e+00, -1.289687050175800e+04, 0.000000000000000e+00, -1.080387066989673e+04, -1.144476215229619e+04, 0.000000000000000e+00, -9.381611817124831e+03, -7.349034204672027e+01, 0.000000000000000e+00, -6.342526790547579e+01, -5.437785543481696e+04, 0.000000000000000e+00, -5.663703547172550e+04, -1.789443270362222e+04, 0.000000000000000e+00, -1.176098916412736e+05, -1.789443270362224e+04, 0.000000000000000e+00, -1.176098916412735e+05, -2.247371411776844e-06, 0.000000000000000e+00, -2.249344822732293e-06, -2.248321832147361e-06, 0.000000000000000e+00, -2.250259559039905e-06, -2.247425286865928e-06, 0.000000000000000e+00, -2.249374387605472e-06, -2.248236539658776e-06, 0.000000000000000e+00, -2.250208786029256e-06, -2.247859373434676e-06, 0.000000000000000e+00, -2.249803284230651e-06, -2.247859373434676e-06, 0.000000000000000e+00, -2.249803284230651e-06, -7.368366993869503e-05, 0.000000000000000e+00, -7.372593081145643e-05, -7.219633749199312e-05, 0.000000000000000e+00, -7.227916381043500e-05, -7.431846377140828e-05, 0.000000000000000e+00, -7.426539097617404e-05, -7.301976585942547e-05, 0.000000000000000e+00, -7.294363687728131e-05, -7.241243977590848e-05, 0.000000000000000e+00, -7.279872110487165e-05, -7.241243977590848e-05, 0.000000000000000e+00, -7.279872110487165e-05, -5.752961087479908e-03, 0.000000000000000e+00, -5.871973236043800e-03, -7.777340547541773e-04, 0.000000000000000e+00, -8.991762122096368e-04, -5.342583482238549e-03, 0.000000000000000e+00, -6.020826875042348e-03, 7.890127257641679e-03, 0.000000000000000e+00, 3.413186835592243e-03, -5.345639748193002e-03, 0.000000000000000e+00, -5.262582540246325e-03, -5.345639748193010e-03, 0.000000000000000e+00, -5.262582540246330e-03, -4.259616666278832e+00, 0.000000000000000e+00, -4.196220406277859e+00, -5.552848230768519e-01, 0.000000000000000e+00, -5.492876774760092e-01, -5.771870503518770e+00, 0.000000000000000e+00, -5.077269154456739e+00, -6.198221799201581e-05, 0.000000000000000e+00, -6.204792816858119e-05, -2.893090894130163e+00, 0.000000000000000e+00, -2.816106377472320e+00, -2.893090894130163e+00, 0.000000000000000e+00, -2.816106377472320e+00, -1.368943308345515e+05, 0.000000000000000e+00, -1.176732359887856e+05, -6.407724601328534e+04, 0.000000000000000e+00, -6.000810104438692e+04, -2.409048047858757e+05, 0.000000000000000e+00, -2.104607765002243e+05, -1.851855697171256e+01, 0.000000000000000e+00, -1.802307767356995e+01, -1.863869082071247e+05, 0.000000000000000e+00, -7.443547935481193e+04, -1.863869082071245e+05, 0.000000000000000e+00, -7.443547935481191e+04, -4.527930063685617e-03, 0.000000000000000e+00, -4.544158415256887e-03, -5.655128076145290e-03, 0.000000000000000e+00, -5.630040115139080e-03, -5.275847635794343e-03, 0.000000000000000e+00, -5.261473718435185e-03, -4.942332419988192e-03, 0.000000000000000e+00, -4.943029397360230e-03, -5.110029634832905e-03, 0.000000000000000e+00, -5.103312602711267e-03, -5.110029634832905e-03, 0.000000000000000e+00, -5.103312602711267e-03, -3.024969414131887e-03, 0.000000000000000e+00, -3.153065037733334e-03, -1.496625397831401e-02, 0.000000000000000e+00, -1.482122655262756e-02, -1.218314656635259e-02, 0.000000000000000e+00, -1.205406757747010e-02, -9.015569728118967e-03, 0.000000000000000e+00, -8.948554417596642e-03, -1.062773449913359e-02, 0.000000000000000e+00, -1.056327785793694e-02, -1.062773449913359e-02, 0.000000000000000e+00, -1.056327785793693e-02, -2.046272653285601e-04, 0.000000000000000e+00, -4.149956060324912e-04, -2.528766177194889e-01, 0.000000000000000e+00, -2.502529704295898e-01, -1.364647535856102e-01, 0.000000000000000e+00, -1.346211795771682e-01, -4.191221040439435e-02, 0.000000000000000e+00, -4.119496376902698e-02, -8.179619560236975e-02, 0.000000000000000e+00, -8.196993535309516e-02, -8.179619560236981e-02, 0.000000000000000e+00, -8.196993535309521e-02, -1.821348935155418e-02, 0.000000000000000e+00, -1.814057546796449e-02, -7.560030969766727e+01, 0.000000000000000e+00, -7.422138503137984e+01, -3.274444005916332e+01, 0.000000000000000e+00, -3.019895902362196e+01, -3.433119336513955e-02, 0.000000000000000e+00, -4.147180633929870e-02, -9.946856466416817e+00, 0.000000000000000e+00, -9.298602741946913e+00, -9.946856466416815e+00, 0.000000000000000e+00, -9.298602741946917e+00, -4.326871870319170e+03, 0.000000000000000e+00, -3.930878494080785e+03, -4.047068071270912e+06, 0.000000000000000e+00, -4.709267954052490e+06, -4.541177632811847e+05, 0.000000000000000e+00, -3.867833247271148e+05, -1.176698373920727e+01, 0.000000000000000e+00, -1.125431893509464e+01, -2.668422549107994e+05, 0.000000000000000e+00, -9.663546884108307e+04, -2.668422549108000e+05, 0.000000000000000e+00, -9.663546884108339e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_bb1k_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_bb1k", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_bb1k_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_bb1k", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-1.453789028236753e-05, -1.453795539533437e-05, -1.453819599291548e-05, -1.453817725604425e-05, -1.453863452856280e-05, -1.453895670951458e-05, -1.453519611389047e-05, -1.453456982004614e-05, -1.453809985687147e-05, -1.453592645007412e-05, -1.453809985687147e-05, -1.453592645007412e-05, -2.773989440474821e-04, -2.777448485755736e-04, -2.774399024960354e-04, -2.778084148197651e-04, -2.786639438061573e-04, -2.789831013985793e-04, -2.764684431128833e-04, -2.768336125599870e-04, -2.773459159014582e-04, -2.778996350686698e-04, -2.773459159014582e-04, -2.778996350686698e-04, -2.491933376166078e-03, -2.642184406024723e-03, -2.443485038052027e-03, -2.625098956656117e-03, -1.892260784642392e-03, -1.718606872764310e-03, -1.784285750730145e-03, -1.842295697882058e-03, -2.877173658706024e-03, -1.074779912048118e-03, -2.877173658706024e-03, -1.074779912048118e-03, -2.393230896972181e-03, -2.713708004130124e-03, -2.615544232205190e-03, -3.002092192391819e-03, -2.055021085824489e-03, -2.505285064109242e-03, -9.520634906531265e-04, -9.656735293285018e-04, -2.354546618229709e-03, -4.301318033992195e-04, -2.354546618229706e-03, -4.301318033992202e-04, -2.997087148185276e-07, -3.518866688465333e-07, -3.601478287499169e-07, -4.346246878873608e-07, -2.296147427444176e-05, -2.686840224581216e-05, -6.513783696351832e-08, -6.041348501259918e-08, -2.169816319607273e-07, -1.113827375369721e-07, -2.169816319607280e-07, -1.113827375369724e-07, -2.269464053455427e-04, -2.269942041936558e-04, -2.280519143712854e-04, -2.280628082763925e-04, -2.270020733267227e-04, -2.270268297199039e-04, -2.279506377716149e-04, -2.279975920571464e-04, -2.275163759208161e-04, -2.275310559213020e-04, -2.275163759208161e-04, -2.275310559213020e-04, -2.646821730286466e-04, -2.646819876534644e-04, -2.699096506917164e-04, -2.698297537548436e-04, -2.456280887323677e-04, -2.511417099558468e-04, -2.500045673272401e-04, -2.554573505090169e-04, -2.824632236149086e-04, -2.694761276964254e-04, -2.824632236149086e-04, -2.694761276964254e-04, -6.347379240705518e-03, -6.390511160701925e-03, -1.184698105674906e-02, -1.195811997073223e-02, -6.321235538715860e-03, -6.490396976230268e-03, -1.327119950005738e-02, -1.243099175812918e-02, -6.676694104181627e-03, -6.989931597318513e-03, -6.676694104181627e-03, -6.989931597318513e-03, -2.781922350892201e-04, -2.928988132952843e-04, -1.076133359808841e-03, -1.086732839708232e-03, -2.304560833431565e-04, -2.641079765903469e-04, -1.927400997080872e-03, -1.929892281417028e-03, -4.987911163701257e-04, -7.898358953142875e-04, -4.987911163701257e-04, -7.898358953142875e-04, -4.030688190349819e-08, -3.894187119486963e-08, -7.056855839852068e-08, -6.799578383656435e-08, -1.755342139979134e-07, -2.301047862615557e-07, -1.134151689771698e-04, -1.109104482960024e-04, -9.269830704810115e-08, -2.249914142493880e-07, -9.269830704810089e-08, -2.249914142493877e-07, -1.717652751912049e-02, -1.713619248568862e-02, -1.386428745944997e-02, -1.386672723675737e-02, -1.491063312506914e-02, -1.490782769044810e-02, -1.587685030660696e-02, -1.584744786659725e-02, -1.538304991477683e-02, -1.536705133539403e-02, -1.538304991477683e-02, -1.536705133539403e-02, -1.929224223085034e-02, -1.920034085401544e-02, -4.370113379078337e-03, -4.409813643531602e-03, -6.427959367186009e-03, -6.497529364432018e-03, -9.824749734082082e-03, -9.829088996211842e-03, -7.943079478903152e-03, -7.949467297785930e-03, -7.943079478903152e-03, -7.949467297785928e-03, -1.059149578002199e-02, -1.072681605893395e-02, -1.540683307611430e-03, -1.564565636171346e-03, -2.429583102321081e-03, -2.531861492405219e-03, -6.287727115763946e-03, -6.323005669183542e-03, -4.006584648178532e-03, -4.059123384598535e-03, -4.006584648178535e-03, -4.059123384598537e-03, -4.805309699537307e-03, -4.900319655551454e-03, -1.988346384035491e-05, -2.028650905216560e-05, -4.476415823168420e-05, -5.025037174718308e-05, -9.841532611841538e-03, -1.007052461472450e-02, -2.184009360754973e-04, -3.122002109861319e-04, -2.184009360754975e-04, -3.122002109861319e-04, -6.466774595219028e-07, -7.290699924745556e-07, -5.755693045808994e-09, -1.026365461509461e-08, -2.775916785357306e-08, -3.528415037704372e-08, -2.162876966262462e-04, -2.221903081659497e-04, -1.636920504245606e-07, -1.823002569306333e-07, -1.636920504245608e-07, -1.823002569306335e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
