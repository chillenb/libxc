
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_bb1k_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_bb1k", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.162057168966208e+01, -1.162060257386459e+01, -1.162075029326776e+01, -1.461053965181707e+73, -1.298985167012480e+73, -4.615721346452343e+99, -4.503361021868064e+43, -1.444491494848885e+116, -4.343655994705248e+106, -9.821314525154548e+108, -3.084369352558055e+99, -1.276115759795878e+85, -4.956990590272850e-01, -4.826904256118867e+77, -3.626373678406720e+87, -1.772761115685453e+106, -4.985154666732031e-01, -6.778138049035484e+120, -6.320723509658557e+136, -2.095662237314639e+79, -4.874878319523987e+115, -2.512853326382867e+120, -2.891929645800452e+113, -6.692242744966064e+98, -5.612145924552753e+126, -1.189987503536478e+102, -7.996372787279328e+126, -1.185960429338672e+130, -9.060332316474662e+128, -8.994040971562465e+128, -3.784358570379253e+120, -1.156688843584144e+118, -3.247867657585550e+120, -9.701626604745941e+105, -1.013901443403836e+79, -1.492397075462309e+110, -4.982437912880462e+121, -1.834404376908389e+80, -1.766190134468790e+116, -7.551591349531331e+85, -2.107665055613718e+119, -1.484795512953283e+112, -2.480799719157723e+87, -7.611372716510190e+120, -2.497712666933672e+118, -1.848113442272324e+104, -5.697472913756793e+125, -3.926273283185406e+106, -1.067668278305545e+128, -1.550396802136110e+84, -1.798643892037925e+116, -1.897272992037646e+119, -8.444043293369243e+127, -2.622213485438956e+106, -2.236193184526588e+94, -7.991439694667548e+117, -3.069365384335139e+125, -1.521708079853088e+83, -3.751538807676302e+108, -2.427648713641653e+117, -3.440363640397244e+118, -2.577499416933866e+123, -3.536701000565365e-01, -2.017848957820808e+87, -3.535396997113234e-01, -6.199199965338435e+101, -9.281098108368645e+108, -1.725063161078203e+109, -3.773758412641406e+87, -3.229091764834317e+111, -8.989417916261021e+108, -8.845215078944903e+105, -2.353557951593982e+118, -7.547571211553341e+111, -4.136256614742131e+119, -1.935989851817380e+95, -1.268369437442877e+88, -1.251433558584979e+112, -1.967186779549619e+85, -1.452155066681843e+00, -4.118855444781133e+90, -1.270070521453310e+124, -1.124486464700542e+126, -3.388856410226468e+123, -8.610002004218382e+00, -1.557626866877673e+126, -2.266108576378569e+01, -4.672790831358660e-01, -2.677126396988272e+125, -5.435583531900733e+103])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_bb1k_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_bb1k", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.539364880430742e+01, -1.539363540529452e+01, -1.539369908751003e+01, -1.539367218385563e+01, -1.539387062344359e+01, -1.539391350585895e+01, 1.025402806200523e+57, -2.235429421269835e+71, -1.843388499618723e+57, -1.988827081428578e+71, -2.619742100466239e+97, -2.619841133223867e+97, -1.115282508026934e+42, -1.973240857988664e+28, -1.148940965732391e+107, -1.397876435258962e+114, 6.161947498069603e+90, -4.568088670585975e+104, -1.011226355200684e+107, -1.593871795236297e+93, 1.561004044503237e+82, -3.468089580183719e+97, -4.080437809329430e+67, -1.669162633988799e+83, -4.640771115268268e-01, -4.668886582643951e-01, -2.709746464315704e+62, -6.788931713742771e+75, -2.081737724386056e+85, -2.518368364182300e+85, -1.864774485623221e+104, -1.153538885745443e+90, -4.668780738019671e-01, -4.299313791513373e-01, -2.047645966849081e+105, -6.952696182761039e+118, 5.882871076635781e+119, -4.887868085553024e+134, 3.873245853620913e+63, -2.714727290885915e+77, -4.954871617186034e+113, -2.272424013807330e+99, 4.800851979992703e+104, -2.274922139880997e+118, -8.754320950121758e+110, -4.919930749658836e+111, -4.329287345456244e+96, 1.502733486255663e+81, -5.370030495879767e+124, -5.909590726009918e+112, -2.264323502304937e+86, -1.154561801678398e+100, -2.064205957805613e+111, -6.466248737214479e+124, -8.331986523429402e+127, -1.563066038972540e+127, -4.598231318640493e+126, -6.843301866384945e+111, -9.296510521025882e+113, -2.459146435596801e+127, -5.548400657015246e+117, -2.987761813050305e+118, -5.336850709383532e+102, -1.103750641300977e+116, 9.087522387086867e+104, -3.037735158032879e+118, -1.022194596697428e+104, -5.647285872070258e+101, -5.078250545740231e+63, -1.429280425320182e+77, -1.522342873441305e+108, 1.750796362119227e+93, -1.142347356774126e+107, -4.598723412991713e+119, -2.531754432432094e+78, -1.895171653721521e+74, -2.014015933475086e+100, -1.699919422519901e+114, -6.498112251586057e+83, -3.310721076652876e+83, -1.969976594333437e+117, -3.894301842710768e+103, -1.473737192762038e+110, -6.672303871955695e+95, -3.125274083172104e+85, 2.663297825114082e+70, 1.105978560618201e+105, -7.038413392912594e+118, -2.491034738605319e+116, -1.522910785527803e+102, -8.032453112027550e+99, -1.873382536890960e+102, -4.713670661087729e+123, -4.425248862504190e+110, -9.941697489227930e+101, -4.429111952012298e+104, 1.258654068604000e+109, -9.155087262946570e+125, -7.567439352892262e+68, -2.005307868082291e+82, -1.861089914293039e+114, -1.831522616950656e+100, -7.408238419771951e+107, -1.786648049736798e+117, -8.043600692070597e+125, -3.547663571286865e+118, -6.513468849306681e+90, -2.510338857435507e+104, -4.713801340021445e+78, -2.427397907989153e+92, -2.367640784659781e+102, -7.273903835167140e+115, -1.014855772130791e+110, -2.477742525054808e+123, -2.012989804512055e+81, -5.902447191432885e+67, -6.754754495638254e+106, -5.331045489150901e+92, -7.222172112333952e+101, -1.574550474868477e+115, -4.150971999505348e+102, -3.225069102109793e+116, -2.350685524371582e+121, 1.066826377209084e+107, -4.554159212931557e-01, -4.565671237198460e-01, 1.982633543616101e+71, -2.540035106989220e+85, -4.560012501732807e-01, -4.571422103715809e-01, -1.323578919196419e+86, -6.732257158904545e+99, -3.289532401159706e+93, -9.445104903277719e+106, -1.770382636530783e+107, -3.561019008411017e+93, -4.792089413603830e+85, -2.421311733675315e+72, -1.229358112487336e+96, -3.211989899930130e+109, -5.697780871937000e+93, -9.140871289753416e+106, -9.343335377270433e+103, 5.178603757131710e+88, -2.228380982582779e+116, -9.391543817571270e+101, -7.562759699154678e+109, 1.033341202655998e+96, -2.772772858193116e+104, -3.798122312384001e+117, -1.176853610327430e+79, -2.229958839883168e+93, -1.110667141541561e+76, -1.587668277550397e+86, -1.241638503988027e+110, -6.314051859519022e+96, -2.569812748370219e+83, -1.517331814694467e+76, 6.053442798833125e-01, 6.063166287800931e-01, -5.229736553498305e+88, -2.838012359468411e+78, -4.087309634474374e+108, -1.118181906723499e+122, -1.079412624067125e+124, 1.116578772982656e+109, -7.753265278302434e+107, -2.819606522688418e+121, 3.558769093377785e+00, 3.439677603344968e+00, -3.327657800722244e+110, -1.348287165694676e+124, 8.937005351791008e+00, 8.124112156651732e+00, 1.427264565237965e-01, 1.270597216176324e-01, -1.171578833464294e+109, -1.676491130281488e+123, -9.524988413460133e+101, 3.250136937228132e+88])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_bb1k_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_bb1k", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.051047024716169e-08, 0.000000000000000e+00, -1.051069257835522e-08, -1.051036301557017e-08, 0.000000000000000e+00, -1.051061435257154e-08, -1.050998309450616e-08, 0.000000000000000e+00, -1.051008193279730e-08, -1.052338549927382e-08, 0.000000000000000e+00, 2.842587300889312e-10, -1.052259214455086e-08, 0.000000000000000e+00, 2.842640680074617e-10, 2.738404316763906e-10, 0.000000000000000e+00, 2.738724312272273e-10, 8.410548528765878e-07, 0.000000000000000e+00, -1.407581972520514e-06, 7.214654036870076e-07, 0.000000000000000e+00, 7.213779593536027e-07, 7.253433597679243e-07, 0.000000000000000e+00, 7.257303413342075e-07, 7.235912978424355e-07, 0.000000000000000e+00, 7.235286714237941e-07, 7.227188954465104e-07, 0.000000000000000e+00, 7.255537246961529e-07, -1.399601791660888e-06, 0.000000000000000e+00, 8.456435553950724e-07, 5.424756172764451e-02, 0.000000000000000e+00, 5.158314802572667e-02, 5.441566725116394e-02, 0.000000000000000e+00, 1.112964266456388e-03, 7.497715258173094e-04, 0.000000000000000e+00, 7.790384587118513e-04, 1.147301173778583e-03, 0.000000000000000e+00, 6.188753311063675e-02, 4.859598538930888e-02, 0.000000000000000e+00, 9.051565114115895e-02, 6.702282537720239e-04, 0.000000000000000e+00, 9.273392320209653e-04, 5.294078721767259e+01, 0.000000000000000e+00, 3.597666620819054e-01, 4.801990193677622e+01, 0.000000000000000e+00, 3.476280916351858e-01, 3.635181401792684e-04, 0.000000000000000e+00, 3.765467554684390e-02, 2.321890309405964e-01, 0.000000000000000e+00, 2.180660617001991e-01, 5.159480917058271e-02, 0.000000000000000e+00, 1.249652533762501e+00, 1.243611296494421e-01, 0.000000000000000e+00, 3.953551625476978e+03, 1.911135922193183e+00, 0.000000000000000e+00, 1.245401259544039e+00, 7.817870850405212e+10, 0.000000000000000e+00, 5.113590899748977e+00, 2.409788577068453e+06, 0.000000000000000e+00, 1.747430115585068e+00, 1.129910468563809e+00, 0.000000000000000e+00, 1.273105386435007e+00, 3.140398219541309e-01, 0.000000000000000e+00, 1.256982437732088e+01, 3.140398219541310e-01, 0.000000000000000e+00, 1.256982437732088e+01, 2.900624746207780e-07, 0.000000000000000e+00, 2.904686458027572e-07, 2.909615107563048e-07, 0.000000000000000e+00, 2.913438258008717e-07, 2.901255291762672e-07, 0.000000000000000e+00, 2.905114578968556e-07, 2.909000345992406e-07, 0.000000000000000e+00, 2.913018483981907e-07, -2.410148020500196e-06, 0.000000000000000e+00, 2.975350633462576e-07, 2.971276761182413e-07, 0.000000000000000e+00, -2.412212673175372e-06, 9.047108390213217e-06, 0.000000000000000e+00, 9.072571316949579e-06, 9.079680141738972e-06, 0.000000000000000e+00, 9.111882998470369e-06, 9.025961549721011e-06, 0.000000000000000e+00, 8.999774063246856e-06, 9.066037471909210e-06, 0.000000000000000e+00, 9.038285715633201e-06, 1.090580358250905e-05, 0.000000000000000e+00, 9.805652502490109e-05, 9.032265403936581e-06, 0.000000000000000e+00, 9.179442313572790e-06, 4.867180014308885e-03, 0.000000000000000e+00, 2.430988832860102e-02, 4.730563857547297e-03, 0.000000000000000e+00, 4.818368282685348e-03, 5.195471472061182e-03, 0.000000000000000e+00, 4.641552572891338e-03, 5.832979071010968e-03, 0.000000000000000e+00, 5.206040600694475e-03, 4.402019853287130e-03, 0.000000000000000e+00, 2.522925785118610e-02, 4.097776709959417e-03, 0.000000000000000e+00, 5.124124150470932e-03, 2.833809652446429e-01, 0.000000000000000e+00, 2.648641608035849e-01, 7.245350994909823e+01, 0.000000000000000e+00, 2.384059747009820e-01, 3.603034734156027e-01, 0.000000000000000e+00, 2.505887403010987e-01, 2.027582099425876e-05, 0.000000000000000e+00, 2.034079800737459e-05, 4.300809187855033e-01, 0.000000000000000e+00, 3.044229482644202e-01, 4.300809187855035e-01, 0.000000000000000e+00, 3.044229482644205e-01, 1.982096258229050e+13, 0.000000000000000e+00, 2.739363130861602e+00, 1.131009188998493e+00, 0.000000000000000e+00, 1.001894954564393e+00, 1.059207522599252e+01, 0.000000000000000e+00, 7.179608270521846e+00, 1.534488432998202e+00, 0.000000000000000e+00, 8.127785299595373e+04, 6.015774431511087e+00, 0.000000000000000e+00, 1.064133898263959e+00, 6.015774431511082e+00, 0.000000000000000e+00, 1.064133898263957e+00, 1.243643070353796e-02, 0.000000000000000e+00, 1.224143511609067e-02, 1.078118393213537e-02, 0.000000000000000e+00, 1.062003706878543e-02, -2.739253421814199e-04, 0.000000000000000e+00, -4.799527728559481e-04, -1.281271048109520e-03, 0.000000000000000e+00, 1.168419498769134e-02, -7.395618124833997e-04, 0.000000000000000e+00, -9.225667800598844e-04, -8.280349655937283e-04, 0.000000000000000e+00, 1.145390409499930e-02, 1.375456407029652e-02, 0.000000000000000e+00, 1.358836796724587e-02, 9.736978790454020e-03, 0.000000000000000e+00, 7.434889845250450e-02, 1.009321696889946e-02, 0.000000000000000e+00, 3.775982538195845e-02, 1.068039332176266e-02, 0.000000000000000e+00, 1.051205819814943e-02, 9.970499632050574e-03, 0.000000000000000e+00, 9.819123632754053e-03, 1.046939415959098e-02, 0.000000000000000e+00, 2.569262165201288e-02, 3.512108324522389e-03, 0.000000000000000e+00, 6.102430664059454e-03, 7.660291708988651e-02, 0.000000000000000e+00, 7.383064992011033e-02, 5.025684719039923e+00, 0.000000000000000e+00, 7.291303572432896e-02, 6.981331448580135e-01, 0.000000000000000e+00, 3.319372217816097e-02, 3.961043122389546e-02, 0.000000000000000e+00, 3.985302739391646e-02, 5.207431074142891e-02, 0.000000000000000e+00, 1.756359480020798e+00, 1.050805768395638e-02, 0.000000000000000e+00, 1.032876659621711e-02, 2.648945713890871e+06, 0.000000000000000e+00, 2.562467118909103e+06, 4.939644585775007e-01, 0.000000000000000e+00, 3.917699327916829e-01, 4.251314976878282e-02, 0.000000000000000e+00, 4.311515006638407e-02, 6.563590838549053e-01, 0.000000000000000e+00, 4.593863183022613e-01, 6.563590838549053e-01, 0.000000000000000e+00, 4.593863183022613e-01, 1.659255902066774e+10, 0.000000000000000e+00, 1.339131052144523e+10, 1.422099214566522e+00, 0.000000000000000e+00, 1.398930753374009e+00, 8.504055733083288e+13, 0.000000000000000e+00, 5.664015172932486e+13, 2.439438937725603e+04, 0.000000000000000e+00, 2.075165288220549e+04, 1.116088107910786e+01, 0.000000000000000e+00, 1.729358674818302e+00, 2.449295636189682e+01, 0.000000000000000e+00, 2.264009423950578e+12])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_bb1k_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_bb1k", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-3.917471522261091e-05, -3.917480666326107e-05, -3.917448580994359e-05, -3.917464000171363e-05, -3.917370661284050e-05, -3.917353614629186e-05, -3.917629863541938e-05, -1.378716895281572e-05, -3.917458068216103e-05, -1.378888624786437e-05, -1.378769232225893e-05, -1.378888624786437e-05, -1.086307176581860e-04, -9.886367289552889e-04, -1.086762179304513e-04, -1.086254899047673e-04, -1.095650411891742e-04, -1.097228200789897e-04, -1.092250898329168e-04, -1.092236389627861e-04, -1.085596230900190e-04, -1.100246529098191e-04, -9.889006949787293e-04, -1.100246529098191e-04, -1.598021136832418e-02, -1.587732578179836e-02, -1.602089576144582e-02, -5.816541241886695e-04, -4.710803402561351e-04, -4.585272505900273e-04, -5.059211528733358e-04, -1.642148573775559e-02, -1.568044317361094e-02, -1.744678139345269e-02, -5.953671632135174e-04, -4.125746990187820e-04, -1.383354092125630e-01, -2.545594631964812e-03, -1.358014431510194e-01, -2.761031995452824e-03, -1.511044147610398e-04, -1.205958836055364e-02, -5.537625639604731e-04, -7.010054770280826e-04, -1.911908828015881e-03, -1.836805468040011e-04, -1.911908828015880e-03, -3.259754731379892e-01, -2.925053862903257e-07, -3.482503482707788e-07, -1.204977028068718e+01, -4.248691717209683e-07, -1.369328487948551e+00, -2.183566043800917e-05, -5.082405532873740e-08, -4.895047635855906e-08, -2.015180548687125e-07, -6.979620591902826e-08, -2.015180548687125e-07, -6.979620591902835e-08, -2.259855269312626e-04, -2.260881212058678e-04, -2.270958956349527e-04, -2.271617442885251e-04, -2.260634434835929e-04, -2.261367632496152e-04, -2.270154474710338e-04, -2.271113465430546e-04, -4.879961484479221e-04, -2.266247031240197e-04, -2.265412913612535e-04, -4.882054926856168e-04, -2.184886358410226e-04, -2.198407711106584e-04, -2.290425707302488e-04, -2.301086062234988e-04, -2.090918765935176e-04, -2.130296248907240e-04, -2.181735888507632e-04, -2.223153613090707e-04, -2.317988057317349e-04, -2.641639124623456e-03, -2.317988057317349e-04, -2.263597005645318e-04, -3.929170235622424e-03, -1.984749290175147e-02, -6.303138297431693e-03, -6.504666655764184e-03, -2.674119186441406e-03, -3.235583825171795e-03, -4.075837800125147e-03, -4.531443570850382e-03, -4.490464816718589e-03, -2.014640642022206e-02, -4.490464816718591e-03, -4.176864456846772e-03, -2.006900302560310e-04, -2.048784310581295e-04, -1.344952233432972e-01, -9.423807568459265e-04, -1.556672292865342e-04, -1.896343766166793e-04, -6.620210932860224e-04, -6.630589334612137e-04, -3.860796718241865e-04, -6.415843739916735e-04, -3.860796718241866e-04, -6.415843739916738e-04, -3.228303714073314e+01, -1.673609233594659e-08, -4.320386791748026e-08, -3.974284072041291e-08, -1.358766007760613e-07, -1.757549224413043e-07, -7.429711701765857e-05, -6.758971769825938e-01, -2.718102425525728e-08, -2.133696627854412e-07, -2.718102425525730e-08, -2.133696627854409e-07, -1.552306914455465e-02, -1.552582117956704e-02, -1.268299878892380e-02, -1.271124538750983e-02, -1.983160539830672e-02, -1.970666739122217e-02, -1.977746314944726e-02, -1.442137908417866e-02, -1.980452801724910e-02, -1.968033565964845e-02, -1.980452801724910e-02, -1.400805702816674e-02, -1.573383149051152e-02, -1.576560080490087e-02, -4.103405104669137e-03, -2.619498423429564e-02, -5.855996421654132e-03, -2.431986097731804e-02, -8.622152563779987e-03, -8.630992571357915e-03, -7.055802023881759e-03, -7.089637270769390e-03, -7.055802023881757e-03, -2.350005329694931e-02, -4.894091693419611e-03, -1.600564578451296e-02, -1.408010276920654e-03, -1.425686809925916e-03, -7.129940082659059e-02, -2.075504996960211e-03, -4.596769162591872e-02, -3.651606863563957e-03, -2.954446459371496e-03, -2.988292442326723e-03, -2.954446459371497e-03, -5.701619287669108e-02, -3.420976223119365e-03, -3.590918706190889e-03, -1.404516281424835e+00, -1.391711463467844e+00, -3.381789829807270e-05, -3.836836569884722e-05, -5.271356587168376e-03, -6.540211187909225e-03, -1.641862007921526e-04, -2.374257902366361e-04, -1.641862007921527e-04, -2.374257902366361e-04, -8.271235436698682e+00, -7.918925502147195e+00, -1.133943442251980e-09, -1.136480995602016e-09, -4.818582270800353e+01, -4.495849352159821e+01, -5.342280621683502e-01, -5.221142930065400e-01, -6.008281617989573e-08, -1.726523620548169e-07, -6.008281617989576e-08, -2.538022450106644e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
