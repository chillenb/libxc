
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_b0kcis_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b0kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.519550892051401e+01, -1.519554515356010e+01, -1.519573348139773e+01, -1.519513961866378e+01, -1.519552780554055e+01, -1.519552780554055e+01, -2.641884035600866e+00, -2.641889234797110e+00, -2.642134121905094e+00, -2.642237265767866e+00, -2.641897262908722e+00, -4.219132427852237e+75, -5.976704540900587e-01, -7.789489899948822e+120, -5.585435395883783e+77, -9.874909603931849e+103, -2.577647844612580e+77, -9.308303339130421e+103, -3.661364159604812e+47, -4.514558930422954e+105, -6.986250020237782e-01, -2.507731485064515e+113, -4.833374567438533e+105, -1.230590254321408e+120, -9.894188036661805e+86, -2.062956324691163e+102, -2.717710643247026e+112, -4.169447089838063e+117, -3.351619789247201e+137, -4.469397756713097e+92, -4.002351288221398e+81, -1.251214432968311e+118, -1.201632385384183e+99, -3.867718643458968e+00, -3.316130406525008e+108, -4.978511856955063e+84, -1.549993659795281e+00, -1.559964342849389e+00, -1.545962319150848e+00, -1.553745124002543e+00, -1.561961091951760e+00, -2.517151320765025e+76, -3.048206020013370e+87, -2.610032096983469e+106, -4.227698559796470e+87, -3.442934513441128e+106, -2.724171945879116e+87, -5.483251159811520e-01, -1.235217196206879e-01, -4.027503765806648e+98, -1.222511720823602e-01, -3.282195250720060e+30, -5.447091606072430e+79, -1.713019105366435e+123, -9.413159539853794e-03, -1.043556115865416e+84, -6.179762017267883e+141, -8.430414071734924e-02, -9.765785680187654e-03, -1.163291267815926e+84, -1.402982605386279e+116, -4.948095497112606e+110, -5.437888349684679e-01, -7.652545588386667e+101, -3.359348983373756e+79, -3.550452074670079e+118, -3.363734119295289e+111, -1.338447002944378e+78, -3.987928612659752e+111, -1.749694672893722e+97, -2.713659945111683e+120, -4.959498027239836e-01, -5.884670351105871e+120, -2.476340586843134e-01, -9.893073592399099e+109, -3.483589142365409e-01, -6.641545224795971e+85, -1.408396895835706e+97, -4.313010804043818e-01, -6.862517178996769e+126, -2.783013304247236e+126, -1.607452135993689e+124, -1.044700405500682e-01, -2.078752252824798e+125, -5.846131783212738e+127, -4.278360386467471e+133, -5.159925135683750e+26, -1.402018654020081e+90, -2.952721772085152e+115, -1.351272224310528e+129])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_b0kcis_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b0kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.017122076939145e+01, -2.017126903176025e+01, -2.017151988420517e+01, -2.017072885979431e+01, -2.017124592421998e+01, -2.017124592421998e+01, -3.467665315999482e+00, -3.467672210804808e+00, -3.467996962797808e+00, -3.468133744952174e+00, -3.467682857117199e+00, -3.110418338779273e+73, -7.684249625489123e-01, -3.616226324586129e+118, -3.972676623011752e+75, -5.305423343172499e+101, -1.841277647095729e+75, -5.002603532730618e+101, -4.110186750937630e+45, -2.376611232865030e+103, -9.004924751859045e-01, -1.231479646222753e+111, -2.543664992353697e+103, -5.724026877358337e+117, -6.192442898797780e+84, -1.107246733930594e+100, -1.340080454481514e+110, -1.953511475226548e+115, -1.355058952009396e+135, -2.635853364047584e+90, -2.746630973806387e+79, -5.986281361676428e+115, -6.825795341033376e+96, -5.094774014104151e+00, -1.723441718169862e+106, -3.295060463694183e+82, -2.021762196466390e+00, -2.034939422595668e+00, -2.016434581633947e+00, -2.026720041109566e+00, -2.037578401844000e+00, -1.831719359423429e+74, -1.934387708426326e+85, -1.371139205362268e+104, -2.678031230715611e+85, -1.806047964055490e+104, -1.729997839817669e+85, -7.040023525934282e-01, -1.565195381794714e-01, -2.265973693135940e+96, -1.549149101947481e-01, -5.703403442605264e+28, -3.747028100265029e+77, -7.758162914401981e+120, -1.226662680290372e-02, -6.728584334562961e+81, -2.419138728276273e+139, -1.070811164693473e-01, -1.272155173591303e-02, -7.493263244215457e+81, -6.769153696028785e+113, -2.501389847304496e+108, -6.980849743155769e-01, -4.192358170385493e+99, -2.336989610608474e+77, -1.679269747461471e+116, -1.687966512958818e+109, -9.462554287662622e+75, -1.999165629340038e+109, -1.002371882299732e+95, -1.263493387461634e+118, -6.357371705645944e-01, -2.734532936800192e+118, -3.144967894985662e-01, -5.017138861871502e+107, -4.441960774691467e-01, -4.280220605991935e+83, -8.056369431398948e+94, -5.516662896935715e-01, -3.012271702801965e+124, -1.226474676015055e+124, -7.251460661888327e+121, -1.324817047761900e-01, -9.252070776326686e+122, -2.538004809605093e+125, -1.767357659307636e+131, -9.238306413277657e+24, -8.562498820161421e+87, -1.407219802888939e+113, -5.787090767390026e+126])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_b0kcis_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b0kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.162958701764392e-08, 1.162949769929187e-08, 1.162901057497177e-08, 1.163047792647469e-08, 1.162954061935602e-08, 1.162954061935602e-08, 1.997621732235955e-05, 1.997651238479376e-05, 1.998246546748552e-05, 1.997348737541643e-05, 1.997590277478650e-05, 9.323301735417641e-07, 1.794778669563660e-02, 9.596902084025056e-04, 8.953696346265458e-04, 9.418219235633576e-04, 9.614961167905740e-04, 9.614961167905740e-04, 3.518692188688798e-01, 3.517505622828505e-01, 8.148073043016266e-03, 2.915683859591818e-01, 3.515113633407583e-01, 3.515113633407583e-01, 4.349579446197630e+01, 4.110046489486496e+01, 2.655709834618574e+00, 3.346526516750406e+01, 4.341235060222064e+01, 4.341235060222061e+01, 7.978837909106535e-07, 8.045310207622005e-07, 7.986181700527902e-07, 4.719034706556188e-06, 8.012019412342799e-07, 8.012019412342799e-07, 2.161689241471142e-04, 2.109109508347174e-04, 2.183141383935149e-04, 2.141455574051990e-04, 2.099397556776466e-04, 1.185177188746289e-05, 8.657783908986943e-03, 1.217172602721328e-02, 8.189160397581729e-03, 1.092692673211369e-02, 9.118668684607974e-03, 3.810032680571499e-02, 3.986417271084141e+01, 1.663022224347495e-01, 4.208141263599995e+01, 3.834608070661252e-05, 5.301723203199523e-01, 5.301723203199523e-01, 4.531555901605145e+06, 3.816540077271350e+01, 1.984320897081819e+02, 2.533314094109712e+02, 3.877883287407690e+06, 5.160592496461785e+01, 1.212294693886948e-01, 5.810340552192554e-02, 1.103447486767695e-01, 8.747340300854230e-02, 7.891322340624497e-02, 7.891322340624497e-02, 1.013444044639785e-01, 1.559061993663168e-02, 1.980504520135013e-02, 2.809364317105160e-02, 2.299589222226251e-02, 7.234997325711151e-02, 7.693859737697377e-03, 1.388597638555592e+00, 6.962717785283362e-02, 2.919134180442183e-01, 5.806765193106538e-02, 5.806765193106537e-02, 1.058675346772142e-01, 3.012216986434699e+00, 1.455458090733327e+00, 7.308470746047534e-02, 9.091302464190501e+01, 1.068799748042423e+00, 1.470661390762735e+01, 1.563560244974313e+02, 1.603515614370022e+02, 1.333533258353196e+00, 8.536840483778954e+01, 8.536840483778954e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_b0kcis_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b0kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-1.035104519663444e-16, -2.402337174539310e-54, -2.402606007431662e-54, -2.401435354549526e-54, -2.402303243796387e-54, -2.402303243796387e-54, -1.422772765157243e-47, -1.423399971298032e-47, -1.441906807820301e-47, -1.433593163906877e-47, -1.422880930159310e-47, -3.124661379914965e-04, -2.644320027353227e-41, -2.186466050510155e-03, -1.795721560658730e-03, -1.975122776174886e-03, -2.197452368335589e-03, -2.197452368335589e-03, -1.770886818335217e-02, -1.871639737088936e-02, -2.062713531966754e-42, -4.003636679132608e-03, -1.798524294705737e-02, -1.798524294705737e-02, -1.304542489290022e-04, -1.420319197259663e-04, -8.417344312457727e-04, -1.068098339891163e-05, -1.454529590909560e-04, -1.454529590909558e-04, -1.320798754298188e-03, -1.335235932821124e-03, -1.322387462790854e-03, -6.819167828389302e-23, -1.328009889002938e-03, -1.328009889002938e-03, -4.199031734637246e-20, -2.530555161585799e-45, -2.479765975444667e-45, -2.506711837199306e-45, -2.548646442870224e-45, -7.417950572116040e-04, -1.957787168908061e-02, -4.013573202179272e-02, -1.483164309281252e-02, -2.494740697542290e-02, -2.414573265400019e-02, -1.204961603108054e-39, -4.732727990624537e-35, -7.106402178239141e-03, -5.960330107187980e-35, -2.851042042201048e-03, -4.501151271823535e-03, -4.501151271823535e-03, -9.139053412584993e-28, -1.637556110262082e-05, -3.608784888620564e-05, -6.519094380157166e-34, -7.558639346296031e-28, -1.674884750025755e-05, -3.978216040602209e-01, -1.822864813970724e-01, -4.364141654710378e-38, -2.822277672518639e-01, -2.530305788100226e-01, -2.530305788100226e-01, -2.984729488086723e-01, -2.285648425990187e-02, -3.607284465406621e-02, -6.216462135639590e-02, -4.612314742111095e-02, -7.043526818852417e-39, -2.801739216513797e-02, -3.881460127744555e-37, -1.247435342236853e-02, -4.146595242867079e-38, -1.657131746559013e-02, -1.657131746559012e-02, -5.844870431497562e-39, -6.760357310266913e-04, -1.057317155421622e-03, -2.912805080427847e-02, -2.518544282482191e-34, -2.790534522060449e-03, -7.017044939248996e-05, -1.360485859483726e-06, -9.633751184515814e-06, -3.027284120181644e-03, -1.700324577881119e-05, -1.700324577881112e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
