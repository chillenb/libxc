
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_b0kcis_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b0kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.589738405728187e+01, -1.589740240735478e+01, -1.589753977845898e+01, -1.589723805723234e+01, -1.589739327212340e+01, -1.589739327212340e+01, -2.719805694958487e+00, -2.719787846228013e+00, -2.719395340893670e+00, -2.720466333691018e+00, -2.719808677654316e+00, -2.719808677654316e+00, -5.929901612564288e-01, -5.927198564852387e-01, -5.871566679909486e-01, -5.903081131022285e-01, -5.928892232311737e-01, -5.928892232311737e-01, -1.906727113860959e-01, -1.921158186476861e-01, -6.951873827010518e-01, -1.585598911570288e-01, -1.911038677324405e-01, -1.911038677324405e-01, -4.791776351324589e-02, -4.849492713698718e-02, -8.898627969005307e-02, -4.315914639325742e-02, -4.802587951212111e-02, -4.802587951212111e-02, -3.889133303206309e+00, -3.888777274546993e+00, -3.889096882038384e+00, -3.888820213676149e+00, -3.888950382781510e+00, -3.888950382781510e+00, -1.649978169064678e+00, -1.657339140617684e+00, -1.650125457899758e+00, -1.655827536005096e+00, -1.654847907925988e+00, -1.654847907925988e+00, -5.031789587799771e-01, -5.482529862908456e-01, -4.841089726332530e-01, -5.057423645738403e-01, -5.176943753159492e-01, -5.176943753159492e-01, -1.349505122929618e-01, -2.035285856460981e-01, -1.319399427636893e-01, -1.503667083093541e+00, -1.425715821751389e-01, -1.425715821751389e-01, -4.234399521168860e-02, -4.350613026688726e-02, -3.328700735289863e-02, -1.022151354272580e-01, -3.951000581566441e-02, -3.951000581566442e-02, -5.139076366309989e-01, -4.982435102306486e-01, -5.014841300213602e-01, -5.053165217306939e-01, -5.032122464107620e-01, -5.032122464107620e-01, -5.139332556281413e-01, -4.403078446780801e-01, -4.513758721954065e-01, -4.633985407279319e-01, -4.570596609052054e-01, -4.570596609052054e-01, -5.729355448914337e-01, -2.404762755093675e-01, -2.715568248568485e-01, -3.268039594299018e-01, -2.962334502576711e-01, -2.962334502576709e-01, -4.071775666483795e-01, -8.861740327953326e-02, -9.950522676665255e-02, -3.089124665638897e-01, -1.151741314878207e-01, -1.151741314878207e-01, -5.269227618464041e-02, -3.089223601083000e-02, -3.542382662029558e-02, -1.100182958762329e-01, -3.544186082667874e-02, -3.544186082667874e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_b0kcis_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b0kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.915056426099580e+01, -1.915062743502959e+01, -1.915091582763765e+01, -1.914988102968987e+01, -1.915059752429474e+01, -1.915059752429474e+01, -3.253806127788461e+00, -3.253834830700422e+00, -3.254735944989258e+00, -3.253609261109442e+00, -3.253835347802420e+00, -3.253835347802420e+00, -7.050255375830006e-01, -7.038324492827753e-01, -6.720101696943578e-01, -6.765794341141765e-01, -7.045920342606522e-01, -7.045920342606522e-01, -2.153535441308856e-01, -2.191256556921152e-01, -8.480219703035391e-01, -1.537559114269867e-01, -2.165244178678404e-01, -2.165244178678404e-01, -1.766323096900674e-02, -1.822285889008021e-02, -5.380848642254302e-02, -1.179430699817680e-02, -1.804991664878483e-02, -1.804991664878483e-02, -4.858438969519761e+00, -4.860406382492625e+00, -4.858634764924775e+00, -4.860164820830033e+00, -4.859454833513153e+00, -4.859454833513153e+00, -1.788724494914214e+00, -1.802336210128656e+00, -1.780082890586513e+00, -1.790662901778451e+00, -1.809258009715154e+00, -1.809258009715154e+00, -6.415653612091037e-01, -7.231740153806467e-01, -6.150627262705858e-01, -6.630318445649638e-01, -6.650873231274232e-01, -6.650873231274232e-01, -1.097481024024451e-01, -2.053012791005089e-01, -1.090453052519537e-01, -1.958257865034314e+00, -1.282176938463431e-01, -1.282176938463431e-01, -1.149178833033273e-02, -1.234037919622540e-02, -9.420288615245352e-03, -7.274468379602403e-02, -1.125315075674643e-02, -1.125315075674642e-02, -6.940605210989356e-01, -6.778462666041171e-01, -6.832187361219304e-01, -6.877022452028497e-01, -6.854242461271056e-01, -6.854242461271056e-01, -6.793674087685098e-01, -5.414356810971495e-01, -5.750363873843420e-01, -6.097449116396642e-01, -5.918745788742710e-01, -5.918745788742711e-01, -7.533474736261144e-01, -2.559121129334364e-01, -3.066347393152173e-01, -4.026675905708604e-01, -3.508411955515948e-01, -3.508411955515947e-01, -4.999839226476513e-01, -5.150771184150940e-02, -6.541008561027088e-02, -3.929079221909567e-01, -9.163643968441249e-02, -9.163643968441265e-02, -2.008601748095065e-02, -6.297303267590742e-03, -8.465646801252747e-03, -8.848097537203004e-02, -9.890822993156979e-03, -9.890822993156977e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_b0kcis_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b0kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.906327099972188e-09, -4.906292830632956e-09, -4.906082919303376e-09, -4.906644805265516e-09, -4.906309509399105e-09, -4.906309509399105e-09, -5.014262473978136e-06, -5.014108591017456e-06, -5.008872326191929e-06, -5.010613804722113e-06, -5.014124945245493e-06, -5.014124945245493e-06, -1.787621734702119e-03, -1.806518157699130e-03, -2.268956845146344e-03, -2.181162527430661e-03, -1.794432908279254e-03, -1.794432908279254e-03, -1.350011826035213e-01, -1.156859814212135e-01, -9.316994247432448e-04, -7.194893135791824e-01, -1.290621986400426e-01, -1.290621986400426e-01, -2.054279725327683e+03, -1.798329729350512e+03, -2.460961572122088e+01, -1.548690001069346e+04, -1.872894620691143e+03, -1.872894620691143e+03, -8.432829919680836e-07, -8.377664921567767e-07, -8.427050957886253e-07, -8.384176575515025e-07, -8.404890550013402e-07, -8.404890550013402e-07, -4.150728274470355e-05, -4.043354314097864e-05, -4.184260014822006e-05, -4.100056318340697e-05, -4.033015455580873e-05, -4.033015455580873e-05, 3.081354360433512e-03, 1.434832506111013e-02, 2.430423224025913e-03, 1.168921519561579e-02, 4.088483428782539e-03, 4.088483428782539e-03, -2.027953649439936e+00, -2.127262978141395e-01, -2.156850202402215e+00, 1.453385878225429e-05, -1.277091195698499e+00, -1.277091195698499e+00, -1.746177857159912e+04, -1.189463756086625e+04, -3.657595425238358e+04, -9.411915105873781e+00, -1.733459173179060e+04, -1.733459173179061e+04, 1.277922226439659e-01, 5.300157317039746e-02, 6.880424604165578e-02, 8.713601875151958e-02, 7.706693248259322e-02, 7.706693248259319e-02, 1.213704791972650e-01, 1.503803743390099e-03, 7.353196239497369e-03, 1.793025429451117e-02, 1.158136919563709e-02, 1.158136919563708e-02, 9.141234499570425e-03, -8.533821155316204e-02, -3.587373041265438e-02, 2.744174772773812e-03, -1.150500407211572e-02, -1.150500407211576e-02, 3.732834161300439e-04, -2.925643772810308e+01, -1.241926493188292e+01, 2.943980931215580e-02, -4.204734995109406e+00, -4.204734995109401e+00, -1.201904680135741e+03, -5.806152111753353e+05, -8.731895098223675e+04, -5.030731425644653e+00, -3.077683712438585e+04, -3.077683712438596e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_b0kcis_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b0kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_b0kcis_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b0kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-4.451048186467107e-05, -4.451212673168141e-05, -4.451987026732749e-05, -4.449317803782933e-05, -4.451134274684643e-05, -4.451134274684643e-05, -2.206751464182322e-04, -2.207585008985260e-04, -2.233118229153663e-04, -2.229331852298185e-04, -2.206920691887229e-04, -2.206920691887229e-04, -1.456724336048125e-03, -1.451203536361062e-03, -1.311740529050211e-03, -1.462549585490904e-03, -1.454973935516007e-03, -1.454973935516007e-03, -1.690378116482746e-02, -1.772808409253058e-02, -3.904174174892482e-04, -3.629678855115205e-03, -1.711891431570798e-02, -1.711891431570798e-02, -1.304148754210628e-04, -1.419747220036446e-04, -8.346090316767930e-04, -1.066306384114477e-05, -1.454017859619842e-04, -1.454017859619841e-04, -1.315907947271794e-03, -1.330300307841881e-03, -1.317553675368811e-03, -1.328732728878834e-03, -1.323012591644255e-03, -1.323012591644255e-03, -6.610491693994399e-04, -7.004176123864724e-04, -6.493590888421108e-04, -6.803018085161899e-04, -7.035964415404480e-04, -7.035964415404480e-04, -1.420903765315733e-02, -1.527781312988792e-02, -9.820184371473990e-03, -1.015112682727093e-02, -1.786067768344142e-02, -1.786067768344142e-02, -2.351388217135076e-03, -6.930372593133680e-03, -2.657007301465804e-03, -9.644533018894040e-04, -4.327334948841105e-03, -4.327334948841105e-03, -1.513397327855466e-05, -1.635036379301853e-05, -3.605617541675977e-05, -1.051818251995811e-03, -1.671309879722550e-05, -1.671309879722548e-05, -2.080632192422332e-01, -1.430789555116191e-01, -1.667287664929998e-01, -1.873135204176821e-01, -1.768564802089689e-01, -1.768564802089689e-01, -8.171211561774590e-02, -2.211313464954362e-02, -3.374206965789668e-02, -5.412098128975931e-02, -4.177006513940943e-02, -4.177006513940942e-02, -1.014477215166485e-02, -9.429352001392621e-03, -1.177930138350660e-02, -1.511452909074783e-02, -1.494287622334828e-02, -1.494287622334829e-02, -1.485514178862088e-02, -6.733208429624467e-04, -1.038340709668551e-03, -2.146604870185437e-02, -2.698121991561320e-03, -2.698121991561330e-03, -6.984451046331636e-05, -1.359419726052035e-06, -9.630764329689962e-06, -2.917163133869448e-03, -1.696518912654674e-05, -1.696518912654667e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
