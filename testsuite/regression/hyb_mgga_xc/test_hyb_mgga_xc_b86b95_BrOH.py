
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_b86b95_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b86b95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.522150823390935e+01, -1.522152405802222e+01, -1.522165153446572e+01, -1.522139123648071e+01, -1.522151610406360e+01, -1.522151610406360e+01, -2.577295371639469e+00, -2.577271262797924e+00, -2.576700109493099e+00, -2.578017026762970e+00, -2.577294961916184e+00, -2.577294961916184e+00, -5.447948390876841e-01, -5.447022004341990e-01, -5.440048288969079e-01, -5.466851510620730e-01, -5.447575070999819e-01, -5.447575070999819e-01, -1.720571020162703e-01, -1.729382710441335e-01, -6.499052097703089e-01, -1.420451752491864e-01, -1.723075897356867e-01, -1.723075897356867e-01, -1.335631165529522e-02, -1.398688579500154e-02, -5.534419982477157e-02, -6.419428946636866e-03, -1.384120879757210e-02, -1.384120879757210e-02, -3.693053673443444e+00, -3.692568380286210e+00, -3.693007940324847e+00, -3.692630558955065e+00, -3.692799065839024e+00, -3.692799065839024e+00, -1.579642977422552e+00, -1.586299175220544e+00, -1.580950379825696e+00, -1.586117605710943e+00, -1.582493282395772e+00, -1.582493282395772e+00, -4.483645242690975e-01, -4.701229048518560e-01, -4.298821677772766e-01, -4.367871606909426e-01, -4.611508519993560e-01, -4.611508519993560e-01, -1.137598459532661e-01, -1.864127263221632e-01, -1.117707063614987e-01, -1.372380788397417e+00, -1.256378932298133e-01, -1.256378932298133e-01, -6.192814955722459e-03, -7.076500374361530e-03, -5.304013415215409e-03, -7.501676306210678e-02, -6.447798517972821e-03, -6.447798517972821e-03, -4.363823556769003e-01, -4.378306769844812e-01, -4.373114904329651e-01, -4.369080809569763e-01, -4.371098892949905e-01, -4.371098892949905e-01, -4.236924980286215e-01, -4.011287586924790e-01, -4.072636799975728e-01, -4.130282396321108e-01, -4.099857611389721e-01, -4.099857611389721e-01, -4.942568241868600e-01, -2.211392095751162e-01, -2.476913097165790e-01, -2.904905138934625e-01, -2.671224173865717e-01, -2.671224173865717e-01, -3.667673107373296e-01, -5.158128686887391e-02, -6.844592784402080e-02, -2.695602632297784e-01, -9.396595918152503e-02, -9.396595918152503e-02, -1.564709937368694e-02, -1.938353383235144e-03, -3.681710336315491e-03, -8.961492923859413e-02, -5.480164969777664e-03, -5.480164969777657e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_b86b95_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b86b95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.812657749173569e+01, -1.812664196323064e+01, -1.812693108023566e+01, -1.812587525152579e+01, -1.812661148009173e+01, -1.812661148009173e+01, -2.989633483787612e+00, -2.989658139496976e+00, -2.990430752489967e+00, -2.989322400976933e+00, -2.989660894719588e+00, -2.989660894719588e+00, -6.122298157088532e-01, -6.111424030586917e-01, -5.829326019846461e-01, -5.857789390428426e-01, -6.118322355971030e-01, -6.118322355971030e-01, -1.741656287881815e-01, -1.761613615237296e-01, -7.750726066261572e-01, -1.445110899247170e-01, -1.747620978049615e-01, -1.747620978049615e-01, -1.772855710309910e-02, -1.855712778927658e-02, -6.976386779972676e-02, -8.552303745753460e-03, -1.836406220797624e-02, -1.836406220797624e-02, -4.529107980198720e+00, -4.531099720419829e+00, -4.529310562370742e+00, -4.530859312515166e+00, -4.530130797469762e+00, -4.530130797469762e+00, -1.618744525597192e+00, -1.630848096161978e+00, -1.611918396707483e+00, -1.621273771130174e+00, -1.636074062284855e+00, -1.636074062284855e+00, -5.391882556656562e-01, -5.962528959781206e-01, -5.159228632848918e-01, -5.475027979775332e-01, -5.597375056495432e-01, -5.597375056495432e-01, -1.251018050991994e-01, -1.832213312743024e-01, -1.222219688291155e-01, -1.741900676134437e+00, -1.312513985894637e-01, -1.312513985894637e-01, -8.250557479133693e-03, -9.425610746496581e-03, -7.065080893100260e-03, -9.005883295718892e-02, -8.588263761605569e-03, -8.588263761605569e-03, -5.689676722376859e-01, -5.633908866109890e-01, -5.654702273400143e-01, -5.670201646858479e-01, -5.662516910931986e-01, -5.662516910931986e-01, -5.514276254890372e-01, -4.550656608116980e-01, -4.834144671802872e-01, -5.106916432971103e-01, -4.969385413426669e-01, -4.969385413426670e-01, -6.243728961152830e-01, -2.174390497847429e-01, -2.521632132183543e-01, -3.283558198827990e-01, -2.855760744365153e-01, -2.855760744365153e-01, -4.154649897419282e-01, -6.577700185678033e-02, -8.417125271247429e-02, -3.178049332834665e-01, -1.059144043865745e-01, -1.059144043865745e-01, -2.075326151958663e-02, -2.584231555173169e-03, -4.907297585829711e-03, -1.010122371377702e-01, -7.300429276365817e-03, -7.300429276365809e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_b86b95_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b86b95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.375700441415018e-09, -5.375664525116755e-09, -5.375445825795638e-09, -5.376035352303433e-09, -5.375681986343874e-09, -5.375681986343874e-09, -6.314554555961423e-06, -6.314663724080589e-06, -6.317185570928985e-06, -6.315852688371386e-06, -6.314458367485826e-06, -6.314458367485826e-06, -2.757624237166082e-03, -2.781437295623016e-03, -3.313059820932857e-03, -3.279968988859749e-03, -2.766407769323424e-03, -2.766407769323424e-03, -3.851472249648046e-01, -3.759877251467538e-01, -3.631067807705534e-04, -6.295403321409220e-01, -3.824951547537641e-01, -3.824951547537641e-01, -3.427642236975334e+00, -3.444906673130403e+00, -1.548815109987278e+00, -2.204819124546539e+00, -3.577325473427040e+00, -3.577325473427040e+00, -1.476084616306192e-06, -1.475684354065266e-06, -1.476044473923140e-06, -1.475733050060096e-06, -1.475879233207623e-06, -1.475879233207623e-06, -5.370456870238413e-05, -5.268035732178311e-05, -5.379779059073852e-05, -5.300287343925359e-05, -5.286567212636184e-05, -5.286567212636184e-05, -5.264387150529067e-03, -1.219074433574007e-03, -5.600347431472095e-03, -7.704498660574301e-04, -4.645533605096266e-03, -4.645533605096266e-03, -8.139671681633893e-01, -2.593997829091479e-01, -9.237786640792301e-01, -4.573179147611630e-05, -8.339277306756853e-01, -8.339277306756853e-01, -2.407572038235005e+00, -2.394852741618461e+00, -6.909558103220458e+00, -1.480233705198733e+00, -3.458800522176522e+00, -3.458800522176296e+00, -3.140312764951284e-03, -4.106238926661187e-03, -3.792037267239832e-03, -3.525753422964278e-03, -3.661381067954385e-03, -3.661381067954385e-03, -2.514578176322647e-03, -1.124216072631176e-02, -9.269798811694353e-03, -7.136402621371907e-03, -8.239216788362209e-03, -8.239216788362213e-03, -7.689334942333299e-04, -1.428887733207227e-01, -9.029889068937302e-02, -3.715399137641398e-02, -6.199792153505290e-02, -6.199792153505294e-02, -1.534344415761928e-02, -1.317883864944616e+00, -1.308738240644080e+00, -3.845275142504914e-02, -1.395578971526959e+00, -1.395578971526964e+00, -2.500856022494852e+00, -3.648493120473314e+00, -3.531630563410813e+00, -1.699239057728676e+00, -4.979126637356737e+00, -4.979126637358170e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_b86b95_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b86b95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-1.453792881020835e-05, -1.453815844837191e-05, -1.453871124683689e-05, -1.453496057061442e-05, -1.453805385589584e-05, -1.453805385589584e-05, -2.775436576906803e-04, -2.775855508915998e-04, -2.787195116710247e-04, -2.766666961361983e-04, -2.775631483849621e-04, -2.775631483849621e-04, -2.355930769489709e-03, -2.326155936325914e-03, -1.624213943089691e-03, -1.639251645310494e-03, -2.345189621909301e-03, -2.345189621909301e-03, -3.960154996545132e-03, -4.321891409453982e-03, -2.589762119739679e-03, -1.210365121099308e-03, -4.071359626015101e-03, -4.071359626015101e-03, -2.971904688411089e-06, -3.390279689868400e-06, -6.932569228204634e-05, -2.686526026535870e-07, -3.421491950835473e-06, -3.421491950835474e-06, -2.270364236199089e-04, -2.280904403504870e-04, -2.271411325631901e-04, -2.279606871468378e-04, -2.275802814273013e-04, -2.275802814273013e-04, -2.619657172859747e-04, -2.670105022861876e-04, -2.519477275473951e-04, -2.557893556152959e-04, -2.791220374975574e-04, -2.791220374975574e-04, -6.561847842347336e-03, -1.240282339943801e-02, -6.733639062756232e-03, -1.215298748333417e-02, -6.923214536847441e-03, -6.923214536847441e-03, -4.299701434995194e-04, -1.456751740288871e-03, -4.869407601727779e-04, -1.934623506917164e-03, -8.147950457462470e-04, -8.147950457462470e-04, -2.575035527888732e-07, -3.760377772443233e-07, -4.770189010703516e-07, -1.807137943766328e-04, -4.274533259165149e-07, -4.274533259165147e-07, -1.720174471106644e-02, -1.414907958778020e-02, -1.514525674058078e-02, -1.598746071056006e-02, -1.555812503198624e-02, -1.555812503198624e-02, -1.879262873722554e-02, -4.786032157844813e-03, -6.887839697489260e-03, -9.933193977300818e-03, -8.256756186165932e-03, -8.256756186165934e-03, -1.114619740287045e-02, -2.039219582609204e-03, -3.148116437615883e-03, -6.753927378774448e-03, -4.714931968855889e-03, -4.714931968855887e-03, -5.187298369985341e-03, -4.672243692400858e-05, -1.115648744901561e-04, -1.094343744547512e-02, -4.028470824938104e-04, -4.028470824938113e-04, -3.464829181194732e-06, -1.603449443640014e-08, -8.721126006235346e-08, -4.396724529975842e-04, -3.942186910684218e-07, -3.942186910684204e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
