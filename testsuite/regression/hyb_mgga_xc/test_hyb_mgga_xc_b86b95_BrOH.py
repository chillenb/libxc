
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_b86b95_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b86b95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.439532392997612e+01, -1.439535754572237e+01, -1.439553316634681e+01, -1.439498207275904e+01, -1.439534144477329e+01, -1.439534144477329e+01, -2.458885721434630e+00, -2.458872503364157e+00, -2.458560758140464e+00, -2.458869572710551e+00, -2.458893270387472e+00, -4.613394154036472e+00, -5.831250503259244e-01, -8.952314558547900e-01, -8.704916332410316e-01, -8.778031173638302e-01, -8.958388322216191e-01, -8.958388322216191e-01, -2.505530323533880e-01, -2.540556563136776e-01, -7.354420493363513e-01, -1.781910655221715e-01, -2.516001650519916e-01, -2.516001650519916e-01, -1.339813829868085e-02, -1.403493923747871e-02, -5.736615931098486e-02, -6.422914257542530e-03, -1.388871975092983e-02, -1.388871975092983e-02, -6.898743120239260e+00, -6.899994340389106e+00, -6.898875301181531e+00, -3.560602995630560e+00, -6.899378864876555e+00, -6.899378864876555e+00, -1.438003137184757e+00, -1.444182198083723e+00, -1.435669679598083e+00, -1.440384607031979e+00, -1.445251090138549e+00, -2.626312698568498e+00, -7.898725685348588e-01, -8.589226669223413e-01, -7.491104158302062e-01, -7.826276307028222e-01, -8.204212284174530e-01, -4.598324829525972e-01, -3.961831105505021e-01, -2.496284592284538e-01, -3.763620738480115e-01, -2.561506703692925e+00, -1.513463091458799e-01, -1.513463091458799e-01, -1.147408535797945e+01, -7.081446851140397e-03, -5.307710302087297e-03, -6.595325524703060e-01, -1.083156088136912e+01, -6.452218956500128e-03, -8.196587857747483e-01, -8.148196751690009e-01, -4.360111628699100e-01, -8.178915379461579e-01, -8.172213232809780e-01, -8.172213232809780e-01, -7.938065342716151e-01, -6.862412269230936e-01, -7.176768740813241e-01, -7.468056991493479e-01, -7.319637520491238e-01, -4.062712123329231e-01, -8.989436327257359e-01, -2.653945668215592e-01, -3.750808837048492e-01, -3.055544072755955e-01, -4.248779185844056e-01, -4.248779185844054e-01, -3.710780150213180e-01, -5.308013467345311e-02, -7.207350126227811e-02, -4.555681250624136e-01, -3.926931101724928e-01, -1.054136050254602e-01, -1.570037019280997e-02, -1.938475815099719e-03, -3.682608052695666e-03, -1.005939769430837e-01, -5.483418383994844e-03, -5.483418383994836e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08

# test_hyb_mgga_xc_b86b95_BrOH_1_vrho() not generated due to NaN in reference data

# test_hyb_mgga_xc_b86b95_BrOH_1_vsigma() not generated due to NaN in reference data


def test_hyb_mgga_xc_b86b95_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b86b95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-3.917658360446694e-05, -3.917641123231473e-05, -3.917551531534577e-05, -3.917834055818163e-05, -3.917649376224852e-05, -3.917649376224852e-05, -9.887043367868360e-04, -9.887007300229396e-04, -9.885308710347032e-04, -9.884593417231744e-04, -9.886951608360740e-04, -1.088127057943561e-04, -1.609190699825020e-02, -5.445291569199639e-04, -4.457820990753864e-04, -4.906601057525088e-04, -5.472813192835486e-04, -5.472813192835486e-04, -3.206213529051575e-03, -3.405537879639008e-03, -1.195932061492321e-02, -5.814545647093815e-04, -3.261184954610921e-03, -3.261184954610921e-03, -2.854209542879652e-06, -3.221278524971632e-06, -5.226901242205083e-05, -1.293516305052723e-07, -3.273217523713364e-06, -3.273217523713362e-06, -2.260864214897733e-04, -2.271450500191080e-04, -2.262036616335068e-04, -4.884199834238407e-04, -2.266163582445033e-04, -2.266163582445033e-04, -2.666387509531268e-03, -2.634635771704018e-03, -2.679393442276249e-03, -2.654371911375143e-03, -2.628347316080931e-03, -2.306579532512466e-04, -3.845479206558942e-03, -6.138139092064929e-03, -3.099991179148219e-03, -4.630928458942915e-03, -4.456210690564821e-03, -1.896391590989731e-02, -3.163010342284969e-01, -1.247515588512206e-03, -3.222752639339310e-01, -6.611528428383694e-04, -5.957261388792424e-04, -5.957261388792424e-04, -1.643503726705519e+01, -2.149252785121762e-07, -3.744939857928815e-07, -6.222606556189200e-01, -1.566836490373383e+01, -2.037749800117448e-07, -1.545821994428226e-02, -1.286815826809269e-02, -1.926676861498073e-02, -1.443319322647636e-02, -1.406840723169111e-02, -1.406840723169111e-02, -1.518402873384943e-02, -4.466058127057368e-03, -6.217108914199265e-03, -8.637116875835189e-03, -7.277045233318473e-03, -2.296871231034412e-02, -4.772113583317611e-03, -8.655545137078187e-02, -2.494354187499923e-03, -4.513165412366922e-02, -3.364268121579992e-03, -3.364268121579991e-03, -2.999566309076233e-02, -3.972220325135665e-05, -7.876582863330349e-05, -5.684563294075566e-03, -4.271985534400362e-01, -2.856852191688238e-04, -1.725217491921660e-06, -5.898705933133634e-09, -7.323067647325690e-08, -3.037106231478319e-04, -1.809211503248215e-07, -1.809211503248210e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
