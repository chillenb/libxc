
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_r2scan50_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_r2scan50", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.094322540030489e+01, -1.094327530401919e+01, -1.094351517724263e+01, -1.094270004862928e+01, -1.094325154260244e+01, -1.094325154260244e+01, -1.644219544694572e+00, -1.644272486884817e+00, -1.645922603972535e+00, -1.645407291475770e+00, -1.644241626367037e+00, -1.906421375231539e+00, -3.448289253694637e-01, -3.762287379166699e-01, -3.652936529434364e-01, -3.686621140510025e-01, -3.764969995026188e-01, -3.764969995026188e-01, -1.123698257606245e-01, -1.139284507605351e-01, -3.991141783774081e-01, -7.882001939290507e-02, -1.128346397432375e-01, -1.128346397432375e-01, -4.288633706109454e-03, -4.550827033710382e-03, -2.362867512385533e-02, -1.464309406638455e-03, -4.506501355616282e-03, -4.506501355616270e-03, -2.859657483840975e+00, -2.860195103904652e+00, -2.859714388489440e+00, -2.770799166726552e+00, -2.859930537653547e+00, -2.859930537653547e+00, -9.351328845102326e-01, -9.457706827309726e-01, -9.307130949784646e-01, -9.390180887041248e-01, -9.481868844299647e-01, -1.088498086570197e+00, -3.369269914237896e-01, -3.659315310942619e-01, -3.197799902502807e-01, -3.341394884491986e-01, -3.497276998366685e-01, -3.472693525708156e-01, -7.177285508910006e-02, -1.104664357660567e-01, -7.102181246586078e-02, -1.066396987045553e+00, -6.747845022845148e-02, -6.747845022845148e-02, -5.599487922306710e-03, -1.710790842617731e-03, -1.317642557477190e-03, -4.904828211065740e-02, -5.805495894231247e-03, -1.537951618948433e-03, -3.500967236551718e-01, -3.480797718423396e-01, -3.483305973807220e-01, -3.493635274825267e-01, -3.490844036810889e-01, -3.490844036810889e-01, -3.394425163566808e-01, -2.942196354348943e-01, -3.075588632119264e-01, -3.198427860360514e-01, -3.135934728191626e-01, -3.135613874223315e-01, -3.822545930142353e-01, -1.426759165898116e-01, -1.642135947517147e-01, -2.064447664221041e-01, -1.854129563188652e-01, -1.854129563188651e-01, -2.632267978119323e-01, -2.151893842353899e-02, -3.030177760142963e-02, -1.988285483523502e-01, -6.071328686783072e-02, -4.654150773451023e-02, -4.865524949922901e-03, -2.836069837983729e-04, -7.518088717464294e-04, -4.458851596197612e-02, -1.272921293274374e-03, -1.272921293274373e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_r2scan50_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_r2scan50", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.601874997875771e+01, -1.601877526795764e+01, -1.601891802194267e+01, -1.601850187632357e+01, -1.601876308326694e+01, -1.601876308326694e+01, -2.520883183295556e+00, -2.520972025971449e+00, -2.523719659383945e+00, -2.522852812350904e+00, -2.520919411368067e+00, -2.388291288260219e+00, -4.592792972661480e-01, -4.575342158199147e-01, -4.368214614615916e-01, -4.444117339153824e-01, -4.580372646741788e-01, -4.580372646741788e-01, -1.464254948351069e-01, -1.487912080276063e-01, -5.235341547003275e-01, -8.421220068278024e-02, -1.471267258890575e-01, -1.471267258890575e-01, -3.731808309560547e-04, 8.508734932718559e-04, 1.306561775150911e-02, -9.402068098231464e-03, 2.328919888617276e-04, 2.328919888693048e-04, -3.738642062862981e+00, -3.739770504817001e+00, -3.738763567959851e+00, -3.861521436944427e+00, -3.739212577263681e+00, -3.739212577263681e+00, -1.407846046386356e+00, -1.427731112741695e+00, -1.399145947371289e+00, -1.415195272665858e+00, -1.432179812194663e+00, -1.357628290894778e+00, -4.384958411187070e-01, -4.790019626020789e-01, -4.144956194119593e-01, -4.359206956151418e-01, -4.561816457390648e-01, -4.645059683786713e-01, -9.059872419847108e-02, -1.348292789734144e-01, -8.963627448462216e-02, -1.376375216204578e+00, -7.178988812591480e-02, -7.178988812591480e-02, -7.266951781442281e-03, -9.268008233966715e-03, -1.467724556259378e-02, -6.221188467147896e-02, -7.531599479990606e-03, -1.072996627747323e-02, -4.597190700292376e-01, -4.569060607186935e-01, -4.581893440196336e-01, -4.587004684991973e-01, -4.583106958001395e-01, -4.583106958001395e-01, -4.455868845039623e-01, -3.834556725974596e-01, -4.023183194449286e-01, -4.192839457362035e-01, -4.107015634674182e-01, -4.111245368647382e-01, -4.993655115069033e-01, -1.807328508462110e-01, -2.108693786693942e-01, -2.982807903624910e-01, -2.404709165191241e-01, -2.404709165191241e-01, -3.766035716112421e-01, 1.921409208032104e-02, 3.729320475643984e-03, -2.604275665739341e-01, -7.674014024138440e-02, -3.665823909894991e-02, 1.278283238041507e-02, -6.357822671232059e-03, -1.162489934267081e-02, -3.625109452836482e-02, -1.232916460174489e-02, -1.232916460173901e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_r2scan50_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_r2scan50", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.672117178049406e-09, -1.672207013457600e-09, -1.672586715075869e-09, -1.671126549858650e-09, -1.672164591426004e-09, -1.672164591426004e-09, 8.948157391987055e-06, 8.946641009017576e-06, 8.899359842449965e-06, 8.914932539082760e-06, 8.947567620173243e-06, -3.287600813270356e-06, 9.544545513426020e-03, -1.771690148443158e-03, -1.990150271693171e-03, -1.919143122836670e-03, -1.766677924168420e-03, -1.766677924168420e-03, -1.282730535340155e-01, -1.180732789248403e-01, 5.251205473136986e-03, -7.359425706512778e-01, -1.252240719362249e-01, -1.252240719362249e-01, -7.566268071340000e+02, -8.210292274459971e+02, -4.478498941170471e+01, 4.377765200661139e+03, -7.929835839416810e+02, -7.929835839424741e+02, -7.818759969615588e-07, -7.819870088958465e-07, -7.818907900991446e-07, -5.168831998754454e-07, -7.819274572984805e-07, -7.819274572984805e-07, 9.753584568710107e-05, 9.295441776490523e-05, 9.958395710952716e-05, 9.581136462622996e-05, 9.197362967934227e-05, -2.929945848137331e-05, -2.229993645133935e-03, -1.471696851496217e-03, -2.820903234921083e-03, -2.198152430070643e-03, -1.884613729079205e-03, 6.888430413486222e-03, 1.514129665494566e+01, -1.872689575671438e-01, 1.582821568194575e+01, -3.355680786515724e-05, -1.310754645092065e+00, -1.310754645092065e+00, -2.363333181873763e+05, 3.392707816131580e+03, 3.096652514643432e+04, 8.031963392827143e+01, -1.677996311341554e+05, 6.322196447234637e+03, -1.091437265480069e-03, -1.331723636030064e-03, 3.962516747630443e-04, -1.196898811297743e-03, -1.231324561121459e-03, -1.231324561121459e-03, -1.257917007482618e-03, -3.500514596784219e-03, -2.686590554927897e-03, -2.049369458790140e-03, -2.361360060439951e-03, 8.890866751889366e-03, -1.347897443296372e-03, 5.836151446954988e-01, -3.535810949890976e-02, 7.028469921174997e-02, -2.042092699661362e-02, -2.042092699661360e-02, 2.518672642021781e-02, -5.780962653680527e+01, -2.088946787479008e+01, -1.253562788643690e-02, 3.161141140865038e+01, -5.162727056178191e+00, -9.314250256933183e+02, 1.582170647789658e+05, 5.711630157699421e+04, -6.008960046190825e+00, 1.523457707678573e+04, 1.523457707677713e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_r2scan50_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_r2scan50", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([8.524456542517587e-04, 8.524399987206076e-04, 8.524136965487531e-04, 8.525059255633024e-04, 8.524426856243479e-04, 8.524426856243479e-04, 2.703440492259699e-03, 2.704186057483647e-03, 2.726508117163252e-03, 2.717657426654760e-03, 2.703635023993768e-03, 2.411092328022363e-03, 1.515338740385814e-03, 9.704169052625632e-03, 9.966657242853665e-03, 9.881323886035239e-03, 9.697781913232851e-03, 9.697781913232851e-03, 2.003788352581613e-02, 1.957526854629356e-02, 4.634594968209445e-04, 3.220058491649514e-02, 1.990454975984868e-02, 1.990454975984868e-02, 1.409157050090160e-02, 1.729298224794737e-02, 6.128266090855253e-02, -7.771390957693289e-03, 1.629875709041112e-02, 1.629875709042597e-02, 1.853031152595720e-03, 1.853853359485726e-03, 1.853123154348519e-03, 2.646859897296091e-03, 1.853440408547712e-03, 1.853440408547712e-03, 3.569097671568878e-03, 3.777516056214734e-03, 3.472485905476115e-03, 3.643791443395345e-03, 3.830830540170730e-03, 3.981362890059131e-03, 9.239296067327795e-03, 7.950146048476362e-03, 9.893977713399359e-03, 9.001272922829859e-03, 8.778855511111090e-03, 6.499908586592464e-03, -2.178961515311110e-04, 2.391177166897043e-02, -2.475884945270817e-04, 4.198901000312136e-03, 3.536528203335547e-02, 3.536528203335547e-02, -1.757137227392442e-07, -7.987871158736740e-03, -3.169124940405521e-02, -7.181292924151115e-05, -1.999022140198361e-07, -1.143347979080252e-02, 5.617568678802910e-03, 6.534150548698476e-03, 3.967840291998953e-03, 6.020426710883760e-03, 6.151996639527074e-03, 6.151996639527074e-03, 5.957693666925910e-03, 9.900523069689710e-03, 8.933162566664552e-03, 7.897556327660232e-03, 8.444599340942695e-03, 2.626129258894140e-03, 8.137603136744585e-03, -2.895736268617713e-04, 1.645328062872836e-02, 2.071831109053318e-02, 1.434260175055438e-02, 1.434260175055435e-02, 1.796215392899106e-02, 6.245525134918850e-02, 5.689717588089926e-02, 1.212567097644182e-02, -2.255389671705588e-04, 4.550142083014241e-02, 2.614644961068810e-02, -7.969586998882040e-03, -1.963827955090182e-02, 4.623711280420975e-02, -1.712136826557505e-02, -1.712136826556507e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
