
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_r2scan50_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_r2scan50", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.161740209033541e+01, -1.161743215666757e+01, -1.161760269494943e+01, -1.161711102579241e+01, -1.161741762392607e+01, -1.161741762392607e+01, -1.747436961320235e+00, -1.747492215283304e+00, -1.749274256824918e+00, -1.749601493994684e+00, -1.747454728965775e+00, -1.747454728965775e+00, -3.353886230807652e-01, -3.349390189520834e-01, -3.237340350553353e-01, -3.288961586252342e-01, -3.352284851677444e-01, -3.352284851677444e-01, -1.113796438404211e-01, -1.128912275098561e-01, -3.824143713903893e-01, -7.237442656456596e-02, -1.118149470225096e-01, -1.118149470225096e-01, -4.116471348233425e-03, -4.364125303939442e-03, -2.172966162837329e-02, -1.543627989474563e-03, -4.322276721040954e-03, -4.322276721040954e-03, -2.859179197312296e+00, -2.859722044554395e+00, -2.859242726191623e+00, -2.859664411782694e+00, -2.859446737262744e+00, -2.859446737262744e+00, -1.062357777315367e+00, -1.073230336200262e+00, -1.060774086863802e+00, -1.069346215342542e+00, -1.071856824531367e+00, -1.071856824531367e+00, -3.324755255370137e-01, -3.625957880502745e-01, -3.126473228029456e-01, -3.291893829454354e-01, -3.463768622311995e-01, -3.463768622311995e-01, -5.182238341733564e-02, -1.084485495756320e-01, -5.158293264636873e-02, -1.010983329188356e+00, -6.247736964820019e-02, -6.247736964820019e-02, -1.480730410470987e-03, -1.766202807791350e-03, -1.342372175478835e-03, -3.152505282452628e-02, -1.625329645938830e-03, -1.625329645938830e-03, -3.498838336366942e-01, -3.477997870301588e-01, -3.485439292461558e-01, -3.491205391288006e-01, -3.488315678194093e-01, -3.488315678194093e-01, -3.391029126417866e-01, -2.937313941726438e-01, -3.070050224911951e-01, -3.192861608485570e-01, -3.130028410881154e-01, -3.130028410881154e-01, -3.770701303256713e-01, -1.376456384476145e-01, -1.622288188398241e-01, -2.053772462968183e-01, -1.831729782884531e-01, -1.831729782884531e-01, -2.631107186275847e-01, -1.969404885913648e-02, -2.775331156529121e-02, -1.971320765119895e-01, -4.262941738907478e-02, -4.262941738907478e-02, -4.891277466275074e-03, -3.232896652122003e-04, -7.681014548492108e-04, -4.097554315555860e-02, -1.362293178822152e-03, -1.362293178822144e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_r2scan50_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_r2scan50", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.511466498920065e+01, -1.511471186226214e+01, -1.511494264252836e+01, -1.511417537334552e+01, -1.511468951795338e+01, -1.511468951795338e+01, -2.472976874164863e+00, -2.473014016992571e+00, -2.474153165737962e+00, -2.473174590058689e+00, -2.473003286776108e+00, -2.473003286776108e+00, -4.833273112197496e-01, -4.825301141032868e-01, -4.630188915594187e-01, -4.706075195874332e-01, -4.830444562433416e-01, -4.830444562433416e-01, -1.478290368623029e-01, -1.508298633812468e-01, -5.297525616352776e-01, -1.083705710738490e-01, -1.487602881338330e-01, -1.487602881338330e-01, -7.271409771813815e-03, -7.715565360830452e-03, -3.533009385656885e-02, -2.850460958170650e-03, -7.620141359251643e-03, -7.620141359251644e-03, -3.738858194581032e+00, -3.739985632319225e+00, -3.738976841013003e+00, -3.739853329211837e+00, -3.739431914485833e+00, -3.739431914485833e+00, -1.323867337975738e+00, -1.339940194221556e+00, -1.318300597543652e+00, -1.331345800906147e+00, -1.342078641084036e+00, -1.342078641084036e+00, -4.464210858392997e-01, -4.850914382129798e-01, -4.288711437844673e-01, -4.462420291751575e-01, -4.617953643166519e-01, -4.617953643166519e-01, -7.817494925242915e-02, -1.293077313784251e-01, -7.763746725415518e-02, -1.444896356464182e+00, -8.209767377926029e-02, -8.209767377926029e-02, -2.737560458618001e-03, -3.248066568501262e-03, -2.479968354088197e-03, -5.046260018328532e-02, -2.991345585790630e-03, -2.991345585790629e-03, -4.600016834313292e-01, -4.573379219194866e-01, -4.583406209265380e-01, -4.590812697799415e-01, -4.587149171805005e-01, -4.587149171805005e-01, -4.459993948072108e-01, -3.838209128059452e-01, -4.030676859132036e-01, -4.201083619554524e-01, -4.116154027460852e-01, -4.116154027460852e-01, -5.088409943945820e-01, -1.728367909578455e-01, -2.115665678951185e-01, -2.800354026203857e-01, -2.442774610889485e-01, -2.442774610889486e-01, -3.499871064470808e-01, -3.153273457650783e-02, -4.445889673924318e-02, -2.689123377262268e-01, -6.439633217834428e-02, -6.439633217834431e-02, -8.672664683819196e-03, -6.166171200157846e-04, -1.444422945803752e-03, -6.251120114696576e-02, -2.516089147231066e-03, -2.516089147231057e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_r2scan50_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_r2scan50", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-3.063427407055765e-09, -3.063401034955111e-09, -3.063162478390217e-09, -3.063589564702167e-09, -3.063414602408254e-09, -3.063414602408254e-09, -6.212444600402308e-06, -6.212965513544261e-06, -6.227810593688521e-06, -6.225473110886492e-06, -6.212441640192122e-06, -6.212441640192122e-06, -8.273139182861894e-04, -8.279910966660776e-04, -8.907541491402356e-04, -1.133329463727668e-03, -8.278806238371968e-04, -8.278806238371968e-04, -1.605796973313502e-01, -1.432299861780314e-01, 1.721006428548738e-04, 1.368310047649025e-01, -1.555913007187524e-01, -1.555913007187524e-01, 8.122403288080307e+01, 7.708226536800659e+01, 2.592631922749191e+00, 2.833697223426263e+02, 7.781560744023615e+01, 7.781560744023632e+01, -7.853037800050968e-07, -7.853834769728706e-07, -7.852716558815374e-07, -7.853358250750836e-07, -7.853980814037689e-07, -7.853980814037689e-07, -4.238713450482622e-05, -3.940725878655829e-05, -4.178578703174061e-05, -3.934007045050086e-05, -4.107254850222151e-05, -4.107254850222151e-05, -2.206406252117967e-03, -2.480468775465068e-04, -2.490286909120586e-03, -4.446507011440330e-04, -1.863601521702825e-03, -1.863601521702825e-03, 1.527378401918273e-01, -2.966001778548126e-01, 1.532017411851906e-01, -4.520722404177222e-05, -8.085303966171391e-01, -8.085303966171391e-01, 3.133729634829490e+02, 2.466178961906937e+02, 7.658737946391916e+02, 1.492625553954221e+00, 3.650022598611529e+02, 3.650022598611528e+02, -7.052518961512865e-04, -1.169974752220980e-03, -1.026264330688271e-03, -8.971902351005067e-04, -9.635248475388849e-04, -9.635248475388866e-04, -2.652313646617317e-04, -3.701360054784686e-03, -2.765343565481516e-03, -1.998089620731920e-03, -2.361650491159035e-03, -2.361650491159034e-03, -2.649708094959119e-04, -9.639960640409367e-02, -4.837341210995812e-02, -1.167163825267675e-02, -2.465045948888449e-02, -2.465045948888443e-02, -6.202355454235352e-03, 1.832425120092056e+00, 1.450449974590111e+00, -2.273078761507258e-03, 2.353797070716741e-01, 2.353797070716789e-01, 5.628707221892949e+01, 3.182676393093257e+03, 9.992492103159252e+02, 4.675224025766319e-01, 6.077755569755504e+02, 6.077755569755532e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_r2scan50_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_r2scan50", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([4.946658685768994e-04, 4.946649661987095e-04, 4.946469408564240e-04, 4.946610286838121e-04, 4.946655221710921e-04, 4.946655221710921e-04, 4.114603055238287e-03, 4.115045389413917e-03, 4.128358263595032e-03, 4.128322305508572e-03, 4.114672817412400e-03, 4.114672817412400e-03, 6.717351913321300e-03, 6.687724806576184e-03, 6.203329404339149e-03, 7.425714237096988e-03, 6.708233284922500e-03, 6.708233284922500e-03, 2.562785902347643e-02, 2.500336256742344e-02, 1.096589839237315e-03, 3.938715032515564e-03, 2.550949524462916e-02, 2.550949524462916e-02, 1.296304500589371e-04, 8.843381137101525e-05, 6.617676113877825e-04, -2.938520310413549e-07, 1.350226074640160e-04, 1.350226074640125e-04, 1.859470857865061e-03, 1.860228696808630e-03, 1.859474148923205e-03, 1.860067626044247e-03, 1.859957695544395e-03, 1.859957695544395e-03, 5.424016620132603e-03, 5.172049485176427e-03, 5.313345002803189e-03, 5.104447512096179e-03, 5.390211308866501e-03, 5.390211308866501e-03, 1.126394348177935e-02, 7.625061213611582e-03, 1.297697525765957e-02, 9.477370543960979e-03, 1.019695405702384e-02, 1.019695405702384e-02, 4.163014739398665e-03, 3.589996624358031e-02, 4.715361754697059e-03, 6.906821008909329e-03, 2.602604990638725e-02, 2.602604990638725e-02, -1.440559047710156e-06, -5.983271341693967e-07, -7.618510479520665e-06, 2.842717758511940e-04, -4.208523513079517e-07, -4.208523513079510e-07, 5.063373449918581e-03, 6.402548068774713e-03, 6.003671657296126e-03, 5.632626317175673e-03, 5.825078287804512e-03, 5.825078287804512e-03, 4.663293605428383e-03, 1.047865325886013e-02, 9.403847902622496e-03, 8.144482900263549e-03, 8.819921991214586e-03, 8.819921991214574e-03, 8.480489277899690e-03, 2.466752151758763e-02, 2.225707513703123e-02, 1.663405249078779e-02, 1.869008938197152e-02, 1.869008938197150e-02, 1.387254843351850e-02, 1.505780706396000e-03, 8.392705107166038e-04, 1.283384025909844e-02, 5.196041898346845e-03, 5.196041898346810e-03, 2.878797103561838e-07, -7.661441042836730e-08, -6.544340539253582e-06, 4.431887281235494e-03, -4.576831706912553e-07, -4.576831706911721e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
