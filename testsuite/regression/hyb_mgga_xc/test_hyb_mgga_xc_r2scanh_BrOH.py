
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_r2scanh_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_r2scanh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.088947247612405e+01, -2.088952658411297e+01, -2.088983385494092e+01, -2.088894905589326e+01, -2.088950042729171e+01, -2.088950042729171e+01, -3.106813389933111e+00, -3.106915928117350e+00, -3.110227770931337e+00, -3.110932556081784e+00, -3.106845211495810e+00, -3.106845211495810e+00, -5.713857365626146e-01, -5.706934176049545e-01, -5.535597945807196e-01, -5.628522220347284e-01, -5.711399813838154e-01, -5.711399813838154e-01, -1.863124324279349e-01, -1.885639667462821e-01, -6.477208578780942e-01, -1.171987046156939e-01, -1.869201757817001e-01, -1.869201757817001e-01, -6.343240477686139e-03, -6.723956704554719e-03, -3.445090631169580e-02, -2.351700201689468e-03, -6.660494104878824e-03, -6.660494104878824e-03, -5.125363211275760e+00, -5.126334294250589e+00, -5.125477531723996e+00, -5.126231834272114e+00, -5.125840892415835e+00, -5.125840892415835e+00, -1.892000544922394e+00, -1.911880408170549e+00, -1.889473565673226e+00, -1.905147338215315e+00, -1.908894334900487e+00, -1.908894334900487e+00, -5.741785840206911e-01, -6.248383696483312e-01, -5.343062980253911e-01, -5.599706005488627e-01, -6.004969751475435e-01, -6.004969751475435e-01, -8.383096664675899e-02, -1.824497876480726e-01, -8.331175444371292e-02, -1.775156089446838e+00, -1.017454854393003e-01, -1.017454854393003e-01, -2.254700376085118e-03, -2.693232016701820e-03, -2.031508176008201e-03, -5.018286916400366e-02, -2.471205064852600e-03, -2.471205064852600e-03, -6.097402039017100e-01, -6.062875640827279e-01, -6.075222944327462e-01, -6.084776095934789e-01, -6.079985666334905e-01, -6.079985666334905e-01, -5.894625538197176e-01, -5.110638325365729e-01, -5.340732966865499e-01, -5.553117738707140e-01, -5.443919715644242e-01, -5.443919715644242e-01, -6.476638151712721e-01, -2.344162235332762e-01, -2.758239797809371e-01, -3.470763973301434e-01, -3.112664236996669e-01, -3.112664236996669e-01, -4.529999321174670e-01, -3.127150017832750e-02, -4.424239474193380e-02, -3.312386425098218e-01, -6.842207381619617e-02, -6.842207381619619e-02, -7.538826538934640e-03, -4.863996499604575e-04, -1.162154677944697e-03, -6.553523255985162e-02, -2.064273215161553e-03, -2.064273215161542e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_r2scanh_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_r2scanh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.717302532293843e+01, -2.717310986042118e+01, -2.717352628446715e+01, -2.717214251628991e+01, -2.717306955937907e+01, -2.717306955937907e+01, -4.396229030864718e+00, -4.396305961009273e+00, -4.398666199427899e+00, -4.396905233118569e+00, -4.396278553180491e+00, -4.396278553180491e+00, -8.116414465303213e-01, -8.104093333953351e-01, -7.800250454267451e-01, -7.919706727991690e-01, -8.112029027606957e-01, -8.112029027606957e-01, -2.272438289945543e-01, -2.326568012671418e-01, -8.826162924379425e-01, -1.698238317801518e-01, -2.288608149948475e-01, -2.288608149948475e-01, -9.783538363991432e-03, -1.087595936988848e-02, -5.447890805219684e-02, -4.309148131673921e-03, -1.043627343629523e-02, -1.043627343629527e-02, -6.699638714664919e+00, -6.701703789503194e+00, -6.699856474899237e+00, -6.701461862788179e+00, -6.700688959184258e+00, -6.700688959184258e+00, -2.338865514886897e+00, -2.369163883662189e+00, -2.329321387058754e+00, -2.353939104514608e+00, -2.372005403674864e+00, -2.372005403674864e+00, -7.706283321843097e-01, -8.527034578410897e-01, -7.361845517620940e-01, -7.792873163008065e-01, -8.002032501748184e-01, -8.002032501748184e-01, -1.217670117693437e-01, -1.884187083918845e-01, -1.205544812313290e-01, -2.576446032693588e+00, -1.250376213465886e-01, -1.250376213465886e-01, -4.133852676338123e-03, -4.911686788459840e-03, -3.712980730753539e-03, -7.844958116519520e-02, -4.509606173435429e-03, -4.509606173435428e-03, -8.072903170751526e-01, -8.005747619446625e-01, -8.030228248265636e-01, -8.048870463395382e-01, -8.039583998987585e-01, -8.039583998987585e-01, -7.830136231749238e-01, -6.600706874526839e-01, -6.965636574324312e-01, -7.296984762216465e-01, -7.130334322346891e-01, -7.130334322346891e-01, -8.955656951711899e-01, -2.724913307936591e-01, -3.400137176734629e-01, -4.654954860751945e-01, -4.002428626143646e-01, -4.002428626143647e-01, -5.933087704470275e-01, -4.790138747691366e-02, -6.893466461165308e-02, -4.496644302549425e-01, -9.882013570829987e-02, -9.882013570829995e-02, -1.320900348257343e-02, -9.231111817106216e-04, -2.163409040306648e-03, -9.585258240027880e-02, -3.780351802434605e-03, -3.780351802434593e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_r2scanh_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_r2scanh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-5.582165738759572e-09, -5.582118183857765e-09, -5.581683661523147e-09, -5.582453672832887e-09, -5.582142688129866e-09, -5.582142688129866e-09, -1.228653080095210e-05, -1.228767099705738e-05, -1.231989077171145e-05, -1.230846466179029e-05, -1.228658574282116e-05, -1.228658574282116e-05, -2.525962134093796e-03, -2.522329935448901e-03, -2.489068710800822e-03, -2.791916567923583e-03, -2.525097438957615e-03, -2.525097438957615e-03, -7.573982569589903e-01, -7.228005388469655e-01, -4.112494623225097e-04, 2.429994485325526e-02, -7.490086868737854e-01, -7.490086868737854e-01, -4.063145624948802e+01, 1.738920891611741e+01, 2.784582512534704e+00, 4.120676047688001e+02, -1.919743392879315e+01, -1.919743392878854e+01, -1.496269779173576e-06, -1.496625935983653e-06, -1.496226845863030e-06, -1.496508073081140e-06, -1.496557635142177e-06, -1.496557635142177e-06, -8.295314551358164e-05, -7.707702843670527e-05, -8.160979624883816e-05, -7.679564980691216e-05, -8.056815813962896e-05, -8.056815813962896e-05, -9.615101582592798e-03, -6.595060188967268e-03, -1.254607299083837e-02, -1.117869261459829e-02, -7.817036571873655e-03, -7.817036571873655e-03, -1.175346620739926e-01, -8.595230252822610e-01, -1.810589565445744e-01, -1.317415113854571e-04, -1.895611936441290e+00, -1.895611936441290e+00, 4.529451662984374e+02, 3.573715459017216e+02, 1.083273153660557e+03, 1.851631422870018e+00, 5.279493541312461e+02, 5.279493541312459e+02, -5.635542387614230e-03, -6.125033984165092e-03, -5.983045699865750e-03, -5.846246433510737e-03, -5.917461897108055e-03, -5.917461897108059e-03, -6.257300400909369e-03, -1.145946241471609e-02, -9.835956356776625e-03, -8.669964208408341e-03, -9.243574903570704e-03, -9.243574903570702e-03, -5.999943939655950e-03, -2.879893929561285e-01, -1.657004103203286e-01, -6.542342329560880e-02, -1.026388624507373e-01, -1.026388624507373e-01, -2.355515253209185e-02, 4.847164931254277e-01, 1.519422577575459e+00, -7.402386644345242e-02, -4.754787138950960e-01, -4.754787138950844e-01, 8.028959672215383e+01, 4.661968246685243e+03, 1.410949957161145e+03, -2.192770659595282e-01, 8.776007098671100e+02, 8.776007098671132e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_r2scanh_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_r2scanh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_r2scanh_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_r2scanh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [8.994285260624730e-04, 8.994269701284961e-04, 8.993943618358068e-04, 8.994185894035262e-04, 8.994279427515819e-04, 8.994279427515819e-04, 7.805534570536416e-03, 7.806488994988359e-03, 7.835195415766367e-03, 7.833874258852479e-03, 7.805696020922426e-03, 7.805696020922426e-03, 1.266190321292755e-02, 1.261854630091424e-02, 1.186744122347370e-02, 1.358626606556404e-02, 1.264844407696861e-02, 1.264844407696861e-02, 8.491889824833684e-02, 8.476393074079724e-02, 2.372090147732308e-03, 9.406154350832051e-03, 8.511170820811906e-02, 8.511170820811906e-02, 2.796777306007395e-03, 1.898518339564228e-03, 1.881928756538889e-03, 6.623710031144538e-07, 2.609070696799980e-03, 2.609070696799895e-03, 3.511912787380712e-03, 3.513837066795577e-03, 3.511967733977622e-03, 3.513471924108436e-03, 3.513086875868284e-03, 3.513086875868284e-03, 1.041826092095480e-02, 9.928454093189832e-03, 1.018963103332719e-02, 9.783838010209590e-03, 1.037088724127187e-02, 1.037088724127187e-02, 3.354480210503470e-02, 3.072178891220402e-02, 3.793993667243892e-02, 3.621343243605781e-02, 3.038748979830707e-02, 3.038748979830707e-02, 9.773362750060799e-03, 9.301188560060800e-02, 1.113286410438684e-02, 1.517939202488331e-02, 5.224428201757804e-02, 5.224428201757804e-02, 3.046942892597941e-06, 1.600315115391829e-06, 9.737707592189840e-06, 7.730267276380800e-04, 8.432212499805441e-07, 8.432212499805395e-07, 2.187470352557307e-02, 2.305638759693870e-02, 2.275515777096826e-02, 2.242653426390326e-02, 2.260176871017301e-02, 2.260176871017301e-02, 2.315821140020482e-02, 2.697343312696660e-02, 2.628503765721226e-02, 2.558400109350388e-02, 2.603462924191487e-02, 2.603462924191485e-02, 3.169660308345512e-02, 6.387460934593786e-02, 6.190280901177191e-02, 5.282796726999870e-02, 5.629051756830547e-02, 5.629051756830544e-02, 3.972930648961158e-02, 4.190808377299250e-03, 2.234699903822252e-03, 5.277793448459477e-02, 1.263432998335701e-02, 1.263432998335692e-02, 6.810418678275747e-06, 2.764740148338125e-08, 6.004590429321739e-06, 1.107685504447431e-02, 6.392869173813264e-07, 6.392869173814086e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
