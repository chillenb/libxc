
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_r2scanh_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_r2scanh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.962340980945187e+01, -1.962350136038381e+01, -1.962394064108803e+01, -1.962244535724707e+01, -1.962345777411210e+01, -1.962345777411210e+01, -2.859905995094020e+00, -2.860003208550441e+00, -2.863032752504353e+00, -2.862079499803232e+00, -2.859946147946838e+00, -3.412810978024105e+00, -5.552362399383751e-01, -6.620771765805696e-01, -6.428342114831705e-01, -6.487075455273384e-01, -6.625490953885059e-01, -6.625490953885059e-01, -1.904326007342832e-01, -1.930984723259316e-01, -6.439236836147757e-01, -1.335021944230002e-01, -1.912286663054468e-01, -1.912286663054468e-01, -7.059692048571630e-03, -7.491545505133846e-03, -3.935419148669196e-02, -2.419282006080184e-03, -7.417210852286515e-03, -7.417210852286493e-03, -5.126274404416487e+00, -5.127235652543000e+00, -5.126376117258554e+00, -4.943279468114902e+00, -5.126762655191836e+00, -5.126762655191836e+00, -1.598133083492881e+00, -1.617111619565937e+00, -1.590226003190453e+00, -1.605068041574294e+00, -1.621421812003393e+00, -1.941321410548809e+00, -5.890059494545201e-01, -6.403055340524116e-01, -5.586483902984929e-01, -5.837952493728552e-01, -6.117038968466117e-01, -5.802409846822698e-01, -1.003224528344671e-01, -1.881567724548794e-01, -9.922093477524478e-02, -1.900001873390702e+00, -1.137176887679222e-01, -1.137176887679222e-01, -6.971653906219192e-03, -2.824587033205781e-03, -2.168542103909625e-03, -6.671097510874952e-02, -7.234338529673038e-03, -2.538063101476402e-03, -6.110561790017077e-01, -6.076159339154426e-01, -6.046182410967881e-01, -6.098062340786063e-01, -6.093302663209557e-01, -6.093302663209557e-01, -5.920188435794745e-01, -5.125485995529417e-01, -5.359649143065099e-01, -5.575409648319523e-01, -5.465637083749300e-01, -5.285801191116697e-01, -6.697956003668781e-01, -2.139820724100149e-01, -2.821045290560217e-01, -3.258107166817918e-01, -3.192725654190344e-01, -3.192725654190343e-01, -4.232769481978710e-01, -3.582888296953297e-02, -5.064103199463567e-02, -3.424213276969713e-01, -8.385446652407934e-02, -7.796982073658461e-02, -8.039969585518758e-03, -4.692305098804680e-04, -1.240434697506906e-03, -7.456651125668257e-02, -2.099391661738278e-03, -2.099391661738275e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_r2scanh_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_r2scanh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.886374834535643e+01, -2.886379260209936e+01, -2.886404406177261e+01, -2.886331555540922e+01, -2.886377126751560e+01, -2.886377126751560e+01, -4.443319942304661e+00, -4.443521227384986e+00, -4.449729211623612e+00, -4.447674095936168e+00, -4.443396526058708e+00, -4.261906515678872e+00, -7.727269453834180e-01, -7.870322086738926e-01, -7.493087782210288e-01, -7.631793960174280e-01, -7.879493135217733e-01, -7.879493135217733e-01, -2.340875724040885e-01, -2.384350474686095e-01, -8.731204387744460e-01, -1.188265223268863e-01, -2.353736000750941e-01, -2.353736000750941e-01, 8.427183855082862e-02, 8.663342016794827e-02, 7.602305595436407e-02, 4.140376407009212e-02, 8.507257620871481e-02, 8.507257620873082e-02, -6.699269761923563e+00, -6.701336120521542e+00, -6.699492356754930e+00, -6.951010091768589e+00, -6.700314311375842e+00, -6.700314311375842e+00, -2.442064161533960e+00, -2.475721597908340e+00, -2.427955704237762e+00, -2.454307022410611e+00, -2.483509158433124e+00, -2.406764416207187e+00, -7.590371155748504e-01, -8.346194028513230e-01, -7.148025078752888e-01, -7.552252744586041e-01, -7.916788669129686e-01, -8.296715673207357e-01, -1.291311767496201e-01, -2.109471377224077e-01, -1.277225770121858e-01, -2.444642821022657e+00, -9.708310692981709e-02, -9.708310692981709e-02, -9.096579074084373e-03, 4.760052729983338e-02, 2.803549891524515e-02, -8.587375043939882e-02, -9.436805836621927e-03, 4.094503531802765e-02, -8.056161662804225e-01, -7.991163378497581e-01, -8.068478312794770e-01, -8.032285933559310e-01, -8.023254060512049e-01, -8.023254060512049e-01, -7.797176828777099e-01, -6.602605660123753e-01, -6.958592417293282e-01, -7.283037662297932e-01, -7.118276663870792e-01, -7.344320017334882e-01, -8.701415823777523e-01, -2.836158760329689e-01, -3.480266336188339e-01, -4.845423953431293e-01, -4.018459330017684e-01, -4.018459330017683e-01, -6.311820403321859e-01, 9.122560528689677e-02, 5.343689521278829e-02, -4.393931220479437e-01, -1.079187787246537e-01, -3.089707340085230e-02, 1.171950593332600e-01, 4.632899723736442e-03, 1.579818278594039e-02, -3.061464249626691e-02, 3.125242073561438e-02, 3.125242073562073e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_r2scanh_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_r2scanh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-6.512448310212421e-09, -6.512470199368790e-09, -6.512514093776775e-09, -6.512164989595616e-09, -6.512460192010684e-09, -6.512460192010684e-09, 5.467373444809085e-06, 5.464515846621368e-06, 5.377138001962820e-06, 5.409415028499342e-06, 5.466477653013059e-06, -6.187347039766988e-06, 8.811225197273410e-03, -3.733942966178923e-03, -4.144800019703802e-03, -4.020357065510282e-03, -3.724558335552184e-03, -3.724558335552184e-03, -4.716956342309155e-01, -4.452849549512369e-01, 5.085918134064235e-03, -1.871870826558157e+00, -4.636511651101625e-01, -4.636511651101625e-01, -1.114327220271040e+04, -9.969045792745368e+03, -1.243056202277414e+02, -2.845044669966835e+04, -1.034169467448114e+04, -1.034169467448283e+04, -1.489396922314867e-06, -1.489813431992814e-06, -1.489447824554538e-06, -1.769887385900551e-06, -1.489597592829453e-06, -1.489597592829453e-06, 7.232707421502684e-05, 6.722834548546030e-05, 7.456667682007507e-05, 7.045782419138492e-05, 6.603957858021603e-05, -5.676466377878769e-05, -6.208032553630122e-03, -4.584184480879396e-03, -7.555925318115827e-03, -6.435941286061691e-03, -5.400411600218620e-03, -6.240675438439341e-04, 1.492030320385246e+01, -5.065749895437167e-01, 1.559334481860368e+01, -6.795923902022316e-05, -3.474946209437080e+00, -3.474946209437080e+00, -2.733649410241829e+05, -2.745370568723509e+04, -7.818487504395927e+04, 7.894009771139123e+01, -1.992963071658251e+05, -3.479239591822313e+04, -5.682353464575731e-03, -5.859405500955863e-03, -5.335491776661733e-03, -5.774688516852129e-03, -5.800831512617324e-03, -5.800831512617324e-03, -6.434047608352411e-03, -1.048855067594210e-02, -8.874877658413931e-03, -7.685084743913903e-03, -8.253857191979031e-03, -3.553129664996643e-03, -3.854240686727589e-03, 5.544696616269071e-01, -1.039253764225750e-01, 4.522042934181005e-02, -6.387316954961186e-02, -6.387316954961181e-02, 1.181432172601474e-02, -1.621229387578364e+02, -5.495056389307312e+01, -4.785746563213192e-02, 3.111270804757300e+01, -1.366780442831075e+01, -5.886193291399170e+03, -1.460323774673259e+05, -9.833561385730427e+04, -1.627341179424433e+01, -5.169797589108355e+04, -5.169797589109308e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_r2scanh_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_r2scanh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.597891944538001e-03, 1.597881341441783e-03, 1.597831921093094e-03, 1.598004848125695e-03, 1.597886379634952e-03, 1.597886379634952e-03, 4.973408348974122e-03, 4.975070081814971e-03, 5.025045316430326e-03, 5.005263538411442e-03, 4.973846364228238e-03, 4.491799262663062e-03, 4.591173495727876e-03, 1.960775939842096e-02, 1.998269964135935e-02, 1.988764321335419e-02, 1.959892728879774e-02, 1.959892728879774e-02, 5.558349072098369e-02, 5.483070006518836e-02, 1.471522142295734e-03, 7.602861750623785e-02, 5.535948367591809e-02, 5.535948367591809e-02, 1.890323597507853e-01, 1.943892388061296e-01, 1.658558977090051e-01, 5.319925392791322e-02, 1.954334452953610e-01, 1.954334452953926e-01, 3.499295247406855e-03, 3.501341490382762e-03, 3.499523608385729e-03, 5.443386196878581e-03, 3.500315124374968e-03, 3.500315124374968e-03, 6.453731220139376e-03, 6.790989031038023e-03, 6.308010888207122e-03, 6.570494368385720e-03, 6.883322603624676e-03, 7.577953359672784e-03, 2.241089092579512e-02, 2.096173976251521e-02, 2.335080699463993e-02, 2.255942687077097e-02, 2.175900884726328e-02, 3.240975555135812e-02, 6.141070559135338e-05, 5.740946131357040e-02, 6.875374497988037e-05, 8.288107190904831e-03, 8.644193412294307e-02, 8.644193412294307e-02, -1.132544757903827e-07, 6.878530149255713e-02, 8.269343210792551e-02, -3.314871436434382e-06, -1.279691764754473e-07, 6.597192269249824e-02, 2.140385182258116e-02, 2.203316421532286e-02, 2.327796431403003e-02, 2.173881144456479e-02, 2.183261385397789e-02, 2.183261385397789e-02, 2.216730921304741e-02, 2.497081282865769e-02, 2.401748078295152e-02, 2.314612524845779e-02, 2.358110906688772e-02, 3.279058499891820e-02, 2.027921968596402e-02, 4.289411780744873e-03, 4.066529021711374e-02, 3.730678701795217e-02, 3.653814980646912e-02, 3.653814980646906e-02, 3.736379230343922e-02, 1.712402049398297e-01, 1.455526083350660e-01, 3.405197943187685e-02, 2.802205934058447e-05, 1.140009508469727e-01, 1.604593681088042e-01, 7.571471621676353e-03, 3.478708224539351e-02, 1.180155524389591e-01, 6.022804160735318e-02, 6.022804160736385e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
