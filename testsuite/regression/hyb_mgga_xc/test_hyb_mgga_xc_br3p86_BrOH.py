
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_br3p86_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_br3p86", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.490592585146380e+01, -1.490595112499511e+01, -1.490612419881776e+01, -1.490570948850007e+01, -1.490593865833621e+01, -1.490593865833621e+01, -2.788879058505410e+00, -2.788852879053581e+00, -2.788225746428130e+00, -2.789802222829885e+00, -2.788875818410319e+00, -2.788875818410319e+00, -6.047086039973707e-01, -6.046759078682231e-01, -6.049533538980730e-01, -6.072486120221726e-01, -6.046835433694493e-01, -6.046835433694493e-01, -1.950685401206252e-01, -1.963169829665506e-01, -7.007937474386968e-01, -1.614047669712680e-01, -1.954099019363911e-01, -1.954099019363911e-01, -5.894810564327731e-02, -5.967836269518217e-02, -1.006472475486321e-01, -5.098152495471665e-02, -5.915455530084720e-02, -5.915455530084720e-02, -6.757243816468494e+00, -5.046220517268235e+00, -3.163038109937936e+00, -7.298341750255187e+00, -3.481266764927626e+00, -4.632706131174576e+00, -1.198842855904612e+00, -2.005910275159361e+00, -1.803326302321144e+00, -1.816822114578758e+00, -1.809922633511738e+00, -1.632609426431967e+00, -9.359568877334167e-01, -7.809015851226313e-01, -8.125026258141209e-01, -5.126548715523426e-01, -5.495405135264724e-01, -5.790567098957896e-01, -5.719066296781217e-02, -3.080817856145232e-01, -5.663358975794672e-02, -1.629317370151762e+00, -1.363720213747353e-01, -1.214089281656104e-01, -9.721552313394587e-02, -1.543226990294395e+00, -5.049013751706953e-03, -3.831697008659888e-02, -6.796513308499208e-02, -6.065042808164996e-03, -1.999121631214155e+01, -4.110638145775673e-01, -4.129921036804451e-01, -3.255387940762616e+00, -4.137577985323261e-01, -5.904300527832254e+01, -4.052007958059560e-01, -4.606366349637357e-01, -7.428322117788669e-01, -4.033953552098911e-01, -5.214131737366773e-01, -9.136049329066519e-01, -1.058888256886909e+00, -1.486330767300374e-01, -1.808444848448603e-01, -2.400992223307862e-01, -3.582137493111078e-01, -3.296134989551704e-01, -4.228349289412591e-01, -1.751585070823185e-01, -1.187460824239223e-01, -3.109136323037373e-01, -4.718308824085855e-02, -1.096982384046747e-01, -1.351564945629146e-02, -1.558894710371651e-01, -3.587441367149124e-03, -4.667170392866077e-02, -5.210097913144265e-03, -5.210036174046170e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_br3p86_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_br3p86", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.178301765454099e+01, -2.178307393469684e+01, -2.178337984899859e+01, -2.178245752156887e+01, -2.178304685643579e+01, -2.178304685643579e+01, -3.607253722616021e+00, -3.607309880359853e+00, -3.609002347607029e+00, -3.606844423733424e+00, -3.607297769195968e+00, -3.607297769195968e+00, -7.380870400537048e-01, -7.370524566255271e-01, -7.104778119759932e-01, -7.150519669638520e-01, -7.377056729243585e-01, -7.377056729243585e-01, -2.295643210495221e-01, -2.324709461401253e-01, -8.843028041303241e-01, -1.670100871645542e-01, -2.304284521298181e-01, -2.304284521298181e-01, -3.270303467695022e-02, -3.318871401852137e-02, -5.018784032673965e-02, -2.528094339362319e-02, -3.289899064233741e-02, -3.289899064233739e-02, -6.624592321618546e+00, -5.700504727464469e+00, -4.254110903737395e+00, -6.951260710002775e+00, -5.099758776155305e+00, -5.538566129802859e+00, -1.608915887618892e+00, -2.130807011985002e+00, -1.981514747466720e+00, -1.998238271002555e+00, -2.013042434645575e+00, -1.911476449518563e+00, -8.961185551135757e-01, -8.203281710651796e-01, -8.052766514414840e-01, -6.792122326697203e-01, -6.999709649287287e-01, -7.078747402755921e-01, -8.536086138354579e-02, -3.017863118195925e-01, -8.590118608399505e-02, -2.125106021517823e+00, -1.302776255986771e-01, -1.113974147282546e-01, -6.123277025556566e-02, -9.227053512014760e-01, -6.512470765534299e-03, -4.099592319776382e-02, -4.148885023265479e-02, -7.877702691881058e-03, -1.276262599561368e+01, -5.478105950073154e-01, -5.477481806880312e-01, -2.386846695953676e+00, -5.476892424143645e-01, -3.620284597032722e+01, -5.304859325086684e-01, -5.780752266564374e-01, -7.501427102641476e-01, -5.941775591649037e-01, -6.357822794581535e-01, -8.598977478073023e-01, -1.001522417239635e+00, -2.339954435134794e-01, -2.768825885313282e-01, -3.502073989083196e-01, -4.049655522628186e-01, -3.864308284698311e-01, -5.266583494230819e-01, -1.099962321165984e-01, -6.856605639062967e-02, -3.988905181072087e-01, -6.705102479197327e-02, -8.369403146341804e-02, -1.627273203579315e-02, -9.495854319341286e-02, -4.715323566085046e-03, -6.562555612485926e-02, -6.762042354558961e-03, -6.761889428691119e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_br3p86_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_br3p86", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.044934019000249e-09, -4.044866755396685e-09, -4.044630779207018e-09, -4.045732056792849e-09, -4.044897960593494e-09, -4.044897960593494e-09, -8.159675699242970e-06, -8.159692687763262e-06, -8.158994056978896e-06, -8.154211072592462e-06, -8.159562941048515e-06, -8.159562941048515e-06, -2.945038323353344e-03, -2.944573487358912e-03, -2.941423105302630e-03, -2.917893958015101e-03, -2.945293126164644e-03, -2.945293126164644e-03, -1.702772523417748e-01, -1.659420409796513e-01, -1.695977935804187e-03, -4.836679151419845e-01, -1.690945683445785e-01, -1.690945683445784e-01, -1.492743171550420e+03, -1.321963274559974e+03, -2.691354766304894e+01, -1.035828053213679e+04, -1.375960629306522e+03, -1.375960629306523e+03, -1.498099055562206e-07, -6.041088426687963e-07, 1.657463747460615e-07, -9.206866036710972e-08, -3.058867469074915e-07, -9.305052418009985e-07, 1.700876462830953e-06, -3.047856428570122e-05, -4.719703423539829e-05, -4.566984229631019e-05, -4.600580143730172e-05, -7.439898535082502e-05, 3.673764738880676e-03, 3.676160222643012e-03, 4.054846455960838e-03, -3.630468432121829e-03, -3.137611497946165e-03, -1.403076877861535e-03, 3.526055861869911e-01, 3.676166674734106e-02, 4.628069392233522e-01, -3.777947779687623e-05, -1.191626665163393e+00, -1.893514350170168e+00, -4.298288992061376e+03, -9.109454136849320e+01, -1.364317915155652e+02, -1.170361198381294e+00, -6.595481212552522e+03, -3.299384324639332e+01, 8.738070183240392e-03, 7.419389631883240e-03, 7.791878516448368e-03, 8.025064696131816e-03, 7.958628838855545e-03, 7.956659841759681e-03, 1.045263029608331e-02, -7.953898705018015e-03, 4.536046143031981e-03, 4.657970090595100e-03, -1.697553388384076e-03, 5.927052943336032e-03, 3.731527783494195e-03, 7.952822802026360e-02, 5.356653277941223e-02, 3.140357328589468e-02, 5.274720950262875e-04, -1.358189830184785e-02, -1.048519929641477e-02, -1.618814435054600e+01, -1.141279499875623e+01, -3.598117190320511e-02, 5.180808413727140e-01, -4.444357160148683e+00, -3.516970274790784e+01, -4.895836322548490e+04, -7.625085089420521e+00, -8.300691730059910e-02, -6.904652787285781e+01, -6.897552562728940e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_br3p86_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_br3p86", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([-1.498411906687934e-04, -1.498396983817400e-04, -1.498364471862060e-04, -1.498608567078992e-04, -1.498403732806424e-04, -1.498403732806424e-04, -1.447876307125900e-03, -1.447920651549434e-03, -1.449103792350262e-03, -1.446873466437224e-03, -1.447894999045444e-03, -1.447894999045444e-03, -5.336466778805728e-03, -5.309680598635779e-03, -4.627362500815750e-03, -4.679341646493238e-03, -5.327274214047749e-03, -5.327274214047749e-03, -1.087267437425675e-02, -1.116212828484882e-02, -5.234025152176503e-03, -8.441808030927513e-03, -1.096772831139450e-02, -1.096772831139449e-02, -6.032286766161944e-03, -6.105467690789376e-03, -6.663608089023818e-03, -4.789370746878948e-03, -6.152915809678920e-03, -6.152915809678921e-03, -1.766203324862888e-04, -4.320950944788673e-04, -2.423355753032020e-07, -1.454042328970447e-04, -2.645808787230872e-04, -6.140278558066555e-04, -9.618600092649252e-08, -9.770290759576997e-04, -1.430156717710947e-03, -1.410535066941398e-03, -1.461924702990345e-03, -2.325090390684103e-03, -1.029486816295301e-03, -1.988559865623981e-03, -1.356735027673450e-03, -8.345884074924259e-03, -6.655272217296810e-03, -5.149117380937962e-03, -1.446858552358940e-05, -2.797439391952539e-03, -2.964548934267196e-07, -2.366103359281943e-03, -9.739771841894279e-03, -1.368586130070659e-02, -1.781680398534583e-03, -4.811394637862003e-05, -1.659589585060722e-15, -5.654367701805387e-06, -3.078394311511609e-03, -3.474084945355430e-11, -6.956872804406903e-06, -3.280974147335489e-12, -9.098371496438333e-15, -9.923069242808550e-05, -5.412575095827565e-12, -1.664123557022438e-06, -1.717064417014082e-14, -7.534863089342335e-03, -1.592984772966219e-03, -2.047021393439316e-03, -5.629664251308644e-03, -9.869210067885857e-04, -9.345136770345342e-04, -3.194955326147097e-07, -1.146211640878450e-07, -1.050473992819193e-05, -4.878196687015468e-03, -6.549393218214907e-03, -7.823215626629791e-03, -2.225343464085968e-03, -5.611183442659299e-03, -1.218244113865203e-02, -6.531595522689150e-07, -9.649136149864750e-03, -5.794362007258796e-09, -6.230429289252052e-04, -1.808868596425427e-11, -1.339593517548741e-03, -2.047772298172108e-08, -3.297504338582611e-11])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_br3p86_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_br3p86", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([5.993647626751735e-04, 5.993587935269606e-04, 5.993457887448232e-04, 5.994434268315976e-04, 5.993614931225688e-04, 5.993614931225688e-04, 5.791505228503593e-03, 5.791682606197736e-03, 5.796415169401049e-03, 5.787493865748897e-03, 5.791579996181776e-03, 5.791579996181776e-03, 2.134586711522291e-02, 2.123872239454313e-02, 1.850945000326299e-02, 1.871736658597295e-02, 2.130909685619100e-02, 2.130909685619100e-02, 4.349069749702700e-02, 4.464851313939529e-02, 2.093610060870601e-02, 3.376723212371005e-02, 4.387091324557799e-02, 4.387091324557797e-02, 2.412914706464778e-02, 2.442187076315752e-02, 2.665443235609527e-02, 1.915748298751579e-02, 2.461166323871568e-02, 2.461166323871569e-02, 7.064813299451551e-04, 1.728380377915468e-03, 9.693423012128079e-07, 5.816169315881787e-04, 1.058323514892351e-03, 2.456111423226622e-03, 3.847440037059701e-07, 3.908116303830799e-03, 5.720626870843790e-03, 5.642140267765594e-03, 5.847698811961378e-03, 9.300361562736411e-03, 4.117947265181203e-03, 7.954239462495925e-03, 5.426940110693800e-03, 3.338353629969701e-02, 2.662108886918724e-02, 2.059646952375185e-02, 5.787434209435326e-05, 1.118975756781016e-02, 1.185819573706618e-06, 9.464413437127773e-03, 3.895908736757712e-02, 5.474344520282637e-02, 7.126721594138334e-03, 1.924557855144801e-04, 6.638358340242887e-15, 2.261747080722155e-05, 1.231357724604644e-02, 1.389633978320825e-10, 2.782749121762761e-05, 1.312389658981778e-11, 3.639348595584236e-14, 3.969227697123420e-04, 2.165030038331026e-11, 6.656494228089752e-06, 6.868257668056327e-14, 3.013945235736934e-02, 6.371939091864874e-03, 8.188085573757255e-03, 2.251865700523457e-02, 3.947684027154343e-03, 3.738054708138137e-03, 1.277982130458839e-06, 4.584846563513799e-07, 4.201895971276853e-05, 1.951278674806187e-02, 2.619757287285962e-02, 3.129286250651921e-02, 8.901373856343871e-03, 2.244473377063720e-02, 4.872976455460813e-02, 2.612638209074503e-06, 3.859654459945900e-02, 2.317744802903518e-08, 2.492171715700822e-03, 7.235474387030701e-11, 5.358374070194963e-03, 8.191089192688432e-08, 1.319001736091029e-10])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
