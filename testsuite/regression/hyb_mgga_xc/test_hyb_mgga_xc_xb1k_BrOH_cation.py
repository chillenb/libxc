
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_xb1k_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_xb1k", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-8.317154482983199e+00, -8.317165225289388e+00, -8.317239230880945e+00, -8.317078835360469e+00, -8.317159148632527e+00, -8.317159148632527e+00, -1.428667010367090e+00, -1.428651938980083e+00, -1.428318571442661e+00, -1.428957294250986e+00, -1.428585805723426e+00, -1.428585805723426e+00, -3.125774418097571e-01, -3.123757495585424e-01, -3.081087691450900e-01, -3.095171524913403e-01, -3.103131582240605e-01, -3.103131582240605e-01, -9.518803185102523e-02, -9.592129000248656e-02, -3.743032236673362e-01, -8.046847883413577e-02, -8.728492719834494e-02, -8.728492719834492e-02, -1.886594581553920e-02, -1.886775589489925e-02, -3.574044322907958e-02, -1.730606412929377e-02, -1.756219549974250e-02, -1.756219549974249e-02, -2.037988623740131e+00, -2.037751509341473e+00, -2.037980707096100e+00, -2.037771368262012e+00, -2.037866772588803e+00, -2.037866772588803e+00, -8.677517964566143e-01, -8.717978034041390e-01, -8.674971960442196e-01, -8.710648915434316e-01, -8.701218563004192e-01, -8.701218563004192e-01, -2.611176632898646e-01, -2.763756849127006e-01, -2.466570780142627e-01, -2.545998565912762e-01, -2.640520146513816e-01, -2.640520146513816e-01, -6.506335935021987e-02, -1.008622277192835e-01, -6.163068078978978e-02, -7.782217609026888e-01, -6.963741625344132e-02, -6.963741625344132e-02, -1.563499746698800e-02, -1.667152244126634e-02, -1.090427638692695e-02, -4.668318864501256e-02, -1.329401491645438e-02, -1.329401491645439e-02, -2.494626992576206e-01, -2.501289579785125e-01, -2.499122932668798e-01, -2.497189443599855e-01, -2.498174697332380e-01, -2.498174697332380e-01, -2.437839727218757e-01, -2.260333583337986e-01, -2.311729651950527e-01, -2.361199285218918e-01, -2.335883744231632e-01, -2.335883744231632e-01, -2.905384903552043e-01, -1.200536656313648e-01, -1.365991452460893e-01, -1.670013117405232e-01, -1.502293764289201e-01, -1.502293764289201e-01, -2.107986500105967e-01, -3.536304414429436e-02, -4.175813821885030e-02, -1.591720268371531e-01, -5.355996048997676e-02, -5.355996048997677e-02, -2.122115790086365e-02, -9.679439843114930e-03, -1.263350513629496e-02, -5.152269368225595e-02, -1.249555115115237e-02, -1.249555115115236e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_xb1k_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_xb1k", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-9.982157278396935e+00, -9.982140487876240e+00, -9.982199535375905e+00, -9.982171545480178e+00, -9.982327916048124e+00, -9.982355347575933e+00, -9.981846085462614e+00, -9.981746603299888e+00, -9.982179709443857e+00, -9.981986369882234e+00, -9.982179709443857e+00, -9.981986369882234e+00, -1.692503469151081e+00, -1.692581443236765e+00, -1.692507651878717e+00, -1.692593165537009e+00, -1.692706394012098e+00, -1.692769620523364e+00, -1.692269543858804e+00, -1.692382007439529e+00, -1.692283638827150e+00, -1.692526415155039e+00, -1.692283638827150e+00, -1.692526415155039e+00, -3.786998445664147e-01, -3.798741688255616e-01, -3.778661749362797e-01, -3.794059237466531e-01, -3.631603024542902e-01, -3.604576149705055e-01, -3.623284923455409e-01, -3.626811669622374e-01, -3.752683102347079e-01, -3.520678430543230e-01, -3.752683102347079e-01, -3.520678430543230e-01, -1.023823612562281e-01, -1.003073557001747e-01, -1.043924155941682e-01, -1.020510805683662e-01, -4.726541112131777e-01, -4.757030162326406e-01, -7.748149708229110e-02, -7.680049464502320e-02, -8.160444873162150e-02, -9.637040558588758e-02, -8.160444873162148e-02, -9.637040558588757e-02, -5.194512457708318e-03, -5.370949900645745e-03, -5.296269056487830e-03, -5.500731215836862e-03, -2.413001363515155e-02, -2.553261426458685e-02, -4.086854719530800e-03, -4.071314950162920e-03, -4.887933202627938e-03, -3.301198949652873e-03, -4.887933202627929e-03, -3.301198949652869e-03, -2.511624506592308e+00, -2.511082725958016e+00, -2.512558754323647e+00, -2.511988545078724e+00, -2.511674085923019e+00, -2.511113992960577e+00, -2.512478214972669e+00, -2.511934423506240e+00, -2.512103478349939e+00, -2.511538267720606e+00, -2.512103478349939e+00, -2.511538267720606e+00, -9.380685261230777e-01, -9.379252133853593e-01, -9.448681501567429e-01, -9.445962016345625e-01, -9.303976335859329e-01, -9.317390907609142e-01, -9.362884779335036e-01, -9.376795457220145e-01, -9.469907751068858e-01, -9.432158379664398e-01, -9.469907751068858e-01, -9.432158379664398e-01, -3.226378766960445e-01, -3.220313116098757e-01, -3.481058699857162e-01, -3.479283003011396e-01, -3.046254676619355e-01, -3.054646578986229e-01, -3.151178024871725e-01, -3.179409428702560e-01, -3.295512471600342e-01, -3.247143155814758e-01, -3.295512471600342e-01, -3.247143155814758e-01, -5.768583517946673e-02, -5.735000426753793e-02, -9.888856336958747e-02, -9.878561655715637e-02, -5.469398427280796e-02, -5.419051940968815e-02, -9.778813399291515e-01, -9.775487968962033e-01, -6.582978102778547e-02, -6.188971618129856e-02, -6.582978102778547e-02, -6.188971618129856e-02, -3.432866225104088e-03, -3.562591045241509e-03, -3.913542266318490e-03, -3.983398311113882e-03, -2.709635083083020e-03, -2.746412605900613e-03, -4.108491966164358e-02, -4.128210009863219e-02, -3.006080878801769e-03, -3.499795180744353e-03, -3.006080878801777e-03, -3.499795180744354e-03, -3.216711777343598e-01, -3.222035757830752e-01, -3.200213837121316e-01, -3.205266763185013e-01, -3.206843851973087e-01, -3.211969424555925e-01, -3.211675418496976e-01, -3.216874348558033e-01, -3.209340868171838e-01, -3.214499909910716e-01, -3.209340868171838e-01, -3.214499909910716e-01, -3.131310282091651e-01, -3.136065695852015e-01, -2.671162803667918e-01, -2.674050474320444e-01, -2.814460061402249e-01, -2.818172866879303e-01, -2.955179888124895e-01, -2.958829889656567e-01, -2.885330421997057e-01, -2.888497929145812e-01, -2.885330421997057e-01, -2.888497929145812e-01, -3.645893274020577e-01, -3.643546849880471e-01, -1.236547516198331e-01, -1.234852815180862e-01, -1.491296318513285e-01, -1.487941896545972e-01, -2.009698633582689e-01, -2.012194425938745e-01, -1.725475285706677e-01, -1.724934795825190e-01, -1.725475285706677e-01, -1.724934795825191e-01, -2.512808312281667e-01, -2.512824336595619e-01, -2.328120616051516e-02, -2.345267093416850e-02, -3.349378706684615e-02, -3.434193372640574e-02, -1.975108582082024e-01, -1.953819468278287e-01, -4.855755297768195e-02, -4.651294179579427e-02, -4.855755297768194e-02, -4.651294179579426e-02, -6.525549039290066e-03, -6.649966648166961e-03, -1.912068412976303e-03, -1.745529147283961e-03, -2.696674532273749e-03, -2.740666474707119e-03, -4.569415151999891e-02, -4.568780813792747e-02, -2.659864086903952e-03, -3.337595174491659e-03, -2.659864086903957e-03, -3.337595174491653e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_xb1k_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_xb1k", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-5.376152264837014e-09, 0.000000000000000e+00, -5.376220199599297e-09, -5.376120183207525e-09, 0.000000000000000e+00, -5.376196483359160e-09, -5.375958962911011e-09, 0.000000000000000e+00, -5.375983983177737e-09, -5.376328138710319e-09, 0.000000000000000e+00, -5.376448232074813e-09, -5.376139827326632e-09, 0.000000000000000e+00, -5.376217678097782e-09, -5.376139827326632e-09, 0.000000000000000e+00, -5.376217678097782e-09, -5.124321136682873e-06, 0.000000000000000e+00, -5.122680611266652e-06, -5.124623680971258e-06, 0.000000000000000e+00, -5.122729059026777e-06, -5.128668135183912e-06, 0.000000000000000e+00, -5.128916532374264e-06, -5.133511244492664e-06, 0.000000000000000e+00, -5.131768297252259e-06, -5.126387448280783e-06, 0.000000000000000e+00, -5.135618442488207e-06, -5.126387448280783e-06, 0.000000000000000e+00, -5.135618442488207e-06, -2.521186192510272e-04, 0.000000000000000e+00, -8.841809090419026e-05, -3.182493719013140e-04, 0.000000000000000e+00, -1.124249847381823e-04, -1.144326633709592e-03, 0.000000000000000e+00, -1.376259160421912e-03, -1.377937958292643e-03, 0.000000000000000e+00, -1.341876782499599e-03, 5.994977091947334e-05, 0.000000000000000e+00, -2.068467895955277e-03, 5.994977091947334e-05, 0.000000000000000e+00, -2.068467895955277e-03, -3.078579728350949e-01, 0.000000000000000e+00, -3.178409242813263e-01, -2.871331418518615e-01, 0.000000000000000e+00, -2.994229082282996e-01, 1.529522361604300e-03, 0.000000000000000e+00, 1.714377082609980e-03, -7.529602901376191e-01, 0.000000000000000e+00, -7.522784480678939e-01, -4.378054025640991e-01, 0.000000000000000e+00, -8.247902637813054e-02, -4.378054025640987e-01, 0.000000000000000e+00, -8.247902637812921e-02, -6.440002644160399e+03, 0.000000000000000e+00, -5.393002857529773e+03, -5.712469191240482e+03, 0.000000000000000e+00, -4.680393321295518e+03, -2.969842269863853e+01, 0.000000000000000e+00, -2.513630603277987e+01, -2.720019112811489e+04, 0.000000000000000e+00, -2.833100056578954e+04, -8.941866824107650e+03, 0.000000000000000e+00, -5.881481188091186e+04, -8.941866824107659e+03, 0.000000000000000e+00, -5.881481188091184e+04, -1.418295594559669e-06, 0.000000000000000e+00, -1.419522587044533e-06, -1.418671990739516e-06, 0.000000000000000e+00, -1.419881948138967e-06, -1.418326218751660e-06, 0.000000000000000e+00, -1.419539245823743e-06, -1.418644863676195e-06, 0.000000000000000e+00, -1.419869059627287e-06, -1.418483119418163e-06, 0.000000000000000e+00, -1.419701208987266e-06, -1.418483119418163e-06, 0.000000000000000e+00, -1.419701208987266e-06, -4.551150865691835e-05, 0.000000000000000e+00, -4.554866541895570e-05, -4.462642163298581e-05, 0.000000000000000e+00, -4.468428432079245e-05, -4.602653375751487e-05, 0.000000000000000e+00, -4.599766084893697e-05, -4.525118277106780e-05, 0.000000000000000e+00, -4.521002423200861e-05, -4.467489013220582e-05, 0.000000000000000e+00, -4.493958123615872e-05, -4.467489013220582e-05, 0.000000000000000e+00, -4.493958123615872e-05, -1.117006127073815e-03, 0.000000000000000e+00, -1.183603119780597e-03, 3.367526569387255e-03, 0.000000000000000e+00, 3.251935471438396e-03, 1.226706693749391e-03, 0.000000000000000e+00, -2.108393695101178e-04, 1.484975680157494e-02, 0.000000000000000e+00, 9.496636111567222e-03, -1.263534702113988e-03, 0.000000000000000e+00, -3.027863279277156e-04, -1.263534702113994e-03, 0.000000000000000e+00, -3.027863279277190e-04, -1.912093801464729e+00, 0.000000000000000e+00, -1.915316537769821e+00, -2.953880780116155e-01, 0.000000000000000e+00, -2.936231729215517e-01, -2.430343283210441e+00, 0.000000000000000e+00, -2.282326203042187e+00, -1.129279067101399e-05, 0.000000000000000e+00, -1.125874609873948e-05, -1.363311412154150e+00, 0.000000000000000e+00, -1.493692847704817e+00, -1.363311412154150e+00, 0.000000000000000e+00, -1.493692847704817e+00, -6.848897341825379e+04, 0.000000000000000e+00, -5.887260003397246e+04, -3.205140123747357e+04, 0.000000000000000e+00, -3.001624181552123e+04, -1.204695852351192e+05, 0.000000000000000e+00, -1.052271182030702e+05, -6.698772544553489e+00, 0.000000000000000e+00, -6.526348111884988e+00, -9.322663349184349e+04, 0.000000000000000e+00, -3.720957404013100e+04, -9.322663349184339e+04, 0.000000000000000e+00, -3.720957404013098e+04, 1.518959891182614e-03, 0.000000000000000e+00, 1.411553998984747e-03, 2.138826870774491e-04, 0.000000000000000e+00, 1.602458926344124e-04, 6.873845360182377e-04, 0.000000000000000e+00, 6.204487512287016e-04, 1.087639323240418e-03, 0.000000000000000e+00, 1.000378490481882e-03, 8.899057726564526e-04, 0.000000000000000e+00, 8.127728796842766e-04, 8.899057726564526e-04, 0.000000000000000e+00, 8.127728796842766e-04, 3.919488098441381e-03, 0.000000000000000e+00, 3.705894283055049e-03, -6.936967163570777e-03, 0.000000000000000e+00, -6.898558514378724e-03, -4.695415041581984e-03, 0.000000000000000e+00, -4.664422293247041e-03, -1.874732129893782e-03, 0.000000000000000e+00, -1.895554031808779e-03, -3.322450938074038e-03, 0.000000000000000e+00, -3.352824875824507e-03, -3.322450938074038e-03, 0.000000000000000e+00, -3.352824875824504e-03, 3.195915952847337e-03, 0.000000000000000e+00, 2.979962226838000e-03, -1.340197489100126e-01, 0.000000000000000e+00, -1.334844900724111e-01, -6.833789737243559e-02, 0.000000000000000e+00, -6.828727009666992e-02, -1.100135947013307e-02, 0.000000000000000e+00, -1.085297304482923e-02, -3.630703066031326e-02, 0.000000000000000e+00, -3.628033820685322e-02, -3.630703066031327e-02, 0.000000000000000e+00, -3.628033820685324e-02, -7.088261701876706e-03, 0.000000000000000e+00, -7.235220935429507e-03, -3.119276825964006e+01, 0.000000000000000e+00, -3.054719264616487e+01, -1.186978757347021e+01, 0.000000000000000e+00, -1.090625927158592e+01, 5.745584515947741e-03, 0.000000000000000e+00, -3.285465757541878e-03, -3.966649507842999e+00, 0.000000000000000e+00, -4.161813262179233e+00, -3.966649507843001e+00, 0.000000000000000e+00, -4.161813262179235e+00, -2.153955286309646e+03, 0.000000000000000e+00, -1.955669460366720e+03, -2.025225453770814e+06, 0.000000000000000e+00, -2.356571487259286e+06, -2.272220608481428e+05, 0.000000000000000e+00, -1.935246970877978e+05, -4.750192764200937e+00, 0.000000000000000e+00, -4.625018905666539e+00, -1.334430578586197e+05, 0.000000000000000e+00, -4.831739741280932e+04, -1.334430578586200e+05, 0.000000000000000e+00, -4.831739741280948e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_xb1k_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_xb1k", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_xb1k_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_xb1k", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-1.453789028236753e-05, -1.453795539533437e-05, -1.453819599291548e-05, -1.453817725604425e-05, -1.453863452856280e-05, -1.453895670951458e-05, -1.453519611389047e-05, -1.453456982004614e-05, -1.453809985687147e-05, -1.453592645007412e-05, -1.453809985687147e-05, -1.453592645007412e-05, -2.773989440474821e-04, -2.777448485755736e-04, -2.774399024960354e-04, -2.778084148197651e-04, -2.786639438061573e-04, -2.789831013985793e-04, -2.764684431128833e-04, -2.768336125599870e-04, -2.773459159014582e-04, -2.778996350686698e-04, -2.773459159014582e-04, -2.778996350686698e-04, -2.491933376166078e-03, -2.642184406024723e-03, -2.443485038052027e-03, -2.625098956656117e-03, -1.892260784642392e-03, -1.718606872764310e-03, -1.784285750730145e-03, -1.842295697882058e-03, -2.877173658706024e-03, -1.074779912048118e-03, -2.877173658706024e-03, -1.074779912048118e-03, -2.393230896972181e-03, -2.713708004130124e-03, -2.615544232205190e-03, -3.002092192391819e-03, -2.055021085824489e-03, -2.505285064109242e-03, -9.520634906531265e-04, -9.656735293285018e-04, -2.354546618229709e-03, -4.301318033992195e-04, -2.354546618229706e-03, -4.301318033992202e-04, -2.997087148185276e-07, -3.518866688465333e-07, -3.601478287499169e-07, -4.346246878873608e-07, -2.296147427444176e-05, -2.686840224581216e-05, -6.513783696351832e-08, -6.041348501259918e-08, -2.169816319607273e-07, -1.113827375369721e-07, -2.169816319607280e-07, -1.113827375369724e-07, -2.269464053455427e-04, -2.269942041936558e-04, -2.280519143712854e-04, -2.280628082763925e-04, -2.270020733267227e-04, -2.270268297199039e-04, -2.279506377716149e-04, -2.279975920571464e-04, -2.275163759208161e-04, -2.275310559213020e-04, -2.275163759208161e-04, -2.275310559213020e-04, -2.646821730286466e-04, -2.646819876534644e-04, -2.699096506917164e-04, -2.698297537548436e-04, -2.456280887323677e-04, -2.511417099558468e-04, -2.500045673272401e-04, -2.554573505090169e-04, -2.824632236149086e-04, -2.694761276964254e-04, -2.824632236149086e-04, -2.694761276964254e-04, -6.347379240705518e-03, -6.390511160701925e-03, -1.184698105674906e-02, -1.195811997073223e-02, -6.321235538715860e-03, -6.490396976230268e-03, -1.327119950005738e-02, -1.243099175812918e-02, -6.676694104181627e-03, -6.989931597318513e-03, -6.676694104181627e-03, -6.989931597318513e-03, -2.781922350892201e-04, -2.928988132952843e-04, -1.076133359808841e-03, -1.086732839708232e-03, -2.304560833431565e-04, -2.641079765903469e-04, -1.927400997080872e-03, -1.929892281417028e-03, -4.987911163701257e-04, -7.898358953142875e-04, -4.987911163701257e-04, -7.898358953142875e-04, -4.030688190349819e-08, -3.894187119486963e-08, -7.056855839852068e-08, -6.799578383656435e-08, -1.755342139979134e-07, -2.301047862615557e-07, -1.134151689771698e-04, -1.109104482960024e-04, -9.269830704810115e-08, -2.249914142493880e-07, -9.269830704810089e-08, -2.249914142493877e-07, -1.717652751912049e-02, -1.713619248568862e-02, -1.386428745944997e-02, -1.386672723675737e-02, -1.491063312506914e-02, -1.490782769044810e-02, -1.587685030660696e-02, -1.584744786659725e-02, -1.538304991477683e-02, -1.536705133539403e-02, -1.538304991477683e-02, -1.536705133539403e-02, -1.929224223085034e-02, -1.920034085401544e-02, -4.370113379078337e-03, -4.409813643531602e-03, -6.427959367186009e-03, -6.497529364432018e-03, -9.824749734082082e-03, -9.829088996211842e-03, -7.943079478903152e-03, -7.949467297785930e-03, -7.943079478903152e-03, -7.949467297785928e-03, -1.059149578002199e-02, -1.072681605893395e-02, -1.540683307611430e-03, -1.564565636171346e-03, -2.429583102321081e-03, -2.531861492405219e-03, -6.287727115763946e-03, -6.323005669183542e-03, -4.006584648178532e-03, -4.059123384598535e-03, -4.006584648178535e-03, -4.059123384598537e-03, -4.805309699537307e-03, -4.900319655551454e-03, -1.988346384035491e-05, -2.028650905216560e-05, -4.476415823168420e-05, -5.025037174718308e-05, -9.841532611841538e-03, -1.007052461472450e-02, -2.184009360754973e-04, -3.122002109861319e-04, -2.184009360754975e-04, -3.122002109861319e-04, -6.466774595219028e-07, -7.290699924745556e-07, -5.755693045808994e-09, -1.026365461509461e-08, -2.775916785357306e-08, -3.528415037704372e-08, -2.162876966262462e-04, -2.221903081659497e-04, -1.636920504245606e-07, -1.823002569306333e-07, -1.636920504245608e-07, -1.823002569306335e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
