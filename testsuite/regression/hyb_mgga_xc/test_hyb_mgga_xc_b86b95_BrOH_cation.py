
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_b86b95_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b86b95", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.522184905072458e+01, -1.522186723642531e+01, -1.522199922738083e+01, -1.522172758008922e+01, -1.522186264676187e+01, -1.522186264676187e+01, -2.577411438548592e+00, -2.577380904195851e+00, -2.576718364295049e+00, -2.578147757603254e+00, -2.577339480539945e+00, -2.577339480539945e+00, -5.452696533267452e-01, -5.451381629666922e-01, -5.433807075209838e-01, -5.462929170220862e-01, -5.471785283192715e-01, -5.471785283192715e-01, -1.699860683572469e-01, -1.710042492640707e-01, -6.424250486216370e-01, -1.433078522256585e-01, -1.601123053829401e-01, -1.601123053829400e-01, -7.935072196186388e-03, -8.355651384131238e-03, -4.537506715512964e-02, -4.576736036768462e-03, -6.386465121931634e-03, -6.386465121931632e-03, -3.694535416337915e+00, -3.694035150972372e+00, -3.694519203058294e+00, -3.694077481347971e+00, -3.694277987235827e+00, -3.694277987235827e+00, -1.579783037087690e+00, -1.586671199390701e+00, -1.581069693388454e+00, -1.587142980519425e+00, -1.582986554989684e+00, -1.582986554989684e+00, -4.528526632053427e-01, -4.743684929575049e-01, -4.258552786399598e-01, -4.312278272091545e-01, -4.577006746218342e-01, -4.577006746218342e-01, -1.092415755591824e-01, -1.812391668722541e-01, -1.021722141620094e-01, -1.373875756410078e+00, -1.219479968981841e-01, -1.219479968981841e-01, -3.533569282432528e-03, -4.474020461227367e-03, -3.425979116197404e-03, -7.140744243625420e-02, -4.303274066024357e-03, -4.303274066024359e-03, -4.303968258353817e-01, -4.320541574337382e-01, -4.314720980624466e-01, -4.309863476017251e-01, -4.312292846863434e-01, -4.312292846863434e-01, -4.192680625487591e-01, -3.962734513121523e-01, -4.023189408844045e-01, -4.083576354273225e-01, -4.051407237561065e-01, -4.051407237561065e-01, -4.984930853673070e-01, -2.159063913038576e-01, -2.434743731044245e-01, -2.894264949148704e-01, -2.641943888512146e-01, -2.641943888512145e-01, -3.680083222934587e-01, -4.345730265148018e-02, -5.856281931016694e-02, -2.728805207114838e-01, -8.802135845856657e-02, -8.802135845856657e-02, -1.118065840051232e-02, -1.195977884960506e-03, -2.514998402430544e-03, -8.337083340329789e-02, -3.952012458455717e-03, -3.952012458455713e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_b86b95_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b86b95", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.812709999056959e+01, -1.812707407062224e+01, -1.812718559613632e+01, -1.812713660956578e+01, -1.812743506988764e+01, -1.812749885355565e+01, -1.812646414306581e+01, -1.812626657137767e+01, -1.812714916374162e+01, -1.812674264625022e+01, -1.812714916374162e+01, -1.812674264625022e+01, -2.989762313188148e+00, -2.989947385283251e+00, -2.989786177830263e+00, -2.989984227045984e+00, -2.990517510052741e+00, -2.990728048504975e+00, -2.989367199413199e+00, -2.989635072171539e+00, -2.989276381726043e+00, -2.990274515751205e+00, -2.989276381726043e+00, -2.990274515751205e+00, -6.178412293721320e-01, -6.209960406560854e-01, -6.162964099530157e-01, -6.202475695843445e-01, -5.929041125354051e-01, -5.875906737362997e-01, -5.923989976381608e-01, -5.936065348145189e-01, -6.198888142069549e-01, -5.722637978828904e-01, -6.198888142069549e-01, -5.722637978828904e-01, -1.693730602735160e-01, -1.677356290101161e-01, -1.709324671628379e-01, -1.693357328236752e-01, -7.479823366203331e-01, -7.654146030558709e-01, -1.465593626028063e-01, -1.462693680971904e-01, -1.509391583089341e-01, -1.610561694059901e-01, -1.509391583089341e-01, -1.610561694059900e-01, -1.022249173639557e-02, -1.085732016160290e-02, -1.071037044129451e-02, -1.146621781538800e-02, -5.729474324852084e-02, -5.987769734167131e-02, -6.150110728788370e-03, -6.047970277487933e-03, -9.116986377979180e-03, -5.198410775503536e-03, -9.116986377979180e-03, -5.198410775503540e-03, -4.531698655127322e+00, -4.530641388685989e+00, -4.533788534673859e+00, -4.532663738484378e+00, -4.531811019803934e+00, -4.530710009058555e+00, -4.533606777824255e+00, -4.532544778917388e+00, -4.532770751836772e+00, -4.531657988029147e+00, -4.532770751836772e+00, -4.531657988029147e+00, -1.621254447607655e+00, -1.621074520807652e+00, -1.633893869526888e+00, -1.633414563553617e+00, -1.607539085361240e+00, -1.610543551394982e+00, -1.618333151866533e+00, -1.621481696372984e+00, -1.638277969759904e+00, -1.629991425555798e+00, -1.638277969759904e+00, -1.629991425555798e+00, -5.441456204290087e-01, -5.429956305040596e-01, -6.020262167650424e-01, -6.021258072568868e-01, -5.030091324308037e-01, -5.125186407546009e-01, -5.346628839597674e-01, -5.445902743189458e-01, -5.620027684098189e-01, -5.449405666761731e-01, -5.620027684098190e-01, -5.449405666761731e-01, -1.237796621885764e-01, -1.235654544043358e-01, -1.793898891335083e-01, -1.793609552399106e-01, -1.165637935285150e-01, -1.180398087905845e-01, -1.744134279339881e+00, -1.743482661299072e+00, -1.333428995019079e-01, -1.261686060975089e-01, -1.333428995019079e-01, -1.261686060975089e-01, -4.614734310692578e-03, -4.795683910745664e-03, -5.917606763421211e-03, -6.007140214053013e-03, -4.424659235584997e-03, -4.684448890214856e-03, -8.731644816894157e-02, -8.783343310859507e-02, -4.521630141828523e-03, -6.202016347788541e-03, -4.521630141828523e-03, -6.202016347788541e-03, -5.595342925424609e-01, -5.610367140181626e-01, -5.534124746185959e-01, -5.549244663778616e-01, -5.556454254346624e-01, -5.571620961672809e-01, -5.574404664506130e-01, -5.589350616597087e-01, -5.565509573936321e-01, -5.580557372933211e-01, -5.565509573936321e-01, -5.580557372933211e-01, -5.454339718571761e-01, -5.466830684215522e-01, -4.433377380403706e-01, -4.445812484193792e-01, -4.723561625647836e-01, -4.738437863810039e-01, -5.029157588918434e-01, -5.041063259705557e-01, -4.875186251852886e-01, -4.886810591468329e-01, -4.875186251852886e-01, -4.886810591468329e-01, -6.300232113338053e-01, -6.304839719141025e-01, -2.107676588706068e-01, -2.107050353207621e-01, -2.430012769163408e-01, -2.431171037335777e-01, -3.238249322071763e-01, -3.248566936919572e-01, -2.774146747970984e-01, -2.773254367267403e-01, -2.774146747970984e-01, -2.773254367267403e-01, -4.128827365544290e-01, -4.143266398973700e-01, -5.627304377382340e-02, -5.659365055158350e-02, -7.346625030087085e-02, -7.510624279921863e-02, -3.184262283301140e-01, -3.185456544813192e-01, -1.027154789610803e-01, -1.015495513089682e-01, -1.027154789610803e-01, -1.015495513089682e-01, -1.460484969717330e-02, -1.512593490427669e-02, -1.592767387934763e-03, -1.596355285549481e-03, -3.240452386165380e-03, -3.446145055299113e-03, -9.785288647848731e-02, -9.850613094897660e-02, -4.281831429305047e-03, -5.685984656962292e-03, -4.281831429305043e-03, -5.685984656962285e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_b86b95_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b86b95", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.075033227696222e-08, 0.000000000000000e+00, -1.075042838525588e-08, -1.075023691168188e-08, 0.000000000000000e+00, -1.075035869159092e-08, -1.074985128797625e-08, 0.000000000000000e+00, -1.074983078253086e-08, -1.075093569359304e-08, 0.000000000000000e+00, -1.075120648144279e-08, -1.075028320422887e-08, 0.000000000000000e+00, -1.075059543670794e-08, -1.075028320422887e-08, 0.000000000000000e+00, -1.075059543670794e-08, -1.262469621959713e-05, 0.000000000000000e+00, -1.262434668820327e-05, -1.262501546290152e-05, 0.000000000000000e+00, -1.262452573187635e-05, -1.263060500331389e-05, 0.000000000000000e+00, -1.263107964342430e-05, -1.262791311460493e-05, 0.000000000000000e+00, -1.262672374039614e-05, -1.263143310333631e-05, 0.000000000000000e+00, -1.263134694369973e-05, -1.263143310333631e-05, 0.000000000000000e+00, -1.263134694369973e-05, -5.262223597068068e-03, 0.000000000000000e+00, -5.081649130118712e-03, -5.337477891790170e-03, 0.000000000000000e+00, -5.111692992317929e-03, -6.258673354093474e-03, 0.000000000000000e+00, -6.489078329053157e-03, -6.349046487298129e-03, 0.000000000000000e+00, -6.315269713002393e-03, -4.867838808259677e-03, 0.000000000000000e+00, -6.866561605496735e-03, -4.867838808259677e-03, 0.000000000000000e+00, -6.866561605496735e-03, -7.977988103252389e-01, 0.000000000000000e+00, -7.914086812631151e-01, -7.878165575709550e-01, 0.000000000000000e+00, -7.762149133777414e-01, -1.366873019329436e-03, 0.000000000000000e+00, -9.344298249857321e-04, -1.147848096350940e+00, 0.000000000000000e+00, -1.144394872218629e+00, -8.636572096700526e-01, 0.000000000000000e+00, 1.046014445985026e-01, -8.636572096700522e-01, 0.000000000000000e+00, 1.046014445985048e-01, -2.815307191726959e+00, 0.000000000000000e+00, -3.450329276032668e+00, -2.912450066767818e+00, 0.000000000000000e+00, -3.699784531540876e+00, -1.920256258457415e+00, 0.000000000000000e+00, -2.200159777501218e+00, -2.892678280664831e+00, 0.000000000000000e+00, -2.610263762812613e+00, -4.361700899233544e+00, 0.000000000000000e+00, 5.964339396518620e+00, -4.361700899233691e+00, 0.000000000000000e+00, 5.964339396548194e+00, -2.945908162379888e-06, 0.000000000000000e+00, -2.948602499685627e-06, -2.945070177022373e-06, 0.000000000000000e+00, -2.947787996810877e-06, -2.945865777508754e-06, 0.000000000000000e+00, -2.948574817628547e-06, -2.945142644529600e-06, 0.000000000000000e+00, -2.947838404698830e-06, -2.945479286267630e-06, 0.000000000000000e+00, -2.948193370777217e-06, -2.945479286267630e-06, 0.000000000000000e+00, -2.948193370777217e-06, -1.071961489129929e-04, 0.000000000000000e+00, -1.072443020017000e-04, -1.050515051280320e-04, 0.000000000000000e+00, -1.051628100194360e-04, -1.077553392361161e-04, 0.000000000000000e+00, -1.077465017075158e-04, -1.059188324554428e-04, 0.000000000000000e+00, -1.058635322230472e-04, -1.055347787359314e-04, 0.000000000000000e+00, -1.059869373211134e-04, -1.055347787359314e-04, 0.000000000000000e+00, -1.059869373211134e-04, -1.042924955465289e-02, 0.000000000000000e+00, -1.059677204628180e-02, -3.263402916866335e-03, 0.000000000000000e+00, -3.356739545433293e-03, -1.233630692629189e-02, 0.000000000000000e+00, -1.204331209674114e-02, 3.167846542882359e-03, 0.000000000000000e+00, -7.654241269122418e-04, -9.277631092783498e-03, 0.000000000000000e+00, -1.011600998579042e-02, -9.277631092783508e-03, 0.000000000000000e+00, -1.011600998579042e-02, -1.400897640342541e+00, 0.000000000000000e+00, -1.448582631696883e+00, -5.375088909352135e-01, 0.000000000000000e+00, -5.350483084697806e-01, -1.524146158261615e+00, 0.000000000000000e+00, -1.612424987110328e+00, -9.143615993210511e-05, 0.000000000000000e+00, -9.153925409813340e-05, -1.380836915219354e+00, 0.000000000000000e+00, -1.858570244514482e+00, -1.380836915219354e+00, 0.000000000000000e+00, -1.858570244514482e+00, -3.456899690690317e+00, 0.000000000000000e+00, -3.288881582747083e+00, -3.264909849940786e+00, 0.000000000000000e+00, -3.062890011261166e+00, -1.593384600072797e+01, 0.000000000000000e+00, -2.366733587201103e+01, -2.373646749516107e+00, 0.000000000000000e+00, -2.309568677514082e+00, 1.049821725040861e+00, 0.000000000000000e+00, -1.289396370088611e+01, 1.049821725037964e+00, 0.000000000000000e+00, -1.289396370088849e+01, -6.916391555752263e-03, 0.000000000000000e+00, -6.873694906084877e-03, -9.092751408972088e-03, 0.000000000000000e+00, -8.992637168920360e-03, -8.407827958445786e-03, 0.000000000000000e+00, -8.320915594089890e-03, -7.774228755357790e-03, 0.000000000000000e+00, -7.711415523243188e-03, -8.097826579823978e-03, 0.000000000000000e+00, -8.022948346096322e-03, -8.097826579823978e-03, 0.000000000000000e+00, -8.022948346096322e-03, -5.159282235097623e-03, 0.000000000000000e+00, -5.254605319008922e-03, -2.440377645087189e-02, 0.000000000000000e+00, -2.411692427877518e-02, -2.024702027284297e-02, 0.000000000000000e+00, -1.997218080008687e-02, -1.531057687550595e-02, 0.000000000000000e+00, -1.514482082534728e-02, -1.787005521476359e-02, 0.000000000000000e+00, -1.769228808411341e-02, -1.787005521476359e-02, 0.000000000000000e+00, -1.769228808411340e-02, -2.334023843709926e-03, 0.000000000000000e+00, -2.502809448861935e-03, -3.059453880135421e-01, 0.000000000000000e+00, -3.043160695746812e-01, -1.966697084386110e-01, 0.000000000000000e+00, -1.950384453391075e-01, -7.877909399861383e-02, 0.000000000000000e+00, -7.735914070824465e-02, -1.336513658074188e-01, 0.000000000000000e+00, -1.341734973244980e-01, -1.336513658074190e-01, 0.000000000000000e+00, -1.341734973244981e-01, -3.134284269322085e-02, 0.000000000000000e+00, -3.097117632188446e-02, -1.881166098384308e+00, 0.000000000000000e+00, -1.912613583067570e+00, -1.805272148469481e+00, 0.000000000000000e+00, -1.989294321002968e+00, -8.018444446835934e-02, 0.000000000000000e+00, -8.479157520119832e-02, -2.161604693097058e+00, 0.000000000000000e+00, -2.885932174359945e+00, -2.161604693097063e+00, 0.000000000000000e+00, -2.885932174359951e+00, -2.321399308235740e+00, 0.000000000000000e+00, -2.695879051290839e+00, -7.310618211318070e+00, 0.000000000000000e+00, -1.682285301536478e+01, -6.156541895806280e+00, 0.000000000000000e+00, -8.762829783123401e+00, -2.587946671998072e+00, 0.000000000000000e+00, -2.611530175321981e+00, -7.524686394263487e+00, 0.000000000000000e+00, -1.247687553612443e+01, -7.524686394263206e+00, 0.000000000000000e+00, -1.247687553612832e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_b86b95_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b86b95", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_b86b95_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b86b95", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-1.453789028236753e-05, -1.453795539533437e-05, -1.453819599291548e-05, -1.453817725604425e-05, -1.453863452856280e-05, -1.453895670951458e-05, -1.453519611389047e-05, -1.453456982004614e-05, -1.453809985687147e-05, -1.453592645007412e-05, -1.453809985687147e-05, -1.453592645007412e-05, -2.773989440474821e-04, -2.777448485755736e-04, -2.774399024960354e-04, -2.778084148197651e-04, -2.786639438061573e-04, -2.789831013985793e-04, -2.764684431128833e-04, -2.768336125599870e-04, -2.773459159014582e-04, -2.778996350686698e-04, -2.773459159014582e-04, -2.778996350686698e-04, -2.491933376166078e-03, -2.642184406024723e-03, -2.443485038052027e-03, -2.625098956656117e-03, -1.892260784642392e-03, -1.718606872764310e-03, -1.784285750730145e-03, -1.842295697882058e-03, -2.877173658706024e-03, -1.074779912048118e-03, -2.877173658706024e-03, -1.074779912048118e-03, -2.393230896972181e-03, -2.713708004130124e-03, -2.615544232205190e-03, -3.002092192391819e-03, -2.055021085824489e-03, -2.505285064109242e-03, -9.520634906531265e-04, -9.656735293285018e-04, -2.354546618229709e-03, -4.301318033992195e-04, -2.354546618229706e-03, -4.301318033992202e-04, -2.997087148185276e-07, -3.518866688465333e-07, -3.601478287499169e-07, -4.346246878873608e-07, -2.296147427444176e-05, -2.686840224581216e-05, -6.513783696351832e-08, -6.041348501259918e-08, -2.169816319607273e-07, -1.113827375369721e-07, -2.169816319607280e-07, -1.113827375369724e-07, -2.269464053455427e-04, -2.269942041936558e-04, -2.280519143712854e-04, -2.280628082763925e-04, -2.270020733267227e-04, -2.270268297199039e-04, -2.279506377716149e-04, -2.279975920571464e-04, -2.275163759208161e-04, -2.275310559213020e-04, -2.275163759208161e-04, -2.275310559213020e-04, -2.646821730286466e-04, -2.646819876534644e-04, -2.699096506917164e-04, -2.698297537548436e-04, -2.456280887323677e-04, -2.511417099558468e-04, -2.500045673272401e-04, -2.554573505090169e-04, -2.824632236149086e-04, -2.694761276964254e-04, -2.824632236149086e-04, -2.694761276964254e-04, -6.347379240705518e-03, -6.390511160701925e-03, -1.184698105674906e-02, -1.195811997073223e-02, -6.321235538715860e-03, -6.490396976230268e-03, -1.327119950005738e-02, -1.243099175812918e-02, -6.676694104181627e-03, -6.989931597318513e-03, -6.676694104181627e-03, -6.989931597318513e-03, -2.781922350892201e-04, -2.928988132952843e-04, -1.076133359808841e-03, -1.086732839708232e-03, -2.304560833431565e-04, -2.641079765903469e-04, -1.927400997080872e-03, -1.929892281417028e-03, -4.987911163701257e-04, -7.898358953142875e-04, -4.987911163701257e-04, -7.898358953142875e-04, -4.030688190349819e-08, -3.894187119486963e-08, -7.056855839852068e-08, -6.799578383656435e-08, -1.755342139979134e-07, -2.301047862615557e-07, -1.134151689771698e-04, -1.109104482960024e-04, -9.269830704810115e-08, -2.249914142493880e-07, -9.269830704810089e-08, -2.249914142493877e-07, -1.717652751912049e-02, -1.713619248568862e-02, -1.386428745944997e-02, -1.386672723675737e-02, -1.491063312506914e-02, -1.490782769044810e-02, -1.587685030660696e-02, -1.584744786659725e-02, -1.538304991477683e-02, -1.536705133539403e-02, -1.538304991477683e-02, -1.536705133539403e-02, -1.929224223085034e-02, -1.920034085401544e-02, -4.370113379078337e-03, -4.409813643531602e-03, -6.427959367186009e-03, -6.497529364432018e-03, -9.824749734082082e-03, -9.829088996211842e-03, -7.943079478903152e-03, -7.949467297785930e-03, -7.943079478903152e-03, -7.949467297785928e-03, -1.059149578002199e-02, -1.072681605893395e-02, -1.540683307611430e-03, -1.564565636171346e-03, -2.429583102321081e-03, -2.531861492405219e-03, -6.287727115763946e-03, -6.323005669183542e-03, -4.006584648178532e-03, -4.059123384598535e-03, -4.006584648178535e-03, -4.059123384598537e-03, -4.805309699537307e-03, -4.900319655551454e-03, -1.988346384035491e-05, -2.028650905216560e-05, -4.476415823168420e-05, -5.025037174718308e-05, -9.841532611841538e-03, -1.007052461472450e-02, -2.184009360754973e-04, -3.122002109861319e-04, -2.184009360754975e-04, -3.122002109861319e-04, -6.466774595219028e-07, -7.290699924745556e-07, -5.755693045808994e-09, -1.026365461509461e-08, -2.775916785357306e-08, -3.528415037704372e-08, -2.162876966262462e-04, -2.221903081659497e-04, -1.636920504245606e-07, -1.823002569306333e-07, -1.636920504245608e-07, -1.823002569306335e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
