
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_b86b95_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b86b95", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.439568732483333e+01, -1.439572594847922e+01, -1.439591046422866e+01, -2.127249521264195e+01, -2.127287797248144e+01, -2.815091551527589e+01, -3.535376367002708e+00, -4.613579938770794e+00, -4.613993492916253e+00, -4.614241568360270e+00, -4.613739104853593e+00, -3.536340995757643e+00, -5.828456367451162e-01, -7.427428439960011e-01, -8.761547699985209e-01, -7.295888355781174e-01, -5.839887231408710e-01, -8.837877476208680e-01, -2.340047403728044e-01, -2.356622227147846e-01, -8.685053540695292e-01, -1.773467330454468e-01, -2.206456397754032e-01, -2.697541980443432e-01, -7.941127629021622e-03, -3.915910618963284e+00, -6.914324014889506e-01, -4.577800823875768e-03, -6.389865385924781e-03, -6.389865385924781e-03, -6.901737367706046e+00, -6.903029478731090e+00, -6.901801987055297e+00, -6.902942574516350e+00, -5.231268504973085e+00, -5.232903569006592e+00, -2.606943427865269e+00, -2.626083189758613e+00, -2.592946229479221e+00, -2.609873105391076e+00, -2.039213377533243e+00, -2.624317443107298e+00, -6.260346093300032e-01, -8.684924632182789e-01, -7.388319318117081e-01, -7.692126097501506e-01, -6.540973910918753e-01, -8.125587062762520e-01, -1.218355125840583e-01, -2.545414262836465e-01, -1.126982155164557e-01, -2.564495387494935e+00, -1.442666875174758e-01, -1.442666875174759e-01, -1.537156167868096e+01, -4.475049358280505e-03, -3.427192484891756e-03, -3.760426587807367e-01, -4.304927531215030e-03, -4.304927531215032e-03, -8.072680800722594e-01, -8.021243958444924e-01, -4.299857901343360e-01, -6.191147387553974e-01, -4.299189916471102e-01, -6.187809554956198e-01, -7.858495254147967e-01, -5.300342041691443e-01, -5.495293656714487e-01, -7.369518020091198e-01, -7.204204449023541e-01, -5.594926771653104e-01, -7.029735088560410e-01, -2.982083031223642e-01, -3.189871959897552e-01, -3.908820728662853e-01, -4.137059169088401e-01, -3.482865018954105e-01, -6.185830476240087e-01, -1.456508876864733e+00, -6.041562674019354e-02, -4.607914069303201e-01, -9.655268126154311e-02, -9.655268126154311e-02, -8.611108209951032e+00, -1.196012424972578e-03, -2.266133437592331e+01, -4.761043882047535e-01, -3.953394285096117e-03, -7.447939566755258e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08

# test_hyb_mgga_xc_b86b95_BrOH_cation_2_vrho() not generated due to NaN in reference data


def test_hyb_mgga_xc_b86b95_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b86b95", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.126804386585365e-08, 0.000000000000000e+00, -1.126827009917681e-08, -1.126792684427345e-08, 0.000000000000000e+00, -1.126818476124884e-08, -1.126751367226226e-08, 0.000000000000000e+00, -1.126760523628272e-08, -1.128102669041796e-08, 0.000000000000000e+00, 2.842587300889312e-10, -1.128016002182400e-08, 0.000000000000000e+00, 2.842640680074617e-10, 2.738404316763906e-10, 0.000000000000000e+00, 2.738724312272273e-10, 8.410548528765878e-07, 0.000000000000000e+00, -2.485853411500855e-06, 7.214654036870076e-07, 0.000000000000000e+00, 7.213779593536027e-07, 7.253433597679243e-07, 0.000000000000000e+00, 7.257303413342075e-07, 7.235912978424355e-07, 0.000000000000000e+00, 7.235286714237941e-07, 7.227188954465104e-07, 0.000000000000000e+00, 7.255537246961529e-07, -2.478535863134016e-06, 0.000000000000000e+00, 8.456435553950724e-07, 5.346231004561385e-02, 0.000000000000000e+00, 5.081022436485019e-02, 5.362550813330461e-02, 0.000000000000000e+00, 1.112964266456388e-03, 7.497715258173094e-04, 0.000000000000000e+00, 7.790384587118513e-04, 1.147301173778583e-03, 0.000000000000000e+00, 6.104806375208600e-02, 4.784632532372143e-02, 0.000000000000000e+00, 8.954165305304657e-02, 6.702282537720239e-04, 0.000000000000000e+00, 9.273392320209653e-04, 5.275122276895228e+01, 0.000000000000000e+00, 3.597666620819054e-01, 4.783939998808228e+01, 0.000000000000000e+00, 3.476280916351858e-01, 3.635181401792684e-04, 0.000000000000000e+00, 3.725959478116402e-02, 2.321890309405964e-01, 0.000000000000000e+00, 2.180660617001991e-01, 5.159480917058271e-02, 0.000000000000000e+00, 1.249652533762501e+00, 1.243611296494421e-01, 0.000000000000000e+00, 3.951626591928507e+03, 1.911135922193183e+00, 0.000000000000000e+00, 1.245401259544039e+00, 7.817859612134248e+10, 0.000000000000000e+00, 5.113590899748977e+00, 2.409671015944965e+06, 0.000000000000000e+00, 1.747430115585068e+00, 1.129910468563809e+00, 0.000000000000000e+00, 1.273105386435007e+00, 3.140398219541309e-01, 0.000000000000000e+00, 1.256982437732088e+01, 3.140398219541310e-01, 0.000000000000000e+00, 1.256982437732088e+01, 2.900624746207780e-07, 0.000000000000000e+00, 2.904686458027572e-07, 2.909615107563048e-07, 0.000000000000000e+00, 2.913438258008717e-07, 2.901255291762672e-07, 0.000000000000000e+00, 2.905114578968556e-07, 2.909000345992406e-07, 0.000000000000000e+00, 2.913018483981907e-07, -2.624540258275397e-06, 0.000000000000000e+00, 2.975350633462576e-07, 2.971276761182413e-07, 0.000000000000000e+00, -2.626814223765637e-06, 9.047108390213217e-06, 0.000000000000000e+00, 9.072571316949579e-06, 9.079680141738972e-06, 0.000000000000000e+00, 9.111882998470369e-06, 9.025961549721011e-06, 0.000000000000000e+00, 8.999774063246856e-06, 9.066037471909210e-06, 0.000000000000000e+00, 9.038285715633201e-06, 1.090580358250905e-05, 0.000000000000000e+00, 8.749241236743850e-05, 9.032265403936581e-06, 0.000000000000000e+00, 9.179442313572790e-06, 4.867180014308885e-03, 0.000000000000000e+00, 2.297218642310987e-02, 4.730563857547297e-03, 0.000000000000000e+00, 4.818368282685348e-03, 5.195471472061182e-03, 0.000000000000000e+00, 4.641552572891338e-03, 5.832979071010968e-03, 0.000000000000000e+00, 5.206040600694475e-03, 4.402019853287130e-03, 0.000000000000000e+00, 2.384131443019040e-02, 4.097776709959417e-03, 0.000000000000000e+00, 5.124124150470932e-03, 2.833809652446429e-01, 0.000000000000000e+00, 2.648641608035849e-01, 7.227756924185000e+01, 0.000000000000000e+00, 2.384059747009820e-01, 3.603034734156027e-01, 0.000000000000000e+00, 2.505887403010987e-01, 2.027582099425876e-05, 0.000000000000000e+00, 2.034079800737459e-05, 4.300809187855033e-01, 0.000000000000000e+00, 3.044229482644202e-01, 4.300809187855035e-01, 0.000000000000000e+00, 3.044229482644205e-01, 1.982095930590557e+13, 0.000000000000000e+00, 2.739363130861602e+00, 1.131009188998493e+00, 0.000000000000000e+00, 1.001894954564393e+00, 1.059207522599252e+01, 0.000000000000000e+00, 7.179608270521846e+00, 1.534488432998202e+00, 0.000000000000000e+00, 8.126288895574943e+04, 6.015774431511087e+00, 0.000000000000000e+00, 1.064133898263959e+00, 6.015774431511082e+00, 0.000000000000000e+00, 1.064133898263957e+00, 1.243643070353796e-02, 0.000000000000000e+00, 1.224143511609067e-02, 1.078118393213537e-02, 0.000000000000000e+00, 1.062003706878543e-02, -1.608988286081692e-03, 0.000000000000000e+00, -1.794373215941399e-03, -2.607364539640028e-03, 0.000000000000000e+00, 1.168419498769134e-02, -2.070134407708299e-03, 0.000000000000000e+00, -2.232661524089470e-03, -2.158607560818628e-03, 0.000000000000000e+00, 1.145390409499930e-02, 1.375456407029652e-02, 0.000000000000000e+00, 1.358836796724587e-02, 9.736978790454020e-03, 0.000000000000000e+00, 7.168928493092519e-02, 1.009321696889946e-02, 0.000000000000000e+00, 3.554838117588122e-02, 1.068039332176266e-02, 0.000000000000000e+00, 1.051205819814943e-02, 9.970499632050574e-03, 0.000000000000000e+00, 9.819123632754053e-03, 1.046939415959098e-02, 0.000000000000000e+00, 2.366148070802515e-02, 3.512108324522389e-03, 0.000000000000000e+00, 5.314113192925182e-03, 7.660291708988651e-02, 0.000000000000000e+00, 7.383064992011033e-02, 4.992153725132559e+00, 0.000000000000000e+00, 7.291303572432896e-02, 6.872163744877525e-01, 0.000000000000000e+00, 3.319372217816097e-02, 3.961043122389546e-02, 0.000000000000000e+00, 3.985302739391646e-02, 5.207431074142891e-02, 0.000000000000000e+00, 1.737469450240287e+00, 1.050805768395638e-02, 0.000000000000000e+00, 1.032876659621711e-02, 2.648818929474507e+06, 0.000000000000000e+00, 2.562343745903627e+06, 4.939644585775007e-01, 0.000000000000000e+00, 3.917699327916829e-01, 4.251314976878282e-02, 0.000000000000000e+00, 4.311515006638407e-02, 6.563590838549053e-01, 0.000000000000000e+00, 4.593863183022613e-01, 6.563590838549053e-01, 0.000000000000000e+00, 4.593863183022613e-01, 1.659252665647972e+10, 0.000000000000000e+00, 1.339128245424101e+10, 1.422099214566522e+00, 0.000000000000000e+00, 1.398930753374009e+00, 8.504054384882022e+13, 0.000000000000000e+00, 5.664014119339430e+13, 2.438673128102170e+04, 0.000000000000000e+00, 2.074447590331561e+04, 1.116088107910786e+01, 0.000000000000000e+00, 1.729358674818302e+00, 2.449295636189682e+01, 0.000000000000000e+00, 2.264008006430562e+12])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_b86b95_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b86b95", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-3.917471522261091e-05, -3.917480666326107e-05, -3.917448580994359e-05, -3.917464000171363e-05, -3.917370661284050e-05, -3.917353614629186e-05, -3.917629863541938e-05, -1.378716895281572e-05, -3.917458068216103e-05, -1.378888624786437e-05, -1.378769232225893e-05, -1.378888624786437e-05, -1.086307176581860e-04, -9.886367289552889e-04, -1.086762179304513e-04, -1.086254899047673e-04, -1.095650411891742e-04, -1.097228200789897e-04, -1.092250898329168e-04, -1.092236389627861e-04, -1.085596230900190e-04, -1.100246529098191e-04, -9.889006949787293e-04, -1.100246529098191e-04, -1.598021136832418e-02, -1.587732578179836e-02, -1.602089576144582e-02, -5.816541241886695e-04, -4.710803402561351e-04, -4.585272505900273e-04, -5.059211528733358e-04, -1.642148573775559e-02, -1.568044317361094e-02, -1.744678139345269e-02, -5.953671632135174e-04, -4.125746990187820e-04, -1.383354092125630e-01, -2.545594631964812e-03, -1.358014431510194e-01, -2.761031995452824e-03, -1.511044147610398e-04, -1.205958836055364e-02, -5.537625639604731e-04, -7.010054770280826e-04, -1.911908828015881e-03, -1.836805468040011e-04, -1.911908828015880e-03, -3.259754731379892e-01, -2.925053862903257e-07, -3.482503482707788e-07, -1.204977028068718e+01, -4.248691717209683e-07, -1.369328487948551e+00, -2.183566043800917e-05, -5.082405532873740e-08, -4.895047635855906e-08, -2.015180548687125e-07, -6.979620591902826e-08, -2.015180548687125e-07, -6.979620591902835e-08, -2.259855269312626e-04, -2.260881212058678e-04, -2.270958956349527e-04, -2.271617442885251e-04, -2.260634434835929e-04, -2.261367632496152e-04, -2.270154474710338e-04, -2.271113465430546e-04, -4.879961484479221e-04, -2.266247031240197e-04, -2.265412913612535e-04, -4.882054926856168e-04, -2.184886358410226e-04, -2.198407711106584e-04, -2.290425707302488e-04, -2.301086062234988e-04, -2.090918765935176e-04, -2.130296248907240e-04, -2.181735888507632e-04, -2.223153613090707e-04, -2.317988057317349e-04, -2.641639124623456e-03, -2.317988057317349e-04, -2.263597005645318e-04, -3.929170235622424e-03, -1.984749290175147e-02, -6.303138297431693e-03, -6.504666655764184e-03, -2.674119186441406e-03, -3.235583825171795e-03, -4.075837800125147e-03, -4.531443570850382e-03, -4.490464816718589e-03, -2.014640642022206e-02, -4.490464816718591e-03, -4.176864456846772e-03, -2.006900302560310e-04, -2.048784310581295e-04, -1.344952233432972e-01, -9.423807568459265e-04, -1.556672292865342e-04, -1.896343766166793e-04, -6.620210932860224e-04, -6.630589334612137e-04, -3.860796718241865e-04, -6.415843739916735e-04, -3.860796718241866e-04, -6.415843739916738e-04, -3.228303714073314e+01, -1.673609233594659e-08, -4.320386791748026e-08, -3.974284072041291e-08, -1.358766007760613e-07, -1.757549224413043e-07, -7.429711701765857e-05, -6.758971769825938e-01, -2.718102425525728e-08, -2.133696627854412e-07, -2.718102425525730e-08, -2.133696627854409e-07, -1.552306914455465e-02, -1.552582117956704e-02, -1.268299878892380e-02, -1.271124538750983e-02, -1.983160539830672e-02, -1.970666739122217e-02, -1.977746314944726e-02, -1.442137908417866e-02, -1.980452801724910e-02, -1.968033565964845e-02, -1.980452801724910e-02, -1.400805702816674e-02, -1.573383149051152e-02, -1.576560080490087e-02, -4.103405104669137e-03, -2.619498423429564e-02, -5.855996421654132e-03, -2.431986097731804e-02, -8.622152563779987e-03, -8.630992571357915e-03, -7.055802023881759e-03, -7.089637270769390e-03, -7.055802023881757e-03, -2.350005329694931e-02, -4.894091693419611e-03, -1.600564578451296e-02, -1.408010276920654e-03, -1.425686809925916e-03, -7.129940082659059e-02, -2.075504996960211e-03, -4.596769162591872e-02, -3.651606863563957e-03, -2.954446459371496e-03, -2.988292442326723e-03, -2.954446459371497e-03, -5.701619287669108e-02, -3.420976223119365e-03, -3.590918706190889e-03, -1.404516281424835e+00, -1.391711463467844e+00, -3.381789829807270e-05, -3.836836569884722e-05, -5.271356587168376e-03, -6.540211187909225e-03, -1.641862007921526e-04, -2.374257902366361e-04, -1.641862007921527e-04, -2.374257902366361e-04, -8.271235436698682e+00, -7.918925502147195e+00, -1.133943442251980e-09, -1.136480995602016e-09, -4.818582270800353e+01, -4.495849352159821e+01, -5.342280621683502e-01, -5.221142930065400e-01, -6.008281617989573e-08, -1.726523620548169e-07, -6.008281617989576e-08, -2.538022450106644e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
