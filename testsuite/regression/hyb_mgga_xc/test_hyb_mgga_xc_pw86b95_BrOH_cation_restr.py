
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_pw86b95_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_pw86b95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.501468495089540e+01, -1.501469620175849e+01, -1.501480738226692e+01, -1.501463870630865e+01, -1.501471838931880e+01, -1.501471838931880e+01, -2.556324897083982e+00, -2.556285862124643e+00, -2.555426058637953e+00, -2.557194032065320e+00, -2.556242168334240e+00, -2.556242168334240e+00, -5.447776722622966e-01, -5.446974721053802e-01, -5.434766204964769e-01, -5.464226989901927e-01, -5.453707782390383e-01, -5.453707782390383e-01, -1.660339441860763e-01, -1.674077295655669e-01, -6.409819013446321e-01, -1.371286886731795e-01, -1.481120453258867e-01, -1.481120453258867e-01, -1.730343360945480e-02, -1.774941309794425e-02, -5.404262086370105e-02, -1.255365860833016e-02, -1.406229741511061e-02, -1.406229741511061e-02, -3.630379936105979e+00, -3.629606094203360e+00, -3.630352270199495e+00, -3.629668987238692e+00, -3.629982866198386e+00, -3.629982866198386e+00, -1.579821146564488e+00, -1.586857028186982e+00, -1.580646126562912e+00, -1.586917684339267e+00, -1.583236931581942e+00, -1.583236931581942e+00, -4.482593473259145e-01, -4.654819372888579e-01, -4.222944641536278e-01, -4.231394525152870e-01, -4.519182609832355e-01, -4.519182609832355e-01, -1.061105557289312e-01, -1.743927217179098e-01, -9.985942852790411e-02, -1.347252169201442e+00, -1.166486828718823e-01, -1.166486828718823e-01, -1.045073395134169e-02, -1.218421472992832e-02, -8.633420843638297e-03, -7.386757012853720e-02, -1.042140220347245e-02, -1.042140220347246e-02, -4.234518683642284e-01, -4.239146074043180e-01, -4.235774063728176e-01, -4.234319793462640e-01, -4.234881939404337e-01, -4.234881939404337e-01, -4.131895745869890e-01, -3.958105012201621e-01, -3.995660273985472e-01, -4.021373709460846e-01, -4.006883181281727e-01, -4.006883181281727e-01, -4.891200863226713e-01, -2.103046746918092e-01, -2.405808544647407e-01, -2.894093418058165e-01, -2.636353659951812e-01, -2.636353659951812e-01, -3.676638730339222e-01, -5.295141166721331e-02, -6.491379696659330e-02, -2.720056024742042e-01, -8.647903030454884e-02, -8.647903030454887e-02, -2.176759212097750e-02, -4.706832465557817e-03, -7.898285111290062e-03, -8.273489775048914e-02, -9.717250317225885e-03, -9.717250317225878e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_pw86b95_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_pw86b95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.727972586292184e+01, -1.727980571499860e+01, -1.728012348431976e+01, -1.727893625509674e+01, -1.727956359397717e+01, -1.727956359397717e+01, -2.851364726618288e+00, -2.851384927284093e+00, -2.851888016594844e+00, -2.851152165426696e+00, -2.851269899090278e+00, -2.851269899090278e+00, -6.066627439121706e-01, -6.060672066702613e-01, -5.931203720295959e-01, -5.951838735459386e-01, -5.948501718851475e-01, -5.948501718851475e-01, -1.795303035558699e-01, -1.814283361315829e-01, -7.368803308939369e-01, -1.449297797312373e-01, -1.588136334617440e-01, -1.588136334617440e-01, -1.392752553178559e-02, -1.429838715287438e-02, -4.782492027879892e-02, -1.006260178499550e-02, -1.128904032094390e-02, -1.128904032094391e-02, -4.358099892339338e+00, -4.361175112777036e+00, -4.358231974712228e+00, -4.360946788274439e+00, -4.359662114483306e+00, -4.359662114483306e+00, -1.640005334202858e+00, -1.648794673773702e+00, -1.636403237143192e+00, -1.644073169897275e+00, -1.646698912423748e+00, -1.646698912423748e+00, -5.196100316519618e-01, -5.921480806307693e-01, -4.860181973391768e-01, -5.278650622150324e-01, -5.295200881573165e-01, -5.295200881573165e-01, -1.064163106749527e-01, -1.846268931650676e-01, -9.937605367393229e-02, -1.715323315827664e+00, -1.209345061006336e-01, -1.209345061006336e-01, -8.371817797122292e-03, -9.767210214474300e-03, -6.927352289873748e-03, -7.031137002415752e-02, -8.361766783821412e-03, -8.361766783821412e-03, -5.541287367946164e-01, -5.454057862982093e-01, -5.490525033805252e-01, -5.516445299560120e-01, -5.504041807795998e-01, -5.504041807795998e-01, -5.397785638349736e-01, -4.336519709669255e-01, -4.531021874158757e-01, -4.841776639013370e-01, -4.666471422335161e-01, -4.666471422335161e-01, -6.189508916212545e-01, -2.242084608357778e-01, -2.586708591144826e-01, -3.208088755687183e-01, -2.863576427866511e-01, -2.863576427866512e-01, -4.048971940873948e-01, -4.646415019052641e-02, -5.934412066013223e-02, -3.081701507797075e-01, -8.579705782899491e-02, -8.579705782899497e-02, -1.760306622080373e-02, -3.766681771442063e-03, -6.324842134064815e-03, -8.127710192949314e-02, -7.795902005910817e-03, -7.795902005910813e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_pw86b95_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_pw86b95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-6.821232006631648e-09, -6.821175454048360e-09, -6.820872756851453e-09, -6.821715158479107e-09, -6.821281132272544e-09, -6.821281132272544e-09, -8.078710086941335e-06, -8.079157604102192e-06, -8.089448271968429e-06, -8.073694150477525e-06, -8.082358484678528e-06, -8.082358484678528e-06, -3.018582686745228e-03, -3.025448125995921e-03, -3.106901972342768e-03, -3.107591709169981e-03, -3.111231566749290e-03, -3.111231566749290e-03, -2.772619591224024e-01, -2.729111108743025e-01, -9.095332675324742e-04, -4.816642945347628e-01, -3.843092204666128e-01, -3.843092204666116e-01, -1.351066277929140e+03, -1.220299605228070e+03, -1.449330724198745e+01, -4.876972743408378e+03, -3.097377205113807e+03, -3.097377205113806e+03, -1.827694939137563e-06, -1.824174161362675e-06, -1.827548431839723e-06, -1.824441141440492e-06, -1.825913258523732e-06, -1.825913258523732e-06, -5.143294971312470e-05, -5.085006170104307e-05, -5.072341326974020e-05, -5.021637762927825e-05, -5.145839149162060e-05, -5.145839149162060e-05, -7.683374144760797e-03, -1.013890668966035e-03, -9.128045553679007e-03, -9.959229457548804e-05, -7.222950807797739e-03, -7.222950807797739e-03, -1.153338412248977e+00, -2.028663436927585e-01, -1.441863755652159e+00, -3.573905069826411e-05, -8.606810734290147e-01, -8.606810734290147e-01, -1.015423835457977e+04, -5.495900061156281e+03, -2.180161628472582e+04, -4.438004229419450e+00, -1.026868380382827e+04, -1.026868380382826e+04, 1.027916651665488e-03, -3.410924069601163e-03, -2.020318860915394e-03, -7.279218695225740e-04, -1.389731341678312e-03, -1.389731341678312e-03, 3.779431526126927e-03, -1.380135458254890e-02, -1.348525643509875e-02, -1.098700369960523e-02, -1.271202654832767e-02, -1.271202654832767e-02, -9.209978035522445e-04, -1.084099679261799e-01, -7.227930290432642e-02, -4.198137185368603e-02, -5.687391583517656e-02, -5.687391583517656e-02, -1.767424325102484e-02, -1.566406222197195e+01, -7.122783000295922e+00, -5.426120853513327e-02, -2.530148188030822e+00, -2.530148188030819e+00, -5.394369644799754e+02, -2.467914570371635e+05, -3.112502081967410e+04, -2.970716057138489e+00, -1.358463260014158e+04, -1.358463260014162e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_pw86b95_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_pw86b95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-1.453792283978471e-05, -1.453818662584219e-05, -1.453879561912927e-05, -1.453488296950892e-05, -1.453701315010626e-05, -1.453701315010626e-05, -2.775718393848247e-04, -2.776240936498513e-04, -2.788234851368839e-04, -2.766509746532341e-04, -2.776228584892479e-04, -2.776228584892479e-04, -2.566454190939865e-03, -2.533371885065624e-03, -1.804185727185526e-03, -1.813146546056280e-03, -1.838213172349539e-03, -1.838213172349539e-03, -2.555797814259009e-03, -2.812007899408073e-03, -2.283128744728795e-03, -9.589339535762655e-04, -1.555106140527363e-03, -1.555106140527362e-03, -3.258796894617046e-07, -3.975288282833202e-07, -2.492603401189000e-05, -6.277512067909956e-08, -1.524265052365561e-07, -1.524265052365564e-07, -2.269702985532985e-04, -2.280573663706722e-04, -2.270144524712743e-04, -2.279741091301697e-04, -2.275237198577517e-04, -2.275237198577517e-04, -2.646821746696447e-04, -2.698698241827689e-04, -2.483762463982107e-04, -2.527232363479489e-04, -2.759354158000614e-04, -2.759354158000614e-04, -6.369241708602159e-03, -1.190292719782858e-02, -6.412473447449897e-03, -1.282699419954386e-02, -6.819996236865639e-03, -6.819996236865639e-03, -2.855271797554048e-04, -1.081443713068554e-03, -2.474314630730053e-04, -1.928645477872851e-03, -6.389134607717199e-04, -6.389134607717198e-04, -3.950316868999526e-08, -6.927478027200196e-08, -2.025449349540546e-07, -1.121481555037163e-04, -1.603352375432031e-07, -1.603352375432027e-07, -1.715653870777054e-02, -1.386575190372423e-02, -1.490949299207765e-02, -1.586232602812442e-02, -1.537527207624292e-02, -1.537527207624292e-02, -1.924636234980064e-02, -4.390069527485070e-03, -6.462968674229307e-03, -9.827025162610095e-03, -7.946372527416517e-03, -7.946372527416517e-03, -1.066059606991729e-02, -1.552655076970212e-03, -2.480934733989058e-03, -6.305605209934963e-03, -4.033158041228320e-03, -4.033158041228323e-03, -4.854046670396275e-03, -2.008518762128271e-05, -4.752137100784840e-05, -9.965204787316353e-03, -2.644635392811541e-04, -2.644635392811544e-04, -6.882113065106681e-07, -7.619803347053765e-09, -3.151297056615350e-08, -2.192720144245662e-04, -1.623227288495196e-07, -1.623227288495198e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
