
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_pw86b95_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_pw86b95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.419746477945729e+01, -1.419750285026933e+01, -1.419768473767951e+01, -1.419711797576817e+01, -1.419741315227429e+01, -1.419741315227429e+01, -2.426821257532374e+00, -2.426805617484466e+00, -2.426435521771310e+00, -2.426795541059844e+00, -2.426515179985955e+00, -inf, -5.766153384828485e-01, -inf, -inf, -inf, -inf, -inf, -1.594049496358749e+19, -inf, -7.349022853752791e-01, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -3.513821285400835e+00, -inf, -inf, -1.420870426617911e+00, -1.427128526125360e+00, -1.416584572662898e+00, -1.421956372837531e+00, -1.426409740866322e+00, -inf, -inf, -inf, -inf, -inf, -inf, -4.507706773347852e-01, -4.543800965676804e-01, -inf, -4.875899012885985e-01, -8.071598185082719e+12, -inf, -inf, -3.260613666208007e+01, -inf, -inf, -7.023523267349253e-01, -1.371543376576373e+01, -inf, -inf, -inf, -4.245324318688284e-01, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -inf, -3.964518661743895e-01, -inf, -2.716259361724942e-01, -inf, -3.018124452884058e-01, -inf, -inf, -3.674162472946207e-01, -inf, -inf, -inf, -4.585573514969419e-01, -inf, -inf, -inf, -6.015767264306409e+09, -inf, -inf, -inf])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08

# test_hyb_mgga_xc_pw86b95_BrOH_cation_restr_1_vrho() not generated due to NaN in reference data

# test_hyb_mgga_xc_pw86b95_BrOH_cation_restr_1_vsigma() not generated due to NaN in reference data


def test_hyb_mgga_xc_pw86b95_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_pw86b95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-3.917476094290055e-05, -3.917456290562790e-05, -3.917362137932091e-05, -3.917656909685308e-05, -3.917503319995349e-05, -3.917503319995349e-05, -9.886250054216535e-04, -9.886212963460517e-04, -9.884934715953247e-04, -9.883894443422218e-04, -9.885791352840607e-04, -1.092890167284502e-04, -1.592853529406604e-02, -5.685700042247030e-04, -4.648129682438896e-04, -5.139818280660836e-04, -5.022363367313802e-04, -5.022363367313802e-04, -2.272476539174919e-03, -2.438635333769843e-03, -1.238371199050499e-02, -6.228892557979323e-04, -1.124305293517300e-03, -1.124305293517299e-03, -3.204729070861083e-07, -3.855175240946730e-07, -1.991413646192578e-05, -4.988686685971546e-08, -1.326836629820020e-07, -1.326836629820020e-07, -2.260367971782170e-04, -2.271288073430429e-04, -2.261000879123792e-04, -4.880334250829034e-04, -2.265829779956127e-04, -2.265829779956127e-04, -2.661303104094819e-03, -2.628685277403782e-03, -2.685517452651573e-03, -2.656249081361493e-03, -2.631732964054590e-03, -2.290778277697597e-04, -3.980651631573461e-03, -6.402809383628741e-03, -2.954762597660942e-03, -4.309697953295984e-03, -4.345624039846454e-03, -1.929735692306609e-02, -3.460331214744272e-01, -9.414838695722697e-04, -3.870885540310496e-01, -6.625392309547946e-04, -5.032062162522918e-04, -5.032062162522921e-04, -3.156062561985356e+01, -4.134727186741635e-08, -1.556221706271906e-07, -6.787815240163054e-01, -2.642940795733916e+01, -1.015876081719198e-07, -1.552468435401276e-02, -1.269737312846192e-02, -1.976885817934797e-02, -1.441831558918538e-02, -1.399960176047655e-02, -1.399960176047655e-02, -1.574997737406090e-02, -4.123336256814151e-03, -5.890729233565684e-03, -8.626635291583489e-03, -7.072833338322452e-03, -2.357026059631729e-02, -5.028715317686327e-03, -9.384751940055865e-02, -2.033973732592932e-03, -4.576736496754310e-02, -2.971284313366229e-03, -2.971284313366229e-03, -3.001494066796270e-02, -1.798465892885614e-05, -3.609275702144947e-05, -5.873978700190716e-03, -4.830320359587126e-01, -1.992430445642115e-04, -4.006917532914426e-07, -1.135208051828429e-09, -2.781011732063595e-08, -1.840090343808162e-04, -1.160538313713013e-07, -1.160538313713013e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
