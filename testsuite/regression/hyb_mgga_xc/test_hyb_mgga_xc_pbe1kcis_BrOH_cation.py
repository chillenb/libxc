
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_pbe1kcis_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_pbe1kcis", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.638885239359583e+01, -1.638887427202968e+01, -1.638902276270428e+01, -1.638869615735674e+01, -1.638886000966024e+01, -1.638886000966024e+01, -2.759304846741056e+00, -2.759278123939358e+00, -2.758719567188227e+00, -2.760125381520451e+00, -2.759299828000193e+00, -2.759299828000193e+00, -5.783836919537402e-01, -5.782387414308447e-01, -5.760753596595602e-01, -5.796998303322384e-01, -5.798455001693991e-01, -5.798455001693991e-01, -1.794549315499369e-01, -1.807555352255153e-01, -6.674125638978495e-01, -1.495932561445043e-01, -1.693936856240019e-01, -1.693936856240018e-01, -7.922332273856704e-03, -8.345498430324286e-03, -4.604626688115513e-02, -4.559732280918801e-03, -6.358391040763032e-03, -6.358391040763032e-03, -3.975105279496914e+00, -3.974701759756405e+00, -3.975091149961876e+00, -3.974734909695173e+00, -3.974898112124194e+00, -3.974898112124194e+00, -1.677732962300209e+00, -1.685478475310296e+00, -1.678025344083688e+00, -1.684851777362015e+00, -1.681893566257995e+00, -1.681893566257995e+00, -4.875105500694630e-01, -5.191348243265356e-01, -4.576321165298574e-01, -4.668241456278533e-01, -4.932750784574246e-01, -4.932750784574246e-01, -1.125160480778674e-01, -1.895777171092340e-01, -1.051537693169016e-01, -1.485032566476248e+00, -1.266326157570480e-01, -1.266326157570480e-01, -3.519731187293406e-03, -4.458476438838755e-03, -3.423064136461975e-03, -7.303830607848923e-02, -4.291398445287803e-03, -4.291398445287804e-03, -4.741511596052398e-01, -4.685969040409148e-01, -4.695475702182816e-01, -4.709370659741055e-01, -4.701531795584947e-01, -4.701531795584947e-01, -4.710350225980003e-01, -4.228072333695839e-01, -4.308427138790840e-01, -4.397161790655084e-01, -4.349428292431645e-01, -4.349428292431645e-01, -5.438210037413835e-01, -2.271007618376918e-01, -2.577586537146789e-01, -3.098687520911800e-01, -2.812875973184847e-01, -2.812875973184846e-01, -3.935983208692941e-01, -4.402206997835117e-02, -5.953302953080901e-02, -2.933051095176352e-01, -9.079291851000290e-02, -9.079291851000292e-02, -1.118053428301995e-02, -1.190515442536766e-03, -2.504979059127819e-03, -8.581034949471840e-02, -3.942452500612503e-03, -3.942452500612499e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_pbe1kcis_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_pbe1kcis", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.973247364988561e+01, -1.973244298774424e+01, -1.973256440450472e+01, -1.973250937079180e+01, -1.973283130485630e+01, -1.973289592156583e+01, -1.973180083814532e+01, -1.973158930788752e+01, -1.973252385954500e+01, -1.973209727855699e+01, -1.973252385954500e+01, -1.973209727855699e+01, -3.253855948715024e+00, -3.254017774103654e+00, -3.253890518115881e+00, -3.254060637410172e+00, -3.254818239505162e+00, -3.255058735976107e+00, -3.253623595472160e+00, -3.253884278378325e+00, -3.253298203491605e+00, -3.254713505011448e+00, -3.253298203491605e+00, -3.254713505011448e+00, -6.598851230294447e-01, -6.633276649564216e-01, -6.583614591151802e-01, -6.625702107628162e-01, -6.360683488885144e-01, -6.311853708445141e-01, -6.377305537807790e-01, -6.392238981285012e-01, -6.637600068024857e-01, -6.176361644372533e-01, -6.637600068024857e-01, -6.176361644372533e-01, -1.875676856122888e-01, -1.884398080075043e-01, -1.890722230655730e-01, -1.903397389579355e-01, -7.577535841105986e-01, -7.838422565569636e-01, -1.620254229176134e-01, -1.623913113762195e-01, -1.749654144185128e-01, -1.582488347320906e-01, -1.749654144185127e-01, -1.582488347320905e-01, -1.031162909621645e-02, -1.093142021189772e-02, -1.081831605218711e-02, -1.155531986692118e-02, -6.035234472740951e-02, -6.290780189705825e-02, -6.158829604425571e-03, -6.058339970876049e-03, -9.104206405539338e-03, -5.265116878337634e-03, -9.104206405539338e-03, -5.265116878337634e-03, -4.939887737648249e+00, -4.938717554925224e+00, -4.942148987658488e+00, -4.940906203952445e+00, -4.940006018270242e+00, -4.938789676324852e+00, -4.941949465634307e+00, -4.940775022819294e+00, -4.941049916459726e+00, -4.939818193416338e+00, -4.941049916459726e+00, -4.939818193416338e+00, -1.775603911380239e+00, -1.775447576981784e+00, -1.789465515094672e+00, -1.788945672522039e+00, -1.761231247726778e+00, -1.764558906760106e+00, -1.773039518457416e+00, -1.776538670909091e+00, -1.793969007247694e+00, -1.784887803491179e+00, -1.793969007247694e+00, -1.784887803491179e+00, -6.002613437126174e-01, -5.990620704331979e-01, -6.778242709864539e-01, -6.783266227672911e-01, -5.494676305558436e-01, -5.640100844529948e-01, -5.975379915594172e-01, -6.094435434210598e-01, -6.220204287885355e-01, -6.008194559850903e-01, -6.220204287885356e-01, -6.008194559850903e-01, -1.334841734689010e-01, -1.336324613411686e-01, -1.990088739964888e-01, -1.992978633768467e-01, -1.250986177496404e-01, -1.277622806553650e-01, -1.926940303225579e+00, -1.926266445012711e+00, -1.442695544583908e-01, -1.406202679804988e-01, -1.442695544583908e-01, -1.406202679804988e-01, -4.620299769681181e-03, -4.798556493744288e-03, -5.931276789820920e-03, -6.019568455590192e-03, -4.473080122252857e-03, -4.725371769001960e-03, -9.325074643756479e-02, -9.371612700838360e-02, -4.578297258928613e-03, -6.215520356672071e-03, -4.578297258928615e-03, -6.215520356672073e-03, -6.342340443251442e-01, -6.359916829862933e-01, -6.209444814029569e-01, -6.227676255310464e-01, -6.253611055742455e-01, -6.271874509471987e-01, -6.292446965110337e-01, -6.309951538229850e-01, -6.272809732360909e-01, -6.290682307997089e-01, -6.272809732360909e-01, -6.290682307997089e-01, -6.227619393283355e-01, -6.240674934130862e-01, -4.878881154140972e-01, -4.895432195779501e-01, -5.209816135901784e-01, -5.229158250110498e-01, -5.583083378146991e-01, -5.597753634357666e-01, -5.391232750003513e-01, -5.405606373571608e-01, -5.391232750003513e-01, -5.405606373571608e-01, -7.071998466385082e-01, -7.084314703204702e-01, -2.339302029774053e-01, -2.343090058780262e-01, -2.687529564181528e-01, -2.697241523398645e-01, -3.554926872144468e-01, -3.568749216541808e-01, -3.060500698515887e-01, -3.059832646326464e-01, -3.060500698515887e-01, -3.059832646326462e-01, -4.538820448238912e-01, -4.560926074469749e-01, -5.896119537110808e-02, -5.928195293323138e-02, -7.697380400003571e-02, -7.871154489973038e-02, -3.496541103744293e-01, -3.519094030622953e-01, -1.104919245662638e-01, -1.108140831083710e-01, -1.104919245662637e-01, -1.108140831083710e-01, -1.478878948521323e-02, -1.529718219063989e-02, -1.591139690815323e-03, -1.594689265612456e-03, -3.245109699752660e-03, -3.447335876070068e-03, -1.056582615821631e-01, -1.064535463295858e-01, -4.334850504045805e-03, -5.703681649327903e-03, -4.334850504045800e-03, -5.703681649327897e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_pbe1kcis_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_pbe1kcis", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.065627647439201e-08, 3.972783528724853e-10, -1.065630065915199e-08, -1.065617748662956e-08, 3.972855672000201e-10, -1.065622773711240e-08, -1.065577526705613e-08, 3.972956338705542e-10, -1.065567933129303e-08, -1.065690784557545e-08, 3.971887705403350e-10, -1.065710761831409e-08, -1.065623933396859e-08, 3.972478871599759e-10, -1.065646079729908e-08, -1.065623933396859e-08, 3.972478871599759e-10, -1.065646079729908e-08, -1.356833826628118e-05, 1.822334436197774e-06, -1.357248211109176e-05, -1.356829162589227e-05, 1.822656242812998e-06, -1.357279451715052e-05, -1.357118667213566e-05, 1.829906101491355e-06, -1.357274112384455e-05, -1.355462808563764e-05, 1.815701487388886e-06, -1.355740992688250e-05, -1.357683869863689e-05, 1.822512894576209e-06, -1.355855186483354e-05, -1.357683869863689e-05, 1.822512894576209e-06, -1.355855186483354e-05, -7.826249345764983e-03, 2.387647235934390e-03, -7.805763538208578e-03, -7.845377877101491e-03, 2.374549033828667e-03, -7.822307567985493e-03, -8.150215806593208e-03, 2.046970890108928e-03, -8.138014307369171e-03, -7.896293460772526e-03, 1.996240321002670e-03, -7.898485020549420e-03, -7.901168063591296e-03, 2.020601757546980e-03, -7.625317634256051e-03, -7.901168063591296e-03, 2.020601757546980e-03, -7.625317634256051e-03, -8.049278855761133e-01, 2.963821861632172e-01, -7.390869500723889e-01, -8.053672685267630e-01, 2.991477570461392e-01, -7.253200392756584e-01, -4.709103936975583e-03, 1.301574174583510e-03, -4.299547954583939e-03, -1.098407614750900e+00, 3.966898042501257e-01, -1.053360802310465e+00, -6.836194276142531e-01, 2.784247617127029e-01, -1.715549390054649e+00, -6.836194276142530e-01, 2.784247617127029e-01, -1.715549390054651e+00, 1.486332595156089e+01, 3.729886272720442e+01, 1.490164863037490e+01, 1.466742893502716e+01, 3.731140113325480e+01, 1.468846181950198e+01, -4.906576437007100e-01, 3.437924347696589e+00, -5.013558429342599e-01, 2.632609322776702e+01, 5.960111301255585e+01, 2.642050094322057e+01, 1.688536611830519e+01, 4.133319257031602e+01, 1.109268701720721e+01, 1.688536611830523e+01, 4.133319257031611e+01, 1.109268701720721e+01, -2.670078038807276e-06, 4.665936244808322e-07, -2.672729806668961e-06, -2.664697155364169e-06, 4.690225280808046e-07, -2.667486884705715e-06, -2.669747427608513e-06, 4.666900961074775e-07, -2.672506134207533e-06, -2.665102976469384e-06, 4.688342101117538e-07, -2.667776811200669e-06, -2.667377016755038e-06, 4.678302406456950e-07, -2.670105087323108e-06, -2.667377016755038e-06, 4.678302406456950e-07, -2.670105087323108e-06, -1.064175955510406e-04, 1.101918543980785e-05, -1.064267580061261e-04, -1.041452041588374e-04, 1.093370756655216e-05, -1.042325194721082e-04, -1.066518690311355e-04, 1.063323352259435e-05, -1.066855594901407e-04, -1.047253113667970e-04, 1.055966538118364e-05, -1.046990239120876e-04, -1.048899221332526e-04, 1.116538381880432e-05, -1.051681174523063e-04, -1.048899221332526e-04, 1.116538381880432e-05, -1.051681174523063e-04, -1.019626711718296e-02, 7.243521014930513e-03, -1.023203752569221e-02, 1.294447759753289e-03, 1.051978664794307e-02, 1.856867725290680e-03, -1.758511332203637e-02, 9.384554361541285e-03, -1.401298655800741e-02, -8.473834852990532e-03, 1.532284164088927e-02, -5.436489299527027e-03, -7.422921933226580e-03, 7.240599477451246e-03, -1.058625256230274e-02, -7.422921933226584e-03, 7.240599477451246e-03, -1.058625256230274e-02, -1.191823054802880e+00, 5.826010374287748e-01, -1.215396261458865e+00, -5.089316091549803e-01, 1.613601439882683e-01, -5.033180142879798e-01, -1.330532026616055e+00, 6.948993744104164e-01, -1.276943379415982e+00, -1.108263987510098e-04, 7.910104944682452e-05, -1.110450638617795e-04, -1.299566756147213e+00, 6.024715839063024e-01, -1.585959522725882e+00, -1.299566756147213e+00, 6.024715839063024e-01, -1.585959522725882e+00, 4.600163082455158e+01, 1.017713684837507e+02, 4.665735735323928e+01, 3.165298905935274e+01, 7.170783289874230e+01, 3.197354988292834e+01, 2.662445244255244e+02, 5.797687543375405e+02, 2.636140124806411e+02, -1.701954509246988e+00, 1.604068979576885e+00, -1.607114220556328e+00, 8.702300872531802e+01, 1.978211657015150e+02, 8.731787763430630e+01, 8.702300872531785e+01, 1.978211657015146e+02, 8.731787763430614e+01, 9.830036857223765e-02, 2.355036505556557e-02, 1.002854365311680e-01, 3.126189364451848e-02, 1.558199810046993e-02, 3.196329214480730e-02, 4.501919062478304e-02, 1.744659168895767e-02, 4.601675916381533e-02, 6.242689010332300e-02, 1.958326478509264e-02, 6.344204420950540e-02, 5.281580539316268e-02, 1.842839543354407e-02, 5.382368148886521e-02, 5.281580539316268e-02, 1.842839543354407e-02, 5.382368148886520e-02, 1.103026629763099e-01, 3.301504969059918e-02, 1.124079351970647e-01, -2.211052256140869e-02, 1.003375234291979e-02, -2.165174717583539e-02, -1.533150507839709e-02, 1.121646965192402e-02, -1.481382095630706e-02, -2.833001871047739e-03, 1.345399771534375e-02, -2.537660727623160e-03, -1.032702792672021e-02, 1.216229544500835e-02, -9.946994596421333e-03, -1.032702792672021e-02, 1.216229544500835e-02, -9.946994596421337e-03, -1.431938796354818e-03, 8.148157487541663e-03, -8.547796296697139e-04, -2.963047845072810e-01, 9.004046932476630e-02, -2.925137232275100e-01, -1.970717686113045e-01, 6.387132405231849e-02, -1.928381282841572e-01, -8.811364128068316e-02, 4.299180398810154e-02, -8.606582623342882e-02, -1.367417188987577e-01, 5.319379495126957e-02, -1.374701514767861e-01, -1.367417188987577e-01, 5.319379495126958e-02, -1.374701514767862e-01, -3.186031975289414e-02, 1.429777110348806e-02, -3.073760458081323e-02, -3.490251878272490e-01, 3.344300945733585e+00, -3.514977540921245e-01, -1.044000584848246e+00, 1.880882556782996e+00, -1.084492725653740e+00, -9.807068465310817e-02, 6.552783605750760e-02, -8.494266118757440e-02, -1.814784289725545e+00, 1.298163467852013e+00, -2.213943269582549e+00, -1.814784289725548e+00, 1.298163467852009e+00, -2.213943269582552e+00, 7.606978899408027e+00, 2.123039371297008e+01, 7.544187378539938e+00, 6.472743592491148e+02, 1.324578091104037e+03, 6.356922361841223e+02, 1.421166361491763e+02, 3.026655580868376e+02, 1.415258897526335e+02, -2.035537491992394e+00, 1.423316117185628e+00, -1.972369385367443e+00, 1.139387465898994e+02, 2.766448223722097e+02, 1.262894341491900e+02, 1.139387465898999e+02, 2.766448223722106e+02, 1.262894341491904e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_pbe1kcis_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_pbe1kcis", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-2.225191805500715e-05, -2.226284533654193e-05, -2.225301390296579e-05, -2.226363998118133e-05, -2.225637495081317e-05, -2.226849887422286e-05, -2.224411047238976e-05, -2.225282620895293e-05, -2.225262028252174e-05, -2.225897405666001e-05, -2.225262028252174e-05, -2.225897405666001e-05, -1.101021264408664e-04, -1.099790424550345e-04, -1.101626810741548e-04, -1.100111661560528e-04, -1.112607778304332e-04, -1.114346860824171e-04, -1.111929768713719e-04, -1.111152204894369e-04, -1.100099284015015e-04, -1.121158189756959e-04, -1.100099284015015e-04, -1.121158189756959e-04, -7.312371202617689e-04, -7.481324292156716e-04, -7.278219101398984e-04, -7.451243561640662e-04, -6.628532669630460e-04, -6.651702924431914e-04, -7.360490602863083e-04, -7.557845552704207e-04, -7.327856584314521e-04, -6.800078393383547e-04, -7.327856584314521e-04, -6.800078393383547e-04, -5.584193042385055e-03, -7.056695139274169e-03, -5.835319910572141e-03, -7.559106468375575e-03, -1.564723436267956e-04, -1.955777558442603e-04, -1.795945478590729e-03, -2.283269154925175e-03, -5.209716428051883e-03, -7.646542115264811e-04, -5.209716428051876e-03, -7.646542115264801e-04, -1.042986973983349e-05, -1.182206727636588e-05, -1.187229197964107e-05, -1.379695156418235e-05, -1.716576143510170e-04, -2.007169885843838e-04, -2.762177037483518e-06, -2.698455878285271e-06, -7.886630510811950e-06, -4.371020603917094e-06, -7.886630510811952e-06, -4.371020603917092e-06, -6.579953384591098e-04, -6.584929439861533e-04, -6.655530664490985e-04, -6.658027128967696e-04, -6.585770849816536e-04, -6.588614336435714e-04, -6.650557396086355e-04, -6.654955581731080e-04, -6.617260767650715e-04, -6.621294055648084e-04, -6.617260767650715e-04, -6.621294055648084e-04, -3.310150999303731e-04, -3.338928073554934e-04, -3.516867961182620e-04, -3.540465472399012e-04, -3.179575966972309e-04, -3.243048974941537e-04, -3.356136471997147e-04, -3.425222921731394e-04, -3.530253477400778e-04, -3.460737448871685e-04, -3.530253477400778e-04, -3.460737448871685e-04, -7.560845619778289e-03, -7.890772153165563e-03, -8.973992535223584e-03, -9.500948499645645e-03, -4.119333127096477e-03, -5.393531028113165e-03, -3.632438012241622e-03, -4.693451241501002e-03, -9.349488060441882e-03, -7.853583156790522e-03, -9.349488060441889e-03, -7.853583156790521e-03, -8.993155335202447e-04, -9.089810420423039e-04, -2.722763150020310e-03, -2.719055256997688e-03, -7.472209404372939e-04, -8.768377278873001e-04, -4.860890485895652e-04, -4.866377162294608e-04, -1.531550109216372e-03, -2.376730238648248e-03, -1.531550109216373e-03, -2.376730238648251e-03, -1.130517325294834e-06, -1.123827207781464e-06, -2.425062792874645e-06, -2.202900134684611e-06, -9.746508567084568e-06, -1.199355566900169e-05, -4.703731668105114e-04, -5.386557570494587e-04, -1.917402292371580e-06, -1.147939568129366e-05, -1.917402292371580e-06, -1.147939568129365e-05, -1.077167535380217e-01, -1.103627773192822e-01, -6.729817655888398e-02, -6.862801565720754e-02, -7.942606172195052e-02, -8.121941643556474e-02, -9.185249366405823e-02, -9.380441289830767e-02, -8.536551226203457e-02, -8.724080816700741e-02, -8.536551226203457e-02, -8.724080816700738e-02, -4.296086198269129e-02, -4.495139254698940e-02, -9.967363333207545e-03, -1.009185477623245e-02, -1.552776661161501e-02, -1.580892829602872e-02, -2.692642567388926e-02, -2.706034464708099e-02, -1.990743361790330e-02, -2.014668689750108e-02, -1.990743361790329e-02, -2.014668689750107e-02, -5.910095875559689e-03, -6.487423099211809e-03, -3.713827022051636e-03, -3.750006866667573e-03, -4.824545855417213e-03, -5.007075629098037e-03, -7.374065592527686e-03, -7.301332244841800e-03, -6.670097334561030e-03, -6.743155616537138e-03, -6.670097334561027e-03, -6.743155616537141e-03, -7.165503911627504e-03, -7.641703477487070e-03, -1.744048403538399e-04, -1.732155144485119e-04, -2.663213488410607e-04, -2.947378740103004e-04, -1.015460625552222e-02, -1.392557852108719e-02, -8.603769288116058e-04, -1.180827824027549e-03, -8.603769288116037e-04, -1.180827824027552e-03, -1.028503146016138e-05, -1.088124244209437e-05, -2.020187433773596e-07, -2.019539938367903e-07, -2.317161104168313e-06, -2.776348196726555e-06, -9.131697564348401e-04, -1.057617504904451e-03, -4.434767772068773e-06, -9.999963935431535e-06, -4.434767772068774e-06, -9.999963935431531e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
