
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_pbe1kcis_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_pbe1kcis", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.562595911784064e+01, -1.562600232241447e+01, -1.562620773388502e+01, -2.177510185258965e+01, -2.175711466954301e+01, -2.794060137820215e+01, -3.578933222531555e+00, -4.569969837920510e+00, -4.570393070979811e+00, -4.570633644472861e+00, -4.570136012755275e+00, -3.579895760923414e+00, -5.525443161489161e-01, -7.211326090648525e-01, -8.687885762519190e-01, -6.963242608821620e-01, -5.424453405736417e-01, -8.763712777838299e-01, -1.970026709359036e-01, -2.057278704649132e-01, -8.052949514552159e-01, -1.777047950213041e-01, -2.195297333839177e-01, -2.124074731157850e-01, -7.972424900112815e-03, -6.790677578666558e-03, -3.832204251814757e-02, -4.572515118153654e-03, -6.353947132006267e-03, -6.353947132006267e-03, -6.860154282876531e+00, -6.847929829419075e+00, -6.846669329271665e+00, -6.847840873689448e+00, -5.369049102644596e+00, -5.360089942850496e+00, -2.593733310904860e+00, -2.612780574997506e+00, -2.567276553078397e+00, -2.584063066529521e+00, -2.060351327363164e+00, -2.611026202816587e+00, -6.363508169191746e-01, -8.616406620571522e-01, -7.327755996681573e-01, -7.629589941819133e-01, -6.623964814643691e-01, -8.058675548859677e-01, -1.225721664202781e-01, -1.912839609312683e-01, -1.157125391880111e-01, -2.541021177289905e+00, -1.482597240085171e-01, -1.482597240085171e-01, -2.799885050435062e-03, -4.455748761761754e-03, -3.440917158080689e-03, -6.092800549759479e-02, -4.302210230300986e-03, -4.302210230300987e-03, -8.018391554028581e-01, -7.963971224111873e-01, -4.890231057403376e-01, -6.452601315774161e-01, -4.893972171779405e-01, -6.445876466777938e-01, -7.831316418896791e-01, -5.409966721142597e-01, -5.616652778555553e-01, -7.313353947229773e-01, -7.148348089892289e-01, -5.746167461102550e-01, -7.266768012850906e-01, -3.032186762011862e-01, -2.914811977296707e-01, -3.837241018518784e-01, -4.179290865460222e-01, -3.336754395370242e-01, -6.138268563440464e-01, -3.858030226356042e-02, -6.089043470444810e-02, -4.639231930639126e-01, -9.753401413972282e-02, -9.753401413972285e-02, -1.120052500438331e-02, -1.189000007149399e-03, -2.760248248558870e-03, -7.184938753096323e-02, -3.938530552802254e-03, -2.685009092948503e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_pbe1kcis_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_pbe1kcis", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.078989601451509e+01, -2.078986999704853e+01, -2.078996252023692e+01, -2.078991864787408e+01, -2.079019008150084e+01, -2.079023858635354e+01, -2.079254167820400e+01, -3.733282429922249e+01, -2.078563544105552e+01, -3.732612705127200e+01, -3.730703136436888e+01, -3.730655918910053e+01, -6.148851495231775e+00, -3.471122766569759e+00, -6.129560756487203e+00, -6.129471895941276e+00, -6.130074957229430e+00, -6.130186563493529e+00, -6.130390349804800e+00, -6.130473455038188e+00, -6.128710325382916e+00, -6.130828326507041e+00, -3.470815128165397e+00, -6.150159732918699e+00, -7.214841623018268e-01, -7.234013947054383e-01, -7.230271420505581e-01, -1.233610845250200e+00, -1.183217682359288e+00, -1.176030284215282e+00, -1.200878153309806e+00, -7.047610554049172e-01, -7.231037157118881e-01, -6.922453892921832e-01, -1.220558288825129e+00, -1.152640268797668e+00, -2.076042475899676e-01, -3.404256619433685e-01, -2.141426028940165e-01, -3.492574108537578e-01, -1.395613893923778e+00, -8.303962778530670e-01, -2.455067401735910e-01, -2.479021545406996e-01, -3.157580342751400e-01, -1.934547546236781e-01, -3.160657845479112e-01, -1.225361425435578e-01, -1.049660310184896e-02, -1.110954405501302e-02, -6.236300599097070e-03, -1.169590870625350e-02, -3.876236558635366e-02, -6.761307519496250e-02, -6.205228854752044e-03, -6.105258859501314e-03, -9.093574560198058e-03, -5.225570485546960e-03, -9.093574560198060e-03, -5.225570485546960e-03, -9.172859521946309e+00, -9.170746951698984e+00, -9.171203844560043e+00, -9.169028721077762e+00, -9.169549079854445e+00, -9.167390634921265e+00, -9.171063127686525e+00, -9.168936620939956e+00, -5.165236405610217e+00, -9.171685653303250e+00, -9.173718999669578e+00, -5.163956322659550e+00, -3.488864703054426e+00, -3.488665998245621e+00, -3.514473889478474e+00, -3.513556335997781e+00, -3.451066576813885e+00, -3.456610785467755e+00, -3.473573842204531e+00, -3.479387419379908e+00, -3.526581027287745e+00, -2.005891905898844e+00, -3.518749998734177e+00, -3.504519482017487e+00, -1.081221655169684e+00, -6.419796745629562e-01, -1.169842600444101e+00, -1.170370558651713e+00, -9.827564410042338e-01, -1.012432532335050e+00, -1.023676303828837e+00, -1.051765901890300e+00, -1.119168941720607e+00, -6.403626083535378e-01, -1.117489601932403e+00, -1.070810126208421e+00, -1.683137732456960e-01, -1.696518742960281e-01, -2.055271509420218e-01, -3.349876053400606e-01, -1.581265396988838e-01, -1.645422201217102e-01, -3.420960874005616e+00, -3.419525498626870e+00, -2.037678670572119e-01, -2.120364307191117e-01, -2.037678670572119e-01, -2.120364307191117e-01, -2.586476309575158e-03, -4.805425174568011e-03, -5.921563876854422e-03, -6.010077410941398e-03, -4.538956982105391e-03, -4.788540611174496e-03, -1.081577224332205e-01, -6.558501106651085e-02, -4.623641717248949e-03, -6.252819717375350e-03, -4.623641717248951e-03, -6.252819717375352e-03, -1.089280212604949e+00, -1.092763744846006e+00, -1.081183007911384e+00, -1.084680095257737e+00, -6.378461894294254e-01, -6.394518134464938e-01, -6.423576769232108e-01, -1.088907372882403e+00, -6.383423995249995e-01, -6.399421741936040e-01, -6.420005133582158e-01, -1.087775923130790e+00, -1.059897314978085e+00, -1.062798891753841e+00, -9.112062224502483e-01, -5.480049836675278e-01, -9.520059444219757e-01, -5.716408721015671e-01, -9.936834943999162e-01, -9.965383007715829e-01, -9.716738994245256e-01, -9.746278096236920e-01, -9.724871632099800e-01, -5.830118150027557e-01, -1.223727855598953e+00, -7.251146543162554e-01, -4.188833734625084e-01, -4.206610415658751e-01, -3.056036537218320e-01, -5.023343982442185e-01, -3.967031347907400e-01, -6.548091970729366e-01, -5.719750682546074e-01, -5.717928373075609e-01, -5.719493039814921e-01, -3.493956360320129e-01, -8.361949272339996e-01, -8.407967889491762e-01, -4.997020771851136e-02, -4.997869200998388e-02, -8.210601534346922e-02, -8.448890348256874e-02, -6.276410094565248e-01, -6.344443284280440e-01, -1.318932083231422e-01, -1.376774079928650e-01, -1.318932083231421e-01, -1.376774079928650e-01, -1.465996311747435e-02, -1.461059443315352e-02, -1.585585227889639e-03, -1.589192562145458e-03, -3.651211884399074e-03, -3.626072913575703e-03, -9.271297840547932e-02, -9.293783313061443e-02, -4.315453520768993e-03, -5.692327820847143e-03, -4.614496711899702e-03, -3.403563224764520e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_pbe1kcis_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_pbe1kcis", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.581593191610364e-09, 1.825319810437199e-08, -2.581401743229510e-09, -2.581510750687005e-09, 1.825299218097690e-08, -2.581370058520145e-09, -2.581391597245182e-09, 1.825201317285359e-08, -2.580991739081974e-09, -1.110241361620737e-08, 1.214152706489099e-09, 7.451352852683779e-10, -1.134609472965874e-08, 7.239735397978916e-10, 5.000796402708296e-10, 3.228795040281432e-10, 3.696281577631618e-10, 3.229069492534648e-10, 9.816282069624087e-07, 1.616047005052497e-06, -1.527882513744425e-05, 5.522817153411566e-07, 7.571461025073887e-07, 5.521712208889570e-07, 5.573876321946377e-07, 7.632810785428938e-07, 5.577457824802514e-07, 5.551588146218247e-07, 7.604620562703304e-07, 5.551491279361177e-07, 5.540894388141519e-07, 7.611491335213282e-07, 5.573261010504432e-07, -1.528296345882309e-05, 1.628905514699845e-06, 9.912042916397017e-07, 5.822417479515347e-04, 2.326548288357911e-02, 8.122814047969162e-04, -9.576459298323566e-03, 3.118016491794328e-03, 1.722044515310198e-03, 5.202887325452172e-04, 7.738511773248914e-04, 5.182962351028527e-04, 1.009140226828922e-03, 1.728653294207948e-03, -1.106319717034841e-02, 2.208242882397351e-03, 2.534783694716880e-02, -1.526372487611231e-03, 5.614361860747673e-04, 7.946270039869112e-04, 5.202542286105737e-04, -2.242159368217311e+00, 5.356877752098084e-01, 3.224831546226222e-01, -1.907078814258242e+00, 9.173705824366913e-01, 5.158568957347470e-01, 2.612178401648635e-04, 4.849940151278515e-04, -5.771426556843470e-03, 1.680863151551012e-01, 2.865623203877963e-01, 1.743562385414455e-01, 1.028532455896520e-01, 1.295162113851324e-01, 8.426608182744015e-02, 1.066160352679520e-01, 1.370417907417327e-01, -3.067666502954252e+01, 7.046833084053729e+01, 1.408648043640663e+02, 7.046883643377238e+01, -1.887118671136642e+06, 9.672378983792134e+01, 4.840115914627302e+01, -1.949962407118642e+03, 7.450002609065539e+00, 3.744055041899831e+00, 9.365761792976016e+01, 1.872728268388463e+02, 9.365790569693883e+01, 7.886481532927839e+00, 1.570739123573291e+01, 7.922560367259349e+00, 7.886481532927836e+00, 1.570739123573291e+01, 7.922560367259332e+00, 7.027671663483743e-07, 7.406163965005897e-07, 7.032010586039394e-07, 5.703317606259583e-07, 4.667569006548299e-07, 5.706197242124522e-07, 5.650051048644628e-07, 4.644651333927464e-07, 5.653213345102545e-07, 5.699320414516799e-07, 4.666124921572787e-07, 5.703422306931563e-07, -1.758530374268406e-06, 1.109369460429406e-06, 8.897438464631847e-07, 7.055527317259976e-07, 7.417036762561486e-07, -1.944505992139429e-06, 1.206209711224295e-05, 1.982815503278142e-05, 1.208103799442538e-05, 1.221713719361264e-05, 1.993361004977396e-05, 1.223359558023305e-05, 6.692842165950131e-06, 9.276743163272719e-06, 6.737046912689283e-06, 6.846524680861195e-06, 9.407856301063217e-06, 6.893094822779543e-06, 1.983435333305635e-05, 3.510816478410754e-05, -1.348510258654471e-04, 1.225654238825251e-05, 1.995254289449986e-05, 1.220756315713058e-05, 7.571801407675478e-03, 8.210163329218470e-03, -4.236430504575305e-03, 9.611169688730787e-03, 5.576133340335013e-03, 1.005727729972361e-02, 5.200399400279770e-03, 5.454389197825840e-03, 5.706197303539580e-03, 7.302031165984765e-03, 6.199806938241156e-03, 7.721890895928552e-03, 7.771382303950314e-03, 7.627894787121652e-03, -4.485418493289772e-03, 6.537095097147864e-03, 5.159320373516752e-03, 6.512445642796073e-03, 2.491636013545940e-01, 4.473204793290813e-01, 2.490020585144776e-01, -2.374769509631108e+00, 3.367947088993164e-01, 1.859589332735591e-01, 7.496908974386388e-01, 1.447219470372827e+00, 7.515851444977949e-01, 2.549216566174734e-05, 2.559984198517193e-05, 2.553954592468912e-05, 6.969638768352386e-01, 1.321952419830507e+00, 7.147103913005863e-01, 6.969638768352389e-01, 1.321952419830508e+00, 7.147103913005867e-01, -5.505646204840356e+07, 1.304543798536627e+02, 6.523851873028106e+01, 2.143426230479656e+01, 4.282950125950092e+01, 2.143092738902518e+01, 8.652667050260515e+02, 1.729804248087280e+03, 8.653234050160447e+02, 1.744362215828255e+00, 3.420508879608914e+00, -2.425272137709430e+02, 2.121454472050805e+02, 4.242308733134032e+02, 2.122901112756388e+02, 2.121454472050800e+02, 4.242308733134022e+02, 2.122901112756383e+02, 1.069276728128606e-01, 1.870926682004660e-02, 1.085939394029028e-01, 4.867257494242273e-02, 1.380918447773287e-02, 4.909032140035267e-02, 8.004079099646640e-02, 3.987362879293782e-02, 8.092310287550245e-02, 8.830859317382163e-02, 2.213228705645074e-02, 7.972215223276226e-02, 8.771799144725075e-02, 3.973904711945472e-02, 8.859894846885666e-02, 7.852039311506109e-02, 2.134385045507546e-02, 7.127236753993459e-02, 1.080115687085907e-01, 2.638950310111752e-02, 1.100063655466437e-01, 1.773305158900398e-02, 2.403199373134608e-02, -7.547808902765178e-03, 1.725600769340155e-02, 1.648848183352640e-02, 1.071943158129196e-03, 2.287942658718028e-02, 1.208045604086899e-02, 2.282256134486441e-02, 1.749257268767148e-02, 1.114544906669407e-02, 1.751086596985313e-02, 2.043854436225279e-02, 1.703739241585671e-02, 8.378192118521331e-03, 8.173070282078327e-03, 8.636935990687903e-03, 3.365866377102232e-03, 1.051886178515627e-01, 1.824238410543680e-01, 1.051562357080514e-01, -3.695231683536448e-01, 1.097366643483841e-01, 6.762555637446065e-02, -8.121994452428774e-02, 5.282328456537712e-02, 3.843997131551014e-02, 5.414053196942525e-02, 8.116175333270492e-02, 5.435580446586007e-02, 5.398440907985234e-02, 8.084950755355912e-02, -1.700186146486920e-01, 1.119401309417192e-02, 1.150187247377807e-02, 1.147958739985243e-02, -2.450589232692068e+02, 3.724081992666042e+03, -1.883344955389007e+02, 7.646155198250629e-01, 1.494473695590585e+00, 7.663648554264384e-01, 6.151267523201047e-02, 7.777802897390242e-02, 6.845454394236795e-02, 5.716318785301313e-01, 1.045767700390934e+00, 5.866265157415157e-01, 5.716318785301295e-01, 1.045767700390929e+00, 5.866265157415136e-01, 2.800510017486510e+06, 6.687788564792499e+06, 2.872681671945218e+06, 9.912871360909517e+01, 1.982141054762614e+02, 9.912857383051343e+01, 1.244491659299642e+13, 2.489028628770615e+13, 1.244496610241511e+13, -7.556166074948564e+00, 2.312041581182508e+02, 6.356772623713596e-01, 7.653312981255301e+01, 1.528191375542113e+02, 7.659230057436575e+01, 2.441033203336342e+03, 4.881819284601788e+03, -2.380995935414772e+07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_pbe1kcis_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_pbe1kcis", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-2.069529783687291e-16, -4.805366430552800e-54, -4.803146101293755e-54, -4.805506217654424e-54, -4.803603884082357e-54, -4.806207132442172e-54, -4.801452374594524e-54, -2.295332188270571e-05, -4.803085208243515e-54, -2.295934619614465e-05, -2.295601628015576e-05, -2.295934619614465e-05, -1.559156526747869e-04, -2.836587623311544e-47, -1.559952502327473e-04, -1.559063018884913e-04, -1.575528717119648e-04, -1.578301213379949e-04, -1.569579907408665e-04, -1.569556952313687e-04, -1.557885498267274e-04, -1.583625770125719e-04, -3.726075225040724e-22, -1.583625770125719e-04, -8.854079329725909e-16, -5.375523680036081e-41, -5.261295905664271e-41, -1.167527474127017e-03, -9.471278220670789e-04, -9.231738837923462e-04, -1.017418944713016e-03, -5.473156917419993e-41, -5.183139323587893e-41, -5.488790742893821e-41, -1.193725535367221e-03, -8.352031350023560e-04, -9.377417327957383e-36, -7.145578276713630e-03, -9.100079247243409e-36, -7.688739254991686e-03, -2.897574648161322e-04, -4.211321604057267e-42, -1.925662981139237e-03, -2.382583410448024e-03, -5.412229658844547e-03, -8.287818935185304e-04, -5.412229658844538e-03, -7.171926201054293e-35, -1.043056503979772e-05, -1.182242726448205e-05, -4.388182322165068e-28, -1.379795416650055e-05, -2.514366745636689e-32, -2.014844437335085e-04, -2.763138767754816e-06, -2.699234322509894e-06, -7.888016424905938e-06, -4.374767978748070e-06, -7.888016424905938e-06, -4.374767978748070e-06, -6.604719803837309e-04, -6.608288319051637e-04, -6.680536522851759e-04, -6.681588790821602e-04, -6.609988918800051e-04, -6.611575176518292e-04, -6.674992578564652e-04, -6.678114418132086e-04, -1.029773619496987e-47, -6.644826159774883e-04, -6.642578579529161e-04, -2.311667830134825e-38, -3.485282250581532e-04, -3.509998776864311e-04, -3.678972639713692e-04, -3.698773603530081e-04, -3.315698294418700e-04, -3.386560945624691e-04, -3.479510554206319e-04, -3.555158685619897e-04, -3.730164042021194e-04, -5.071266291628245e-45, -3.730164042021194e-04, -3.629465960072686e-04, -1.010264873717440e-02, -2.403380856545230e-39, -2.118704879107022e-02, -2.236439371347948e-02, -6.219019783575900e-03, -7.811628549830799e-03, -1.042251721913005e-02, -1.210507495776646e-02, -1.227759050907518e-02, -2.723667169448629e-39, -1.227759050907518e-02, -1.090622909184789e-02, -9.257278932168971e-04, -9.386430657131405e-04, -3.482029732516204e-36, -2.776569313996747e-03, -7.714337283044217e-04, -9.023015536465543e-04, -1.429434037963278e-03, -1.432363812539409e-03, -1.575201599812185e-03, -2.439933450526341e-03, -1.575201599812186e-03, -2.439933450526343e-03, -1.756250363576447e-26, -1.124795143323562e-06, -2.426721484691785e-06, -2.204493726078112e-06, -9.752875752963861e-06, -1.200278086848348e-05, -4.816880949836174e-04, -1.962608479966587e-33, -1.920859515723306e-06, -1.148105262175384e-05, -1.920859515723306e-06, -1.148105262175382e-05, -1.804657313074715e-01, -1.852329833356905e-01, -8.218757271877022e-02, -8.374667218903348e-02, -8.187991718803521e-38, -8.282360639775504e-38, -1.189755985723141e-37, -1.312486100928881e-01, -9.777078804229212e-38, -9.879306654022036e-38, -9.777078804229212e-38, -1.168950516309969e-01, -1.634043244060736e-01, -1.680434045054984e-01, -1.024873400775429e-02, -8.112588528076939e-39, -1.642409584742781e-02, -1.134686551465465e-38, -3.050342686368510e-02, -3.066622158929482e-02, -2.172698494884416e-02, -2.193847387449646e-02, -2.172698494884415e-02, -1.445699189618053e-38, -1.466009769354882e-02, -1.730002484129838e-39, -3.773553771338285e-03, -3.812699683302319e-03, -3.243070430410952e-37, -5.235103448120750e-03, -8.527133674678088e-38, -8.917222026014525e-03, -7.270132782562210e-03, -7.356404743546528e-03, -7.270132782562207e-03, -1.801085163507898e-37, -8.215575300613684e-03, -8.687591779943387e-03, -2.927242956799652e-32, -2.766238299896994e-32, -2.682017511922875e-04, -2.969298575335550e-04, -1.337730378987964e-02, -1.712491572466429e-02, -8.806261876648019e-04, -1.210744454043662e-03, -8.806261876648001e-04, -1.210744454043665e-03, -4.038511695722021e-29, -3.304934898402316e-29, -2.021803059702752e-07, -2.022125246254020e-07, -4.484147084231394e-25, -3.463979495438036e-25, -1.038892724751392e-33, -1.068824373767812e-33, -4.444059982438934e-06, -1.000133281188395e-05, -4.444059982438930e-06, -3.484435772505778e-26]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
