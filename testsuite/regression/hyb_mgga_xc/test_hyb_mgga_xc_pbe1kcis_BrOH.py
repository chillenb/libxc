
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_pbe1kcis_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_pbe1kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.562556149504709e+01, -1.562559909768583e+01, -1.562579454423774e+01, -1.562517823375573e+01, -1.562558109391858e+01, -1.562558109391858e+01, -2.627911512805088e+00, -2.627916855337368e+00, -2.628168493850462e+00, -2.628274481416339e+00, -2.627925104775299e+00, -4.569787646964315e+00, -5.493649589585715e-01, -8.875400412123998e-01, -8.632209333716618e-01, -8.703846237320474e-01, -8.881373143580404e-01, -8.881373143580404e-01, -2.501017739105755e-01, -2.535535708551954e-01, -6.495716203489805e-01, -1.785331224037334e-01, -2.511340250640821e-01, -2.511340250640821e-01, -1.345820343855882e-02, -1.410379734757392e-02, -5.802454224788766e-02, -6.402418309762244e-03, -1.395882251702803e-02, -1.395882251702803e-02, -6.843626254833238e+00, -6.844911478896588e+00, -6.843762239508960e+00, -3.890215113348994e+00, -6.844278981049649e+00, -6.844278981049649e+00, -1.509735216631600e+00, -1.519897356008320e+00, -1.505626831142498e+00, -1.513558565937106e+00, -1.521932599899142e+00, -2.600375856796727e+00, -7.833677161022109e-01, -8.521105266939576e-01, -7.429358715029811e-01, -7.762799078978582e-01, -8.137095521605280e-01, -5.006577382437175e-01, -9.826802109068997e-02, -2.493607128078284e-01, -9.716482651869657e-02, -2.538047343206495e+00, -1.519454830434608e-01, -1.519454830434608e-01, -6.478070549817760e-03, -7.064333631263513e-03, -5.305652104332190e-03, -6.487006692660430e-02, -6.727548616655753e-03, -6.437017728170279e-03, -8.141812789123787e-01, -8.090439940919438e-01, -4.961905761186224e-01, -8.122856173774868e-01, -8.115730261026336e-01, -8.115730261026336e-01, -7.883855756611536e-01, -6.808046473204881e-01, -7.120566752408115e-01, -7.411130223333976e-01, -7.262942094561330e-01, -4.492001607264130e-01, -8.916050244252233e-01, -2.106367070064893e-01, -3.732701427534928e-01, -3.060028697705633e-01, -4.223819962482498e-01, -4.223819962482498e-01, -3.860972577070186e-01, -5.370066998373640e-02, -7.273578103960462e-02, -4.526086658783313e-01, -8.186636738286125e-02, -1.064384839396345e-01, -1.572425027599046e-02, -1.928188549337530e-03, -3.670423458367529e-03, -1.016872454542038e-01, -5.470796740696508e-03, -5.470796740696501e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_pbe1kcis_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_pbe1kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.078935309774848e+01, -2.078940321042116e+01, -2.078966368015441e+01, -2.078884232912894e+01, -2.078937921697439e+01, -2.078937921697439e+01, -3.476458651339282e+00, -3.476465755987488e+00, -3.476800391929458e+00, -3.476941337185961e+00, -3.476476726319850e+00, -6.129280767580776e+00, -7.182521238258459e-01, -1.205196079594954e+00, -1.172088146838141e+00, -1.181927145404964e+00, -1.206008887597085e+00, -1.206008887597085e+00, -3.482596017985667e-01, -3.529723474896579e-01, -8.505917300424075e-01, -2.477241717408356e-01, -3.496693454068079e-01, -3.496693454068079e-01, -1.833435237504622e-02, -1.922997817198702e-02, -7.980860770182711e-02, -8.592695431350496e-03, -1.903700954594156e-02, -1.903700954594156e-02, -9.164414622054151e+00, -9.166093054055739e+00, -9.164592037646385e+00, -5.155861395878088e+00, -9.165267293960568e+00, -9.165267293960568e+00, -1.990532280545140e+00, -2.004023290742669e+00, -1.985078186239739e+00, -1.995608025802562e+00, -2.006725272819682e+00, -3.498502991274313e+00, -1.065927997189596e+00, -1.157373639416267e+00, -1.011970423707126e+00, -1.056144360667880e+00, -1.106375032275708e+00, -6.539947499675696e-01, -1.269359841301970e-01, -3.461280892555336e-01, -1.255097757340627e-01, -3.416274956165049e+00, -2.111099620315344e-01, -2.111099620315344e-01, -8.495301107973009e-03, -9.495430435241125e-03, -7.158399658250416e-03, -8.383122032524661e-02, -8.820316903372418e-03, -8.653020827156724e-03, -1.107696270242638e+00, -1.100031488071295e+00, -6.481040320036398e-01, -1.104830918464183e+00, -1.103764044907816e+00, -1.103764044907816e+00, -1.072755579071363e+00, -9.281558001531562e-01, -9.695998212973778e-01, -1.008240043475240e+00, -9.884964008689173e-01, -5.861689311015255e-01, -1.210637263169848e+00, -2.730079649683933e-01, -5.147695095219778e-01, -3.978625889376304e-01, -5.810333395352942e-01, -5.810333395352941e-01, -5.030954348532226e-01, -7.410428971716011e-02, -1.003576291287951e-01, -6.213673796393396e-01, -1.057493151985312e-01, -1.475269002024649e-01, -2.130609636652658e-02, -2.577032820126876e-03, -4.924525473820111e-03, -1.411580230450453e-01, -7.354638517617400e-03, -7.354638517617389e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_pbe1kcis_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_pbe1kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [3.272863308990634e-09, 3.272843330053699e-09, 3.272728043094085e-09, 3.273057195370546e-09, 3.272852973472214e-09, 3.272852973472214e-09, 6.369934104731490e-06, 6.370112009610861e-06, 6.374518820034308e-06, 6.370631977612127e-06, 6.369854104146806e-06, 4.661650867708821e-07, 6.294020273535308e-03, 4.798451042012528e-04, 4.476848173132729e-04, 4.709109617816788e-04, 4.807480583952870e-04, 4.807480583952870e-04, 1.759346094344399e-01, 1.758752811414252e-01, 2.775164105000455e-03, 1.457841929795909e-01, 1.757556816703791e-01, 1.757556816703791e-01, 2.174789723098815e+01, 2.055023244743248e+01, 1.327854917309287e+00, 1.673263258375203e+01, 2.170617530111032e+01, 2.170617530111031e+01, 3.989418954553267e-07, 4.022655103811003e-07, 3.993090850263951e-07, 1.638808331731822e-06, 4.006009706171399e-07, 4.006009706171399e-07, 7.185846076044094e-05, 7.023270112775712e-05, 7.251539007000624e-05, 7.122835153644063e-05, 6.994384948072067e-05, 5.925885943731446e-06, 4.328891954493472e-03, 6.085863013606638e-03, 4.094580198790864e-03, 5.463463366056843e-03, 4.559334342303987e-03, 1.503858337253511e-02, 1.398863021568274e+01, 8.315111121737476e-02, 1.478251549926807e+01, 1.917304035330626e-05, 2.650861601599762e-01, 2.650861601599762e-01, 1.193775607399323e+06, 1.908270038635675e+01, 9.921604485409097e+01, 8.703140386612959e+01, 1.027161825380399e+06, 2.580296248230892e+01, 6.061473469434738e-02, 2.905170276096277e-02, 5.100114588055296e-02, 4.373670150427115e-02, 3.945661170312249e-02, 3.945661170312249e-02, 5.067220223198923e-02, 7.795309968315841e-03, 9.902522600675064e-03, 1.404682158552580e-02, 1.149794611113126e-02, 2.973594346200490e-02, 3.846929868848689e-03, 5.084847289723113e-01, 3.481358892641681e-02, 1.109959286636047e-01, 2.903382596553269e-02, 2.903382596553268e-02, 4.042551159535587e-02, 1.506108493217349e+00, 7.277290453666637e-01, 3.654235373023767e-02, 3.176202632721967e+01, 5.343998740212117e-01, 7.353306953813674e+00, 7.817801224871566e+01, 8.017578071850109e+01, 6.667666291765979e-01, 4.268420241889477e+01, 4.268420241889477e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_pbe1kcis_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_pbe1kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-5.175522598317222e-17, -1.201168587269655e-54, -1.201303003715831e-54, -1.200717677274763e-54, -1.201151621898194e-54, -1.201151621898194e-54, -7.113863825786213e-48, -7.116999856490161e-48, -7.209534039101503e-48, -7.167965819534385e-48, -7.114404650796550e-48, -1.562330689957482e-04, -1.322160013676613e-41, -1.093233025255077e-03, -8.978607803293651e-04, -9.875613880874429e-04, -1.098726184167795e-03, -1.098726184167795e-03, -8.854434091676085e-03, -9.358198685444682e-03, -1.031356765983377e-42, -2.001818339566304e-03, -8.992621473528683e-03, -8.992621473528683e-03, -6.522712446450111e-05, -7.101595986298313e-05, -4.208672156228864e-04, -5.340491699455814e-06, -7.272647954547799e-05, -7.272647954547792e-05, -6.603993771490942e-04, -6.676179664105619e-04, -6.611937313954272e-04, -3.409583914194651e-23, -6.640049445014689e-04, -6.640049445014689e-04, -2.099515867318623e-20, -1.265277580792900e-45, -1.239882987722334e-45, -1.253355918599653e-45, -1.274323221435112e-45, -3.708975286058020e-04, -9.788935844540306e-03, -2.006786601089636e-02, -7.415821546406259e-03, -1.247370348771145e-02, -1.207286632700010e-02, -6.024808015540268e-40, -2.366363995312268e-35, -3.553201089119570e-03, -2.980165053593990e-35, -1.425521021100524e-03, -2.250575635911768e-03, -2.250575635911768e-03, -4.569526706292496e-28, -8.187780551310411e-06, -1.804392444310282e-05, -3.259547190078583e-34, -3.779319673148015e-28, -8.374423750128777e-06, -1.989108020301105e-01, -9.114324069853622e-02, -2.182070827355189e-38, -1.411138836259320e-01, -1.265152894050113e-01, -1.265152894050113e-01, -1.492364744043362e-01, -1.142824212995094e-02, -1.803642232703311e-02, -3.108231067819795e-02, -2.306157371055547e-02, -3.521763409426208e-39, -1.400869608256898e-02, -1.940730063872277e-37, -6.237176711184266e-03, -2.073297621433539e-38, -8.285658732795064e-03, -8.285658732795062e-03, -2.922435215748781e-39, -3.380178655133456e-04, -5.286585777108111e-04, -1.456402540213923e-02, -1.259272141241096e-34, -1.395267261030225e-03, -3.508522469624498e-05, -6.802429297418632e-07, -4.816875592257907e-06, -1.513642060090822e-03, -8.501622889405594e-06, -8.501622889405562e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
