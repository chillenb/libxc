
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_pbe1kcis_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_pbe1kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.638848067191246e+01, -1.638849971008736e+01, -1.638864284629094e+01, -1.638832986870235e+01, -1.638849022629170e+01, -1.638849022629170e+01, -2.759197175802498e+00, -2.759176462494292e+00, -2.758714075694132e+00, -2.760005075483628e+00, -2.759198564524343e+00, -2.759198564524343e+00, -5.779212312242310e-01, -5.778164392579879e-01, -5.766403341657761e-01, -5.799260409307916e-01, -5.778802442389882e-01, -5.778802442389882e-01, -1.825951916987920e-01, -1.837290866510006e-01, -6.750012957845661e-01, -1.488414771498094e-01, -1.829269897221588e-01, -1.829269897221588e-01, -1.342824001406941e-02, -1.407019779273072e-02, -5.655454433699885e-02, -6.411013851343606e-03, -1.392499497219140e-02, -1.392499497219140e-02, -3.973497549306960e+00, -3.973106005897466e+00, -3.973459965653877e+00, -3.973155554105983e+00, -3.973292957224178e+00, -3.973292957224178e+00, -1.677404140306858e+00, -1.684893263904492e+00, -1.678141422072490e+00, -1.683956689131715e+00, -1.681556825014209e+00, -1.681556825014209e+00, -4.828218676374987e-01, -5.145988931724588e-01, -4.623244848203250e-01, -4.738400510667948e-01, -4.972092474229362e-01, -4.972092474229362e-01, -1.176834177723994e-01, -1.957444485011594e-01, -1.158105897225228e-01, -1.483352632086208e+00, -1.308193810297945e-01, -1.308193810297945e-01, -6.183664115878221e-03, -7.071676764098993e-03, -5.307710174966522e-03, -7.719215754262436e-02, -6.447962617885501e-03, -6.447962617885501e-03, -4.829582760411024e-01, -4.759177683781310e-01, -4.772442197906698e-01, -4.789392473541744e-01, -4.779966297322146e-01, -4.779966297322146e-01, -4.754085245491652e-01, -4.283618682887920e-01, -4.365276355279905e-01, -4.450441699770575e-01, -4.405036090008381e-01, -4.405036090008381e-01, -5.389588885451392e-01, -2.333399871297228e-01, -2.628994688483922e-01, -3.112274794589072e-01, -2.848700774826181e-01, -2.848700774826181e-01, -3.925960442386116e-01, -5.258252923348431e-02, -7.000496111304659e-02, -2.900363328975456e-01, -9.732837154407346e-02, -9.732837154407349e-02, -1.574424151642572e-02, -1.929952793714563e-03, -3.671009614614604e-03, -9.298559898484907e-02, -5.481418045916371e-03, -5.481418045916363e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_pbe1kcis_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_pbe1kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.973190815612793e+01, -1.973197654121257e+01, -1.973228549670528e+01, -1.973116550861631e+01, -1.973194418885170e+01, -1.973194418885170e+01, -3.253742099652410e+00, -3.253774169048496e+00, -3.254778995137075e+00, -3.253605815622620e+00, -3.253772752544530e+00, -3.253772752544530e+00, -6.547760278446955e-01, -6.537198044579361e-01, -6.272770829754571e-01, -6.319030669115809e-01, -6.543919030924690e-01, -6.543919030924690e-01, -1.940320133151434e-01, -1.961253317847512e-01, -7.925265851645681e-01, -1.604178023490583e-01, -1.946563592102234e-01, -1.946563592102234e-01, -1.821315181028470e-02, -1.909361266031434e-02, -7.387185670288836e-02, -8.622607802329553e-03, -1.890006825747457e-02, -1.890006825747457e-02, -4.937064743718222e+00, -4.939220029076138e+00, -4.937282204170701e+00, -4.938958205635409e+00, -4.938173792218500e+00, -4.938173792218500e+00, -1.772981351696533e+00, -1.786233327909226e+00, -1.765915477556780e+00, -1.776155131118459e+00, -1.791444557986710e+00, -1.791444557986710e+00, -5.946119255029307e-01, -6.724582236861996e-01, -5.664741799429963e-01, -6.121671881967941e-01, -6.188239657348321e-01, -6.188239657348321e-01, -1.362679639808370e-01, -2.038603915722431e-01, -1.335097793679511e-01, -1.924573671919653e+00, -1.449089404730561e-01, -1.449089404730561e-01, -8.315525495343716e-03, -9.520251943085560e-03, -7.164541829093397e-03, -9.723377770019663e-02, -8.690932377072554e-03, -8.690932377072554e-03, -6.458152524266906e-01, -6.332518894315157e-01, -6.375488447516545e-01, -6.410282044703335e-01, -6.392713885907628e-01, -6.392713885907628e-01, -6.293173667271598e-01, -5.010791725270334e-01, -5.337181040894849e-01, -5.673419189001339e-01, -5.500452529157065e-01, -5.500452529157065e-01, -7.021185951434505e-01, -2.414777372321248e-01, -2.789286392247562e-01, -3.605016169898526e-01, -3.147957227954942e-01, -3.147957227954941e-01, -4.569746091775618e-01, -6.965713172202963e-02, -8.979777586043200e-02, -3.495060263716248e-01, -1.155983582256941e-01, -1.155983582256942e-01, -2.135502543462823e-02, -2.583431975773088e-03, -4.926379664524182e-03, -1.106225475860594e-01, -7.391787217909166e-03, -7.391787217909155e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_pbe1kcis_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_pbe1kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.229331408873064e-09, -5.229292432796661e-09, -5.229062795752766e-09, -5.229701934966156e-09, -5.229311322908561e-09, -5.229311322908561e-09, -6.330441983125053e-06, -6.330418264915072e-06, -6.328627006155167e-06, -6.324826024045478e-06, -6.330335447459923e-06, -6.330335447459923e-06, -3.375746576322267e-03, -3.386022366923118e-03, -3.583811809428497e-03, -3.482001677160923e-03, -3.379508795271010e-03, -3.379508795271010e-03, -3.009686706650912e-01, -2.939002785770842e-01, -1.779900822959721e-03, -4.981919102420163e-01, -2.990534423192592e-01, -2.990534423192592e-01, 1.861741677559887e+01, 1.758223908584756e+01, 2.189512367627433e-03, 3.166414465331231e+01, 1.849082319094772e+01, 1.849082319094772e+01, -1.221276361127392e-06, -1.218113160214502e-06, -1.220943970543584e-06, -1.218485451675779e-06, -1.219675391629203e-06, -1.219675391629203e-06, -5.054102124975097e-05, -4.948078881448816e-05, -5.060323049348717e-05, -4.978152652856319e-05, -4.971240195342555e-05, -4.971240195342555e-05, -3.484612931601518e-03, 3.488240730907774e-03, -4.938493040416051e-03, 4.416466628536266e-04, -2.330361884875545e-03, -2.330361884875545e-03, -5.519638983263198e-01, -2.081164756458987e-01, -6.268597638385895e-01, -3.580623473588571e-05, -6.041906810722785e-01, -6.041906810722785e-01, 3.494224649296422e+01, 3.015149930550104e+01, 1.172763062765353e+02, -6.586452870360856e-01, 4.917299079924810e+01, 4.917299079924803e+01, 5.957032931053122e-02, 2.189607414973357e-02, 2.987859133419634e-02, 3.911948685552828e-02, 3.404584953684980e-02, 3.404584953684979e-02, 5.581825666499381e-02, -7.387924852858560e-03, -3.707403375216752e-03, 2.375573662673684e-03, -1.220647144276731e-03, -1.220647144276733e-03, 1.512650417708096e-03, -1.168940154263687e-01, -7.473623558859036e-02, -3.119075073543029e-02, -5.061357809345232e-02, -5.061357809345236e-02, -1.188183298260338e-02, 3.177636737827196e-01, -4.487696438678007e-01, -2.985964722753565e-02, -8.410014869380168e-01, -8.410014869380155e-01, 1.146743558804703e+01, 2.066017027848067e+02, 9.089391840752300e+01, -1.002859335365685e+00, 8.560068418409881e+01, 8.560068418409872e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_pbe1kcis_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_pbe1kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-2.225524093233553e-05, -2.225606336584070e-05, -2.225993513366374e-05, -2.224658901891467e-05, -2.225567137342321e-05, -2.225567137342321e-05, -1.103375732091161e-04, -1.103792504492630e-04, -1.116559114576832e-04, -1.114665926149092e-04, -1.103460345943615e-04, -1.103460345943615e-04, -7.283621680240627e-04, -7.256017681805308e-04, -6.558702645251053e-04, -7.312747927454519e-04, -7.274869677580036e-04, -7.274869677580036e-04, -8.451890582413728e-03, -8.864042046265289e-03, -1.952087087446241e-04, -1.814839427557602e-03, -8.559457157853992e-03, -8.559457157853992e-03, -6.520743771053141e-05, -7.098736100182228e-05, -4.173045158383965e-04, -5.331531920572384e-06, -7.270089298099212e-05, -7.270089298099205e-05, -6.579539736358970e-04, -6.651501539209406e-04, -6.587768376844056e-04, -6.643663644394170e-04, -6.615062958221275e-04, -6.615062958221275e-04, -3.305245846997200e-04, -3.502088061932362e-04, -3.246795444210554e-04, -3.401509042580949e-04, -3.517982207702240e-04, -3.517982207702240e-04, -7.104518826578664e-03, -7.638906564943958e-03, -4.910092185736995e-03, -5.075563413635466e-03, -8.930338841720708e-03, -8.930338841720708e-03, -1.175694108567538e-03, -3.465186296566840e-03, -1.328503650732902e-03, -4.822266509447020e-04, -2.163667474420553e-03, -2.163667474420553e-03, -7.566986639277331e-06, -8.175181896509264e-06, -1.802808770837988e-05, -5.259091259979057e-04, -8.356549398612751e-06, -8.356549398612739e-06, -1.040316096211166e-01, -7.153947775580957e-02, -8.336438324649990e-02, -9.365676020884105e-02, -8.842824010448443e-02, -8.842824010448443e-02, -4.085605780887295e-02, -1.105656732477181e-02, -1.687103482894834e-02, -2.706049064487966e-02, -2.088503256970472e-02, -2.088503256970471e-02, -5.072386075832423e-03, -4.714676000696310e-03, -5.889650691753298e-03, -7.557264545373913e-03, -7.471438111674142e-03, -7.471438111674143e-03, -7.427570894310440e-03, -3.366604214812234e-04, -5.191703548342757e-04, -1.073302435092718e-02, -1.349060995780660e-03, -1.349060995780665e-03, -3.492225523165818e-05, -6.797098630260177e-07, -4.815382164844981e-06, -1.458581566934724e-03, -8.482594563273369e-06, -8.482594563273335e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
