
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_lc_tmlyp_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_lc_tmlyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.086494151485102e+01, -2.086503436680232e+01, -2.086545135348708e+01, -2.086407209781590e+01, -2.086479417412291e+01, -2.086479417412291e+01, -2.968588890973371e+00, -2.968733753170427e+00, -2.972596253431958e+00, -2.971315268794955e+00, -2.971134298317254e+00, 6.030868340029122e+152, -3.984570492048428e-01, 1.470590636529224e+245, 3.388615693834102e+158, 1.822835313283061e+211, 8.022718886680935e+157, 1.848228825885936e+211, 5.819442516731731e+98, 3.928583428042538e+215, -3.120100243450156e-01, 1.298091247156016e+231, 1.386842091305410e+216, 1.150788694693219e+245, 1.620890756275247e+168, 4.462802965400692e+199, 1.017161479058667e+229, 1.197825348109035e+219, 2.322431904167642e+265, 1.940858699300514e+175, 2.692394412403647e+164, 5.411411936535263e+237, 3.542217961314822e+199, -5.102117527314057e+00, 3.221974276234827e+218, 4.477754459441902e+170, -1.561411119468195e+00, -1.588156364267370e+00, -1.540755560641672e+00, -1.564970906267511e+00, -1.586192781021621e+00, 7.294459034088716e+154, 1.502169621227670e+178, 1.376152445050127e+216, 3.888456625567664e+178, 3.575865469454609e+216, 1.324882775033771e+178, -4.643044837119981e-01, -1.473108177464045e-02, 2.895685800522058e+201, -1.344137759695507e-02, 2.269754056495670e+62, 4.242402300809635e+163, 9.679614690041609e+250, -4.711643822997102e-04, 2.261415430043306e+151, 3.947558842698996e+259, -9.026752170992214e-03, -5.493305335269119e-04, 1.953905220370599e+149, 6.397589033161177e+235, 7.343928915383528e+224, -4.886546542107381e-01, 1.482911123306722e+207, 1.775943307722695e+162, 4.291566652958862e+240, 3.467849999368970e+226, 3.879310643549828e+159, 6.217311867488416e+226, 8.225498879408005e+197, 3.164254777439386e+244, -4.071437526218785e-01, 8.182071658095023e+244, -7.988938202960112e-02, 1.238281516434083e+224, -2.068104257187957e-01, 2.597915474392837e+175, 1.482867263525086e+198, -3.082165407000584e-01, 5.652549819860507e+257, 2.409099223825551e+257, 2.136380739601480e+252, -1.256523979917194e-02, 1.623062909788073e+255, 3.327940768898492e+253, 4.717848664401375e+181, 1.092818463783014e+16, 4.065497390675292e+184, 8.984547650201088e+209, 2.330133470150917e+237]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_lc_tmlyp_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_lc_tmlyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.970046180992518e+01, -2.970053343310221e+01, -2.970088211065145e+01, -2.969981511266946e+01, -2.970036990608462e+01, -2.970036990608462e+01, -4.869277056511542e+00, -4.869242362761862e+00, -4.868418043509507e+00, -4.869201157922558e+00, -4.868600265651419e+00, -1.023978724176056e+153, -8.609676563789905e-01, -2.403404325984212e+245, -5.526409850824205e+158, -2.974762777544796e+211, -1.309080950725607e+158, -3.015787020240706e+211, -7.476627164822244e+98, -5.072754033470510e+215, -1.072872455858195e+00, -1.493406881184373e+231, -1.679182595479390e+216, -1.393370131551446e+245, 1.537367329407981e+169, 3.984674625310149e+200, 2.773260477274981e+228, 2.112375018798932e+220, 3.180701804168555e+266, 2.658115725771467e+176, -4.557524789323345e+164, -9.160101257426711e+237, -5.996054974295488e+199, -7.140758954260933e+00, -5.453961708677518e+218, -7.579669875947912e+170, -2.713707112150396e+00, -2.729532191987424e+00, -2.702510667437151e+00, -2.716315484827072e+00, -2.727862792373761e+00, -1.239069003717651e+155, -2.427895707295096e+178, -2.240172060328368e+216, -6.238535951966673e+178, -5.758687753771941e+216, -2.144434122584299e+178, -7.219829802745175e-01, -3.188895020312828e-02, -3.722184871872964e+201, -2.774415900541013e-02, -3.854808926428315e+62, -4.360535629769658e+163, -9.949151859151385e+250, -6.270946876824670e-04, 4.088055147980674e+152, 9.534348826610021e+260, -1.495950316484708e-02, -7.309044559318259e-04, 3.862204881861976e+150, -1.034469552319055e+236, -1.186871426382246e+225, -7.024376784974005e-01, -2.397374032615080e+207, -2.870892894163177e+162, -6.937512112707072e+240, -5.593285881505509e+226, -6.160194536866015e+159, -9.922287233002450e+226, -1.318638971194959e+198, -5.061273941189402e+244, -6.211434742549278e-01, -1.336931376629471e+245, -1.792675831516213e-01, -1.781198211262901e+224, -3.674006350592029e-01, -3.841879363466831e+175, -2.192910891309509e+198, -5.204208307132525e-01, 2.025547774553579e+257, -4.209311422480665e+256, -3.217316267750768e+252, -2.239438383590804e-02, -1.166191916191295e+255, 2.076201156012905e+254, 3.405517833037893e+183, 3.662889985715128e+17, -2.673268223990820e+184, 1.931325241477563e+211, 5.008872746991837e+238]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_lc_tmlyp_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_lc_tmlyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-9.856945150374921e-09, -9.856742068444902e-09, -9.855842868702599e-09, -9.858858211007096e-09, -9.857277688592514e-09, -9.857277688592514e-09, -2.191480237921922e-05, -2.191135209860846e-05, -2.181914366060384e-05, -2.184849231860374e-05, -2.185434865529709e-05, -8.447919574913348e-06, -1.975955763125422e-02, -3.355184208690183e-03, -3.368178060894810e-03, -3.416212277854648e-03, -3.403983664654770e-03, -3.403983664654770e-03, -2.420960235661307e-02, -3.473539521384000e-02, -1.778580160681105e-02, 3.939979327842192e-01, 1.525915504630612e-01, 1.525915504630614e-01, -3.597790977899432e+00, -3.586016566080811e+00, 7.280607655643790e+00, -3.694657321367434e+00, -3.665779118477303e+00, -3.665779118477303e+00, -2.160052274084670e-06, -2.158714683751613e-06, -2.159987970298576e-06, -2.484272934261835e-06, -2.159378149980038e-06, -2.159378149980038e-06, -2.397156916317456e-04, -2.271205951233848e-04, -2.498218145607342e-04, -2.379638223067645e-04, -2.280556967708286e-04, -7.439258966241647e-05, -8.704323145534357e-03, -6.918061931849089e-03, -1.049314689742230e-02, -9.986336952745926e-03, -8.374177123662299e-03, -1.260401628790893e-02, -9.425476038029204e-01, 3.365938436192589e-02, -4.887065947729528e-01, -1.042124236627710e-04, 1.035877873361580e+00, 1.035877873361580e+00, -6.086300055272323e+00, -3.695456451349481e+00, -3.750104455387985e+00, 3.347544389757927e+00, -3.232441681002229e+00, -3.723657715817203e+00, -7.942970475544387e-03, -8.715542783603024e-03, -8.105912506594494e-03, -8.256205407385187e-03, -8.371097004702850e-03, -8.371097004702850e-03, -8.796280946243924e-03, -1.516346795410547e-02, -1.388378177648421e-02, -1.229836946847518e-02, -1.315951373715322e-02, -1.640822766709840e-02, -5.811483209751092e-03, -5.589583680553996e-01, -5.455605076475401e-02, -9.995036385408726e-02, -4.990930448382990e-02, -4.990930448382998e-02, -4.043104302862499e-02, 6.832936069151089e+00, 7.970046273384357e+00, -4.745602055400117e-02, 1.625717638713648e+00, 3.855629644430482e+00, -3.453699473496816e+00, -3.790538181914906e+00, -3.764960606276402e+00, 4.469497499096764e+00, -3.735568335075561e+00, -3.735568335075564e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_lc_tmlyp_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_lc_tmlyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.084681652929630e-03, 1.084678629121514e-03, 1.084664252974916e-03, 1.084709261109390e-03, 1.084685809979437e-03, 1.084685809979437e-03, 6.615284141045301e-03, 6.615270064960097e-03, 6.614784951165152e-03, 6.614390132404631e-03, 6.615110060499025e-03, 3.399169390232504e-03, 2.940494873658293e-02, 1.117237109588993e-02, 1.056848301009380e-02, 1.088386017393035e-02, 1.081027863099895e-02, 1.081027863099895e-02, 1.459340008555706e-02, 1.499588949939559e-02, 2.622103013574289e-02, 8.587174774069639e-03, 1.091419770027053e-02, 1.091419770027052e-02, 3.860244544832927e-06, 4.489983429522259e-06, 5.257291186588779e-04, 7.591443067989048e-07, 1.497412914429126e-06, 1.497412914429126e-06, 3.509100627852546e-03, 3.513872052145275e-03, 3.509380100189648e-03, 4.435241023590807e-03, 3.511487865793808e-03, 3.511487865793808e-03, 1.158227190181613e-02, 1.150234301124737e-02, 1.164131346956717e-02, 1.156991718459662e-02, 1.150983074969651e-02, 5.515206391920032e-03, 2.061619279650142e-02, 2.303570072704213e-02, 1.931340796624393e-02, 2.127743679572875e-02, 2.104280599143307e-02, 3.185692756969029e-02, 9.524365191286320e-03, 1.195124922282205e-02, 7.947720417566830e-03, 7.702422914852645e-03, 6.467383139764010e-03, 6.467383139764010e-03, 3.575883793921271e-07, 7.092845649006053e-07, 3.213513837722561e-07, 2.890348158998660e-03, 5.684409674624211e-07, 5.583318008376020e-07, 3.002249980056662e-02, 2.842081494914095e-02, 3.216260374959726e-02, 2.942070239260439e-02, 2.918502690206237e-02, 2.918502690206237e-02, 3.030172129503695e-02, 2.161051031097729e-02, 2.363221004766492e-02, 2.600048531448813e-02, 2.473798347882188e-02, 3.433846157917840e-02, 2.124697698436216e-02, 3.632889654295993e-02, 1.761738287253002e-02, 4.016911240125031e-02, 2.002226626379415e-02, 2.002226626379415e-02, 3.705247365608522e-02, 4.705685773529159e-04, 1.005102610274393e-03, 2.418190439544729e-02, 5.436863446415875e-03, 3.027241382658803e-03, 1.048538390925920e-05, 1.382694092964746e-08, 1.272523012608695e-07, 2.671962158090666e-03, 4.435737616056682e-07, 4.435737616056674e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
