
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_x1b95_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_x1b95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-5.825827576488677e+00, -5.825835139416474e+00, -5.825886820343884e+00, -5.825773895857136e+00, -5.825830498644767e+00, -5.825830498644767e+00, -1.015439863502018e+00, -1.015429310958673e+00, -1.015190343719621e+00, -1.015586475395150e+00, -1.015354140304110e+00, -1.015354140304110e+00, -2.296451831802906e-01, -2.294411172125812e-01, -2.249430260237757e-01, -2.257973461889364e-01, -2.256324925433363e-01, -2.256324925433363e-01, -6.938300005513817e-02, -7.003020163517540e-02, -2.785690713070169e-01, -5.780244517151011e-02, -6.206492592253598e-02, -6.206492592253597e-02, -1.315828109485002e-02, -1.315827388004959e-02, -2.497624813627702e-02, -1.207370139622830e-02, -1.199103817768392e-02, -1.199103817768392e-02, -1.439410585904728e+00, -1.439255711498082e+00, -1.439405129181137e+00, -1.439268415368358e+00, -1.439331140188849e+00, -1.439331140188849e+00, -6.165516712297230e-01, -6.194203336594597e-01, -6.161515246581203e-01, -6.186808843161417e-01, -6.183341813213262e-01, -6.183341813213262e-01, -1.920337094925677e-01, -2.048343754850512e-01, -1.821720296934287e-01, -1.907011146141618e-01, -1.941380726067267e-01, -1.941380726067267e-01, -4.605406777765361e-02, -7.263233859601544e-02, -4.354460220151533e-02, -5.630099519678951e-01, -4.971560633074695e-02, -4.971560633074695e-02, -1.090616191506592e-02, -1.162896972894900e-02, -7.606068243101462e-03, -3.280616329300505e-02, -9.200389786308674e-03, -9.200389786308679e-03, -1.842187516057773e-01, -1.843974866555856e-01, -1.843439068725625e-01, -1.842922052903936e-01, -1.843192082702266e-01, -1.843192082702266e-01, -1.805757495816121e-01, -1.653177656480780e-01, -1.696570038610633e-01, -1.739060121226905e-01, -1.717450230073031e-01, -1.717450230073031e-01, -2.153892685117709e-01, -8.693761411638168e-02, -9.961721183018971e-02, -1.235074896020039e-01, -1.103168680252182e-01, -1.103168680252182e-01, -1.547664417876768e-01, -2.472159055172440e-02, -2.924232246543353e-02, -1.184726100638454e-01, -3.784206954743963e-02, -3.784206954743963e-02, -1.480376568194082e-02, -6.753886595778541e-03, -8.812001772713109e-03, -3.634615193859572e-02, -8.647503700222518e-03, -8.647503700222511e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_x1b95_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_x1b95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-6.998968338109220e+00, -6.998993809531314e+00, -6.999102201108797e+00, -6.998723294367506e+00, -6.998922522477680e+00, -6.998922522477680e+00, -1.212266378164947e+00, -1.212269705541002e+00, -1.212338542969893e+00, -1.212041484599427e+00, -1.212111806082844e+00, -1.212111806082844e+00, -2.885026033495219e-01, -2.879977428068130e-01, -2.746032008852701e-01, -2.745391987560090e-01, -2.750675306368646e-01, -2.750675306368646e-01, -7.866680339410152e-02, -8.020548106541314e-02, -3.681840624123711e-01, -5.913248053102186e-02, -6.700136437978942e-02, -6.700136437978940e-02, -3.689907855594163e-03, -3.771640630267087e-03, -1.757538225829010e-02, -2.846255909728059e-03, -3.072643222486862e-03, -3.072643222486872e-03, -1.777185593711990e+00, -1.777807806942321e+00, -1.777212580638663e+00, -1.777761938432529e+00, -1.777501790380130e+00, -1.777501790380130e+00, -6.769690998266734e-01, -6.815804088715237e-01, -6.719289949166148e-01, -6.759785135510268e-01, -6.819725281430463e-01, -6.819725281430463e-01, -2.408688386159568e-01, -2.565205927346885e-01, -2.299363111604346e-01, -2.359884740155755e-01, -2.439933435084278e-01, -2.439933435084278e-01, -4.250853766879401e-02, -7.571653852623825e-02, -4.004518943113942e-02, -7.019000851647246e-01, -4.823992270471707e-02, -4.823992270471707e-02, -2.442254673810510e-03, -2.755260416751664e-03, -1.903577864165963e-03, -2.964073352437233e-02, -2.299198152362934e-03, -2.299198152362942e-03, -2.363081889589443e-01, -2.360614706217911e-01, -2.362459479953734e-01, -2.363218470273354e-01, -2.362932994269561e-01, -2.362932994269561e-01, -2.297399245935309e-01, -2.005319654862812e-01, -2.105821192945971e-01, -2.199880641355438e-01, -2.153938558645960e-01, -2.153938558645960e-01, -2.686985650594209e-01, -9.487433766578904e-02, -1.145327354429109e-01, -1.542790512561722e-01, -1.325393542143255e-01, -1.325393542143254e-01, -1.899168020045707e-01, -1.650130924584955e-02, -2.413485211603786e-02, -1.506809655177386e-01, -3.490288625180743e-02, -3.490288625180742e-02, -4.602041692146389e-03, -1.276075098824793e-03, -1.896990566292559e-03, -3.336985224730803e-02, -2.148847003742728e-03, -2.148847003742715e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_x1b95_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_x1b95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.830840350785640e-09, -1.830830498941091e-09, -1.830767004031530e-09, -1.830914152177965e-09, -1.830839844367229e-09, -1.830839844367229e-09, -1.430366098401930e-06, -1.430405643733408e-06, -1.431955455727827e-06, -1.436488048836358e-06, -1.434166439007965e-06, -1.434166439007965e-06, 6.201142010369468e-04, 5.976693461168499e-04, 7.838693151085148e-05, 1.039957654141760e-05, 5.041469839707144e-05, 5.041469839707144e-05, -6.958683229239288e-02, -6.203512264674668e-02, 1.216751520480409e-03, -2.107218115842973e-01, -1.354304586568656e-01, -1.354304586568656e-01, -2.047156547123272e+03, -1.794200581490622e+03, -9.393195451352248e+00, -9.681539608774148e+03, -5.362018956866211e+03, -5.362018956866214e+03, -4.508262394769983e-07, -4.508220959383133e-07, -4.508319297208177e-07, -4.508279747655675e-07, -4.508211890511093e-07, -4.508211890511093e-07, -1.420169403177583e-05, -1.393721873605057e-05, -1.442821268976872e-05, -1.419110579099252e-05, -1.394379229368317e-05, -1.394379229368317e-05, 8.735324643806201e-04, 2.953520650003601e-03, 2.131993851922375e-03, 7.960834094612812e-03, 9.547095404632772e-04, 9.547095404632772e-04, -6.086960007684750e-01, -8.134203768371069e-02, -7.549243347139266e-01, 1.024649864482843e-05, -4.311543916734620e-01, -4.311543916734621e-01, -2.208721219645637e+04, -1.081646929514826e+04, -3.918090859323960e+04, -2.199269348107108e+00, -1.849833565097851e+04, -1.849833565097849e+04, 2.698696004524434e-03, 1.918277971182905e-03, 2.187173281854392e-03, 2.420160887812741e-03, 2.303484247189010e-03, 2.303484247189010e-03, 4.175854693674892e-03, -1.006026447711268e-03, -3.520775965202682e-05, 1.268674901851881e-03, 5.866056300244237e-04, 5.866056300244237e-04, 2.607954938900219e-03, -3.427830503575902e-02, -1.455108749529621e-02, 3.918873631231407e-03, -4.431816875376950e-03, -4.431816875376950e-03, -1.947440067541330e-04, -1.067199740535553e+01, -3.873814659087805e+00, 1.263623982876795e-02, -1.310199024860457e+00, -1.310199024860457e+00, -7.149786885045307e+02, -7.602275872515450e+05, -7.290553251661778e+04, -1.521298897962900e+00, -2.469580228394932e+04, -2.469580228394940e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_x1b95_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_x1b95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_x1b95_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_x1b95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-1.453792283978471e-05, -1.453818662584219e-05, -1.453879561912927e-05, -1.453488296950892e-05, -1.453701315010626e-05, -1.453701315010626e-05, -2.775718393848247e-04, -2.776240936498513e-04, -2.788234851368839e-04, -2.766509746532341e-04, -2.776228584892479e-04, -2.776228584892479e-04, -2.566454190939865e-03, -2.533371885065624e-03, -1.804185727185526e-03, -1.813146546056280e-03, -1.838213172349539e-03, -1.838213172349539e-03, -2.555797814259009e-03, -2.812007899408073e-03, -2.283128744728795e-03, -9.589339535762655e-04, -1.555106140527363e-03, -1.555106140527362e-03, -3.258796894617046e-07, -3.975288282833202e-07, -2.492603401189000e-05, -6.277512067909956e-08, -1.524265052365561e-07, -1.524265052365564e-07, -2.269702985532985e-04, -2.280573663706722e-04, -2.270144524712743e-04, -2.279741091301697e-04, -2.275237198577517e-04, -2.275237198577517e-04, -2.646821746696447e-04, -2.698698241827689e-04, -2.483762463982107e-04, -2.527232363479489e-04, -2.759354158000614e-04, -2.759354158000614e-04, -6.369241708602159e-03, -1.190292719782858e-02, -6.412473447449897e-03, -1.282699419954386e-02, -6.819996236865639e-03, -6.819996236865639e-03, -2.855271797554048e-04, -1.081443713068554e-03, -2.474314630730053e-04, -1.928645477872851e-03, -6.389134607717199e-04, -6.389134607717198e-04, -3.950316868999526e-08, -6.927478027200196e-08, -2.025449349540546e-07, -1.121481555037163e-04, -1.603352375432031e-07, -1.603352375432027e-07, -1.715653870777054e-02, -1.386575190372423e-02, -1.490949299207765e-02, -1.586232602812442e-02, -1.537527207624292e-02, -1.537527207624292e-02, -1.924636234980064e-02, -4.390069527485070e-03, -6.462968674229307e-03, -9.827025162610095e-03, -7.946372527416517e-03, -7.946372527416517e-03, -1.066059606991729e-02, -1.552655076970212e-03, -2.480934733989058e-03, -6.305605209934963e-03, -4.033158041228320e-03, -4.033158041228323e-03, -4.854046670396275e-03, -2.008518762128271e-05, -4.752137100784840e-05, -9.965204787316353e-03, -2.644635392811541e-04, -2.644635392811544e-04, -6.882113065106681e-07, -7.619803347053765e-09, -3.151297056615350e-08, -2.192720144245662e-04, -1.623227288495196e-07, -1.623227288495198e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
