
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_pw6b95_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_pw6b95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.543356653311158e+01, -1.543358053321705e+01, -1.543370361289824e+01, -1.543347310211760e+01, -1.543357341009948e+01, -1.543357341009948e+01, -2.617217806722865e+00, -2.617191796145105e+00, -2.616569299252824e+00, -2.617975793195888e+00, -2.617216625006839e+00, -2.617216625006839e+00, -5.540011823686584e-01, -5.538945504506891e-01, -5.525424286256252e-01, -5.552870723094540e-01, -5.539588105415687e-01, -5.539588105415687e-01, -1.741474205809649e-01, -1.751104050576338e-01, -6.611516894439869e-01, -1.443933518271836e-01, -1.744226738379984e-01, -1.744226738379984e-01, -1.909214314994978e-03, -2.187811420603981e-03, -4.972069013237669e-02, -1.857513018748343e-04, -2.161107672573947e-03, -2.161107672573947e-03, -3.737774346890755e+00, -3.737107879124480e+00, -3.737710586088005e+00, -3.737192335249816e+00, -3.737426348884693e+00, -3.737426348884693e+00, -1.602841600799488e+00, -1.609793759922435e+00, -1.603861669213375e+00, -1.609268154023720e+00, -1.606236396923613e+00, -1.606236396923613e+00, -4.550859544008330e-01, -4.733498785745616e-01, -4.365071266552145e-01, -4.409005739279806e-01, -4.677032093041841e-01, -4.677032093041841e-01, -1.180470413586918e-01, -1.885190399988507e-01, -1.158257677043779e-01, -1.381945701490823e+00, -1.287469876075484e-01, -1.287469876075484e-01, -1.719133589981043e-04, -2.551362109458702e-04, -1.819714292140863e-04, -7.700717251274347e-02, -2.345489529015988e-04, -2.345489529015991e-04, -4.372639300733266e-01, -4.405236059243125e-01, -4.394597132926443e-01, -4.385729897493064e-01, -4.390252074072337e-01, -4.390252074072337e-01, -4.241386014169355e-01, -4.078130708827918e-01, -4.135739613763301e-01, -4.181786328919259e-01, -4.158284903788384e-01, -4.158284903788384e-01, -4.978909307011636e-01, -2.234999189722763e-01, -2.509450521104594e-01, -2.954441691582335e-01, -2.713190955592806e-01, -2.713190955592806e-01, -3.729462242317358e-01, -4.226443363279506e-02, -6.760459824162118e-02, -2.740933041122627e-01, -9.787972516397417e-02, -9.787972516397417e-02, -2.642812182421104e-03, -7.411635378799678e-06, -4.507513935074027e-05, -9.333845466085113e-02, -1.746059350748373e-04, -1.746059350748361e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_pw6b95_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_pw6b95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.816832161216515e+01, -1.816837994002824e+01, -1.816865076128748e+01, -1.816769536294178e+01, -1.816835228439826e+01, -1.816835228439826e+01, -3.011882624789241e+00, -3.011897679222152e+00, -3.012407386070039e+00, -3.011753810874693e+00, -3.011905212859994e+00, -3.011905212859994e+00, -6.251338196264853e-01, -6.242139744953024e-01, -5.999516121308263e-01, -6.026598098345485e-01, -6.247965711023052e-01, -6.247965711023052e-01, -1.791296403082523e-01, -1.814658002719032e-01, -7.848930310619149e-01, -1.399786014007843e-01, -1.798397412400926e-01, -1.798397412400926e-01, -7.395746853418301e-03, -8.444466366468678e-03, -1.043641304341879e-01, -7.299094036628590e-04, -8.342056178178679e-03, -8.342056178178679e-03, -4.524073061177687e+00, -4.525793277341078e+00, -4.524248408181160e+00, -4.525586001135631e+00, -4.524955441291628e+00, -4.524955441291628e+00, -1.667416468752828e+00, -1.679013849871317e+00, -1.661549799680982e+00, -1.670549621429078e+00, -1.683014821087295e+00, -1.683014821087295e+00, -5.412017528797433e-01, -5.938612005074045e-01, -5.183962984523203e-01, -5.454310235993826e-01, -5.607424755243067e-01, -5.607424755243067e-01, -1.222449311905308e-01, -1.824103177441817e-01, -1.186511369849316e-01, -1.735014584133941e+00, -1.251192226905809e-01, -1.251192226905809e-01, -6.753977013078446e-04, -1.003149832027000e-03, -7.153821391084307e-04, -1.085169666896554e-01, -9.222578790773991e-04, -9.222578790773978e-04, -5.668969483958030e-01, -5.612885151043380e-01, -5.633990383049876e-01, -5.649219946875618e-01, -5.641756011456648e-01, -5.641756011456648e-01, -5.497847763999955e-01, -4.618244291949699e-01, -4.861993864177060e-01, -5.101583316325139e-01, -4.979362694781019e-01, -4.979362694781019e-01, -6.218296277498209e-01, -2.220917571207202e-01, -2.604412216351525e-01, -3.347488570696794e-01, -2.939680485193238e-01, -2.939680485193238e-01, -4.223843196631850e-01, -1.010956023467453e-01, -1.133985844364345e-01, -3.212745855746081e-01, -1.068972085064984e-01, -1.068972085064983e-01, -1.016515703620161e-02, -2.885929207005527e-05, -1.764202310649978e-04, -1.017540358294517e-01, -6.863435175899926e-04, -6.863435175899945e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_pw6b95_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_pw6b95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.983381449921429e-09, -5.983363312908487e-09, -5.983185343114784e-09, -5.983484514451818e-09, -5.983372693560103e-09, -5.983372693560103e-09, -6.785070865126576e-06, -6.785369651503067e-06, -6.793043638894735e-06, -6.782565847250510e-06, -6.785063457347615e-06, -6.785063457347615e-06, -2.688555614573727e-03, -2.706671601975609e-03, -3.117287644613255e-03, -3.096265552911883e-03, -2.695280731281523e-03, -2.695280731281523e-03, -3.653458436369745e-01, -3.542969329637713e-01, -4.111596946023166e-04, -7.410695557181983e-01, -3.620208700792050e-01, -3.620208700792050e-01, 2.166979750557829e+02, 2.153023223470502e+02, 1.523185781931518e+01, 1.635310958825774e+02, 2.237090362427308e+02, 2.237090362427308e+02, -1.735925394546512e-06, -1.737462328710026e-06, -1.736077378773331e-06, -1.737272229420305e-06, -1.736720016384450e-06, -1.736720016384450e-06, -5.153468671106456e-05, -5.064164762626229e-05, -5.151404851512238e-05, -5.081843071993685e-05, -5.095108492658862e-05, -5.095108492658862e-05, -6.188881911719250e-03, -3.648280107733328e-03, -6.596735406174692e-03, -3.509043419998572e-03, -5.645154619253137e-03, -5.645154619253137e-03, -1.084649384175571e+00, -2.734126300150047e-01, -1.243252102669401e+00, -7.319724481705633e-05, -1.078430769904973e+00, -1.078430769904973e+00, 1.735525439152402e+02, 1.730127563896962e+02, 4.956494347694681e+02, 9.786895042059564e-01, 2.555885911981905e+02, 2.555885911981894e+02, -8.596324794806643e-03, -7.303287653698067e-03, -7.424393640444019e-03, -7.718714239351269e-03, -7.537234374707319e-03, -7.537234374707319e-03, -9.166138021358980e-03, -1.152337196490778e-02, -1.036717123741483e-02, -9.261933333340175e-03, -9.814912955136838e-03, -9.814912955136836e-03, -2.692586274837200e-03, -1.391255835741906e-01, -8.457430695427057e-02, -3.678363361218766e-02, -5.850088044524908e-02, -5.850088044524908e-02, -1.553017056711150e-02, 2.039372778643806e+01, 4.506826295848389e+00, -4.160889781922224e-02, -1.707906628043551e+00, -1.707906628043556e+00, 1.599770953363396e+02, 3.161890656286208e+02, 2.623231754629400e+02, -2.097553591056520e+00, 3.743544056052760e+02, 3.743544056052785e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_pw6b95_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_pw6b95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-1.494085585261740e-05, -1.494108538234258e-05, -1.494163398364598e-05, -1.493788514485742e-05, -1.494098087217059e-05, -1.494098087217059e-05, -2.868366023859156e-04, -2.868790685498740e-04, -2.880280719668015e-04, -2.859458716851218e-04, -2.868563189696630e-04, -2.868563189696630e-04, -2.460325197553397e-03, -2.429704336629427e-03, -1.704901694105085e-03, -1.720265831662123e-03, -2.449280223151458e-03, -2.449280223151458e-03, -4.196212915018614e-03, -4.576285316505033e-03, -2.688704861285913e-03, -1.291825962409386e-03, -4.313109296108531e-03, -4.313109296108531e-03, -3.189497425830340e-06, -3.638486837170279e-06, -7.436022083122345e-05, -2.883337693203915e-07, -3.671984567472772e-06, -3.671984567472773e-06, -2.321415548818371e-04, -2.331916290966729e-04, -2.322458703375705e-04, -2.330623612553592e-04, -2.326834166934358e-04, -2.326834166934358e-04, -2.749224779780609e-04, -2.801189839162384e-04, -2.645369868504234e-04, -2.684982816496006e-04, -2.926682937720706e-04, -2.926682937720706e-04, -6.762112469497197e-03, -1.254283587743690e-02, -6.947281694120747e-03, -1.234958254238553e-02, -7.117579841557204e-03, -7.117579841557204e-03, -4.602514209014121e-04, -1.551305752884396e-03, -5.211593064752598e-04, -1.956602587307765e-03, -8.709534058189179e-04, -8.709534058189179e-04, -2.763680613271142e-07, -4.035848910874711e-07, -5.119638120303683e-07, -1.937168171387969e-04, -4.587669009652870e-07, -4.587669009652867e-07, -1.726462589491125e-02, -1.429207624208898e-02, -1.526527123004637e-02, -1.608562377000507e-02, -1.566770086773960e-02, -1.566770086773960e-02, -1.883905235533742e-02, -4.979947103261630e-03, -7.113758973865858e-03, -1.016625716105691e-02, -8.491339617920609e-03, -8.491339617920611e-03, -1.128174917948283e-02, -2.164651154163926e-03, -3.326411539137938e-03, -7.051091773424945e-03, -4.955174231582363e-03, -4.955174231582360e-03, -5.404398471191469e-03, -5.012216603953107e-05, -1.196320171328056e-04, -1.135707909116760e-02, -4.314092156637712e-04, -4.314092156637718e-04, -3.718477440409178e-06, -1.720930406518950e-08, -9.360076918114487e-08, -4.708349223805567e-04, -4.230982656878167e-07, -4.230982656878151e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
