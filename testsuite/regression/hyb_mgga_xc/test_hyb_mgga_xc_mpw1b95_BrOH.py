
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_mpw1b95_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_mpw1b95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.461574441106425e+01, -1.461576064058384e+01, -1.461588612992572e+01, -1.461561926504684e+01, -1.461575252674833e+01, -1.461575252674833e+01, -2.473549124632939e+00, -2.473528125988217e+00, -2.473037986489360e+00, -2.474193081171752e+00, -2.473549872685714e+00, -2.473549872685714e+00, -5.213848886850545e-01, -5.212213822834120e-01, -5.183379714130315e-01, -5.209804235066606e-01, -5.213222192227617e-01, -5.213222192227617e-01, -1.624911260971877e-01, -1.634526473214328e-01, -6.246198563779775e-01, -1.349675866584679e-01, -1.627667658041289e-01, -1.627667658041289e-01, -3.414125900225095e-03, -3.864629011377736e-03, -5.539778484604256e-02, -3.943176649367223e-04, -3.818406753614339e-03, -3.818406753614339e-03, -3.549632014075740e+00, -3.549192166661328e+00, -3.549590719906284e+00, -3.549248686652273e+00, -3.549401167732349e+00, -3.549401167732349e+00, -1.502648299095154e+00, -1.509456314356832e+00, -1.503194883847872e+00, -1.508485472070784e+00, -1.506578404980241e+00, -1.506578404980241e+00, -4.315413614343746e-01, -4.530667921901123e-01, -4.137421705276079e-01, -4.212214107085749e-01, -4.440165676116277e-01, -4.440165676116277e-01, -1.124885444534087e-01, -1.757654844681344e-01, -1.101274540495144e-01, -1.320504158005831e+00, -1.210095490336774e-01, -1.210095490336774e-01, -3.663969276297055e-04, -5.304807279394904e-04, -3.801475793342985e-04, -7.747714913863273e-02, -4.872155319874204e-04, -4.872155319874205e-04, -4.198218558423530e-01, -4.216986433667451e-01, -4.210912400793371e-01, -4.205809462359001e-01, -4.208417925230952e-01, -4.208417925230952e-01, -4.075383726907718e-01, -3.846395787584636e-01, -3.917063640514951e-01, -3.979181108384535e-01, -3.947258299166020e-01, -3.947258299166020e-01, -4.763804000666708e-01, -2.083852100606783e-01, -2.345104290595953e-01, -2.782481558001790e-01, -2.544314513197704e-01, -2.544314513197704e-01, -3.515548630951147e-01, -4.943079889012891e-02, -7.068217680224316e-02, -2.591320466607834e-01, -9.408643111574846e-02, -9.408643111574845e-02, -4.617618948634766e-03, -1.888084778255314e-05, -1.035273543616375e-04, -8.966787128484631e-02, -3.672807205642925e-04, -3.672807205642906e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_mpw1b95_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_mpw1b95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.751250002723608e+01, -1.751255633172081e+01, -1.751281757086791e+01, -1.751189531152933e+01, -1.751252963705837e+01, -1.751252963705837e+01, -2.905295307828707e+00, -2.905310924263072e+00, -2.905831625060735e+00, -2.905139466095676e+00, -2.905317710338331e+00, -2.905317710338331e+00, -6.026712925498003e-01, -6.017113923797857e-01, -5.760140890983880e-01, -5.787380608602835e-01, -6.023199021067224e-01, -6.023199021067224e-01, -1.695270249102556e-01, -1.721057918816950e-01, -7.590883578706551e-01, -1.266609821843916e-01, -1.703153029737397e-01, -1.703153029737397e-01, -1.206200236227821e-02, -1.355456378054506e-02, -8.946917828359724e-02, -1.453137614837819e-03, -1.339455188483831e-02, -1.339455188483831e-02, -4.362393111340080e+00, -4.364007231068646e+00, -4.362557736803527e+00, -4.363812843745221e+00, -4.363221134514629e+00, -4.363221134514629e+00, -1.597706206883624e+00, -1.609339311446253e+00, -1.591314614734929e+00, -1.600357035454830e+00, -1.613967791015568e+00, -1.613967791015568e+00, -5.237092019334404e-01, -5.732455981450558e-01, -5.017633698859000e-01, -5.274222837700436e-01, -5.425649361081560e-01, -5.425649361081560e-01, -1.040417913676281e-01, -1.684698593260259e-01, -1.014742017269074e-01, -1.671956862526346e+00, -1.105109680343024e-01, -1.105109680343024e-01, -1.350303905622112e-03, -1.953355016513249e-03, -1.400113122981088e-03, -8.785904538777853e-02, -1.794003329447270e-03, -1.794003329447270e-03, -5.459241286582610e-01, -5.414704388526002e-01, -5.431680132781816e-01, -5.443708816885511e-01, -5.437825322477062e-01, -5.437825322477062e-01, -5.292218186175284e-01, -4.461002591038315e-01, -4.703735231170133e-01, -4.935047169271508e-01, -4.818110965938330e-01, -4.818110965938330e-01, -6.004055476319586e-01, -2.086741947368055e-01, -2.480655077999771e-01, -3.232299979523517e-01, -2.823716673902987e-01, -2.823716673902987e-01, -4.079482625433053e-01, -9.141472674661538e-02, -9.255240616851028e-02, -3.110485512598257e-01, -8.953049583451181e-02, -8.953049583451171e-02, -1.608363350816664e-02, -6.919308936673565e-05, -3.810774196970679e-04, -8.530886799727219e-02, -1.353175561639220e-03, -1.353175561639214e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_mpw1b95_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_mpw1b95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.885482649548250e-09, -4.885462065050147e-09, -4.885299980249940e-09, -4.885638688936337e-09, -4.885472378433169e-09, -4.885472378433169e-09, -5.450458299959953e-06, -5.450645548407836e-06, -5.455463394941855e-06, -5.450917438984242e-06, -5.450416990582010e-06, -5.450416990582010e-06, -2.021095555874887e-03, -2.042176688685001e-03, -2.536725910285277e-03, -2.523447249626463e-03, -2.028872244101002e-03, -2.028872244101002e-03, -3.219647610616305e-01, -3.091223458261234e-01, -2.063623791944682e-05, -7.560273442442447e-01, -3.180390999256828e-01, -3.180390999256828e-01, 3.354351280089616e+02, 3.271720004864920e+02, 6.274662764688044e+00, 3.143244590744819e+02, 3.400764655310210e+02, 3.400764655310210e+02, -1.376780357466869e-06, -1.377480159071859e-06, -1.376850273459880e-06, -1.377394188135717e-06, -1.377141378076364e-06, -1.377141378076364e-06, -4.427859000011103e-05, -4.344736896681877e-05, -4.437110286219795e-05, -4.372149705065547e-05, -4.359054535627613e-05, -4.359054535627613e-05, -4.251209983726439e-03, -1.319474652185815e-03, -4.296931877474391e-03, -5.099198599866975e-04, -3.858562259871179e-03, -3.858562259871179e-03, -1.433139650922395e+00, -2.617439759434613e-01, -1.592382522856539e+00, -4.684767331680783e-05, -1.185922486369418e+00, -1.185922486369418e+00, 3.350660097380894e+02, 3.250315295089544e+02, 9.361357522521333e+02, -2.330648151511393e+00, 4.796310782789130e+02, 4.796310782789123e+02, -4.770982966424867e-03, -4.340912141397450e-03, -4.295773110180374e-03, -4.389528107197147e-03, -4.321091153375051e-03, -4.321091153375048e-03, -4.515654920250387e-03, -8.999121695443651e-03, -7.641129035513642e-03, -6.249447593155136e-03, -6.956318692561330e-03, -6.956318692561326e-03, -8.049735176524466e-04, -1.264822328727455e-01, -7.285556100625834e-02, -2.754183089535276e-02, -4.767493072815402e-02, -4.767493072815404e-02, -1.192166375145661e-02, 1.164275952873686e+01, -2.749688364854507e-01, -2.695800480111353e-02, -2.638376278989284e+00, -2.638376278989288e+00, 2.390303437667841e+02, 7.329122247771119e+02, 5.478683393458500e+02, -3.214354843123776e+00, 7.123520822751709e+02, 7.123520822751692e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_mpw1b95_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_mpw1b95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-1.453792881020835e-05, -1.453815844837191e-05, -1.453871124683689e-05, -1.453496057061442e-05, -1.453805385589584e-05, -1.453805385589584e-05, -2.775436576906803e-04, -2.775855508915998e-04, -2.787195116710247e-04, -2.766666961361983e-04, -2.775631483849621e-04, -2.775631483849621e-04, -2.355930769489709e-03, -2.326155936325914e-03, -1.624213943089691e-03, -1.639251645310494e-03, -2.345189621909301e-03, -2.345189621909301e-03, -3.960154996545132e-03, -4.321891409453982e-03, -2.589762119739679e-03, -1.210365121099308e-03, -4.071359626015101e-03, -4.071359626015101e-03, -2.971904688411089e-06, -3.390279689868400e-06, -6.932569228204634e-05, -2.686526026535870e-07, -3.421491950835473e-06, -3.421491950835474e-06, -2.270364236199089e-04, -2.280904403504870e-04, -2.271411325631901e-04, -2.279606871468378e-04, -2.275802814273013e-04, -2.275802814273013e-04, -2.619657172859747e-04, -2.670105022861876e-04, -2.519477275473951e-04, -2.557893556152959e-04, -2.791220374975574e-04, -2.791220374975574e-04, -6.561847842347336e-03, -1.240282339943801e-02, -6.733639062756232e-03, -1.215298748333417e-02, -6.923214536847441e-03, -6.923214536847441e-03, -4.299701434995194e-04, -1.456751740288871e-03, -4.869407601727779e-04, -1.934623506917164e-03, -8.147950457462470e-04, -8.147950457462470e-04, -2.575035527888732e-07, -3.760377772443233e-07, -4.770189010703516e-07, -1.807137943766328e-04, -4.274533259165149e-07, -4.274533259165147e-07, -1.720174471106644e-02, -1.414907958778020e-02, -1.514525674058078e-02, -1.598746071056006e-02, -1.555812503198624e-02, -1.555812503198624e-02, -1.879262873722554e-02, -4.786032157844813e-03, -6.887839697489260e-03, -9.933193977300818e-03, -8.256756186165932e-03, -8.256756186165934e-03, -1.114619740287045e-02, -2.039219582609204e-03, -3.148116437615883e-03, -6.753927378774448e-03, -4.714931968855889e-03, -4.714931968855887e-03, -5.187298369985341e-03, -4.672243692400858e-05, -1.115648744901561e-04, -1.094343744547512e-02, -4.028470824938104e-04, -4.028470824938113e-04, -3.464829181194732e-06, -1.603449443640014e-08, -8.721126006235346e-08, -4.396724529975842e-04, -3.942186910684218e-07, -3.942186910684204e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
