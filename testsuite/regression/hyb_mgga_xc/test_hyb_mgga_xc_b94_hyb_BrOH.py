
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_b94_hyb_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b94_hyb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.599403086171791e+01, -1.599405691019300e+01, -1.599424206181834e+01, -1.599381454606966e+01, -1.599404400139547e+01, -1.599404400139547e+01, -3.053258683680671e+00, -3.053222395220038e+00, -3.052315378003823e+00, -3.054278061828089e+00, -3.053251860409902e+00, -3.053251860409902e+00, -6.691484020740103e-01, -6.692976649422254e-01, -6.745781357925630e-01, -6.761602967691259e-01, -6.691869828804849e-01, -6.691869828804849e-01, -2.141718757867794e-01, -2.147640383973274e-01, -7.836512176131749e-01, -1.887519847549741e-01, -2.143069588258202e-01, -2.143069588258202e-01, -6.594674936296199e-02, -6.656812518610898e-02, -1.136119937346991e-01, -5.977409633639573e-02, -6.598790863340025e-02, -6.598790863340025e-02, -7.776213638152805e+00, -5.631483528676159e+00, -3.357985310724972e+00, -8.457024767314335e+00, -3.722149920864016e+00, -5.118097421938015e+00, -1.332425569646410e+00, -2.247537121057690e+00, -2.002846750621810e+00, -2.017947063002479e+00, -2.008274503045925e+00, -1.796903766161072e+00, -1.053766603528686e+00, -8.409876160194814e-01, -9.049300203182894e-01, -5.382142081138717e-01, -5.843748971833406e-01, -6.169865046472086e-01, -1.399953446408016e-01, -3.592554456476179e-01, -1.363831247959321e-01, -1.756446636911785e+00, -1.610411435291748e-01, -1.442935980335414e-01, -1.182854007047446e-01, -1.943587076486669e+00, -4.451244916939080e-01, -2.035031328143874e-01, -8.119660245225951e-02, -1.755832928448938e+00, -2.508653927553760e+01, -4.450149949745600e-01, -4.458010746530251e-01, -3.956484429358240e+00, -4.461057000981590e-01, -7.439935729253926e+01, -4.356433768828575e-01, -4.949378186162266e-01, -8.223446860678809e-01, -4.328776795432342e-01, -5.525566635411634e-01, -1.029803419573220e+00, -1.181484102888917e+00, -1.926810408571804e-01, -2.290975403197368e-01, -2.912335839454172e-01, -3.911540634402532e-01, -3.581549136956060e-01, -4.550772463558099e-01, -2.057496638097246e-01, -1.383902162039313e-01, -3.286235070129938e-01, -1.157571434927720e-01, -1.307157723865563e-01, -7.894988419856279e-01, -1.952930885037811e-01, -6.362855382088272e-01, -1.082928082181948e-01, -1.823799244472644e+00, -1.824021034128799e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_b94_hyb_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b94_hyb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.379147018887608e+01, -2.379153134772852e+01, -2.379186864810725e+01, -2.379086637298072e+01, -2.379150187752922e+01, -2.379150187752922e+01, -3.893859603989338e+00, -3.893914922657753e+00, -3.895602779543086e+00, -3.893579088304314e+00, -3.893904445583313e+00, -3.893904445583313e+00, -7.646920264021918e-01, -7.637653530460361e-01, -7.406518040160033e-01, -7.449901314689218e-01, -7.643491316765952e-01, -7.643491316765952e-01, -2.194419361634968e-01, -2.222347755778820e-01, -9.188311284743608e-01, -1.679687862182774e-01, -2.202745546915699e-01, -2.202745546915699e-01, -3.193194740461648e-02, -3.241546089441454e-02, -7.029565471435428e-02, -2.604462304874916e-02, -3.216159636041385e-02, -3.216159636041384e-02, -7.339305410240225e+00, -6.195771560930464e+00, -4.473714129502477e+00, -7.747100457240767e+00, -5.455911458815622e+00, -5.999720111510647e+00, -1.803765233667561e+00, -2.315082333705939e+00, -2.148653533408606e+00, -2.166122066002479e+00, -2.178439900947873e+00, -2.069327102221395e+00, -9.368058070837061e-01, -8.478319155855780e-01, -8.318106389170358e-01, -6.944970528610450e-01, -7.154002345417355e-01, -7.224228124827974e-01, -3.174620140502200e-01, -3.038033499818599e-01, -3.070643963795948e-01, -2.254139752860235e+00, -1.355431350290993e-01, -1.220264528475009e-01, -7.155989374717218e-02, -1.158646560231220e+00, -3.284885381747702e+00, -3.680348097587221e-01, -4.649942184059207e-02, -3.308872484950317e+00, -1.591755018837724e+01, -5.813348894940356e-01, -5.813098975032351e-01, -2.815061738350357e+00, -5.813038955024157e-01, -4.551328332901340e+01, -5.630584730756560e-01, -5.863814942043444e-01, -7.693024891811733e-01, -6.039988243551582e-01, -6.451272542549299e-01, -9.004519218622784e-01, -1.058264417599860e+00, -3.300684250339424e-01, -3.443836679897400e-01, -3.807409873651694e-01, -3.971236440840581e-01, -3.796911793770876e-01, -5.315702947073546e-01, -1.416843437708138e-01, -9.376604643984369e-02, -3.965519583468792e-01, -3.143409354838461e-01, -9.802328382570251e-02, -1.603123463518641e+00, -1.178738909322601e-01, -6.728772018592164e+00, -2.763093718711015e-01, -3.202690204978822e+00, -3.203333947658025e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_b94_hyb_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b94_hyb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.748760022840715e-09, -4.748677501734806e-09, -4.748396025583318e-09, -4.749747045556852e-09, -4.748715715838047e-09, -4.748715715838047e-09, -1.003002515096631e-05, -1.003026157795114e-05, -1.003542719109362e-05, -1.002128139858435e-05, -1.002997709416945e-05, -1.002997709416945e-05, -4.188137946980739e-03, -4.185498953364145e-03, -4.100798614205449e-03, -4.069445983487355e-03, -4.187557803569587e-03, -4.187557803569587e-03, -4.049468443423755e-01, -3.950938178322967e-01, -2.124433387853082e-03, -8.783685854714853e-01, -4.020813819568255e-01, -4.020813819568254e-01, -1.802087104353038e+03, -1.585801425298162e+03, -2.423613115979394e+01, -1.303657329141197e+04, -1.649224266822427e+03, -1.649224266822428e+03, -3.947811632867803e-07, -9.493419084279274e-07, 1.890227230342838e-07, -3.256086501928423e-07, -4.466030048180147e-07, -1.338127889666545e-06, 2.298351778845490e-05, -3.845940728456144e-05, -5.670144322166376e-05, -5.507604373432946e-05, -5.595199666759651e-05, -8.599411644538989e-05, -1.610869747030758e-03, -2.293075883850753e-03, -2.442199127209140e-03, -9.830794585465367e-03, -7.369805023824711e-03, -5.965038595697946e-03, 1.985386479295680e+01, -1.336829517002881e-01, 2.126748263727346e+01, -9.401036553325531e-05, -1.678742924861130e+00, -2.064502276442420e+00, -5.413826983600312e+03, -9.796876325041791e+01, 9.585173893165486e+06, 1.488580107444298e+02, -8.279512008827838e+03, 4.362883847744309e+06, -1.031013172966224e-05, 6.470202261460375e-03, 6.413041995098772e-03, -1.478423165686225e-04, 6.390952216565765e-03, -2.486234237201770e-06, 7.339830012129791e-03, -1.423042489919243e-02, -3.271585615039064e-03, 3.403021240017198e-03, -9.245687426722552e-03, -1.975671551587794e-03, -9.918657461480619e-04, 4.682133277734896e-01, 2.184455008927684e-01, 7.066229971475883e-02, -4.275476524832199e-02, -5.386416488767146e-02, -1.962449977507851e-02, -1.082812475501273e+01, -1.036576346844576e+01, -6.879829934109413e-02, 4.879914038993513e+01, -5.077140040204231e+00, 1.196632556475274e+05, -6.181810385088569e+04, 4.170952347225287e+07, 5.535821758413068e+01, 8.403924149615927e+06, 8.404693236353844e+06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_b94_hyb_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b94_hyb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [-1.862710378378778e-04, -1.862691820649130e-04, -1.862651940686261e-04, -1.862955501977620e-04, -1.862700208542523e-04, -1.862700208542523e-04, -1.719005386332693e-03, -1.719058393850734e-03, -1.720498410822542e-03, -1.718195572843058e-03, -1.719025494439588e-03, -1.719025494439588e-03, -5.518989382907904e-03, -5.497531148233734e-03, -4.940384825334296e-03, -5.016312754302270e-03, -5.511683122648669e-03, -5.511683122648669e-03, -1.202965351757490e-02, -1.226263231745077e-02, -4.826151084181311e-03, -9.508542099730642e-03, -1.210531141034300e-02, -1.210531141034299e-02, -7.610081975302741e-03, -7.701292422717000e-03, -8.265505125138742e-03, -6.042470134785941e-03, -7.761392177434680e-03, -7.761392177434680e-03, -2.221742245978495e-04, -5.381764437601031e-04, -2.702240009597008e-07, -1.831026291328637e-04, -3.092950921721382e-04, -7.598570297204476e-04, -8.504363820398004e-08, -1.199899349455253e-03, -1.728791631330928e-03, -1.706622955852496e-03, -1.764758322834842e-03, -2.728967043680297e-03, -1.284581483455451e-03, -2.418920802602692e-03, -1.681683029871109e-03, -8.512945510279223e-03, -7.218765473986252e-03, -5.782916301017928e-03, 7.022853694741228e-05, -3.469462184327866e-03, 1.397539723902519e-06, -2.748541717484417e-03, -1.121909120602526e-02, -1.476116728774123e-02, -2.249660803547938e-03, -6.075283373032550e-05, 1.493507221129249e-12, 1.196365432288138e-04, -3.886422416226805e-03, 1.021574754263105e-07, -8.784349355723872e-06, -1.907997354750848e-12, -5.294800753566417e-15, -1.252872027382992e-04, -3.150779398392223e-12, -2.101266460050246e-06, -9.421825299948657e-15, -8.218377260115027e-03, -1.968307863838371e-03, -1.572599944111445e-03, -6.342550436269039e-03, -1.233970349084722e-03, -1.166441263277177e-03, -4.129745946649797e-08, -6.369097549944244e-09, -3.713703857164925e-07, -5.717948329288868e-03, -7.416345910648660e-03, -8.407660866854419e-03, -2.806284382266352e-03, -6.961781269461587e-03, -1.214909263293388e-02, 3.282244263492480e-06, -1.136526193702772e-02, 3.138406244175995e-06, -7.867078532310350e-04, 3.362180518170190e-08, 5.988305096454540e-03, 7.355795888454264e-05, 1.184675433217551e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_b94_hyb_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b94_hyb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [7.344136541393040e-04, 7.344062398461314e-04, 7.343905036715176e-04, 7.345117820999824e-04, 7.344095892960741e-04, 7.344095892960741e-04, 6.693728922645104e-03, 6.693928852137449e-03, 6.699362559312104e-03, 6.690754789266165e-03, 6.693804070778802e-03, 6.693804070778802e-03, 1.968650148856481e-02, 1.961357265670608e-02, 1.772186743456138e-02, 1.800502508592072e-02, 1.966167446629000e-02, 1.966167446629000e-02, 3.897112840117906e-02, 3.956204218481377e-02, 1.719101355656689e-02, 3.221325898211727e-02, 3.916086567204560e-02, 3.916086567204558e-02, 3.021378266707487e-02, 3.055500415505219e-02, 3.135738857891307e-02, 2.413184970056139e-02, 3.079389763679293e-02, 3.079389763679294e-02, 8.832122668011460e-04, 2.125019999890635e-03, -4.229092002465815e-04, 7.288014033086484e-04, 9.994201021325956e-04, 2.994498240561464e-03, -2.725112510079427e-03, 4.657127758835433e-03, 6.665700906907322e-03, 6.582331310709660e-03, 6.803864452612139e-03, 1.045704080039418e-02, 4.996724759291757e-03, 9.116595073040985e-03, 6.472437373985357e-03, 2.956392755800637e-02, 2.559779978127789e-02, 2.071857575155066e-02, -2.887679557660618e-01, 1.314383787287413e-02, -2.975861543786659e-01, 1.051771213200775e-02, 3.775230653768378e-02, 4.642743187998701e-02, 8.996856766595375e-03, 2.430113292437437e-04, -1.001065854978025e+01, -5.217374905201391e-01, 1.553533040026271e-02, -8.186332962668542e+00, 3.513737314859275e-05, -2.169944816619541e-02, -2.163213259811606e-02, 5.009136513199486e-04, -2.160551595779626e-02, 8.405065734562355e-06, -2.268249241785465e-02, 2.870942258623383e-02, 7.522224555746781e-03, -8.789946629193916e-03, 2.251938052868692e-02, 4.812070473128480e-03, 4.545390247874901e-03, -9.159421063961491e-02, -7.158925162646815e-02, -4.838772058239564e-02, 2.025650000401769e-02, 2.551994964599526e-02, 2.904920600214292e-02, 1.113041417953505e-02, 2.643572847488952e-02, 3.973738728815576e-02, -3.795212561646589e-01, 3.948599402336227e-02, -3.229715011544628e+00, 3.146825496049107e-03, -1.455469823948420e+01, -3.738352403029989e-01, -9.679474757894971e+00, -9.680360576892548e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
