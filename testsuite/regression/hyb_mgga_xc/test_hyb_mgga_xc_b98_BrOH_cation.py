
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_b98_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b98", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.578257713543955e+01, -1.578260772559240e+01, -1.578279714052930e+01, -1.578234122539608e+01, -1.578257254249983e+01, -1.578257254249983e+01, -2.871983314126076e+00, -2.871958676054033e+00, -2.871444440111170e+00, -2.872802620454562e+00, -2.872006781219584e+00, -2.872006781219584e+00, -6.093662849992515e-01, -6.094127597661211e-01, -6.128546265474775e-01, -6.150767357355480e-01, -6.156414790677548e-01, -6.156414790677548e-01, -2.013974735046543e-01, -2.013356492371076e-01, -7.056758438324957e-01, -1.792800836897166e-01, -1.948584317086299e-01, -1.948584317086299e-01, -8.886535898918371e-03, -9.362775862968803e-03, -5.200315973296216e-02, -5.143297694309590e-03, -7.238401930118678e-03, -7.238401930118679e-03, -7.049110809576624e+00, -5.654412653141914e+00, -1.652254420644324e+00, -7.592641227152184e+00, -3.280383064739787e+00, -4.666902707114547e+00, -7.405024300073129e-01, -2.123785518193693e+00, -1.845428149437611e+00, -1.850712956668816e+00, -1.848895145657200e+00, -1.704085163662632e+00, -8.614306003545864e-01, -8.103042466458363e-01, -7.962161546213936e-01, -4.962410369877606e-01, -5.364845126688433e-01, -5.614807135015903e-01, -9.010179417322996e-02, -2.569568751979861e-01, -8.530414072530812e-02, -1.638490876475709e+00, -1.470529722069731e-01, -1.337250805929832e-01, -4.021410444158607e-03, -5.057947392889677e-03, -4.542616465089949e-03, -6.425248581016908e-02, -4.862927634004796e-03, -4.743542937043662e-03, -8.848238917625304e-01, -3.135663723489734e-01, -3.171516648438332e-01, -8.822672601372439e-01, -3.190697315495759e-01, -8.813383186739721e-01, -3.448514829800799e-01, -4.493074352873974e-01, -7.402968584533312e-01, -3.861385083238763e-01, -5.018011769240623e-01, -7.825603390508293e-01, -9.853505417422240e-01, -1.569851279057128e-01, -1.800688555583065e-01, -2.296483341787658e-01, -3.680188334987845e-01, -3.309124296873503e-01, -4.217681388692976e-01, -4.155024613865951e-02, -6.786222743921611e-02, -3.097068647557330e-01, -7.561713280886526e-02, -1.050706465730252e-01, -1.412764109912872e-02, -2.083718839256287e-03, -3.284566470150412e-03, -7.382160346384034e-02, -4.510172356681230e-03, -4.510172356537092e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_b98_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b98", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.332613790739340e+01, -2.332617333846324e+01, -2.332624074827137e+01, -2.332624829893792e+01, -2.332655047851799e+01, -2.332669607594897e+01, -2.332538645014927e+01, -2.332521616180303e+01, -2.332619758857354e+01, -2.332579504782084e+01, -2.332619758857354e+01, -2.332579504782084e+01, -3.722690469449218e+00, -3.722878681534060e+00, -3.722734256929402e+00, -3.722930469494423e+00, -3.723880674462047e+00, -3.724182516678410e+00, -3.722519455757285e+00, -3.722828480475959e+00, -3.722020686842143e+00, -3.723856608649331e+00, -3.722020686842143e+00, -3.723856608649331e+00, -7.197479126927218e-01, -7.238335082369460e-01, -7.178142821864857e-01, -7.228298512658535e-01, -6.859560103523408e-01, -6.789359609433903e-01, -6.881908026097499e-01, -6.904858210409728e-01, -7.209836962197356e-01, -6.525885863075447e-01, -7.209836962197356e-01, -6.525885863075447e-01, -1.803796615739603e-01, -1.765341406997085e-01, -1.817467826755864e-01, -1.785641183898197e-01, -8.265230298750978e-01, -8.564443123047716e-01, -1.856831228525999e-01, -1.841443990692105e-01, -1.630011894275498e-01, -1.775680384187183e-01, -1.630011894275497e-01, -1.775680384187182e-01, -1.181884742158468e-02, -1.262948065629236e-02, -1.237799950886343e-02, -1.334368457714194e-02, -6.843685077314776e-02, -7.248080199076623e-02, -7.155558478889373e-03, -7.023307260830012e-03, -1.075364262151930e-02, -5.752872437632580e-03, -1.075364262151930e-02, -5.752872437632579e-03, -8.036047883463914e+00, -7.289678091989469e+00, -5.559725396806821e+00, -5.550988886100050e+00, -2.300855279908478e+00, -2.287539502779548e+00, -9.432717603514591e+00, -9.510651411596520e+00, -5.848789172206176e+00, -5.849803327966955e+00, -5.527163958813851e+00, -5.548237898113575e+00, -1.019533933034768e+00, -1.020039314602231e+00, -1.993166648037100e+00, -1.992493443433458e+00, -1.918366740973324e+00, -1.924763598618663e+00, -1.935489720793184e+00, -1.942009849353447e+00, -1.972362033095965e+00, -1.957315734416935e+00, -2.011725033822290e+00, -1.993741261675926e+00, -1.078071338116497e+00, -1.112928363350316e+00, -8.198866934120443e-01, -8.254945773138892e-01, -1.010655568297481e+00, -1.001700191754112e+00, -6.378001007196825e-01, -6.532110976096588e-01, -6.801076833724390e-01, -6.546425107671854e-01, -6.731292746665646e-01, -6.479851308398610e-01, -1.352543536166638e-01, -1.330661404447336e-01, -3.395749065182391e-01, -3.410243502334250e-01, -1.339903931919127e-01, -1.215586200963610e-01, -2.127927763436755e+00, -2.127111568077501e+00, -1.577322071801607e-01, -1.445949273858474e-01, -1.132743706249408e-01, -8.451578471489246e-02, -5.372828431477935e-03, -5.604474616212531e-03, -6.881821593335753e-03, -6.997752657664734e-03, -8.337068988633164e-03, -7.422407966304807e-03, -9.840749320467411e-02, -9.692301454528235e-02, -5.160087475921520e-03, -7.294775596739628e-03, -1.290080750577234e-02, -6.799959045882299e-03, -1.181142067616115e+00, -1.185766908578824e+00, -4.365658419140798e-01, -4.350237323441360e-01, -4.375409549391572e-01, -4.360027079015980e-01, -1.178598413408043e+00, -1.183207320086291e+00, -4.379957644687876e-01, -4.364630408737393e-01, -1.177608154990540e+00, -1.182241512986598e+00, -4.348419261379290e-01, -4.335064141894427e-01, -5.394537578629885e-01, -5.412076994562913e-01, -8.991720847503304e-01, -9.065721164038575e-01, -6.660689446394777e-01, -6.403234777540214e-01, -5.843031666904270e-01, -5.859144183995784e-01, -1.027645716030553e+00, -1.030658849408803e+00, -1.257299019410045e+00, -1.254866636689451e+00, -2.336725810277589e-01, -2.317080049618181e-01, -2.630599897740054e-01, -2.594893976384380e-01, -3.234982716264880e-01, -3.191561852731651e-01, -3.521237893796169e-01, -3.542952908244319e-01, -3.197563878995950e-01, -3.212737356652369e-01, -4.952621894670428e-01, -4.981051913763369e-01, -6.715541843763578e-02, -6.627894032854738e-02, -9.013468116888713e-02, -9.337933555287431e-02, -3.771122265574900e-01, -3.805192313214524e-01, -1.210528573979464e-01, -1.092484754925525e-01, -1.308841596704408e-01, -1.274722592671657e-01, -2.342835641329627e-02, -2.182612045373059e-02, -3.066796257994144e-03, -3.081540543536568e-03, -6.269442481998888e-03, -5.525444226934466e-03, -8.265902966307122e-02, -1.024236778024992e-01, -1.164450218558637e-02, -6.521117926824104e-03, -1.164450218792311e-02, -6.521117924894055e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_b98_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b98", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-8.007747106127972e-09, 0.000000000000000e+00, -8.007830815381672e-09, -8.007592370253830e-09, 0.000000000000000e+00, -8.007717995704247e-09, -8.007192904034685e-09, 0.000000000000000e+00, -8.007120978424473e-09, -8.008944930913279e-09, 0.000000000000000e+00, -8.009348279360377e-09, -8.007655134339487e-09, 0.000000000000000e+00, -8.008525632576254e-09, -8.007655134339487e-09, 0.000000000000000e+00, -8.008525632576254e-09, -1.255800273762423e-05, 0.000000000000000e+00, -1.255938115943487e-05, -1.255779761093052e-05, 0.000000000000000e+00, -1.255934649044982e-05, -1.255464907010832e-05, 0.000000000000000e+00, -1.255393324538649e-05, -1.254900357442195e-05, 0.000000000000000e+00, -1.254907085351171e-05, -1.256562521914777e-05, 0.000000000000000e+00, -1.254593293299672e-05, -1.256562521914777e-05, 0.000000000000000e+00, -1.254593293299672e-05, -7.841919670430440e-03, 0.000000000000000e+00, -7.783469326346001e-03, -7.879941641061832e-03, 0.000000000000000e+00, -7.807951926058878e-03, -8.604028819306310e-03, 0.000000000000000e+00, -8.715259551967523e-03, -8.386355758873287e-03, 0.000000000000000e+00, -8.348941493446423e-03, -7.980839871055698e-03, 0.000000000000000e+00, -8.903350482643242e-03, -7.980839871055698e-03, 0.000000000000000e+00, -8.903350482643242e-03, -1.104586143425045e+00, 0.000000000000000e+00, -1.102621327510663e+00, -1.094650640956583e+00, 0.000000000000000e+00, -1.077381860106768e+00, -4.608390518518277e-03, 0.000000000000000e+00, -4.255083100931437e-03, -1.066340508274374e+00, 0.000000000000000e+00, -1.086432710428678e+00, -1.197769424837703e+00, 0.000000000000000e+00, -2.613505373074946e-02, -1.197769424837702e+00, 0.000000000000000e+00, -2.613505373074622e-02, 3.419656581498645e+02, 0.000000000000000e+00, 2.998887089818882e+02, 3.142661305821039e+02, 0.000000000000000e+00, 2.718759451281804e+02, 4.381917647377027e+00, 0.000000000000000e+00, 3.932269533268996e+00, 8.851747407581191e+02, 0.000000000000000e+00, 9.225601388659207e+02, 4.278873552948642e+02, 0.000000000000000e+00, 1.898731892947576e+03, 4.278873552948642e+02, 0.000000000000000e+00, 1.898731892947563e+03, -2.098110390700576e-07, 0.000000000000000e+00, -4.959953066341416e-07, -1.774010980929116e-06, 0.000000000000000e+00, -1.787831731251399e-06, 2.728398770317492e-06, 0.000000000000000e+00, 2.731869373527120e-06, 1.474835773613743e-07, 0.000000000000000e+00, 1.616203399289917e-07, 6.733537106155678e-07, 0.000000000000000e+00, 6.672143778718330e-07, -2.291692735128120e-06, 0.000000000000000e+00, -2.329206756690345e-06, 5.286339480825424e-05, 0.000000000000000e+00, 5.310086962896120e-05, -9.429373835933026e-05, 0.000000000000000e+00, -9.439236572194718e-05, -1.176990251821231e-04, 0.000000000000000e+00, -1.171198008853617e-04, -1.149917934346905e-04, 0.000000000000000e+00, -1.141112471131109e-04, -1.116775176506038e-04, 0.000000000000000e+00, -1.131680319592157e-04, -1.143564695003923e-04, 0.000000000000000e+00, -1.156592589873158e-04, 2.175791162097811e-03, 0.000000000000000e+00, 2.566770621143463e-03, -1.331880582918371e-03, 0.000000000000000e+00, -1.070785574857275e-03, 2.336492246455118e-03, 0.000000000000000e+00, 1.942879456853296e-03, -1.552530684369052e-02, 0.000000000000000e+00, -1.388919814387746e-02, -9.842555846012190e-03, 0.000000000000000e+00, -1.161990437312903e-02, -9.420274011100715e-03, 0.000000000000000e+00, -1.124866848779110e-02, 4.238453725226308e+00, 0.000000000000000e+00, 4.134059242309950e+00, 7.345557660560488e-02, 0.000000000000000e+00, 7.167976072025448e-02, 5.392891736696575e+00, 0.000000000000000e+00, 4.914055558898982e+00, -1.269335868917917e-04, 0.000000000000000e+00, -1.271344199485762e-04, -1.654966503896075e+00, 0.000000000000000e+00, -2.541197741172185e+00, -4.550017564240579e+00, 0.000000000000000e+00, -6.614296933192698e+00, 1.400484917742284e+03, 0.000000000000000e+00, 1.237155037961424e+03, 9.368934161839499e+02, 0.000000000000000e+00, 8.515492525535711e+02, 4.934185365790461e+04, 0.000000000000000e+00, 4.572474919381380e+04, 1.468571667608148e+01, 0.000000000000000e+00, 1.540089894013510e+01, 1.947517291884685e+03, 0.000000000000000e+00, 1.755375179282805e+03, 2.046483200024545e+04, 0.000000000000000e+00, 1.844577724675296e+04, 2.690856228118055e-02, 0.000000000000000e+00, 2.720959559227840e-02, 1.459005193062117e-01, 0.000000000000000e+00, 1.463921879502386e-01, 1.752928762263420e-01, 0.000000000000000e+00, 1.764298853712052e-01, 2.011480241352815e-02, 0.000000000000000e+00, 2.022270102545074e-02, 1.915795861463059e-01, 0.000000000000000e+00, 1.927195945523798e-01, 1.823149897687659e-02, 0.000000000000000e+00, 1.833998684921180e-02, 2.819960593609652e-01, 0.000000000000000e+00, 2.860697159033482e-01, -2.237817773518315e-02, 0.000000000000000e+00, -2.215281238891789e-02, 4.157437190564812e-03, 0.000000000000000e+00, 4.252825096560157e-03, 7.293714668662871e-02, 0.000000000000000e+00, 7.555371265980691e-02, -1.452679635265633e-02, 0.000000000000000e+00, -1.433951777231198e-02, 6.753857539319633e-03, 0.000000000000000e+00, 6.713282115851793e-03, 2.130453340891957e-03, 0.000000000000000e+00, 2.252202534639926e-03, 4.664034810891505e-01, 0.000000000000000e+00, 4.599114636292916e-01, 2.954820237019534e-01, 0.000000000000000e+00, 2.921117051999250e-01, 1.603591576962599e-01, 0.000000000000000e+00, 1.570204836647732e-01, -9.601476422043212e-02, 0.000000000000000e+00, -9.405150982887060e-02, -1.407172147336024e-01, 0.000000000000000e+00, -1.387500643838418e-01, -3.203738272255251e-02, 0.000000000000000e+00, -3.123606373058154e-02, 5.025278412719440e+01, 0.000000000000000e+00, 4.895404150158901e+01, 2.099279305763009e+00, 0.000000000000000e+00, 2.005724999111061e+00, -1.004268312019039e-01, 0.000000000000000e+00, -9.492119329067779e-02, 9.872303264871521e+00, 0.000000000000000e+00, 9.746865010272709e+00, -4.903750314527041e-01, 0.000000000000000e+00, -2.206409099251983e+00, 1.133060992052571e+03, 0.000000000000000e+00, 1.039293944395259e+03, 1.710184472412672e+05, 0.000000000000000e+00, 1.698295309849148e+05, 6.378734063865532e+04, 0.000000000000000e+00, 5.759687508098649e+04, -2.167371083080018e+01, 0.000000000000000e+00, 2.073929792265698e+01, 3.692618740916561e+04, 0.000000000000000e+00, 2.266236734579142e+04, 3.692618740860866e+04, 0.000000000000000e+00, 2.266236734615322e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_b98_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b98", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [-1.692892459613874e-04, -1.692940403014715e-04, -1.692886391295522e-04, -1.692935902635064e-04, -1.692874529659520e-04, -1.692917282822108e-04, -1.692944492787351e-04, -1.693005072117791e-04, -1.692889392646882e-04, -1.692975154631809e-04, -1.692889392646882e-04, -1.692975154631809e-04, -1.060299635854957e-03, -1.060346080350094e-03, -1.060293302094404e-03, -1.060345173402064e-03, -1.060197462038027e-03, -1.060192116522052e-03, -1.060041102630239e-03, -1.060064584561842e-03, -1.060420393365539e-03, -1.060011975294603e-03, -1.060420393365539e-03, -1.060011975294603e-03, -4.862990382591630e-03, -4.882839511464549e-03, -4.864226512926988e-03, -4.888394518703055e-03, -4.981469659942962e-03, -4.945953188024522e-03, -4.922284302389919e-03, -4.933757399047688e-03, -5.105933071039259e-03, -4.711244691677635e-03, -5.105933071039259e-03, -4.711244691677635e-03, -1.203777461950309e-02, -1.346437755070048e-02, -1.236879196337041e-02, -1.386993985037867e-02, -4.243412299669364e-03, -4.323465957538858e-03, -5.493796913706898e-03, -5.879452472787428e-03, -1.448043443735323e-02, -5.990169276993421e-04, -1.448043443735323e-02, -5.990169276993381e-04, -1.472181167249754e-09, -2.051629545942987e-09, -1.977870877674620e-09, -2.911361322604034e-09, -6.032434078784869e-06, -8.429778096070485e-06, -1.033147823332797e-10, -8.951041976076362e-11, -8.584017081800114e-10, -7.112294765179277e-11, -8.584017082001549e-10, -7.112294794947499e-11, -1.312747753079592e-04, -2.112203043410458e-04, -5.682805770335092e-04, -5.717549546406611e-04, -6.279319806546582e-07, -4.255555974239250e-07, -3.187601477742208e-05, -2.798495684958487e-05, -5.446775220898315e-04, -5.462285002698059e-04, -7.033734041808242e-04, -7.098172612623919e-04, -2.165503224457270e-08, -3.793459584809269e-08, -1.507992692566065e-03, -1.508575141839556e-03, -1.783173522932939e-03, -1.784215166803639e-03, -1.777449440703837e-03, -1.774412513006577e-03, -1.772945998945776e-03, -1.772534883713965e-03, -1.794043101717282e-03, -1.794790805982717e-03, -2.368793939980839e-04, -1.154641054302509e-04, -2.510368249206996e-03, -2.452853548222000e-03, -1.322006006110847e-04, -3.054241962148222e-04, -5.854250016591004e-03, -5.832572009416791e-03, -5.319150832979978e-03, -5.342020343001050e-03, -5.324167549565343e-03, -5.370132818040630e-03, 3.410642970823076e-06, 1.128237834014153e-06, -1.041849167449157e-04, -1.092869455966267e-04, 1.486287249182146e-08, -5.077735412901340e-09, -1.885281321751811e-03, -1.885834248234362e-03, -4.451082496094685e-03, -7.686348512702044e-03, -1.090043232523912e-02, -1.846897243125212e-02, -1.055553947826774e-13, -1.511727654080264e-13, -3.222614977838511e-22, -4.284485959292782e-22, 1.803486650334467e-21, -2.348608236467740e-21, -6.901040877478041e-08, 1.030593760768813e-06, -1.187840280087056e-12, -5.440929604787715e-11, 8.740864641930746e-17, -2.642531947847814e-16, -8.414385425145094e-16, -8.235796055266645e-16, -2.949099613591699e-15, -3.019571850081873e-15, -5.768255611592520e-19, -5.821630148358455e-19, -9.647263428555291e-10, -1.372000128923924e-09, -1.337989867836309e-13, -6.236652735708393e-14, -4.035380921915850e-19, -4.056501862095288e-19, -3.522538982577031e-18, -3.143488049844991e-18, -6.173985961939443e-03, -6.182480992663704e-03, -5.148969062677747e-04, -4.926444869688903e-04, -3.382184745219328e-03, -2.784334847450064e-03, -5.924381073117341e-03, -5.924442559444390e-03, -4.343868577576719e-05, -4.529455393040518e-05, -1.265888187578858e-04, -1.371012460892098e-04, -3.326386874081378e-08, -3.322916000715212e-08, -1.541898401084755e-08, -1.793997992497087e-08, -5.459331969076375e-05, -3.761898642642057e-05, -6.426535534654462e-03, -6.322633131929290e-03, -8.853865197521758e-03, -8.748063135606894e-03, -6.722310508969426e-03, -6.723197821180914e-03, 5.195661793595566e-07, 1.237139615057464e-08, -1.938272866910917e-05, -1.539065307688185e-05, -8.583727657620719e-03, -8.645073463930094e-03, 1.221599842333071e-07, -8.405649167047576e-08, -9.855102350332435e-04, -2.543007043449167e-03, 2.682781403391792e-13, -2.062612388209747e-13, -4.572271676149867e-15, 6.939625467337903e-15, 1.367437658657374e-16, 4.198219245501175e-17, -2.022064941037841e-02, 5.567352870267992e-03, 1.982478191427727e-14, -2.299993160569981e-14, 3.344227841759642e-15, -2.718803767075621e-15]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_b98_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b98", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [6.229851542869627e-04, 6.229770859004797e-04, 6.229793339813789e-04, 6.229728265412926e-04, 6.229671682272853e-04, 6.229537512662507e-04, 6.230331493624297e-04, 6.230374374778255e-04, 6.229817027287592e-04, 6.230085505871009e-04, 6.229817027287592e-04, 6.230085505871009e-04, 4.219133966440515e-03, 4.219399248361493e-03, 4.219103541707406e-03, 4.219399569067592e-03, 4.218707477431551e-03, 4.218707664497014e-03, 4.217745365572068e-03, 4.217917563572294e-03, 4.219602590443697e-03, 4.217693372715879e-03, 4.219602590443697e-03, 4.217693372715879e-03, 1.917473673913128e-02, 1.926200199056631e-02, 1.917625787539781e-02, 1.928359920240685e-02, 1.961345461053520e-02, 1.944947486921142e-02, 1.933264955916196e-02, 1.937707796016134e-02, 2.018072935007367e-02, 1.839804173521373e-02, 2.018072935007367e-02, 1.839804173521373e-02, 4.343104775284481e-02, 4.826970553603000e-02, 4.473840799226751e-02, 4.977597058260277e-02, 1.691106448332885e-02, 1.723367607510373e-02, 1.962545055416205e-02, 2.055451391617530e-02, 5.355798193393807e-02, 9.656713726648309e-04, 5.355798193393804e-02, 9.656713726648136e-04, -5.341613677810446e-04, -5.659908688513840e-04, -5.602974772721946e-04, -6.012071319761251e-04, -1.209637357629270e-03, -1.301793871438184e-03, -2.685458632892178e-04, -2.711973265619367e-04, -4.628930909903058e-04, -3.109235337743198e-04, -4.628930909903057e-04, -3.109235337743184e-04, 2.370118010312880e-04, 5.571623561110536e-04, 1.990729753886784e-03, 2.004637180607283e-03, -3.037388744254418e-03, -3.040063145413606e-03, -1.634455213284458e-04, -1.792615246991065e-04, -7.349447185354353e-04, -7.289200664241585e-04, 2.570169616763026e-03, 2.610098883598610e-03, -2.741667305112303e-03, -2.765505199375333e-03, 5.767487993368002e-03, 5.767977019441663e-03, 6.900538706200147e-03, 6.903240658242895e-03, 6.868943004671339e-03, 6.854232507373932e-03, 6.855835372631209e-03, 6.851859917396827e-03, 7.008812640696468e-03, 6.994778396137428e-03, -1.789422504581158e-03, -2.391499562048098e-03, 7.718969422003169e-03, 7.364316954430348e-03, -1.039980141007395e-03, -7.737168651310633e-04, 2.291541115127181e-02, 2.268535768278043e-02, 1.904331398857348e-02, 1.942985460219012e-02, 1.855674349099677e-02, 1.914046079075436e-02, -2.133289777454393e-02, -2.106796749886921e-02, -2.775449194473105e-03, -2.733418755670749e-03, -1.944192904887914e-02, -2.137440840468403e-02, 7.464203285319386e-03, 7.466375679535918e-03, 1.513548607131944e-02, 2.732910039947107e-02, 4.094479004527905e-02, 7.049434316683667e-02, -1.291053019921665e-04, -1.320003570601253e-04, -2.242739360084334e-04, -2.083541947191661e-04, -5.553296009509151e-03, -6.071787670193105e-03, -1.708535669833202e-02, -1.979574755654917e-02, -1.437264164233996e-04, -6.034433904394458e-04, -1.510300844538400e-03, -6.341084571268961e-03, -2.443698217341167e-02, -2.497711989407057e-02, -1.817722544695482e-01, -1.848166435670179e-01, -2.063110120760110e-01, -2.103360393015367e-01, -2.190317077726220e-02, -2.231719836378227e-02, -2.178827729366250e-01, -2.220803355897107e-01, -2.073461808630461e-02, -2.113407535775073e-02, -9.714338072420066e-02, -1.016068248260026e-01, 2.124856227004605e-02, 2.130659907066147e-02, -3.908753937347966e-03, -4.067218906192062e-03, -7.299598290673713e-02, -7.689358994151531e-02, 1.764585745610221e-02, 1.759556905517688e-02, -6.785472447648619e-03, -6.846065748946837e-03, -1.071098630257313e-03, -1.169961853868119e-03, -3.668281537593288e-02, -3.673991255241910e-02, -3.733397451083473e-02, -3.799407147789492e-02, -3.549536123222152e-02, -3.505920417249730e-02, 2.191383871681072e-02, 2.147368305434017e-02, 3.170322404126684e-02, 3.125238962491510e-02, 2.425201391021601e-02, 2.411411121056742e-02, -1.413067060198334e-02, -1.389478533536102e-02, -1.301134241441795e-03, -1.382473657309613e-03, 3.132222525761354e-02, 3.070983155427635e-02, -2.354185922890373e-02, -2.750470752713760e-02, 1.703126722836348e-03, 7.557743337867871e-03, -4.039279379701161e-03, -4.050171573776328e-03, -4.522310644305727e-04, -3.389902344789270e-04, -3.011677632410721e-03, -3.263814669472862e-03, 5.583216218931795e-02, -5.111996270926226e-02, -2.591164893469675e-03, -5.994920737231199e-03, -2.591164893404602e-03, -5.994920737329060e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
