
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_tpss0_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_tpss0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.509253488182959e+01, -1.509258029360870e+01, -1.509279357288512e+01, -1.598128019139689e+01, -1.595584681425382e+01, -1.690732506027292e+01, -2.637268149608505e+00, -2.803765061046017e+00, -2.803445228959597e+00, -2.803825133342840e+00, -2.803497283638591e+00, -2.637218332678817e+00, -5.419742101677204e-01, -5.525382734448520e-01, -5.713293374588795e-01, -5.312821028223584e-01, -5.328603780737602e-01, -5.728493268787458e-01, -1.507586469102836e-01, -1.608714701639010e-01, -6.479814174090995e-01, -1.391726121627447e-01, -1.545763243791507e-01, -1.489898180734657e-01, -7.579502669422946e-03, -6.513820423221892e-03, -3.529835434199553e-02, -4.371903761823772e-03, -6.101066207657244e-03, -6.101066207657244e-03, -4.184185125790392e+00, -4.160912967628094e+00, -4.160091718056186e+00, -4.160855398561240e+00, -3.969619051896001e+00, -3.949235014002445e+00, -1.610395637052336e+00, -1.619444481852923e+00, -1.592933303236439e+00, -1.600534612362826e+00, -1.530697159401734e+00, -1.618515590415723e+00, -4.758249943131870e-01, -5.409104929139535e-01, -4.580276840848080e-01, -4.774416626493103e-01, -4.855297758090517e-01, -5.039653069096804e-01, -1.054553273319923e-01, -1.534671065900571e-01, -9.906632285468654e-02, -1.553526735171599e+00, -1.186266541671149e-01, -1.186266541671149e-01, -2.711353576302560e-03, -4.273875983545499e-03, -3.272651247461756e-03, -5.476844171985221e-02, -4.110819348034597e-03, -4.110819348034596e-03, -5.080097464709780e-01, -5.042902652523554e-01, -4.771662610669430e-01, -4.954703753369207e-01, -4.776500942428832e-01, -4.947025570138118e-01, -5.092843858625103e-01, -4.125033155591925e-01, -4.243880244761387e-01, -4.619365462817937e-01, -4.504356894422782e-01, -4.358329586476717e-01, -5.531678823140598e-01, -2.105521696393504e-01, -2.219821110715616e-01, -2.876247440738559e-01, -2.714343062463317e-01, -2.519036496404199e-01, -3.855936564955312e-01, -3.845778157223263e-02, -5.609482016010083e-02, -2.983652180000524e-01, -8.469600605376809e-02, -8.469600605376812e-02, -1.117039691687403e-02, -1.142473105039460e-03, -2.753332819870143e-03, -7.156476429732761e-02, -3.775205769031426e-03, -2.557085010346163e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_tpss0_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_tpss0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.027731163131364e+01, -2.027731748218223e+01, -2.027738113419068e+01, -2.027736821568994e+01, -2.027761581144778e+01, -2.027769953307421e+01, -2.026777193867138e+01, -2.118635423777947e+01, -2.023858350688140e+01, -2.116479465184200e+01, -2.110876721061643e+01, -2.110845205800992e+01, -3.453921575483003e+00, -3.275340871690829e+00, -3.420644226016909e+00, -3.420485791328535e+00, -3.423186635624894e+00, -3.423567404684790e+00, -3.424526546171109e+00, -3.424576611766969e+00, -3.420159229315581e+00, -3.424406938986752e+00, -3.275177726302301e+00, -3.458154350879060e+00, -6.921955414374491e-01, -6.934334428769056e-01, -7.005162059320993e-01, -6.600498049900092e-01, -5.878722643950118e-01, -5.830103519898405e-01, -6.203941577624070e-01, -6.639895222625162e-01, -6.933097711401096e-01, -6.689485472439495e-01, -6.213003448289977e-01, -5.711036039861133e-01, -1.898213207881437e-01, -1.901540798548375e-01, -2.153177586741507e-01, -1.997239133394811e-01, -6.820833769454047e-01, -7.872535836108140e-01, -1.422063152880921e-01, -1.355739795008142e-01, -1.441781451368033e-01, -1.312626849813398e-01, -1.437483326544751e-01, -9.737704449175313e-02, -9.761612567657209e-03, -1.037051682332741e-02, -5.878139833728638e-03, -1.095232284202164e-02, -3.278065442057223e-02, -5.753033997506354e-02, -5.874853030505917e-03, -5.777046922173431e-03, -8.711518494045025e-03, -4.961201095959864e-03, -8.711518494045023e-03, -4.961201095959863e-03, -5.206598234994757e+00, -5.205405987727101e+00, -5.152471515626627e+00, -5.151263971183281e+00, -5.152818067717436e+00, -5.151608519727555e+00, -5.152494701023121e+00, -5.151272930430777e+00, -5.054669286451344e+00, -5.213859754119199e+00, -5.216799285117751e+00, -5.049410226919359e+00, -1.929386066785174e+00, -1.930395219075722e+00, -1.955244704855394e+00, -1.955489743201037e+00, -1.878714523204037e+00, -1.885219079757736e+00, -1.901684998425023e+00, -1.908286838774309e+00, -1.979737638479316e+00, -1.903446522207041e+00, -1.960015043235715e+00, -1.946774805320041e+00, -6.728671881562087e-01, -6.295732118301488e-01, -7.022540608868284e-01, -7.008513611891696e-01, -5.839463993051311e-01, -6.025184483785897e-01, -6.156473554681947e-01, -6.300548894428447e-01, -6.943834127203345e-01, -6.259457958433646e-01, -6.679243467606830e-01, -6.419197555536547e-01, -1.195603393915319e-01, -1.201798053340594e-01, -1.872349365277780e-01, -1.843633449153767e-01, -1.152618383398606e-01, -1.176237131876235e-01, -1.982142019236836e+00, -1.981235654829996e+00, -1.323708127514859e-01, -1.263738936705039e-01, -1.323708127514859e-01, -1.263738936705039e-01, -2.529674669643335e-03, -4.581418273805308e-03, -5.652931696726173e-03, -5.738578076395208e-03, -4.226114092803545e-03, -4.475041058023683e-03, -8.601168950829244e-02, -5.531835271314441e-02, -4.318022095400244e-03, -5.925479268767850e-03, -4.318022095400239e-03, -5.925479268767851e-03, -6.367511356892349e-01, -6.385679687479511e-01, -6.376479346955841e-01, -6.393664202072515e-01, -6.242680227856037e-01, -6.259153961767899e-01, -6.328574849090638e-01, -6.365160802711891e-01, -6.247205109942663e-01, -6.263621800463710e-01, -6.326461095701054e-01, -6.374208472599415e-01, -6.174719703049848e-01, -6.186672680801945e-01, -5.636010553344269e-01, -5.352239303356134e-01, -5.959284929363531e-01, -5.637488769516128e-01, -5.854536370874845e-01, -5.870002505566356e-01, -5.798999098014527e-01, -5.814136123137359e-01, -6.045801675822355e-01, -5.763586313040838e-01, -7.459264328065811e-01, -7.140118717337870e-01, -2.206791901264390e-01, -2.213958976816157e-01, -2.879698717394561e-01, -2.793393386977168e-01, -3.826765813892675e-01, -4.053793130606320e-01, -3.321180462178356e-01, -3.323664526082408e-01, -3.358781470173758e-01, -3.309926186293564e-01, -4.980386565715185e-01, -5.009284904765501e-01, -4.979650754567458e-02, -4.981231697032970e-02, -7.052171388079194e-02, -7.234159215015300e-02, -3.905796577372350e-01, -3.982863049444447e-01, -9.876376435029396e-02, -9.829491258934933e-02, -9.876376435029398e-02, -9.829491258934932e-02, -1.461780852948932e-02, -1.457208395406919e-02, -1.521515289668871e-03, -1.524992455377688e-03, -3.645696123051761e-03, -3.613864820850445e-03, -9.223885744053406e-02, -9.249455190932723e-02, -4.089489832830005e-03, -5.431988133032146e-03, -4.089575065166762e-03, -3.119166712451878e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_tpss0_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_tpss0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.122372396844291e-09, 1.632299740738916e-08, -2.123776128802779e-09, -2.122528772463294e-09, 1.632281531815958e-08, -2.123914396525025e-09, -2.123070085348832e-09, 1.632194962686794e-08, -2.124530866838819e-09, -1.084362193918447e-08, 1.681128096525148e-09, -1.739405231993013e-08, -9.711658553691461e-09, 1.040077494933590e-09, -1.772319083490312e-08, -1.811088730939743e-08, 1.901913855295419e-10, -1.811392822802988e-08, -6.259262131112278e-06, 1.992835391539789e-06, -5.956362785979546e-06, -6.764640055173118e-06, -8.684204420653223e-08, -6.763663042779860e-06, -6.778932027600254e-06, -8.099898526860927e-08, -6.782697995486311e-06, -6.734027009884251e-06, -7.810231836052006e-09, -6.733662830729516e-06, -6.760329439317283e-06, -8.309824999442562e-08, -6.790790137502263e-06, -5.947368444474313e-06, 2.014333244399318e-06, -6.276354513527011e-06, 5.691581303518622e-03, 1.678551982122472e-02, 5.670543678278211e-03, -1.138316247744596e-03, 5.423561443435744e-03, -2.133528390902874e-03, -3.994834116342761e-03, -9.425843689836636e-04, -4.066714652887767e-03, -3.690224387084397e-03, 1.963974858059240e-03, -1.148077354058520e-03, 6.456299129625225e-03, 1.827409235954092e-02, 6.369103621675602e-03, -3.596393907426314e-03, -9.792494789804494e-04, -4.158130589187218e-03, 2.880526152310564e-01, 2.702442215881226e-01, -2.940525158269741e-01, 1.432915595172047e-01, 1.717454016048493e+00, -1.679197515088038e-02, -1.828708405876767e-03, 4.541487251158564e-04, -6.353207033544430e-04, -5.097101950929626e-01, -8.500938301556973e-01, -7.084921537365810e-01, -8.471018663523514e-01, 6.270267360397608e-02, -1.050940164600561e+00, -8.467563892733102e-01, 4.940317242462440e-02, -1.832393359733173e+00, -3.559868273624644e+00, 6.503625725762166e-02, -3.574338226583096e+00, -8.094401352021014e+04, 4.319997251161638e-02, -3.751877128077684e+00, -8.851692989474056e+01, 1.898945288236659e-01, -1.730552246253978e+00, -2.619858449808330e+00, 1.718201979602087e-02, -2.646760699081547e+00, -3.411641288389109e+00, 1.593449015833041e-04, -5.839114936544900e+00, -3.411641288388848e+00, 1.593449030231248e-04, -5.839114936541574e+00, -8.293656452139084e-06, 1.212049563996485e-06, -8.302866128279493e-06, -8.855651644953546e-06, 3.317575724213617e-07, -8.861782385122299e-06, -8.766630895629706e-06, 3.290463534225210e-07, -8.773392049166205e-06, -8.848658316851335e-06, 3.315853905045581e-07, -8.857445841217470e-06, -3.033180311739095e-06, 1.973178058786088e-06, -7.958182711792669e-06, -8.123275369221073e-06, 1.664934574120892e-06, -4.406738658420117e-06, -5.695338398576745e-05, 2.547677291037734e-05, -5.702116172659850e-05, -5.526701322333706e-05, 2.577346472285374e-05, -5.538742033882794e-05, -6.123801055834472e-05, -4.352545833079520e-06, -6.104322178113753e-05, -5.977382371779002e-05, -3.965184424609691e-06, -5.961283699004576e-05, -4.033024825285379e-05, 5.510525269401742e-05, -4.945504917668390e-05, -5.504550163908469e-05, 2.579056401763329e-05, -5.591649595448946e-05, -3.864956326236362e-03, 1.685055866171986e-02, -1.307973907374470e-02, -1.748168725993176e-02, 1.145928147382431e-02, -1.918718927710057e-02, -5.672452368608296e-03, -8.764503809949128e-04, -7.317181772684572e-03, -9.445292051947447e-03, 1.111105451551602e-03, -1.158759686097632e-02, -5.616306749021980e-03, 1.576162979394650e-02, -1.666586648925836e-02, -1.077204865293625e-02, 1.267222258928703e-03, -9.779330907313838e-03, -5.221329056959716e-01, -1.260315385138884e+00, -5.522846453325195e-01, 5.636635860001515e-03, 1.884094133827209e-01, -3.425525189230867e-01, -1.078051036013282e+00, 5.047916744735522e-01, -1.130885667967537e+00, -1.356041008269980e-04, 1.103061888243071e-05, -1.360625879283523e-04, -1.073140305151139e+00, 9.671707164700396e-01, -1.497076448539338e+00, -1.073140305151140e+00, 9.671707164700399e-01, -1.497076448539338e+00, -2.355215316405746e+06, 4.308952200999792e-03, -1.756772021011347e+00, -2.492561842181604e+00, 1.771227854522087e-03, -2.196960781424202e+00, -1.785941537217363e+01, 1.973973873299123e-01, -1.961599950018505e+01, -1.203358253803960e+00, -9.513861207885603e-02, -1.184343103583837e+01, -3.359373534284720e+00, 4.633268670546061e-02, -1.072563602186938e+01, -3.359373534284172e+00, 4.633268670866467e-02, -1.072563602186918e+01, -2.083590976655473e-01, 1.556876667372448e-01, -2.130832982239446e-01, -9.600031555596342e-02, 7.013033178729969e-02, -9.739881760726515e-02, -2.712968437818421e-02, 2.854173962715128e-02, -2.734216558461046e-02, -1.648940544636986e-02, 7.755056509029465e-02, -1.636512140938534e-01, -3.043028814021695e-02, 2.844678322191177e-02, -3.065651473824737e-02, -1.566666227574652e-02, 7.130485331465936e-02, -1.447470952253615e-01, -2.239606093548281e-01, 9.127838166432575e-02, -2.294781897489422e-01, -1.098346379486859e-03, 4.171675587447692e-02, -5.305440786160413e-03, -9.842919841230535e-03, 3.418768088501185e-02, -1.903893009964571e-02, -4.589473921403764e-02, 6.876888714820187e-03, -4.587930140330468e-02, -2.962641577372151e-02, 4.745690375226313e-03, -2.986054757168279e-02, -1.741952806994621e-02, 3.649168550993880e-02, -1.744822500713201e-02, -7.589589956375693e-03, 1.446102646156605e-02, -4.041537212003517e-03, -2.335599124265655e-01, 2.603020768769133e-01, -2.279136829334404e-01, 2.347720102149348e-02, 1.293366217986240e-01, -7.927909814038964e-02, -7.764091198120122e-02, 1.002619245721037e-01, -9.579813022519007e-04, -5.039936692607126e-02, 1.392636194347903e-01, -5.065995775554996e-02, -2.892933700866122e-02, 1.241536581940427e-01, 1.740189311305067e-02, -9.977166116186251e-03, -4.493408503460366e-03, -1.077019852736745e-02, 1.251754147479942e+03, 2.694521307414693e+03, 1.254308548638795e+03, 1.641163403931103e+00, -5.631342258151522e+00, 1.018564836657583e+00, -1.527202493896695e-02, 1.405419403036321e-01, -2.146228327381634e-02, 1.290743282036000e-01, -3.430957102165723e+00, -9.281679448243623e-01, 1.290743282035960e-01, -3.430957102165708e+00, -9.281679448243692e-01, 3.006510800850369e+05, 6.479515260786286e+05, 3.037440624809912e+05, -1.340181702572511e+01, 2.092950480531392e+01, -1.324587560616334e+01, 1.178568165765328e+08, 2.550966372381582e+08, 1.199742240036513e+08, 7.294516979289253e+01, 1.596633496187010e+02, 7.325021939424956e+01, -8.728188443120532e+00, 7.330441306099990e-03, -1.114055285514372e+01, -7.990016002082260e+00, 1.481375340897815e+00, -1.019792160440556e+06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_tpss0_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_tpss0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.164706323248191e-04, 1.164948698002602e-04, 1.164737919681972e-04, 1.164971594648343e-04, 1.164824988254082e-04, 1.165100195700335e-04, 1.117063262163643e-04, 1.392051437484149e-03, 9.983283643308179e-05, 1.380543963352950e-03, 1.396999094782778e-03, 1.397183805802862e-03, 1.189505568366305e-03, -4.902020455399737e-04, 1.307981801286878e-03, 1.307053086241045e-03, 1.323294150195977e-03, 1.326141159329845e-03, 1.292400594830491e-03, 1.292403979719984e-03, 1.305215566550322e-03, 1.331977950065282e-03, -4.908944994002036e-04, 1.214334374231967e-03, -1.449413409458493e-03, -1.516659578215456e-03, -1.751482810842125e-03, 1.014181295937879e-03, 9.525420589638147e-04, 9.079061617189307e-04, 5.805781900392985e-04, -1.800431447352208e-03, -1.552227612529848e-03, -9.681071838019683e-04, 1.396010402106545e-03, 7.554001868270350e-04, -3.707601643190597e-03, 3.128890894291076e-04, -4.118894308144227e-03, 3.764016069830686e-04, 8.084430160960711e-05, -6.582243084631114e-04, 1.011526694168682e-03, 1.081385726809716e-03, 1.375333153231253e-03, 2.359262383130120e-05, 1.375333153231251e-03, -7.164973720612391e-05, -4.614530731642978e-10, -4.212435330492553e-10, -5.559360352872818e-08, -9.141864425120180e-09, -9.944267969486366e-06, -5.658188588134725e-06, -2.384397623681844e-11, -2.420517782220099e-11, 5.789644489543509e-11, 7.731522908002063e-12, 5.789644489543509e-11, 7.731522908001753e-12, 9.830200152724152e-03, 9.833298059037649e-03, 1.007267223857456e-02, 1.007200616426878e-02, 9.967773896003573e-03, 9.967926218685624e-03, 1.006441975541487e-02, 1.006683429499579e-02, 5.099534625256115e-04, 9.940940478319256e-03, 9.657310084905803e-03, 2.275604558926255e-04, 1.430940275163008e-03, 1.444293586138770e-03, 1.551909279326131e-03, 1.562252723507298e-03, 1.478244274374580e-03, 1.519996530275359e-03, 1.577924466510459e-03, 1.623423583243747e-03, 1.542264721619018e-03, -9.255859556173770e-04, 1.583972296338425e-03, 1.517287658368806e-03, 1.490670183269370e-02, -3.090884835672678e-03, 3.322671022507026e-02, 3.639152104215375e-02, 9.033350984330430e-03, 1.272331910481906e-02, 1.837934593988206e-02, 2.300288172394978e-02, 2.020043808428603e-02, -3.899038376018830e-03, 2.522938063660887e-02, 2.055311570253686e-02, 2.550610689920896e-05, 2.656024754573454e-05, -1.654491734079761e-03, -4.075572296093527e-04, 3.347432876948723e-06, 9.853562349979166e-06, 7.951960468150511e-03, 7.966198618673263e-03, 4.964035865045609e-06, 9.737312314233901e-05, 4.964035865046124e-06, 9.737312314233988e-05, -1.947546871549061e-09, -6.021828658411295e-11, 4.141594941879106e-12, 3.694712645096263e-12, -1.333175330033579e-10, -1.233509675921412e-10, -3.822041710565629e-05, -6.588090249082536e-05, -1.833882244466973e-10, -1.380173254470366e-10, -1.833882244466975e-10, -1.380173254470869e-10, 2.146173764254869e-01, 2.275508676886515e-01, 1.047590519977106e-01, 1.092830719573491e-01, 5.827951031396881e-03, 5.811298967205938e-03, -3.834910846879823e-02, 2.795111130493562e-01, 5.844042037499763e-03, 5.826056108900194e-03, -3.339936471362322e-02, 2.485021409068398e-01, 3.466134839924352e-01, 3.588092451535762e-01, 1.421275064560455e-02, -1.985345652331146e-03, 2.362836665283164e-02, -3.198558490196624e-03, 6.360889130699614e-02, 6.421684449529269e-02, 4.200095038362972e-02, 4.265325252857105e-02, 3.479110252279446e-02, -3.338720358793015e-03, 3.294015635921852e-02, 1.929238021095566e-03, 7.233397565365235e-04, 7.517965840837268e-04, -5.260837399973869e-03, 9.743729610661245e-05, -9.144905950879816e-03, 3.632014124137118e-03, 3.739764294713016e-03, 3.818902249280641e-03, 8.713869110761052e-04, -8.656116076765846e-03, 1.098345188504857e-02, 1.187442440999312e-02, -3.902518899553309e-06, -3.904108027200129e-06, 8.696856108491023e-07, 1.085637168585207e-06, 1.021746463318551e-02, 1.558311398838509e-02, 1.439790208554476e-05, 2.615556568505001e-05, 1.439790208554482e-05, 2.615556568504997e-05, -5.477814185906269e-08, -6.008433118951643e-08, 7.191419670337758e-15, 7.226058178697606e-15, -2.714372530023870e-09, -3.460007206116058e-09, -5.443652742759386e-05, -6.488333213725835e-05, 5.377611021197896e-12, 3.213588907676895e-11, -1.472870393771177e-09, -2.211416973726049e-08])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
