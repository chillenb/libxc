
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_tpss0_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_tpss0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.681265186672603e+01, -1.681269941284069e+01, -1.681297655340856e+01, -1.681227067593384e+01, -1.681263112380322e+01, -1.681263112380322e+01, -2.630340850543437e+00, -2.630349992554744e+00, -2.630764136552723e+00, -2.632045260712170e+00, -2.631132160005136e+00, -2.631132160005136e+00, -5.295605749778459e-01, -5.291778515801469e-01, -5.214953418042859e-01, -5.266865502100686e-01, -5.269389015169518e-01, -5.269389015169518e-01, -1.613497887245469e-01, -1.626549253416103e-01, -6.038682186075173e-01, -1.350020798501786e-01, -1.537412270200875e-01, -1.537412270200874e-01, -7.579451341187515e-03, -7.981122453667696e-03, -4.332119560451375e-02, -4.371810073192791e-03, -6.100946161990571e-03, -6.100946161990572e-03, -4.157635752290414e+00, -4.158504376288513e+00, -4.157728632671045e+00, -4.158493630073369e+00, -4.158048650977540e+00, -4.158048650977540e+00, -1.583320578945643e+00, -1.594717867218520e+00, -1.579218369405265e+00, -1.589191527998114e+00, -1.591697654062512e+00, -1.591697654062512e+00, -4.847928201688674e-01, -5.147347289316579e-01, -4.437384327795615e-01, -4.537229234089611e-01, -4.932418723892874e-01, -4.932418723892875e-01, -1.039733737982049e-01, -1.707768205326874e-01, -9.731792566713786e-02, -1.431675012452199e+00, -1.155334760062038e-01, -1.155334760062038e-01, -3.375368510674307e-03, -4.273680118749747e-03, -3.272528671500049e-03, -6.812057205641329e-02, -4.110704546655831e-03, -4.110704546655831e-03, -4.931196062724000e-01, -4.975904378344891e-01, -4.971376705612730e-01, -4.960478835882299e-01, -4.966922017891251e-01, -4.966922017891252e-01, -4.707146795821707e-01, -4.173873746012833e-01, -4.382838257954393e-01, -4.584380145398630e-01, -4.482707877814046e-01, -4.482707877814046e-01, -5.351011295004389e-01, -2.040534639409463e-01, -2.334949672498961e-01, -2.949211337876819e-01, -2.610828748462464e-01, -2.610828748462465e-01, -3.819216442893451e-01, -4.149127590938128e-02, -5.590331933271115e-02, -2.865365839036949e-01, -8.384447084145932e-02, -8.384447084145934e-02, -1.067893905094410e-02, -1.142450074488034e-03, -2.402421018021102e-03, -7.946395729290984e-02, -3.775088672742706e-03, -3.775088672742697e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_tpss0_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_tpss0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.089334619317248e+01, -2.089402659691820e+01, -2.089340077313886e+01, -2.089406671056646e+01, -2.089370783012569e+01, -2.089446713135107e+01, -2.089308799074639e+01, -2.089368409811526e+01, -2.089336693964707e+01, -2.089409933660837e+01, -2.089336693964707e+01, -2.089409933660837e+01, -3.253485728973530e+00, -3.253314846513319e+00, -3.253534971397265e+00, -3.253336955799002e+00, -3.254385343200532e+00, -3.254508355642279e+00, -3.254543056114847e+00, -3.254478563506561e+00, -3.252898076746263e+00, -3.255300205837285e+00, -3.252898076746263e+00, -3.255300205837285e+00, -6.653684014519199e-01, -6.690436216060958e-01, -6.635589847039781e-01, -6.680738308166350e-01, -6.324617802485457e-01, -6.261462151562763e-01, -6.356751915404923e-01, -6.379815835605190e-01, -6.640704275605361e-01, -6.045972231791954e-01, -6.640704275605361e-01, -6.045972231791954e-01, -1.668696831787125e-01, -1.714360931654275e-01, -1.704461017940410e-01, -1.763133595678440e-01, -7.667747330256799e-01, -7.986530338484398e-01, -1.306519858307050e-01, -1.318743796567446e-01, -1.524028709774753e-01, -1.384721151121133e-01, -1.524028709774753e-01, -1.384721151121133e-01, -9.761250497297197e-03, -1.037037362032676e-02, -1.022640791508646e-02, -1.095202351568111e-02, -5.447418196883420e-02, -5.718917446886986e-02, -5.874431278078337e-03, -5.776717651869330e-03, -8.711086791118332e-03, -4.960474381030987e-03, -8.711086791118334e-03, -4.960474381030991e-03, -5.175852231915383e+00, -5.174942334027648e+00, -5.175739761799189e+00, -5.174849561750814e+00, -5.175947431496934e+00, -5.175019491617380e+00, -5.175858618827442e+00, -5.174920266403547e+00, -5.175711826526692e+00, -5.174886489180206e+00, -5.175711826526692e+00, -5.174886489180206e+00, -1.898228459169479e+00, -1.899422347935778e+00, -1.922841938488443e+00, -1.923314438006098e+00, -1.878989422477347e+00, -1.884534918633533e+00, -1.900843031733332e+00, -1.906589516388449e+00, -1.924454363763169e+00, -1.915601272040646e+00, -1.924454363763169e+00, -1.915601272040646e+00, -6.234784395556021e-01, -6.230023382059021e-01, -6.729496967420514e-01, -6.733225597020041e-01, -5.636268736757353e-01, -5.821420890516995e-01, -5.946035165765794e-01, -6.079932361176811e-01, -6.468781444124989e-01, -6.174026519158088e-01, -6.468781444124991e-01, -6.174026519158090e-01, -1.151675108109131e-01, -1.150729561407011e-01, -1.637124556223913e-01, -1.640208560096766e-01, -1.083221372889276e-01, -1.109635551351556e-01, -1.900924953877234e+00, -1.900240128473927e+00, -1.218005039380997e-01, -1.147048251766047e-01, -1.218005039380997e-01, -1.147048251766047e-01, -4.407820476234096e-03, -4.580784571065767e-03, -5.652182720565118e-03, -5.737763084353252e-03, -4.225695720512547e-03, -4.474483710928340e-03, -8.266663704179149e-02, -8.331518989040955e-02, -4.316830395856563e-03, -5.925300114698771e-03, -4.316830395856559e-03, -5.925300114698768e-03, -6.261562188040477e-01, -6.279926505244371e-01, -6.271032958091939e-01, -6.289494561184934e-01, -6.263943231623812e-01, -6.282445066441243e-01, -6.259978171358582e-01, -6.278471593692380e-01, -6.261565820627611e-01, -6.280120214286966e-01, -6.261565820627613e-01, -6.280120214286966e-01, -6.118530507774067e-01, -6.131793773456329e-01, -5.458186825497542e-01, -5.477089492472507e-01, -5.722983147364977e-01, -5.739423081729735e-01, -5.877247554459819e-01, -5.892017078509901e-01, -5.804351160595635e-01, -5.822992250767388e-01, -5.804351160595635e-01, -5.822992250767388e-01, -7.028312141579280e-01, -7.039182718187451e-01, -2.045539022060212e-01, -2.052992287899218e-01, -2.598056294386628e-01, -2.622652188649747e-01, -3.801987813525581e-01, -3.814606428380872e-01, -3.226261832263765e-01, -3.225285035966403e-01, -3.226261832263765e-01, -3.225285035966403e-01, -4.925020301346005e-01, -4.964476931905099e-01, -5.363636830270558e-02, -5.396799606867229e-02, -6.979162532924761e-02, -7.162590785198023e-02, -3.704382190079124e-01, -3.795759033141533e-01, -9.592046056979815e-02, -9.546358068343892e-02, -9.592046056979815e-02, -9.546358068343892e-02, -1.394321396944752e-02, -1.444472724677307e-02, -1.521444589439148e-03, -1.524879071861680e-03, -3.095206655868969e-03, -3.291851556826260e-03, -9.188305880264562e-02, -9.290373024769706e-02, -4.088248491012017e-03, -5.431850776771102e-03, -4.088248491012013e-03, -5.431850776771097e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_tpss0_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_tpss0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.976456612469690e-08, 4.394449201574557e-10, -1.976488278899876e-08, -1.976525498079142e-08, 4.394653995121968e-10, -1.976537961525773e-08, -1.976614583326213e-08, 4.395297892571282e-10, -1.976704048582613e-08, -1.975844360867760e-08, 4.392266903376305e-10, -1.975716225044565e-08, -1.976508394748674e-08, 4.393892545918013e-10, -1.976011842818378e-08, -1.976508394748674e-08, 4.393892545918013e-10, -1.976011842818378e-08, -1.734780428894738e-05, 1.904619658089490e-06, -1.735113488790271e-05, -1.735171676724338e-05, 1.905074395664440e-06, -1.735422709789667e-05, -1.743421706752464e-05, 1.915054397461407e-06, -1.745110804701120e-05, -1.737883833987082e-05, 1.892142402799617e-06, -1.738423133423535e-05, -1.734926135998340e-05, 1.903120108237034e-06, -1.745705398140352e-05, -1.734926135998340e-05, 1.903120108237034e-06, -1.745705398140352e-05, -6.025086536936224e-03, 3.018867992961956e-03, -5.987251871466563e-03, -6.066043777699193e-03, 2.984327249393496e-03, -6.009435728643532e-03, -6.712985760667703e-03, 2.105148723593510e-03, -6.800649792329758e-03, -6.648334686496119e-03, 1.979352644664631e-03, -6.666355897197065e-03, -6.188744771514629e-03, 2.238087083874927e-03, -6.547858043450887e-03, -6.188744771514629e-03, 2.238087083874927e-03, -6.547858043450887e-03, -4.297841426268405e-01, -6.415207785254832e-01, -4.279148672332252e-01, -4.165954836260100e-01, -6.040511118797578e-01, -4.064833072425147e-01, -2.082990888824336e-03, 1.865246751370776e-03, -1.583174445650298e-03, -1.015183802028143e+00, -6.974433132065594e-01, -9.942117647552636e-01, -7.276411505539531e-01, -1.423819006607673e+00, 3.485650178049085e+00, -7.276411505539511e-01, -1.423819006607687e+00, 3.485650178049135e+00, 7.577079208642164e+00, -1.874860949538604e+01, 4.176296028503170e+00, 8.540073658541491e+00, -2.018468822838668e+01, 4.358878507732214e+00, 8.301062439857798e-02, -3.803107799137335e+00, -5.716159893446549e-01, -1.831526292103257e+00, -3.226612919880917e+00, -1.577096439304436e+00, -3.671335547615019e+00, 5.874420380354707e-03, -9.314639705940394e+00, -3.671335547615746e+00, 5.874420380452601e-03, -9.314639705931704e+00, -8.516135661670029e-06, 9.321668284317074e-07, -8.522149110295347e-06, -8.607011172012990e-06, 9.443708370631332e-07, -8.609810423281699e-06, -8.521257001201857e-06, 9.328447603292538e-07, -8.525082295193986e-06, -8.599045084372945e-06, 9.436114556331501e-07, -8.604870766973500e-06, -8.562510649419299e-06, 9.382674283301596e-07, -8.566008919619235e-06, -8.562510649419299e-06, 9.382674283301596e-07, -8.566008919619235e-06, -7.368689186477950e-05, -2.734597867844546e-07, -7.334173495146903e-05, -7.050572928940446e-05, -3.421345661895148e-07, -7.027238771274153e-05, -7.200823762887332e-05, -1.212639581130356e-06, -7.233332372821023e-05, -6.908924525419713e-05, -1.297852450261965e-06, -6.936072314817677e-05, -7.354560686438963e-05, 1.668335981186782e-07, -7.166747131402817e-05, -7.354560686438963e-05, 1.668335981186782e-07, -7.166747131402817e-05, -2.280657388467292e-02, 1.003232890031837e-02, -2.325321335126501e-02, -2.841402215711850e-02, 1.808414587574407e-02, -2.969994429915039e-02, -2.579909184996020e-02, 1.280620106678248e-02, -2.538276273271980e-02, -1.989468359106424e-02, 2.408832162304946e-02, -2.221246501116553e-02, -2.238499900717553e-02, 1.072187880298743e-02, -2.680738004184425e-02, -2.238499900717552e-02, 1.072187880298743e-02, -2.680738004184424e-02, -9.729313665720442e-01, -1.176115143787986e+00, -1.044103873895810e+00, -4.151412262965729e-01, -3.787496333543526e-01, -4.154305061360468e-01, -9.625260087996140e-01, -1.358309670814186e+00, -1.159955762441566e+00, -1.780338148660259e-04, 1.256785353731731e-04, -1.784803416449509e-04, -9.259328875746423e-01, -1.215704734043846e+00, -1.600015563296428e+00, -9.259328875746419e-01, -1.215704734043846e+00, -1.600015563296428e+00, -4.726134776041417e+00, 2.237745870428778e-03, -4.090463894886030e+00, -4.068526234694846e+00, 9.851213846703260e-04, -3.756213641156602e+00, -2.053454939299595e+01, -4.412603220231251e+00, -2.391691317054446e+01, -1.192101768397162e+00, -2.672442035352083e+00, -1.143682251957267e+00, -1.152637706473218e+01, 1.626347130396611e-02, -1.132679728925876e+01, -1.152637706472762e+01, 1.626347130207101e-02, -1.132679728925856e+01, -2.058194911828789e-01, 1.075514919111817e-01, -2.087142805182795e-01, -1.086895083488624e-01, 6.501608791877946e-02, -1.096412667578825e-01, -1.335036176707861e-01, 7.807837546302397e-02, -1.350802222938267e-01, -1.614755573958134e-01, 9.120106574955932e-02, -1.629776141829104e-01, -1.465184752637340e-01, 8.438213607884848e-02, -1.480599024552250e-01, -1.465184752637340e-01, 8.438213607884849e-02, -1.480599024552249e-01, -1.257879041044003e-01, 6.083009969451252e-02, -1.298139760453556e-01, -1.268121561279205e-02, 2.372703097050888e-03, -1.280457941017827e-02, -2.269076420276582e-02, 1.189825584555071e-02, -2.312877463762661e-02, -4.936645385290456e-02, 2.873910954439146e-02, -4.919843067088082e-02, -3.339908288513371e-02, 1.892564696533183e-02, -3.323033506048791e-02, -3.339908288513371e-02, 1.892564696533184e-02, -3.323033506048791e-02, -1.849226906320652e-02, 1.347495825312329e-02, -1.982525597950230e-02, -2.077866585767809e-01, -1.931805408231373e-01, -2.073349438947622e-01, -1.148515967433423e-01, -8.417998082489594e-02, -1.136189629155496e-01, -7.123708540219079e-02, 2.497936447433212e-02, -7.063408782921012e-02, -7.062843099522939e-02, -2.419322472926652e-02, -7.158946946467662e-02, -7.062843099522932e-02, -2.419322472926650e-02, -7.158946946467673e-02, -2.567618567222536e-02, 7.089687724116801e-03, -2.524717676261709e-02, 5.443791052051328e-02, -3.981250078710808e+00, -3.121575941929544e-02, -5.025326582834586e-01, -2.642269801908009e+00, -8.227665567590599e-01, -1.165772063553158e-01, 6.174851546454860e-02, -1.087983841749523e-01, -1.179237817353015e+00, -2.265702164090969e+00, -2.123511743455887e+00, -1.179237817353061e+00, -2.265702164090888e+00, -2.123511743455919e+00, -1.729667908768711e+00, -2.118355357636387e+00, -2.019211183530866e+00, -1.454193586591312e+01, 4.127744526362455e-03, -2.576096663750657e+01, -8.146118395920229e+00, -1.372459674731491e+00, -8.982555359474333e+00, -1.185030635190315e+00, -3.198930981304023e+00, -1.294977320510982e+00, -2.377498047106499e+01, 2.082691001140744e-02, -1.175547741564309e+01, -2.377498047103826e+01, 2.082691003043525e-02, -1.175547741563744e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_tpss0_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_tpss0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.379076796584406e-03, 1.379583020152669e-03, 1.379143747000624e-03, 1.379631268494537e-03, 1.379328963803790e-03, 1.379906907859418e-03, 1.378582611192838e-03, 1.378948666552708e-03, 1.379121897916046e-03, 1.379309476188616e-03, 1.379121897916046e-03, 1.379309476188616e-03, 2.047809114266885e-03, 2.044488119414134e-03, 2.048852443736420e-03, 2.044923663378223e-03, 2.066362487223909e-03, 2.068814699629477e-03, 2.071263670217080e-03, 2.068823613474860e-03, 2.046033519701522e-03, 2.084887338193047e-03, 2.046033519701522e-03, 2.084887338193047e-03, 3.121850047760332e-03, 3.112090132242561e-03, 3.135211573451486e-03, 3.109445627532793e-03, 3.100020302585246e-03, 3.137782837615748e-03, 3.488267301642402e-03, 3.573275927203526e-03, 2.840111857384614e-03, 2.774268237886212e-03, 2.840111857384614e-03, 2.774268237886212e-03, 6.275490596205326e-03, 6.437575697207563e-03, 6.880575547796150e-03, 7.179292689295015e-03, 4.822436488252823e-04, 4.661100025120685e-04, 1.147056596128163e-03, 1.181216185809921e-03, 4.197210896262417e-03, 1.699870166651126e-03, 4.197210896262432e-03, 1.699870166651147e-03, 3.899828789000761e-09, 3.900184362932683e-09, 5.611649487418203e-09, 5.611764096327828e-09, 4.336788856784801e-06, 4.342852987690908e-06, -3.597314985790816e-11, -3.597432881184522e-11, -9.053429173002242e-10, -9.053551992143568e-10, -9.053429173257147e-10, -9.053551992398470e-10, 9.266772768645933e-03, 9.271515643610765e-03, 9.368063962314169e-03, 9.369120732816042e-03, 9.274389439423710e-03, 9.276022588273043e-03, 9.360968055932985e-03, 9.364895795863344e-03, 9.316984267105654e-03, 9.320202746413559e-03, 9.316984267105654e-03, 9.320202746413559e-03, 2.183530328325967e-03, 2.180422352378939e-03, 2.240090374630103e-03, 2.236001930696194e-03, 1.965564933746341e-03, 2.026165584682374e-03, 2.006777378237203e-03, 2.068034252848416e-03, 2.386518672802873e-03, 2.231711972816506e-03, 2.386518672802873e-03, 2.231711972816506e-03, 2.284824457961739e-02, 2.350571775582834e-02, 2.050505253414887e-02, 2.162398322014062e-02, 1.443450642164129e-02, 1.849905285313284e-02, 7.356365841437758e-03, 1.112898893987604e-02, 2.697351333578131e-02, 2.339960636650833e-02, 2.697351333578132e-02, 2.339960636650833e-02, 1.845562764619941e-04, 1.870190731883047e-04, 2.224962460077713e-03, 2.244468511265792e-03, 1.413890303554809e-04, 1.453372653564272e-04, 2.502758545684995e-03, 2.503510056591342e-03, 5.876948980737985e-04, 7.490141270904303e-04, 5.876948980737989e-04, 7.490141270904315e-04, -2.054835110315305e-11, -2.054841070722551e-11, -8.727153121398508e-11, -8.727155496377236e-11, -5.038698585341089e-10, -5.038500441457773e-10, 3.963572643910711e-05, 3.932963714138464e-05, -4.487380211840761e-10, -4.487354269763494e-10, -4.487380211841938e-10, -4.487354269764674e-10, 1.454345609228734e-01, 1.506446876941264e-01, 1.005070433785406e-01, 1.039743057863973e-01, 1.163287701146403e-01, 1.207514503772502e-01, 1.314315952371595e-01, 1.360780147480791e-01, 1.237557526708716e-01, 1.283083221225010e-01, 1.237557526708716e-01, 1.283083221225010e-01, 4.499340263553642e-02, 4.796815251279629e-02, 1.563447726286900e-02, 1.595965270709900e-02, 2.514741067169969e-02, 2.590335367350365e-02, 4.499190684990193e-02, 4.547415405820987e-02, 3.322165699739162e-02, 3.376492654303995e-02, 3.322165699739161e-02, 3.376492654303993e-02, 1.464819748707209e-02, 1.602349130556414e-02, 3.812667056115171e-03, 3.864315329562546e-03, 6.677986904469354e-03, 6.941985486732716e-03, 1.745078136774744e-02, 1.752018431236245e-02, 1.164688321741032e-02, 1.179073538884745e-02, 1.164688321741031e-02, 1.179073538884745e-02, 1.650612682508280e-02, 1.713051758408818e-02, 3.675803744595735e-06, 3.675599435781043e-06, 1.113810422442611e-05, 1.117279003694528e-05, 2.356704057421851e-02, 2.808824221557129e-02, 1.347022488189642e-04, 1.432107448492712e-04, 1.347022488189618e-04, 1.432107448492689e-04, 1.137899565662775e-10, 1.147332838057193e-10, -2.681422865870614e-13, -2.681339131420452e-13, -3.645028377330273e-11, -3.645013228247655e-11, 1.436495967538307e-04, 1.513036379336525e-04, -4.629644492546944e-10, -4.629916953806980e-10, -4.629644525025704e-10, -4.629916986285741e-10])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
