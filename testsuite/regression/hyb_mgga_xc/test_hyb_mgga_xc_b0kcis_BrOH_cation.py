
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_b0kcis_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b0kcis", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.519589206076129e+01, -1.519593369170143e+01, -1.519613162149628e+01, -1.889293920493586e+73, -1.679722198723034e+73, -5.968605189378029e+99, -5.823311666208703e+43, -1.867876932994248e+116, -5.616796544877475e+106, -1.269997567907916e+109, -3.988408645549208e+99, -1.650149689391221e+85, -6.008834326446566e-01, -6.241686538084741e+77, -4.689276308284552e+87, -2.292363511662224e+106, -5.903668401557757e-01, -8.764833684097608e+120, -8.173349365937788e+136, -2.709908065493068e+79, -6.303721964901707e+115, -3.249379301357155e+120, -3.739564197155756e+113, -8.653762170214738e+98, -7.257085247266491e+126, -1.538776944228204e+102, -1.034013722493017e+127, -1.533569520696559e+130, -1.171594696095861e+129, -1.163022539426181e+129, -4.893567116869723e+120, -1.495718332220876e+118, -4.199828867567521e+120, -1.254520681648182e+106, -1.311079452677374e+79, -1.929823804477123e+110, -6.442807645966114e+121, -2.372074625312572e+80, -2.283866553192401e+116, -9.764988814049134e+85, -2.725428951224635e+119, -1.919994197784418e+112, -3.207930671324641e+87, -9.842292305832141e+120, -3.229800862414231e+118, -2.389801865007315e+104, -7.367421871237231e+125, -5.077077521360439e+106, -1.380605532291653e+128, -2.004823451038074e+84, -2.325832619014558e+116, -2.453370248324542e+119, -1.091902150004643e+128, -3.390793300136581e+106, -2.891629117922312e+94, -1.033375822586321e+118, -3.969006962502335e+125, -1.967725965327269e+83, -4.851127768546941e+108, -3.139200922812481e+117, -4.448746086720574e+118, -3.332973383966206e+123, -5.365054331734065e-01, -2.609287445457941e+87, -5.368856738702573e-01, -8.016206851730733e+101, -1.200141996771807e+109, -2.230685122083884e+109, -4.879860016346645e+87, -4.175549695906444e+111, -1.162424730550994e+109, -1.143777811932530e+106, -3.043393902923252e+118, -9.759790359767250e+111, -5.348607691476893e+119, -2.503435153212129e+95, -1.640132893245100e+88, -1.618233049894369e+112, -2.543776008038300e+85, -5.197070275468297e-02, -5.326106178596294e+90, -1.642332570844797e+124, -1.454077325043805e+126, -4.382141909775605e+123, -1.600085969843601e-02, -2.014172672686647e+126, -4.082097700901169e-03, -9.263808144907745e-02, -3.461801375415868e+125, -7.028771808492326e+103]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_b0kcis_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b0kcis", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.017174334548873e+01, -2.017171887791076e+01, -2.017180719343795e+01, -2.017176593459545e+01, -2.017202739855778e+01, -2.017207301393933e+01, 1.325951904569642e+57, -2.890641493021338e+71, -2.383692025369038e+57, -2.571759157019712e+71, -3.387597543706343e+97, -3.387725603306724e+97, -1.442175656931380e+42, -2.551604557743962e+28, -1.485699524653954e+107, -1.807598838696934e+114, 7.968035557848623e+90, -5.907011211964622e+104, -1.307620286897437e+107, -2.061041114529695e+93, 2.018539712719702e+82, -4.484598595065153e+97, -5.276428201719090e+67, -2.158399957744137e+83, -7.720323549501632e-01, -7.732073411438618e-01, -3.503982496959962e+62, -8.778791009150135e+75, -2.691902229809555e+85, -3.256510815752974e+85, -2.411346317616234e+104, -1.491645110877727e+90, -7.674459322502492e-01, -7.487299467169186e-01, -2.647818060580708e+105, -8.990555408742723e+118, 7.607160874960061e+119, -6.320519076146151e+134, 5.008507569337387e+63, -3.510423220973166e+77, -6.407161573947457e+113, -2.938479328199133e+99, 6.207998249990563e+104, -2.941709663639220e+118, -1.132024260791606e+111, -6.361979417662288e+111, -5.598216394986521e+96, 1.943189852916805e+81, -6.944004951568664e+124, -7.641712145702479e+112, -2.928004528842591e+86, -1.492967846997929e+100, -2.669231841990016e+111, -8.361528539501481e+124, -1.077412050443457e+128, -2.021206084878285e+127, -5.945988774104085e+126, -8.849097241015014e+111, -1.202134981167140e+114, -3.179930735685519e+127, -7.174656022002472e+117, -3.863485103082291e+118, -6.901100055237325e+102, -1.427263760302987e+116, 1.175110653502612e+105, -3.928105807801137e+118, -1.321803357798398e+104, -7.302524834573610e+101, -6.566703291905470e+63, -1.848207446534718e+77, -1.968546819105136e+108, 2.263960813085207e+93, -1.477173306173439e+107, -5.946625103006525e+119, -3.273820386765639e+78, -2.450653000501967e+74, -2.604330948459163e+100, -2.198171667051595e+114, -8.402731359809556e+83, -4.281104840499408e+83, -2.547383527155306e+117, -5.035735141436338e+103, -1.905694645812980e+110, -8.627979144770295e+95, -4.041302693757031e+85, 3.443919601440623e+70, 1.430144690454570e+105, -9.101396628766285e+118, -3.221165610265498e+116, -1.969281188182503e+102, -1.038679281727700e+100, -2.422477418393483e+102, -6.095263785889305e+123, -5.722304563583004e+110, -1.285564330503611e+102, -5.727299937946936e+104, 1.627569916298276e+109, -1.183847490898263e+126, -9.785481921843440e+68, -2.593070519071928e+82, -2.406581785723757e+114, -2.368348211574124e+100, -9.579618646256832e+107, -2.310320753969997e+117, -1.040120779147060e+126, -4.587495997353703e+118, -8.422589029275880e+90, -3.246127832890742e+104, -6.095432767269109e+78, -3.138876605158387e+92, -3.061604462922131e+102, -9.405910131681646e+115, -1.312313498444988e+110, -3.203977403088114e+123, -2.603004057558692e+81, -7.632474816508040e+67, -8.734596330566707e+106, -6.893593304936509e+92, -9.339015662500800e+101, -2.036056648536824e+115, -5.367636206256915e+102, -4.170347976866111e+116, -3.039679557377045e+121, 1.379516867080712e+107, -6.881247527913968e-01, -6.890425788747787e-01, 2.563750271917372e+71, -3.284528155589509e+85, -6.886220757734887e-01, -6.895369981070405e-01, -1.711524464478128e+86, -8.705504946859324e+99, -4.253705691154792e+93, -1.221349771975567e+107, -2.289287892065667e+107, -4.604765959152177e+93, -6.196667345177367e+85, -3.131006552166356e+72, -1.589687214423279e+96, -4.153435215426892e+109, -7.367820093021983e+93, -1.182009218502597e+107, -1.208189919474625e+104, 6.696470375601348e+88, -2.881527132650145e+116, -1.214423769513526e+102, -9.779430645458635e+109, 1.336217072399998e+96, -3.585482144215236e+104, -4.911365059117243e+117, -1.521793461630297e+79, -2.883567465366165e+93, -1.436207510614088e+76, -2.053019324418617e+86, -1.605567031019001e+110, -8.164722232136665e+96, -3.323033726340800e+83, -1.962067001760086e+76, -6.646955896969198e-02, -6.625751148643165e-02, -6.762590370902980e+88, -3.669843568278118e+78, -5.285314182509965e+108, -1.445924879383834e+122, -1.395792186293695e+124, 1.443851861615504e+109, -1.002577406677039e+108, -3.646042917269506e+121, -2.094623167450347e-02, -2.054391098127607e-02, -4.303005776796004e+110, -1.743474783225874e+124, -5.448915141469273e-03, -5.280789779826391e-03, -1.179105188062372e-01, -1.172561144458916e-01, -1.514972629479691e+109, -2.167876461570890e+123, -1.231679536223293e+102, 4.202763280898446e+88]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_b0kcis_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b0kcis", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [5.003464385233108e-09, 3.650639620874398e-08, 5.003899648928488e-09, 5.003497885554438e-09, 3.650598436195379e-08, 5.003867573250750e-09, 5.003289964164762e-09, 3.650402634570718e-08, 5.003992059655733e-09, -1.203726964022235e-08, 2.428305412978198e-09, 1.490270570536756e-09, -1.252561574051320e-08, 1.447947079595783e-09, 1.000159280541659e-09, 6.457590080562864e-10, 7.392563155263237e-10, 6.458138985069296e-10, 1.963256413924817e-06, 3.232094010104995e-06, -1.608722933685499e-05, 1.104563430682313e-06, 1.514292205014777e-06, 1.104342441777914e-06, 1.114775264389275e-06, 1.526562157085788e-06, 1.115491564960503e-06, 1.110317629243649e-06, 1.520924112540661e-06, 1.110298255872235e-06, 1.108178877628304e-06, 1.522298267042656e-06, 1.114652202100886e-06, -1.608661344035841e-05, 3.257811029399690e-06, 1.982408583279403e-06, 1.170257434239075e-02, 4.653096576715821e-02, 1.199721140392666e-02, -8.548969878259455e-03, 6.236032983588657e-03, 3.444089030620396e-03, 1.040577465090434e-03, 1.547702354649783e-03, 1.036592470205705e-03, 2.018280453657844e-03, 3.457306588415895e-03, -1.086070135869811e-02, 1.447693651710468e-02, 5.069567389433759e-02, 1.001832583154392e-02, 1.122872372149535e-03, 1.589254007973822e-03, 1.040508457221147e-03, -1.940360630242953e+00, 1.071375550419617e+00, 6.449663092452445e-01, -1.391818425869500e+00, 1.834741164873383e+00, 1.031713791469494e+00, 5.224356803297270e-04, 9.699880302557031e-04, -6.240862559884802e-03, 3.361726303102024e-01, 5.731246407755927e-01, 3.487124770828910e-01, 2.057064911793039e-01, 2.590324227702647e-01, 1.685321636548803e-01, 2.132320705359041e-01, 2.740835814834655e-01, -3.551934729817334e+01, 1.409366616810746e+02, 2.817296087281327e+02, 1.409376728675448e+02, -2.266059479213836e+06, 1.934475796758427e+02, 9.680231829254603e+01, -2.322252549794795e+03, 1.490000521813108e+01, 7.488110083799661e+00, 1.873152358595203e+02, 3.745456536776925e+02, 1.873158113938777e+02, 1.577296306585568e+01, 3.141478247146582e+01, 1.584512073451870e+01, 1.577296306585567e+01, 3.141478247146582e+01, 1.584512073451866e+01, 1.405534332696749e-06, 1.481232793001179e-06, 1.406402117207879e-06, 1.140663521251917e-06, 9.335138013096597e-07, 1.141239448424904e-06, 1.130010209728926e-06, 9.289302667854927e-07, 1.130642669020509e-06, 1.139864082903360e-06, 9.332249843145573e-07, 1.140684461386313e-06, -6.399132935436292e-07, 2.218738920858812e-06, 1.779487692926369e-06, 1.411105463451995e-06, 1.483407352512297e-06, -1.009055547769324e-06, 2.412419422448590e-05, 3.965631006556285e-05, 2.416207598885075e-05, 2.443427438722528e-05, 3.986722009954791e-05, 2.446719116046609e-05, 1.338568433190026e-05, 1.855348632654544e-05, 1.347409382537857e-05, 1.369304936172239e-05, 1.881571260212643e-05, 1.378618964555909e-05, 3.966870666611270e-05, 7.021632956821508e-05, -1.279314812937797e-04, 2.451308477650502e-05, 3.990508578899973e-05, 2.441512631426117e-05, 1.514360281535096e-02, 1.642032665843694e-02, 9.479121174826544e-03, 1.922233937746157e-02, 1.115226668067003e-02, 2.011455459944722e-02, 1.040079880055954e-02, 1.090877839565168e-02, 1.141239460707916e-02, 1.460406233196953e-02, 1.239961387648231e-02, 1.544378179185710e-02, 1.554276460790063e-02, 1.525578957424330e-02, 9.655387184742761e-03, 1.307419019429573e-02, 1.031864074703350e-02, 1.302489128559215e-02, 4.983272027091880e-01, 8.946409586581625e-01, 4.980041170289552e-01, -2.388411753919198e+00, 6.735894177986328e-01, 3.719178665471181e-01, 1.499381794877278e+00, 2.894438940745654e+00, 1.503170288995590e+00, 5.098433132349468e-05, 5.119968397034385e-05, 5.107909184937823e-05, 1.393927753670477e+00, 2.643904839661015e+00, 1.429420782601173e+00, 1.393927753670478e+00, 2.643904839661016e+00, 1.429420782601173e+00, -6.614378290946758e+07, 2.609087597073253e+02, 1.304770374605621e+02, 4.286852460959312e+01, 8.565900251900183e+01, 4.286185477805036e+01, 1.730533410052103e+03, 3.459608496174561e+03, 1.730646810032089e+03, 3.488724431656510e+00, 6.841017759217829e+00, -2.842367550506460e+02, 4.242908944101610e+02, 8.484617466268064e+02, 4.245802225512776e+02, 4.242908944101600e+02, 8.484617466268044e+02, 4.245802225512767e+02, 2.138553456257212e-01, 3.741853364009320e-02, 2.171878788058056e-01, 9.734514988484545e-02, 2.761836895546575e-02, 9.818064280070533e-02, 1.779981492677517e-01, 7.974725758587564e-02, 1.794857503159517e-01, 1.944133834200420e-01, 4.426457411290148e-02, 1.594443044655245e-01, 1.932922896141929e-01, 7.947809423890945e-02, 1.947793905482095e-01, 1.748970929498136e-01, 4.268770091015093e-02, 1.425447350798692e-01, 2.160231374171814e-01, 5.277900620223503e-02, 2.200127310932874e-01, 3.546610317800796e-02, 4.806398746269215e-02, 2.059644061171939e-02, 3.451201538680310e-02, 3.297696366705280e-02, 3.182150494369223e-02, 4.575885317436056e-02, 2.416091208173798e-02, 4.564512268972883e-02, 3.498514537534295e-02, 2.229089813338814e-02, 3.502173193970625e-02, 4.087708872450559e-02, 3.407478483171341e-02, 4.401433003941960e-02, 1.634614056415665e-02, 1.727387198137581e-02, 1.731096654241106e-02, 2.103772357031253e-01, 3.648476821087360e-01, 2.103124714161029e-01, -2.890598316682362e-01, 2.194733286967681e-01, 1.352511127489213e-01, -1.593664614444007e-02, 1.056465691307542e-01, 7.687994263102027e-02, 1.082810639388505e-01, 1.623235066654098e-01, 1.087116089317201e-01, 1.079688181597047e-01, 1.616990151071182e-01, -8.653271032907714e-02, 2.238802618834384e-02, 2.300374494755613e-02, 2.295917479970486e-02, 1.211331164222606e+03, 7.448163985332085e+03, 1.278998827887024e+03, 1.529231039650126e+00, 2.988947391181170e+00, 1.532729710852877e+00, 1.230253504640209e-01, 1.555560579478048e-01, 1.369090878847359e-01, 1.143263757060263e+00, 2.091535400781868e+00, 1.173253031483031e+00, 1.143263757060259e+00, 2.091535400781858e+00, 1.173253031483027e+00, 6.035347985255255e+06, 1.337557712958500e+07, 6.122025698937937e+06, 1.982574272181903e+02, 3.964282109525228e+02, 1.982571476610269e+02, 2.489001411483042e+13, 4.978057257541230e+13, 2.489007359719645e+13, 8.765944876602677e+01, 4.624083162365015e+02, 9.758653254536902e+01, 1.530662596251060e+02, 3.056382751084225e+02, 1.531846011487315e+02, 4.882066406672683e+03, 9.763638569203576e+03, -2.859677614336796e+07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_b0kcis_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b0kcis", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-4.139059567374582e-16, -9.610732861105599e-54, -9.606292202587511e-54, -9.611012435308849e-54, -9.607207768164715e-54, -9.612414264884344e-54, -9.602904749189049e-54, -4.590664376541141e-05, -9.606170416487031e-54, -4.591869239228930e-05, -4.591203256031151e-05, -4.591869239228930e-05, -3.118313053495737e-04, -5.673175246623088e-47, -3.119905004654946e-04, -3.118126037769826e-04, -3.151057434239297e-04, -3.156602426759899e-04, -3.139159814817330e-04, -3.139113904627374e-04, -3.115770996534549e-04, -3.167251540251437e-04, -7.452150450081448e-22, -3.167251540251437e-04, -1.770815865945182e-15, -1.075104736007216e-40, -1.052259181132854e-40, -2.335054948254035e-03, -1.894255644134158e-03, -1.846347767584692e-03, -2.034837889426032e-03, -1.094631383483999e-40, -1.036627864717579e-40, -1.097758148578764e-40, -2.387451070734442e-03, -1.670406270004712e-03, -1.875483465591477e-35, -1.429115655342726e-02, -1.820015849448682e-35, -1.537747850998337e-02, -5.795149296322643e-04, -8.422643208114534e-42, -3.851325962278474e-03, -4.765166820896049e-03, -1.082445931768909e-02, -1.657563787037061e-03, -1.082445931768908e-02, -1.434385240210859e-34, -2.086113007959544e-05, -2.364485452896411e-05, -8.776364644330136e-28, -2.759590833300110e-05, -5.028733491273377e-32, -4.029688874670170e-04, -5.526277535509632e-06, -5.398468645019788e-06, -1.577603284981188e-05, -8.749535957496139e-06, -1.577603284981188e-05, -8.749535957496139e-06, -1.320943960767462e-03, -1.321657663810327e-03, -1.336107304570352e-03, -1.336317758164320e-03, -1.321997783760010e-03, -1.322315035303658e-03, -1.334998515712930e-03, -1.335622883626417e-03, -2.059547238993975e-47, -1.328965231954977e-03, -1.328515715905832e-03, -4.623335660269650e-38, -6.970564501163064e-04, -7.019997553728622e-04, -7.357945279427384e-04, -7.397547207060162e-04, -6.631396588837400e-04, -6.773121891249382e-04, -6.959021108412639e-04, -7.110317371239794e-04, -7.460328084042388e-04, -1.014253258325649e-44, -7.460328084042388e-04, -7.258931920145371e-04, -2.020529747434880e-02, -4.806761713090461e-39, -4.237409758214044e-02, -4.472878742695895e-02, -1.243803956715180e-02, -1.562325709966160e-02, -2.084503443826010e-02, -2.421014991553291e-02, -2.455518101815036e-02, -5.447334338897258e-39, -2.455518101815036e-02, -2.181245818369577e-02, -1.851455786433794e-03, -1.877286131426281e-03, -6.964059465032407e-36, -5.553138627993494e-03, -1.542867456608843e-03, -1.804603107293109e-03, -2.858868075926556e-03, -2.864727625078819e-03, -3.150403199624370e-03, -4.879866901052681e-03, -3.150403199624372e-03, -4.879866901052686e-03, -3.512500727152894e-26, -2.249590286647124e-06, -4.853442969383569e-06, -4.408987452156224e-06, -1.950575150592772e-05, -2.400556173696695e-05, -9.633761899672347e-04, -3.925216959933173e-33, -3.841719031446613e-06, -2.296210524350768e-05, -3.841719031446613e-06, -2.296210524350765e-05, -3.609314626149431e-01, -3.704659666713809e-01, -1.643751454375404e-01, -1.674933443780670e-01, -1.637598343760704e-37, -1.656472127955101e-37, -2.379511971446283e-37, -2.624972201857761e-01, -1.955415760845842e-37, -1.975861330804407e-37, -1.955415760845842e-37, -2.337901032619938e-01, -3.268086488121471e-01, -3.360868090109967e-01, -2.049746801550858e-02, -1.622517705615388e-38, -3.284819169485562e-02, -2.269373102930931e-38, -6.100685372737019e-02, -6.133244317858964e-02, -4.345396989768831e-02, -4.387694774899292e-02, -4.345396989768830e-02, -2.891398379236107e-38, -2.932019538709764e-02, -3.460004968259677e-39, -7.547107542676570e-03, -7.625399366604639e-03, -6.486140860821904e-37, -1.047020689624150e-02, -1.705426734935618e-37, -1.783444405202905e-02, -1.454026556512442e-02, -1.471280948709306e-02, -1.454026556512441e-02, -3.602170327015795e-37, -1.643115060122737e-02, -1.737518355988677e-02, -5.854485913599305e-32, -5.532476599793989e-32, -5.364035023845751e-04, -5.938597150671101e-04, -2.675460757975928e-02, -3.424983144932858e-02, -1.761252375329604e-03, -2.421488908087324e-03, -1.761252375329600e-03, -2.421488908087330e-03, -8.077023391444042e-29, -6.609869796804633e-29, -4.043606119405505e-07, -4.044250492508041e-07, -8.968294168462787e-25, -6.927958990876072e-25, -2.077785449502784e-33, -2.137648747535623e-33, -8.888119964877867e-06, -2.000266562376790e-05, -8.888119964877860e-06, -6.968871545011555e-26]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
