
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_b0kcis_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b0kcis", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.589774276034716e+01, -1.589776384774003e+01, -1.589790636310590e+01, -1.589759152863279e+01, -1.589774956463480e+01, -1.589774956463480e+01, -2.719926463055948e+00, -2.719903552745206e+00, -2.719423559624711e+00, -2.720595682417614e+00, -2.719885352679906e+00, -2.719885352679906e+00, -5.946007800313631e-01, -5.942831963999538e-01, -5.878466138790869e-01, -5.912821361164566e-01, -5.917561524948893e-01, -5.917561524948893e-01, -1.866606660043770e-01, -1.880622579564165e-01, -6.856520033443790e-01, -1.600961100880499e-01, -1.724662378393546e-01, -1.724662378393545e-01, -4.878261806892314e-02, -4.878870434370826e-02, -8.736297076338467e-02, -4.473640308643000e-02, -4.538270671977184e-02, -4.538270671977181e-02, -3.890688860561470e+00, -3.890321843666054e+00, -3.890672460675034e+00, -3.890348586095582e+00, -3.890502327225215e+00, -3.890502327225215e+00, -1.650449888843897e+00, -1.658061947084526e+00, -1.649830554649827e+00, -1.656514514882294e+00, -1.655003377578813e+00, -1.655003377578813e+00, -5.070832940998381e-01, -5.514359419913568e-01, -4.785834491218293e-01, -4.997558610889934e-01, -5.133929549129604e-01, -5.133929549129606e-01, -1.340536076276587e-01, -1.983997938615102e-01, -1.281655361441903e-01, -1.505237700538548e+00, -1.401965071369685e-01, -1.401965071369685e-01, -4.041486732911295e-02, -4.309822472074937e-02, -2.820619143521248e-02, -1.029743395038296e-01, -3.437110140717709e-02, -3.437110140717711e-02, -5.027609687651704e-01, -4.898145740779950e-01, -4.923829343840362e-01, -4.957024688589375e-01, -4.938669200060048e-01, -4.938669200060048e-01, -5.098295510519115e-01, -4.340775968213605e-01, -4.450517624097998e-01, -4.576621694782642e-01, -4.509627419290560e-01, -4.509627419290560e-01, -5.764392897342751e-01, -2.343034802109118e-01, -2.655186399717946e-01, -3.247713063225207e-01, -2.916007565232993e-01, -2.916007565232993e-01, -4.073659781923686e-01, -8.720328890192863e-02, -9.754551638392432e-02, -3.108197991257403e-01, -1.125772578299636e-01, -1.125772578299635e-01, -5.486594763253982e-02, -2.501584719629938e-02, -3.265537852799883e-02, -1.093011916512348e-01, -3.231005298022079e-02, -3.231005298022076e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_b0kcis_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b0kcis", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.915110660797366e+01, -1.915106886256666e+01, -1.915119015379677e+01, -1.915113048042697e+01, -1.915144084041634e+01, -1.915148941891707e+01, -1.915048545278856e+01, -1.915028554978039e+01, -1.915114707029416e+01, -1.915076041456075e+01, -1.915114707029416e+01, -1.915076041456075e+01, -3.253940897823891e+00, -3.254082690598318e+00, -3.253971537425651e+00, -3.254121797325572e+00, -3.254810351837836e+00, -3.255005513786526e+00, -3.253657004828230e+00, -3.253884108449705e+00, -3.253458634149650e+00, -3.254582381589683e+00, -3.253458634149650e+00, -3.254582381589683e+00, -7.112616332641959e-01, -7.141585525291909e-01, -7.096663240855400e-01, -7.132341287374050e-01, -6.826238644674399e-01, -6.778875344690212e-01, -6.842792378373271e-01, -6.856314821340382e-01, -7.077091810948150e-01, -6.617394894388178e-01, -7.077091810948150e-01, -6.617394894388178e-01, -2.001832143508808e-01, -2.003032087745077e-01, -2.040703090712958e-01, -2.042511029909090e-01, -8.155553325358780e-01, -8.359169508046336e-01, -1.499624094373852e-01, -1.495417189618634e-01, -1.687074509900292e-01, -1.563037776384385e-01, -1.687074509900291e-01, -1.563037776384384e-01, -1.356804277256850e-02, -1.397111524043822e-02, -1.384378718099717e-02, -1.430119444893140e-02, -4.633270496350243e-02, -4.711504791192486e-02, -1.062497028588316e-02, -1.058877180346455e-02, -1.260987453482820e-02, -8.695135615634756e-03, -1.260987453482818e-02, -8.695135615634746e-03, -4.861125084359212e+00, -4.860048698956354e+00, -4.863187077451080e+00, -4.862048845855446e+00, -4.861226684251010e+00, -4.860112493693092e+00, -4.863002291614617e+00, -4.861923631962653e+00, -4.862187745423184e+00, -4.861055755495483e+00, -4.862187745423184e+00, -4.861055755495483e+00, -1.791773353753778e+00, -1.791550974291687e+00, -1.805952508115217e+00, -1.805410841142338e+00, -1.774739736645954e+00, -1.778233076650713e+00, -1.786991266913636e+00, -1.790581609262015e+00, -1.811391361924388e+00, -1.802272408567351e+00, -1.811391361924388e+00, -1.802272408567351e+00, -6.465184306275092e-01, -6.455067310991316e-01, -7.280512236045946e-01, -7.284397781221026e-01, -6.010584102497222e-01, -6.093361242913636e-01, -6.517444759374960e-01, -6.578874649132349e-01, -6.639686407650219e-01, -6.516828503486564e-01, -6.639686407650219e-01, -6.516828503486563e-01, -1.024690026548555e-01, -1.026298473814758e-01, -1.918564791403076e-01, -1.921373146133016e-01, -9.520822377766108e-02, -9.627315853828630e-02, -1.960485797531541e+00, -1.959937142916700e+00, -1.212967064961497e-01, -1.209234840029465e-01, -1.212967064961497e-01, -1.209234840029465e-01, -8.925360490639215e-03, -9.256893745787942e-03, -1.018456455054259e-02, -1.036363371046965e-02, -7.123249597731249e-03, -7.198655300674209e-03, -6.804541531742185e-02, -6.815532199960533e-02, -7.914378810622760e-03, -9.088727820975938e-03, -7.914378810622780e-03, -9.088727820975938e-03, -6.820336632677025e-01, -6.831790602028340e-01, -6.651470335527948e-01, -6.663459678251181e-01, -6.705626484262900e-01, -6.717727061888301e-01, -6.754841947922000e-01, -6.766068819431755e-01, -6.729774916760163e-01, -6.741426615858841e-01, -6.729774916760163e-01, -6.741426615858841e-01, -6.730493482079334e-01, -6.737544533104260e-01, -5.280870204275315e-01, -5.291603499428283e-01, -5.624131472387364e-01, -5.636711149090765e-01, -6.007179003447354e-01, -6.016512716657736e-01, -5.810206152813402e-01, -5.818490085260721e-01, -5.810206152813402e-01, -5.818490085260721e-01, -7.580824806610199e-01, -7.589398949325181e-01, -2.405938925669476e-01, -2.409693783692200e-01, -2.911762822282642e-01, -2.920028248591501e-01, -3.972766994466033e-01, -3.981651428922997e-01, -3.397222194712611e-01, -3.397562236802740e-01, -3.397222194712611e-01, -3.397562236802740e-01, -4.967854162423215e-01, -4.978725834885289e-01, -4.510676582198364e-02, -4.521813509329265e-02, -5.586775193927176e-02, -5.633160315027860e-02, -3.936270314735794e-01, -3.928133829001609e-01, -8.443176488977649e-02, -8.421602463760249e-02, -8.443176488977645e-02, -8.421602463760242e-02, -1.697757957393486e-02, -1.722674777959672e-02, -4.957142750574550e-03, -4.526388577682145e-03, -7.011972932656204e-03, -7.119609719874538e-03, -7.958156513170701e-02, -7.966683255460240e-02, -7.004092900664848e-03, -8.684813035028943e-03, -7.004092900664859e-03, -8.684813035028927e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_b0kcis_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b0kcis", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.020900453740523e-08, 7.945567057449706e-10, -1.020899354255999e-08, -1.020892283006313e-08, 7.945711344000403e-10, -1.020893217999938e-08, -1.020855506803304e-08, 7.945912677411083e-10, -1.020844297689465e-08, -1.020950555224758e-08, 7.943775410806699e-10, -1.020962440290609e-08, -1.020899633312260e-08, 7.944957743199518e-10, -1.020904798771465e-08, -1.020899633312260e-08, 7.944957743199518e-10, -1.020904798771465e-08, -1.184762268341811e-05, 3.644668872395548e-06, -1.185237772116297e-05, -1.184738255521269e-05, 3.645312485625996e-06, -1.185256610674740e-05, -1.184670603673411e-05, 3.659812202982710e-06, -1.184848350407365e-05, -1.183469473128860e-05, 3.631402974777773e-06, -1.183814017544233e-05, -1.185545819705490e-05, 3.645025789152418e-06, -1.183592870025101e-05, -1.185545819705490e-05, 3.645025789152418e-06, -1.183592870025101e-05, -5.734376593711041e-03, 4.775294471868780e-03, -5.693308958347697e-03, -5.766145986528266e-03, 4.749098067657334e-03, -5.718286041671103e-03, -6.346855546697558e-03, 4.093941780217857e-03, -6.387162672450973e-03, -6.146965807203992e-03, 3.992480642005340e-03, -6.127173583078356e-03, -5.965055425861319e-03, 4.041203515093961e-03, -6.271221937012047e-03, -5.965055425861319e-03, 4.041203515093961e-03, -6.271221937012047e-03, -8.109679996000250e-01, 5.927643723264343e-01, -6.831884183229202e-01, -7.797908397534129e-01, 5.982955140922784e-01, -6.361004313831511e-01, -3.674141736315429e-03, 2.603148349167021e-03, -3.278288998118095e-03, -1.915217144264026e+00, 7.933796085002514e-01, -1.804728978162041e+00, -6.670663954588594e-01, 5.568495234254058e-01, -5.476683214852261e+00, -6.670663954588592e-01, 5.568495234254058e-01, -5.476683214852265e+00, -1.664213842264643e+04, 7.459772545440885e+01, -1.393478994410847e+04, -1.476459850936791e+04, 7.462280226650959e+01, -1.209567917968419e+04, -9.263513337163735e+01, 6.875848695393179e+00, -7.927113808089535e+01, -7.025844323968748e+04, 1.192022260251117e+02, -7.318000996085267e+04, -2.309846249287432e+04, 8.266638514063203e+01, -1.520635321260681e+05, -2.309846249287434e+04, 8.266638514063222e+01, -1.520635321260680e+05, -2.148644031231398e-06, 9.331872489616644e-07, -2.150915961423069e-06, -2.139582642702931e-06, 9.380450561616093e-07, -2.142073155105002e-06, -2.148092560055279e-06, 9.333801922149549e-07, -2.150536091344840e-06, -2.140262158117409e-06, 9.376684202235076e-07, -2.142569673695985e-06, -2.144098317305959e-06, 9.356604812913899e-07, -2.146487428591771e-06, -2.144098317305959e-06, 9.356604812913899e-07, -2.146487428591771e-06, -9.374062327134540e-05, 2.203837087961570e-05, -9.373833308779154e-05, -9.140613080049619e-05, 2.186741513310432e-05, -9.148261950881552e-05, -9.473545828422170e-05, 2.126646704518869e-05, -9.458244569761489e-05, -9.271773908719014e-05, 2.111933076236728e-05, -9.251864395850804e-05, -9.172548538667364e-05, 2.233076763760864e-05, -9.229522761038145e-05, -9.172548538667364e-05, 2.233076763760864e-05, -9.229522761038145e-05, -1.286271515913411e-03, 1.448704202986103e-02, -1.148442842049022e-03, 1.674284460806566e-02, 2.103957329588614e-02, 1.782978537023882e-02, -7.558577211560377e-03, 1.876910872308257e-02, -3.838814003147992e-03, 7.819396599496592e-03, 3.064568328177854e-02, 1.086831548144853e-02, 1.687853919374388e-03, 1.448119895490249e-02, -9.633670176892595e-04, 1.687853919374380e-03, 1.448119895490249e-02, -9.633670176892699e-04, -5.378778651793966e+00, 1.165202074857550e+00, -5.268089567641841e+00, -7.038094272082026e-01, 3.227202879765365e-01, -6.907286144044019e-01, -7.377225334277673e+00, 1.389798748820833e+00, -6.271809058169035e+00, -5.029628585748125e-05, 1.582020988936490e-04, -5.043395569332666e-05, -3.750842715909956e+00, 1.204943167812605e+00, -3.415679817089508e+00, -3.750842715909956e+00, 1.204943167812605e+00, -3.415679817089508e+00, -1.769201540007957e+05, 2.035427369675013e+02, -1.520644517878991e+05, -8.278934028646482e+04, 1.434156657974846e+02, -7.752726081239777e+04, -3.109523995550926e+05, 1.159537508675081e+03, -2.715793309664851e+05, -2.319343649366444e+01, 3.208137959153771e+00, -2.248609547776093e+01, -2.408402208629099e+05, 3.956423314030299e+02, -9.605690225868086e+04, -2.408402208629097e+05, 3.956423314030291e+02, -9.605690225868083e+04, 2.153224648825755e-01, 4.710073011113113e-02, 2.189860102787052e-01, 8.241400970757223e-02, 3.116399620093985e-02, 8.349719788402388e-02, 1.095989904946340e-01, 3.489318337791534e-02, 1.112754574360929e-01, 1.440820399471639e-01, 3.916652957018527e-02, 1.458022128743222e-01, 1.250336885389489e-01, 3.685679086708814e-02, 1.267348083301270e-01, 1.250336885389489e-01, 3.685679086708814e-02, 1.267348083301270e-01, 2.409816992446100e-01, 6.603009938119836e-02, 2.449202850269339e-01, -9.534121639351167e-03, 2.006750468583958e-02, -9.081693071202613e-03, 9.357038716892099e-04, 2.243293930384805e-02, 1.502544933333396e-03, 2.229707549802707e-02, 2.690799543068749e-02, 2.250781387397009e-02, 9.258588755706025e-03, 2.432459089001671e-02, 9.600320890614579e-03, 9.258588755706025e-03, 2.432459089001671e-02, 9.600320890614572e-03, 8.912695587660641e-03, 1.629631497508333e-02, 9.977881011940928e-03, -3.151067897655702e-01, 1.800809386495326e-01, -3.080720599886152e-01, -1.656016643844809e-01, 1.277426481046370e-01, -1.587004011330536e-01, -4.298583935604888e-02, 8.598360797620308e-02, -4.128894039505627e-02, -8.962340908590979e-02, 1.063875899025391e-01, -8.988790944888000e-02, -8.962340908590991e-02, 1.063875899025392e-01, -8.988790944888003e-02, -1.565344444259489e-02, 2.859554220697611e-02, -1.436098557514568e-02, -9.520901659707766e+01, 6.688601891467171e+00, -9.338891284404451e+01, -4.127455966154191e+01, 3.761765113565993e+00, -3.780512358668590e+01, -2.383094292078639e-02, 1.310556721150152e-01, -6.066884875644246e-03, -1.257054635378412e+01, 2.596326935704027e+00, -1.137401361336718e+01, -1.257054635378412e+01, 2.596326935704018e+00, -1.137401361336719e+01, -5.575701313307214e+03, 4.246078742594017e+01, -5.063257480540034e+03, -5.231967819857675e+06, 2.649156182208073e+03, -6.088267118124023e+06, -5.869254363074994e+05, 6.053311161736752e+02, -4.998526193756112e+05, -1.468799783803441e+01, 2.846632234371257e+00, -1.389164332723534e+01, -3.448074557129330e+05, 5.532896447444193e+02, -1.246862080180610e+05, -3.448074557129338e+05, 5.532896447444213e+02, -1.246862080180615e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_b0kcis_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b0kcis", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-4.450383611001430e-05, -4.452569067308386e-05, -4.450602780593157e-05, -4.452727996236266e-05, -4.451274990162634e-05, -4.453699774844573e-05, -4.448822094477952e-05, -4.450565241790586e-05, -4.450524056504347e-05, -4.451794811332001e-05, -4.450524056504347e-05, -4.451794811332001e-05, -2.202042528817329e-04, -2.199580849100690e-04, -2.203253621483096e-04, -2.200223323121057e-04, -2.225215556608665e-04, -2.228693721648343e-04, -2.223859537427437e-04, -2.222304409788738e-04, -2.200198568030030e-04, -2.242316379513919e-04, -2.200198568030030e-04, -2.242316379513919e-04, -1.462474240523538e-03, -1.496264858431343e-03, -1.455643820279797e-03, -1.490248712328132e-03, -1.325706533926092e-03, -1.330340584886383e-03, -1.472098120572617e-03, -1.511569110540841e-03, -1.465571316862904e-03, -1.360015678676709e-03, -1.465571316862904e-03, -1.360015678676709e-03, -1.116838608477011e-02, -1.411339027854834e-02, -1.167063982114428e-02, -1.511821293675115e-02, -3.129446872535913e-04, -3.911555116885207e-04, -3.591890957181458e-03, -4.566538309850350e-03, -1.041943285610377e-02, -1.529308423052962e-03, -1.041943285610375e-02, -1.529308423052960e-03, -2.085973947966699e-05, -2.364413455273176e-05, -2.374458395928214e-05, -2.759390312836471e-05, -3.433152287020339e-04, -4.014339771687677e-04, -5.524354074967036e-06, -5.396911756570543e-06, -1.577326102162390e-05, -8.742041207834188e-06, -1.577326102162390e-05, -8.742041207834185e-06, -1.315990676918220e-03, -1.316985887972307e-03, -1.331106132898197e-03, -1.331605425793539e-03, -1.317154169963307e-03, -1.317722867287143e-03, -1.330111479217271e-03, -1.330991116346216e-03, -1.323452153530143e-03, -1.324258811129617e-03, -1.323452153530143e-03, -1.324258811129617e-03, -6.620301998607462e-04, -6.677856147109868e-04, -7.033735922365239e-04, -7.080930944798024e-04, -6.359151933944617e-04, -6.486097949883075e-04, -6.712272943994294e-04, -6.850445843462787e-04, -7.060506954801556e-04, -6.921474897743370e-04, -7.060506954801556e-04, -6.921474897743370e-04, -1.512169123955658e-02, -1.578154430633113e-02, -1.794798507044717e-02, -1.900189699929129e-02, -8.238666254192954e-03, -1.078706205622633e-02, -7.264876024483244e-03, -9.386902483002004e-03, -1.869897612088376e-02, -1.570716631358104e-02, -1.869897612088378e-02, -1.570716631358104e-02, -1.798631067040489e-03, -1.817962084084608e-03, -5.445526300040621e-03, -5.438110513995376e-03, -1.494441880874588e-03, -1.753675455774600e-03, -9.721780971791305e-04, -9.732754324589215e-04, -3.063100218432744e-03, -4.753460477296497e-03, -3.063100218432745e-03, -4.753460477296501e-03, -2.261034650589668e-06, -2.247654415562927e-06, -4.850125585749291e-06, -4.405800269369223e-06, -1.949301713416914e-05, -2.398711133800338e-05, -9.407463336210229e-04, -1.077311514098917e-03, -3.834804584743159e-06, -2.295879136258733e-05, -3.834804584743159e-06, -2.295879136258731e-05, -2.154335070760435e-01, -2.207255546385645e-01, -1.345963531177680e-01, -1.372560313144151e-01, -1.588521234439010e-01, -1.624388328711295e-01, -1.837049873281165e-01, -1.876088257966153e-01, -1.707310245240691e-01, -1.744816163340148e-01, -1.707310245240691e-01, -1.744816163340148e-01, -8.592172396538258e-02, -8.990278509397880e-02, -1.993472666641509e-02, -2.018370955246490e-02, -3.105553322323003e-02, -3.161785659205744e-02, -5.385285134777853e-02, -5.412068929416199e-02, -3.981486723580659e-02, -4.029337379500215e-02, -3.981486723580659e-02, -4.029337379500213e-02, -1.182019175111938e-02, -1.297484619842362e-02, -7.427654044103271e-03, -7.500013733335147e-03, -9.649091710834426e-03, -1.001415125819607e-02, -1.474813118505537e-02, -1.460266448968360e-02, -1.334019466912206e-02, -1.348631123307428e-02, -1.334019466912205e-02, -1.348631123307428e-02, -1.433100782325501e-02, -1.528340695497414e-02, -3.488096807076798e-04, -3.464310288970238e-04, -5.326426976821213e-04, -5.894757480206008e-04, -2.030921251104444e-02, -2.785115704217439e-02, -1.720753857623212e-03, -2.361655648055098e-03, -1.720753857623207e-03, -2.361655648055104e-03, -2.057006292032277e-05, -2.176248488418875e-05, -4.040374867547192e-07, -4.039079876735805e-07, -4.634322208336627e-06, -5.552696393453110e-06, -1.826339512869680e-03, -2.115235009808902e-03, -8.869535544137546e-06, -1.999992787086307e-05, -8.869535544137548e-06, -1.999992787086306e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
