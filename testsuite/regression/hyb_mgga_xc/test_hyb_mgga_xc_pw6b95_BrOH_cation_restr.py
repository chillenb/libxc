
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_pw6b95_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_pw6b95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.543390742268267e+01, -1.543392351284442e+01, -1.543405065972892e+01, -1.543381008950767e+01, -1.543392823651314e+01, -1.543392823651314e+01, -2.617334448638776e+00, -2.617301548572332e+00, -2.616584450950457e+00, -2.618108927810726e+00, -2.617257292825575e+00, -2.617257292825575e+00, -5.545404524755816e-01, -5.543957781501748e-01, -5.521266042129397e-01, -5.551127965865094e-01, -5.540672201091037e-01, -5.540672201091037e-01, -1.718189241941053e-01, -1.728637498711459e-01, -6.535117963473280e-01, -1.460430664628758e-01, -1.556159480710357e-01, -1.556159480710357e-01, -2.842446462748142e-04, -3.395858321228638e-04, -3.021397244133730e-02, -5.394175126496771e-05, -1.185233439704107e-04, -1.185233439704109e-04, -3.739257130745123e+00, -3.738569752573225e+00, -3.739233252987268e+00, -3.738626364552574e+00, -3.738904514035228e+00, -3.738904514035228e+00, -1.603066229330963e+00, -1.610255504837621e+00, -1.603862408799477e+00, -1.610215637990849e+00, -1.606641920336607e+00, -1.606641920336607e+00, -4.596622318739448e-01, -4.777931241955086e-01, -4.324174589649851e-01, -4.349736334517620e-01, -4.639268498028245e-01, -4.639268498028245e-01, -1.138560283477031e-01, -1.836632841528658e-01, -1.064183080988837e-01, -1.383474555324850e+00, -1.255946742250345e-01, -1.255946742250345e-01, -2.882638134742728e-05, -5.461819515656115e-05, -6.047870219763566e-05, -7.091210788991954e-02, -7.215310289090481e-05, -7.215310289090467e-05, -4.315671783157439e-01, -4.350297317200763e-01, -4.339063119362963e-01, -4.329125155783884e-01, -4.334179065593100e-01, -4.334179065593100e-01, -4.196272770749953e-01, -4.028898744982148e-01, -4.087122214074014e-01, -4.135711433151730e-01, -4.110854795787081e-01, -4.110854795787081e-01, -5.023554636574653e-01, -2.181438698646906e-01, -2.463459748781393e-01, -2.943324639108126e-01, -2.681314061483193e-01, -2.681314061483193e-01, -3.741913812685937e-01, -2.662451500998838e-02, -4.985425292977722e-02, -2.774817125739883e-01, -9.163864093952266e-02, -9.163864093952266e-02, -7.073276499103538e-04, -2.485097597850251e-06, -1.524893984297859e-05, -8.648318198135385e-02, -6.431597179036928e-05, -6.431597179036894e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_pw6b95_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_pw6b95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.816881797914876e+01, -1.816888499405686e+01, -1.816917102884713e+01, -1.816817419500502e+01, -1.816869820122963e+01, -1.816869820122963e+01, -3.012094223400748e+00, -3.012112649300702e+00, -3.012574963648732e+00, -3.011933098474095e+00, -3.011999601202923e+00, -3.011999601202923e+00, -6.311733915702229e-01, -6.302072006827623e-01, -6.062702802714144e-01, -6.089186427855943e-01, -6.089119542065076e-01, -6.089119542065076e-01, -1.710099595278191e-01, -1.732577906923060e-01, -7.695331658226923e-01, -1.405429728119630e-01, -1.509341182274726e-01, -1.509341182274726e-01, -1.117495093251434e-03, -1.335347822081326e-03, -8.637958110759469e-02, -2.110814141309285e-04, -4.650549326574805e-04, -4.650549326574823e-04, -4.526107019480444e+00, -4.527883201843566e+00, -4.526185922555735e+00, -4.527753987158742e+00, -4.527008441662556e+00, -4.527008441662556e+00, -1.669571378722931e+00, -1.681530148539788e+00, -1.659000648598933e+00, -1.669477020866498e+00, -1.681384823444008e+00, -1.681384823444008e+00, -5.457257715498942e-01, -5.996825986340444e-01, -5.109003005779491e-01, -5.375333569407555e-01, -5.548539890631097e-01, -5.548539890631097e-01, -1.266273864543389e-01, -1.754798712160860e-01, -1.242107420026122e-01, -1.736917706912188e+00, -1.237682988725023e-01, -1.237682988725023e-01, -1.126119763012482e-04, -2.137756564945131e-04, -2.371448884514817e-04, -1.166836136136887e-01, -2.829127637024706e-04, -2.829127637024704e-04, -5.581826632743113e-01, -5.520835233622102e-01, -5.543486367438453e-01, -5.561451163944104e-01, -5.552617122355863e-01, -5.552617122355863e-01, -5.445656455175866e-01, -4.517205148339014e-01, -4.766899295064446e-01, -5.031865603367750e-01, -4.895979133305039e-01, -4.895979133305039e-01, -6.277287835869421e-01, -2.126731207049179e-01, -2.503758927850137e-01, -3.312166336287734e-01, -2.861512372401369e-01, -2.861512372401369e-01, -4.211048940398863e-01, -7.993655173688165e-02, -1.135311782569504e-01, -3.224696895775497e-01, -1.106435251619920e-01, -1.106435251619920e-01, -2.779664963789313e-03, -9.658146537052356e-06, -5.948254998630936e-05, -1.111498971615173e-01, -2.521343504049308e-04, -2.521343504049307e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_pw6b95_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_pw6b95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.982862804599720e-09, -5.982841961453657e-09, -5.982658639954782e-09, -5.982970793719810e-09, -5.982820109743041e-09, -5.982820109743041e-09, -6.782898850416082e-06, -6.783259615740476e-06, -6.791731273161445e-06, -6.780296730260389e-06, -6.786622697776845e-06, -6.786622697776845e-06, -2.557419544236638e-03, -2.577624478879020e-03, -3.019272473113403e-03, -3.008545331627731e-03, -3.000325564061180e-03, -3.000325564061180e-03, -3.953040066883549e-01, -3.843167454115709e-01, -5.628125507521503e-04, -6.996327505906595e-01, -5.757114790976425e-01, -5.757114790976429e-01, 1.092001322028295e+02, 1.150569930042670e+02, 2.767921386527198e+01, 1.017446538713290e+02, 1.275608201403030e+02, 1.275608201403042e+02, -1.733217338506095e-06, -1.734800248201118e-06, -1.733280394337974e-06, -1.734677590737960e-06, -1.734024268029831e-06, -1.734024268029831e-06, -5.147662789750861e-05, -5.055578172666812e-05, -5.154938001413233e-05, -5.073324533497002e-05, -5.093086037645955e-05, -5.093086037645955e-05, -6.119566710116849e-03, -3.888529773587687e-03, -6.995302598330572e-03, -2.605220653611252e-03, -5.836593755023360e-03, -5.836593755023360e-03, -8.175984096462386e-01, -2.993052814521099e-01, -7.372975419534650e-01, -7.302941842859321e-05, -1.093231830395489e+00, -1.093231830395489e+00, 1.355535142092449e+02, 1.196824986760627e+02, 7.449920671761458e+02, 3.567439230752897e+00, 3.467966775694914e+02, 3.467966775694843e+02, -8.697992336055248e-03, -7.687016113475918e-03, -7.744053586312756e-03, -7.935367721759306e-03, -7.811456926061173e-03, -7.811456926061173e-03, -9.462285155263549e-03, -1.222118798145587e-02, -1.099560587932819e-02, -9.740869774599720e-03, -1.037607305880132e-02, -1.037607305880132e-02, -2.968611951577408e-03, -1.540362581538647e-01, -9.274093566982204e-02, -3.821951108872838e-02, -6.274432987480474e-02, -6.274432987480474e-02, -1.561406580440648e-02, 2.893145124749735e+01, 1.241403512932149e+01, -4.352907620698442e-02, -9.544859126312260e-01, -9.544859126312215e-01, 8.683277480590179e+01, 6.251984553867044e+02, 2.899272640450538e+02, -3.802523974212613e-01, 4.383623010105357e+02, 4.383623010105395e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_pw6b95_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_pw6b95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-1.494083493640077e-05, -1.494109859710626e-05, -1.494170333695230e-05, -1.493779261554617e-05, -1.493992231727887e-05, -1.493992231727887e-05, -2.868647520037823e-04, -2.869177249205400e-04, -2.881332982358088e-04, -2.859295487159406e-04, -2.869162433167205e-04, -2.869162433167205e-04, -2.676608645136660e-03, -2.642660332289719e-03, -1.891333137637186e-03, -1.900315003275739e-03, -1.926338781977791e-03, -1.926338781977791e-03, -2.716023886161796e-03, -2.986498533153252e-03, -2.376403329153212e-03, -1.024119736414841e-03, -1.657639776604019e-03, -1.657639776604019e-03, -3.497524284473264e-07, -4.266496227208313e-07, -2.674396536321785e-05, -6.737433273379958e-08, -1.635935400422463e-07, -1.635935400422466e-07, -2.320712999206338e-04, -2.331542783419845e-04, -2.321152753739458e-04, -2.330713252581057e-04, -2.326226733805665e-04, -2.326226733805665e-04, -2.777353024400275e-04, -2.830771418653014e-04, -2.608339952749608e-04, -2.653171218494986e-04, -2.893697137508426e-04, -2.893697137508426e-04, -6.565207227397232e-03, -1.204540729146498e-02, -6.625059518285387e-03, -1.302548113597376e-02, -7.016269253252074e-03, -7.016269253252074e-03, -3.058148478219038e-04, -1.153211049445868e-03, -2.650779121582195e-04, -1.950619421988990e-03, -6.833499335575607e-04, -6.833499335575607e-04, -4.239741388160302e-08, -7.435017895073144e-08, -2.173839457096919e-07, -1.202538489711725e-04, -1.720818570561244e-07, -1.720818570561240e-07, -1.723498835476308e-02, -1.402498059856047e-02, -1.504670326156374e-02, -1.597647411608354e-02, -1.550155680608210e-02, -1.550155680608210e-02, -1.928938775865913e-02, -4.576134427268909e-03, -6.686558928552118e-03, -1.006523241314600e-02, -8.183048450392263e-03, -8.183048450392263e-03, -1.079850795495643e-02, -1.651095743580416e-03, -2.627180958191420e-03, -6.590370268500900e-03, -4.246965214286706e-03, -4.246965214286707e-03, -5.062119321717047e-03, -2.155092738661006e-05, -5.097680306268641e-05, -1.035472908296965e-02, -2.833630736088418e-04, -2.833630736088421e-04, -7.386202752018204e-07, -8.178092847260210e-09, -3.382182741285303e-08, -2.349930546600570e-04, -1.742149945517657e-07, -1.742149945517659e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
