
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_mpwkcis1k_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_mpwkcis1k", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.248309527221996e+01, -1.248310941095407e+01, -1.248321708474226e+01, -1.248298460550075e+01, -1.248310235652703e+01, -1.248310235652703e+01, -2.112115766851767e+00, -2.112100450710169e+00, -2.111759565715401e+00, -2.112703810545046e+00, -2.112117175052810e+00, -2.112117175052810e+00, -4.475692388077289e-01, -4.474416229118692e-01, -4.452569885631433e-01, -4.477633363977875e-01, -4.475207182461093e-01, -4.475207182461093e-01, -1.420923113805799e-01, -1.430033929276799e-01, -5.235628051086407e-01, -1.182761178134897e-01, -1.423593024823210e-01, -1.423593024823210e-01, -3.072134501535577e-03, -3.471874578258414e-03, -4.861570125201114e-02, -3.701478741888478e-04, -3.431966149066600e-03, -3.431966149066600e-03, -3.033372613559804e+00, -3.033043412207638e+00, -3.033340366824949e+00, -3.033084453414092e+00, -3.033201604265236e+00, -3.033201604265236e+00, -1.281791828363578e+00, -1.287574789507832e+00, -1.282136175368539e+00, -1.286622819081565e+00, -1.285302099529170e+00, -1.285302099529170e+00, -3.758690721607626e-01, -4.026274482647226e-01, -3.604543227194974e-01, -3.712014546661042e-01, -3.869182331590148e-01, -3.869182331590148e-01, -9.843973640341404e-02, -1.530341348509696e-01, -9.647941679792602e-02, -1.142748089821455e+00, -1.059015307860651e-01, -1.059015307860651e-01, -3.440954015275334e-04, -4.942382256364264e-04, -3.628557716135253e-04, -6.807624218966085e-02, -4.581909836733342e-04, -4.581909836733343e-04, -3.771171349301537e-01, -3.702436179529782e-01, -3.715631987785476e-01, -3.732224081665643e-01, -3.723023214835554e-01, -3.723023214835554e-01, -3.729698710631924e-01, -3.320210416561200e-01, -3.390255983771465e-01, -3.462185505118405e-01, -3.424284598847131e-01, -3.424284598847131e-01, -4.214467430283552e-01, -1.810279395155225e-01, -2.037880386992004e-01, -2.427640287436766e-01, -2.213621076073901e-01, -2.213621076073901e-01, -3.051131605956057e-01, -4.336524545266664e-02, -6.186337151382468e-02, -2.273284043760203e-01, -8.270816290418849e-02, -8.270816290418850e-02, -4.138917526705361e-03, -2.039641648216110e-05, -1.017573223093036e-04, -7.898361820947239e-02, -3.505931126322777e-04, -3.505931126322760e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_mpwkcis1k_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_mpwkcis1k", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.499746365571496e+01, -1.499751268888355e+01, -1.499773821349811e+01, -1.499693506113342e+01, -1.499748945863618e+01, -1.499748945863618e+01, -2.500554562157589e+00, -2.500575493682492e+00, -2.501243014554296e+00, -2.500491181556891e+00, -2.500576278091724e+00, -2.500576278091724e+00, -5.167650776368402e-01, -5.159440960325662e-01, -4.944506880895285e-01, -4.980329203204329e-01, -5.164666402937554e-01, -5.164666402937554e-01, -1.524770725153557e-01, -1.548391823494197e-01, -6.230019069598958e-01, -1.142078802609702e-01, -1.532011988982399e-01, -1.532011988982399e-01, -1.088893016606884e-02, -1.221863437458838e-02, -7.986904780988857e-02, -1.366474125998848e-03, -1.208043951491175e-02, -1.208043951491175e-02, -3.762530868601763e+00, -3.764030475333065e+00, -3.762681614694488e+00, -3.763847777478863e+00, -3.763303105793970e+00, -3.763303105793970e+00, -1.372373657261266e+00, -1.382770009473320e+00, -1.366400918658891e+00, -1.374478112957473e+00, -1.387264017060407e+00, -1.387264017060407e+00, -4.673664558712923e-01, -5.261324836752719e-01, -4.463220550079821e-01, -4.802477851437867e-01, -4.854266744785369e-01, -4.854266744785369e-01, -9.391192325519281e-02, -1.503916513007710e-01, -9.179587897040171e-02, -1.479563490896416e+00, -9.987246520185591e-02, -9.987246520185591e-02, -1.271384872502686e-03, -1.823345350883650e-03, -1.340583576678025e-03, -8.004106068509940e-02, -1.689924022960433e-03, -1.689924022960432e-03, -5.047918815751564e-01, -4.946782627065313e-01, -4.981272746261872e-01, -5.008975371252954e-01, -4.995020188526380e-01, -4.995020188526380e-01, -4.927589896284558e-01, -3.954380662906584e-01, -4.196328223351447e-01, -4.445098780419620e-01, -4.316818916708080e-01, -4.316818916708080e-01, -5.489611040787464e-01, -1.853180448164344e-01, -2.202358920186392e-01, -2.878053776929417e-01, -2.511472722351771e-01, -2.511472722351771e-01, -3.622150962779068e-01, -8.157713448996187e-02, -8.325372708797805e-02, -2.790594968662198e-01, -8.169192647800240e-02, -8.169192647800240e-02, -1.445498901525593e-02, -7.518014423925202e-05, -3.764734174116766e-04, -7.821835423360435e-02, -1.294015494325232e-03, -1.294015494325226e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_mpwkcis1k_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_mpwkcis1k", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.032355799758940e-09, -4.032332883857799e-09, -4.032177034014689e-09, -4.032553150827109e-09, -4.032344165484114e-09, -4.032344165484114e-09, -4.576524032289055e-06, -4.576523844697998e-06, -4.575675483003295e-06, -4.571745588575016e-06, -4.576459482110969e-06, -4.576459482110969e-06, -2.158386619392910e-03, -2.167568781196093e-03, -2.379633995094496e-03, -2.305585650900110e-03, -2.161721565458173e-03, -2.161721565458173e-03, -2.040552677851952e-01, -1.926147654542995e-01, -1.154179886249177e-03, -5.802197855427549e-01, -2.006272742079195e-01, -2.006272742079195e-01, 3.081098622765001e+02, 3.000237660133029e+02, 6.609721154242761e+00, 3.021321900568046e+02, 3.120697252381573e+02, 3.120697252381573e+02, -9.013913687450512e-07, -8.990274243055357e-07, -9.011398667361795e-07, -8.993027722491605e-07, -9.002003902671107e-07, -9.002003902671107e-07, -3.588889730426132e-05, -3.507559315285317e-05, -3.602209439827774e-05, -3.538610277064244e-05, -3.515622156151092e-05, -3.515622156151092e-05, -1.246261894871660e-03, 4.609852553852044e-03, -2.162769235767869e-03, 2.348611467580508e-03, -4.358250977252627e-04, -4.358250977252627e-04, -1.085857362365310e+00, -1.934286996133201e-01, -1.201145183957296e+00, -2.266110963234389e-05, -8.895851898091921e-01, -8.895851898091921e-01, 3.233077482980916e+02, 3.099257652909870e+02, 9.230785999583023e+02, -1.440450106059208e+00, 4.619558996132636e+02, 4.619558996132630e+02, 5.973655125267974e-02, 2.322351763694033e-02, 3.098754726945935e-02, 3.992960338236208e-02, 3.502594729991117e-02, 3.502594729991117e-02, 5.589774556839285e-02, -3.457777862247132e-03, -3.415555213231811e-04, 5.053134283397208e-03, 1.828219490870357e-03, 1.828219490870355e-03, 2.474336308351650e-03, -8.983732711739742e-02, -4.869123796355180e-02, -1.523387173972360e-02, -2.865553104224004e-02, -2.865553104224008e-02, -6.016234327464714e-03, 1.132541185888812e+01, 3.766785142364268e-01, -8.690187230597800e-03, -1.923667826193563e+00, -1.923667826193564e+00, 2.177998050501767e+02, 8.360704740986716e+02, 5.620850167096377e+02, -2.322118671253720e+00, 6.985412631049996e+02, 6.985412631049981e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_mpwkcis1k_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_mpwkcis1k", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_mpwkcis1k_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_mpwkcis1k", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-2.225524093233553e-05, -2.225606336584070e-05, -2.225993513366374e-05, -2.224658901891467e-05, -2.225567137342321e-05, -2.225567137342321e-05, -1.103375732091161e-04, -1.103792504492630e-04, -1.116559114576832e-04, -1.114665926149092e-04, -1.103460345943615e-04, -1.103460345943615e-04, -7.283621680240627e-04, -7.256017681805308e-04, -6.558702645251053e-04, -7.312747927454519e-04, -7.274869677580036e-04, -7.274869677580036e-04, -8.451890582413728e-03, -8.864042046265289e-03, -1.952087087446241e-04, -1.814839427557602e-03, -8.559457157853992e-03, -8.559457157853992e-03, -6.520743771053141e-05, -7.098736100182228e-05, -4.173045158383965e-04, -5.331531920572384e-06, -7.270089298099212e-05, -7.270089298099205e-05, -6.579539736358970e-04, -6.651501539209406e-04, -6.587768376844056e-04, -6.643663644394170e-04, -6.615062958221275e-04, -6.615062958221275e-04, -3.305245846997200e-04, -3.502088061932362e-04, -3.246795444210554e-04, -3.401509042580949e-04, -3.517982207702240e-04, -3.517982207702240e-04, -7.104518826578664e-03, -7.638906564943958e-03, -4.910092185736995e-03, -5.075563413635466e-03, -8.930338841720708e-03, -8.930338841720708e-03, -1.175694108567538e-03, -3.465186296566840e-03, -1.328503650732902e-03, -4.822266509447020e-04, -2.163667474420553e-03, -2.163667474420553e-03, -7.566986639277331e-06, -8.175181896509264e-06, -1.802808770837988e-05, -5.259091259979057e-04, -8.356549398612751e-06, -8.356549398612739e-06, -1.040316096211166e-01, -7.153947775580957e-02, -8.336438324649990e-02, -9.365676020884105e-02, -8.842824010448443e-02, -8.842824010448443e-02, -4.085605780887295e-02, -1.105656732477181e-02, -1.687103482894834e-02, -2.706049064487966e-02, -2.088503256970472e-02, -2.088503256970471e-02, -5.072386075832423e-03, -4.714676000696310e-03, -5.889650691753298e-03, -7.557264545373913e-03, -7.471438111674142e-03, -7.471438111674143e-03, -7.427570894310440e-03, -3.366604214812234e-04, -5.191703548342757e-04, -1.073302435092718e-02, -1.349060995780660e-03, -1.349060995780665e-03, -3.492225523165818e-05, -6.797098630260177e-07, -4.815382164844981e-06, -1.458581566934724e-03, -8.482594563273369e-06, -8.482594563273335e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
