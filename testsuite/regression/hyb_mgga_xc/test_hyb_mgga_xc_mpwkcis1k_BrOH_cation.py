
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_mpwkcis1k_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_mpwkcis1k", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.248337721155245e+01, -1.248339345961591e+01, -1.248350511659199e+01, -1.248326251967419e+01, -1.248338403224231e+01, -1.248338403224231e+01, -2.112201505259135e+00, -2.112181774636926e+00, -2.111768882165388e+00, -2.112798384349942e+00, -2.112189215204165e+00, -2.112189215204165e+00, -4.482455251728178e-01, -4.480858237445650e-01, -4.451902282766858e-01, -4.479424636815363e-01, -4.481555556588798e-01, -4.481555556588798e-01, -1.397788614813284e-01, -1.407105646852335e-01, -5.172030598732533e-01, -1.195326950282733e-01, -1.316336590083169e-01, -1.316336590083169e-01, -5.474471819567958e-04, -6.456077922952982e-04, -3.388375893485680e-02, -1.191330385748229e-04, -3.149410494460184e-04, -3.149410494460187e-04, -3.034592272468263e+00, -3.034252880070762e+00, -3.034579337211245e+00, -3.034279748415416e+00, -3.034418670126886e+00, -3.034418670126886e+00, -1.282101498807605e+00, -1.288081920478713e+00, -1.281974134260399e+00, -1.287237191338913e+00, -1.285493220750010e+00, -1.285493220750010e+00, -3.792950609699924e-01, -4.058344041687863e-01, -3.566618047024050e-01, -3.660211426203417e-01, -3.838216560493800e-01, -3.838216560493800e-01, -9.601614265596893e-02, -1.491922408116473e-01, -9.059605940842874e-02, -1.144017580257366e+00, -1.036524713390869e-01, -1.036524713390869e-01, -6.798636692210161e-05, -1.208213154081289e-04, -1.351793375647893e-04, -6.458082839028291e-02, -1.763615858642786e-04, -1.763615858642788e-04, -3.699263653208923e-01, -3.644511910143282e-01, -3.654199335525282e-01, -3.667971929305166e-01, -3.660237218097460e-01, -3.660237218097460e-01, -3.696588571863857e-01, -3.275533077204035e-01, -3.345110146728096e-01, -3.420518785744775e-01, -3.380507951374478e-01, -3.380507951374478e-01, -4.249097956130138e-01, -1.766124266708197e-01, -1.996977857946433e-01, -2.415372896845879e-01, -2.183186744035693e-01, -2.183186744035693e-01, -3.056713348620350e-01, -3.069845074057713e-02, -4.997576979585300e-02, -2.295151818539275e-01, -7.866786386582299e-02, -7.866786386582300e-02, -1.262868103174207e-03, -8.133392487115176e-06, -3.854169490495188e-05, -7.503726043652693e-02, -1.517077611720855e-04, -1.517077611720851e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_mpwkcis1k_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_mpwkcis1k", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.499788705006829e+01, -1.499786165000625e+01, -1.499795204518537e+01, -1.499790932575452e+01, -1.499814751003923e+01, -1.499819044201520e+01, -1.499740767110653e+01, -1.499725434749878e+01, -1.499792134205677e+01, -1.499762228371830e+01, -1.499792134205677e+01, -1.499762228371830e+01, -2.500655053212876e+00, -2.500751569355188e+00, -2.500677804183857e+00, -2.500779256036248e+00, -2.501284721979223e+00, -2.501436624072996e+00, -2.500524280183273e+00, -2.500691325232063e+00, -2.500253037986309e+00, -2.501223000289120e+00, -2.500253037986309e+00, -2.501223000289120e+00, -5.208399609967153e-01, -5.232207721035592e-01, -5.196943091937465e-01, -5.226168569842775e-01, -5.017358605696310e-01, -4.979729439208516e-01, -5.030161808337708e-01, -5.041404575790723e-01, -5.217168285500193e-01, -4.854169467157339e-01, -5.217168285500193e-01, -4.854169467157339e-01, -1.429663441329301e-01, -1.442275273453694e-01, -1.451599569823989e-01, -1.467080996273968e-01, -5.977254845032349e-01, -6.156902207949921e-01, -1.134887146690181e-01, -1.135678848665728e-01, -1.289869677475862e-01, -1.167559378466919e-01, -1.289869677475862e-01, -1.167559378466918e-01, -1.864350277699918e-03, -2.152098600542099e-03, -2.166429157880919e-03, -2.556261297943321e-03, -7.622567739716549e-02, -7.896586841239478e-02, -4.508622957762536e-04, -4.291404348301746e-04, -1.287591244366954e-03, -5.004198331819051e-04, -1.287591244366953e-03, -5.004198331819069e-04, -3.764648137310135e+00, -3.763778514321864e+00, -3.766220997833298e+00, -3.765302042800825e+00, -3.764729059768573e+00, -3.763828415530813e+00, -3.766081804066246e+00, -3.765209511886770e+00, -3.765456914491433e+00, -3.764544877802084e+00, -3.765456914491433e+00, -3.764544877802084e+00, -1.374531206969713e+00, -1.374395215109899e+00, -1.385381430217261e+00, -1.384973586470934e+00, -1.362501819227541e+00, -1.365224245958194e+00, -1.371848475699267e+00, -1.374666526734604e+00, -1.389138231546084e+00, -1.382037776416664e+00, -1.389138231546084e+00, -1.382037776416664e+00, -4.715834915677154e-01, -4.706985278768872e-01, -5.301462410192509e-01, -5.304942990346970e-01, -4.342942048522332e-01, -4.437670828478601e-01, -4.697995139633951e-01, -4.775676172582679e-01, -4.869164151424231e-01, -4.728422622733987e-01, -4.869164151424231e-01, -4.728422622733988e-01, -9.515622740547336e-02, -9.460372519865656e-02, -1.428682557937055e-01, -1.431404447345964e-01, -9.272333845431252e-02, -9.194878717263917e-02, -1.481344193108740e+00, -1.480856966355670e+00, -9.936713057365142e-02, -9.601043422146624e-02, -9.936713057365142e-02, -9.601043422146624e-02, -2.467559761899242e-04, -2.543184723672098e-04, -4.453565033278099e-04, -4.471249029271433e-04, -4.569825416248787e-04, -5.370501954663368e-04, -8.520271737114539e-02, -8.584909189063601e-02, -3.835983284256735e-04, -7.568326684510446e-04, -3.835983284256726e-04, -7.568326684510455e-04, -4.958567150734962e-01, -4.970485039424872e-01, -4.852176499056728e-01, -4.864594590526699e-01, -4.887612690534692e-01, -4.900054997545649e-01, -4.918737034209539e-01, -4.930544231863801e-01, -4.903035256672436e-01, -4.915151463716252e-01, -4.903035256672436e-01, -4.915151463716252e-01, -4.878614175487468e-01, -4.887231791677739e-01, -3.854884520279865e-01, -3.866027980130806e-01, -4.101597105137569e-01, -4.114404646268431e-01, -4.376771023995521e-01, -4.386613648230911e-01, -4.235060270469921e-01, -4.244485026768713e-01, -4.235060270469921e-01, -4.244485026768713e-01, -5.528010978151718e-01, -5.536384109595851e-01, -1.756697881536356e-01, -1.760882338266379e-01, -2.098147138483350e-01, -2.107885830195567e-01, -2.839310942688981e-01, -2.848745208748634e-01, -2.435571364336446e-01, -2.435526975641139e-01, -2.435571364336445e-01, -2.435526975641139e-01, -3.599419412609234e-01, -3.613422245564306e-01, -7.465123953017469e-02, -7.508253000914825e-02, -8.883827571839240e-02, -8.863069105728028e-02, -2.794676777720841e-01, -2.804251340595979e-01, -8.531448365963504e-02, -8.043468519010721e-02, -8.531448365963500e-02, -8.043468519010716e-02, -4.393371145178286e-03, -4.835759612759743e-03, -2.722354274095077e-05, -3.256801722490463e-05, -1.312759643555873e-04, -1.519811464875918e-04, -8.227784220062172e-02, -8.215028988650810e-02, -4.323677222894614e-04, -6.167071073414341e-04, -4.323677222894604e-04, -6.167071073414352e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_mpwkcis1k_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_mpwkcis1k", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-8.262596987942714e-09, 3.972783528724853e-10, -8.262609785910355e-09, -8.262540750780118e-09, 3.972855672000201e-10, -8.262567914074745e-09, -8.262265596835617e-09, 3.972956338705542e-10, -8.262204301054447e-09, -8.262915648788195e-09, 3.971887705403350e-10, -8.263017486689190e-09, -8.262585834648628e-09, 3.972478871599759e-10, -8.262609405662692e-09, -8.262585834648628e-09, 3.972478871599759e-10, -8.262609405662692e-09, -1.006119701513546e-05, 1.822334436197774e-06, -1.006528892986668e-05, -1.006121156494743e-05, 1.822656242812998e-06, -1.006564465469664e-05, -1.006542282894624e-05, 1.829906101491355e-06, -1.006740950840810e-05, -1.004886792434027e-05, 1.815701487388886e-06, -1.005199312862162e-05, -1.006729631954530e-05, 1.822512894576209e-06, -1.005455969788333e-05, -1.006729631954530e-05, 1.822512894576209e-06, -1.005455969788333e-05, -5.400912696028069e-03, 2.387647235934390e-03, -5.389367378217201e-03, -5.415797141521753e-03, 2.374549033828667e-03, -5.402801517890104e-03, -5.697211437552014e-03, 2.046970890108928e-03, -5.703575379271696e-03, -5.519861337844276e-03, 1.996240321002670e-03, -5.515517493664362e-03, -5.521184331460826e-03, 2.020601757546980e-03, -5.486449401556162e-03, -5.521184331460826e-03, 2.020601757546980e-03, -5.486449401556162e-03, -6.892379076788639e-01, 2.963821861632172e-01, -6.049353830623786e-01, -6.728407485843301e-01, 2.991477570461392e-01, -5.766997822274572e-01, -3.307089264275615e-03, 1.301574174583510e-03, -3.026967061458160e-03, -1.342646603059788e+00, 3.966898042501257e-01, -1.276628005925128e+00, -5.773553654685468e-01, 2.784247617127029e-01, -2.867489617584453e+00, -5.773553654685463e-01, 2.784247617127029e-01, -2.867489617584454e+00, 3.730461079756288e+02, 3.729886272720442e+01, 3.644259789286476e+02, 3.865207664127792e+02, 3.731140113325480e+01, 3.783035794392888e+02, 4.194858055373958e+01, 3.437924347696589e+00, 3.489439380960452e+01, 3.971004898022639e+02, 5.960111301255585e+01, 3.890694870787962e+02, 3.843969605357418e+02, 4.133319257031602e+01, 1.016870699364408e+03, 3.843969605357426e+02, 4.133319257031611e+01, 1.016870699364421e+03, -2.031862687316273e-06, 4.665936244808322e-07, -2.033854127650627e-06, -2.028157410708981e-06, 4.690225280808046e-07, -2.030231302714107e-06, -2.031622111616101e-06, 4.666900961074775e-07, -2.033683984141611e-06, -2.028415246085621e-06, 4.688342101117538e-07, -2.030426312943575e-06, -2.030020590324938e-06, 4.678302406456950e-07, -2.032042089467428e-06, -2.030020590324938e-06, 4.678302406456950e-07, -2.032042089467428e-06, -7.711784527019710e-05, 1.101918543980785e-05, -7.712199725715970e-05, -7.536953968187877e-05, 1.093370756655216e-05, -7.543310308767253e-05, -7.755945016853328e-05, 1.063323352259435e-05, -7.751229708413945e-05, -7.605360165899620e-05, 1.055966538118364e-05, -7.596894186385514e-05, -7.580586455681142e-05, 1.116538381880432e-05, -7.611144828707577e-05, -7.580586455681142e-05, 1.116538381880432e-05, -7.611144828707577e-05, -5.928626297970693e-03, 7.243521014930513e-03, -5.919967351841316e-03, 3.516723780362205e-03, 1.051978664794307e-02, 4.049551858155000e-03, -1.122186985058614e-02, 9.384554361541285e-03, -8.523906307225390e-03, -4.199554283674141e-03, 1.532284164088927e-02, -1.651214256718946e-03, -3.829681511577303e-03, 7.240599477451246e-03, -6.152550989247814e-03, -3.829681511577306e-03, 7.240599477451246e-03, -6.152550989247819e-03, -2.316415736713648e+00, 5.826010374287748e-01, -2.338667998551307e+00, -5.312000183955526e-01, 1.613601439882683e-01, -5.228842036253615e-01, -2.646998218701284e+00, 6.948993744104164e-01, -2.537996535445281e+00, -8.463693568195009e-05, 7.910104944682452e-05, -8.482602560261946e-05, -2.145724500293086e+00, 6.024715839063024e-01, -2.217393788085712e+00, -2.145724500293086e+00, 6.024715839063024e-01, -2.217393788085712e+00, 5.910700439810163e+02, 1.017713684837507e+02, 5.181747000931781e+02, 4.789479250513784e+02, 7.170783289874230e+01, 4.454119979574726e+02, 2.732318412029242e+03, 5.797687543375405e+02, 2.955206351594501e+03, -6.686942890980279e-01, 1.604068979576885e+00, -5.303227784808593e-01, 1.356666782246074e+03, 1.978211657015150e+02, 1.249029793934637e+03, 1.356666782246070e+03, 1.978211657015146e+02, 1.249029793934637e+03, 9.922468005688792e-02, 2.355036505556557e-02, 1.011201268471983e-01, 3.432321396457629e-02, 1.558199810046993e-02, 3.495285494813787e-02, 4.770889503920639e-02, 1.744659168895767e-02, 4.862945278625923e-02, 6.459869426249359e-02, 1.958326478509264e-02, 6.553529958320581e-02, 5.528388219683077e-02, 1.842839543354407e-02, 5.621417525276726e-02, 5.528388219683077e-02, 1.842839543354407e-02, 5.621417525276724e-02, 1.106097072328683e-01, 3.301504969059918e-02, 1.127272701386996e-01, -1.365733493810466e-02, 1.003375234291979e-02, -1.332035378861873e-02, -8.001382238629038e-03, 1.121646965192402e-02, -7.613160222016160e-03, 2.922095751853787e-03, 1.345399771534375e-02, 3.126992690296856e-03, -3.713501663218068e-03, 1.216229544500835e-02, -3.436395058865168e-03, -3.713501663218068e-03, 1.216229544500835e-02, -3.436395058865171e-03, 4.823249205604067e-04, 8.148157487541663e-03, 1.018212750694110e-03, -2.585162238057800e-01, 9.004046932476630e-02, -2.537575708366606e-01, -1.486235072800560e-01, 6.387132405231849e-02, -1.439269389292529e-01, -5.535982389706407e-02, 4.299180398810154e-02, -5.391554695791295e-02, -9.235900056369256e-02, 5.319379495126957e-02, -9.275168187486285e-02, -9.235900056369267e-02, 5.319379495126958e-02, -9.275168187486291e-02, -2.011913503110732e-02, 1.429777110348806e-02, -1.924943475737589e-02, 4.366966548827677e+01, 3.344300945733585e+00, 4.280216272148729e+01, 1.261868856251033e+01, 1.880882556782996e+00, 1.022794240800966e+01, -5.671190521063524e-02, 6.552783605750760e-02, -4.580941815638895e-02, -3.639248798406754e+00, 1.298163467852013e+00, -4.462709859294485e+00, -3.639248798406761e+00, 1.298163467852009e+00, -4.462709859294493e+00, 2.696107814753002e+02, 2.123039371297008e+01, 2.717001529296463e+02, 2.668988898790146e+03, 1.324578091104037e+03, 4.090906675129615e+03, 1.224538367566846e+03, 3.026655580868376e+02, 1.273295430232139e+03, -4.002088288721326e+00, 1.423316117185628e+00, -3.947583353255048e+00, 2.657683224933296e+03, 2.766448223722097e+02, 1.353904015037505e+03, 2.657683224933292e+03, 2.766448223722106e+02, 1.353904015037514e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_mpwkcis1k_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_mpwkcis1k", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-2.225191805500715e-05, -2.226284533654193e-05, -2.225301390296579e-05, -2.226363998118133e-05, -2.225637495081317e-05, -2.226849887422286e-05, -2.224411047238976e-05, -2.225282620895293e-05, -2.225262028252174e-05, -2.225897405666001e-05, -2.225262028252174e-05, -2.225897405666001e-05, -1.101021264408664e-04, -1.099790424550345e-04, -1.101626810741548e-04, -1.100111661560528e-04, -1.112607778304332e-04, -1.114346860824171e-04, -1.111929768713719e-04, -1.111152204894369e-04, -1.100099284015015e-04, -1.121158189756959e-04, -1.100099284015015e-04, -1.121158189756959e-04, -7.312371202617689e-04, -7.481324292156716e-04, -7.278219101398984e-04, -7.451243561640662e-04, -6.628532669630460e-04, -6.651702924431914e-04, -7.360490602863083e-04, -7.557845552704207e-04, -7.327856584314521e-04, -6.800078393383547e-04, -7.327856584314521e-04, -6.800078393383547e-04, -5.584193042385055e-03, -7.056695139274169e-03, -5.835319910572141e-03, -7.559106468375575e-03, -1.564723436267956e-04, -1.955777558442603e-04, -1.795945478590729e-03, -2.283269154925175e-03, -5.209716428051883e-03, -7.646542115264811e-04, -5.209716428051876e-03, -7.646542115264801e-04, -1.042986973983349e-05, -1.182206727636588e-05, -1.187229197964107e-05, -1.379695156418235e-05, -1.716576143510170e-04, -2.007169885843838e-04, -2.762177037483518e-06, -2.698455878285271e-06, -7.886630510811950e-06, -4.371020603917094e-06, -7.886630510811952e-06, -4.371020603917092e-06, -6.579953384591098e-04, -6.584929439861533e-04, -6.655530664490985e-04, -6.658027128967696e-04, -6.585770849816536e-04, -6.588614336435714e-04, -6.650557396086355e-04, -6.654955581731080e-04, -6.617260767650715e-04, -6.621294055648084e-04, -6.617260767650715e-04, -6.621294055648084e-04, -3.310150999303731e-04, -3.338928073554934e-04, -3.516867961182620e-04, -3.540465472399012e-04, -3.179575966972309e-04, -3.243048974941537e-04, -3.356136471997147e-04, -3.425222921731394e-04, -3.530253477400778e-04, -3.460737448871685e-04, -3.530253477400778e-04, -3.460737448871685e-04, -7.560845619778289e-03, -7.890772153165563e-03, -8.973992535223584e-03, -9.500948499645645e-03, -4.119333127096477e-03, -5.393531028113165e-03, -3.632438012241622e-03, -4.693451241501002e-03, -9.349488060441882e-03, -7.853583156790522e-03, -9.349488060441889e-03, -7.853583156790521e-03, -8.993155335202447e-04, -9.089810420423039e-04, -2.722763150020310e-03, -2.719055256997688e-03, -7.472209404372939e-04, -8.768377278873001e-04, -4.860890485895652e-04, -4.866377162294608e-04, -1.531550109216372e-03, -2.376730238648248e-03, -1.531550109216373e-03, -2.376730238648251e-03, -1.130517325294834e-06, -1.123827207781464e-06, -2.425062792874645e-06, -2.202900134684611e-06, -9.746508567084568e-06, -1.199355566900169e-05, -4.703731668105114e-04, -5.386557570494587e-04, -1.917402292371580e-06, -1.147939568129366e-05, -1.917402292371580e-06, -1.147939568129365e-05, -1.077167535380217e-01, -1.103627773192822e-01, -6.729817655888398e-02, -6.862801565720754e-02, -7.942606172195052e-02, -8.121941643556474e-02, -9.185249366405823e-02, -9.380441289830767e-02, -8.536551226203457e-02, -8.724080816700741e-02, -8.536551226203457e-02, -8.724080816700738e-02, -4.296086198269129e-02, -4.495139254698940e-02, -9.967363333207545e-03, -1.009185477623245e-02, -1.552776661161501e-02, -1.580892829602872e-02, -2.692642567388926e-02, -2.706034464708099e-02, -1.990743361790330e-02, -2.014668689750108e-02, -1.990743361790329e-02, -2.014668689750107e-02, -5.910095875559689e-03, -6.487423099211809e-03, -3.713827022051636e-03, -3.750006866667573e-03, -4.824545855417213e-03, -5.007075629098037e-03, -7.374065592527686e-03, -7.301332244841800e-03, -6.670097334561030e-03, -6.743155616537138e-03, -6.670097334561027e-03, -6.743155616537141e-03, -7.165503911627504e-03, -7.641703477487070e-03, -1.744048403538399e-04, -1.732155144485119e-04, -2.663213488410607e-04, -2.947378740103004e-04, -1.015460625552222e-02, -1.392557852108719e-02, -8.603769288116058e-04, -1.180827824027549e-03, -8.603769288116037e-04, -1.180827824027552e-03, -1.028503146016138e-05, -1.088124244209437e-05, -2.020187433773596e-07, -2.019539938367903e-07, -2.317161104168313e-06, -2.776348196726555e-06, -9.131697564348401e-04, -1.057617504904451e-03, -4.434767772068773e-06, -9.999963935431535e-06, -4.434767772068774e-06, -9.999963935431531e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
