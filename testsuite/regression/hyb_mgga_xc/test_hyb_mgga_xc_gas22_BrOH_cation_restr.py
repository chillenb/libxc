
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_gas22_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_gas22", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.011958370460174e+01, -2.011969108491760e+01, -2.012020135517626e+01, -2.011860849230528e+01, -2.011943832463952e+01, -2.011943832463952e+01, -2.770918561684465e+00, -2.770985575228726e+00, -2.772930780441116e+00, -2.773595302340303e+00, -2.772725508833106e+00, -2.772725508833106e+00, -4.566624605098658e-01, -4.563379113254033e-01, -4.502712416760402e-01, -4.545513488772064e-01, -4.532255852242238e-01, -4.532255852242238e-01, -7.889418352003623e-02, -8.023822123731154e-02, -5.367837784396496e-01, -7.625478148992343e-02, -7.333998778794948e-02, -7.333998778794945e-02, -3.624894539167457e-02, -3.683508462894940e-02, -7.249539012950436e-02, -2.897466655541933e-02, -3.108174367464680e-02, -3.108174367464682e-02, -4.879681507665309e+00, -4.883129964937686e+00, -4.879891982264235e+00, -4.882933752095413e+00, -4.881401578653621e+00, -4.881401578653621e+00, -1.613347223153639e+00, -1.628948232738760e+00, -1.609116349677337e+00, -1.622950471950821e+00, -1.624123889122762e+00, -1.624123889122762e+00, -3.904160419317190e-01, -4.330574853221789e-01, -3.553060465694999e-01, -3.695703933256873e-01, -3.971093786580406e-01, -3.971093786580406e-01, -7.891948077373712e-02, -9.026620222502291e-02, -7.860080809585437e-02, -1.532010435167043e+00, -6.750184817672759e-02, -6.750184817672764e-02, -2.510301820390479e-02, -2.815765690686638e-02, -2.018294770170113e-02, -7.549266026429467e-02, -2.397351508371664e-02, -2.397351508371659e-02, -3.489833499465444e-01, -3.785979434253022e-01, -3.733232116390029e-01, -3.653168736276197e-01, -3.698192761680462e-01, -3.698192761680462e-01, -3.386824806445400e-01, -3.204201690624402e-01, -3.289670480079341e-01, -3.405317504199962e-01, -3.334239049658728e-01, -3.334239049658728e-01, -4.592150455151033e-01, -1.151962723830625e-01, -1.449294456432415e-01, -2.033438993263754e-01, -1.720345126940233e-01, -1.720345126940233e-01, -2.882160857244779e-01, -7.207778485057921e-02, -7.695425479882151e-02, -1.882705217302102e-01, -6.998386496183674e-02, -6.998386496183692e-02, -4.308556947248648e-02, -1.309763434469137e-02, -1.974112676123659e-02, -6.898989298970383e-02, -2.253486267627411e-02, -2.253486267627416e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_gas22_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_gas22", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.854911788433787e+01, -2.854929856664834e+01, -2.855004554969014e+01, -2.854736288966505e+01, -2.854877650280237e+01, -2.854877650280237e+01, -3.851974170674135e+00, -3.852172915158291e+00, -3.857337995412712e+00, -3.854270471422363e+00, -3.854747495328759e+00, -3.854747495328759e+00, -5.803469587362994e-01, -5.786744592221413e-01, -5.394868436874823e-01, -5.513246819008347e-01, -5.489739313773493e-01, -5.489739313773493e-01, -1.082902544703035e-01, -1.114928974670264e-01, -6.318816581691350e-01, -5.884493839985220e-02, -7.395328336588732e-02, -7.395328336588770e-02, -2.596794276258688e-02, -2.658885591880632e-02, -5.279465502883745e-02, -1.941533875279383e-02, -2.162154629101362e-02, -2.162154629101261e-02, -6.950724129844713e+00, -6.955847307876692e+00, -6.950983211466573e+00, -6.955504897682722e+00, -6.953316322457662e+00, -6.953316322457662e+00, -1.949980808131127e+00, -1.977396128419415e+00, -1.926856660725889e+00, -1.951204062976308e+00, -1.976650051846686e+00, -1.976650051846686e+00, -5.252666452774924e-01, -6.346875384003232e-01, -4.796957438111702e-01, -5.229952591493776e-01, -5.411931008952904e-01, -5.411931008952904e-01, -4.684232500001571e-02, -9.530534230443453e-02, -4.671593970476070e-02, -2.296428056174244e+00, -4.217486945993773e-02, -4.217486945993815e-02, -1.649260105629455e-02, -1.896116327479176e-02, -1.417660848249009e-02, -4.845219418604835e-02, -1.671334485072347e-02, -1.671334485072309e-02, -4.335205688197132e-01, -5.204213283072503e-01, -4.918127267527040e-01, -4.653529470111155e-01, -4.787252440802642e-01, -4.787252440802643e-01, -4.235266218906342e-01, -3.948172227215209e-01, -4.248040934895305e-01, -4.955713790596591e-01, -4.550535304565609e-01, -4.550535304565608e-01, -6.690172558444092e-01, -1.463334753660354e-01, -1.924795284923778e-01, -2.656679182637736e-01, -2.271909187522588e-01, -2.271909187522586e-01, -3.662591740827046e-01, -5.236313384305869e-02, -5.351643730836052e-02, -2.413703701263796e-01, -3.900808645259950e-02, -3.900808645259984e-02, -3.186748709166626e-02, -7.942415107444320e-03, -1.278581301055669e-02, -3.785999792563064e-02, -1.570179893558633e-02, -1.570179893558633e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_gas22_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_gas22", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-6.767867740309397e-09, -6.767804364274571e-09, -6.767476089308308e-09, -6.768419645127166e-09, -6.767931852423639e-09, -6.767931852423639e-09, -8.074575936918739e-06, -8.074690883164562e-06, -8.077107772717343e-06, -8.073040657063855e-06, -8.076830435451601e-06, -8.076830435451601e-06, -2.468070107320330e-03, -2.481821408313107e-03, -2.729357871037293e-03, -2.710600003089288e-03, -2.710979385137625e-03, -2.710979385137625e-03, 2.047003059594063e-01, 1.875114231381669e-01, -1.591399251109467e-03, 4.835123662381773e-01, 4.094906125216116e-01, 4.094906125216130e-01, -2.975623287131404e+03, -2.624052013844875e+03, -1.114452357747969e+01, -1.323945943533532e+04, -7.625101174552306e+03, -7.625101174552319e+03, -1.612030101683073e-06, -1.610416913439919e-06, -1.611956908713747e-06, -1.610532501520366e-06, -1.611204150177161e-06, -1.611204150177161e-06, -6.413341976647897e-05, -6.308088011560782e-05, -6.423912893923763e-05, -6.333599485524567e-05, -6.347919959741421e-05, -6.347919959741421e-05, -3.586608987249384e-03, 1.715977005063261e-03, -4.904283889842072e-03, 1.524799279360866e-03, -2.713398607301493e-03, -2.713398607301493e-03, 6.143309448389721e-01, 1.617091884411336e-01, 6.189829065639952e-01, -7.415274768078866e-05, 8.899003314053043e-01, 8.899003314053029e-01, -2.958834982776038e+04, -1.488199878072902e+04, -5.708085461336008e+04, -4.491735823021640e-01, -2.659791391689657e+04, -2.659791391689646e+04, -1.832836546477193e-02, -2.116351286811139e-03, -7.246974116068331e-03, -1.230090476535772e-02, -9.735485899218565e-03, -9.735485899218565e-03, -1.450117465804507e-02, -1.008444698773633e-02, -5.948542345593428e-03, 2.861979906096506e-03, -2.165475447683578e-03, -2.165475447683581e-03, 6.431680976501265e-04, 3.733237966079996e-02, -7.990968397251918e-03, -2.024149117238164e-02, -2.336079548796343e-02, -2.336079548796346e-02, -1.218475711888396e-02, -1.274411569721490e+01, -3.442172707425298e+00, -1.900835279191197e-02, 1.148680552129493e+00, 1.148680552129515e+00, -1.055454244632232e+03, -9.171249582813494e+05, -9.635862755749500e+04, 1.154791165828931e+00, -3.555259885802002e+04, -3.555259885802025e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_gas22_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_gas22", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_gas22_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_gas22", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.535165583846002e-03, 2.535211989265251e-03, 2.535394138236443e-03, 2.534707748807102e-03, 2.535070760461523e-03, 2.535070760461523e-03, 4.759215670809259e-03, 4.760541073989175e-03, 4.795626181341744e-03, 4.782313126801059e-03, 4.783606926262326e-03, 4.783606926262326e-03, 1.736178968788062e-03, 1.690246114066820e-03, 5.696701633860162e-04, 1.254368492164174e-03, 1.076647548078609e-03, 1.076647548078609e-03, -3.629781709190864e-02, -3.396669458738422e-02, -4.370013554230464e-04, -5.323188754516354e-02, -5.372754528008235e-02, -5.372754528008210e-02, -4.916289046140166e-04, -5.684402103695582e-04, -1.075964966900103e-02, -1.075631066526310e-04, -2.401506312956032e-04, -2.401506312960629e-04, 1.105149516317670e-02, 1.109544624942423e-02, 1.105404995179631e-02, 1.109282263440143e-02, 1.107351925243497e-02, 1.107351925243497e-02, 6.105880564974402e-03, 6.352914732260945e-03, 5.936063933198087e-03, 6.161934076919093e-03, 6.326625912880958e-03, 6.326625912880958e-03, -3.042866961238693e-03, 4.477752096453264e-03, 9.160666372932700e-04, -3.110254464876542e-03, -4.103347891683228e-03, -4.103347891683228e-03, -4.084163302365632e-02, -4.242593091291617e-02, -3.837784258554151e-02, 1.272130754394604e-02, -6.081268154810045e-02, -6.081268154810017e-02, -3.959714141981620e-05, -8.793330802533290e-05, -2.853399600253911e-04, -2.665114185756813e-02, -1.895374148749366e-04, -1.895374148750323e-04, -3.776046236856964e-01, -8.497688845995222e-02, -1.483548771505373e-01, -2.286603522705449e-01, -1.847045233674579e-01, -1.847045233674578e-01, -3.583601816959744e-01, -4.912212694802725e-03, -1.792555455564710e-02, -1.633352894826131e-02, -2.031120444687877e-02, -2.031120444687879e-02, 5.860871733316229e-03, -2.452741356947817e-02, -9.620395897008367e-03, -4.100503521931767e-03, -2.340110504266106e-03, -2.340110504266169e-03, -6.571142279621884e-04, -1.021857899427594e-02, -1.590965077710278e-02, -1.999726430272591e-02, -4.603957961538535e-02, -4.603957961538543e-02, -5.201854785755778e-04, -4.086816899765182e-06, -7.216264344282455e-05, -4.588030663161294e-02, -2.180328490009213e-04, -2.180328490010191e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
