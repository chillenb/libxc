
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_gas22_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_gas22", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.903502000943239e+01, -1.903516049070550e+01, -1.903575136866115e+01, -1.903372332291767e+01, -1.903478826274493e+01, -1.903478826274493e+01, -2.551402511135715e+00, -2.551495101971387e+00, -2.553987099445111e+00, -2.553215718554602e+00, -2.553026570182895e+00, -3.001257163249179e+00, -4.475487781709344e-01, -5.047360571253692e-01, -4.946948271661071e-01, -4.966229221663766e-01, -4.962378350537580e-01, -4.962378350537580e-01, -7.818152028001310e-02, -7.943396967490216e-02, -5.176122544396976e-01, -7.293100787378620e-02, -7.068314169146458e-02, -7.068314169146460e-02, -3.631221409591465e-02, -3.695127288865705e-02, -7.329493459511509e-02, -2.977068251718639e-02, -3.156503625444538e-02, -3.156503625444538e-02, -4.880650667294256e+00, -4.884086843035116e+00, -4.880840925208022e+00, -4.724314881304279e+00, -4.882374584012056e+00, -4.882374584012056e+00, -1.380217283629649e+00, -1.395597347283357e+00, -1.368890204354593e+00, -1.382372783408517e+00, -1.394325410777502e+00, -1.653029183546217e+00, -3.983364445107391e-01, -4.304784056797031e-01, -3.698266600244864e-01, -3.780188714812804e-01, -4.036512320083238e-01, -3.748921092370867e-01, -3.513901173040616e-02, -8.922371758918192e-02, -3.004426855959699e-02, -1.613046635362979e+00, -6.583111694800092e-02, -6.583111694800099e-02, 1.221480365316931e-04, -2.993032498782568e-02, -2.078920810372267e-02, -1.330370471219624e-02, 1.206567396497056e-04, -2.524777936317709e-02, -3.530274894512612e-01, -3.789707537566780e-01, -3.795640081849840e-01, -3.678111954660446e-01, -3.717283013294858e-01, -3.717283013294858e-01, -3.449158693870013e-01, -3.216119054077054e-01, -3.300678396279454e-01, -3.400923531713249e-01, -3.340439981758017e-01, -3.217383966547757e-01, -4.607486184225786e-01, -1.431923970817127e-01, -1.452325873590957e-01, -2.008463962300358e-01, -1.740172289618052e-01, -1.740172289618052e-01, -2.685384056895404e-01, -7.248880162295009e-02, -7.764669815393009e-02, -1.922332614388050e-01, -2.538214012985759e-02, -6.923702355765461e-02, -4.545730807007099e-02, -1.701501173630671e-02, -2.004953084045343e-02, -6.860666416567671e-02, -2.340876523240338e-02, -2.340876523240342e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_gas22_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_gas22", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.990878273978447e+01, -2.990895103906414e+01, -2.990962427699117e+01, -2.990737203495748e+01, -2.990855228506664e+01, -2.990855228506664e+01, -3.975800005615896e+00, -3.975995705207104e+00, -3.981234489527518e+00, -3.979500869104890e+00, -3.979245321084935e+00, -3.677658236767889e+00, -5.797508577076979e-01, -5.796653638640041e-01, -5.542408713181333e-01, -5.634157441160739e-01, -5.614043778093680e-01, -5.614043778093680e-01, -1.093674592634367e-01, -1.128922545789502e-01, -7.478916231177254e-01, -5.604108527073268e-02, -7.373797752994102e-02, -7.373797752994127e-02, -2.599215243327026e-02, -2.663278700239644e-02, -5.239070516694944e-02, -1.974274437835920e-02, -2.181539590882001e-02, -2.181539590882001e-02, -6.949385549594581e+00, -6.954533234813050e+00, -6.949672971568355e+00, -7.199966462345055e+00, -6.951976238384336e+00, -6.951976238384336e+00, -2.052614466878488e+00, -2.083055688756981e+00, -2.030085052094809e+00, -2.056719239914341e+00, -2.080682701892028e+00, -1.967038588614968e+00, -4.982442554409938e-01, -6.119058610001774e-01, -4.536421122210625e-01, -4.723623566789368e-01, -5.123235492529424e-01, -5.552343307688296e-01, -8.024144298112379e-02, -9.567818795101435e-02, -6.977279281751149e-02, -2.153174517786828e+00, -3.980313855478090e-02, -3.980313855478093e-02, 1.264578273340318e-04, -1.969224218000088e-02, -1.442622858129503e-02, -3.247369233564989e-02, 1.117006392812897e-04, -1.723619616202153e-02, -4.347912054930859e-01, -5.281267044617912e-01, -4.950831872690876e-01, -4.714215351079120e-01, -4.860710776120166e-01, -4.860710776120168e-01, -4.288088210706778e-01, -3.927538925620739e-01, -4.193086213749813e-01, -4.880109495479825e-01, -4.472047167534711e-01, -4.953532668340938e-01, -6.284270146288233e-01, -1.865722759495805e-01, -1.957380251860661e-01, -2.150336577581812e-01, -2.303396821047345e-01, -2.303396821047346e-01, -3.352644469275906e-01, -5.219250655108192e-02, -5.246408847553052e-02, -2.329613963270493e-01, -5.991290763587567e-02, -3.621391713215014e-02, -3.273299171640359e-02, -9.636795506076131e-03, -1.291614878653170e-02, -3.618783807078873e-02, -1.606113660459694e-02, -1.606113660459652e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_gas22_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_gas22", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.214849419360671e-02, 2.490895505321576e+21, 2.491706073956803e+21, 2.488748211794274e+21, 2.490308698957106e+21, 2.490308698957106e+21, 2.813725134783599e+20, 2.809905866151383e+20, 2.710029039991171e+20, 2.750358817682927e+20, 2.745854962715718e+20, -7.214780591922277e-06, 6.927172493737268e+20, -2.178094329209789e-03, -2.075834921603736e-03, -2.155024942894288e-03, -2.136129822542241e-03, -2.136129822542241e-03, 1.970883999708127e-01, 1.783268923784039e-01, 1.126050794255200e+21, 4.478404875361767e-01, 3.822091176244911e-01, 3.822091176244896e-01, -2.959068068183931e+03, -2.597339979186899e+03, -1.031459351443639e+01, -1.226308586128095e+04, -7.280488121871601e+03, -7.280488121871601e+03, -1.612650372934137e-06, -1.611030242953888e-06, -1.612564253973152e-06, 2.554039500655880e+06, -1.611827457293538e-06, -1.611827457293538e-06, 4.236363623839797e+05, 4.056302429958028e+20, 5.110070055300107e+20, 4.568179339115746e+20, 4.087854038425500e+20, -6.111924057112159e-05, -5.422128510607388e-03, -8.475204898496512e-04, -7.485316848333074e-03, -6.070581700516148e-03, -4.772100894346521e-03, 3.312151579204828e+19, 7.143264919266930e+19, 1.584951246729983e-01, 5.212559148173423e+19, -7.770822848667475e-05, 8.466788890862502e-01, 8.466788890862473e-01, -1.516142971733634e+18, -1.252981137045726e+04, -5.227982598938096e+04, -2.296561974743212e+18, -1.836228636855589e+18, -2.284412935769621e+04, -2.131161222048105e-02, -1.811440532666028e-03, 9.496010240993406e+20, -1.255826223169501e-02, -9.476638413291131e-03, -9.476638413291126e-03, -1.982675412551730e-02, -1.026447422754919e-02, -6.641784093804307e-03, 8.562983804262764e-04, -3.474374853660406e-03, 1.556325225116651e+20, -2.018525353769148e-03, 4.397256145174232e+20, -8.457999839402803e-03, 1.538378493379769e+20, -2.495221063757167e-02, -2.495221063757154e-02, 5.826976938683784e+19, -1.227056716144664e+01, -3.111807252428730e+00, -3.198787577037277e-02, 4.165650102394295e+19, 1.087628657829790e+00, -8.812115341445727e+02, -4.861870285286664e+05, -9.242601540872616e+04, 1.116896684590062e+00, -3.179000638988093e+04, -3.179000638988121e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_gas22_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_gas22", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.620697969105129e-03, 2.620755466442728e-03, 2.620945063130036e-03, 2.620233153503131e-03, 2.620609574758432e-03, 2.620609574758432e-03, 4.159738037439547e-03, 4.161269673719596e-03, 4.201796721201593e-03, 4.185138137641734e-03, 4.187190499318022e-03, 4.969545381020912e-03, -2.235524117485528e-03, 4.397314757844211e-03, 2.420313224955159e-03, 3.327788154916653e-03, 3.119656141565892e-03, 3.119656141565892e-03, -3.571228425749770e-02, -3.306776488390679e-02, 2.438301237799447e-03, -5.675980289752257e-02, -5.545577234278168e-02, -5.545577234278150e-02, -4.930078467994275e-04, -5.713688647126642e-04, -1.118576571957325e-02, -1.117672020001853e-04, -2.457802401127411e-04, -2.457802401127411e-04, 1.105192445950170e-02, 1.109596583949361e-02, 1.105447555530761e-02, 1.214020284062096e-02, 1.107399859714476e-02, 1.107399859714476e-02, 3.786655739576941e-03, 4.057370303308470e-03, 3.586329024966977e-03, 3.816775095592142e-03, 4.041573034764580e-03, 6.437090791222779e-03, -4.191184863109077e-03, -3.958566085387366e-03, 3.734117074593782e-03, -6.724184050978232e-03, -6.319385247198031e-03, 8.698861075700273e-03, 1.853763081735619e-02, -4.296070429589812e-02, 1.675476578045571e-02, 1.157427794781129e-02, -6.320744222639395e-02, -6.320744222639328e-02, 1.913810389405993e-06, -9.583940853713469e-05, -2.981531827347605e-04, 9.287535903705488e-03, 1.189501694526317e-05, -2.045278632847185e-04, -3.368899787440026e-01, -6.997497203139297e-02, -1.805821713784974e-01, -1.986887942804265e-01, -1.585933540081864e-01, -1.585933540081861e-01, -2.914588463132229e-01, -4.785571761161460e-03, -1.868546001122441e-02, -1.841104496349306e-02, -2.204166821797254e-02, 2.121426398346218e-02, -3.192887149981570e-03, -2.591037694306456e-03, -8.093869871049654e-03, -4.122752042215043e-02, 1.067685767372922e-03, 1.067685767372927e-03, -2.150090011497132e-02, -1.041540166431755e-02, -1.669169329717310e-02, -1.522530416699831e-02, 1.952234056486930e-02, -4.837614535605225e-02, -5.696394469481153e-04, -5.610440602665402e-06, -7.368066467830159e-05, -4.730881631977884e-02, -2.305794705947994e-04, -2.305794705955062e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
