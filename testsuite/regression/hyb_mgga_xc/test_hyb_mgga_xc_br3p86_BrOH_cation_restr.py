
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_br3p86_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_br3p86", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.490635470403456e+01, -1.490638374655163e+01, -1.490656388126764e+01, -1.490613111208650e+01, -1.490635063136497e+01, -1.490635063136497e+01, -2.788952803667089e+00, -2.788919359580081e+00, -2.788196204525175e+00, -2.789896660958109e+00, -2.788968264538064e+00, -2.788968264538064e+00, -6.046384269312353e-01, -6.045869836247328e-01, -6.043042541937798e-01, -6.068243097415824e-01, -6.054560939786473e-01, -6.054560939786473e-01, -1.914365022474855e-01, -1.927397095112496e-01, -6.986871204260361e-01, -1.636435028251769e-01, -1.715751019127771e-01, -1.715751019127800e-01, -5.752991999677986e-02, -5.784489308819242e-02, -1.038661266596260e-01, -5.114985747087417e-02, -5.229253435215937e-02, -5.229253435215934e-02, -6.407067624729501e+00, -5.300761342632918e+00, -3.164254958024516e+00, -7.551712407320639e+00, -3.383461407995614e+00, -4.595161383594558e+00, -1.199836710395668e+00, -2.004775801862641e+00, -1.802543240727932e+00, -1.809025850638610e+00, -1.809319834489864e+00, -1.668816976352902e+00, -9.253620861499194e-01, -7.765708910950758e-01, -8.466383386687844e-01, -5.073562929780994e-01, -5.446956210809869e-01, -5.722009432780119e-01, -5.342930192523532e-02, -3.065530921228343e-01, -4.971049526919227e-02, -1.631172683571446e+00, -1.338260181583601e-01, -1.194732854636855e-01, -9.845736292938027e-02, -2.057789408133023e+00, -3.343475032905196e-03, -3.757277925630211e-02, -5.878846978961271e-02, -3.989374175583302e-03, -2.040547173523163e+01, -4.044199840128388e-01, -4.064235122777188e-01, -3.195770430688763e+00, -4.072758130290113e-01, -6.004727276925666e+01, -4.015400593873698e-01, -4.522869073339166e-01, -7.464617566113837e-01, -3.868194873590678e-01, -5.147059044766401e-01, -9.448091004115776e-01, -1.068801439163772e+00, -1.386562309517387e-01, -1.712653356247788e-01, -2.376580443580309e-01, -3.509822719654958e-01, -3.241265008528882e-01, -4.255389009078634e-01, -3.027833437125450e-02, -1.166215762593851e-01, -3.169899352453571e-01, -4.364619035919848e-02, -1.068587476768385e-01, -1.007129445876567e-02, -1.221816609901848e-03, -2.492983051104444e-03, -4.226067472357187e-02, -3.707264788646674e-03, -3.707264241289353e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_br3p86_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_br3p86", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.178366729274594e+01, -2.178373195958470e+01, -2.178405295749558e+01, -2.178309054993518e+01, -2.178359009656750e+01, -2.178359009656750e+01, -3.607475376951513e+00, -3.607543508042337e+00, -3.609209221646698e+00, -3.606993661781058e+00, -3.607643362125889e+00, -3.607643362125889e+00, -7.447096815132568e-01, -7.435896857458499e-01, -7.171450443605377e-01, -7.219342694619713e-01, -7.210858550522158e-01, -7.210858550522158e-01, -2.176439896837508e-01, -2.209746018339139e-01, -8.629803468676481e-01, -1.639419050897173e-01, -1.846451885912982e-01, -1.846451885912913e-01, -2.882361995159410e-02, -2.934983151461600e-02, -5.227936325607550e-02, -2.336178116130880e-02, -2.535167463444537e-02, -2.535167463444550e-02, -6.420379542334068e+00, -5.821904232423558e+00, -4.255549826226658e+00, -7.107707689080764e+00, -4.865195244548741e+00, -5.529599496164765e+00, -1.610028927894309e+00, -2.132671770243637e+00, -1.977462099002107e+00, -1.990708843183405e+00, -2.010096690694195e+00, -1.923731796244194e+00, -8.926093705152953e-01, -8.224380161058809e-01, -8.231487194630781e-01, -6.679430104080525e-01, -6.925202803193038e-01, -7.001487544784391e-01, -7.270697779215027e-02, -2.919057174165353e-01, -6.401338666597366e-02, -2.127421855678840e+00, -1.211680480092919e-01, -1.029964093285533e-01, -5.998402551345663e-02, -1.211269238613047e+00, -4.363878650213146e-03, -3.390245188276694e-02, -3.484427604354146e-02, -5.229511240672375e-03, -1.300679891743121e+01, -5.405045440957239e-01, -5.404896630099174e-01, -2.345188637961319e+00, -5.404476983185157e-01, -3.678383411641789e+01, -5.253316179138481e-01, -5.643483368648136e-01, -7.480172188776585e-01, -5.592241946226053e-01, -6.263581647940605e-01, -8.763912882339361e-01, -1.011725991930307e+00, -2.198185534325894e-01, -2.648805770898519e-01, -3.485224050797684e-01, -3.950220921768871e-01, -3.770376672275173e-01, -5.263762945197125e-01, -2.582380373939304e-02, -5.897572340325899e-02, -4.028084565965560e-01, -5.497885373968790e-02, -7.031203901664364e-02, -1.302840479280050e-02, -1.616161119355532e-03, -3.285975032898977e-03, -4.921049191651743e-02, -4.858317189939588e-03, -4.858315568710692e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_br3p86_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_br3p86", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.044663527857217e-09, -4.044586261915508e-09, -4.044333484677944e-09, -4.045482332598051e-09, -4.044867456705626e-09, -4.044867456705626e-09, -8.158452269443917e-06, -8.158484694788834e-06, -8.158558479033695e-06, -8.153062681929711e-06, -8.157822844651201e-06, -8.157822844651201e-06, -2.954052231516768e-03, -2.953329010083512e-03, -2.940891048745558e-03, -2.918315464492682e-03, -2.941484543641426e-03, -2.941484543641426e-03, -1.940573789478792e-01, -1.859343008436065e-01, -1.674554161008393e-03, -5.069379589678016e-01, -3.483859358612185e-01, -3.483859358613224e-01, -5.135295511791005e+03, -4.502168389972889e+03, -4.098738991573980e+01, -2.377110144653082e+04, -1.303432747310232e+04, -1.303432747310228e+04, -1.978839082847774e-07, -4.787894470313975e-07, 1.654368993593746e-07, -7.126238605946810e-08, -6.721232177730891e-08, -9.718724439222084e-07, 1.764818288065469e-06, -3.046019401871208e-05, -4.735281612701503e-05, -4.660314083120598e-05, -4.613179638786570e-05, -6.753187693668486e-05, 3.391131289706167e-03, 3.316274122543214e-03, 4.360280292763203e-03, -3.486400185766721e-03, -3.262673829678354e-03, -1.562562828756404e-03, 1.083052459389482e-01, 2.258976969265101e-02, -4.915522246009686e-03, -3.768330250261290e-05, -1.422023389822314e+00, -2.132470360469801e+00, -1.815658501409799e+04, -1.942925960432898e+02, -1.972950552423063e+02, -2.195986012072974e+00, -2.523249051900199e+04, -2.919211009750298e+01, 9.027588676580453e-03, 7.664449032092003e-03, 8.046903871730600e-03, 8.304415749313333e-03, 8.229146570314863e-03, 8.227135769432480e-03, 1.101278526252731e-02, -8.683487155578260e-03, 4.736050735146552e-03, 6.783835731621134e-03, -1.868641854878117e-03, 6.275814928109550e-03, 3.473609992270962e-03, 8.091408798803007e-02, 5.465579919728999e-02, 3.134249081574776e-02, -1.817784151704313e-03, -1.582210403856021e-02, -9.990035291891306e-03, -8.661151423429867e+00, -1.881641109866546e+01, -3.146736031953662e-02, -5.143417173495465e-02, -6.166918117374252e+00, -5.745401072706141e+00, -8.843141974885549e-01, -2.033199576123092e+00, -8.570200744049764e-01, -5.034358324127594e+01, -5.034343508086028e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_br3p86_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_br3p86", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [-1.498428773071681e-04, -1.498411631817970e-04, -1.498375560543393e-04, -1.498630192381524e-04, -1.498491072096945e-04, -1.498491072096945e-04, -1.447886703164287e-03, -1.447941977797510e-03, -1.449203336920776e-03, -1.446839078469880e-03, -1.447932876262667e-03, -1.447932876262667e-03, -5.520782092148373e-03, -5.491794095759445e-03, -4.802739249876967e-03, -4.855404614381578e-03, -4.882446260425078e-03, -4.882446260425078e-03, -9.555758904010720e-03, -9.812512565158124e-03, -4.841464720397768e-03, -7.871261514282571e-03, -8.967578007640278e-03, -8.967578007641600e-03, -4.461522641714818e-03, -4.558805956835280e-03, -5.494888305049611e-03, -3.981777972779555e-03, -4.331092868493776e-03, -4.331092868493762e-03, -2.036619008663116e-04, -3.623685377812208e-04, -2.367424195592442e-07, -1.339159662127740e-04, -1.311223826610532e-04, -6.379067369305537e-04, -5.184223361545296e-08, -9.822781445977590e-04, -1.426497330707325e-03, -1.434421662761611e-03, -1.460217013429290e-03, -2.109318578517429e-03, -1.073304556241561e-03, -2.064340057247320e-03, -1.195543233582979e-03, -8.321325002489935e-03, -6.658678009023568e-03, -5.229193435524448e-03, -1.019440527847773e-05, -2.596705870632716e-03, -1.502603259265257e-07, -2.362952540055783e-03, -9.289928868468337e-03, -1.275587807247863e-02, -1.396949020793243e-03, -3.028363564116537e-05, -4.073707600220483e-16, -2.358412445831696e-06, -3.082989403486939e-03, -6.779137296618251e-13, -6.728885327613899e-06, -2.150720897244487e-12, -7.191878921702434e-15, -1.012640189565964e-04, -2.117001964842851e-11, -1.620998247378385e-06, -2.346709026887642e-14, -7.514657609422363e-03, -1.522434468643162e-03, -8.451711041725564e-04, -5.620282368967434e-03, -8.936502417875723e-04, -9.260272558745989e-04, -2.482859040359909e-07, -1.270259314698822e-07, -1.901425330523350e-05, -4.848871657859710e-03, -6.384269367623396e-03, -7.496973371100469e-03, -1.323791904298189e-06, -5.260287142937220e-03, -1.135248744543507e-02, -4.704230302230025e-07, -9.181328611476233e-03, -8.946256525313664e-11, -1.450332937136078e-11, -8.638043651096287e-13, -5.432828389090590e-04, -1.997414058555568e-11, -5.615525581707833e-12]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_br3p86_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_br3p86", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [5.993715092286717e-04, 5.993646527271879e-04, 5.993502242173566e-04, 5.994520769526098e-04, 5.993964288387781e-04, 5.993964288387781e-04, 5.791546812657150e-03, 5.791767911190041e-03, 5.796813347683090e-03, 5.787356313879521e-03, 5.791731505050668e-03, 5.791731505050668e-03, 2.208312836859349e-02, 2.196717638303778e-02, 1.921095699950787e-02, 1.942161845752631e-02, 1.952978504170031e-02, 1.952978504170031e-02, 3.822303561604288e-02, 3.925005026063250e-02, 1.936585888159107e-02, 3.148504605713028e-02, 3.587031203056111e-02, 3.587031203056640e-02, 1.784609056685927e-02, 1.823522382734112e-02, 2.197955322019845e-02, 1.592711189111822e-02, 1.732437147397510e-02, 1.732437147397505e-02, 8.146476034652462e-04, 1.449474151124883e-03, 9.469696782370168e-07, 5.356638648510961e-04, 5.244895306442116e-04, 2.551626947722214e-03, 2.073689344618456e-07, 3.929112578391036e-03, 5.705989322829300e-03, 5.737686651046443e-03, 5.840868053717159e-03, 8.437274314069714e-03, 4.293218224966246e-03, 8.257360228989281e-03, 4.782172934331914e-03, 3.328530000995971e-02, 2.663471203609427e-02, 2.091677374209779e-02, 4.077762111391092e-05, 1.038682348253087e-02, 6.010413037061028e-07, 9.451810160223133e-03, 3.715971547387335e-02, 5.102351228991450e-02, 5.587796083172972e-03, 1.211345425646615e-04, 1.629482956817190e-15, 9.433649783328515e-06, 1.233195761394776e-02, 2.711654918647300e-12, 2.691554131045560e-05, 8.602883588977949e-12, 2.876751568680974e-14, 4.050560758263858e-04, 8.468007859371405e-11, 6.483992989513541e-06, 9.386836104894580e-14, 3.005863043768943e-02, 6.089737874572647e-03, 3.380684416690225e-03, 2.248112947586973e-02, 3.574600967150289e-03, 3.704109023498396e-03, 9.931436161439635e-07, 5.081037258793605e-07, 7.605701322093398e-05, 1.939548663143884e-02, 2.553707747049358e-02, 2.998789348440188e-02, 5.295167617192756e-06, 2.104114857174888e-02, 4.540994978174029e-02, 1.881692120892456e-06, 3.672531444590493e-02, 3.578502610125465e-10, 5.801331748544313e-11, 3.455217460438515e-12, 2.173131355636236e-03, 7.989656234222274e-11, 2.246210232683133e-11]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
