
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_pbe1kcis_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_pbe1kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.562595911782747e+01, -1.562600232237875e+01, -1.562620773384135e+01, -1.562556465985140e+01, -1.562589972178003e+01, -1.562589972178003e+01, -2.628029029666307e+00, -2.628034524432900e+00, -2.628223908466506e+00, -2.628378062392172e+00, -2.628096985693271e+00, -4.570135795781598e+00, -5.525414719784391e-01, -8.931869241225560e-01, -8.687706598352507e-01, -8.763700370969779e-01, -8.747453910115318e-01, -8.747453910115318e-01, -2.367922541622742e-01, -2.405245847647042e-01, -6.369193793637480e-01, -1.776920527040060e-01, -2.006024481956842e-01, -2.006024481956842e-01, -7.912638707838801e-03, -8.331433775574396e-03, -4.659809533571866e-02, -4.558322274079224e-03, -5.734721387620400e-03, -5.734721387620400e-03, -6.846602432752764e+00, -6.847929633400180e+00, -6.846669136516765e+00, -3.891925480268486e+00, -6.847272185167483e+00, -6.847272185167483e+00, -1.511349791491024e+00, -1.521823026989421e+00, -1.503703069257809e+00, -1.512959480053926e+00, -1.520835902965458e+00, -2.598372017197071e+00, -7.920461943041758e-01, -8.616414954349083e-01, -7.323850017941902e-01, -7.626298277476973e-01, -8.050343899730442e-01, -4.957454736729171e-01, -9.307448445671290e-02, -2.349492652384178e-01, -8.694701740016003e-02, -2.541020958583433e+00, -1.447601152201795e-01, -1.447601152201795e-01, -3.817973273356642e-03, -4.455267926688978e-03, -3.415800000397642e-03, -6.142801102285138e-02, -4.418390547829902e-03, -4.109853220957666e-03, -8.018342687325170e-01, -7.963922067081962e-01, -4.890207601686597e-01, -7.998621938058054e-01, -7.990708310653717e-01, -7.990708310653717e-01, -7.805203918485368e-01, -6.665880989221714e-01, -6.990456840572703e-01, -7.313319229790336e-01, -7.148309761652445e-01, -4.426688268525453e-01, -9.015264315286230e-01, -2.010229885738266e-01, -3.576445559286011e-01, -3.035704673913910e-01, -4.113776023004203e-01, -4.113776023004203e-01, -3.859564285810440e-01, -4.457666343691859e-02, -6.086317055981149e-02, -4.577419721513921e-01, -7.591626979552631e-02, -9.742077649185733e-02, -1.116578602301273e-02, -1.188996934032368e-03, -2.500092056076376e-03, -9.148099401816559e-02, -3.804363341336323e-03, -3.804363341336319e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_pbe1kcis_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_pbe1kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.078988300579101e+01, -2.078994058407912e+01, -2.079021433395606e+01, -2.078935731545177e+01, -2.078980384925049e+01, -2.078980384925049e+01, -3.476614928542045e+00, -3.476622235636471e+00, -3.476874083848185e+00, -3.477079082104366e+00, -3.476705298371532e+00, -6.129769549670753e+00, -7.224444750837935e-01, -1.212870364754635e+00, -1.179638572556651e+00, -1.190068738349505e+00, -1.187836298838304e+00, -1.187836298838304e+00, -3.298896554568269e-01, -3.350395960236732e-01, -8.338731668801234e-01, -2.467122944975545e-01, -2.793874644793745e-01, -2.793874644793745e-01, -1.064943954035807e-02, -1.122058542269482e-02, -6.414231411059314e-02, -6.106520016587488e-03, -7.699533055251050e-03, -7.699533055251050e-03, -9.168383156676629e+00, -9.170116419762406e+00, -9.168469992431314e+00, -5.158137716861680e+00, -9.169257977304271e+00, -9.169257977304271e+00, -1.992675727833838e+00, -2.006579803888374e+00, -1.982524312484280e+00, -1.994812697014166e+00, -2.005269300410636e+00, -3.495794731080450e+00, -1.077512222402982e+00, -1.170105216261948e+00, -9.978591893194353e-01, -1.037953703086399e+00, -1.094787427813504e+00, -6.475171137785140e-01, -1.202232725461585e-01, -3.259723173132758e-01, -1.123082575505384e-01, -3.420243369503039e+00, -2.008678828106427e-01, -2.008678828106427e-01, -5.022766295909802e-03, -5.966222327283246e-03, -4.596878389082249e-03, -7.939626200710108e-02, -5.807827230625237e-03, -5.518207410652997e-03, -1.091025320857251e+00, -1.082934939805108e+00, -6.386503844227923e-01, -1.088048375724973e+00, -1.086867111785349e+00, -1.086867111785349e+00, -1.062280141372345e+00, -9.091836413939105e-01, -9.522268756090218e-01, -9.951134797405420e-01, -9.731536888044081e-01, -5.775650020440481e-01, -1.223847863438621e+00, -2.604580610745033e-01, -4.935382418471293e-01, -3.946712623308498e-01, -5.662161093364290e-01, -5.662161093364290e-01, -5.029101813919554e-01, -6.133265587198485e-02, -8.332622839005660e-02, -6.282352118800949e-01, -9.807224263467741e-02, -1.348966257583818e-01, -1.502427794099555e-02, -1.587391027221479e-03, -3.348714353174251e-03, -1.267799664951858e-01, -5.111672006844869e-03, -5.111672006844863e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_pbe1kcis_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_pbe1kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([3.272550784364015e-09, 3.272527835343473e-09, 3.272407449888725e-09, 3.272750371176861e-09, 3.272573256358414e-09, 3.272573256358414e-09, 6.367400284894144e-06, 6.367608117745635e-06, 6.372640004027598e-06, 6.368135304050784e-06, 6.371444233777383e-06, 4.681349340175566e-07, 6.165405278703634e-03, 4.866916024871113e-04, 4.531595941036419e-04, 4.778897660937454e-04, 4.718219030722758e-04, 4.718219030722758e-04, 1.622323316359004e-01, 1.623534982272706e-01, 2.997461261515600e-03, 1.570439561865229e-01, 1.660854534423339e-01, 1.660854534423338e-01, 1.845659902669444e+01, 1.823884087379682e+01, 1.413958786431935e+00, 2.373568433849465e+01, 2.614962521781278e+01, 2.614962521781278e+01, 3.984991297798343e-07, 4.019271021047554e-07, 3.986978928150560e-07, 1.636530068981488e-06, 4.002090575927803e-07, 4.002090575927803e-07, 7.158739932509298e-05, 6.992311653557099e-05, 7.281742771471143e-05, 7.130706883826986e-05, 7.009649416041851e-05, 5.901694602694683e-06, 4.346938326904438e-03, 6.308517362635811e-03, 4.090804882292691e-03, 5.311844623218958e-03, 4.569033107925783e-03, 1.546032725992675e-02, 1.767680678191123e+01, 8.176657588862594e-02, 2.389959766271446e+01, 1.915787985739409e-05, 2.740628805560099e-01, 2.740628805560099e-01, 9.787857929948241e+06, 2.148227526749895e+01, 2.246528177260770e+02, 1.105062107413268e+02, 5.472423921026558e+06, 7.192888571484036e+01, 5.855624956060045e-02, 2.789324945204553e-02, 5.020983608360684e-02, 4.236304870106082e-02, 3.797862832139404e-02, 3.797862832139404e-02, 5.786754322879097e-02, 7.671754150929088e-03, 9.779644356125930e-03, 1.444574273751639e-02, 1.153741984458378e-02, 3.083511272473396e-02, 4.005074979068755e-03, 6.090745367723799e-01, 3.427653574168241e-02, 1.137222851182047e-01, 2.865032859382364e-02, 2.865032859382365e-02, 4.023618536126679e-02, 1.518943118051028e+00, 7.597912063933376e-01, 3.630815899888216e-02, 4.401783502046005e+01, 5.541707347777264e-01, 6.247076832155546e+00, 9.912164065008419e+01, 1.344083786227747e+02, 6.554281207893060e-01, 1.106171025735000e+02, 1.106171025735003e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_pbe1kcis_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_pbe1kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-5.175124018818662e-17, -1.201081485491919e-54, -1.201226310989535e-54, -1.200613426068002e-54, -1.200940109602941e-54, -1.200940109602941e-54, -7.092832717355496e-48, -7.096399835508950e-48, -7.189938662916562e-48, -7.145662123887845e-48, -7.157634647176004e-48, -1.570681906032675e-04, -1.330665916207460e-41, -1.141151050638042e-03, -9.351654864830958e-04, -1.033665079407575e-03, -1.010039532297921e-03, -1.010039532297921e-03, -6.443054316734108e-03, -6.862676511509530e-03, -1.011243830855818e-42, -2.141296568889132e-03, -3.513962717226630e-03, -3.513962717226628e-03, -1.113747666784839e-05, -1.285358397700124e-05, -1.871215929204720e-04, -2.731210055686527e-06, -5.997267730805711e-06, -5.997267730805711e-06, -6.606502719026901e-04, -6.681062220702199e-04, -6.610781451061062e-04, -3.404849205645712e-23, -6.643701544461154e-04, -6.643701544461154e-04, -2.100752497188891e-20, -1.266524119605201e-45, -1.233434905637224e-45, -1.248898268378662e-45, -1.268900033990554e-45, -3.679661437883065e-04, -1.027198398381618e-02, -2.176307752507794e-02, -6.994509285566977e-03, -1.126065058674721e-02, -1.161276130453996e-02, -6.155794376268553e-40, -2.756508525061479e-35, -2.776703418314603e-03, -4.347252453649545e-35, -1.430896341060702e-03, -1.979413413571794e-03, -1.979413413571795e-03, -3.793601090744999e-27, -2.307757558715848e-06, -1.088377736402031e-05, -4.686082072936305e-34, -6.787365965659410e-27, -6.068692026780468e-06, -1.828367928679078e-01, -8.296590621864157e-02, -2.058752152372705e-38, -1.299368248367590e-01, -1.156717507867593e-01, -1.156717507867593e-01, -1.657076979735148e-01, -1.031291895471192e-02, -1.657467596439351e-02, -3.058504472377275e-02, -2.183293586984918e-02, -3.635669854835193e-39, -1.529913850559431e-02, -2.160689822201884e-37, -5.137442152746525e-03, -2.081979556657958e-38, -7.313039133909023e-03, -7.313039133909021e-03, -2.832346116015480e-39, -1.741057146410630e-04, -2.827004030118171e-04, -1.512087306853742e-02, -1.730523451576089e-34, -1.041049664962979e-03, -1.060381614369193e-05, -2.021954344342878e-07, -2.550248300690063e-06, -9.979239887385860e-04, -7.402818434091084e-06, -7.402818434091081e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
