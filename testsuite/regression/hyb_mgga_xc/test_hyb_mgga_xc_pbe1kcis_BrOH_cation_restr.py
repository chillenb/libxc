
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_pbe1kcis_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_pbe1kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.638885239385275e+01, -1.638887427222673e+01, -1.638902276304178e+01, -1.638869615695528e+01, -1.638886000670164e+01, -1.638886000670164e+01, -2.759304835281720e+00, -2.759278111213718e+00, -2.758719556898422e+00, -2.760125367182670e+00, -2.759299814794817e+00, -2.759299814794817e+00, -5.783765921438233e-01, -5.782284739575331e-01, -5.760607517983820e-01, -5.796984780973359e-01, -5.784430280060108e-01, -5.784430280060108e-01, -1.794224897636125e-01, -1.807132843073920e-01, -6.670957516261886e-01, -1.495922497167534e-01, -1.613312548069815e-01, -1.613312548069815e-01, -7.908204470916128e-03, -8.326467803228647e-03, -4.598912275831780e-02, -4.559098150322188e-03, -5.734554584089506e-03, -5.734554584089506e-03, -3.975105180781509e+00, -3.974701652799991e+00, -3.975091045556873e+00, -3.974734809934314e+00, -3.974898007420142e+00, -3.974898007420142e+00, -1.677732962006763e+00, -1.685478405859527e+00, -1.678023105624672e+00, -1.684849390184930e+00, -1.681878026357195e+00, -1.681878026357195e+00, -4.875091900148321e-01, -5.191356613623537e-01, -4.574795932747584e-01, -4.666870601568859e-01, -4.928951367347425e-01, -4.928951367347425e-01, -1.125138535463994e-01, -1.895766361441752e-01, -1.050659024218839e-01, -1.485032440676272e+00, -1.266214309863752e-01, -1.266214309863752e-01, -3.517161731090550e-03, -4.457981724384004e-03, -3.417634333050605e-03, -7.303764104171748e-02, -4.113321961290590e-03, -4.113321961290590e-03, -4.741491552658464e-01, -4.685947712860901e-01, -4.695454794466257e-01, -4.709351316709776e-01, -4.701511691086007e-01, -4.701511691086007e-01, -4.710351607644468e-01, -4.228048826090286e-01, -4.308400364561089e-01, -4.397144279601369e-01, -4.349410066273142e-01, -4.349410066273142e-01, -5.438219347296470e-01, -2.270992197984956e-01, -2.577533654030166e-01, -3.098659517137383e-01, -2.812855131266458e-01, -2.812855131266458e-01, -3.935905725554322e-01, -4.402119198866934e-02, -5.950754600807386e-02, -2.933280056162224e-01, -9.073970052779246e-02, -9.073970052779248e-02, -1.117370420004409e-02, -1.190512955267927e-03, -2.500314762636917e-03, -8.580340339784709e-02, -3.806691982360846e-03, -3.806691982360844e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_pbe1kcis_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_pbe1kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.973245831938540e+01, -1.973253688824149e+01, -1.973286361384836e+01, -1.973169507394295e+01, -1.973231057163384e+01, -1.973231057163384e+01, -3.253936852638860e+00, -3.253975568146644e+00, -3.254938484013380e+00, -3.253753929897206e+00, -3.254006241727923e+00, -3.254006241727923e+00, -6.616015402549272e-01, -6.604580818068916e-01, -6.336011688169959e-01, -6.384743240544245e-01, -6.378510408653985e-01, -6.378510408653985e-01, -1.879935944498879e-01, -1.896972821295172e-01, -7.709609087148704e-01, -1.622234843787754e-01, -1.708574268357240e-01, -1.708574268357240e-01, -1.063156460962888e-02, -1.120041811681931e-02, -6.168070575116556e-02, -6.109022428609657e-03, -7.698186531904263e-03, -7.698186531904263e-03, -4.939302718159128e+00, -4.941527678730233e+00, -4.939397925886675e+00, -4.941362316444287e+00, -4.940434137065028e+00, -4.940434137065028e+00, -1.775525842460192e+00, -1.789205702471423e+00, -1.762890300854847e+00, -1.774784848228109e+00, -1.789411399542524e+00, -1.789411399542524e+00, -5.996665078724934e-01, -6.780777618701725e-01, -5.568964843608015e-01, -6.035812246530057e-01, -6.116679215184453e-01, -6.116679215184453e-01, -1.335604760378909e-01, -1.991540331733298e-01, -1.265114554726811e-01, -1.926603435406845e+00, -1.423745896536241e-01, -1.423745896536241e-01, -4.711198060642839e-03, -5.975771232319849e-03, -4.603112284618896e-03, -9.348553991085061e-02, -5.530318211607006e-03, -5.530318211607006e-03, -6.351150553339809e-01, -6.218583858897776e-01, -6.262766430596974e-01, -6.301221253269944e-01, -6.281768845714979e-01, -6.281768845714979e-01, -6.234165541691612e-01, -4.887174054625434e-01, -5.219511460635081e-01, -5.590434573604841e-01, -5.398436264662003e-01, -5.398436264662003e-01, -7.078238491271536e-01, -2.341197381544231e-01, -2.692351713387031e-01, -3.561864491489811e-01, -3.060169925772394e-01, -3.060169925772394e-01, -4.549966095907491e-01, -5.912235125773568e-02, -7.786434176919232e-02, -3.508492988985493e-01, -1.107081034534919e-01, -1.107081034534919e-01, -1.504790922349565e-02, -1.592918851462740e-03, -3.349437699172818e-03, -1.060631933053381e-01, -5.119694370101083e-03, -5.119694370101078e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_pbe1kcis_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_pbe1kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.228824696349494e-09, -5.228779915219041e-09, -5.228539742619171e-09, -5.229206673778879e-09, -5.228863063750760e-09, -5.228863063750760e-09, -6.329621527085672e-06, -6.329607514704368e-06, -6.328505671325938e-06, -6.324084298954329e-06, -6.328223107086263e-06, -6.328223107086263e-06, -3.311501028944512e-03, -3.323879222664925e-03, -3.561346828337219e-03, -3.449763383936215e-03, -3.480852135817167e-03, -3.480852135817167e-03, -3.115209427640715e-01, -3.072308999320360e-01, -1.926497010029962e-03, -4.385828467825645e-01, -4.108240802723594e-01, -4.108240802723595e-01, 1.686303935939155e+01, 1.679090483375951e+01, 6.178922629003361e-01, 2.809819623033982e+01, 2.780790966168712e+01, 2.780790966168718e+01, -1.219053289116276e-06, -1.215790085086117e-06, -1.218890577688711e-06, -1.216011122423104e-06, -1.217412685409592e-06, -1.217412685409592e-06, -5.045630358633547e-05, -4.936100581965028e-05, -5.067682422667145e-05, -4.971690235255694e-05, -4.972644419996480e-05, -4.972644419996480e-05, -3.296648001074149e-03, 3.415152471156580e-03, -5.503499463042781e-03, 4.034608986142642e-04, -2.611961025838421e-03, -2.611961025838421e-03, -4.562240309157075e-01, -2.127137987177766e-01, -4.768899612590998e-01, -3.569258127755930e-05, -5.781822543321287e-01, -5.781822543321287e-01, 4.872936591751757e+01, 3.384684735556612e+01, 2.787055925214445e+02, -4.258831092964310e-01, 1.070898924005432e+02, 1.070898924005430e+02, 5.553343922145779e-02, 1.970261976709691e-02, 2.712124829697021e-02, 3.636384090726186e-02, 3.126766639665864e-02, 3.126766639665864e-02, 6.393015214048318e-02, -8.431401181547940e-03, -4.731425228078146e-03, 2.021412519598795e-03, -2.027240795215698e-03, -2.027240795215698e-03, 1.461920974393323e-03, -1.246893517172135e-01, -8.150748438149147e-02, -3.279259837068763e-02, -5.525711805157581e-02, -5.525711805157580e-02, -1.207391703121582e-02, 6.610374082298940e-01, -6.140407059639075e-02, -2.939662965438020e-02, -6.889863177365598e-01, -6.889863177365612e-01, 9.112821978811187e+00, 6.523881881946535e+02, 1.473722267143310e+02, -6.457802413304080e-01, 1.466885722935393e+02, 1.466885722935397e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_pbe1kcis_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_pbe1kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-2.225738067303268e-05, -2.225832597075143e-05, -2.226243568011586e-05, -2.224846767396443e-05, -2.225579685867193e-05, -2.225579685867193e-05, -1.100405766156735e-04, -1.100869070535667e-04, -1.113476776058723e-04, -1.111541020879621e-04, -1.110558413560542e-04, -1.110558413560542e-04, -7.396949977800084e-04, -7.365203588223319e-04, -6.641406533641932e-04, -7.458492986521685e-04, -7.223624493226054e-04, -7.223624493226054e-04, -6.301535105338226e-03, -6.674412403169828e-03, -1.753314167256654e-04, -2.023812388926538e-03, -3.344623405728120e-03, -3.344623405728119e-03, -1.113694779371635e-05, -1.285236885747820e-05, -1.863823599127706e-04, -2.730339627504157e-06, -5.995553449920433e-06, -5.995553449920434e-06, -6.582439468701352e-04, -6.656778103548261e-04, -6.587191632750560e-04, -6.652754828664474e-04, -6.619276008172174e-04, -6.619276008172174e-04, -3.324491121991690e-04, -3.528630780174791e-04, -3.211158806832823e-04, -3.390507836996255e-04, -3.495540398449825e-04, -3.495540398449825e-04, -7.721774271229101e-03, -9.230077577291031e-03, -4.728611452943694e-03, -4.148073374365607e-03, -8.615243571154124e-03, -8.615243571154124e-03, -9.041686634716211e-04, -2.720836276726217e-03, -8.130367074913018e-04, -4.863629281838531e-04, -1.924252653311610e-03, -1.924252653311611e-03, -1.125244932497379e-06, -2.306127532078429e-06, -1.087601758757306e-05, -5.031711377588360e-04, -6.062699065573351e-06, -6.062699065573351e-06, -1.090300081498044e-01, -6.796099322414377e-02, -8.031851946196610e-02, -9.282369173190962e-02, -8.629867963381387e-02, -8.629867963381385e-02, -4.393643582970453e-02, -1.002971556687929e-02, -1.566832691965533e-02, -2.699345661707706e-02, -2.002709249341337e-02, -2.002709249341336e-02, -6.185989915594988e-03, -3.731964525249487e-03, -4.915921866170212e-03, -7.337041906847279e-03, -6.706221814821713e-03, -6.706221814821710e-03, -7.399763020199048e-03, -1.737928386111211e-04, -2.806657804003979e-04, -1.185864214776807e-02, -1.015823335364390e-03, -1.015823335364390e-03, -1.058471613971554e-05, -2.019903156448384e-07, -2.549855629294416e-06, -9.834574397058458e-04, -7.397109987854942e-06, -7.397109987854936e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
