
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_r2scan0_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_r2scan0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.636887671844530e+01, -1.636896396715359e+01, -1.636934904198541e+01, -1.636805377983026e+01, -1.636873283926801e+01, -1.636873283926801e+01, -2.403717911935808e+00, -2.403808912448471e+00, -2.406253469026678e+00, -2.405473981883897e+00, -2.405317058877438e+00, -2.848187904696139e+00, -4.797681579435220e-01, -5.586021113816028e-01, -5.424259609897907e-01, -5.476445844626574e-01, -5.465233665918940e-01, -5.465233665918940e-01, -1.522804284954957e-01, -1.547366019070558e-01, -5.402294248136548e-01, -1.126323087273713e-01, -1.282788063621287e-01, -1.282788063621287e-01, -2.825241147513602e-03, -3.038431620118757e-03, -2.538592475985942e-02, -1.293314577977023e-03, -1.830582664007202e-03, -1.830582664007202e-03, -4.278152664863915e+00, -4.278981226974032e+00, -4.278194311246078e+00, -4.130711393442047e+00, -4.278570831225021e+00, -4.278570831225021e+00, -1.351898299104399e+00, -1.368266221782647e+00, -1.339708083169964e+00, -1.354126936591855e+00, -1.366980592879343e+00, -1.620204584486535e+00, -4.999074436159498e-01, -5.433340750115566e-01, -4.624361259959008e-01, -4.816327084529478e-01, -5.080486823926189e-01, -4.868211578830169e-01, -8.506570377436498e-02, -1.493837032233319e-01, -7.967518828396325e-02, -1.589261231881323e+00, -9.148816293749706e-02, -9.148816293749706e-02, -3.859563653557178e-03, -1.237830771990850e-03, -1.050236702008071e-03, -5.700797282281626e-02, -4.450072938769983e-03, -1.236462636645800e-03, -5.055703205834928e-01, -5.024761160909018e-01, -5.004977133020195e-01, -5.044671728131194e-01, -5.040184481849821e-01, -5.040184481849821e-01, -4.923908916554672e-01, -4.217484685746951e-01, -4.421960424795643e-01, -4.623286453542986e-01, -4.520681867050565e-01, -4.403455047546268e-01, -5.681452767981148e-01, -1.786110633199130e-01, -2.277514450137178e-01, -2.776564855141539e-01, -2.620109104583458e-01, -2.620109104583458e-01, -3.624497559846532e-01, -2.410818250735868e-02, -3.456226129364524e-02, -2.918080760226396e-01, -6.991337556044649e-02, -5.984012041490273e-02, -4.194307230428101e-03, -1.946932839884560e-04, -6.272653776943889e-04, -5.600696656712786e-02, -1.150099682574460e-03, -1.150099682574456e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_r2scan0_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_r2scan0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.404742278068090e+01, -2.404746545275888e+01, -2.404768571259681e+01, -2.404704853398589e+01, -2.404737810949050e+01, -2.404737810949050e+01, -3.721748553424374e+00, -3.721928585945509e+00, -3.726733254035602e+00, -3.725122078939347e+00, -3.724917163567428e+00, -3.560329618618892e+00, -6.622707760178065e-01, -6.704068438828377e-01, -6.391560090367889e-01, -6.511638424081634e-01, -6.485309384485111e-01, -6.485309384485111e-01, -1.851648158056710e-01, -1.893478743268303e-01, -7.218842363518647e-01, -1.075394667930611e-01, -1.418193076310303e-01, -1.418193076310304e-01, 3.171268588023182e-02, 3.432227327757835e-02, 9.549348070026639e-02, 1.085603329906293e-02, 1.736673532038190e-02, 1.736673532038190e-02, -5.591536765543555e+00, -5.593306962472805e+00, -5.591630786600382e+00, -5.794856371851753e+00, -5.592427729720018e+00, -5.592427729720018e+00, -2.058515966714734e+00, -2.087872253789557e+00, -2.036214996791743e+00, -2.062445871361955e+00, -2.085662925565676e+00, -2.010954837511954e+00, -6.464780154808286e-01, -7.095628331013084e-01, -5.926901388237455e-01, -6.233202718005280e-01, -6.583822640325705e-01, -6.862320526435747e-01, -1.088650099027783e-01, -1.634911240841045e-01, -1.019808887829996e-01, -2.046658900252360e+00, -7.711087427369988e-02, -7.711087427370002e-02, -5.047418963287330e-03, 1.039725593212176e-02, 3.339955385197567e-03, -7.307554113044751e-02, -5.813342898539230e-03, 7.438183392639700e-03, -6.656718430028011e-01, -6.602353445322703e-01, -6.659277757408066e-01, -6.637142461100198e-01, -6.629223357821524e-01, -6.629223357821524e-01, -6.480445523461553e-01, -5.437530335319130e-01, -5.745473993010564e-01, -6.043439773917677e-01, -5.892200311363137e-01, -6.042755622473517e-01, -7.399558972089022e-01, -2.320750955814857e-01, -2.800365650045363e-01, -4.079181256510943e-01, -3.304701070873859e-01, -3.304701070873859e-01, -5.353933175084293e-01, 9.814119281976066e-02, 7.505959408595050e-02, -3.767785311668593e-01, -8.951734861332530e-02, -1.437026693819275e-02, 5.905097747841022e-02, -3.399770821395885e-04, 1.397236885678155e-03, -8.620818431572502e-03, 5.630197669417775e-03, 5.630197669419162e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_r2scan0_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_r2scan0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.697150023347638e-09, -4.697204429554454e-09, -4.697387819513137e-09, -4.696586240914082e-09, -4.697014692715323e-09, -4.697014692715323e-09, 6.783922469286935e-06, 6.781261507150071e-06, 6.710071216292200e-06, 6.736557703028399e-06, 6.736498206757488e-06, -5.100307910218135e-06, 8.719118140153772e-03, -2.925866392345714e-03, -3.255301250418651e-03, -3.148131980350719e-03, -3.170645657814402e-03, -3.170645657814402e-03, -4.426051101004583e-01, -4.133907329878364e-01, 5.719988636444571e-03, -1.467387759155242e+00, -8.919839765230944e-01, -8.919839765230930e-01, -1.419568609713714e+04, -1.343713610040126e+04, -1.916441844232674e+02, -2.258805678559281e+04, -2.105722050070646e+04, -2.105722050070646e+04, -1.222110850433896e-06, -1.222422592060801e-06, -1.222135382158045e-06, -1.298233020398014e-06, -1.222262519275802e-06, -1.222262519275802e-06, 8.103047432603132e-05, 7.601669623240202e-05, 8.503841114900496e-05, 8.035317363638649e-05, 7.637667368158795e-05, -4.658258121004667e-05, -4.523500140433326e-03, -3.279438939628866e-03, -6.106671530332659e-03, -5.187172313285315e-03, -4.249216054363908e-03, 2.599927621001731e-03, 1.874891108274072e+01, -4.953213394752574e-01, 2.469250261312724e+01, -5.482717463274938e-05, -3.224428045900557e+00, -3.224428045900551e+00, -7.604647331493348e+06, -2.177271925127057e+04, -5.646523973357124e+04, 9.851551494092728e+01, -3.339422347604932e+06, -3.737168141635257e+04, -4.195835445978413e-03, -4.394773630940603e-03, -3.262812685502605e-03, -4.295697205074550e-03, -4.326198011041014e-03, -4.326198011041014e-03, -4.630697207423493e-03, -8.542052872518203e-03, -7.031554576618495e-03, -5.841069208475532e-03, -6.412684612346864e-03, 1.834157434389323e-03, -2.796070689295796e-03, 7.155677730776224e-01, -9.381007408735609e-02, 5.994382162341493e-02, -5.322343025387374e-02, -5.322343025387376e-02, 1.706994149985737e-02, -2.213679944966838e+02, -7.754727332647839e+01, -3.306889741359317e-02, 4.243536979485912e+01, -1.463778277759796e+01, -6.330385822164089e+03, 8.444531602854840e+02, -4.538157721585699e+04, -1.849699106218269e+01, -4.473209973721270e+04, -4.473209973722097e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_r2scan0_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_r2scan0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.318298867532152e-03, 1.318288814024034e-03, 1.318245665349658e-03, 1.318394740395184e-03, 1.318316434683223e-03, 1.318316434683223e-03, 4.114763755536747e-03, 4.116260766798407e-03, 4.155761755060864e-03, 4.139406585949761e-03, 4.141579245139529e-03, 3.712473897580648e-03, 3.746547223033283e-03, 1.581852633794655e-02, 1.614820851632233e-02, 1.605223383371374e-02, 1.607227840529064e-02, 1.607227840529064e-02, 4.519173897196571e-02, 4.444034556944954e-02, 8.455283975795077e-04, 5.970821726537043e-02, 5.332643135583930e-02, 5.332643135583921e-02, 5.008415389171852e-02, 5.526848283372596e-02, 1.335995191894322e-01, 1.543575318937250e-02, 2.847813127707632e-02, 2.847813127707632e-02, 2.880998871167494e-03, 2.882637942631017e-03, 2.881096579747705e-03, 4.391203994053924e-03, 2.881815941138753e-03, 2.881815941138753e-03, 5.412070078467603e-03, 5.710592801126883e-03, 5.179475072183166e-03, 5.444524005339072e-03, 5.694957145743171e-03, 6.230839731942067e-03, 1.730706034908362e-02, 1.591775122464224e-02, 1.852973422288700e-02, 1.776033760028129e-02, 1.704425937791341e-02, 2.306036747787074e-02, -3.777271659382821e-05, 4.749041039033375e-02, -3.762081821548791e-05, 6.749214145646633e-03, 7.005347771779522e-02, 7.005347771779505e-02, -1.401249977105247e-08, 1.390186783897541e-02, 1.644183790286483e-02, -2.659828008591338e-05, -8.413949413440572e-08, 1.875482933537224e-02, 1.571749332655663e-02, 1.641946945267639e-02, 1.633219347917329e-02, 1.607403570866752e-02, 1.618242477645533e-02, 1.618242477645533e-02, 1.608376228655495e-02, 1.969784974021768e-02, 1.867431311999600e-02, 1.759410030317816e-02, 1.815247369232042e-02, 2.198152337542224e-02, 1.556343960980275e-02, 1.456083992911266e-03, 3.300265173704892e-02, 2.900911744814730e-02, 2.900187996447016e-02, 2.900187996447019e-02, 2.994550785288811e-02, 1.351813832735391e-01, 1.209582911442147e-01, 2.554785354436766e-02, -5.315974417141904e-05, 9.404202546114881e-02, 6.260240774293069e-02, 4.243608637140121e-05, 5.283992724798493e-03, 9.812185705705305e-02, 1.786053733714636e-02, 1.786053733714943e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
