
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_r2scan0_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_r2scan0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.741291868270852e+01, -1.741297049866701e+01, -1.741323898202644e+01, -1.741246885892600e+01, -1.741286694255157e+01, -1.741286694255157e+01, -2.596476948564143e+00, -2.596568688578877e+00, -2.599183062351601e+00, -2.599838041177197e+00, -2.598880553257076e+00, -2.598880553257076e+00, -4.863228027557702e-01, -4.856506388072804e-01, -4.701932956115110e-01, -4.783587141751182e-01, -4.762139325160282e-01, -4.762139325160282e-01, -1.503275309516059e-01, -1.524188973798813e-01, -5.354187211976033e-01, -1.007741655692743e-01, -1.193256658228480e-01, -1.193256658228480e-01, -2.612788596082384e-03, -2.804858256167786e-03, -2.249127661100979e-02, -1.236144928138388e-03, -1.724111013244048e-03, -1.724111013244048e-03, -4.277416425093274e+00, -4.278253417563652e+00, -4.277473412753187e+00, -4.278211587284841e+00, -4.277831190889849e+00, -4.277831190889849e+00, -1.582196517553274e+00, -1.599228107081828e+00, -1.576854455231636e+00, -1.592064908376590e+00, -1.594324461385374e+00, -1.594324461385374e+00, -4.904864048751622e-01, -5.338111368675346e-01, -4.440389424597253e-01, -4.623309959035655e-01, -4.994913230683783e-01, -4.994913230683783e-01, -6.644054549969301e-02, -1.448188748261658e-01, -6.105612430671790e-02, -1.490972801418477e+00, -8.312664905411798e-02, -8.312664905411800e-02, -8.930094774392950e-04, -1.218962178485552e-03, -1.022567729244130e-03, -3.973361801059608e-02, -1.217290621098601e-03, -1.217290621098601e-03, -5.047290859600388e-01, -5.016085496849568e-01, -5.027039458334920e-01, -5.036086020524093e-01, -5.031550592367069e-01, -5.031550592367069e-01, -4.908192820586063e-01, -4.207064383327009e-01, -4.409121079135820e-01, -4.608507724636381e-01, -4.506030105608374e-01, -4.506030105608374e-01, -5.543985502988591e-01, -1.870964800981191e-01, -2.232640822580353e-01, -2.913234842764874e-01, -2.562927915555030e-01, -2.562927915555031e-01, -3.823560466654886e-01, -2.128946756225497e-02, -3.049902449427294e-02, -2.856934938656132e-01, -5.296240245421570e-02, -5.296240245421570e-02, -4.001851597615231e-03, -2.319538010180430e-04, -6.045351946021768e-04, -4.986182998174079e-02, -1.122283212983626e-03, -1.122283212983629e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_r2scan0_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_r2scan0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.265176641207415e+01, -2.265184731505508e+01, -2.265221284169790e+01, -2.265100987475839e+01, -2.265163936437013e+01, -2.265163936437013e+01, -3.675058684363179e+00, -3.675131597814596e+00, -3.676987827468088e+00, -3.675508057565037e+00, -3.675739400283121e+00, -3.675739400283121e+00, -6.948293916011039e-01, -6.936294197030056e-01, -6.665022824806487e-01, -6.778788296390725e-01, -6.752267090711723e-01, -6.752267090711723e-01, -1.782529548276251e-01, -1.827521264385639e-01, -7.295332910156349e-01, -1.372682653533938e-01, -1.427863219731420e-01, -1.427863219731419e-01, -3.301781800878777e-03, -4.711287962062849e-03, -3.672775373316425e-02, -2.305719293736442e-03, -3.180421836990593e-03, -3.180421836990594e-03, -5.591843355747584e+00, -5.593612270188242e+00, -5.591931081959453e+00, -5.593492396660786e+00, -5.592736883912330e+00, -5.592736883912330e+00, -1.961449017799404e+00, -1.987004632225024e+00, -1.945843681053927e+00, -1.969740478908077e+00, -1.983285014904233e+00, -1.983285014904233e+00, -6.547307817785042e-01, -7.209271555278303e-01, -6.114667078918476e-01, -6.456520304151860e-01, -6.660829397115022e-01, -6.660829397115022e-01, -9.702707844520775e-02, -1.420629901892020e-01, -9.098488713708869e-02, -2.154175901085226e+00, -9.215813720050237e-02, -9.215813720050277e-02, -1.677189301913447e-03, -2.273745054989634e-03, -1.900676626118555e-03, -6.216543506749003e-02, -2.260163747626520e-03, -2.260163747626520e-03, -6.667508578436225e-01, -6.611628304926901e-01, -6.631656669763152e-01, -6.647953988087233e-01, -6.639840588739359e-01, -6.639840588739359e-01, -6.500460047635609e-01, -5.436081747313198e-01, -5.750932327593472e-01, -6.054310953457098e-01, -5.901783187647235e-01, -5.901783187647235e-01, -7.562096978081148e-01, -2.128628621957724e-01, -2.723938223854441e-01, -3.910097287107220e-01, -3.291652064527923e-01, -3.291652064527923e-01, -5.002156730678431e-01, -3.295181129432767e-02, -4.880249679263506e-02, -3.834604618224708e-01, -7.727408541834385e-02, -7.727408541834388e-02, -7.210250458292041e-03, -4.443452179845151e-04, -1.141666869807189e-03, -6.282454236586527e-02, -2.085911719830631e-03, -2.085911719830634e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_r2scan0_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_r2scan0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.637075106509104e-09, -4.637029567607653e-09, -4.636655009923378e-09, -4.637327960474272e-09, -4.636999922593905e-09, -4.636999922593905e-09, -1.000056635245552e-05, -1.000160155904639e-05, -1.002824404242673e-05, -1.001935014820695e-05, -1.002215090780490e-05, -1.002215090780490e-05, -1.883318824825982e-03, -1.879597919665579e-03, -1.834841026608131e-03, -2.124835683855593e-03, -2.033543055732304e-03, -2.033543055732304e-03, -6.481557198697977e-01, -6.249166316573121e-01, -1.393059271220052e-04, -4.739310414838588e-01, -1.116483644683671e+00, -1.116483644683678e+00, -3.819298049436820e+02, 4.771538744618772e+01, 3.751221785021609e+00, 4.957979155713828e+02, 3.765185449892942e+02, 3.765185449892950e+02, -1.227587411881757e-06, -1.227847521328873e-06, -1.227498134980154e-06, -1.227731755520880e-06, -1.227770188710218e-06, -1.227770188710218e-06, -6.781696073082634e-05, -6.290424493140657e-05, -6.671217983795733e-05, -6.207465006689658e-05, -6.554174920047905e-05, -6.554174920047905e-05, -6.406385013414496e-03, -4.160058718792468e-03, -9.355621746275248e-03, -7.473575744473269e-03, -5.864768217091277e-03, -5.864768217091277e-03, -1.094654230929134e-01, -8.419038752530463e-01, 9.245669369453213e-02, -9.903249777885988e-05, -2.439986276710548e+00, -2.439986276710613e+00, 9.154170572289804e+02, 5.689211373009646e+02, 2.638099554311256e+03, 1.220450989808712e+00, 1.223080226814614e+03, 1.223080226814613e+03, -4.056065796386830e-03, -4.549959551799954e-03, -4.415847547314136e-03, -4.271159814602885e-03, -4.347229292740213e-03, -4.347229292740213e-03, -4.132259917882947e-03, -9.261624891062640e-03, -7.683207830849142e-03, -6.419984441961729e-03, -7.039608722861700e-03, -7.039608722861700e-03, -3.823263752795788e-03, -2.769041859087803e-01, -1.470499165766274e-01, -4.753847869539563e-02, -8.307304602991354e-02, -8.307304602991364e-02, -1.680477366693248e-02, 3.443699772444679e-01, 1.912548306143693e+00, -4.572985161021367e-02, -3.550611532292536e-01, -3.550611532292454e-01, 9.318803026986245e+01, 1.352832179184357e+04, 2.550134893146602e+03, -3.514440379288690e+00, 1.603602572259475e+03, 1.603602572259481e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_r2scan0_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_r2scan0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([7.476110730394532e-04, 7.476095626524890e-04, 7.475816680674260e-04, 7.476034847023982e-04, 7.475950805312297e-04, 7.475950805312297e-04, 6.415336588825683e-03, 6.416185919500859e-03, 6.439055123934364e-03, 6.438256284490768e-03, 6.435244232704543e-03, 6.435244232704543e-03, 1.057808744684057e-02, 1.052680751858712e-02, 9.630566700089284e-03, 1.125197835188019e-02, 1.075001614407152e-02, 1.075001614407152e-02, 6.309367653716112e-02, 6.390481355691091e-02, 1.498549225929183e-03, 2.576478598612447e-02, 6.727063048142837e-02, 6.727063048142798e-02, 2.004821840698662e-03, 5.562190079707371e-04, 7.335325466856851e-04, 1.210220782643104e-06, 7.895871518592101e-06, 7.895871518591728e-06, 2.891118706081950e-03, 2.892653190118124e-03, 2.891005697116340e-03, 2.892367877762040e-03, 2.891988526495470e-03, 2.891988526495470e-03, 8.579110798443767e-03, 8.167492437150703e-03, 8.335836551720596e-03, 7.942320868557364e-03, 8.461353771079098e-03, 8.461353771079098e-03, 2.423435412735015e-02, 2.138490577422833e-02, 2.911258378132832e-02, 2.701837925456566e-02, 2.325507629876324e-02, 2.325507629876324e-02, 7.686901283677279e-03, 7.705407738911159e-02, 5.369373705685536e-03, 1.206345306560467e-02, 5.590056218454247e-02, 5.590056218454172e-02, 2.372562245287788e-08, 1.981913597002861e-07, 1.296114981925581e-07, 1.848562183403401e-03, 2.606118362137054e-07, 2.606118362137079e-07, 1.585770799550337e-02, 1.706100063081573e-02, 1.676691496684477e-02, 1.641855394233320e-02, 1.660548755975760e-02, 1.660548755975760e-02, 1.614140823279676e-02, 2.114637624130774e-02, 2.022446829268639e-02, 1.912562073496576e-02, 1.977435909856226e-02, 1.977435909856227e-02, 2.228282571707417e-02, 5.285223372489056e-02, 4.938923423219348e-02, 3.976461080100816e-02, 4.363384138406264e-02, 4.363384138406269e-02, 2.945406808772699e-02, 2.790278429625989e-03, 1.078252575509400e-03, 3.646582973137896e-02, 9.208966202880427e-03, 9.208966202880387e-03, 1.950800314811747e-06, -3.285597752887496e-09, -2.129654853521255e-07, 2.413531665480714e-02, 3.580744942469127e-07, 3.580744942466823e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
