
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_r2scan50_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_r2scan50", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.161771706835243e+01, -1.161775161779764e+01, -1.161793047890365e+01, -1.161741697850677e+01, -1.161768243422098e+01, -1.161768243422098e+01, -1.747075556907335e+00, -1.747135458694385e+00, -1.748837647788458e+00, -1.749222905031957e+00, -1.748621641201289e+00, -1.748621641201289e+00, -3.380214509555175e-01, -3.375226214502643e-01, -3.259807738551100e-01, -3.313997407880397e-01, -3.307329338410412e-01, -3.307329338410412e-01, -1.053022413978411e-01, -1.068949871502875e-01, -3.734691526305521e-01, -7.258278314760545e-02, -9.483659946045553e-02, -9.483659946045550e-02, -1.961308132295182e-03, -2.104900508139999e-03, -1.648832238804807e-02, -9.324947144706816e-04, -1.373691338375266e-03, -1.373691338375266e-03, -2.860427451635609e+00, -2.860988044816991e+00, -2.860465178987681e+00, -2.860959599222054e+00, -2.860705479234292e+00, -2.860705479234292e+00, -1.063263468010137e+00, -1.074483510523172e+00, -1.059509255583746e+00, -1.069530687450905e+00, -1.071378041718303e+00, -1.071378041718303e+00, -3.366917316114204e-01, -3.668693324190770e-01, -3.079661881280062e-01, -3.229786704732935e-01, -3.428718974279832e-01, -3.428718974279832e-01, -4.787903942902468e-02, -1.015711879127612e-01, -4.413615742883183e-02, -1.012498284623227e+00, -5.987325120582385e-02, -5.987325120582383e-02, -6.756965580818918e-04, -9.201634856601129e-04, -7.777109926721498e-04, -2.895346007907683e-02, -9.451216517138745e-04, -9.451216517138719e-04, -3.447907626100608e-01, -3.425789223976692e-01, -3.433543630206024e-01, -3.439957295044295e-01, -3.436742956044030e-01, -3.436742956044030e-01, -3.358712302250232e-01, -2.877240088885069e-01, -3.015707507728346e-01, -3.152573375057332e-01, -3.082455106744845e-01, -3.082455106744845e-01, -3.817231599490852e-01, -1.300130553357517e-01, -1.552457082948943e-01, -2.034526325753228e-01, -1.782804900938753e-01, -1.782804900938753e-01, -2.632192553857371e-01, -1.557821331998298e-02, -2.224891039762155e-02, -1.994820314333911e-01, -3.846839214781957e-02, -3.846839214781958e-02, -2.993843037575524e-03, -1.770347351509242e-04, -4.592451624267292e-04, -3.639367328572712e-02, -8.665395999747976e-04, -8.665395999747892e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_r2scan50_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_r2scan50", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.511505728856064e+01, -1.511510702719255e+01, -1.511511968722224e+01, -1.511515234057754e+01, -1.511531968135809e+01, -1.511543882026108e+01, -1.511461559709054e+01, -1.511454129722470e+01, -1.511509453551366e+01, -1.511490048283279e+01, -1.511509453551366e+01, -1.511490048283279e+01, -2.473013423968091e+00, -2.473070303544195e+00, -2.473062689361999e+00, -2.473108883008377e+00, -2.474045620168594e+00, -2.474346802774653e+00, -2.473123098983526e+00, -2.473293518419051e+00, -2.472175673053266e+00, -2.474567445962175e+00, -2.472175673053266e+00, -2.474567445962175e+00, -4.870656517452854e-01, -4.890038917777860e-01, -4.860065877835990e-01, -4.882705699637787e-01, -4.679994151607341e-01, -4.659527997850355e-01, -4.747476493753547e-01, -4.760451968927032e-01, -4.849723420929588e-01, -4.605690108105143e-01, -4.849723420929588e-01, -4.605690108105143e-01, -1.277548176964364e-01, -1.432043469390084e-01, -1.318623532322703e-01, -1.461702625779194e-01, -5.076397961113113e-01, -5.244303272387291e-01, -1.059679313118835e-01, -9.646888231068496e-02, -1.120787995135601e-01, -1.120965544110000e-01, -1.120787995135601e-01, -1.120965544110000e-01, -5.432026848552434e-03, 2.695696097365666e-03, -4.297413665784415e-03, -3.043510807830540e-03, -2.717324505414308e-02, -2.751884488613367e-02, -1.759024415382443e-03, -1.738473817291326e-03, -2.551661237343881e-03, -2.025935197131160e-03, -2.551661237343887e-03, -2.025935197131159e-03, -3.740958849160004e+00, -3.740084014089201e+00, -3.742143428868976e+00, -3.741227284004813e+00, -3.741030827786352e+00, -3.740126898997751e+00, -3.742046314167678e+00, -3.741166117444560e+00, -3.741561202690772e+00, -3.740657828302424e+00, -3.741561202690772e+00, -3.740657828302424e+00, -1.325482731991194e+00, -1.326601291684861e+00, -1.342203101197218e+00, -1.342783096164745e+00, -1.313289676243558e+00, -1.317490048467115e+00, -1.328645539854625e+00, -1.332873267601278e+00, -1.344035626004978e+00, -1.336844039691025e+00, -1.344035626004978e+00, -1.336844039691025e+00, -4.504823330608033e-01, -4.497043024738074e-01, -4.895987103110349e-01, -4.896844545540012e-01, -4.171609256366110e-01, -4.280953439550141e-01, -4.364936118204722e-01, -4.440869628434583e-01, -4.652294756006584e-01, -4.487783548981496e-01, -4.652294756006584e-01, -4.487783548981496e-01, -7.141472130054813e-02, -7.251710697634137e-02, -1.135154919337621e-01, -1.140506274051577e-01, -6.745069149740603e-02, -6.712202957266042e-02, -1.446495743326168e+00, -1.446036551927875e+00, -7.011337834263294e-02, -6.273389870185798e-02, -7.011337834263488e-02, -6.273389870185775e-02, -1.265092628434381e-03, -1.282064832921271e-03, -1.720631986001527e-03, -1.727561012424618e-03, -1.427839051817527e-03, -1.477771381592980e-03, -4.654427430570341e-02, -4.527659510372076e-02, -1.556809041994042e-03, -1.701049866262519e-03, -1.556809041994037e-03, -1.701049866262516e-03, -4.525488938893210e-01, -4.539248500097711e-01, -4.496409982048722e-01, -4.510619709425237e-01, -4.507039872853078e-01, -4.521209188830910e-01, -4.515638817245219e-01, -4.529463002170214e-01, -4.511385016939810e-01, -4.525376332561905e-01, -4.511385016939809e-01, -4.525376332561905e-01, -4.410699477134547e-01, -4.421234543111217e-01, -3.746894418807656e-01, -3.761237143665058e-01, -3.948438370107541e-01, -3.963852694163427e-01, -4.141367704456128e-01, -4.152808194358656e-01, -4.045675141467618e-01, -4.057893408550168e-01, -4.045675141467618e-01, -4.057893408550168e-01, -5.129514647605129e-01, -5.133273629351564e-01, -1.581670334042510e-01, -1.588799568488234e-01, -1.976944507103872e-01, -2.002248816085656e-01, -2.764496565619936e-01, -2.774242596450388e-01, -2.361025936503323e-01, -2.363423114747775e-01, -2.361025936503323e-01, -2.363423114747776e-01, -3.473985842810537e-01, -3.500207574763624e-01, -2.435255312071972e-02, -2.558105257044283e-02, -3.605181978163118e-02, -3.642411415678411e-02, -2.685492134311264e-01, -2.713233942544673e-01, -5.808973199737648e-02, -5.747172262359081e-02, -5.808973199737646e-02, -5.747172262359079e-02, -5.373351377906798e-03, -5.478078782742158e-03, -3.340175202827877e-04, -3.462988931081986e-04, -8.573130383282179e-04, -8.898355531977266e-04, -5.596267449023833e-02, -2.912271522570479e-02, -1.491433291822105e-03, -1.558716962011213e-03, -1.491433291822095e-03, -1.558716962011210e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_r2scan50_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_r2scan50", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-6.211730381003297e-09, 1.699680376684791e-10, -6.210459346290699e-09, -6.211659874072537e-09, 1.699677911045265e-10, -6.210408329383423e-09, -6.211223600673279e-09, 1.699547462735486e-10, -6.209841463505552e-09, -6.212012250474373e-09, 1.699582283170237e-10, -6.210848458839293e-09, -6.211699165777084e-09, 1.699581088711227e-10, -6.210286751044283e-09, -6.211699165777084e-09, 1.699581088711227e-10, -6.210286751044283e-09, -1.379438305758282e-05, 2.758858546504131e-06, -1.379340584188759e-05, -1.379620041770072e-05, 2.759473816214609e-06, -1.379455054259956e-05, -1.382999047295671e-05, 2.774025422388848e-06, -1.383666471264105e-05, -1.381852872492162e-05, 2.754809608201874e-06, -1.381800537426632e-05, -1.379709595951141e-05, 2.763369390847232e-06, -1.384833056186132e-05, -1.379709595951141e-05, 2.763369390847232e-06, -1.384833056186132e-05, -2.926090748533608e-03, 2.709323143821118e-03, -2.999710116443832e-03, -2.915022560709670e-03, 2.698168663263616e-03, -2.997400966609279e-03, -2.845003882160114e-03, 2.380933893684406e-03, -2.845207958200415e-03, -3.139942210164581e-03, 2.011915533646660e-03, -3.198042231330632e-03, -3.315294580819402e-03, 2.115030925736313e-03, -3.290185941871763e-03, -3.315294580819402e-03, 2.115030925736313e-03, -3.290185941871763e-03, -1.389797325110081e+00, 1.113778575282640e+00, -6.879454187020660e-01, -1.328258789881982e+00, 1.131585167720763e+00, -6.678183104398820e-01, -3.594525720302376e-04, 1.707854955393021e-03, -5.791717530215047e-04, -1.978668885588500e-01, 7.088238681920542e-01, -1.357564526694116e+00, -1.162649842361273e+00, 1.017636528647748e+00, 6.457602122786753e-01, -1.162649842361271e+00, 1.017636528647750e+00, 6.457602122786763e-01, 3.789202522013990e+02, 2.691692589173089e+03, -5.424945859187882e+03, 2.091888892552360e+02, 8.378791168731273e+02, -6.276863758404679e+02, 4.797745804895214e+00, 5.206546797122851e+00, 3.440627004744636e+00, 6.031795308340016e+02, 3.474425544423646e+02, 6.018779390419522e+02, 2.422953939302408e+02, 2.860361857526898e+02, 1.196666027634535e+03, 2.422953939302491e+02, 2.860361857526883e+02, 1.196666027634535e+03, -1.670579251315311e-06, 2.064120283196137e-07, -1.671791518553274e-06, -1.671029459644468e-06, 2.069595826936506e-07, -1.672217446039305e-06, -1.670443144348999e-06, 2.064098853411341e-07, -1.671688872015367e-06, -1.670828195381456e-06, 2.068941926853079e-07, -1.672088248491769e-06, -1.670937063575232e-06, 2.067032181027890e-07, -1.672018087959509e-06, -1.670937063575232e-06, 2.067032181027890e-07, -1.672018087959509e-06, -9.372127639759118e-05, 1.675754422131500e-05, -9.270703906754689e-05, -8.679794298618714e-05, 1.543449230145285e-05, -8.608971088629710e-05, -9.166744487854927e-05, 1.588213932057392e-05, -9.151900819952616e-05, -8.532614455447499e-05, 1.467182024214476e-05, -8.509118463198261e-05, -9.101185004041019e-05, 1.642715161878144e-05, -8.915966690885502e-05, -9.101185004041019e-05, 1.642715161878144e-05, -8.915966690885502e-05, -1.066721652787006e-02, 1.251669896468412e-02, -1.058176406361456e-02, -7.919557838238302e-03, 1.338874693179927e-02, -7.635392464589164e-03, -1.753913290971778e-02, 2.064571703266417e-02, -1.395330782102673e-02, -1.733545575648559e-02, 2.964080361125809e-02, -1.258878761268817e-02, -7.688470435611649e-03, 1.167016908189115e-02, -1.245707537738196e-02, -7.688470435611659e-03, 1.167016908189114e-02, -1.245707537738196e-02, -4.275370975766888e-01, 1.013006592168991e+00, -2.204216570491071e-01, -1.292403311600675e+00, 9.370545638571657e-01, -1.264146077154282e+00, 1.804614647862154e-01, 1.112408591820349e+00, -3.415163587161203e-01, -1.526678211274300e-04, 1.247282384233750e-04, -1.529951039962324e-04, -2.909682887293219e+00, 6.279807259259585e-01, -4.800381111632909e+00, -2.909682887293262e+00, 6.279807259259206e-01, -4.800381111632918e+00, 1.188906391536493e+03, 5.902777584243285e+02, 1.065187960386250e+03, 7.143816826483890e+02, 3.731293901041719e+02, 6.790142786587248e+02, 3.233496457881780e+03, 1.952914771464913e+03, 3.144271541387069e+03, 1.727021687663183e+00, 2.370384632887535e+00, 1.660831685289159e-01, 1.933513391331272e+03, 8.008422074390305e+02, 3.301883315950560e+02, 1.933513391331269e+03, 8.008422074390303e+02, 3.301883315950461e+02, -7.432189027868201e-03, 1.147494335234051e-02, -7.210999741731236e-03, -7.924408099308427e-03, 1.049780980722926e-02, -7.709915320817529e-03, -7.801917171264071e-03, 1.082048215294510e-02, -7.582447749987748e-03, -7.656677971798635e-03, 1.110366068540403e-02, -7.436297867783924e-03, -7.734325058469511e-03, 1.096074572509396e-02, -7.513851670790068e-03, -7.734325058469511e-03, 1.096074572509396e-02, -7.513851670790068e-03, -8.140462963538545e-03, 1.496753871155219e-02, -7.870448373768345e-03, -1.461127497606973e-02, 1.251231139611195e-02, -1.426030742505422e-02, -1.250540128812389e-02, 1.259085545422972e-02, -1.218304931930361e-02, -1.086974591839217e-02, 1.314825954923481e-02, -1.063464247289109e-02, -1.171111751593647e-02, 1.293317825686115e-02, -1.137534519736663e-02, -1.171111751593647e-02, 1.293317825686115e-02, -1.137534519736663e-02, -7.329233918025568e-03, 1.205622557319765e-02, -6.879481947961383e-03, -4.286387093692917e-01, 3.288432120036838e-01, -4.194168865212628e-01, -2.385556998550908e-01, 2.108522491860608e-01, -2.241176836374835e-01, -8.323820575897878e-02, 1.111199302289075e-01, -8.059256839979992e-02, -1.355872895607804e-01, 1.506759917820290e-01, -1.361283268080672e-01, -1.355872895607805e-01, 1.506759917820289e-01, -1.361283268080673e-01, -2.844965280880174e-02, 2.882362875294387e-02, -2.597645110190502e-02, -3.770898513992760e+00, 9.627091651908412e+00, 6.967688605692972e-01, 2.214023460857986e+00, 2.970313033869382e+00, 1.895140598484012e+00, -9.691760421435545e-02, 1.534267296367740e-01, -7.210963850824161e-02, -4.034029143752960e-01, 2.505158629607186e+00, -1.616878966785705e+00, -4.034029143752991e-01, 2.505158629607169e+00, -1.616878966785707e+00, 1.159843109436055e+02, 6.329641056734451e+01, 1.114544338312769e+02, 1.476976931949733e+04, 8.770284391659925e+03, 1.883464449081609e+04, 3.088472995094712e+03, 2.193811091537201e+03, 2.976151921070020e+03, -7.828854476155587e-01, 4.726101197427621e+00, -1.748687181144883e+01, 3.069514453986998e+03, 1.089913012534649e+03, 5.491051406730189e+02, 3.069514453987007e+03, 1.089913012534657e+03, 5.491051406730644e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_r2scan50_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_r2scan50", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([4.946880802977294e-04, 4.946020547974671e-04, 4.946868848631592e-04, 4.946011707461837e-04, 4.946701280785013e-04, 4.945808631096611e-04, 4.946834779971442e-04, 4.945975758635700e-04, 4.946884717172686e-04, 4.945808059896602e-04, 4.946884717172686e-04, 4.945808059896602e-04, 4.112096245702312e-03, 4.109834797118168e-03, 4.112824859667772e-03, 4.110088409052390e-03, 4.123492750726951e-03, 4.125966633043229e-03, 4.125487117478858e-03, 4.123991676217283e-03, 4.106425399890013e-03, 4.138642076279809e-03, 4.106425399890013e-03, 4.138642076279809e-03, 6.768435784792758e-03, 6.883675877745144e-03, 6.727173542224857e-03, 6.844787860617320e-03, 6.058550641524402e-03, 6.148972440667036e-03, 7.335309901491185e-03, 7.468250797323955e-03, 7.031858903293662e-03, 7.708663933508027e-03, 7.031858903293662e-03, 7.708663933508027e-03, 3.777100355967668e-02, 1.680835100715600e-02, 3.594805907921028e-02, 1.675899398156536e-02, 6.193580761968481e-04, 1.174348275868917e-03, 4.636194620998584e-03, 2.660325608698869e-02, 5.550845364471595e-02, -1.953815643630707e-02, 5.550845364471595e-02, -1.953815643630717e-02, -2.620194957694374e-03, 8.685965721594973e-03, -7.399267441821497e-04, 1.234990149714528e-03, 1.313985396101308e-04, 5.670602970271081e-04, -3.049601914167090e-06, -9.438281912866305e-07, 1.017530583103231e-04, -4.139009594492886e-05, 1.017530583103146e-04, -4.139009594492762e-05, 1.858726695391196e-03, 1.858784005910999e-03, 1.859534655470618e-03, 1.859540537780329e-03, 1.858641424206171e-03, 1.858707658059717e-03, 1.859321723852608e-03, 1.859418228790850e-03, 1.859250792564877e-03, 1.859170199986023e-03, 1.859250792564877e-03, 1.859170199986023e-03, 5.472443632807261e-03, 5.415040837587235e-03, 5.207336790669083e-03, 5.162600409277665e-03, 5.289717023398459e-03, 5.308219900195703e-03, 5.044663171392674e-03, 5.058004727172664e-03, 5.450176736470114e-03, 5.276551723711286e-03, 5.450176736470114e-03, 5.276551723711286e-03, 1.111862052565205e-02, 1.084407807910349e-02, 7.850780734382154e-03, 7.521419568701636e-03, 1.313862961408138e-02, 1.302724992082119e-02, 1.000314662940306e-02, 9.691418169498648e-03, 8.874015151353035e-03, 1.231667202138282e-02, 8.874015151353049e-03, 1.231667202138283e-02, 4.807427693778829e-03, 3.710061771980199e-03, 3.980948136734760e-02, 3.968657035133614e-02, 1.569537004242158e-03, 4.565162459452725e-03, 6.896824683217005e-03, 6.902351005509020e-03, 2.961691889084758e-02, 5.534411913364243e-02, 2.961691889084615e-02, 5.534411913364280e-02, -1.276081071218804e-07, -9.019067758658499e-08, -2.466772955390575e-07, -5.357025621369500e-07, -5.846115036901769e-06, -5.279446858733654e-06, 2.165643686152010e-04, 2.476626321194723e-03, -3.835043332820750e-06, 3.197211442965233e-04, -3.835043332820704e-06, 3.197211442965264e-04, 5.284926176078515e-03, 5.171340329228807e-03, 6.631914518042981e-03, 6.539209662740747e-03, 6.256079522290969e-03, 6.154417890637693e-03, 5.865891816406987e-03, 5.757770140167290e-03, 6.070685072715069e-03, 5.965069827462633e-03, 6.070685072715068e-03, 5.965069827462637e-03, 4.643015583755305e-03, 4.470093257507735e-03, 1.082999306810379e-02, 1.074506523117301e-02, 9.701277170319293e-03, 9.611269985469684e-03, 8.245487060336074e-03, 8.172836826037673e-03, 9.073287641711010e-03, 8.920667558716917e-03, 9.073287641711015e-03, 8.920667558716924e-03, 8.639778979285102e-03, 8.166400381147788e-03, 2.714690106146861e-02, 2.721574163070518e-02, 2.452644938268871e-02, 2.388624993387405e-02, 1.722194272532571e-02, 1.703062734091519e-02, 1.992757027519168e-02, 1.998802548360800e-02, 1.992757027519168e-02, 1.998802548360801e-02, 1.440470695688158e-02, 1.330387313434447e-02, 2.039471615800513e-03, 7.540176229389045e-04, 4.019892041425843e-04, 6.487932124134429e-04, 1.377272314515433e-02, 9.803823619790424e-03, 2.894525497534162e-03, 7.817651173408357e-03, 2.894525497534197e-03, 7.817651173408388e-03, 3.180333891596141e-09, -2.838751040553589e-07, -5.556171302341123e-09, -1.526291299735180e-08, -1.000056511524622e-05, -9.102076352615093e-06, 1.411599559931065e-03, 4.441493546651699e-02, -7.844160705197020e-06, 2.655873421319738e-04, -7.844160705196563e-06, 2.655873421319633e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
