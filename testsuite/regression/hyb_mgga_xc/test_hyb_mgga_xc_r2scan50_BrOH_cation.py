
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_r2scan50_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_r2scan50", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.094358053251881e+01, -1.094363787296513e+01, -1.094389126074871e+01, -1.128457496502522e+01, -1.127271481186375e+01, -1.164783846821114e+01, -1.745268657569866e+00, -1.906484040058348e+00, -1.906743420442184e+00, -1.906809372956390e+00, -1.906606697703489e+00, -1.745555496971727e+00, -3.470228536559242e-01, -3.591600062561768e-01, -3.677856219146345e-01, -3.409879874991983e-01, -3.405288949002053e-01, -3.712064048246351e-01, -1.041421619309036e-01, -1.123254203277544e-01, -3.860857974955666e-01, -7.862229090236209e-02, -9.364716773971483e-02, -9.212872563731866e-02, -2.418375474096714e-03, -2.808469736173874e-03, -1.905362814426897e-02, -1.126114549759243e-03, -1.288641595824123e-03, -1.288641595824123e-03, -2.868105479941877e+00, -2.861452842409099e+00, -2.860925610338240e+00, -2.861415654805724e+00, -2.816197037587030e+00, -2.809142232306551e+00, -1.101628716897949e+00, -1.109582547942660e+00, -1.074123191971668e+00, -1.081403312852715e+00, -1.014511415487149e+00, -1.108852993320798e+00, -3.308631517162579e-01, -3.699157371425221e-01, -3.154666812423078e-01, -3.285069855625181e-01, -3.360942616355126e-01, -3.463953710426653e-01, -5.284056385010207e-02, -1.004430487061848e-01, -5.364401024284088e-02, -1.067640745498129e+00, -7.091991624869472e-02, -7.091991624869473e-02, -9.718057618123403e-04, -8.450943163500627e-04, -9.348079556900364e-04, -3.217267624236878e-02, -1.119023935517401e-03, -1.119023935517396e-03, -3.449917903293697e-01, -3.428416965020220e-01, -3.431264338515705e-01, -3.437736613383175e-01, -3.434720847077309e-01, -3.433871213778435e-01, -3.375591568757631e-01, -2.913272082465671e-01, -2.961085638592953e-01, -3.157702189934486e-01, -3.087991300775111e-01, -3.043188441424677e-01, -3.871952441483805e-01, -1.425382962162748e-01, -1.515997369127962e-01, -2.014977344132751e-01, -1.959957966862052e-01, -1.759964695607982e-01, -2.658978213709902e-01, -3.026070181819067e-02, -2.424568873624360e-02, -2.137617549490367e-01, -4.206413439970191e-02, -4.206413439970194e-02, -9.432712204788772e-03, -1.378784264086358e-04, -2.462861633531979e-03, -5.386719335329737e-02, -7.663128895750822e-04, -1.410291418266839e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_r2scan50_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_r2scan50", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.601919679297282e+01, -1.601903814751814e+01, -1.601922994551080e+01, -1.601906310229014e+01, -1.601935706768585e+01, -1.601923453072658e+01, -1.609230541547345e+01, -1.510239903060677e+01, -1.610013074173974e+01, -1.511036097687164e+01, -1.510810807006223e+01, -1.510794675357595e+01, -2.408043619737408e+00, -2.468434339850649e+00, -2.388274930411687e+00, -2.388179970435754e+00, -2.389361806186843e+00, -2.389585798756082e+00, -2.389166580952321e+00, -2.389199763671741e+00, -2.387699992830017e+00, -2.390240703042780e+00, -2.467734488776941e+00, -2.409975635045076e+00, -4.618556651844975e-01, -4.653648813117238e-01, -4.683221743391814e-01, -4.925091808291060e-01, -4.434577842593138e-01, -4.394466330145951e-01, -4.709999417908992e-01, -4.517438237972144e-01, -4.679632652149593e-01, -4.334603706381088e-01, -4.673073733584883e-01, -4.247536533700514e-01, -1.357271620663976e-01, -1.438075883606034e-01, -1.448236037462936e-01, -1.536039535603752e-01, -4.748036287859220e-01, -4.946581495252079e-01, -8.204645343817876e-02, -8.879528245153082e-02, -1.070781020419914e-01, -1.986317546839425e-02, -1.076547328599327e-01, -8.272496726984514e-02, 7.572631154960330e-02, 8.049959884265609e-02, -4.549972425022445e-03, 8.466982392343557e-02, -2.628235999361456e-02, 1.075917738022536e-01, 4.194994586532187e-02, 4.107213034596372e-02, 6.859684153133833e-02, 3.578167286426009e-02, 6.859684153133833e-02, 3.578167286425996e-02, -3.739809868687924e+00, -3.738955434832552e+00, -3.741926287917362e+00, -3.741021371699672e+00, -3.740817650608588e+00, -3.739923615602554e+00, -3.741833875143994e+00, -3.740963666533764e+00, -3.893568842701571e+00, -3.732219924001189e+00, -3.740400224366382e+00, -3.899977485194903e+00, -1.367178999205434e+00, -1.367594080275432e+00, -1.379867538392985e+00, -1.379873064177763e+00, -1.331188704147642e+00, -1.334997662654322e+00, -1.343444740838698e+00, -1.347352294785083e+00, -1.411633067097436e+00, -1.405056349086286e+00, -1.382502186697693e+00, -1.375087758353864e+00, -4.455123260520160e-01, -4.809570541634493e-01, -4.841049768661931e-01, -4.847173521215343e-01, -4.004002162810107e-01, -4.156520280244753e-01, -4.213621572528435e-01, -4.342648345575546e-01, -4.616100140481001e-01, -4.795407085578114e-01, -4.608737965780808e-01, -4.408988666645093e-01, -3.291609048547881e-02, -3.385773286258384e-02, -1.314220471319649e-01, -1.236964186072387e-01, 3.746240563444084e-03, -4.294543359537425e-03, -1.378375713390937e+00, -1.377847795835673e+00, -4.631986947346031e-02, -6.132776269955498e-02, -4.631986947346039e-02, -6.132776269955498e-02, -1.767109938306369e-03, 2.945859647536480e-02, 2.491730939560795e-02, 2.535042885212509e-02, 3.116540395362007e-02, 3.361039841377067e-02, 4.865141423742801e-02, -4.388817244350245e-02, 2.839996758520838e-02, 4.562025729881660e-02, 2.839996758520832e-02, 4.562025729882236e-02, -4.522328801782548e-01, -4.536616085082977e-01, -4.492411406905731e-01, -4.506889133535926e-01, -4.506545302228397e-01, -4.518490656783074e-01, -4.551298924088928e-01, -4.507072174054928e-01, -4.510664584900859e-01, -4.522795029794674e-01, -4.552538082218319e-01, -4.501510018644241e-01, -4.390153343558477e-01, -4.401975336227852e-01, -3.760633621058211e-01, -4.017416815076906e-01, -3.939795029134704e-01, -4.268210833060556e-01, -4.133475212943231e-01, -4.145105380564295e-01, -4.037115874798287e-01, -4.049537268928473e-01, -4.022603606645718e-01, -4.319011276645833e-01, -4.943726481488238e-01, -5.297654176317674e-01, -1.686227914567204e-01, -1.693389481690965e-01, -2.042361894377661e-01, -2.148748501022072e-01, -2.793356373630224e-01, -2.805571836737109e-01, -2.495947387368109e-01, -2.497223099117594e-01, -2.494734349081166e-01, -2.466165231734233e-01, -3.437753049389786e-01, -3.463471792611801e-01, -3.865038913737380e-02, -3.854978968243625e-02, 4.355144225489738e-02, 3.804614020421392e-02, -2.665110579105022e-01, -2.707146065141248e-01, -1.531326612083793e-02, -2.847843709926156e-02, -1.531326612083922e-02, -2.847843709926243e-02, -1.226940473301626e-02, -1.209446337563200e-02, -3.517063462339163e-03, -3.498002438763249e-03, -3.262884794362585e-03, -3.185080263575777e-03, -6.835877539863658e-02, -6.806812383441171e-02, 2.897554276711109e-02, 4.182082198945965e-02, 2.824500330311939e-02, -2.346806505612511e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_r2scan50_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_r2scan50", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-7.722210481292712e-09, 8.754823619740888e-09, -7.721797320023982e-09, -7.722185148122690e-09, 8.754422046695865e-09, -7.721833887749183e-09, -7.722304288633302e-09, 8.752727524043654e-09, -7.721638902595402e-09, -1.165609912200139e-08, 8.902357889976835e-10, -5.468784782797324e-09, -1.188331960260657e-08, 4.323325233883475e-10, -5.697441359309744e-09, -5.837233072874739e-09, 1.520217232794523e-10, -5.837596759364191e-09, -5.989939524447934e-06, 2.513760466289678e-06, -7.423163380733882e-06, -6.910263729918517e-06, 6.735514678910315e-07, -6.910353994140055e-06, -6.913266543406504e-06, 6.763666257311692e-07, -6.913753040328720e-06, -6.909938120121910e-06, 6.749236188886372e-07, -6.909539429637087e-06, -6.913261444788231e-06, 6.754313041245301e-07, -6.912723826019009e-06, -7.413270689359744e-06, 2.530926022444482e-06, -5.984976466859033e-06, 8.282711092177920e-03, 2.031620287388696e-02, 8.194765188388145e-03, 2.869337640289736e-04, 4.281776270998719e-03, -2.622930670227947e-03, -4.506603844045188e-03, 1.392688120735120e-03, -4.640721003902907e-03, -4.369729768965224e-03, 1.558564987383650e-03, -9.834385412040569e-04, 9.215900146394701e-03, 2.239562307205753e-02, 9.757985474501006e-03, -3.931194052162169e-03, 1.376283626443728e-03, -5.147441702508390e-03, 1.612310555463364e-01, 6.670520382248003e-01, -6.316935438608402e-01, 4.058856271836173e-01, 1.163093417363446e+00, -3.234117362964192e-01, -2.330706029651086e-03, 5.669790476871719e-04, -1.283528589020582e-04, -2.255095682778786e+00, 1.443889722439502e+00, -2.121332939065960e+00, -8.814005818278644e-01, 1.038644129504970e-01, -9.901770952301469e+00, -8.731954114329760e-01, 1.202747537402744e-01, -5.222434591809395e-01, -6.837479539136683e+04, 3.066236822326313e+02, -6.059628039534597e+04, -3.244653314933480e+04, 2.284973763524638e+02, -5.534159629999931e+04, -3.066579244138500e+01, 6.745939117371837e+00, -3.707297475165673e+02, -1.481276832245526e+05, 6.583058466910715e+02, -1.534030428582219e+05, -8.345843323665424e+04, 2.193515687533467e+01, -3.126849171844874e+05, -8.345843323665424e+04, 2.193515687533478e+01, -3.126849171844862e+05, -1.533330303637534e-06, 4.635143166230940e-07, -1.535035761392572e-06, -1.663265010179615e-06, 2.052460731194121e-07, -1.664944748026505e-06, -1.662793759402278e-06, 2.047214146967644e-07, -1.664475225396617e-06, -1.663233293725234e-06, 2.052136593017906e-07, -1.664931733748997e-06, -2.725593373088497e-06, 8.049804149389111e-07, -1.364687343263977e-06, -1.534035315802533e-06, 4.628864643596083e-07, -2.899778297650094e-06, -5.363990053009942e-05, 3.324950970727656e-05, -5.369246684212774e-05, -5.164054472072974e-05, 3.392419759366471e-05, -5.174165558486200e-05, -6.659486859256927e-05, 1.017385045664765e-05, -6.623654557142953e-05, -6.515246653181988e-05, 1.010485610635608e-05, -6.478606068226744e-05, -4.468338490769755e-05, 4.726735463968434e-05, -4.054268714921557e-05, -5.135011938825615e-05, 3.393388567856715e-05, -5.236106331145972e-05, -1.827719331603702e-03, 1.537970814483033e-02, -1.208577203930724e-02, -5.145532326696710e-03, 4.721454012323087e-03, -5.173833710154019e-03, -9.993121916501714e-03, 6.427593397213827e-03, -8.529631547337895e-03, -8.651572664480375e-03, 6.434655367787209e-03, -7.412332981707719e-03, -1.941743313732014e-03, 1.281708416257613e-02, -1.432107178155207e-02, -5.788082028343120e-03, 5.124406733353916e-03, -7.472045332578155e-03, -9.350459640476107e+00, 5.256014201362460e+00, -8.921594400957026e+00, 9.209442902187936e-02, 3.734229916397888e-01, -7.926766407333037e-01, -1.685510269092601e+01, 1.410613550671018e+00, -1.372186680598841e+01, -7.615872270038216e-05, 1.882446141031536e-05, -7.632210229896541e-05, -6.588482643144253e+00, 1.282873116116745e+00, -5.222088730521699e+00, -6.588482643144247e+00, 1.282873116116745e+00, -5.222088730521699e+00, -9.490005195097593e+05, 6.885161767949311e+02, -1.792842327034622e+05, -1.272105818921301e+05, 5.359189029274509e+04, -1.128685706329877e+05, -7.754959467730052e+05, 3.658975410779611e+03, -7.362094582314114e+05, -7.060981237348669e+01, 3.450397443620979e+00, -2.636985781689090e+00, -2.895789298505632e+05, 1.271939246895683e+03, -3.164451543920139e+05, -2.895789298505626e+05, 1.271939246895683e+03, -3.164451543920518e+05, -7.329966828771912e-03, 9.878286956075786e-03, -7.152939496501104e-03, -7.463142837993737e-03, 9.135542784350111e-03, -7.302546800128917e-03, -7.323638981350421e-03, 1.686148784943105e-02, -7.001269119447475e-03, -9.023217321587751e-03, 1.208701231262895e-02, -5.998193107793690e-03, -7.293203347112186e-03, 1.623203090348926e-02, -6.986301532278640e-03, -9.288982289258150e-03, 1.224047301919733e-02, -5.890616407198496e-03, -6.920186513035448e-03, 1.339238784145689e-02, -6.757225328621284e-03, 5.811431222028807e-03, 4.939373896880159e-02, -8.016396857118670e-03, -2.235357676178863e-03, 2.870075650695616e-02, -2.074168738949955e-02, -9.639612212432917e-03, 1.053269933023646e-02, -9.449270684679704e-03, -1.041057751543085e-02, 1.053876496444686e-02, -1.020476752370195e-02, -2.935759592619172e-03, 2.548840081007020e-02, -2.026632818156950e-02, 2.831628859038485e-04, 1.267607161662677e-02, -6.417739966096732e-03, -2.890503425744174e-01, 2.319252634072655e-01, -2.801922082667176e-01, -1.018080067113401e-02, 9.983513173461944e-02, -1.455611478862882e-01, -3.980602310231882e-03, 1.172672982806425e-01, -1.102457497603733e-02, -5.521489357479756e-02, 1.271237351586763e-01, -5.547833700207530e-02, -5.492049489980001e-02, 1.277125325086717e-01, -1.486106867906944e-02, -1.829557813891522e-02, 1.446350631423485e-02, -1.775765322730691e-02, 5.867297629071843e+02, 1.246877659658531e+03, 5.877174403583084e+02, -1.352949862442266e+02, 6.230204803589169e+01, -1.171908282273355e+02, 5.229903569426111e-03, 1.832750805744794e-01, 8.180538253736894e-03, -2.570485314672592e+01, 1.361744822663103e+01, -1.991499218172717e+01, -2.570485314672564e+01, 1.361744822663146e+01, -1.991499218172705e+01, 2.561582877670980e+04, 6.998505000654623e+04, 2.686082842197533e+04, -3.778264988150997e+05, 2.071891923547654e+06, -3.690007786655738e+05, -4.245835142762937e+07, -7.710377625517517e+07, -4.160470705319037e+07, 5.225038892876580e+01, 1.090354285230524e+02, 5.238146829010280e+01, -5.489835643228542e+05, 2.332036826600692e+02, -3.797724540942543e+05, -5.458130042819742e+05, 6.574323764919770e+03, -4.074313378072013e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_r2scan50_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_r2scan50", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [8.524304533166110e-04, 8.523960391009530e-04, 8.524228259663368e-04, 8.523906678012682e-04, 8.524005802370869e-04, 8.523572042816951e-04, 8.963696768375235e-04, 4.452033129224429e-04, 9.088244297163029e-04, 4.577235109566674e-04, 4.703234220100909e-04, 4.703335825473062e-04, 2.090330406528047e-03, 2.320396403273157e-03, 2.410834431836471e-03, 2.410756333058000e-03, 2.411793085513958e-03, 2.412094843873184e-03, 2.411294721227451e-03, 2.411260885592302e-03, 2.410378471245373e-03, 2.412787530935884e-03, 2.315748275330630e-03, 2.090096155807287e-03, 1.545286832902043e-03, 1.815095073445589e-03, 2.201332636715142e-03, 1.060976461150341e-02, 9.880017116865895e-03, 9.936125922887326e-03, 1.249264638700726e-02, 3.540144780965883e-03, 2.343692938753481e-03, 3.185907555902185e-04, 9.677598121681539e-03, 1.011394011719672e-02, -3.795013614822946e-03, 3.662214543212992e-02, -2.037791657382558e-03, 3.745884984724106e-02, 9.560693514504601e-03, 7.058623966139586e-04, 3.186902101475690e-02, 3.176393646231478e-02, 4.246578891236523e-02, 6.855348585070609e-02, 4.210149387954227e-02, -1.908575973450804e-03, 1.087239580593051e-01, 1.156506046936242e-01, -1.469942483037999e-06, 1.244654132180313e-01, -1.907812807259111e-05, 1.393491754959654e-01, 5.115755274113928e-02, 5.037115452385012e-02, 9.401380529447305e-02, 6.489938709826375e-02, 9.401380529447305e-02, 6.489938709826350e-02, 1.683279166079764e-03, 1.683784390187012e-03, 1.853052314120321e-03, 1.853504120838055e-03, 1.852248771844409e-03, 1.852711062618192e-03, 1.852981589857222e-03, 1.853476307682360e-03, 2.962884691705003e-03, 1.525178273609421e-03, 1.684276145136064e-03, 3.123407315932739e-03, 3.413592073008542e-03, 3.416150199316671e-03, 3.323247362386922e-03, 3.326095091605175e-03, 4.010158361746761e-03, 4.010542691595511e-03, 3.994996275139794e-03, 3.995285445970729e-03, 4.023942980858598e-03, 3.271541016059029e-03, 3.326491047654984e-03, 3.334089125552471e-03, -1.654114105547857e-03, 1.331002048378950e-02, 7.777633164641076e-03, 7.842320494298494e-03, 1.017214426081434e-02, 9.969530298031073e-03, 9.385442670199286e-03, 9.124428672837099e-03, -2.948357392438955e-04, 1.557116371589726e-02, 8.701181296471051e-03, 9.251268065722542e-03, 4.374702499297216e-02, 4.318447450168159e-02, -1.139993738132075e-03, 4.038785098088941e-02, 7.943896062100313e-02, 7.653770092519156e-02, 4.193877113416769e-03, 4.196639866767274e-03, 6.614472655664648e-02, 6.416145459657277e-02, 6.614472655664640e-02, 6.416145459657280e-02, -2.263241931981103e-07, 2.933359247478691e-02, 3.051502495877670e-02, 2.808887710213078e-02, 9.976649240910505e-02, 1.125110984411135e-01, 1.062706709265029e-01, -3.126110887770272e-05, 3.968535880879401e-02, 1.123056551424322e-01, 3.968535880879392e-02, 1.123056551424456e-01, 5.745403305472916e-03, 5.678263506837283e-03, 6.670779415455474e-03, 6.627172435588437e-03, 3.925233915972541e-03, 3.700931979960180e-03, 7.712672085248132e-03, 3.395377169256697e-03, 3.978053244837871e-03, 3.770292279348844e-03, 8.119511388115515e-03, 3.254031508088763e-03, 3.489508876702862e-03, 3.436351995755652e-03, -4.508366828442589e-03, 7.258167083696476e-03, -4.045262139607691e-03, 1.508116678594953e-02, 7.991192168607462e-03, 7.941827231911306e-03, 8.626859037683928e-03, 8.581071690036794e-03, -3.114150055504063e-03, 1.609708143375195e-02, -4.886411703514296e-03, 1.014886606758515e-02, 3.026007036644861e-02, 3.009513116461237e-02, 7.462992467966270e-03, 3.100196671260517e-02, -3.767718334300153e-03, 1.497673913215310e-03, 1.736348067303017e-02, 1.739616325277252e-02, 1.712523919014894e-02, 5.325935165326487e-03, 1.109693830804817e-02, 1.107133324455272e-02, -1.442010885576307e-05, -1.441562103813047e-05, 7.522697026809848e-02, 7.334980202280984e-02, -1.056893408349102e-02, -1.035810363392911e-02, 5.338716387361011e-02, 5.074983049295772e-02, 5.338716387360863e-02, 5.074983049295675e-02, -3.765811358867893e-07, -3.583361720760083e-07, -3.925966526942191e-03, -3.921008442084626e-03, -3.165109347050610e-08, -2.908263139049355e-08, -1.610735137324942e-04, -1.297671232601709e-04, 6.379822543085033e-02, 1.035925726849595e-01, 6.381181127064740e-02, -6.486476012018095e-08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
