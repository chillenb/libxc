
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_pw86b95_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_pw86b95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.501436208725258e+01, -1.501437187472442e+01, -1.501448005252383e+01, -1.501431845690385e+01, -1.501436671008800e+01, -1.501436671008800e+01, -2.556217823503734e+00, -2.556186866405217e+00, -2.555426400157376e+00, -2.557064784202660e+00, -2.556213801814913e+00, -2.556213801814913e+00, -5.446234459313417e-01, -5.445686568040212e-01, -5.439593975761616e-01, -5.466820577458354e-01, -5.446000163038313e-01, -5.446000163038313e-01, -1.697506208110363e-01, -1.709473325813175e-01, -6.474493586176961e-01, -1.362248166890775e-01, -1.701015573554510e-01, -1.701015573554510e-01, -2.210682808907288e-02, -2.273784828780471e-02, -6.015829351474050e-02, -1.465236566185062e-02, -2.250918880783298e-02, -2.250918880783298e-02, -3.628950797414592e+00, -3.628200156635502e+00, -3.628878372131707e+00, -3.628294637029000e+00, -3.628559033851774e+00, -3.628559033851774e+00, -1.579615752140031e+00, -1.586429041649512e+00, -1.580648587400989e+00, -1.585976425956815e+00, -1.582798812006026e+00, -1.582798812006026e+00, -4.437315014270745e-01, -4.613897651291822e-01, -4.259134427013021e-01, -4.287694062544876e-01, -4.554332523801899e-01, -4.554332523801899e-01, -1.093914928601481e-01, -1.804769068678479e-01, -1.073164065999843e-01, -1.345797382192021e+00, -1.200545170578770e-01, -1.200545170578770e-01, -1.425445234975923e-02, -1.544588195753021e-02, -1.169428194333520e-02, -7.553586108557317e-02, -1.404869382102504e-02, -1.404869382102504e-02, -4.295933203021985e-01, -4.297040117384419e-01, -4.295082683122732e-01, -4.294701956052607e-01, -4.294761307597146e-01, -4.294761307597146e-01, -4.174778020526068e-01, -4.002240001665744e-01, -4.038454537465201e-01, -4.065301222300792e-01, -4.050132173280676e-01, -4.050132173280677e-01, -4.850277998932191e-01, -2.168945866353501e-01, -2.459672360389148e-01, -2.903677435206063e-01, -2.669565120198268e-01, -2.669565120198268e-01, -3.662396836228319e-01, -5.795762974908351e-02, -7.105246651898134e-02, -2.684612697290974e-01, -9.098987839438660e-02, -9.098987839438659e-02, -2.505012595209440e-02, -6.715615192855153e-03, -1.002175638080282e-02, -8.673896541326320e-02, -1.226624819490960e-02, -1.226624819490959e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_pw86b95_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_pw86b95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.727922189138081e+01, -1.727929139203491e+01, -1.727959118992320e+01, -1.727845331953095e+01, -1.727925863013164e+01, -1.727925863013164e+01, -2.851159097842342e+00, -2.851175519471064e+00, -2.851719448827136e+00, -2.850979785912067e+00, -2.851181682811218e+00, -2.851181682811218e+00, -6.031066185574320e-01, -6.025786577301856e-01, -5.903994904572878e-01, -5.924260282820524e-01, -6.029101239788441e-01, -6.029101239788441e-01, -1.853845501108017e-01, -1.870696086168445e-01, -7.488396336285327e-01, -1.457084970261552e-01, -1.858956391867588e-01, -1.858956391867588e-01, -1.811108018721580e-02, -1.866770231780008e-02, -5.562162244990325e-02, -1.177989776285121e-02, -1.847919032094620e-02, -1.847919032094620e-02, -4.356015901014381e+00, -4.358993925746937e+00, -4.356316395304280e+00, -4.358631984308809e+00, -4.357546609342692e+00, -4.357546609342692e+00, -1.639027236151415e+00, -1.647528299015389e+00, -1.637360238489989e+00, -1.643927354642709e+00, -1.647118494516766e+00, -1.647118494516766e+00, -5.154900573261328e-01, -5.869797467498857e-01, -4.935003410767770e-01, -5.347837542440338e-01, -5.356778352130518e-01, -5.356778352130518e-01, -1.116582046416186e-01, -1.925727527331337e-01, -1.100204642903134e-01, -1.713525629671431e+00, -1.257509504289843e-01, -1.257509504289843e-01, -1.145752656400489e-02, -1.243306304052246e-02, -9.410380790074734e-03, -7.349635883435424e-02, -1.130918264481043e-02, -1.130918264481045e-02, -5.626682840235984e-01, -5.554218026681024e-01, -5.585813277655967e-01, -5.606304461951547e-01, -5.596540337773038e-01, -5.596540337773038e-01, -5.451372729144907e-01, -4.415350423870442e-01, -4.622616196861880e-01, -4.917054371856977e-01, -4.754502162120482e-01, -4.754502162120483e-01, -6.139104654601051e-01, -2.324229523276393e-01, -2.656682016613037e-01, -3.231181300086169e-01, -2.912694315428179e-01, -2.912694315428179e-01, -4.051520149431747e-01, -5.266062526945544e-02, -6.749971054827833e-02, -3.066339141035158e-01, -9.204365081360946e-02, -9.204365081360943e-02, -2.060872812301919e-02, -5.375762402948402e-03, -8.033752069362488e-03, -8.793160544314010e-02, -9.866654094961866e-03, -9.866654094961834e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_pw86b95_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_pw86b95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-6.821889065569103e-09, -6.821839848404355e-09, -6.821550385500744e-09, -6.822357748557965e-09, -6.821863691777421e-09, -6.821863691777421e-09, -8.081009212935269e-06, -8.081375899522808e-06, -8.090649934105223e-06, -8.076148850063846e-06, -8.081015381793984e-06, -8.081015381793984e-06, -3.060152944951770e-03, -3.064807040526295e-03, -3.099031364119651e-03, -3.095194798657747e-03, -3.062040827961255e-03, -3.062040827961255e-03, -2.738681180954052e-01, -2.704370480647899e-01, -8.065816034316347e-04, -4.948662993297334e-01, -2.728528564785763e-01, -2.728528564785763e-01, -5.072700930140804e+02, -4.533110985954829e+02, -9.741742354603387e+00, -2.627648235740091e+03, -4.720121955785666e+02, -4.720121955785666e+02, -1.831032490486110e-06, -1.827623084820462e-06, -1.830693509011804e-06, -1.828042877173105e-06, -1.829285295428645e-06, -1.829285295428645e-06, -5.135804057792197e-05, -5.079755978813712e-05, -5.086502451446535e-05, -5.043601990744770e-05, -5.161860312864969e-05, -5.161860312864969e-05, -7.817917571795589e-03, -3.235144343791546e-04, -8.633926397703242e-03, -1.554841982478608e-03, -6.925543442043466e-03, -6.925543442043466e-03, -1.057580326701696e+00, -1.864924292429218e-01, -1.149415544240668e+00, -3.555244280322557e-05, -7.869593540652277e-01, -7.869593540652277e-01, -2.933623036091086e+03, -2.127854316908041e+03, -6.475967326567650e+03, -4.157743867908431e+00, -3.109156140217895e+03, -3.109156140217890e+03, 1.521423164397483e-03, -2.469816137233067e-03, -1.169413421781566e-03, -6.242524376507026e-05, -6.265308310330559e-04, -6.265308310330559e-04, 3.473619263446290e-03, -1.336531455029968e-02, -1.277896736144953e-02, -1.022946542378574e-02, -1.189148091939255e-02, -1.189148091939255e-02, -2.661990740911290e-04, -1.017883919333006e-01, -6.984373542985817e-02, -4.150968137154680e-02, -5.582200958493456e-02, -5.582200958493462e-02, -1.791904509568230e-02, -1.114720994062043e+01, -5.166006948078234e+00, -5.406074735517297e-02, -2.139448746436906e+00, -2.139448746436906e+00, -3.076990905370775e+02, -5.955245570614561e+04, -1.200757335601106e+04, -2.587334497561769e+00, -5.349874040112233e+03, -5.349874040112264e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_pw86b95_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_pw86b95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_pw86b95_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_pw86b95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-1.453792881020835e-05, -1.453815844837191e-05, -1.453871124683689e-05, -1.453496057061442e-05, -1.453805385589584e-05, -1.453805385589584e-05, -2.775436576906803e-04, -2.775855508915998e-04, -2.787195116710247e-04, -2.766666961361983e-04, -2.775631483849621e-04, -2.775631483849621e-04, -2.355930769489709e-03, -2.326155936325914e-03, -1.624213943089691e-03, -1.639251645310494e-03, -2.345189621909301e-03, -2.345189621909301e-03, -3.960154996545132e-03, -4.321891409453982e-03, -2.589762119739679e-03, -1.210365121099308e-03, -4.071359626015101e-03, -4.071359626015101e-03, -2.971904688411089e-06, -3.390279689868400e-06, -6.932569228204634e-05, -2.686526026535870e-07, -3.421491950835473e-06, -3.421491950835474e-06, -2.270364236199089e-04, -2.280904403504870e-04, -2.271411325631901e-04, -2.279606871468378e-04, -2.275802814273013e-04, -2.275802814273013e-04, -2.619657172859747e-04, -2.670105022861876e-04, -2.519477275473951e-04, -2.557893556152959e-04, -2.791220374975574e-04, -2.791220374975574e-04, -6.561847842347336e-03, -1.240282339943801e-02, -6.733639062756232e-03, -1.215298748333417e-02, -6.923214536847441e-03, -6.923214536847441e-03, -4.299701434995194e-04, -1.456751740288871e-03, -4.869407601727779e-04, -1.934623506917164e-03, -8.147950457462470e-04, -8.147950457462470e-04, -2.575035527888732e-07, -3.760377772443233e-07, -4.770189010703516e-07, -1.807137943766328e-04, -4.274533259165149e-07, -4.274533259165147e-07, -1.720174471106644e-02, -1.414907958778020e-02, -1.514525674058078e-02, -1.598746071056006e-02, -1.555812503198624e-02, -1.555812503198624e-02, -1.879262873722554e-02, -4.786032157844813e-03, -6.887839697489260e-03, -9.933193977300818e-03, -8.256756186165932e-03, -8.256756186165934e-03, -1.114619740287045e-02, -2.039219582609204e-03, -3.148116437615883e-03, -6.753927378774448e-03, -4.714931968855889e-03, -4.714931968855887e-03, -5.187298369985341e-03, -4.672243692400858e-05, -1.115648744901561e-04, -1.094343744547512e-02, -4.028470824938104e-04, -4.028470824938113e-04, -3.464829181194732e-06, -1.603449443640014e-08, -8.721126006235346e-08, -4.396724529975842e-04, -3.942186910684218e-07, -3.942186910684204e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
