
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_r2scan0_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_r2scan0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.636834065602175e+01, -1.636841658924708e+01, -1.636878109214600e+01, -1.636754086651540e+01, -1.636838043729598e+01, -1.636838043729598e+01, -2.404023576194227e+00, -2.404104187925832e+00, -2.406616446804921e+00, -2.405827421680434e+00, -2.404056952354412e+00, -2.847914876976892e+00, -4.763334969750334e-01, -5.548840120816072e-01, -5.387565020307703e-01, -5.436905087237125e-01, -5.552795594312983e-01, -5.552795594312983e-01, -1.611590601191612e-01, -1.634097142389079e-01, -5.521201191507630e-01, -1.129963787867145e-01, -1.618309063446183e-01, -1.618309063446183e-01, -6.020545170148314e-03, -6.388776078350047e-03, -3.345712285062823e-02, -2.061167281289536e-03, -6.325694791035178e-03, -6.325694791035159e-03, -4.276293059200670e+00, -4.277095446803619e+00, -4.276377968970136e+00, -4.128599355094271e+00, -4.276700611114978e+00, -4.276700611114978e+00, -1.349508008874388e+00, -1.365358768252825e+00, -1.342908662610957e+00, -1.355299309247981e+00, -1.368958714163357e+00, -1.621512664056829e+00, -4.944763401929961e-01, -5.374152829431055e-01, -4.690727402804133e-01, -4.901743390264839e-01, -5.134628229678830e-01, -4.928766226404745e-01, -8.961635367995444e-02, -1.590228961965709e-01, -8.864626390922578e-02, -1.587400041011271e+00, -9.637797431562066e-02, -9.637797431562066e-02, -6.457091662252012e-03, -2.406913461735262e-03, -1.849454773997462e-03, -6.008746523446497e-02, -6.698522541382366e-03, -2.163021295528414e-03, -5.131963832467568e-01, -5.102898731380289e-01, -5.085103747032633e-01, -5.121402191050763e-01, -5.117380678310056e-01, -5.117380678310056e-01, -4.973027208709269e-01, -4.306752380086740e-01, -4.503126451460411e-01, -4.684041477834894e-01, -4.591998700415172e-01, -4.479480947281679e-01, -5.619677226096371e-01, -1.872422639774386e-01, -2.378954286919066e-01, -2.810484853344088e-01, -2.690752120064709e-01, -2.690752120064708e-01, -3.632581418031440e-01, -3.046265376478522e-02, -4.301381159718340e-02, -2.885740354427384e-01, -7.517652415298610e-02, -6.618420336080671e-02, -6.849552847170311e-03, -3.996216875996824e-04, -1.057200012846727e-03, -6.332476302116764e-02, -1.789465273564314e-03, -1.789465273564312e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_r2scan0_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_r2scan0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.404687395788191e+01, -2.404691110179622e+01, -2.404712179683638e+01, -2.404651042575210e+01, -2.404689319842235e+01, -2.404689319842235e+01, -3.722406157676247e+00, -3.722565276854910e+00, -3.727475629533737e+00, -3.725866114591694e+00, -3.722467608049718e+00, -3.559300805396877e+00, -6.551840773394417e-01, -6.634704613536508e-01, -6.321260344362398e-01, -6.436415227291609e-01, -6.642322952039255e-01, -6.642322952039255e-01, -2.012142933157204e-01, -2.048186076782333e-01, -7.420255822466515e-01, -1.058461517103465e-01, -2.022810222553303e-01, -2.022810222553303e-01, 5.252995628265936e-02, 5.446496516494463e-02, 5.241401662829345e-02, 2.235157700697078e-02, 5.325769462626992e-02, 5.325769462628277e-02, -5.589034374775845e+00, -5.590749014632340e+00, -5.589219060956776e+00, -5.792451846209528e+00, -5.589901161083781e+00, -5.589901161083781e+00, -2.054232368353608e+00, -2.082725165970848e+00, -2.042152045412834e+00, -2.064640116256328e+00, -2.089260653593701e+00, -2.013338369215034e+00, -6.388341376537966e-01, -7.012628627578564e-01, -6.021874247015402e-01, -6.354860573923057e-01, -6.658674089727548e-01, -6.927344677174615e-01, -1.146815070429392e-01, -1.824029406915352e-01, -1.134402135643494e-01, -2.044042469215877e+00, -8.759814987835374e-02, -8.759814987835374e-02, -8.410468839343588e-03, 2.627482647465834e-02, 1.201821973605555e-02, -7.700055077642887e-02, -8.722353452885183e-03, 2.156690971971481e-02, -6.759047551862282e-01, -6.707874839256089e-01, -6.761008985570357e-01, -6.740305465346559e-01, -6.733198897070554e-01, -6.733198897070554e-01, -6.544186334875546e-01, -5.564587309817819e-01, -5.857813958726784e-01, -6.124213335446971e-01, -5.989053777922063e-01, -6.131917024077069e-01, -7.311005558011839e-01, -2.450347415879347e-01, -2.965926630127940e-01, -4.146942934753899e-01, -3.413303018207768e-01, -3.413303018207767e-01, -5.357151145618320e-01, 6.422128783443087e-02, 3.479655468635917e-02, -3.722810387451901e-01, -9.622678929342773e-02, -3.305751053763890e-02, 7.804047422594314e-02, 5.113788256232536e-04, 5.514526987711189e-03, -3.272831200830363e-02, 1.490932623410465e-02, 1.490932623411083e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_r2scan0_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_r2scan0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.697324135651291e-09, -4.697371504652093e-09, -4.697541326763934e-09, -4.696775574694253e-09, -4.697349341791428e-09, -4.697349341791428e-09, 6.772667425000824e-06, 6.770312782519946e-06, 6.697971192145500e-06, 6.723984094968124e-06, 6.771886390698128e-06, -5.099942204830751e-06, 9.086220315830638e-03, -2.998098159528011e-03, -3.336806364199815e-03, -3.232401837007677e-03, -2.990353181283272e-03, -2.990353181283272e-03, -3.429121664695780e-01, -3.225805764413381e-01, 5.147900886216517e-03, -1.445897730593078e+00, -3.367410051699359e-01, -3.367410051699359e-01, -7.248280179369249e+03, -6.538539580758101e+03, -9.448538367172765e+01, -1.613986723704479e+04, -6.760928015528845e+03, -6.760928015530197e+03, -1.224076575307376e-06, -1.224378523331451e-06, -1.224113936633765e-06, -1.300010816141136e-06, -1.224221292005338e-06, -1.224221292005338e-06, 8.178036351705468e-05, 7.687562259025215e-05, 8.394815692861960e-05, 7.996540185445181e-05, 7.576484774238837e-05, -4.646521179225729e-05, -4.716267962944051e-03, -3.417001619860704e-03, -5.780292036917798e-03, -4.846770465065048e-03, -4.081987398541338e-03, 2.193119190154875e-03, 1.500317574801241e+01, -3.868352275525019e-01, 1.568142139235696e+01, -5.505832733707344e-05, -2.663374372807700e+00, -2.663374372807700e+00, -2.594780824603805e+05, -1.588630062347258e+04, -3.725309997256167e+04, 7.945742379272130e+01, -1.874850536539490e+05, -1.937442378117645e+04, -3.960759889914857e-03, -4.161524801608688e-03, -3.186087982377442e-03, -4.058017377269234e-03, -4.087266405806375e-03, -4.087266405806375e-03, -4.492998633026238e-03, -7.868037146257896e-03, -6.554269994606667e-03, -5.571691511992492e-03, -6.044170767651876e-03, 1.113368991335611e-03, -2.914361970440883e-03, 5.653992177776290e-01, -7.821265132620052e-02, 5.461953054303752e-02, -4.757857859223753e-02, -4.757857859223748e-02, 1.682897348634089e-02, -1.230054466749497e+02, -4.217765288621698e+01, -3.461177647749629e-02, 3.129972180797702e+01, -1.047840041376104e+01, -4.028155191759476e+03, -3.193883662496647e+04, -4.004114556944231e+04, -1.242424238872427e+01, -2.659826852813257e+04, -2.659826852814175e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_r2scan0_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_r2scan0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.318349585680660e-03, 1.318340837921342e-03, 1.318300086888966e-03, 1.318442752164797e-03, 1.318344994380975e-03, 1.318344994380975e-03, 4.122170402706214e-03, 4.123488572690725e-03, 4.163093866705173e-03, 4.147411246502686e-03, 4.122517111640311e-03, 3.711534162172800e-03, 3.437735462474602e-03, 1.589391301874771e-02, 1.622668374191972e-02, 1.613527346560958e-02, 1.588599777296091e-02, 1.588599777296091e-02, 4.225388802279585e-02, 4.160991324560281e-02, 1.093498650242688e-03, 5.959310528508435e-02, 4.206388345739205e-02, 4.206388345739205e-02, 1.234295637820789e-01, 1.279781425968113e-01, 1.266409339088354e-01, 3.033526209581078e-02, 1.282579372185048e-01, 1.282579372185300e-01, 2.881946211852679e-03, 2.883533441296373e-03, 2.882123438121776e-03, 4.394688834535147e-03, 2.882737105939747e-03, 2.882737105939747e-03, 5.371993639425439e-03, 5.660936665479289e-03, 5.244689019682994e-03, 5.472980771514329e-03, 5.738638079829446e-03, 6.229231933567663e-03, 1.747154285386987e-02, 1.608239211975064e-02, 1.830449601417472e-02, 1.747511914029305e-02, 1.689145134620621e-02, 2.269356293957100e-02, -4.332936582957078e-05, 4.484782769684541e-02, -4.987459483523043e-05, 6.754654869432571e-03, 6.728818958934771e-02, 6.728818958934771e-02, -1.366766933962058e-07, 3.999536174832194e-02, 3.979917654093273e-02, -2.900164311333818e-05, -1.549440655545931e-07, 3.694489676126045e-02, 1.548399564366432e-02, 1.622103409033872e-02, 1.603666780576837e-02, 1.584441716943440e-02, 1.595238239855883e-02, 1.595238239855883e-02, 1.608870338325185e-02, 1.931945416904470e-02, 1.836086145184390e-02, 1.742791190315871e-02, 1.790491791965834e-02, 2.147891409640917e-02, 1.572611348000673e-02, 2.572292252892381e-03, 3.158578662146923e-02, 3.108610854517004e-02, 2.821481928550109e-02, 2.821481928550105e-02, 3.008817791302116e-02, 1.304458473433392e-01, 1.123068211647535e-01, 2.582961376108871e-02, -6.706332560109423e-05, 8.831362709066135e-02, 1.100920236720107e-01, 1.743574638966953e-03, 1.437757157178277e-02, 9.109863757592807e-02, 3.122201290500509e-02, 3.122201290501551e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
