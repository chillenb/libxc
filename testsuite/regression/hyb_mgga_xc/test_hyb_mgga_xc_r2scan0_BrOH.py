
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_r2scan0_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_r2scan0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.741244608145331e+01, -1.741249117382095e+01, -1.741274716994411e+01, -1.741200979460545e+01, -1.741246937602959e+01, -1.741246937602959e+01, -2.597047229203282e+00, -2.597132035804583e+00, -2.599870203141430e+00, -2.600433407799121e+00, -2.597073780547047e+00, -2.597073780547047e+00, -4.828868190069211e-01, -4.822855181101278e-01, -4.673751347587005e-01, -4.751186982561681e-01, -4.826731703027887e-01, -4.826731703027887e-01, -1.582126367076172e-01, -1.601866895326223e-01, -5.482309254452048e-01, -1.003896003465209e-01, -1.587557149970037e-01, -1.587557149970037e-01, -5.508202054141370e-03, -5.839019929323990e-03, -2.968043955544986e-02, -2.048673122108879e-03, -5.783662585939623e-03, -5.783662585939623e-03, -4.275544206039461e+00, -4.276354700614517e+00, -4.275639479649357e+00, -4.276269050838582e+00, -4.275943084233425e+00, -4.275943084233425e+00, -1.580884507069759e+00, -1.597386631181692e+00, -1.578711261119692e+00, -1.591721917138025e+00, -1.595005268512067e+00, -1.595005268512067e+00, -4.835399370893121e-01, -5.264974015490599e-01, -4.511841823169740e-01, -4.734276439475775e-01, -5.052019328039146e-01, -5.052019328039146e-01, -7.182774793572523e-02, -1.546993233709074e-01, -7.141344626970886e-02, -1.488591304349907e+00, -8.701994201763773e-02, -8.701994201763773e-02, -1.964461638979819e-03, -2.345596063360393e-03, -1.773082175809689e-03, -4.318618803669964e-02, -2.154001782759936e-03, -2.154001782759936e-03, -5.122940650523291e-01, -5.093546476880145e-01, -5.104054074877747e-01, -5.112187081692245e-01, -5.108109420782100e-01, -5.108109420782100e-01, -4.955776883779934e-01, -4.295641681500995e-01, -4.489226938632919e-01, -4.668021689874051e-01, -4.576210476358084e-01, -4.576210476358084e-01, -5.461911833541717e-01, -1.981272541261530e-01, -2.332257944280197e-01, -2.939392156926465e-01, -2.632313816704617e-01, -2.632313816704617e-01, -3.817914770587612e-01, -2.692995593363087e-02, -3.805898855069283e-02, -2.809486802606347e-01, -5.874982765602565e-02, -5.874982765602565e-02, -6.545995636687302e-03, -4.252334056798610e-04, -1.014384719283890e-03, -5.632534903324173e-02, -1.801030701534278e-03, -1.801030701534268e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_r2scan0_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_r2scan0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.265114019778676e+01, -2.265121061111154e+01, -2.265155741874010e+01, -2.265040483768577e+01, -2.265117704384443e+01, -2.265117704384443e+01, -3.675009472102272e+00, -3.675071482003009e+00, -3.676973811794173e+00, -3.675506241971114e+00, -3.675050328278847e+00, -3.675050328278847e+00, -6.885236457888569e-01, -6.874546261608170e-01, -6.611477377264977e-01, -6.714594903447680e-01, -6.881434853166879e-01, -6.881434853166879e-01, -1.974632819449600e-01, -2.019716995599312e-01, -7.502923933869432e-01, -1.467788590152882e-01, -1.988231174219670e-01, -1.988231174219670e-01, -8.841490141924827e-03, -9.690811616491721e-03, -4.729810272883634e-02, -3.762140441610194e-03, -9.380223907403888e-03, -9.380223907403912e-03, -5.589346019633461e+00, -5.591059480559205e+00, -5.589526612191899e+00, -5.590858662697051e+00, -5.590217567422348e+00, -5.590217567422348e+00, -1.958241198545212e+00, -1.983205000121951e+00, -1.950188590990591e+00, -1.970466615661435e+00, -1.985782867703303e+00, -1.985782867703303e+00, -6.490506148049310e-01, -7.148489504805485e-01, -6.209420237704839e-01, -6.543953336286881e-01, -6.733002929780059e-01, -6.733002929780059e-01, -1.054199883255008e-01, -1.662520920118372e-01, -1.044606009898888e-01, -2.152114904107560e+00, -1.089351410088405e-01, -1.089351410088405e-01, -3.610243094693077e-03, -4.287829205975374e-03, -3.250601089504036e-03, -6.795446329697899e-02, -3.940258453068629e-03, -3.940258453068628e-03, -6.770570794587190e-01, -6.718609469352216e-01, -6.737669983640541e-01, -6.752098801296894e-01, -6.744920938794117e-01, -6.744920938794117e-01, -6.566332875370314e-01, -5.564770219601569e-01, -5.865026681127208e-01, -6.136021833718237e-01, -6.000016711764626e-01, -6.000016711764626e-01, -7.505439323799620e-01, -2.351208783552290e-01, -2.918460365065838e-01, -3.959479547796412e-01, -3.417558370423336e-01, -3.417558370423337e-01, -5.020631464470474e-01, -4.176314263926148e-02, -5.975625165949938e-02, -3.818823955566741e-01, -8.591120938456653e-02, -8.591120938456659e-02, -1.150787643304059e-02, -8.081759085750577e-04, -1.893789254868062e-03, -8.334956443028640e-02, -3.306253306733278e-03, -3.306253306733267e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_r2scan0_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_r2scan0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.637638864370644e-09, -4.637599253019270e-09, -4.637238217848299e-09, -4.637879632283867e-09, -4.637619655984262e-09, -4.637619655984262e-09, -1.000874847574593e-05, -1.000965644073996e-05, -1.003536070495285e-05, -1.002734283020137e-05, -1.000878170433527e-05, -1.000878170433527e-05, -1.888969053165944e-03, -1.886952870905343e-03, -1.889700750178102e-03, -2.169946403850115e-03, -1.888641133287458e-03, -1.888641133287458e-03, -5.335912970986254e-01, -5.054615815961153e-01, -1.924931728809910e-04, 6.649909232012297e-02, -5.264771670656480e-01, -5.264771670656480e-01, 5.064352174371123e+00, 3.977410508557585e+01, 2.712601041365136e+00, 3.638058988589849e+02, 1.718245658459284e+01, 1.718245658459577e+01, -1.229657529485396e-06, -1.229910013854609e-06, -1.229618649619970e-06, -1.229818480078868e-06, -1.229872802490274e-06, -1.229872802490274e-06, -6.774089138529836e-05, -6.295086481790015e-05, -6.667579279242658e-05, -6.274980754825792e-05, -6.575730452560116e-05, -6.575730452560116e-05, -6.836840833664736e-03, -4.214930197184482e-03, -8.775153210194200e-03, -7.153426897052942e-03, -5.584498428059592e-03, -5.584498428059592e-03, -1.618247372431009e-02, -6.484269574969679e-01, -5.571119489591247e-02, -9.929115363157531e-05, -1.487956359007234e+00, -1.487956359007234e+00, 4.006055902426292e+02, 3.158389272600862e+02, 9.642483940275450e+02, 1.717004222026594e+00, 4.668441937799612e+02, 4.668441937799610e+02, -3.786683453315626e-03, -4.266886772186049e-03, -4.124252686424195e-03, -3.990350359106901e-03, -4.059735503519617e-03, -4.059735503519618e-03, -4.010274512316505e-03, -8.550174029741817e-03, -7.184476560040958e-03, -6.168011238029684e-03, -6.662853248916328e-03, -6.662853248916327e-03, -3.849329015845935e-03, -2.161432229991154e-01, -1.217027859914397e-01, -4.526650390450927e-02, -7.339321134004251e-02, -7.339321134004247e-02, -1.704785362789566e-02, 9.901072282379135e-01, 1.493557851455954e+00, -4.711732106272297e-02, -2.089068060325572e-01, -2.089068060325481e-01, 7.128865003344470e+01, 4.107233801588249e+03, 1.256562177094188e+03, 3.827273474153192e-02, 7.764162775327752e+02, 7.764162775327782e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_r2scan0_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_r2scan0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_r2scan0_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_r2scan0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [7.476425295053829e-04, 7.476412186548262e-04, 7.476140789685383e-04, 7.476345041336334e-04, 7.476420350338983e-04, 7.476420350338983e-04, 6.421435252299618e-03, 6.422197642897943e-03, 6.445131483702117e-03, 6.444292276348514e-03, 6.421562319606167e-03, 6.421562319606167e-03, 1.043269647557521e-02, 1.039448824053747e-02, 9.743399291298244e-03, 1.127605912988890e-02, 1.042086502995132e-02, 1.042086502995132e-02, 6.268475853901420e-02, 6.235371767578207e-02, 1.893777532046685e-03, 7.355864606463368e-03, 6.276087834681035e-02, 6.276087834681035e-02, 1.796597235026723e-03, 1.219736641491773e-03, 1.424368327107225e-03, 3.037873653060256e-07, 1.681302663298993e-03, 1.681302663298939e-03, 2.892247063812343e-03, 2.893733928050472e-03, 2.892282639582216e-03, 2.893445312334365e-03, 2.893163433246825e-03, 2.893163433246825e-03, 8.545419308146479e-03, 8.144802365184806e-03, 8.361023771880688e-03, 8.029066573417060e-03, 8.503133766619857e-03, 8.503133766619857e-03, 2.518948012131395e-02, 2.206051602523185e-02, 2.857882614189667e-02, 2.618740922652150e-02, 2.281603889532586e-02, 2.281603889532586e-02, 7.669482246062499e-03, 7.159491584172262e-02, 8.726300723253168e-03, 1.207717789389307e-02, 4.241244497588149e-02, 4.241244497588149e-02, 1.364129664982404e-06, 7.758242718063693e-07, 3.229125815298395e-06, 5.897436207179976e-04, 3.691936494973582e-07, 3.691936494973557e-07, 1.557045474720264e-02, 1.681119777387721e-02, 1.647335047834121e-02, 1.612881878388042e-02, 1.631050980178482e-02, 1.631050980178482e-02, 1.622261722716365e-02, 2.078789067642667e-02, 1.995459149924110e-02, 1.904418177103876e-02, 1.957911402290227e-02, 1.957911402290224e-02, 2.299056040637183e-02, 4.917195141030652e-02, 4.703565880874415e-02, 3.925524922779460e-02, 4.219035699843024e-02, 4.219035699843021e-02, 3.003302221857667e-02, 3.183923000710531e-03, 1.711413881407634e-03, 3.779889915003364e-02, 9.844971951478196e-03, 9.844971951478128e-03, 4.364466565305910e-06, -1.145077798352444e-08, 1.298741316105995e-06, 8.584992133259750e-03, 2.279231343541083e-07, 2.279231343541905e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
