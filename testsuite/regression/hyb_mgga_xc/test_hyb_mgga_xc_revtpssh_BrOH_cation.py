
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_revtpssh_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_revtpssh", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.807812194810369e+01, -1.807817642527505e+01, -1.807843227975636e+01, -1.929244717024228e+01, -1.926736307539955e+01, -2.054540717554038e+01, -3.158849247520220e+00, -3.361810456007012e+00, -3.361930451433957e+00, -3.362183298264725e+00, -3.361811252585994e+00, -3.159120642023041e+00, -6.369663869072475e-01, -6.494252719692617e-01, -6.642168175886269e-01, -6.256051091117418e-01, -6.261759706409455e-01, -6.675884945559968e-01, -1.767455131037318e-01, -1.873006083672134e-01, -7.567617245605991e-01, -1.586743743719876e-01, -1.775643106929946e-01, -1.714804766181438e-01, -9.092277328385105e-03, -7.814336018449596e-03, -4.213131014199213e-02, -5.245768358915858e-03, -7.319541607635901e-03, -7.319541607635903e-03, -5.076074190577521e+00, -5.053959152788563e+00, -5.052929080273291e+00, -5.053887171528445e+00, -4.780482641156975e+00, -4.760568385486458e+00, -1.916970971251916e+00, -1.929813898107379e+00, -1.897218228978898e+00, -1.908238550437265e+00, -1.824147605817911e+00, -1.928590035981195e+00, -5.667447377653450e-01, -6.511327239557331e-01, -5.478998092188274e-01, -5.732278357167911e-01, -5.794136928875870e-01, -6.056080269356368e-01, -1.221045226762258e-01, -1.788671821364660e-01, -1.151975858425982e-01, -1.877495051368484e+00, -1.359880588973372e-01, -1.359880588973372e-01, -3.253515947638465e-03, -5.128196126813630e-03, -3.926601490357013e-03, -6.504543059721005e-02, -4.932125699103924e-03, -4.932125699103924e-03, -6.100773233889023e-01, -6.061247738456287e-01, -5.598323861201314e-01, -5.879128842969342e-01, -5.604090345761745e-01, -5.870972600093460e-01, -6.078273138477597e-01, -4.878762952123991e-01, -5.046835858550013e-01, -5.553422121437253e-01, -5.413018810394211e-01, -5.182230779511040e-01, -6.569558233289617e-01, -2.415643046055432e-01, -2.608869680631813e-01, -3.407732875353160e-01, -3.181620089295048e-01, -2.974631675968824e-01, -4.603077442026173e-01, -4.328466231587529e-02, -6.651280780045968e-02, -3.536093319885520e-01, -9.848145239596363e-02, -9.848145239596362e-02, -1.239698699017617e-02, -1.370958104312587e-03, -3.029002958763079e-03, -8.134169083005816e-02, -4.529545087815710e-03, -3.068426021809431e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_revtpssh_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_revtpssh", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.429782656250694e+01, -2.429783350676924e+01, -2.429790997524308e+01, -2.429789434357091e+01, -2.429819137052616e+01, -2.429829197961843e+01, -2.428822830087625e+01, -2.494926191908984e+01, -2.425871496584327e+01, -2.492786665190527e+01, -2.487396205256696e+01, -2.487358435783415e+01, -4.145629177908843e+00, -3.911547853461236e+00, -4.112889873989501e+00, -4.112763132731101e+00, -4.114787311704862e+00, -4.115055237975999e+00, -4.117535542797156e+00, -4.117594456559486e+00, -4.112421040469843e+00, -4.115717953937880e+00, -3.911278877990723e+00, -4.148903388018658e+00, -8.155666039719909e-01, -8.171580233062874e-01, -8.241613660915829e-01, -8.042576779268114e-01, -7.289837711450926e-01, -7.227285913184692e-01, -7.621888968472001e-01, -7.862951345958121e-01, -8.178968103491069e-01, -7.869251429647762e-01, -7.690030547514383e-01, -7.057634561596573e-01, -2.221784375692676e-01, -2.298349250205134e-01, -2.480430530629757e-01, -2.365816412987193e-01, -8.178026098298791e-01, -9.371868400308289e-01, -1.579464799090318e-01, -1.514267161353205e-01, -1.773349574138905e-01, -1.450220607315024e-01, -1.767341215056927e-01, -1.175436099678153e-01, -1.170279780141153e-02, -1.243118250244657e-02, -7.053945014593562e-03, -1.312650924181145e-02, -3.942700080703464e-02, -6.743871216420805e-02, -7.047719960881977e-03, -6.930446540158586e-03, -1.044595233258217e-02, -5.951541237105789e-03, -1.044595233258217e-02, -5.951541237105791e-03, -6.113928366582209e+00, -6.112517885633704e+00, -6.061622455378538e+00, -6.060193418351356e+00, -6.061902590502148e+00, -6.060472589704861e+00, -6.061639102284118e+00, -6.060198048471696e+00, -6.036039559149997e+00, -6.120669779140868e+00, -6.124231559529117e+00, -6.030539732429958e+00, -2.332076258383893e+00, -2.332804328377726e+00, -2.358287459427629e+00, -2.358236698097963e+00, -2.282138456289166e+00, -2.288394863230753e+00, -2.305439574141256e+00, -2.311772168515399e+00, -2.382283979781187e+00, -2.261906773896745e+00, -2.362968115416637e+00, -2.349355389697739e+00, -7.816592561030808e-01, -7.382208925656641e-01, -8.151795044410308e-01, -8.136133982672322e-01, -6.905908884484264e-01, -7.094162212807851e-01, -7.203033883928146e-01, -7.363008016547919e-01, -8.052126077837251e-01, -7.334960805380250e-01, -7.800820863527410e-01, -7.501202963709115e-01, -1.313760187806991e-01, -1.319584076987090e-01, -2.220676853260120e-01, -2.142606423637145e-01, -1.284429978226355e-01, -1.301546318125828e-01, -2.332978168097394e+00, -2.331883274888489e+00, -1.457179425585724e-01, -1.401681211772245e-01, -1.457179425585723e-01, -1.401681211772245e-01, -3.035611630559021e-03, -5.496882511984312e-03, -6.781682959370856e-03, -6.884491374514177e-03, -5.069302823108597e-03, -5.367511135188588e-03, -9.869449381303697e-02, -6.661058208825975e-02, -5.180693427129534e-03, -7.106196214820837e-03, -5.180693427129528e-03, -7.106196214820834e-03, -7.418926331385246e-01, -7.441921570128560e-01, -7.406357279703185e-01, -7.428027674984878e-01, -7.347239624054532e-01, -7.368007306997925e-01, -7.429186934240577e-01, -7.401076080935671e-01, -7.352630155032325e-01, -7.373324998431821e-01, -7.426049457874866e-01, -7.406560569292435e-01, -7.186614138265426e-01, -7.202675370171601e-01, -6.567248460050106e-01, -6.259963339708867e-01, -6.890887555730205e-01, -6.597830641233932e-01, -6.807837865477883e-01, -6.826414808455856e-01, -6.745553108762780e-01, -6.763495171758339e-01, -6.978662748475526e-01, -6.748014410665213e-01, -8.643407009930641e-01, -8.393625685836033e-01, -2.642751587514056e-01, -2.654501022704643e-01, -3.372703660962139e-01, -3.382518266480840e-01, -4.454501572211606e-01, -4.779109566910929e-01, -3.974359136832466e-01, -3.976261095720106e-01, -4.097336596498628e-01, -3.928399910312825e-01, -5.887185426839855e-01, -5.914675019892515e-01, -5.620886306210143e-02, -5.626853876786349e-02, -8.192339366202539e-02, -8.370600653340790e-02, -4.568708280243809e-01, -4.636070940139409e-01, -1.104857727909646e-01, -1.079468902354975e-01, -1.104857727909645e-01, -1.079468902354975e-01, -1.622259991180150e-02, -1.623505370742068e-02, -1.825780223521040e-03, -1.829952128611175e-03, -4.000921937148758e-03, -3.991676008207620e-03, -1.051522398713701e-01, -1.056163596222049e-01, -4.906090239454995e-03, -6.514940564019075e-03, -4.906345537588116e-03, -3.743132789766850e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_revtpssh_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_revtpssh", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.066222816993208e-09, 1.629376480207870e-08, -4.067846159274045e-09, -4.066384826949508e-09, 1.629358312014037e-08, -4.067988429083591e-09, -4.066927395780807e-09, 1.629271936518581e-08, -4.068611742660477e-09, -1.281816631262173e-08, 1.671724604258341e-09, -3.276902200990542e-08, -1.164447588493122e-08, 1.021083514440385e-09, -3.310232506070288e-08, -3.347247326780251e-08, 1.800545437495687e-10, -3.347751329549127e-08, -1.178357351920046e-05, 1.944070486464002e-06, -7.288772205267957e-06, -1.225460977810187e-05, -2.091483083279312e-07, -1.225051823226900e-05, -1.232535010562591e-05, -2.038165804860399e-07, -1.233906920643043e-05, -1.223697867878585e-05, -8.828025382856523e-08, -1.223638406856207e-05, -1.224430688936834e-05, -2.057436850888355e-07, -1.236541499411926e-05, -7.279881017367811e-06, 1.965406163474694e-06, -1.188826961765933e-05, 5.283312967778703e-03, 1.593554594209663e-02, 5.231778700611291e-03, -1.068456063018809e-03, 5.376048548055394e-03, -2.952139256124221e-03, -4.418047630096171e-03, -1.203658593385988e-03, -4.467768046063704e-03, -4.295685867866702e-03, 1.907310715027967e-03, -9.922792541236154e-04, 5.952169990605683e-03, 1.733099609665300e-02, 6.197311359173603e-03, -4.258348219186254e-03, -1.248861662457695e-03, -4.469450295739624e-03, 5.005597410388574e-01, 1.668824615808100e-01, -2.930405108541815e-01, 2.595569340129633e-01, 1.649735536749783e+00, -1.266764192418949e-01, -2.008072105712474e-03, 4.535960356331582e-04, -4.222578339294111e-04, -5.309083032919137e-01, -1.305777274132972e+00, -7.462431928182579e-01, -9.202421791422601e-01, 8.406341965815092e-02, -1.597445112644096e+00, -9.197542184217479e-01, 6.497732393802749e-02, 3.564946727811114e-01, -6.655468661952876e+00, 1.860500329448588e-01, -6.681234427031939e+00, 5.705126279210490e+04, 1.230511158450757e-01, -7.024051319725658e+00, 5.442966440833578e+01, 3.919738738401829e-01, -3.095512025070790e+00, -4.917486786460977e+00, 5.119595985886337e-02, -4.968147888555409e+00, -6.410895471144678e+00, 4.682834396234413e-04, -1.098146646618736e+01, -6.410895471144626e+00, 4.682834389747207e-04, -1.098146646618429e+01, -1.458526152417986e-05, 1.170906049690044e-06, -1.460078564399323e-05, -1.516538807079955e-05, 3.192039946832406e-07, -1.517640976765023e-05, -1.503602286673609e-05, 3.164833296848927e-07, -1.504794702705580e-05, -1.515525522886706e-05, 3.190311349431364e-07, -1.517010743229700e-05, -3.720577323442769e-06, 1.944698896490428e-06, -1.427494960533221e-05, -1.443544122368743e-05, 1.627399191249370e-06, -5.131568444735242e-06, -9.449728495425553e-05, 2.538043085666142e-05, -9.488673230105794e-05, -9.480659783958777e-05, 2.565425513882526e-05, -9.519329719417455e-05, -9.621444333334379e-05, -6.268871729343174e-06, -9.686566480442462e-05, -9.652798384938723e-05, -5.871040726233584e-06, -9.723969593011949e-05, -8.054742125150185e-05, 5.480678363158535e-05, -5.922138670934344e-05, -9.513176809432147e-05, 2.567253352884153e-05, -9.503156546952010e-05, -1.785619781819809e-02, 1.574228404862494e-02, -1.548348118134580e-02, -3.753096065889871e-02, 1.056623897376521e-02, -4.004035821972089e-02, -1.574562673840279e-02, -2.321184031989865e-03, -1.936701595251657e-02, -2.510781904522175e-02, -3.519558597442427e-05, -2.820001383564835e-02, -2.060559883604127e-02, 1.453378883093494e-02, -1.901896652379641e-02, -2.518122522093653e-02, 3.763662002589974e-04, -2.447209817435488e-02, -6.451519219756390e-01, -2.176782752133062e+00, -6.926232144934461e-01, 2.100965471633214e-01, 1.675033814870192e-01, -3.739018452839970e-01, -1.707338248240091e+00, 7.503196037634970e-01, -1.741360989548678e+00, -2.843312047494450e-04, 9.032692903023667e-06, -2.851959824119585e-04, -1.531924042638002e+00, 1.252714873347383e+00, -1.932530869916924e+00, -1.531924042638004e+00, 1.252714873347384e+00, -1.932530869916924e+00, 1.669631681610715e+06, 1.301018781941073e-02, -3.302163963982419e+00, -4.687133287237129e+00, 5.309483740475794e-03, -4.131209686497609e+00, -3.346847709850764e+01, 5.963006179605165e-01, -3.676714965161777e+01, -1.946047894208810e+00, -3.120571556825178e-01, 6.392907640226978e+00, -6.293046199331709e+00, 1.388064188136081e-01, -2.013471947607710e+01, -6.293046199336294e+00, 1.388064188036550e-01, -2.013471947608272e+01, -3.324957496034544e-01, 1.502728786165823e-01, -3.385097709429743e-01, -1.647921179421194e-01, 6.734777219899589e-02, -1.664188318338446e-01, -3.562877716706390e-02, 2.691801335343144e-02, -3.588867298925628e-02, -2.800918587462149e-02, 7.112445453610880e-02, -2.620458317399738e-01, -3.956293974759839e-02, 2.682963159207928e-02, -3.983997444460162e-02, -2.613273714691556e-02, 6.541623571486846e-02, -2.350139013276938e-01, -3.494797095811790e-01, 8.414542278979339e-02, -3.565986956599976e-01, -2.313837039473931e-02, 3.976930705014580e-02, -1.041357362486996e-02, -3.942979015731636e-02, 3.163650497761303e-02, -2.359450920007459e-02, -8.717725637250089e-02, 5.046316164940133e-03, -8.694741199775995e-02, -6.322419446331708e-02, 2.870578062769851e-03, -6.340105212801189e-02, -5.253000851835776e-02, 3.369386267377470e-02, -2.231177174886208e-02, -2.142692051487191e-02, 1.376498816879428e-02, -6.213223576154433e-03, -2.562714187517360e-01, 2.751870563873130e-01, -2.500149350945536e-01, 3.881764032930897e-02, 1.215529829106602e-01, -9.637810338434799e-02, -7.957289210587096e-02, 9.150429863596467e-02, -3.738201109179176e-02, -8.417508930869225e-02, 1.388331693872815e-01, -8.505930199960655e-02, -4.815969628998898e-02, 1.405811510504613e-01, -1.156170545055705e-01, -2.881721134415554e-02, -7.973733046073754e-03, -3.064752769975043e-02, 9.791828294760153e+02, 1.841223872809472e+03, 9.775855377941131e+02, 4.077217119880596e+00, -1.205471936543985e+01, 2.781338718455975e+00, -8.086728045752939e-02, 1.363614990795936e-01, -1.041273635220038e-01, 7.396566256253156e-01, -6.310852968897191e+00, -9.411664016982684e-01, 7.396566256250625e-01, -6.310852968896760e+00, -9.411664016984660e-01, 2.111509325762414e+05, 3.894818486604167e+05, 2.089668909786876e+05, -4.185774628633470e+01, 7.243715217552638e+01, -4.133793145845946e+01, 7.979580470168371e+07, 1.458508990016713e+08, 7.829398131450418e+07, 6.212523522221951e+01, 1.202752485912630e+02, 6.182285031542078e+01, -1.641221234672114e+01, 2.205097036059373e-02, -2.094156409885332e+01, -1.419682535027211e+01, 4.445794109496777e+00, 7.212389257323374e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_revtpssh_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_revtpssh", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.397647587897329e-04, 1.397938437603123e-04, 1.397685503618367e-04, 1.397965913578012e-04, 1.397789985904898e-04, 1.398120234840402e-04, 1.352186350800484e-04, 2.657386041110279e-03, 1.238276663027736e-04, 2.646551149553462e-03, 2.662202349474469e-03, 2.662490697910279e-03, 3.757019276741991e-03, -5.648285196766952e-04, 3.885497403833883e-03, 3.883433351243339e-03, 3.920454558023878e-03, 3.926784696063658e-03, 3.868129107063120e-03, 3.868122900491297e-03, 3.879977521292171e-03, 3.939384518710535e-03, -5.655736604630297e-04, 3.812691955218108e-03, -1.739296091349940e-03, -1.819991493858547e-03, -2.034159931849186e-03, 5.465853770166329e-03, 4.405278346643850e-03, 4.237305406506517e-03, 4.341907594831354e-03, -2.054695523623683e-03, -1.862673135035818e-03, -1.161728620562362e-03, 5.985968807970156e-03, 3.642604254717227e-03, -4.105419308236182e-03, 8.568863740219413e-03, -4.559691845678862e-03, 9.591243321825267e-03, 1.099191979936899e-03, -7.604805234974069e-04, 2.153308089127279e-03, 2.555012709940961e-03, 7.212824383794447e-03, 1.015408364830460e-04, 7.212824383794446e-03, -8.597968464734870e-05, -1.436365403999680e-09, -1.351078639133525e-09, -8.217922233519388e-08, -2.624225615068197e-08, -1.725448680824282e-05, -1.160629313236972e-05, -7.690002672445695e-11, -7.765863051756469e-11, 1.219869019898988e-10, 1.622232293828744e-11, 1.219869019898988e-10, 1.622232293828680e-11, 1.705197502456813e-02, 1.705711097694127e-02, 1.732098813932544e-02, 1.732072558700058e-02, 1.717049940550087e-02, 1.717140627559244e-02, 1.730915767022074e-02, 1.731331162762601e-02, 6.346110100709700e-04, 1.717330765881029e-02, 1.690387224883373e-02, 3.676154177849318e-04, 4.894714844827893e-03, 4.928416020264542e-03, 5.191756686480014e-03, 5.217542881117240e-03, 4.815225912396642e-03, 4.920475680642255e-03, 5.067479188001249e-03, 5.179572950161932e-03, 5.226200119292203e-03, -1.089958267158891e-03, 5.268405264114023e-03, 5.109902457144826e-03, 4.151837660009160e-02, -2.462104860268105e-03, 7.755383566510901e-02, 8.231472600087505e-02, 2.683049124290475e-02, 3.424619991573775e-02, 4.470206897822514e-02, 5.254153949601954e-02, 5.109381635369781e-02, -3.084067590986709e-03, 5.553376895624935e-02, 4.809803552418846e-02, 1.101923296865159e-04, 1.154264865430555e-04, -1.903982635940781e-03, 1.732817553016325e-03, 4.171260362979878e-05, 7.231264656951404e-05, 1.754298863261409e-02, 1.756887649409545e-02, 2.617842060832706e-04, 7.830762950959976e-04, 2.617842060832700e-04, 7.830762950959980e-04, -2.448272770691970e-09, -1.827115412547391e-10, 8.685858313781919e-12, 7.747987399016053e-12, -4.243633862068879e-10, -4.033926454673164e-10, -5.998242227744705e-05, -1.005189823415964e-04, -5.543090224677916e-10, -4.588220948088756e-10, -5.543090224677921e-10, -4.588220948089808e-10, 4.161197468436738e-01, 4.333865438099079e-01, 2.149746875307812e-01, 2.210540217080802e-01, 6.993541237676258e-03, 6.973558760647126e-03, -3.315189546545303e-02, 4.364569921496262e-01, 7.012850444999715e-03, 6.991267330680234e-03, -2.863058770408161e-02, 3.922370089795855e-01, 5.300373404530704e-01, 5.463670701551077e-01, 3.925735070201637e-02, -2.074388826464634e-03, 5.980614103152272e-02, -2.072930574988896e-03, 1.180192323769528e-01, 1.188508817296844e-01, 8.522918814544435e-02, 8.619491076151681e-02, 7.880093194569820e-02, -1.782903197295432e-03, 6.788009168842139e-02, 2.737903675644260e-03, 5.408814434110790e-03, 5.539012476672722e-03, -5.917497790536290e-03, 8.946849665749646e-03, -9.591165865441703e-03, 2.312579780275089e-02, 1.777883383689855e-02, 1.802116515552457e-02, 1.527915192270118e-02, -9.413436920198720e-03, 3.159922278349464e-02, 3.349085588333221e-02, -4.683022679463971e-06, -4.684929632640156e-06, 2.442099717781582e-06, 3.111731687889119e-06, 3.618387138604637e-02, 4.754543560973284e-02, 5.634775390378104e-05, 1.106491927493673e-04, 5.634775390378121e-05, 1.106491927493673e-04, -6.573377023087524e-08, -7.210119742741973e-08, 1.504567562269961e-14, 1.511815255775437e-14, -3.257247036028644e-09, -4.152008647339269e-09, -6.532383291311264e-05, -7.785999856471002e-05, 1.127745439012966e-11, 6.756403112001538e-11, -4.429324027478039e-09, -2.920370756082992e-08])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
