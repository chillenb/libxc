
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_revtpssh_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_revtpssh", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.037063532262249e+01, -2.037069680790472e+01, -2.037107997087188e+01, -2.037016840132388e+01, -2.037063031539887e+01, -2.037063031539887e+01, -3.100482887483133e+00, -3.100500260696866e+00, -3.101153068080948e+00, -3.102511050096178e+00, -3.101487336043149e+00, -3.101487336043149e+00, -6.183819156662249e-01, -6.178534567494830e-01, -6.067760020112936e-01, -6.129378452162171e-01, -6.139321989675582e-01, -6.139321989675582e-01, -1.864207159281487e-01, -1.882596775555967e-01, -7.104405129783213e-01, -1.535737354541327e-01, -1.770558362799758e-01, -1.770558362799757e-01, -9.092168057535087e-03, -9.573536885374738e-03, -5.153877327923627e-02, -5.245591259738407e-03, -7.319316643290077e-03, -7.319316643290078e-03, -5.048568940372711e+00, -5.049667308937834e+00, -5.048712011050871e+00, -5.049678314921196e+00, -5.049078051408412e+00, -5.049078051408412e+00, -1.880366316342287e+00, -1.896630028587853e+00, -1.875203536941149e+00, -1.889593091823490e+00, -1.891885211910467e+00, -1.891885211910467e+00, -5.709118862755496e-01, -6.049911866158271e-01, -5.195526862956253e-01, -5.327167865391514e-01, -5.811933977000021e-01, -5.811933977000021e-01, -1.199018947535771e-01, -1.947561631141326e-01, -1.125557237064482e-01, -1.700124367418103e+00, -1.319438332308012e-01, -1.319438332308012e-01, -4.050135428840401e-03, -5.127827975236128e-03, -3.926369295491465e-03, -7.994115666161468e-02, -4.931908825458132e-03, -4.931908825458131e-03, -5.828150579522013e-01, -5.924195436853337e-01, -5.907731793668883e-01, -5.882754011366673e-01, -5.896785424160154e-01, -5.896785424160154e-01, -5.529655201155376e-01, -4.986498858637913e-01, -5.238601575097782e-01, -5.464325573942176e-01, -5.351359275434925e-01, -5.351359275434925e-01, -6.291663427082576e-01, -2.348314945788323e-01, -2.718722604354701e-01, -3.456340823306060e-01, -3.064420445773642e-01, -3.064420445773642e-01, -4.512166352700913e-01, -4.941504765885624e-02, -6.617492192839376e-02, -3.360245509664488e-01, -9.717107996528353e-02, -9.717107996528353e-02, -1.280677331081659e-02, -1.370914778507949e-03, -2.882743345503706e-03, -9.240236470562702e-02, -4.529325258367586e-03, -4.529325258367577e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_revtpssh_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_revtpssh", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.457413045024451e+01, -2.457502335515642e+01, -2.457419465703618e+01, -2.457507045406548e+01, -2.457456919110232e+01, -2.457555723143570e+01, -2.457384165286544e+01, -2.457463685414000e+01, -2.457415587409726e+01, -2.457513382542838e+01, -2.457415587409726e+01, -2.457513382542838e+01, -3.898628415861035e+00, -3.898658302602300e+00, -3.898663919561976e+00, -3.898690141047905e+00, -3.899467843228719e+00, -3.899644092285181e+00, -3.898789386002643e+00, -3.898931182364556e+00, -3.897948494792645e+00, -3.899705864462938e+00, -3.897948494792645e+00, -3.899705864462938e+00, -7.936968827735673e-01, -7.983220406157883e-01, -7.915207837434906e-01, -7.972432881091230e-01, -7.560314496031036e-01, -7.477647380174300e-01, -7.578367287080253e-01, -7.604695440849818e-01, -7.956147551895119e-01, -7.198946805687576e-01, -7.956147551895119e-01, -7.198946805687576e-01, -2.021530838641403e-01, -2.099367519161466e-01, -2.064511281355154e-01, -2.158010185966096e-01, -9.205979733447068e-01, -9.565933673165135e-01, -1.473206065476574e-01, -1.495626039099785e-01, -1.871847717672604e-01, -1.551544777409025e-01, -1.871847717672604e-01, -1.551544777409027e-01, -1.170194794305952e-02, -1.243089683305052e-02, -1.225813630264682e-02, -1.312594010313138e-02, -6.384853240926254e-02, -6.683117482492407e-02, -7.046913367490894e-03, -6.929830101165336e-03, -1.044514607725761e-02, -5.950183860450530e-03, -1.044514607725761e-02, -5.950183860450531e-03, -6.082797034229412e+00, -6.081766435602368e+00, -6.082782130716549e+00, -6.081768305440066e+00, -6.082937121164198e+00, -6.081875936345546e+00, -6.082930891084816e+00, -6.081860869548256e+00, -6.082676189402495e+00, -6.081752217980923e+00, -6.082676189402495e+00, -6.081752217980923e+00, -2.266445833884287e+00, -2.268312453962069e+00, -2.295593951301709e+00, -2.296585880003808e+00, -2.252108265307642e+00, -2.256764655178836e+00, -2.278268549941201e+00, -2.283222803198915e+00, -2.291840216278516e+00, -2.286359675949818e+00, -2.291840216278516e+00, -2.286359675949818e+00, -7.252944177814658e-01, -7.242094442997279e-01, -7.954370175919708e-01, -7.957789174130436e-01, -6.611077836404775e-01, -6.811932621645952e-01, -7.010038055569819e-01, -7.185513999101710e-01, -7.520602588378037e-01, -7.192936924802771e-01, -7.520602588378040e-01, -7.192936924802771e-01, -1.258323226880801e-01, -1.255067489309758e-01, -1.920235906480705e-01, -1.925679132128527e-01, -1.190013504227850e-01, -1.213051434423509e-01, -2.268200467140572e+00, -2.267337555824344e+00, -1.340744412984199e-01, -1.268815988715009e-01, -1.340744412984199e-01, -1.268815988715009e-01, -5.288186748666206e-03, -5.495690591300095e-03, -6.780276235214397e-03, -6.882960537391349e-03, -5.068512870815330e-03, -5.366446513569674e-03, -9.323194731180971e-02, -9.405216068864469e-02, -5.178445925416635e-03, -7.105853561052090e-03, -5.178445925416633e-03, -7.105853561052090e-03, -7.339423164263220e-01, -7.362216028217148e-01, -7.287183542497493e-01, -7.310242701122636e-01, -7.294973213753256e-01, -7.318139826805531e-01, -7.308511957110384e-01, -7.331373241470505e-01, -7.300687296667011e-01, -7.323761258274342e-01, -7.300687296667012e-01, -7.323761258274343e-01, -7.198994599799652e-01, -7.215707252951015e-01, -6.372187798088038e-01, -6.393530968870746e-01, -6.624049806584313e-01, -6.643456741161861e-01, -6.787833310611040e-01, -6.805921849531384e-01, -6.703440310417539e-01, -6.725888890446486e-01, -6.703440310417540e-01, -6.725888890446486e-01, -8.315505473328808e-01, -8.327656341158293e-01, -2.488709714732516e-01, -2.500150206949657e-01, -3.150200267633074e-01, -3.179471660886609e-01, -4.408098402727331e-01, -4.423640724080685e-01, -3.813165581537397e-01, -3.810727706931389e-01, -3.813165581537395e-01, -3.810727706931389e-01, -5.714022573261192e-01, -5.759673080568781e-01, -6.296715414132106e-02, -6.333477347105386e-02, -8.067278572759030e-02, -8.252118319108034e-02, -4.280358365228573e-01, -4.371609075966886e-01, -1.064038844783970e-01, -1.043698207923837e-01, -1.064038844783970e-01, -1.043698207923837e-01, -1.670229000900442e-02, -1.730023618043362e-02, -1.825647050193187e-03, -1.829739017713793e-03, -3.713677760169089e-03, -3.949511101272160e-03, -1.017266030985517e-01, -1.027622469058794e-01, -4.903759296919233e-03, -6.514685044158967e-03, -4.903759296919225e-03, -6.514685044158956e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_revtpssh_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_revtpssh", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-3.587711372408777e-08, 4.137752421674432e-10, -3.587925800767998e-08, -3.587814805050268e-08, 4.137959156514671e-10, -3.588000528633217e-08, -3.587960420120193e-08, 4.138636485017018e-10, -3.588262724899605e-08, -3.586803205883214e-08, 4.135577252766283e-10, -3.586780579231958e-08, -3.587787056611314e-08, 4.137214145131014e-10, -3.587233960536486e-08, -3.587787056611314e-08, 4.137214145131014e-10, -3.587233960536486e-08, -1.901877596693878e-05, 1.830868685202216e-06, -1.899914880603362e-05, -1.902579692444619e-05, 1.831300252590909e-06, -1.900226685956390e-05, -1.914572356859140e-05, 1.840632228007089e-06, -1.916349161226454e-05, -1.917034604869087e-05, 1.817626334402292e-06, -1.915520947706385e-05, -1.901652903558524e-05, 1.828739531937997e-06, -1.926375039576679e-05, -1.901652903558524e-05, 1.828739531937997e-06, -1.926375039576679e-05, -5.173583123758387e-03, 2.914729828349963e-03, -5.037369033877757e-03, -5.251626226743706e-03, 2.880427961597886e-03, -5.066370427058842e-03, -6.285018513092168e-03, 1.999079995707396e-03, -6.599989500226573e-03, -6.620158020469166e-03, 1.860368283971522e-03, -6.630659768055627e-03, -5.001831876631843e-03, 2.146688537670531e-03, -7.254328262598426e-03, -5.001831876631843e-03, 2.146688537670531e-03, -7.254328262598426e-03, -3.581744556150608e-01, -9.081976903692015e-01, -3.797680781985027e-01, -3.557026608482479e-01, -8.556081293899371e-01, -3.752647192704422e-01, -1.251216472178340e-03, 1.849921512825119e-03, -7.688982702053698e-04, -1.084660444067564e+00, -1.079844432427480e+00, -1.059500010564448e+00, -7.569015915297789e-01, -1.992447553992418e+00, 4.718542546140926e+00, -7.569015915297765e-01, -1.992447553992431e+00, 4.718542546140977e+00, 2.884241041925117e+01, -5.955384443017093e+01, 1.799482396799932e+01, 3.196037543370020e+01, -6.379208601383374e+01, 1.872429944271829e+01, 1.297893537650085e+00, -8.780568810680476e+00, -1.810004873097530e-01, -1.246799644268155e+00, -1.068251697768020e+01, -5.355498543237163e-01, -6.896510127381796e+00, 1.728097393763841e-02, -1.751250036647717e+01, -6.896510127379520e+00, 1.728097393878810e-02, -1.751250036647204e+01, -1.481515627054722e-05, 9.108579405972851e-07, -1.482591169903418e-05, -1.494928536654892e-05, 9.231946845049818e-07, -1.495539972119180e-05, -1.482267449386291e-05, 9.115703016323654e-07, -1.483027363561793e-05, -1.493756366480672e-05, 9.224533666253058e-07, -1.494805232382258e-05, -1.488362023903491e-05, 9.170107188087312e-07, -1.489072815580172e-05, -1.488362023903491e-05, 9.170107188087312e-07, -1.489072815580172e-05, -1.209178374262546e-04, -2.087522639457555e-06, -1.206792382767300e-04, -1.186473813739597e-04, -2.167303808689901e-06, -1.184881088065662e-04, -1.158627036818574e-04, -3.045747840208180e-06, -1.172776225776118e-04, -1.136451837770304e-04, -3.142128693589001e-06, -1.149981187506011e-04, -1.237504673431297e-04, -1.644521277124424e-06, -1.198447450918748e-04, -1.237504673431297e-04, -1.644521277124424e-06, -1.198447450918748e-04, -3.576719662101477e-02, 8.957752870398680e-03, -3.697906010223274e-02, -3.002795737585827e-02, 1.691950899111335e-02, -3.170593903392169e-02, -3.090348173570963e-02, 1.173564892051987e-02, -3.406640546219439e-02, -1.604757325009384e-02, 2.276842344038334e-02, -1.934758704067328e-02, -3.676657352135154e-02, 9.632882463783351e-03, -3.962416546739977e-02, -3.676657352135154e-02, 9.632882463783358e-03, -3.962416546739976e-02, -1.272232057686388e+00, -2.026936879545363e+00, -1.369507608197350e+00, -4.070123571054521e-01, -5.453939306670829e-01, -4.082101033597453e-01, -1.259587224881769e+00, -2.395673821475859e+00, -1.557700608053372e+00, -1.571461133172878e-04, 1.233199393373880e-04, -1.576031317237930e-04, -1.041254533164358e+00, -1.978436166640541e+00, -1.817462269792471e+00, -1.041254533164358e+00, -1.978436166640543e+00, -1.817462269792471e+00, -8.886644649551611e+00, 6.459439845687329e-03, -7.691175675225556e+00, -7.646439606214902e+00, 1.934967860855723e-03, -7.059357603937628e+00, -3.467995506595251e+01, -1.482722731749030e+01, -4.217132852656222e+01, -1.506758903852655e+00, -5.330943294714052e+00, -1.445491321457146e+00, -2.166675224893937e+01, 4.873206549081641e-02, -2.128197255678228e+01, -2.166675224893917e+01, 4.873206548584454e-02, -2.128197255678545e+01, -2.993475857904065e-01, 9.892961423924648e-02, -3.032425486345877e-01, -1.781244565589515e-01, 6.061782307538239e-02, -1.792819288275573e-01, -2.118313682360501e-01, 7.263527109425687e-02, -2.138543222064268e-01, -2.479175012095250e-01, 8.454421590614519e-02, -2.499445319210221e-01, -2.288782071011142e-01, 7.837878948255900e-02, -2.309007858140474e-01, -2.288782071011142e-01, 7.837878948255898e-02, -2.309007858140474e-01, -1.608069117327561e-01, 5.543725002507077e-02, -1.662313563281734e-01, -3.467626261710662e-02, -1.016498450326804e-04, -3.484832022585696e-02, -5.368374140317170e-02, 9.549210639255866e-03, -5.422340355917118e-02, -9.437790686970189e-02, 2.594918998302861e-02, -9.394778330627074e-02, -7.053972032728910e-02, 1.646069781828955e-02, -7.023452174704671e-02, -7.053972032728911e-02, 1.646069781828956e-02, -7.023452174704672e-02, -1.812424222673601e-02, 1.270318199243554e-02, -1.981563875780664e-02, -1.980947766287578e-01, -2.662406494526661e-01, -1.986847327100436e-01, -1.307397226282151e-01, -1.178460769402397e-01, -1.320692801658698e-01, -1.193419435322306e-01, 1.619068699923784e-02, -1.176242526499236e-01, -1.144798424288390e-01, -4.262942192641417e-02, -1.163268605254947e-01, -1.144798424288389e-01, -4.262942192641415e-02, -1.163268605254948e-01, -5.089651075376554e-02, 4.005757005479403e-03, -5.134701494056636e-02, 1.187821955946692e+00, -9.312181469500636e+00, 9.914156254753217e-01, -3.076598308823311e-01, -5.652317230808060e+00, -9.511157406160655e-01, -1.841957730580504e-01, 4.892159485647827e-02, -2.040218397866700e-01, -1.432754469715796e+00, -4.167947340876471e+00, -2.819164655047275e+00, -1.432754469715857e+00, -4.167947340876364e+00, -2.819164655047324e+00, -1.834428550234874e+00, -6.490519487292170e+00, -2.646743552952501e+00, -2.735624512506720e+01, 1.284322677872173e-02, -4.846217026073789e+01, -1.406272717461385e+01, -4.665607475272824e+00, -1.602435514749342e+01, -1.306311795463051e+00, -5.996285971273609e+00, -1.507002864896624e+00, -4.469298260445612e+01, 6.270494291183970e-02, -2.208862972496378e+01, -4.469298260445218e+01, 6.270494297089790e-02, -2.208862972494601e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_revtpssh_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_revtpssh", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.623134112259184e-03, 2.624029644056076e-03, 2.623236666683321e-03, 2.624103704574852e-03, 2.623536826364428e-03, 2.624543762766239e-03, 2.622392129301378e-03, 2.623076559574819e-03, 2.623201682684357e-03, 2.623641376125716e-03, 2.623201682684357e-03, 2.623641376125716e-03, 2.588577577215261e-03, 2.581148659229764e-03, 2.590240603072838e-03, 2.581635769225011e-03, 2.615775110160212e-03, 2.618627201383360e-03, 2.634532878342834e-03, 2.628439909703632e-03, 2.585991956763159e-03, 2.652030549089754e-03, 2.585991956763159e-03, 2.652030549089754e-03, 3.069221840131055e-03, 2.984112247065854e-03, 3.113518350912426e-03, 2.987483114053985e-03, 3.432826876860366e-03, 3.697050105831874e-03, 4.253988580596908e-03, 4.334909104206575e-03, 2.537927057923058e-03, 4.531979001614492e-03, 2.537927057923058e-03, 4.531979001614492e-03, 1.384486249873850e-02, 1.602265560789078e-02, 1.504382501853161e-02, 1.782088158113732e-02, 1.957040031210838e-04, 1.376201335658153e-04, 2.481722013037160e-03, 2.853330967726391e-03, 1.126245965998726e-02, 2.465043529841927e-03, 1.126245965998727e-02, 2.465043529841947e-03, 1.296840746060517e-08, 1.297049314249548e-08, 1.850270680780188e-08, 1.850542554649046e-08, 1.029458311897998e-05, 1.040170775798280e-05, -8.455136112179487e-11, -8.456035433337321e-11, -2.672373464282470e-09, -2.673433335905248e-09, -2.672373464307956e-09, -2.673433335930734e-09, 1.646413768476335e-02, 1.647163377237872e-02, 1.661415208842895e-02, 1.661634836776006e-02, 1.647539976931679e-02, 1.647842596762128e-02, 1.660374516856871e-02, 1.661006113144950e-02, 1.653850366630888e-02, 1.654380833095366e-02, 1.653850366630888e-02, 1.654380833095366e-02, 5.657078695501202e-03, 5.678615580902544e-03, 5.903200195096634e-03, 5.917650270518261e-03, 5.314055884706469e-03, 5.433020227579802e-03, 5.514088774439996e-03, 5.638184283381473e-03, 6.059018596580556e-03, 5.842117435802409e-03, 6.059018596580556e-03, 5.842117435802409e-03, 3.891607262659588e-02, 4.050457330002222e-02, 2.446854757135484e-02, 2.595156715315449e-02, 1.954000420827167e-02, 2.717747481694636e-02, 7.350812830324317e-03, 1.163032308985901e-02, 4.716718243228041e-02, 3.838935617395816e-02, 4.716718243228041e-02, 3.838935617395816e-02, 4.022271894914631e-04, 4.124943693565595e-04, 5.213196521753112e-03, 5.263106034936613e-03, 2.969857753291480e-04, 3.277660918563123e-04, 2.623272067706904e-03, 2.624600565737358e-03, 1.241166489086186e-03, 1.909205057195381e-03, 1.241166489086187e-03, 1.909205057195383e-03, -6.260646397114089e-11, -6.260605502825349e-11, -2.633475741553619e-10, -2.633524014706989e-10, -1.506151472458248e-09, -1.505911444440938e-09, 8.614575829425471e-05, 8.675258083720549e-05, -1.353484838178118e-09, -1.352758664596478e-09, -1.353484838178251e-09, -1.352758664596611e-09, 2.400122437959364e-01, 2.470159264909745e-01, 1.918773274833013e-01, 1.966774669382615e-01, 2.146234300893617e-01, 2.206994587727761e-01, 2.331898954110543e-01, 2.396047103842434e-01, 2.242376403721441e-01, 2.305085771337721e-01, 2.242376403721441e-01, 2.305085771337719e-01, 6.054612697472626e-02, 6.445202320949706e-02, 4.092411186364658e-02, 4.151711899149976e-02, 6.046837017549970e-02, 6.168825113141728e-02, 9.561336858057659e-02, 9.627176555912900e-02, 7.506107386373743e-02, 7.599056958967498e-02, 7.506107386373739e-02, 7.599056958967494e-02, 1.654406930376955e-02, 1.829784429499318e-02, 9.494544849274053e-03, 9.657182984091881e-03, 1.619897196220559e-02, 1.692223117243788e-02, 3.239364316164588e-02, 3.222726204667318e-02, 2.628848494368242e-02, 2.657078880068686e-02, 2.628848494368241e-02, 2.657078880068688e-02, 3.495172556447771e-02, 3.677651679060838e-02, 8.841682289883859e-06, 8.846081859891146e-06, 2.494915648470361e-05, 2.534509799240923e-05, 3.967764986251833e-02, 5.329422395131508e-02, 2.854374783653694e-04, 3.435734664135094e-04, 2.854374783653693e-04, 3.435734664135094e-04, 1.132628408739258e-09, 1.137891956775466e-09, -8.369857298297811e-13, -8.369787652155184e-13, -1.107291328799307e-10, -1.107254221564757e-10, 3.060245452166657e-04, 3.275611874136897e-04, -1.403100266437859e-09, -1.402792140841239e-09, -1.403100269685734e-09, -1.402792144089115e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
