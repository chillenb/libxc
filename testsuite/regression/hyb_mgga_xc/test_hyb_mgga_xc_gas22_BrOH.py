
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_gas22_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_gas22", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.011889407484465e+01, -2.011898751691359e+01, -2.011947172260957e+01, -2.011794748327824e+01, -2.011894269757420e+01, -2.011894269757420e+01, -2.771300120869853e+00, -2.771362598982716e+00, -2.773427985362448e+00, -2.773998700200443e+00, -2.771323694957313e+00, -2.771323694957313e+00, -4.551750993402088e-01, -4.549116886687735e-01, -4.499016751607851e-01, -4.537329250649726e-01, -4.550780676983942e-01, -4.550780676983942e-01, -8.330503743707217e-02, -8.475595614238754e-02, -5.444228532110003e-01, -8.004103118938859e-02, -8.375463636863066e-02, -8.375463636863066e-02, -4.189094657178073e-02, -4.268963177622523e-02, -7.089033867890848e-02, -3.175533432558687e-02, -4.233741146591998e-02, -4.233741146592002e-02, -4.877171928733629e+00, -4.880511021131150e+00, -4.877548647290253e+00, -4.880142727396457e+00, -4.878834989451089e+00, -4.878834989451089e+00, -1.612191023747483e+00, -1.627282060325722e+00, -1.610598706861162e+00, -1.622431170344462e+00, -1.624616734287065e+00, -1.624616734287065e+00, -3.849741444508833e-01, -4.266162113592731e-01, -3.610238598958332e-01, -3.775263242396782e-01, -4.022025416957559e-01, -4.022025416957559e-01, -7.553089946905629e-02, -9.249202263957060e-02, -7.251813868071867e-02, -1.529373395816339e+00, -6.700849321633655e-02, -6.700849321633655e-02, -3.101927685769319e-02, -3.291342614918173e-02, -2.577893546340559e-02, -7.592445800922527e-02, -3.030091807097691e-02, -3.030091807097689e-02, -3.513099561956501e-01, -3.845003698244746e-01, -3.776015127564131e-01, -3.689001609118184e-01, -3.736849292619826e-01, -3.736849292619826e-01, -3.486354065479285e-01, -3.265964304979010e-01, -3.351354896324739e-01, -3.470494767175293e-01, -3.399081564215520e-01, -3.399081564215521e-01, -4.523701513706224e-01, -1.213051079836394e-01, -1.519654944242091e-01, -2.050647944430492e-01, -1.769706455346997e-01, -1.769706455346997e-01, -2.873625609723616e-01, -7.127403317339290e-02, -7.402700862587251e-02, -1.855202161804625e-01, -6.683505600355623e-02, -6.683505600355624e-02, -4.650506662745366e-02, -1.751865553711179e-02, -2.356397304436220e-02, -6.435807450995687e-02, -2.702982361920965e-02, -2.702982361920971e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_gas22_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_gas22", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.854812209107601e+01, -2.854827934676590e+01, -2.854898441589505e+01, -2.854641510800760e+01, -2.854820491700729e+01, -2.854820491700729e+01, -3.852450707162559e+00, -3.852623099638192e+00, -3.857856624287300e+00, -3.854863113071615e+00, -3.852525898672479e+00, -3.852525898672479e+00, -5.708121206663516e-01, -5.692820220983440e-01, -5.309084232104238e-01, -5.422547057386227e-01, -5.702642858527117e-01, -5.702642858527117e-01, -1.193647815665233e-01, -1.215285235951114e-01, -6.678004617720896e-01, -6.135323112493011e-02, -1.199999994087711e-01, -1.199999994087711e-01, -3.208862921912130e-02, -3.277297583333359e-02, -4.811955504733544e-02, -2.269453725297444e-02, -3.251230278711752e-02, -3.251230278711816e-02, -6.947178855698245e+00, -6.952147738041417e+00, -6.947707196365286e+00, -6.951569685059109e+00, -6.949709006042864e+00, -6.949709006042864e+00, -1.945527953598265e+00, -1.972131695370702e+00, -1.932783515912398e+00, -1.953685730930145e+00, -1.980477664133734e+00, -1.980477664133734e+00, -5.193360357179447e-01, -6.220137393794157e-01, -4.895567310133698e-01, -5.371201784892590e-01, -5.511380291454505e-01, -5.511380291454505e-01, -4.513314392502312e-02, -1.088693794538709e-01, -4.279160230297861e-02, -2.292539041451561e+00, -4.505150905347748e-02, -4.505150905347748e-02, -2.208175797854144e-02, -2.382629125826780e-02, -1.879490804883729e-02, -5.013900293375106e-02, -2.207733185496522e-02, -2.207733185496630e-02, -4.368033621990644e-01, -5.165487522966360e-01, -4.881725995234578e-01, -4.653945571143993e-01, -4.767582994041783e-01, -4.767582994041784e-01, -4.391210767848570e-01, -4.047091638673914e-01, -4.414565686444977e-01, -5.079310836430108e-01, -4.716698656972245e-01, -4.716698656972246e-01, -6.551742052718355e-01, -1.617993859479981e-01, -2.032376462270389e-01, -2.679612580529294e-01, -2.324079878596192e-01, -2.324079878596192e-01, -3.669536296044009e-01, -4.917186716655887e-02, -4.770750087285222e-02, -2.412828856744670e-01, -3.639046721973055e-02, -3.639046721973174e-02, -3.623791762580966e-02, -1.101492043724286e-02, -1.598309150387204e-02, -3.453712050862007e-02, -1.962622760285571e-02, -1.962622760285575e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_gas22_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_gas22", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-6.768535569636126e-09, -6.768480407362893e-09, -6.768166979117066e-09, -6.769071205814776e-09, -6.768507047192193e-09, -6.768507047192193e-09, -8.076822376223775e-06, -8.076916548269932e-06, -8.078582370462529e-06, -8.075184567942655e-06, -8.076703083067193e-06, -8.076703083067193e-06, -2.550873252416850e-03, -2.562089734249103e-03, -2.762188651479207e-03, -2.743377362313868e-03, -2.555042943322216e-03, -2.555042943322216e-03, 1.425790126833689e-01, 1.276639181438204e-01, -1.391629075803811e-03, 4.699091907114181e-01, 1.383023239634166e-01, 1.383023239634166e-01, -8.417378529994331e+02, -7.351281169244226e+02, -3.888244858326289e+00, -6.121744142453359e+03, -7.667033538784988e+02, -7.667033538785046e+02, -1.614722024488982e-06, -1.613149245316781e-06, -1.614559013094224e-06, -1.613335883055056e-06, -1.613908573827844e-06, -1.613908573827844e-06, -6.420896310557173e-05, -6.319323024887210e-05, -6.420227771640054e-05, -6.342813528967529e-05, -6.348983900786824e-05, -6.348983900786824e-05, -3.641930683839236e-03, 9.621188021909123e-04, -4.359544651340847e-03, 1.603291162460303e-03, -2.364561332275946e-03, -2.364561332275946e-03, 7.524799407851647e-01, 1.310199586811207e-01, 8.973103059598675e-01, -7.475218400993987e-05, 8.658617957520900e-01, 8.658617957520900e-01, -6.885292030809625e+03, -4.756657817339417e+03, -1.493920778804215e+04, -1.276764102503565e-01, -7.012369405067166e+03, -7.012369405067137e+03, -1.878651905868677e-02, -4.599244720897997e-03, -9.542059418475142e-03, -1.352740202323327e-02, -1.155757360733556e-02, -1.155757360733556e-02, -1.283980076090804e-02, -9.099010458521612e-03, -4.560367533001080e-03, 3.184020068181846e-03, -1.063582133868715e-03, -1.063582133868722e-03, 2.777295041371424e-05, 1.735864453658804e-02, -1.662777374862381e-02, -1.955589029655112e-02, -2.518755036736858e-02, -2.518755036736847e-02, -1.190571817244499e-02, -5.835397385660713e+00, -6.672004030382860e-01, -1.446215281645932e-02, 1.472382099323961e+00, 1.472382099323980e+00, -4.945543762261846e+02, -1.993491135088509e+05, -3.293349227826569e+04, 1.836668132074841e+00, -1.247643912663561e+04, -1.247643912663567e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_gas22_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_gas22", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_gas22_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_gas22", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.535077570329133e-03, 2.535117953217507e-03, 2.535288834908853e-03, 2.534632461288473e-03, 2.535098884123871e-03, 2.535098884123871e-03, 4.766002276514206e-03, 4.767172057151331e-03, 4.802385934347878e-03, 4.789604294119005e-03, 4.766302237411584e-03, 4.766302237411584e-03, 1.508618357745600e-03, 1.466443661853924e-03, 3.497789829153779e-04, 9.988590582058914e-04, 1.494133760413887e-03, 1.494133760413887e-03, -2.697478808962303e-02, -2.535303741615562e-02, 4.355806136776852e-05, -4.933023996637324e-02, -2.651549548567190e-02, -2.651549548567190e-02, -2.811198448132649e-03, -3.081597935792086e-03, -2.140079616337138e-02, -2.102629322871207e-04, -3.130494184157078e-03, -3.130494184155890e-03, 1.105045811372302e-02, 1.109308564197920e-02, 1.105519311050633e-02, 1.108831296046954e-02, 1.107183605725800e-02, 1.107183605725800e-02, 6.076682945007962e-03, 6.316905172577142e-03, 5.986383513677394e-03, 6.179778214610412e-03, 6.357144302562302e-03, 6.357144302562302e-03, -2.501606894755066e-03, 4.371826741177524e-03, 3.125316608855000e-04, -3.008839332295974e-03, -4.111857349063446e-03, -4.111857349063446e-03, -4.720672400160990e-02, -3.788452130740624e-02, -5.099479437610589e-02, 1.268550169960786e-02, -6.199187293861416e-02, -6.199187293861416e-02, -2.929283199182909e-04, -3.263598659808955e-04, -5.648660746393614e-04, -2.697672311589020e-02, -3.061956309730320e-04, -3.061956309726131e-04, -4.199377708843997e-01, -1.124978323478849e-01, -1.850447368552574e-01, -2.660250314395780e-01, -2.223004907110644e-01, -2.223004907110644e-01, -3.123251770569252e-01, -7.983737897664950e-03, -1.856888744976992e-02, -1.439719141862409e-02, -1.881078316697820e-02, -1.881078316697814e-02, 5.404342133448917e-03, -1.769726236311332e-02, -5.766150980768256e-03, -5.095769606125506e-03, -2.511695298182574e-03, -2.511695298182613e-03, -1.453347525599437e-03, -1.807402405484732e-02, -2.681971132565928e-02, -1.951378598996694e-02, -5.451153588629637e-02, -5.451153588629579e-02, -1.625752487284840e-03, -1.767277496458806e-05, -1.532586789221866e-04, -5.778537161616135e-02, -2.808720936403555e-04, -2.808720936408059e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
