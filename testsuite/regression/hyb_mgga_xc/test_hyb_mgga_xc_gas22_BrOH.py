
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_gas22_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_gas22", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.903429244443676e+01, -1.903441518817277e+01, -1.903497361647358e+01, -1.903303230812770e+01, -1.903435863011795e+01, -1.903435863011795e+01, -2.551698777796312e+00, -2.551780850169543e+00, -2.554348083489278e+00, -2.553561826551300e+00, -2.551733992586421e+00, -3.001007199426509e+00, -4.450881164236387e-01, -5.022386768614208e-01, -4.924203263581347e-01, -4.941023315078129e-01, -5.024880863859881e-01, -5.024880863859881e-01, -8.242634657982173e-02, -8.386634255960929e-02, -5.321661483357714e-01, -7.474621352225777e-02, -8.285881474631275e-02, -8.285881474631275e-02, -4.203436255322966e-02, -4.287160857445337e-02, -7.142021407483899e-02, -3.438903690313530e-02, -4.249366944625334e-02, -4.249366944625340e-02, -4.878157717900469e+00, -4.881484966515922e+00, -4.878520693243175e+00, -4.721346756827802e+00, -4.879831550648231e+00, -4.879831550648231e+00, -1.377948856191695e+00, -1.392833446243117e+00, -1.371827234528045e+00, -1.383416042379276e+00, -1.396129383408455e+00, -1.654191460880475e+00, -3.940571017274870e-01, -4.246794491677265e-01, -3.751743516127777e-01, -3.841121576572941e-01, -4.082375101091166e-01, -3.806538855846118e-01, -4.210232024331569e-02, -9.145402467823829e-02, -4.285352595876846e-02, -1.610835426962599e+00, -6.467261374531530e-02, -6.467261374531530e-02, 1.036682781245963e-04, -3.491919030453010e-02, -2.643925908689077e-02, -1.520327689446298e-02, 9.913581681022772e-05, -3.277602114544213e-02, -3.560661266597450e-01, -3.854576402860377e-01, -3.836674908809670e-01, -3.721236161679357e-01, -3.763487260062471e-01, -3.763487260062471e-01, -3.546519431538895e-01, -3.278458059967569e-01, -3.361485902195627e-01, -3.464755732379382e-01, -3.403642015539672e-01, -3.299511951010865e-01, -4.554325634203542e-01, -1.492052971235372e-01, -1.527537015466836e-01, -2.014150900131097e-01, -1.794630286959816e-01, -1.794630286959816e-01, -2.681912168406614e-01, -7.167165477218608e-02, -7.425399726484590e-02, -1.899954075683139e-01, -3.196131151320148e-02, -6.546487427351566e-02, -4.935571922378373e-02, -1.996267459004927e-02, -2.404980965450863e-02, -6.291498928635263e-02, -2.938944157978668e-02, -2.938944157978675e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_gas22_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_gas22", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.990781669610194e+01, -2.990796532553120e+01, -2.990860286476235e+01, -2.990644615123227e+01, -2.990790244923135e+01, -2.990790244923135e+01, -3.976498379366474e+00, -3.976671527491368e+00, -3.982036283446575e+00, -3.980297240829183e+00, -3.976566633124183e+00, -3.675094257765226e+00, -5.782998389093346e-01, -5.739117590702737e-01, -5.486028704068008e-01, -5.572850342419243e-01, -5.745362726081029e-01, -5.745362726081029e-01, -1.217211296081477e-01, -1.242100081410196e-01, -7.536044940556235e-01, -5.662482977770464e-02, -1.224814403071161e-01, -1.224814403071161e-01, -3.212953602841406e-02, -3.282266887917421e-02, -4.692243110309376e-02, -2.374384715703208e-02, -3.255498679160188e-02, -3.255498679160194e-02, -6.945816381452322e+00, -6.950809044016262e+00, -6.946364517635844e+00, -7.196351775203665e+00, -6.948335415007279e+00, -6.948335415007279e+00, -2.048200369448955e+00, -2.077642415140569e+00, -2.035995269471193e+00, -2.058915730647695e+00, -2.084401793517716e+00, -1.970377010782484e+00, -4.902785513872760e-01, -5.944608986417236e-01, -4.603907142699948e-01, -4.865409467415706e-01, -5.218321442003371e-01, -5.681125191260888e-01, -9.357873745287473e-02, -1.098814631855063e-01, -9.469012599779582e-02, -2.149075622500681e+00, -4.225315001988333e-02, -4.225315001988333e-02, 5.517394366215581e-05, -2.461088591079498e-02, -1.905511312355886e-02, -3.693654214203479e-02, 4.356959216779228e-05, -2.305386671046675e-02, -4.370755622992685e-01, -5.251515598365463e-01, -4.909369298589568e-01, -4.701137550230629e-01, -4.830992103844148e-01, -4.830992103844148e-01, -4.463092603433689e-01, -4.019288314914581e-01, -4.349117323212923e-01, -5.001676910928222e-01, -4.630757317343676e-01, -5.117784455816831e-01, -6.107145685251841e-01, -1.740704005057889e-01, -2.066751817303468e-01, -2.178477605259683e-01, -2.346878664757467e-01, -2.346878664757470e-01, -3.363092345267121e-01, -4.861470719127242e-02, -4.552057749873480e-02, -2.315898079872476e-01, -7.345607772297290e-02, -3.275803097493210e-02, -3.708669036647675e-02, -1.205997435173088e-02, -1.618419462597047e-02, -3.068009422520717e-02, -2.057029506170014e-02, -2.057029506170080e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_gas22_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_gas22", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.214563410404909e-02, 2.490283180410805e+21, 2.491045431032526e+21, 2.488216388381455e+21, 2.490200888735448e+21, 2.490200888735448e+21, 2.795344173778232e+20, 2.791991924576148e+20, 2.692012532079729e+20, 2.730672301414410e+20, 2.794421241338785e+20, -7.208583702608496e-06, 7.171959954058702e+20, -2.159619320529987e-03, -2.055962716254358e-03, -2.132701162219077e-03, -2.162176722549337e-03, -2.162176722549337e-03, 1.274492151658398e-01, 1.104289116600833e-01, 1.099622726815123e+21, 4.169583967541623e-01, 1.223575738515433e-01, 1.223575738515433e-01, -8.304498950987162e+02, -7.226717436130484e+02, -3.492139858419567e+00, -4.797790649525788e+03, -7.554346073709802e+02, -7.554346073709788e+02, -1.615354834608464e-06, -1.613775433747295e-06, -1.615183101163041e-06, 2.548428431151822e+06, -1.614548926990092e-06, -1.614548926990092e-06, 4.310976540872641e+05, 4.150860774783559e+20, 4.975751587984045e+20, 4.513683317477678e+20, 4.008228089785631e+20, -6.109196832709317e-05, -5.754775110554467e-03, -1.385644524267225e-03, -7.175895680958887e-03, -5.325612260840929e-03, -4.439142379496560e-03, 4.649201442838603e+19, 1.028085683257109e+20, 1.275061410049846e-01, 1.086306161429484e+20, -7.809409529977998e-05, 8.110813879617487e-01, 8.110813879617487e-01, -3.045327898194709e+18, -3.947223639790606e+03, -1.378111226457465e+04, 2.941894473816233e+18, -3.198927221835510e+18, -5.477494989621390e+03, -2.232829680585029e-02, -4.121240197395784e-03, 9.513853931883919e+20, -1.453615298467781e-02, -1.182226169610075e-02, -1.182226169610075e-02, -1.654709978504044e-02, -9.349376528042295e-03, -5.420652548590499e-03, 1.097118007892729e-03, -2.542560992393101e-03, 1.941295116044136e+20, -2.465678820103472e-03, 4.192650709505020e+20, -1.762204300773255e-02, 1.361629945028703e+20, -2.757643831811864e-02, -2.757643831811861e-02, 5.233539037112622e+19, -5.503482610170632e+00, -5.453856427798905e-01, -3.270974850287533e-02, 6.918910476037711e+19, 1.367973323286910e+00, -3.917673348638953e+02, -1.428383967164211e+05, -3.107004341720758e+04, 1.692416909194082e+00, -9.622957588222222e+03, -9.622957588222271e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_gas22_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_gas22", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.620607315152547e-03, 2.620658566097039e-03, 2.620836461745090e-03, 2.620155695563743e-03, 2.620638780456752e-03, 2.620638780456752e-03, 4.167230398545203e-03, 4.168580324997525e-03, 4.209282518592458e-03, 4.193270584335928e-03, 4.167592841746981e-03, 4.953748586959025e-03, -1.959136837964317e-03, 3.966421029527482e-03, 2.007167963410194e-03, 2.863531474294522e-03, 4.015806193505446e-03, 4.015806193505446e-03, -2.455361833530808e-02, -2.233732494740903e-02, 1.985830479320363e-03, -5.517397008798422e-02, -2.389749888779543e-02, -2.389749888779543e-02, -2.830419278561855e-03, -3.108305016706133e-03, -2.248221049576598e-02, -2.375864340993635e-04, -3.153984935756701e-03, -3.153984935756478e-03, 1.105088511434153e-02, 1.109360162472149e-02, 1.105562430626089e-02, 1.213834216316597e-02, 1.107231565778568e-02, 1.107231565778568e-02, 3.750730893158692e-03, 4.010909390072249e-03, 3.641056663043278e-03, 3.841037364610693e-03, 4.080846183846808e-03, 6.470053403960214e-03, -3.272458895841195e-03, -5.926554693840910e-03, 2.598159049483109e-03, -8.622518582754432e-03, -6.699532548750686e-03, 1.095248925047894e-02, 2.299881203228730e-02, -3.807094969213037e-02, 2.513198495301463e-02, 1.154814738602016e-02, -6.510487403076613e-02, -6.510487403076613e-02, 2.142768846566433e-05, -3.583753593383271e-04, -5.881669699034686e-04, 1.037417088665679e-02, 2.456207394672464e-05, -3.465726605411561e-04, -3.744071756361426e-01, -9.314670217774683e-02, -2.273112992451431e-01, -2.318549248950668e-01, -1.916742106949651e-01, -1.916742106949651e-01, -2.492265785191110e-01, -7.983759453467416e-03, -1.966123126732709e-02, -1.646044523969107e-02, -2.081393012801568e-02, 2.553401795898928e-02, -3.998146634451643e-03, -1.569442316728347e-02, -3.453433752225353e-03, -4.141605285782526e-02, 1.441071747374973e-03, 1.441071747374916e-03, -2.132529882558924e-02, -1.859170786587051e-02, -2.850967558095607e-02, -1.309820430564379e-02, 2.507822933757297e-02, -5.785295850485504e-02, -1.828934851433677e-03, -2.087419233849801e-05, -1.577886590343699e-04, -6.160604861507989e-02, -3.198984537142835e-04, -3.198984537146935e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
