
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_tpss1kcis_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_tpss1kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.748100556251737e+01, -1.748105822664766e+01, -1.748130556576356e+01, -1.748052204392156e+01, -1.748093070911523e+01, -1.748093070911523e+01, -2.925187913178736e+00, -2.925184402924794e+00, -2.925143819740636e+00, -2.925417309352421e+00, -2.925092539801361e+00, -3.252216597540054e+00, -6.179664817538126e-01, -6.744135635747591e-01, -6.678396749868970e-01, -6.679408741927303e-01, -6.679781205583747e-01, -6.679781205583747e-01, -1.910523607133812e-01, -1.925496267360937e-01, -7.185981492656137e-01, -1.654705640072869e-01, -1.757443141575314e-01, -1.757443141575314e-01, -8.815719596494270e-03, -9.281227190975320e-03, -5.113636955449836e-02, -5.082085553940719e-03, -6.391913263770156e-03, -6.391913263770156e-03, -4.815036587385615e+00, -4.815991188527422e+00, -4.815084733805264e+00, -4.356293706196554e+00, -4.815518212313795e+00, -4.815518212313795e+00, -1.683992928950569e+00, -1.694479575398395e+00, -1.676438337912428e+00, -1.685650248017945e+00, -1.693443920550753e+00, -1.865052247928820e+00, -5.644009488815923e-01, -6.129697140396375e-01, -5.246589154523428e-01, -5.435953921590621e-01, -5.732572034715667e-01, -5.458430943541281e-01, -1.031804996927839e-01, -2.045874924766876e-01, -9.630821559316727e-02, -1.794046734108832e+00, -1.396120368706651e-01, -1.396120368706651e-01, -4.118094649495060e-03, -4.967380387242454e-03, -3.806993144556793e-03, -6.774932810744287e-02, -4.768666891732623e-03, -4.581239498669310e-03, -5.716084517327703e-01, -5.676340535094712e-01, -5.432964601558707e-01, -5.701821221464682e-01, -5.696048215307692e-01, -5.696048215307692e-01, -5.565656272459075e-01, -4.768245930490501e-01, -4.984046388196552e-01, -5.211786947845403e-01, -5.094191150100051e-01, -4.877942721262194e-01, -6.409521670715177e-01, -2.238394695446626e-01, -2.759174849082678e-01, -3.343502447929182e-01, -3.055078032922310e-01, -3.055078032922310e-01, -4.244850427182009e-01, -4.897417380842495e-02, -6.620861054691755e-02, -3.300541173176417e-01, -8.393592555519026e-02, -1.008433920016522e-01, -1.243746687166414e-02, -1.326078663767629e-03, -2.787610545466541e-03, -9.522089295254058e-02, -4.240521221396433e-03, -4.240521221396430e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_tpss1kcis_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_tpss1kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.349372806209701e+01, -2.349379778530349e+01, -2.349412599871078e+01, -2.349308856757174e+01, -2.349362957299449e+01, -2.349362957299449e+01, -3.811419401628094e+00, -3.811457504786740e+00, -3.812534967332087e+00, -3.812434857150654e+00, -3.812058826711711e+00, -3.958509479345740e+00, -7.916538341615724e-01, -7.080337864153923e-01, -6.727259585338363e-01, -6.857028282946817e-01, -6.827346805917731e-01, -6.827346805917731e-01, -1.911254356162494e-01, -1.944406365081686e-01, -9.309443848139610e-01, -1.687919471241452e-01, -1.711379493481861e-01, -1.711379493481861e-01, -1.183929857851870e-02, -1.247001787130475e-02, -6.826283069981336e-02, -6.802518707856070e-03, -8.570283087984812e-03, -8.570283087984812e-03, -5.978437461126565e+00, -5.978084416767963e+00, -5.978408958333674e+00, -5.824228588462291e+00, -5.978265768631881e+00, -5.978265768631881e+00, -2.172124086065914e+00, -2.188308727539205e+00, -2.160572945607682e+00, -2.174550449041557e+00, -2.186807369145165e+00, -2.220805933504634e+00, -7.293405870959506e-01, -7.865872322392968e-01, -6.660327654912770e-01, -7.032167735995636e-01, -7.417787696383312e-01, -7.184286663291242e-01, -1.335323048005448e-01, -1.972149031063482e-01, -1.246591341795822e-01, -2.283815264273024e+00, -1.493984016799450e-01, -1.493984016799450e-01, -5.422924305790146e-03, -6.646972598941191e-03, -5.115842647269133e-03, -8.778297273489610e-02, -6.274850244281543e-03, -6.143877555832424e-03, -7.089269593761902e-01, -7.117667745554535e-01, -7.136302524491394e-01, -7.099959791070497e-01, -7.104203957820784e-01, -7.104203957820784e-01, -6.917823293124714e-01, -6.130969716884961e-01, -6.469817789490018e-01, -6.704453422563361e-01, -6.597295559427779e-01, -6.433072573927706e-01, -8.255789671330106e-01, -2.874187166080624e-01, -2.896740960928232e-01, -4.264909037076635e-01, -3.521015070437541e-01, -3.521015070437541e-01, -5.472818421132790e-01, -6.548679421044112e-02, -8.646984723490363e-02, -4.214453468200763e-01, -1.086581102342481e-01, -1.214779463803600e-01, -1.669217303789506e-02, -1.770122987451275e-03, -3.731388390133763e-03, -1.160014392360232e-01, -5.690525125132624e-03, -5.690525125132618e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_tpss1kcis_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_tpss1kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [3.673467498846002e-09, 3.673340892184798e-09, 3.672798189945137e-09, 3.674675818535240e-09, 3.673689231154275e-09, 3.673689231154275e-09, 1.122964216864093e-05, 1.122882752616432e-05, 1.120649911971945e-05, 1.121131138886212e-05, 1.121563559650158e-05, -3.864621102987052e-06, 1.113904557780055e-02, -2.361391806004425e-03, -2.631189203803373e-03, -2.551451835286066e-03, -2.569370169591471e-03, -2.569370169591471e-03, -3.917862644788443e-01, -3.736609338514738e-01, 5.983781419534600e-03, -5.112173358197979e-01, -5.240541669832268e-01, -5.240541669832270e-01, 1.636861828501704e+01, 1.606310626642311e+01, 3.794445400363078e-01, 2.220365879430873e+01, 2.401694079029436e+01, 2.401694079029436e+01, -4.759365717671284e-06, -4.810327484903056e-06, -4.762305888473763e-06, 1.326460577567056e-06, -4.784791268018412e-06, -4.784791268018412e-06, 1.272755555015901e-04, 1.227286406593771e-04, 1.307353887839046e-04, 1.265976225873055e-04, 1.231209593578847e-04, -3.394439844208172e-05, -3.795520116868146e-03, -8.304043053566256e-03, -3.766448225058032e-03, -4.378235926319624e-03, -4.177655658255794e-03, 1.835556163093235e-02, 3.548124276113943e+01, -2.939421794590020e-01, 4.826709484307761e+01, -6.974571645661385e-05, -7.518081238283434e-01, -7.518081238283427e-01, 3.396105142381714e+07, 2.012798289483282e+01, 2.137023093603990e+02, 2.305381587695202e+02, 1.849940980694816e+07, 6.772647404523697e+01, -1.029934385061743e-01, -4.551550869104162e-02, 3.726765579070761e-02, -7.283863471888972e-02, -6.460493140078016e-02, -6.460493140078015e-02, -9.815481442414248e-02, -5.333240385512252e-03, -7.346290190847931e-03, -1.558887680094441e-02, -1.020109125396972e-02, 3.342125186948254e-02, -5.037960842106635e-03, 1.091202762549882e+00, -8.255719808772488e-02, 1.703000043063104e-01, -4.123471139769634e-02, -4.123471139769622e-02, 5.646999053081630e-02, 4.671292239375611e-01, -1.529479370303620e-01, -1.570726995814783e-02, 8.934565556803976e+01, -8.083595914998513e-01, 5.249395338353023e+00, 9.746336988419100e+01, 1.296539028731568e+02, -8.454704058354652e-01, 1.046277668546871e+02, 1.046277668546874e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_tpss1kcis_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_tpss1kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.351199918969111e-04, 1.351231524050480e-04, 1.351356617425948e-04, 1.350889010193625e-04, 1.351136221235863e-04, 1.351136221235863e-04, -4.616752028250188e-04, -4.614722563065811e-04, -4.560304368890171e-04, -4.582075927263842e-04, -4.580230061812548e-04, 1.343182798558923e-03, -1.720265223785563e-03, 3.527398657300175e-04, 1.437788360462705e-04, 2.266238784865355e-04, 2.062564804468578e-04, 2.062564804468578e-04, -4.455667583563470e-03, -4.625293265808753e-03, -4.801310145560543e-04, -1.912877398355055e-03, -2.908601821469592e-03, -2.908601821469591e-03, -1.113732562973583e-05, -1.285337641335554e-05, -1.867662536820192e-04, -2.731203960272124e-06, -5.997236359547618e-06, -5.997236359547618e-06, 1.089468792372942e-02, 1.101580679214213e-02, 1.090162722696332e-02, 6.809967869713080e-04, 1.095514128595735e-02, 1.095514128595735e-02, -9.778111080841455e-04, -9.597625634439741e-04, -9.852167123289876e-04, -9.759306110379628e-04, -9.612978704306031e-04, 1.488671537047270e-03, 1.216473259872921e-02, 3.792520964781328e-02, 5.505376282366171e-03, 1.269239166516860e-02, 1.496636191442660e-02, 1.917250785459906e-03, -9.043498502194762e-05, -2.211579088027433e-03, -7.252050462458115e-05, 7.801619716958830e-03, -1.845440447796118e-03, -1.845440447796119e-03, -2.221572127317577e-09, -2.307753035552218e-06, -1.088375017477021e-05, -2.595403817811366e-05, -1.400634871310530e-08, -6.068675626401468e-06, 3.409043689281228e-01, 1.512053965800416e-01, 6.750781270929947e-03, 2.412768864174333e-01, 2.141060552708067e-01, 2.141060552708066e-01, 3.000745682814367e-01, 7.748535297152472e-03, 1.791065592840782e-02, 4.355444307694290e-02, 2.726675399290639e-02, 4.461261944425752e-03, 2.663159556988251e-02, -1.851398003428965e-03, -2.342703464720274e-03, -5.516078062317580e-03, -1.584553706238018e-03, -1.584553706238010e-03, -3.243173123903607e-03, -1.738136327971191e-04, -2.815694492531245e-04, 2.744290663242735e-03, -7.776589368343529e-05, -1.018203543578472e-03, -1.060353673798761e-05, -2.021954260722029e-07, -2.550246646281700e-06, -9.789095194901504e-04, -7.402799505423597e-06, -7.402799505423593e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
