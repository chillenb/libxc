
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_tpss1kcis_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_tpss1kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.949841200142238e+01, -1.949846702077102e+01, -1.949878792954960e+01, -1.949797112943612e+01, -1.949838820864408e+01, -1.949838820864408e+01, -3.052618059854953e+00, -3.052625816795842e+00, -3.053032808491517e+00, -3.054561877092334e+00, -3.053488023445942e+00, -3.053488023445942e+00, -6.164116370138685e-01, -6.160641794057437e-01, -6.094416478326178e-01, -6.150434563693654e-01, -6.133097325016981e-01, -6.133097325016981e-01, -1.896283622265129e-01, -1.908600880960127e-01, -7.043241196889861e-01, -1.612129822091936e-01, -1.718743433491203e-01, -1.718743433491203e-01, -8.816071496004010e-03, -9.281952973228150e-03, -5.116713283257570e-02, -5.083641155135220e-03, -6.393582149482263e-03, -6.393582149482263e-03, -4.812166824247622e+00, -4.813124708994812e+00, -4.812273143805953e+00, -4.813116629842582e+00, -4.812620160508601e+00, -4.812620160508601e+00, -1.838464735014528e+00, -1.851196066060859e+00, -1.833977833626627e+00, -1.845104039507493e+00, -1.847755531296140e+00, -1.847755531296140e+00, -5.523862847734277e-01, -5.821391638063433e-01, -5.073447067441301e-01, -5.144027642047934e-01, -5.605611267826566e-01, -5.605611267826566e-01, -1.239917913400200e-01, -2.025903887758713e-01, -1.159771691757097e-01, -1.648201632938973e+00, -1.380164182271980e-01, -1.380164182271980e-01, -3.921906664390320e-03, -4.970765222574554e-03, -3.809696142232033e-03, -8.105086682515859e-02, -4.585636291882403e-03, -4.585636291882403e-03, -5.520711429772375e-01, -5.584843192721844e-01, -5.574180018953735e-01, -5.557215412039456e-01, -5.566784551911265e-01, -5.566784551911265e-01, -5.299495082292440e-01, -4.761381556810794e-01, -4.969049275756727e-01, -5.167590954412045e-01, -5.067707163401938e-01, -5.067707163401938e-01, -6.066624313314116e-01, -2.404151788731207e-01, -2.727948856478748e-01, -3.383814873781710e-01, -3.018637170631329e-01, -3.018637170631329e-01, -4.372791657415804e-01, -4.899022419183707e-02, -6.616795435475603e-02, -3.253903580434201e-01, -1.002205456154750e-01, -1.002205456154751e-01, -1.245435251297683e-02, -1.327606672888988e-03, -2.788061483425230e-03, -9.490835144395761e-02, -4.243735348972009e-03, -4.243735348972006e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_tpss1kcis_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_tpss1kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.422629986548067e+01, -2.422635443351382e+01, -2.422676343601116e+01, -2.422595502843701e+01, -2.422635486447338e+01, -2.422635486447338e+01, -3.755677291677346e+00, -3.755714941230958e+00, -3.756798067425711e+00, -3.756978977305907e+00, -3.756455624364532e+00, -3.756455624364532e+00, -7.530887284213024e-01, -7.516487423465638e-01, -7.140196924634913e-01, -7.222214383982349e-01, -7.210158997770471e-01, -7.210158997770471e-01, -1.914900517142411e-01, -1.952107788900976e-01, -8.893773485394928e-01, -1.598037978553239e-01, -1.665734471869904e-01, -1.665734471869904e-01, -1.184055074202287e-02, -1.247259396137483e-02, -6.830033522404762e-02, -6.808139115565195e-03, -8.576275539667140e-03, -8.576275539667140e-03, -5.972690083855268e+00, -5.972382287021199e+00, -5.972779791782378e+00, -5.972504176616744e+00, -5.972481566194368e+00, -5.972481566194368e+00, -2.190132138865280e+00, -2.217711663617294e+00, -2.171085183210702e+00, -2.196029983357371e+00, -2.214162947844126e+00, -2.214162947844126e+00, -6.961995335741522e-01, -7.587417567996277e-01, -6.385742390768314e-01, -6.759063518643341e-01, -7.068206643241121e-01, -7.068206643241121e-01, -1.419712386950877e-01, -1.946682342427590e-01, -1.354839706624109e-01, -2.174182286854773e+00, -1.450148240192388e-01, -1.450148240192388e-01, -5.250713672357242e-03, -6.659204830979565e-03, -5.125549671028289e-03, -1.024682468764449e-01, -6.159698926614119e-03, -6.159698926614119e-03, -7.058024533491088e-01, -7.019829523621630e-01, -7.018928609654237e-01, -7.026299449492982e-01, -7.021281226147423e-01, -7.021281226147423e-01, -6.964553655484542e-01, -6.106699120728047e-01, -6.398855992355762e-01, -6.567704192807723e-01, -6.489305516514304e-01, -6.489305516514304e-01, -7.931461909200199e-01, -2.359441165507480e-01, -2.929199789845862e-01, -4.200315044011104e-01, -3.570514359960297e-01, -3.570514359960297e-01, -5.502623895955824e-01, -6.551562704073474e-02, -8.606987790883742e-02, -4.118823656245103e-01, -1.189662502011902e-01, -1.189662502011903e-01, -1.675161437777862e-02, -1.775698759635696e-03, -3.733024528821557e-03, -1.146844517165649e-01, -5.702087941537085e-03, -5.702087941537081e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_tpss1kcis_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_tpss1kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.133139451114582e-08, -1.133173530606680e-08, -1.133247288981344e-08, -1.132742012710104e-08, -1.133017771830297e-08, -1.133017771830297e-08, -9.599117791645936e-06, -9.601031482907584e-06, -9.650191624282696e-06, -9.618680506650364e-06, -9.629511064636622e-06, -9.629511064636622e-06, -3.162309931175968e-03, -3.184053765957529e-03, -3.680887895175778e-03, -3.628331897596930e-03, -3.632849134054641e-03, -3.632849134054641e-03, -4.106358469665710e-01, -3.941948093322949e-01, -8.966350972123593e-04, -6.907402475747927e-01, -6.279010451167606e-01, -6.279010451167606e-01, 1.664091178360268e+01, 1.655583485715932e+01, 4.473479661099997e-01, 2.789802833922675e+01, 2.755282317996866e+01, 2.755282317996872e+01, -4.789231398238196e-06, -4.840072742873513e-06, -4.791560778730638e-06, -4.836431178627915e-06, -4.814908128031157e-06, -4.814908128031157e-06, -4.179878335334200e-05, -3.998768796016283e-05, -4.124657987667723e-05, -3.954713813017907e-05, -4.114472522553223e-05, -4.114472522553223e-05, -1.090730318545453e-02, -1.063572458420448e-02, -1.245224202716065e-02, -6.395689962751583e-03, -1.145370986633382e-02, -1.145370986633382e-02, -6.897635888463778e-01, -3.194058251649902e-01, -7.211069525848690e-01, -8.104689292314541e-05, -9.098929750681257e-01, -9.098929750681257e-01, 4.846594645531332e+01, 3.361123150798383e+01, 2.772230970550628e+02, -6.968346611113008e-01, 1.064000427798720e+02, 1.064000427798719e+02, -8.189904356395843e-02, -4.875844417716287e-02, -5.926311893748989e-02, -6.984877373112680e-02, -6.436261947566782e-02, -6.436261947566782e-02, -1.488949690091100e-02, -6.422526886856737e-03, -9.934575743728677e-03, -2.125950131641792e-02, -1.428380712859168e-02, -1.428380712859168e-02, -7.007432616643190e-03, -1.656541725974073e-01, -8.837359218145049e-02, -3.750430012011016e-02, -4.921221184276215e-02, -4.921221184276218e-02, -1.303115311654031e-02, 5.100974017447115e-01, -2.390135010352235e-01, -5.230178143340267e-02, -1.073548867894907e+00, -1.073548867894906e+00, 8.932083196290117e+00, 6.512358787192622e+02, 1.468138000669755e+02, -1.012691351302555e+00, 1.458174237650578e+02, 1.458174237650582e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_tpss1kcis_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_tpss1kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.594898329547152e-03, 1.594965563998757e-03, 1.595235660766457e-03, 1.594240923355807e-03, 1.594766067635352e-03, 1.594766067635352e-03, 2.257807996085476e-03, 2.258626451919123e-03, 2.281540796598472e-03, 2.284343710492066e-03, 2.279140378527015e-03, 2.279140378527015e-03, 2.752662635458830e-03, 2.761062809204236e-03, 2.783103846654758e-03, 3.145480459380066e-03, 3.036820980618411e-03, 3.036820980618411e-03, -3.326778341125507e-03, -3.131448213630472e-03, 3.647200278447028e-04, -1.605401051346297e-03, -2.120560172691856e-03, -2.120560172691857e-03, -1.113694764604545e-05, -1.285236873277198e-05, -1.863599292282595e-04, -2.730339623118273e-06, -5.995553427412592e-06, -5.995553427412593e-06, 1.086445166724564e-02, 1.098485896323068e-02, 1.087195920901337e-02, 1.097816622824648e-02, 1.092423171089848e-02, 1.092423171089848e-02, 2.087463214532551e-03, 2.133763034501115e-03, 1.879065176295167e-03, 1.910117824147062e-03, 2.220815215886491e-03, 2.220815215886491e-03, 2.083650319503372e-02, 1.796440139434210e-02, 1.465593608262016e-02, 7.213900392520995e-03, 2.299297898827985e-02, 2.299297898827985e-02, -8.826612471216800e-04, -1.792143621212189e-03, -7.988927940256762e-04, 2.478539427964983e-03, -1.761485300452952e-03, -1.761485300452952e-03, -1.125244929782760e-06, -2.306127522679776e-06, -1.087601755251034e-05, -5.017780121253746e-04, -6.062699023598552e-06, -6.062699023598552e-06, 1.523861819868518e-01, 1.219238064888400e-01, 1.397552436149425e-01, 1.529434670350363e-01, 1.468223406280749e-01, 1.468223406280749e-01, 2.265039319140402e-02, 9.410682919791342e-03, 2.071424116762511e-02, 4.516533660409486e-02, 3.045658685756531e-02, 3.045658685756531e-02, 1.309641563364074e-02, -1.861791292636229e-03, -1.371760152122543e-04, 1.147046703366145e-02, 3.838797717359388e-03, 3.838797717359399e-03, 1.149755790723466e-02, -1.737817980848864e-04, -2.805164620235163e-04, 1.817299407993489e-02, -1.004147594221529e-03, -1.004147594221529e-03, -1.058471278078625e-05, -2.019903156292573e-07, -2.549855628997069e-06, -9.749345013459831e-04, -7.397109956501676e-06, -7.397109956501670e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
