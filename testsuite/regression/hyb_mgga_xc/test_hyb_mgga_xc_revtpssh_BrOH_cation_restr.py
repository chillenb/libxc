
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_revtpssh_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_revtpssh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.037063529425370e+01, -2.037069678121523e+01, -2.037107993549941e+01, -2.037016838526728e+01, -2.037063031555473e+01, -2.037063031555473e+01, -3.100482804016379e+00, -3.100500150717167e+00, -3.101153049215028e+00, -3.102510990816931e+00, -3.101481346689146e+00, -3.101481346689146e+00, -6.183723204204726e-01, -6.178388688768919e-01, -6.067440068937847e-01, -6.129348075067859e-01, -6.111757069024115e-01, -6.111757069024115e-01, -1.863051975283377e-01, -1.881049766487964e-01, -7.100184398589381e-01, -1.535590124269555e-01, -1.648786362498189e-01, -1.648786362498189e-01, -9.075562906756554e-03, -9.551136246705082e-03, -5.146940297613441e-02, -5.244852487529649e-03, -6.588989886502055e-03, -6.588989886502057e-03, -5.048568786428918e+00, -5.049667169620922e+00, -5.048711867342956e+00, -5.049678163362849e+00, -5.049077907526618e+00, -5.049077907526618e+00, -1.880365904551375e+00, -1.896629750145550e+00, -1.875198470856241e+00, -1.889587473436641e+00, -1.891879795321905e+00, -1.891879795321905e+00, -5.709001777579066e-01, -6.049854135020997e-01, -5.190727817414011e-01, -5.323960820589775e-01, -5.804165881876268e-01, -5.804165881876268e-01, -1.199000377829397e-01, -1.947547635145079e-01, -1.124561530242743e-01, -1.700124205973801e+00, -1.319664177498145e-01, -1.319664177498145e-01, -4.047144207099222e-03, -5.127249667937614e-03, -3.919964604398000e-03, -7.994013461368013e-02, -4.722363532397670e-03, -4.722363532397670e-03, -5.828102908804563e-01, -5.924144644441786e-01, -5.907680447372934e-01, -5.882700877756879e-01, -5.896732974797193e-01, -5.896732974797193e-01, -5.529598047213298e-01, -4.986455669200427e-01, -5.238554600198099e-01, -5.464293415267104e-01, -5.351318025449230e-01, -5.351318025449229e-01, -6.291492753851923e-01, -2.348288029904869e-01, -2.718603630526561e-01, -3.456295475402675e-01, -3.064408255782985e-01, -3.064408255782985e-01, -4.511922511302358e-01, -4.941399267310281e-02, -6.614506931580449e-02, -3.357919541883698e-01, -9.713485657661308e-02, -9.713485657661310e-02, -1.279873264965138e-02, -1.370912281146423e-03, -2.877307406304174e-03, -9.239352685359346e-02, -4.369739238755673e-03, -4.369739238755674e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_revtpssh_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_revtpssh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.457457681840148e+01, -2.457463247174793e+01, -2.457506312240829e+01, -2.457423917076304e+01, -2.457464473335574e+01, -2.457464473335574e+01, -3.898643254104647e+00, -3.898676898807308e+00, -3.899555976489597e+00, -3.898860191573844e+00, -3.898826128075606e+00, -3.898826128075606e+00, -7.960308593258201e-01, -7.944121590293582e-01, -7.519025492242304e-01, -7.591589484884773e-01, -7.584755159394356e-01, -7.584755159394356e-01, -2.059756717226122e-01, -2.110634809224912e-01, -9.397050116532563e-01, -1.484314589137126e-01, -1.657401538361436e-01, -1.657401538361436e-01, -1.207758257673338e-02, -1.270710055274658e-02, -6.539016365754219e-02, -6.988866106160026e-03, -8.775783613227468e-03, -8.775783613227468e-03, -6.082281707180601e+00, -6.082275193423855e+00, -6.082406520626263e+00, -6.082395869261273e+00, -6.082214136234805e+00, -6.082214136234805e+00, -2.267376514846539e+00, -2.296087987912130e+00, -2.254446335237823e+00, -2.280755565834080e+00, -2.289137781636885e+00, -2.289137781636885e+00, -7.247413846719426e-01, -7.956115366984267e-01, -6.713280914872226e-01, -7.100395322121741e-01, -7.360453019705256e-01, -7.360453019705256e-01, -1.256689608148031e-01, -1.922959093856902e-01, -1.202186443108245e-01, -2.267769093324813e+00, -1.300255083777461e-01, -1.300255083777461e-01, -5.393939115119440e-03, -6.832004676961937e-03, -5.221776876566151e-03, -9.364458120107802e-02, -6.290707552820884e-03, -6.290707552820881e-03, -7.350850324470299e-01, -7.298735743988936e-01, -7.306581362271489e-01, -7.319970809138607e-01, -7.312250989604560e-01, -7.312250989604560e-01, -7.207376209852344e-01, -6.382890061981070e-01, -6.633770875333437e-01, -6.796890591417550e-01, -6.714681004112555e-01, -6.714681004112553e-01, -8.321697528197767e-01, -2.494432026752385e-01, -3.164861757791991e-01, -4.415867326119635e-01, -3.811893049629946e-01, -3.811893049629947e-01, -5.736685195079264e-01, -6.315172072005637e-02, -8.161868186419494e-02, -4.322948325233358e-01, -1.053714642850504e-01, -1.053714642850504e-01, -1.700669059361392e-02, -1.827699577714621e-03, -3.835230511929504e-03, -1.022537650380869e-01, -5.821174910406024e-03, -5.821174910406010e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_revtpssh_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_revtpssh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.783564925166644e-08, -1.783608949500615e-08, -1.783709205050817e-08, -1.783057024062171e-08, -1.783412259790744e-08, -1.783412259790744e-08, -9.046768586694866e-06, -9.049196275490770e-06, -9.117143386295227e-06, -9.126986594857614e-06, -9.112673919944262e-06, -9.112673919944262e-06, -1.824190574246612e-03, -1.859745837923028e-03, -2.723958608850488e-03, -2.847497956119248e-03, -2.777699132628014e-03, -2.777699132628014e-03, -4.131816469517042e-01, -3.984430048724337e-01, -2.782263174868510e-05, -8.057700610968503e-01, -6.581486639952930e-01, -6.581486639952926e-01, -3.425523291976819e+00, -3.617296415477114e+00, -1.946507490752450e+00, -3.120557897900635e+00, -3.960538361643768e+00, -3.960538361654030e+00, -7.182551468352344e-06, -7.245372557336973e-06, -7.185344066486993e-06, -7.240789657722812e-06, -7.214334313207347e-06, -7.214334313207347e-06, -6.092165165907763e-05, -5.982607120633695e-05, -5.904492328801969e-05, -5.794483678214759e-05, -6.131007650449269e-05, -6.131007650449269e-05, -1.594425265013330e-02, -1.119244845261873e-02, -1.334327156427809e-02, -3.143371540056389e-03, -1.667808918396732e-02, -1.667808918396732e-02, -1.167567754416900e+00, -3.401615661840947e-01, -1.310518635909047e+00, -4.785716512876889e-05, -1.235011930270519e+00, -1.235011930270519e+00, -4.113427133047344e+00, -3.672386180073041e+00, -2.303990642492238e+01, -2.070452504746809e+00, -1.072371740488038e+01, -1.072371740488589e+01, -1.259056293381886e-01, -7.419633317689878e-02, -8.826018940544594e-02, -1.033260896137921e-01, -9.534720899341834e-02, -9.534720899341834e-02, -6.787526684817216e-02, -1.740681107982499e-02, -2.459035976425618e-02, -4.059381753602739e-02, -3.107818550170802e-02, -3.107818550170804e-02, -6.291416599491003e-03, -1.657593772022264e-01, -9.517742163842693e-02, -5.519233092766303e-02, -6.836960055054404e-02, -6.836960055054397e-02, -2.456939812811348e-02, -1.783748798416221e+00, -1.736199957960168e+00, -8.539022321710249e-02, -2.136728221700442e+00, -2.136728221700443e+00, -2.754711325464007e+00, -1.804544043244846e+01, -8.728252492985145e+00, -2.203256823672178e+00, -1.354546577893857e+01, -1.354546577903241e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_revtpssh_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_revtpssh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.623581825473080e-03, 2.623670137332183e-03, 2.624040225344827e-03, 2.622734323813656e-03, 2.623421560508797e-03, 2.623421560508797e-03, 2.584862754659350e-03, 2.585937463227278e-03, 2.617200362318297e-03, 2.631486532140017e-03, 2.618814761675818e-03, 2.618814761675818e-03, 3.027848473968470e-03, 3.052390460921064e-03, 3.568559381202840e-03, 4.294372110978933e-03, 4.035512754406519e-03, 4.035512754406519e-03, 1.497553939072151e-02, 1.647981648173854e-02, 1.721111134138157e-04, 2.648800147200142e-03, 6.248507466648097e-03, 6.248507466648080e-03, 1.414745663359448e-08, 1.902035183787433e-08, 1.036351205012366e-05, 6.963670086935353e-10, 3.324478481551664e-09, 3.324478493086891e-09, 1.646788289296231e-02, 1.661524966823958e-02, 1.647691182767519e-02, 1.660690075167718e-02, 1.654115457225788e-02, 1.654115457225788e-02, 5.667863262341825e-03, 5.910437022249522e-03, 5.373397834733379e-03, 5.575977842796097e-03, 5.951553745551563e-03, 5.951553745551563e-03, 3.969338704604046e-02, 2.518657896717568e-02, 2.324871598792615e-02, 9.411422077573112e-03, 4.289553753817747e-02, 4.289553753817747e-02, 4.076366021567915e-04, 5.238300582006244e-03, 3.114471313611661e-04, 2.623934105918462e-03, 1.686510593051560e-03, 1.686510593051561e-03, 1.180297020525694e-10, 5.202995737638445e-10, 3.370236132172994e-09, 8.755643678258921e-05, 1.932292834123134e-09, 1.932292834117811e-09, 2.434781325338070e-01, 1.942657606245169e-01, 2.176418090559354e-01, 2.363739396676359e-01, 2.273516638593183e-01, 2.273516638593182e-01, 6.244779692058043e-02, 4.122079355239316e-02, 6.107801308556245e-02, 9.594220427651572e-02, 7.552545981856314e-02, 7.552545981856314e-02, 1.737827635433637e-02, 9.575936547152438e-03, 1.656245788187154e-02, 3.230932002666728e-02, 2.643245135019735e-02, 2.643245135019738e-02, 3.586121839319716e-02, 8.852386597851382e-06, 2.592879721862112e-05, 4.619866793460583e-02, 3.625237969405776e-04, 3.625237969405794e-04, 2.230930012987435e-08, 1.267362100885072e-12, 2.206922079720794e-10, 3.151021536854216e-04, 2.279514306597997e-09, 2.279514321410808e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
