
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_revtpssh_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_revtpssh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.807812194717153e+01, -1.807817642438061e+01, -1.807843227852252e+01, -1.807762178223101e+01, -1.807804451663934e+01, -1.807804451663934e+01, -3.022235680941094e+00, -3.022232047521097e+00, -3.022189991753907e+00, -3.022472852492907e+00, -3.022136992573144e+00, -3.361809506497768e+00, -6.369646056504676e-01, -6.757038107654697e-01, -6.642007313301110e-01, -6.665430657708262e-01, -6.660632881569658e-01, -6.660632881569658e-01, -1.877394353807418e-01, -1.898125440594017e-01, -7.409367902259431e-01, -1.587325110330967e-01, -1.690442857491897e-01, -1.690442857491897e-01, -9.075635338688515e-03, -9.551294795082738e-03, -5.159994104592980e-02, -5.245026382188680e-03, -6.589229645514206e-03, -6.589229645514206e-03, -5.052873549994615e+00, -5.053959004695404e+00, -5.052928934560605e+00, -4.502288282867705e+00, -5.053421041991207e+00, -5.053421041991207e+00, -1.738795216712073e+00, -1.749636653843323e+00, -1.730985128424634e+00, -1.740508633967045e+00, -1.748565927469499e+00, -1.917689848558182e+00, -5.943418363989288e-01, -6.511346636853181e-01, -5.475471821742923e-01, -5.729519629655934e-01, -6.048947440982542e-01, -5.624516295377155e-01, -1.058075844500747e-01, -1.969012109895625e-01, -9.873900952672722e-02, -1.877494875494717e+00, -1.341823981044776e-01, -1.341823981044775e-01, -4.195502641527920e-03, -5.127618985986694e-03, -3.920188932906945e-03, -6.938510679677230e-02, -4.859011990282507e-03, -4.722805812963512e-03, -6.100723821337201e-01, -6.061206361442016e-01, -5.598293551752092e-01, -6.087536401169840e-01, -6.081854136071572e-01, -6.081854136071573e-01, -5.943492800201614e-01, -5.005809747202087e-01, -5.278218478047277e-01, -5.553392752206633e-01, -5.412986516515119e-01, -5.025014200005553e-01, -6.789232872743768e-01, -2.300963682793430e-01, -2.751842536719570e-01, -3.440887911515705e-01, -3.114763856160588e-01, -3.114763856160588e-01, -4.371284854354843e-01, -4.946962090100772e-02, -6.646884228330199e-02, -3.464027499640318e-01, -8.601777548964828e-02, -9.841384226503720e-02, -1.280392237086037e-02, -1.370954532009106e-03, -2.877334206766279e-03, -9.308733065446077e-02, -4.370037356666029e-03, -4.370037356666032e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_revtpssh_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_revtpssh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.429783003767866e+01, -2.429790216219129e+01, -2.429824167931233e+01, -2.429716851848415e+01, -2.429772815644573e+01, -2.429772815644573e+01, -3.938699037992038e+00, -3.938738452886606e+00, -3.939852994658171e+00, -3.939749371638328e+00, -3.939360485427737e+00, -4.114075708457001e+00, -8.163631698693204e-01, -7.612449959386066e-01, -7.258617996767466e-01, -7.367501923234632e-01, -7.333445294440010e-01, -7.333445294440010e-01, -2.056667985630590e-01, -2.105955698062554e-01, -9.603212034876599e-01, -1.545953584927429e-01, -1.676038921334030e-01, -1.676038921334030e-01, -1.207787084515431e-02, -1.270773139016662e-02, -6.588639117339905e-02, -6.989560627665575e-03, -8.776740120767759e-03, -8.776740120767759e-03, -6.088956270229799e+00, -6.088892550409369e+00, -6.088944121934682e+00, -6.020506548408994e+00, -6.088928777131425e+00, -6.088928777131425e+00, -2.243444133735523e+00, -2.260179853468784e+00, -2.231499827667330e+00, -2.245953083548055e+00, -2.258627383098196e+00, -2.328703009134686e+00, -7.594979544805271e-01, -8.143968748868359e-01, -7.004101210762845e-01, -7.325694302380081e-01, -7.710140794719581e-01, -7.407152835787287e-01, -1.370293673113039e-01, -1.958109080726533e-01, -1.278956804787662e-01, -2.339244220135710e+00, -1.339016550908954e-01, -1.339016550908954e-01, -5.526134825978782e-03, -6.833479768265683e-03, -5.222671998941724e-03, -8.996256954331774e-02, -6.395309952055171e-03, -6.292472759293060e-03, -7.430448811641625e-01, -7.417211627040335e-01, -7.357642068002637e-01, -7.423247975043984e-01, -7.421274174668134e-01, -7.421274174668134e-01, -7.245264033628012e-01, -6.433447236103618e-01, -6.733938450825598e-01, -6.955506627157965e-01, -6.850741216157328e-01, -6.631090418270493e-01, -8.544072341398029e-01, -2.956418886073756e-01, -3.159927586472497e-01, -4.391577015352510e-01, -3.836494447637180e-01, -3.836494447637179e-01, -5.638984009976308e-01, -6.335995872378079e-02, -8.277522916830238e-02, -4.484885908220912e-01, -1.114302161981370e-01, -1.089057527779713e-01, -1.702731885183528e-02, -1.827868541758106e-03, -3.835337617668159e-03, -1.042455316285180e-01, -5.822364721769421e-03, -5.822364721769409e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_revtpssh_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_revtpssh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [2.039924003199479e-09, 2.039802510732795e-09, 2.039295111207317e-09, 2.041095319478875e-09, 2.040147549238072e-09, 2.040147549238072e-09, 7.200633943290909e-06, 7.199482081612149e-06, 7.168565268413373e-06, 7.178480389774645e-06, 7.180389449988028e-06, -6.203670055502163e-06, 6.612707182041012e-03, -2.509232090272500e-03, -2.522308649666970e-03, -2.632692996772384e-03, -2.638034093002634e-03, -2.638034093002634e-03, -3.948064798312911e-01, -3.772916192752541e-01, 3.982474498486216e-03, -6.461646226842548e-01, -5.782990391559092e-01, -5.782990391559085e-01, -3.368948187102657e+00, -3.508478774907858e+00, -1.558244124197924e+00, -2.480531861182224e+00, -3.448513896591203e+00, -3.448513896591203e+00, -7.140625791565604e-06, -7.203571352517276e-06, -7.144266816168807e-06, 1.391307994565669e-07, -7.172037040895152e-06, -7.172037040895152e-06, 7.906996284844703e-05, 7.532620339973566e-05, 8.196823012194220e-05, 7.854568600171171e-05, 7.561679337540869e-05, -5.012265529790868e-05, -1.037280203260472e-02, -1.673942778413070e-02, -9.351861096716967e-03, -1.222819229475540e-02, -1.109841964811897e-02, 4.852640691626192e-03, 1.939966722579825e+01, -2.940098453303788e-01, 2.627328859502850e+01, -1.352716699139610e-04, -1.068541540679294e+00, -1.068541540679296e+00, 1.953538178491144e+07, -2.193133623388376e+00, -1.771087502559315e+01, 1.225738538811514e+02, 1.056437351998703e+07, -6.799589530654490e+00, -1.301747882491600e-01, -6.596568739741981e-02, -1.114935175920027e-02, -9.684900225377618e-02, -8.763873355989663e-02, -8.763873355989663e-02, -1.269266983543296e-01, -1.565256463415228e-02, -2.083277649518525e-02, -3.284858765943040e-02, -2.541220862560338e-02, 5.664841248476667e-03, -1.101012342282986e-02, 5.834841797609580e-01, -8.655042730572912e-02, 7.209640212203419e-02, -5.517775340588853e-02, -5.517775340588851e-02, 2.184577862670264e-02, -1.605855301024666e+00, -1.347203424423367e+00, -5.323063020445794e-02, 4.782793857735641e+01, -1.714265380029054e+00, -1.607888874683197e+00, -2.689253622136598e+00, -7.703316034330489e+00, -1.916759750820206e+00, -9.689838372385177e+00, -9.689838372489948e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_revtpssh_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_revtpssh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.397793019623629e-04, 1.397825714534980e-04, 1.397955121475119e-04, 1.397471389855474e-04, 1.397727125416410e-04, 1.397727125416410e-04, -4.775950374051918e-04, -4.773850927309460e-04, -4.717556243679486e-04, -4.740078545445353e-04, -4.738169029461256e-04, 3.909538748270762e-03, -1.779584714260928e-03, 6.338150141504536e-03, 4.321225654869946e-03, 5.576699089614751e-03, 5.423963064362792e-03, 5.423963064362792e-03, 1.398449785924239e-02, 1.522729547948723e-02, -4.966872564372975e-04, 2.379804588998107e-03, 5.548320790427423e-03, 5.548320790427412e-03, 1.441935970468230e-08, 1.939443010393436e-08, 7.871835130123517e-07, 7.074073754946327e-10, 3.381264002993528e-09, 3.381264002993528e-09, 1.649576796098008e-02, 1.664378861207351e-02, 1.650425783389550e-02, 7.044794347979049e-04, 1.656966728183633e-02, 1.656966728183633e-02, -1.011528732500840e-03, -9.928578242523870e-04, -1.019189702409298e-03, -1.009583390728927e-03, -9.944460728592446e-04, 5.368918101842911e-03, 4.304011031666744e-02, 7.988799501577974e-02, 3.046361406446415e-02, 4.538838071980130e-02, 4.771647073679317e-02, 1.983362881510247e-03, -9.355343278132513e-05, 2.716386845021488e-03, -7.502121168060119e-05, 1.701121431748634e-02, 1.616967188045315e-03, 1.616967188045312e-03, -2.298178062742321e-09, 5.285387054543167e-10, 3.419721036112915e-09, -2.684900501184172e-05, -1.448932625493652e-08, 1.962277920933136e-09, 4.246890469555197e-01, 2.180049846508731e-01, 6.983566831996497e-03, 3.168616574601542e-01, 2.872532868116030e-01, 2.872532868116028e-01, 3.824899719590983e-01, 3.974983723785984e-02, 5.857654955442609e-02, 9.506835693221027e-02, 7.288253273702686e-02, 4.615098563199054e-03, 6.241202290606546e-02, -1.915239313892033e-03, 1.477329288260269e-02, -5.706287650673358e-03, 2.317537701383078e-02, 2.317537701383082e-02, -3.355006679900283e-03, 9.343582280271026e-06, 2.755102368882031e-05, 4.552547058225085e-02, -8.044747622424340e-05, 3.747068100847731e-04, 2.282509513764406e-08, 1.282564590582503e-12, 2.236804106292018e-10, 3.286701951417506e-04, 2.314006786974222e-09, 2.314006807722626e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
