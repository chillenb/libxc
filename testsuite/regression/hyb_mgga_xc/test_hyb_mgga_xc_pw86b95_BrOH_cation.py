
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_pw86b95_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_pw86b95", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.501468495099510e+01, -1.501469620190667e+01, -1.501480738233984e+01, -1.501463870697804e+01, -1.501471839302525e+01, -1.501471839302525e+01, -2.556324912054629e+00, -2.556285879794425e+00, -2.555426063873375e+00, -2.557194047328209e+00, -2.556242236060392e+00, -2.556242236060392e+00, -5.447789589305184e-01, -5.446997006826682e-01, -5.434820251299969e-01, -5.464218771135275e-01, -5.456909983171921e-01, -5.456909983171921e-01, -1.660653895585708e-01, -1.674478359949633e-01, -6.410451277709368e-01, -1.371357709280673e-01, -1.559160461040923e-01, -1.559160461040922e-01, -1.732089373582471e-02, -1.777228714302454e-02, -5.408937689265617e-02, -1.255460575952737e-02, -1.497536792736136e-02, -1.497536792736135e-02, -3.630380024473648e+00, -3.629606190708514e+00, -3.630352363876324e+00, -3.629669076449631e+00, -3.629982960852814e+00, -3.629982960852814e+00, -1.579821191332172e+00, -1.586857118364023e+00, -1.580645715375186e+00, -1.586917453916251e+00, -1.583238936149946e+00, -1.583238936149946e+00, -4.482616989654741e-01, -4.654818294600981e-01, -4.224339892154721e-01, -4.233112469785407e-01, -4.522731487221427e-01, -4.522731487221427e-01, -1.061124703626496e-01, -1.743937444387919e-01, -9.993363349941181e-02, -1.347252279409425e+00, -1.166836570814946e-01, -1.166836570814946e-01, -1.045568728329625e-02, -1.218615182400102e-02, -8.640136845135865e-03, -7.386916310863254e-02, -1.067880918824863e-02, -1.067880918824863e-02, -4.234540134970026e-01, -4.239168800940954e-01, -4.235796723039836e-01, -4.234341469737833e-01, -4.234904076546742e-01, -4.234904076546742e-01, -4.131910595599220e-01, -3.958121620202165e-01, -3.995680172049206e-01, -4.021389472304608e-01, -4.006900149776149e-01, -4.006900149776149e-01, -4.891201363115090e-01, -2.103060387538425e-01, -2.405840452258195e-01, -2.894115790009897e-01, -2.636367598904075e-01, -2.636367598904075e-01, -3.676706604747441e-01, -5.295214284994654e-02, -6.493465112701269e-02, -2.720208213207687e-01, -8.653385051918284e-02, -8.653385051918286e-02, -2.177576472347923e-02, -4.704141791072242e-03, -7.905867160492928e-03, -8.274212450944932e-02, -9.934115615702137e-03, -9.934115615702128e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_pw86b95_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_pw86b95", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.727973790085726e+01, -1.727971382476638e+01, -1.727983020515754e+01, -1.727978122452395e+01, -1.728008795444372e+01, -1.728015901447374e+01, -1.727904177995377e+01, -1.727883073074852e+01, -1.727979173362210e+01, -1.727933546551327e+01, -1.727979173362210e+01, -1.727933546551327e+01, -2.851302704167319e+00, -2.851426889304669e+00, -2.851318245773905e+00, -2.851451768579586e+00, -2.851813564860487e+00, -2.851962584910492e+00, -2.851054543678237e+00, -2.851249947175072e+00, -2.850864813028148e+00, -2.851675530859902e+00, -2.850864813028148e+00, -2.851675530859902e+00, -6.063041198407707e-01, -6.070535701073059e-01, -6.056011600208068e-01, -6.065826456211089e-01, -5.936778132216362e-01, -5.926499151927601e-01, -5.952979193396994e-01, -5.950758926567296e-01, -6.024975229330743e-01, -5.958231242700830e-01, -6.024975229330743e-01, -5.958231242700830e-01, -1.799623779151056e-01, -1.791305662542204e-01, -1.819221564578711e-01, -1.809818053324444e-01, -7.332872254375238e-01, -7.406079659398047e-01, -1.448835398242122e-01, -1.449777413137634e-01, -1.621398870557009e-01, -1.475919989595351e-01, -1.621398870557009e-01, -1.475919989595350e-01, -1.365272014433938e-02, -1.418296898377347e-02, -1.398127384332659e-02, -1.459071451695524e-02, -4.694673399381834e-02, -4.865157983894530e-02, -1.009979311962233e-02, -1.002506331463499e-02, -1.272678692816441e-02, -8.252179505505016e-03, -1.272678692816441e-02, -8.252179505505015e-03, -4.358629315173396e+00, -4.357570357584253e+00, -4.361756101226478e+00, -4.360593985968912e+00, -4.358794102298007e+00, -4.357669718183852e+00, -4.361479453357614e+00, -4.360414009471283e+00, -4.360234916034848e+00, -4.359089177733454e+00, -4.360234916034848e+00, -4.359089177733454e+00, -1.640090577696033e+00, -1.639920117388094e+00, -1.648990365980187e+00, -1.648598964737549e+00, -1.636367517498386e+00, -1.636449120782348e+00, -1.643953684316039e+00, -1.644202773348018e+00, -1.647598300589635e+00, -1.645857386315972e+00, -1.647598300589635e+00, -1.645857386315972e+00, -5.201495807625773e-01, -5.190630857860004e-01, -5.919750882825636e-01, -5.923184087195973e-01, -4.820218558335141e-01, -4.901422108704580e-01, -5.232267262932441e-01, -5.324368941482213e-01, -5.374919397448751e-01, -5.214178132376764e-01, -5.374919397448754e-01, -5.214178132376764e-01, -1.063164213041699e-01, -1.065139437404663e-01, -1.845308742526232e-01, -1.847223571038592e-01, -9.826449600743843e-02, -1.004040899043014e-01, -1.715624240913287e+00, -1.715022261478403e+00, -1.216781685863076e-01, -1.201065918956057e-01, -1.216781685863076e-01, -1.201065918956057e-01, -8.209769857742574e-03, -8.523720621866182e-03, -9.684049302293107e-03, -9.849733954426235e-03, -6.841613497236007e-03, -7.009676703916363e-03, -7.012205023388234e-02, -7.050011574912220e-02, -7.425185114939560e-03, -9.013146804320991e-03, -7.425185114939569e-03, -9.013146804321005e-03, -5.533876814519552e-01, -5.548668303930613e-01, -5.445945674207006e-01, -5.462127943828718e-01, -5.482581822121017e-01, -5.498427112100237e-01, -5.508873928939715e-01, -5.523983364262036e-01, -5.496298618822680e-01, -5.511747959515869e-01, -5.496298618822680e-01, -5.511747959515869e-01, -5.391659602172471e-01, -5.403895025839788e-01, -4.332603124094798e-01, -4.340451593102408e-01, -4.524990210440676e-01, -4.537077772879721e-01, -4.835614127980392e-01, -4.847921150079083e-01, -4.660955819296578e-01, -4.671976679309388e-01, -4.660955819296578e-01, -4.671976679309388e-01, -6.185111051179656e-01, -6.193821850192489e-01, -2.241451392002308e-01, -2.242718614973895e-01, -2.587284932358256e-01, -2.586197234420060e-01, -3.204480650260224e-01, -3.211685786202794e-01, -2.865088785458730e-01, -2.862068613719734e-01, -2.865088785458729e-01, -2.862068613719734e-01, -4.045817030742727e-01, -4.052192376302020e-01, -4.635943851704590e-02, -4.656810818483470e-02, -5.876436328489906e-02, -5.990293081190445e-02, -3.085349858331696e-01, -3.078538816477010e-01, -8.545822449383636e-02, -8.606795462741820e-02, -8.545822449383642e-02, -8.606795462741824e-02, -1.742353679869541e-02, -1.777743581126278e-02, -3.869709014971145e-03, -3.660093807162912e-03, -6.224324075874605e-03, -6.419574321218811e-03, -8.095492870714092e-02, -8.159284881655987e-02, -6.690256422170614e-03, -8.517109310298842e-03, -6.690256422170610e-03, -8.517109310298821e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_pw86b95_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_pw86b95", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.364240843278314e-08, 0.000000000000000e+00, -1.364251959399948e-08, -1.364227764811380e-08, 0.000000000000000e+00, -1.364242416836268e-08, -1.364176870024000e-08, 0.000000000000000e+00, -1.364172232517532e-08, -1.364325302326840e-08, 0.000000000000000e+00, -1.364360760192096e-08, -1.364233874061206e-08, 0.000000000000000e+00, -1.364278568275284e-08, -1.364233874061206e-08, 0.000000000000000e+00, -1.364278568275284e-08, -1.615534306181210e-05, 0.000000000000000e+00, -1.615949234122936e-05, -1.615615787620454e-05, 0.000000000000000e+00, -1.616046678330536e-05, -1.617674412212843e-05, 0.000000000000000e+00, -1.618104586211583e-05, -1.614569858224238e-05, 0.000000000000000e+00, -1.614907223611271e-05, -1.616274128407344e-05, 0.000000000000000e+00, -1.616667867228677e-05, -1.616274128407344e-05, 0.000000000000000e+00, -1.616667867228677e-05, -6.036957344423171e-03, 0.000000000000000e+00, -6.034134271545952e-03, -6.052541328815272e-03, 0.000000000000000e+00, -6.044185473546136e-03, -6.222872681545189e-03, 0.000000000000000e+00, -6.197027887664618e-03, -6.190366243005561e-03, 0.000000000000000e+00, -6.239749283751955e-03, -6.079785580907061e-03, 0.000000000000000e+00, -5.649846892700059e-03, -6.079785580907061e-03, 0.000000000000000e+00, -5.649846892700059e-03, -5.474555790859167e-01, 0.000000000000000e+00, -5.593411942344966e-01, -5.378181496126027e-01, 0.000000000000000e+00, -5.508951550762330e-01, -1.869809504032391e-03, 0.000000000000000e+00, -1.772519239674279e-03, -9.661921025244429e-01, 0.000000000000000e+00, -9.600971245595471e-01, -6.482392251785832e-01, 0.000000000000000e+00, -4.416032924266489e-01, -6.482392251785833e-01, 0.000000000000000e+00, -4.416032924266506e-01, -2.923194436807050e+03, 0.000000000000000e+00, -2.515302382896664e+03, -2.665892803932999e+03, 0.000000000000000e+00, -2.253900141608936e+03, -3.096588384902346e+01, 0.000000000000000e+00, -2.727054439430673e+01, -9.612554703803327e+03, 0.000000000000000e+00, -9.899308507873408e+03, -3.848555271971973e+03, 0.000000000000000e+00, -2.163947599228266e+04, -3.848555271971973e+03, 0.000000000000000e+00, -2.163947599228267e+04, -3.653588184926613e-06, 0.000000000000000e+00, -3.657193044398578e-06, -3.646427231514443e-06, 0.000000000000000e+00, -3.650270945485877e-06, -3.653221210922147e-06, 0.000000000000000e+00, -3.656974034216183e-06, -3.647075090384499e-06, 0.000000000000000e+00, -3.650690954921043e-06, -3.649922703128318e-06, 0.000000000000000e+00, -3.653731854867305e-06, -3.649922703128318e-06, 0.000000000000000e+00, -3.653731854867305e-06, -1.028433879317740e-04, 0.000000000000000e+00, -1.028883847010221e-04, -1.016563753900141e-04, 0.000000000000000e+00, -1.017438711482613e-04, -1.011219211113828e-04, 0.000000000000000e+00, -1.017702895139600e-04, -1.001359022131967e-04, 0.000000000000000e+00, -1.007279745689549e-04, -1.034499572890663e-04, 0.000000000000000e+00, -1.023706221623530e-04, -1.034499572890663e-04, 0.000000000000000e+00, -1.023706221623530e-04, -1.525512212460325e-02, 0.000000000000000e+00, -1.548106693329949e-02, -2.073630295980086e-03, 0.000000000000000e+00, -1.984930908596147e-03, -1.856212048201445e-02, 0.000000000000000e+00, -1.788509302434040e-02, 2.129114786236209e-03, 0.000000000000000e+00, -1.940748500026492e-03, -1.358436338558719e-02, 0.000000000000000e+00, -1.535441905756007e-02, -1.358436338558714e-02, 0.000000000000000e+00, -1.535441905756006e-02, -2.311549189802405e+00, 0.000000000000000e+00, -2.301784773992288e+00, -4.068573119747540e-01, 0.000000000000000e+00, -4.046111452826929e-01, -3.019489960555580e+00, 0.000000000000000e+00, -2.763035425821559e+00, -7.150506880248087e-05, 0.000000000000000e+00, -7.145091599150349e-05, -1.640231566516322e+00, 0.000000000000000e+00, -1.793358998732758e+00, -1.640231566516322e+00, 0.000000000000000e+00, -1.793358998732758e+00, -2.196040665202550e+04, 0.000000000000000e+00, -1.889895452835175e+04, -1.137481699062690e+04, 0.000000000000000e+00, -1.062749996411038e+04, -4.579225998249609e+04, 0.000000000000000e+00, -4.162426327577812e+04, -8.995552082506405e+00, 0.000000000000000e+00, -8.758957580263107e+00, -3.293313240625247e+04, 0.000000000000000e+00, -1.525185496607735e+04, -3.293313240625238e+04, 0.000000000000000e+00, -1.525185496607733e+04, 2.035340983534736e-03, 0.000000000000000e+00, 2.074657347869404e-03, -6.941704071902897e-03, 0.000000000000000e+00, -6.704737372908559e-03, -4.142797278665041e-03, 0.000000000000000e+00, -3.941297786821077e-03, -1.510448408133578e-03, 0.000000000000000e+00, -1.403236077880522e-03, -2.858346448261299e-03, 0.000000000000000e+00, -2.703015306152837e-03, -2.858346448261299e-03, 0.000000000000000e+00, -2.703015306152837e-03, 7.679644008867309e-03, 0.000000000000000e+00, 7.438860556368316e-03, -2.769220260794285e-02, 0.000000000000000e+00, -2.751296905913875e-02, -2.709680870963826e-02, 0.000000000000000e+00, -2.684365939449881e-02, -2.212299629678158e-02, 0.000000000000000e+00, -2.182660364419963e-02, -2.555939787335164e-02, 0.000000000000000e+00, -2.528973720138497e-02, -2.555939787335164e-02, 0.000000000000000e+00, -2.528973720138497e-02, -1.868623713887182e-03, 0.000000000000000e+00, -1.823767637772384e-03, -2.171536791071390e-01, 0.000000000000000e+00, -2.164791323705810e-01, -1.442758598597119e-01, 0.000000000000000e+00, -1.448002412700625e-01, -8.447884873568373e-02, 0.000000000000000e+00, -8.345225587987501e-02, -1.133249909976946e-01, 0.000000000000000e+00, -1.141673670119160e-01, -1.133249909976947e-01, 0.000000000000000e+00, -1.141673670119160e-01, -3.537205710430857e-02, 0.000000000000000e+00, -3.531780641791238e-02, -3.157945121361452e+01, 0.000000000000000e+00, -3.108113950248708e+01, -1.473196985028177e+01, 0.000000000000000e+00, -1.379368299682540e+01, -1.056641609299197e-01, 0.000000000000000e+00, -1.111026535102196e-01, -5.060654888009124e+00, 0.000000000000000e+00, -5.050305127150406e+00, -5.060654888009114e+00, 0.000000000000000e+00, -5.050305127150402e+00, -1.122536573222857e+03, 0.000000000000000e+00, -1.038498115528498e+03, -4.430088452216637e+05, 0.000000000000000e+00, -5.537497742362446e+05, -6.635237738566875e+04, 0.000000000000000e+00, -5.867091027123032e+04, -6.045642086667735e+00, 0.000000000000000e+00, -5.841038955904554e+00, -5.007519885321103e+04, 0.000000000000000e+00, -1.909094703504768e+04, -5.007519885321114e+04, 0.000000000000000e+00, -1.909094703504778e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_pw86b95_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_pw86b95", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_pw86b95_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_pw86b95", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-1.453789028236753e-05, -1.453795539533437e-05, -1.453819599291548e-05, -1.453817725604425e-05, -1.453863452856280e-05, -1.453895670951458e-05, -1.453519611389047e-05, -1.453456982004614e-05, -1.453809985687147e-05, -1.453592645007412e-05, -1.453809985687147e-05, -1.453592645007412e-05, -2.773989440474821e-04, -2.777448485755736e-04, -2.774399024960354e-04, -2.778084148197651e-04, -2.786639438061573e-04, -2.789831013985793e-04, -2.764684431128833e-04, -2.768336125599870e-04, -2.773459159014582e-04, -2.778996350686698e-04, -2.773459159014582e-04, -2.778996350686698e-04, -2.491933376166078e-03, -2.642184406024723e-03, -2.443485038052027e-03, -2.625098956656117e-03, -1.892260784642392e-03, -1.718606872764310e-03, -1.784285750730145e-03, -1.842295697882058e-03, -2.877173658706024e-03, -1.074779912048118e-03, -2.877173658706024e-03, -1.074779912048118e-03, -2.393230896972181e-03, -2.713708004130124e-03, -2.615544232205190e-03, -3.002092192391819e-03, -2.055021085824489e-03, -2.505285064109242e-03, -9.520634906531265e-04, -9.656735293285018e-04, -2.354546618229709e-03, -4.301318033992195e-04, -2.354546618229706e-03, -4.301318033992202e-04, -2.997087148185276e-07, -3.518866688465333e-07, -3.601478287499169e-07, -4.346246878873608e-07, -2.296147427444176e-05, -2.686840224581216e-05, -6.513783696351832e-08, -6.041348501259918e-08, -2.169816319607273e-07, -1.113827375369721e-07, -2.169816319607280e-07, -1.113827375369724e-07, -2.269464053455427e-04, -2.269942041936558e-04, -2.280519143712854e-04, -2.280628082763925e-04, -2.270020733267227e-04, -2.270268297199039e-04, -2.279506377716149e-04, -2.279975920571464e-04, -2.275163759208161e-04, -2.275310559213020e-04, -2.275163759208161e-04, -2.275310559213020e-04, -2.646821730286466e-04, -2.646819876534644e-04, -2.699096506917164e-04, -2.698297537548436e-04, -2.456280887323677e-04, -2.511417099558468e-04, -2.500045673272401e-04, -2.554573505090169e-04, -2.824632236149086e-04, -2.694761276964254e-04, -2.824632236149086e-04, -2.694761276964254e-04, -6.347379240705518e-03, -6.390511160701925e-03, -1.184698105674906e-02, -1.195811997073223e-02, -6.321235538715860e-03, -6.490396976230268e-03, -1.327119950005738e-02, -1.243099175812918e-02, -6.676694104181627e-03, -6.989931597318513e-03, -6.676694104181627e-03, -6.989931597318513e-03, -2.781922350892201e-04, -2.928988132952843e-04, -1.076133359808841e-03, -1.086732839708232e-03, -2.304560833431565e-04, -2.641079765903469e-04, -1.927400997080872e-03, -1.929892281417028e-03, -4.987911163701257e-04, -7.898358953142875e-04, -4.987911163701257e-04, -7.898358953142875e-04, -4.030688190349819e-08, -3.894187119486963e-08, -7.056855839852068e-08, -6.799578383656435e-08, -1.755342139979134e-07, -2.301047862615557e-07, -1.134151689771698e-04, -1.109104482960024e-04, -9.269830704810115e-08, -2.249914142493880e-07, -9.269830704810089e-08, -2.249914142493877e-07, -1.717652751912049e-02, -1.713619248568862e-02, -1.386428745944997e-02, -1.386672723675737e-02, -1.491063312506914e-02, -1.490782769044810e-02, -1.587685030660696e-02, -1.584744786659725e-02, -1.538304991477683e-02, -1.536705133539403e-02, -1.538304991477683e-02, -1.536705133539403e-02, -1.929224223085034e-02, -1.920034085401544e-02, -4.370113379078337e-03, -4.409813643531602e-03, -6.427959367186009e-03, -6.497529364432018e-03, -9.824749734082082e-03, -9.829088996211842e-03, -7.943079478903152e-03, -7.949467297785930e-03, -7.943079478903152e-03, -7.949467297785928e-03, -1.059149578002199e-02, -1.072681605893395e-02, -1.540683307611430e-03, -1.564565636171346e-03, -2.429583102321081e-03, -2.531861492405219e-03, -6.287727115763946e-03, -6.323005669183542e-03, -4.006584648178532e-03, -4.059123384598535e-03, -4.006584648178535e-03, -4.059123384598537e-03, -4.805309699537307e-03, -4.900319655551454e-03, -1.988346384035491e-05, -2.028650905216560e-05, -4.476415823168420e-05, -5.025037174718308e-05, -9.841532611841538e-03, -1.007052461472450e-02, -2.184009360754973e-04, -3.122002109861319e-04, -2.184009360754975e-04, -3.122002109861319e-04, -6.466774595219028e-07, -7.290699924745556e-07, -5.755693045808994e-09, -1.026365461509461e-08, -2.775916785357306e-08, -3.528415037704372e-08, -2.162876966262462e-04, -2.221903081659497e-04, -1.636920504245606e-07, -1.823002569306333e-07, -1.636920504245608e-07, -1.823002569306335e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
