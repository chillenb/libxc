
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_b98_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b98", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.578257713624437e+01, -1.578260772629646e+01, -1.578279714151371e+01, -1.578234122506385e+01, -1.578257253829736e+01, -1.578257253829736e+01, -2.871983299731860e+00, -2.871958659874386e+00, -2.871444425452506e+00, -2.872802603100835e+00, -2.872006529530555e+00, -2.872006529530555e+00, -6.093582612215951e-01, -6.094010223465258e-01, -6.128337497741732e-01, -6.150744775948203e-01, -6.135781588106989e-01, -6.135781588106989e-01, -2.013971026035073e-01, -2.013265292452830e-01, -7.053392583557171e-01, -1.792825402827556e-01, -1.868705497348396e-01, -1.868705497348396e-01, -8.868607085748997e-03, -9.338587895818909e-03, -5.192153998275863e-02, -5.142494300159483e-03, -6.450273485838009e-03, -6.450273485838009e-03, -7.064895162024238e+00, -5.654423708017283e+00, -1.652133817884443e+00, -7.592963827222971e+00, -3.280380937052533e+00, -4.667023721828277e+00, -7.404966975283009e-01, -2.123785467979912e+00, -1.845423263403712e+00, -1.850708780131516e+00, -1.848868507857378e+00, -1.704053072382595e+00, -8.622140088870845e-01, -8.103120511949424e-01, -7.968325269327424e-01, -4.960415677394150e-01, -5.359804952710542e-01, -5.609944725343641e-01, -9.011028647598640e-02, -2.569540188847019e-01, -8.556862340473566e-02, -1.638490727921704e+00, -1.471281319818700e-01, -1.340623312656792e-01, -4.018173798256778e-03, -5.057483875157337e-03, -4.564314831181284e-03, -6.428005936858387e-02, -4.653241171977421e-03, -5.636361348754673e-03, -8.848173138334171e-01, -3.135696416954848e-01, -3.171550306050850e-01, -8.822607726093475e-01, -3.190731961465140e-01, -8.813316992592901e-01, -3.448577521742336e-01, -4.493047432705477e-01, -7.402959596789090e-01, -3.858088423065140e-01, -5.017988839612768e-01, -7.825560360904894e-01, -9.853609738347825e-01, -1.569896436006944e-01, -1.800840713808997e-01, -2.296444519358720e-01, -3.680196879124829e-01, -3.309125167745099e-01, -4.217583499328718e-01, -4.155285585151395e-02, -6.782372608613023e-02, -3.096917553875169e-01, -7.591475304278493e-02, -1.051026124075376e-01, -1.415138065047983e-02, -2.085482797983770e-03, -3.303659719291007e-03, -7.036506936267280e-02, -5.126757252676448e-03, -5.126757252941646e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_b98_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b98", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.332615561908954e+01, -2.332624451997958e+01, -2.332662327280434e+01, -2.332530130427979e+01, -2.332599632329095e+01, -2.332599632329095e+01, -3.722784589936699e+00, -3.722832379164550e+00, -3.724031616699191e+00, -3.722673991142515e+00, -3.722938982337647e+00, -3.722938982337647e+00, -7.218022054685255e-01, -7.203389257211579e-01, -6.824675816874851e-01, -6.893404817561700e-01, -6.887553652883778e-01, -6.887553652883778e-01, -1.781545933153738e-01, -1.798015969640636e-01, -8.418120146681458e-01, -1.849151356287287e-01, -1.680355024071972e-01, -1.680355024071971e-01, -1.223654730276902e-02, -1.287755350553464e-02, -7.051549517631443e-02, -7.090003657734413e-03, -8.896901309979643e-03, -8.896901309979643e-03, -7.688220843124096e+00, -5.555334627735644e+00, -2.293638685427263e+00, -9.472840016972789e+00, -5.849300401799451e+00, -5.537213927351942e+00, -1.019757939824082e+00, -1.992830146993760e+00, -1.921569557509482e+00, -1.938759038421217e+00, -1.964869833402080e+00, -2.002775502041583e+00, -1.098484587883572e+00, -8.226933360512659e-01, -1.009590601876049e+00, -6.456140833130545e-01, -6.676319421360889e-01, -6.608008208842405e-01, -1.341536308671984e-01, -3.403027246224401e-01, -1.275702917120247e-01, -2.127519747586673e+00, -1.510690731585861e-01, -9.697144408511232e-02, -5.490888655995500e-03, -6.940282991603694e-03, -7.866152328075995e-03, -9.766517242942591e-02, -6.393895405117559e-03, -9.376712060419777e-03, -1.183458986409562e+00, -4.357926069026247e-01, -4.367696751125132e-01, -1.180907647735673e+00, -4.372272765879736e-01, -1.179929360896933e+00, -4.341730359431825e-01, -5.403320515743538e-01, -9.029102809186053e-01, -6.540194745398413e-01, -5.851100937387606e-01, -1.029158288398216e+00, -1.256118580807047e+00, -2.326864623538968e-01, -2.612625605646354e-01, -3.212734068919087e-01, -3.532076558226372e-01, -3.205116653610272e-01, -4.966939359588827e-01, -6.671520464416462e-02, -9.178760751788875e-02, -3.788206740112540e-01, -1.149597749903755e-01, -1.299766198317313e-01, -2.261243795903991e-02, -3.074740590611343e-03, -5.885567405631537e-03, -1.104377222935831e-01, -8.705987898940009e-03, -8.705987900153292e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_b98_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b98", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.003894478781487e-09, -4.003827589388563e-09, -4.003578470265200e-09, -4.004573296364320e-09, -4.004045173885655e-09, -4.004045173885655e-09, -6.279345994093268e-06, -6.279286052776070e-06, -6.277145602082629e-06, -6.274518636390614e-06, -6.277889821579575e-06, -6.277889821579575e-06, -3.906172700015753e-03, -3.921716589699898e-03, -4.329750575106920e-03, -4.183822655015348e-03, -4.216971711853663e-03, -4.216971711853663e-03, -5.539505342916291e-01, -5.453119798549833e-01, -2.210846924531559e-03, -5.386286542404178e-01, -7.211480620246115e-01, -7.211480620246116e-01, 1.596538100054080e+02, 1.456371866932759e+02, 2.072232307268976e+00, 4.517043830822143e+02, 3.249879527490939e+02, 3.249879527490931e+02, -1.666705041263850e-07, -8.904588238703155e-07, 1.365088316179583e-06, 7.741855688177699e-08, 3.351461053046585e-07, -1.155422613551465e-06, 2.649097448469884e-05, -4.717152158590415e-05, -5.870477131813999e-05, -5.727515922559984e-05, -5.621033777709510e-05, -5.750128325761845e-05, 1.201769337735409e-03, -6.011651836358557e-04, 1.089288903457553e-03, -7.335696093634507e-03, -5.333149071661525e-03, -5.131735661020079e-03, 2.092775801010718e+00, 3.628062918618091e-02, 2.570713728885921e+00, -6.351696812977911e-05, -1.064451642893577e+00, -2.869113245055972e+00, 6.564418025013417e+02, 4.459815367809737e+02, 2.372850264319732e+04, 7.517991486911610e+00, 9.378026433908174e+02, 9.854585627843691e+03, 1.352920256245284e-02, 7.307320909936575e-02, 8.793015917850580e-02, 1.008434350868976e-02, 9.607435163458111e-02, 9.142829247365059e-03, 1.420099864477488e-01, -1.113235673315628e-02, 2.103283955982707e-03, 3.718551473269559e-02, -7.216323840604616e-03, 3.366765917876655e-03, 1.094769360237978e-03, 2.315664132926649e-01, 1.468939800778226e-01, 7.933835653622776e-02, -4.751729225640696e-02, -6.986927195697744e-02, -1.581689299796152e-02, 2.479741783415098e+01, 1.026575217389943e+00, -4.885997764553630e-02, 4.906836130754478e+00, -6.223855445525343e-01, 5.419081700977958e+02, 8.521075704434645e+04, 3.025295507695255e+04, 7.170977298374590e+00, 1.390185565318255e+04, 1.390185565308897e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_b98_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b98", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [-1.692916428360019e-04, -1.692911144046696e-04, -1.692895903072212e-04, -1.692974779669915e-04, -1.692932270057758e-04, -1.692932270057758e-04, -1.060322862143810e-03, -1.060319242629899e-03, -1.060194797562343e-03, -1.060052849117427e-03, -1.060216570133044e-03, -1.060216570133044e-03, -4.872861718873580e-03, -4.876236367140352e-03, -4.964017103847485e-03, -4.928058688882963e-03, -4.937422005361147e-03, -4.937422005361147e-03, -1.279664907248038e-02, -1.317619359568149e-02, -4.283068316237424e-03, -5.687990353584776e-03, -1.025564934088924e-02, -1.025564934088924e-02, -1.754033643993806e-09, -2.429713123521258e-09, -7.194785647985181e-06, -9.630837433548386e-11, -3.914760574924293e-10, -3.914760574935471e-10, -1.657978419598853e-04, -5.700176147493899e-04, -5.149008182251139e-07, -2.985000337058373e-05, -5.454527979499121e-04, -7.068809695137831e-04, -2.855606600358103e-08, -1.508283812892953e-03, -1.783706739494620e-03, -1.775929380912634e-03, -1.772785231568577e-03, -1.794526976478222e-03, -1.627443173766160e-04, -2.481436091041981e-03, -2.025117299786294e-04, -5.844858312481136e-03, -5.332792004024339e-03, -5.348337882769671e-03, 2.276320620815981e-06, -1.067192380177177e-04, 5.089857978331915e-09, -1.885557688495503e-03, -6.049146547650281e-03, -1.484733048187043e-02, -1.273719468449279e-13, -3.783666396451026e-22, 1.209303462294359e-21, 5.971502794382546e-07, -1.616781136768386e-11, 8.105347779908269e-17, -8.323286623363287e-16, -2.984343615567822e-15, -5.794838111029637e-19, -1.146653348494451e-09, -9.239542010749868e-14, -4.045878717137462e-19, -3.326951198405461e-18, -6.178280307111345e-03, -5.034788076330153e-04, -3.084811041721083e-03, -5.924428936922328e-03, -4.436037883625212e-05, -1.317299702657367e-04, -3.323876393090655e-08, -1.668416975701010e-08, -4.551689581080692e-05, -6.374616246139227e-03, -8.801190105127768e-03, -6.722863019425095e-03, 3.287803878788399e-07, -1.703395796531319e-05, -8.619437998739869e-03, 3.925669094202365e-08, -1.634748689614109e-03, 1.690805889206621e-13, 4.870570397625360e-15, 9.588084111506163e-17, 1.534509476867834e-03, 1.264654862201197e-14, 1.885604773454775e-15]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_b98_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b98", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [6.229811214769914e-04, 6.229760815065753e-04, 6.229604615988668e-04, 6.230352937305527e-04, 6.229951246414755e-04, 6.229951246414755e-04, 4.219266646013835e-03, 4.219251604483908e-03, 4.218707599839711e-03, 4.217831505197903e-03, 4.218650319130663e-03, 4.218650319130663e-03, 1.921811239073176e-02, 1.922957358936055e-02, 1.953276933304170e-02, 1.935500757300759e-02, 1.940612078541296e-02, 1.940612078541296e-02, 4.603738018319190e-02, 4.748878974446694e-02, 1.707037466750740e-02, 2.011486044404526e-02, 3.752175158408069e-02, 3.752175158408067e-02, -5.506998402795603e-04, -5.816953029673246e-04, -1.257922102368909e-03, -2.698030807968208e-04, -4.030932825992994e-04, -4.030932825992988e-04, 3.752339287092240e-04, 1.997682188410558e-03, -3.038773975721503e-03, -1.716758914438044e-04, -7.319399860090628e-04, 2.590587848543300e-03, -2.753550668716686e-03, 5.767734960187646e-03, 6.901941395467906e-03, 6.861586685819487e-03, 6.854024579919768e-03, 7.001871130916623e-03, -2.142776927592549e-03, 7.542733720443699e-03, -9.638543933605864e-04, 2.280821447652646e-02, 1.924015941044937e-02, 1.884673210294911e-02, -2.119815314104878e-02, -2.754364795845966e-03, -2.044396336007055e-02, 7.465289134768307e-03, 2.117454888931417e-02, 5.638826242606023e-02, -1.305344269197643e-04, -2.156807641814946e-04, -5.820897165173670e-03, -1.838525316228117e-02, -3.652456522055165e-04, -3.838061995507000e-03, -2.470494927364048e-02, -1.832893184866435e-01, -2.083136129042753e-01, -2.210910528687791e-02, -2.199709475823000e-01, -2.093333734664663e-02, -9.932999304707142e-02, 2.127754953610841e-02, -3.989164433902821e-03, -7.506632549432142e-02, 1.762076868232534e-02, -6.815798230781088e-03, -1.117761904780110e-03, -3.671137180165899e-02, -3.766496012826472e-02, -3.527533610967160e-02, 2.169421757739921e-02, 3.147901783064688e-02, 2.418486046060901e-02, -1.401076750973092e-02, -1.343861315763921e-03, 3.107238059948095e-02, -2.549479077594445e-02, 4.114957613909849e-03, -4.042721347976850e-03, -3.932331264146002e-04, -3.142539333228452e-03, -3.313245882876978e-02, -4.556676269574174e-03, -4.556676269536836e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
