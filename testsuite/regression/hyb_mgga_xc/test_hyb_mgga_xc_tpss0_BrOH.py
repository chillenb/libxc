
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_tpss0_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_tpss0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.681218354340698e+01, -1.681222491359031e+01, -1.681249000525111e+01, -1.681181484425633e+01, -1.681220463720014e+01, -1.681220463720014e+01, -2.630463616911336e+00, -2.630475148223174e+00, -2.630997794608926e+00, -2.632166603062823e+00, -2.630471652232030e+00, -2.630471652232030e+00, -5.277141432849386e-01, -5.273913998664952e-01, -5.208494795286276e-01, -5.256440754825960e-01, -5.275967302356688e-01, -5.275967302356688e-01, -1.653181732797036e-01, -1.667398513203204e-01, -6.155835075407402e-01, -1.332252474226066e-01, -1.657220145021960e-01, -1.657220145021960e-01, -1.275540884932210e-02, -1.335735409878102e-02, -5.281319011354060e-02, -6.131711847579760e-03, -1.321822824025713e-02, -1.321822824025713e-02, -4.155792012098004e+00, -4.156632584916896e+00, -4.155912289392870e+00, -4.156564146161697e+00, -4.156176505470195e+00, -4.156176505470195e+00, -1.582252472621736e+00, -1.593268440775168e+00, -1.580442991655030e+00, -1.588992091708334e+00, -1.592173932295398e+00, -1.592173932295398e+00, -4.780101179278797e-01, -5.075993938857686e-01, -4.492714245750632e-01, -4.623775270714973e-01, -4.979411808469665e-01, -4.979411808469665e-01, -1.080099484316145e-01, -1.756638297681022e-01, -1.060490169101794e-01, -1.429895375548113e+00, -1.187427875502995e-01, -1.187427875502995e-01, -5.915303479493417e-03, -6.759246433173009e-03, -5.066245043213458e-03, -7.147320528338680e-02, -6.158687524668155e-03, -6.158687524668155e-03, -4.977946044439862e-01, -5.039109857717519e-01, -5.029827022258273e-01, -5.015049510985791e-01, -5.023453645030629e-01, -5.023453645030629e-01, -4.752197056592222e-01, -4.262594979392511e-01, -4.463317422027225e-01, -4.640131136633477e-01, -4.551202546465953e-01, -4.551202546465953e-01, -5.278662100828561e-01, -2.102305096719945e-01, -2.403419077436739e-01, -2.972124594501368e-01, -2.668858148537364e-01, -2.668858148537364e-01, -3.815109936238212e-01, -4.923547576346451e-02, -6.529337389008090e-02, -2.820451006879021e-01, -8.932911163404196e-02, -8.932911163404195e-02, -1.494197658199375e-02, -1.851593044933220e-03, -3.516852064154248e-03, -8.516318515806610e-02, -5.234483045865996e-03, -5.234483045865993e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_tpss0_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_tpss0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.089309898899140e+01, -2.089314017386523e+01, -2.089348061951142e+01, -2.089281109002895e+01, -2.089311929493876e+01, -2.089311929493876e+01, -3.253425045573245e+00, -3.253457477739466e+00, -3.254556387359254e+00, -3.254566515096564e+00, -3.253447965461731e+00, -3.253447965461731e+00, -6.587584302657392e-01, -6.574107696088493e-01, -6.192474430324642e-01, -6.269781491278459e-01, -6.582718192591901e-01, -6.582718192591901e-01, -1.878187270160969e-01, -1.926366446653415e-01, -8.089005349954718e-01, -1.282536858351002e-01, -1.892598543041306e-01, -1.892598543041306e-01, -1.692141862641192e-02, -1.771114485375038e-02, -6.631813492552968e-02, -8.167587963213898e-03, -1.752686134207661e-02, -1.752686134207661e-02, -5.173215932876583e+00, -5.173116027572925e+00, -5.173263687894620e+00, -5.173182950383839e+00, -5.173087302932180e+00, -5.173087302932180e+00, -1.895544388345341e+00, -1.919132056001518e+00, -1.886464144716404e+00, -1.905232196593880e+00, -1.922570077038925e+00, -1.922570077038925e+00, -6.148815027709630e-01, -6.674298091839177e-01, -5.809579358042963e-01, -6.107257517464659e-01, -6.388922006979421e-01, -6.388922006979421e-01, -1.150144951536918e-01, -1.719144435965964e-01, -1.120622867431599e-01, -1.898510347663406e+00, -1.186564881708507e-01, -1.186564881708507e-01, -7.879648281604376e-03, -9.001242837731370e-03, -6.747098743152557e-03, -8.478211027103520e-02, -8.201392649398035e-03, -8.201392649398030e-03, -6.360672568775914e-01, -6.358291085958307e-01, -6.353564990047433e-01, -6.352804218100616e-01, -6.352701358508190e-01, -6.352701358508190e-01, -6.184699171451784e-01, -5.592128486393251e-01, -5.818824281131586e-01, -5.945626261668893e-01, -5.884902278391906e-01, -5.884902278391906e-01, -6.974169056542374e-01, -2.221839323383753e-01, -2.822690535322792e-01, -3.849258652634217e-01, -3.366189675368629e-01, -3.366189675368627e-01, -4.940970362618603e-01, -6.262060372181817e-02, -7.977818671830522e-02, -3.691359437173918e-01, -9.823011892597362e-02, -9.823011892597361e-02, -1.980295430646749e-02, -2.468491656968125e-03, -4.687235216377795e-03, -9.359766515902361e-02, -6.971749489998833e-03, -6.971749489998826e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_tpss0_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_tpss0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-9.772703158010458e-09, -9.772956743174322e-09, -9.773516724167938e-09, -9.769376500051493e-09, -9.772841664028235e-09, -9.772841664028235e-09, -8.207441068897746e-06, -8.208867550809810e-06, -8.250454343729698e-06, -8.226998966020313e-06, -8.207712481262764e-06, -8.207712481262764e-06, -2.414428942770208e-03, -2.437303139263057e-03, -2.995856998243100e-03, -2.949164736867341e-03, -2.422893217926716e-03, -2.422893217926716e-03, -3.046744510207817e-01, -2.853051615114912e-01, -2.273293698257948e-04, -7.606954246869390e-01, -2.989544689770506e-01, -2.989544689770506e-01, -3.834848279232916e+00, -3.844982334208153e+00, -1.640440860296453e+00, -2.720022505627753e+00, -3.994142472285621e+00, -3.994142472285621e+00, -4.029129475970340e-06, -4.069436558083779e-06, -4.033220857506154e-06, -4.064555021570522e-06, -4.049737501857866e-06, -4.049737501857866e-06, -3.678071966947862e-05, -3.527499620071116e-05, -3.638621496758776e-05, -3.515814565404939e-05, -3.639440754352965e-05, -3.639440754352965e-05, -9.415522834778246e-03, -8.079445101490428e-03, -9.636822752861082e-03, -6.891081264962760e-03, -9.530057371300575e-03, -9.530057371300575e-03, -9.367845011693418e-01, -2.788461880916117e-01, -1.068960801830040e+00, -5.698236830737466e-05, -9.782338370400075e-01, -9.782338370400075e-01, -2.885578951632264e+00, -2.891012134125766e+00, -8.272962425090222e+00, -1.638068091969311e+00, -4.269738817427220e+00, -4.269738817426989e+00, -7.694941200124719e-02, -4.113753409195546e-02, -5.076938129003560e-02, -6.070893136913087e-02, -5.542240953524969e-02, -5.542240953524964e-02, -4.394243948843862e-02, -5.943609260221498e-03, -9.303818260827955e-03, -1.780185733885206e-02, -1.272822942124449e-02, -1.272822942124449e-02, -4.666668975204606e-03, -1.282562406743766e-01, -6.359556781327214e-02, -2.950530071775419e-02, -3.706420473630657e-02, -3.706420473630669e-02, -1.185239608448319e-02, -1.381821760826625e+00, -1.400533974035960e+00, -4.609605513286270e-02, -1.584666335048128e+00, -1.584666335048131e+00, -2.881704183999331e+00, -4.977295684573398e+00, -4.284058021160328e+00, -1.937255013251627e+00, -6.235767412505797e+00, -6.235767412511101e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_tpss0_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_tpss0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_tpss0_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_tpss0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.379191577274402e-03, 1.379241697618036e-03, 1.379458110558912e-03, 1.378643132007385e-03, 1.379217998287107e-03, 1.379217998287107e-03, 2.051875650632480e-03, 2.052554468794092e-03, 2.073719983337335e-03, 2.075886254514236e-03, 2.051985912998596e-03, 2.051985912998596e-03, 3.200192755405383e-03, 3.204010907782498e-03, 3.115386060416224e-03, 3.472739574339142e-03, 3.202242711161139e-03, 3.202242711161139e-03, 1.009517605583648e-02, 1.098583296141894e-02, 4.290563964549407e-04, 1.225399893608494e-03, 1.036228073368947e-02, 1.036228073368947e-02, 1.447814308569985e-07, 1.772045367696203e-07, 1.964344104447632e-05, 9.884004432901714e-10, 1.806538148251685e-07, 1.806538148251683e-07, 9.261947391181413e-03, 9.358193581303926e-03, 9.272769126379981e-03, 9.347539468074565e-03, 9.309730504673732e-03, 9.309730504673732e-03, 2.150616805907680e-03, 2.204280909650238e-03, 2.035753655197309e-03, 2.073489696432313e-03, 2.345089661207470e-03, 2.345089661207470e-03, 2.222739742239918e-02, 1.679451401520689e-02, 1.696211111745701e-02, 1.229405078014620e-02, 2.593205209766751e-02, 2.593205209766751e-02, 3.153667285583211e-04, 3.285421738539401e-03, 3.766223830843136e-04, 2.471561566797054e-03, 9.804015195413484e-04, 9.804015195413484e-04, 1.570513883103901e-09, 2.220348447476093e-09, 4.426715838447124e-09, 5.156300419592282e-05, 1.958258221315748e-09, 1.958258221322577e-09, 1.376249197443701e-01, 1.089823033933108e-01, 1.240911049280266e-01, 1.353478914944790e-01, 1.299587331043884e-01, 1.299587331043884e-01, 4.480425169477203e-02, 1.768130232638063e-02, 2.808338219006810e-02, 4.646651215560641e-02, 3.574003968733296e-02, 3.574003968733298e-02, 1.197512250486070e-02, 5.322516798900255e-03, 8.870024188856317e-03, 1.837796817549231e-02, 1.372601807487052e-02, 1.372601807487053e-02, 1.773756782305716e-02, 1.273236279121908e-05, 3.888711093975369e-05, 2.524413444697273e-02, 2.927782447342616e-04, 2.927782447342633e-04, 7.309514295143199e-08, 5.214632746773288e-12, 3.182814776518104e-10, 3.160992917264208e-04, 1.511243285129704e-09, 1.511243290882629e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
