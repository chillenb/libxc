
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_tpss0_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_tpss0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.509214052901482e+01, -1.509218005218849e+01, -1.509238281616429e+01, -1.509173541479998e+01, -1.509216114691176e+01, -1.509216114691176e+01, -2.536840913171837e+00, -2.536838767709925e+00, -2.536863874495381e+00, -2.537049842616079e+00, -2.536851992907914e+00, -2.803564359036594e+00, -5.391671167034513e-01, -5.761763009818694e-01, -5.697896635039110e-01, -5.701246765714416e-01, -5.763413665324719e-01, -5.763413665324719e-01, -1.672895241498329e-01, -1.688668965032867e-01, -6.409786004894400e-01, -1.405286027570033e-01, -1.677669864234352e-01, -1.677669864234352e-01, -1.275605360031719e-02, -1.335829003073801e-02, -5.301965319521316e-02, -6.132634023738947e-03, -1.321903049320584e-02, -1.321903049320584e-02, -4.158242764341272e+00, -4.159080612355047e+00, -4.158331697611859e+00, -3.770619121901499e+00, -4.158667867114139e+00, -4.158667867114139e+00, -1.463369671874291e+00, -1.472161154770249e+00, -1.459866642733853e+00, -1.466695355147070e+00, -1.473869120874516e+00, -1.607851984496349e+00, -4.894761115618735e-01, -5.347102111104689e-01, -4.641745793084315e-01, -4.859925131938704e-01, -5.088832034266503e-01, -4.842373652471186e-01, -9.781734710803819e-02, -1.778348223071178e-01, -9.671343064732528e-02, -1.551718414301142e+00, -1.212014787064554e-01, -1.212014787064554e-01, -6.461372938987370e-03, -6.760261536169107e-03, -5.066582636195170e-03, -6.463129282043226e-02, -6.710159802522216e-03, -6.159871542742444e-03, -5.155569977897021e-01, -5.121354425895368e-01, -4.842817713862306e-01, -5.143628414005091e-01, -5.138911963376851e-01, -5.138911963376851e-01, -4.997495255733214e-01, -4.269855237843310e-01, -4.479265651465499e-01, -4.680253828129407e-01, -4.577346501122541e-01, -4.354556726532775e-01, -5.574343183437209e-01, -2.078854406795840e-01, -2.431914206006656e-01, -2.975651664604515e-01, -2.700679190300964e-01, -2.700679190300964e-01, -3.739845288886134e-01, -4.932520270134826e-02, -6.574251796520154e-02, -2.872775891006266e-01, -8.151360038509843e-02, -9.065743859814748e-02, -1.495523286058883e-02, -1.851637178755078e-03, -3.516911707772066e-03, -8.652564406040972e-02, -5.235398386188836e-03, -5.235398386188837e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_tpss0_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_tpss0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.027678661085085e+01, -2.027683893443430e+01, -2.027710802831684e+01, -2.027625083852982e+01, -2.027681390183360e+01, -2.027681390183360e+01, -3.302273870922337e+00, -3.302303506647842e+00, -3.303316377590830e+00, -3.303179267288613e+00, -3.302297370383716e+00, -3.420815437908715e+00, -6.895878506337528e-01, -6.077005005438543e-01, -5.751325379539574e-01, -5.903178397857270e-01, -6.085623150144579e-01, -6.085623150144579e-01, -1.847337331624318e-01, -1.889403204758742e-01, -8.271760429404779e-01, -1.406470019462437e-01, -1.859529401035934e-01, -1.859529401035934e-01, -1.692397228011050e-02, -1.771484959932768e-02, -6.708348539536554e-02, -8.171270168207647e-03, -1.753003640655581e-02, -1.753003640655580e-02, -5.178230025166187e+00, -5.178093859174297e+00, -5.178210605422612e+00, -5.036883242267661e+00, -5.178168401800625e+00, -5.178168401800625e+00, -1.884730678082109e+00, -1.898237968753065e+00, -1.879359367996036e+00, -1.889753814409063e+00, -1.901046204360175e+00, -1.928081720103194e+00, -6.425721054277413e-01, -6.952182009241712e-01, -6.041887734753146e-01, -6.388525062638799e-01, -6.680538915483050e-01, -6.361247725165124e-01, -1.261396298752153e-01, -1.727700167436859e-01, -1.247021904881220e-01, -1.987004335496424e+00, -1.238580092012669e-01, -1.238580092012669e-01, -8.473011238005961e-03, -9.005295860720533e-03, -6.748445775093427e-03, -8.346975492582938e-02, -8.797101724537449e-03, -8.206118198239049e-03, -6.464780324090970e-01, -6.470960262892259e-01, -6.342928418599754e-01, -6.152011752625247e-01, -6.467059545568644e-01, -6.467059545568644e-01, -6.286322138620715e-01, -5.619611297111756e-01, -5.890790259754939e-01, -6.074796275877358e-01, -5.988743287039464e-01, -5.728183615789427e-01, -7.278914823544378e-01, -2.653656581961844e-01, -2.773374124966792e-01, -3.789585961880875e-01, -3.349580931960260e-01, -3.318039586196740e-01, -4.812459874286582e-01, -6.295788336217867e-02, -8.138971760667028e-02, -3.774327230557609e-01, -1.051456238270461e-01, -1.021945458844724e-01, -1.985551938363099e-02, -2.468668145671837e-03, -4.687473564788503e-03, -9.764658638957435e-02, -6.975403526533329e-03, -6.975403526533325e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_tpss0_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_tpss0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [3.019763415527768e-09, 3.019659686634365e-09, 3.019182215271310e-09, 3.020873387346944e-09, 3.019708933971789e-09, 3.019708933971789e-09, 7.994283363329561e-06, 7.993471397221797e-06, 7.967855061831673e-06, 7.975236581596333e-06, 7.993905879298076e-06, -3.405542849734312e-06, 7.252303887257907e-03, -2.180927857698920e-03, -2.418412726054585e-03, -2.234294575987724e-03, -2.174811088492938e-03, -2.174811088492938e-03, -2.982654603351351e-01, -2.801020843698463e-01, 3.693021550561139e-03, -4.859798334515299e-01, -2.928501937167348e-01, -2.928501937167348e-01, -3.684209799303492e+00, -3.654901179466219e+00, -1.254857377104178e+00, -1.310840384010008e+00, -3.822540324412807e+00, -3.822540324413028e+00, -4.001140537279986e-06, -4.041525556134695e-06, -4.005594841891733e-06, 4.920679255706193e-07, -4.021308728819051e-06, -4.021308728819051e-06, 8.648454361292850e-05, 8.300563412005034e-05, 8.796184314033379e-05, 8.518710292804412e-05, 8.225778119002695e-05, -3.010550659056041e-05, -3.231783881849256e-03, -5.821411336419825e-03, -3.303596903986606e-03, -3.981833732072952e-03, -3.579053340984130e-03, 6.461011488800695e-03, 1.817062016194003e+01, -2.614036320839120e-01, 1.911556658391468e+01, -5.967823657945598e-05, -7.914176380700075e-01, -7.914176380700075e-01, 3.327314379786493e+06, -1.652947029205386e+00, -6.497709520643521e+00, 1.223146204041393e+02, 2.829997808807910e+06, -2.037839638489954e+00, -7.002345041247034e-02, -3.298857867497128e-02, -7.920325544412939e-03, -1.020141391879680e-01, -4.545167699425749e-02, -4.545167699425749e-02, -5.629589910006947e-02, -4.806974770681259e-03, -6.526144074256914e-03, -1.167182380694817e-02, -8.414184250941292e-03, 8.480679066784484e-03, -3.642495297208918e-03, 5.217413066567362e-01, -6.111740341351990e-02, 8.278712060296667e-02, -2.473285541885387e-02, -3.170214585854475e-02, 2.692786183890070e-02, -1.183129605563964e+00, -1.013509307235833e+00, -1.486340794281137e-02, 4.196031448564200e+01, -1.193336044092144e+00, -1.440953058758062e+00, -1.831368727350780e+00, -3.597733353622229e+00, -1.428710041567154e+00, -2.864979464050322e+00, -2.864979464057309e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_tpss0_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_tpss0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.164771400052957e-04, 1.164795114393988e-04, 1.164896358392579e-04, 1.164510795897435e-04, 1.164783909163345e-04, 1.164783909163345e-04, -3.971778347701546e-04, -3.970229207329753e-04, -3.922774344429584e-04, -3.940999590294984e-04, -3.971329582120317e-04, 1.310209790274987e-03, -1.408440780753892e-03, 1.775025271596209e-03, 1.357038135905474e-03, 1.007358345576904e-03, 1.786940788567008e-03, 1.786940788567008e-03, 8.432911071067337e-03, 8.981087519141591e-03, -5.201938890039929e-04, 9.783000242502681e-04, 8.585072975422506e-03, 8.585072975422506e-03, 1.500959857892615e-07, 1.838423782234838e-07, 2.115791054129199e-05, 1.016920965540287e-09, 1.873846165118777e-07, 1.873846165119638e-07, 9.280207311301560e-03, 9.376983028054765e-03, 9.290855583286866e-03, 5.870515309069724e-04, 9.328572369990065e-03, 9.328572369990065e-03, -8.445661928038817e-04, -8.306386099081064e-04, -8.481445044701762e-04, -8.403521441126313e-04, -8.261621128414082e-04, 1.717212552484973e-03, 1.547813708579287e-02, 3.196509694114454e-02, 1.152614106160508e-02, 1.912672867307613e-02, 1.933214011468832e-02, 1.911682852801119e-03, -1.170663894619713e-04, 2.862031454651597e-03, -1.334999797323359e-04, 7.312341967522419e-03, 9.685745499976780e-04, 9.685745499976780e-04, -2.267305842107758e-08, 6.544347188332096e-11, 4.547931467217707e-09, -2.644990221782035e-05, -2.611348920234289e-08, 2.014941820076364e-09, 2.430559053151871e-01, 1.185443417736067e-01, 5.750506038027934e-03, 3.516316967899221e-01, 1.601454735345993e-01, 1.601454735345993e-01, 1.800662883964263e-01, 1.596740484026520e-02, 2.465682013244285e-02, 4.127357575311705e-02, 3.112488920944512e-02, 4.098781989655229e-03, 2.404858781756486e-02, -2.330468757337409e-03, 6.795735411467305e-03, -4.683793874259942e-03, 6.108711503840659e-03, 9.410645943186923e-03, -2.685223762754502e-03, 1.368618103426911e-05, 4.207957279119769e-05, 1.443443227914628e-02, -1.044305475315770e-04, 3.112992585446313e-04, 7.599085178296472e-08, 5.331795198408396e-12, 3.262694521723614e-10, 3.349537164545571e-04, 1.553128276908102e-09, 1.553128289452197e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
