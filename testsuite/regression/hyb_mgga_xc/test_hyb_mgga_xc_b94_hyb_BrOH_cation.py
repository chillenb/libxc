
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_b94_hyb_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b94_hyb", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.599450048812766e+01, -1.599453042175718e+01, -1.599472290738972e+01, -1.599427677807545e+01, -1.599450211287118e+01, -1.599450211287118e+01, -3.053351131481549e+00, -3.053305426941385e+00, -3.052289328639959e+00, -3.054399317433798e+00, -3.053293003494725e+00, -3.053293003494725e+00, -6.679029215010697e-01, -6.680418003161741e-01, -6.725880223170235e-01, -6.743890218360507e-01, -6.734011266297713e-01, -6.734011266297713e-01, -2.142249908155879e-01, -2.148215721270547e-01, -7.838581292902371e-01, -1.921373100936523e-01, -2.083905394222118e-01, -2.083905394221787e-01, -6.712139294813656e-02, -6.727521226618111e-02, -1.144085342828118e-01, -6.118053569892769e-02, -6.321017015450321e-02, -6.321017015446972e-02, -7.328599879002517e+00, -5.948664594884021e+00, -3.359278870014793e+00, -8.775430225849764e+00, -3.608300036507856e+00, -5.070054070752862e+00, -1.333659549340205e+00, -2.245804484447346e+00, -2.002198031122256e+00, -2.008617736550818e+00, -2.007753434277278e+00, -1.839561063921592e+00, -1.038692221501845e+00, -8.354309015732782e-01, -9.486417571261136e-01, -5.326524082771074e-01, -5.802113608286893e-01, -6.105533470936761e-01, -1.342768981583664e-01, -3.614248400647180e-01, -1.368952280192104e-01, -1.758504832203135e+00, -1.590836725566895e-01, -1.425979734783036e-01, -1.216321633872813e-01, -2.594802050184545e+00, -6.236622213210297e-01, -1.367408623911020e-01, -7.098368623842606e-02, -1.630427922227870e+00, -2.561177793745956e+01, -4.385519328503505e-01, -4.393675548094875e-01, -3.882259049664084e+00, -4.397060281292091e-01, -7.566987623952635e+01, -4.313673856611741e-01, -4.873356988141483e-01, -8.295204412043830e-01, -4.193613826782800e-01, -5.461592288503937e-01, -1.071149240921212e+00, -1.193421051722116e+00, -1.839597953421594e-01, -2.205510824241453e-01, -2.887956161946902e-01, -3.853273914359294e-01, -3.542253152524432e-01, -4.587786291235831e-01, -8.746858879360460e-02, -1.319823916409799e-01, -3.354519583996667e-01, -1.097068685807484e-01, -1.269512271942777e-01, -1.170722123480178e+00, -2.300639075803342e+01, -6.358135440458538e-01, -8.643119251966822e-02, -1.032532139814052e+00, -1.032533068586433e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_b94_hyb_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b94_hyb", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.379221018277113e+01, -2.379217674543133e+01, -2.379229153607942e+01, -2.379223593838316e+01, -2.379258659458507e+01, -2.379264837286435e+01, -2.379166634318676e+01, -2.379147692266171e+01, -2.379225659313394e+01, -2.379197099651604e+01, -2.379225659313394e+01, -2.379197099651604e+01, -3.893943725683227e+00, -3.894231497186504e+00, -3.894003649929858e+00, -3.894305156712770e+00, -3.895596292605225e+00, -3.896009751496857e+00, -3.893521854602002e+00, -3.893948848045688e+00, -3.893185094527784e+00, -3.895387623370886e+00, -3.893185094527784e+00, -3.895387623370886e+00, -7.693974750870124e-01, -7.718373948519704e-01, -7.681065540554071e-01, -7.711075014275677e-01, -7.481533710355563e-01, -7.442974695293695e-01, -7.503394260631716e-01, -7.513741932127076e-01, -7.699114473618250e-01, -7.319758920014962e-01, -7.699114473618250e-01, -7.319758920014962e-01, -2.077249136106167e-01, -2.106538992864370e-01, -2.103554098123919e-01, -2.138064325383509e-01, -8.923784192839718e-01, -9.092811237488528e-01, -1.666303556696704e-01, -1.663157086442344e-01, -1.998846975737867e-01, -1.554704224274521e-01, -1.998846975738857e-01, -1.554704224274572e-01, -2.896036372726348e-02, -2.963788257664310e-02, -2.929070218963582e-02, -3.004277459023008e-02, -6.428861738286122e-02, -6.584368057263151e-02, -2.508130458124634e-02, -2.508328231368162e-02, -2.839431441362465e-02, -2.247445669134246e-02, -2.839431441370033e-02, -2.247445669134232e-02, -7.200735308411104e+00, -6.961660420962372e+00, -6.347442227479752e+00, -6.340259292523866e+00, -4.477806953066437e+00, -4.472792467352036e+00, -7.908677073762975e+00, -7.976096493783436e+00, -5.175353539625489e+00, -5.178064692414333e+00, -6.007510937184631e+00, -5.971088918956059e+00, -1.803617293305950e+00, -1.804244583440634e+00, -2.316877998811986e+00, -2.316128501967476e+00, -2.142819105600971e+00, -2.146898556816197e+00, -2.154436616954801e+00, -2.162014215093051e+00, -2.181052434032678e+00, -2.170356562818558e+00, -2.083650401326201e+00, -2.080473018556962e+00, -9.095270195838716e-01, -9.522972559960955e-01, -8.484355609193093e-01, -8.503648498122485e-01, -8.644760203307515e-01, -8.442768284587062e-01, -6.733510110699620e-01, -6.916995301556826e-01, -7.215454230709203e-01, -6.926737263748378e-01, -7.283245358560303e-01, -6.993487674737762e-01, -3.727783358195524e-01, -3.633229019454254e-01, -2.992896078100868e-01, -2.995261354465732e-01, -3.917872715231017e-01, -3.768460044681000e-01, -2.257099690709640e+00, -2.256198275192337e+00, -1.275238891417678e-01, -1.311146826767282e-01, -1.148245036259772e-01, -1.156761816515653e-01, -7.285505825330763e-02, -7.166599805021011e-02, -1.540999110644121e+00, -1.509690395492028e+00, -4.475482967301840e+00, -3.991055199997084e+00, -4.760227800831252e-01, -4.994136085542015e-01, -4.592683879326538e-02, -3.733839819294311e-02, -4.640606138502594e+00, -4.707651789440772e+00, -1.617654259127924e+01, -1.627745597299170e+01, -5.731939192873186e-01, -5.742384726495080e-01, -5.731199948460582e-01, -5.741752252574829e-01, -2.812495380650575e+00, -2.714293462956130e+00, -5.730931069067544e-01, -5.741562683502321e-01, -4.618688215255239e+01, -4.630915117970078e+01, -5.572849864950151e-01, -5.582447007924431e-01, -5.714849754538346e-01, -5.728900725244204e-01, -7.651305645509824e-01, -7.704157956030128e-01, -5.789615878904875e-01, -5.697679980578980e-01, -6.339097096094507e-01, -6.356898545098019e-01, -9.217264798567923e-01, -9.220239660483261e-01, -1.071127919792728e+00, -1.067042813112016e+00, -3.358942394758444e-01, -3.350567924227154e-01, -3.461682745004332e-01, -3.448633282267577e-01, -3.799402821890589e-01, -3.801714986744589e-01, -3.870022718477709e-01, -3.877116464074395e-01, -3.699093031813313e-01, -3.708205431915531e-01, -5.295289136403996e-01, -5.327270075752679e-01, -1.029951319025659e+00, -1.016022176523841e+00, -7.833056466317717e-02, -8.533307945148237e-02, -3.988745099119823e-01, -4.017167468484268e-01, -3.940395083966772e-01, -3.432920153687020e-01, -9.049194364913851e-02, -8.859672784159718e-02, -3.453723817468614e+00, -3.262268409119805e+00, -9.661461790935455e+00, -4.079377414384590e+00, -1.013640663519879e+01, -9.219619126739262e+00, -3.637541606943504e-01, -3.812759552987701e-01, -3.736101173673658e+00, -5.050547841107472e+00, -3.736107743494586e+00, -5.050560511339716e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_b94_hyb_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b94_hyb", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-9.496907560167512e-09, 0.000000000000000e+00, -9.496920777924953e-09, -9.496688150984166e-09, 0.000000000000000e+00, -9.496761022401959e-09, -9.496217625690904e-09, 0.000000000000000e+00, -9.496023483455147e-09, -9.498698394845559e-09, 0.000000000000000e+00, -9.499180129006836e-09, -9.496773834338795e-09, 0.000000000000000e+00, -9.498082939923798e-09, -9.496773834338795e-09, 0.000000000000000e+00, -9.498082939923798e-09, -2.005408985466476e-05, 0.000000000000000e+00, -2.005915748053063e-05, -2.005452742505393e-05, 0.000000000000000e+00, -2.005992821257984e-05, -2.006824418198057e-05, 0.000000000000000e+00, -2.007159220893985e-05, -2.003704902954004e-05, 0.000000000000000e+00, -2.004083663606999e-05, -2.006297857140207e-05, 0.000000000000000e+00, -2.005281282492693e-05, -2.006297857140207e-05, 0.000000000000000e+00, -2.005281282492693e-05, -8.378432324144029e-03, 0.000000000000000e+00, -8.463768867578294e-03, -8.366544696419434e-03, 0.000000000000000e+00, -8.465763718576404e-03, -8.298898077696418e-03, 0.000000000000000e+00, -8.226911957770436e-03, -8.169869210600190e-03, 0.000000000000000e+00, -8.220069629657439e-03, -8.708000841551733e-03, 0.000000000000000e+00, -7.800023694753792e-03, -8.708000841551733e-03, 0.000000000000000e+00, -7.800023694753792e-03, -8.984805918530602e-01, 0.000000000000000e+00, -8.480327064111370e-01, -8.757477515632754e-01, 0.000000000000000e+00, -8.205936192120802e-01, -4.187509917847874e-03, 0.000000000000000e+00, -4.343867707767192e-03, -1.757449868978930e+00, 0.000000000000000e+00, -1.730622145382747e+00, -8.674987186446848e-01, 0.000000000000000e+00, -3.516384589146260e+00, -8.674987186428265e-01, 0.000000000000000e+00, -3.516384589146161e+00, -1.417837536976427e+04, 0.000000000000000e+00, -1.188783551239701e+04, -1.256851789623884e+04, 0.000000000000000e+00, -1.031364323267107e+04, -8.452799234551497e+01, 0.000000000000000e+00, -7.284870521572968e+01, -5.881237229326477e+04, 0.000000000000000e+00, -6.120626774635434e+04, -1.938417613066620e+04, 0.000000000000000e+00, -1.182404066060662e+05, -1.938417613062383e+04, 0.000000000000000e+00, -1.182404066060668e+05, -8.504625454103320e-07, 0.000000000000000e+00, -9.760737623956245e-07, -1.591143946009225e-06, 0.000000000000000e+00, -1.601853581134564e-06, 3.765661391386260e-07, 0.000000000000000e+00, 3.780748000417575e-07, -6.077619509324779e-07, 0.000000000000000e+00, -5.914614794967852e-07, -2.853398594863466e-07, 0.000000000000000e+00, -2.920066555997512e-07, -2.653432395412533e-06, 0.000000000000000e+00, -2.909535297818695e-06, 4.582022795802972e-05, 0.000000000000000e+00, 4.579363741243050e-05, -7.695316799685183e-05, 0.000000000000000e+00, -7.704903573405367e-05, -1.135566337138549e-04, 0.000000000000000e+00, -1.136187098309782e-04, -1.125382874456904e-04, 0.000000000000000e+00, -1.115703609391360e-04, -1.119241694003644e-04, 0.000000000000000e+00, -1.121514233075544e-04, -1.611930314142860e-04, 0.000000000000000e+00, -1.545049068285018e-04, -3.477190419704261e-03, 0.000000000000000e+00, -3.045239610498583e-03, -4.608285931874154e-03, 0.000000000000000e+00, -4.564031099263993e-03, -4.469335871210697e-03, 0.000000000000000e+00, -4.615355849455287e-03, -2.137542228424830e-02, 0.000000000000000e+00, -1.982406550578114e-02, -1.425517931082279e-02, 0.000000000000000e+00, -1.628419867179329e-02, -1.161058726456607e-02, 0.000000000000000e+00, -1.346511280814775e-02, 5.293889584402483e+01, 0.000000000000000e+00, 5.083201756369618e+01, -2.991151834318103e-01, 0.000000000000000e+00, -2.961388425150220e-01, 8.197046556869411e+01, 0.000000000000000e+00, 6.563958688918785e+01, -1.869990311435744e-04, 0.000000000000000e+00, -1.873160214306314e-04, -3.959573820859927e+00, 0.000000000000000e+00, -3.643619777044482e+00, -4.748436691128846e+00, 0.000000000000000e+00, -4.615161986737790e+00, -4.794026540815151e+04, 0.000000000000000e+00, -4.393872618540884e+04, -4.926400796515336e+02, 0.000000000000000e+00, -4.848707356125540e+02, 1.264410050175483e+08, 0.000000000000000e+00, 1.004051212063650e+08, 3.921158714292037e+02, 0.000000000000000e+00, 3.825094510048848e+02, -9.105249478219793e+04, 0.000000000000000e+00, -4.962664161703484e+04, 1.161488735601985e+08, 0.000000000000000e+00, 3.242366076739252e+07, -2.109527119623326e-05, 0.000000000000000e+00, -2.070359993405986e-05, 1.405816553919474e-02, 0.000000000000000e+00, 1.380712641233929e-02, 1.392714902714204e-02, 0.000000000000000e+00, 1.367851409441504e-02, -3.082051826988192e-04, 0.000000000000000e+00, -3.249818600473698e-04, 1.387219501367033e-02, 0.000000000000000e+00, 1.362579171139070e-02, -5.113584935045058e-06, 0.000000000000000e+00, -5.043098359099695e-06, 1.552167325825864e-02, 0.000000000000000e+00, 1.528685588349313e-02, -3.023651776834464e-02, 0.000000000000000e+00, -3.024108046017489e-02, -6.724156380161256e-03, 0.000000000000000e+00, -6.554852346378428e-03, 1.211944271738395e-02, 0.000000000000000e+00, 1.361861752494090e-02, -1.946531035677641e-02, 0.000000000000000e+00, -1.928845313877856e-02, -3.784762447207495e-03, 0.000000000000000e+00, -3.762436976256184e-03, -1.893532563005130e-03, 0.000000000000000e+00, -1.912184124199239e-03, 1.197421071689527e+00, 0.000000000000000e+00, 1.167324588027337e+00, 5.374751515897939e-01, 0.000000000000000e+00, 5.141127440769016e-01, 1.472845148534269e-01, 0.000000000000000e+00, 1.439929798823459e-01, -9.236589176706446e-02, 0.000000000000000e+00, -9.188558760295884e-02, -1.148125642558097e-01, 0.000000000000000e+00, -1.138790950252858e-01, -3.839790289940350e-02, 0.000000000000000e+00, -3.775802066243689e-02, 3.535932664784501e+03, 0.000000000000000e+00, 3.435175205149758e+03, -3.633400637401872e+01, 0.000000000000000e+00, -3.081961628275649e+01, -1.269469482999378e-01, 0.000000000000000e+00, -1.292367626033599e-01, 1.584585200044527e+02, 0.000000000000000e+00, 1.258673410273306e+02, -1.316105128980398e+01, 0.000000000000000e+00, -1.262964491930688e+01, 1.017209646743226e+06, 0.000000000000000e+00, 8.805968675327502e+05, 7.647778386114448e+09, 0.000000000000000e+00, 7.578119387287186e+09, 4.425547876195480e+08, 0.000000000000000e+00, 3.455207150484964e+08, 1.761479868209211e+02, 0.000000000000000e+00, 1.685854621678190e+02, 1.444361394248545e+08, 0.000000000000000e+00, 4.603737521619003e+07, 1.444362452097264e+08, 0.000000000000000e+00, 4.603748567772695e+07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_b94_hyb_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b94_hyb", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([-1.862734947740246e-04, -1.862730540337473e-04, -1.862710294707297e-04, -1.862712560651899e-04, -1.862679266793917e-04, -1.862654991526126e-04, -1.862958143117413e-04, -1.863009433646028e-04, -1.862719527210382e-04, -1.862901884918732e-04, -1.862719527210382e-04, -1.862901884918732e-04, -1.718762305252175e-03, -1.719142573338325e-03, -1.718817450163579e-03, -1.719217446908365e-03, -1.720333376972142e-03, -1.720740046023187e-03, -1.717888893655942e-03, -1.718302458030961e-03, -1.718661745189395e-03, -1.719729729988478e-03, -1.718661745189395e-03, -1.719729729988478e-03, -5.598111137300498e-03, -5.724981999865453e-03, -5.562721063967218e-03, -5.714334271309994e-03, -5.157862967664404e-03, -5.003219518495122e-03, -5.128118172741024e-03, -5.194120894380917e-03, -6.016229085478699e-03, -4.383903264704518e-03, -6.016229085478699e-03, -4.383903264704518e-03, -1.055831858813107e-02, -1.117517312428868e-02, -1.072904154911878e-02, -1.144350818411873e-02, -4.232210117569938e-03, -4.845639803619742e-03, -9.031619587996554e-03, -9.256407546368885e-03, -1.140929943142579e-02, -6.887983490465120e-03, -1.140929943140674e-02, -6.887983490464947e-03, -5.614800468326462e-03, -5.649816689776752e-03, -5.728257332275099e-03, -5.780242278756938e-03, -6.813778561490495e-03, -6.933729067448957e-03, -5.053110428578055e-03, -5.000111836392399e-03, -5.447750496395373e-03, -6.119216798136443e-03, -5.447750496383505e-03, -6.119216798136477e-03, -2.398405653923992e-04, -2.753471668336985e-04, -4.511917501033371e-04, -4.539146716661707e-04, -2.980327013522754e-07, -2.354435303479374e-07, -1.711091208803225e-04, -1.663736106845507e-04, -1.506547547889542e-04, -1.523375271312835e-04, -7.546233461991142e-04, -8.271701897770578e-04, -3.948248833372257e-08, -5.369622353673470e-08, -1.205811795945394e-03, -1.206341694423328e-03, -1.719687135830428e-03, -1.729619656497802e-03, -1.737230757442889e-03, -1.731443351198749e-03, -1.772695053415680e-03, -1.753021302537310e-03, -2.565218910563945e-03, -2.425195694437437e-03, -1.445339767129014e-03, -1.248786777271147e-03, -2.516818707732988e-03, -2.494786327126907e-03, -1.382546954374826e-03, -1.601267491535321e-03, -8.397872705935006e-03, -8.509660511979426e-03, -7.251003598249460e-03, -7.173663451605352e-03, -5.853225691850827e-03, -5.868116204249497e-03, 4.956944592002212e-05, 5.418241768869061e-05, -3.222232393374508e-03, -3.239732260989020e-03, 1.054121388079783e-06, 8.675296588920778e-07, -2.744872933723569e-03, -2.745895321159697e-03, -1.027217342810403e-02, -1.140378746167487e-02, -1.299869429398663e-02, -1.537190714916282e-02, -1.737978809157322e-03, -1.787904767608521e-03, -3.767972932351899e-05, -3.879497364473958e-05, -5.426891123634899e-13, 5.558880935515093e-12, 4.782065321949158e-05, 1.878473989721311e-05, -3.102835607392158e-03, -4.381770386782628e-03, 2.413204916609889e-09, 5.117641876072969e-10, -8.527267105493156e-06, -8.466373480032098e-06, -1.226277668627886e-12, -1.258843100041350e-12, -4.120108316148748e-15, -4.206453225846714e-15, -1.238732376257427e-04, -1.321465958694045e-04, -1.420757287519017e-11, -1.070544473298916e-11, -2.049132268578362e-06, -2.044531752409604e-06, -1.305199633153959e-14, -1.270424697739424e-14, -8.158171750417102e-03, -8.262824922429262e-03, -1.896979745662638e-03, -1.872794650604346e-03, -7.277803324374146e-04, -4.841763608784815e-04, -6.334267061470100e-03, -6.343777236715197e-03, -1.116287097925889e-03, -1.122345707498382e-03, -1.147251706220185e-03, -1.164831218156365e-03, -2.220245782748771e-08, -2.741737628949000e-08, -2.180095715274098e-09, -9.144472809244171e-09, -7.946184805564415e-07, -9.703183521166808e-07, -5.716639502491144e-03, -5.676984895429357e-03, -7.306842161286580e-03, -7.232620115398887e-03, -8.117721535556007e-03, -8.134748785646163e-03, 1.347903155624015e-05, 2.723052410941310e-05, -6.810267067626008e-03, -6.358108888276211e-03, -1.126422231546567e-02, -1.192988553087441e-02, 2.304070365745407e-06, 2.764167275239240e-06, -1.015594771811674e-02, -1.175695470196021e-02, 5.539323406287397e-08, 2.077182523234279e-07, 6.627680777565457e-06, 1.784906655865825e-06, 2.029715480182447e-09, 2.657506646787440e-09, 1.237522973241832e-02, 4.718019049495193e-04, 6.963598304127457e-08, 1.360654671731643e-08, 2.309226917259155e-08, 3.453694353559390e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_b94_hyb_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b94_hyb", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([7.344242603249903e-04, 7.344224453170495e-04, 7.344144107810144e-04, 7.344152620211324e-04, 7.344021991867693e-04, 7.343924740170805e-04, 7.345136147606505e-04, 7.345340805942495e-04, 7.344180933413650e-04, 7.344912465639367e-04, 7.344180933413650e-04, 7.344912465639367e-04, 6.692803781629847e-03, 6.694221022248278e-03, 6.693012590090113e-03, 6.694502140491175e-03, 6.698721857702958e-03, 6.700253222654813e-03, 6.689589739233432e-03, 6.691135983746515e-03, 6.692411921780930e-03, 6.696532193990817e-03, 6.692411921780930e-03, 6.696532193990817e-03, 1.994525280318708e-02, 2.038894615986040e-02, 1.982410796839305e-02, 2.035373396504733e-02, 1.846089083802804e-02, 1.792513994077690e-02, 1.837915109343342e-02, 1.861252506627144e-02, 2.146365186923940e-02, 1.579831538362867e-02, 2.146365186923940e-02, 1.579831538362867e-02, 3.492403919159598e-02, 3.696136003286676e-02, 3.531433605953009e-02, 3.769274610416453e-02, 1.511109797063235e-02, 1.730994193416963e-02, 3.105162297478739e-02, 3.186112475909378e-02, 3.838914661573547e-02, 2.402708456347404e-02, 3.838914661565322e-02, 2.402708456347335e-02, 2.241816525006600e-02, 2.255319864571587e-02, 2.286614111313163e-02, 2.306726449319972e-02, 2.643846239583761e-02, 2.683288044151892e-02, 2.019960722036982e-02, 1.998836854771853e-02, 2.175981188266120e-02, 2.445989976259658e-02, 2.175981188261364e-02, 2.445989976259672e-02, 9.529239019635743e-04, 1.092882669444711e-03, 1.783839537207590e-03, 1.794521924547987e-03, -4.219481727148844e-04, -4.233286279910705e-04, 6.813340474053290e-04, 6.625823998564219e-04, 3.198078249986989e-04, 3.270405046913846e-04, 2.973956897173644e-03, 3.258610288391086e-03, -2.725748086323326e-03, -2.723753324645777e-03, 4.679674870997772e-03, 4.681680465192859e-03, 6.630759720243263e-03, 6.668868340678022e-03, 6.698432045122545e-03, 6.676781086132073e-03, 6.834407612827006e-03, 6.758704476041698e-03, 9.842904235381989e-03, 9.311098999506502e-03, 5.595596074011454e-03, 4.861669106178446e-03, 9.463459120470939e-03, 9.385349205765295e-03, 5.368238243051694e-03, 6.177793210096990e-03, 2.899557132892557e-02, 2.966172657392818e-02, 2.580663199750658e-02, 2.528837983496105e-02, 2.101903780221896e-02, 2.091050926582318e-02, -3.150519961348976e-01, -3.112506751864938e-01, 1.229552690808392e-02, 1.235634475628515e-02, -3.611292367658602e-01, -3.383449743433971e-01, 1.050441897412232e-02, 1.050804997126033e-02, 3.530181790503890e-02, 3.861737612527760e-02, 4.233497214289363e-02, 4.891439206796268e-02, 6.951646502325014e-03, 7.151302157302340e-03, 1.507189169719296e-04, 1.551798942050460e-04, -1.617467685206421e+01, -1.525579517456271e+01, -5.650341535706791e-01, -5.614213912949568e-01, 1.240968246332803e-02, 1.751859347413347e-02, -1.583010594935515e+01, -1.144580639388225e+01, 3.410904731900482e-05, 3.386547323392839e-05, -2.234048138794026e-02, -2.219956875454556e-02, -2.226739187740417e-02, -2.212695380917097e-02, 4.952708476346484e-04, 5.283128749315861e-04, -2.223564288324183e-02, -2.209622855379249e-02, 8.196528981659932e-06, 8.178126917114703e-06, -2.313045794059042e-02, -2.300719673924646e-02, 2.845895829594693e-02, 2.883479314682875e-02, 7.265991415354156e-03, 7.177767041894990e-03, -1.495123779350759e-02, -1.697855880733700e-02, 2.246771253587742e-02, 2.251260702188772e-02, 4.368538344462553e-03, 4.391345665805874e-03, 4.472589125460379e-03, 4.538760641003551e-03, -9.915059319313849e-02, -9.834722907207075e-02, -7.659616156976563e-02, -7.549341779175928e-02, -4.869898312757371e-02, -4.840477830796777e-02, 2.026423791277438e-02, 2.013753697169093e-02, 2.518883402677255e-02, 2.495760811024676e-02, 2.809291406193500e-02, 2.819938004083303e-02, -1.045052275026771e+00, -1.036256385336837e+00, 2.613632443294885e-02, 2.447136594335201e-02, 3.706670518759372e-02, 3.946823901510554e-02, -4.370416696886153e-01, -4.086798783848128e-01, 3.629926513507640e-02, 4.100731538092119e-02, -4.707554637484561e+00, -4.534832036464537e+00, -4.556250828508880e+01, -4.545777810763740e+01, -2.221183463534569e+01, -2.086425350298721e+01, -4.272878119994414e-01, -4.293359992449559e-01, -1.672964740422196e+01, -1.251402708563088e+01, -1.672965965699755e+01, -1.251405711164033e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
