
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_mpw1kcis_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_mpw1kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.796160920105238e+01, -1.796162938109589e+01, -1.796178429391994e+01, -1.796145248122135e+01, -1.796161930175864e+01, -1.796161930175864e+01, -3.020888947217470e+00, -3.020865916321001e+00, -3.020350509973857e+00, -3.021788222710696e+00, -3.020890258748092e+00, -3.020890258748092e+00, -6.301411774180024e-01, -6.300254566192731e-01, -6.286763043478881e-01, -6.322998027052479e-01, -6.300960055306278e-01, -6.300960055306278e-01, -1.988883228927984e-01, -1.999905782044382e-01, -7.361642217975798e-01, -1.667935013824793e-01, -1.992051304883899e-01, -1.992051304883899e-01, -4.354261854555893e-03, -4.923129710951523e-03, -6.932658829974024e-02, -5.182652087753536e-04, -4.865860096146604e-03, -4.865860096146604e-03, -4.349034112369725e+00, -4.348526413818421e+00, -4.348985322286542e+00, -4.348590589563031e+00, -4.348769137994562e+00, -4.348769137994562e+00, -1.834165283027807e+00, -1.842456804245584e+00, -1.834887002725794e+00, -1.841323190843316e+00, -1.838894184112624e+00, -1.838894184112624e+00, -5.260186515736442e-01, -5.579571742915723e-01, -5.034984747054384e-01, -5.142127135118952e-01, -5.416540396426540e-01, -5.416540396426540e-01, -1.397617916159611e-01, -2.159616896268144e-01, -1.368714790060648e-01, -1.615277487060796e+00, -1.498787869113701e-01, -1.498787869113701e-01, -4.817389519736319e-04, -6.935015496030620e-04, -5.056519687045533e-04, -9.685963275598365e-02, -6.411870396047907e-04, -6.411870396047909e-04, -5.224915888115756e-01, -5.166608293378633e-01, -5.176347210372507e-01, -5.190088105856072e-01, -5.182335397487891e-01, -5.182335397487891e-01, -5.133581367923726e-01, -4.671844469205245e-01, -4.759529211610549e-01, -4.845947574753032e-01, -4.800403238849143e-01, -4.800403238849143e-01, -5.846015929207004e-01, -2.550426467025907e-01, -2.862177380265403e-01, -3.386702942151543e-01, -3.099571878904991e-01, -3.099571878904990e-01, -4.277866332415000e-01, -6.187035490707114e-02, -8.821867221464134e-02, -3.153700649603708e-01, -1.173602760011661e-01, -1.173602760011661e-01, -5.872656141625313e-03, -2.749149775248243e-05, -1.406575390255384e-04, -1.119848960891098e-01, -4.885408384920340e-04, -4.885408384920316e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_mpw1kcis_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_mpw1kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.155315401420927e+01, -2.155322437573663e+01, -2.155354893913471e+01, -2.155239645310527e+01, -2.155319103247720e+01, -2.155319103247720e+01, -3.556160851422478e+00, -3.556190205141306e+00, -3.557132801125215e+00, -3.556130901952870e+00, -3.556191395850778e+00, -3.556191395850778e+00, -7.146342474494767e-01, -7.135240077788001e-01, -6.846670143908483e-01, -6.898493230536036e-01, -7.142306371180323e-01, -7.142306371180323e-01, -2.052332073762163e-01, -2.083035546923161e-01, -8.632181764238063e-01, -1.545332959819108e-01, -2.061679869741551e-01, -2.061679869741551e-01, -1.541629788172642e-02, -1.730587449545011e-02, -1.129436526789767e-01, -1.912097817129398e-03, -1.710761251339582e-02, -1.710761251339582e-02, -5.375074283025104e+00, -5.377205860622730e+00, -5.375289752852328e+00, -5.376947301834601e+00, -5.376170335192563e+00, -5.376170335192563e+00, -1.946341437085316e+00, -1.961224972412377e+00, -1.938130287018789e+00, -1.949697312205295e+00, -1.967215366854724e+00, -1.967215366854724e+00, -6.445466665739372e-01, -7.251869064985565e-01, -6.140588280320092e-01, -6.601566845632993e-01, -6.702644789379680e-01, -6.702644789379680e-01, -1.293757102884198e-01, -2.044348147077742e-01, -1.261735408543470e-01, -2.084948624293717e+00, -1.361678396347642e-01, -1.361678396347642e-01, -1.778465134133005e-03, -2.556794924393485e-03, -1.866315532353809e-03, -1.115882120642471e-01, -2.363465541654255e-03, -2.363465541654254e-03, -6.960210245232882e-01, -6.831138643043925e-01, -6.875556328366297e-01, -6.910860302752759e-01, -6.893114375255722e-01, -6.893114375255722e-01, -6.782453506521482e-01, -5.459013987508283e-01, -5.792786147705600e-01, -6.133838757133190e-01, -5.957943829739974e-01, -5.957943829739974e-01, -7.573745263511981e-01, -2.522499047434004e-01, -2.997604322282446e-01, -3.919896168904831e-01, -3.419483979013197e-01, -3.419483979013196e-01, -4.975419337973473e-01, -1.155483652916693e-01, -1.170598900648315e-01, -3.787882409467502e-01, -1.125567176301620e-01, -1.125567176301619e-01, -2.048990099845000e-02, -1.011710685669089e-04, -5.196129556903796e-04, -1.075421212479224e-01, -1.802044126093696e-03, -1.802044126093687e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_mpw1kcis_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_mpw1kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-5.928823470922934e-09, -5.928792928728133e-09, -5.928573898667233e-09, -5.929075484923585e-09, -5.928808058531115e-09, -5.928808058531115e-09, -7.074718353431200e-06, -7.074803193369865e-06, -7.075881602170622e-06, -7.066517548190852e-06, -7.074654966117788e-06, -7.074654966117788e-06, -3.707991953049401e-03, -3.717448921626482e-03, -3.924762345491779e-03, -3.812185026803371e-03, -3.711456056103819e-03, -3.711456056103819e-03, -3.828889941280341e-01, -3.678618921734148e-01, -1.989656764614690e-03, -9.465178401769694e-01, -3.784525339691805e-01, -3.784525339691805e-01, 4.339211968928817e+02, 4.227231786242365e+02, 8.785395001357372e+00, 4.200736847443301e+02, 4.396085404053072e+02, 4.396085404053072e+02, -1.475292765413066e-06, -1.473352878365327e-06, -1.475081299732163e-06, -1.473573968278187e-06, -1.474323625938755e-06, -1.474323625938755e-06, -5.465858999118974e-05, -5.348351288675697e-05, -5.477689210712595e-05, -5.385847723496727e-05, -5.369994482984961e-05, -5.369994482984961e-05, -4.601142058693792e-03, 1.568592491181978e-03, -6.233674644637916e-03, -1.816649177850200e-03, -3.415032947660942e-03, -3.415032947660942e-03, -1.713577791485154e+00, -3.195175757587351e-01, -1.902956527251661e+00, -5.816043420445924e-05, -1.429343487566498e+00, -1.429343487566498e+00, 4.490603284196911e+02, 4.318896530242826e+02, 1.274381299489981e+03, -2.500415032089647e+00, 6.419009749749251e+02, 6.419009749749242e+02, 5.532748583062848e-02, 1.934872729804275e-02, 2.700841898872260e-02, 3.581246762687105e-02, 3.098686329199436e-02, 3.098686329199435e-02, 5.080336480501238e-02, -8.583716266565925e-03, -5.188982396650058e-03, 3.702286435248586e-04, -2.933058238717515e-03, -2.933058238717515e-03, -1.524903743081382e-05, -1.530594046090182e-01, -8.801499224898832e-02, -3.557084062330793e-02, -5.718862136457054e-02, -5.718862136457057e-02, -1.358473397640611e-02, 1.555290400252250e+01, 1.212294174279847e-01, -3.708994176292549e-02, -3.075834059758833e+00, -3.075834059758836e+00, 3.074024936040955e+02, 1.111181898310333e+03, 7.677640445826266e+02, -3.731959690604676e+00, 9.657893262750832e+02, 9.657893262750810e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_mpw1kcis_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_mpw1kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_mpw1kcis_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_mpw1kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-2.225524093233553e-05, -2.225606336584070e-05, -2.225993513366374e-05, -2.224658901891467e-05, -2.225567137342321e-05, -2.225567137342321e-05, -1.103375732091161e-04, -1.103792504492630e-04, -1.116559114576832e-04, -1.114665926149092e-04, -1.103460345943615e-04, -1.103460345943615e-04, -7.283621680240627e-04, -7.256017681805308e-04, -6.558702645251053e-04, -7.312747927454519e-04, -7.274869677580036e-04, -7.274869677580036e-04, -8.451890582413728e-03, -8.864042046265289e-03, -1.952087087446241e-04, -1.814839427557602e-03, -8.559457157853992e-03, -8.559457157853992e-03, -6.520743771053141e-05, -7.098736100182228e-05, -4.173045158383965e-04, -5.331531920572384e-06, -7.270089298099212e-05, -7.270089298099205e-05, -6.579539736358970e-04, -6.651501539209406e-04, -6.587768376844056e-04, -6.643663644394170e-04, -6.615062958221275e-04, -6.615062958221275e-04, -3.305245846997200e-04, -3.502088061932362e-04, -3.246795444210554e-04, -3.401509042580949e-04, -3.517982207702240e-04, -3.517982207702240e-04, -7.104518826578664e-03, -7.638906564943958e-03, -4.910092185736995e-03, -5.075563413635466e-03, -8.930338841720708e-03, -8.930338841720708e-03, -1.175694108567538e-03, -3.465186296566840e-03, -1.328503650732902e-03, -4.822266509447020e-04, -2.163667474420553e-03, -2.163667474420553e-03, -7.566986639277331e-06, -8.175181896509264e-06, -1.802808770837988e-05, -5.259091259979057e-04, -8.356549398612751e-06, -8.356549398612739e-06, -1.040316096211166e-01, -7.153947775580957e-02, -8.336438324649990e-02, -9.365676020884105e-02, -8.842824010448443e-02, -8.842824010448443e-02, -4.085605780887295e-02, -1.105656732477181e-02, -1.687103482894834e-02, -2.706049064487966e-02, -2.088503256970472e-02, -2.088503256970471e-02, -5.072386075832423e-03, -4.714676000696310e-03, -5.889650691753298e-03, -7.557264545373913e-03, -7.471438111674142e-03, -7.471438111674143e-03, -7.427570894310440e-03, -3.366604214812234e-04, -5.191703548342757e-04, -1.073302435092718e-02, -1.349060995780660e-03, -1.349060995780665e-03, -3.492225523165818e-05, -6.797098630260177e-07, -4.815382164844981e-06, -1.458581566934724e-03, -8.482594563273369e-06, -8.482594563273335e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
