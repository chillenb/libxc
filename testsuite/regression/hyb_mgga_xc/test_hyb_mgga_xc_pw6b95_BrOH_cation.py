
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_pw6b95_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_pw6b95", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.543390742277126e+01, -1.543392351297889e+01, -1.543405065977598e+01, -1.543381009006861e+01, -1.543392823908568e+01, -1.543392823908568e+01, -2.617334462961344e+00, -2.617301565517079e+00, -2.616584455399364e+00, -2.618108942379676e+00, -2.617257365243214e+00, -2.617257365243214e+00, -5.545459257697282e-01, -5.544044120316551e-01, -5.521452695655701e-01, -5.551133831652767e-01, -5.557095706498046e-01, -5.557095706498046e-01, -1.718472364774072e-01, -1.729004871469918e-01, -6.536426016209282e-01, -1.460496365333300e-01, -1.618931461424237e-01, -1.618931461424237e-01, -2.864321695782290e-04, -3.429883357253654e-04, -3.031672466835597e-02, -5.398294690135163e-05, -1.642436738717197e-04, -1.642436738717201e-04, -3.739257221841825e+00, -3.738569849995111e+00, -3.739233348433614e+00, -3.738626456429419e+00, -3.738904609854266e+00, -3.738904609854266e+00, -1.603066274174151e+00, -1.610255597455186e+00, -1.603864080152335e+00, -1.610217429161523e+00, -1.606654014552162e+00, -1.606654014552162e+00, -4.596642870852055e-01, -4.777929312521818e-01, -4.325681918050494e-01, -4.351490961412492e-01, -4.643035008660507e-01, -4.643035008660506e-01, -1.138559931050438e-01, -1.836641647596144e-01, -1.064872607626400e-01, -1.383474664034008e+00, -1.255363199891802e-01, -1.255363199891802e-01, -2.888394475088746e-05, -5.461264414526663e-05, -6.106208100271761e-05, -7.091313944659955e-02, -8.538137130372766e-05, -8.538137130372750e-05, -4.315693639128031e-01, -4.350319296111568e-01, -4.339085174073727e-01, -4.329146983826817e-01, -4.334201007817673e-01, -4.334201007817673e-01, -4.196290439582086e-01, -4.028918319591995e-01, -4.087144235046028e-01, -4.135727381183730e-01, -4.110872377129168e-01, -4.110872377129168e-01, -5.023556454637558e-01, -2.181451000120735e-01, -2.463498427976190e-01, -2.943348809898874e-01, -2.681330255974371e-01, -2.681330255974371e-01, -3.741985775620287e-01, -2.662606889435511e-02, -4.989029682128792e-02, -2.774970295201594e-01, -9.160135720148548e-02, -9.160135720148549e-02, -7.093097031694377e-04, -2.521068243027770e-06, -1.539413913303855e-05, -8.649089498862007e-02, -7.152875427558124e-05, -7.152875427558112e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_pw6b95_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_pw6b95", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.816883128880436e+01, -1.816880466936080e+01, -1.816890872652409e+01, -1.816886126138117e+01, -1.816914314042211e+01, -1.816919891724865e+01, -1.816826441451299e+01, -1.816808397468806e+01, -1.816887525364198e+01, -1.816852114678277e+01, -1.816887525364198e+01, -1.816852114678277e+01, -3.012038452955923e+00, -3.012150009308484e+00, -3.012052725394147e+00, -3.012172591695432e+00, -3.012504935864409e+00, -3.012644992961386e+00, -3.011839332025664e+00, -3.012026875108171e+00, -3.011576971303007e+00, -3.012422216360115e+00, -3.011576971303007e+00, -3.012422216360115e+00, -6.299459018858685e-01, -6.323942637293160e-01, -6.286557029116751e-01, -6.317514980994564e-01, -6.085634701333869e-01, -6.040120160852412e-01, -6.084548628342309e-01, -6.093827363482767e-01, -6.308101457092777e-01, -5.902878428754217e-01, -6.308101457092777e-01, -5.902878428754217e-01, -1.713304422391266e-01, -1.707721617440754e-01, -1.735414878247957e-01, -1.730763094311999e-01, -7.621830058178541e-01, -7.760907111487924e-01, -1.407069668214304e-01, -1.403866041394661e-01, -1.525845157930132e-01, -1.617140336933310e-01, -1.525845157930132e-01, -1.617140336933310e-01, -1.022029374578877e-03, -1.212834511002705e-03, -1.204169054602467e-03, -1.466293228869065e-03, -8.305393108940348e-02, -8.935657414352691e-02, -2.175934164835549e-04, -2.045653810723809e-04, -7.228374062585889e-04, -2.229569175413249e-04, -7.228374062585933e-04, -2.229569175413226e-04, -4.526629646556135e+00, -4.525584273532107e+00, -4.528434998253833e+00, -4.527331270328477e+00, -4.526727496342832e+00, -4.525644219470947e+00, -4.528278840963779e+00, -4.527229013418715e+00, -4.527554721618706e+00, -4.526462028826742e+00, -4.527554721618706e+00, -4.526462028826742e+00, -1.669663443808697e+00, -1.669479272729016e+00, -1.681768192815143e+00, -1.681291994450742e+00, -1.657726074310843e+00, -1.660279380526877e+00, -1.668137726441527e+00, -1.670819957833166e+00, -1.684940108980317e+00, -1.677845979984533e+00, -1.684940108980317e+00, -1.677845979984533e+00, -5.463136047941245e-01, -5.451315018272822e-01, -5.996280031517853e-01, -5.997387040397553e-01, -5.064598368215144e-01, -5.153646943819593e-01, -5.324941929066311e-01, -5.424640246072359e-01, -5.632001995238393e-01, -5.463017037398588e-01, -5.632001995238392e-01, -5.463017037398588e-01, -1.272616725281267e-01, -1.260133159250904e-01, -1.754452046085215e-01, -1.755150782020451e-01, -1.254109930293940e-01, -1.231301992702234e-01, -1.737241900739407e+00, -1.736593371885123e+00, -1.288383188070603e-01, -1.198495575924703e-01, -1.288383188070603e-01, -1.198495575924703e-01, -1.103504547808803e-04, -1.150532828037481e-04, -2.131973027202496e-04, -2.142854872496815e-04, -2.115931297395624e-04, -2.628920569594822e-04, -1.161918316293001e-01, -1.171725482908311e-01, -1.623945935184712e-04, -4.016274711026436e-04, -1.623945935184717e-04, -4.016274711026470e-04, -5.574318235220989e-01, -5.589312890500235e-01, -5.513262709013914e-01, -5.528381666966551e-01, -5.535879328930614e-01, -5.551065640150424e-01, -5.553987465130712e-01, -5.568888036066130e-01, -5.545083383661550e-01, -5.560123311562593e-01, -5.545083383661550e-01, -5.560123311562593e-01, -5.439358777057938e-01, -5.451930371593193e-01, -4.511444343927782e-01, -4.522954756456001e-01, -4.760082492569286e-01, -4.773698239614437e-01, -5.026055379049861e-01, -5.037658372903169e-01, -4.890353978480957e-01, -4.901588897311085e-01, -4.890353978480957e-01, -4.901588897311085e-01, -6.274962114749664e-01, -6.279660579498005e-01, -2.126060562664898e-01, -2.127416218280142e-01, -2.501727660988277e-01, -2.505864152233707e-01, -3.307148077008504e-01, -3.317153886116990e-01, -2.862025596119331e-01, -2.860975155489204e-01, -2.862025596119331e-01, -2.860975155489204e-01, -4.204689364018703e-01, -4.217335054194787e-01, -7.950962968797783e-02, -8.035833959535718e-02, -1.125473497467344e-01, -1.143587384365114e-01, -3.225380188391090e-01, -3.224241465827127e-01, -1.154054665778489e-01, -1.066946975396724e-01, -1.154054665778489e-01, -1.066946975396724e-01, -2.622528052950396e-03, -2.935508831905460e-03, -8.440443574082805e-06, -1.114837836133252e-05, -5.334988452912484e-05, -6.562209582615554e-05, -1.112485323439203e-01, -1.110557867322887e-01, -1.955868726486030e-04, -3.166880977771814e-04, -1.955868726486019e-04, -3.166880977771799e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_pw6b95_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_pw6b95", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.196567177891546e-08, 0.000000000000000e+00, -1.196577943944287e-08, -1.196562370946256e-08, 0.000000000000000e+00, -1.196574413619959e-08, -1.196530229853832e-08, 0.000000000000000e+00, -1.196533226135465e-08, -1.196585394775719e-08, 0.000000000000000e+00, -1.196602922647308e-08, -1.196565460453053e-08, 0.000000000000000e+00, -1.196562582179716e-08, -1.196565460453053e-08, 0.000000000000000e+00, -1.196562582179716e-08, -1.356446103992443e-05, 0.000000000000000e+00, -1.356713295235902e-05, -1.356515500417871e-05, 0.000000000000000e+00, -1.356788169850290e-05, -1.358181022654535e-05, 0.000000000000000e+00, -1.358511526312891e-05, -1.355958701325452e-05, 0.000000000000000e+00, -1.356159851696575e-05, -1.357068883265470e-05, 0.000000000000000e+00, -1.357580575307636e-05, -1.357068883265470e-05, 0.000000000000000e+00, -1.357580575307636e-05, -5.178519775281699e-03, 0.000000000000000e+00, -5.049434087278925e-03, -5.235801115773671e-03, 0.000000000000000e+00, -5.071753671849908e-03, -5.941956039659742e-03, 0.000000000000000e+00, -6.127826473766028e-03, -6.025827311800563e-03, 0.000000000000000e+00, -6.008136898061085e-03, -4.881570804572920e-03, 0.000000000000000e+00, -6.440509684165215e-03, -4.881570804572920e-03, 0.000000000000000e+00, -6.440509684165215e-03, -8.018097610628587e-01, 0.000000000000000e+00, -7.783838622583161e-01, -7.820234520675069e-01, 0.000000000000000e+00, -7.541445503616629e-01, -1.292295034980495e-03, 0.000000000000000e+00, -9.979585887835048e-04, -1.408027497585421e+00, 0.000000000000000e+00, -1.390205574528350e+00, -8.605281931583204e-01, 0.000000000000000e+00, -3.398945522764802e-01, -8.605281931583196e-01, 0.000000000000000e+00, -3.398945522764767e-01, 2.202998640229139e+02, 0.000000000000000e+00, 2.168014771633019e+02, 2.316278388521497e+02, 0.000000000000000e+00, 2.288486235593033e+02, 5.888281694451846e+01, 0.000000000000000e+00, 5.208225365703667e+01, 2.059886844778882e+02, 0.000000000000000e+00, 2.008733877372325e+02, 2.190840653787567e+02, 0.000000000000000e+00, 5.838474709880924e+02, 2.190840653787567e+02, 0.000000000000000e+00, 5.838474709880960e+02, -3.464923613196173e-06, 0.000000000000000e+00, -3.467946967348220e-06, -3.468143769925375e-06, 0.000000000000000e+00, -3.471058333646033e-06, -3.465084068227454e-06, 0.000000000000000e+00, -3.468038661753699e-06, -3.467843781444949e-06, 0.000000000000000e+00, -3.470867804641449e-06, -3.466587716641394e-06, 0.000000000000000e+00, -3.469510477525833e-06, -3.466587716641394e-06, 0.000000000000000e+00, -3.469510477525833e-06, -1.029291738649269e-04, 0.000000000000000e+00, -1.029773275476283e-04, -1.010591010573074e-04, 0.000000000000000e+00, -1.011640551613197e-04, -1.030473866170479e-04, 0.000000000000000e+00, -1.031486933237105e-04, -1.014359158718434e-04, 0.000000000000000e+00, -1.014957065445495e-04, -1.017875903379499e-04, 0.000000000000000e+00, -1.019273857915146e-04, -1.017875903379499e-04, 0.000000000000000e+00, -1.019273857915146e-04, -1.214118836349800e-02, 0.000000000000000e+00, -1.233959882015082e-02, -7.702668289730813e-03, 0.000000000000000e+00, -7.853313652883866e-03, -1.407679803737928e-02, 0.000000000000000e+00, -1.384839957028155e-02, -3.521113306367171e-03, 0.000000000000000e+00, -6.436558075443861e-03, -1.109673352649918e-02, 0.000000000000000e+00, -1.225158688271824e-02, -1.109673352649918e-02, 0.000000000000000e+00, -1.225158688271824e-02, -1.577324431013741e+00, 0.000000000000000e+00, -1.690127556256971e+00, -6.009758108551019e-01, 0.000000000000000e+00, -5.962580054225095e-01, -1.212966101443198e+00, 0.000000000000000e+00, -1.669577031558603e+00, -1.459342646796857e-04, 0.000000000000000e+00, -1.461836637516778e-04, -1.897136580275507e+00, 0.000000000000000e+00, -2.389933625008071e+00, -1.897136580275507e+00, 0.000000000000000e+00, -2.389933625008071e+00, 2.929420756558216e+02, 0.000000000000000e+00, 2.531695380643467e+02, 2.491578226525976e+02, 0.000000000000000e+00, 2.300382860207077e+02, 1.412947037062632e+03, 0.000000000000000e+00, 1.559114430570447e+03, 7.189938881873127e+00, 0.000000000000000e+00, 7.080387063987891e+00, 7.181672333650168e+02, 0.000000000000000e+00, 6.795251693053424e+02, 7.181672333650222e+02, 0.000000000000000e+00, 6.795251693053528e+02, -1.742482024968771e-02, 0.000000000000000e+00, -1.736643730386383e-02, -1.544569910037319e-02, 0.000000000000000e+00, -1.530311793105676e-02, -1.555127596952455e-02, 0.000000000000000e+00, -1.542581478056981e-02, -1.592343367024953e-02, 0.000000000000000e+00, -1.581871177579243e-02, -1.568126931553795e-02, 0.000000000000000e+00, -1.556538459535334e-02, -1.568126931553795e-02, 0.000000000000000e+00, -1.556538459535334e-02, -1.898267362739747e-02, 0.000000000000000e+00, -1.886730081665145e-02, -2.456743706124993e-02, 0.000000000000000e+00, -2.431835628286266e-02, -2.210811889121096e-02, 0.000000000000000e+00, -2.187534144092692e-02, -1.957728473253095e-02, 0.000000000000000e+00, -1.938713091116504e-02, -2.084759059549282e-02, 0.000000000000000e+00, -2.065748987036665e-02, -2.084759059549282e-02, 0.000000000000000e+00, -2.065748987036665e-02, -5.828148141348813e-03, 0.000000000000000e+00, -6.049898270392840e-03, -3.093781233227894e-01, 0.000000000000000e+00, -3.067714352353595e-01, -1.865433128466788e-01, 0.000000000000000e+00, -1.844091975239210e-01, -7.709990038533956e-02, 0.000000000000000e+00, -7.578992632504766e-02, -1.252357967599415e-01, 0.000000000000000e+00, -1.257419598783339e-01, -1.252357967599416e-01, 0.000000000000000e+00, -1.257419598783340e-01, -3.136056776198666e-02, 0.000000000000000e+00, -3.109779804697991e-02, 5.823524167899091e+01, 0.000000000000000e+00, 5.749290854368754e+01, 2.647852691737261e+01, 0.000000000000000e+00, 2.327611614803508e+01, -8.434654894857714e-02, 0.000000000000000e+00, -8.958152949717731e-02, -6.801862938981760e-01, 0.000000000000000e+00, -2.857167760046502e+00, -6.801862938981891e-01, 0.000000000000000e+00, -2.857167760046507e+00, 1.721250319675686e+02, 0.000000000000000e+00, 1.749155035447226e+02, 9.545078715048210e+02, 0.000000000000000e+00, 1.667085131755889e+03, 5.632063810691124e+02, 0.000000000000000e+00, 5.941420033189852e+02, -5.864088006100949e-01, 0.000000000000000e+00, -9.204362101586675e-01, 1.460615142883983e+03, 0.000000000000000e+00, 7.087899296921834e+02, 1.460615142883967e+03, 0.000000000000000e+00, 7.087899296921833e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_pw6b95_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_pw6b95", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_pw6b95_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_pw6b95", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-1.494080182038988e-05, -1.494086805053419e-05, -1.494110738646589e-05, -1.494108980500661e-05, -1.494154203124503e-05, -1.494186464239872e-05, -1.493810532512304e-05, -1.493747990051900e-05, -1.494101148185934e-05, -1.493883315607881e-05, -1.494101148185934e-05, -1.493883315607881e-05, -2.866893466005902e-04, -2.870402699206220e-04, -2.867308557255381e-04, -2.871047226315801e-04, -2.879716171679225e-04, -2.882950525183490e-04, -2.857444833377875e-04, -2.861147184232019e-04, -2.866371258364978e-04, -2.871951801592481e-04, -2.866371258364978e-04, -2.871951801592481e-04, -2.600090230285947e-03, -2.754311992091753e-03, -2.550327120610628e-03, -2.736800113940077e-03, -1.982410201839649e-03, -1.802749401822798e-03, -1.870458311416721e-03, -1.930460050875016e-03, -2.994934407907981e-03, -1.133194145426506e-03, -2.994934407907981e-03, -1.133194145426506e-03, -2.544435751427388e-03, -2.882552832342084e-03, -2.779351166817273e-03, -3.186714899752050e-03, -2.143174264504551e-03, -2.602761294039419e-03, -1.016825850211911e-03, -1.031273833358302e-03, -2.502722123486046e-03, -4.604424835064650e-04, -2.502722123486044e-03, -4.604424835064657e-04, -3.216644878279791e-07, -3.776643288456328e-07, -3.865306492164301e-07, -4.664625094564403e-07, -2.463657429680966e-05, -2.882748494957272e-05, -6.991014702014299e-08, -6.483967785420662e-08, -2.328775908311669e-07, -1.195430857344374e-07, -2.328775908311676e-07, -1.195430857344377e-07, -2.320462846430827e-04, -2.320963281789177e-04, -2.331476285403576e-04, -2.331609184730556e-04, -2.321017288824173e-04, -2.321288204535631e-04, -2.330467233229236e-04, -2.330959393125627e-04, -2.326141488441246e-04, -2.326311904795727e-04, -2.326141488441246e-04, -2.326311904795727e-04, -2.777351663918260e-04, -2.777352427557745e-04, -2.831176917503258e-04, -2.830363388250270e-04, -2.579830825188875e-04, -2.637022396421361e-04, -2.624984637925980e-04, -2.681511792360201e-04, -2.961222164355352e-04, -2.826846897730022e-04, -2.961222164355352e-04, -2.826846897730022e-04, -6.542841167632097e-03, -6.586975666978398e-03, -1.199055455727810e-02, -1.209950695998296e-02, -6.536195955442410e-03, -6.700396822907607e-03, -1.347400071729933e-02, -1.262525620517341e-02, -6.866141489754238e-03, -7.193861588868154e-03, -6.866141489754238e-03, -7.193861588868156e-03, -2.979687797095980e-04, -3.136997128251640e-04, -1.147580382849380e-03, -1.158818891444182e-03, -2.469159172308583e-04, -2.829170258605117e-04, -1.949375732087768e-03, -1.951865409579478e-03, -5.337330583335492e-04, -8.443751164468342e-04, -5.337330583335492e-04, -8.443751164468342e-04, -4.326001220725152e-08, -4.179499190145788e-08, -7.573874396919256e-08, -7.297747858693627e-08, -1.883944339550727e-07, -2.469627934626982e-07, -1.216120471752031e-04, -1.189270598566060e-04, -9.948982949861590e-08, -2.414745634650121e-07, -9.948982949861558e-08, -2.414745634650116e-07, -1.725617654274981e-02, -1.721346517724897e-02, -1.402484005625532e-02, -1.402464610495433e-02, -1.504926319613152e-02, -1.504363598726842e-02, -1.599221496402946e-02, -1.596039826335541e-02, -1.551066218241906e-02, -1.549202716000870e-02, -1.551066218241906e-02, -1.549202716000869e-02, -1.933556501601268e-02, -1.924308636330336e-02, -4.555862455724078e-03, -4.596184582931275e-03, -6.651425794832318e-03, -6.721226400382837e-03, -1.006361608985566e-02, -1.006663912055357e-02, -8.180228415796820e-03, -8.185669884768272e-03, -8.180228415796820e-03, -8.185669884768270e-03, -1.073090576693768e-02, -1.086325085325339e-02, -1.638456677495809e-03, -1.663668784913602e-03, -2.573293354550904e-03, -2.680603635986446e-03, -6.572308000281437e-03, -6.607938052562189e-03, -4.219236116713212e-03, -4.274057779851112e-03, -4.219236116713215e-03, -4.274057779851115e-03, -5.012405140046560e-03, -5.109281806772062e-03, -2.133452518453749e-05, -2.176689719027229e-05, -4.802011438827474e-05, -5.390312954632024e-05, -1.023020494768047e-02, -1.046042271783508e-02, -2.340517188200929e-04, -3.344510487942889e-04, -2.340517188200931e-04, -3.344510487942890e-04, -6.940448287290933e-07, -7.824710501804276e-07, -6.177402981070611e-09, -1.101565333029002e-08, -2.979299968181541e-08, -3.786930440037584e-08, -2.317990433006179e-04, -2.381162692503541e-04, -1.756847217865633e-07, -1.956560001350308e-07, -1.756847217865636e-07, -1.956560001350311e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
