
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_mpw1kcis_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_mpw1kcis", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.796201518879278e+01, -1.796203837962112e+01, -1.796219899150387e+01, -1.796185272733990e+01, -1.796202598794479e+01, -1.796202598794479e+01, -3.021005325946312e+00, -3.020975606679363e+00, -3.020354057991595e+00, -3.021918919896315e+00, -3.021003033137775e+00, -3.021003033137775e+00, -6.306451725716331e-01, -6.304868046884591e-01, -6.280722914622635e-01, -6.320687562285716e-01, -6.323200208379275e-01, -6.323200208379275e-01, -1.964481245444593e-01, -1.975947937745013e-01, -7.278996239060771e-01, -1.689914326036114e-01, -1.875258822071939e-01, -1.875258822071939e-01, -7.711972305583674e-04, -9.102224069577178e-04, -4.837898646315086e-02, -1.658815014839675e-04, -4.478207446858442e-04, -4.478207446858446e-04, -4.350788120232941e+00, -4.350264693099214e+00, -4.350769641075131e+00, -4.350307541257563e+00, -4.350519644504227e+00, -4.350519644504227e+00, -1.834550791313261e+00, -1.843126513235328e+00, -1.834727111770558e+00, -1.842279946581661e+00, -1.839235729335800e+00, -1.839235729335800e+00, -5.312248199698743e-01, -5.631128071192824e-01, -4.984607951826009e-01, -5.063924177349336e-01, -5.374129993414943e-01, -5.374129993414944e-01, -1.365941539189399e-01, -2.109717936935323e-01, -1.289301075262050e-01, -1.617131648522599e+00, -1.469534408678666e-01, -1.469534408678666e-01, -9.382700075236289e-05, -1.679615309575244e-04, -1.860973376878669e-04, -9.209615628284806e-02, -2.469122810068699e-04, -2.469122810068701e-04, -5.133113574366137e-01, -5.089526987726977e-01, -5.095546239200617e-01, -5.106101792656195e-01, -5.099997462953751e-01, -5.099997462953753e-01, -5.085313240788144e-01, -4.610931915023285e-01, -4.698038488996342e-01, -4.788564979782808e-01, -4.740538896313050e-01, -4.740538896313050e-01, -5.901283882148024e-01, -2.492685247243061e-01, -2.809606124205246e-01, -3.371978756996824e-01, -3.060807449424445e-01, -3.060807449424445e-01, -4.289119192012378e-01, -4.384291378342427e-02, -7.138961691533457e-02, -3.190490987930694e-01, -1.118533105608708e-01, -1.118533105608708e-01, -1.786579916854770e-03, -1.067435299962668e-05, -5.267885075291428e-05, -1.067717020700868e-01, -2.113523469999392e-04, -2.113523469999386e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_mpw1kcis_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_mpw1kcis", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.155376197555612e+01, -2.155372870855187e+01, -2.155385536041353e+01, -2.155379700427943e+01, -2.155413618832764e+01, -2.155420196884205e+01, -2.155307587894663e+01, -2.155285736321995e+01, -2.155381347556244e+01, -2.155338457434047e+01, -2.155381347556244e+01, -2.155338457434047e+01, -3.556300032412545e+00, -3.556431234056361e+00, -3.556332229659788e+00, -3.556469451772964e+00, -3.557179406467196e+00, -3.557400521247974e+00, -3.556173129803563e+00, -3.556408929773359e+00, -3.555702155121546e+00, -3.557173265964940e+00, -3.555702155121546e+00, -3.557173265964940e+00, -7.199417229886013e-01, -7.235232885169924e-01, -7.183492755705498e-01, -7.227398631676977e-01, -6.946302896229188e-01, -6.890044245250367e-01, -6.963652973496185e-01, -6.980893061974764e-01, -7.242006298314313e-01, -6.699076003465371e-01, -7.242006298314313e-01, -6.699076003465371e-01, -1.924065203651373e-01, -1.954270332716479e-01, -1.951084235861971e-01, -1.987319971841764e-01, -8.266884490516849e-01, -8.543442068990270e-01, -1.541364016154155e-01, -1.546550432101972e-01, -1.805610021727389e-01, -1.516745046458368e-01, -1.805610021727389e-01, -1.516745046458367e-01, -2.615468446996777e-03, -3.036007842827323e-03, -3.040549093744789e-03, -3.609918489509113e-03, -1.081853287299421e-01, -1.122658756124054e-01, -6.277705853799516e-04, -5.959719666367535e-04, -1.835319086609761e-03, -6.741302149578627e-04, -1.835319086609760e-03, -6.741302149578653e-04, -5.378128853747865e+00, -5.376858045640324e+00, -5.380365468205110e+00, -5.379022787166874e+00, -5.378246640318741e+00, -5.376929975845224e+00, -5.380168914451359e+00, -5.378893577564207e+00, -5.379277534935876e+00, -5.377946393996946e+00, -5.379277534935876e+00, -5.377946393996946e+00, -1.949328907307117e+00, -1.949162640001881e+00, -1.964875021409511e+00, -1.964298396670403e+00, -1.932582847854701e+00, -1.936627580212044e+00, -1.945966691472913e+00, -1.950157959950943e+00, -1.970136140991370e+00, -1.959687873409377e+00, -1.970136140991370e+00, -1.959687873409377e+00, -6.508620219439194e-01, -6.495198516389193e-01, -7.311000871368812e-01, -7.316359881238683e-01, -5.959053570230942e-01, -6.118629008823278e-01, -6.438984149467031e-01, -6.573470274125899e-01, -6.742267955672271e-01, -6.505509761797164e-01, -6.742267955672272e-01, -6.505509761797164e-01, -1.319986846091758e-01, -1.312790190611397e-01, -1.947037595529644e-01, -1.951851128046936e-01, -1.286947325065986e-01, -1.280246144142010e-01, -2.087534814632846e+00, -2.086790451127468e+00, -1.357908273988904e-01, -1.318414676895286e-01, -1.357908273988904e-01, -1.318414676895286e-01, -3.395579000713444e-04, -3.511695535269077e-04, -6.182558428140672e-04, -6.211172561537317e-04, -6.238309533222476e-04, -7.420289474441388e-04, -1.197069384719635e-01, -1.206986644665232e-01, -5.135102579793972e-04, -1.066904812040055e-03, -5.135102579793961e-04, -1.066904812040057e-03, -6.834972847531114e-01, -6.854483213326041e-01, -6.698724523718154e-01, -6.718927775186870e-01, -6.744618599912618e-01, -6.764847270092499e-01, -6.784506409158286e-01, -6.803899742726862e-01, -6.764434032805453e-01, -6.784234188108883e-01, -6.764434032805453e-01, -6.784234188108883e-01, -6.712083738615371e-01, -6.726838839925082e-01, -5.319004524329456e-01, -5.337246201404783e-01, -5.659379072675065e-01, -5.680148541771366e-01, -6.037391205068758e-01, -6.053505736111721e-01, -5.842732339088560e-01, -5.858566398033876e-01, -5.842732339088560e-01, -5.858566398033876e-01, -7.629914530624206e-01, -7.643246568380566e-01, -2.393637635683430e-01, -2.401160288475498e-01, -2.855788078984176e-01, -2.873219146306664e-01, -3.866326339134726e-01, -3.881875471514735e-01, -3.317005851064785e-01, -3.316854253778032e-01, -3.317005851064784e-01, -3.316854253778031e-01, -4.943924547544258e-01, -4.968497552336235e-01, -1.061501413763109e-01, -1.067837082914850e-01, -1.260690159185364e-01, -1.258818174988434e-01, -3.792121109469045e-01, -3.818369159596104e-01, -1.182806416841269e-01, -1.117375732662890e-01, -1.182806416841269e-01, -1.117375732662889e-01, -6.202535075330474e-03, -6.845734553500652e-03, -3.532593966016597e-05, -4.303543053844144e-05, -1.776266055660432e-04, -2.084633919435564e-04, -1.144430284282596e-01, -1.144212791947713e-01, -5.862932422144955e-04, -8.644341553023943e-04, -5.862932422144939e-04, -8.644341553023957e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_mpw1kcis_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_mpw1kcis", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.205518128142873e-08, 3.972783528724853e-10, -1.205521590532821e-08, -1.205510475038448e-08, 3.972855672000201e-10, -1.205515927374892e-08, -1.205471659815149e-08, 3.972956338705542e-10, -1.205464720298037e-08, -1.205559706996480e-08, 3.971887705403350e-10, -1.205575369331698e-08, -1.205516045213666e-08, 3.972478871599759e-10, -1.205519299730750e-08, -1.205516045213666e-08, 3.972478871599759e-10, -1.205519299730750e-08, -1.505593804911966e-05, 1.822334436197774e-06, -1.506197892904850e-05, -1.505609999740775e-05, 1.822656242812998e-06, -1.506262758198583e-05, -1.506535926495639e-05, 1.829906101491355e-06, -1.506855485842261e-05, -1.503683875723249e-05, 1.815701487388886e-06, -1.504152447341807e-05, -1.506471856007368e-05, 1.822512894576209e-06, -1.504813326797783e-05, -1.506471856007368e-05, 1.822512894576209e-06, -1.504813326797783e-05, -8.500560899930646e-03, 2.387647235934390e-03, -8.494851912381939e-03, -8.516016634855969e-03, 2.374549033828667e-03, -8.510031765713567e-03, -8.812039228456876e-03, 2.046970890108928e-03, -8.811950028921283e-03, -8.544115787909434e-03, 1.996240321002670e-03, -8.543264779606621e-03, -8.614299657070992e-03, 2.020601757546980e-03, -8.454742526833821e-03, -8.614299657070992e-03, 2.020601757546980e-03, -8.454742526833821e-03, -1.081034687161567e+00, 2.963821861632172e-01, -9.618948669277883e-01, -1.059200000097931e+00, 2.991477570461392e-01, -9.233228061360015e-01, -5.103856727234166e-03, 1.301574174583510e-03, -4.713031136704842e-03, -2.037070024110181e+00, 3.966898042501257e-01, -1.943325280897287e+00, -9.122711283322404e-01, 2.784247617127029e-01, -4.208327467871883e+00, -9.122711283322397e-01, 2.784247617127029e-01, -4.208327467871885e+00, 5.292046938450658e+02, 3.729886272720442e+01, 5.167858621730161e+02, 5.486132864208514e+02, 3.731140113325480e+01, 5.367747775316758e+02, 5.966716175457704e+01, 3.437924347696589e+00, 4.950381394906753e+01, 5.589495094936130e+02, 5.960111301255585e+01, 5.473797062191725e+02, 5.446693662852208e+02, 4.133319257031602e+01, 1.455827550121477e+03, 5.446693662852219e+02, 4.133319257031611e+01, 1.455827550121496e+03, -3.177310771484711e-06, 4.665936244808322e-07, -3.180329616263366e-06, -3.174493159190903e-06, 4.690225280808046e-07, -3.177565606559784e-06, -3.177107157214036e-06, 4.666900961074775e-07, -3.180180149541323e-06, -3.174662050018890e-06, 4.688342101117538e-07, -3.177702748321202e-06, -3.175932543552046e-06, 4.678302406456950e-07, -3.178950229274881e-06, -3.175932543552046e-06, 4.678302406456950e-07, -3.178950229274881e-06, -1.146134013307498e-04, 1.101918543980785e-05, -1.146242279488066e-04, -1.121060031181559e-04, 1.093370756655216e-05, -1.122018314140109e-04, -1.150946449080638e-04, 1.063323352259435e-05, -1.150512698673677e-04, -1.129344596489938e-04, 1.055966538118364e-05, -1.128373135252618e-04, -1.128279402708635e-04, 1.116538381880432e-05, -1.132243266027167e-04, -1.128279402708635e-04, 1.116538381880432e-05, -1.132243266027167e-04, -1.229281141827939e-02, 7.243521014930513e-03, -1.235640683637298e-02, -2.248497245061386e-03, 1.051978664794307e-02, -1.725925370218626e-03, -2.021150119205235e-02, 9.384554361541285e-03, -1.648797944391580e-02, -1.385577186617019e-02, 1.532284164088927e-02, -1.009009273621721e-02, -9.445294654843192e-03, 7.240599477451246e-03, -1.297102028214640e-02, -9.445294654843195e-03, 7.240599477451246e-03, -1.297102028214640e-02, -3.479871876840596e+00, 5.826010374287748e-01, -3.512148069929544e+00, -8.093749806769003e-01, 1.613601439882683e-01, -7.973205732421987e-01, -3.982052033278520e+00, 6.948993744104164e-01, -3.825319947588748e+00, -1.552051216225238e-04, 7.910104944682452e-05, -1.555348676502088e-04, -3.242905127760650e+00, 6.024715839063024e-01, -3.354354233719290e+00, -3.242905127760650e+00, 6.024715839063024e-01, -3.354354233719290e+00, 8.291034777941628e+02, 1.017713684837507e+02, 7.240870765723151e+02, 6.741956659746791e+02, 7.170783289874230e+01, 6.258830411173766e+02, 3.808437987535144e+03, 5.797687543375405e+02, 4.129512327767678e+03, -1.338285899545826e+00, 1.604068979576885e+00, -1.139770554811063e+00, 1.910887283506633e+03, 1.978211657015150e+02, 1.755780843735776e+03, 1.910887283506629e+03, 1.978211657015146e+02, 1.755780843735777e+03, 9.005340935229912e-02, 2.355036505556557e-02, 9.205142418595486e-02, 2.615482784562949e-02, 1.558199810046993e-02, 2.689163725288415e-02, 3.935541204747900e-02, 1.744659168895767e-02, 4.038181471232446e-02, 5.599874363425394e-02, 1.958326478509264e-02, 5.704176720447270e-02, 4.682356503216267e-02, 1.842839543354407e-02, 4.786010202299443e-02, 4.682356503216267e-02, 1.842839543354407e-02, 4.786010202299441e-02, 9.996988193528539e-02, 3.301504969059918e-02, 1.022334278670662e-01, -2.451648228415171e-02, 1.003375234291979e-02, -2.403990381656321e-02, -1.823934358609013e-02, 1.121646965192402e-02, -1.772077024688791e-02, -6.931456366473666e-03, 1.345399771534375e-02, -6.606330217945891e-03, -1.375052880419448e-02, 1.216229544500835e-02, -1.334436707108374e-02, -1.375052880419448e-02, 1.216229544500835e-02, -1.334436707108374e-02, -4.242391487277342e-03, 8.148157487541663e-03, -3.700549976952707e-03, -3.988001522243588e-01, 9.004046932476630e-02, -3.919415363873633e-01, -2.344409272504863e-01, 6.387132405231849e-02, -2.278132278603664e-01, -9.693729803904777e-02, 4.299180398810154e-02, -9.474536285418583e-02, -1.520579188031748e-01, 5.319379495126957e-02, -1.527471326729390e-01, -1.520579188031749e-01, 5.319379495126958e-02, -1.527471326729391e-01, -3.514906263887924e-02, 1.429777110348806e-02, -3.399463201465819e-02, 6.216798222394409e+01, 3.344300945733585e+00, 6.091824699229873e+01, 1.775503126034749e+01, 1.880882556782996e+00, 1.430985704486250e+01, -1.111785729065447e-01, 6.552783605750760e-02, -9.776459713793587e-02, -5.555606914504875e+00, 1.298163467852013e+00, -6.749630893111370e+00, -5.555606914504884e+00, 1.298163467852009e+00, -6.749630893111380e+00, 3.837350221849224e+02, 2.123039371297008e+01, 3.867449551599852e+02, 3.553248934616160e+03, 1.324578091104037e+03, 5.601737486783855e+03, 1.697424238779145e+03, 3.026655580868376e+02, 1.767662195612742e+03, -6.110672617444040e+00, 1.423316117185628e+00, -6.033445548128774e+00, 3.767762288500967e+03, 2.766448223722097e+02, 1.889499041039664e+03, 3.767762288500962e+03, 2.766448223722106e+02, 1.889499041039677e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_mpw1kcis_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_mpw1kcis", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-2.225191805500715e-05, -2.226284533654193e-05, -2.225301390296579e-05, -2.226363998118133e-05, -2.225637495081317e-05, -2.226849887422286e-05, -2.224411047238976e-05, -2.225282620895293e-05, -2.225262028252174e-05, -2.225897405666001e-05, -2.225262028252174e-05, -2.225897405666001e-05, -1.101021264408664e-04, -1.099790424550345e-04, -1.101626810741548e-04, -1.100111661560528e-04, -1.112607778304332e-04, -1.114346860824171e-04, -1.111929768713719e-04, -1.111152204894369e-04, -1.100099284015015e-04, -1.121158189756959e-04, -1.100099284015015e-04, -1.121158189756959e-04, -7.312371202617689e-04, -7.481324292156716e-04, -7.278219101398984e-04, -7.451243561640662e-04, -6.628532669630460e-04, -6.651702924431914e-04, -7.360490602863083e-04, -7.557845552704207e-04, -7.327856584314521e-04, -6.800078393383547e-04, -7.327856584314521e-04, -6.800078393383547e-04, -5.584193042385055e-03, -7.056695139274169e-03, -5.835319910572141e-03, -7.559106468375575e-03, -1.564723436267956e-04, -1.955777558442603e-04, -1.795945478590729e-03, -2.283269154925175e-03, -5.209716428051883e-03, -7.646542115264811e-04, -5.209716428051876e-03, -7.646542115264801e-04, -1.042986973983349e-05, -1.182206727636588e-05, -1.187229197964107e-05, -1.379695156418235e-05, -1.716576143510170e-04, -2.007169885843838e-04, -2.762177037483518e-06, -2.698455878285271e-06, -7.886630510811950e-06, -4.371020603917094e-06, -7.886630510811952e-06, -4.371020603917092e-06, -6.579953384591098e-04, -6.584929439861533e-04, -6.655530664490985e-04, -6.658027128967696e-04, -6.585770849816536e-04, -6.588614336435714e-04, -6.650557396086355e-04, -6.654955581731080e-04, -6.617260767650715e-04, -6.621294055648084e-04, -6.617260767650715e-04, -6.621294055648084e-04, -3.310150999303731e-04, -3.338928073554934e-04, -3.516867961182620e-04, -3.540465472399012e-04, -3.179575966972309e-04, -3.243048974941537e-04, -3.356136471997147e-04, -3.425222921731394e-04, -3.530253477400778e-04, -3.460737448871685e-04, -3.530253477400778e-04, -3.460737448871685e-04, -7.560845619778289e-03, -7.890772153165563e-03, -8.973992535223584e-03, -9.500948499645645e-03, -4.119333127096477e-03, -5.393531028113165e-03, -3.632438012241622e-03, -4.693451241501002e-03, -9.349488060441882e-03, -7.853583156790522e-03, -9.349488060441889e-03, -7.853583156790521e-03, -8.993155335202447e-04, -9.089810420423039e-04, -2.722763150020310e-03, -2.719055256997688e-03, -7.472209404372939e-04, -8.768377278873001e-04, -4.860890485895652e-04, -4.866377162294608e-04, -1.531550109216372e-03, -2.376730238648248e-03, -1.531550109216373e-03, -2.376730238648251e-03, -1.130517325294834e-06, -1.123827207781464e-06, -2.425062792874645e-06, -2.202900134684611e-06, -9.746508567084568e-06, -1.199355566900169e-05, -4.703731668105114e-04, -5.386557570494587e-04, -1.917402292371580e-06, -1.147939568129366e-05, -1.917402292371580e-06, -1.147939568129365e-05, -1.077167535380217e-01, -1.103627773192822e-01, -6.729817655888398e-02, -6.862801565720754e-02, -7.942606172195052e-02, -8.121941643556474e-02, -9.185249366405823e-02, -9.380441289830767e-02, -8.536551226203457e-02, -8.724080816700741e-02, -8.536551226203457e-02, -8.724080816700738e-02, -4.296086198269129e-02, -4.495139254698940e-02, -9.967363333207545e-03, -1.009185477623245e-02, -1.552776661161501e-02, -1.580892829602872e-02, -2.692642567388926e-02, -2.706034464708099e-02, -1.990743361790330e-02, -2.014668689750108e-02, -1.990743361790329e-02, -2.014668689750107e-02, -5.910095875559689e-03, -6.487423099211809e-03, -3.713827022051636e-03, -3.750006866667573e-03, -4.824545855417213e-03, -5.007075629098037e-03, -7.374065592527686e-03, -7.301332244841800e-03, -6.670097334561030e-03, -6.743155616537138e-03, -6.670097334561027e-03, -6.743155616537141e-03, -7.165503911627504e-03, -7.641703477487070e-03, -1.744048403538399e-04, -1.732155144485119e-04, -2.663213488410607e-04, -2.947378740103004e-04, -1.015460625552222e-02, -1.392557852108719e-02, -8.603769288116058e-04, -1.180827824027549e-03, -8.603769288116037e-04, -1.180827824027552e-03, -1.028503146016138e-05, -1.088124244209437e-05, -2.020187433773596e-07, -2.019539938367903e-07, -2.317161104168313e-06, -2.776348196726555e-06, -9.131697564348401e-04, -1.057617504904451e-03, -4.434767772068773e-06, -9.999963935431535e-06, -4.434767772068774e-06, -9.999963935431531e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
