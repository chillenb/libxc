
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_wb97m_v_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_wb97m_v", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.966114417464516e+01, -1.966123179203301e+01, -1.966166570744553e+01, -1.966036565525646e+01, -1.966104044641845e+01, -1.966104044641845e+01, -2.791680128433126e+00, -2.791724906915776e+00, -2.793100292310734e+00, -2.794151853109557e+00, -2.793173192879541e+00, -2.793173192879541e+00, -4.618611170355043e-01, -4.615945265812235e-01, -4.568645329189321e-01, -4.614635063174291e-01, -4.599837303139416e-01, -4.599837303139416e-01, -7.571211481318320e-02, -7.720779983054785e-02, -5.414907096469762e-01, -6.569247917922387e-02, -6.630546608673467e-02, -6.630546608673467e-02, -1.157211909706097e-02, -1.206496717937504e-02, -4.100910032899266e-02, -7.304445350009533e-03, -8.867045278714656e-03, -8.867045278714656e-03, -4.746490454777520e+00, -4.748991161057294e+00, -4.746650753824643e+00, -4.748856267859099e+00, -4.747733666412926e+00, -4.747733666412926e+00, -1.646036244858434e+00, -1.659984481358413e+00, -1.643903039434544e+00, -1.656265930696778e+00, -1.654866499100614e+00, -1.654866499100614e+00, -3.929733611218368e-01, -4.310479226712829e-01, -3.567837628416441e-01, -3.691535680619779e-01, -3.998484489835272e-01, -3.998484489835272e-01, -6.091783558086588e-02, -8.483803236802932e-02, -5.925843799159174e-02, -1.511318942217793e+00, -5.596877950181520e-02, -5.596877950181521e-02, -5.837326766909399e-03, -7.164146430634670e-03, -5.672376323537744e-03, -5.079661455349072e-02, -6.671181113701071e-03, -6.671181113701069e-03, -3.710042501637975e-01, -3.821804444452579e-01, -3.800666889199752e-01, -3.769557491722857e-01, -3.786893632173241e-01, -3.786893632173241e-01, -3.567823175162917e-01, -3.232907625543038e-01, -3.334770237517852e-01, -3.456377613142921e-01, -3.387414441789986e-01, -3.387414441789986e-01, -4.573161586367426e-01, -1.131572480589503e-01, -1.446369121439728e-01, -2.038530598525581e-01, -1.724368009136341e-01, -1.724368009136341e-01, -2.901609032746896e-01, -3.999192201198376e-02, -4.733466478764765e-02, -1.890973723884098e-01, -5.172340440416102e-02, -5.172340440416105e-02, -1.529444587765362e-02, -2.206972030742835e-03, -4.319965219678822e-03, -5.036527355942565e-02, -6.236701221348338e-03, -6.236701221348345e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_wb97m_v_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_wb97m_v", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.680133836328328e+01, -2.680150227347093e+01, -2.680217596968314e+01, -2.679974194449430e+01, -2.680102510697500e+01, -2.680102510697500e+01, -3.705314998632805e+00, -3.705493743330190e+00, -3.710121193573336e+00, -3.707172701653509e+00, -3.707690016358144e+00, -3.707690016358144e+00, -5.751524197098588e-01, -5.736384176030682e-01, -5.384625889269035e-01, -5.485338109930662e-01, -5.465839221957033e-01, -5.465839221957033e-01, -1.060498081174733e-01, -1.097539918947363e-01, -6.365405419512261e-01, -5.262200881274769e-02, -6.945897925737465e-02, -6.945897925737438e-02, -1.468641047692280e-02, -1.528854211516403e-02, -4.497180778168727e-02, -9.384295643572692e-03, -1.133883567000750e-02, -1.133883567000738e-02, -6.540736659219804e+00, -6.545391085629308e+00, -6.540969327607562e+00, -6.545077336345642e+00, -6.543090693350966e+00, -6.543090693350966e+00, -1.878928020757541e+00, -1.904091296693266e+00, -1.857308782210477e+00, -1.879490517111657e+00, -1.903680049063780e+00, -1.903680049063780e+00, -5.283275447135714e-01, -6.140876971458814e-01, -4.794722057640766e-01, -5.200816766311960e-01, -5.432080141532539e-01, -5.432080141532539e-01, -4.321202897802512e-02, -8.993363113905400e-02, -4.348452972514006e-02, -2.209754034453784e+00, -3.590528579900327e-02, -3.590528579900366e-02, -7.532069401299318e-03, -9.208291737801015e-03, -7.312997437458832e-03, -4.539281398078645e-02, -8.579949208863957e-03, -8.579949208863888e-03, -5.146645132612055e-01, -5.358552412401801e-01, -5.270652681411787e-01, -5.201010421323857e-01, -5.234353513540639e-01, -5.234353513540639e-01, -4.993964257966800e-01, -4.002508938503119e-01, -4.350239310338926e-01, -4.887900982451253e-01, -4.600839824883612e-01, -4.600839824883612e-01, -6.508682841981434e-01, -1.437484495183140e-01, -1.914303741306537e-01, -2.655247466852145e-01, -2.253759993715350e-01, -2.253759993715348e-01, -3.672129834070313e-01, -4.428226404641224e-02, -4.830415086745719e-02, -2.477082276704937e-01, -3.620738072012390e-02, -3.620738072012351e-02, -1.925255545252115e-02, -2.884153451938733e-03, -5.598476684929434e-03, -3.600843095658555e-02, -8.029745761142432e-03, -8.029745761142402e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_wb97m_v_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_wb97m_v", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-7.626270239703991e-09, -7.626207189788424e-09, -7.625864369313672e-09, -7.626803583156470e-09, -7.626320331829724e-09, -7.626320331829724e-09, -9.122822279840125e-06, -9.122953355461935e-06, -9.125409428957507e-06, -9.117877936206814e-06, -9.123754840222450e-06, -9.123754840222450e-06, -3.164192031515373e-03, -3.175697465812461e-03, -3.377774006431837e-03, -3.339679774995126e-03, -3.348542395920999e-03, -3.348542395920999e-03, 8.515756010888023e-02, 7.881794323550088e-02, -1.923324980455136e-03, 1.421415020981422e-01, 1.615042616793539e-01, 1.615042616793528e-01, -4.006541951408375e-01, -4.187518004380650e-01, -9.042992348162443e-02, -3.974225993393369e-01, -4.884029603009307e-01, -4.884029602982005e-01, -1.951059011623019e-06, -1.950771504771120e-06, -1.951040032395207e-06, -1.950785856239119e-06, -1.950910320620138e-06, -1.950910320620138e-06, -7.119647766711890e-05, -6.994744770334773e-05, -7.132935079637800e-05, -7.025108792634270e-05, -7.041863205743431e-05, -7.041863205743431e-05, -4.594093081580103e-03, -1.825880482235389e-03, -6.118838645654070e-03, -1.803505010681125e-03, -3.915749661253646e-03, -3.915749661253646e-03, 7.617842777547765e-02, 3.423868236680486e-02, 7.369033437700007e-02, -8.834213893525000e-05, 2.208001295859053e-01, 2.208001295859072e-01, -5.401786677178362e-01, -4.693077131631129e-01, -3.014969625488637e+00, 2.762513784079687e-02, -1.378662756851900e+00, -1.378662756821545e+00, -1.498740541177618e-02, -6.945247368948798e-03, -1.025050480143879e-02, -1.312712437659542e-02, -1.172576190060281e-02, -1.172576190060281e-02, -1.128001126504334e-02, -1.100946525377195e-02, -7.342291664389400e-03, -1.822377486680938e-03, -4.656189092884708e-03, -4.656189092884708e-03, -1.708189318287770e-03, -7.934261639626319e-03, -2.591160518325263e-02, -2.504845194462638e-02, -3.212065132983932e-02, -3.212065132983936e-02, -1.363792838644996e-02, -8.808581939900334e-02, -4.532252149386030e-02, -2.298239041446524e-02, 1.867889648971461e-01, 1.867889648971356e-01, -3.045122949812083e-01, -2.584433028629237e+00, -1.181737186131126e+00, 1.782752717807907e-01, -1.754899617621872e+00, -1.754899617584291e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_wb97m_v_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_wb97m_v", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_wb97m_v_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_wb97m_v", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.074539740455192e-03, 2.074577188955757e-03, 2.074724384765489e-03, 2.074170494248269e-03, 2.074463402315765e-03, 2.074463402315765e-03, 3.932885426773928e-03, 3.933996590333201e-03, 3.963384255371078e-03, 3.951900616988919e-03, 3.953159278677374e-03, 3.953159278677374e-03, 2.100695805095468e-03, 2.065422298684813e-03, 1.229573089415409e-03, 1.767708370802328e-03, 1.626530433335658e-03, 1.626530433335658e-03, -2.184221208566026e-02, -2.012806404424800e-02, -2.137611101861524e-05, -3.464898668094052e-02, -3.520819253631331e-02, -3.520819253631345e-02, -5.390018408561808e-05, -6.500917829951769e-05, -3.425250685702639e-03, -8.152947059936649e-06, -2.193969951425890e-05, -2.193969951438219e-05, 9.068847010153040e-03, 9.105599208844529e-03, 9.070984037236470e-03, 9.103405183413302e-03, 9.087243185802368e-03, 9.087243185802368e-03, 5.021534600868616e-03, 5.223294443978034e-03, 4.882598786118660e-03, 5.065462541175592e-03, 5.202693348228620e-03, 5.202693348228620e-03, 6.831072006013982e-04, 2.113076641893368e-03, 2.549985868731848e-03, 2.847069601270680e-05, 9.947060969289518e-05, 9.947060969289518e-05, -2.283370584576286e-02, -2.747829048969250e-02, -2.078825941704156e-02, 1.051593080077442e-02, -3.784513625700975e-02, -3.784513625700951e-02, -2.660423931502333e-06, -6.749598264416490e-06, -2.504178266518354e-05, -1.194882525027079e-02, -1.650454166228105e-05, -1.650454166232883e-05, -1.172048031531618e-01, -2.755187396992470e-02, -4.783882463719316e-02, -7.298456143444479e-02, -5.931407866801348e-02, -5.931407866801360e-02, -1.156431918051866e-01, -1.376926920479401e-03, -9.241182805446372e-03, -1.007991000439159e-02, -1.119081701379056e-02, -1.119081701379060e-02, 4.591367618758291e-03, -1.459112075648329e-02, -4.076070664957258e-03, -1.996698518904612e-03, 5.672982532385389e-05, 5.672982532381831e-05, 9.146022957339201e-04, -3.110621276838933e-03, -5.955737667733847e-03, -1.334540527851980e-02, -2.447282469968078e-02, -2.447282469968100e-02, -6.870396186003897e-05, -1.749052027517621e-07, -4.413684243310077e-06, -2.351953745438061e-02, -1.877922583837965e-05, -1.877922583840991e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
