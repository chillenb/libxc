
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_wb97m_v_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_wb97m_v", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.845599042172104e+01, -1.845610833397917e+01, -1.845662196266576e+01, -1.845487232449658e+01, -1.845579051066826e+01, -1.845579051066826e+01, -2.566169448448418e+00, -2.566254850417271e+00, -2.568554952456497e+00, -2.567861731956770e+00, -2.567664182326303e+00, -3.047384311749308e+00, -4.340563257478099e-01, -5.197240629939942e-01, -5.107008288844955e-01, -5.120865446499598e-01, -5.118350987734041e-01, -5.118350987734041e-01, -7.542868055921870e-02, -7.688851943046580e-02, -4.984616144459044e-01, -6.485645876936927e-02, -6.536346072521866e-02, -6.536346072521869e-02, -1.157212756859246e-02, -1.206498553263422e-02, -4.101513814941838e-02, -7.304467494087503e-03, -8.867074841714685e-03, -8.867074841714685e-03, -4.747663036932631e+00, -4.750149873818841e+00, -4.747798924911874e+00, -4.555357809320632e+00, -4.748911411503530e+00, -4.748911411503530e+00, -1.391696815206793e+00, -1.407796853822166e+00, -1.379732048728670e+00, -1.393943271690130e+00, -1.406484697155833e+00, -1.686887817457298e+00, -4.021527978386448e-01, -4.352211721165516e-01, -3.731474813144903e-01, -3.818933626851618e-01, -4.078260099091797e-01, -3.897632399904700e-01, -4.806745598008768e-02, -8.463318235796932e-02, -4.459360687824919e-02, -1.608776059318501e+00, -5.558614163414986e-02, -5.558614163414985e-02, -2.628970315392945e-03, -7.164193615517907e-03, -5.672405672675310e-03, -3.140513121937621e-02, -3.013570347925300e-03, -6.671237955531489e-03, -3.743045094555445e-01, -3.834216177215177e-01, -3.746174018080455e-01, -3.795178306901870e-01, -3.809132924300721e-01, -3.809132924300720e-01, -3.622435807016112e-01, -3.245896255210450e-01, -3.348072377640109e-01, -3.462027804455806e-01, -3.398542028453853e-01, -3.328234343225361e-01, -4.653169017157701e-01, -1.239183160607650e-01, -1.455962868452733e-01, -2.029552535539026e-01, -1.751071323487683e-01, -1.751071323487683e-01, -2.787179134391644e-01, -3.999466339723377e-02, -4.734304980197116e-02, -1.935308453170739e-01, -3.922777119159774e-02, -5.161383804806258e-02, -1.529501896024301e-02, -2.206978080988182e-03, -4.319968848119014e-03, -5.030979187129074e-02, -6.236739834965430e-03, -6.236739834965437e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_wb97m_v_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_wb97m_v", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.820462650822106e+01, -2.820475710868591e+01, -2.820534174355406e+01, -2.820340194926979e+01, -2.820441776006174e+01, -2.820441776006174e+01, -3.945121846249897e+00, -3.945264548525599e+00, -3.949097687208911e+00, -3.947921967064114e+00, -3.947620039586380e+00, -3.517011839231380e+00, -6.157996635936049e-01, -5.700731368033469e-01, -5.479048383160584e-01, -5.556511625299491e-01, -5.539704359132239e-01, -5.539704359132239e-01, -1.060426604684084e-01, -1.098883475302977e-01, -7.160832740583962e-01, -4.892788138725701e-02, -6.683008607438003e-02, -6.683008607437967e-02, -1.468644352031522e-02, -1.528861355274968e-02, -4.498363339029848e-02, -9.384383074097094e-03, -1.133895189256844e-02, -1.133895189256844e-02, -6.539423687460400e+00, -6.544098976427202e+00, -6.539683979971909e+00, -6.748099371374271e+00, -6.541774643370178e+00, -6.541774643370178e+00, -2.095648839603003e+00, -2.122314127289735e+00, -2.075701934125327e+00, -2.099335154099032e+00, -2.120181903470393e+00, -1.892677877122570e+00, -5.046104199164912e-01, -6.032778754189507e-01, -4.523434898584365e-01, -4.800510791384158e-01, -5.194069196833464e-01, -5.560063474992059e-01, -6.726715825798238e-02, -8.916561519362748e-02, -6.188278656670799e-02, -2.075499543584934e+00, -3.408241458148672e-02, -3.408241458148645e-02, -3.405838518362563e-03, -9.208478122498892e-03, -7.313113217782425e-03, -4.174839014388809e-02, -3.897354543604485e-03, -8.580173418237701e-03, -5.125117340583990e-01, -5.403727860849125e-01, -5.271236506485398e-01, -5.223216377379958e-01, -5.267724758355758e-01, -5.267724758355758e-01, -4.963538461973915e-01, -3.981191258755992e-01, -4.304715934145165e-01, -4.845399259777172e-01, -4.544608743112570e-01, -4.722479369055237e-01, -6.259268299411287e-01, -1.662241559495696e-01, -1.932080596421264e-01, -2.676258730681494e-01, -2.270964563650651e-01, -2.270964563650648e-01, -3.829100121187101e-01, -4.428826504893615e-02, -4.829630615706726e-02, -2.381060015997918e-01, -5.392553191091776e-02, -3.548009752686785e-02, -1.925477584322673e-02, -2.884177525437223e-03, -5.598491067702808e-03, -3.563078489168840e-02, -8.029898098938055e-03, -8.029898098938041e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_wb97m_v_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_wb97m_v", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-8.966766080701660e-09, -8.966661913204903e-09, -8.966169867177581e-09, -8.967720014865812e-09, -8.966911854795756e-09, -8.966911854795756e-09, -1.218413655582053e-05, -1.218417228589752e-05, -1.218424524144084e-05, -1.217987328475113e-05, -1.218533037022863e-05, -7.962245207745142e-06, -5.412475591707657e-03, -2.583275036457893e-03, -2.527873743775422e-03, -2.592057342096556e-03, -2.576314527835877e-03, -2.576314527835877e-03, 7.482509150021807e-02, 6.668184844513754e-02, -2.773922402383827e-03, 9.607564102390576e-02, 1.214261056215643e-01, 1.214261056215636e-01, -3.940097199439885e-01, -4.061055035838084e-01, -7.241701370017327e-02, -3.158379823895386e-01, -4.251574139769557e-01, -4.251574139769557e-01, -1.950470316778774e-06, -1.950178689203670e-06, -1.950463014636957e-06, -2.385990769137023e-06, -1.950313430956639e-06, -1.950313430956639e-06, -1.138764019245115e-04, -1.111801502574901e-04, -1.158506202341481e-04, -1.134400924294422e-04, -1.114485137618348e-04, -6.762321791761712e-05, -6.022946183927638e-03, -2.547214955275304e-03, -8.188322535222628e-03, -6.763158241666528e-03, -5.435806774160857e-03, -1.076042059618747e-02, 7.372582037414950e+00, 2.884824704159480e-02, 9.291835063332966e+00, -8.738589440606115e-05, 1.788864387904146e-01, 1.788864387904161e-01, -5.988224035594968e+06, -2.801288858455751e-01, -2.316622553578482e+00, 2.578817242036553e+01, -3.154595542019461e+06, -8.735878732152640e-01, -1.689214184651696e-02, -5.944151118294863e-03, -6.758649042109280e-03, -1.239232027582270e-02, -1.064929090166773e-02, -1.064929090166773e-02, -1.684897829180457e-02, -1.117015467214457e-02, -7.886211143600457e-03, -2.849308294307329e-03, -5.536023535295541e-03, -1.578693422037180e-02, -2.926288440899517e-03, 8.289001488553299e-02, -2.644062458556246e-02, -6.212287864824569e-02, -3.315221395997764e-02, -3.315221395997758e-02, -2.827424090177198e-02, -7.895597818340336e-02, -3.459729542583971e-02, -3.487336527686227e-02, 1.968871107771364e+01, 1.439624949538214e-01, -1.773618656381339e-01, -3.850424203963543e-01, -1.042888727708990e+00, 1.516473677307657e-01, -1.254755539484161e+00, -1.254755539514886e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_wb97m_v_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_wb97m_v", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.082912676482538e-03, 2.082949303136873e-03, 2.083093499869129e-03, 2.082551785308734e-03, 2.082838224438591e-03, 2.082838224438591e-03, 3.815856732159504e-03, 3.817005476344845e-03, 3.847343063241446e-03, 3.834799802323961e-03, 3.836439555593349e-03, 4.076658968194262e-03, 2.382679941148175e-03, 4.318322035060765e-03, 2.846951000224142e-03, 3.532282175838443e-03, 3.375683007006323e-03, 3.375683007006323e-03, -2.134409808857297e-02, -1.938204526574557e-02, 1.809672647881704e-03, -3.593969823909689e-02, -3.592153587371721e-02, -3.592153587371747e-02, -5.390054188488101e-05, -6.501007749404786e-05, -3.433071672174213e-03, -8.153168192469468e-06, -2.194035703602295e-05, -2.194035703602295e-05, 9.069441777539398e-03, 9.106243283375297e-03, 9.071569485052845e-03, 8.970037563664431e-03, 9.087869089213666e-03, 9.087869089213666e-03, 4.333002099348706e-03, 4.538128358445802e-03, 4.175408341744293e-03, 4.355579474232477e-03, 4.526924631261319e-03, 5.286194664802729e-03, 7.581194667407789e-06, 6.823956582162013e-05, 4.368350806112756e-03, -1.717537454896909e-03, -1.147165454670794e-03, 2.390104592987052e-03, 3.010761388298311e-03, -2.769038726681002e-02, 2.736736128218007e-03, 1.002918358119201e-02, -3.853681398438520e-02, -3.853681398438539e-02, 3.404555903306170e-07, -6.749995754050780e-06, -2.504294792907768e-05, 1.545838109423515e-03, 2.110587945241736e-06, -1.650580385599879e-05, -1.008936459030833e-01, -1.982316511294901e-02, -6.551922756136329e-02, -5.923725739151135e-02, -4.696642141641526e-02, -4.696642141641538e-02, -8.906628857755147e-02, -1.290683509988059e-03, -9.691618665133774e-03, -1.089642566373486e-02, -1.210617073729727e-02, -4.843881625011921e-03, 1.263553753869837e-03, -2.184268254987818e-03, -2.845247215412564e-03, -1.145154750002561e-02, 2.765034541365887e-03, 2.765034541365837e-03, -4.663494044429075e-03, -3.113759698823907e-03, -5.982552441760978e-03, -1.007179062818592e-02, 3.171000446134325e-03, -2.479871036433012e-02, -6.872738116583404e-05, -1.749094812490820e-07, -4.413717384437250e-06, -2.369556207333514e-02, -1.878027005155947e-05, -1.878027005155340e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
