
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_pwb6k_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_pwb6k", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.159310211645833e+01, -1.159311431498518e+01, -1.159320997386310e+01, -1.159302759916047e+01, -1.159311727006191e+01, -1.159311727006191e+01, -1.975613693839909e+00, -1.975589585658499e+00, -1.975062111623659e+00, -1.976157549335228e+00, -1.975542099712200e+00, -1.975542099712200e+00, -4.226780435289361e-01, -4.225148488386695e-01, -4.194735138369627e-01, -4.217027342787451e-01, -4.209760461919327e-01, -4.209760461919327e-01, -1.293463514412657e-01, -1.303100815612102e-01, -4.997829053243230e-01, -1.075566441784648e-01, -1.160354105658517e-01, -1.160354105658517e-01, -6.669252703386218e-05, -8.074385863195775e-05, -1.221135171448388e-02, -1.130363083033346e-05, -2.627675542607849e-05, -2.627675542607837e-05, -2.818053095641716e+00, -2.817553817848533e+00, -2.818035639282302e+00, -2.817594833856221e+00, -2.817797031081755e+00, -2.817797031081755e+00, -1.208226453630166e+00, -1.213737418610862e+00, -1.208505893165223e+00, -1.213379031947706e+00, -1.211125681284715e+00, -1.211125681284715e+00, -3.517703838672804e-01, -3.677631273597111e-01, -3.312498654672776e-01, -3.361631299381626e-01, -3.551918085423136e-01, -3.551918085423136e-01, -7.781370153641462e-02, -1.366034071439887e-01, -7.133373639443029e-02, -1.053176372885252e+00, -9.061346812548457e-02, -9.061346812548457e-02, -5.829389109514601e-06, -1.149162678032776e-05, -1.321139771830479e-05, -4.078262873343615e-02, -1.574689819514657e-05, -1.574689819514668e-05, -3.319808330309424e-01, -3.341802870025122e-01, -3.334740384153917e-01, -3.328444721866943e-01, -3.331654270233380e-01, -3.331654270233380e-01, -3.233345195009321e-01, -3.071629563365569e-01, -3.124754838874885e-01, -3.171193657384987e-01, -3.147527631046395e-01, -3.147527631046395e-01, -3.866215352401556e-01, -1.637771110360164e-01, -1.862987582255340e-01, -2.250281114187090e-01, -2.039461600265309e-01, -2.039461600265309e-01, -2.855748613108869e-01, -1.031969007239394e-02, -2.379449025760704e-02, -2.130196120292759e-01, -6.063039481207898e-02, -6.063039481207900e-02, -1.764214161147983e-04, -4.399449229573805e-07, -2.990237804592266e-06, -5.573210776234511e-02, -1.398210611826154e-05, -1.398210611826160e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_pwb6k_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_pwb6k", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.365911169725705e+01, -1.365916166056105e+01, -1.365937517449009e+01, -1.365863196323603e+01, -1.365902261062427e+01, -1.365902261062427e+01, -2.285896823160844e+00, -2.285909041908589e+00, -2.286210960413930e+00, -2.285722257241058e+00, -2.285783086984300e+00, -2.285783086984300e+00, -4.916189696644412e-01, -4.908422575917618e-01, -4.716078598261907e-01, -4.733520505255441e-01, -4.734691278762643e-01, -4.734691278762643e-01, -1.358862786262049e-01, -1.375348003526378e-01, -6.038600576494862e-01, -1.159530760545315e-01, -1.215668864830452e-01, -1.215668864830452e-01, -2.804960419169674e-04, -3.398786560316258e-04, -4.503874627489008e-02, -4.721223677059413e-05, -1.101170687121878e-04, -1.101170687121901e-04, -3.416235417818442e+00, -3.417543448827903e+00, -3.416293208584164e+00, -3.417447993302419e+00, -3.416899410282319e+00, -3.416899410282319e+00, -1.274010221361101e+00, -1.282846130114625e+00, -1.266278130788485e+00, -1.274009132086237e+00, -1.282711898184215e+00, -1.282711898184215e+00, -4.228250508822621e-01, -4.618186381076058e-01, -3.974719423058946e-01, -4.167918624156927e-01, -4.295689605157117e-01, -4.295689605157117e-01, -1.151414570273560e-01, -1.416452217326813e-01, -1.136410891976088e-01, -1.320691304353151e+00, -1.062530531757916e-01, -1.062530531757916e-01, -2.430835573633218e-05, -4.801266781392143e-05, -5.531687463088277e-05, -9.810194632200785e-02, -6.593240177133849e-05, -6.593240177134180e-05, -4.284454120769204e-01, -4.247805176805540e-01, -4.262085868003992e-01, -4.272916057354919e-01, -4.267661586398607e-01, -4.267661586398607e-01, -4.177161930771894e-01, -3.508274075349567e-01, -3.695375129848322e-01, -3.890803025423508e-01, -3.791235195473264e-01, -3.791235195473264e-01, -4.835776665395749e-01, -1.687228307209168e-01, -1.971352246481000e-01, -2.597701764031530e-01, -2.247181664215938e-01, -2.247181664215938e-01, -3.280311291944760e-01, -3.911989596825809e-02, -7.562646843278124e-02, -2.530825161995215e-01, -1.012976352328744e-01, -1.012976352328744e-01, -7.446927380443171e-04, -1.826793831870431e-06, -1.244775960502231e-05, -1.013333921948375e-01, -5.852749647220942e-05, -5.852749647220723e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_pwb6k_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_pwb6k", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.442167899199069e-09, -4.442152666946249e-09, -4.442018113115882e-09, -4.442246287743204e-09, -4.442136222787871e-09, -4.442136222787871e-09, -4.788026145818759e-06, -4.788274643593577e-06, -4.794305687901052e-06, -4.788219136544997e-06, -4.791617484814880e-06, -4.791617484814880e-06, -1.418117851427069e-03, -1.437917901877802e-03, -1.867964241921085e-03, -1.880154609589834e-03, -1.863967846264971e-03, -1.863967846264971e-03, -2.416885023133932e-01, -2.355589938937676e-01, 9.749730615289057e-06, -3.438290428064424e-01, -3.284675774706181e-01, -3.284675774706183e-01, 2.836635866189786e+01, 3.031473372595950e+01, 1.727455684696548e+01, 2.354292873302161e+01, 3.124510958729340e+01, 3.124510958729426e+01, -1.260238909124155e-06, -1.261323057406612e-06, -1.260284409115392e-06, -1.261241269965507e-06, -1.260790452372252e-06, -1.260790452372252e-06, -3.663856265781594e-05, -3.600388347405237e-05, -3.668979301221478e-05, -3.612872186027117e-05, -3.625981534272729e-05, -3.625981534272729e-05, -3.505324297632024e-03, -1.209998487169362e-03, -3.624106178407828e-03, 1.593138967301398e-03, -3.296505146793052e-03, -3.296505146793052e-03, 4.079321748282733e-01, -1.709259489244159e-01, 8.343434867778989e-01, -4.113297145326643e-05, -3.454368272335748e-01, -3.454368272335748e-01, 3.029939656455819e+01, 2.781638917990166e+01, 1.797955018841798e+02, 6.990594095128584e+00, 8.363177387947813e+01, 8.363177387948274e+01, -4.430544876407083e-03, -4.043591694290008e-03, -3.969230500817503e-03, -4.007070810112789e-03, -3.967812982967001e-03, -3.967812982967001e-03, -4.244178035702996e-03, -7.867096506556816e-03, -6.826290814307267e-03, -5.596238669664829e-03, -6.236619955878574e-03, -6.236619955878574e-03, -7.814816530621969e-04, -9.567578661552066e-02, -5.894151978951680e-02, -2.215994952145229e-02, -3.923194581663637e-02, -3.923194581663640e-02, -9.693732590320359e-03, 1.651851680944111e+01, 1.157523760007780e+01, -2.247090431867119e-02, 1.831237348770048e+00, 1.831237348770047e+00, 2.412453005204064e+01, 1.228881490810644e+02, 6.278119484111111e+01, 2.849988285598368e+00, 1.052840310677606e+02, 1.052840310677609e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_pwb6k_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_pwb6k", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-1.362625954177050e-05, -1.362652248680864e-05, -1.362713790853123e-05, -1.362323759031980e-05, -1.362535985075644e-05, -1.362535985075644e-05, -2.568334145906129e-04, -2.568838816893288e-04, -2.580429065109606e-04, -2.559474875733942e-04, -2.568831600160965e-04, -2.568831600160965e-04, -2.326040230158315e-03, -2.294969638559134e-03, -1.616345349900776e-03, -1.625162314939905e-03, -1.648105598906580e-03, -1.648105598906580e-03, -2.221550748929937e-03, -2.447481962465668e-03, -2.078568900145602e-03, -8.245412121865646e-04, -1.342752841353705e-03, -1.342752841353704e-03, -2.772305267953490e-07, -3.381846661677537e-07, -2.121872936757981e-05, -5.340277321622251e-08, -1.296699885333017e-07, -1.296699885333020e-07, -2.152806773149999e-04, -2.163735513307584e-04, -2.153250931097616e-04, -2.162898676720771e-04, -2.158369760444389e-04, -2.158369760444389e-04, -2.366126603719798e-04, -2.414440937659353e-04, -2.216387764537792e-04, -2.256734413121451e-04, -2.470042861730013e-04, -2.470042861730013e-04, -5.929075452776733e-03, -1.156783649892104e-02, -5.937687984838428e-03, -1.236423692289567e-02, -6.377029555278755e-03, -6.377029555278755e-03, -2.439834030884953e-04, -9.329509279277381e-04, -2.113172785683034e-04, -1.876891664139875e-03, -5.476173279906593e-04, -5.476173279906593e-04, -3.360524618285491e-08, -5.893204879970630e-08, -1.723056252271147e-07, -9.559440783125810e-05, -1.363976837318737e-07, -1.363976837318733e-07, -1.696856633535733e-02, -1.349081537109059e-02, -1.458455022208534e-02, -1.559062889119642e-02, -1.507545757717443e-02, -1.507545757717443e-02, -1.914265389596967e-02, -3.983469548892402e-03, -5.965319141138598e-03, -9.283483849000438e-03, -7.413509758989487e-03, -7.413509758989487e-03, -1.033703041032624e-02, -1.347624369724367e-03, -2.173273771436209e-03, -5.687332747008580e-03, -3.577266251264171e-03, -3.577266251264174e-03, -4.399866231523998e-03, -1.709638927097339e-05, -4.047131632908868e-05, -9.107392832278549e-03, -2.257972074059428e-04, -2.257972074059431e-04, -5.854829376095859e-07, -6.482120459208126e-09, -2.680796586180291e-08, -1.871249854208790e-04, -1.380883856670140e-07, -1.380883856670142e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
