
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_tpssh_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_tpssh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.016563955083441e+01, -2.016569649909264e+01, -2.016602886535064e+01, -2.016518344050957e+01, -2.016561510649177e+01, -2.016561510649177e+01, -3.148048090413671e+00, -3.148058053027288e+00, -3.148531943321309e+00, -3.150108657932281e+00, -3.148991709361070e+00, -3.148991709361070e+00, -6.299104748636836e-01, -6.294923464648835e-01, -6.213460646822476e-01, -6.275330630121769e-01, -6.256612627641975e-01, -6.256612627641975e-01, -1.920380262330113e-01, -1.934509614603924e-01, -7.181797158330768e-01, -1.615288652659360e-01, -1.725292175779056e-01, -1.725292175779056e-01, -9.078709444661338e-03, -9.554904790661007e-03, -5.191112133845411e-02, -5.245432538547814e-03, -6.590285111232989e-03, -6.590285111232989e-03, -4.979071260731953e+00, -4.980091559085934e+00, -4.979182539299843e+00, -4.980081031997207e+00, -4.979555139860431e+00, -4.979555139860431e+00, -1.895389241897087e+00, -1.908965847668899e+00, -1.890649122044202e+00, -1.902528740006789e+00, -1.905276309828228e+00, -1.905276309828228e+00, -5.740709012582528e-01, -6.066615193108266e-01, -5.248435882666859e-01, -5.339461834275170e-01, -5.832135183136593e-01, -5.832135183136593e-01, -1.246706558266830e-01, -2.041532530031250e-01, -1.165945337561526e-01, -1.703707470697081e+00, -1.384220342600735e-01, -1.384220342600735e-01, -4.047450261913872e-03, -5.127837572329181e-03, -3.920622337317509e-03, -8.172435610415786e-02, -4.723148236606492e-03, -4.723148236606492e-03, -5.806188044650831e-01, -5.875759957701832e-01, -5.866287896801272e-01, -5.848830376476661e-01, -5.858895451856350e-01, -5.858895451856350e-01, -5.526793965968098e-01, -4.952488731763918e-01, -5.192117421852155e-01, -5.420816691267071e-01, -5.305679256183200e-01, -5.305679256183200e-01, -6.310630188270504e-01, -2.434782858113156e-01, -2.778820961004686e-01, -3.490416726663260e-01, -3.098229976228533e-01, -3.098229976228533e-01, -4.528146732221346e-01, -4.978683165964293e-02, -6.704586433226015e-02, -3.379834103493929e-01, -1.004922467131611e-01, -1.004922467131612e-01, -1.280665105603799e-02, -1.370937201583588e-03, -2.877467594416229e-03, -9.529726632883799e-02, -4.370437935012673e-03, -4.370437935012675e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_tpssh_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_tpssh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.504975699442810e+01, -2.504981362440525e+01, -2.505023772010233e+01, -2.504939878012092e+01, -2.504981376750694e+01, -2.504981376750694e+01, -3.882799339608097e+00, -3.882841024811679e+00, -3.884030409718732e+00, -3.884158961331497e+00, -3.883637500752897e+00, -3.883637500752897e+00, -7.851949630959359e-01, -7.835924231841755e-01, -7.413412879973927e-01, -7.502961725033130e-01, -7.490566282579438e-01, -7.490566282579438e-01, -1.970075719476845e-01, -2.017301636192610e-01, -9.240184544130683e-01, -1.552416689397513e-01, -1.650686511370178e-01, -1.650686511370178e-01, -1.209011538732270e-02, -1.272210308283489e-02, -6.703717946706388e-02, -6.991182710092356e-03, -8.780950981139653e-03, -8.780950981139662e-03, -6.187359644842282e+00, -6.187192310705521e+00, -6.187461544971629e+00, -6.187309692634510e+00, -6.187219242131369e+00, -6.187219242131369e+00, -2.264338832252494e+00, -2.293309838586827e+00, -2.244252001455329e+00, -2.270476584000908e+00, -2.289625708997325e+00, -2.289625708997325e+00, -7.320834147110797e-01, -7.911806863340448e-01, -6.719170781106716e-01, -7.055793694676902e-01, -7.430954743780979e-01, -7.430954743780979e-01, -1.376227128713687e-01, -1.930955824721694e-01, -1.312507396521890e-01, -2.257199219329226e+00, -1.403357546937332e-01, -1.403357546937332e-01, -5.395161975504922e-03, -6.834352521062708e-03, -5.224401158451141e-03, -9.948080300479771e-02, -6.293838897528601e-03, -6.293838897528606e-03, -7.367338258910265e-01, -7.376922885213414e-01, -7.367678899113416e-01, -7.363061358521797e-01, -7.364802693585003e-01, -7.364802693585003e-01, -7.202624774520442e-01, -6.429174416831680e-01, -6.737233926648659e-01, -6.912481263627793e-01, -6.831788586831384e-01, -6.831788586831384e-01, -8.270837101005373e-01, -2.402670099358989e-01, -3.050711157761156e-01, -4.445157727071278e-01, -3.766266889471954e-01, -3.766266889471955e-01, -5.799689026444856e-01, -6.455393176066455e-02, -8.483910449356670e-02, -4.368905021039920e-01, -1.145348963527427e-01, -1.145348963527427e-01, -1.703815044225972e-02, -1.827799227365534e-03, -3.835870688949305e-03, -1.106047245798947e-01, -5.823963150335677e-03, -5.823963150335666e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_tpssh_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_tpssh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.177294044168073e-08, -1.177329161911166e-08, -1.177404297665536e-08, -1.176883610087552e-08, -1.177167904183439e-08, -1.177167904183439e-08, -1.004191215526536e-05, -1.004392199406612e-05, -1.009569527701609e-05, -1.006389233360286e-05, -1.007455104494964e-05, -1.007455104494964e-05, -3.038542334333154e-03, -3.065426626939567e-03, -3.694732222849052e-03, -3.661614999887735e-03, -3.654561970095531e-03, -3.654561970095531e-03, -4.772521884014382e-01, -4.569574944343152e-01, -7.138552694301046e-04, -8.327095333640601e-01, -7.351128843524690e-01, -7.351128843524685e-01, -2.192096387782651e+00, -2.315767263932825e+00, -1.308734854763608e+00, -1.992705251605022e+00, -2.531220399366739e+00, -2.531220399365737e+00, -4.921300521970230e-06, -4.972241551077708e-06, -4.923574276916533e-06, -4.968534483028292e-06, -4.947060138710826e-06, -4.947060138710826e-06, -4.519477004119336e-05, -4.333548941097526e-05, -4.461583306207848e-05, -4.286996646076555e-05, -4.453066953487083e-05, -4.453066953487083e-05, -1.194191339056119e-02, -1.374145200829001e-02, -1.297474588709569e-02, -7.816323445696624e-03, -1.258572448731844e-02, -1.258572448731844e-02, -9.705013095522081e-01, -3.729789693747287e-01, -1.062147180447332e+00, -8.160599531206217e-05, -1.166253596166427e+00, -1.166253596166426e+00, -2.625836185731448e+00, -2.345211742182356e+00, -1.472408774313444e+01, -1.514510646841824e+00, -6.852483542629439e+00, -6.852483542619031e+00, -1.022940992838506e-01, -5.197990898730438e-02, -6.437082298678906e-02, -7.847893172524409e-02, -7.088907277636897e-02, -7.088907277636899e-02, -6.435783431460942e-02, -8.265849007080172e-03, -1.199407659571494e-02, -2.387826321745681e-02, -1.655525289144231e-02, -1.655525289144231e-02, -8.745195677244300e-03, -1.896785608455435e-01, -1.001508228770523e-01, -4.089371639716798e-02, -5.611764527933401e-02, -5.611764527933405e-02, -1.504341974709240e-02, -1.191869043377322e+00, -1.201604633361154e+00, -5.924569818463095e-02, -1.713083832846744e+00, -1.713083832846746e+00, -1.766463561801960e+00, -1.151211974373545e+01, -5.570697048142777e+00, -1.723772047422002e+00, -8.655256316606998e+00, -8.655256316659489e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_tpssh_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_tpssh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_tpssh_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_tpssh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.658149797857168e-03, 1.658219155532527e-03, 1.658496844314854e-03, 1.657470667624628e-03, 1.658012543747089e-03, 1.658012543747089e-03, 2.454399606754653e-03, 2.455288342750915e-03, 2.480155025699508e-03, 2.483061760953137e-03, 2.477492739875809e-03, 2.477492739875809e-03, 3.720700603556621e-03, 3.727996076933783e-03, 3.719237101101760e-03, 4.201628066511703e-03, 4.055563237348339e-03, 4.055563237348339e-03, 6.918780796882405e-03, 7.698807447307800e-03, 5.729015554896146e-04, 1.225562248873359e-03, 2.956923801135702e-03, 2.956923801135697e-03, 4.270638501591828e-09, 5.774815449489879e-09, 4.351199302271754e-06, 1.999330668795895e-10, 9.723316421345943e-10, 9.723316421333306e-10, 1.125581351742056e-02, 1.137730485162352e-02, 1.126325302353010e-02, 1.137041991768649e-02, 1.131620561309058e-02, 1.131620561309058e-02, 2.599219576731051e-03, 2.666786685033716e-03, 2.375109355634673e-03, 2.425092273084760e-03, 2.752311058050269e-03, 2.752311058050269e-03, 2.809595132565929e-02, 2.573641424719658e-02, 1.980801319733291e-02, 1.116798744668115e-02, 3.066217698881948e-02, 3.066217698881948e-02, 1.896596592322188e-04, 2.394936811504673e-03, 1.455706081955733e-04, 3.014322757300223e-03, 7.849297539407358e-04, 7.849297539407363e-04, 3.329898798927809e-11, 1.491392057824365e-10, 9.492568762814164e-10, 4.027578227984543e-05, 5.507704956381275e-10, 5.507704956365284e-10, 1.930855860074468e-01, 1.349705129107269e-01, 1.564693358816109e-01, 1.761115372307908e-01, 1.662096205091586e-01, 1.662096205091586e-01, 5.792274403627810e-02, 1.914863031089259e-02, 3.179753071840787e-02, 5.767385085230207e-02, 4.219657370563232e-02, 4.219657370563231e-02, 1.862886117343540e-02, 4.160922928006258e-03, 7.635169998632915e-03, 2.072875184881485e-02, 1.354016984755322e-02, 1.354016984755325e-02, 2.007970882316435e-02, 3.681221563888206e-06, 1.155053071427542e-05, 3.105287091395655e-02, 1.688409589535193e-04, 1.688409589535119e-04, 7.029160911979019e-09, 3.412213327974022e-13, 6.111191172586396e-11, 1.479012157739208e-04, 6.463799978319794e-10, 6.463800118828104e-10]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
