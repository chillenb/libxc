
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_tpssh_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_tpssh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.807812194717154e+01, -1.807817642438061e+01, -1.807843227852252e+01, -1.807762178223101e+01, -1.807804451663934e+01, -1.807804451663934e+01, -3.022235680941094e+00, -3.022232047521097e+00, -3.022189991753907e+00, -3.022472852492907e+00, -3.022136992573144e+00, -3.359238299776515e+00, -6.369646056504676e-01, -6.910495494376270e-01, -6.835168976290423e-01, -6.839507713440075e-01, -6.839102292540793e-01, -6.839102292540793e-01, -1.937030310440193e-01, -1.954248538413551e-01, -7.409367902259431e-01, -1.667261813649926e-01, -1.771111276648525e-01, -1.771111276648526e-01, -9.078755795395715e-03, -9.555006289266662e-03, -5.199864557986358e-02, -5.245543575593360e-03, -6.590438332986497e-03, -6.590438332986497e-03, -4.982019478038858e+00, -4.983035631636734e+00, -4.982070936012757e+00, -4.502288282867705e+00, -4.982532035808834e+00, -4.982532035808834e+00, -1.738795216712073e+00, -1.749636653843323e+00, -1.730985128424634e+00, -1.740508633967045e+00, -1.748565927469499e+00, -1.924081377203713e+00, -5.878101356164708e-01, -6.415435588264751e-01, -5.441463249589271e-01, -5.665108781068980e-01, -5.976608398000999e-01, -5.624516295377155e-01, -1.058075844500747e-01, -2.064951271350529e-01, -9.873900952672722e-02, -1.856934740704696e+00, -1.404824685032239e-01, -1.404824685032238e-01, -4.195502641527920e-03, -5.128073386843270e-03, -3.920765680867332e-03, -6.938510679677230e-02, -4.859011990282507e-03, -4.723430799981243e-03, -6.010518282344988e-01, -5.968247848666972e-01, -5.598293551752092e-01, -5.996005808650331e-01, -5.989896747873203e-01, -5.989896747873203e-01, -5.854840615868689e-01, -4.961472666472654e-01, -5.210441765688331e-01, -5.469738406389080e-01, -5.336418604729031e-01, -5.025014200005553e-01, -6.694521427465450e-01, -2.300963682793430e-01, -2.814603295056329e-01, -3.440887911515705e-01, -3.141131861641268e-01, -3.141131861641268e-01, -4.371284854354843e-01, -4.982395499532147e-02, -6.726880083969965e-02, -3.439071998051758e-01, -8.601777548964828e-02, -1.015040839741531e-01, -1.280997683331390e-02, -1.370964153420069e-03, -2.877484699104850e-03, -9.583589357090740e-02, -4.370628398300317e-03, -4.370628398300319e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_tpssh_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_tpssh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.429783003767868e+01, -2.429790216219129e+01, -2.429824167931233e+01, -2.429716851848415e+01, -2.429772815644573e+01, -2.429772815644573e+01, -3.938699037992038e+00, -3.938738452886606e+00, -3.939852994658171e+00, -3.939749371638328e+00, -3.939360485427737e+00, -4.091893580312293e+00, -8.163631698693204e-01, -7.296733637908330e-01, -6.938293994894293e-01, -7.050820811177445e-01, -7.017030417058658e-01, -7.017030417058658e-01, -1.963243485507454e-01, -2.005439660110066e-01, -9.603212034876599e-01, -1.649074067148405e-01, -1.694418816710950e-01, -1.694418816710951e-01, -1.209030026821439e-02, -1.272250792238357e-02, -6.737853580259545e-02, -6.991626519620336e-03, -8.781563048309819e-03, -8.781563048309819e-03, -6.193327517903411e+00, -6.193113933986766e+00, -6.193306741357133e+00, -6.020506548408994e+00, -6.193225708573476e+00, -6.193225708573476e+00, -2.243444133735523e+00, -2.260179853468784e+00, -2.231499827667330e+00, -2.245953083548055e+00, -2.258627383098196e+00, -2.296559465971346e+00, -7.661193010651534e-01, -8.267722607033243e-01, -6.994424772953154e-01, -7.391508464061390e-01, -7.792342454701380e-01, -7.407152835787287e-01, -1.370293673113039e-01, -1.972502039427453e-01, -1.278956804787662e-01, -2.369631991964959e+00, -1.453273233165913e-01, -1.453273233165913e-01, -5.526134825978782e-03, -6.835295083917231e-03, -5.224973835343964e-03, -8.996256954331774e-02, -6.395309952055171e-03, -6.294967903956721e-03, -7.487696794699337e-01, -7.504862674967734e-01, -7.357642068002637e-01, -7.493272005385450e-01, -7.495860122700806e-01, -7.495860122700805e-01, -7.306074109270311e-01, -6.454409615532429e-01, -6.811675969753666e-01, -7.060115042350232e-01, -6.945982423404872e-01, -6.631090418270493e-01, -8.667924020047708e-01, -2.956418886073756e-01, -3.010804756069999e-01, -4.391577015352510e-01, -3.707953402015196e-01, -3.707953402015196e-01, -5.638984009976308e-01, -6.469722070493927e-02, -8.567847449083862e-02, -4.467709656744951e-01, -1.114302161981370e-01, -1.178228002452353e-01, -1.705141064080059e-02, -1.827907022423376e-03, -3.835939077112946e-03, -1.123949785288175e-01, -5.824724156498171e-03, -5.824724156498162e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_tpssh_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_tpssh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.990754971379628e-09, 1.990630158487598e-09, 1.990109695068561e-09, 1.991959015050141e-09, 1.990985273176929e-09, 1.990985273176929e-09, 7.273013656731965e-06, 7.271936557627536e-06, 7.242965460241506e-06, 7.252060683590513e-06, 7.254101211283439e-06, -4.155476491449676e-06, 6.765822357065692e-03, -2.614170261371051e-03, -2.782788323537098e-03, -2.816389401273731e-03, -2.834549790905588e-03, -2.834549790905588e-03, -4.607605555294201e-01, -4.398041403941895e-01, 3.965948678839709e-03, -6.320180649547089e-01, -6.274734438658955e-01, -6.274734438658953e-01, -2.155826763519630e+00, -2.245967920276883e+00, -1.045447417271745e+00, -1.583787866547093e+00, -2.203670633325723e+00, -2.203670633325723e+00, -4.888332661696892e-06, -4.939380911874336e-06, -4.891278686398020e-06, 1.253243791606329e-07, -4.913802310211710e-06, -4.913802310211710e-06, 7.997080739296398e-05, 7.635154964494460e-05, 8.275750619303159e-05, 7.946005616396280e-05, 7.663712633957878e-05, -3.706066828804959e-05, -4.673940257969690e-03, -8.813350477816215e-03, -4.793466732108911e-03, -5.439153323004804e-03, -5.022152102930453e-03, 5.591653641820514e-03, 2.314190843074299e+01, -3.280988245001821e-01, 3.165632320996087e+01, -7.506350587529583e-05, -9.788722649550783e-01, -9.788722649550784e-01, 3.130370754123147e+07, -1.400138925570131e+00, -1.131564413049031e+01, 1.556834700049269e+02, 1.686972758893242e+07, -4.343258874865894e+00, -9.428564269799086e-02, -4.347376816360173e-02, -1.063269774578199e-02, -6.776275553857142e-02, -6.047695923813389e-02, -6.047695923813390e-02, -9.036650287909558e-02, -7.105049991324374e-03, -9.079630393519767e-03, -1.682739103616641e-02, -1.179621013661132e-02, 6.932140066509869e-03, -5.513270363247172e-03, 6.409679556825291e-01, -9.556188990224546e-02, 8.098915045634390e-02, -4.992743767096576e-02, -4.992743767096561e-02, 2.456204921177573e-02, -1.070298179474283e+00, -9.228559052609100e-01, -2.490455911861786e-02, 5.887853338160235e+01, -1.338431878725647e+00, -1.029732777395386e+00, -1.715337170745871e+00, -4.916330869648015e+00, -1.476809540568232e+00, -6.189799400904169e+00, -6.189799400945588e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_tpssh_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_tpssh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.397793019623754e-04, 1.397825714534980e-04, 1.397955121475119e-04, 1.397471389855474e-04, 1.397727125416410e-04, 1.397727125416410e-04, -4.775950374051918e-04, -4.773850927309460e-04, -4.717556243679486e-04, -4.740078545445353e-04, -4.738169029461256e-04, 1.577180174204853e-03, -1.779584714260928e-03, 2.137950222803257e-03, 1.116149299168310e-03, 1.855315950241268e-03, 1.799348506079239e-03, 1.799348506079239e-03, 6.116354260621154e-03, 6.645158881999999e-03, -4.966872564372975e-04, 1.112029936594826e-03, 2.507046197151732e-03, 2.507046197151725e-03, 4.426792156723427e-09, 5.989575320568118e-09, 3.675923156408107e-07, 2.062467167695192e-10, 1.004826567926531e-09, 1.004826567926531e-09, 1.127946050026329e-02, 1.140161117015013e-02, 1.128646002346793e-02, 7.044794347979049e-04, 1.134043182282609e-02, 1.134043182282609e-02, -1.011528732500840e-03, -9.928578242523870e-04, -1.019189702409298e-03, -1.009583390728927e-03, -9.944460728592446e-04, 2.019783524513801e-03, 2.018568191273145e-02, 4.506751383909681e-02, 1.296160126727463e-02, 2.132188341368752e-02, 2.307365134164761e-02, 1.983362881510247e-03, -9.355343278132513e-05, 5.846113761591422e-04, -7.502121168060119e-05, 8.941973390922677e-03, 7.807009263115278e-04, 7.807009263115278e-04, -2.298178062742321e-09, 1.538290679248712e-10, 9.774547102886218e-10, -2.684900501184172e-05, -1.448932625493652e-08, 5.677923796568632e-10, 3.113325925887154e-01, 1.473872752641875e-01, 6.983566831996497e-03, 2.253989974768000e-01, 2.019211799677730e-01, 2.019211799677729e-01, 2.761200577041375e-01, 1.748617631234406e-02, 2.849765448906859e-02, 5.294554232752820e-02, 3.770601795064095e-02, 4.615098563199054e-03, 3.357596047931638e-02, -1.915239313892033e-03, 5.906538008521807e-03, -5.706287650673358e-03, 9.268875333700723e-03, 9.268875333700721e-03, -3.355006679900283e-03, 3.977970559426538e-06, 1.264806442466575e-05, 1.924091646115335e-02, -8.044747622424340e-05, 1.841248065367497e-04, 7.319507517528443e-09, 3.498784234208826e-13, 6.282423402134713e-11, 1.605789721765507e-04, 6.660147969050475e-10, 6.660148165670194e-10]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
