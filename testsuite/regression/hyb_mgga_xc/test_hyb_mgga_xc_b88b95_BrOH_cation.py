
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_b88b95_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b88b95", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.524036467540553e+01, -1.524038419807686e+01, -1.524052008653548e+01, -1.524022858610431e+01, -1.524037434767070e+01, -1.524037434767070e+01, -2.577129640528169e+00, -2.577101891807345e+00, -2.576503593958194e+00, -2.577821044452025e+00, -2.577061004885637e+00, -2.577061004885637e+00, -5.431564168402998e-01, -5.429601018433811e-01, -5.394290162991912e-01, -5.424026529768482e-01, -5.433238788425697e-01, -5.433238788425697e-01, -1.675048692599440e-01, -1.684307056737951e-01, -6.406233289681814e-01, -1.451761931982381e-01, -1.592346695758257e-01, -1.592346695758256e-01, -4.675681697627015e-02, -4.675256414962161e-02, -8.216108980500775e-02, -4.292223575955946e-02, -4.354204991203935e-02, -4.354204991203933e-02, -3.701284962598969e+00, -3.700817351698282e+00, -3.701270124863084e+00, -3.700857246228640e+00, -3.701044269084596e+00, -3.701044269084596e+00, -1.566635202600609e+00, -1.573919658441291e+00, -1.566873644844183e+00, -1.573294820789645e+00, -1.570568507387469e+00, -1.570568507387469e+00, -4.531080215982459e-01, -4.751617563002559e-01, -4.258490125642363e-01, -4.320057230119436e-01, -4.581411821299422e-01, -4.581411821299422e-01, -1.233217614191532e-01, -1.806701012088398e-01, -1.179674678340737e-01, -1.376203449836833e+00, -1.278365313256467e-01, -1.278365313256467e-01, -3.878052084593190e-02, -4.134806377708903e-02, -2.704064106326318e-02, -9.552697337704630e-02, -3.296537753192234e-02, -3.296537753192236e-02, -4.307659920501209e-01, -4.327679824311150e-01, -4.320981954323670e-01, -4.315142027969017e-01, -4.318094101500308e-01, -4.318094101500308e-01, -4.194593312676105e-01, -3.948404169991446e-01, -4.021464280459673e-01, -4.089992877313504e-01, -4.054519455405732e-01, -4.054519455405732e-01, -4.993563696928905e-01, -2.129082199562329e-01, -2.398047364884185e-01, -2.879520617421610e-01, -2.613489249884753e-01, -2.613489249884753e-01, -3.665915039004164e-01, -8.220886079824752e-02, -9.137554428447210e-02, -2.723324341390767e-01, -1.031716871112687e-01, -1.031716871112687e-01, -5.253279084217215e-02, -2.401068764344347e-02, -3.133685467515886e-02, -1.004524273117473e-01, -3.098660821896107e-02, -3.098660821896105e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_b88b95_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b88b95", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.826726998184668e+01, -1.826724327820350e+01, -1.826734847888142e+01, -1.826730065745494e+01, -1.826758541266494e+01, -1.826764207638582e+01, -1.826669450528182e+01, -1.826651186894010e+01, -1.826731440019338e+01, -1.826695464481529e+01, -1.826731440019338e+01, -1.826695464481529e+01, -3.025814453628268e+00, -3.025940470315831e+00, -3.025831097845536e+00, -3.025966292513903e+00, -3.026348840831581e+00, -3.026503547012492e+00, -3.025574486489105e+00, -3.025778466598003e+00, -3.025345573082886e+00, -3.026230472981077e+00, -3.025345573082886e+00, -3.026230472981077e+00, -6.295853105861445e-01, -6.323611253702884e-01, -6.281571678766463e-01, -6.316566746902036e-01, -6.057151502502536e-01, -6.004527840269533e-01, -6.053506134857343e-01, -6.065284506509334e-01, -6.306268447605109e-01, -5.824725404667241e-01, -6.306268447605109e-01, -5.824725404667241e-01, -1.619555640049161e-01, -1.624915943412228e-01, -1.648670875005837e-01, -1.655422415732579e-01, -7.612216492988828e-01, -7.768364538741662e-01, -1.214386672944449e-01, -1.214291762603293e-01, -1.438883691367345e-01, -1.257883797191934e-01, -1.438883691367345e-01, -1.257883797191934e-01, -1.272650465010375e-02, -1.313764014509958e-02, -1.294886940408807e-02, -1.341915843012986e-02, -3.824751113956021e-02, -3.938878182873064e-02, -1.010646285067978e-02, -1.006962259639454e-02, -1.202054233000465e-02, -8.149822048243388e-03, -1.202054233000463e-02, -8.149822048243377e-03, -4.551287539723636e+00, -4.550238182686879e+00, -4.553071214210018e+00, -4.551964591851818e+00, -4.551384252858346e+00, -4.550297610416731e+00, -4.552917230126784e+00, -4.551863502296198e+00, -4.552201551066394e+00, -4.551105806428090e+00, -4.552201551066394e+00, -4.551105806428090e+00, -1.659997944973042e+00, -1.659816030912461e+00, -1.672906350396950e+00, -1.672417439464660e+00, -1.645816787805193e+00, -1.648996311665915e+00, -1.656977558889140e+00, -1.660263727163888e+00, -1.677221079889520e+00, -1.668894306852897e+00, -1.677221079889520e+00, -1.668894306852897e+00, -5.491437529438025e-01, -5.479607098208624e-01, -6.021990900785830e-01, -6.022612037614531e-01, -5.087306425876758e-01, -5.178052857930162e-01, -5.352427687960671e-01, -5.452470177637114e-01, -5.662564029525925e-01, -5.492709526540179e-01, -5.662564029525925e-01, -5.492709526540179e-01, -8.424111116375323e-02, -8.437465701319109e-02, -1.582972865402668e-01, -1.585231093915253e-01, -7.769781216731780e-02, -7.911770476175113e-02, -1.744388118756070e+00, -1.743730894395958e+00, -9.879603385161409e-02, -9.816486044523874e-02, -9.879603385161409e-02, -9.816486044523874e-02, -8.499778590343869e-03, -8.821074932812941e-03, -9.676921080294595e-03, -9.850142919699524e-03, -6.689740968067812e-03, -6.774085032497935e-03, -5.511398859615668e-02, -5.539606105112325e-02, -7.430542646711797e-03, -8.623827435471002e-03, -7.430542646711817e-03, -8.623827435471002e-03, -5.592546132006065e-01, -5.607569959136101e-01, -5.535093718124051e-01, -5.550007198904090e-01, -5.555305956948213e-01, -5.570330529773094e-01, -5.572075748978842e-01, -5.586957234805456e-01, -5.563693863360529e-01, -5.578641482802718e-01, -5.563693863360529e-01, -5.578641482802718e-01, -5.452359866049108e-01, -5.464855437155772e-01, -4.516684619560393e-01, -4.528672737375013e-01, -4.781625096907692e-01, -4.795492474738764e-01, -5.054259284854253e-01, -5.065852396051765e-01, -4.916696666634042e-01, -4.927989393864761e-01, -4.916696666634042e-01, -4.927989393864761e-01, -6.303555136508485e-01, -6.307501346409158e-01, -2.001947847321483e-01, -2.005169094780813e-01, -2.426386277934812e-01, -2.433878432695968e-01, -3.302802915493138e-01, -3.313117812462265e-01, -2.828304279186227e-01, -2.827808339017823e-01, -2.828304279186228e-01, -2.827808339017823e-01, -4.207196087831144e-01, -4.220813068382445e-01, -3.787675513048384e-02, -3.801795374554998e-02, -4.691033618758198e-02, -4.761358531430348e-02, -3.233504632802943e-01, -3.233489689544340e-01, -6.751730636948287e-02, -6.773361056294476e-02, -6.751730636948289e-02, -6.773361056294476e-02, -1.576518162276836e-02, -1.602723966538542e-02, -4.741972727748942e-03, -4.328494849882015e-03, -6.681853964796473e-03, -6.789459468596554e-03, -6.369163543171842e-02, -6.410018440353311e-02, -6.567288132494555e-03, -8.233654667991050e-03, -6.567288132494567e-03, -8.233654667991036e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_b88b95_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b88b95", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.016556795511998e-08, 0.000000000000000e+00, -1.016566330353850e-08, -1.016550837864946e-08, 0.000000000000000e+00, -1.016561959293113e-08, -1.016520098414360e-08, 0.000000000000000e+00, -1.016521393524592e-08, -1.016588216426656e-08, 0.000000000000000e+00, -1.016607539472540e-08, -1.016554205881148e-08, 0.000000000000000e+00, -1.016564322984383e-08, -1.016554205881148e-08, 0.000000000000000e+00, -1.016564322984383e-08, -1.145912441568768e-05, 0.000000000000000e+00, -1.145982846338120e-05, -1.145959796725901e-05, 0.000000000000000e+00, -1.146022438669422e-05, -1.146957629998209e-05, 0.000000000000000e+00, -1.147123509667955e-05, -1.146005524852060e-05, 0.000000000000000e+00, -1.146015159865031e-05, -1.146464148942101e-05, 0.000000000000000e+00, -1.146871601360771e-05, -1.146464148942101e-05, 0.000000000000000e+00, -1.146871601360771e-05, -4.227852375196987e-03, 0.000000000000000e+00, -4.065971558935857e-03, -4.296694245409752e-03, 0.000000000000000e+00, -4.092862678381566e-03, -5.170027435986307e-03, 0.000000000000000e+00, -5.405485574209435e-03, -5.292137369301548e-03, 0.000000000000000e+00, -5.256822583684852e-03, -3.893661803384546e-03, 0.000000000000000e+00, -5.981302545910764e-03, -3.893661803384546e-03, 0.000000000000000e+00, -5.981302545910764e-03, -8.637663808052876e-01, 0.000000000000000e+00, -8.170342655691478e-01, -8.305886175152268e-01, 0.000000000000000e+00, -7.797464956936901e-01, -7.733367193688530e-04, 0.000000000000000e+00, -4.354689792278746e-04, -1.919342534086117e+00, 0.000000000000000e+00, -1.865004968199687e+00, -9.110924379372353e-01, 0.000000000000000e+00, -3.265593182657817e+00, -9.110924379372348e-01, 0.000000000000000e+00, -3.265593182657817e+00, -1.601037920360069e+04, 0.000000000000000e+00, -1.341200765717665e+04, -1.420780016886290e+04, 0.000000000000000e+00, -1.164645171865725e+04, -9.143221848088176e+01, 0.000000000000000e+00, -7.887298630775531e+01, -6.750390051958217e+04, 0.000000000000000e+00, -7.030843943599411e+04, -2.221387440638023e+04, 0.000000000000000e+00, -1.460028407928506e+05, -2.221387440638026e+04, 0.000000000000000e+00, -1.460028407928506e+05, -2.860289681545172e-06, 0.000000000000000e+00, -2.862814111048490e-06, -2.861683956988316e-06, 0.000000000000000e+00, -2.864158282134986e-06, -2.860361743241000e-06, 0.000000000000000e+00, -2.862853804033550e-06, -2.861553896839374e-06, 0.000000000000000e+00, -2.864078363796567e-06, -2.861009806498263e-06, 0.000000000000000e+00, -2.863488940557332e-06, -2.861009806498263e-06, 0.000000000000000e+00, -2.863488940557332e-06, -9.415672333669464e-05, 0.000000000000000e+00, -9.420266124394078e-05, -9.224323201491758e-05, 0.000000000000000e+00, -9.234394004043206e-05, -9.484593495216157e-05, 0.000000000000000e+00, -9.478510430672345e-05, -9.317843889504801e-05, 0.000000000000000e+00, -9.308617365095010e-05, -9.259801739796206e-05, 0.000000000000000e+00, -9.305349211750059e-05, -9.259801739796206e-05, 0.000000000000000e+00, -9.305349211750059e-05, -9.171318372413128e-03, 0.000000000000000e+00, -9.329047590306195e-03, -3.849490264378566e-03, 0.000000000000000e+00, -3.975648140026634e-03, -1.017985108730698e-02, 0.000000000000000e+00, -1.030214653006714e-02, 2.737032095820168e-03, 0.000000000000000e+00, -1.090852361326972e-03, -8.358258181831307e-03, 0.000000000000000e+00, -8.921925999802705e-03, -8.358258181831316e-03, 0.000000000000000e+00, -8.921925999802712e-03, -5.384516315722517e+00, 0.000000000000000e+00, -5.300642651197411e+00, -7.240120311797287e-01, 0.000000000000000e+00, -7.155104456867549e-01, -7.291770103592683e+00, 0.000000000000000e+00, -6.391082126882569e+00, -9.955698827380622e-05, 0.000000000000000e+00, -9.969696421795635e-05, -3.721686642311841e+00, 0.000000000000000e+00, -3.589082496385578e+00, -3.721686642311841e+00, 0.000000000000000e+00, -3.589082496385578e+00, -1.699384353553968e+05, 0.000000000000000e+00, -1.460776074690521e+05, -7.954465354441626e+04, 0.000000000000000e+00, -7.449325217614365e+04, -2.990576518131964e+05, 0.000000000000000e+00, -2.612640140505439e+05, -2.316561685975884e+01, 0.000000000000000e+00, -2.253880664673324e+01, -2.313807141268642e+05, 0.000000000000000e+00, -9.240309647166975e+04, -2.313807141268639e+05, 0.000000000000000e+00, -9.240309647166972e+04, -9.147996252474132e-03, 0.000000000000000e+00, -9.101102722788135e-03, -1.000526864084035e-02, 0.000000000000000e+00, -9.922260630533341e-03, -9.705589661860551e-03, 0.000000000000000e+00, -9.632280497819366e-03, -9.449565917516186e-03, 0.000000000000000e+00, -9.388674576841071e-03, -9.577130951318605e-03, 0.000000000000000e+00, -9.510173283446161e-03, -9.577130951318605e-03, 0.000000000000000e+00, -9.510173283446161e-03, -8.349851328027756e-03, 0.000000000000000e+00, -8.409627265378392e-03, -2.084686518726445e-02, 0.000000000000000e+00, -2.062492674030324e-02, -1.769468998532125e-02, 0.000000000000000e+00, -1.749430591784293e-02, -1.429209194634700e-02, 0.000000000000000e+00, -1.416037794212383e-02, -1.601625414989937e-02, 0.000000000000000e+00, -1.588212778467926e-02, -1.601625414989937e-02, 0.000000000000000e+00, -1.588212778467925e-02, -2.723674882768286e-03, 0.000000000000000e+00, -2.930229565125494e-03, -3.340294947920797e-01, 0.000000000000000e+00, -3.300902162534503e-01, -1.845937127277749e-01, 0.000000000000000e+00, -1.815792738264682e-01, -6.449214938444370e-02, 0.000000000000000e+00, -6.336394427112063e-02, -1.146209040272557e-01, 0.000000000000000e+00, -1.149486324571536e-01, -1.146209040272557e-01, 0.000000000000000e+00, -1.149486324571537e-01, -2.635736826565553e-02, 0.000000000000000e+00, -2.612666578335615e-02, -9.400460675893872e+01, 0.000000000000000e+00, -9.228588119604363e+01, -4.080859741992320e+01, 0.000000000000000e+00, -3.761623291003416e+01, -6.375023503871197e-02, 0.000000000000000e+00, -6.951747062360580e-02, -1.255820485376625e+01, 0.000000000000000e+00, -1.169310619095448e+01, -1.255820485376625e+01, 0.000000000000000e+00, -1.169310619095449e+01, -5.371640424834835e+03, 0.000000000000000e+00, -4.879991017652494e+03, -5.023949359869542e+06, 0.000000000000000e+00, -5.845991809722124e+06, -5.637337198392748e+05, 0.000000000000000e+00, -4.801456932550751e+05, -1.480097976479974e+01, 0.000000000000000e+00, -1.414076090221022e+01, -3.312580788360533e+05, 0.000000000000000e+00, -1.199619400506041e+05, -3.312580788360541e+05, 0.000000000000000e+00, -1.199619400506044e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_b88b95_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b88b95", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_b88b95_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b88b95", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-1.453789028236753e-05, -1.453795539533437e-05, -1.453819599291548e-05, -1.453817725604425e-05, -1.453863452856280e-05, -1.453895670951458e-05, -1.453519611389047e-05, -1.453456982004614e-05, -1.453809985687147e-05, -1.453592645007412e-05, -1.453809985687147e-05, -1.453592645007412e-05, -2.773989440474821e-04, -2.777448485755736e-04, -2.774399024960354e-04, -2.778084148197651e-04, -2.786639438061573e-04, -2.789831013985793e-04, -2.764684431128833e-04, -2.768336125599870e-04, -2.773459159014582e-04, -2.778996350686698e-04, -2.773459159014582e-04, -2.778996350686698e-04, -2.491933376166078e-03, -2.642184406024723e-03, -2.443485038052027e-03, -2.625098956656117e-03, -1.892260784642392e-03, -1.718606872764310e-03, -1.784285750730145e-03, -1.842295697882058e-03, -2.877173658706024e-03, -1.074779912048118e-03, -2.877173658706024e-03, -1.074779912048118e-03, -2.393230896972181e-03, -2.713708004130124e-03, -2.615544232205190e-03, -3.002092192391819e-03, -2.055021085824489e-03, -2.505285064109242e-03, -9.520634906531265e-04, -9.656735293285018e-04, -2.354546618229709e-03, -4.301318033992195e-04, -2.354546618229706e-03, -4.301318033992202e-04, -2.997087148185276e-07, -3.518866688465333e-07, -3.601478287499169e-07, -4.346246878873608e-07, -2.296147427444176e-05, -2.686840224581216e-05, -6.513783696351832e-08, -6.041348501259918e-08, -2.169816319607273e-07, -1.113827375369721e-07, -2.169816319607280e-07, -1.113827375369724e-07, -2.269464053455427e-04, -2.269942041936558e-04, -2.280519143712854e-04, -2.280628082763925e-04, -2.270020733267227e-04, -2.270268297199039e-04, -2.279506377716149e-04, -2.279975920571464e-04, -2.275163759208161e-04, -2.275310559213020e-04, -2.275163759208161e-04, -2.275310559213020e-04, -2.646821730286466e-04, -2.646819876534644e-04, -2.699096506917164e-04, -2.698297537548436e-04, -2.456280887323677e-04, -2.511417099558468e-04, -2.500045673272401e-04, -2.554573505090169e-04, -2.824632236149086e-04, -2.694761276964254e-04, -2.824632236149086e-04, -2.694761276964254e-04, -6.347379240705518e-03, -6.390511160701925e-03, -1.184698105674906e-02, -1.195811997073223e-02, -6.321235538715860e-03, -6.490396976230268e-03, -1.327119950005738e-02, -1.243099175812918e-02, -6.676694104181627e-03, -6.989931597318513e-03, -6.676694104181627e-03, -6.989931597318513e-03, -2.781922350892201e-04, -2.928988132952843e-04, -1.076133359808841e-03, -1.086732839708232e-03, -2.304560833431565e-04, -2.641079765903469e-04, -1.927400997080872e-03, -1.929892281417028e-03, -4.987911163701257e-04, -7.898358953142875e-04, -4.987911163701257e-04, -7.898358953142875e-04, -4.030688190349819e-08, -3.894187119486963e-08, -7.056855839852068e-08, -6.799578383656435e-08, -1.755342139979134e-07, -2.301047862615557e-07, -1.134151689771698e-04, -1.109104482960024e-04, -9.269830704810115e-08, -2.249914142493880e-07, -9.269830704810089e-08, -2.249914142493877e-07, -1.717652751912049e-02, -1.713619248568862e-02, -1.386428745944997e-02, -1.386672723675737e-02, -1.491063312506914e-02, -1.490782769044810e-02, -1.587685030660696e-02, -1.584744786659725e-02, -1.538304991477683e-02, -1.536705133539403e-02, -1.538304991477683e-02, -1.536705133539403e-02, -1.929224223085034e-02, -1.920034085401544e-02, -4.370113379078337e-03, -4.409813643531602e-03, -6.427959367186009e-03, -6.497529364432018e-03, -9.824749734082082e-03, -9.829088996211842e-03, -7.943079478903152e-03, -7.949467297785930e-03, -7.943079478903152e-03, -7.949467297785928e-03, -1.059149578002199e-02, -1.072681605893395e-02, -1.540683307611430e-03, -1.564565636171346e-03, -2.429583102321081e-03, -2.531861492405219e-03, -6.287727115763946e-03, -6.323005669183542e-03, -4.006584648178532e-03, -4.059123384598535e-03, -4.006584648178535e-03, -4.059123384598537e-03, -4.805309699537307e-03, -4.900319655551454e-03, -1.988346384035491e-05, -2.028650905216560e-05, -4.476415823168420e-05, -5.025037174718308e-05, -9.841532611841538e-03, -1.007052461472450e-02, -2.184009360754973e-04, -3.122002109861319e-04, -2.184009360754975e-04, -3.122002109861319e-04, -6.466774595219028e-07, -7.290699924745556e-07, -5.755693045808994e-09, -1.026365461509461e-08, -2.775916785357306e-08, -3.528415037704372e-08, -2.162876966262462e-04, -2.221903081659497e-04, -1.636920504245606e-07, -1.823002569306333e-07, -1.636920504245608e-07, -1.823002569306335e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
