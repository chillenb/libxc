
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_b88b95_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b88b95", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.439568732483355e+01, -1.439572594847922e+01, -1.439591046422866e+01, -1.813722163673842e+73, -1.612533310774113e+73, -5.729860981802908e+99, -5.590379199560354e+43, -1.793161855674478e+116, -5.392124683082375e+106, -1.219197665191599e+109, -3.828872299727240e+99, -1.584143701815572e+85, -5.828456367451191e-01, -5.992019076561351e+77, -4.501705255953169e+87, -2.200668971195735e+106, -5.839887231408710e-01, -8.414240336733704e+120, -7.846415391300276e+136, -2.601511742873345e+79, -6.051573086305638e+115, -3.119404129302869e+120, -3.589981629269526e+113, -8.307611683406148e+98, -6.966801837375831e+126, -1.477225866459076e+102, -9.926531735932958e+126, -1.472226739868696e+130, -1.124730908252027e+129, -1.116501637849133e+129, -4.697824432194934e+120, -1.435889598932040e+118, -4.031835712864820e+120, -1.204339854382255e+106, -1.258636274570279e+79, -1.852630852298038e+110, -6.185095340127469e+121, -2.277191640300069e+80, -2.192511891064705e+116, -9.374389261487169e+85, -2.616411793175650e+119, -1.843194429873041e+112, -3.079613444471655e+87, -9.448600613598856e+120, -3.100608827917662e+118, -2.294209790407022e+104, -7.072724996387741e+125, -4.873994420506021e+106, -1.325381310999987e+128, -1.924630512996550e+84, -2.232799314253975e+116, -2.355235438391560e+119, -1.048226064004458e+128, -3.255161568131118e+106, -2.775963953205419e+94, -9.920407896828678e+117, -3.810246684002241e+125, -1.889016926714178e+83, -4.657082657805064e+108, -3.013632885899982e+117, -4.270796243251750e+118, -3.199654448607557e+123, -4.299857901343360e-01, -2.504915947639624e+87, -4.299189916471102e-01, -7.695558577661503e+101, -1.152136316900935e+109, -2.141457717200528e+109, -4.684665615692779e+87, -4.008527708070186e+111, -1.115927741328954e+109, -1.098026699455229e+106, -2.921658146806322e+118, -9.369398745376560e+111, -5.134663383817816e+119, -2.403297747083644e+95, -1.574527577515296e+88, -1.553503727898594e+112, -2.442024967716768e+85, -1.456508876864733e+00, -5.113061931452441e+90, -1.576639268011005e+124, -1.395914232042053e+126, -4.206856233384580e+123, -8.611108209951032e+00, -1.933605765779181e+126, -2.266133437592331e+01, -4.761043882047535e-01, -3.323329320399234e+125, -6.747620936152632e+103]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_b88b95_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b88b95", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.909380536689453e+01, -1.909378720315388e+01, -1.909386760428167e+01, -1.909383266603017e+01, -1.909407974322401e+01, -1.909413150860892e+01, 1.272913828386856e+57, -2.775015833300485e+71, -2.288344344354276e+57, -2.468888790738924e+71, -3.252093641958089e+97, -3.252216579174455e+97, -1.384488630654125e+42, -2.449540375434204e+28, -1.426271543667795e+107, -1.735294885149056e+114, 7.649314135534678e+90, -5.670730763486037e+104, -1.255315475421539e+107, -1.978599469948507e+93, 1.937798124210914e+82, -4.305214651262547e+97, -5.065371073650326e+67, -2.072063959434371e+83, -5.800413531953273e-01, -5.833125629031384e-01, -3.363823197081563e+62, -8.427639368784128e+75, -2.584226140617173e+85, -3.126250383122855e+85, -2.314892464911585e+104, -1.431979306442618e+90, -5.841948761282556e-01, -5.398159673753405e-01, -2.541905338157480e+105, -8.630933192393013e+118, 7.302874439961658e+119, -6.067698313100305e+134, 4.808167266563891e+63, -3.370006292134239e+77, -6.150875110989559e+113, -2.820940155071167e+99, 5.959678319990940e+104, -2.824041277093651e+118, -1.086743290359942e+111, -6.107500240955796e+111, -5.374287739187061e+96, 1.865462258800133e+81, -6.666244753505918e+124, -7.336043659874380e+112, -2.810884347688887e+86, -1.433249133118011e+100, -2.562462568310416e+111, -8.027067397921421e+124, -1.034315568425719e+128, -1.940357841483153e+127, -5.708149223139922e+126, -8.495133351374413e+111, -1.154049581920454e+114, -3.052733506258097e+127, -6.887669781122374e+117, -3.708945698958999e+118, -6.625056053027832e+102, -1.370173209890867e+116, 1.128106227362507e+105, -3.770981575489091e+118, -1.268931223486462e+104, -7.010423841190664e+101, -6.304035160229250e+63, -1.774279148673329e+77, -1.889804946340930e+108, 2.173402380561798e+93, -1.418086373926501e+107, -5.708760098886264e+119, -3.142867571295013e+78, -2.352626880481888e+74, -2.500157710520796e+100, -2.110244800369531e+114, -8.066622105417173e+83, -4.109860646879431e+83, -2.445488186069094e+117, -4.834305735778885e+103, -1.829466859980461e+110, -8.282859978979482e+95, -3.879650586006749e+85, 3.306162817382998e+70, 1.372938902836387e+105, -8.737340763615633e+118, -3.092318985854878e+116, -1.890509940655203e+102, -9.971321104585922e+99, -2.325578321657744e+102, -5.851453234453732e+123, -5.493412381039683e+110, -1.234141757283467e+102, -5.498207940429058e+104, 1.562467119646345e+109, -1.136493591262333e+126, -9.394062644969703e+68, -2.489347698309051e+82, -2.310318514294807e+114, -2.273614283111159e+100, -9.196433900406559e+107, -2.217907923811197e+117, -9.985159479811773e+125, -4.403996157459555e+118, -8.085685468104844e+90, -3.116282719575112e+104, -5.851615456578345e+78, -3.013321540952051e+92, -2.939140284405245e+102, -9.029673726414379e+115, -1.259820958507189e+110, -3.075818306964589e+123, -2.498883895256344e+81, -7.327175823847718e+67, -8.385212477344038e+106, -6.617849572739049e+92, -8.965455036000767e+101, -1.954614382595351e+115, -5.152930758006638e+102, -4.003534057791466e+116, -2.918092375081963e+121, 1.324336192397483e+107, -5.569708196258019e-01, -5.585184159699067e-01, 2.461200261040677e+71, -3.153147029365929e+85, -5.576417208630478e-01, -5.591775548644493e-01, -1.643063485899003e+86, -8.357284748984951e+99, -4.083557463508600e+93, -1.172495781096544e+107, -2.197716376383040e+107, -4.420575320786090e+93, -5.948800651370272e+85, -3.005766290079701e+72, -1.526099725846348e+96, -3.987297806809816e+109, -7.073107289301103e+93, -1.134728849762493e+107, -1.159862322695640e+104, 6.428611560577293e+88, -2.766266047344139e+116, -1.165846818732985e+102, -9.388253419640288e+109, 1.282768389503998e+96, -3.442062858446626e+104, -4.714910456752553e+117, -1.460921723165085e+79, -2.768224766751518e+93, -1.378759210189524e+76, -1.970898551441872e+86, -1.541344349778240e+110, -7.838133342851198e+96, -3.190112377287168e+83, -1.883584321689683e+76, 5.995591935803171e-01, 6.004919594533091e-01, -6.492086756066861e+88, -3.523049825546993e+78, -5.073901615209567e+108, -1.388087884208481e+122, -1.339960498841948e+124, 1.386097787150884e+109, -9.624743104099573e+107, -3.500201200578726e+121, 3.557321788145115e+00, 3.438177826920394e+00, -4.130885545724163e+110, -1.673735791896839e+124, 8.936684992275174e+00, 8.123771428446021e+00, 1.310571215600174e-01, 1.151995521680679e-01, -1.454373724300503e+109, -2.081161403108054e+123, -1.182412354774361e+102, 4.034652749662508e+88]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_b88b95_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b88b95", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.336594004059804e-08, 0.000000000000000e+00, -1.336617707991351e-08, -1.336579590837486e-08, 0.000000000000000e+00, -1.336607204681677e-08, -1.336529065681760e-08, 0.000000000000000e+00, -1.336536207670388e-08, -1.337910998897095e-08, 0.000000000000000e+00, 2.842587300889312e-10, -1.337804029734960e-08, 0.000000000000000e+00, 2.842640680074617e-10, 2.738404316763906e-10, 0.000000000000000e+00, 2.738724312272273e-10, 8.410548528765878e-07, 0.000000000000000e+00, -5.471835857907945e-06, 7.214654036870076e-07, 0.000000000000000e+00, 7.213779593536027e-07, 7.253433597679243e-07, 0.000000000000000e+00, 7.257303413342075e-07, 7.235912978424355e-07, 0.000000000000000e+00, 7.235286714237941e-07, 7.227188954465104e-07, 0.000000000000000e+00, 7.255537246961529e-07, -5.466353291828831e-06, 0.000000000000000e+00, 8.456435553950724e-07, 5.128776692618548e-02, 0.000000000000000e+00, 4.866982038088453e-02, 5.143737519154034e-02, 0.000000000000000e+00, 1.112964266456388e-03, 7.497715258173094e-04, 0.000000000000000e+00, 7.790384587118513e-04, 1.147301173778583e-03, 0.000000000000000e+00, 5.872337937456082e-02, 4.577034360363313e-02, 0.000000000000000e+00, 8.684442757827385e-02, 6.702282537720239e-04, 0.000000000000000e+00, 9.273392320209653e-04, 5.222627506480377e+01, 0.000000000000000e+00, 3.597666620819054e-01, 4.733954843785291e+01, 0.000000000000000e+00, 3.476280916351858e-01, 3.635181401792684e-04, 0.000000000000000e+00, 3.616552496851205e-02, 2.321890309405964e-01, 0.000000000000000e+00, 2.180660617001991e-01, 5.159480917058271e-02, 0.000000000000000e+00, 1.249652533762501e+00, 1.243611296494421e-01, 0.000000000000000e+00, 3.946295729794282e+03, 1.911135922193183e+00, 0.000000000000000e+00, 1.245401259544039e+00, 7.817828490768503e+10, 0.000000000000000e+00, 5.113590899748977e+00, 2.409345462064536e+06, 0.000000000000000e+00, 1.747430115585068e+00, 1.129910468563809e+00, 0.000000000000000e+00, 1.273105386435007e+00, 3.140398219541309e-01, 0.000000000000000e+00, 1.256982437732088e+01, 3.140398219541310e-01, 0.000000000000000e+00, 1.256982437732088e+01, 2.900624746207780e-07, 0.000000000000000e+00, 2.904686458027572e-07, 2.909615107563048e-07, 0.000000000000000e+00, 2.913438258008717e-07, 2.901255291762672e-07, 0.000000000000000e+00, 2.905114578968556e-07, 2.909000345992406e-07, 0.000000000000000e+00, 2.913018483981907e-07, -3.218241839806720e-06, 0.000000000000000e+00, 2.975350633462576e-07, 2.971276761182413e-07, 0.000000000000000e+00, -3.221095440784832e-06, 9.047108390213217e-06, 0.000000000000000e+00, 9.072571316949579e-06, 9.079680141738972e-06, 0.000000000000000e+00, 9.111882998470369e-06, 9.025961549721011e-06, 0.000000000000000e+00, 8.999774063246856e-06, 9.066037471909210e-06, 0.000000000000000e+00, 9.038285715633201e-06, 1.090580358250905e-05, 0.000000000000000e+00, 5.823794654677303e-05, 9.032265403936581e-06, 0.000000000000000e+00, 9.179442313572790e-06, 4.867180014308885e-03, 0.000000000000000e+00, 1.926778114636516e-02, 4.730563857547297e-03, 0.000000000000000e+00, 4.818368282685348e-03, 5.195471472061182e-03, 0.000000000000000e+00, 4.641552572891338e-03, 5.832979071010968e-03, 0.000000000000000e+00, 5.206040600694475e-03, 4.402019853287130e-03, 0.000000000000000e+00, 1.999777880281769e-02, 4.097776709959417e-03, 0.000000000000000e+00, 5.124124150470932e-03, 2.833809652446429e-01, 0.000000000000000e+00, 2.648641608035849e-01, 7.179034882177800e+01, 0.000000000000000e+00, 2.384059747009820e-01, 3.603034734156027e-01, 0.000000000000000e+00, 2.505887403010987e-01, 2.027582099425876e-05, 0.000000000000000e+00, 2.034079800737459e-05, 4.300809187855033e-01, 0.000000000000000e+00, 3.044229482644202e-01, 4.300809187855035e-01, 0.000000000000000e+00, 3.044229482644205e-01, 1.982095023283960e+13, 0.000000000000000e+00, 2.739363130861602e+00, 1.131009188998493e+00, 0.000000000000000e+00, 1.001894954564393e+00, 1.059207522599252e+01, 0.000000000000000e+00, 7.179608270521846e+00, 1.534488432998202e+00, 0.000000000000000e+00, 8.122145007518369e+04, 6.015774431511087e+00, 0.000000000000000e+00, 1.064133898263959e+00, 6.015774431511082e+00, 0.000000000000000e+00, 1.064133898263957e+00, 1.243643070353796e-02, 0.000000000000000e+00, 1.224143511609067e-02, 1.078118393213537e-02, 0.000000000000000e+00, 1.062003706878543e-02, -5.306085669190108e-03, 0.000000000000000e+00, -5.434306750639568e-03, -6.279623439262982e-03, 0.000000000000000e+00, 1.168419498769134e-02, -5.754796979100321e-03, 0.000000000000000e+00, -5.860616199863701e-03, -5.843270132210650e-03, 0.000000000000000e+00, 1.145390409499930e-02, 1.375456407029652e-02, 0.000000000000000e+00, 1.358836796724587e-02, 9.736978790454020e-03, 0.000000000000000e+00, 6.432420133270558e-02, 1.009321696889946e-02, 0.000000000000000e+00, 2.942438183597506e-02, 1.068039332176266e-02, 0.000000000000000e+00, 1.051205819814943e-02, 9.970499632050574e-03, 0.000000000000000e+00, 9.819123632754053e-03, 1.046939415959098e-02, 0.000000000000000e+00, 1.803678270928993e-02, 3.512108324522389e-03, 0.000000000000000e+00, 3.131080195937982e-03, 7.660291708988651e-02, 0.000000000000000e+00, 7.383064992011033e-02, 4.899298665081397e+00, 0.000000000000000e+00, 7.291303572432896e-02, 6.569853180777991e-01, 0.000000000000000e+00, 3.319372217816097e-02, 3.961043122389546e-02, 0.000000000000000e+00, 3.985302739391646e-02, 5.207431074142891e-02, 0.000000000000000e+00, 1.685158598540412e+00, 1.050805768395638e-02, 0.000000000000000e+00, 1.032876659621711e-02, 2.648467834167650e+06, 0.000000000000000e+00, 2.562002097580770e+06, 4.939644585775007e-01, 0.000000000000000e+00, 3.917699327916829e-01, 4.251314976878282e-02, 0.000000000000000e+00, 4.311515006638407e-02, 6.563590838549053e-01, 0.000000000000000e+00, 4.593863183022613e-01, 6.563590838549053e-01, 0.000000000000000e+00, 4.593863183022613e-01, 1.659243703257444e+10, 0.000000000000000e+00, 1.339120472967548e+10, 1.422099214566522e+00, 0.000000000000000e+00, 1.398930753374009e+00, 8.504050651401598e+13, 0.000000000000000e+00, 5.664011201697120e+13, 2.436552424529585e+04, 0.000000000000000e+00, 2.072460119254364e+04, 1.116088107910786e+01, 0.000000000000000e+00, 1.729358674818302e+00, 2.449295636189682e+01, 0.000000000000000e+00, 2.264004080990521e+12]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_b88b95_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b88b95", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-3.917471522261091e-05, -3.917480666326107e-05, -3.917448580994359e-05, -3.917464000171363e-05, -3.917370661284050e-05, -3.917353614629186e-05, -3.917629863541938e-05, -1.378716895281572e-05, -3.917458068216103e-05, -1.378888624786437e-05, -1.378769232225893e-05, -1.378888624786437e-05, -1.086307176581860e-04, -9.886367289552889e-04, -1.086762179304513e-04, -1.086254899047673e-04, -1.095650411891742e-04, -1.097228200789897e-04, -1.092250898329168e-04, -1.092236389627861e-04, -1.085596230900190e-04, -1.100246529098191e-04, -9.889006949787293e-04, -1.100246529098191e-04, -1.598021136832418e-02, -1.587732578179836e-02, -1.602089576144582e-02, -5.816541241886695e-04, -4.710803402561351e-04, -4.585272505900273e-04, -5.059211528733358e-04, -1.642148573775559e-02, -1.568044317361094e-02, -1.744678139345269e-02, -5.953671632135174e-04, -4.125746990187820e-04, -1.383354092125630e-01, -2.545594631964812e-03, -1.358014431510194e-01, -2.761031995452824e-03, -1.511044147610398e-04, -1.205958836055364e-02, -5.537625639604731e-04, -7.010054770280826e-04, -1.911908828015881e-03, -1.836805468040011e-04, -1.911908828015880e-03, -3.259754731379892e-01, -2.925053862903257e-07, -3.482503482707788e-07, -1.204977028068718e+01, -4.248691717209683e-07, -1.369328487948551e+00, -2.183566043800917e-05, -5.082405532873740e-08, -4.895047635855906e-08, -2.015180548687125e-07, -6.979620591902826e-08, -2.015180548687125e-07, -6.979620591902835e-08, -2.259855269312626e-04, -2.260881212058678e-04, -2.270958956349527e-04, -2.271617442885251e-04, -2.260634434835929e-04, -2.261367632496152e-04, -2.270154474710338e-04, -2.271113465430546e-04, -4.879961484479221e-04, -2.266247031240197e-04, -2.265412913612535e-04, -4.882054926856168e-04, -2.184886358410226e-04, -2.198407711106584e-04, -2.290425707302488e-04, -2.301086062234988e-04, -2.090918765935176e-04, -2.130296248907240e-04, -2.181735888507632e-04, -2.223153613090707e-04, -2.317988057317349e-04, -2.641639124623456e-03, -2.317988057317349e-04, -2.263597005645318e-04, -3.929170235622424e-03, -1.984749290175147e-02, -6.303138297431693e-03, -6.504666655764184e-03, -2.674119186441406e-03, -3.235583825171795e-03, -4.075837800125147e-03, -4.531443570850382e-03, -4.490464816718589e-03, -2.014640642022206e-02, -4.490464816718591e-03, -4.176864456846772e-03, -2.006900302560310e-04, -2.048784310581295e-04, -1.344952233432972e-01, -9.423807568459265e-04, -1.556672292865342e-04, -1.896343766166793e-04, -6.620210932860224e-04, -6.630589334612137e-04, -3.860796718241865e-04, -6.415843739916735e-04, -3.860796718241866e-04, -6.415843739916738e-04, -3.228303714073314e+01, -1.673609233594659e-08, -4.320386791748026e-08, -3.974284072041291e-08, -1.358766007760613e-07, -1.757549224413043e-07, -7.429711701765857e-05, -6.758971769825938e-01, -2.718102425525728e-08, -2.133696627854412e-07, -2.718102425525730e-08, -2.133696627854409e-07, -1.552306914455465e-02, -1.552582117956704e-02, -1.268299878892380e-02, -1.271124538750983e-02, -1.983160539830672e-02, -1.970666739122217e-02, -1.977746314944726e-02, -1.442137908417866e-02, -1.980452801724910e-02, -1.968033565964845e-02, -1.980452801724910e-02, -1.400805702816674e-02, -1.573383149051152e-02, -1.576560080490087e-02, -4.103405104669137e-03, -2.619498423429564e-02, -5.855996421654132e-03, -2.431986097731804e-02, -8.622152563779987e-03, -8.630992571357915e-03, -7.055802023881759e-03, -7.089637270769390e-03, -7.055802023881757e-03, -2.350005329694931e-02, -4.894091693419611e-03, -1.600564578451296e-02, -1.408010276920654e-03, -1.425686809925916e-03, -7.129940082659059e-02, -2.075504996960211e-03, -4.596769162591872e-02, -3.651606863563957e-03, -2.954446459371496e-03, -2.988292442326723e-03, -2.954446459371497e-03, -5.701619287669108e-02, -3.420976223119365e-03, -3.590918706190889e-03, -1.404516281424835e+00, -1.391711463467844e+00, -3.381789829807270e-05, -3.836836569884722e-05, -5.271356587168376e-03, -6.540211187909225e-03, -1.641862007921526e-04, -2.374257902366361e-04, -1.641862007921527e-04, -2.374257902366361e-04, -8.271235436698682e+00, -7.918925502147195e+00, -1.133943442251980e-09, -1.136480995602016e-09, -4.818582270800353e+01, -4.495849352159821e+01, -5.342280621683502e-01, -5.221142930065400e-01, -6.008281617989573e-08, -1.726523620548169e-07, -6.008281617989576e-08, -2.538022450106644e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
