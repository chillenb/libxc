
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_tpss0_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_tpss0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.509253488105282e+01, -1.509258029286342e+01, -1.509279357185703e+01, -1.509211794787012e+01, -1.509247033617542e+01, -1.509247033617542e+01, -2.536994039758075e+00, -2.536991022165807e+00, -2.536956329226100e+00, -2.537192334257668e+00, -2.536911926311537e+00, -2.803495586766875e+00, -5.419728567504222e-01, -5.779199125485037e-01, -5.713174894339813e-01, -5.718252733534943e-01, -5.717574073474337e-01, -5.717574073474337e-01, -1.625952818048940e-01, -1.641118990951468e-01, -6.292423267916167e-01, -1.392298957861897e-01, -1.481547196560286e-01, -1.481547196560286e-01, -7.565630977822462e-03, -7.962506756250758e-03, -4.333366682506418e-02, -4.371286378482762e-03, -5.492032209360235e-03, -5.492032209360235e-03, -4.160047660449758e+00, -4.160912846958755e+00, -4.160091599439403e+00, -3.772312109153945e+00, -4.160484002186031e+00, -4.160484002186031e+00, -1.464781624927663e+00, -1.473849100854552e+00, -1.458249028600885e+00, -1.466214550044861e+00, -1.472953732843679e+00, -1.606998466545651e+00, -4.949602797638724e-01, -5.409119270907317e-01, -4.577296465857751e-01, -4.772144426270080e-01, -5.033936570546211e-01, -4.794079188054196e-01, -9.267203790511197e-02, -1.726767604057445e-01, -8.658493167926343e-02, -1.553526597687861e+00, -1.172501937369131e-01, -1.172501937369131e-01, -3.808462647569013e-03, -4.273394541086315e-03, -3.267304852974933e-03, -6.120615941340377e-02, -4.407286445856830e-03, -3.936192443128505e-03, -5.080054944791381e-01, -5.042868373514241e-01, -4.771638569196754e-01, -5.067329591455478e-01, -5.061956107205774e-01, -5.061956107205774e-01, -4.949546526995636e-01, -4.180057509234145e-01, -4.395499982726021e-01, -4.619342104131856e-01, -4.504330986078781e-01, -4.289647406628678e-01, -5.639314853838251e-01, -1.988114686836050e-01, -2.362949338537642e-01, -2.953954039218958e-01, -2.643004544752529e-01, -2.643004544752528e-01, -3.739104410734838e-01, -4.152119339800955e-02, -5.606136554228804e-02, -2.904695669043746e-01, -7.560844255466351e-02, -8.462993071817139e-02, -1.067498335896526e-02, -1.142470127968497e-03, -2.397903927812476e-03, -7.989966685617389e-02, -3.642190440508275e-03, -3.642190440508278e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_tpss0_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_tpss0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.027731455928170e+01, -2.027737467726048e+01, -2.027765767579426e+01, -2.027676316346968e+01, -2.027722963870698e+01, -2.027722963870698e+01, -3.302297660942930e+00, -3.302330517155229e+00, -3.303259662704131e+00, -3.303173603801810e+00, -3.302848996585354e+00, -3.422288550207996e+00, -6.928150886846711e-01, -6.155819107447917e-01, -5.854378841187176e-01, -5.946263067020877e-01, -5.917197258836123e-01, -5.917197258836123e-01, -1.682572970207714e-01, -1.720058336156065e-01, -8.134355640698196e-01, -1.388706976289282e-01, -1.437825335927179e-01, -1.437825335927179e-01, -1.007525720341212e-02, -1.060209913788960e-02, -5.615807833110764e-02, -5.826355834141852e-03, -7.317970826371222e-03, -7.317970826371222e-03, -5.180329100496198e+00, -5.180188280249018e+00, -5.180313918537886e+00, -5.039113046038374e+00, -5.180262855386890e+00, -5.180262855386890e+00, -1.886841383490904e+00, -1.900821703660964e+00, -1.876862911537290e+00, -1.888937397845712e+00, -1.899524793949838e+00, -1.925028649212002e+00, -6.500168452289740e-01, -7.015546153135325e-01, -5.936785685516348e-01, -6.274494523241000e-01, -6.611261183910863e-01, -6.292809005950359e-01, -1.195438664111884e-01, -1.673788846010157e-01, -1.117127814456477e-01, -1.989305468965020e+00, -1.220415391450756e-01, -1.220415391450756e-01, -5.010082160177976e-03, -5.696079555507961e-03, -4.354145593675705e-03, -7.906449809853791e-02, -5.793011314352082e-03, -5.245807260067340e-03, -6.376614537986594e-01, -6.385087675312403e-01, -6.250931514175866e-01, -6.378851361318991e-01, -6.380143929323199e-01, -6.380143929323199e-01, -6.222966115927564e-01, -5.486779052791290e-01, -5.790127793062310e-01, -6.002915087429475e-01, -5.904707526103351e-01, -5.640989300117721e-01, -7.348631135147311e-01, -2.545254683005679e-01, -2.572211063000017e-01, -3.758228510609530e-01, -3.169567905270018e-01, -3.169567905270018e-01, -4.808145415255760e-01, -5.392156308499788e-02, -7.142206095715667e-02, -3.818206836369358e-01, -9.756955505723455e-02, -9.842430281043472e-02, -1.420952497982465e-02, -1.523255852755283e-03, -3.196615970946224e-03, -9.386478989279283e-02, -4.853937463659194e-03, -4.853937463659187e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_tpss0_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_tpss0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [3.019212260099352e-09, 3.019093075254566e-09, 3.018587214798089e-09, 3.020354179675795e-09, 3.019425039500275e-09, 3.019425039500275e-09, 7.996860771467819e-06, 7.995946474172888e-06, 7.971227909613408e-06, 7.978338583938082e-06, 7.980893695280663e-06, -3.408449588517847e-06, 7.036984088685628e-03, -2.123121397838028e-03, -2.251004048035889e-03, -2.294089125173763e-03, -2.310206330101493e-03, -2.310206330101493e-03, -3.652401079234296e-01, -3.473878590013025e-01, 4.061591367657542e-03, -5.168006008156880e-01, -5.084838541373506e-01, -5.084838541373504e-01, -1.795830083920077e+00, -1.870841263833140e+00, -8.670828920311198e-01, -1.319645531342625e+00, -1.835966421684615e+00, -1.835966421684615e+00, -3.999045619032906e-06, -4.040716327907472e-06, -4.001450448244775e-06, 4.894516176961030e-07, -4.019836736830470e-06, -4.019836736830470e-06, 8.594319452690587e-05, 8.237716089427562e-05, 8.867973276568478e-05, 8.543174371651223e-05, 8.266613825690496e-05, -3.019065224584677e-05, -3.270068112491658e-03, -6.293943509505514e-03, -3.438767920496718e-03, -3.768449779980910e-03, -3.514102315657767e-03, 6.900810311119091e-03, 2.336177682069955e+01, -2.633214528885222e-01, 3.194599724871652e+01, -5.973529961425998e-05, -8.019979538543276e-01, -8.019979538543279e-01, 3.152129538792047e+07, -1.166640240627695e+00, -9.427625446752716e+00, 1.569345044474713e+02, 1.698705047593752e+07, -3.618705138727377e+00, -6.643224820371935e-02, -3.081708572513843e-02, -6.482094128648688e-03, -4.790039632823512e-02, -4.279013859637971e-02, -4.279013859637971e-02, -6.346609638721047e-02, -4.862809554006902e-03, -6.126883057834619e-03, -1.164900835712144e-02, -8.048190981688307e-03, 9.450827662160877e-03, -3.954126256147965e-03, 6.568847232315211e-01, -7.541814269027868e-02, 8.687648810620335e-02, -3.787829284484162e-02, -3.787829284484148e-02, 2.717329315430750e-02, -8.889509563512715e-01, -7.654870874292377e-01, -1.593638171223338e-02, 5.941195792630782e+01, -1.103512856953651e+00, -8.577187267397786e-01, -1.429428418005665e+00, -4.096593671438034e+00, -1.218033932529478e+00, -5.157155311453666e+00, -5.157155311495083e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_tpss0_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_tpss0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.164827516353128e-04, 1.164854762112483e-04, 1.164962601229266e-04, 1.164559491546229e-04, 1.164772604513675e-04, 1.164772604513675e-04, -3.979958645043265e-04, -3.978209106091216e-04, -3.931296869732905e-04, -3.950065454537794e-04, -3.948474191217714e-04, 1.318516210556199e-03, -1.482987261884106e-03, 1.880382823429453e-03, 9.301244159735916e-04, 1.638024750604352e-03, 1.589642296985311e-03, 1.589642296985311e-03, 5.773701375591734e-03, 6.259403149982624e-03, -4.139060470310813e-04, 1.072647320985503e-03, 2.402673628917760e-03, 2.402673628917753e-03, 4.400751102833751e-09, 5.953788485102267e-09, 3.063269297006756e-07, 2.051957832517697e-10, 9.994177303242987e-10, 9.994177303242987e-10, 9.287160811361201e-03, 9.387143409079037e-03, 9.292890131731821e-03, 5.870661956649207e-04, 9.337067781377221e-03, 9.337067781377221e-03, -8.429406104173667e-04, -8.273815202103224e-04, -8.493247520077480e-04, -8.413194922741059e-04, -8.287050607160371e-04, 1.699673579542150e-03, 1.631728250194776e-02, 3.477642984377073e-02, 1.080644858314822e-02, 1.719204854266755e-02, 1.849104389010165e-02, 1.652802401258540e-03, -7.796119398443760e-05, 4.871761467992852e-04, -6.251767640050100e-05, 7.350160277471035e-03, 7.576021391088248e-04, 7.576021391088250e-04, -1.915148385618601e-09, 1.530492121265494e-10, 9.727669085471216e-10, -2.237417084320143e-05, -1.207443854578044e-08, 5.649647281051105e-10, 2.210323922790549e-01, 1.070129127126905e-01, 5.819639026663747e-03, 1.613966334674564e-01, 1.450629375440547e-01, 1.450629375440547e-01, 1.958127704188011e-01, 1.437213247581571e-02, 2.255190761099939e-02, 4.016287201705997e-02, 2.924055418120033e-02, 3.845915469332545e-03, 2.634652356975141e-02, -1.596032761576694e-03, 5.424686510586246e-03, -4.755239708894465e-03, 8.281205432378137e-03, 8.281205432378133e-03, -2.795838899916902e-03, 3.927611620815519e-06, 1.245307239730495e-05, 1.616071581774298e-02, -6.703956352020282e-05, 1.801858200911451e-04, 7.271334120231656e-09, 3.484366846485879e-13, 6.253899119999564e-11, 1.573006154095791e-04, 6.627512335450983e-10, 6.627512532070647e-10]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
