
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_tpss0_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_tpss0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.681265185066963e+01, -1.681269939788665e+01, -1.681297653281930e+01, -1.681227066796081e+01, -1.681263112790913e+01, -1.681263112790913e+01, -2.630340823599117e+00, -2.630349955051265e+00, -2.630764122131974e+00, -2.632045246674091e+00, -2.631128453872367e+00, -2.631128453872367e+00, -5.295531212841367e-01, -5.291668605566758e-01, -5.214750089384311e-01, -5.266837946280147e-01, -5.251434646846509e-01, -5.251434646846509e-01, -1.612790631929558e-01, -1.625584705034345e-01, -6.034925142421655e-01, -1.349936664779695e-01, -1.444560184817475e-01, -1.444560184817475e-01, -7.565592367156255e-03, -7.962422210452838e-03, -4.326100025493824e-02, -4.371193860828142e-03, -5.491904555234381e-03, -5.491904555234381e-03, -4.157635629413289e+00, -4.158504262156391e+00, -4.157728515739250e+00, -4.158493508535554e+00, -4.158048534520585e+00, -4.158048534520585e+00, -1.583320600594172e+00, -1.594717851311238e+00, -1.579213352044684e+00, -1.589186220803045e+00, -1.591684736697360e+00, -1.591684736697360e+00, -4.847859390114787e-01, -5.147298313893116e-01, -4.434021065606698e-01, -4.534570944326946e-01, -4.926762864689698e-01, -4.926762864689698e-01, -1.039713612075466e-01, -1.707757009709470e-01, -9.722363283791582e-02, -1.431674877934414e+00, -1.155643985588227e-01, -1.155643985588227e-01, -3.372875246294457e-03, -4.273198056468044e-03, -3.267185428196245e-03, -6.811953505955722e-02, -3.935957023362887e-03, -3.935957023362887e-03, -4.931158561965030e-01, -4.975864834341469e-01, -4.971336759322837e-01, -4.960437561191282e-01, -4.966881260302663e-01, -4.966881260302663e-01, -4.707101390597739e-01, -4.173839141785753e-01, -4.382801069020127e-01, -4.584355053096597e-01, -4.482676785816732e-01, -4.482676785816732e-01, -5.350860609149636e-01, -2.040514803849189e-01, -2.334858584634921e-01, -2.949177236677766e-01, -2.610821039758403e-01, -2.610821039758403e-01, -3.819070747421282e-01, -4.149036312394001e-02, -5.587651155690966e-02, -2.864341194191576e-01, -8.379646764070847e-02, -8.379646764070850e-02, -1.067221334082048e-02, -1.142447668647100e-03, -2.397889675157686e-03, -7.945565904078562e-02, -3.642031755050365e-03, -3.642031755050367e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_tpss0_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_tpss0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.089368635836928e+01, -2.089373370562232e+01, -2.089408744161590e+01, -2.089338601100243e+01, -2.089373309875787e+01, -2.089373309875787e+01, -3.253400132219635e+00, -3.253435766253526e+00, -3.254446852603925e+00, -3.254510679208313e+00, -3.254095499104465e+00, -3.254095499104465e+00, -6.672243942654045e-01, -6.658417632424660e-01, -6.293112427642885e-01, -6.368345390523193e-01, -6.358428270062381e-01, -6.358428270062381e-01, -1.690633142774806e-01, -1.732864716178505e-01, -7.838026499562385e-01, -1.312756955913631e-01, -1.406450328931301e-01, -1.406450328931300e-01, -1.007510323352832e-02, -1.060176200882860e-02, -5.587457795134035e-02, -5.825986079499899e-03, -7.317460971065775e-03, -7.317460971065783e-03, -5.175397290924233e+00, -5.175294673069904e+00, -5.175483480987551e+00, -5.175389459573555e+00, -5.175299146607115e+00, -5.175299146607115e+00, -1.898824501383981e+00, -1.923077549728859e+00, -1.881774780930853e+00, -1.903728778676184e+00, -1.920109242393671e+00, -1.920109242393671e+00, -6.232279294524578e-01, -6.731385709364271e-01, -5.730105341746735e-01, -6.014804639542251e-01, -6.325457516292237e-01, -6.325457516292237e-01, -1.151217899735424e-01, -1.638666615519356e-01, -1.097184706652563e-01, -1.900582602416141e+00, -1.180451658444104e-01, -1.180451658444104e-01, -4.495968491356030e-03, -5.695294266593150e-03, -4.353668547958699e-03, -8.299267851674956e-02, -5.244866747422799e-03, -5.244866747422803e-03, -6.270766848913782e-01, -6.280280762478527e-01, -6.273212056553561e-01, -6.269245679855092e-01, -6.270862517124431e-01, -6.270862517124431e-01, -6.125183414035835e-01, -5.467669866505998e-01, -5.731223516421733e-01, -5.884643173706197e-01, -5.813687387017583e-01, -5.813687387017583e-01, -7.033842980215466e-01, -2.049256063538072e-01, -2.610335705076939e-01, -3.808302922030026e-01, -3.225746854848152e-01, -3.225746854848153e-01, -4.944659652077523e-01, -5.380282560569247e-02, -7.072836169725773e-02, -3.747990352544502e-01, -9.574110298449433e-02, -9.574110298449433e-02, -1.419848432978633e-02, -1.523166027121806e-03, -3.196558989049858e-03, -9.240145316969849e-02, -4.853303514619228e-03, -4.853303514619217e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_tpss0_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_tpss0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-9.772500911747831e-09, -9.772792220274628e-09, -9.773414014758979e-09, -9.769094755204332e-09, -9.771453269548493e-09, -9.771453269548493e-09, -8.198585333883439e-06, -8.200224246285155e-06, -8.242565868816785e-06, -8.217736417866809e-06, -8.225820043979958e-06, -8.225820043979958e-06, -2.248572577581081e-03, -2.273268764951293e-03, -2.854574887031458e-03, -2.833705591221204e-03, -2.823117500845366e-03, -2.823117500845366e-03, -3.761843120025065e-01, -3.582120322020607e-01, -4.354386322259054e-04, -6.762815751201100e-01, -5.907701227037156e-01, -5.907701227037151e-01, -1.826037185814952e+00, -1.928969784993329e+00, -1.086337235729071e+00, -1.660336897607825e+00, -2.108826101543293e+00, -2.108826101542289e+00, -4.026528723276763e-06, -4.068112610764880e-06, -4.028373357063484e-06, -4.065075400106250e-06, -4.047562815088041e-06, -4.047562815088041e-06, -3.682572960525645e-05, -3.528022898807288e-05, -3.638703150580020e-05, -3.493550589686898e-05, -3.625238447267459e-05, -3.625238447267459e-05, -9.007890204213134e-03, -9.999763608638787e-03, -9.615180219955770e-03, -4.534990484497044e-03, -9.512786589380678e-03, -9.512786589380678e-03, -7.985295598572316e-01, -3.023363588001723e-01, -8.746683632312043e-01, -5.770876954255159e-05, -9.527686377078105e-01, -9.527686377078105e-01, -2.187951840252229e+00, -1.954034769364217e+00, -1.226698789873366e+01, -1.251798182485261e+00, -5.709060243275315e+00, -5.709060243264910e+00, -7.673903088033737e-02, -3.832810322453960e-02, -4.762471704018062e-02, -5.831071859367499e-02, -5.254711425907888e-02, -5.254711425907890e-02, -4.867419722832667e-02, -5.778187117639943e-03, -8.480720132194220e-03, -1.745634415556889e-02, -1.192560185032973e-02, -1.192560185032973e-02, -6.198016901429464e-03, -1.520795340808080e-01, -7.817117559983203e-02, -2.922411843760984e-02, -4.161132202925530e-02, -4.161132202925533e-02, -1.096486204972879e-02, -9.897295327804071e-01, -9.959848502451020e-01, -4.142274744277204e-02, -1.409736704851938e+00, -1.409736704851939e+00, -1.471171186922623e+00, -9.593098823824924e+00, -4.641826909333646e+00, -1.420175217600063e+00, -7.211041622338848e+00, -7.211041622391337e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_tpss0_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_tpss0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_tpss0_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_tpss0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.379329847819205e-03, 1.379387450365370e-03, 1.379617862168893e-03, 1.378765600205702e-03, 1.379215670558464e-03, 1.379215670558464e-03, 2.046149852840661e-03, 2.046889487755624e-03, 2.067588047388414e-03, 2.070044896715201e-03, 2.065389943344245e-03, 2.065389943344245e-03, 3.118569977136132e-03, 3.124964496239547e-03, 3.124884601098493e-03, 3.530709142713041e-03, 3.407428163220577e-03, 3.407428163220577e-03, 6.405891699604350e-03, 7.087951552559636e-03, 4.797892374602408e-04, 1.153422363083662e-03, 2.745878416129450e-03, 2.745878416129445e-03, 4.270613041091910e-09, 5.774793948418005e-09, 4.347331942873271e-06, 1.999323106925940e-10, 9.723277614722744e-10, 9.723277614710107e-10, 9.269141859814397e-03, 9.368591614798432e-03, 9.275205028307958e-03, 9.362929967494603e-03, 9.318591938656837e-03, 9.318591938656837e-03, 2.181993313501444e-03, 2.238058044944304e-03, 1.995767794086665e-03, 2.037304582076710e-03, 2.309143944993119e-03, 2.309143944993119e-03, 2.317211038320018e-02, 2.104771097622535e-02, 1.646584982913224e-02, 9.209026452390355e-03, 2.521248344408948e-02, 2.521248344408948e-02, 1.859514839994703e-04, 2.234817388140185e-03, 1.431320024256379e-04, 2.503132695895251e-03, 7.568664172409671e-04, 7.568664172409676e-04, 3.329851995159823e-11, 1.491375853251958e-10, 9.492508309851345e-10, 4.003558820511071e-05, 5.507632586036851e-10, 5.507632586020860e-10, 1.480138290873337e-01, 1.022317543395228e-01, 1.185255836269715e-01, 1.337378891675242e-01, 1.260163411536606e-01, 1.260163411536606e-01, 4.644225627401802e-02, 1.579683746836317e-02, 2.552467415163538e-02, 4.523267960727242e-02, 3.349249105891186e-02, 3.349249105891185e-02, 1.530430849253269e-02, 3.838479267210869e-03, 6.811248300191888e-03, 1.748607789355472e-02, 1.172206303165993e-02, 1.172206303165995e-02, 1.682155004257234e-02, 3.679318024882225e-06, 1.152478616653721e-05, 2.587500259883535e-02, 1.668279001357847e-04, 1.668279001357773e-04, 7.028581786239097e-09, 3.412186464051492e-13, 6.111186045928017e-11, 1.464317436429100e-04, 6.463745920965096e-10, 6.463746061473406e-10]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
