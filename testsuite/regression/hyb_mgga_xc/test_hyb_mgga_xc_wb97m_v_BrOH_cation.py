
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_wb97m_v_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_wb97m_v", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.845599043292105e+01, -1.845610834446223e+01, -1.845662197697287e+01, -1.909594201521933e+01, -1.909674929594105e+01, -1.973820374767968e+01, -2.806661033892675e+00, -3.047743642791888e+00, -3.047297761557477e+00, -3.047763480757045e+00, -3.047387479252775e+00, -2.806325179820710e+00, -4.340597830752087e-01, -4.726752991439782e-01, -5.107095375944689e-01, -4.634451859823985e-01, -4.235563944151184e-01, -5.126066050921457e-01, -8.038085580795856e-02, -8.218014975312218e-02, -5.723631742160518e-01, -6.474324004988466e-02, -7.281502692191018e-02, -8.208819605344955e-02, -1.156605171897061e-02, -9.454158518713030e-03, -3.190524602644166e-02, -7.304228319678543e-03, -8.622090471075414e-03, -8.622090471075414e-03, -4.747663181994554e+00, -4.750150020613215e+00, -4.747799070347770e+00, -4.749993395534689e+00, -4.651089470025636e+00, -4.651183642996942e+00, -1.678645065737581e+00, -1.687906676786715e+00, -1.672247564377158e+00, -1.680209674537022e+00, -1.545993786849434e+00, -1.686908060460171e+00, -3.921927171218962e-01, -4.352285650837708e-01, -3.732342036695587e-01, -3.819815557001818e-01, -3.995574313873944e-01, -4.081647506364134e-01, -6.078173559819501e-02, -8.092469570220302e-02, -5.918537709554580e-02, -1.608776233631394e+00, -5.526052890044435e-02, -5.526052890044429e-02, -4.477743183684099e-03, -7.164002033015408e-03, -5.670499233737368e-03, -3.813075266565232e-02, -6.605397721717152e-03, -6.605397721717152e-03, -3.743060680612705e-01, -3.834224244915049e-01, -3.746197429313236e-01, -3.759562674588927e-01, -3.736165607770511e-01, -3.772767558809137e-01, -3.622448811026467e-01, -3.160144028409612e-01, -3.295743979416543e-01, -3.462038484010692e-01, -3.398554036506181e-01, -3.362452370893317e-01, -4.583168459961351e-01, -1.132399378609126e-01, -1.447584974783472e-01, -2.061076259323623e-01, -1.751072722846031e-01, -1.732370048517511e-01, -2.963487663570868e-01, -2.057162589084505e-02, -4.733833814277300e-02, -1.934304015929378e-01, -5.155375118256218e-02, -5.155375118256222e-02, -7.033949394792492e-03, -2.206977338762666e-03, -1.934436749404504e-03, -3.712852696000295e-02, -6.188133618722682e-03, -3.773596340821623e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_wb97m_v_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_wb97m_v", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.820444283271254e+01, -2.820481018316736e+01, -2.820459361861887e+01, -2.820492059899236e+01, -2.820507666942995e+01, -2.820560681297047e+01, -2.818074875875992e+01, -2.674126290546225e+01, -2.818190850646915e+01, -2.674236263604776e+01, -2.671999982485469e+01, -2.671989491551372e+01, -3.503040720606621e+00, -3.962866271854701e+00, -3.514314761995750e+00, -3.514020341685795e+00, -3.518352602036373e+00, -3.519147756400512e+00, -3.517200602394303e+00, -3.517251924037958e+00, -3.512937819643292e+00, -3.521094153304802e+00, -3.962285030565470e+00, -3.509971786161236e+00, -6.145633569758920e-01, -6.170204223958938e-01, -6.297531842349967e-01, -5.879396257850553e-01, -5.490138289540397e-01, -5.468201490634480e-01, -5.795278778051489e-01, -6.156602708025551e-01, -6.189267916578576e-01, -5.781828436092017e-01, -5.681074386874030e-01, -5.435380506625532e-01, -1.117667159868333e-01, -1.384665351403430e-01, -1.151686152891106e-01, -1.387448080674873e-01, -7.330765261858415e-01, -7.094098256710794e-01, -5.455212808522758e-02, -4.338262033206090e-02, -5.407845771777866e-02, -7.989776532553708e-02, -8.611896835513434e-02, -5.057923183769746e-02, -1.482445235801164e-02, -1.455613313230549e-02, -8.130076305612908e-03, -1.512631383576633e-02, -2.314389372830040e-02, -4.468497627295051e-02, -9.365561738750612e-03, -9.403483054286023e-03, -1.076566705676061e-02, -1.223199256759693e-02, -1.076566705676062e-02, -1.223199256759692e-02, -6.540094676080058e+00, -6.538752617594334e+00, -6.544847909957065e+00, -6.543349887227404e+00, -6.540414733335442e+00, -6.538953088236059e+00, -6.544493830283252e+00, -6.543124332755601e+00, -6.732915606586013e+00, -6.556390626110481e+00, -6.557812223607330e+00, -6.731435785558580e+00, -1.868569020464202e+00, -1.869888910077757e+00, -1.894406455021411e+00, -1.894933196168105e+00, -1.846427533846583e+00, -1.854097051638465e+00, -1.868691050607109e+00, -1.876675528842282e+00, -1.888863996646391e+00, -2.135797396106208e+00, -1.899949166984307e+00, -1.885378889687697e+00, -5.073154252999572e-01, -5.394547497071467e-01, -6.024885237672604e-01, -6.041209415839476e-01, -4.458788113677043e-01, -4.580252766854410e-01, -4.750970573762972e-01, -4.849620691396888e-01, -5.324709672385293e-01, -5.451928690174457e-01, -5.280692306331394e-01, -5.103257764510288e-01, -4.203255181062504e-02, -4.227594169542240e-02, -9.268464711220138e-02, -1.495670339998414e-01, -4.324587661494324e-02, -4.213130952281845e-02, -2.075806956515509e+00, -2.075192394544505e+00, -4.282850530452916e-02, -2.557137804538173e-02, -4.282850530452869e-02, -2.557137804538177e-02, -3.857496534912591e-03, -7.501266878545215e-03, -9.224655622690817e-03, -9.192464769441610e-03, -7.359009602721975e-03, -7.269473115187947e-03, -4.997322391378343e-02, -2.042515292026527e-02, -8.921391134114116e-03, -8.317673995467149e-03, -8.921391134114106e-03, -8.317673995467139e-03, -5.120873621097248e-01, -5.129433909285729e-01, -5.402591030105206e-01, -5.404883330610857e-01, -5.264623144744788e-01, -5.277825597925678e-01, -5.214403320527023e-01, -5.239991290772872e-01, -5.246305655734949e-01, -5.258965745524874e-01, -5.229501095937452e-01, -5.288380798610615e-01, -4.960505542572149e-01, -4.966652358717939e-01, -3.958793173813437e-01, -4.309119450638061e-01, -4.348645584232100e-01, -4.521910528820305e-01, -4.841964942031373e-01, -4.848809022276130e-01, -4.540212804990623e-01, -4.548990177755233e-01, -4.615622556834555e-01, -4.645643783224288e-01, -6.328398566482354e-01, -6.412015033669130e-01, -1.442050229074019e-01, -1.437949051657672e-01, -2.036252907229584e-01, -2.131576454838006e-01, -2.803843563230438e-01, -2.568149185362266e-01, -2.270833288204051e-01, -2.271085868144904e-01, -2.278143211919251e-01, -2.410807899126514e-01, -3.593627884595146e-01, -3.607187362890241e-01, -2.635678190087974e-02, -2.613545092373426e-02, -4.865459703015900e-02, -4.797675643464053e-02, -2.392264508400392e-01, -2.363115348022165e-01, -3.823425474392639e-02, -3.283174499777749e-02, -3.823425474392667e-02, -3.283174499777750e-02, -9.152291424722672e-03, -8.794457787209836e-03, -2.884611072883975e-03, -2.883744777506508e-03, -2.597317318195311e-03, -2.448823351375243e-03, -5.095409890528876e-02, -5.056849204103406e-02, -8.303764042982701e-03, -7.814761038925463e-03, -8.303005904414433e-03, -3.409289887362746e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_wb97m_v_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_wb97m_v", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.793348636247648e-08, 0.000000000000000e+00, -1.793357795162978e-08, -1.793324660186507e-08, 0.000000000000000e+00, -1.793340104317787e-08, -1.793242509757020e-08, 0.000000000000000e+00, -1.793225436077954e-08, -1.794652183065070e-08, 0.000000000000000e+00, -1.513661438354369e-08, -1.794472671728302e-08, 0.000000000000000e+00, -1.513575525368151e-08, -1.514458995262370e-08, 0.000000000000000e+00, -1.514549040232313e-08, -1.586700800168365e-05, 0.000000000000000e+00, -2.442139241030217e-05, -1.590310156090933e-05, 0.000000000000000e+00, -1.590231397918928e-05, -1.593254590344911e-05, 0.000000000000000e+00, -1.593647404245689e-05, -1.591646187601324e-05, 0.000000000000000e+00, -1.591563391939167e-05, -1.591121854389248e-05, 0.000000000000000e+00, -1.593774153570967e-05, -2.443939838475039e-05, 0.000000000000000e+00, -1.590385443458253e-05, -1.087693710023146e-02, 0.000000000000000e+00, -1.077404746815877e-02, -1.239447386393883e-02, 0.000000000000000e+00, -4.508936706307390e-03, -5.056934739808119e-03, 0.000000000000000e+00, -5.053656036807299e-03, -4.356516173661075e-03, 0.000000000000000e+00, -1.303212726522688e-02, -1.046990429483286e-02, 0.000000000000000e+00, -1.203356425796485e-02, -5.213774404286421e-03, 0.000000000000000e+00, -4.986387705853319e-03, -1.750870064294431e-01, 0.000000000000000e+00, 5.116089723185672e-01, -1.661912404876882e-01, 0.000000000000000e+00, 4.539087397892347e-01, -1.402186246496163e-03, 0.000000000000000e+00, -6.711956833861511e-03, 2.459369428800514e-01, 0.000000000000000e+00, 1.374112539430350e-01, -3.370125713158997e-01, 0.000000000000000e+00, 3.801269437747111e+00, -1.031690133914982e-01, 0.000000000000000e+00, 3.178217912539994e+01, -9.073132072417759e-01, 0.000000000000000e+00, -6.899963140734733e-01, -1.887890478567742e+03, 0.000000000000000e+00, -1.941790596447786e+00, -5.914804223871512e+01, 0.000000000000000e+00, -8.235139839752491e-02, -6.069393893122397e-01, 0.000000000000000e+00, -6.579679706260753e-01, -3.820533139582716e-01, 0.000000000000000e+00, -4.692787475552677e+00, -3.820533139580826e-01, 0.000000000000000e+00, -4.692787475582817e+00, -3.899201631618940e-06, 0.000000000000000e+00, -3.902681058159734e-06, -3.898646198815928e-06, 0.000000000000000e+00, -3.902069951138974e-06, -3.899210722714837e-06, 0.000000000000000e+00, -3.902642728008680e-06, -3.898679415185281e-06, 0.000000000000000e+00, -3.902141466567483e-06, -4.786232637230350e-06, 0.000000000000000e+00, -3.889713634417684e-06, -3.886271787793453e-06, 0.000000000000000e+00, -4.790678740473313e-06, -1.363382040366200e-04, 0.000000000000000e+00, -1.365695951135011e-04, -1.348873380523298e-04, 0.000000000000000e+00, -1.351598717349521e-04, -1.373723950764874e-04, 0.000000000000000e+00, -1.372428802455943e-04, -1.362380544568742e-04, 0.000000000000000e+00, -1.360532651764321e-04, -1.335235708580396e-04, 0.000000000000000e+00, -2.265869706708913e-04, -1.346346569848147e-04, 0.000000000000000e+00, -1.358591692160745e-04, -1.202118300244848e-02, 0.000000000000000e+00, -2.317014233937930e-02, -5.153437818995962e-03, 0.000000000000000e+00, -5.035717221375149e-03, -1.745690833902277e-02, 0.000000000000000e+00, -1.533634227480577e-02, -1.461246252255961e-02, 0.000000000000000e+00, -1.252629272738265e-02, -9.768067023756625e-03, 0.000000000000000e+00, -2.373626921451824e-02, -9.799503546310496e-03, 0.000000000000000e+00, -1.214227817362762e-02, 1.254932194258188e-01, 0.000000000000000e+00, 9.415951923395148e-02, -5.997375239081174e-01, 0.000000000000000e+00, 4.331803325769333e-01, 2.048601231128598e-01, 0.000000000000000e+00, 1.626607926075790e-02, -1.746235652075601e-04, 0.000000000000000e+00, -1.749202112475008e-04, 6.073638225359564e-01, 0.000000000000000e+00, 1.200626924275554e-01, 6.073638225359559e-01, 0.000000000000000e+00, 1.200626924275613e-01, -1.018774091418892e+04, 0.000000000000000e+00, -1.084814999408997e+00, -5.973532146396258e-01, 0.000000000000000e+00, -5.277897626121496e-01, -5.162762242720533e+00, 0.000000000000000e+00, -4.169280240865946e+00, 7.767924665304905e-01, 0.000000000000000e+00, -1.914771835550721e+01, -2.317195580139674e+00, 0.000000000000000e+00, -1.283916393847126e+00, -2.317195580102390e+00, 0.000000000000000e+00, -1.283916393813054e+00, -3.366284875731289e-02, 0.000000000000000e+00, -3.389196291977918e-02, -1.154584499908139e-02, 0.000000000000000e+00, -1.222532994694047e-02, -1.353308771019986e-02, 0.000000000000000e+00, -1.350084764290675e-02, -1.379285670512672e-02, 0.000000000000000e+00, -2.481257525414850e-02, -1.349456796836215e-02, 0.000000000000000e+00, -1.346246412099538e-02, -1.377045135201060e-02, 0.000000000000000e+00, -2.136175055231768e-02, -3.338573567231354e-02, 0.000000000000000e+00, -3.399531752675596e-02, -2.251092581907303e-02, 0.000000000000000e+00, -4.328143433148025e-02, -1.584841486197764e-02, 0.000000000000000e+00, -3.592483235745750e-02, -5.696790205194032e-03, 0.000000000000000e+00, -5.700810472960728e-03, -1.116586094241889e-02, 0.000000000000000e+00, -1.097989985690564e-02, -1.090051448653182e-02, 0.000000000000000e+00, -3.169769655031999e-02, -5.866031299042941e-03, 0.000000000000000e+00, -1.334943327572907e-02, -1.456006138704034e-02, 0.000000000000000e+00, -2.125382676451050e-02, -2.251684254907622e-01, 0.000000000000000e+00, 1.241902869580192e-03, -1.326786410440010e-01, 0.000000000000000e+00, -5.334589852118916e-02, -6.623889202297627e-02, 0.000000000000000e+00, -6.637123011279589e-02, -4.830944353380992e-02, 0.000000000000000e+00, -1.811203241947630e-01, -2.934597890763534e-02, 0.000000000000000e+00, -2.863696842990377e-02, -3.281079456057182e+01, 0.000000000000000e+00, -3.348372031046726e+01, -4.823943172622122e-02, 0.000000000000000e+00, -8.879240002717941e-02, -7.346124451161766e-02, 0.000000000000000e+00, -6.573074527536896e-02, 4.879702091304693e-01, 0.000000000000000e+00, 9.905610845551424e-02, 4.879702091304692e-01, 0.000000000000000e+00, 9.905610845549283e-02, -1.164235882561144e+05, 0.000000000000000e+00, -8.774180806179473e+04, -7.747222831589811e-01, 0.000000000000000e+00, -7.654941274928546e-01, -6.141126116539853e+07, 0.000000000000000e+00, -3.751023193825296e+07, 5.233505537551353e+01, 0.000000000000000e+00, 4.475724197580675e+01, -4.527440271424378e+00, 0.000000000000000e+00, -1.553044468532736e+00, -8.985555089720780e+00, 0.000000000000000e+00, -6.700499972719136e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_wb97m_v_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_wb97m_v", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.082735721881642e-03, 2.083089657206032e-03, 2.082778387581386e-03, 2.083120243753006e-03, 2.082893766480559e-03, 2.083293263175175e-03, 2.071811944473150e-03, 2.083184670866372e-03, 2.072156122084974e-03, 2.083417324273834e-03, 2.073698708050179e-03, 2.073839710021500e-03, 3.942183949800223e-03, 3.968589767935732e-03, 4.059714596468017e-03, 4.058211864946345e-03, 4.084242300991753e-03, 4.088861646993931e-03, 4.075104649814090e-03, 4.075077488076279e-03, 4.055128354084625e-03, 4.098298401816493e-03, 3.967924090579282e-03, 3.981386969790087e-03, 2.395005081923500e-03, 2.368862617618136e-03, 5.888175976353860e-03, 2.242914875035171e-03, 2.937586328712509e-03, 2.756299813558379e-03, 1.490171288524757e-03, 5.782280214826905e-03, 2.309325982501990e-03, 2.095043475182567e-03, 4.687570596061895e-03, 2.148155273134192e-03, 6.559423103136741e-03, -2.921056315130239e-02, 6.946947109239805e-03, -2.842784140054520e-02, -5.720818803305782e-04, 3.126850088861732e-03, -3.279620934045285e-02, -3.922555993761387e-02, -3.598023576456585e-02, -1.394125767686892e-02, -3.225796392725747e-02, -1.802740894335556e-03, -5.311832189440340e-05, -5.428798022519967e-05, -4.087221953661169e-05, -6.567695274834390e-05, -2.110249398667884e-03, -3.447503037152691e-03, -8.133932084795902e-06, -8.170180394709414e-06, -1.791799236279649e-05, -2.330063625989131e-05, -1.791799236279147e-05, -2.330063625984483e-05, 9.067629764218463e-03, 9.071255686612080e-03, 9.105307901197847e-03, 9.107179268908245e-03, 9.070451722571713e-03, 9.072688105393129e-03, 9.102380943540263e-03, 9.105688082577423e-03, 8.812179278786542e-03, 9.222863689400682e-03, 9.220033152377212e-03, 8.814936073958815e-03, 5.095011359710801e-03, 5.121263599848886e-03, 5.286061489785603e-03, 5.305694531438869e-03, 4.917967894263829e-03, 4.999060076153585e-03, 5.087662126870328e-03, 5.169734973145755e-03, 4.933605979621242e-03, 5.027400978270910e-03, 5.338853895562506e-03, 5.233063134898871e-03, 1.031165377965273e-03, 7.642567333468543e-04, -6.546578174636166e-04, 8.524837237018490e-04, 5.702334806333958e-03, 2.661000785861752e-03, 1.773905688666380e-04, -3.604287915335215e-03, -1.166035566817431e-03, 2.557007775864309e-03, -3.040250856587063e-03, 8.059771205561011e-04, -2.327767476708460e-02, -2.324658258409518e-02, -1.037899176508399e-03, -2.656969382239789e-02, -2.031558555595055e-02, -2.184742022597144e-02, 1.002293190891458e-02, 1.003545514658678e-02, -3.189609691881652e-02, -4.529082894311070e-02, -3.189609691881651e-02, -4.529082894311089e-02, -1.687253859028867e-06, -2.573711796688530e-06, -7.186882483867330e-06, -6.367573417414913e-06, -2.349157809992920e-05, -2.634332992060204e-05, -1.087352770509679e-02, -7.264339430488743e-03, -6.579568120386903e-06, -2.381001282624719e-05, -6.579568120378455e-06, -2.381001282624453e-05, -1.024223429250765e-01, -9.936290358702619e-02, -2.078654432917399e-02, -1.886572563621793e-02, -6.694097734925468e-02, -6.409627328231293e-02, -8.848394490484036e-02, -5.907625409976320e-02, -7.735954364673676e-02, -7.451217571224668e-02, -7.706626664511253e-02, -4.607567171649429e-02, -9.075224062487949e-02, -8.737567641962604e-02, -1.991695615590206e-03, -2.420683203745107e-03, -6.632537156996150e-03, -7.716162450033276e-03, -1.084919615502374e-02, -1.094486287615970e-02, -1.197571306557049e-02, -1.223593293875058e-02, -7.310768307313756e-03, -1.039800455654096e-02, 4.047555576443921e-03, 2.354536765156603e-03, -1.443586321239849e-02, -1.436088280355691e-02, 7.461837845823024e-03, -1.082048420675723e-02, -1.121526973956779e-03, -5.121109435018456e-03, 2.699679235295567e-03, 2.830477601318100e-03, -6.654772392710200e-03, 3.526694899853034e-03, 2.672857390738577e-03, 1.812290144000784e-03, 3.992798805397484e-04, 3.923920672853272e-04, -5.840447774142134e-03, -6.105293319266967e-03, -6.374190131345476e-03, -1.484640072977866e-02, -2.185606023779870e-02, -2.764653733351367e-02, -2.185606023779860e-02, -2.764653733351368e-02, 8.723628709347327e-06, 8.749377563102450e-06, -1.752062177782632e-07, -1.746144900233885e-07, 5.356057448110808e-07, 5.904245482641299e-07, 2.851180509431484e-03, 3.210280854930710e-03, -1.389785837639077e-05, -1.990512260317787e-05, -1.389581810589132e-05, -8.568329975846469e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
