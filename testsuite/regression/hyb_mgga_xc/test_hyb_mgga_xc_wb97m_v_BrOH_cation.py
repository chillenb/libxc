
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_wb97m_v_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_wb97m_v", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.966114418602348e+01, -1.966123180271417e+01, -1.966166572191903e+01, -1.966036566239089e+01, -1.966104045277188e+01, -1.966104045277188e+01, -2.791680151040388e+00, -2.791724934765538e+00, -2.793100357625031e+00, -2.794151877181662e+00, -2.793177539510476e+00, -2.793177539510476e+00, -4.618736155102635e-01, -4.616118840072070e-01, -4.568767089810934e-01, -4.614675177772184e-01, -4.615000897162500e-01, -4.615000897162500e-01, -7.574172383248412e-02, -7.725294256165008e-02, -5.419819612713883e-01, -6.561764109229334e-02, -7.371197159342183e-02, -7.371197159342181e-02, -1.156604311310781e-02, -1.205669704662700e-02, -4.099125304999669e-02, -7.304206211226439e-03, -8.622058210707493e-03, -8.622058210707488e-03, -4.746490602984159e+00, -4.748991310334773e+00, -4.746650901615795e+00, -4.748856415229644e+00, -4.747733816500427e+00, -4.747733816500427e+00, -1.646036729135668e+00, -1.659984840222008e+00, -1.643910853501611e+00, -1.656274010382501e+00, -1.654895977837397e+00, -1.654895977837397e+00, -3.929751076484698e-01, -4.310532574174411e-01, -3.568528788797328e-01, -3.692283140069330e-01, -4.001757139225685e-01, -4.001757139225685e-01, -6.091877207032110e-02, -8.483907644371812e-02, -5.929416323419044e-02, -1.511319145976212e+00, -5.564043605458802e-02, -5.564043605458800e-02, -5.836426063559404e-03, -7.163955018423807e-03, -5.670470042830177e-03, -5.078573252424103e-02, -6.605344524086294e-03, -6.605344524086293e-03, -3.710066142737538e-01, -3.821815830976390e-01, -3.800681709943793e-01, -3.769573413236212e-01, -3.786909050321782e-01, -3.786909050321782e-01, -3.567850561619873e-01, -3.232924987974597e-01, -3.334783968626007e-01, -3.456387941717562e-01, -3.387426480215533e-01, -3.387426480215533e-01, -4.573229419057497e-01, -1.131586275273819e-01, -1.446411467338247e-01, -2.038559642732758e-01, -1.724378143998552e-01, -1.724378143998553e-01, -2.901632785844629e-01, -3.999157383637618e-02, -4.732986619997207e-02, -1.889679625124643e-01, -5.165786518629861e-02, -5.165786518629863e-02, -1.529131937535034e-02, -2.206971250656013e-03, -4.318496792847801e-03, -5.035207631370493e-02, -6.188088127454730e-03, -6.188088127454730e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_wb97m_v_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_wb97m_v", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.680114921629883e+01, -2.680152751160632e+01, -2.680133827735234e+01, -2.680166627156450e+01, -2.680188947264322e+01, -2.680246246431200e+01, -2.679973993824292e+01, -2.679974395451719e+01, -2.680125294376362e+01, -2.680079726614796e+01, -2.680125294376362e+01, -2.680079726614796e+01, -3.705238599493648e+00, -3.705391410528236e+00, -3.705434349864800e+00, -3.705553152805341e+00, -3.709701532072310e+00, -3.710540867268577e+00, -3.706975459712150e+00, -3.707369944861627e+00, -3.704469295219273e+00, -3.710910481103944e+00, -3.704469295219273e+00, -3.710910481103944e+00, -5.723309277821359e-01, -5.780025700878725e-01, -5.703048191443801e-01, -5.770195979908157e-01, -5.410719570493762e-01, -5.360100967017162e-01, -5.470775871330906e-01, -5.500054843720262e-01, -5.820723618918976e-01, -5.264849873707064e-01, -5.820723618918976e-01, -5.264849873707064e-01, -1.082573401388638e-01, -1.043264788044929e-01, -1.119163755727546e-01, -1.081493154458243e-01, -6.188908102830645e-01, -6.557212819483802e-01, -5.589205016813798e-02, -4.948878997531037e-02, -5.634032693145592e-02, -1.038946212890336e-01, -5.634032693145597e-02, -1.038946212890341e-01, -1.482441621089620e-02, -1.455610173281273e-02, -1.545535687434671e-02, -1.513235032498665e-02, -4.554712862481396e-02, -4.446906761539210e-02, -9.365474954064252e-03, -9.403395233288373e-03, -1.076557729537936e-02, -1.223166393301575e-02, -1.076557729537936e-02, -1.223166393301589e-02, -6.541440877014712e+00, -6.540032326376349e+00, -6.546172772820002e+00, -6.544609205229162e+00, -6.541729412551486e+00, -6.540209071653933e+00, -6.545791399783028e+00, -6.544363146893166e+00, -6.543847488237303e+00, -6.542333732060547e+00, -6.543847488237303e+00, -6.542333732060547e+00, -1.878447038256153e+00, -1.879408664265936e+00, -1.903999788691746e+00, -1.904182868771704e+00, -1.853164173277817e+00, -1.861455800916234e+00, -1.875235680130619e+00, -1.883744828119704e+00, -1.912274302757013e+00, -1.895104526998320e+00, -1.912274302757013e+00, -1.895104526998320e+00, -5.292699596921598e-01, -5.273868216090950e-01, -6.141083028035954e-01, -6.141234031908593e-01, -4.752366255438230e-01, -4.827993911970214e-01, -5.179571163008265e-01, -5.222247166614629e-01, -5.495783034884607e-01, -5.366922298917884e-01, -5.495783034884606e-01, -5.366922298917884e-01, -4.326417555069091e-02, -4.315897283790698e-02, -9.004065317888944e-02, -8.982749491777045e-02, -4.421656823793529e-02, -4.294500013632804e-02, -2.210131725994662e+00, -2.209376420693967e+00, -4.470373135043898e-02, -2.733376975430943e-02, -4.470373135043893e-02, -2.733376975430937e-02, -7.563675467722360e-03, -7.501474926015289e-03, -9.224468235040556e-03, -9.192280660588706e-03, -7.358890329707797e-03, -7.269361419165052e-03, -4.607657672859614e-02, -4.467161074133989e-02, -8.920981818999097e-03, -8.317541136109899e-03, -8.920981818999101e-03, -8.317541136109921e-03, -5.140555647721553e-01, -5.152730643470338e-01, -5.356437994372142e-01, -5.360704044270167e-01, -5.267528657515435e-01, -5.273835724600895e-01, -5.196877902734410e-01, -5.205181202505164e-01, -5.230721750049381e-01, -5.238036561148326e-01, -5.230721750049381e-01, -5.238036561148326e-01, -4.987907790994852e-01, -4.999968144688252e-01, -3.997457872606782e-01, -4.007521064506436e-01, -4.345387687987948e-01, -4.355092085012386e-01, -4.884845789748810e-01, -4.890929304169671e-01, -4.597212874330338e-01, -4.604458454427240e-01, -4.597212874330337e-01, -4.604458454427240e-01, -6.511394581265615e-01, -6.507423333790880e-01, -1.440140698250996e-01, -1.434882240052387e-01, -1.914400555321280e-01, -1.914489733759383e-01, -2.649362823079842e-01, -2.661109241409279e-01, -2.253532452150606e-01, -2.253987188538521e-01, -2.253532452150607e-01, -2.253987188538521e-01, -3.667981687410944e-01, -3.675603370024612e-01, -4.430658375829393e-02, -4.425780842905344e-02, -4.867024159736965e-02, -4.797664586087824e-02, -2.508720866062265e-01, -2.437487242164887e-01, -3.910546849244553e-02, -3.339376038744591e-02, -3.910546849244566e-02, -3.339376038744601e-02, -1.937147346218010e-02, -1.913771259701456e-02, -2.884587413072372e-03, -2.883719994688536e-03, -5.631249592640223e-03, -5.567370259058992e-03, -3.704762670019271e-02, -3.496815429041247e-02, -8.303474398965780e-03, -7.814628441837453e-03, -8.303474398965657e-03, -7.814628441837428e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_wb97m_v_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_wb97m_v", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.525248726558560e-08, 0.000000000000000e+00, -1.525259369293049e-08, -1.525234259143180e-08, 0.000000000000000e+00, -1.525248616743687e-08, -1.525175969804918e-08, 0.000000000000000e+00, -1.525169777942158e-08, -1.525342743090753e-08, 0.000000000000000e+00, -1.525378690260900e-08, -1.525242904788987e-08, 0.000000000000000e+00, -1.525285226913023e-08, -1.525242904788987e-08, 0.000000000000000e+00, -1.525285226913023e-08, -1.824443951672750e-05, 0.000000000000000e+00, -1.824684839403528e-05, -1.824458481789223e-05, 0.000000000000000e+00, -1.824722728064494e-05, -1.825088918609704e-05, 0.000000000000000e+00, -1.825074778324293e-05, -1.823544566904790e-05, 0.000000000000000e+00, -1.823606441671269e-05, -1.825938536984400e-05, 0.000000000000000e+00, -1.823569114373412e-05, -1.825938536984400e-05, 0.000000000000000e+00, -1.823569114373412e-05, -6.370419951851529e-03, 0.000000000000000e+00, -6.283673872325579e-03, -6.398872016495890e-03, 0.000000000000000e+00, -6.299812425451265e-03, -6.763817250791402e-03, 0.000000000000000e+00, -6.740260825539147e-03, -6.684015301307486e-03, 0.000000000000000e+00, -6.674143516369372e-03, -6.386936907237527e-03, 0.000000000000000e+00, -6.303552360300475e-03, -6.386936907237527e-03, 0.000000000000000e+00, -6.303552360300475e-03, 2.536864471241528e-01, 0.000000000000000e+00, 9.855457597513191e-02, 2.490119673708023e-01, 0.000000000000000e+00, 8.088625403735555e-02, -3.988748736154880e-03, 0.000000000000000e+00, -3.679229187571766e-03, 3.212253590752991e-01, 0.000000000000000e+00, 2.514635425801391e-01, -3.479231705839176e-01, 0.000000000000000e+00, 6.744892069220949e+00, -3.479231705839172e-01, 0.000000000000000e+00, 6.744892069220959e+00, -9.259089744649569e-01, 0.000000000000000e+00, -6.997722242558690e-01, -9.852804756923921e-01, 0.000000000000000e+00, -7.198974507134025e-01, -1.689136782884603e-01, 0.000000000000000e+00, -1.916822786300922e-01, -7.697991637754878e-01, 0.000000000000000e+00, -8.207250214353463e-01, -4.261535454013236e-01, 0.000000000000000e+00, -6.724343099127741e+00, -4.261535454162920e-01, 0.000000000000000e+00, -6.724343099140794e+00, -3.900417970299948e-06, 0.000000000000000e+00, -3.903819431069274e-06, -3.899871616452732e-06, 0.000000000000000e+00, -3.903215751338478e-06, -3.900399492940316e-06, 0.000000000000000e+00, -3.903761984320150e-06, -3.899876592232877e-06, 0.000000000000000e+00, -3.903268184338121e-06, -3.900138040498357e-06, 0.000000000000000e+00, -3.903504589332042e-06, -3.900138040498357e-06, 0.000000000000000e+00, -3.903504589332042e-06, -1.423829996620601e-04, 0.000000000000000e+00, -1.424030302957804e-04, -1.398361474369397e-04, 0.000000000000000e+00, -1.399537486785932e-04, -1.427051166716582e-04, 0.000000000000000e+00, -1.426088888141110e-04, -1.405853385329965e-04, 0.000000000000000e+00, -1.404159070530335e-04, -1.404730600494735e-04, 0.000000000000000e+00, -1.411840552558759e-04, -1.404730600494735e-04, 0.000000000000000e+00, -1.411840552558759e-04, -9.168469322574171e-03, 0.000000000000000e+00, -9.208537814194506e-03, -3.489131076940166e-03, 0.000000000000000e+00, -3.819582688681879e-03, -1.334113779375465e-02, 0.000000000000000e+00, -1.129995704218527e-02, -3.480275366761150e-03, 0.000000000000000e+00, -3.706906034576349e-03, -7.265542590532164e-03, 0.000000000000000e+00, -8.478969745521323e-03, -7.265542590532172e-03, 0.000000000000000e+00, -8.478969745521330e-03, 1.785167167781680e-01, 0.000000000000000e+00, 1.266213214625380e-01, 7.520978225572079e-02, 0.000000000000000e+00, 6.188861183881410e-02, 2.762225788986007e-01, 0.000000000000000e+00, 3.883251912407505e-02, -1.765096782232921e-04, 0.000000000000000e+00, -1.768592575192445e-04, 7.306194365742595e-01, 0.000000000000000e+00, 1.706975192760199e-01, 7.306194365742595e-01, 0.000000000000000e+00, 1.706975192760235e-01, -1.222695452912252e+00, 0.000000000000000e+00, -9.640668809921014e-01, -9.885416666647366e-01, 0.000000000000000e+00, -8.914764760328783e-01, -6.694455571067776e+00, 0.000000000000000e+00, -5.439401409048214e+00, 5.946604668403679e-02, 0.000000000000000e+00, 5.214287776684991e-02, -6.008259361428379e+00, 0.000000000000000e+00, -1.566217486012105e+00, -6.008259361402104e+00, 0.000000000000000e+00, -1.566217485987107e+00, -3.007476687032122e-02, 0.000000000000000e+00, -2.986762392365438e-02, -1.355403173890122e-02, 0.000000000000000e+00, -1.421925888103715e-02, -2.018453498155409e-02, 0.000000000000000e+00, -2.080638937081890e-02, -2.610378830278758e-02, 0.000000000000000e+00, -2.639478346823858e-02, -2.320917768862590e-02, 0.000000000000000e+00, -2.368287685588481e-02, -2.320917768862590e-02, 0.000000000000000e+00, -2.368287685588479e-02, -2.256842874262573e-02, 0.000000000000000e+00, -2.255362877357962e-02, -2.221185106171393e-02, 0.000000000000000e+00, -2.182835187965600e-02, -1.487281201882049e-02, 0.000000000000000e+00, -1.449947628531999e-02, -3.616996672001268e-03, 0.000000000000000e+00, -3.672810608876576e-03, -9.368771916613750e-03, 0.000000000000000e+00, -9.257288689272520e-03, -9.368771916613752e-03, 0.000000000000000e+00, -9.257288689272520e-03, -3.299287489338642e-03, 0.000000000000000e+00, -3.538532910515956e-03, -1.217794667569842e-02, 0.000000000000000e+00, -1.946272137468585e-02, -4.916939222638662e-02, 0.000000000000000e+00, -5.433798389061578e-02, -5.042492644360513e-02, 0.000000000000000e+00, -4.977413405413986e-02, -6.425745019686423e-02, 0.000000000000000e+00, -6.422818540738119e-02, -6.425745019686431e-02, 0.000000000000000e+00, -6.422818540738114e-02, -2.767340881907436e-02, 0.000000000000000e+00, -2.689244616893808e-02, -1.752357822596359e-01, 0.000000000000000e+00, -1.770806185449289e-01, -6.456553002306176e-02, 0.000000000000000e+00, -1.148198364881305e-01, -4.835722481988897e-02, 0.000000000000000e+00, -4.423909222313172e-02, 6.259020545352308e-01, 0.000000000000000e+00, 1.355893879709858e-01, 6.259020545352257e-01, 0.000000000000000e+00, 1.355893879709769e-01, -6.576328031969569e-01, 0.000000000000000e+00, -5.647607498035502e-01, -4.584230111338525e+00, 0.000000000000000e+00, -5.923747469192091e+00, -2.677826259471830e+00, 0.000000000000000e+00, -2.095670235629486e+00, 4.110319013516745e-01, 0.000000000000000e+00, 3.063112496732249e-01, -9.343707483575004e+00, 0.000000000000000e+00, -1.942812246218003e+00, -9.343707483702216e+00, 0.000000000000000e+00, -1.942812246268310e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_wb97m_v_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_wb97m_v", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.074361517876243e-03, 2.074717990564935e-03, 2.074405057717036e-03, 2.074749346585064e-03, 2.074523150673943e-03, 2.074925650516854e-03, 2.074038012353219e-03, 2.074302995256664e-03, 2.074391780510781e-03, 2.074535032259161e-03, 2.074391780510781e-03, 2.074535032259161e-03, 3.933361610045408e-03, 3.932409337686663e-03, 3.934686636497839e-03, 3.933306723313318e-03, 3.961236266507620e-03, 3.965533764457913e-03, 3.951903705903678e-03, 3.951897568005723e-03, 3.933159492014913e-03, 3.973274993189687e-03, 3.933159492014913e-03, 3.973274993189687e-03, 1.995569983084538e-03, 2.207623347785166e-03, 1.942630705962198e-03, 2.190778204054964e-03, 1.336726971707251e-03, 1.126128139538677e-03, 1.692419810310937e-03, 1.844283482595711e-03, 3.083189251860549e-03, 5.917190031624255e-04, 3.083189251860549e-03, 5.917190031624255e-04, -2.186091784477569e-02, -2.153103036027180e-02, -2.041610524284313e-02, -1.951666240307311e-02, -2.875425115089802e-04, 2.998451462078188e-04, -3.158512845471947e-02, -3.784674410033461e-02, -3.505121509127217e-02, -1.344563147563769e-02, -3.505121509127209e-02, -1.344563147563767e-02, -5.311793216484101e-05, -5.428761946752161e-05, -6.362368217194576e-05, -6.573745604680644e-05, -3.312778879637332e-03, -3.508797502316639e-03, -8.133713470009113e-06, -8.169958640612275e-06, -1.791736713715771e-05, -2.329882328830696e-05, -1.791736713715420e-05, -2.329882328825934e-05, 9.066967800872008e-03, 9.070728165814680e-03, 9.104594549329751e-03, 9.106604458993448e-03, 9.069806230113603e-03, 9.072162703145781e-03, 9.101691041899550e-03, 9.105120994339988e-03, 9.085805441339743e-03, 9.088682137314829e-03, 9.085805441339743e-03, 9.088682137314829e-03, 5.008984023004916e-03, 5.034122817578523e-03, 5.213874898569655e-03, 5.232746399472418e-03, 4.842996371173293e-03, 4.922254267858564e-03, 5.025224541509438e-03, 5.105724821714125e-03, 5.254620224357395e-03, 5.150475707169977e-03, 5.254620224357395e-03, 5.150475707169977e-03, 8.073261977926513e-04, 5.588466543033869e-04, 1.456289516351569e-03, 2.826172767343809e-03, 4.156463701627331e-03, 6.151860532587854e-04, 1.849602357761127e-03, -1.796479063725836e-03, -1.803935053066601e-03, 2.064085646092116e-03, -1.803935053066617e-03, 2.064085646092085e-03, -2.284806610158663e-02, -2.281811533950144e-02, -2.756815847581950e-02, -2.738929254628233e-02, -1.994835984059943e-02, -2.147151906735119e-02, 1.050887816590716e-02, 1.052300690069663e-02, -3.134000373098356e-02, -4.450542818992477e-02, -3.134000373098365e-02, -4.450542818992495e-02, -2.757531720491937e-06, -2.573831376749545e-06, -7.186457789018725e-06, -6.367202422571861e-06, -2.349046828676627e-05, -2.634215436502844e-05, -1.124144553138444e-02, -1.270520982318423e-02, -6.578662738387991e-06, -2.380795323016036e-05, -6.578662738386401e-06, -2.380795323015805e-05, -1.189173335621194e-01, -1.154900909240921e-01, -2.852168961933739e-02, -2.658480568344584e-02, -4.910104681285715e-02, -4.657636260410620e-02, -7.425125268813751e-02, -7.171796609922607e-02, -6.057950839339704e-02, -5.804845833079438e-02, -6.057950839339704e-02, -5.804845833079438e-02, -1.176534341819105e-01, -1.136288240404005e-01, -1.158891142632256e-03, -1.595732866583953e-03, -8.952435784338974e-03, -9.527912097048017e-03, -1.001523138916923e-02, -1.014588477535786e-02, -1.105873732532055e-02, -1.132196266357911e-02, -1.105873732532054e-02, -1.132196266357911e-02, 4.217809813785682e-03, 5.052620174580955e-03, -1.463117942015181e-02, -1.455066340126291e-02, -4.298565928759226e-03, -3.851730719084742e-03, -1.975392689561483e-03, -2.017359531995149e-03, 1.593747541850720e-05, 9.931755254089666e-05, 1.593747541849765e-05, 9.931755254090266e-05, 1.378630145595081e-03, 4.217370193810720e-04, -3.140712119717630e-03, -3.081329352292805e-03, -5.813923341021100e-03, -6.078369118737163e-03, -9.022828605477011e-03, -1.866953987183622e-02, -2.157046173277934e-02, -2.729657549709828e-02, -2.157046173277912e-02, -2.729657549709832e-02, -6.883496455670430e-05, -6.846148267922963e-05, -1.752020140575789e-07, -1.746102072707252e-07, -4.210002795003915e-06, -4.570437397182880e-06, -2.219111078260296e-02, -2.487655975763049e-02, -1.389628038787101e-05, -1.990365014075516e-05, -1.389628038791193e-05, -1.990365014081888e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
