
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_r2scan50_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_r2scan50", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.161771707094024e+01, -1.161775162033922e+01, -1.161793048169195e+01, -1.161741698071691e+01, -1.161768243634132e+01, -1.161768243634132e+01, -1.747075528803673e+00, -1.747135422110486e+00, -1.748837618256473e+00, -1.749222882881498e+00, -1.748618521994080e+00, -1.748618521994080e+00, -3.380179776605248e-01, -3.375180763441246e-01, -3.259735870969973e-01, -3.313978155662279e-01, -3.300145814561880e-01, -3.300145814561880e-01, -1.053882322838474e-01, -1.069749090403556e-01, -3.732094338281333e-01, -7.222855692135002e-02, -8.520425070629656e-02, -8.520425070629656e-02, -1.953031675701447e-03, -2.100694434338426e-03, -1.647508685778544e-02, -9.324125155582286e-04, -1.298669984571995e-03, -1.298669984571995e-03, -2.860427370864683e+00, -2.860987960130307e+00, -2.860465095477570e+00, -2.860959517925602e+00, -2.860705395832290e+00, -2.860705395832290e+00, -1.063264384714635e+00, -1.074483996136375e+00, -1.059505691588343e+00, -1.069527186507473e+00, -1.071367740407446e+00, -1.071367740407446e+00, -3.366894825769903e-01, -3.668692113576686e-01, -3.078467096184062e-01, -3.228876573161637e-01, -3.426097972238453e-01, -3.426097972238453e-01, -4.787620874493212e-02, -1.015700272356608e-01, -4.408891878701732e-02, -1.012498161055674e+00, -5.959122843404875e-02, -5.959122843404876e-02, -6.754738340604412e-04, -9.201649027754770e-04, -7.769748615001040e-04, -2.893292570085366e-02, -9.220992095622121e-04, -9.220992095622121e-04, -3.447887878457268e-01, -3.425769084713006e-01, -3.433523501744192e-01, -3.439937529739114e-01, -3.436723018724595e-01, -3.436723018724595e-01, -3.358698364781110e-01, -2.877219467842724e-01, -3.015684655737804e-01, -3.152558228366446e-01, -3.082439004154245e-01, -3.082439004154245e-01, -3.817220051810134e-01, -1.300115189407151e-01, -1.552394867483379e-01, -2.034498628817755e-01, -1.782775704340830e-01, -1.782775704340830e-01, -2.632147179170630e-01, -1.557632798939640e-02, -2.224263131460372e-02, -1.995150336337185e-01, -3.841553642122750e-02, -3.841553642122750e-02, -2.992890646753819e-03, -1.768773418049174e-04, -4.587343599161358e-04, -3.609760456660627e-02, -8.510269386011746e-04, -8.510269386011776e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_r2scan50_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_r2scan50", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.511508215648213e+01, -1.511513601231108e+01, -1.511537925018269e+01, -1.511457844444819e+01, -1.511499750342469e+01, -1.511499750342469e+01, -2.473042004682355e+00, -2.473085976640471e+00, -2.474196247836296e+00, -2.473208398505985e+00, -2.473384659423076e+00, -2.473384659423076e+00, -4.880307099873021e-01, -4.871338408306293e-01, -4.669873863447210e-01, -4.753915720393368e-01, -4.734556273134322e-01, -4.734556273134322e-01, -1.348007610748631e-01, -1.380706453800095e-01, -5.156024324231413e-01, -1.020491854070336e-01, -1.071172939209078e-01, -1.071172939209077e-01, -3.687622431148381e-03, -3.924548481594016e-03, -2.737681056668465e-02, -1.748985096346266e-03, -2.417477220162654e-03, -2.417477220162654e-03, -3.740521480024329e+00, -3.741685410876967e+00, -3.740578916330600e+00, -3.741606265212056e+00, -3.741109567358124e+00, -3.741109567358124e+00, -1.326038708646982e+00, -1.342491086593164e+00, -1.315389560611975e+00, -1.330759785904164e+00, -1.340375876652423e+00, -1.340375876652423e+00, -4.500938062793957e-01, -4.896448412303490e-01, -4.230167648060432e-01, -4.405887121990683e-01, -4.571512729518374e-01, -4.571512729518374e-01, -7.200540557715504e-02, -1.137646597538790e-01, -6.743954721260075e-02, -1.446266193159736e+00, -6.953038836841073e-02, -6.953038836841094e-02, -1.273699114768434e-03, -1.724191380848679e-03, -1.453827706319078e-03, -4.619863816893216e-02, -1.721512145710174e-03, -1.721512145710174e-03, -4.532382472824382e-01, -4.503530722196721e-01, -4.514140219164968e-01, -4.522565205001681e-01, -4.518395662401180e-01, -4.518395662401180e-01, -4.415974452937578e-01, -3.754089595603043e-01, -3.956171428401354e-01, -4.147099717366778e-01, -4.051799502961185e-01, -4.051799502961185e-01, -5.131556500681629e-01, -1.585236490030632e-01, -1.989768880134022e-01, -2.769394955672382e-01, -2.362231271277709e-01, -2.362231271277709e-01, -3.487140470797518e-01, -2.506769335155270e-02, -3.624847840824252e-02, -2.698786347410593e-01, -5.803378322817881e-02, -5.803378322817884e-02, -5.427173966499449e-03, -3.399132342592390e-04, -8.742590665508577e-04, -4.896877436070439e-02, -1.591090813643520e-03, -1.591090813643522e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_r2scan50_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_r2scan50", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-3.063055398061241e-09, -3.063025079887448e-09, -3.062777548903043e-09, -3.063225602260483e-09, -3.063006930242741e-09, -3.063006930242741e-09, -6.207234477126319e-06, -6.207822069873323e-06, -6.223158457667656e-06, -6.220431830669907e-06, -6.220872301678593e-06, -6.220872301678593e-06, -8.039751483511395e-04, -8.033449810394106e-04, -8.263573336304625e-04, -1.081234103098023e-03, -9.992938067524991e-04, -9.992938067524991e-04, -2.459641219038373e-01, -2.273525736414435e-01, 1.920389757627902e-04, -1.978139506493309e-01, -6.397327735105204e-01, -6.397327735105263e-01, 1.935658367997310e+02, 1.713339578249640e+02, 3.369311848600117e+00, 3.884480289151804e+02, 3.034330959341228e+02, 3.034330959341230e+02, -7.839895996982487e-07, -7.840717467356900e-07, -7.839304387954920e-07, -7.840054680311435e-07, -7.840629191512768e-07, -7.840629191512768e-07, -4.241838310255830e-05, -3.936374752437623e-05, -4.182774760992641e-05, -3.893778123793803e-05, -4.095653404696802e-05, -4.095653404696802e-05, -2.184775540638490e-03, -5.419136768214337e-04, -2.789186950483618e-03, -3.423988032587658e-05, -1.953893890523176e-03, -1.953893890523176e-03, 9.585720605503822e-02, -4.050884597559036e-01, 2.470836418379561e-01, -4.523361795450971e-05, -1.519472993674896e+00, -1.519472993674944e+00, 7.087441394279159e+02, 4.414773688402316e+02, 2.084802261238332e+03, 1.208702576533342e+00, 9.561319457249399e+02, 9.561319457249388e+02, -7.915027341404172e-04, -1.283623384259863e-03, -1.140435419206769e-03, -9.967803834958914e-04, -1.071312592370041e-03, -1.071312592370041e-03, -2.602003059488673e-04, -4.088961656084060e-03, -3.023586777817342e-03, -2.088562198494598e-03, -2.537487238667471e-03, -2.537487238667471e-03, -5.394605396520325e-04, -1.297921584812675e-01, -6.288471021216940e-02, -1.317146107085503e-02, -3.026935955536283e-02, -3.026935955536290e-02, -6.398769348730226e-03, 1.834068649414229e+00, 1.770249018847812e+00, -4.904648758620803e-03, 1.806310907124082e-01, 1.806310907124138e-01, 7.268350149761642e+01, 1.048059953385620e+04, 2.066315989047317e+03, -1.555380056697811e+00, 1.258543083140986e+03, 1.258543083140991e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_r2scan50_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_r2scan50", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([4.946450639466171e-04, 4.946440243367800e-04, 4.946254912813014e-04, 4.946405240853516e-04, 4.946346356614698e-04, 4.946346356614698e-04, 4.110967123145104e-03, 4.111458893401434e-03, 4.124730250659339e-03, 4.124740166648187e-03, 4.122757714700164e-03, 4.122757714700164e-03, 6.825265794095838e-03, 6.784979547961605e-03, 6.101432853856572e-03, 7.400324797053661e-03, 7.000623962278843e-03, 7.000623962278843e-03, 2.856716807052773e-02, 2.829805868836933e-02, 8.697552294878502e-04, 1.486832161716463e-02, 4.195313201198864e-02, 4.195313201198832e-02, -1.392577934466966e-04, -1.071116662600285e-04, 3.292879763139636e-04, -2.154459427967158e-06, -8.296655067628434e-06, -8.296655067628237e-06, 1.858755378763312e-03, 1.859537634242860e-03, 1.858674566568854e-03, 1.859369996458731e-03, 1.859210550966839e-03, 1.859210550966839e-03, 5.443826041258235e-03, 5.185017218418735e-03, 5.299174220071015e-03, 5.051518682669715e-03, 5.365556990581829e-03, 5.365556990581829e-03, 1.098599151357345e-02, 7.688715164006744e-03, 1.344879082355167e-02, 1.001987566658855e-02, 1.040406456270791e-02, 1.040406456270791e-02, 4.212548012316622e-03, 3.977017512536210e-02, 2.890143363510749e-03, 6.899585785083913e-03, 3.679768443848224e-02, 3.679768443848171e-02, -1.090876128762149e-07, -4.142067481716488e-07, -5.586292460433079e-06, 9.202137276329272e-04, -1.147750059437617e-06, -1.147750059437625e-06, 5.227429904362025e-03, 6.585042092281225e-03, 6.204671980691885e-03, 5.811184926533344e-03, 6.017260938237803e-03, 6.017260938237803e-03, 4.555695392229744e-03, 1.078701740881135e-02, 9.655702805237993e-03, 8.208771892003532e-03, 8.996184434227616e-03, 8.996184434227627e-03, 8.413384086263208e-03, 2.718294987077344e-02, 2.420210694484716e-02, 1.712574598624826e-02, 1.996148376508420e-02, 1.996148376508424e-02, 1.386129467993905e-02, 1.286855983441386e-03, 5.212705917490602e-04, 1.249837376232434e-02, 4.868657940882644e-03, 4.868657940882615e-03, -1.630989677162828e-07, -1.132117089503577e-08, -9.589779091123252e-06, 1.328270070517980e-02, -2.500346626350988e-06, -2.500346626351202e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
