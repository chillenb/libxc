
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_r2scan50_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_r2scan50", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.094358053354774e+01, -1.094363787384046e+01, -1.094389126236062e+01, -1.094303997370882e+01, -1.094348622921455e+01, -1.094348622921455e+01, -1.644020714592565e+00, -1.644080485404069e+00, -1.645685679724365e+00, -1.645177177594075e+00, -1.645070236962858e+00, -1.906606544212455e+00, -3.470157109255734e-01, -3.787475707021942e-01, -3.677793842729384e-01, -3.713414269284614e-01, -3.705751513267441e-01, -3.705751513267441e-01, -1.061692990868571e-01, -1.078730973561113e-01, -3.913218651403415e-01, -7.859858476121391e-02, -8.950949718323868e-02, -8.950949718323868e-02, -2.008593085294223e-03, -2.160399156589499e-03, -1.792620680481797e-02, -9.185615319064742e-04, -1.301177602848391e-03, -1.301177602848391e-03, -2.860897605336947e+00, -2.861452760163838e+00, -2.860925529438295e+00, -2.772190966979482e+00, -2.861177776400734e+00, -2.861177776400734e+00, -9.367363767345326e-01, -9.477239154669860e-01, -9.285731063555284e-01, -9.382327883416494e-01, -9.468593029119903e-01, -1.087620076708011e+00, -3.405853194231965e-01, -3.699156624080678e-01, -3.153030313085357e-01, -3.283768214969799e-01, -3.460867880482372e-01, -3.436068903795454e-01, -6.832756228634959e-02, -1.037881304488329e-01, -6.420604554587545e-02, -1.067640658295901e+00, -6.407337783388932e-02, -6.407337783388932e-02, -3.370739786759084e-03, -8.789688320310333e-04, -7.479359671748258e-04, -4.663813241650416e-02, -3.879544690122636e-03, -8.794872988782146e-04, -3.449897594172234e-01, -3.428396789845727e-01, -3.431247213229318e-01, -3.442229081644700e-01, -3.439110226747761e-01, -3.439110226747761e-01, -3.361652153047591e-01, -2.881877056379729e-01, -3.020885159147261e-01, -3.157689211450013e-01, -3.087976912091792e-01, -3.089463601923665e-01, -3.864171107396106e-01, -1.368139490330423e-01, -1.572525584660374e-01, -2.041158652810654e-01, -1.805823036334621e-01, -1.805823036334621e-01, -2.627282492900205e-01, -1.702974999900465e-02, -2.434884541466110e-02, -2.010238038078604e-01, -5.666895702327411e-02, -4.208687951875907e-02, -2.976895781664547e-03, -1.380384000074087e-04, -4.458061099214167e-04, -3.942817839334873e-02, -8.184198695777840e-04, -8.184198695777834e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_r2scan50_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_r2scan50", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.601911747688569e+01, -1.601914653015212e+01, -1.601929580744208e+01, -1.601886206554517e+01, -1.601908650970869e+01, -1.601908650970869e+01, -2.520538889817348e+00, -2.520639430853265e+00, -2.523321251329347e+00, -2.522460462730541e+00, -2.522300135552652e+00, -2.388970802127409e+00, -4.635949003824881e-01, -4.621166391884202e-01, -4.414711210947259e-01, -4.493838915192513e-01, -4.476501986722110e-01, -4.476501986722110e-01, -1.359702777910807e-01, -1.387178650539145e-01, -5.110117850576535e-01, -8.523027190733432e-02, -1.075046329381584e-01, -1.075046329381584e-01, -8.143446302790333e-03, -7.495161994530486e-03, 3.524152297672173e-02, -1.026521268393676e-02, -1.096355737152854e-02, -1.096355737152854e-02, -3.740308875026475e+00, -3.741473884353922e+00, -3.740370685948255e+00, -3.863142836189457e+00, -3.740895281115444e+00, -3.740895281115444e+00, -1.410879144372955e+00, -1.431234134651316e+00, -1.394801534954190e+00, -1.413636365590834e+00, -1.429737079758795e+00, -1.356049448309329e+00, -4.435132754584573e-01, -4.844111100880675e-01, -4.082532453585372e-01, -4.279727107824792e-01, -4.512576137076570e-01, -4.606693330127283e-01, -8.632917812931781e-02, -1.224251610568246e-01, -8.118066200445406e-02, -1.378111807139005e+00, -6.503100247941730e-02, -6.503100247941740e-02, -4.395648127837971e-03, -9.955173286199361e-03, -1.319503418848882e-02, -5.919052306854099e-02, -5.052620586300777e-03, -1.226514037216525e-02, -4.529487719372446e-01, -4.499665752415740e-01, -4.512521709392355e-01, -4.518879949232799e-01, -4.514547651772309e-01, -4.514547651772309e-01, -4.412628622615183e-01, -3.751419056702937e-01, -3.949640181240261e-01, -4.139302382107538e-01, -4.043341914816213e-01, -4.050795686848780e-01, -5.051300166967607e-01, -1.727403818528447e-01, -1.999923692875943e-01, -2.932004111155205e-01, -2.333579978852622e-01, -2.333579978852622e-01, -3.770273344071738e-01, 3.621765625963297e-02, 2.602946607901102e-02, -2.633780457778478e-01, -7.171457749907909e-02, -2.522529844799245e-02, 3.592845289050281e-03, -3.723999233811519e-03, -9.133056572424955e-03, -2.165137483173488e-02, -1.264411622856725e-02, -1.264411622856986e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_r2scan50_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_r2scan50", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.672296078937205e-09, -1.672399278574466e-09, -1.672803958986174e-09, -1.671277398005913e-09, -1.672085059881724e-09, -1.672085059881724e-09, 8.954353418968207e-06, 8.952644382210981e-06, 8.906560640575896e-06, 8.922070562169016e-06, 8.924094334616322e-06, -3.287634157236817e-06, 9.198798369984565e-03, -1.725370840438276e-03, -1.937995605259239e-03, -1.865096268975091e-03, -1.880592442213482e-03, -1.880592442213482e-03, -1.845237844749462e-01, -1.692669561782901e-01, 5.813891776744803e-03, -7.402494875565250e-01, -4.221529790708635e-01, -4.221529790708630e-01, 1.896450271217062e+03, 1.355792454615257e+03, -8.947848596914295e+01, 1.517026738799020e+04, 9.102609202103820e+03, 9.102609202103820e+03, -7.806258978482125e-07, -7.807407040078201e-07, -7.806366735155186e-07, -5.168455287565735e-07, -7.806806004398166e-07, -7.806806004398166e-07, 9.681671326472561e-05, 9.215626882850647e-05, 1.006144754808175e-04, 9.615533881777451e-05, 9.250981560015632e-05, -2.937786737009061e-05, -2.128154031888353e-03, -1.399396359042692e-03, -2.998590328539818e-03, -2.382810375314898e-03, -1.968590047378879e-03, 7.430841822447931e-03, 1.892098999894107e+01, -2.480770846085751e-01, 2.492449770279142e+01, -3.341403234430549e-05, -1.603768253897062e+00, -1.603768253897058e+00, -7.385384200280568e+06, 1.483691940388193e+04, 1.328903870860636e+05, 9.961872430863484e+01, -3.221260248227476e+06, 4.255858345048976e+04, -1.150815073576633e-03, -1.407223628490535e-03, 6.351219056600675e-04, -1.263879596084165e-03, -1.302470470874504e-03, -1.302470470874504e-03, -1.247062453298946e-03, -3.856935705953798e-03, -2.916441264008961e-03, -2.138510475878957e-03, -2.518574256641457e-03, 1.014899850695508e-02, -1.280710979117505e-03, 7.316423122232085e-01, -4.404396782483454e-02, 7.544812658010647e-02, -2.349637405608545e-02, -2.349637405608546e-02, 2.519881272753839e-02, -1.022045126092445e+02, -3.831385569339594e+01, -1.185137837962724e-02, 4.286536652875011e+01, -7.295071476661425e+00, -8.111145283830119e+02, 3.531796733297129e+05, 1.554292132336973e+05, -9.131621329553960e+00, 6.698213559946787e+04, 6.698213559948368e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_r2scan50_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_r2scan50", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([8.524132513689216e-04, 8.524067516822618e-04, 8.523788988933083e-04, 8.524752728989517e-04, 8.524246434228656e-04, 8.524246434228656e-04, 2.699229497544309e-03, 2.700077183283725e-03, 2.722371788575891e-03, 2.713125849176608e-03, 2.714389646513444e-03, 2.411580641656022e-03, 1.678045855451714e-03, 9.644934525525901e-03, 9.906846422170511e-03, 9.816846640892591e-03, 9.836463510893805e-03, 9.836463510893805e-03, 2.237616068603170e-02, 2.184582237192066e-02, 3.453045125319812e-04, 3.208870399051387e-02, 2.783584183172769e-02, 2.783584183172765e-02, -6.082337502898258e-03, -4.939340035139017e-03, 6.324298721423230e-02, -9.947448174822071e-03, -1.175054995099663e-02, -1.175054995099663e-02, 1.852428810766467e-03, 1.853278096215627e-03, 1.852479791502923e-03, 2.644893936464116e-03, 1.852851858278565e-03, 1.852851858278565e-03, 3.598996065214325e-03, 3.811747216089208e-03, 3.421987412331231e-03, 3.623051310582209e-03, 3.800994753931209e-03, 3.982862181629203e-03, 9.118381431229370e-03, 7.809673779124570e-03, 1.005803616135332e-02, 9.231696819056457e-03, 8.883452924542744e-03, 6.933713579556775e-03, -1.569533937209865e-04, 2.572476344155667e-02, -1.345414560883907e-04, 4.195255658760954e-03, 3.695242001940637e-02, 3.695242001940626e-02, -1.731132347737398e-08, -9.091303578276796e-03, -3.672801317789784e-02, -6.303803982420245e-05, -1.049332101840348e-07, -2.048463638492848e-02, 5.711506944229438e-03, 6.648709844901046e-03, 3.811583314706088e-03, 6.125859514924946e-03, 6.267260697058474e-03, 6.267260697058474e-03, 5.825979504637018e-03, 1.019216807245038e-02, 9.163734401741563e-03, 7.965921223603841e-03, 8.603408281119086e-03, 2.778366843078986e-03, 7.992851496956112e-03, -4.722883307992352e-04, 1.750566706322530e-02, 1.903982790952984e-02, 1.494566999387941e-02, 1.494566999387942e-02, 1.817528664032974e-02, 6.326572574332424e-02, 6.069843670065180e-02, 1.193234342716189e-02, -1.574803994242612e-04, 4.858472636178036e-02, 8.444399641652986e-03, -4.185159204674157e-03, -1.699512085819652e-02, 5.018253997850160e-02, -2.558910939222889e-02, -2.558910939223501e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
