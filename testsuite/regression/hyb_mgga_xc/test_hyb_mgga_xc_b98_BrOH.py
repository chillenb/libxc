
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_b98_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b98", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.578212004457990e+01, -1.578214666477499e+01, -1.578232866763953e+01, -1.578189173183616e+01, -1.578213353695820e+01, -1.578213353695820e+01, -2.871890611223849e+00, -2.871871580918210e+00, -2.871449096909988e+00, -2.872697768642794e+00, -2.871891900390855e+00, -2.871891900390855e+00, -6.101137845365243e-01, -6.101956574820737e-01, -6.150588455691715e-01, -6.169308952425867e-01, -6.101302091705227e-01, -6.101302091705227e-01, -1.988009528378357e-01, -1.988605452069598e-01, -7.075780479051805e-01, -1.771282326019384e-01, -1.987613571550150e-01, -1.987613571550150e-01, -1.500796334088788e-02, -1.572546493898182e-02, -6.432160487391005e-02, -7.286298442203719e-03, -1.555903526356216e-02, -1.555903526356216e-02, -7.301020951352895e+00, -5.262378821350732e+00, -1.651782302620147e+00, -7.525019151505009e+00, -3.589207318335800e+00, -4.709610742807212e+00, -7.398212593383674e-01, -2.126830441620639e+00, -1.845815308794040e+00, -1.860246403358004e+00, -1.849294023319749e+00, -1.674997446801750e+00, -8.557929502509427e-01, -8.156444487375595e-01, -7.980196002779369e-01, -5.025520177473148e-01, -5.406630891765234e-01, -5.674807323464249e-01, -9.502046875602144e-02, -2.711499091116505e-01, -9.421488257400325e-02, -1.636570088269840e+00, -1.508175449206687e-01, -1.348106606101294e-01, -6.982952915465521e-03, -8.009393772698437e-03, -6.844118227851643e-03, -7.021612798748700e-02, -7.320479794543709e-03, -8.902547115536136e-03, -8.991569716000831e-01, -3.193790711290753e-01, -3.235797778883404e-01, -8.965321642195008e-01, -3.256853598090790e-01, -8.956538688768307e-01, -3.467716065823175e-01, -4.567371534059440e-01, -7.474715160099836e-01, -4.213889920852661e-01, -5.077253713835431e-01, -7.923788445181017e-01, -9.750207433918248e-01, -1.628864157335059e-01, -1.861310692658928e-01, -2.311011882505406e-01, -3.730602531417490e-01, -3.333634644107257e-01, -4.187933300116359e-01, -5.955885647996231e-02, -8.073965150971349e-02, -3.039231885530713e-01, -8.138823709494757e-02, -1.132045714735636e-01, -1.942424600538132e-02, -2.212096139105975e-03, -4.800290436698268e-03, -7.679948697383754e-02, -7.716487199038486e-03, -7.716487942341086e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_b98_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b98", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.332553316830900e+01, -2.332561054461424e+01, -2.332596900651659e+01, -2.332470222405030e+01, -2.332557386080350e+01, -2.332557386080350e+01, -3.722575950302808e+00, -3.722615835138448e+00, -3.723867929771614e+00, -3.722520480149598e+00, -3.722612358017645e+00, -3.722612358017645e+00, -7.129085213096295e-01, -7.114977567638990e-01, -6.720282907611268e-01, -6.787296135298957e-01, -7.124004381226920e-01, -7.124004381226920e-01, -1.878027553175610e-01, -1.914964965274256e-01, -8.684754012674448e-01, -1.747084869375815e-01, -1.888908166010665e-01, -1.888908166010665e-01, -2.062757793974454e-02, -2.160311599579961e-02, -8.685272713686168e-02, -9.952697815739667e-03, -2.137835772370605e-02, -2.137835772370606e-02, -8.415153365230072e+00, -5.455270117035288e+00, -2.293941860560417e+00, -9.214853811858392e+00, -5.892723419973930e+00, -5.522614728138818e+00, -1.020015225247593e+00, -1.991583434473096e+00, -1.926786334523622e+00, -1.939998498732826e+00, -1.968257277483034e+00, -2.015199893764382e+00, -1.098243944460393e+00, -8.401030220288006e-01, -9.827112065962388e-01, -6.567024452526236e-01, -6.754457312259152e-01, -6.681387291139324e-01, -1.398523820306141e-01, -3.555900577166932e-01, -1.387344703270282e-01, -2.125151263624592e+00, -1.455306208283966e-01, -9.301452214022832e-02, -9.590262973270751e-03, -1.096124043155637e-02, -1.169377900169190e-02, -1.024867214973385e-01, -9.997900623080872e-03, -1.410625002221532e-02, -1.202048111028442e+00, -4.406810587828212e-01, -4.417124591686646e-01, -1.199570238896154e+00, -4.421708391791795e-01, -1.198685832624091e+00, -4.370688008599595e-01, -5.545232260469376e-01, -8.949985544230751e-01, -6.750369846966475e-01, -5.958537370487854e-01, -1.032845421061495e+00, -1.242985746605345e+00, -2.405117279855141e-01, -2.682763213809573e-01, -3.194570138336575e-01, -3.586177545568960e-01, -3.306051035122267e-01, -4.992672146953694e-01, -8.096906684360181e-02, -1.087470341238447e-01, -3.763668772181193e-01, -1.218790527337820e-01, -1.339208319310571e-01, -3.012917001549593e-02, -3.023432264901923e-03, -8.386718020001382e-03, -1.193647903572021e-01, -1.222300379973276e-02, -1.222300648647466e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_b98_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b98", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.004261007179825e-09, -4.004202778010283e-09, -4.003968438417818e-09, -4.004922158397945e-09, -4.004230063727136e-09, -4.004230063727136e-09, -6.280219353698126e-06, -6.280158641343819e-06, -6.277367879532370e-06, -6.275271067554051e-06, -6.280092874471262e-06, -6.280092874471262e-06, -3.993763036508326e-03, -4.008789223332458e-03, -4.426888109412714e-03, -4.286593521317494e-03, -3.999237336799708e-03, -3.999237336799708e-03, -5.158340610641887e-01, -4.962726086178772e-01, -2.052858588580237e-03, -7.020967666644314e-01, -5.103637931579119e-01, -5.103637931579118e-01, 7.188512883981468e+01, 6.457108406779163e+01, 1.424647017251742e+00, 2.159534968578066e+02, 6.760572824043200e+01, 6.760572824043204e+01, -4.519781736441174e-08, -1.030261548657959e-06, 1.367203278014501e-06, 5.353318257492148e-08, 7.578839316624656e-08, -1.151306228246659e-06, 2.647727094150461e-05, -4.715241641706655e-05, -5.841818209817190e-05, -5.701261332617404e-05, -5.604874832652525e-05, -5.744475516818782e-05, 1.245011666208583e-03, -4.612990498483096e-04, 8.213905259866316e-04, -6.836119347698966e-03, -5.096177717301232e-03, -4.879699736583662e-03, 1.972591783444091e+00, 3.136361765786076e-02, 2.205047919180087e+00, -6.382864742579533e-05, -1.253246244776620e+00, -2.929505412920431e+00, 2.884310623539940e+02, 1.960757366583604e+02, 7.655803352072830e+03, 6.390024677904233e+00, 2.666955754217291e+02, 2.802483328181122e+03, 1.389371367603882e-02, 7.518794583971840e-02, 9.079630882443020e-02, 1.031587310677296e-02, 9.878543220075577e-02, 9.400826788016875e-03, 1.253592658482957e-01, -1.014808885330752e-02, 1.895639344793568e-03, 3.188716023397557e-02, -6.666961151864942e-03, 3.272737446202937e-03, 1.058170738095343e-03, 2.221534021376869e-01, 1.432720935543173e-01, 7.948994000420140e-02, -4.495711584195197e-02, -6.447666869037687e-02, -1.580380360388824e-02, 1.806687655857331e+00, 7.615866000449559e-01, -5.208919724675731e-02, 4.290787061901448e+00, -1.018168633157172e+00, 3.305933703900503e+02, 3.328109422602538e+03, 1.251661351431442e+04, 7.229486315897424e+00, 4.733710856854123e+03, 4.733709222557196e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_b98_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b98", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [-1.692949537908061e-04, -1.692944936786715e-04, -1.692930742452487e-04, -1.693006521592198e-04, -1.692947050297010e-04, -1.692947050297010e-04, -1.060345017273317e-03, -1.060341380436850e-03, -1.060187977269780e-03, -1.060070205009768e-03, -1.060339740031917e-03, -1.060339740031917e-03, -4.891285789120478e-03, -4.894617714495590e-03, -4.980633753877458e-03, -4.948056936085893e-03, -4.892507675437293e-03, -4.892507675437293e-03, -1.401397652421430e-02, -1.406341371417657e-02, -4.235041154339766e-03, -7.233235289029053e-03, -1.403982171761881e-02, -1.403982171761881e-02, -7.328828525694510e-08, -9.439621446714505e-08, -4.537237835911787e-05, -1.050046904966225e-09, -9.405438698805955e-08, -9.405438698758515e-08, -9.785222845223377e-05, -6.457758368441349e-04, -5.332121111598585e-07, -4.319745842368354e-05, -6.192707060804466e-04, -7.051370219791534e-04, -7.235915940490840e-08, -1.501728385964081e-03, -1.782548783567230e-03, -1.770829371127655e-03, -1.771987661601792e-03, -1.788124765569381e-03, -1.281921208995283e-04, -2.221259966962620e-03, -3.796817533423209e-04, -5.749417349599178e-03, -5.282852271331713e-03, -5.297847625720806e-03, 2.944917499767993e-06, -1.926081710745035e-04, 8.909926500595378e-09, -1.887780670433234e-03, -7.949649036650470e-03, -1.736401518966158e-02, -5.146189732129410e-12, -3.550721291322694e-20, 4.870382732021472e-21, 2.106511052809633e-06, -1.073135414549789e-10, 3.496100634479498e-14, -1.062357449712628e-15, -5.706871927113753e-15, -8.337077529748618e-19, -1.102605279888247e-09, -1.211882946334266e-14, -4.995419916457884e-19, -2.102497676339080e-18, -6.059523179191422e-03, -6.489538549882722e-04, -3.845475268482113e-03, -5.843589817982542e-03, -7.680869492158925e-05, -1.320238064064624e-04, -5.359564973807747e-08, -1.524098469307896e-08, -1.910231395686750e-05, -6.569525007897131e-03, -8.849848985827210e-03, -6.711646143027064e-03, -1.283423770840858e-07, -4.772601052404668e-05, -8.730049593157424e-03, 5.470586291283100e-08, -2.772426633114288e-03, 9.476098098882445e-11, -1.237410952007957e-16, 1.074515475975103e-14, 3.345665892786063e-03, 4.741109302198379e-10, 3.062646599990820e-14]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_b98_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b98", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [6.229919367896256e-04, 6.229875497419039e-04, 6.229730384242560e-04, 6.230447388471627e-04, 6.229895793370318e-04, 6.229895793370318e-04, 4.219285374306114e-03, 4.219269548476763e-03, 4.218599657881005e-03, 4.217835347460401e-03, 4.219266408282477e-03, 4.219266408282477e-03, 1.927561090815332e-02, 1.928697976812731e-02, 1.958111271647777e-02, 1.941770313917122e-02, 1.927976341103970e-02, 1.927976341103970e-02, 5.040835295419769e-02, 5.057824479474853e-02, 1.688305479611912e-02, 2.678142190835336e-02, 5.051610363906087e-02, 5.051610363906089e-02, -1.181097700592746e-03, -1.212708485051400e-03, -1.574655869658639e-03, -2.773693398513241e-04, -1.234633737274546e-03, -1.234633737274546e-03, 1.030189863598065e-04, 2.307958210185455e-03, -3.039117737069204e-03, -1.179351682745903e-04, -1.520053283997354e-04, 2.578046761999200e-03, -2.751651978602792e-03, 5.741864431178963e-03, 6.896715448797735e-03, 6.840271922279524e-03, 6.850823343591180e-03, 7.006983566054326e-03, -2.040821461341650e-03, 6.935001283855728e-03, -2.733965325692794e-04, 2.233740795709722e-02, 1.901717197893495e-02, 1.857681181584002e-02, -2.309726433987783e-02, -2.763974145663661e-03, -2.482209025919674e-02, 7.474932106994890e-03, 2.873405859778862e-02, 6.642457242593046e-02, -3.987773456998359e-04, -3.676828834285762e-04, -7.084355582183670e-03, -1.579813962536651e-02, -3.454938082297248e-04, -3.630510211729130e-03, -2.314264125165597e-02, -1.886660116643805e-01, -2.115973370782303e-01, -2.189424685835590e-02, -2.208987865268455e-01, -2.102163429929557e-02, -9.290718752220385e-02, 2.069385981909207e-02, -3.646551678174844e-03, -6.485842117394806e-02, 1.723753844376469e-02, -6.812244078227272e-03, -8.011167838610740e-04, -4.089679671421365e-02, -4.055348110035484e-02, -3.539018723466181e-02, 2.232779743440419e-02, 3.154966890184537e-02, 2.428370222917348e-02, -1.711442373970011e-03, -1.597882255226762e-03, 3.212981888568807e-02, -2.796200878975056e-02, 8.432473529932536e-03, -6.294704429553588e-03, -1.027549062840292e-04, -4.002331952717414e-03, -4.267779661496583e-02, -3.693408428715576e-03, -3.693406541857935e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
