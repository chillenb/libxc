
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_pwb6k_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_pwb6k", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.159284618117978e+01, -1.159285679523580e+01, -1.159294937710050e+01, -1.159277462530999e+01, -1.159285140109255e+01, -1.159285140109255e+01, -1.975520536513226e+00, -1.975501420667560e+00, -1.975043452520456e+00, -1.976052982625930e+00, -1.975520046830784e+00, -1.975520046830784e+00, -4.219129382156065e-01, -4.217811762040817e-01, -4.193981887557182e-01, -4.214686113793670e-01, -4.218623410254395e-01, -4.218623410254395e-01, -1.318557601695005e-01, -1.327346687105677e-01, -5.063511788970775e-01, -1.069112860327212e-01, -1.321115532045965e-01, -1.321115532045965e-01, -5.255592016240604e-04, -6.098635026411402e-04, -2.499454350611029e-02, -4.267001424804664e-05, -6.022711504420197e-04, -6.022711504420197e-04, -2.816938291283394e+00, -2.816454201657162e+00, -2.816891907002856e+00, -2.816515482841560e+00, -2.816685619180666e+00, -2.816685619180666e+00, -1.208004797234028e+00, -1.213335981525821e+00, -1.208576924975056e+00, -1.212725236045632e+00, -1.210876024033585e+00, -1.210876024033585e+00, -3.484191479565402e-01, -3.646986750887253e-01, -3.345316325383040e-01, -3.402184559867956e-01, -3.581097498618023e-01, -3.581097498618023e-01, -8.317982760694263e-02, -1.410200353298317e-01, -8.205392222368965e-02, -1.052057429846406e+00, -9.385493145798907e-02, -9.385493145798907e-02, -3.930383072965769e-05, -5.994188078747687e-05, -4.253166960610132e-05, -4.771609087885129e-02, -5.517954206818254e-05, -5.517954206818246e-05, -3.363628837145533e-01, -3.384366017133030e-01, -3.377685705479740e-01, -3.372061713547843e-01, -3.374938984440441e-01, -3.374938984440441e-01, -3.267746037504812e-01, -3.111188563218184e-01, -3.163374036001881e-01, -3.206796913050662e-01, -3.184722894193142e-01, -3.184722894193142e-01, -3.836160908800089e-01, -1.684370368516760e-01, -1.902881254799338e-01, -2.260398218594510e-01, -2.067047113013382e-01, -2.067047113013382e-01, -2.847966831825494e-01, -1.952317236785511e-02, -3.850936206342302e-02, -2.106863890482968e-01, -6.751983895347538e-02, -6.751983895347537e-02, -7.452271608044364e-04, -1.389998802258364e-06, -9.483970130742052e-06, -6.447685379257589e-02, -4.052581467528003e-05, -4.052581467527986e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_pwb6k_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_pwb6k", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.365873999445057e+01, -1.365878348107678e+01, -1.365898565339719e+01, -1.365827333079771e+01, -1.365876286031402e+01, -1.365876286031402e+01, -2.285725149503645e+00, -2.285734970001147e+00, -2.286071533809132e+00, -2.285574702464679e+00, -2.285741879760372e+00, -2.285741879760372e+00, -4.867114241758996e-01, -4.859709823715583e-01, -4.664971243009564e-01, -4.683391357407907e-01, -4.864396962131555e-01, -4.864396962131555e-01, -1.419486500827964e-01, -1.437680312943889e-01, -6.159830123594785e-01, -1.143105239589498e-01, -1.425010210327174e-01, -1.425010210327174e-01, -2.220580470657830e-03, -2.575234052146028e-03, -7.465333693403943e-02, -1.792503367074196e-04, -2.543209533272886e-03, -2.543209533272886e-03, -3.414710377305436e+00, -3.415977181625642e+00, -3.414839304995821e+00, -3.415824352534678e+00, -3.415360448530603e+00, -3.415360448530603e+00, -1.272423737679187e+00, -1.280991159312010e+00, -1.268138026935745e+00, -1.274780052237674e+00, -1.283904145733002e+00, -1.283904145733002e+00, -4.195815509669439e-01, -4.574135571961704e-01, -4.031273284718753e-01, -4.225508965669271e-01, -4.339568133206289e-01, -4.339568133206289e-01, -1.085002160869321e-01, -1.457699330454175e-01, -1.046379711820235e-01, -1.319258923726385e+00, -1.054032077592202e-01, -1.054032077592202e-01, -1.650425769182384e-04, -2.521571730563880e-04, -1.788463383791637e-04, -9.706823668763216e-02, -2.321561485430496e-04, -2.321561485430465e-04, -4.348947562498320e-01, -4.315835529385549e-01, -4.328866065754803e-01, -4.337786841941076e-01, -4.333476068649192e-01, -4.333476068649192e-01, -4.216966867746871e-01, -3.584572898087990e-01, -3.766886620369287e-01, -3.943323566299877e-01, -3.853906220821904e-01, -3.853906220821904e-01, -4.791388746188608e-01, -1.754909999444481e-01, -2.048468158171056e-01, -2.625418497908375e-01, -2.307946004727297e-01, -2.307946004727298e-01, -3.290845801964873e-01, -6.426898542849953e-02, -9.439948077667966e-02, -2.524529531496451e-01, -9.663950934470374e-02, -9.663950934470367e-02, -3.145039529990285e-03, -5.778080546622227e-06, -3.962094875632968e-05, -9.188971479903989e-02, -1.703602266742183e-04, -1.703602266742171e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_pwb6k_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_pwb6k", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.442551363321265e-09, -4.442538108685495e-09, -4.442407460401592e-09, -4.442626161584328e-09, -4.442544968330892e-09, -4.442544968330892e-09, -4.789887046737691e-06, -4.790097468057258e-06, -4.795643242054390e-06, -4.790113715356996e-06, -4.789870539460645e-06, -4.789870539460645e-06, -1.548994774285106e-03, -1.566721483809221e-03, -1.967458630629414e-03, -1.967718285965645e-03, -1.555547628791460e-03, -1.555547628791460e-03, -2.232326250244765e-01, -2.156913434011017e-01, 1.510049352656502e-04, -3.848308097990184e-01, -2.209472442773510e-01, -2.209472442773510e-01, 6.797519373884771e+01, 6.870667040455386e+01, 1.651619372259619e+01, 4.157568103159547e+01, 7.136451368865839e+01, 7.136451368865839e+01, -1.262198666606566e-06, -1.263251320745993e-06, -1.262304251394557e-06, -1.263122523676944e-06, -1.262740978257549e-06, -1.262740978257549e-06, -3.667980050988945e-05, -3.606445092372438e-05, -3.666639002787020e-05, -3.618803368653557e-05, -3.627295087084189e-05, -3.627295087084189e-05, -3.451276869748476e-03, -7.826453808175444e-04, -3.325613375002060e-03, 3.018537220015206e-04, -3.181490395404738e-03, -3.181490395404738e-03, -4.573517819343928e-02, -1.638077731437573e-01, -1.351499074932632e-01, -4.111867644655023e-05, -4.398234338647482e-01, -4.398234338647482e-01, 4.388847361734976e+01, 4.502778025883482e+01, 1.282577661042255e+02, 5.247021328806603e+00, 6.662808674822844e+01, 6.662808674822749e+01, -4.423773694061455e-03, -3.797510866663277e-03, -3.781305793338633e-03, -3.912560962904718e-03, -3.822061588118671e-03, -3.822061588118672e-03, -4.156218200858907e-03, -7.372894402278913e-03, -6.376964847411530e-03, -5.286772604870059e-03, -5.846254886728345e-03, -5.846254886728344e-03, -3.464930083514400e-04, -8.766119230262817e-02, -5.350376362787167e-02, -2.092617315662049e-02, -3.609794869489795e-02, -3.609794869489794e-02, -9.514044720823693e-03, 1.742504029824896e+01, 8.284947480244465e+00, -1.925348857276545e-02, 5.486613258212591e-01, 5.486613258212516e-01, 5.189053656678255e+01, 6.560603723394003e+01, 6.094675598193101e+01, 6.340525536323374e-01, 9.621570881449031e+01, 9.621570881449047e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_pwb6k_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_pwb6k", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_pwb6k_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_pwb6k", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-1.362623393010055e-05, -1.362646283459850e-05, -1.362702217797269e-05, -1.362328334692700e-05, -1.362635850678309e-05, -1.362635850678309e-05, -2.568053349216496e-04, -2.568458018450047e-04, -2.579421234475318e-04, -2.559618801706064e-04, -2.568242455850299e-04, -2.568242455850299e-04, -2.128825142383757e-03, -2.100997404079882e-03, -1.450846976004204e-03, -1.465080499470373e-03, -2.118783619123125e-03, -2.118783619123125e-03, -3.464294078961483e-03, -3.786613863318172e-03, -2.371416390934543e-03, -1.042167017058312e-03, -3.563279247697587e-03, -3.563279247697587e-03, -2.528443829711972e-06, -2.884419950550283e-06, -5.905176679717431e-05, -2.285454732864393e-07, -2.910974422885715e-06, -2.910974422885716e-06, -2.153376705804763e-04, -2.163972641581613e-04, -2.154429359128337e-04, -2.162668224621899e-04, -2.158843185898039e-04, -2.158843185898039e-04, -2.341126338152197e-04, -2.388074948915695e-04, -2.249162620249103e-04, -2.284832033967522e-04, -2.499393947638016e-04, -2.499393947638016e-04, -6.111757844325408e-03, -1.207297464298791e-02, -6.254868953028759e-03, -1.169543776549041e-02, -6.483808410458022e-03, -6.483808410458022e-03, -3.678764387634650e-04, -1.260476899996120e-03, -4.167496205885125e-04, -1.882853380339620e-03, -6.992560834666779e-04, -6.992560834666779e-04, -2.190606798188087e-07, -3.199007673235597e-07, -4.058063549987472e-07, -1.541396988989862e-04, -3.636408001839639e-07, -3.636408001839638e-07, -1.705072387573211e-02, -1.381120107629936e-02, -1.486012068033567e-02, -1.575318651093155e-02, -1.529720989927859e-02, -1.529720989927859e-02, -1.868079632769298e-02, -4.360422468606618e-03, -6.382852216952728e-03, -9.400384352331754e-03, -7.726857947437871e-03, -7.726857947437871e-03, -1.082755313675478e-02, -1.776863292988466e-03, -2.771066924022438e-03, -6.106988444231659e-03, -4.200253856039846e-03, -4.200253856039843e-03, -4.712289339848237e-03, -3.978681010605772e-05, -9.509102587620869e-05, -1.002974071901047e-02, -3.443397316018585e-04, -3.443397316018589e-04, -2.947874678860728e-06, -1.364046315824676e-08, -7.419061222597099e-08, -3.758351213193031e-04, -3.353665146895751e-07, -3.353665146895740e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
