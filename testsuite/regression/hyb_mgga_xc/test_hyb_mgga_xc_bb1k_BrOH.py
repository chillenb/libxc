
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_bb1k_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_bb1k", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.162027952288824e+01, -1.162030640269321e+01, -1.162044701203708e+01, -1.162000632110636e+01, -1.162029352684548e+01, -1.162029352684548e+01, -2.007093797235490e+00, -2.007079630990246e+00, -2.006723225780692e+00, -2.007013230007991e+00, -2.007098933930851e+00, -3.262795744205730e+75, -4.965221800348236e-01, -6.023872189293756e+120, -4.319403372816793e+77, -7.636596760373964e+103, -1.993380999833728e+77, -7.198421248927525e+103, -2.831454950094388e+47, -3.491258906193751e+105, -6.316487735161223e-01, -1.939312348449892e+113, -3.737809665485800e+105, -9.516564633418892e+119, -7.651505415018463e+86, -1.595352891094499e+102, -2.101696230777700e+112, -3.224372416141435e+117, -2.591919303684502e+137, -3.456334265191462e+92, -3.095151662891215e+81, -9.676058281621606e+117, -9.292623780304349e+98, -2.884331857786780e+00, -2.564474181046006e+108, -3.850049169378582e+84, -1.184019497326104e+00, -1.188409047857285e+00, -1.182409447451441e+00, -1.185727716782555e+00, -1.189119515942854e+00, -1.946597021391619e+76, -2.357279322143673e+87, -2.018424821667216e+106, -3.269420219575937e+87, -2.662536023727806e+106, -2.106692971479850e+87, -3.815378527416347e-01, -3.835633510955677e-01, -3.114602912223808e+98, -3.639040647940551e-01, -2.538230993890180e+30, -4.212417508696013e+79, -1.324734774816710e+123, -1.147347299079627e+01, -8.070167296025885e+83, -4.779015960020497e+141, -6.516794178542316e-01, -1.083092322258216e+01, -8.996119137776497e+83, -1.084973214832056e+116, -3.826527184433749e+110, -3.584766882802450e-01, -5.917968588352356e+101, -2.597896547142371e+79, -2.745682937744861e+118, -2.601287718921691e+111, -1.035065682276985e+78, -3.083998127123542e+111, -1.353097213704479e+97, -2.098563690886368e+120, -3.367118634168269e-01, -4.550811738188541e+120, -2.353828263943825e-01, -7.650643578121971e+109, -2.599858201859140e-01, -5.136128307175551e+85, -1.089160266112946e+97, -3.121581620566863e-01, -5.307013285090835e+126, -2.152196955284530e+126, -1.243096318501786e+124, -3.824501753697871e-01, -1.607568408851177e+125, -4.521008579017852e+127, -3.308598698868178e+133, -3.990342104928767e+26, -1.084227759108863e+90, -2.283438170412517e+115, -1.044983853466809e+129])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_bb1k_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_bb1k", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.539324627101749e+01, -1.539328415763700e+01, -1.539348053845128e+01, -1.539285965121640e+01, -1.539326602156768e+01, -1.539326602156768e+01, -2.511318181529014e+00, -2.511333948245119e+00, -2.511896475882019e+00, -2.511878399992727e+00, -2.511334435545798e+00, -2.405390181989305e+73, -4.607103718706603e-01, -2.796548357679940e+118, -3.072203255129088e+75, -4.102860718720066e+101, -1.423921380420697e+75, -3.868680065311678e+101, -3.178544420725101e+45, -1.837912686748957e+103, -5.236999238522413e-01, -9.523442597455954e+110, -1.967100927420192e+103, -4.426580785157114e+117, -4.788822508403616e+84, -8.562708075729930e+99, -1.036328884799037e+110, -1.510715540841864e+115, -1.047912256220599e+135, -2.038393268196799e+90, -2.124061286410273e+79, -4.629390919696438e+115, -5.278615063732477e+96, -3.791054500601532e+00, -1.332794928718027e+106, -2.548180091923502e+82, -1.408656507638368e+00, -1.420404157169129e+00, -1.403814031538002e+00, -1.413043923925941e+00, -1.422853086589373e+00, -1.416529637954118e+74, -1.495926494516359e+85, -1.060347652146821e+104, -2.071010818420072e+85, -1.396677092202912e+104, -1.337864996125664e+85, -4.567647588966492e-01, 6.637451836901372e-02, -1.752352989358460e+96, 5.811780617736816e-02, -4.410631995614738e+28, -2.897701730871622e+77, -5.999645987137532e+120, 4.502315496601647e+00, -5.203438552062024e+81, -1.870800616533651e+139, 2.277809975929025e-01, 4.259533639188344e+00, -5.794790242193287e+81, -5.234812191595594e+113, -1.934408148582144e+108, -4.631611270133519e-01, -3.242090318431448e+99, -1.807271965537220e+77, -1.298635271370204e+116, -1.305360770021486e+109, -7.317708649125761e+75, -1.546021420022963e+109, -7.751675889784595e+94, -9.771015529703301e+117, -4.109916675087001e-01, -2.114705471125482e+118, -1.462469897665070e-01, -3.879920719847296e+107, -2.590777332694637e-01, -3.310037268633763e+83, -6.230259026948520e+94, -3.387970476785733e-01, -2.329490116833520e+124, -9.484737494516428e+123, -5.607796245193640e+121, 8.401592314761240e-02, -7.154934733692639e+122, -1.962723719427939e+125, -1.366756589864572e+131, -7.144290292934721e+24, -6.621665754258167e+87, -1.088249980900779e+113, -4.475350193448288e+126])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_bb1k_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_bb1k", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.255786151764971e-09, -5.255745793583763e-09, -5.255528262307016e-09, -5.256190863987530e-09, -5.255765169185664e-09, -5.255765169185664e-09, -6.201318805865473e-07, -6.215149292509277e-07, -6.630912898701490e-07, -6.472759894859400e-07, -6.205314283605670e-07, 3.611183973768950e-07, 2.824070752448762e-02, 3.941097385029284e-04, 3.799431167664001e-04, 3.938778783996458e-04, 3.944992245747863e-04, 3.944992245747863e-04, 1.246984943346839e-01, 1.239366518981627e-01, 1.833418120561530e-02, 1.045812477662681e-01, 1.243750857838237e-01, 1.243750857838237e-01, 1.483002659351524e+00, 1.461127723634534e+00, 3.688577212357971e-01, 5.769407226911740e-01, 1.530755950642056e+00, 1.530755950642056e+00, 1.453736687930685e-07, 1.458043041888032e-07, 1.454218615150981e-07, -1.203964002740838e-06, 1.455886560898379e-07, 1.455886560898379e-07, 5.591432169396352e-05, 4.940215481392531e-05, 5.888916971703540e-05, 5.349217227930761e-05, 4.792768325421223e-05, 4.560527694729273e-06, 2.307464554648975e-03, 2.403905038768437e-03, 2.404420631256585e-03, 2.718201463881373e-03, 2.236944059199423e-03, 9.044455293717061e-03, 1.424613078491863e+03, 6.301827137802912e-02, 1.429793811680164e+03, 1.018104838934350e-05, 1.811533858886079e-01, 1.811533858886079e-01, 1.899209504444061e+11, 7.205778765347505e-01, 2.916964238351237e+00, 2.916715210547249e+04, 1.464360686938554e+11, 8.967688847525177e-01, 5.839777880290904e-03, 5.126884935562507e-03, -5.064674466525049e-04, 5.558721673500573e-03, 5.458326463393287e-03, 5.458326463393287e-03, 6.410891160410613e-03, 4.234358622639493e-03, 4.564271664013611e-03, 5.062883048958963e-03, 4.777443233609706e-03, 1.136441536776617e-02, 1.701368846026909e-03, 5.303504570372818e+00, 2.504554727979144e-02, 3.216067204079088e-01, 1.963120549010907e-02, 1.963120549010909e-02, 7.274713480640542e-02, 3.552370283632718e-01, 2.774451865529561e-01, 2.176388178964183e-02, 4.174584455366257e+03, 2.945340602547146e-01, 5.646075952423090e-01, 8.830044668346589e-01, 1.664516591406490e+00, 3.603084291008690e-01, 1.281384950950778e+00, 1.281384950950780e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_bb1k_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_bb1k", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-3.917658360446694e-05, -3.917641123231473e-05, -3.917551531534577e-05, -3.917834055818163e-05, -3.917649376224852e-05, -3.917649376224852e-05, -9.887043367868360e-04, -9.887007300229396e-04, -9.885308710347032e-04, -9.884593417231744e-04, -9.886951608360740e-04, -1.088127057943561e-04, -1.609190699825020e-02, -5.445291569199639e-04, -4.457820990753864e-04, -4.906601057525088e-04, -5.472813192835486e-04, -5.472813192835486e-04, -3.206213529051575e-03, -3.405537879639008e-03, -1.195932061492321e-02, -5.814545647093815e-04, -3.261184954610921e-03, -3.261184954610921e-03, -2.854209542879652e-06, -3.221278524971632e-06, -5.226901242205083e-05, -1.293516305052723e-07, -3.273217523713364e-06, -3.273217523713362e-06, -2.260864214897733e-04, -2.271450500191080e-04, -2.262036616335068e-04, -4.884199834238407e-04, -2.266163582445033e-04, -2.266163582445033e-04, -2.666387509531268e-03, -2.634635771704018e-03, -2.679393442276249e-03, -2.654371911375143e-03, -2.628347316080931e-03, -2.306579532512466e-04, -3.845479206558942e-03, -6.138139092064929e-03, -3.099991179148219e-03, -4.630928458942915e-03, -4.456210690564821e-03, -1.896391590989731e-02, -3.163010342284969e-01, -1.247515588512206e-03, -3.222752639339310e-01, -6.611528428383694e-04, -5.957261388792424e-04, -5.957261388792424e-04, -1.643503726705519e+01, -2.149252785121762e-07, -3.744939857928815e-07, -6.222606556189200e-01, -1.566836490373383e+01, -2.037749800117448e-07, -1.545821994428226e-02, -1.286815826809269e-02, -1.926676861498073e-02, -1.443319322647636e-02, -1.406840723169111e-02, -1.406840723169111e-02, -1.518402873384943e-02, -4.466058127057368e-03, -6.217108914199265e-03, -8.637116875835189e-03, -7.277045233318473e-03, -2.296871231034412e-02, -4.772113583317611e-03, -8.655545137078187e-02, -2.494354187499923e-03, -4.513165412366922e-02, -3.364268121579992e-03, -3.364268121579991e-03, -2.999566309076233e-02, -3.972220325135665e-05, -7.876582863330349e-05, -5.684563294075566e-03, -4.271985534400362e-01, -2.856852191688238e-04, -1.725217491921660e-06, -5.898705933133634e-09, -7.323067647325690e-08, -3.037106231478319e-04, -1.809211503248215e-07, -1.809211503248210e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
