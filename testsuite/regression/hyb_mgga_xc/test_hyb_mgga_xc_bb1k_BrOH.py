
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_bb1k_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_bb1k", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.229158008521141e+01, -1.229159380828653e+01, -1.229169942759293e+01, -1.229147378027444e+01, -1.229158695170636e+01, -1.229158695170636e+01, -2.087943110890801e+00, -2.087925395154605e+00, -2.087509581277754e+00, -2.088454836303376e+00, -2.087943904804106e+00, -2.087943904804106e+00, -4.439863781574292e-01, -4.438213963014632e-01, -4.407297744225956e-01, -4.428890256859352e-01, -4.439235612126110e-01, -4.439235612126110e-01, -1.387868085896474e-01, -1.396188184382214e-01, -5.344193011776522e-01, -1.161794111281900e-01, -1.390255674430874e-01, -1.390255674430874e-01, -3.681633116870429e-02, -3.723966552984651e-02, -6.674795165588582e-02, -3.332500207719493e-02, -3.687757875175295e-02, -3.687757875175295e-02, -2.991683429589846e+00, -2.991324642808523e+00, -2.991649685257689e+00, -2.991370692785255e+00, -2.991495194688663e+00, -2.991495194688663e+00, -1.268901745474425e+00, -1.274605002302040e+00, -1.269352635878940e+00, -1.273782098950810e+00, -1.272211585565985e+00, -1.272211585565985e+00, -3.678348979694747e-01, -3.872649624972939e-01, -3.530482131293912e-01, -3.606068925126807e-01, -3.783713305808877e-01, -3.783713305808877e-01, -9.996425609178342e-02, -1.503276615782251e-01, -9.751097428053106e-02, -1.120326356157632e+00, -1.051105590554575e-01, -1.051105590554575e-01, -3.269802776553428e-02, -3.358134864673275e-02, -2.568310190442644e-02, -7.586789613118697e-02, -3.048957716307089e-02, -3.048957716307089e-02, -3.583948818004538e-01, -3.596816113067499e-01, -3.592434612105612e-01, -3.588866064291879e-01, -3.590671613834550e-01, -3.590671613834550e-01, -3.482779797998236e-01, -3.273044462076832e-01, -3.336065242010041e-01, -3.392307982723150e-01, -3.363442579417770e-01, -3.363442579417770e-01, -4.072567432426131e-01, -1.777126481040257e-01, -1.998735753901951e-01, -2.375874466726201e-01, -2.169735618003799e-01, -2.169735618003799e-01, -2.995264036055800e-01, -6.672848685920311e-02, -7.450830518587385e-02, -2.217777202482449e-01, -8.489112225598269e-02, -8.489112225598268e-02, -4.044868919181209e-02, -2.388340290053209e-02, -2.737386321129512e-02, -8.083306638366962e-02, -2.735147151717585e-02, -2.735147151717585e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_bb1k_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_bb1k", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.473719116993985e+01, -1.473723874593088e+01, -1.473745896433189e+01, -1.473667967644981e+01, -1.473721619404834e+01, -1.473721619404834e+01, -2.457538373480405e+00, -2.457551021275689e+00, -2.457971587591458e+00, -2.457356930464059e+00, -2.457557341774880e+00, -2.457557341774880e+00, -5.179834366214650e-01, -5.171230911432063e-01, -4.937572220306839e-01, -4.958437404087014e-01, -5.176683694086791e-01, -5.176683694086791e-01, -1.453897341029936e-01, -1.478383827833125e-01, -6.569162212357621e-01, -1.034384521346787e-01, -1.461438032641574e-01, -1.461438032641574e-01, -1.275498474065311e-02, -1.310290926475051e-02, -3.585875000517627e-02, -8.927586296753196e-03, -1.297148545605043e-02, -1.297148545605043e-02, -3.680376611342871e+00, -3.681733707603421e+00, -3.680514894841181e+00, -3.681570156096590e+00, -3.681072994888721e+00, -3.681072994888721e+00, -1.349639444092340e+00, -1.359559818855364e+00, -1.343886996335914e+00, -1.351605502504463e+00, -1.363871178709404e+00, -1.363871178709404e+00, -4.486410508863767e-01, -4.891187653868290e-01, -4.306659070597828e-01, -4.513672349195164e-01, -4.643080790269654e-01, -4.643080790269654e-01, -7.401658031310579e-02, -1.408858328064006e-01, -7.324869763948143e-02, -1.416098995638270e+00, -8.626168967533425e-02, -8.626168967533425e-02, -8.704886973998863e-03, -9.304231728221321e-03, -7.061673019674398e-03, -4.731921963903085e-02, -8.459173217972883e-03, -8.459173217972875e-03, -4.655920212566996e-01, -4.618507202797493e-01, -4.632182305358840e-01, -4.642542708492303e-01, -4.637382215119356e-01, -4.637382215119356e-01, -4.512226782339558e-01, -3.819808237386518e-01, -4.026766552131670e-01, -4.220709921535876e-01, -4.123229056442265e-01, -4.123229056442266e-01, -5.123149333239605e-01, -1.772411267139145e-01, -2.126297099379072e-01, -2.786583070188349e-01, -2.429641948607106e-01, -2.429641948607105e-01, -3.502023737219915e-01, -3.415061189703634e-02, -4.330504935380007e-02, -2.686428989448765e-01, -6.046292517779034e-02, -6.046292517779035e-02, -1.442503637545517e-02, -4.845074558702180e-03, -6.468078157524085e-03, -5.785457140207605e-02, -7.435488448417370e-03, -7.435488448417370e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_bb1k_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_bb1k", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.066180453577894e-09, -4.066162283392693e-09, -4.066024839135218e-09, -4.066323734604470e-09, -4.066171339750715e-09, -4.066171339750715e-09, -4.387995557068408e-06, -4.388136867678868e-06, -4.391866586762248e-06, -4.390094527690670e-06, -4.387948725038887e-06, -4.387948725038887e-06, -1.391521624446407e-03, -1.413249453865101e-03, -1.933356684689768e-03, -1.933735006874282e-03, -1.399518115460414e-03, -1.399518115460414e-03, -2.638235225960714e-01, -2.506689006298295e-01, 3.288985797332013e-04, -7.285393775083284e-01, -2.597438666331927e-01, -2.597438666331927e-01, -1.622069514527105e+03, -1.422554969005326e+03, -2.111765511119040e+01, -1.202856351359402e+04, -1.481803071292853e+03, -1.481803071292853e+03, -1.125967954795953e-06, -1.126420846914277e-06, -1.126014221174356e-06, -1.126366133087842e-06, -1.126200248964769e-06, -1.126200248964769e-06, -3.693432600208250e-05, -3.622101621988345e-05, -3.706739091059688e-05, -3.650855156618281e-05, -3.627576739499405e-05, -3.627576739499405e-05, -2.812177544214894e-03, 4.365142224493305e-05, -2.556599000806262e-03, 1.332184915163017e-03, -2.572621950229739e-03, -2.572621950229739e-03, -1.859228725108378e+00, -2.350017366391776e-01, -2.003253990736352e+00, -3.094275383787036e-05, -1.259625660526217e+00, -1.259625660526217e+00, -1.356112742544938e+04, -9.248451455761326e+03, -2.847628469110700e+04, -8.288520931679544e+00, -1.348626379043659e+04, -1.348626379043659e+04, -2.111237848673621e-03, -2.588492617127054e-03, -2.420288307319939e-03, -2.285972773775118e-03, -2.353170169782605e-03, -2.353170169782605e-03, -1.471264919675610e-03, -6.875427910437734e-03, -5.575284970615092e-03, -4.206985560103906e-03, -4.902871394164632e-03, -4.902871394164632e-03, 3.064446245284172e-04, -1.076403312161368e-01, -5.894589827118357e-02, -1.926430696835430e-02, -3.667297804370487e-02, -3.667297804370491e-02, -8.805741592956882e-03, -2.488055630339658e+01, -1.068043471278791e+01, -1.505767310072434e-02, -3.900901229063968e+00, -3.900901229063970e+00, -9.506155959663131e+02, -4.493338395881861e+05, -6.767210509352047e+04, -4.719922914235401e+00, -2.394007551550312e+04, -2.394007551550321e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_bb1k_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_bb1k", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_bb1k_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_bb1k", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-1.453792881020835e-05, -1.453815844837191e-05, -1.453871124683689e-05, -1.453496057061442e-05, -1.453805385589584e-05, -1.453805385589584e-05, -2.775436576906803e-04, -2.775855508915998e-04, -2.787195116710247e-04, -2.766666961361983e-04, -2.775631483849621e-04, -2.775631483849621e-04, -2.355930769489709e-03, -2.326155936325914e-03, -1.624213943089691e-03, -1.639251645310494e-03, -2.345189621909301e-03, -2.345189621909301e-03, -3.960154996545132e-03, -4.321891409453982e-03, -2.589762119739679e-03, -1.210365121099308e-03, -4.071359626015101e-03, -4.071359626015101e-03, -2.971904688411089e-06, -3.390279689868400e-06, -6.932569228204634e-05, -2.686526026535870e-07, -3.421491950835473e-06, -3.421491950835474e-06, -2.270364236199089e-04, -2.280904403504870e-04, -2.271411325631901e-04, -2.279606871468378e-04, -2.275802814273013e-04, -2.275802814273013e-04, -2.619657172859747e-04, -2.670105022861876e-04, -2.519477275473951e-04, -2.557893556152959e-04, -2.791220374975574e-04, -2.791220374975574e-04, -6.561847842347336e-03, -1.240282339943801e-02, -6.733639062756232e-03, -1.215298748333417e-02, -6.923214536847441e-03, -6.923214536847441e-03, -4.299701434995194e-04, -1.456751740288871e-03, -4.869407601727779e-04, -1.934623506917164e-03, -8.147950457462470e-04, -8.147950457462470e-04, -2.575035527888732e-07, -3.760377772443233e-07, -4.770189010703516e-07, -1.807137943766328e-04, -4.274533259165149e-07, -4.274533259165147e-07, -1.720174471106644e-02, -1.414907958778020e-02, -1.514525674058078e-02, -1.598746071056006e-02, -1.555812503198624e-02, -1.555812503198624e-02, -1.879262873722554e-02, -4.786032157844813e-03, -6.887839697489260e-03, -9.933193977300818e-03, -8.256756186165932e-03, -8.256756186165934e-03, -1.114619740287045e-02, -2.039219582609204e-03, -3.148116437615883e-03, -6.753927378774448e-03, -4.714931968855889e-03, -4.714931968855887e-03, -5.187298369985341e-03, -4.672243692400858e-05, -1.115648744901561e-04, -1.094343744547512e-02, -4.028470824938104e-04, -4.028470824938113e-04, -3.464829181194732e-06, -1.603449443640014e-08, -8.721126006235346e-08, -4.396724529975842e-04, -3.942186910684218e-07, -3.942186910684204e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
