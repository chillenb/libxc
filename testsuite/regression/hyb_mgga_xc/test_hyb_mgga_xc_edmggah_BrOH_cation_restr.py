
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_edmggah_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_edmggah", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.507222815484181e+01, -1.507225478578185e+01, -1.507243491610202e+01, -1.507203789890506e+01, -1.507223716777250e+01, -1.507223716777250e+01, -2.817555633913896e+00, -2.817519319939245e+00, -2.816702333016284e+00, -2.818249995302328e+00, -2.817414303416904e+00, -2.817414303416904e+00, -6.318262380664167e-01, -6.321032949950695e-01, -6.403960340819732e-01, -6.390688327031774e-01, -6.383987187664849e-01, -6.383987187664849e-01, -2.082529955265760e-01, -2.084917794234502e-01, -7.658539995766785e-01, -1.936570773718206e-01, -1.953044795427938e-01, -1.953044795427938e-01, -5.871648786549583e-02, -5.896467926102789e-02, -1.093657572334653e-01, -5.278826475184705e-02, -5.367075203555505e-02, -5.367075203555503e-02, -7.087518652451510e+00, -5.578210197400485e+00, -2.310046632752835e+00, -8.593335300462158e+00, -3.226946113321038e+00, -4.637005030659493e+00, 9.850943293793863e-01, -2.116151381715657e+00, -1.839064928642006e+00, -1.843561673484882e+00, -1.843012083784366e+00, -1.671676216513980e+00, -1.159147320286656e+00, -8.534488820270641e-01, -1.061379379897658e+00, -4.975784431186943e-01, -5.380634124202431e-01, -5.729703074444182e-01, -3.134980721547034e-02, -4.073967721108148e-01, 1.112610882369441e-01, -1.624288550223503e+00, -1.569792157825669e-01, -1.362574598724405e-01, -1.038644010555513e-01, -2.243675647130877e+00, -1.939310038931928e-03, -2.569042611230768e-02, -6.108486289604790e-02, -2.335224165712511e-03, -9.254603213266500e+02, 3.670387150029222e+02, 6.350131453968433e+03, -1.154053857137390e+01, 1.167921969283155e+02, -1.154646170690419e+04, 3.503626345388590e+03, -4.486224894843157e-01, -8.989050481417908e-01, -3.392347616392609e-01, -5.136275156831187e-01, -1.257852152895486e+00, -1.327624118836759e+00, 5.141232895189232e-01, 8.972646316975208e-01, -1.213448501242708e-01, -3.884423808512443e-01, -3.454855996934547e-01, -4.264534719086054e-01, -2.247364333570416e-02, -1.280958217144074e-01, -3.131095745981482e-01, 1.324217358740985e-02, -1.263097935096968e-01, -6.309011288911899e-03, -6.789157113146502e-04, -1.423868598752734e-03, -4.188194385526753e-02, -2.161237398350793e-03, -2.161237007690478e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_edmggah_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_edmggah", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.279631831506693e+01, -2.279639992519972e+01, -2.279675941160838e+01, -2.279554537645344e+01, -2.279618200256088e+01, -2.279618200256088e+01, -3.632542072754595e+00, -3.632597191661407e+00, -3.633982267514617e+00, -3.632479123242561e+00, -3.632793826535401e+00, -3.632793826535401e+00, -7.064381726759550e-01, -7.052476338579390e-01, -6.789893772968710e-01, -6.857446573678401e-01, -6.843551908850608e-01, -6.843551908850608e-01, -2.072083600044138e-01, -2.081125901977512e-01, -8.027868556637890e-01, -1.830014613337156e-01, -1.877303936659657e-01, -1.877303936659657e-01, -2.776037942254946e-02, -2.825523121453837e-02, -7.265167867054506e-02, -2.272931508801712e-02, -2.455156252578141e-02, -2.455156252578142e-02, -6.566912426761689e+00, -5.683905155197807e+00, -4.487167072707924e+00, -7.510089697729705e+00, -4.847017477097610e+00, -5.441367099641742e+00, -2.846483907552640e+00, -2.099707661732986e+00, -1.952628590352544e+00, -1.965941743782902e+00, -1.981822373028648e+00, -1.967206315735967e+00, -8.688131592084964e-01, -7.777401907678692e-01, -8.000844592946169e-01, -6.334984814081146e-01, -6.570022570181739e-01, -6.537869722170536e-01, -9.903888744468511e-02, -3.384459506608701e-01, -3.509948059138709e-02, -2.076398239133370e+00, -1.436202095145118e-01, -1.156330451353222e-01, -6.187351981494505e-02, -1.308602220370986e+00, -2.584333686114070e-03, -5.203302922697699e-02, -3.504606404067927e-02, -3.111589567976700e-03, 3.891786488623570e+02, -1.639341112930986e+02, -2.828068237614109e+03, 1.066389650372711e+00, -5.266960951803552e+01, 5.074844274771921e+03, -1.544925280055174e+03, -5.377159944122814e-01, -7.290609121825243e-01, -5.240358836366052e-01, -5.823228795859441e-01, -8.395817708840800e-01, -9.826785216415088e-01, -3.392008665911928e-01, -5.118168098857689e-01, -3.472604789599809e-01, -3.760084393615789e-01, -3.515482846770248e-01, -4.953494704970727e-01, -3.106226761554452e-02, -9.511693665636986e-02, -3.742933107003713e-01, -4.807568367020129e-02, -1.031622798317830e-01, -8.397535688757202e-03, -9.050463551239490e-04, -1.897727003962158e-03, -7.309968460120558e-02, -2.879899137542719e-03, -2.879897980507965e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_edmggah_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_edmggah", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-5.047636604524825e-09, -5.047563134783405e-09, -5.047275070439923e-09, -5.048367941317865e-09, -5.047789814560980e-09, -5.047789814560980e-09, -6.827866109817663e-06, -6.827864276858678e-06, -6.827190588734879e-06, -6.823423108885689e-06, -6.827238266755699e-06, -6.827238266755699e-06, -3.148336690355548e-03, -3.148475873960100e-03, -3.056214247070521e-03, -3.018926670955629e-03, -3.049438898259635e-03, -3.049438898259635e-03, -2.166036760445818e-01, -2.260763166434526e-01, -1.797848910219123e-03, -1.724985099886901e-01, -2.536850421934224e-01, -2.536850421934222e-01, -5.437574367244021e+03, -4.762723300336028e+03, -3.099737256748405e+01, -2.531279322095151e+04, -1.384453780417971e+04, -1.384453780417972e+04, -3.309624272818557e-07, -7.410510561280272e-07, 1.233479253534205e-07, -1.572028622741649e-07, -2.143482980840877e-07, -1.226572502802433e-06, 1.425609869069862e-05, -2.945129590808164e-05, -4.746349337369512e-05, -4.683119183336383e-05, -4.682086165011750e-05, -5.807489309142051e-05, 2.033899645625200e-03, -9.562272749108697e-05, 2.821675904085248e-03, -6.743034667670316e-03, -5.105485102957250e-03, -4.247930632770637e-03, 2.219098862046089e+00, 2.564289913452601e-01, 2.584419083969639e+00, -6.585242547537332e-05, -8.001690401474595e-01, -1.839165900232462e+00, -1.952747093684786e+04, -2.125282573507643e+02, -4.324684628772461e-09, 4.275576618086606e+00, -2.691308210314960e+04, -3.941749654736546e-06, 3.503418155925737e-03, 3.601032315497293e-03, 3.569510333089085e-03, 3.411461905593830e-03, 3.556638935713826e-03, 3.554456210904226e-03, 3.956143930334987e-03, -1.011642753019981e-02, 2.907393949490624e-03, 3.389211462844978e-03, -6.373128056285678e-03, 3.968781443921633e-03, 1.126582140480236e-03, 1.801680103827412e-01, 9.280039577988808e-02, 3.167319337120476e-02, -3.077990872431505e-03, -2.299033437228003e-02, -1.301188572542436e-02, 3.214789072566503e+00, -1.050828802498231e+01, -4.670196014744001e-02, 3.331156436073119e+00, -3.807720417299975e+00, -8.377991696886907e-06, -3.461212562635627e-03, -2.220689936322496e-05, 3.233813842879116e+00, -1.470913779089756e-04, -4.135481184317925e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_edmggah_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_edmggah", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [-2.006820760835444e-04, -2.006808378178858e-04, -2.006773181292215e-04, -2.006957210525385e-04, -2.006857969593004e-04, -2.006857969593004e-04, -1.325031618442738e-03, -1.325037941285661e-03, -1.325153989047139e-03, -1.324711064315766e-03, -1.325008827220426e-03, -1.325008827220426e-03, -6.760473529965915e-03, -6.752827998983712e-03, -6.474723739028098e-03, -6.481476616542362e-03, -6.505397687372404e-03, -6.505397687372404e-03, -1.473925969563550e-02, -1.511393252284074e-02, -5.808673216894703e-03, -1.186470476104388e-02, -1.368527145032677e-02, -1.368527145032677e-02, -4.728403221107278e-03, -4.829278215434597e-03, -6.019314296017850e-03, -4.240097583525186e-03, -4.601305668734115e-03, -4.601305668734118e-03, -2.719276072858098e-04, -5.017908153446655e-04, -1.749343106817923e-05, -1.746326730612349e-04, -2.066373912126970e-04, -7.736784018719269e-04, -1.060473808640535e-04, -1.418427668875313e-03, -1.924395877824670e-03, -1.926503644523247e-03, -1.944085973724311e-03, -2.285440269351202e-03, -1.963247892519187e-03, -3.309285031703022e-03, -2.187317257432903e-03, -8.592155830703529e-03, -7.809889452999886e-03, -7.088841894692098e-03, -1.684191408742308e-03, -4.960722782032578e-03, -1.544356480366691e-03, -2.396821671947782e-03, -1.339767108462396e-02, -1.846646648943628e-02, -1.502456656807348e-03, -3.325987978646220e-05, -3.025820929053705e-16, -7.794343245131787e-04, -3.292138416756778e-03, -4.821738891837032e-13, -7.212511794465336e-04, -7.195268557746434e-04, -7.175810965390348e-04, -8.229300879310701e-04, -7.167828487926318e-04, -7.185424197742963e-04, -7.405988484910998e-04, -9.291931697235471e-03, -2.667856488816889e-03, -1.917761358894596e-03, -7.833147761160807e-03, -1.831224857944814e-03, -1.672847654218488e-03, -1.881332233167980e-03, -1.678370884797920e-03, -1.338849797704246e-03, -7.859924477458501e-03, -1.004306274141594e-02, -9.780050143006749e-03, -1.211953711689236e-04, -6.084355399232277e-03, -1.383072489259608e-02, -1.250649134989095e-03, -1.196787390382078e-02, -7.471707192231005e-11, -1.034571160213683e-11, -6.138818587608067e-13, -1.606425615292228e-03, -1.425501173037662e-11, -4.007803423371585e-12]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_edmggah_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_edmggah", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [7.895090161049600e-04, 7.895041359546192e-04, 7.894904038454950e-04, 7.895629302630987e-04, 7.895237993698266e-04, 7.895237993698266e-04, 4.854453389926546e-03, 4.854480478266377e-03, 4.855006597463745e-03, 4.853285297036676e-03, 4.854384448117009e-03, 4.854384448117009e-03, 1.986416083467700e-02, 1.982243455159093e-02, 1.843408985818929e-02, 1.854665038638104e-02, 1.862426121070094e-02, 1.862426121070094e-02, 3.429884114373220e-02, 3.588286617306492e-02, 1.748508513507865e-02, 2.271764936940386e-02, 2.967222257855689e-02, 2.967222257855689e-02, 1.891361288441825e-02, 1.931711286168367e-02, 2.229856240756420e-02, 1.696039033410074e-02, 1.840522267493646e-02, 1.840522267493647e-02, 8.799273463705212e-04, 1.799453043203066e-03, -1.378057285471231e-04, 4.908155615434343e-04, 6.188032738652891e-04, 2.886967316502209e-03, -8.479251125725152e-04, 4.417797290386335e-03, 6.413442947610123e-03, 6.436410141483041e-03, 6.518916643994817e-03, 7.884333826502381e-03, -7.708597488332450e-04, 5.530658678542522e-03, -7.999454510418044e-04, 2.528912242895181e-02, 2.279850880725123e-02, 1.991431857402008e-02, -1.338181434888110e-02, -4.807030747575906e-03, -1.235355068460836e-02, 8.270930247428603e-03, 3.080506390504108e-02, 5.108024552429036e-02, 6.009826627229391e-03, 1.330395191458488e-04, 1.210328371621482e-15, -6.214777681431421e-03, 1.316855366702711e-02, 1.928695556734812e-12, -5.683199537497447e-03, -5.756214827769677e-03, -5.740648772250600e-03, -5.300088937681292e-03, -5.734262608823829e-03, -5.727224324897170e-03, -5.924790787727830e-03, 2.636770220479081e-02, 4.733546362071924e-04, -1.975488958007361e-03, 2.140977777678316e-02, -2.597913836080811e-03, -5.244926057838229e-04, -1.504849308964138e-02, -1.342586254418477e-02, -1.052977172702460e-02, 1.338579042121195e-02, 2.211834347704171e-02, 2.719069783274679e-02, -9.580347435844945e-04, 1.927662583947954e-02, 3.886846738902378e-02, -1.000110222453380e-02, 3.286779685079295e-02, 1.686974835921677e-10, 4.138284640854730e-11, 2.455527435043227e-12, -7.077663842192442e-03, 5.702004692150646e-11, 1.603121369348634e-11]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
