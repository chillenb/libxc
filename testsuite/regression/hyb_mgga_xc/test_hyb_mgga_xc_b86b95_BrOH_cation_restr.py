
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_b86b95_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b86b95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.522184905064413e+01, -1.522186723630058e+01, -1.522199922732090e+01, -1.522172757946983e+01, -1.522186264365226e+01, -1.522186264365226e+01, -2.577411419745589e+00, -2.577380882190227e+00, -2.576718355576424e+00, -2.578147737612610e+00, -2.577339387702283e+00, -2.577339387702283e+00, -5.452623252473918e-01, -5.451268028098890e-01, -5.433591802129764e-01, -5.462919547290586e-01, -5.452348181162132e-01, -5.452348181162132e-01, -1.699622180104251e-01, -1.709729989801830e-01, -6.422574955899791e-01, -1.433008718900647e-01, -1.536238831597874e-01, -1.536238831597874e-01, -7.920592781881147e-03, -8.336120057250216e-03, -4.531476029135699e-02, -4.576091422015981e-03, -5.749443612127590e-03, -5.749443612127590e-03, -3.694535324922292e+00, -3.694035052848196e+00, -3.694519107101150e+00, -3.694077389152008e+00, -3.694277890792377e+00, -3.694277890792377e+00, -1.579782990468742e+00, -1.586671105523661e+00, -1.581067616078363e+00, -1.587140779825221e+00, -1.582972158164057e+00, -1.582972158164057e+00, -4.528507821803970e-01, -4.743688886017816e-01, -4.257027641332061e-01, -4.310519191018393e-01, -4.573233862388419e-01, -4.573233862388419e-01, -1.092399838624324e-01, -1.812382710982785e-01, -1.020877405273397e-01, -1.373875646835651e+00, -1.219847983300800e-01, -1.219847983300800e-01, -3.530959724323257e-03, -4.473515914415754e-03, -3.420393349904959e-03, -7.140606721564251e-02, -4.120525245917367e-03, -4.120525245917367e-03, -4.303946420278939e-01, -4.320519629472139e-01, -4.314698946799768e-01, -4.309841731330531e-01, -4.312270961032957e-01, -4.312270961032957e-01, -4.192664271149061e-01, -3.962714584590762e-01, -4.023166395842117e-01, -4.083560394187166e-01, -4.051389690297654e-01, -4.051389690297654e-01, -4.984937296360313e-01, -2.159052600357502e-01, -2.434710166730537e-01, -2.894240844872555e-01, -2.641926524849756e-01, -2.641926524849756e-01, -3.680009676280203e-01, -4.345638085325138e-02, -5.853661971992252e-02, -2.728652741188693e-01, -8.798217452522406e-02, -8.798217452522408e-02, -1.117364128177406e-02, -1.195975312822291e-03, -2.510256770967946e-03, -8.336274014941975e-02, -3.812808360608434e-03, -3.812808360608431e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_b86b95_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b86b95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.812708703068362e+01, -1.812716110298514e+01, -1.812746696177894e+01, -1.812636535784966e+01, -1.812694590779166e+01, -1.812694590779166e+01, -2.989854845625535e+00, -2.989885197748658e+00, -2.990622784780817e+00, -2.989501137511443e+00, -2.989775526450750e+00, -2.989775526450750e+00, -6.194210892207073e-01, -6.182739535551374e-01, -5.902172578793911e-01, -5.930012884660728e-01, -5.931095215048106e-01, -5.931095215048106e-01, -1.684831258227054e-01, -1.700451038412290e-01, -7.571445435682402e-01, -1.464119525547030e-01, -1.532466529078146e-01, -1.532466529078146e-01, -1.054961635312879e-02, -1.110140995659997e-02, -5.863000790476491e-02, -6.099471339526269e-03, -7.661425927524942e-03, -7.661425927524938e-03, -4.531170082041083e+00, -4.533226208014081e+00, -4.531260581682679e+00, -4.533075839160873e+00, -4.532214439863220e+00, -4.532214439863220e+00, -1.621164513629167e+00, -1.633654279669090e+00, -1.609036705510200e+00, -1.619903301160156e+00, -1.634117419646676e+00, -1.634117419646676e+00, -5.435744174019974e-01, -6.020754834357777e-01, -5.077660152750542e-01, -5.396786321890173e-01, -5.535682892105995e-01, -5.535682892105995e-01, -1.236737865175658e-01, -1.793751589876369e-01, -1.173570730698987e-01, -1.743808543314349e+00, -1.296390001401255e-01, -1.296390001401255e-01, -4.706951655420072e-03, -5.962709652236095e-03, -4.558302753189487e-03, -8.757550887105457e-02, -5.491391812310635e-03, -5.491391812310632e-03, -5.602867738869686e-01, -5.541698197942738e-01, -5.564051001447240e-01, -5.581890433168260e-01, -5.573046528809802e-01, -5.573046528809802e-01, -5.460594704927900e-01, -4.439601678964548e-01, -4.731012964824455e-01, -5.035120210999616e-01, -4.881007411929202e-01, -4.881007411929202e-01, -6.302519675614976e-01, -2.107350011102792e-01, -2.430511174496515e-01, -3.243424009569633e-01, -2.773713122641815e-01, -2.773713122641815e-01, -4.136103210519086e-01, -5.643400641589674e-02, -7.430613827925124e-02, -3.184813387805422e-01, -1.021797741986385e-01, -1.021797741986386e-01, -1.487010669778872e-02, -1.594565179371404e-03, -3.346470703827713e-03, -9.818364706439049e-02, -5.081384004503363e-03, -5.081384004503360e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_b86b95_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b86b95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-5.375190165492771e-09, -5.375148900744930e-09, -5.374920517570842e-09, -5.375535543541459e-09, -5.375219662820264e-09, -5.375219662820264e-09, -6.312261380099000e-06, -6.312386082875093e-06, -6.315421243257115e-06, -6.313659828437317e-06, -6.315693106426505e-06, -6.315693106426505e-06, -2.586570159676114e-03, -2.613289217236240e-03, -3.189283826071375e-03, -3.166191575163832e-03, -3.157509068437526e-03, -3.157509068437526e-03, -3.980272910763818e-01, -3.918356914913721e-01, -5.648700699351829e-04, -5.732048422444040e-01, -5.245767533407679e-01, -5.245767533407678e-01, -1.582851858192204e+00, -1.675669433646225e+00, -1.036577216154956e+00, -1.377107544889949e+00, -1.781729785489700e+00, -1.781729785490900e+00, -1.473627387519292e-06, -1.473214265184396e-06, -1.473609870704981e-06, -1.473244984367813e-06, -1.473417885942666e-06, -1.473417885942666e-06, -5.361011453389534e-05, -5.255357006585488e-05, -5.387617418391946e-05, -5.294624957237257e-05, -5.288390640962891e-05, -5.288390640962891e-05, -5.255816319868043e-03, -1.654493134059724e-03, -6.105151456607032e-03, 4.649640714275097e-04, -4.855770122626481e-03, -4.855770122626481e-03, -7.125420800112454e-01, -2.681410544227601e-01, -7.874338185906725e-01, -4.574383570137243e-05, -8.194226436875196e-01, -8.194226436875196e-01, -1.682999926190958e+00, -1.580674905861997e+00, -1.000892075917569e+01, -1.170659882965861e+00, -4.623128032885528e+00, -4.623128032887264e+00, -3.447450001605614e-03, -4.521160008892374e-03, -4.182014521767600e-03, -3.871304557458540e-03, -4.030054465667381e-03, -4.030054465667381e-03, -2.603723376946658e-03, -1.212983783803761e-02, -1.005440678067937e-02, -7.613604372701508e-03, -8.890363724866637e-03, -8.890363724866637e-03, -1.207951674179688e-03, -1.525678800408921e-01, -9.793716916383217e-02, -3.903131474642352e-02, -6.695622387704542e-02, -6.695622387704542e-02, -1.557728049753484e-02, -9.485374825067092e-01, -9.511120378482948e-01, -4.127744576314219e-02, -1.273184314079962e+00, -1.273184314079957e+00, -1.259601021509415e+00, -5.683634703840637e+00, -3.780747356499031e+00, -1.300419963323269e+00, -5.877966422166098e+00, -5.877966422160345e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_b86b95_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b86b95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_b86b95_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b86b95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-1.453792283978471e-05, -1.453818662584219e-05, -1.453879561912927e-05, -1.453488296950892e-05, -1.453701315010626e-05, -1.453701315010626e-05, -2.775718393848247e-04, -2.776240936498513e-04, -2.788234851368839e-04, -2.766509746532341e-04, -2.776228584892479e-04, -2.776228584892479e-04, -2.566454190939865e-03, -2.533371885065624e-03, -1.804185727185526e-03, -1.813146546056280e-03, -1.838213172349539e-03, -1.838213172349539e-03, -2.555797814259009e-03, -2.812007899408073e-03, -2.283128744728795e-03, -9.589339535762655e-04, -1.555106140527363e-03, -1.555106140527362e-03, -3.258796894617046e-07, -3.975288282833202e-07, -2.492603401189000e-05, -6.277512067909956e-08, -1.524265052365561e-07, -1.524265052365564e-07, -2.269702985532985e-04, -2.280573663706722e-04, -2.270144524712743e-04, -2.279741091301697e-04, -2.275237198577517e-04, -2.275237198577517e-04, -2.646821746696447e-04, -2.698698241827689e-04, -2.483762463982107e-04, -2.527232363479489e-04, -2.759354158000614e-04, -2.759354158000614e-04, -6.369241708602159e-03, -1.190292719782858e-02, -6.412473447449897e-03, -1.282699419954386e-02, -6.819996236865639e-03, -6.819996236865639e-03, -2.855271797554048e-04, -1.081443713068554e-03, -2.474314630730053e-04, -1.928645477872851e-03, -6.389134607717199e-04, -6.389134607717198e-04, -3.950316868999526e-08, -6.927478027200196e-08, -2.025449349540546e-07, -1.121481555037163e-04, -1.603352375432031e-07, -1.603352375432027e-07, -1.715653870777054e-02, -1.386575190372423e-02, -1.490949299207765e-02, -1.586232602812442e-02, -1.537527207624292e-02, -1.537527207624292e-02, -1.924636234980064e-02, -4.390069527485070e-03, -6.462968674229307e-03, -9.827025162610095e-03, -7.946372527416517e-03, -7.946372527416517e-03, -1.066059606991729e-02, -1.552655076970212e-03, -2.480934733989058e-03, -6.305605209934963e-03, -4.033158041228320e-03, -4.033158041228323e-03, -4.854046670396275e-03, -2.008518762128271e-05, -4.752137100784840e-05, -9.965204787316353e-03, -2.644635392811541e-04, -2.644635392811544e-04, -6.882113065106681e-07, -7.619803347053765e-09, -3.151297056615350e-08, -2.192720144245662e-04, -1.623227288495196e-07, -1.623227288495198e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
