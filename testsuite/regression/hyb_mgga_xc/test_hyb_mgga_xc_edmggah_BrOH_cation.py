
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_edmggah_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_edmggah", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.507222815493037e+01, -1.507225478591705e+01, -1.507243491622281e+01, -1.507203789975483e+01, -1.507223717242762e+01, -1.507223717242762e+01, -2.817555651966941e+00, -2.817519340395134e+00, -2.816702349936143e+00, -2.818250017001207e+00, -2.817414562689352e+00, -2.817414562689352e+00, -6.318343323337121e-01, -6.321150628342297e-01, -6.404129987147893e-01, -6.390701949977983e-01, -6.400791982215652e-01, -6.400791982215652e-01, -2.082838073722267e-01, -2.085322428567011e-01, -7.660611303865767e-01, -1.936548014440632e-01, -2.001908220852936e-01, -2.001908220852936e-01, -5.873010627695043e-02, -5.898201800228556e-02, -1.093839668795494e-01, -5.278933468683260e-02, -5.455692126114141e-02, -5.455692126114138e-02, -7.079391211197144e+00, -5.578200544487747e+00, -2.310057525710145e+00, -8.592923321774276e+00, -3.226949405361396e+00, -4.636353912979351e+00, 9.850775501171687e-01, -2.116151450452258e+00, -1.839068522039258e+00, -1.843565034464760e+00, -1.843034097059259e+00, -1.671680751739002e+00, -1.157866769078790e+00, -8.534451016707812e-01, -1.060384766264071e+00, -4.977412606334317e-01, -5.384962839169879e-01, -5.733031204469534e-01, -3.136297077657518e-02, -4.073934110854894e-01, 1.091663172075840e-01, -1.624288688450874e+00, -1.570511070407523e-01, -1.363179526553315e-01, -1.038675243297098e-01, -2.243501338688109e+00, -1.938375442401187e-03, -2.570402059410270e-02, -6.088398095113141e-02, -2.306905441606377e-03, -9.253642252841590e+02, 3.670087989633147e+02, 6.349562146780443e+03, -1.154148622538145e+01, 1.167302413533272e+02, -1.154552379477684e+04, 3.503194172022822e+03, -4.486259519775750e-01, -8.988842262355473e-01, -3.395580330058388e-01, -5.136292877281509e-01, -1.257843646818067e+00, -1.327611239559298e+00, 5.139770090222909e-01, 8.967012187086014e-01, -1.213920204861270e-01, -3.884429975456007e-01, -3.454860561448894e-01, -4.264635000363057e-01, -2.247276499416693e-02, -1.280575095630148e-01, -3.131414413487622e-01, 1.284041076024729e-02, -1.262465551333718e-01, -6.307917370096739e-03, -6.789151970712599e-04, -1.423070331482703e-03, -4.224947326988720e-02, -2.139324269944552e-03, -2.139323748094589e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_edmggah_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_edmggah", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.279633335735732e+01, -2.279630327263111e+01, -2.279642793051253e+01, -2.279637191968414e+01, -2.279672252164083e+01, -2.279679630118044e+01, -2.279565539013497e+01, -2.279543536071661e+01, -2.279639188971178e+01, -2.279597209787853e+01, -2.279639188971178e+01, -2.279597209787853e+01, -3.632409520866852e+00, -3.632674593008520e+00, -3.632457588426398e+00, -3.632736759571976e+00, -3.633803407219934e+00, -3.634161084386584e+00, -3.632284749276312e+00, -3.632673445151937e+00, -3.631870975325571e+00, -3.633716021580017e+00, -3.631870975325571e+00, -3.633716021580017e+00, -7.042937814330332e-01, -7.085879970580508e-01, -7.026210674758611e-01, -7.078832296437070e-01, -6.821349515948376e-01, -6.758898692642258e-01, -6.847965897580967e-01, -6.867001684148577e-01, -7.175734459667239e-01, -6.557468700768224e-01, -7.175734459667239e-01, -6.557468700768224e-01, -2.068258636518958e-01, -2.075413298847144e-01, -2.075659164100911e-01, -2.086042922028603e-01, -7.928957137631860e-01, -8.134634631740733e-01, -1.836086436897225e-01, -1.823983224658927e-01, -1.805338778064471e-01, -1.801016615226598e-01, -1.805338778064470e-01, -1.801016615226597e-01, -2.759211667697663e-02, -2.791230666078153e-02, -2.807798392483507e-02, -2.841411116447084e-02, -7.261058528906869e-02, -7.267054722925434e-02, -2.270957726024947e-02, -2.275052243903025e-02, -2.552426275156930e-02, -2.191320278279777e-02, -2.552426275156930e-02, -2.191320278279774e-02, -6.695098987333183e+00, -6.428821526967069e+00, -5.687376820960695e+00, -5.680433220951583e+00, -4.448462162094562e+00, -4.526078088010436e+00, -7.477313090333717e+00, -7.542262347216228e+00, -4.844824172532610e+00, -4.849229574362273e+00, -5.440496387865555e+00, -5.444901944557667e+00, -3.008950280656865e+00, -2.684005283378963e+00, -2.100027730631858e+00, -2.099387372273273e+00, -1.950123655472718e+00, -1.955135369646474e+00, -1.962600749183583e+00, -1.969261962737411e+00, -1.988154020574300e+00, -1.975479225033157e+00, -1.977300495235381e+00, -1.957429721347108e+00, -8.610906066228393e-01, -8.744211775057831e-01, -7.771302227531758e-01, -7.783457629903443e-01, -8.215661414379791e-01, -7.791316266376932e-01, -6.275618175220128e-01, -6.393192311552154e-01, -6.679319332957461e-01, -6.455369258614190e-01, -6.635370813818836e-01, -6.436995695642330e-01, -9.763074652854757e-02, -1.004062131968090e-01, -3.394476121710322e-01, -3.374559163364859e-01, 7.255898626474959e-03, -7.254375822661074e-02, -2.076766943273696e+00, -2.076029407033949e+00, -1.437914685624581e-01, -1.432922318100769e-01, -1.170356657562519e-01, -1.143547896527214e-01, -6.245010716221790e-02, -6.135534430405027e-02, -1.322425436658123e+00, -1.295191696164770e+00, -2.606703968573105e-03, -2.563223700144862e-03, -5.045984700406440e-02, -5.359807535065984e-02, -4.041780664570011e-02, -3.255839058444406e-02, -3.248158411753088e-03, -3.007081620029265e-03, 3.672328192658176e+02, 4.107868777240654e+02, -1.566128189182645e+02, -1.711438506207465e+02, -2.692496698086504e+03, -2.961560560323542e+03, 1.330642888689177e+00, 8.083884645610251e-01, -4.124278575178361e+01, -6.390941495288581e+01, 4.845115353682295e+03, 5.301085639365070e+03, -1.439572242864307e+03, -1.648861292046822e+03, -5.366384111904582e-01, -5.387915929058819e-01, -7.295131699920165e-01, -7.286184198062324e-01, -5.307246105377097e-01, -5.193211952338861e-01, -5.816683453129138e-01, -5.829753715269111e-01, -8.425887562979776e-01, -8.366155777173027e-01, -9.842888880663763e-01, -9.810485564454973e-01, -3.163139693567564e-01, -3.616414741999301e-01, -4.570679792693268e-01, -5.646808012326223e-01, -3.407292539898987e-01, -3.536647533493827e-01, -3.756801427915710e-01, -3.763342896034670e-01, -3.511493585084640e-01, -3.519442455096760e-01, -4.940303320548575e-01, -4.966430452016901e-01, -3.115018558951475e-02, -3.097303654257106e-02, -9.235509207926906e-02, -9.743191734533206e-02, -3.724599501286652e-01, -3.761023811139089e-01, -3.724642588459326e-02, -5.749118567561352e-02, -1.060013186533014e-01, -1.001915472346280e-01, -8.439300724551044e-03, -8.357314603263961e-03, -9.053578505173970e-04, -9.047356672560975e-04, -1.915543261032046e-03, -1.880981599197129e-03, -6.669181492150252e-02, -7.447121191421530e-02, -2.996742017757706e-03, -2.788848634645753e-03, -2.996741548923707e-03, -2.788846636316849e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_edmggah_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_edmggah", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.020921557651870e-08, 2.279202137856838e-10, -1.020925105568073e-08, -1.020904323253385e-08, 2.279170497686075e-10, -1.020912635709329e-08, -1.020857423625913e-08, 2.279020075121201e-10, -1.020842805385533e-08, -1.021051355025182e-08, 2.279491036863820e-10, -1.021090732611094e-08, -1.020910739176075e-08, 2.279245635628714e-10, -1.020997645411868e-08, -1.020910739176075e-08, 2.279245635628714e-10, -1.020997645411868e-08, -1.454524853051037e-05, 1.780569354887532e-06, -1.454678495675456e-05, -1.454515510748856e-05, 1.780550645895000e-06, -1.454685230764228e-05, -1.454461355923835e-05, 1.779905967953430e-06, -1.454405438177641e-05, -1.453657198806549e-05, 1.779381423952361e-06, -1.453650138024850e-05, -1.455520810552840e-05, 1.780337432618631e-06, -1.453409291390890e-05, -1.455520810552840e-05, 1.780337432618631e-06, -1.453409291390890e-05, -8.320323395650329e-03, 3.996218562560067e-03, -8.267600897607095e-03, -8.335647802866839e-03, 4.015618801824140e-03, -8.271470771887997e-03, -8.348295134936451e-03, 4.520205758137553e-03, -8.393077403289543e-03, -8.220504796080802e-03, 4.359376540312795e-03, -8.214112226686235e-03, -7.927134129715255e-03, 4.351063785123154e-03, -8.239572089677950e-03, -7.927134129715255e-03, 4.351063785123154e-03, -8.239572089677950e-03, -8.794954966478218e-01, 7.948609274507026e-01, -7.894562808616531e-01, -8.872771544919282e-01, 7.564558689411243e-01, -7.832643203236371e-01, -4.802937511359743e-03, 2.014167559849700e-03, -4.391225978975141e-03, -1.293771547169726e+00, 1.827904615608609e+00, -1.226606811025625e+00, -8.139171412228196e-01, 6.064747805303552e-01, -4.495925957217647e+00, -8.139171412228192e-01, 6.064747805303553e-01, -4.495925957217645e+00, -1.192712380312300e+04, 8.260206028876088e-09, -9.997636435228142e+03, -1.057114428469874e+04, 3.559514609204604e-08, -8.672330053110189e+03, -7.091486429382464e+01, 6.917521302922696e+00, -6.084739914885293e+01, -4.963160284741829e+04, 1.802125831617301e-18, -5.166014200321720e+04, -1.631407129116278e+04, 5.157477836657599e-14, -9.979540407183925e+04, -1.631407129116279e+04, 5.157477836657602e-14, -9.979540407183921e+04, -7.192454671542588e-07, 2.473442811359569e-07, -8.665138149820790e-07, -1.599688961156859e-06, 2.471214118153049e-07, -1.611682527632758e-06, 1.229455547020385e-07, 2.473331742331856e-07, 1.230992040152863e-07, -4.469023560978031e-07, 2.471364351356542e-07, -4.293976849789744e-07, -5.475257802236431e-07, 2.472317311137543e-07, -5.571493593083019e-07, -2.512872762546119e-06, 2.472317311137543e-07, -2.640447648090053e-06, 1.425517663902050e-05, 2.851474097813468e-05, 1.425438590117351e-05, -7.262188986340884e-05, 2.754776997736444e-05, -7.273113541913217e-05, -1.096615457031349e-04, 2.924626351484704e-05, -1.094371484911003e-04, -1.083669455743290e-04, 2.836330541730929e-05, -1.073251368794563e-04, -1.070023269546475e-04, 2.763602250733943e-05, -1.079129625562502e-04, -1.299137481580771e-04, 2.763602250733943e-05, -1.299105506311790e-04, 2.075469021634987e-04, 7.173627003238928e-03, 7.028947671891455e-04, -2.722432197450486e-03, 5.000211851383437e-03, -2.660693568951497e-03, 7.392670517974232e-04, 9.997426811833420e-03, 4.691720238049393e-04, -1.925069219900528e-02, 8.466910909962957e-03, -1.639036673410318e-02, -1.203995163573975e-02, 6.653525766884367e-03, -1.540364872894808e-02, -1.050388049085504e-02, 6.653525766884367e-03, -1.348416568888365e-02, 2.216132634533091e+00, 4.442361308769235e+00, 2.216100938445564e+00, 1.148083151096988e-01, 7.935353822465945e-01, 1.172713408170554e-01, 2.568510930903685e+00, 5.137202983332575e+00, 2.568510604888974e+00, -1.471899633250189e-04, 3.126597680816367e-05, -1.474859795885018e-04, -3.301379198669968e+00, 3.090554208290285e+00, -3.025749324458466e+00, -5.197512718851836e+00, 3.090554208290285e+00, -5.246069107733766e+00, -4.084651721921787e+04, 1.829755333064485e-25, -3.741905583903877e+04, -4.285388818760489e+02, 5.235097643015715e-19, -4.216969338007791e+02, -4.277733462220015e-09, 1.849739361868634e-26, -2.080654710355626e-08, 4.271601702157324e+00, 8.555173571256434e+00, 4.273720841257753e+00, -7.726698644224444e+04, 3.683191745692332e-21, -4.191170143862090e+04, -2.904649867842796e-06, 3.683191745692331e-21, -1.401454826152454e-05, 3.494235938583918e-03, 7.024393780700986e-03, 3.494568987453630e-03, 3.600909268288927e-03, 7.201818544297937e-03, 3.600909268323329e-03, 3.569388450659722e-03, 7.138776901345200e-03, 3.569388450659908e-03, 3.285744426934752e-03, 7.087353158871855e-03, 3.271709095476231e-03, 3.556518597507126e-03, 7.113037283650223e-03, 3.556518609582810e-03, 3.552122617756244e-03, 7.113037283650223e-03, 3.552183256711674e-03, 3.956046981800925e-03, 7.912093963694074e-03, 3.956046981803614e-03, -2.803676969239506e-02, 1.519961921363260e-02, -2.762990467626426e-02, -5.305336853496179e-04, 1.249931692755278e-02, -3.432579214400133e-04, 5.158352530914272e-04, 1.037076623097554e-02, 2.343168248735193e-03, -1.860192555474828e-02, 1.139830952635505e-02, -1.829130769305205e-02, 2.229462365192730e-03, 1.139830952635505e-02, 2.246589908035400e-03, 2.326506560144537e-04, 4.063286529740734e-03, 2.101376388485971e-04, 1.801500314267826e-01, 3.603176362260552e-01, 1.801503205628918e-01, 9.277830485349012e-02, 1.855617530469512e-01, 9.277835732517997e-02, 3.156665651409426e-02, 6.352302979313414e-02, 3.159277313762641e-02, -6.146340641400107e-02, 1.097794285926673e-01, -6.062870170234853e-02, -1.016523331212388e-01, 1.097794285926674e-01, -1.000910996325604e-01, -3.741695107112936e-02, 2.151454859874416e-02, -3.616203700738732e-02, 3.210722390765700e+00, 6.441773105330824e+00, 3.204167859452989e+00, -2.831471510416667e+01, 8.895860593912774e+00, -2.314350338315752e+01, -1.336706271066577e-01, 7.341446400337150e-02, -1.266307172981157e-01, 3.308930726292808e+00, 6.618616056706427e+00, 3.308768244901594e+00, -1.089922481627578e+01, 6.618616056706426e+00, -1.104619784431705e+01, -1.240428683450729e-05, 3.540053084855296e-05, -8.462027765298768e-05, -1.684732574346608e-02, 3.291096471203151e-87, -3.768063274534977e-03, -3.983716742245070e-05, 4.004536409474694e-38, -4.884598357291779e-05, -1.894804034957148e+00, 7.237442768998755e+00, 3.317770889988232e+00, -1.638351421033292e-04, 2.923595217687369e-23, -4.026458834634839e-04, -5.423685832111498e-05, 2.923595217687215e-23, -1.021750617791431e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_edmggah_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_edmggah", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [-2.006821164979149e-04, -2.006820356738873e-04, -2.006806807495286e-04, -2.006809948949069e-04, -2.006780165831038e-04, -2.006766196813104e-04, -2.006941828491841e-04, -2.006972593106263e-04, -2.006811908139000e-04, -2.006904032448598e-04, -2.006811908139000e-04, -2.006904032448598e-04, -1.324993108367150e-03, -1.325070100134299e-03, -1.324996354595901e-03, -1.325079496246249e-03, -1.325138676279459e-03, -1.325169268151234e-03, -1.324687666572014e-03, -1.324734420773483e-03, -1.325187786864335e-03, -1.324829639750485e-03, -1.325187786864335e-03, -1.324829639750485e-03, -6.742551355992189e-03, -6.777015319808819e-03, -6.730482889880728e-03, -6.773141480649001e-03, -6.515143647317862e-03, -6.431348303571258e-03, -6.466064067389157e-03, -6.496549615724091e-03, -6.776107939898380e-03, -5.944023831947446e-03, -6.776107939898380e-03, -5.944023831947446e-03, -1.457380537078920e-02, -1.486358450614187e-02, -1.492947093491517e-02, -1.524434915570924e-02, -5.743170800337763e-03, -5.832222679354086e-03, -1.185508715148077e-02, -1.187056667588645e-02, -1.261827023208885e-02, -9.875427637904234e-03, -1.261827023208885e-02, -9.875427637904239e-03, -4.714648635744940e-03, -4.741794254226149e-03, -4.808070429175050e-03, -4.849085007960520e-03, -5.974849669469530e-03, -6.056813876188396e-03, -4.261598555471165e-03, -4.217713298035906e-03, -4.578362267540767e-03, -5.161064754490995e-03, -4.578362267540771e-03, -5.161064754490997e-03, -2.534265252163249e-04, -2.944924019068523e-04, -5.002887808847382e-04, -5.033044335039703e-04, -1.751059613228777e-05, -1.748011408651386e-05, -1.771854500049986e-04, -1.721803028731103e-04, -2.053591019226099e-04, -2.079287362771338e-04, -7.560474502975672e-04, -7.912398618288049e-04, -1.060341438512881e-04, -1.060619677767854e-04, -1.418091335850314e-03, -1.418764238851630e-03, -1.921585368083688e-03, -1.927168103607261e-03, -1.929650130355608e-03, -1.923367297045224e-03, -1.948499485390548e-03, -1.939472739689579e-03, -2.298258595358300e-03, -2.270888946010091e-03, -2.075288787299581e-03, -1.872531413816233e-03, -3.323861674446774e-03, -3.294901134355169e-03, -2.115399699567960e-03, -2.266242949215885e-03, -8.755797288283487e-03, -8.432420922349479e-03, -7.600503221373498e-03, -8.024619186957365e-03, -6.905302868335287e-03, -7.279408796470129e-03, -1.707580673516418e-03, -1.660122914543400e-03, -4.966962039560527e-03, -4.954192740577554e-03, -1.655109789782681e-03, -1.414646564281690e-03, -2.396212439393638e-03, -2.397431313724060e-03, -1.284989118697864e-02, -1.383378024862019e-02, -1.707616422048427e-02, -1.971686694782343e-02, -1.480751859327697e-03, -1.522546270553910e-03, -3.277692925553603e-05, -3.374037695383182e-05, -1.368048213494265e-16, -7.903491801213595e-16, -7.869500255344489e-04, -7.719122936120496e-04, -2.632708661470956e-03, -3.698789779985945e-03, -9.896978279755041e-14, -1.236811346271903e-12, -7.253854577468812e-04, -7.170696610908368e-04, -7.237080941757529e-04, -7.152964457094528e-04, -7.217495704433986e-04, -7.133636184214922e-04, -8.237266915308562e-04, -8.223469098936917e-04, -7.209273813771009e-04, -7.125898226625090e-04, -7.226889525589912e-04, -7.143474259990890e-04, -7.442468215573292e-04, -7.369145774759985e-04, -9.291189466135153e-03, -9.291989222369049e-03, -2.687081923773586e-03, -2.649019371792290e-03, -2.248243346693505e-03, -1.685482385467709e-03, -7.843816774928286e-03, -7.822421429815717e-03, -1.832692023639026e-03, -1.829695957969880e-03, -1.665109234787094e-03, -1.680732954605201e-03, -1.897482001995599e-03, -1.864900391098162e-03, -1.703109481098232e-03, -1.652880286229620e-03, -1.350728832073354e-03, -1.326906900909252e-03, -7.885400159147142e-03, -7.834508050569570e-03, -1.008967155379878e-02, -9.996641193650303e-03, -9.815633823743690e-03, -9.744148542561790e-03, -1.222027574429458e-04, -1.202533094176732e-04, -6.333297560534513e-03, -5.876975795792530e-03, -1.383825336972372e-02, -1.381039004777184e-02, -1.343388159945538e-03, -1.141356223608173e-03, -1.114020442035432e-02, -1.279367553788948e-02, -4.622422743257340e-11, -1.419700786344173e-10, -2.509246411225625e-11, -5.650735211320885e-12, -4.998570797796577e-13, -7.373906537883427e-13, -4.495556905326344e-03, -1.288863431554822e-03, -4.744145355039942e-12, -2.736212407808949e-11, -1.570527154142516e-12, -6.943388304479981e-12]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_edmggah_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_edmggah", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [7.895091692511812e-04, 7.895088629776911e-04, 7.895034933291216e-04, 7.895047786150528e-04, 7.894932135282269e-04, 7.894875941869906e-04, 7.895567271014502e-04, 7.895691336471331e-04, 7.895052905507258e-04, 7.895423087592267e-04, 7.895052905507258e-04, 7.895423087592267e-04, 4.854296309393551e-03, 4.854610357296792e-03, 4.854310659926839e-03, 4.854650170176055e-03, 4.854949933716481e-03, 4.855063127406547e-03, 4.853194832813333e-03, 4.853375596510797e-03, 4.855183785536650e-03, 4.853584480051587e-03, 4.855183785536650e-03, 4.853584480051587e-03, 1.980692176175949e-02, 1.991638384860057e-02, 1.975089932899660e-02, 1.988660694855577e-02, 1.857077454462264e-02, 1.828718816489069e-02, 1.849306222863803e-02, 1.859903584815927e-02, 1.953895622851768e-02, 1.668858500858509e-02, 1.953895622851768e-02, 1.668858500858509e-02, 3.418608645781857e-02, 3.440831657380559e-02, 3.577925670461470e-02, 3.597808033988578e-02, 1.733193728608116e-02, 1.749866060146387e-02, 2.285909089490126e-02, 2.258209438767951e-02, 3.601801800500509e-02, 3.072018729083708e-02, 3.601801800500508e-02, 3.072018729083710e-02, 1.885859454296931e-02, 1.896717701689350e-02, 1.923228171664791e-02, 1.939634003178609e-02, 2.218058090477870e-02, 2.241235423064199e-02, 1.704639422188466e-02, 1.687085319214363e-02, 1.831344907016307e-02, 2.064425901796398e-02, 1.831344907016308e-02, 2.064425901796399e-02, 8.058981559259191e-04, 9.702114406846399e-04, 1.793419396971138e-03, 1.805533080744749e-03, -1.377623922018265e-04, -1.378336168843529e-04, 5.010017336687843e-04, 4.810310704396550e-04, 6.136648038561871e-04, 6.239940226102965e-04, 2.816418197356016e-03, 2.957238524816982e-03, -8.480101949645985e-04, -8.478346159627462e-04, 4.416281251631711e-03, 4.419314695622518e-03, 6.403319086934549e-03, 6.423430929220001e-03, 6.450148099307452e-03, 6.422731251843877e-03, 6.533865936615700e-03, 6.503277457761161e-03, 7.932902376486710e-03, 7.828942283043212e-03, -3.339905184192131e-04, -1.122158585733911e-03, 5.590717717975603e-03, 5.471377764750712e-03, -8.879533276634150e-04, -6.280009250796406e-04, 2.611339375497531e-02, 2.452406023232717e-02, 2.179633060774032e-02, 2.392093880411109e-02, 1.901552919558748e-02, 2.094009724216215e-02, -1.318873389929505e-02, -1.356945772432271e-02, -4.719348284186626e-03, -4.893127510261866e-03, -1.131583657195023e-02, -1.323961188511157e-02, 8.268198151062053e-03, 8.273665176847616e-03, 2.943364427074120e-02, 3.206879610753380e-02, 4.633873640476372e-02, 5.560114290434675e-02, 5.923007437310787e-03, 6.090185082215642e-03, 1.311077170221441e-04, 1.349615078153273e-04, 5.472192853977059e-16, 3.161396720485438e-15, -6.155325576014816e-03, -6.272677170202866e-03, 1.053083464588382e-02, 1.479515911994378e-02, 3.958791311902011e-13, 4.947245385087611e-12, -5.649847203396351e-03, -5.716166892987312e-03, -5.722371547239465e-03, -5.789664734986689e-03, -5.706908947310277e-03, -5.773996563485482e-03, -5.280032649642497e-03, -5.318715444360249e-03, -5.700718405691805e-03, -5.767418856657195e-03, -5.693672120964244e-03, -5.760388443310874e-03, -5.895316619608563e-03, -5.953974572255849e-03, 2.638853010594615e-02, 2.634504369167201e-02, 5.732842880751187e-04, 3.758780923177911e-04, -6.363638750634696e-04, -2.921267142848854e-03, 2.147115603694336e-02, 2.134878411697189e-02, -2.573342968213686e-03, -2.622117770411457e-03, -5.495288617957863e-04, -4.987827439467130e-04, -1.491704372174220e-02, -1.517768496056966e-02, -1.322193594942342e-02, -1.362377294139833e-02, -1.043737744258879e-02, -1.062024816147457e-02, 1.348451324049231e-02, 1.328731473484477e-02, 2.230159881909886e-02, 2.193584730716770e-02, 2.737522394529503e-02, 2.700742800420333e-02, -9.489357001524659e-04, -9.665706130713516e-04, 2.036776711522234e-02, 1.837638519910211e-02, 3.902992386628082e-02, 3.867236625475756e-02, -9.126303902512369e-03, -1.074327139107746e-02, 3.006096113912275e-02, 3.586600586604777e-02, 5.740592236755870e-11, 4.357711913175990e-10, 1.003698564490250e-10, 2.260294084528354e-11, 1.999428319118631e-12, 2.949562615153371e-12, 4.596286820397486e-03, -8.449355371467102e-03, 1.897658142015977e-11, 1.094484963123580e-10, 6.282108616570064e-12, 2.777355321791992e-11]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
