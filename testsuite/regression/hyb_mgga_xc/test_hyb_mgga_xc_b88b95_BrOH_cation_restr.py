
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_b88b95_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b88b95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.524036467532905e+01, -1.524038419795728e+01, -1.524052008648711e+01, -1.524022858553654e+01, -1.524037434505948e+01, -1.524037434505948e+01, -2.577129625292827e+00, -2.577101873837018e+00, -2.576503588571709e+00, -2.577821028767773e+00, -2.577060926879338e+00, -2.577060926879338e+00, -5.431501353736866e-01, -5.429502247164413e-01, -5.394077876399795e-01, -5.424017423171099e-01, -5.414065686145377e-01, -5.414065686145377e-01, -1.674723927904058e-01, -1.683890654855992e-01, -6.404751705170491e-01, -1.451698409448401e-01, -1.527422063450145e-01, -1.527422063450145e-01, -4.674097861316685e-02, -4.673201613925120e-02, -8.212470365809178e-02, -4.292081456238173e-02, -4.261694364101851e-02, -4.261694364101848e-02, -3.701284870958086e+00, -3.700817253791127e+00, -3.701270028924580e+00, -3.700857153824353e+00, -3.701044172798035e+00, -3.701044172798035e+00, -1.566635161449909e+00, -1.573919569898862e+00, -1.566871439793498e+00, -1.573292521162901e+00, -1.570554077309075e+00, -1.570554077309075e+00, -4.531062689337798e-01, -4.751621781209106e-01, -4.256965667805876e-01, -4.318295851717954e-01, -4.577604584507726e-01, -4.577604584507726e-01, -1.233203637755165e-01, -1.806692280887395e-01, -1.179127874080914e-01, -1.376203340659520e+00, -1.277752025091484e-01, -1.277752025091484e-01, -3.877329144117956e-02, -4.133941019243755e-02, -2.703471655991690e-02, -9.552462872513445e-02, -3.270166458384793e-02, -3.270166458384795e-02, -4.307638071110012e-01, -4.327658059810376e-01, -4.320960074445719e-01, -4.315120319978425e-01, -4.318072306587851e-01, -4.318072306587851e-01, -4.194576656587025e-01, -3.948384198616880e-01, -4.021441936663212e-01, -4.089977005519340e-01, -4.054501987815208e-01, -4.054501987815208e-01, -4.993570503297132e-01, -2.129069259685606e-01, -2.398003766764257e-01, -2.879496507333368e-01, -2.613474178567391e-01, -2.613474178567390e-01, -3.665847380286950e-01, -8.220825635099832e-02, -9.135819894210656e-02, -2.723184636584216e-01, -1.031139366647620e-01, -1.031139366647620e-01, -5.252228827091292e-02, -2.401347709546414e-02, -3.132940107377831e-02, -1.004455960384381e-01, -3.073704856991234e-02, -3.073704856991231e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_b88b95_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b88b95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.826725663009351e+01, -1.826732456827554e+01, -1.826761374455768e+01, -1.826660318760192e+01, -1.826713452430351e+01, -1.826713452430351e+01, -3.025877459200755e+00, -3.025898691491186e+00, -3.026426198717429e+00, -3.025676477939138e+00, -3.025788073786983e+00, -3.025788073786983e+00, -6.309798120922591e-01, -6.299153909219145e-01, -6.030770041555952e-01, -6.059405413344580e-01, -6.060075358213457e-01, -6.060075358213457e-01, -1.622162594007708e-01, -1.651928527430594e-01, -7.695033560407544e-01, -1.214321903427757e-01, -1.374920719964581e-01, -1.374920719964581e-01, -1.293957625873377e-02, -1.319346792032192e-02, -3.883620630934082e-02, -1.008787164704469e-02, -1.085209413458382e-02, -1.085209413458385e-02, -4.550762921156588e+00, -4.552517971525178e+00, -4.550840997030154e+00, -4.552390426701013e+00, -4.551653746058085e+00, -4.551653746058085e+00, -1.659907017560342e+00, -1.672661961919920e+00, -1.647406532427401e+00, -1.658620827720170e+00, -1.673059196561709e+00, -1.673059196561709e+00, -5.485555643709125e-01, -6.022293012920563e-01, -5.132636005469077e-01, -5.402996740728312e-01, -5.578674631945926e-01, -5.578674631945926e-01, -8.430822088419641e-02, -1.584103677022276e-01, -7.843182117539059e-02, -1.744059580366741e+00, -9.849838751601941e-02, -9.849838751601941e-02, -8.666593640544737e-03, -9.763752373232621e-03, -6.731233629465469e-03, -5.525514867849701e-02, -8.130734450704707e-03, -8.130734450704738e-03, -5.600070380068038e-01, -5.542562655789531e-01, -5.562830501890784e-01, -5.579528670359903e-01, -5.571179869743315e-01, -5.571179869743315e-01, -5.458617382436866e-01, -4.522686467485673e-01, -4.788569823730470e-01, -5.060064661314334e-01, -4.922351036304838e-01, -4.922351036304838e-01, -6.305501751644111e-01, -2.003559104626039e-01, -2.430130264975126e-01, -3.307977357253549e-01, -2.828074276479380e-01, -2.828074276479379e-01, -4.214056933330871e-01, -3.794761822029513e-02, -4.726796923808277e-02, -3.233421881485615e-01, -6.763530903458788e-02, -6.763530903458786e-02, -1.589761856808151e-02, -4.535764286624364e-03, -6.736088161921632e-03, -6.389789779781931e-02, -7.601068109522630e-03, -7.601068109522586e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_b88b95_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b88b95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.082807814638264e-09, -5.082781992880828e-09, -5.082603729795779e-09, -5.082989389717551e-09, -5.082796324399846e-09, -5.082796324399846e-09, -5.729738687337005e-06, -5.729956161425699e-06, -5.735202794319193e-06, -5.730052138007341e-06, -5.733337801586896e-06, -5.733337801586896e-06, -2.073847466330665e-03, -2.098067233333668e-03, -2.645527873205385e-03, -2.637279297668312e-03, -2.623252588380366e-03, -2.623252588380366e-03, -4.198823817260715e-01, -4.022049317448264e-01, -2.912837978280751e-04, -9.459076009099748e-01, -6.829033681859081e-01, -6.829033681859081e-01, -7.296892450599084e+03, -6.398610932145549e+03, -4.233438625737890e+01, -3.443922734388181e+04, -1.908553952642924e+04, -1.908553952642925e+04, -1.430775690860814e-06, -1.431460317548599e-06, -1.430803639360124e-06, -1.431407808520687e-06, -1.431124442670788e-06, -1.431124442670788e-06, -4.708984712713688e-05, -4.614678403593215e-05, -4.740797947133362e-05, -4.656634663938253e-05, -4.641416670191050e-05, -4.641416670191050e-05, -4.624453313704988e-03, -1.955784507951404e-03, -5.137692740574003e-03, 2.791727401801544e-04, -4.333400636730753e-03, -4.333400636730753e-03, -2.671107061156552e+00, -3.598673889657696e-01, -3.404524312227661e+00, -4.981345551536383e-05, -1.828026084650533e+00, -1.828026084650533e+00, -7.855348618130380e+04, -3.847748096764447e+04, -1.394299183630183e+05, -1.142432532119774e+01, -6.582778306757468e+04, -6.582778306757464e+04, -4.562258738853017e-03, -4.981774191706698e-03, -4.834375673066366e-03, -4.709510697767056e-03, -4.771755557210501e-03, -4.771755557210501e-03, -4.190142277335803e-03, -1.036768742028608e-02, -8.796985089729427e-03, -7.112947480737271e-03, -7.974461410042728e-03, -7.974461410042728e-03, -1.412392431721985e-03, -1.660240981352800e-01, -9.153881294833928e-02, -3.196128407880654e-02, -5.739165686110168e-02, -5.739165686110171e-02, -1.311998016011529e-02, -4.656853295932120e+01, -1.957278165668347e+01, -3.335833519441466e-02, -6.056794152863775e+00, -6.056794152863776e+00, -2.557155806761788e+03, -2.703126171099668e+06, -2.592637457999247e+05, -7.231680179238086e+00, -8.787774693344506e+04, -8.787774693344535e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_b88b95_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b88b95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-1.453792283978471e-05, -1.453818662584219e-05, -1.453879561912927e-05, -1.453488296950892e-05, -1.453701315010626e-05, -1.453701315010626e-05, -2.775718393848247e-04, -2.776240936498513e-04, -2.788234851368839e-04, -2.766509746532341e-04, -2.776228584892479e-04, -2.776228584892479e-04, -2.566454190939865e-03, -2.533371885065624e-03, -1.804185727185526e-03, -1.813146546056280e-03, -1.838213172349539e-03, -1.838213172349539e-03, -2.555797814259009e-03, -2.812007899408073e-03, -2.283128744728795e-03, -9.589339535762655e-04, -1.555106140527363e-03, -1.555106140527362e-03, -3.258796894617046e-07, -3.975288282833202e-07, -2.492603401189000e-05, -6.277512067909956e-08, -1.524265052365561e-07, -1.524265052365564e-07, -2.269702985532985e-04, -2.280573663706722e-04, -2.270144524712743e-04, -2.279741091301697e-04, -2.275237198577517e-04, -2.275237198577517e-04, -2.646821746696447e-04, -2.698698241827689e-04, -2.483762463982107e-04, -2.527232363479489e-04, -2.759354158000614e-04, -2.759354158000614e-04, -6.369241708602159e-03, -1.190292719782858e-02, -6.412473447449897e-03, -1.282699419954386e-02, -6.819996236865639e-03, -6.819996236865639e-03, -2.855271797554048e-04, -1.081443713068554e-03, -2.474314630730053e-04, -1.928645477872851e-03, -6.389134607717199e-04, -6.389134607717198e-04, -3.950316868999526e-08, -6.927478027200196e-08, -2.025449349540546e-07, -1.121481555037163e-04, -1.603352375432031e-07, -1.603352375432027e-07, -1.715653870777054e-02, -1.386575190372423e-02, -1.490949299207765e-02, -1.586232602812442e-02, -1.537527207624292e-02, -1.537527207624292e-02, -1.924636234980064e-02, -4.390069527485070e-03, -6.462968674229307e-03, -9.827025162610095e-03, -7.946372527416517e-03, -7.946372527416517e-03, -1.066059606991729e-02, -1.552655076970212e-03, -2.480934733989058e-03, -6.305605209934963e-03, -4.033158041228320e-03, -4.033158041228323e-03, -4.854046670396275e-03, -2.008518762128271e-05, -4.752137100784840e-05, -9.965204787316353e-03, -2.644635392811541e-04, -2.644635392811544e-04, -6.882113065106681e-07, -7.619803347053765e-09, -3.151297056615350e-08, -2.192720144245662e-04, -1.623227288495196e-07, -1.623227288495198e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
