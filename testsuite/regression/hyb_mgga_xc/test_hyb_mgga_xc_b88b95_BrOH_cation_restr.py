
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_b88b95_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b88b95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.439568732482702e+01, -1.439572594845562e+01, -1.439591046417615e+01, -1.439533547391206e+01, -1.439563493765065e+01, -1.439563493765065e+01, -2.459093599011209e+00, -2.459078028619963e+00, -2.458710333712171e+00, -2.459072307198359e+00, -2.458788382937355e+00, -4.049552853933319e+75, -5.828400453270137e-01, -7.341297214425744e+120, -5.263139843586302e+77, -9.293026182985261e+103, -2.586703194126949e+77, -9.341741223192633e+103, -4.095335938182447e+47, -5.027166817680659e+105, -7.421606074011411e-01, -2.446940251134531e+113, -8.816361053520159e+105, -2.245552122355684e+120, -4.533747063192617e+87, -9.330195830211501e+102, -4.940363801501338e+112, -1.100571408368187e+118, -4.471296666888963e+138, -5.933721770599783e+93, -3.837267002695983e+81, -1.199582007903494e+118, -1.152100145558738e+99, -3.562148126190730e+00, -3.179321885588789e+108, -4.773129931789586e+84, -1.439032422706244e+00, -1.445422260214154e+00, -1.434650394590118e+00, -1.440138615386052e+00, -1.444691057677148e+00, -2.421900125578798e+76, -2.832089478717439e+87, -2.424213285513909e+106, -4.234184242179061e+87, -3.483302630831612e+106, -2.700234004938101e+87, -4.563034453035815e-01, -4.552272780385100e-01, -4.585016490962305e+98, -4.883736506901662e-01, -3.140057783618157e+30, -6.020341017147981e+79, -1.893927212095918e+123, -3.260616159426711e+01, -3.934806450479966e+84, -2.202539943841856e+142, -7.028794623469631e-01, -1.371546286488955e+01, -4.245773948370500e+84, -1.410898138367615e+116, -4.981900813840834e+110, -4.299835112264551e-01, -7.697943943293999e+101, -3.379985394967130e+79, -3.572638427181790e+118, -3.331184018447063e+111, -1.367551803685127e+78, -4.044873521173994e+111, -1.748787639543134e+97, -2.732732172158274e+120, -4.013414468780422e-01, -5.467637777536565e+120, -2.736597302325511e-01, -1.074990726129467e+110, -3.050386230900800e-01, -6.884702177507743e+85, -1.460042111929348e+97, -3.716231196428573e-01, -1.131227438725146e+127, -4.491984141934505e+126, -1.492264339156740e+124, -4.592285627182656e-01, -2.581581691627900e+125, -1.542407735384681e+128, -1.738289891018821e+134, -1.531723497764936e+27, -1.824498631246299e+90, -8.378668274479929e+115, -3.836389479864966e+129]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_b88b95_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b88b95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.909379628502354e+01, -1.909385013516286e+01, -1.909410562596276e+01, -1.909330415951907e+01, -1.909372182409871e+01, -1.909372182409871e+01, -3.113793127289658e+00, -3.113811788260914e+00, -3.114357067725176e+00, -3.114417769573019e+00, -3.114089185642179e+00, -2.985405764039772e+73, -5.816844801700289e-01, -3.408448535029622e+118, -3.743941038034404e+75, -4.993335965987281e+101, -1.847156993768865e+75, -5.019369796074144e+101, -4.589392942232267e+45, -2.644388373796776e+103, -6.370102870851817e-01, -1.201530159226360e+111, -4.624092407230201e+103, -1.041381272898679e+118, -2.809862036637979e+85, -4.966242807618531e+100, -2.428369259178164e+110, -5.132073438247540e+115, -1.788636568677671e+136, -3.445752074139421e+91, -2.633364813567827e+79, -5.739288787910982e+115, -6.544478219078103e+96, -4.694861302460354e+00, -1.652351615461843e+106, -3.159154605620484e+82, -1.749519755204654e+00, -1.764074172044779e+00, -1.738733602564951e+00, -1.751685976878185e+00, -1.762775642104849e+00, -1.762376482949302e+74, -1.797616024715817e+85, -1.273744430993528e+104, -2.681415578805847e+85, -1.826718203618192e+104, -1.714445354020307e+85, -5.548104809269627e-01, 8.519113431941586e-02, -2.577158472578933e+96, 1.093017248803124e-01, -5.456746926022868e+28, -4.137326224836180e+77, -8.571977838779687e+120, 1.242402363698561e+01, -2.514737691043204e+82, -8.577875629390004e+139, 2.412510336775425e-01, 5.264716772341312e+00, -2.711411567921772e+82, -6.805812199385458e+113, -2.517869959350017e+108, -5.577461045868107e-01, -4.216143672624970e+99, -2.350572640814370e+77, -1.689385560628477e+116, -1.671370299497371e+109, -9.664030285925891e+75, -2.027150615424802e+109, -1.001619659123654e+95, -1.272088918146570e+118, -4.954592159861534e-01, -2.541130821755795e+118, -1.667408068127243e-01, -5.448230143285306e+107, -3.161185502923437e-01, -4.434717331703446e+83, -8.348102279172614e+94, -4.168320465312162e-01, -4.953665737969466e+124, -1.975076036369347e+124, -6.732854154186124e+121, 1.097920479778607e-01, -1.147684455552195e+123, -6.666729628210750e+125, -7.138023951628093e+131, -2.687100853132380e+25, -1.112190538519570e+88, -3.972522185433306e+113, -1.635382818012353e+127]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_b88b95_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b88b95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-6.683029279825004e-09, -6.682966988256006e-09, -6.682663183827272e-09, -6.683591249183868e-09, -6.683108756140044e-09, -6.683108756140044e-09, -2.644857259767615e-06, -2.646411541586833e-06, -2.687170710023718e-06, -2.670280961027181e-06, -2.672607323384062e-06, 3.620642438174510e-07, 2.498023194008858e-02, 3.966158671824490e-04, 3.821181409611752e-04, 3.966439612027352e-04, 3.930690747208951e-04, 3.930690747208951e-04, 1.180368511323550e-01, 1.176378204074374e-01, 2.203725383292422e-02, 1.126006342458882e-01, 1.220463489346067e-01, 1.220463489346067e-01, 7.727653328679283e-01, 8.003205044098904e-01, 2.716932451051468e-01, 5.996547861649331e-01, 8.171780932607046e-01, 8.171780932607046e-01, 1.451327220801815e-07, 1.455762837478288e-07, 1.451591950777881e-07, -1.606380839764380e-06, 1.453542469680726e-07, 1.453542469680726e-07, 3.465779985233424e-05, 2.862134199006371e-05, 3.971599209534668e-05, 3.386926025882879e-05, 2.900586274489306e-05, 4.552639690363610e-06, 2.272907231551215e-03, 2.386985072848579e-03, 2.450167966159055e-03, 2.751580778736073e-03, 2.282464392218929e-03, 7.727180423300176e-03, 2.323910513119387e+03, 6.209014479752905e-02, 3.773230805518347e+03, 1.015413298488710e-05, 1.831322939245599e-01, 1.831322939245600e-01, 8.972070724649695e+12, 5.311353292625086e-01, 4.387742518491287e+00, 4.277527977285856e+04, 1.742413561310076e+12, 1.659498907763941e+00, 6.169193987225028e-03, 5.350086333497048e-03, -2.685737449555609e-03, 5.850102463071875e-03, 5.728799655402441e-03, 5.728799655402441e-03, 6.835563948006674e-03, 4.321760872261887e-03, 4.686532585223618e-03, 5.297848224348901e-03, 4.947172902477486e-03, 9.531378981451361e-03, 1.700836456513569e-03, 8.056248651476929e+00, 2.536061883877486e-02, 3.287835673366538e-01, 1.986560270979401e-02, 1.986560270979402e-02, 6.721406359374671e-02, 2.798194700446983e-01, 2.203269890040014e-01, 2.136558295917660e-02, 7.804110079005288e+03, 2.774428359704279e-01, 3.531878581019126e-01, 7.052281159479137e-01, 1.946034217036985e+00, 3.129585872780374e-01, 2.379988096489895e+00, 2.379988096489904e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_b88b95_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b88b95", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-3.917476094290055e-05, -3.917456290562790e-05, -3.917362137932091e-05, -3.917656909685308e-05, -3.917503319995349e-05, -3.917503319995349e-05, -9.886250054216535e-04, -9.886212963460517e-04, -9.884934715953247e-04, -9.883894443422218e-04, -9.885791352840607e-04, -1.092890167284502e-04, -1.592853529406604e-02, -5.685700042247030e-04, -4.648129682438896e-04, -5.139818280660836e-04, -5.022363367313802e-04, -5.022363367313802e-04, -2.272476539174919e-03, -2.438635333769843e-03, -1.238371199050499e-02, -6.228892557979323e-04, -1.124305293517300e-03, -1.124305293517299e-03, -3.204729070861083e-07, -3.855175240946730e-07, -1.991413646192578e-05, -4.988686685971546e-08, -1.326836629820020e-07, -1.326836629820020e-07, -2.260367971782170e-04, -2.271288073430429e-04, -2.261000879123792e-04, -4.880334250829034e-04, -2.265829779956127e-04, -2.265829779956127e-04, -2.661303104094819e-03, -2.628685277403782e-03, -2.685517452651573e-03, -2.656249081361493e-03, -2.631732964054590e-03, -2.290778277697597e-04, -3.980651631573461e-03, -6.402809383628741e-03, -2.954762597660942e-03, -4.309697953295984e-03, -4.345624039846454e-03, -1.929735692306609e-02, -3.460331214744272e-01, -9.414838695722697e-04, -3.870885540310496e-01, -6.625392309547946e-04, -5.032062162522918e-04, -5.032062162522921e-04, -3.156062561985356e+01, -4.134727186741635e-08, -1.556221706271906e-07, -6.787815240163054e-01, -2.642940795733916e+01, -1.015876081719198e-07, -1.552468435401276e-02, -1.269737312846192e-02, -1.976885817934797e-02, -1.441831558918538e-02, -1.399960176047655e-02, -1.399960176047655e-02, -1.574997737406090e-02, -4.123336256814151e-03, -5.890729233565684e-03, -8.626635291583489e-03, -7.072833338322452e-03, -2.357026059631729e-02, -5.028715317686327e-03, -9.384751940055865e-02, -2.033973732592932e-03, -4.576736496754310e-02, -2.971284313366229e-03, -2.971284313366229e-03, -3.001494066796270e-02, -1.798465892885614e-05, -3.609275702144947e-05, -5.873978700190716e-03, -4.830320359587126e-01, -1.992430445642115e-04, -4.006917532914426e-07, -1.135208051828429e-09, -2.781011732063595e-08, -1.840090343808162e-04, -1.160538313713013e-07, -1.160538313713013e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
