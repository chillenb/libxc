
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_mpwb1k_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_mpwb1k", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.187675497404360e+01, -1.187677015362004e+01, -1.187687575735726e+01, -1.187664909844365e+01, -1.187676244309665e+01, -1.187676244309665e+01, -2.019262388142802e+00, -2.019240753843505e+00, -2.018770193735621e+00, -2.019759602144038e+00, -2.019187576179690e+00, -2.019187576179690e+00, -4.311260689674664e-01, -4.309222565668909e-01, -4.269414452295008e-01, -4.291765042571715e-01, -4.284819128925153e-01, -4.284819128925153e-01, -1.318247632946999e-01, -1.327162263221277e-01, -5.111768879070091e-01, -1.120208402122476e-01, -1.192002320173861e-01, -1.192002320173862e-01, -4.802842343583594e-04, -5.668323433555484e-04, -3.134423054849057e-02, -1.009638490773003e-04, -2.108930921739043e-04, -2.108930921739041e-04, -2.892960051026782e+00, -2.892598580865416e+00, -2.892948331857430e+00, -2.892629189296489e+00, -2.892774122870740e+00, -2.892774122870740e+00, -1.226749869075252e+00, -1.232491476467418e+00, -1.226667892380172e+00, -1.231732904530817e+00, -1.229964821287652e+00, -1.229964821287652e+00, -3.598405974928675e-01, -3.784895500154204e-01, -3.387042704414437e-01, -3.456203374539824e-01, -3.635777922997627e-01, -3.635777922997627e-01, -8.958469561507663e-02, -1.405497021222396e-01, -8.437480856601634e-02, -1.085382245485000e+00, -9.689266429136853e-02, -9.689266429136853e-02, -5.574732846039463e-05, -1.018997488023675e-04, -1.091144721226454e-04, -6.004735891646672e-02, -1.302924854996362e-04, -1.302924854996363e-04, -3.424844319990119e-01, -3.439428535692568e-01, -3.434755516283676e-01, -3.430578911479291e-01, -3.432709710673859e-01, -3.432709710673859e-01, -3.338200818387627e-01, -3.128283175543102e-01, -3.190959014381325e-01, -3.249910310779818e-01, -3.219587723604923e-01, -3.219587723604923e-01, -3.978138225821187e-01, -1.670049710220106e-01, -1.892960594475647e-01, -2.291740013757088e-01, -2.072364894454385e-01, -2.072364894454385e-01, -2.908965509524983e-01, -2.847534033229466e-02, -4.648837062216892e-02, -2.173586505827446e-01, -7.304475111141426e-02, -7.304475111141426e-02, -1.129580939349325e-03, -5.425084968459732e-06, -3.028241152958772e-05, -6.967599333195339e-02, -1.165368879649924e-04, -1.165368879649924e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_mpwb1k_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_mpwb1k", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.423504306311003e+01, -1.423509550065583e+01, -1.423531912040025e+01, -1.423453911169900e+01, -1.423494916922988e+01, -1.423494916922988e+01, -2.377671194669215e+00, -2.377685363157944e+00, -2.378033621754866e+00, -2.377472368607072e+00, -2.377557714209158e+00, -2.377557714209158e+00, -5.091158104709110e-01, -5.082705009169519e-01, -4.868385514083478e-01, -4.886297230286321e-01, -4.888389141767587e-01, -4.888389141767587e-01, -1.348078362288872e-01, -1.370379558733697e-01, -6.265048892769368e-01, -1.056086630589554e-01, -1.164138382963304e-01, -1.164138382963303e-01, -1.768606801039822e-03, -2.085652078532779e-03, -7.117828332859345e-02, -3.716205505925864e-04, -7.773011241379526e-04, -7.773011241379545e-04, -3.557708864996326e+00, -3.559049147977706e+00, -3.557768267641136e+00, -3.558951536688223e+00, -3.558389262511043e+00, -3.558389262511043e+00, -1.312590499311811e+00, -1.322265316480882e+00, -1.303206872471079e+00, -1.311700180575997e+00, -1.322529777220311e+00, -1.322529777220311e+00, -4.385129791525280e-01, -4.784046575651731e-01, -4.119900445806571e-01, -4.313122524705406e-01, -4.455703731097851e-01, -4.455703731097851e-01, -8.704121827501382e-02, -1.342333382627972e-01, -8.437775496475357e-02, -1.370768344748176e+00, -8.989544751554883e-02, -8.989544751554883e-02, -2.049250539594838e-04, -3.751213030989621e-04, -4.020902401886058e-04, -7.769326197267210e-02, -4.801269054783629e-04, -4.801269054783644e-04, -4.436703322312603e-01, -4.402828372870637e-01, -4.416073071896628e-01, -4.426006672543802e-01, -4.421188695213999e-01, -4.421188695213999e-01, -4.323132992524646e-01, -3.626581697533171e-01, -3.830036708811013e-01, -4.036155443837689e-01, -3.932050958899762e-01, -3.932050958899762e-01, -5.009486852007196e-01, -1.662022063729296e-01, -1.991024297243911e-01, -2.681054714640624e-01, -2.301079294068543e-01, -2.301079294068543e-01, -3.390314138935731e-01, -6.872044179928750e-02, -8.175314986277683e-02, -2.617604384613406e-01, -7.472666444655243e-02, -7.472666444655243e-02, -4.132651906398143e-03, -1.984350539121716e-05, -1.111782937829727e-04, -7.432663198954111e-02, -4.293995629104190e-04, -4.293995629104164e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_mpwb1k_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_mpwb1k", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-3.936898037932107e-09, -3.936878767091399e-09, -3.936743569442951e-09, -3.937031473625420e-09, -3.936887650428915e-09, -3.936887650428915e-09, -4.199479093518448e-06, -4.199644204970347e-06, -4.203828710298538e-06, -4.201683880845922e-06, -4.203162977122914e-06, -4.203162977122914e-06, -1.092934369330609e-03, -1.115850640127262e-03, -1.634199126802298e-03, -1.655211539964562e-03, -1.632110891963350e-03, -1.632110891963350e-03, -2.706635770003986e-01, -2.591669013186312e-01, 2.545658916034668e-04, -5.609483510624479e-01, -4.261275553276929e-01, -4.261275553276928e-01, 1.667824681568559e+02, 1.733247845515241e+02, 1.765684984444880e+01, 1.732204816924757e+02, 2.060567917043829e+02, 2.060567917043846e+02, -1.088104444117458e-06, -1.088606678249636e-06, -1.088127022058739e-06, -1.088570150608607e-06, -1.088359250807741e-06, -1.088359250807741e-06, -3.482354792061333e-05, -3.415435601160390e-05, -3.505759150729455e-05, -3.446164407851199e-05, -3.433836277668598e-05, -3.433836277668598e-05, -2.677282503544039e-03, -2.651044743621368e-04, -2.551844333318748e-03, 2.941189831776894e-03, -2.466825263321391e-03, -2.466825263321391e-03, -1.063750572887124e+00, -2.267876022310964e-01, -1.195618248938717e+00, -2.916939475853008e-05, -9.826053263131500e-01, -9.826053263131500e-01, 2.385353104078590e+02, 2.030709666646601e+02, 1.221038780734244e+03, -3.337609501226343e-01, 5.689041045303910e+02, 5.689041045303944e+02, -2.585053369456370e-03, -2.609265934092555e-03, -2.458506881291408e-03, -2.402939116173956e-03, -2.416343636241916e-03, -2.416343636241916e-03, -1.964942561812979e-03, -6.964447879024282e-03, -5.671558070296120e-03, -4.174810526838069e-03, -4.947573662612264e-03, -4.947573662612264e-03, -2.462801485035929e-05, -1.089863075486568e-01, -6.066960198220585e-02, -1.880116249907310e-02, -3.723776833684837e-02, -3.723776833684839e-02, -8.414488756915247e-03, 2.002989798595974e+01, 5.232768984796154e+00, -1.678607681416520e-02, -1.932025583291009e+00, -1.932025583291009e+00, 1.241460155158288e+02, 1.241376029102219e+03, 5.241240439799042e+02, -1.883331582570915e+00, 7.216929330809190e+02, 7.216929330809180e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_mpwb1k_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_mpwb1k", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_mpwb1k_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_mpwb1k", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-1.453792283978471e-05, -1.453818662584219e-05, -1.453879561912927e-05, -1.453488296950892e-05, -1.453701315010626e-05, -1.453701315010626e-05, -2.775718393848247e-04, -2.776240936498513e-04, -2.788234851368839e-04, -2.766509746532341e-04, -2.776228584892479e-04, -2.776228584892479e-04, -2.566454190939865e-03, -2.533371885065624e-03, -1.804185727185526e-03, -1.813146546056280e-03, -1.838213172349539e-03, -1.838213172349539e-03, -2.555797814259009e-03, -2.812007899408073e-03, -2.283128744728795e-03, -9.589339535762655e-04, -1.555106140527363e-03, -1.555106140527362e-03, -3.258796894617046e-07, -3.975288282833202e-07, -2.492603401189000e-05, -6.277512067909956e-08, -1.524265052365561e-07, -1.524265052365564e-07, -2.269702985532985e-04, -2.280573663706722e-04, -2.270144524712743e-04, -2.279741091301697e-04, -2.275237198577517e-04, -2.275237198577517e-04, -2.646821746696447e-04, -2.698698241827689e-04, -2.483762463982107e-04, -2.527232363479489e-04, -2.759354158000614e-04, -2.759354158000614e-04, -6.369241708602159e-03, -1.190292719782858e-02, -6.412473447449897e-03, -1.282699419954386e-02, -6.819996236865639e-03, -6.819996236865639e-03, -2.855271797554048e-04, -1.081443713068554e-03, -2.474314630730053e-04, -1.928645477872851e-03, -6.389134607717199e-04, -6.389134607717198e-04, -3.950316868999526e-08, -6.927478027200196e-08, -2.025449349540546e-07, -1.121481555037163e-04, -1.603352375432031e-07, -1.603352375432027e-07, -1.715653870777054e-02, -1.386575190372423e-02, -1.490949299207765e-02, -1.586232602812442e-02, -1.537527207624292e-02, -1.537527207624292e-02, -1.924636234980064e-02, -4.390069527485070e-03, -6.462968674229307e-03, -9.827025162610095e-03, -7.946372527416517e-03, -7.946372527416517e-03, -1.066059606991729e-02, -1.552655076970212e-03, -2.480934733989058e-03, -6.305605209934963e-03, -4.033158041228320e-03, -4.033158041228323e-03, -4.854046670396275e-03, -2.008518762128271e-05, -4.752137100784840e-05, -9.965204787316353e-03, -2.644635392811541e-04, -2.644635392811544e-04, -6.882113065106681e-07, -7.619803347053765e-09, -3.151297056615350e-08, -2.192720144245662e-04, -1.623227288495196e-07, -1.623227288495198e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
