
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_b94_hyb_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b94_hyb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.599450048804588e+01, -1.599453042163232e+01, -1.599472290724896e+01, -1.599427677719665e+01, -1.599450210750903e+01, -1.599450210750903e+01, -3.053351113392579e+00, -3.053305406131936e+00, -3.052289315666024e+00, -3.054399297874089e+00, -3.053292768533465e+00, -3.053292768533465e+00, -6.679027415362239e-01, -6.680413793214628e-01, -6.725824593187220e-01, -6.743895476927269e-01, -6.729949663007673e-01, -6.729949663007673e-01, -2.141650327873454e-01, -2.147431346205143e-01, -7.838780891063366e-01, -1.921307663287410e-01, -1.971371440242251e-01, -1.971371440242285e-01, -6.709806204885087e-02, -6.724503857433689e-02, -1.143602716060316e-01, -6.117893497320578e-02, -6.184850059074128e-02, -6.184850059074124e-02, -7.335628419276463e+00, -5.948673226727871e+00, -3.359241400055438e+00, -8.775820559981396e+00, -3.608297865772466e+00, -5.071388529023685e+00, -1.333654141711942e+00, -2.245804407995081e+00, -2.002195381265826e+00, -2.008613573003062e+00, -2.007735581475917e+00, -1.839708704009708e+00, -1.039964488399263e+00, -8.354335166495334e-01, -9.495376704176811e-01, -5.324068608474557e-01, -5.796187201730775e-01, -6.099773094492642e-01, -1.342962603738248e-01, -3.614237478059815e-01, -1.367491871163052e-01, -1.758504667760103e+00, -1.589533453984877e-01, -1.425429242343383e-01, -1.216268463992215e-01, -2.595002607021673e+00, -6.249810369933818e-01, -1.367183325853621e-01, -7.113248387899181e-02, -1.376059679683333e+00, -2.561187414982995e+01, -4.385503256750406e-01, -4.393659436489418e-01, -3.883544442419667e+00, -4.397044201336618e-01, -7.566985006386656e+01, -4.313663035328442e-01, -4.873344725432684e-01, -8.295240224478807e-01, -4.192274875874535e-01, -5.461565284976975e-01, -1.071148188415239e+00, -1.193435754957120e+00, -1.839596578096056e-01, -2.205504902527881e-01, -2.887959197332843e-01, -3.853269253453578e-01, -3.542251424438229e-01, -4.587660657904341e-01, -8.749860286364944e-02, -1.319999315084386e-01, -3.354382608845321e-01, -1.102048786759560e-01, -1.269788305670788e-01, -1.172596930034270e+00, -2.308697606258937e+01, -6.371985435171035e-01, -8.810990031305382e-02, -9.453664694870456e-01, -9.453679310378921e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_b94_hyb_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b94_hyb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.379219346409559e+01, -2.379226373723019e+01, -2.379261748381990e+01, -2.379157163341472e+01, -2.379211379910977e+01, -2.379211379910977e+01, -3.894087599704724e+00, -3.894154390671818e+00, -3.895803007185097e+00, -3.893735338838122e+00, -3.894286357349632e+00, -3.894286357349632e+00, -7.706070120539350e-01, -7.695923289398915e-01, -7.462186885133119e-01, -7.508547338959382e-01, -7.499154662193446e-01, -7.499154662193446e-01, -2.091920878129362e-01, -2.120840298128693e-01, -9.003767736167941e-01, -1.664662240093259e-01, -1.811295618760577e-01, -1.811295618760489e-01, -2.931341891733407e-02, -2.968377619856005e-02, -6.508399582104545e-02, -2.508159582301805e-02, -2.661932464603770e-02, -2.661932464603787e-02, -7.084453661819678e+00, -6.343854458691327e+00, -4.475188718741290e+00, -7.942585877514271e+00, -5.176703748912404e+00, -5.988677466198513e+00, -1.803915956643518e+00, -2.316503358436924e+00, -2.144858781319658e+00, -2.158236045485854e+00, -2.175708703003577e+00, -2.081753607945972e+00, -9.315127162830189e-01, -8.494020537760366e-01, -8.541302979134781e-01, -6.826613577167638e-01, -7.073790453223101e-01, -7.141463162153726e-01, -3.679664559308289e-01, -2.994073212622550e-01, -3.840020974152910e-01, -2.256649070083409e+00, -1.294044605241178e-01, -1.153641948978767e-01, -7.222725459489017e-02, -1.525108302407780e+00, -4.211496056006321e+00, -4.878604560998538e-01, -3.998234852066287e-02, -4.892773286093657e+00, -1.622734532553518e+01, -5.737166877812657e-01, -5.736481209659019e-01, -2.763950516606628e+00, -5.736252092400023e-01, -4.624834721232297e+01, -5.577653561517046e-01, -5.721851552468291e-01, -7.677898095268005e-01, -5.739732971810894e-01, -6.348011088360668e-01, -9.218737398467952e-01, -1.069088062567100e+00, -3.354709112172507e-01, -3.454959548061913e-01, -3.800543326421875e-01, -3.873580871601100e-01, -3.703667421728438e-01, -5.311356959713646e-01, -1.022963464906422e+00, -8.204967788178713e-02, -4.002730319359850e-01, -3.654946310292401e-01, -8.952966292876775e-02, -3.352332685217893e+00, -6.753305261608463e+00, -9.639251752895074e+00, -3.726272057770136e-01, -4.842942753180093e+00, -4.842952638632394e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_b94_hyb_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b94_hyb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.748457084328185e-09, -4.748362293014110e-09, -4.748060276707899e-09, -4.749469627276828e-09, -4.748714168830161e-09, -4.748714168830161e-09, -1.002831259869246e-05, -1.002861477211990e-05, -1.003495995100725e-05, -1.001947249280798e-05, -1.002895454775798e-05, -1.002895454775798e-05, -4.210610623157880e-03, -4.208164567536686e-03, -4.131428778925672e-03, -4.097442077044108e-03, -4.125081824381245e-03, -4.125081824381245e-03, -4.361674343681878e-01, -4.235215210076162e-01, -2.134267585480057e-03, -8.720121400058836e-01, -6.727095182822969e-01, -6.727095182824330e-01, -6.464837506496392e+03, -5.663438056761717e+03, -3.912175821659051e+01, -2.999274107368550e+04, -1.643447411101618e+04, -1.643447411101613e+04, -4.537177081977037e-07, -7.982375245540937e-07, 1.886768941509440e-07, -2.997305465770090e-07, -1.443285538744935e-07, -1.387014442528982e-06, 2.290419480085057e-05, -3.850053690421938e-05, -5.679398463156820e-05, -5.602629306925623e-05, -5.601972558101511e-05, -7.891469639278656e-05, -1.620697690948567e-03, -2.293011962774635e-03, -2.267261999130230e-03, -1.029399434983350e-02, -7.608904063306785e-03, -6.237104543189062e-03, 2.593369462152038e+01, -1.488094982869479e-01, 3.651848546997959e+01, -9.357870319979930e-05, -1.896835624127989e+00, -2.334718987289371e+00, -2.292448717301989e+04, -2.443428176380427e+02, 5.605877092926488e+07, 1.936385340474933e+02, -3.181259918069099e+04, 2.651091572229802e+07, -1.044872365258362e-05, 6.965859657023247e-03, 6.900957012515263e-03, -1.581289145033930e-04, 6.874046672395554e-03, -2.539044392673004e-06, 7.701765493525757e-03, -1.511958273727792e-02, -3.319151851067239e-03, 6.490014441835972e-03, -9.688265236758080e-03, -1.886780000654256e-03, -9.513906857435707e-04, 5.911066136136913e-01, 2.627891235476441e-01, 7.281468975494805e-02, -4.606266287320090e-02, -5.717191453281630e-02, -1.903867481953091e-02, 1.742538444375674e+03, -1.666603810872664e+01, -6.407007157532481e-02, 7.028804493004164e+01, -6.439521003998390e+00, 4.723140052196461e+05, 3.806405293308261e+09, 1.944070033941730e+08, 8.572763994316119e+01, 3.622564589888637e+07, 3.622570166900217e+07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_b94_hyb_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b94_hyb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([-1.862732743966387e-04, -1.862711427574548e-04, -1.862667129004939e-04, -1.862983787493001e-04, -1.862810698963951e-04, -1.862810698963951e-04, -1.718952569982594e-03, -1.719017596299948e-03, -1.720536849281095e-03, -1.718095851584213e-03, -1.719197114699429e-03, -1.719197114699429e-03, -5.661459358901713e-03, -5.638404791053121e-03, -5.080311428454181e-03, -5.161021322161778e-03, -5.171945759830451e-03, -5.171945759830451e-03, -1.087492887388830e-02, -1.109714105590286e-02, -4.538256821290993e-03, -9.145436604095671e-03, -1.025463211284081e-02, -1.025463211284240e-02, -5.632587189697596e-03, -5.755168440567095e-03, -6.876716310341573e-03, -5.027141156547034e-03, -5.467984122613364e-03, -5.467984122613348e-03, -2.559363870216501e-04, -4.525469911235981e-04, -2.639955043848878e-07, -1.686977349619755e-04, -1.514921856004433e-04, -7.887811897618507e-04, -4.577566020872887e-08, -1.206076608619202e-03, -1.724657028609147e-03, -1.734330063342994e-03, -1.762897744611636e-03, -2.494483953148229e-03, -1.337923173949782e-03, -2.505731201305056e-03, -1.487569464876783e-03, -8.462419452454744e-03, -7.222083027110158e-03, -5.862347188082847e-03, 5.190097251809232e-05, -3.231016703253041e-03, 9.566279790462847e-07, -2.745383906937824e-03, -1.086083248917454e-02, -1.418028569667020e-02, -1.763898547853632e-03, -3.823873992609166e-05, 8.004359820992222e-13, 3.046546211010493e-05, -3.892664277969742e-03, 2.440677592189937e-09, -8.496472703866828e-06, -1.242601445611559e-12, -4.158578510008790e-15, -1.278541870224493e-04, -1.224571533206476e-11, -2.046812711055823e-06, -1.287116305109844e-14, -8.210606119463806e-03, -1.884692501489640e-03, -5.858918756235828e-04, -6.339063344329946e-03, -1.119322978076395e-03, -1.155976598604239e-03, -2.484044993674320e-08, -5.684175257349904e-09, -8.870074563383999e-07, -5.696775267683777e-03, -7.269577486821553e-03, -8.126762992023818e-03, 1.903561635577345e-05, -6.561248929154407e-03, -1.159980327632676e-02, 2.572404349652200e-06, -1.095470354896311e-02, 1.013426693256209e-07, 3.014413013963780e-06, 2.358276202222966e-09, 1.816973792198676e-03, 5.333480150694023e-08, 1.499456361269514e-08])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_b94_hyb_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b94_hyb", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([7.344233527918594e-04, 7.344148363588364e-04, 7.343973365394603e-04, 7.345238473201688e-04, 7.344546670946720e-04, 7.344546670946720e-04, 6.693512929782619e-03, 6.693757962182639e-03, 6.699488092583328e-03, 6.690363566934367e-03, 6.694477481308417e-03, 6.694477481308417e-03, 2.016678208038275e-02, 2.008847551212125e-02, 1.819208922704444e-02, 1.849546175229561e-02, 1.852260154879097e-02, 1.852260154879097e-02, 3.596415883704319e-02, 3.653224295033450e-02, 1.620661743361176e-02, 3.146113648542306e-02, 3.436575479644673e-02, 3.436575479645367e-02, 2.248676076874820e-02, 2.297031870814232e-02, 2.664640432441995e-02, 2.009610679307721e-02, 2.184833902273079e-02, 2.184833902273073e-02, 1.016395463154237e-03, 1.789156367665939e-03, -4.226760300998199e-04, 6.717861360612523e-04, 3.234074375004705e-04, 3.107983656681776e-03, -2.724837307838097e-03, 4.680677152182803e-03, 6.649826736471629e-03, 6.687580829675016e-03, 6.796701810068900e-03, 9.574478529678142e-03, 5.195488012794819e-03, 9.424158541703333e-03, 5.758067386431169e-03, 2.936608503756565e-02, 2.559082547865041e-02, 2.097708849117520e-02, -3.131327938426930e-01, 1.232606405112701e-02, -3.491236257814215e-01, 1.050623373992319e-02, 3.701520982258853e-02, 4.556014875091056e-02, 7.055301419909977e-03, 1.529549593570322e-04, -1.568889451094554e+01, -5.632402366218225e-01, 1.556588420430396e-02, -1.297177391697766e+01, 3.398586992438891e-05, -2.226971665583423e-02, -2.219686551070262e-02, 5.111707755933499e-04, -2.216563993436468e-02, 8.187250751636875e-06, -2.306859914557033e-02, 2.864720878020377e-02, 7.221184783260356e-03, -1.609766287840802e-02, 2.249032290052972e-02, 4.379967973624084e-03, 4.505438697398219e-03, -9.874646492662305e-02, -7.603887888197493e-02, -4.855329568009804e-02, 2.020076880634800e-02, 2.507272822834642e-02, 2.814812904714004e-02, -1.040665746181611e+00, 2.522161906064798e-02, 3.827421911772824e-02, -4.220791542137721e-01, 3.866927272788281e-02, -4.618114099639822e+00, -4.551002943942565e+01, -2.149655035540305e+01, -4.262745581931942e-01, -1.404288992516355e+01, -1.404291154447706e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
