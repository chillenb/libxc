
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_b0kcis_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b0kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.589774276094954e+01, -1.589776384826561e+01, -1.589790636387560e+01, -1.589759152850696e+01, -1.589774956218724e+01, -1.589774956218724e+01, -2.719926454167052e+00, -2.719903543193460e+00, -2.719423552474157e+00, -2.720595670619610e+00, -2.719885561765281e+00, -2.719885561765281e+00, -5.945944873369818e-01, -5.942739995941335e-01, -5.878315753351746e-01, -5.912809336674857e-01, -5.902682620539764e-01, -5.902682620539764e-01, -1.866673926249346e-01, -1.880722347147094e-01, -6.854093603611396e-01, -1.601055524065747e-01, -1.695836765932161e-01, -1.695836765932161e-01, -4.876667077398678e-02, -4.876810395797740e-02, -8.733452824802507e-02, -4.473493593032495e-02, -4.443781594733703e-02, -4.443781594733701e-02, -3.890688772121951e+00, -3.890321746858228e+00, -3.890672366304817e+00, -3.890348496466448e+00, -3.890502232904532e+00, -3.890502232904532e+00, -1.650449940229405e+00, -1.658061916074939e+00, -1.649828221527479e+00, -1.656512123609948e+00, -1.654987495723453e+00, -1.654987495723453e+00, -5.070841549639014e-01, -5.514387262532179e-01, -4.785377539154754e-01, -4.997066952639810e-01, -5.131901075284956e-01, -5.131901075284956e-01, -1.340525323124588e-01, -1.983992441242840e-01, -1.281306522052550e-01, -1.505237596193526e+00, -1.401504135367695e-01, -1.401504135367695e-01, -4.040738352498581e-02, -4.308922381276636e-02, -2.820026911928769e-02, -1.029733088141741e-01, -3.410358828705878e-02, -3.410358828705880e-02, -5.027603940222990e-01, -4.898138019048480e-01, -4.923822601646246e-01, -4.957020244154244e-01, -4.938663634535193e-01, -4.938663634535193e-01, -5.098323697846574e-01, -4.340762562802155e-01, -4.450503593727779e-01, -4.576612340919985e-01, -4.509619174122073e-01, -4.509619174122073e-01, -5.764455281417656e-01, -2.343026582784158e-01, -2.655156396358029e-01, -3.247698714569499e-01, -2.915989450099420e-01, -2.915989450099420e-01, -4.073638302970066e-01, -8.720278630122114e-02, -9.753167450229534e-02, -3.109066685405887e-01, -1.125349390296393e-01, -1.125349390296392e-01, -5.485532483807876e-02, -2.501875311011856e-02, -3.264770954216610e-02, -1.092980867822872e-01, -3.205527462473592e-02, -3.205527462473589e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_b0kcis_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b0kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.915108773632030e+01, -1.915116031816137e+01, -1.915146513085456e+01, -1.915038550248017e+01, -1.915095374461525e+01, -1.915095374461525e+01, -3.254011788991993e+00, -3.254046662262261e+00, -3.254907930986163e+00, -3.253770552250697e+00, -3.254021103225174e+00, -3.254021103225174e+00, -7.127106176305208e-01, -7.114507938449472e-01, -6.802571096950116e-01, -6.849553302346639e-01, -6.846346301435213e-01, -6.846346301435213e-01, -2.002940865493093e-01, -2.042245657632205e-01, -8.259497174511058e-01, -1.497776214544554e-01, -1.703622185948796e-01, -1.703622185948795e-01, -1.377817204266421e-02, -1.408346544306382e-02, -4.675570915432222e-02, -1.060671223449873e-02, -1.147710638301136e-02, -1.147710638301139e-02, -4.860586962387163e+00, -4.862618039953531e+00, -4.860669663806912e+00, -4.862463032213740e+00, -4.861621829533394e+00, -4.861621829533394e+00, -1.791662353910732e+00, -1.805681859639082e+00, -1.776486938080621e+00, -1.788787228371487e+00, -1.806836798326333e+00, -1.806836798326333e+00, -6.460193342820801e-01, -7.282485624745819e-01, -6.053220341184704e-01, -6.548675993232929e-01, -6.579737034519665e-01, -6.579737034519665e-01, -1.025504395911906e-01, -1.919980279727722e-01, -9.579181187835721e-02, -1.960211516077855e+00, -1.211343708179327e-01, -1.211343708179327e-01, -9.097627635181281e-03, -1.027435807457903e-02, -7.160572292252252e-03, -6.810316747435294e-02, -8.618761805166485e-03, -8.618761805166516e-03, -6.826080856763599e-01, -6.657482907233914e-01, -6.711695267464037e-01, -6.760472635376326e-01, -6.735618670769015e-01, -6.735618670769015e-01, -6.734037163322959e-01, -5.286252211389760e-01, -5.630439383500707e-01, -6.011858150240342e-01, -5.814360443225126e-01, -5.814360443225126e-01, -7.585214935322271e-01, -2.407830283577938e-01, -2.915935503077469e-01, -3.977239011483615e-01, -3.397409414671284e-01, -3.397409414671284e-01, -4.973405292632563e-01, -4.516295403496447e-02, -5.610880477714745e-02, -3.933265997587564e-01, -8.433407635422363e-02, -8.433407635422367e-02, -1.710410699746354e-02, -4.742319434852175e-03, -7.066368335460435e-03, -7.963068986479797e-02, -8.060467686852601e-03, -8.060467686852556e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_b0kcis_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b0kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.905860345916934e-09, -4.905820971115776e-09, -4.905601697244754e-09, -4.906188104648200e-09, -4.905887138760577e-09, -4.905887138760577e-09, -5.013832771283118e-06, -5.013658906354194e-06, -5.008844566198951e-06, -5.010357996051174e-06, -5.011598251995947e-06, -5.011598251995947e-06, -1.663316914629947e-03, -1.684130543734390e-03, -2.160294232867199e-03, -2.070485278840563e-03, -2.082117102987356e-03, -2.082117102987356e-03, -2.235009030751039e-01, -2.019852344814966e-01, -1.085228011035621e-03, -7.310616792391644e-01, -4.659595408627965e-01, -4.659595408627969e-01, -7.564221699966470e+03, -6.628483976314751e+03, -4.098564543051165e+01, -3.581535336294524e+04, -1.982175990736014e+04, -1.982175990736015e+04, -8.415929678230778e-07, -8.359024200267415e-07, -8.413118569879821e-07, -8.362906248358371e-07, -8.387310718006522e-07, -8.387310718006522e-07, -4.136016279871350e-05, -4.025533844248356e-05, -4.201316181536527e-05, -4.102954501835464e-05, -4.042330858237341e-05, -4.042330858237341e-05, 3.011999900964080e-03, 1.389781330193714e-02, 1.894734349148786e-03, 1.239117761713905e-02, 3.880186842495359e-03, 3.880186842495359e-03, -2.370110954827069e+00, -2.679266035961821e-01, -3.042044957652070e+00, 1.436795335287540e-05, -1.489221740280649e+00, -1.489221740280649e+00, -8.172574081226681e+04, -4.000994395813513e+04, -1.446627102477538e+05, -1.061566298023627e+01, -6.834744645973877e+04, -6.834744645973873e+04, 1.203505447274915e-01, 4.926990167057137e-02, 6.394257991539232e-02, 8.226373326296002e-02, 7.215716358786747e-02, 7.215716358786747e-02, 1.379800543554927e-01, 3.637879880163033e-04, 6.218737261284756e-03, 1.792882656128840e-02, 1.079663299262158e-02, 1.079663299262158e-02, 8.789790347548170e-03, -1.107576957599721e-01, -4.911611322479923e-02, 4.314862178548158e-04, -1.828262521077331e-02, -1.828262521077331e-02, -3.529477477340667e-04, -4.547278109469068e+01, -1.879051818805295e+01, 2.520673677804090e-02, -5.325504950836698e+00, -5.325504950836699e+00, -2.643091447895385e+03, -2.814438738664203e+06, -2.697643346663063e+05, -6.428129562972869e+00, -9.123455852597354e+04, -9.123455852597383e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_b0kcis_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b0kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_b0kcis_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b0kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-4.451476134606537e-05, -4.451665194150286e-05, -4.452487136023173e-05, -4.449693534792887e-05, -4.451159371734386e-05, -4.451159371734386e-05, -2.200811532313469e-04, -2.201738141071334e-04, -2.226953552117447e-04, -2.223082041759241e-04, -2.221116827121084e-04, -2.221116827121084e-04, -1.479389995560017e-03, -1.473040717644664e-03, -1.328281306728386e-03, -1.491698597304337e-03, -1.444724898645211e-03, -1.444724898645211e-03, -1.260307021067645e-02, -1.334882480633966e-02, -3.506628334513309e-04, -4.047624777853075e-03, -6.689246811456241e-03, -6.689246811456238e-03, -2.227389558743270e-05, -2.570473771495640e-05, -3.727647198255413e-04, -5.460679255008314e-06, -1.199110689984087e-05, -1.199110689984087e-05, -1.316487893740270e-03, -1.331355620709652e-03, -1.317438326550112e-03, -1.330550965732895e-03, -1.323855201634435e-03, -1.323855201634435e-03, -6.648982243983380e-04, -7.057261560349582e-04, -6.422317613665647e-04, -6.781015673992510e-04, -6.991080796899650e-04, -6.991080796899650e-04, -1.544354854245820e-02, -1.846015515458206e-02, -9.457222905887389e-03, -8.296146748731215e-03, -1.723048714230825e-02, -1.723048714230825e-02, -1.808337326943242e-03, -5.441672553452435e-03, -1.626073414982604e-03, -9.727258563677062e-04, -3.848505306623221e-03, -3.848505306623221e-03, -2.250489864994758e-06, -4.612255064156857e-06, -2.175203517514613e-05, -1.006342275517672e-03, -1.212539813114670e-05, -1.212539813114670e-05, -2.180600162996088e-01, -1.359219864482875e-01, -1.606370389239322e-01, -1.856473834638192e-01, -1.725973592676277e-01, -1.725973592676277e-01, -8.787287165940906e-02, -2.005943113375858e-02, -3.133665383931066e-02, -5.398691323415412e-02, -4.005418498682673e-02, -4.005418498682672e-02, -1.237197983118998e-02, -7.463929050498974e-03, -9.831843732340424e-03, -1.467408381369456e-02, -1.341244362964343e-02, -1.341244362964342e-02, -1.479952604039810e-02, -3.475856772222422e-04, -5.613315608007959e-04, -2.371728429553615e-02, -2.031646670728780e-03, -2.031646670728780e-03, -2.116943227943108e-05, -4.039806312896768e-07, -5.099711258588832e-06, -1.966914879411692e-03, -1.479421997570988e-05, -1.479421997570987e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
