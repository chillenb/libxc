
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_b0kcis_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b0kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.519589206074879e+01, -1.519593369166783e+01, -1.519613162145521e+01, -1.519551197004816e+01, -1.519583482807547e+01, -1.519583482807547e+01, -2.641998399547033e+00, -2.642003746890520e+00, -2.642188049723280e+00, -2.642338067564663e+00, -2.642064532323108e+00, -4.218284222847208e+75, -6.008816895794923e-01, -7.647184598360151e+120, -5.482437337069064e+77, -9.680235607276314e+103, -2.694482493882239e+77, -9.730980440825659e+103, -4.265974935606717e+47, -5.236632101750687e+105, -6.859146746326836e-01, -2.548896094931804e+113, -9.183709430750167e+105, -2.339116794120504e+120, -4.722653190825643e+87, -9.718953989803646e+102, -5.146212293230561e+112, -1.146428550383528e+118, -4.657600694676003e+138, -6.180960177708107e+93, -3.997153127808316e+81, -1.249564591566139e+118, -1.200104318290352e+99, -3.869376856555548e+00, -3.311793630821655e+108, -4.972010345614152e+84, -1.551577899827012e+00, -1.561853592786565e+00, -1.544074562410835e+00, -1.553157313677640e+00, -1.560885144253976e+00, -2.522812630811248e+76, -2.950093206997332e+87, -2.525222172410322e+106, -4.410608585603189e+87, -3.628440240449596e+106, -2.812743755143855e+87, -5.433367418733402e-01, -1.175272697762242e-01, -4.776058844752402e+98, -1.104103332733341e-01, -3.270893524602247e+30, -6.271188559529147e+79, -1.972840845933248e+123, -5.616439396781452e-03, -4.098756719249965e+84, -2.294312441501933e+142, -8.015803747064343e-02, -6.479751904441056e-03, -4.422681196219272e+84, -1.469685560799599e+116, -5.189480014417535e+110, -5.365040923695548e-01, -8.018691607597916e+101, -3.520818119757428e+79, -3.721498361647698e+118, -3.469983352549024e+111, -1.424533128838674e+78, -4.213409917889577e+111, -1.821653791190764e+97, -2.846596012664869e+120, -4.892816167092188e-01, -5.695456018267255e+120, -2.373086582830381e-01, -1.119782006384861e+110, -3.458205328471734e-01, -7.171564768237231e+85, -1.520877199926404e+97, -4.311561969549327e-01, -1.178361915338694e+127, -4.679150147848444e+126, -1.554442019954937e+124, -9.746443066383377e-02, -2.689147595445729e+125, -1.606674724359043e+128, -1.810718636477938e+134, -1.595545310171808e+27, -1.900519407548228e+90, -8.727779452583260e+115, -3.996239041526006e+129])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_b0kcis_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b0kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.017173111170855e+01, -2.017178656403870e+01, -2.017205020627545e+01, -2.017122483136401e+01, -2.017165487785483e+01, -2.017165487785483e+01, -3.467816977369981e+00, -3.467824068639233e+00, -3.468068478083396e+00, -3.468267421249159e+00, -3.467904677991818e+00, -3.109797670874763e+73, -7.726206109977392e-01, -3.550467223989189e+118, -3.899938581285837e+75, -5.201391631236751e+101, -1.924121868509234e+75, -5.228510204243900e+101, -4.780617648158611e+45, -2.754571222704975e+103, -8.838475549671636e-01, -1.251593915860792e+111, -4.816762924198126e+103, -1.084772159269457e+118, -2.926939621497895e+85, -5.173169591269303e+100, -2.529551311643921e+110, -5.345909831507855e+115, -1.863163092372574e+136, -3.589325077228563e+91, -2.743088347466487e+79, -5.978425820740607e+115, -6.817164811539690e+96, -5.096976628414796e+00, -1.721199599439420e+106, -3.290786047521337e+82, -2.023855878127627e+00, -2.037436326187044e+00, -2.013939856828850e+00, -2.025943198788049e+00, -2.036156385252017e+00, -1.835808836405523e+74, -1.872516692412310e+85, -1.326817115618258e+104, -2.793141227922758e+85, -1.902831462102284e+104, -1.785880577104486e+85, -6.974952869270358e-01, -1.489509462427150e-01, -2.684540075603055e+96, -1.399715797317622e-01, -5.684111381273822e+28, -4.309714817537688e+77, -8.929143582062175e+120, -7.352856391910493e-03, -2.619518428170004e+82, -8.935287113947922e+139, -1.018618779141231e-01, -8.472948872958807e-03, -2.824387049918512e+82, -7.089387707693186e+113, -2.622781207656268e+108, -6.885841982218983e-01, -4.391816325651011e+99, -2.448513167514969e+77, -1.759776625654663e+116, -1.741010728643095e+109, -1.006669821450614e+76, -2.111615224400835e+109, -1.043353811587140e+95, -1.325092623069343e+118, -6.270552880936004e-01, -2.647011272662286e+118, -3.012663636628532e-01, -5.675239732588861e+107, -4.409153220808881e-01, -4.619497220524424e+83, -8.695939874138140e+94, -5.514781491743705e-01, -5.160068477051527e+124, -2.057370871218070e+124, -7.013389743943880e+121, -1.236536733663964e-01, -1.195504641200203e+123, -6.944510029386199e+125, -7.435441616279264e+131, -2.799063388679563e+25, -1.158531810957886e+88, -4.138043943159695e+113, -1.703523768762868e+127])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_b0kcis_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b0kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.162844004465567e-08, 1.162833743990793e-08, 1.162782707379363e-08, 1.162935698759472e-08, 1.162856294824834e-08, 1.162856294824834e-08, 1.996981360274698e-05, 1.997016680454163e-05, 1.997807809111671e-05, 1.996731721043656e-05, 1.997712903108127e-05, 9.362698680351131e-07, 1.755820908284055e-02, 9.733832049742226e-04, 9.063191882072838e-04, 9.557795321874907e-04, 9.436438061445517e-04, 9.436438061445517e-04, 3.244646632718007e-01, 3.247069964545412e-01, 8.822511586012589e-03, 3.140879123730457e-01, 3.321709068846678e-01, 3.321709068846676e-01, 3.691319805338889e+01, 3.647768174759364e+01, 2.827917572863870e+00, 4.747136867698929e+01, 5.229925043562557e+01, 5.229925043562557e+01, 7.969982595596685e-07, 8.038542042095108e-07, 7.973957856301120e-07, 4.711883897574215e-06, 8.004181151855606e-07, 8.004181151855606e-07, 2.153033004601785e-04, 2.099194046517598e-04, 2.193115820229458e-04, 2.144219068952489e-04, 2.104567380703514e-04, 1.180338920538937e-05, 8.693876653808877e-03, 1.261703472527162e-02, 8.181609764585382e-03, 1.062368924643792e-02, 9.138066215851566e-03, 3.929578136721010e-02, 5.058906856064043e+01, 1.635331517772519e-01, 6.859866844402083e+01, 3.831575971478817e-05, 5.481257611120197e-01, 5.481257611120197e-01, 3.988617390623934e+07, 4.296455053499790e+01, 4.493056354521541e+02, 3.226540920059933e+02, 2.189049523424129e+07, 1.438577714296807e+02, 1.171124991212009e-01, 5.578649890409107e-02, 1.093082279912640e-01, 8.472609740212164e-02, 7.595725664278809e-02, 7.595725664278807e-02, 1.157350864575819e-01, 1.534350830185818e-02, 1.955928871225186e-02, 2.889148547503279e-02, 2.307483968916756e-02, 7.540035857435747e-02, 8.010149958137510e-03, 1.676853915404583e+00, 6.855307148336483e-02, 2.998895054222679e-01, 5.730065718764727e-02, 5.730065718764729e-02, 1.055290714638010e-01, 3.037886236102056e+00, 1.519582412786675e+00, 7.261631799776432e-02, 1.267012375629467e+02, 1.108341469555453e+00, 1.249415366431109e+01, 1.982432813001684e+02, 2.688167572455495e+02, 1.310856241578612e+00, 2.212342051470000e+02, 2.212342051470006e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_b0kcis_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_b0kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-1.035024803763732e-16, -2.402162970983838e-54, -2.402452621979070e-54, -2.401226852136004e-54, -2.401880219205881e-54, -2.401880219205881e-54, -1.418566543471099e-47, -1.419279967101790e-47, -1.437987732583312e-47, -1.429132424777569e-47, -1.431526929435201e-47, -3.141363812065351e-04, -2.661331832414919e-41, -2.282302101276085e-03, -1.870330972966192e-03, -2.067330158815149e-03, -2.020079064595842e-03, -2.020079064595842e-03, -1.288610863346822e-02, -1.372535302301906e-02, -2.022487661711637e-42, -4.282593137778263e-03, -7.027925434453261e-03, -7.027925434453256e-03, -2.227495333569678e-05, -2.570716795400249e-05, -3.742431858409440e-04, -5.462420111373054e-06, -1.199453546161142e-05, -1.199453546161142e-05, -1.321300543805380e-03, -1.336212444140440e-03, -1.322156290212212e-03, -6.809698411291425e-23, -1.328740308892231e-03, -1.328740308892231e-03, -4.201504994377782e-20, -2.533048239210401e-45, -2.466869811274449e-45, -2.497796536757325e-45, -2.537800067981108e-45, -7.359322875766129e-04, -2.054396796763236e-02, -4.352615505015588e-02, -1.398901857113395e-02, -2.252130117349442e-02, -2.322552260907992e-02, -1.231158875253711e-39, -5.513017050122958e-35, -5.553406836629206e-03, -8.694504907299089e-35, -2.861792682121404e-03, -3.958826827143587e-03, -3.958826827143590e-03, -7.587202181489999e-27, -4.615515117431696e-06, -2.176755472804062e-05, -9.372164145872610e-34, -1.357473193131882e-26, -1.213738405356094e-05, -3.656735857358157e-01, -1.659318124372831e-01, -4.117504304745410e-38, -2.598736496735180e-01, -2.313435015735187e-01, -2.313435015735187e-01, -3.314153959470296e-01, -2.062583790942385e-02, -3.314935192878703e-02, -6.117008944754550e-02, -4.366587173969837e-02, -7.271339709670386e-39, -3.059827701118863e-02, -4.321379644403767e-37, -1.027488430549305e-02, -4.163959113315916e-38, -1.462607826781805e-02, -1.462607826781804e-02, -5.664692232030960e-39, -3.482114292821261e-04, -5.654008060236342e-04, -3.024174613707483e-02, -3.461046903152178e-34, -2.082099329925957e-03, -2.120763228738386e-05, -4.043908688685756e-07, -5.100496601380127e-06, -1.995847977477172e-03, -1.480563686818217e-05, -1.480563686818216e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
