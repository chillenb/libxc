
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_mpw1kcis_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_mpw1kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.796201518903909e+01, -1.796203837980336e+01, -1.796219899184252e+01, -1.796185272692210e+01, -1.796202598508102e+01, -1.796202598508102e+01, -3.021005316079384e+00, -3.020975595753490e+00, -3.020354049164540e+00, -3.021918907484585e+00, -3.021003011604071e+00, -3.021003011604071e+00, -6.306379499268095e-01, -6.304763421457316e-01, -6.280553645371117e-01, -6.320671703555859e-01, -6.306863795890969e-01, -6.306863795890969e-01, -1.964025564314718e-01, -1.975360135237638e-01, -7.275610466807366e-01, -1.689900271372604e-01, -1.788718366992781e-01, -1.788718366992781e-01, -7.663236195808897e-04, -9.027369760714049e-04, -4.827392742781158e-02, -1.657816020022581e-04, -3.419387986447565e-04, -3.419387986447562e-04, -4.350788012148890e+00, -4.350264576421682e+00, -4.350769527014311e+00, -4.350307432056895e+00, -4.350519530192334e+00, -4.350519530192334e+00, -1.834550787389585e+00, -1.843126434708169e+00, -1.834724320297056e+00, -1.842277028174298e+00, -1.839217793644906e+00, -1.839217793644906e+00, -5.312230959182069e-01, -5.631134749167319e-01, -4.982864041649538e-01, -5.062357130034588e-01, -5.369832612882645e-01, -5.369832612882645e-01, -1.365933613179161e-01, -2.109706372882615e-01, -1.288577113867726e-01, -1.617131510439558e+00, -1.469260988525569e-01, -1.469260988525569e-01, -9.368952404637822e-05, -1.679805166887908e-04, -1.847730149879819e-04, -9.209526204524542e-02, -2.169638235882473e-04, -2.169638235882475e-04, -5.133090688573755e-01, -5.089502757948199e-01, -5.095522465309129e-01, -5.106079586817285e-01, -5.099974494659190e-01, -5.099974494659190e-01, -5.085311613176006e-01, -4.610905434608770e-01, -4.698008893391907e-01, -4.788545282180614e-01, -4.740518218015263e-01, -4.740518218015263e-01, -5.901285973306128e-01, -2.492666805674977e-01, -2.809536107418327e-01, -3.371946856765507e-01, -3.060784386187439e-01, -3.060784386187439e-01, -4.289031163248280e-01, -4.384124542827762e-02, -7.135895191008340e-02, -3.190685855001417e-01, -1.118588456945223e-01, -1.118588456945223e-01, -1.782424786193720e-03, -1.057231354344918e-05, -5.232479293962855e-05, -1.067644665001894e-01, -1.952198831516464e-04, -1.952198831516464e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_mpw1kcis_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_mpw1kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.155374534261687e+01, -2.155382618293008e+01, -2.155416907920857e+01, -2.155296662195182e+01, -2.155359902695035e+01, -2.155359902695035e+01, -3.556365625260788e+00, -3.556400832025593e+00, -3.557289960184271e+00, -3.556291023145512e+00, -3.556438097716256e+00, -3.556438097716256e+00, -7.217324187525627e-01, -7.205441834487772e-01, -6.918143135650981e-01, -6.972268287384377e-01, -6.965314569657600e-01, -6.965314569657600e-01, -1.939494571084430e-01, -1.969662995381015e-01, -8.407491800844741e-01, -1.544101884028914e-01, -1.685511163161711e-01, -1.685511163161711e-01, -2.827024142424230e-03, -3.327279055655363e-03, -1.104108142147771e-01, -6.119021247365178e-04, -1.263165817447236e-03, -1.263165817447239e-03, -5.377493527499502e+00, -5.379694215470029e+00, -5.377588392004406e+00, -5.379531324146742e+00, -5.378612051527683e+00, -5.378612051527683e+00, -1.949245876829267e+00, -1.964586829728331e+00, -1.934604786503600e+00, -1.948062215190153e+00, -1.964913792250138e+00, -1.964913792250138e+00, -6.501956151626198e-01, -7.313703093186337e-01, -6.040535724204587e-01, -6.507257114425260e-01, -6.626718204511967e-01, -6.626718204511967e-01, -1.316299586017806e-01, -1.949451917994184e-01, -1.283221094941894e-01, -2.087162701168265e+00, -1.333414669070688e-01, -1.333414669070688e-01, -3.451896464065125e-04, -6.197871489691262e-04, -6.830945379428291e-04, -1.202056841508214e-01, -8.014021620374279e-04, -8.014021620374301e-04, -6.844750140926178e-01, -6.708851294314020e-01, -6.754759095547200e-01, -6.794227368116125e-01, -6.774359470944302e-01, -6.774359470944302e-01, -6.719482996635371e-01, -5.328146401283772e-01, -5.669789450136785e-01, -6.045465408835016e-01, -5.850667075243473e-01, -5.850667075243473e-01, -7.636661073736268e-01, -2.397409297024066e-01, -2.864534888989828e-01, -3.874131242489696e-01, -3.316939858432267e-01, -3.316939858432267e-01, -4.956312794917839e-01, -1.064699928145736e-01, -1.260093455735699e-01, -3.805929044700772e-01, -1.145798711356452e-01, -1.145798711356452e-01, -6.526619741848745e-03, -3.881841124489499e-05, -1.931523289570510e-04, -1.144321340580660e-01, -7.213543670610365e-04, -7.213543670610325e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_mpw1kcis_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_mpw1kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.928279709697195e-09, -5.928244615383869e-09, -5.928017043319139e-09, -5.928540498763312e-09, -5.928276393031021e-09, -5.928276393031021e-09, -7.073895461787624e-06, -7.074017627721438e-06, -7.076002110338859e-06, -7.065665401324751e-06, -7.072588541380276e-06, -7.072588541380276e-06, -3.652161041516131e-03, -3.663181259024351e-03, -3.894680512728649e-03, -3.772850247476465e-03, -3.806628525690124e-03, -3.806628525690124e-03, -4.352477736469578e-01, -4.189653140101435e-01, -2.127614786173993e-03, -8.954712422610106e-01, -6.898556765655008e-01, -6.898556765655008e-01, 2.707209047209512e+02, 2.806243349066891e+02, 2.801058492763745e+01, 2.915697994952978e+02, 3.413176442368450e+02, 3.413176442368477e+02, -1.472761390458809e-06, -1.470758750475598e-06, -1.472648991205501e-06, -1.470882341299526e-06, -1.471762835023884e-06, -1.471762835023884e-06, -5.455462246054274e-05, -5.334353225094794e-05, -5.487852357218330e-05, -5.380335979422992e-05, -5.372304683520829e-05, -5.372304683520829e-05, -4.351904358583751e-03, 1.633694006298900e-03, -6.777781542536767e-03, -2.092715564360878e-03, -3.705536011846044e-03, -3.705536011846044e-03, -1.602825906732220e+00, -3.613120370384011e-01, -1.781036022143748e+00, -5.790967884221781e-05, -1.515278757002668e+00, -1.515278757002668e+00, 4.113137157833056e+02, 3.426633075031016e+02, 2.135859974976776e+03, -2.175634609482187e-01, 9.723171260292809e+02, 9.723171260292859e+02, 5.141294724374995e-02, 1.715795790984039e-02, 2.429662294879532e-02, 3.315677796402405e-02, 2.827877218095752e-02, 2.827877218095751e-02, 5.880375507568097e-02, -9.629880594248784e-03, -6.185138176040370e-03, -2.035654137261950e-05, -3.732446364421679e-03, -3.732446364421679e-03, 4.767444013457130e-05, -1.751617741598324e-01, -9.957871993313011e-02, -3.716801151437076e-02, -6.290507369754283e-02, -6.290507369754289e-02, -1.371032476362100e-02, 3.160576766868482e+01, 8.445385916810492e+00, -3.588098571764450e-02, -2.812152629255470e+00, -2.812152629255472e+00, 1.980941507086932e+02, 2.536335255369943e+03, 9.443438267251569e+02, -2.680885601291633e+00, 1.244336253202594e+03, 1.244336253202593e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_mpw1kcis_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_mpw1kcis", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-2.225738067303268e-05, -2.225832597075143e-05, -2.226243568011586e-05, -2.224846767396443e-05, -2.225579685867193e-05, -2.225579685867193e-05, -1.100405766156735e-04, -1.100869070535667e-04, -1.113476776058723e-04, -1.111541020879621e-04, -1.110558413560542e-04, -1.110558413560542e-04, -7.396949977800084e-04, -7.365203588223319e-04, -6.641406533641932e-04, -7.458492986521685e-04, -7.223624493226054e-04, -7.223624493226054e-04, -6.301535105338226e-03, -6.674412403169828e-03, -1.753314167256654e-04, -2.023812388926538e-03, -3.344623405728120e-03, -3.344623405728119e-03, -1.113694779371635e-05, -1.285236885747820e-05, -1.863823599127706e-04, -2.730339627504157e-06, -5.995553449920433e-06, -5.995553449920434e-06, -6.582439468701352e-04, -6.656778103548261e-04, -6.587191632750560e-04, -6.652754828664474e-04, -6.619276008172174e-04, -6.619276008172174e-04, -3.324491121991690e-04, -3.528630780174791e-04, -3.211158806832823e-04, -3.390507836996255e-04, -3.495540398449825e-04, -3.495540398449825e-04, -7.721774271229101e-03, -9.230077577291031e-03, -4.728611452943694e-03, -4.148073374365607e-03, -8.615243571154124e-03, -8.615243571154124e-03, -9.041686634716211e-04, -2.720836276726217e-03, -8.130367074913018e-04, -4.863629281838531e-04, -1.924252653311610e-03, -1.924252653311611e-03, -1.125244932497379e-06, -2.306127532078429e-06, -1.087601758757306e-05, -5.031711377588360e-04, -6.062699065573351e-06, -6.062699065573351e-06, -1.090300081498044e-01, -6.796099322414377e-02, -8.031851946196610e-02, -9.282369173190962e-02, -8.629867963381387e-02, -8.629867963381385e-02, -4.393643582970453e-02, -1.002971556687929e-02, -1.566832691965533e-02, -2.699345661707706e-02, -2.002709249341337e-02, -2.002709249341336e-02, -6.185989915594988e-03, -3.731964525249487e-03, -4.915921866170212e-03, -7.337041906847279e-03, -6.706221814821713e-03, -6.706221814821710e-03, -7.399763020199048e-03, -1.737928386111211e-04, -2.806657804003979e-04, -1.185864214776807e-02, -1.015823335364390e-03, -1.015823335364390e-03, -1.058471613971554e-05, -2.019903156448384e-07, -2.549855629294416e-06, -9.834574397058458e-04, -7.397109987854942e-06, -7.397109987854936e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
