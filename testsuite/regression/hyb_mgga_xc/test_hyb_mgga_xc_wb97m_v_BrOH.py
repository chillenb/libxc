
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_wb97m_v_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_wb97m_v", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.966051593445404e+01, -1.966059217750801e+01, -1.966100469640881e+01, -1.965976067878151e+01, -1.966055546167848e+01, -1.966055546167848e+01, -2.791982527617173e+00, -2.792025812319174e+00, -2.793524935841172e+00, -2.794464881911686e+00, -2.791999931721455e+00, -2.791999931721455e+00, -4.607720414750045e-01, -4.605630349255840e-01, -4.569204438606881e-01, -4.610689018198679e-01, -4.606947862290973e-01, -4.606947862290973e-01, -8.079520398878288e-02, -8.235712843765529e-02, -5.491875320188139e-01, -6.779780526468940e-02, -8.127058278495718e-02, -8.127058278495718e-02, -1.747347061856619e-02, -1.809767497323244e-02, -4.451299366616096e-02, -9.729518795182293e-03, -1.794896965091516e-02, -1.794896965091517e-02, -4.744147455069381e+00, -4.746568546031144e+00, -4.744425455788600e+00, -4.746306120134605e+00, -4.745346509336344e+00, -4.745346509336344e+00, -1.645231955764162e+00, -1.658718287309285e+00, -1.644857247069981e+00, -1.655420191685018e+00, -1.654979719542014e+00, -1.654979719542014e+00, -3.872780082605486e-01, -4.246693182626884e-01, -3.624866901099525e-01, -3.775326238135487e-01, -4.049859939046803e-01, -4.049859939046803e-01, -5.961753265921221e-02, -8.824527873723936e-02, -5.732131125129027e-02, -1.508815104865644e+00, -5.609671899009225e-02, -5.609671899009225e-02, -9.437442603980457e-03, -1.054850133907326e-02, -8.273053557429008e-03, -5.208088869522405e-02, -9.761475905599129e-03, -9.761475905599131e-03, -3.770876604196992e-01, -3.892077553174610e-01, -3.865135299086442e-01, -3.832344972865495e-01, -3.850193852070906e-01, -3.850193852070906e-01, -3.637632877414128e-01, -3.297715019033237e-01, -3.399835591749435e-01, -3.518625049929311e-01, -3.452240948006124e-01, -3.452240948006124e-01, -4.504648313160414e-01, -1.200921574240424e-01, -1.519659500709859e-01, -2.055647356305653e-01, -1.773686036886786e-01, -1.773686036886785e-01, -2.892283583227261e-01, -4.323568469262515e-02, -4.944555212479890e-02, -1.860710485796243e-01, -5.085999524207072e-02, -5.085999524207071e-02, -1.982394388314330e-02, -3.427303758922282e-03, -6.051122577517685e-03, -4.863902603591506e-02, -8.512763512229533e-03, -8.512763512229545e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_wb97m_v_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_wb97m_v", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.680042374871701e+01, -2.680056640809599e+01, -2.680120222156883e+01, -2.679887084015305e+01, -2.680049892682320e+01, -2.680049892682320e+01, -3.705690638049660e+00, -3.705845213660846e+00, -3.710532281966397e+00, -3.707657517208259e+00, -3.705760533797849e+00, -3.705760533797849e+00, -5.664957790999420e-01, -5.651153671550190e-01, -5.307537850658363e-01, -5.403719603214200e-01, -5.660002338639608e-01, -5.660002338639608e-01, -1.187363096457351e-01, -1.211205846847755e-01, -6.681864262262279e-01, -5.594739922350213e-02, -1.194587182835134e-01, -1.194587182835134e-01, -2.163176882616658e-02, -2.234155968311565e-02, -4.378385330289185e-02, -1.241728894731014e-02, -2.216197739988558e-02, -2.216197739988560e-02, -6.537433659626639e+00, -6.541945868658090e+00, -6.537911218859453e+00, -6.541418773600847e+00, -6.539731214540740e+00, -6.539731214540740e+00, -1.874749470971522e+00, -1.899141496353524e+00, -1.862786709562859e+00, -1.881856436202630e+00, -1.907298899718166e+00, -1.907298899718166e+00, -5.220354062916924e-01, -6.040759690768999e-01, -4.898469742283542e-01, -5.323464112879362e-01, -5.522997318537096e-01, -5.522997318537096e-01, -3.998316467505549e-02, -1.051427536188901e-01, -3.735495389313855e-02, -2.206373636109049e+00, -3.839830103360902e-02, -3.839830103360902e-02, -1.204722944505937e-02, -1.342763579879898e-02, -1.057696597782321e-02, -4.535911719940410e-02, -1.244858836729523e-02, -1.244858836729528e-02, -5.257041074324411e-01, -5.420697425600327e-01, -5.340880617611105e-01, -5.290009222062738e-01, -5.313422834760043e-01, -5.313422834760043e-01, -5.084805450974933e-01, -4.123024984042796e-01, -4.502223682754294e-01, -4.992520889283316e-01, -4.739288599748229e-01, -4.739288599748230e-01, -6.403284400841290e-01, -1.601145870220975e-01, -2.018632031657075e-01, -2.684086734813909e-01, -2.308740503123381e-01, -2.308740503123380e-01, -3.684791265537747e-01, -4.424454659762973e-02, -4.450174039560197e-02, -2.469724045895194e-01, -3.219731742037330e-02, -3.219731742037340e-02, -2.452842008067777e-02, -4.456628102322406e-03, -7.797746822619227e-03, -3.019235939884249e-02, -1.088996498312178e-02, -1.088996498312172e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_wb97m_v_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_wb97m_v", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-7.627005110164236e-09, -7.626950232316537e-09, -7.626622256289880e-09, -7.627522378025709e-09, -7.626976867021034e-09, -7.626976867021034e-09, -9.124807342466888e-06, -9.124907446752301e-06, -9.126404884816440e-06, -9.119799607590654e-06, -9.124688985524602e-06, -9.124688985524602e-06, -3.230172993887662e-03, -3.239438360477462e-03, -3.398099918722375e-03, -3.363051019703068e-03, -3.233638293656977e-03, -3.233638293656977e-03, 6.051388807349095e-02, 5.271800969064586e-02, -1.761247372801913e-03, 1.602874173789079e-01, 5.843721819035091e-02, 5.843721819035091e-02, -7.104009980250187e-01, -6.987508675055226e-01, -2.249480298923400e-02, -6.213562294127172e-01, -7.268018467231888e-01, -7.268018467233637e-01, -1.954224569664914e-06, -1.953941054103040e-06, -1.954190417578646e-06, -1.953969711039896e-06, -1.954078601771784e-06, -1.954078601771784e-06, -7.128341315592336e-05, -7.007716911928544e-05, -7.127984514653600e-05, -7.035606718086694e-05, -7.042865070248778e-05, -7.042865070248778e-05, -4.691062113629041e-03, -2.079442332815396e-03, -5.584233994364126e-03, -1.733510661497437e-03, -3.632585767595339e-03, -3.632585767595339e-03, 1.345517824915789e-01, 3.102356932728257e-02, 1.836986296595018e-01, -8.880676185931889e-05, 2.516859914391267e-01, 2.516859914391267e-01, -6.603797848373617e-01, -6.485243937394172e-01, -1.917751524247868e+00, 5.586375785904749e-02, -9.710765211701505e-01, -9.710765211761875e-01, -1.355583314906017e-02, -8.317220104277998e-03, -1.130984103719061e-02, -1.328793175055352e-02, -1.239170775185479e-02, -1.239170775185479e-02, -1.094689088064732e-02, -9.997520597060022e-03, -6.214973083833446e-03, -1.606291889633860e-03, -3.867585985421984e-03, -3.867585985421976e-03, -1.942675432945631e-03, -1.617429088403817e-02, -3.064416163581701e-02, -2.413786017618984e-02, -3.267531669010947e-02, -3.267531669010942e-02, -1.337461090290281e-02, -5.083544697710001e-02, 3.242071425591238e-02, -1.945799681915664e-02, 2.971894771452251e-01, 2.971894771452363e-01, -5.327723898920460e-01, -1.296741894156617e+00, -1.048558621742747e+00, 4.011351491876102e-01, -1.450634083707574e+00, -1.450634083702021e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_wb97m_v_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_wb97m_v", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_wb97m_v_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_wb97m_v", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.074469114337354e-03, 2.074501702723404e-03, 2.074639799687125e-03, 2.074110139343415e-03, 2.074486312232086e-03, 2.074486312232086e-03, 3.938514257627036e-03, 3.939494248920970e-03, 3.968980894799612e-03, 3.957960136467442e-03, 3.938767527004416e-03, 3.938767527004416e-03, 1.929046818971595e-03, 1.897266163412388e-03, 1.075650710526947e-03, 1.586158523559308e-03, 1.918162406533840e-03, 1.918162406533840e-03, -1.514136230948698e-02, -1.411259301956161e-02, 3.734516511599550e-04, -3.258050476216916e-02, -1.485050647470856e-02, -1.485050647470856e-02, -4.904908529646062e-04, -5.544367588837884e-04, -8.418348013017111e-03, -2.151755751614491e-05, -5.630046253495229e-04, -5.630046253494348e-04, 9.067950642250498e-03, 9.103579556073245e-03, 9.071904549440775e-03, 9.099586194656804e-03, 9.085797836491718e-03, 9.085797836491718e-03, 4.997572368804076e-03, 5.193454428112932e-03, 4.923503964704330e-03, 5.080329445319337e-03, 5.228135811707910e-03, 5.228135811707910e-03, 9.394432712806978e-04, 1.948218611608007e-03, 2.282452941556011e-03, -8.815674165172352e-05, 1.210134407792831e-04, 1.210134407792831e-04, -2.792301490297885e-02, -2.409024919858967e-02, -3.050066390821954e-02, 1.048960454817865e-02, -3.948313379445176e-02, -3.948313379445176e-02, -2.958377243814538e-05, -3.593052463078166e-05, -6.157816079187573e-05, -1.311874092959178e-02, -3.388847836696598e-05, -3.388847836690172e-05, -1.277370801092921e-01, -3.576244543635212e-02, -5.874237397273545e-02, -8.362510380952262e-02, -7.030689915486160e-02, -7.030689915486155e-02, -1.024435213873064e-01, -3.160125306503260e-03, -9.646120330399520e-03, -8.885371900212260e-03, -1.039950562497425e-02, -1.039950562497421e-02, 4.402747281223072e-03, -9.484722865734494e-03, -1.631648192378523e-03, -2.737296082078788e-03, -4.524653655613866e-04, -4.524653655613782e-04, 3.922698308293880e-04, -6.568557315851522e-03, -1.190697773514819e-02, -1.301480557958771e-02, -3.099320064977294e-02, -3.099320064977312e-02, -2.996646184887303e-04, -9.258877553440773e-07, -1.183245441453656e-05, -3.293640177573000e-02, -2.982314515773130e-05, -2.982314515779665e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
