
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_wb97m_v_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_wb97m_v", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.845532697700395e+01, -1.845542959211960e+01, -1.845591529583949e+01, -1.845424032775610e+01, -1.845538078335777e+01, -1.845538078335777e+01, -2.566431150301603e+00, -2.566506868774494e+00, -2.568880612267593e+00, -2.568169867143695e+00, -2.566464605531336e+00, -3.047502310818370e+00, -4.306315696644186e-01, -5.174715854055970e-01, -5.085769196331558e-01, -5.097769279016195e-01, -5.176923856201371e-01, -5.176923856201371e-01, -8.046076785476212e-02, -8.203874546878018e-02, -5.126428790555816e-01, -6.641680505927440e-02, -8.093450262481729e-02, -8.093450262481729e-02, -1.747359004581127e-02, -1.809784503804078e-02, -4.451579027501966e-02, -9.729729383144842e-03, -1.794911561702386e-02, -1.794911561702387e-02, -4.745340093766042e+00, -4.747747834369190e+00, -4.745601571009272e+00, -4.552673717791528e+00, -4.746552691177000e+00, -4.746552691177000e+00, -1.389319249944483e+00, -1.404919422274234e+00, -1.382851611416484e+00, -1.395053495087119e+00, -1.408379229693137e+00, -1.687740399160868e+00, -3.977325298887080e-01, -4.296551646470417e-01, -3.784763835562270e-01, -3.883556453022430e-01, -4.125473127243482e-01, -3.951242143517581e-01, -5.149110850850077e-02, -8.802106058780527e-02, -5.111528503480232e-02, -1.606714101249503e+00, -5.548384421246762e-02, -5.548384421246762e-02, -4.291610669760370e-03, -1.054872897618052e-02, -8.273131801969218e-03, -3.309295254855151e-02, -4.442777806301192e-03, -9.761745071787014e-03, -3.807199938892129e-01, -3.909161096830252e-01, -3.815164959304840e-01, -3.862831260109070e-01, -3.877664574527084e-01, -3.877664574527084e-01, -3.694234272784928e-01, -3.311404235142469e-01, -3.413077489077263e-01, -3.524417580022845e-01, -3.463056378266256e-01, -3.396827114332317e-01, -4.600107811513536e-01, -1.307437127232289e-01, -1.533885689368147e-01, -2.047323391902132e-01, -1.805266621022977e-01, -1.805266621022977e-01, -2.787488239049889e-01, -4.323897547326915e-02, -4.943515528503459e-02, -1.911737339464588e-01, -4.275553452146497e-02, -5.061404126889527e-02, -1.982639120390296e-02, -3.427315256295198e-03, -6.051137175113939e-03, -4.836045879831430e-02, -8.512976359376166e-03, -8.512976359376180e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_wb97m_v_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_wb97m_v", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.820375023757928e+01, -2.820386390164899e+01, -2.820441787040968e+01, -2.820256017436336e+01, -2.820380972952302e+01, -2.820380972952302e+01, -3.945573244909183e+00, -3.945699649710462e+00, -3.949647689958375e+00, -3.948448364819103e+00, -3.945627915844562e+00, -3.514671270694125e+00, -6.108776670851116e-01, -5.650568767043660e-01, -5.429043133243245e-01, -5.502685446697589e-01, -5.655980278798572e-01, -5.655980278798572e-01, -1.195617378589675e-01, -1.221863334914304e-01, -7.359840653530519e-01, -4.966987359140035e-02, -1.203634501261705e-01, -1.203634501261705e-01, -2.163221130234298e-02, -2.234218541346634e-02, -4.374156904442218e-02, -1.241811608715644e-02, -2.216251438658098e-02, -2.216251438658116e-02, -6.536097645494956e+00, -6.540630056461543e+00, -6.536594280291224e+00, -6.744673862558189e+00, -6.538382712641804e+00, -6.538382712641804e+00, -2.091719329193932e+00, -2.117573277925205e+00, -2.080931453477425e+00, -2.101212496549958e+00, -2.123347283761603e+00, -1.895758098791650e+00, -4.960666573136026e-01, -5.894852069966834e-01, -4.604942098775697e-01, -4.947302535353544e-01, -5.287039248237740e-01, -5.644409183695048e-01, -7.258894227813903e-02, -1.046469906609584e-01, -7.201517013695553e-02, -2.071675999419122e+00, -3.571239571934728e-02, -3.571239571934728e-02, -5.519310944230607e-03, -1.342852698275736e-02, -1.057727228813217e-02, -4.427273731586179e-02, -5.710543784428529e-03, -1.244964338283567e-02, -5.218574301511160e-01, -5.467207705330039e-01, -5.363510881427463e-01, -5.298705790271059e-01, -5.335912734551330e-01, -5.335912734551330e-01, -5.068783925519736e-01, -4.095829387937920e-01, -4.450652806371001e-01, -4.950552558283583e-01, -4.680319183334375e-01, -4.830478269731626e-01, -6.111806778951715e-01, -1.716242809578101e-01, -2.039109086164339e-01, -2.703007189552828e-01, -2.317017454219497e-01, -2.317017454219497e-01, -3.830717260021511e-01, -4.423697132063387e-02, -4.432540485504203e-02, -2.357553960987120e-01, -5.940349022482549e-02, -3.078645297247227e-02, -2.453757975909154e-02, -4.456673767319422e-03, -7.797804489459594e-03, -2.864342887327986e-02, -1.089080099056095e-02, -1.089080099056094e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_wb97m_v_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_wb97m_v", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-8.967696203590077e-09, -8.967605531496127e-09, -8.967137498675064e-09, -8.968623195635077e-09, -8.967648922379304e-09, -8.967648922379304e-09, -1.218702025657178e-05, -1.218704182970039e-05, -1.218594552214597e-05, -1.218254069851276e-05, -1.218679784550874e-05, -7.955485580844306e-06, -5.460572124699910e-03, -2.575079928107988e-03, -2.519635798025663e-03, -2.581791491782344e-03, -2.576536873580450e-03, -2.576536873580450e-03, 4.285559517945921e-02, 3.327376560538944e-02, -2.629898010139183e-03, 8.242035850856784e-02, 4.001368735383983e-02, 4.001368735383983e-02, -6.823155289010363e-01, -6.639837619209125e-01, -1.678330389969430e-02, -2.992374623488095e-01, -6.953636463760337e-01, -6.953636463760988e-01, -1.953625939878409e-06, -1.953338221856236e-06, -1.953598928267800e-06, -2.390417862144233e-06, -1.953467603899007e-06, -1.953467603899007e-06, -1.143047350469193e-04, -1.116793503171096e-04, -1.153622367010067e-04, -1.133011547351039e-04, -1.111839755554242e-04, -6.758602385360538e-05, -6.348069027178357e-03, -2.902890488957992e-03, -7.835195070674598e-03, -6.082045117271042e-03, -5.128000057753941e-03, -1.029108526826874e-02, 6.886544886102034e+00, 2.502118186829044e-02, 7.826288168507048e+00, -8.778309999382004e-05, 1.918654668321337e-01, 1.918654668321337e-01, -5.905361545416267e+05, -3.707462485574968e-01, -1.505714578354598e+00, 2.270101559573655e+01, -4.989067687873529e+05, -4.630585882283498e-01, -1.691538477801393e-02, -7.174806609881026e-03, -6.445529589875381e-03, -1.316880462636430e-02, -1.169572796583232e-02, -1.169572796583232e-02, -1.488646716468056e-02, -1.021850908239161e-02, -6.854875211794768e-03, -2.626471189604524e-03, -4.810423143447076e-03, -1.462667005980776e-02, -3.259449199754596e-03, 1.370352521938494e-02, -3.138866636346382e-02, -6.179464348056918e-02, -3.441307034438128e-02, -3.441307034438125e-02, -2.834775688058625e-02, -4.324664260387572e-02, 2.343792149405994e-02, -3.587062638205920e-02, 1.709524304288289e+01, 2.182698301349432e-01, -2.656231936188386e-01, -4.770559441948200e-01, -8.804883127317735e-01, 2.885534985048632e-01, -6.659147888900391e-01, -6.659147888790079e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_wb97m_v_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_wb97m_v", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.082844393054876e-03, 2.082876266478668e-03, 2.083011556730022e-03, 2.082493547830227e-03, 2.082861211260285e-03, 2.082861211260285e-03, 3.821526516241985e-03, 3.822538303253498e-03, 3.852970226496609e-03, 3.840935031363908e-03, 3.821793840543284e-03, 4.063358700802848e-03, 2.332019879247537e-03, 4.001270616883262e-03, 2.535479335789780e-03, 3.185952183577070e-03, 4.037765262684814e-03, 4.037765262684814e-03, -1.318167203790158e-02, -1.167144090311652e-02, 1.956346151681069e-03, -3.479754748300790e-02, -1.273094519466248e-02, -1.273094519466248e-02, -4.905236348287365e-04, -5.544881991391300e-04, -8.463163921069487e-03, -2.152174283697043e-05, -5.630498600148289e-04, -5.630498600148716e-04, 9.068550331693575e-03, 9.104227965355568e-03, 9.072501894783718e-03, 8.967455822021750e-03, 9.086432648845127e-03, 9.086432648845127e-03, 4.305483939598303e-03, 4.503673760031604e-03, 4.219241665787788e-03, 4.374717329702013e-03, 4.556717896861724e-03, 5.313363142127396e-03, 4.828599329209124e-04, -1.050060957920784e-03, 3.722400900472684e-03, -2.750029846148997e-03, -1.308940642144179e-03, 2.710612221625147e-03, 3.669290435308400e-03, -2.410399676199348e-02, 3.973483589534131e-03, 1.000641617894875e-02, -4.048989888828547e-02, -4.048989888828547e-02, 3.775373136209581e-06, -3.593752285132046e-05, -6.158344420794215e-05, 1.722317582122370e-03, 4.324462932028147e-06, -3.389690803661035e-05, -1.109524693630107e-01, -2.610128402583530e-02, -7.418697157449790e-02, -6.845084179907543e-02, -5.624177194531248e-02, -5.624177194531248e-02, -7.557700073795087e-02, -3.160139544505284e-03, -1.026955397349801e-02, -9.629806511213786e-03, -1.141573956173914e-02, -4.469147176524476e-03, 7.839664815371410e-04, -5.290817281267945e-03, 2.287301757590504e-04, -1.183721039853063e-02, 2.645812874938803e-03, 2.645812874938818e-03, -4.796778903601243e-03, -6.584839599409148e-03, -1.201828901831927e-02, -8.628178252924383e-03, 4.001516660277421e-03, -3.160619411262249e-02, -3.000176388451223e-04, -9.259154768850811e-07, -1.183271023645017e-05, -3.364006418959527e-02, -2.982986410070937e-05, -2.982986410073055e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
