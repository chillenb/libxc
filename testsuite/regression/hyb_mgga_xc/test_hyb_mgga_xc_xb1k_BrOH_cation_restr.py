
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_xb1k_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_xb1k", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-8.317154482944563e+00, -8.317165225225400e+00, -8.317239230865377e+00, -8.317078835042077e+00, -8.317159147191475e+00, -8.317159147191475e+00, -1.428666999267153e+00, -1.428651925698825e+00, -1.428318570045947e+00, -1.428957283538138e+00, -1.428585816661797e+00, -1.428585816661797e+00, -3.125743073999261e-01, -3.123704219918028e-01, -3.080952135968095e-01, -3.095170500877032e-01, -3.091336455648505e-01, -3.091336455648505e-01, -9.519088654212836e-02, -9.592528800732425e-02, -3.743102813087684e-01, -8.046620421069724e-02, -8.578882309419218e-02, -8.578882309419218e-02, -1.885944016342442e-02, -1.885928254624087e-02, -3.571405094524687e-02, -1.730548909337520e-02, -1.718682877365545e-02, -1.718682877365544e-02, -2.037988576301662e+00, -2.037751458710300e+00, -2.037980657455893e+00, -2.037771320421659e+00, -2.037866722797961e+00, -2.037866722797961e+00, -8.677517765423350e-01, -8.717977593037873e-01, -8.674963290538721e-01, -8.710639849036329e-01, -8.701152512095172e-01, -8.701152512095172e-01, -2.611174004195664e-01, -2.763766067447019e-01, -2.466096540272662e-01, -2.545151439706971e-01, -2.638983986460581e-01, -2.638983986460581e-01, -6.506320533977016e-02, -1.008619503298236e-01, -6.160395464623820e-02, -7.782217112483305e-01, -6.966450022632968e-02, -6.966450022632968e-02, -1.563208018407774e-02, -1.666803441677223e-02, -1.090185721775697e-02, -4.668216130673832e-02, -1.318701729190697e-02, -1.318701729190697e-02, -2.494619210079220e-01, -2.501281936346252e-01, -2.499115268444850e-01, -2.497181705364125e-01, -2.498166993223114e-01, -2.498166993223114e-01, -2.437833767692798e-01, -2.260327387146217e-01, -2.311723039241907e-01, -2.361193812274184e-01, -2.335877739202889e-01, -2.335877739202889e-01, -2.905411679971355e-01, -1.200533816007754e-01, -1.365988193006099e-01, -1.670006170932788e-01, -1.502289013421943e-01, -1.502289013421942e-01, -2.107973081482476e-01, -3.536263317829327e-02, -4.174570998140435e-02, -1.591747280398983e-01, -5.355578597288223e-02, -5.355578597288223e-02, -2.121680904045060e-02, -9.680562344685447e-03, -1.263049329809018e-02, -5.151924199128154e-02, -1.239457088559514e-02, -1.239457088559513e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_xb1k_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_xb1k", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-9.982148883177466e+00, -9.982185540492681e+00, -9.982341631819297e+00, -9.981796344662962e+00, -9.982083040653416e+00, -9.982083040653416e+00, -1.692542455768308e+00, -1.692550407724422e+00, -1.692738012551225e+00, -1.692325778316963e+00, -1.692405006036105e+00, -1.692405006036105e+00, -3.792923847307214e-01, -3.786427898454726e-01, -3.617993125818301e-01, -3.625055893167523e-01, -3.629074919023557e-01, -3.629074919023557e-01, -1.013124659161444e-01, -1.031775514480447e-01, -4.745375496350844e-01, -7.713687131200096e-02, -8.659557815283156e-02, -8.659557815283153e-02, -5.285742215969115e-03, -5.402290139752108e-03, -2.485310447890064e-02, -4.079015829545711e-03, -4.402780226187018e-03, -4.402780226187031e-03, -2.511353646805081e+00, -2.512273684283214e+00, -2.511394072477986e+00, -2.512206349964242e+00, -2.511820907227034e+00, -2.511820907227034e+00, -9.379968902054630e-01, -9.447322184771612e-01, -9.310678311684154e-01, -9.369835943019232e-01, -9.451008352349951e-01, -9.451008352349951e-01, -3.223369849137994e-01, -3.480157780880420e-01, -3.049647701252083e-01, -3.165308023372393e-01, -3.270922349930804e-01, -3.270922349930804e-01, -5.751670742015923e-02, -9.883683542268754e-02, -5.444382971557690e-02, -9.777151118448492e-01, -6.376628484736480e-02, -6.376628484736480e-02, -3.500208519502091e-03, -3.948561288028092e-03, -2.727741731676571e-03, -4.118358342190538e-02, -3.294654501305036e-03, -3.294654501305048e-03, -3.219375097676817e-01, -3.202741547962451e-01, -3.209407860603894e-01, -3.214276463548297e-01, -3.211921783977655e-01, -3.211921783977655e-01, -3.133689901185029e-01, -2.672604312270255e-01, -2.816315219760046e-01, -2.957006154849530e-01, -2.886914056123677e-01, -2.886914056123677e-01, -3.644673940729195e-01, -1.235693680728639e-01, -1.489590155127261e-01, -2.010952072562275e-01, -1.725219738694507e-01, -1.725219738694506e-01, -2.512832760202374e-01, -2.336723373234359e-02, -3.393442616816088e-02, -1.964274221069141e-01, -4.751322125305520e-02, -4.751322125305518e-02, -6.588349853559146e-03, -1.829004605422722e-03, -2.718843633460073e-03, -4.569164218136988e-02, -3.079250386389893e-03, -3.079250386389875e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_xb1k_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_xb1k", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.688093116055134e-09, -2.688079166598429e-09, -2.687985736456546e-09, -2.688194092700593e-09, -2.688089377858933e-09, -2.688089377858933e-09, -2.561750982661711e-06, -2.561838849022835e-06, -2.564396122680380e-06, -2.566320341995693e-06, -2.565500167222378e-06, -2.565500167222378e-06, -8.547844170087244e-05, -1.082806878487151e-04, -6.316968982533315e-04, -6.799822909592688e-04, -6.468448101222472e-04, -6.468448101222472e-04, -1.568325895582065e-01, -1.471900840987124e-01, 8.212517155447002e-04, -3.764258307597738e-01, -2.661581279349500e-01, -2.661581279349500e-01, -2.934598910025445e+03, -2.572046414869284e+03, -1.361410339271680e+01, -1.387721029218666e+04, -7.685974419660026e+03, -7.685974419660030e+03, -7.094544202660936e-07, -7.096383656077999e-07, -7.094662456564278e-07, -7.096283566669011e-07, -7.095459607038457e-07, -7.095459607038457e-07, -2.276504252572748e-05, -2.232766954541063e-05, -2.300620606553021e-05, -2.261543945715600e-05, -2.240467409554336e-05, -2.240467409554336e-05, -5.745611107242209e-04, 1.655407864757838e-03, 2.187461478306181e-04, 5.931097615041452e-03, -4.389008344399519e-04, -4.389008344399519e-04, -9.569342678829279e-01, -1.472525209421377e-01, -1.176991842648768e+00, -5.637890385585290e-06, -7.185216289546982e-01, -7.185216289546983e-01, -3.165883836974051e+04, -1.550401979853212e+04, -5.616186508716003e+04, -3.305839722833880e+00, -2.651548870343771e+04, -2.651548870343769e+04, 7.324024905112445e-04, 9.345133666125317e-05, 3.268638404944979e-04, 5.218487355530552e-04, 4.255459310355805e-04, 4.255459310355805e-04, 1.905924957656358e-03, -3.458889733732038e-03, -2.339928814174016e-03, -9.426044126501524e-04, -1.668915860687113e-03, -1.668915860687113e-03, 1.545176287224938e-03, -6.687725475031295e-02, -3.416020010648158e-02, -5.462793974836642e-03, -1.814527819164626e-02, -1.814527819164626e-02, -3.580203234791323e-03, -1.543335439461646e+01, -5.681164118903220e+00, 5.618758911553959e-04, -2.039390438370261e+00, -2.039390438370262e+00, -1.025084435687730e+03, -1.089662471546779e+06, -1.044989014190991e+05, -2.343379898645390e+00, -3.539882524830734e+04, -3.539882524830747e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_xb1k_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_xb1k", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_xb1k_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_xb1k", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-1.453792283978471e-05, -1.453818662584219e-05, -1.453879561912927e-05, -1.453488296950892e-05, -1.453701315010626e-05, -1.453701315010626e-05, -2.775718393848247e-04, -2.776240936498513e-04, -2.788234851368839e-04, -2.766509746532341e-04, -2.776228584892479e-04, -2.776228584892479e-04, -2.566454190939865e-03, -2.533371885065624e-03, -1.804185727185526e-03, -1.813146546056280e-03, -1.838213172349539e-03, -1.838213172349539e-03, -2.555797814259009e-03, -2.812007899408073e-03, -2.283128744728795e-03, -9.589339535762655e-04, -1.555106140527363e-03, -1.555106140527362e-03, -3.258796894617046e-07, -3.975288282833202e-07, -2.492603401189000e-05, -6.277512067909956e-08, -1.524265052365561e-07, -1.524265052365564e-07, -2.269702985532985e-04, -2.280573663706722e-04, -2.270144524712743e-04, -2.279741091301697e-04, -2.275237198577517e-04, -2.275237198577517e-04, -2.646821746696447e-04, -2.698698241827689e-04, -2.483762463982107e-04, -2.527232363479489e-04, -2.759354158000614e-04, -2.759354158000614e-04, -6.369241708602159e-03, -1.190292719782858e-02, -6.412473447449897e-03, -1.282699419954386e-02, -6.819996236865639e-03, -6.819996236865639e-03, -2.855271797554048e-04, -1.081443713068554e-03, -2.474314630730053e-04, -1.928645477872851e-03, -6.389134607717199e-04, -6.389134607717198e-04, -3.950316868999526e-08, -6.927478027200196e-08, -2.025449349540546e-07, -1.121481555037163e-04, -1.603352375432031e-07, -1.603352375432027e-07, -1.715653870777054e-02, -1.386575190372423e-02, -1.490949299207765e-02, -1.586232602812442e-02, -1.537527207624292e-02, -1.537527207624292e-02, -1.924636234980064e-02, -4.390069527485070e-03, -6.462968674229307e-03, -9.827025162610095e-03, -7.946372527416517e-03, -7.946372527416517e-03, -1.066059606991729e-02, -1.552655076970212e-03, -2.480934733989058e-03, -6.305605209934963e-03, -4.033158041228320e-03, -4.033158041228323e-03, -4.854046670396275e-03, -2.008518762128271e-05, -4.752137100784840e-05, -9.965204787316353e-03, -2.644635392811541e-04, -2.644635392811544e-04, -6.882113065106681e-07, -7.619803347053765e-09, -3.151297056615350e-08, -2.192720144245662e-04, -1.623227288495196e-07, -1.623227288495198e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
