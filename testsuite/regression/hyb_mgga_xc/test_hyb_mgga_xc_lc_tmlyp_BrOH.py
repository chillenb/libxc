
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_lc_tmlyp_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_lc_tmlyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.086430658616520e+01, -2.086438739622730e+01, -2.086478259621032e+01, -2.086346167862041e+01, -2.086434887310615e+01, -2.086434887310615e+01, -2.969109956829249e+00, -2.969237948609332e+00, -2.973186889274782e+00, -2.971905083096869e+00, -2.969160058149778e+00, 6.034164882418173e+152, -3.893596457000668e-01, 1.544120425466968e+245, 3.559898897124541e+158, 1.921434466602603e+211, 7.133019317943196e+157, 1.643264846398970e+211, 4.081029606747283e+98, 2.786984782242301e+215, -3.615653479832418e-01, 1.253180024715508e+231, 3.224084224586049e+215, 2.675315163603085e+244, 2.080985576342252e+172, 2.752349694437378e+203, 5.643311279491152e+228, 1.342025142904787e+225, 1.071211983437216e+274, 8.952129417091420e+183, 2.701898411144281e+164, 5.430765475248590e+237, 3.554445522780253e+199, -5.099501031934905e+00, 3.233407501091542e+218, 4.493643839430310e+170, -1.557494344295931e+00, -1.583511947048079e+00, -1.546304001318130e+00, -1.567018487154819e+00, -1.589478582892035e+00, 7.250046509145458e+154, 1.637261992541474e+178, 1.501601857177752e+216, 3.479724507457902e+178, 3.115601667347254e+216, 1.217719390418759e+178, -4.721013531202728e-01, -1.713950747251703e-02, 1.952942286400154e+201, -1.763401694517319e-02, 2.291355098855757e+62, 3.174964256673705e+163, 7.244110407301723e+250, -8.213756852223106e-04, 1.693744363981982e+159, 1.056287707960161e+270, -9.595967224116554e-03, -8.547904913195161e-04, 6.597797579924306e+157, 5.661711313028455e+235, 6.479071061399148e+224, -4.990691412681844e-01, 1.311255506363841e+207, 1.569222600170646e+162, 3.792026103917329e+240, 3.195822564578964e+226, 3.297206431637937e+159, 5.385752670717528e+226, 7.401452348170126e+197, 2.792534314449816e+244, -4.169929535625130e-01, 8.921002484504154e+244, -9.332484907114239e-02, 9.133033067836537e+223, -2.109270106530767e-01, 2.144444867160433e+175, 1.224030236276181e+198, -3.092125730760324e-01, 3.636784359985570e+257, 1.225251098741591e+257, 2.324443390763245e+252, -1.447100877712420e-02, 1.030136972955723e+255, 2.017125282303031e+255, 7.061099192349271e+216, 1.979954001010902e+29, 2.411117871563284e+184, 7.573545691164838e+217, 1.964191519681606e+245]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_lc_tmlyp_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_lc_tmlyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.969972946863029e+01, -2.969979180601890e+01, -2.970012408759724e+01, -2.969910118418595e+01, -2.969976190354768e+01, -2.969976190354768e+01, -4.868829734730143e+00, -4.868800227143244e+00, -4.868093763635930e+00, -4.868763985407002e+00, -4.868845203935342e+00, -1.024538852629628e+153, -8.560635257925365e-01, -2.522372891765881e+245, -5.802854133897565e+158, -3.134017053025927e+211, -1.165261692158006e+158, -2.684464306386838e+211, -5.332412882072626e+98, -3.656804068327998e+215, -1.088818365745335e+00, -1.445465695326435e+231, -4.218029800872736e+215, -3.500081977000269e+244, 1.028163174209223e+173, 1.277696398692243e+204, -5.415190659606569e+227, 1.622722163167851e+226, 5.043751521323123e+274, 4.215068265167769e+184, -4.573629601564637e+164, -9.192896363121268e+237, -6.016774943257984e+199, -7.137591460479552e+00, -5.473335638095465e+218, -7.606594888815944e+170, -2.711201288620959e+00, -2.726535523458876e+00, -2.705215360687549e+00, -2.717055456227379e+00, -2.729364709318557e+00, -1.231530950037034e+155, -2.643588493274129e+178, -2.442154016473261e+216, -5.590609499983753e+178, -5.025771718475488e+216, -1.972852528332207e+178, -7.308200893921227e-01, -3.666386763462658e-02, -2.557557201924578e+201, -3.637517814996082e-02, -3.891460861834814e+62, -3.359573336834965e+163, -7.665320994497335e+250, -1.092438661714589e-03, 1.831556749692772e+160, 1.582487585147469e+271, -1.634895788866520e-02, -1.136845587157295e-03, 7.936882950560012e+158, -9.167541473923255e+235, -1.048603853228334e+225, -7.154377556442489e-01, -2.122840788975743e+207, -2.540306373336350e+162, -6.138649850308968e+240, -5.159512103660981e+226, -5.247894494791726e+159, -8.611754698250391e+226, -1.188133436526431e+198, -4.474008806357933e+244, -6.329515667103572e-01, -1.456432339702777e+245, -1.971282541287913e-01, -1.325225970632389e+224, -3.718327107874659e-01, -3.186298893544007e+175, -1.818711335151068e+198, -5.205624378160832e-01, 9.931320859509274e+255, -5.019067820109094e+256, -3.493922988730918e+252, -2.629145595618749e-02, -8.203732673084515e+254, 8.015579424435492e+255, 3.099774512144982e+218, 4.419698099172625e+30, -1.819539583677392e+184, 1.094186108471872e+219, 2.837760756789359e+246]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_lc_tmlyp_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_lc_tmlyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-9.858219385769883e-09, -9.858042616659244e-09, -9.857191128499002e-09, -9.860078867896876e-09, -9.858126796600602e-09, -9.858126796600602e-09, -2.190317922918548e-05, -2.190012741366345e-05, -2.180551810453097e-05, -2.183516464119340e-05, -2.190191873411529e-05, -8.440225393812899e-06, -2.072420321326789e-02, -3.363709485945787e-03, -3.374855641986147e-03, -3.423194531716292e-03, -3.363445888029754e-03, -3.363445888029754e-03, -6.233600891568325e-02, -6.875511111966914e-02, -1.498484248689138e-02, 3.902555158433395e-01, -6.426936919968779e-02, -6.426936919968779e-02, -3.455191827504148e+00, -3.432433358695725e+00, 8.013900498847359e+00, -3.636144184488586e+00, -3.439957185393395e+00, -3.439957185393384e+00, -2.163776292204524e-06, -2.162480474825147e-06, -2.163641552770347e-06, -2.489594539371468e-06, -2.163118091632982e-06, -2.163118091632982e-06, -2.416310470038686e-04, -2.292767936760279e-04, -2.470928022628246e-04, -2.370175250213207e-04, -2.265750248821048e-04, -7.434522175877700e-05, -8.965602588376302e-03, -7.177490941425365e-03, -1.014839505692673e-02, -9.536098994533953e-03, -8.113042648169014e-03, -1.193550416706249e-02, -8.786475314819069e-01, -9.027583235356740e-03, -5.924587854343133e-01, -1.046195596999317e-04, 8.322418725117795e-01, 8.322418725117795e-01, -4.222386017249594e+00, -3.621892030573315e+00, -3.701272528037105e+00, 2.699807757992112e+00, -4.183791631394596e+00, -3.647113060471273e+00, -7.479170188803096e-03, -8.178589426882226e-03, -7.600048749432462e-03, -7.764527440626599e-03, -7.863385394062750e-03, -7.863385394062750e-03, -8.576519064518780e-03, -1.443303122349043e-02, -1.316440728739107e-02, -1.175222541504777e-02, -1.250801063002842e-02, -1.523195810815885e-02, -6.006500821886480e-03, -4.345369511263688e-01, -5.605467746316877e-02, -9.494062583124979e-02, -4.921715669892149e-02, -4.921715669892149e-02, -3.993105064167028e-02, 8.003173999748149e+00, 6.747746271212231e+00, -4.845649914695380e-02, 1.124148572152013e+00, 3.031462920388825e+00, -3.300475801828058e+00, -3.773462592529930e+00, -3.734939225103536e+00, 3.427336878395471e+00, -3.682985516803758e+00, -3.682985516803754e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_lc_tmlyp_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_lc_tmlyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.084709482619919e-03, 1.084706850743695e-03, 1.084693171292250e-03, 1.084736308497400e-03, 1.084708110858267e-03, 1.084708110858267e-03, 6.615585201184665e-03, 6.615571513850617e-03, 6.614926890358978e-03, 6.614655418683926e-03, 6.615550379261319e-03, 3.394696011458689e-03, 2.953560741656172e-02, 1.104238446234329e-02, 1.044795801345979e-02, 1.074643651848227e-02, 1.105773001068141e-02, 1.105773001068141e-02, 1.636360302908756e-02, 1.674398716997914e-02, 2.578980286308901e-02, 8.510517194239507e-03, 1.647343734657434e-02, 1.647343734657434e-02, 1.808588026437658e-05, 2.069504331621426e-05, 9.281503661991424e-04, 2.070661201417454e-06, 2.008809983915156e-05, 2.008809983915156e-05, 3.510046876036735e-03, 3.514673013998330e-03, 3.510561542615140e-03, 4.437225938546701e-03, 3.512362468920757e-03, 3.512362468920757e-03, 1.159468986063746e-02, 1.151695878954683e-02, 1.162640490552236e-02, 1.156532559406989e-02, 1.150151243894659e-02, 5.525156316227479e-03, 2.047359781701448e-02, 2.283386955210774e-02, 1.951358057915443e-02, 2.161699405114420e-02, 2.113272217190836e-02, 3.163554906824105e-02, 1.094398610399700e-02, 1.327811328786912e-02, 1.063677770821264e-02, 7.701722478723571e-03, 7.094763595014659e-03, 7.094763595014659e-03, 1.929427657552111e-06, 2.767033507479916e-06, 1.187273476384182e-06, 3.413510845680532e-03, 2.178297483799245e-06, 2.105297742039208e-06, 2.989347995310888e-02, 2.843111432119446e-02, 3.183680090696995e-02, 2.933548131365697e-02, 2.913067408887027e-02, 2.913067408887027e-02, 2.993590550854192e-02, 2.200916148478645e-02, 2.389928881469101e-02, 2.594116406960466e-02, 2.485396931156710e-02, 3.402606808876318e-02, 2.100328770379409e-02, 3.747197872710303e-02, 1.877234021271405e-02, 4.011428005527383e-02, 2.076060153108758e-02, 2.076060153108757e-02, 3.704589678569673e-02, 7.624626185286334e-04, 1.566560412618134e-03, 2.395309125820022e-02, 6.734774782186679e-03, 3.700895375676116e-03, 2.815031758338664e-05, 5.866282908308367e-08, 3.991047913720940e-07, 3.437595352315178e-03, 1.302861609508240e-06, 1.302861609508233e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
