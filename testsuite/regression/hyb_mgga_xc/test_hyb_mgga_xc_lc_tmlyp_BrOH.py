
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_lc_tmlyp_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_lc_tmlyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.215792785295980e+01, -2.215797444836367e+01, -2.215826282916786e+01, -2.215750049482918e+01, -2.215795172351888e+01, -2.215795172351888e+01, -3.351815279297375e+00, -3.351856542095288e+00, -3.353344245754934e+00, -3.354836135007443e+00, -3.351831622547449e+00, -3.351831622547449e+00, -5.198107314542757e-01, -5.194846722776474e-01, -5.132314870908936e-01, -5.237950116875226e-01, -5.196984294132276e-01, -5.196984294132276e-01, -8.009911996149831e-02, -8.235507741527541e-02, -5.374720076016782e-01, -3.134415607353525e-02, -8.076712714894922e-02, -8.076712714894922e-02, -1.780333609420924e-03, -1.865640771190860e-03, 1.140918778864616e-05, -8.547397665955499e-04, -1.845600041246342e-03, -1.845600041246342e-03, -5.313437774867019e+00, -5.313985688515561e+00, -5.313510008881567e+00, -5.313935236079848e+00, -5.313696286756862e+00, -5.313696286756862e+00, -1.988516879029107e+00, -2.004570480347974e+00, -1.987809562067276e+00, -2.000443530870311e+00, -2.000347347160675e+00, -2.000347347160675e+00, -4.752330412645780e-01, -5.217927327747623e-01, -4.376226886853725e-01, -4.566778067404100e-01, -5.006941258244140e-01, -5.006941258244140e-01, -5.229103644464425e-03, -7.695641434793332e-02, -6.328968162212499e-03, -1.773786487371545e+00, -1.825893903341380e-02, -1.825893903341380e-02, -8.249559971031622e-04, -9.418443789491451e-04, -7.067889392897858e-04, 2.588938026641546e-03, -8.581152348921159e-04, -8.581152348921159e-04, -5.054616530937812e-01, -5.016839476520494e-01, -5.029790497334107e-01, -5.040219480175578e-01, -5.034941059624846e-01, -5.034941059624845e-01, -4.835421434603932e-01, -4.085867599859520e-01, -4.292525672255758e-01, -4.489013618519120e-01, -4.386401745266764e-01, -4.386401745266764e-01, -5.476056746364953e-01, -1.247631631463513e-01, -1.680913997859197e-01, -2.405073945930541e-01, -2.032766656130668e-01, -2.032766656130668e-01, -3.501177285935816e-01, -2.867064278273637e-04, 3.326705267252524e-03, -2.200144941972817e-01, -1.962399585748467e-03, -1.962399585748538e-03, -2.089141972879850e-03, -2.598540365624557e-04, -4.919442453569326e-04, -2.573995244872521e-03, -7.299981432981570e-04, -7.299981432981559e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_lc_tmlyp_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_lc_tmlyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.789191512304098e+01, -2.789201912995048e+01, -2.789248966256142e+01, -2.789078705305220e+01, -2.789196990959106e+01, -2.789196990959106e+01, -4.311144926417274e+00, -4.311229409221301e+00, -4.313818810294883e+00, -4.311687350286966e+00, -4.311198850038277e+00, -4.311198850038277e+00, -6.965701685716790e-01, -6.950572378665475e-01, -6.587045380382388e-01, -6.702126124829948e-01, -6.960266117099324e-01, -6.960266117099324e-01, -1.372120076866464e-01, -1.394719841333588e-01, -8.244235799158737e-01, -8.878613067940151e-02, -1.378610017177966e-01, -1.378610017177966e-01, -2.330617897585705e-03, -2.439238518399246e-03, -1.159291346151085e-02, -1.131450082672063e-03, -2.414479454789418e-03, -2.414479454789418e-03, -6.827761494075139e+00, -6.830986633386601e+00, -6.828092872477007e+00, -6.830600474413415e+00, -6.829413531185024e+00, -6.829413531185024e+00, -2.282251907913322e+00, -2.304959135570159e+00, -2.272645017227781e+00, -2.290405901832394e+00, -2.310477382512444e+00, -2.310477382512444e+00, -6.561114423190871e-01, -7.537760248160272e-01, -6.120352213179723e-01, -6.695330605026267e-01, -6.910765048811862e-01, -6.910765048811862e-01, -6.381965495270339e-02, -1.466808208916701e-01, -6.085529142666964e-02, -2.518028852827455e+00, -7.404847970996013e-02, -7.404847970996013e-02, -1.092445927030107e-03, -1.245590306732405e-03, -9.382618919930177e-04, -2.590017467482725e-02, -1.136845469843497e-03, -1.136845469843497e-03, -7.157677159249932e-01, -7.070873727253185e-01, -7.103249787971369e-01, -7.127395304068882e-01, -7.115425852526780e-01, -7.115425852526779e-01, -6.898483473350439e-01, -5.445155405147202e-01, -5.849724445461172e-01, -6.252326727278754e-01, -6.045713683526281e-01, -6.045713683526283e-01, -7.946058809383338e-01, -1.974714264346545e-01, -2.449333166226089e-01, -3.418867567707507e-01, -2.888557633444249e-01, -2.888557633444248e-01, -4.757697973577064e-01, -9.476304937151110e-03, -2.115546622126320e-02, -3.229923484386614e-01, -4.288016164248329e-02, -4.288016164248329e-02, -2.714626618102782e-03, -3.459577052156378e-04, -6.538184718496186e-04, -3.816031942278521e-02, -9.686959552855058e-04, -9.686959552855042e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_lc_tmlyp_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_lc_tmlyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-7.730635444944696e-09, -7.730571093081970e-09, -7.730166009243957e-09, -7.731218511693573e-09, -7.730602540675734e-09, -7.730602540675734e-09, -1.268124388226188e-05, -1.268097344526471e-05, -1.266889832418299e-05, -1.263920195527825e-05, -1.268112601305949e-05, -1.268112601305949e-05, -7.469086867713819e-03, -7.461564342209037e-03, -7.122553361732652e-03, -6.796689754087291e-03, -7.466255351509604e-03, -7.466255351509604e-03, -8.201113720473008e-02, -9.033518154899589e-02, -5.916957360241929e-03, 2.674058010375512e-01, -8.477373427075569e-02, -8.477373427075569e-02, -3.457733469960171e+00, -3.435812320109058e+00, 7.946093379293604e+00, -3.661548695401625e+00, -3.442819343279589e+00, -3.442819343279588e+00, -2.165950915703867e-06, -2.164622022522196e-06, -2.165785093016397e-06, -2.164753491435125e-06, -2.165312945682523e-06, -2.165312945682523e-06, -8.220148831467943e-05, -8.023096328695481e-05, -8.182669976240096e-05, -8.028542649109553e-05, -8.132073103194181e-05, -8.132073103194181e-05, -1.082046047188083e-02, -8.314234375489518e-03, -1.372413395767022e-02, -1.269946741369395e-02, -9.340418452105910e-03, -9.340418452105910e-03, 1.495338121025295e+00, -2.363886452517089e-02, 1.547880945778717e+00, -1.490963284059484e-04, 7.724332953604891e-01, 7.724332953604891e-01, -3.665727797389837e+00, -3.642647569869376e+00, -3.705769506061471e+00, 5.564785394257687e+00, -3.670177283495472e+00, -3.670177283495471e+00, -7.337690752180910e-03, -8.164637456582706e-03, -7.904834650735474e-03, -7.677442724453723e-03, -7.794373162862540e-03, -7.794373162862538e-03, -8.293617252619951e-03, -1.481494472598456e-02, -1.357954837161680e-02, -1.209182245630917e-02, -1.292481186169244e-02, -1.292481186169245e-02, -7.457825279872791e-03, -6.369925389362781e-02, -6.509092622309473e-02, -4.953010444703107e-02, -5.862159839451139e-02, -5.862159839451141e-02, -2.195206045703553e-02, 7.964754634266145e+00, 6.658075158880447e+00, -6.232777907841672e-02, 2.949795845119989e+00, 2.949795845119984e+00, -3.362611978974992e+00, -3.781176531103854e+00, -3.737508475785524e+00, 3.339708649356300e+00, -3.701236173176379e+00, -3.701236173176374e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_lc_tmlyp_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_lc_tmlyp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([8.027159147851863e-04, 8.027188218255942e-04, 8.027233359141102e-04, 8.026759021036719e-04, 8.027175185321094e-04, 8.027175185321094e-04, 4.508438480026002e-03, 4.508637587076095e-03, 4.513929645323815e-03, 4.503871991928521e-03, 4.508521905164673e-03, 4.508521905164673e-03, 1.714421806862590e-02, 1.708678548361903e-02, 1.551601640769859e-02, 1.552191253270302e-02, 1.712359442131123e-02, 1.712359442131123e-02, 1.711084313565146e-02, 1.760815816915562e-02, 1.660307032208900e-02, 9.880408944735023e-03, 1.726439300433718e-02, 1.726439300433718e-02, 1.809659386563989e-05, 2.071142531754991e-05, 9.506996611388425e-04, 2.081414933750592e-06, 2.010159957022165e-05, 2.010159957022165e-05, 3.514461123250105e-03, 3.519051576187576e-03, 3.514916071780971e-03, 3.518485553709457e-03, 3.516833998134387e-03, 3.516833998134387e-03, 5.768637548715982e-03, 5.784635876883369e-03, 5.706747840108058e-03, 5.719577989582139e-03, 5.860532473008389e-03, 5.860532473008389e-03, 2.374614783497740e-02, 2.778446944216184e-02, 2.419489739753115e-02, 2.819589374021778e-02, 2.388361574064186e-02, 2.388361574064186e-02, 5.490123403534104e-03, 1.377562362602302e-02, 5.499619031150371e-03, 1.060326350931410e-02, 7.510985336702428e-03, 7.510985336702428e-03, 1.871902054248175e-06, 2.779015386781885e-06, 1.188513709081520e-06, 2.128004083462529e-03, 2.115496587031637e-06, 2.115496587031637e-06, 3.080799518620646e-02, 2.919335512757391e-02, 2.974297416197205e-02, 3.018968338652820e-02, 2.996390937353717e-02, 2.996390937353717e-02, 3.177893739123996e-02, 2.243101214546778e-02, 2.457515948981809e-02, 2.694768784787875e-02, 2.572235397724990e-02, 2.572235397724990e-02, 2.664757169931320e-02, 1.688216601439884e-02, 1.992951654840477e-02, 2.515309242683441e-02, 2.264261447006585e-02, 2.264261447006585e-02, 2.328523448534798e-02, 7.725037918783313e-04, 1.626494344095579e-03, 2.818512412715655e-02, 3.883379890562759e-03, 3.883379890562815e-03, 2.854290203108842e-05, 5.875382329289377e-08, 3.993252920448478e-07, 3.608325370203669e-03, 1.307953782159880e-06, 1.307953782159873e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
