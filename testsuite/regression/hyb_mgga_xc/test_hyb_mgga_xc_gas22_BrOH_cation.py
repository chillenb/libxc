
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_gas22_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_gas22", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.903501904373356e+01, -1.903516050405428e+01, -1.903575138682977e+01, -1.959763716519926e+01, -1.959858635962889e+01, -2.018797098213926e+01, -2.772459964044883e+00, -3.001129206503129e+00, -3.001443729223272e+00, -3.001597537826210e+00, -3.001260842761593e+00, -2.772625885125639e+00, -4.475452418789902e-01, -4.549384394600244e-01, -4.947045475446452e-01, -4.449707895515560e-01, -4.396023050670965e-01, -4.972619879961019e-01, -7.677621620916197e-02, -7.864395439105551e-02, -5.419663218217144e-01, -7.274288547954506e-02, -6.492544653977397e-02, -7.908759057076548e-02, -3.618999451694680e-02, -2.548575648844434e-02, -4.679957911410604e-02, -2.976095435874982e-02, -2.347688154954214e-02, -2.347688154954212e-02, -4.880650828561502e+00, -4.884087004853665e+00, -4.880841085854336e+00, -4.883872900314781e+00, -4.785174243675437e+00, -4.785274553674975e+00, -1.642761345753646e+00, -1.654158763357165e+00, -1.634674139924296e+00, -1.644559708263053e+00, -1.516685556906737e+00, -1.653052749669852e+00, -3.823903231695241e-01, -4.304818922434078e-01, -3.698608397880366e-01, -3.780853575232378e-01, -3.900569242408326e-01, -4.040506239242502e-01, -7.764193638240072e-02, -7.620296876197608e-02, -7.749636687248262e-02, -1.613046815697172e+00, -6.507176822610240e-02, -6.507176822610228e-02, -2.022306638320523e-02, -2.991444793015908e-02, -2.073497374945737e-02, -4.473175708212172e-02, -2.399316177766495e-02, -2.399316177766492e-02, -3.530254613666028e-01, -3.789696665919155e-01, -3.795649539958513e-01, -3.597338482167943e-01, -3.758533833773406e-01, -3.635736612288170e-01, -3.449126086439765e-01, -3.072305446914041e-01, -3.189100012835752e-01, -3.400938030980858e-01, -3.340455170199437e-01, -3.248869087137404e-01, -4.480517786255573e-01, -1.148425250613993e-01, -1.390830308090587e-01, -2.000458588442868e-01, -1.740173296725941e-01, -1.676625224002315e-01, -2.938045859316391e-01, -3.721074121140130e-03, -7.761359219832517e-02, -1.920232369228208e-01, -6.900532650097903e-02, -6.900532650097897e-02, -1.294609190564224e-05, -1.701486213122868e-02, 1.174776510216771e-04, -2.268819039802118e-02, -2.180971667222256e-02, -1.422374184391327e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_gas22_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_gas22", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.990855108900312e+01, -2.990900575592196e+01, -2.990874223562271e+01, -2.990915984793218e+01, -2.990930129180049e+01, -2.990994726312809e+01, -2.972472347873510e+01, -2.854008229820957e+01, -2.972602989074121e+01, -2.854131378256273e+01, -2.847127240647294e+01, -2.847115613198590e+01, -3.661082079634348e+00, -4.053034090706532e+00, -3.674691264063191e+00, -3.674373022912468e+00, -3.679134259473010e+00, -3.679988376971066e+00, -3.677846585785704e+00, -3.677903880876893e+00, -3.673261000207211e+00, -3.682056492303828e+00, -4.052541730471582e+00, -3.668508391231215e+00, -5.792097687225134e-01, -5.802723001405615e-01, -6.261364872292831e-01, -6.056504461832870e-01, -5.556261216652706e-01, -5.528946688725931e-01, -5.944461633762291e-01, -6.124780051150585e-01, -5.889528410719513e-01, -5.595239299616125e-01, -5.807652903358680e-01, -5.470696725160904e-01, -1.077952982785442e-01, -1.453427319969861e-01, -1.114394631253740e-01, -1.456424892346743e-01, -7.397640393052646e-01, -6.985370825983523e-01, -6.681915547305321e-02, -4.566504246731658e-02, -2.832213033254326e-02, -2.613476430262359e-01, -7.327547241559705e-02, -6.521704640088932e-02, -2.637297422723019e-02, -2.559012618634116e-02, -2.610752636287800e-02, -9.236514001176106e-03, -1.897680352324770e-02, -3.987315872810277e-02, -1.957739516547927e-02, -1.990875930891666e-02, -1.695142770644461e-02, -2.786677281142173e-02, -1.695142770644477e-02, -2.786677281142141e-02, -6.950119446779348e+00, -6.948651562978627e+00, -6.955339195665767e+00, -6.953727103840332e+00, -6.950462171673932e+00, -6.948883620578587e+00, -6.954961252490556e+00, -6.953468509158930e+00, -7.050197420270315e+00, -7.020345125025239e+00, -7.021853609438378e+00, -7.048603400548654e+00, -1.940865051901372e+00, -1.942359185395172e+00, -1.968887863980670e+00, -1.969453894718747e+00, -1.916482338944149e+00, -1.925264466155668e+00, -1.940822011170334e+00, -1.949856754986612e+00, -1.964200132387192e+00, -2.161906770814911e+00, -1.975198936497226e+00, -1.958825860733656e+00, -5.037094552417879e-01, -5.146175721967160e-01, -6.117252878541802e-01, -6.121626092432398e-01, -4.485593599225786e-01, -4.573525674417301e-01, -4.688390840189114e-01, -4.760630807274085e-01, -5.306888984725255e-01, -5.215662619447685e-01, -5.216466450253689e-01, -5.028863112480076e-01, -4.375103039780818e-02, -4.269506214035160e-02, -8.075157224885067e-02, -1.622058523812527e-01, -4.812226198693228e-02, -3.849676840690806e-02, -2.153579890653628e+00, -2.152769394025945e+00, -6.170463419989327e-02, -1.985296569261073e-02, -6.170463419989292e-02, -1.985296569261110e-02, -2.345906318125933e-02, -1.116060550230788e-03, -2.040772795147371e-02, -1.899540237913787e-02, -1.439587391755737e-02, -1.441361793868840e-02, -5.585829442753075e-02, 4.788064236327810e-03, -1.360571436492335e-02, -1.798314826124899e-02, -1.360571436492376e-02, -1.798314826124907e-02, -4.351341495182495e-01, -4.344670826653891e-01, -5.288557325526784e-01, -5.274015612995763e-01, -4.947710794564326e-01, -4.953871891888363e-01, -4.468367360590179e-01, -4.934470470154879e-01, -4.809341044360830e-01, -4.814623804123877e-01, -4.554086935730460e-01, -5.105074315407843e-01, -4.294722696108230e-01, -4.281618598518145e-01, -3.895794808547436e-01, -4.072282597884400e-01, -4.295013265695409e-01, -4.249533998492322e-01, -4.875989394830376e-01, -4.884196203320561e-01, -4.467203734185697e-01, -4.476888574158271e-01, -4.665902783157159e-01, -4.385292630776007e-01, -6.508907937245936e-01, -6.195076966848795e-01, -1.480716053425486e-01, -1.469953124087912e-01, -1.994792930086011e-01, -2.213110428194331e-01, -2.657072731518439e-01, -2.600205756551044e-01, -2.302860997426778e-01, -2.303909383941576e-01, -2.347077085759219e-01, -2.325012136305822e-01, -3.599134149546137e-01, -3.604655933861096e-01, -9.258766102960336e-03, -8.818081340286584e-03, -5.329996466762282e-02, -5.169080505020582e-02, -2.363631629470101e-01, -2.280677797676794e-01, -4.514039639793020e-02, -2.778776112217317e-02, -4.514039639793051e-02, -2.778776112217252e-02, -5.395711828696717e-04, 1.010986034859337e-04, -9.665843162263597e-03, -9.607822180379698e-03, -3.597936825087799e-05, 2.700456031212273e-04, -5.433964524827765e-02, -5.386176627167684e-02, -1.643354005721499e-02, -1.502009293242165e-02, -3.002352651579241e-03, -9.157610919430754e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_gas22_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_gas22", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.530610870491304e-02, 0.000000000000000e+00, 1.530626638457709e-02, 1.977007973577936e+21, 0.000000000000000e+00, 1.977042317133177e+21, 1.977687508551097e+21, 0.000000000000000e+00, 1.977649526809898e+21, -2.450080890499714e-08, 0.000000000000000e+00, -1.335525550088310e-08, -2.449806255602470e-08, 0.000000000000000e+00, -1.335432024738275e-08, -1.346101933525757e-08, 0.000000000000000e+00, -1.346180501900567e-08, -1.431393990067069e-05, 0.000000000000000e+00, -7.237404351748475e-05, -1.440995826625078e-05, 0.000000000000000e+00, -1.440930913357914e-05, -1.443706414994579e-05, 0.000000000000000e+00, -1.444042467098336e-05, -1.442227303575147e-05, 0.000000000000000e+00, -1.442152369407355e-05, -1.441846843104911e-05, 0.000000000000000e+00, -1.444064244035698e-05, -7.242848249902221e-05, 0.000000000000000e+00, -1.434723700071730e-05, 8.017866702361173e+05, 0.000000000000000e+00, 7.768090643372645e+05, -1.258693030884401e-01, 0.000000000000000e+00, -3.449168047116822e-03, -4.166947182886990e-03, 0.000000000000000e+00, -4.135088015987027e-03, -3.250079807126158e-03, 0.000000000000000e+00, -1.348022386815965e-01, 4.539079946385443e+20, 0.000000000000000e+00, 7.662231824138383e+20, -4.437239299778824e-03, 0.000000000000000e+00, -3.975625478469802e-03, -6.055605334046737e+01, 0.000000000000000e+00, 7.573165131299060e-01, -5.728584817553786e+01, 0.000000000000000e+00, 6.871985517402014e-01, -9.676761862613215e-04, 0.000000000000000e+00, -5.745327244924493e-02, 9.937783462843452e-01, 0.000000000000000e+00, 8.017318005294541e-01, -2.828820911875648e-01, 0.000000000000000e+00, 1.285969129946245e+01, -5.285121931854533e-02, 0.000000000000000e+00, -7.750714542712053e+02, -7.552131488211494e+03, 0.000000000000000e+00, -4.645984139923614e+03, -1.133099675543183e+08, 0.000000000000000e+00, -6.587039161289357e+03, -7.498436570038111e+04, 0.000000000000000e+00, -2.749717688711832e+01, -2.293505946506381e+04, 0.000000000000000e+00, -2.623489452958901e+04, -1.800232830363920e+03, 0.000000000000000e+00, -1.636349118622519e+05, -1.800232830363918e+03, 0.000000000000000e+00, -1.636349118622514e+05, -3.223991009212259e-06, 0.000000000000000e+00, -3.226611410974734e-06, -3.220817063223777e-06, 0.000000000000000e+00, -3.223304824377929e-06, -3.223868511133257e-06, 0.000000000000000e+00, -3.226389418846239e-06, -3.220976176319313e-06, 0.000000000000000e+00, -3.223561841605158e-06, -1.123123901413827e-05, 0.000000000000000e+00, -2.980388696163012e-06, -2.978261126016087e-06, 0.000000000000000e+00, -1.124285803820953e-05, -1.231380239803359e-04, 0.000000000000000e+00, -1.233409774545879e-04, -1.219220083335436e-04, 0.000000000000000e+00, -1.221628786146096e-04, -1.239934483660794e-04, 0.000000000000000e+00, -1.238680710333900e-04, -1.230613971139885e-04, 0.000000000000000e+00, -1.228840666206301e-04, -1.191300710617303e-04, 0.000000000000000e+00, -9.491989422066961e-04, -1.216815544602562e-04, 0.000000000000000e+00, -1.227966978890401e-04, -1.078745741297082e-02, 0.000000000000000e+00, -2.332734970863947e-01, -1.757049427732682e-03, 0.000000000000000e+00, -1.632648080956984e-03, -1.599398117215738e-02, 0.000000000000000e+00, -1.398387280978911e-02, -1.321247572267125e-02, 0.000000000000000e+00, -1.114489574569949e-02, -8.336618722256993e-03, 0.000000000000000e+00, -2.426972649987113e-01, -8.523328160610244e-03, 0.000000000000000e+00, -1.075354691635963e-02, 1.218301157101589e+00, 0.000000000000000e+00, 1.104288723672856e+00, -5.618594321317089e+01, 0.000000000000000e+00, 6.566195179907315e-01, 1.530613614612250e+00, 0.000000000000000e+00, 8.698848718557473e-01, -1.552889093316044e-04, 0.000000000000000e+00, -1.555441426372673e-04, 2.322261171925305e+00, 0.000000000000000e+00, 1.171852635029069e+00, 2.322261171925308e+00, 0.000000000000000e+00, 1.171852635029090e+00, -3.808426372218545e+09, 0.000000000000000e+00, -6.101086222398242e+04, -2.663382193864976e+04, 0.000000000000000e+00, -2.361798637370130e+04, -1.313238057453705e+05, 0.000000000000000e+00, -8.299847679406869e+04, -8.907276451560074e-01, 0.000000000000000e+00, -7.895879046289149e+03, -1.436233521010079e+05, 0.000000000000000e+00, -1.135377870116615e+04, -1.436233521010076e+05, 0.000000000000000e+00, -1.135377870116623e+04, -4.184918805545332e-02, 0.000000000000000e+00, -4.337297756399593e-02, -2.686367079442802e-03, 0.000000000000000e+00, -4.548740082840180e-03, 7.654653892355608e+20, 0.000000000000000e+00, 7.419774136773513e+20, -1.725135586831198e-01, 0.000000000000000e+00, -4.737435619066322e-03, 7.602036506752548e+20, 0.000000000000000e+00, 7.369842567854009e+20, -1.759725177896572e-01, 0.000000000000000e+00, 4.019017214878961e-04, -3.852683827946424e-02, 0.000000000000000e+00, -4.075565240995339e-02, -2.063855437214736e-02, 0.000000000000000e+00, -5.085112951946722e-01, -1.277405539745207e-02, 0.000000000000000e+00, -4.108974051969123e-01, 1.796640298185500e-03, 0.000000000000000e+00, 1.628797181896370e-03, -7.017114662018356e-03, 0.000000000000000e+00, -6.881969307277744e-03, -4.775825823023411e-03, 0.000000000000000e+00, -3.688858839916777e-01, -3.298387379988961e-03, 0.000000000000000e+00, -1.256990867298397e-01, 7.920629379932451e-02, 0.000000000000000e+00, 6.847018935244702e-02, -8.693756667297338e+00, 0.000000000000000e+00, 5.065806821624029e-02, -2.485517933377365e+00, 0.000000000000000e+00, -4.061381392727628e-02, -4.986399032058551e-02, 0.000000000000000e+00, -4.994674893741345e-02, -2.036305257781828e-02, 0.000000000000000e+00, -4.582546618365397e+00, -2.672028361172910e-02, 0.000000000000000e+00, -2.606107236003161e-02, -1.627300356492358e+19, 0.000000000000000e+00, -1.540906394353745e+19, -7.056023475674683e+00, 0.000000000000000e+00, -5.497067503610989e+00, -6.756296920052694e-02, 0.000000000000000e+00, -6.018244390833507e-02, 2.876080563258127e+00, 0.000000000000000e+00, 1.593159521134361e+00, 2.876080563258111e+00, 0.000000000000000e+00, 1.593159521134282e+00, -5.629265873273649e+18, 0.000000000000000e+00, -4.233705445396465e+18, -9.812991352767731e+05, 0.000000000000000e+00, -9.635396784271881e+05, -9.735045820712097e+17, 0.000000000000000e+00, -5.945307762703227e+17, 2.755921926759187e+19, 0.000000000000000e+00, 2.420519628135135e+19, -1.960731443250366e+05, 0.000000000000000e+00, -2.016198431121227e+04, -2.570618882548790e+05, 0.000000000000000e+00, -1.597223374018909e+09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_gas22_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_gas22", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.620470265812936e-03, 2.620920840996365e-03, 2.620537813766642e-03, 2.620973154200427e-03, 2.620691068941482e-03, 2.621199099620238e-03, 2.534471147543771e-03, 2.555647919873531e-03, 2.534890667610779e-03, 2.555942885210589e-03, 2.533514653059364e-03, 2.533680124634317e-03, 4.775004716212185e-03, 4.823903229065186e-03, 4.949320067017280e-03, 4.947723159053913e-03, 4.978859181165734e-03, 4.983719366130993e-03, 4.967680541592892e-03, 4.967670103341612e-03, 4.946730819676864e-03, 4.992430309343637e-03, 4.825962518253947e-03, 4.818255465806749e-03, -2.098583478727469e-03, -2.375411247877855e-03, 8.364173660725022e-03, 1.752059197017942e-03, 2.576730140016342e-03, 2.264443996048199e-03, 7.099424354113111e-04, 8.344180142619066e-03, -1.720298490509675e-03, -1.026581254829968e-03, 5.224617454513468e-03, 1.197327092022047e-03, 1.723210700902956e-02, -4.368160751123036e-02, 1.750356510727324e-02, -4.230648340531901e-02, -1.595406376044474e-03, 4.860094747739186e-03, -5.196425406853401e-02, -6.178051838149338e-02, -5.004366181285888e-02, -2.479804669712027e-02, -3.980832795394875e-02, -8.165793462403941e-04, -5.018069354549224e-04, -4.807578188738958e-04, -4.073534886131666e-04, -4.319626573466789e-04, -6.407842982323792e-03, -8.717784553819127e-03, -1.103931157067626e-04, -1.131138563893891e-04, -1.307453361367722e-04, -3.440843071627231e-04, -1.307453361366631e-04, -3.440843071620818e-04, 1.104994970434332e-02, 1.105390132140098e-02, 1.109494529222507e-02, 1.109698706161191e-02, 1.105325715357122e-02, 1.105569491922633e-02, 1.109152517366050e-02, 1.109512992561762e-02, 1.068086834082715e-02, 1.145066393382210e-02, 1.144737368993294e-02, 1.068406074310540e-02, 6.205849683658486e-03, 6.233292488547686e-03, 6.439247340820132e-03, 6.458459008848554e-03, 5.988595093220791e-03, 6.081333026251363e-03, 6.198700492337576e-03, 6.290834067682358e-03, 5.921818820120950e-03, 6.157217469534293e-03, 6.498292444126723e-03, 6.375082937634023e-03, -2.014771306131112e-03, -3.233388589534398e-03, -4.219305030231930e-03, -3.635299338970978e-03, 6.581180985703422e-03, 2.512838925208357e-04, -2.840701922838335e-03, -1.053181781964734e-02, -5.883719200733301e-03, 3.361633814164412e-04, -9.402948498769591e-03, -2.953116634994930e-03, -4.342093576606351e-02, -4.327969682668970e-02, 5.616147218178551e-03, -3.969355707394701e-02, -3.952346052098414e-02, -4.201206304828436e-02, 1.157108431011988e-02, 1.157748565952732e-02, -5.274617229958527e-02, -7.409210107640264e-02, -5.274617229958559e-02, -7.409210107640282e-02, -3.641822808512506e-05, -3.413271682584750e-05, -1.029176549964477e-04, -8.956667440399885e-05, -2.896010842957783e-04, -3.034140576115761e-04, -2.122739308590054e-02, -1.510258790975517e-02, -1.056088544537095e-04, -2.582178945985347e-04, -1.056088544527592e-04, -2.582178945984896e-04, -3.343640720673333e-01, -3.394337353766232e-01, -7.015283018812679e-02, -6.981079413681214e-02, -1.807507394751459e-01, -1.804364306962786e-01, -2.504611907814270e-01, -2.082926182115260e-01, -2.275527897578793e-01, -2.280313077259019e-01, -2.105071243012847e-01, -1.637435500896076e-01, -2.892003282510717e-01, -2.937596243050170e-01, -5.932858848429395e-03, -6.615304852301425e-03, -1.281300255152105e-02, -1.493487864925225e-02, -1.833461239172392e-02, -1.848833774054653e-02, -2.178166114757163e-02, -2.229901538472653e-02, -1.189325387316007e-02, -1.769378059559093e-02, 4.108777874190162e-03, -1.415302513187302e-03, -2.446878705283301e-02, -2.416061590176048e-02, 1.439715784458265e-02, -1.794068304923166e-02, -1.715582847975689e-03, -8.556565385798555e-03, 1.017221928665433e-03, 1.117599663331315e-03, -1.138839223866043e-02, 6.887446204318268e-03, 2.093943576424207e-03, 3.276621491498669e-04, 2.361722097487996e-03, 2.309573478804361e-03, -1.643272102733888e-02, -1.690911750301420e-02, -7.755556798699260e-03, -2.480899290223445e-02, -4.301069725739225e-02, -5.376167076881358e-02, -4.301069725739220e-02, -5.376167076881410e-02, 5.070980599114333e-05, 4.951707056284221e-05, -5.628776016215789e-06, -5.592170294503579e-06, 3.067596228661406e-06, 3.217339402673676e-06, 1.756470404779592e-02, 1.961503811266022e-02, -2.043992466608882e-04, -2.068359670268033e-04, -1.780422619494981e-04, -1.615434833223871e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
