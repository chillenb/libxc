
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_gas22_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_gas22", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.011958371799670e+01, -2.011969109747949e+01, -2.012020137223352e+01, -2.011860850059169e+01, -2.011943833124145e+01, -2.011943833124145e+01, -2.770918583852875e+00, -2.770985602637740e+00, -2.772930846437315e+00, -2.773595325768310e+00, -2.772730010983943e+00, -2.772730010983943e+00, -4.566761974360184e-01, -4.563566780095976e-01, -4.502793814044518e-01, -4.545564013698741e-01, -4.545642777652199e-01, -4.545642777652199e-01, -7.891560513324924e-02, -8.028119926502363e-02, -5.373245461397098e-01, -7.613515128829398e-02, -6.970178785485519e-02, -6.970178785485519e-02, -3.612314162606573e-02, -3.667579293738089e-02, -7.238735613530699e-02, -2.896832816136955e-02, -2.275634924023556e-02, -2.275634924023556e-02, -4.879681670460111e+00, -4.883130127351590e+00, -4.879892143654338e+00, -4.882933913853135e+00, -4.881401742254105e+00, -4.881401742254105e+00, -1.613347711031884e+00, -1.628948568198298e+00, -1.609125080328492e+00, -1.622959427117131e+00, -1.624155897364038e+00, -1.624155897364038e+00, -3.904138572853202e-01, -4.330580336928985e-01, -3.553166822792500e-01, -3.696207701130346e-01, -3.974941658178822e-01, -3.974941658178822e-01, -7.891637815807408e-02, -9.026607762059773e-02, -7.855162535508731e-02, -1.532010644914546e+00, -6.674506578895696e-02, -6.674506578895692e-02, -2.504399705497656e-02, -2.814963721143749e-02, -2.013403174022163e-02, -7.546790302323855e-02, -2.176957218140487e-02, -2.176957218140485e-02, -3.489824491643366e-01, -3.785973339507036e-01, -3.733222194685424e-01, -3.653166411393752e-01, -3.698186523093893e-01, -3.698186523093893e-01, -3.386821469145760e-01, -3.204221090595023e-01, -3.289682743887191e-01, -3.405330827915632e-01, -3.334253909147128e-01, -3.334253909147128e-01, -4.592057764368336e-01, -1.151965477977567e-01, -1.449339410841650e-01, -2.033465238846191e-01, -1.720352299606837e-01, -1.720352299606837e-01, -2.882144565412348e-01, -7.207572379001166e-02, -7.692110940494411e-02, -1.880239894341978e-01, -6.974448019996091e-02, -6.974448019996086e-02, -4.304422401389927e-02, -1.311917467628737e-02, -1.966813463897647e-02, -6.895720375425290e-02, -2.036200941081343e-02, -2.036200941081340e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_gas22_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_gas22", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.854889329716392e+01, -2.854934247529556e+01, -2.854910099087032e+01, -2.854949614689420e+01, -2.854971591264964e+01, -2.855037518643518e+01, -2.854733875287346e+01, -2.854738703270019e+01, -2.854899319284285e+01, -2.854855981011848e+01, -2.854899319284285e+01, -2.854855981011848e+01, -3.851910668593106e+00, -3.852037693125963e+00, -3.852129498415451e+00, -3.852216353969240e+00, -3.856895040714828e+00, -3.857780909331223e+00, -3.854075113649380e+00, -3.854465843156903e+00, -3.851232652617814e+00, -3.858256683562078e+00, -3.851232652617814e+00, -3.858256683562078e+00, -5.771604344355448e-01, -5.835657806481281e-01, -5.749551461912616e-01, -5.824494860314658e-01, -5.419512199609769e-01, -5.372027310998233e-01, -5.495265181474500e-01, -5.531381530599692e-01, -5.866991585279510e-01, -5.287552890372176e-01, -5.866991585279510e-01, -5.287552890372176e-01, -1.119632544291825e-01, -1.056886727849523e-01, -1.149277764958821e-01, -1.092960216939400e-01, -6.140579049274670e-01, -6.522742829307870e-01, -6.482767172142077e-02, -5.320251969131132e-02, -3.465622672648721e-02, -2.470914059684727e-01, -3.465622672648714e-02, -2.470914059684724e-01, -2.642261352080889e-02, -2.550184749335678e-02, -2.706758861520783e-02, -2.609102087415305e-02, -5.379911282698865e-02, -5.191274983534517e-02, -1.942427862271421e-02, -1.940090268655112e-02, -1.620341876193655e-02, -3.003948618174514e-02, -1.620341876193677e-02, -3.003948618174495e-02, -6.951479023693212e+00, -6.949969114212256e+00, -6.956673533457695e+00, -6.955020871046016e+00, -6.951790839049705e+00, -6.950175398248378e+00, -6.956269483736653e+00, -6.954740177058357e+00, -6.954117791222179e+00, -6.952514674318518e+00, -6.954117791222179e+00, -6.952514674318518e+00, -1.949405206129028e+00, -1.950555112222484e+00, -1.977277272681432e+00, -1.977514552268020e+00, -1.922190522790407e+00, -1.931513420504982e+00, -1.946451136334208e+00, -1.955943954249829e+00, -1.986020380183394e+00, -1.967273910785692e+00, -1.986020380183394e+00, -1.967273910785692e+00, -5.270399488219570e-01, -5.234874930452436e-01, -6.357485819852141e-01, -6.337020400874300e-01, -4.767441006344936e-01, -4.812189379762801e-01, -5.222797084687821e-01, -5.238502064368984e-01, -5.481109102625485e-01, -5.343905165242142e-01, -5.481109102625487e-01, -5.343905165242144e-01, -4.768634517209210e-02, -4.600579851222787e-02, -9.587673720910563e-02, -9.474025385402238e-02, -5.152478039397291e-02, -4.245607294079087e-02, -2.296913799587701e+00, -2.295942373613955e+00, -6.299694434353977e-02, -2.316639220872476e-02, -6.299694434353953e-02, -2.316639220872491e-02, -1.734624933216097e-02, -1.568685945837510e-02, -1.941222489887232e-02, -1.852344473618045e-02, -1.410438590653161e-02, -1.420318305097855e-02, -5.011510402641499e-02, -4.674466607142308e-02, -1.838650678346051e-02, -1.486643129690783e-02, -1.838650678346068e-02, -1.486643129690789e-02, -4.335742231774599e-01, -4.334709532198678e-01, -5.209986505324820e-01, -5.198528126634067e-01, -4.923593580535796e-01, -4.912808607867615e-01, -4.655876672328204e-01, -4.651310755826844e-01, -4.791221897854029e-01, -4.783428451498188e-01, -4.791221897854029e-01, -4.783428451498190e-01, -4.234309714998294e-01, -4.236097802294290e-01, -3.943393869388908e-01, -3.952915846182326e-01, -4.244257040338972e-01, -4.251874250150048e-01, -4.952264646702767e-01, -4.959122403062236e-01, -4.546532808457393e-01, -4.554540971900564e-01, -4.546532808457393e-01, -4.554540971900564e-01, -6.709575725179268e-01, -6.672877686906566e-01, -1.469413871591155e-01, -1.457403601556401e-01, -1.924336257317203e-01, -1.925768835468792e-01, -2.648753288508096e-01, -2.664587166698975e-01, -2.271393521085704e-01, -2.272420197298455e-01, -2.271393521085707e-01, -2.272420197298458e-01, -3.662134125361992e-01, -3.661951782653503e-01, -5.234474779618855e-02, -5.237959049677142e-02, -5.440180822868197e-02, -5.269612253138335e-02, -2.468462028315390e-01, -2.343153745231882e-01, -4.776328359118004e-02, -3.066957677099092e-02, -4.776328359118089e-02, -3.066957677099029e-02, -3.200139120540574e-02, -3.171755799714970e-02, -6.631773143502781e-03, -9.262684221173241e-03, -1.290825885263582e-02, -1.263133073966832e-02, -4.063582117890406e-02, -3.513076803349095e-02, -2.005649468497052e-02, -1.262327063903644e-02, -2.005649468497035e-02, -1.262327063903646e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_gas22_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_gas22", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.353567704829955e-08, 0.000000000000000e+00, -1.353579391111498e-08, -1.353553348682155e-08, 0.000000000000000e+00, -1.353568396843150e-08, -1.353496907432654e-08, 0.000000000000000e+00, -1.353493528175851e-08, -1.353666554539322e-08, 0.000000000000000e+00, -1.353701303421457e-08, -1.353565147494467e-08, 0.000000000000000e+00, -1.353607592400200e-08, -1.353565147494467e-08, 0.000000000000000e+00, -1.353607592400200e-08, -1.614853924429539e-05, 0.000000000000000e+00, -1.614976271355023e-05, -1.614869223322698e-05, 0.000000000000000e+00, -1.615006933989168e-05, -1.615475243960277e-05, 0.000000000000000e+00, -1.615367787656151e-05, -1.614630148447588e-05, 0.000000000000000e+00, -1.614585889637847e-05, -1.616538655000581e-05, 0.000000000000000e+00, -1.614202951506265e-05, -1.616538655000581e-05, 0.000000000000000e+00, -1.614202951506265e-05, -4.966002182876228e-03, 0.000000000000000e+00, -4.903823597356641e-03, -4.994943512697243e-03, 0.000000000000000e+00, -4.928557642079791e-03, -5.501086820025763e-03, 0.000000000000000e+00, -5.410513142974232e-03, -5.420745385959231e-03, 0.000000000000000e+00, -5.421218829005963e-03, -5.400597012211320e-03, 0.000000000000000e+00, -4.832879964431959e-03, -5.400597012211320e-03, 0.000000000000000e+00, -4.832879964431959e-03, 5.319421415631823e-01, 0.000000000000000e+00, 3.051262580860699e-01, 5.071720762105916e-01, 0.000000000000000e+00, 2.651880537744443e-01, -3.235340924456558e-03, 0.000000000000000e+00, -3.093295845176653e-03, 1.043596272565440e+00, 0.000000000000000e+00, 9.000986094949005e-01, -2.948372060864743e-01, 0.000000000000000e+00, 1.638037590710601e+01, -2.948372060864743e-01, 0.000000000000000e+00, 1.638037590710603e+01, -7.597033566683481e+03, 0.000000000000000e+00, -4.673602162191288e+03, -6.921093260656720e+03, 0.000000000000000e+00, -3.990947199996649e+03, -2.765913043241229e+01, 0.000000000000000e+00, -1.801806407647680e+01, -2.475380340060646e+04, 0.000000000000000e+00, -2.831527029623408e+04, -2.017624517305988e+03, 0.000000000000000e+00, -1.833985839987633e+05, -2.017624517306039e+03, 0.000000000000000e+00, -1.833985839987624e+05, -3.222768076820507e-06, 0.000000000000000e+00, -3.225353295155725e-06, -3.219609796891640e-06, 0.000000000000000e+00, -3.222058850134486e-06, -3.222670131208132e-06, 0.000000000000000e+00, -3.225158477034800e-06, -3.219789501382323e-06, 0.000000000000000e+00, -3.222341458923135e-06, -3.221150255555736e-06, 0.000000000000000e+00, -3.223667342492165e-06, -3.221150255555736e-06, 0.000000000000000e+00, -3.223667342492165e-06, -1.282595380509105e-04, 0.000000000000000e+00, -1.282743159168041e-04, -1.261101309833842e-04, 0.000000000000000e+00, -1.262135243292320e-04, -1.285268187719782e-04, 0.000000000000000e+00, -1.284270027267693e-04, -1.267545125157914e-04, 0.000000000000000e+00, -1.265870337302411e-04, -1.266142428901018e-04, 0.000000000000000e+00, -1.272870771063009e-04, -1.266142428901018e-04, 0.000000000000000e+00, -1.272870771063009e-04, -7.167453838392881e-03, 0.000000000000000e+00, -7.179502691799051e-03, 3.856069161676468e-03, 0.000000000000000e+00, 2.997942449805665e-03, -1.088999373237983e-02, 0.000000000000000e+00, -8.910855266153010e-03, 3.639030577125743e-03, 0.000000000000000e+00, 2.523824550995177e-03, -5.035666259774316e-03, 0.000000000000000e+00, -5.870772593657266e-03, -5.035666259774265e-03, 0.000000000000000e+00, -5.870772593657258e-03, 1.299716919066139e+00, 0.000000000000000e+00, 1.159740628848961e+00, 3.353736889153900e-01, 0.000000000000000e+00, 3.117304368075430e-01, 1.637649946740456e+00, 0.000000000000000e+00, 9.115595297359138e-01, -1.480965524463676e-04, 0.000000000000000e+00, -1.485151652063889e-04, 2.456374175522265e+00, 0.000000000000000e+00, 1.223416256053957e+00, 2.456374175522282e+00, 0.000000000000000e+00, 1.223416256053971e+00, -6.918688574065623e+04, 0.000000000000000e+00, -5.084994927393956e+04, -3.161271362886456e+04, 0.000000000000000e+00, -2.803313840789281e+04, -1.433205820615524e+05, 0.000000000000000e+00, -9.058107639100695e+04, -9.117376431899369e-01, 0.000000000000000e+00, -8.725457506211152e-01, -1.932770460906731e+05, 0.000000000000000e+00, -1.527819051429760e+04, -1.932770460906728e+05, 0.000000000000000e+00, -1.527819051429748e+04, -3.582584392235555e-02, 0.000000000000000e+00, -3.747613109113591e-02, -3.202221060115855e-03, 0.000000000000000e+00, -5.246755400051372e-03, -1.335433203429105e-02, 0.000000000000000e+00, -1.560984822733515e-02, -2.368285287525338e-02, 0.000000000000000e+00, -2.549732911089091e-02, -1.842578125827935e-02, 0.000000000000000e+00, -2.049154624509664e-02, -1.842578125827935e-02, 0.000000000000000e+00, -2.049154624509665e-02, -2.821815382270903e-02, 0.000000000000000e+00, -2.978663882046251e-02, -2.035520322610179e-02, 0.000000000000000e+00, -1.998475997596494e-02, -1.208513613217668e-02, 0.000000000000000e+00, -1.171201101818721e-02, 5.855373579674304e-03, 0.000000000000000e+00, 5.592812370206851e-03, -4.349662566284172e-03, 0.000000000000000e+00, -4.313465519355299e-03, -4.349662566284174e-03, 0.000000000000000e+00, -4.313465519355297e-03, 1.606822857888540e-03, 0.000000000000000e+00, 9.577569544864643e-04, 8.039465369123430e-02, 0.000000000000000e+00, 6.908757073969894e-02, -1.206779932687247e-02, 0.000000000000000e+00, -1.970352723579059e-02, -4.066172826606532e-02, 0.000000000000000e+00, -4.030711762079929e-02, -4.675990837956288e-02, 0.000000000000000e+00, -4.668807648321467e-02, -4.675990837956261e-02, 0.000000000000000e+00, -4.668807648321419e-02, -2.474501867876438e-02, 0.000000000000000e+00, -2.401012010604240e-02, -2.618328120900457e+01, 0.000000000000000e+00, -2.481154372912476e+01, -7.798389403803710e+00, 0.000000000000000e+00, -6.087276160514299e+00, -4.057442735330221e-02, 0.000000000000000e+00, -3.641100766633743e-02, 3.072859329403180e+00, 0.000000000000000e+00, 1.651949611529398e+00, 3.072859329403177e+00, 0.000000000000000e+00, 1.651949611529385e+00, -2.433775808957696e+03, 0.000000000000000e+00, -1.830562273883119e+03, -1.843467441247068e+06, 0.000000000000000e+00, -1.810107575352718e+06, -2.463794478661344e+05, 0.000000000000000e+00, -1.504678317986520e+05, 2.505896451896223e+00, 0.000000000000000e+00, 2.133914249692056e+00, -2.421862462168781e+05, 0.000000000000000e+00, -2.490297014201483e+04, -2.421862462168788e+05, 0.000000000000000e+00, -2.490297014201483e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_gas22_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_gas22", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_gas22_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_gas22", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.534955239466042e-03, 2.535375961623286e-03, 2.535008829772270e-03, 2.535415180768581e-03, 2.535156630944389e-03, 2.535631683968930e-03, 2.534551343454922e-03, 2.534864177316538e-03, 2.534985937312813e-03, 2.535155593349942e-03, 2.534985937312813e-03, 2.535155593349942e-03, 4.759700672854501e-03, 4.758730772696419e-03, 4.761242854466326e-03, 4.759839468800059e-03, 4.793444594656667e-03, 4.797808903989640e-03, 4.782300635603666e-03, 4.782325688340349e-03, 4.763161428158748e-03, 4.804134588639881e-03, 4.763161428158748e-03, 4.804134588639881e-03, 1.576006716120520e-03, 1.898863067762870e-03, 1.500336439280454e-03, 1.883881923951742e-03, 7.578118718052298e-04, 3.871450614283059e-04, 1.144102399795594e-03, 1.366320755184133e-03, 3.475619441331811e-03, -6.829075587342214e-04, 3.475619441331811e-03, -6.829075587342214e-04, -3.738113732064660e-02, -3.457064678224642e-02, -3.565715871724958e-02, -3.152520887796497e-02, -8.841046551565017e-04, 1.015524022329875e-04, -4.869963697076778e-02, -5.794103028730548e-02, -4.692945009634783e-02, -2.286608372087580e-02, -4.692945009634781e-02, -2.286608372087616e-02, -5.003063026823862e-04, -4.793396993177548e-04, -5.767336333536969e-04, -5.543462300374537e-04, -1.057387950974329e-02, -1.086402901115674e-02, -1.062620118410071e-04, -1.088698021960297e-04, -1.242051699598061e-04, -3.244290702547822e-04, -1.242051699599818e-04, -3.244290702540765e-04, 1.104939084661888e-02, 1.105360165633518e-02, 1.109429211786026e-02, 1.109660099809772e-02, 1.105271581885402e-02, 1.105538502108507e-02, 1.109090268440471e-02, 1.109474444655257e-02, 1.107188063140473e-02, 1.107515919928917e-02, 1.107188063140473e-02, 1.107515919928917e-02, 6.092954951856289e-03, 6.118829316083480e-03, 6.343858464476902e-03, 6.361994258290397e-03, 5.890878027111105e-03, 5.981169151306327e-03, 6.116858003766565e-03, 6.206876731385431e-03, 6.386902679488013e-03, 6.265785360633243e-03, 6.386902679488013e-03, 6.265785360633243e-03, -2.456317656637046e-03, -3.642124969801013e-03, 4.183172158133717e-03, 4.830071078942086e-03, 4.201321343713361e-03, -2.920432054984370e-03, 6.125470927525201e-04, -6.781335229996046e-03, -7.209246813475549e-03, -7.195959274883566e-04, -7.209246813475565e-03, -7.195959274883406e-04, -4.090157062470257e-02, -4.078479734488098e-02, -4.259874859360686e-02, -4.225476069985541e-02, -3.703387366161213e-02, -3.947669169539214e-02, 1.271617315278570e-02, 1.272646575555382e-02, -5.077988576809183e-02, -7.133815642634031e-02, -5.077988576809199e-02, -7.133815642634046e-02, -4.196823064964141e-05, -3.737787437500196e-05, -9.444955523118986e-05, -8.221383366728025e-05, -2.771551070047407e-04, -2.905111185932893e-04, -2.509187740133077e-02, -2.831628451646468e-02, -9.077123852736584e-05, -2.238662910554197e-04, -9.077123852715182e-05, -2.238662910554789e-04, -3.752871206929698e-01, -3.799469334829152e-01, -8.517939626665154e-02, -8.478152552891970e-02, -1.482027484833725e-01, -1.485146447412443e-01, -2.281248650300110e-01, -2.291967803002995e-01, -1.843717043161137e-01, -1.850416063454321e-01, -1.843717043161139e-01, -1.850416063454320e-01, -3.562995273669641e-01, -3.604840214185976e-01, -4.563429926172134e-03, -5.261229504375555e-03, -1.733315810783313e-02, -1.851290415234234e-02, -1.622325487062789e-02, -1.644500888349050e-02, -2.004828257477379e-02, -2.057109735063675e-02, -2.004828257477375e-02, -2.057109735063676e-02, 6.202283049677047e-03, 5.607607989238794e-03, -2.468499746699230e-02, -2.436861827860161e-02, -1.017499342845748e-02, -9.058099101685858e-03, -4.276744674285423e-03, -3.925537342075891e-03, -2.359026541219925e-03, -2.319618133532674e-03, -2.359026541219931e-03, -2.319618133532700e-03, 2.703109507882439e-04, -1.636894674064656e-03, -1.033847466637217e-02, -1.010199194656967e-02, -1.565459196049402e-02, -1.612451800735983e-02, -1.158478314002760e-02, -3.039728661406471e-02, -4.092030451870270e-02, -5.124013357243151e-02, -4.092030451870279e-02, -5.124013357243182e-02, -5.305716462533568e-04, -5.094282173063717e-04, -4.108495914249078e-06, -4.082025855036513e-06, -7.158285696158174e-05, -7.190802770076238e-05, -4.336404395649028e-02, -4.844768625134897e-02, -1.835423690087111e-04, -1.867999395576183e-04, -1.835423690085523e-04, -1.867999395578656e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
