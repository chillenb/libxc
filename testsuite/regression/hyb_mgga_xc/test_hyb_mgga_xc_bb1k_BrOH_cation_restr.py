
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_bb1k_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_bb1k", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.162057168965800e+01, -1.162060257384753e+01, -1.162075029322325e+01, -1.162029049989768e+01, -1.162052994238171e+01, -1.162052994238171e+01, -2.007280818307528e+00, -2.007264272723001e+00, -2.006862966540119e+00, -2.007197581259155e+00, -2.006963541617750e+00, -3.262139799001841e+75, -4.956941495087002e-01, -5.913822756065184e+120, -4.239751540666743e+77, -7.486048869627017e+103, -2.083733128602265e+77, -7.525291540905178e+103, -3.299020616869194e+47, -4.049662158687198e+105, -6.405440990390747e-01, -1.971146313413928e+113, -7.102068626446796e+105, -1.808916987453190e+120, -3.652185134238497e+87, -7.515991085448154e+102, -3.979737506764968e+112, -8.865714122965948e+117, -3.601877870549443e+138, -4.779942537427604e+93, -3.091131752171764e+81, -9.663299508111479e+117, -9.280806728112058e+98, -2.885572355132213e+00, -2.561120407835414e+108, -3.845021333941611e+84, -1.184764477469572e+00, -1.189309982971045e+00, -1.181728887609044e+00, -1.185587219706757e+00, -1.188752622325579e+00, -1.950975101160699e+76, -2.281405413411270e+87, -1.952838479997316e+106, -3.410870639533133e+87, -2.805993785947688e+106, -2.175188503977915e+87, -3.788446937404344e-01, -4.433667374468950e-01, -3.693485506608524e+98, -4.774011590682180e-01, -2.529490992359071e+30, -4.849719152702541e+79, -1.525663587521712e+123, -3.260581254364860e+01, -3.169705196219973e+84, -1.774268288094829e+142, -6.954995637784344e-01, -1.371505547712810e+01, -3.420206791742904e+84, -1.136556833685023e+116, -4.013197877816227e+110, -3.536684002196810e-01, -6.201121509875722e+101, -2.722766012612411e+79, -2.877958733007554e+118, -2.683453792637912e+111, -1.101638952968575e+78, -3.258370336501273e+111, -1.408745598520858e+97, -2.201367583127498e+120, -3.328873170269039e-01, -4.404485987460012e+120, -2.451866133917535e-01, -8.659647516042929e+109, -2.598721338666415e-01, -5.546010087436793e+85, -1.176145034609752e+97, -3.127269067675466e-01, -9.112665478619231e+126, -3.618542781002797e+126, -1.202101828765152e+124, -4.498316056197339e-01, -2.079607473811364e+125, -1.242495120170993e+128, -1.400289078876273e+134, -1.233888373199532e+27, -1.469735008503963e+90, -6.749482776664388e+115, -3.090424858780112e+129])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_bb1k_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_bb1k", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.539364210479858e+01, -1.539368563568541e+01, -1.539389206469223e+01, -1.539324419416656e+01, -1.539358183040679e+01, -1.539358183040679e+01, -2.511376086351417e+00, -2.511393447064965e+00, -2.511893911495773e+00, -2.511918134987414e+00, -2.511656063882705e+00, -2.404910198809817e+73, -4.654899524122775e-01, -2.745694653218307e+118, -3.015952502861048e+75, -4.022409528156421e+101, -1.487987578313808e+75, -4.043381224615283e+101, -3.697010981242660e+45, -2.130201745558514e+103, -5.015216092690933e-01, -9.678992949323458e+110, -3.724963328046551e+103, -8.388904698350469e+117, -2.263499973958372e+85, -4.000584483914929e+100, -1.956186347671299e+110, -4.134170269699408e+115, -1.440846124768124e+136, -2.775744726390089e+91, -2.121321655374083e+79, -4.623315968039403e+115, -5.271940787590694e+96, -3.792760274382331e+00, -1.331061023566485e+106, -2.544874543416501e+82, -1.410495828222423e+00, -1.422591135720633e+00, -1.401504926590187e+00, -1.412284115972457e+00, -1.421524394969423e+00, -1.419692166820272e+74, -1.448079575465520e+85, -1.026071902744786e+104, -2.160029216260266e+85, -1.471522997359099e+104, -1.381080979627470e+85, -4.515321455094333e-01, 1.010051884415693e-01, -2.076044325133030e+96, 1.239317137095767e-01, -4.395712801518423e+28, -3.332846125562479e+77, -6.905204370128083e+120, 1.242448903781029e+01, -2.025760917784803e+82, -6.909955368119727e+139, 2.510908984355809e-01, 5.265259956023239e+00, -2.184192651936983e+82, -5.482459827282731e+113, -2.028284133920847e+108, -4.559926232444453e-01, -3.396337958503448e+99, -1.893516849544910e+77, -1.360893923839606e+116, -1.346381630150660e+109, -7.784913285884747e+75, -1.632982440203313e+109, -8.068602809607216e+94, -1.024738295173626e+118, -4.041870428513024e-01, -2.047022050858835e+118, -1.287766510249941e-01, -4.388852059868720e+107, -2.558965646610924e-01, -3.572411183872221e+83, -6.724860169333496e+94, -3.383037626974685e-01, -3.990452955586514e+124, -1.591033473741974e+124, -5.423688068649934e+121, 1.223213241092363e-01, -9.245235891948235e+122, -5.370421089391994e+125, -5.750074849922632e+131, -2.164609020578863e+25, -8.959312671407651e+87, -3.200087316043497e+113, -1.317391714509952e+127])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_bb1k_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_bb1k", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.255290706083783e-09, -5.255244341517087e-09, -5.255016257301560e-09, -5.255707251478976e-09, -5.255348286169988e-09, -5.255348286169988e-09, -6.127857702130721e-07, -6.143575960403877e-07, -6.557213252969542e-07, -6.393235082475514e-07, -6.407527944766546e-07, 3.620642438174510e-07, 2.644843212987158e-02, 3.966158671824490e-04, 3.821181409611752e-04, 3.966439612027352e-04, 3.930690747208951e-04, 3.930690747208951e-04, 1.180368511323550e-01, 1.176378204074374e-01, 2.283142836901500e-02, 1.126006342458882e-01, 1.220463489346067e-01, 1.220463489346067e-01, 7.727653328679283e-01, 8.003205044098904e-01, 2.716932451051468e-01, 5.996547861649331e-01, 8.171780932607046e-01, 8.171780932607046e-01, 1.451327220801815e-07, 1.455762837478288e-07, 1.451591950777881e-07, -1.202263704511063e-06, 1.453542469680726e-07, 1.453542469680726e-07, 5.491626676105670e-05, 4.830253585978738e-05, 6.040930320237286e-05, 5.403764418476340e-05, 4.874058360368804e-05, 4.552639690363610e-06, 2.272907231551215e-03, 2.386985072848579e-03, 2.450167966159055e-03, 2.751580778736073e-03, 2.282464392218929e-03, 1.007947148489022e-02, 2.328189639305946e+03, 6.209014479752905e-02, 3.779072677002131e+03, 1.015413298488710e-05, 1.831322939245599e-01, 1.831322939245600e-01, 8.972076429173316e+12, 5.311353292625086e-01, 4.387742518491287e+00, 4.280382749487099e+04, 1.742416635573785e+12, 1.659498907763941e+00, 6.169193987225028e-03, 5.350086333497048e-03, -1.892414804280720e-04, 5.850102463071875e-03, 5.728799655402441e-03, 5.728799655402441e-03, 6.835563948006674e-03, 4.321760872261887e-03, 4.686532585223618e-03, 5.297848224348901e-03, 4.947172902477486e-03, 1.338771095262776e-02, 1.700836456513569e-03, 8.185083392619447e+00, 2.536061883877486e-02, 3.491309097233486e-01, 1.986560270979401e-02, 1.986560270979402e-02, 7.425164693557074e-02, 2.798194700446983e-01, 2.203269890040014e-01, 2.136558295917660e-02, 7.814969934686408e+03, 2.774428359704279e-01, 3.531878581019126e-01, 7.052281159479137e-01, 1.946034217036985e+00, 3.129585872780374e-01, 2.379988096489895e+00, 2.379988096489904e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_bb1k_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_bb1k", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-3.917476094290055e-05, -3.917456290562790e-05, -3.917362137932091e-05, -3.917656909685308e-05, -3.917503319995349e-05, -3.917503319995349e-05, -9.886250054216535e-04, -9.886212963460517e-04, -9.884934715953247e-04, -9.883894443422218e-04, -9.885791352840607e-04, -1.092890167284502e-04, -1.592853529406604e-02, -5.685700042247030e-04, -4.648129682438896e-04, -5.139818280660836e-04, -5.022363367313802e-04, -5.022363367313802e-04, -2.272476539174919e-03, -2.438635333769843e-03, -1.238371199050499e-02, -6.228892557979323e-04, -1.124305293517300e-03, -1.124305293517299e-03, -3.204729070861083e-07, -3.855175240946730e-07, -1.991413646192578e-05, -4.988686685971546e-08, -1.326836629820020e-07, -1.326836629820020e-07, -2.260367971782170e-04, -2.271288073430429e-04, -2.261000879123792e-04, -4.880334250829034e-04, -2.265829779956127e-04, -2.265829779956127e-04, -2.661303104094819e-03, -2.628685277403782e-03, -2.685517452651573e-03, -2.656249081361493e-03, -2.631732964054590e-03, -2.290778277697597e-04, -3.980651631573461e-03, -6.402809383628741e-03, -2.954762597660942e-03, -4.309697953295984e-03, -4.345624039846454e-03, -1.929735692306609e-02, -3.460331214744272e-01, -9.414838695722697e-04, -3.870885540310496e-01, -6.625392309547946e-04, -5.032062162522918e-04, -5.032062162522921e-04, -3.156062561985356e+01, -4.134727186741635e-08, -1.556221706271906e-07, -6.787815240163054e-01, -2.642940795733916e+01, -1.015876081719198e-07, -1.552468435401276e-02, -1.269737312846192e-02, -1.976885817934797e-02, -1.441831558918538e-02, -1.399960176047655e-02, -1.399960176047655e-02, -1.574997737406090e-02, -4.123336256814151e-03, -5.890729233565684e-03, -8.626635291583489e-03, -7.072833338322452e-03, -2.357026059631729e-02, -5.028715317686327e-03, -9.384751940055865e-02, -2.033973732592932e-03, -4.576736496754310e-02, -2.971284313366229e-03, -2.971284313366229e-03, -3.001494066796270e-02, -1.798465892885614e-05, -3.609275702144947e-05, -5.873978700190716e-03, -4.830320359587126e-01, -1.992430445642115e-04, -4.006917532914426e-07, -1.135208051828429e-09, -2.781011732063595e-08, -1.840090343808162e-04, -1.160538313713013e-07, -1.160538313713013e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
