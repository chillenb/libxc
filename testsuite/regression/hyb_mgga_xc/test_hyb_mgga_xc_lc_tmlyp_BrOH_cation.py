
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_lc_tmlyp_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_lc_tmlyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.086494151495906e+01, -2.086503436699950e+01, -2.086545135336692e+01, 4.380209341068285e+146, 4.232809311638523e+146, 3.970202114186871e+199, 8.146817169307940e+88, 4.145499146864441e+234, 3.171819697328635e+215, 2.241875607291648e+220, 1.845857751653113e+201, 2.334943128803448e+172, -3.984596877612279e-01, 5.186688292683512e+158, 3.166722668860903e+178, 1.393559539803658e+216, -3.703058018052068e-01, 3.919999379923146e+245, 1.551234197823637e+278, 5.773912125653260e+162, 1.135634929702086e+235, 2.523521333356319e+245, 1.896318937384275e+231, 1.985567487740815e+202, 7.816159068550308e+246, 1.099689950434429e+198, 1.002112890880401e+258, 1.937537381142484e+243, 1.454226549200176e+246, 7.878605795748416e+245, 9.964604945164594e+242, 1.214371190756641e+238, 9.969217410370327e+242, 8.779066480381270e+213, 4.276042146136147e+159, 1.755982846931118e+222, 1.722784429286187e+246, 1.024624512037215e+163, 1.963582036223546e+235, 1.116230821071183e+174, 2.790095693543843e+241, 1.227895332766029e+227, 3.535897843588213e+178, 3.419235159666157e+245, 5.918380970335170e+240, 1.447507753787246e+212, 1.510063692736207e+255, 1.599739137486208e+217, 5.362837418177986e+260, 4.206389856010795e+172, 1.419570010516259e+237, 2.507697875830492e+241, 4.101196869225589e+260, 1.990152590368350e+217, 3.042352306604889e+164, 2.724566504460954e+218, 9.342936894247769e+225, 6.000973788514938e+170, 3.107707508518107e+197, 1.521874394559345e+215, 7.530324983099990e+240, 4.882120942071515e+250, -4.886584241909467e-01, 2.309845951384813e+178, -4.898218516276359e-01, 1.830685900566583e+207, 4.907217791133875e+221, 2.328881846264685e+222, 1.073100006020975e+179, 6.916967920132876e+226, 5.316613294290610e+221, 5.132420222903252e+215, 2.929986524198245e+240, 1.446093020160412e+228, 3.710824030893041e+243, 6.208362268979490e+194, 1.705498210669456e+180, 4.450598166046290e+228, 3.508098714427874e+174, -5.356438628852958e-03, 3.399303844109159e+185, 2.622803385287167e+252, 5.782628336770332e+256, 7.915964299076843e+251, -1.457868236159177e-03, 5.227787800521033e+165, -3.330949334784001e-04, -1.176212759804809e-02, 1.424418027869218e+229, 8.085999261179991e+185]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_lc_tmlyp_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_lc_tmlyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.970052616679909e+01, -2.970039745278833e+01, -2.970060905647528e+01, -2.970045780927781e+01, -2.970089880414663e+01, -2.970086541756750e+01, 3.259421536200493e+147, -4.721842680966957e+147, 2.440839718161449e+147, -3.859447587892142e+147, -6.626342467699971e+199, -6.628158729749734e+199, -6.249289803738915e+89, 3.482983730009325e+89, 2.586090128828499e+235, -3.972908249485196e+235, 1.979739002305437e+216, -3.040568106061813e+216, -1.719647576877046e+221, 9.583016640859042e+220, 7.913374716240271e+201, -1.417007552170068e+202, 1.001013209321481e+173, -1.792463175691059e+173, -8.598779936855875e-01, -8.620568114195474e-01, 1.893806947004140e+159, -3.517445437686863e+159, -3.159773986965887e+178, -7.204525395311153e+178, -9.165701208415291e+216, 4.678934907441553e+216, -8.646231270041476e-01, -8.219525035638181e-01, 6.879012635942618e+245, -2.183358061186301e+246, 2.716299671446988e+278, -6.217694289680488e+278, 1.063127545027437e+163, -2.348207492228402e+163, -7.121581925304787e+235, 3.012349930393954e+235, 2.935426274060893e+245, -8.448581378846167e+245, -1.586693633307846e+231, -4.822983396413426e+231, -1.488171086516445e+202, -6.822738572567045e+202, 7.506906155767165e+247, 7.347768955624132e+247, 1.010798690221583e+199, 9.576516274559612e+198, 7.477517605208433e+257, -1.473915211715464e+257, 3.413317528365942e+244, 3.420871252882743e+244, 1.890941711285281e+247, 2.546858164736876e+247, 1.041759023351460e+247, 1.318898589770947e+247, 6.079753795978796e+243, -9.419038364324234e+243, 8.065383445242394e+238, -1.213555706857235e+239, 6.621194716779246e+243, -9.962504919643238e+243, -7.170140394754944e+214, 4.201876960883311e+214, 2.840028453618815e+160, -4.273197699228868e+160, -1.761331311346425e+223, 1.174856512816477e+223, 9.349385331037141e+246, -1.509106825713418e+247, -9.004998695411829e+163, 5.596338346021642e+163, 1.089413903043655e+236, -1.736830895666422e+236, -6.509513725013986e+174, 2.767260285428675e+174, -2.514870935014965e+242, 1.610268528834749e+242, -1.106771459760073e+228, 7.086642998057219e+227, -1.638419719374362e+179, 5.024481153591113e+178, 1.159317417424987e+246, -2.245942945911692e+246, -3.348311780653326e+241, 1.275759139120642e+241, 6.381069897401000e+212, -1.024461551797418e+213, -1.197066442574232e+256, 8.533150596597024e+255, 1.848061588521841e+217, -7.634989105339044e+217, 4.637378425833289e+260, -1.405335961238594e+261, 5.811881783618490e+172, -1.628959539379715e+173, -3.405803430877329e+237, 7.838023938717739e+236, 1.346001346104930e+242, -2.183492528040066e+242, -1.161410810517857e+261, 2.411997047075200e+260, 2.569694817497448e+217, -6.006700331390849e+217, 7.120715786386850e+165, 7.087375650313839e+165, 4.928422336395363e+219, 4.922726074335847e+219, 2.267275733340172e+227, 2.247343528510816e+227, -6.607001208519264e+170, 1.002847739752590e+170, 6.585463304359374e+198, 5.982750412602746e+198, 3.231642925076104e+216, 2.919924738378478e+216, 2.527794141632193e+241, -4.872749806794965e+241, -3.076521543574071e+251, 1.510055492444094e+251, -7.011411340242489e-01, -7.037297238088259e-01, 3.302365691964089e+178, -1.070407583804788e+179, -7.016909099686067e-01, -7.042728193574863e-01, 6.135988765836273e+207, -1.183496188169388e+208, 1.611470293280537e+222, -3.139564167553967e+222, -1.381684268013760e+223, 6.467994899526090e+222, -4.761946887156362e+179, 1.303736404319298e+179, 2.191379856218788e+227, -4.331423323537088e+227, 1.664895286860200e+222, -3.305111122758172e+222, -3.122293338223048e+216, 1.494139601613022e+216, -1.940464375370256e+241, 9.979268803435992e+240, -6.196292001840715e+228, 2.229490118220779e+228, 7.515543974470368e+243, -1.767036804812744e+244, 4.658911940022430e+194, -2.328545572788729e+195, 3.524880913198607e+180, -8.472761586867210e+180, -1.583480439823044e+229, 2.679265386598783e+228, -1.484651428956877e+175, 3.656413396386230e+174, -7.785909905988549e-03, -7.579438028568089e-03, -2.400382000415274e+185, 1.095958668923445e+185, 6.680881418514138e+252, -1.403172657411357e+253, -1.212344904928723e+257, 3.088339951133555e+256, 4.729505449164401e+250, -1.114535405030187e+252, -2.105304149049442e-03, -1.794475021813178e-03, 3.768092167427093e+167, 3.779132299797839e+167, -5.111049894913297e-04, -3.872770515701295e-04, -2.050423559669163e-02, -2.013120682509800e-02, 3.236540284770329e+230, 2.985864160155668e+230, 1.837177398701155e+187, 1.697418359372339e+187]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_lc_tmlyp_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_lc_tmlyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.972189445717029e-08, 1.463652377038497e-11, -1.972052265976212e-08, -1.972142395256101e-08, 1.463631512328463e-11, -1.972018062310696e-08, -1.971994689406679e-08, 1.463532316351641e-11, -1.971805992296249e-08, -1.972525292977910e-08, 1.463842899785011e-11, -1.522933766231579e-08, -1.972161068229080e-08, 1.463681083685537e-11, -1.522840806329085e-08, -1.522754886776027e-08, 1.463681083685537e-11, -1.522840806329085e-08, -1.696537273721533e-05, 1.902747638536065e-07, -4.392911795693643e-05, -1.696705063144299e-05, 1.902725761814505e-07, -1.696582161471532e-05, -1.699973201005402e-05, 1.901971754504621e-07, -1.700499551762633e-05, -1.698215460702020e-05, 1.901358235030523e-07, -1.698133468176346e-05, -1.697137620389475e-05, 1.902491360705296e-07, -1.701055393888360e-05, -4.396610217722992e-05, 1.902491360705296e-07, -1.701055393888360e-05, -4.079882925661111e-02, 1.144533678933034e-03, -3.940076735920611e-02, -4.128187704280553e-02, 1.151156568500561e-03, -7.311459814631958e-03, -7.392710387765714e-03, 1.320750241138922e-03, -7.399699743174939e-03, -7.437104392333066e-03, 1.265386257803329e-03, -4.539813541787172e-02, -3.816293723951474e-02, 1.376562597771172e-03, -5.908800840277222e-02, -7.517521876995119e-03, 1.376562597771172e-03, -7.344528457448054e-03, -1.439886744095015e+00, 6.012876550391961e-01, -3.840483716549293e-01, -1.374321456048929e+00, 5.680272535784819e-01, -3.894898263525267e-01, -2.803041543447073e-03, 5.322727974273029e-04, -3.122004944997749e-02, 6.267598197914337e-03, 1.675901373768304e+00, -1.042864595769991e-01, -7.155752161867556e-01, 2.382014110698246e+00, 4.146994260504502e-01, -7.155752161867548e-01, 2.382014110698246e+00, -6.079256333950514e+00, -7.211080595116247e+00, 1.111914508308031e-07, -7.180938175935823e+00, -8.717829944966276e+00, 4.562559950974850e-07, -7.154914890933432e+00, -8.072843199292912e-01, 1.838627425311693e+01, 4.772648806170777e+00, -7.386770574667799e+00, 4.136895542502456e-17, -7.391901843745901e+00, -7.260049284597454e+00, 1.070835888305008e-12, -7.453572310217754e+00, -7.260049284597454e+00, 1.070835888305008e-12, -7.453572310217744e+00, -4.329299739764126e-06, 2.233703107768369e-08, -4.333248010747640e-06, -4.326570899007959e-06, 2.231537777319893e-08, -4.330604898169777e-06, -4.329140570883539e-06, 2.233595490630417e-08, -4.333148931604290e-06, -4.326795464113397e-06, 2.231683364972891e-08, -4.330751286432579e-06, -4.982970682487809e-06, 2.232609670798167e-08, -4.331925455213192e-06, -4.327914913241597e-06, 2.232609670798167e-08, -4.987733545139365e-06, -1.521522225307259e-04, 4.104557134069705e-06, -1.524422284027882e-04, -1.503473477532126e-04, 3.949027730077658e-06, -1.506625192668777e-04, -1.534085089250108e-04, 4.223201907834492e-06, -1.534724057342855e-04, -1.519128722048585e-04, 4.080707689470805e-06, -1.519342954963199e-04, -1.503068099749773e-04, 3.966397450084659e-06, -4.650467617561070e-04, -1.503068099749773e-04, 3.966397450084659e-06, -1.512277766481817e-04, -1.844200165223230e-02, 2.253646609880290e-03, -2.906162617375319e-02, -1.458103841610476e-02, 1.482953633834817e-03, -1.457306804213445e-02, -2.305883029669314e-02, 3.393155540240489e-03, -2.224668789712057e-02, -2.200757758921279e-02, 2.786872153422916e-03, -2.073231930952951e-02, -1.687081699271001e-02, 2.171399762139616e-03, -2.928667226258151e-02, -1.687081699271000e-02, 2.171399762139616e-03, -1.888730297440385e-02, 1.396000339504873e+00, 5.364331359216309e+00, 1.266298990569545e+00, -2.225909760376079e+00, 5.928062603673171e-01, -2.327270150095622e-01, 2.269625235134509e+00, 6.670630325612285e+00, 1.401487832411236e+00, -2.105216373765305e-04, 4.550774239056777e-06, -2.108791429928248e-04, 7.284043394592927e-01, 3.362374819306393e+00, 1.062789191715525e-01, 7.284043394592923e-01, 3.362374819306393e+00, 1.062789191715527e-01, -1.192156026620837e+01, 5.421496698436063e-24, -7.436036867738116e+00, -7.395531057117356e+00, 1.228758886113335e-17, -7.386429962278643e+00, -7.503993327714870e+00, 5.656440620065503e-25, -7.496584682477881e+00, 5.303153482348072e+00, 1.504669301565768e+01, -6.441678768958639e-01, -7.467292965699112e+00, 9.610322787727072e-20, -7.430051488295963e+00, -7.467292965699117e+00, 9.610322787727070e-20, -7.430051488295968e+00, -1.708442689854633e-02, 2.199677179191681e-03, -1.688834470442106e-02, -1.867040929911231e-02, 2.264286130145305e-03, -1.845724329265197e-02, -1.743599191625040e-02, 2.241303100651475e-03, -1.723041430831929e-02, -1.692091071021088e-02, 2.222568983976134e-03, -1.752408297767690e-02, -1.717777982992043e-02, 2.231922961512953e-03, -1.698246145503840e-02, -1.717777982992043e-02, 2.231922961512953e-03, -1.775545515484380e-02, -1.895392770788486e-02, 2.525278278664052e-03, -1.875751308243160e-02, -3.314336153652596e-02, 5.397863529116129e-03, -5.690862249214763e-02, -3.004713101012608e-02, 4.298036410666330e-03, -4.055399820312871e-02, -2.643988413439579e-02, 3.458400931093935e-03, -2.621292203531733e-02, -2.836846748817455e-02, 3.860241852276062e-03, -2.813064962215653e-02, -2.836846748817454e-02, 3.860241852276062e-03, -3.451538440772338e-02, -1.220774220948195e-02, 1.166454564355177e-03, -1.524057448003727e-02, -2.055060419157734e-01, 2.273047300256539e-01, -2.086454366169758e-01, -6.777938517019615e-01, 1.027440095908986e-01, -1.616345334291958e-01, -2.156375995908412e-01, 2.883676467546989e-02, -9.151620510832539e-02, -1.271146904011900e-01, 5.500747727544229e-02, -1.275308513136890e-01, -1.271146904011901e-01, 5.500747727544231e-02, -3.689383293955449e-01, -4.153991542690966e-02, 8.100714365057125e-03, -4.144541595467740e-02, -1.528721481684858e+00, 1.766533536733120e+01, -1.770328737970196e+00, 7.018359198834716e+00, 1.878803243082290e+01, 6.077384474378601e+00, -1.109523374891457e-01, 3.428914672188251e-02, -1.128883565554566e-01, 3.508784913129079e+00, 9.701438036301546e+00, 2.279393176816757e+00, 3.508784913129092e+00, 9.701438036301546e+00, 2.279393176816756e+00, -1.242090578447294e+01, 3.417478728614279e-04, -1.250182843424576e+01, -7.581159279452343e+00, 2.850114531961813e-85, -7.580993663719227e+00, -6.209230949045266e+00, 1.662312648545182e-36, -6.052460849536426e+00, -8.399343985069931e-01, 1.102889579754806e+01, -8.200476921712943e-01, -7.497284529336265e+00, 8.178814636871498e-22, -7.450368582598326e+00, -7.497284529336259e+00, 8.178814636871070e-22, -5.349828195193533e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_lc_tmlyp_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_lc_tmlyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.084680954833184e-03, 1.084682351027265e-03, 1.084677451954738e-03, 1.084679806293401e-03, 1.084665554410094e-03, 1.084662951545984e-03, 1.084705131547553e-03, 7.900722003833660e-04, 1.084678900549587e-03, 7.900947872940271e-04, 7.900697000810169e-04, 7.900947872940271e-04, 3.392869859696301e-03, 6.615328632158526e-03, 3.393303488033518e-03, 3.392838633592551e-03, 3.401754174795952e-03, 3.403232535797194e-03, 3.398396575435296e-03, 3.398361019931163e-03, 3.392441715240445e-03, 3.405920943881501e-03, 6.616330329771530e-03, 3.405920943881501e-03, 2.944641689062349e-02, 2.936372696008542e-02, 2.947897363354130e-02, 1.124404621631319e-02, 1.060278403437486e-02, 1.053358342677787e-02, 1.083313885581405e-02, 2.979530588045907e-02, 2.920404821631735e-02, 3.057112775483170e-02, 1.129771740642920e-02, 1.025651777091592e-02, 2.878865219346195e-02, 1.517752788134297e-02, 2.920519561677800e-02, 1.565817573604677e-02, 6.945003682200576e-03, 2.589276380356360e-02, 8.316931857116218e-03, 8.864380792610616e-03, 1.430676253133299e-02, 4.585464170848256e-03, 1.430676253133297e-02, 1.045232595029871e-02, 3.515485007271419e-06, 4.204204515975978e-06, 4.221339054051047e-06, 4.942642499284255e-06, 6.866093181475384e-04, 5.627612136478654e-04, 7.780566686331514e-07, 7.402247939209004e-07, 2.509025714900068e-06, 4.723076715745474e-07, 2.509025714900068e-06, 4.723076715745470e-07, 3.508665691476454e-03, 3.509535884960531e-03, 3.513517630131820e-03, 3.514226679567109e-03, 3.509009588926640e-03, 3.509750840198064e-03, 3.513169355050251e-03, 3.514008737755721e-03, 4.435049578573361e-03, 3.511881861610457e-03, 3.511094130723970e-03, 4.436124645959797e-03, 5.450209971869326e-03, 5.460815862599941e-03, 5.512962696673493e-03, 5.521581323996116e-03, 5.390592048702708e-03, 5.417990112977356e-03, 5.447311619569309e-03, 5.474975318076808e-03, 5.530131109297854e-03, 1.153414096088818e-02, 5.530131109297854e-03, 5.500116252279587e-03, 2.053438326861336e-02, 3.221275846867644e-02, 2.293657741466587e-02, 2.313585144547229e-02, 1.885277611670529e-02, 1.973502895842713e-02, 2.103063097506182e-02, 2.149534997623278e-02, 2.110161973329565e-02, 3.240129630322401e-02, 2.110161973329565e-02, 2.095002751951234e-02, 4.371348275794458e-03, 4.446994052987141e-03, 2.942144712750078e-02, 1.197426151625171e-02, 3.607096140480984e-03, 4.035965220407368e-03, 7.699837933499458e-03, 7.705013277963326e-03, 5.920712346157746e-03, 7.010055216773113e-03, 5.920712346157746e-03, 7.010055216773115e-03, 3.369696417552289e-07, 3.705673006685555e-07, 6.936919354183064e-07, 7.248725719098422e-07, 2.938623382572636e-07, 3.488273378539559e-07, 1.687973689687688e-03, 2.914205027842044e-03, 3.114886780959622e-07, 8.045861939391826e-07, 3.114886780959622e-07, 8.045861939391829e-07, 3.003301173798978e-02, 3.001175637276202e-02, 2.842337785757849e-02, 2.841796332445713e-02, 3.220264391545441e-02, 3.212277172619361e-02, 3.216810353823119e-02, 2.941106798308110e-02, 3.218538356383058e-02, 3.210586254042386e-02, 3.218538356383058e-02, 2.917850630313292e-02, 3.030231031436515e-02, 3.030086386782612e-02, 2.158971993658622e-02, 3.557618060417257e-02, 2.360379460239683e-02, 3.471227152008585e-02, 2.600550903514228e-02, 2.599536898924769e-02, 2.473040953917439e-02, 2.474532014705546e-02, 2.473040953917439e-02, 3.430257970276812e-02, 2.109062019535804e-02, 2.946677956779858e-02, 1.501817066503018e-02, 1.510368132863767e-02, 3.946873132952410e-02, 1.773361388697381e-02, 4.018540293620483e-02, 2.143648717017722e-02, 1.999301801439547e-02, 2.005167010713100e-02, 1.999301801439549e-02, 4.045289892852288e-02, 2.079685398618985e-02, 2.105746160179319e-02, 6.501613517703812e-04, 6.631008837761265e-04, 9.632991473100885e-04, 1.046384936775969e-03, 2.350616350731083e-02, 2.486744788761906e-02, 2.803033520776261e-03, 3.247905162618597e-03, 2.803033520776216e-03, 3.247905162618590e-03, 1.072074755057497e-05, 1.192648736416261e-05, 1.377971743606355e-08, 1.387416390349374e-08, 1.166533590283283e-07, 1.403456267419308e-07, 4.534500065550440e-03, 4.727892350158415e-03, 2.657297918072849e-07, 6.208367075135733e-07, 2.657297918072840e-07, 6.315558201492668e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
