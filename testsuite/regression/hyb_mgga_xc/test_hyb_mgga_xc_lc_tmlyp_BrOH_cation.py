
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_lc_tmlyp_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_lc_tmlyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.215850332474021e+01, -2.215855687071095e+01, -2.215885834637684e+01, -2.215806208914699e+01, -2.215847026387314e+01, -2.215847026387314e+01, -3.351466010427382e+00, -3.351507006739441e+00, -3.352841485151262e+00, -3.354486059890003e+00, -3.353165383473932e+00, -3.353165383473932e+00, -5.211136349099550e-01, -5.206983491604562e-01, -5.128082720501016e-01, -5.243149850437909e-01, -5.216187866570896e-01, -5.216187866570896e-01, -7.104476654595882e-02, -7.362851402888801e-02, -5.164141366176930e-01, -3.028091707947477e-02, -6.251646965128226e-02, -6.251646965128220e-02, -1.047017780509231e-03, -1.099253019218688e-03, -1.333884061588058e-03, -6.106149810414560e-04, -4.068158229635472e-04, -4.068158229635472e-04, -5.315776024717510e+00, -5.316342487994659e+00, -5.315827012032193e+00, -5.316326130623373e+00, -5.316049915830000e+00, -5.316049915830000e+00, -1.989539760463078e+00, -2.006115847679958e+00, -1.986570281162851e+00, -2.001376043078508e+00, -2.000201738913320e+00, -2.000201738913320e+00, -4.837837916295005e-01, -5.313158567460595e-01, -4.301694452689473e-01, -4.431183069374421e-01, -4.945430012919754e-01, -4.945430012919755e-01, 9.396503441851077e-04, -6.572646959810766e-02, 3.158718757087790e-03, -1.776650994574370e+00, -1.372149175986966e-02, -1.372149175986966e-02, -4.703752610864541e-04, -5.969048266342774e-04, -4.537782781894210e-04, 4.546283741457510e-03, -4.426336162273183e-04, -4.426336162273183e-04, -4.958537409767745e-01, -4.919074028635784e-01, -4.932302670305884e-01, -4.943711949376515e-01, -4.937930339344758e-01, -4.937930339344758e-01, -4.776130773502182e-01, -3.983666467532903e-01, -4.197722566527879e-01, -4.415021986800128e-01, -4.301340678664501e-01, -4.301340678664501e-01, -5.581415840779216e-01, -1.119811736340859e-01, -1.568823334396524e-01, -2.378473583891376e-01, -1.957513498611358e-01, -1.957513498611358e-01, -3.511935119590988e-01, -1.674088842391350e-03, 3.450338071598709e-03, -2.255742911183991e-01, 1.588927121029496e-03, 1.588927121029520e-03, -1.486608095765089e-03, -1.606030609052546e-04, -3.332877251781091e-04, 2.513449487969896e-03, -4.270950465091432e-04, -4.270950465091428e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_lc_tmlyp_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_lc_tmlyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.789270886934992e+01, -2.789273472719215e+01, -2.789284715085867e+01, -2.789283543895023e+01, -2.789325270990400e+01, -2.789342528912907e+01, -2.789168878593483e+01, -2.789143586495169e+01, -2.789279053722580e+01, -2.789220551726589e+01, -2.789279053722580e+01, -2.789220551726589e+01, -4.311106376012760e+00, -4.311304625785534e+00, -4.311208762484003e+00, -4.311400944455094e+00, -4.313565882113999e+00, -4.314102696548236e+00, -4.311473384586583e+00, -4.311855729230182e+00, -4.310192930449102e+00, -4.313982314104730e+00, -4.310192930449102e+00, -4.313982314104730e+00, -7.033852009211962e-01, -7.087474801689341e-01, -7.012169087566589e-01, -7.075658496579000e-01, -6.688565479762345e-01, -6.639323142704168e-01, -6.770904974903099e-01, -6.797891934028560e-01, -7.081682518229137e-01, -6.568560214871668e-01, -7.081682518229137e-01, -6.568560214871668e-01, -1.289412060216051e-01, -1.310391559021934e-01, -1.307666544691932e-01, -1.334029030697344e-01, -7.482897630013493e-01, -8.108864406891325e-01, -9.169469639342623e-02, -9.329381046921488e-02, -9.895101713435177e-02, -1.089006884822401e-01, -9.895101713435174e-02, -1.089006884822401e-01, -1.586693267344787e-03, -1.208038807767274e-03, -1.696520876635328e-03, -1.245889940167790e-03, -6.800177027447786e-03, -6.266332138812996e-03, -7.799807159397671e-04, -8.413103950089517e-04, -2.091024868605425e-04, -2.307591485514798e-03, -2.091024868605422e-04, -2.307591485514798e-03, -6.831816001894962e+00, -6.830131228052620e+00, -6.835200462548164e+00, -6.833405007003362e+00, -6.832004405918532e+00, -6.830246194843165e+00, -6.834911362325762e+00, -6.833217007066025e+00, -6.833548041049734e+00, -6.831776276457434e+00, -6.833548041049734e+00, -6.831776276457434e+00, -2.285585375951448e+00, -2.286097547959782e+00, -2.309336018115561e+00, -2.309179935016271e+00, -2.265547394883181e+00, -2.270680926557003e+00, -2.286105926585269e+00, -2.291512536997637e+00, -2.313594911264427e+00, -2.301764016442514e+00, -2.313594911264427e+00, -2.301764016442514e+00, -6.654032986052854e-01, -6.641214686147044e-01, -7.622772606509264e-01, -7.629481454988595e-01, -5.865284634878415e-01, -6.111284750229625e-01, -6.461060619063208e-01, -6.664563389809350e-01, -6.978587693174734e-01, -6.636319345692229e-01, -6.978587693174735e-01, -6.636319345692231e-01, -6.227439661467621e-02, -6.181490793687578e-02, -1.394049825440472e-01, -1.394638744518296e-01, -5.424853415544036e-02, -5.466089977145056e-02, -2.521361724177806e+00, -2.520346310500233e+00, -7.351580848594109e-02, -6.960565674766919e-02, -7.351580848594109e-02, -6.960565674766919e-02, -6.824767662209761e-04, -5.738172005004941e-04, -8.194443155918208e-04, -7.657877442912969e-04, -6.885505719766407e-04, -5.319063210314867e-04, -2.374669511403882e-02, -2.416402391729484e-02, -1.288945285175655e-03, -3.172616705289536e-04, -1.288945285175655e-03, -3.172616705289536e-04, -7.010920518346346e-01, -7.037206609252636e-01, -6.916038435829754e-01, -6.942879738426609e-01, -6.950626335645771e-01, -6.977445565413241e-01, -6.978489736526841e-01, -7.004816972882523e-01, -6.964682176712497e-01, -6.991243519927040e-01, -6.964682176712497e-01, -6.991243519927040e-01, -6.804515239136815e-01, -6.825863905593789e-01, -5.273860603331265e-01, -5.296149196167292e-01, -5.685379090341877e-01, -5.711946148700167e-01, -6.134021787796743e-01, -6.155418146282708e-01, -5.903696928720563e-01, -5.925552211411925e-01, -5.903696928720563e-01, -5.925552211411925e-01, -8.025681427878243e-01, -8.044534527035028e-01, -1.864939023275555e-01, -1.867915920751856e-01, -2.320301746991776e-01, -2.331761579520884e-01, -3.363507135065781e-01, -3.378863700732061e-01, -2.785722230366438e-01, -2.784753336269383e-01, -2.785722230366439e-01, -2.784753336269383e-01, -4.727946745299640e-01, -4.764936922325332e-01, -5.932384545268466e-03, -5.851094540315357e-03, -1.364996683841466e-02, -1.372090896853611e-02, -3.244189854069971e-01, -3.309026329690371e-01, -3.915051237464558e-02, -3.757292667563940e-02, -3.915051237464546e-02, -3.757292667563939e-02, -2.105718584913600e-03, -1.794948536383012e-03, -2.150605490221984e-04, -2.128609732169492e-04, -5.111048497276518e-04, -3.872768386015950e-04, -3.420268072251102e-02, -3.454221530497574e-02, -1.140983446503536e-03, -3.232248497787653e-04, -1.140983446503535e-03, -3.232248497787650e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_lc_tmlyp_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_lc_tmlyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.546725855922407e-08, 1.463652377038497e-11, -1.546671122021742e-08, -1.546708740464342e-08, 1.463631512328463e-11, -1.546658638612130e-08, -1.546637020161748e-08, 1.463532316351641e-11, -1.546560960033727e-08, -1.546830841962741e-08, 1.463842899785011e-11, -1.546807200639586e-08, -1.546716648297729e-08, 1.463681083685537e-11, -1.546696204072220e-08, -1.546716648297729e-08, 1.463681083685537e-11, -1.546696204072220e-08, -2.545743775978811e-05, 1.902747638536065e-07, -2.547410887624102e-05, -2.545603227211602e-05, 1.902725761814505e-07, -2.547467937897225e-05, -2.544531156377784e-05, 1.901971754504621e-07, -2.544647332363394e-05, -2.537471278074031e-05, 1.901358235030523e-07, -2.538768032173035e-05, -2.547421301197772e-05, 1.902491360705296e-07, -2.537630821891794e-05, -2.547421301197772e-05, 1.902491360705296e-07, -2.537630821891794e-05, -1.561642556792032e-02, 1.144533678933034e-03, -1.572391438149628e-02, -1.558952268747300e-02, 1.151156568500561e-03, -1.573905045092452e-02, -1.545184677606174e-02, 1.320750241138922e-03, -1.507322988447438e-02, -1.447695514614534e-02, 1.265386257803329e-03, -1.451137166454809e-02, -1.624429620562505e-02, 1.376562597771172e-03, -1.275347091439145e-02, -1.624429620562505e-02, 1.376562597771172e-03, -1.275347091439145e-02, -3.449675953318826e-01, 6.012876550391961e-01, -3.967797513823696e-01, -3.527667975415089e-01, 5.680272535784819e-01, -4.055946551794581e-01, -1.334616077382831e-02, 5.322727974273029e-04, -1.221013620564232e-02, -1.743606540588931e-01, 1.675901373768304e+00, -2.069792968417953e-01, -7.577932154104486e-01, 2.382014110698246e+00, 1.915477472724314e-02, -7.577932154104479e-01, 2.382014110698246e+00, 1.915477472724136e-02, -7.213108318073581e+00, 1.111914508308031e-07, -7.181864537138366e+00, -7.193787578081149e+00, 4.562559950974850e-07, -7.157039568471049e+00, 5.807894181765986e+00, 1.838627425311693e+01, 4.674707423447121e+00, -7.399076908769911e+00, 4.136895542502456e-17, -7.402144010624513e+00, -7.265518992886970e+00, 1.070835888305008e-12, -7.468710419749907e+00, -7.265518992887250e+00, 1.070835888305008e-12, -7.468710419749906e+00, -4.333688498980614e-06, 2.233703107768369e-08, -4.337389069487064e-06, -4.330889757746243e-06, 2.231537777319893e-08, -4.334679534932780e-06, -4.333424717724071e-06, 2.233595490630417e-08, -4.337215046433607e-06, -4.331023888380534e-06, 2.231683364972891e-08, -4.334761109644730e-06, -4.332343907014727e-06, 2.232609670798167e-08, -4.336045799946622e-06, -4.332343907014727e-06, 2.232609670798167e-08, -4.336045799946622e-06, -1.665060217795479e-04, 4.104557134069705e-06, -1.663275233618140e-04, -1.622831162360854e-04, 3.949027730077658e-06, -1.622442819020632e-04, -1.656111204684510e-04, 4.223201907834492e-06, -1.658966282016153e-04, -1.619801729088528e-04, 4.080707689470805e-06, -1.621618038710666e-04, -1.647151582397223e-04, 3.966397450084659e-06, -1.640618053289135e-04, -1.647151582397223e-04, 3.966397450084659e-06, -1.640618053289135e-04, -2.158140720886952e-02, 2.253646609880290e-03, -2.163858643913757e-02, -1.646699281736505e-02, 1.482953633834817e-03, -1.630467175995604e-02, -3.236316594071743e-02, 3.393155540240489e-03, -2.846914028871508e-02, -3.168720064998804e-02, 2.786872153422916e-03, -2.749032794788890e-02, -1.895023461500280e-02, 2.171399762139616e-03, -2.233219556413637e-02, -1.895023461500280e-02, 2.171399762139616e-03, -2.233219556413637e-02, 1.246272300267733e+00, 5.364331359216309e+00, 1.103067950561049e+00, -2.533274082630998e-01, 5.928062603673171e-01, -2.620990739337178e-01, 2.078013422059910e+00, 6.670630325612285e+00, 1.245155287351072e+00, -2.983872945617303e-04, 4.550774239056777e-06, -2.988399777582280e-04, 6.233662443485144e-01, 3.362374819306393e+00, 2.640174600265022e-02, 6.233662443485144e-01, 3.362374819306393e+00, 2.640174600265044e-02, -7.480177317700480e+00, 5.421496698436063e-24, -7.469043574652503e+00, -7.418637759648515e+00, 1.228758886113335e-17, -7.412874410334662e+00, -7.508916268905847e+00, 5.656440620065503e-25, -7.501926698631633e+00, 5.080789407236964e+00, 1.504669301565768e+01, 4.952374874478171e+00, -7.503960055585900e+00, 9.610322787727072e-20, -7.431894904305394e+00, -7.503960055585904e+00, 9.610322787727070e-20, -7.431894904305397e+00, -1.682780115544115e-02, 2.199677179191681e-03, -1.663587522086748e-02, -1.868040371626195e-02, 2.264286130145305e-03, -1.846100021773829e-02, -1.811885686116752e-02, 2.241303100651475e-03, -1.790267825696156e-02, -1.758088409279043e-02, 2.222568983976134e-03, -1.738051875887939e-02, -1.785856485929403e-02, 2.231922961512953e-03, -1.764990048174557e-02, -1.785856485929403e-02, 2.231922961512953e-03, -1.764990048174557e-02, -1.833170318129863e-02, 2.525278278664052e-03, -1.815149934034416e-02, -3.391447825140198e-02, 5.397863529116129e-03, -3.365933320725519e-02, -3.089596711913805e-02, 4.298036410666330e-03, -3.060691513803654e-02, -2.712931436460860e-02, 3.458400931093935e-03, -2.688635258463536e-02, -2.923779122241492e-02, 3.860241852276062e-03, -2.895457427818083e-02, -2.923779122241492e-02, 3.860241852276062e-03, -2.895457427818083e-02, -1.468315101528307e-02, 1.166454564355177e-03, -1.439748172904901e-02, -2.172238396296462e-01, 2.273047300256539e-01, -2.205971652188267e-01, -1.764740424184595e-01, 1.027440095908986e-01, -1.784858009031883e-01, -1.142542362728257e-01, 2.883676467546989e-02, -1.136327069300744e-01, -1.454248527732195e-01, 5.500747727544229e-02, -1.459508120309000e-01, -1.454248527732196e-01, 5.500747727544231e-02, -1.459508120309001e-01, -4.744447729728025e-02, 8.100714365057125e-03, -4.666737686174832e-02, 4.848619771770762e+00, 1.766533536733120e+01, 4.715749230623701e+00, 6.872720938927172e+00, 1.878803243082290e+01, 5.936884107277814e+00, -1.377660067624647e-01, 3.428914672188251e-02, -1.291950890132009e-01, 3.365622951029704e+00, 9.701438036301546e+00, 2.146642621423550e+00, 3.365622951029690e+00, 9.701438036301546e+00, 2.146642621423540e+00, -6.996512428827396e+00, 3.417478728614279e-04, -6.973998313228045e+00, -7.595463354968282e+00, 2.850114531961813e-85, -7.599580859069175e+00, -7.535395749019646e+00, 1.662312648545182e-36, -7.529134636954299e+00, 3.515580899883995e+00, 1.102889579754806e+01, 3.164896413076302e+00, -7.518951537718241e+00, 8.178814636871498e-22, -7.452057530107065e+00, -7.518951537718226e+00, 8.178814636871070e-22, -7.452057530107071e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_lc_tmlyp_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_lc_tmlyp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([8.027056297255496e-04, 8.027071785705400e-04, 8.027094999967894e-04, 8.027099864229405e-04, 8.027127272679298e-04, 8.027171740179741e-04, 8.026692542583190e-04, 8.026616897810727e-04, 8.027084003052923e-04, 8.026771344838240e-04, 8.027084003052923e-04, 8.026771344838240e-04, 4.507623370429699e-03, 4.509332687226839e-03, 4.507815836625668e-03, 4.509638835646275e-03, 4.513636211967745e-03, 4.515138213493601e-03, 4.502835375492891e-03, 4.504583982986860e-03, 4.507718614845451e-03, 4.509618477535048e-03, 4.507718614845451e-03, 4.509618477535048e-03, 1.740087478542771e-02, 1.767456279506029e-02, 1.731108111272668e-02, 1.764522391701015e-02, 1.617841365239392e-02, 1.576227831823416e-02, 1.588566990411207e-02, 1.602437481993118e-02, 1.806879316483059e-02, 1.380982038711182e-02, 1.806879316483059e-02, 1.380982038711182e-02, 1.452140049003600e-02, 1.538775904852536e-02, 1.494947391429037e-02, 1.594246592753646e-02, 1.573472412113395e-02, 1.647420865709465e-02, 9.295566272030199e-03, 9.463821717611245e-03, 1.498142902578438e-02, 5.325193678294067e-03, 1.498142902578438e-02, 5.325193678294077e-03, 3.516238901077789e-06, 4.204618285814190e-06, 4.037591035129968e-06, 4.943765290631816e-06, 4.967583438463588e-04, 5.716662566682170e-04, 7.790259274966516e-07, 7.409924504812000e-07, 2.510462326556883e-06, 4.730647636460071e-07, 2.510462326556880e-06, 4.730647636460073e-07, 3.513130685161972e-03, 3.513745738697815e-03, 3.517944918102690e-03, 3.518399437445125e-03, 3.513370299048900e-03, 3.513885759186831e-03, 3.517501395187326e-03, 3.518113600426186e-03, 3.515617283785881e-03, 3.516086010334092e-03, 3.515617283785881e-03, 3.516086010334092e-03, 5.784096768101015e-03, 5.784225109982020e-03, 5.800151531625519e-03, 5.800323965834122e-03, 5.667558009270456e-03, 5.702291363693704e-03, 5.682575568229436e-03, 5.716056777566217e-03, 5.878258692463011e-03, 5.805053355667084e-03, 5.878258692463011e-03, 5.805053355667084e-03, 2.346128589947529e-02, 2.352004654543370e-02, 2.735762089388520e-02, 2.742660090708100e-02, 2.393978595395895e-02, 2.393539368029607e-02, 2.907745776584232e-02, 2.838159629577747e-02, 2.356356043279975e-02, 2.416073323250967e-02, 2.356356043279975e-02, 2.416073323250967e-02, 4.623682814383449e-03, 4.730068423892284e-03, 1.231524614295383e-02, 1.238701423076745e-02, 3.840222991232671e-03, 4.262500252118445e-03, 1.058475102105361e-02, 1.059098880675071e-02, 6.200635960438855e-03, 7.274740485195797e-03, 6.200635960438855e-03, 7.274740485195797e-03, 3.316383504713784e-07, 3.717621566151953e-07, 6.953034479435825e-07, 7.267880443839142e-07, 2.940362719872117e-07, 3.490554019663170e-07, 1.771476033129278e-03, 1.789122776968678e-03, 3.126398215410295e-07, 8.047530469487089e-07, 3.126398215410297e-07, 8.047530469487092e-07, 3.089853289416897e-02, 3.085556363926073e-02, 2.913454458113160e-02, 2.911307626289272e-02, 2.971890874849821e-02, 2.969446592841943e-02, 3.023519374819599e-02, 3.019686617976843e-02, 2.997397904637559e-02, 2.994250086161053e-02, 2.997397904637559e-02, 2.994250086161053e-02, 3.208138137202901e-02, 3.202035195490066e-02, 2.196672122340290e-02, 2.200512118449951e-02, 2.420978840606311e-02, 2.426123611223258e-02, 2.694421661694373e-02, 2.692999609427932e-02, 2.553826749727311e-02, 2.552645403685265e-02, 2.553826749727311e-02, 2.552645403685265e-02, 2.619676167228533e-02, 2.627975042311388e-02, 1.536533116776831e-02, 1.546451717669076e-02, 1.842305384131606e-02, 1.867072116372672e-02, 2.467838663618983e-02, 2.472372225928022e-02, 2.163236340239507e-02, 2.170309463741614e-02, 2.163236340239509e-02, 2.170309463741614e-02, 2.281970156316674e-02, 2.292162054846728e-02, 4.700869933107918e-04, 4.784716435155469e-04, 9.896073801446102e-04, 1.074584229454895e-03, 2.747835864506104e-02, 2.768967973218938e-02, 2.912031948708427e-03, 3.370185492916828e-03, 2.912031948708418e-03, 3.370185492916829e-03, 1.002093188671677e-05, 1.112016747479817e-05, 1.379895946772648e-08, 1.389912776773628e-08, 1.155831011748229e-07, 1.389785536639995e-07, 2.685550036313063e-03, 2.778190016382810e-03, 2.663655309253429e-07, 6.209548252416049e-07, 2.663655309253418e-07, 6.209548252416033e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
