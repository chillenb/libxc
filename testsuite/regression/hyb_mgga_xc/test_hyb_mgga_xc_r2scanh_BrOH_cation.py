
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_r2scanh_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_r2scanh", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.962405442753197e+01, -1.962415962156652e+01, -1.962462370685964e+01, -2.027298290525734e+01, -2.026142601470143e+01, -2.094491103754357e+01, -3.106237341455038e+00, -3.412926122413223e+00, -3.413377489803279e+00, -3.413502420015509e+00, -3.413136965571931e+00, -3.106681769588186e+00, -5.594334445210685e-01, -6.093042406892614e-01, -6.472269931231300e-01, -5.852318633090605e-01, -5.473440692934267e-01, -6.533367813630521e-01, -1.683419620283138e-01, -1.777297487960786e-01, -6.687404667051654e-01, -1.330833235441596e-01, -1.640147892115464e-01, -1.611821169730867e-01, -3.728493573946540e-03, -4.417522482774371e-03, -3.027849412020742e-02, -1.725844109897441e-03, -2.270588943143107e-03, -2.270588943143108e-03, -5.135713640453583e+00, -5.129498458020298e+00, -5.128555728912258e+00, -5.129431923029435e+00, -5.036616973598220e+00, -5.029603003962980e+00, -1.947893641792881e+00, -1.962314966505929e+00, -1.915642824397954e+00, -1.928651263980685e+00, -1.777010990926983e+00, -1.960996422441332e+00, -5.695548042730177e-01, -6.473851737182604e-01, -5.510320464927650e-01, -5.738468101008910e-01, -5.809418880233851e-01, -6.058726102463520e-01, -8.909089907716145e-02, -1.630352248121766e-01, -8.694739728015857e-02, -1.902233748461719e+00, -1.148684883217599e-01, -1.148684883217599e-01, -1.550952750935901e-03, -1.419400466007291e-03, -1.419768556773516e-03, -5.106606237351624e-02, -1.737133287131912e-03, -1.737133287131904e-03, -6.019225970557170e-01, -5.982619300285404e-01, -5.949250369875960e-01, -5.984751024007852e-01, -5.958877886189217e-01, -5.976719302373016e-01, -5.875215958716822e-01, -4.880948221525880e-01, -5.082435422046127e-01, -5.502672237275863e-01, -5.380334985581283e-01, -5.240524490598124e-01, -6.670101320830556e-01, -2.357589225983558e-01, -2.494307604572267e-01, -3.356495284875076e-01, -3.262815782675302e-01, -2.903383939503937e-01, -4.623425093630433e-01, -4.002696356869121e-02, -4.059815641937506e-02, -3.590322006441173e-01, -7.052006708487600e-02, -7.052006708487603e-02, -1.191154023724557e-02, -2.285265959568589e-04, -3.019927488434958e-03, -7.375872163427027e-02, -1.326886969887323e-03, -2.196353269417833e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_r2scanh_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_r2scanh", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.886454896827312e+01, -2.886426293373705e+01, -2.886460735251849e+01, -2.886430623761824e+01, -2.886482948354715e+01, -2.886460979817916e+01, -2.893749142189130e+01, -2.715565863675340e+01, -2.894549682392071e+01, -2.716390982792425e+01, -2.716178682554097e+01, -2.716149560462856e+01, -4.281594528241898e+00, -4.390295929294552e+00, -4.261872656561095e+00, -4.261700808442185e+00, -4.263859460651978e+00, -4.264263864150459e+00, -4.263495407428890e+00, -4.263555965596987e+00, -4.260846318200426e+00, -4.265441702439388e+00, -4.389090452297518e+00, -4.285176634441683e+00, -7.780209887653392e-01, -7.849856831665361e-01, -7.833788694306865e-01, -8.274310822091645e-01, -7.615095575676034e-01, -7.539674170014785e-01, -7.929079626660667e-01, -7.583909344106909e-01, -7.915137733164996e-01, -7.189413361003190e-01, -8.061831620476934e-01, -7.265179970854262e-01, -2.090991922996418e-01, -2.256532599812020e-01, -2.194991720716749e-01, -2.381046329291705e-01, -8.037409799782366e-01, -8.418087205987289e-01, -1.148002535373328e-01, -1.273126045373944e-01, -1.859365179912730e-01, -7.649500920495093e-03, -1.865131488092143e-01, -1.202881982894519e-01, 1.375407934522361e-01, 1.460675100274727e-01, -6.925898285223793e-03, 1.535938388064977e-01, -3.952513432798540e-02, 2.009797267991853e-01, 7.608826583016695e-02, 7.451643734056841e-02, 1.235172785970780e-01, 6.483753038715750e-02, 1.235172785970780e-01, 6.483753038715728e-02, -6.702127899287215e+00, -6.700566577764294e+00, -6.705229315359285e+00, -6.703584106903204e+00, -6.703199498682370e+00, -6.701574005103176e+00, -6.705060598954546e+00, -6.703478232590100e+00, -6.984767864747162e+00, -6.694307935555218e+00, -6.703215965587072e+00, -6.990431302126053e+00, -2.404626353518817e+00, -2.405367034561205e+00, -2.428645993072815e+00, -2.428620507456387e+00, -2.358806949651623e+00, -2.365759875575511e+00, -2.381016790927228e+00, -2.388151770562655e+00, -2.462721764278083e+00, -2.450280646249941e+00, -2.433590883878340e+00, -2.419674091016681e+00, -7.705486513508835e-01, -8.340798769827539e-01, -8.440895989436921e-01, -8.452182770565315e-01, -6.882553818046578e-01, -7.176228915868993e-01, -7.277329029434956e-01, -7.527578671668457e-01, -8.021551016816427e-01, -8.298091914400051e-01, -8.014188842116236e-01, -7.626192302578851e-01, -2.191690812458761e-02, -2.379195233887919e-02, -2.033302238656359e-01, -1.896514321080804e-01, 2.553407397050777e-02, 9.902348672769547e-03, -2.448276017469059e+00, -2.447298129843104e+00, -5.823096569827800e-02, -8.700595514132048e-02, -5.823096569827814e-02, -8.700595514132049e-02, -2.789496708041883e-03, 5.340460363387214e-02, 5.731307664765997e-02, 5.808658181522997e-02, 5.662136246870321e-02, 6.099836179633051e-02, 1.004865594856402e-01, -6.617858390426061e-02, 5.175829655753857e-02, 8.261350198142312e-02, 5.175829655753846e-02, 8.261350198143348e-02, -7.919010001819107e-01, -7.947044387336782e-01, -7.849748653360733e-01, -7.878123418487845e-01, -7.935041317204429e-01, -7.959595596329999e-01, -7.980193070393843e-01, -7.903137694477870e-01, -7.939280950920602e-01, -7.964080872817885e-01, -7.981154448238061e-01, -7.891891392028819e-01, -7.692848338855931e-01, -7.716273240267738e-01, -6.451594881823762e-01, -6.919901471159170e-01, -6.805776020256976e-01, -7.401123179327987e-01, -7.174430654954207e-01, -7.197368819727693e-01, -6.989268424419931e-01, -7.013706945263807e-01, -6.974756156267361e-01, -7.511559297428154e-01, -8.694401798113472e-01, -9.333459604364077e-01, -2.659947054895571e-01, -2.676164297516961e-01, -3.242658730173703e-01, -3.439700893965974e-01, -4.623424019806465e-01, -4.650738569774035e-01, -4.049367395353075e-01, -4.051391503514050e-01, -4.048154357066132e-01, -3.996457236737728e-01, -5.875470384329363e-01, -5.925282903240190e-01, -5.164505784871672e-02, -5.163348732455222e-02, 1.244380684658667e-01, 1.142104985868313e-01, -4.454927884944918e-01, -4.545433311946646e-01, 8.170653774384397e-03, -1.641939379273191e-02, 8.170653774382954e-03, -1.641939379273259e-02, -1.551284043909382e-02, -1.545552076288612e-02, 1.889813898914851e-03, 1.923981460099632e-03, -3.980720906471174e-03, -3.948558859324538e-03, -9.483989821019456e-02, -9.501530026042085e-02, 5.234399847698146e-02, 7.535801873049207e-02, 5.161345901300063e-02, -3.607471049294024e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_r2scanh_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_r2scanh", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.740190831422324e-08, 8.754823619740888e-09, -1.740116462393952e-08, -1.740170208529919e-08, 8.754422046695865e-09, -1.740106981662688e-08, -1.740123872915740e-08, 8.752727524043654e-09, -1.740004103428918e-08, -2.133707273520157e-08, 8.902357889976835e-10, -1.019990692463426e-08, -2.156290829404716e-08, 4.323325233883475e-10, -1.042832745611288e-08, -1.056782822048631e-08, 1.520217232794523e-10, -1.056848285616732e-08, -1.178739533052215e-05, 2.513760466289678e-06, -1.436719827183686e-05, -1.270789530100974e-05, 6.735514678910315e-07, -1.270805777660851e-05, -1.271442642842418e-05, 6.763666257311692e-07, -1.271530212288416e-05, -1.270785806377489e-05, 6.749236188886372e-07, -1.270714042090221e-05, -1.271404312226863e-05, 6.754313041245301e-07, -1.271307540848403e-05, -1.435625764982533e-05, 2.530926022444482e-06, -1.178532804932405e-05, 6.782398816365472e-03, 2.031620287388696e-02, 6.624096189543877e-03, -1.196229733147335e-03, 4.281776270998719e-03, -6.433985714809792e-03, -8.668962167575386e-03, 1.392688120735120e-03, -8.910373055319281e-03, -8.488939579090865e-03, 1.558564987383650e-03, -2.393615369120763e-03, 7.630371034687451e-03, 2.239562307205753e-02, 8.606124625278801e-03, -7.626662744469394e-03, 1.376283626443728e-03, -9.815908515092592e-03, 2.339508469348545e-02, 6.670520382248003e-01, -1.403869194239433e+00, 2.653567619851330e-01, 1.163093417363446e+00, -1.047378492278933e+00, -4.422062472446825e-03, 5.669790476871719e-04, -4.578267650985735e-04, -4.636728117977617e+00, 1.443889722439502e+00, -4.395955179294528e+00, -1.628066812470355e+00, 1.038644129504970e-01, -1.786473347932284e+01, -1.619861642075467e+00, 1.202747537402744e-01, -9.881481280218010e-01, -1.231972811773533e+05, 3.066236822326313e+02, -1.091959541845158e+05, -5.849515861934363e+04, 2.284973763524638e+02, -9.970627229053974e+04, -5.789680204144174e+01, 6.745939117371837e+00, -6.700119211767699e+02, -2.668931521428712e+05, 6.583058466910715e+02, -2.763887994834760e+05, -1.502339538887278e+05, 2.193515687533467e+01, -5.628416249948274e+05, -1.502339538887278e+05, 2.193515687533478e+01, -5.628416249948253e+05, -2.945400273196799e-06, 4.635143166230940e-07, -2.948470097155868e-06, -3.075975447571072e-06, 2.052460731194121e-07, -3.078998975695474e-06, -3.074917332802806e-06, 2.047214146967644e-07, -3.077943971592617e-06, -3.075905392426137e-06, 2.052136593017906e-07, -3.078962584468911e-06, -5.228060237534858e-06, 8.049804149389111e-07, -2.778429383850723e-06, -2.946418154188403e-06, 4.628864643596083e-07, -5.404755521514012e-06, -1.098516248370896e-04, 3.324950970727656e-05, -1.099462441987406e-04, -1.065226595347794e-04, 3.392419759366471e-05, -1.067046590902175e-04, -1.239403036492838e-04, 1.017385045664765e-05, -1.232953222112322e-04, -1.213163821998182e-04, 1.010485610635608e-05, -1.206568516706238e-04, -9.933703468972932e-05, 4.726735463968434e-05, -9.188377872446175e-05, -1.060037691702879e-04, 3.393388567856715e-05, -1.078234682320544e-04, -9.441778054818797e-03, 1.537970814483033e-02, -2.790627292868516e-02, -1.115053979298331e-02, 4.721454012323087e-03, -1.120148228320647e-02, -2.055865680858861e-02, 6.427593397213827e-03, -1.792437414409374e-02, -1.814669294317956e-02, 6.434655367787209e-03, -1.591606151418878e-02, -8.621971629748076e-03, 1.281708416257613e-02, -3.090476287182417e-02, -1.246831034435918e-02, 5.124406733353916e-03, -1.549944429198225e-02, -1.893323303340197e+01, 5.256014201362460e+00, -1.816127560226763e+01, 1.640077558346734e-02, 3.734229916397888e-01, -1.576187149975862e+00, -3.090343026393523e+01, 1.410613550671018e+00, -2.526360567104755e+01, -1.446154854248140e-04, 1.882446141031536e-05, -1.449095687022639e-04, -1.237241800410635e+01, 1.282873116116745e+00, -9.912908961385755e+00, -1.237241800410634e+01, 1.282873116116745e+00, -9.912908961385757e+00, -1.708476341588285e+06, 6.885161767949311e+02, -3.229870253369500e+05, -2.504158035229323e+05, 5.359189029274509e+04, -2.246001832564758e+05, -1.397356294355721e+06, 3.658975410779611e+03, -1.326640614980852e+06, -1.284778212497244e+02, 3.450397443620979e+00, -6.126733384488753e+00, -5.217508494297721e+05, 1.271939246895683e+03, -5.701100536043834e+05, -5.217508494297710e+05, 1.271939246895683e+03, -5.701100536044516e+05, -1.714525507421975e-02, 9.878286956075786e-03, -1.682660587613230e-02, -1.708787422212877e-02, 9.135542784350111e-03, -1.679880135397210e-02, -1.992714530620318e-02, 1.686148784943105e-02, -1.934687955477787e-02, -2.107659610390953e-02, 1.208701231262895e-02, -1.563155251908022e-02, -1.962057838619764e-02, 1.623203090348926e-02, -1.906815511949726e-02, -2.161635732834360e-02, 1.224047301919733e-02, -1.549929874063622e-02, -1.781329086004656e-02, 1.339238784145689e-02, -1.751996072810107e-02, -9.296919387868786e-03, 4.939373896880159e-02, -3.418700993033424e-02, -1.550394641990442e-02, 2.870075650695616e-02, -4.881533990388166e-02, -2.156438171447383e-02, 1.053269933023646e-02, -2.122176696451805e-02, -2.295454551355427e-02, 1.053876496444686e-02, -2.258408752844226e-02, -1.547972759074259e-02, 2.548840081007020e-02, -4.667475105085318e-02, -4.560735452023782e-03, 1.267607161662677e-02, -1.662236058562483e-02, -6.130607219968576e-01, 2.319252634072655e-01, -5.971160802429979e-01, -5.825949390188900e-02, 9.983513173461944e-02, -3.019441188891666e-01, -5.407200347067440e-02, 1.172672982806425e-01, -6.675115426912420e-02, -1.502363024981062e-01, 1.271237351586763e-01, -1.507105006672061e-01, -1.499419038231087e-01, 1.277125325086717e-01, -7.783493662579369e-02, -3.871744317574134e-02, 1.446350631423485e-02, -3.774917833484639e-02, 5.573625093695192e+02, 1.246877659658531e+03, 5.591403287815427e+02, -2.684517944539646e+02, 6.230204803589169e+01, -2.358643100235605e+02, -6.389620580482475e-02, 1.832750805744794e-01, -5.858506337306535e-02, -5.171571495475906e+01, 1.361744822663103e+01, -4.129396521776131e+01, -5.171571495475872e+01, 1.361744822663146e+01, -4.129396521776128e+01, 1.811447179545914e+04, 6.998505000654623e+04, 2.035547115693708e+04, -1.508844467286241e+06, 2.071891923547654e+06, -1.492958171017094e+06, -4.558352206766280e+07, -7.710377625517517e+07, -4.404696219367260e+07, 5.043652866255749e+01, 1.090354285230524e+02, 5.067247151296407e+01, -9.882636972542015e+05, 2.332036826600692e+02, -6.836836988427218e+05, -9.850931372135214e+05, 6.574323764919770e+03, -7.360061375589303e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_r2scanh_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_r2scanh", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.597861200735727e-03, 1.597799255147543e-03, 1.597846985139853e-03, 1.597789100442729e-03, 1.597804751641561e-03, 1.597726674921856e-03, 1.641847931229265e-03, 8.297484761821204e-04, 1.654251084690971e-03, 8.422694309236264e-04, 8.548612135472777e-04, 8.548795025142652e-04, 4.170632495112024e-03, 4.584751289253220e-03, 4.491211505031715e-03, 4.491070927230468e-03, 4.493639038021945e-03, 4.494182203068551e-03, 4.492430722177559e-03, 4.492369818034293e-03, 4.490846891269967e-03, 4.495183198712888e-03, 4.578665638726308e-03, 4.172491823584291e-03, 4.748700790081679e-03, 5.234355623060061e-03, 5.346246526315590e-03, 2.048142408093468e-02, 1.984389818510739e-02, 1.994489403594597e-02, 2.246870103486140e-02, 6.354198143986924e-03, 5.891571524824581e-03, 2.246387595130709e-03, 1.949232384524366e-02, 2.027773943717099e-02, -3.630040573849094e-06, 7.274725624394132e-02, 2.088624374705107e-03, 7.318257908302764e-02, 1.762582733979102e-02, 1.687131327587867e-03, 7.610585403752923e-02, 7.591670184313341e-02, 7.784946692599336e-02, 1.248073214150069e-01, 7.748517189317040e-02, -1.732953842217134e-03, 1.957037961529062e-01, 2.081717600946804e-01, -1.342608354974962e-06, 2.240390470805708e-01, -8.465350759120474e-06, 2.508543911725092e-01, 9.208382321142083e-02, 9.066830642030035e-02, 1.692257502620227e-01, 1.168197975088460e-01, 1.692257502620227e-01, 1.168197975088455e-01, 3.328789237859888e-03, 3.329698641252934e-03, 3.499847395717543e-03, 3.500660647809464e-03, 3.497850769389641e-03, 3.498682892782451e-03, 3.499685186704006e-03, 3.500575678789255e-03, 5.759583982631062e-03, 3.171712430059015e-03, 3.330427167737779e-03, 5.920863275171794e-03, 7.015803602560147e-03, 7.020408229914782e-03, 6.917465289509004e-03, 6.922591202101858e-03, 7.618141759716252e-03, 7.618833553444001e-03, 7.596188561578075e-03, 7.596709069073756e-03, 7.617682155644339e-03, 6.263358619005119e-03, 6.920230222440725e-03, 6.933906762656203e-03, 1.141497143395601e-02, 3.835041369476326e-02, 2.072501302789038e-02, 2.084145022127375e-02, 2.381067225661923e-02, 2.344596712360935e-02, 2.313763528207516e-02, 2.266781008682323e-02, 1.255091921767416e-02, 4.110971823692824e-02, 2.154693625338911e-02, 2.253709243804179e-02, 1.027211325251359e-01, 1.017085416408128e-01, 3.844351904601358e-04, 7.513455568469882e-02, 1.432093194791416e-01, 1.379870520266809e-01, 8.279106408530466e-03, 8.284079364561376e-03, 1.199337233211240e-01, 1.163638337929913e-01, 1.199337233211239e-01, 1.163638337929914e-01, -2.211250973437991e-07, 5.280065271306685e-02, 6.833369867498025e-02, 6.396663253301760e-02, 1.795802787084285e-01, 2.025205695660437e-01, 1.913748902785768e-01, 3.141261489178430e-05, 7.143414549929533e-02, 2.021506788998441e-01, 7.143414549929517e-02, 2.021506788998682e-01, 2.178187038123115e-02, 2.166101874368702e-02, 2.232139349676169e-02, 2.224290093300103e-02, 2.404859256268203e-02, 2.364484907785981e-02, 2.705958291183352e-02, 1.928845206304895e-02, 2.371253675731954e-02, 2.333856701943928e-02, 2.785399490059718e-02, 1.909613111654902e-02, 1.992319927946487e-02, 1.982751689375990e-02, 1.072080850625321e-02, 3.190056954810352e-02, 1.118897072430999e-02, 4.561654279031300e-02, 2.341608923463831e-02, 2.332723234858523e-02, 2.392372745836211e-02, 2.384131023259727e-02, 1.218271836517412e-02, 4.676293504583495e-02, 7.193997939446039e-03, 3.425749792742505e-02, 5.899382710637399e-02, 5.869693654306875e-02, 1.334851446360651e-02, 5.571866810395654e-02, 1.220224303125669e-02, 2.167994907678455e-02, 3.984037612208213e-02, 3.989920476561836e-02, 3.960213463920090e-02, 1.836338739452054e-02, 2.715707790724546e-02, 2.711098879295366e-02, -3.866417076381034e-06, -3.858339004642333e-06, 1.724010191195265e-01, 1.690221162780069e-01, 1.113660209434603e-02, 1.151609690355746e-02, 1.271982142216384e-01, 1.224510141364641e-01, 1.271982142216368e-01, 1.224510141364634e-01, -2.257698001866446e-07, -1.929288653272387e-07, 2.836220022325940e-03, 2.845144575069554e-03, -2.417031544805414e-08, -1.954708370403156e-08, -2.396976798172497e-05, 3.238173486845678e-05, 1.148477831931685e-01, 1.864776082505650e-01, 1.148613690329886e-01, -8.010744948218950e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
