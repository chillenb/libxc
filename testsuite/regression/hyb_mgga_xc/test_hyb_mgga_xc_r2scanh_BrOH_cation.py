
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_xc_r2scanh_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_r2scanh", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.089003964511148e+01, -2.089010182108897e+01, -2.089042407720834e+01, -2.088949998187471e+01, -2.088997764246538e+01, -2.088997764246538e+01, -3.106117851017477e+00, -3.106228714324567e+00, -3.109390381990078e+00, -3.110207176036480e+00, -3.109043394442204e+00, -3.109043394442204e+00, -5.753124422887000e-01, -5.745390999431267e-01, -5.567394944982595e-01, -5.665388467335540e-01, -5.653463243091712e-01, -5.653463243091712e-01, -1.771587011495125e-01, -1.795717975198580e-01, -6.332521848993441e-01, -1.185414504765710e-01, -1.607377569353285e-01, -1.607377569353284e-01, -3.024811402442631e-03, -3.236672009616624e-03, -2.613341120677834e-02, -1.418577246927209e-03, -2.161705469774727e-03, -2.161705469774726e-03, -5.127610004454574e+00, -5.128612845973390e+00, -5.127678554927114e+00, -5.128562976680223e+00, -5.128106819537867e+00, -5.128106819537867e+00, -1.893554147253812e+00, -1.914073701390185e+00, -1.887270202495487e+00, -1.905593921334317e+00, -1.908117530321471e+00, -1.908117530321471e+00, -5.827688342377247e-01, -6.339765179399581e-01, -5.260239842055122e-01, -5.462189677522000e-01, -5.941747388078318e-01, -5.941747388078319e-01, -7.758496104990323e-02, -1.707706480346577e-01, -7.134165979903313e-02, -1.778057822969278e+00, -9.778646008573209e-02, -9.778646008573207e-02, -1.024101820090008e-03, -1.398273494594220e-03, -1.171696242458238e-03, -4.625118570166509e-02, -1.449972504447852e-03, -1.449972504447849e-03, -6.006971771651410e-01, -5.970315181325434e-01, -5.983188869592969e-01, -5.993814251233747e-01, -5.988486605485015e-01, -5.988486605485015e-01, -5.837917373404644e-01, -5.005012348484106e-01, -5.245228399901949e-01, -5.482107575063676e-01, -5.360216892766105e-01, -5.360216892766105e-01, -6.580066727224522e-01, -2.213507396498654e-01, -2.640919996962989e-01, -3.440535885976072e-01, -3.031071825616988e-01, -3.031071825616988e-01, -4.538502582345603e-01, -2.472087373319947e-02, -3.546833811601535e-02, -3.373480172770009e-01, -6.180598759110266e-02, -6.180598759110267e-02, -4.609605094064523e-03, -2.652831408551251e-04, -6.932317286578499e-04, -5.865503231996991e-02, -1.323732230360465e-03, -1.323732230360456e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_xc_r2scanh_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_r2scanh", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.717373224807721e+01, -2.717382168780155e+01, -2.717384478726571e+01, -2.717390341185692e+01, -2.717420568900586e+01, -2.717442030646489e+01, -2.717293587333144e+01, -2.717280160231069e+01, -2.717379958315479e+01, -2.717344939941241e+01, -2.717379958315479e+01, -2.717344939941241e+01, -4.396218268979728e+00, -4.396318608028126e+00, -4.396318220586990e+00, -4.396399034810642e+00, -4.398390102226656e+00, -4.398935317351520e+00, -4.396733265480570e+00, -4.397042117221936e+00, -4.394948074881989e+00, -4.399309253969223e+00, -4.394948074881989e+00, -4.399309253969223e+00, -8.170048354447000e-01, -8.208256837433171e-01, -8.152929874171169e-01, -8.197756477065652e-01, -7.883087826872799e-01, -7.840702966397545e-01, -7.981331556938210e-01, -8.006264656168252e-01, -8.193479830480971e-01, -7.705374166843230e-01, -8.193479830480971e-01, -7.705374166843230e-01, -1.909031997109227e-01, -2.202775324493354e-01, -1.975077622498324e-01, -2.251298491988327e-01, -8.419308848893376e-01, -8.754147817768003e-01, -1.652280011641240e-01, -1.485797052290792e-01, -1.785741109314338e-01, -1.565543166977982e-01, -1.785741109314337e-01, -1.565543166977982e-01, -6.179245865625614e-03, 8.394672391310525e-03, -5.819208120478460e-03, -3.630046536597034e-03, -4.175927345318904e-02, -4.280303572592559e-02, -2.661393365284226e-03, -2.617272907889405e-03, -4.010163849328442e-03, -2.812469274853059e-03, -4.010163849328454e-03, -2.812469274853058e-03, -6.703431739909706e+00, -6.701841047099749e+00, -6.705601025661538e+00, -6.703935548721123e+00, -6.703563964563947e+00, -6.701920606374063e+00, -6.705424185808680e+00, -6.703823786260283e+00, -6.704534359689662e+00, -6.702892000138207e+00, -6.704534359689662e+00, -6.702892000138207e+00, -2.341696172309234e+00, -2.343706125859615e+00, -2.373203424647915e+00, -2.374229340650299e+00, -2.320279411349775e+00, -2.327954097025803e+00, -2.349265433214044e+00, -2.356991090980685e+00, -2.375768471431918e+00, -2.362523472584092e+00, -2.375768471431918e+00, -2.362523472584092e+00, -7.783267422186473e-01, -7.766972198392408e-01, -8.595904197897205e-01, -8.597909156528483e-01, -7.119490191264424e-01, -7.356684182989013e-01, -7.588832570233368e-01, -7.772961266482120e-01, -8.080992303252924e-01, -7.741672183575101e-01, -8.080992303252925e-01, -7.741672183575101e-01, -1.108757202130714e-01, -1.130618407302541e-01, -1.584936590697323e-01, -1.596580170348099e-01, -1.046115001359348e-01, -1.050506573145575e-01, -2.579379140899063e+00, -2.578464107565830e+00, -1.061250292919490e-01, -9.427543090631796e-02, -1.061250292919521e-01, -9.427543090631756e-02, -1.897887786133859e-03, -1.940233680124156e-03, -2.593917227419724e-03, -2.612692966076992e-03, -2.111551886411374e-03, -2.222305067939904e-03, -7.232619845242864e-02, -7.012721851151993e-02, -2.222077531324884e-03, -2.609988497132812e-03, -2.222077531324880e-03, -2.609988497132808e-03, -7.934936098993350e-01, -7.962176061131639e-01, -7.862439610973563e-01, -7.890471349318712e-01, -7.888148657558552e-01, -7.916121903239685e-01, -7.909487359028243e-01, -7.936829374575131e-01, -7.898853632004037e-01, -7.926501322528592e-01, -7.898853632004037e-01, -7.926501322528592e-01, -7.740525393465840e-01, -7.761744434517536e-01, -6.431123783894803e-01, -6.459345249216497e-01, -6.812563909574690e-01, -6.842919187861017e-01, -7.187221444154691e-01, -7.210008846388806e-01, -6.999618831582504e-01, -7.023871192429527e-01, -6.999618831582504e-01, -7.023871192429527e-01, -9.015788056018396e-01, -9.024466697057141e-01, -2.447060803835031e-01, -2.462283048070620e-01, -3.138762123217636e-01, -3.189551219542441e-01, -4.583413443997643e-01, -4.605531543778050e-01, -3.847246276642122e-01, -3.851338560989552e-01, -3.847246276642122e-01, -3.851338560989552e-01, -5.885067976687706e-01, -5.937112385344492e-01, -3.636976058382094e-02, -3.863144360028197e-02, -5.581082625358170e-02, -5.681942016716762e-02, -4.486044099079782e-01, -4.548187417609915e-01, -8.841168080331704e-02, -8.829831267444793e-02, -8.841168080331706e-02, -8.829831267444793e-02, -8.158343743041745e-03, -8.396523445624015e-03, -4.963008421331925e-04, -5.185898681023675e-04, -1.265161140819050e-03, -1.336573854109170e-03, -8.358233722906511e-02, -3.555707805530671e-02, -2.149094974956501e-03, -2.377837836669978e-03, -2.149094974956489e-03, -2.377837836669978e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_r2scanh_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_r2scanh", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.124910190087333e-08, 1.699680376684791e-10, -1.124681403839065e-08, -1.124897488977238e-08, 1.699677911045265e-10, -1.124672210933197e-08, -1.124818437972132e-08, 1.699547462735486e-10, -1.124569653281941e-08, -1.124960534218068e-08, 1.699582283170237e-10, -1.124751051723754e-08, -1.124904174194720e-08, 1.699581088711227e-10, -1.124649939542816e-08, -1.124904174194720e-08, 1.699581088711227e-10, -1.124649939542816e-08, -2.593343292225073e-05, 2.758858546504131e-06, -2.593167393399932e-05, -2.593695027834713e-05, 2.759473816214609e-06, -2.593398050316505e-05, -2.600359302027762e-05, 2.774025422388848e-06, -2.601560665170943e-05, -2.597527554813967e-05, 2.754809608201874e-06, -2.597433351696012e-05, -2.594012048345943e-05, 2.763369390847232e-06, -2.603234276768927e-05, -2.594012048345943e-05, 2.763369390847232e-06, -2.603234276768927e-05, -6.350692604888941e-03, 2.709323143821118e-03, -6.483207467127345e-03, -6.326308074582853e-03, 2.698168663263616e-03, -6.474589205202150e-03, -6.073380545361967e-03, 2.380933893684406e-03, -6.073747882234510e-03, -6.456662191754909e-03, 2.011915533646660e-03, -6.561242229853803e-03, -6.813542615769450e-03, 2.115030925736313e-03, -6.768347065663698e-03, -6.813542615769450e-03, 2.115030925736313e-03, -6.768347065663698e-03, -2.947146615311202e+00, 1.113778575282640e+00, -1.683813183776775e+00, -2.843499888875873e+00, 1.131585167720763e+00, -1.654707025880093e+00, -1.330156611811636e-03, 1.707854955393021e-03, -1.725651137595917e-03, -6.396899466827518e-01, 7.088238681920542e-01, -2.727145695326231e+00, -2.499824327709391e+00, 1.017636528647748e+00, 7.553137706425164e-01, -2.499824327709389e+00, 1.017636528647750e+00, 7.553137706425173e-01, -3.946205817067175e+02, 2.691692589173089e+03, -1.084157958220742e+04, 4.138835391017381e+01, 8.378791168731273e+02, -1.464987123262093e+03, 6.553323729962245e+00, 5.206546797122851e+00, 4.110509889691205e+00, 9.467461337242571e+02, 3.474425544423646e+02, 9.444032684985681e+02, 3.217172347733576e+02, 2.860361857526898e+02, 2.039584375441086e+03, 3.217172347733731e+02, 2.860361857526883e+02, 2.039584375441088e+03, -3.089607463695405e-06, 2.064120283196137e-07, -3.091789544723739e-06, -3.090636860437502e-06, 2.069595826936506e-07, -3.092775235948210e-06, -3.089361613964652e-06, 2.064098853411341e-07, -3.091603923764114e-06, -3.090248428760744e-06, 2.068941926853079e-07, -3.092516524359307e-06, -3.090368001676533e-06, 2.067032181027890e-07, -3.092313845568232e-06, -3.090368001676533e-06, 2.067032181027890e-07, -3.092313845568232e-06, -1.754013152041901e-04, 1.675754422131500e-05, -1.735756880101104e-04, -1.624100942957180e-04, 1.543449230145285e-05, -1.611352765159159e-04, -1.713542565096183e-04, 1.588213932057392e-05, -1.710870704873767e-04, -1.594557882949129e-04, 1.467182024214476e-05, -1.590328604344266e-04, -1.703921907202509e-04, 1.642715161878144e-05, -1.670582610834516e-04, -1.703921907202509e-04, 1.642715161878144e-05, -1.670582610834516e-04, -2.420766933603975e-02, 1.251669896468412e-02, -2.405385490037985e-02, -1.961070288154865e-02, 1.338874693179927e-02, -1.909920520898021e-02, -3.982872605055766e-02, 2.064571703266417e-02, -3.337424089091379e-02, -4.306014180617729e-02, 2.964080361125809e-02, -3.451613914734193e-02, -1.850731441685743e-02, 1.167016908189115e-02, -2.709080331204398e-02, -1.850731441685744e-02, 1.167016908189114e-02, -2.709080331204398e-02, -1.174769412505636e+00, 1.013006592168991e+00, -8.019616195559893e-01, -2.701147786424082e+00, 9.370545638571657e-01, -2.650284764420574e+00, -1.201328001129519e-01, 1.112408591820349e+00, -1.059692882417156e+00, -3.246933733987241e-04, 1.247282384233750e-04, -3.252824825625684e-04, -5.488621487498177e+00, 6.279807259259585e-01, -8.891878291309620e+00, -5.488621487498239e+00, 6.279807259259206e-01, -8.891878291309622e+00, 1.903920401395956e+03, 5.902777584243285e+02, 1.681227225325519e+03, 1.136635272725431e+03, 3.731293901041719e+02, 1.072973945544036e+03, 5.039127715601239e+03, 1.952914771464913e+03, 4.878522865910760e+03, 2.160485184638716e+00, 2.370384632887535e+00, -6.492041498029653e-01, 3.159987221420677e+03, 8.008422074390305e+02, 2.740021138954886e+02, 3.159987221420672e+03, 8.008422074390303e+02, 2.740021138954708e+02, -1.796791759109896e-02, 1.147494335234051e-02, -1.756977687605243e-02, -1.846305850164687e-02, 1.049780980722926e-02, -1.807697150036326e-02, -1.837164376945337e-02, 1.082048215294510e-02, -1.797659881115599e-02, -1.822348462339915e-02, 1.110366068540403e-02, -1.782680043617267e-02, -1.830608339528271e-02, 1.096074572509396e-02, -1.790923129745971e-02, -1.830608339528271e-02, 1.096074572509396e-02, -1.790923129745971e-02, -2.063984881899026e-02, 1.496753871155219e-02, -2.015382255740390e-02, -3.130521951537030e-02, 1.251231139611195e-02, -3.067347792354239e-02, -2.754606450031488e-02, 1.259085545422972e-02, -2.696583095643839e-02, -2.482484647279984e-02, 1.314825954923481e-02, -2.440166027089789e-02, -2.625328283143010e-02, 1.293317825686115e-02, -2.564889265800440e-02, -2.625328283143011e-02, 1.293317825686115e-02, -2.564889265800440e-02, -1.801511128172508e-02, 1.205622557319765e-02, -1.720555773560955e-02, -9.030869616661985e-01, 3.288432120036838e-01, -8.864876805397466e-01, -5.137411594135879e-01, 2.108522491860608e-01, -4.877527302218946e-01, -1.942767424577248e-01, 1.111199302289075e-01, -1.895145952112028e-01, -3.043275179222162e-01, 1.506759917820290e-01, -3.053013849673326e-01, -3.043275179222165e-01, 1.506759917820289e-01, -3.053013849673327e-01, -6.273882655702069e-02, 2.882362875294387e-02, -5.828706348460658e-02, -1.063845398595033e+01, 9.627091651908412e+00, -2.596652711738630e+00, 2.797117015996622e+00, 2.970313033869382e+00, 2.223127863723469e+00, -2.358223794405495e-01, 1.534267296367740e-01, -1.911680411695445e-01, -1.728188697718407e+00, 2.505158629607186e+00, -3.912445592057143e+00, -1.728188697718406e+00, 2.505158629607169e+00, -3.912445592057140e+00, 1.834531954715521e+02, 6.329641056734451e+01, 1.752994166693607e+02, 2.307747101843122e+04, 8.770284391659925e+03, 3.039424632680500e+04, 4.681726954555602e+03, 2.193811091537201e+03, 4.479549021311155e+03, -3.299634284679054e+00, 4.726101197427621e+00, -3.336680973957894e+01, 5.089160812162737e+03, 1.089913012534649e+03, 5.524240481975744e+02, 5.089160812162750e+03, 1.089913012534657e+03, 5.524240481976531e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_r2scanh_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_r2scanh", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_xc_r2scanh_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_xc_r2scanh", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [8.994681079271300e-04, 8.993132620266580e-04, 8.994660345893205e-04, 8.993117491787645e-04, 8.994357203739668e-04, 8.992750434300545e-04, 8.994585781129099e-04, 8.993039542724762e-04, 8.994682523508827e-04, 8.992744540411875e-04, 8.994682523508827e-04, 8.992744540411875e-04, 7.799990688805176e-03, 7.795920081353717e-03, 7.801480874398238e-03, 7.796555263290549e-03, 7.825422547939432e-03, 7.829875536108736e-03, 7.827710466653148e-03, 7.825018672382316e-03, 7.793337950236292e-03, 7.851327967737923e-03, 7.793337950236292e-03, 7.851327967737923e-03, 1.272736044957885e-02, 1.293479261689319e-02, 1.266766325154254e-02, 1.287936902464903e-02, 1.167052878842497e-02, 1.183328802688177e-02, 1.344591703793997e-02, 1.368521065043896e-02, 1.302756270212637e-02, 1.424581175651214e-02, 1.302756270212637e-02, 1.424581175651214e-02, 1.002846795658444e-01, 6.255190497130719e-02, 9.891529774577104e-02, 6.437498057001020e-02, 1.425362268017727e-03, 2.424344627427451e-03, 1.388555136843859e-02, 5.342626200722077e-02, 1.164650639852347e-01, -1.861883416060684e-02, 1.164650639852347e-01, -1.861883416060695e-02, -1.170397091825473e-03, 1.918069213089536e-02, -1.830382135646880e-04, 3.371812195449332e-03, 6.211956296746136e-04, 1.405386793025173e-03, 1.618030553480699e-06, 5.408423254665526e-06, 2.179856887390503e-04, -3.967198892040324e-05, 2.179856887390339e-04, -3.967198892040201e-05, 3.510485054962200e-03, 3.510588213897845e-03, 3.512517143410439e-03, 3.512527731567918e-03, 3.510344701094793e-03, 3.510463922031175e-03, 3.512079698237648e-03, 3.512253407126482e-03, 3.511727728567133e-03, 3.511582661925196e-03, 3.511727728567133e-03, 3.511582661925196e-03, 1.051179331397981e-02, 1.040846828258376e-02, 9.997152702201173e-03, 9.916627215696619e-03, 1.014080715383654e-02, 1.017411233207158e-02, 9.664458402019887e-03, 9.688473202423869e-03, 1.047112049513198e-02, 1.015859547216609e-02, 1.047112049513198e-02, 1.015859547216609e-02, 3.242191098870541e-02, 3.192773458491800e-02, 2.989433088799109e-02, 2.930148078976617e-02, 3.792679418755501e-02, 3.772631073968668e-02, 3.716169241424797e-02, 3.660058118642005e-02, 2.814049767155608e-02, 3.433728003760970e-02, 2.814049767155610e-02, 3.433728003760970e-02, 1.084253823908729e-02, 8.867279579849752e-03, 9.949428614067848e-02, 9.927304631185788e-02, 4.485456520179508e-03, 9.877582339558530e-03, 1.515680257648754e-02, 1.516674995661316e-02, 5.433116774926473e-02, 1.006401281862960e-01, 5.433116774926292e-02, 1.006401281862966e-01, 7.011708973851042e-08, 1.374684629020421e-07, 8.672217558194175e-07, 3.469762759432115e-07, 3.098357880272116e-06, 4.118360600974723e-06, 1.139037600873965e-03, 5.207149115517104e-03, -3.681876546202139e-06, 5.787192611866171e-04, -3.681876546202091e-06, 5.787192611866227e-04, 2.233901299117111e-02, 2.213455846684164e-02, 2.343061662777577e-02, 2.326374788823175e-02, 2.319645356407075e-02, 2.301346262709487e-02, 2.288110378493694e-02, 2.268648476770549e-02, 2.305424461722694e-02, 2.286413717577255e-02, 2.305424461722694e-02, 2.286413717577256e-02, 2.324969689616261e-02, 2.293843670891698e-02, 2.743906787713515e-02, 2.728619777065976e-02, 2.664741199364811e-02, 2.648539906091882e-02, 2.574155217364341e-02, 2.561078175190628e-02, 2.637977756209479e-02, 2.610506141270543e-02, 2.637977756209480e-02, 2.610506141270544e-02, 3.101191399047536e-02, 3.015983251382820e-02, 6.818766151905931e-02, 6.831157454368514e-02, 6.508133681472339e-02, 6.392897780685700e-02, 5.352008647796875e-02, 5.317571878602984e-02, 5.777620649236286e-02, 5.788502586751222e-02, 5.777620649236284e-02, 5.788502586751222e-02, 3.978644980959943e-02, 3.780494892903262e-02, 5.047113973006489e-03, 2.733296785855596e-03, 1.198360515421909e-03, 1.642607730309454e-03, 5.312808782577095e-02, 4.598406868011593e-02, 8.270711173559335e-03, 1.713233739013289e-02, 8.270711173559360e-03, 1.713233739013291e-02, 3.520406515790186e-06, 3.003706727485667e-06, 1.191274573101215e-08, -5.559389320007064e-09, 4.678978863930360e-06, 6.296258636666383e-06, 9.280831178132401e-03, 8.668683580998708e-02, -7.466475696780151e-06, 4.847102294101274e-04, -7.466475696779693e-06, 4.847102294101081e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
