
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_k_csk1_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([1.614125629871734e+03, 1.614110479062171e+03, 1.614080988905558e+03, 1.614328034855175e+03, 1.614117322371786e+03, 1.614117322371786e+03, 8.331530817878004e+01, 8.330272410867455e+01, 8.293065731947875e+01, 8.310733603613697e+01, 8.331227001571423e+01, 8.331227001571423e+01, 6.024516630709454e+00, 6.045337007246419e+00, 6.625748086928353e+00, 6.363119515422674e+00, 6.031293405136220e+00, 6.031293405136220e+00, 6.192716706467550e-01, 6.046066208649498e-01, 1.141028121411902e+01, 9.794427453910085e-01, 6.146372711103298e-01, 6.146372711103297e-01, 5.998133885046762e-01, 5.978275472233345e-01, 8.650725908214896e-01, 8.912804348154230e-01, 5.868496828172696e-01, 5.868496828172696e-01, 1.473028978191027e+03, 3.537926797348543e+02, 4.246069445451606e+01, 2.037154319421063e+03, 7.010478835199447e+01, 2.184055227158985e+02, 2.744732289381455e+01, 6.847911140769708e+01, 4.152379929686229e+01, 4.198172615867006e+01, 4.073353561206375e+01, 3.233817995388360e+01, 3.804193631949980e+01, 1.334409033837889e+01, 2.390038303457154e+01, 2.111720850612655e+00, 2.543062507417824e+00, 3.387447758524575e+00, 8.066910945210249e-01, 4.999943177008743e+00, 7.438755291799635e-01, 2.528042667242410e+01, 7.071884967364561e-01, 6.954076694943108e-01, 3.740221954089434e+00, 2.358370640837607e+03, 3.427430342260345e-01, 6.895492230796036e-01, 1.594118800745210e+00, 4.770742914216268e-01, 1.995744148231601e+05, 1.958812679875975e-01, 1.490174616254599e-01, 1.965293833085642e+03, 1.309000942247129e-01, 2.554930317553545e+06, 4.044681771694215e-02, 1.802315047538436e+00, 1.764158902044818e+01, 7.800318681883721e-01, 2.581011044439544e+00, 3.941801078051013e+01, 4.671116164132632e+01, 9.633412073732632e-01, 8.845546009105302e-01, 6.464388004388429e-01, 2.511156134747196e+00, 1.660131026842935e+00, 1.739859450317853e+00, 4.549680224326259e+00, 1.202853650909617e+00, 8.815882224417791e-01, 6.419405081106185e-01, 6.481448779340327e-01, 5.773381978815046e-01, 1.817918178214576e+01, 4.768849521731710e-01, 5.786856539429560e-01, 3.948424447791399e-01, 3.948424408615671e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_k_csk1_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([1.138956261649911e+03, 1.138987426141172e+03, 1.139090736571735e+03, 1.138580216634062e+03, 1.138972998380149e+03, 1.138972998380149e+03, 8.736578749580258e+01, 8.736601398391016e+01, 8.737319428051084e+01, 8.733492744686497e+01, 8.736695039630276e+01, 8.736695039630276e+01, 3.096415771298543e+00, 3.087019006893379e+00, 2.834983546710081e+00, 2.885264569153500e+00, 3.093003541797470e+00, 3.093003541797470e+00, 1.695292861621638e-01, 1.836695336375909e-01, 4.555460297355387e+00, 5.648681617323228e-02, 1.747062813354547e-01, 1.747062813354542e-01, -5.487843665018985e-02, -5.469618338569916e-02, -6.661484088022417e-02, -6.626142546197894e-02, -5.366638171982967e-02, -5.366638171982967e-02, 2.000452441837051e+02, 2.001520839798623e+02, -3.764163705739127e+01, 2.001393922111276e+02, 5.087040283969701e+01, 2.000998308469549e+02, -2.718438054093638e+01, 2.626527399135601e+01, 2.368748941761100e+01, 2.487942188546246e+01, 2.570183360407465e+01, -3.423282915224710e+00, 2.452361228665222e+00, 2.974641023065071e+00, 2.202341358446905e+00, 2.456691473376860e+00, 2.657338512602890e+00, 2.657338512602890e+00, -8.051999868600564e-01, 1.544923923327787e-01, -7.436337580741817e-01, 2.751850188428746e+01, -5.330580916519638e-01, -6.632163071080274e-01, -6.434322221880796e-02, -6.420459623945297e-02, -3.427430342209521e-01, -6.892566610154066e-01, -5.282625604538242e-02, -4.770742898468530e-01, 2.702103480116423e+00, -1.958018573158650e-01, -1.490132612744957e-01, 2.686250008046203e+00, -1.307974182455901e-01, 2.680238665482643e+00, -4.044145153061717e-02, 1.352708519666011e+00, 1.998388113148001e+00, 4.638988454760650e-01, 2.096124393693766e+00, 2.096124393693767e+00, 3.267345293716192e+00, -9.610496953706300e-01, -8.824289069066125e-01, -6.094739725733511e-01, 6.428487786096539e-01, 6.428487786096543e-01, 1.439535604769550e+00, -7.696580778215328e-02, -6.300362646055430e-02, 7.848744091477423e-01, -6.417250808376334e-01, -5.669096341261749e-01, -5.773380171524244e-01, -4.916684277996971e-02, -4.768849518987310e-01, -5.758287856936565e-01, -3.948424248424371e-01, -3.948424398397586e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_csk1_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([5.326881114750711e-06, 5.326836356562164e-06, 5.326619845425437e-06, 5.327354154909061e-06, 5.326857648074831e-06, 5.326857648074831e-06, 1.695982788948282e-04, 1.696222354555115e-04, 1.704543267893075e-04, 1.708821510203991e-04, 1.695989062353403e-04, 1.695989062353403e-04, 2.363795624356837e-02, 2.371089894750390e-02, 2.571085085416391e-02, 2.511302609544829e-02, 2.366452568393156e-02, 2.366452568393156e-02, 1.647174615072228e+00, 1.501895777964468e+00, 1.373090384864065e-02, 3.029699961466519e+00, 1.587028776059792e+00, 1.587028776059800e+00, 6.627170873969103e+03, 5.766654701545130e+03, 8.587779736257212e+01, 6.002474578053267e+04, 5.950761508640646e+03, 5.950761508640646e+03, 4.966481484388988e-05, 4.963832541585424e-05, 4.468928543130675e-04, 4.964142322732896e-05, 4.032691168170444e-04, 4.965134880217488e-05, 8.433786794219566e-03, 9.175757456847101e-04, 1.419915172734239e-03, 1.192910436312769e-03, 1.107534872723305e-03, 6.542723080421116e-03, 3.582056968717880e-02, 2.794751848419684e-02, 4.192477159677918e-02, 3.694740853876635e-02, 3.198975036394844e-02, 3.198975036394844e-02, 6.874661564123028e+01, 1.130085553678851e+00, 7.146641680363905e+01, 9.931433794022008e-04, 3.758875468480981e+01, 4.381232151962217e+01, 6.686072115148076e+04, 4.479387102161443e+04, 9.574968365468711e+05, 2.853046452092726e+02, 5.921636393025101e+04, 5.329472753618889e+05, 3.260261338661207e-02, 2.981735853562662e-01, 2.964590738341339e-01, 3.279392370300551e-02, 2.958018788632362e-01, 3.286687544179676e-02, 3.235901009865906e-01, 1.829846442422344e-01, 4.832473560024299e-02, 3.544537309476887e-01, 4.561842194817579e-02, 4.561842194817580e-02, 2.424595009836341e-02, 5.111779120123900e+00, 3.051361693046130e+00, 1.459731825694494e+00, 2.345187703252563e-01, 2.345187703252564e-01, 8.043834405074447e-02, 1.080934593603283e+02, 4.356798783086257e+01, 1.923693535970697e-01, 1.285800936427690e+02, 1.174017779741125e+02, 3.705071635496235e+04, 2.182732475721235e+06, 2.865708569544382e+06, 1.479597509091815e+02, 8.682210882733632e+05, 8.682210925370160e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_csk1_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([3.303332583796709e-02, 3.303349890037890e-02, 3.303393095507935e-02, 3.303107420766189e-02, 3.303342004738408e-02, 3.303342004738408e-02, 1.662778777798022e-01, 1.662747464188336e-01, 1.661642988655263e-01, 1.661080768105162e-01, 1.662774593420241e-01, 1.662774593420241e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.577774631164604e-01, 1.593019201500872e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.585182641938912e-01, 1.585182641938911e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666667e-01, 2.740089298747420e-05, 1.666666666666667e-01, 1.829130504264520e-02, 1.666666666666667e-01, 4.078097855026046e-06, 1.666666666666667e-01, 1.562020868092409e-01, 1.607683287162579e-01, 1.622478276043998e-01, 3.832368489471179e-02, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.931420303634611e-05, 1.666666666666667e-01, 5.862246673738332e-07, 1.666666666666667e-01, 2.900392740879396e-02, 2.761746493306899e-03, 1.666666666666667e-01, 1.666666666666667e-01, 9.290615291106699e-17, 4.888617329731214e-06, 1.666666666666667e-01, 3.648367702997805e-12, 1.666666666666666e-01, 4.327821239878863e-11, 1.201518149002897e-13, 1.666666666666667e-01, 7.158562939382968e-11, 1.666666666666667e-01, 2.204054057465847e-13, 1.182814482584412e-01, 1.666666666666667e-01, 1.583474519028972e-02, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.583533659141507e-06, 6.873962154218327e-07, 7.749183778323781e-05, 1.666666666666667e-01, 1.666666666666667e-01, 1.651745580755321e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666014893e-01, 1.005651149517617e-06, 1.630152999366659e-02, 1.327825254292227e-09, 1.666666666666667e-01, 1.036032954571429e-12, 1.546130473614526e-04, 9.237159476222673e-10, 2.943382856039152e-12])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
