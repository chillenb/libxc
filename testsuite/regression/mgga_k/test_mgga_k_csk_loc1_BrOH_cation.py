
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_k_csk_loc1_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk_loc1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.084991934289684e+03, 2.084993439726916e+03, 2.085020001528445e+03, 2.084997045609393e+03, "nan", 2.912657755429441e+156, 2.860189826071580e+245, 3.059549954102455e+211, 3.058867238655125e+211, 3.410157047945704e+211, 1.622563350064272e+226, 3.071450112196073e+240, 3.536097025264158e+199, 1.755364951075030e+228, 1.680225146141939e+270, 2.344328162695742e+247, 1.540472974501628e+209, 1.402148315903926e+228, 6.255729818288003e-01, 6.034095181750481e-01, 7.195042005631812e+160, 3.339444173906740e+220, 2.354954291800527e+220, 1.341897053525275e+182, 4.397789455498693e+205, 3.399937761862116e+74, 3.280247930024550e+251, 7.428055519183769e+167, 6.314012480865671e+282, 2.667215319883710e+167, 1.353788600516714e+235, 3.086002645354014e+206, 8.877286261721769e+239, 5.912154760013694e+225, 4.610494468123933e+225, 2.777088783344888e+243, 8.741994943779360e+245, 1.038143867667045e+222, 3.588810747726025e+196, 6.681312417026458e+250, 1.738265541538523e+251, 3.358156694164280e+249, 2.677488968763114e+257, 1.805724238878289e+180, 1.605803514192576e+251, 1.429919085634367e+251, 3.596692632863021e+252, 4.536476067584577e+247, 6.146438359250669e+182, 1.510077842399297e+254, 2.074118819600632e+245, 1.632501032554019e+01, 1.136694086285393e+234, 3.773886623210748e+177, 1.081223374872610e+234, 1.360973837327973e+259, 8.781182031191250e+167, 4.555627677366932e+231, 1.938606731824472e+248, 2.316231613001849e+186, 4.691026604438281e+247, 2.100416022489712e+233, 8.040486505962239e+194, 1.923045571737706e+246, 2.145086158494427e+209, 7.320147266381500e+247, 3.117782366774094e+242, 3.650648597524732e+209, 2.298648856830016e+214, 3.854506038569892e+257, 8.781911168433164e+213, 5.474828445526463e+223, 3.331830304176220e+223, 2.716559404153482e+258, 6.932831400172621e+171, 1.007037371928936e+234, 3.021528044262502e+229, 2.412970361013346e+248, 5.006526827080111e+257, 2.707554796801036e+246, 3.304557997439179e+217, 5.895727719430736e+174, 1.235889033806536e+183, 9.936498506084693e+230, 1.737108407318186e+205, 1.659093545102420e+251, 9.570579012524230e+254, 1.391088786749394e+212, 6.662451720018736e+167, 8.583482907790346e+233]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_k_csk_loc1_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk_loc1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [2.566487463882490e+03, 2.566486118650926e+03, 2.566570784751897e+03, 2.566546656199656e+03, 2.566751486382951e+03, 2.566829683952213e+03, 2.565811968112152e+03, 2.565631485427723e+03, "nan", "nan", -3.717779009464975e+140, 7.788495455912543e+139, -4.523399920556475e+229, -4.247186587855858e+230, -4.326494947606588e+195, -1.041704162930715e+196, 6.502485323357251e+195, -4.832466907705342e+196, -4.467274336734744e+195, -1.665329970138405e+196, -1.181965884795175e+211, 1.561174393891836e+211, -2.345368917976848e+225, 2.962992836168387e+225, -4.700775584610510e+183, -4.700775584610510e+183, 1.778026459901151e+213, -8.334406995916275e+212, -1.002280518143767e+255, 8.055873741616200e+254, 2.394435329231211e+231, 5.898394440302937e+231, 5.764706965483754e+193, -2.429871784518298e+193, -1.045686670415168e+213, -2.898701854494353e+212, -5.767010676083871e-01, -5.495872883722049e-01, -5.498525261259061e-01, -5.200395568130333e-01, -1.768971817120446e+145, -1.768971817120446e+145, 3.483891885523432e+204, -2.307712729037758e+204, -1.211021716014731e+205, -2.441110909796532e+205, 1.333498868860470e+166, -3.486377458799696e+166, -1.933740022409839e+189, -1.933740022409839e+189, 8.290634208551040e+58, -1.840535062507210e+59, -8.379506325235727e+235, 5.813251803429761e+235, -8.202297731951447e+151, 6.539188643517071e+152, 1.158054745743784e+267, -1.718672439500689e+267, 3.121443829215302e+152, -1.257563366843145e+153, -5.962235787994404e+219, -4.417750132248725e+219, 8.108924503482668e+190, -3.594008434465440e+190, -2.067080885814688e+224, -6.115968425575305e+224, 3.464827165675130e+209, -1.812247206137292e+210, -1.410446279014426e+209, 5.783625532129565e+209, -1.732492196716054e+228, 3.410578274724050e+227, -1.101995547923444e+231, -3.805189431844723e+230, -2.140333078431550e+206, -6.156521739665589e+205, -2.136653377951450e+181, 2.418223739375652e+181, 4.880023146704800e+235, 1.359236289058220e+234, 2.969275144279295e+235, 5.380312166665503e+235, 2.603000551337383e+233, -1.623322618605487e+234, -1.018823868864276e+242, 1.118748686995529e+242, -9.393637632699215e+164, -9.393637632699215e+164, -3.777101002666542e+234, 6.082276889285780e+235, -4.945591469837847e+235, 9.567125693662091e+235, 6.986167868342808e+237, 2.195381303415559e+237, 1.679422170125230e+232, -4.091950195228793e+231, 4.935477357258735e+165, -8.620089292768082e+166, -5.625829712044668e+238, -2.173833454259194e+238, -9.868081127426048e+229, -9.626612257022541e+228, 2.813752332954562e+01, 2.811265549944767e+01, 6.794483001035747e+218, 2.385815517407754e+218, -4.854349835260655e+161, 1.200184018163635e+162, -1.324482883637039e+219, -6.409743216035966e+218, -7.448268943947776e+243, 5.997376074057067e+243, -1.865062271597264e+151, 1.043072911087710e+152, 2.619580798239386e+216, 2.619580798239386e+216, -3.544177673793074e+233, -2.305435376148776e+232, 3.331042425244470e+170, -1.649664589656238e+171, 4.931303669701175e+231, -1.526778655205836e+232, 1.479277158261555e+218, 4.212712340605289e+217, -1.855405542161328e+179, -4.983580334507328e+179, -9.385263507151008e+230, -1.565864083235734e+231, 2.054667943922382e+194, 2.892551539584556e+193, 7.054419767168699e+232, -1.956662874252635e+232, 3.511971990767463e+227, 2.092856742293940e+227, 1.132129305427228e+194, 4.405695385135230e+193, -2.336329302875829e+198, 1.587814005307327e+199, -1.736848904089661e+242, -4.137153502790355e+241, 5.485320025329367e+197, 1.936747287785187e+198, 1.621101343633038e+208, 1.621101343633038e+208, 8.566798566845612e+207, -1.575945323077219e+208, -2.351653978999049e+242, -1.946139694950490e+243, 3.978013618270669e+155, 2.384152664274704e+156, 9.712734785650136e+218, -2.056455023725409e+218, 5.364534927619328e+213, 2.426209636098507e+214, -6.026233999272294e+232, -6.026233999272294e+232, 9.136468440888175e+242, 2.827050121840902e+242, 2.097800640034814e+231, -2.757883931083777e+230, -7.460639836791017e+201, -3.664802028579991e+201, 3.132944505627078e+159, -2.116203764845422e+159, -4.045035862659176e+167, 3.207000786878805e+167, -5.262662126249520e+215, 1.361627522052652e+215, 1.364517980687379e+190, 2.225050391455978e+189, -7.408928858333846e+235, 4.836664529393479e+235, 2.122529078893330e+239, 2.122529078893330e+239, -1.447375384829033e+197, 2.178143435441699e+196, -3.402918976600750e+152, 3.343141018342878e+149, -1.379298881435552e+218, 2.925356354127546e+218]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_csk_loc1_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk_loc1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [4.600356444895102e-06, 0.000000000000000e+00, 4.600352292108520e-06, 4.600033255424869e-06, 0.000000000000000e+00, 4.600117430192617e-06, 4.599362503721456e-06, 0.000000000000000e+00, 4.599054309168050e-06, 4.603006650578917e-06, 0.000000000000000e+00, 4.603702050519631e-06, 4.600145427513324e-06, 0.000000000000000e+00, "nan", 4.600145427513324e-06, 0.000000000000000e+00, -2.133699608292075e-06, 1.644939131247689e-03, 0.000000000000000e+00, -4.944206313606236e-04, -4.943957568574284e-04, 0.000000000000000e+00, -4.944188657519541e-04, -4.943122524514328e-04, 0.000000000000000e+00, -4.942817240514452e-04, -4.942176155413913e-04, 0.000000000000000e+00, -4.941968079835725e-04, 1.646605410772256e-03, 0.000000000000000e+00, -4.940936622513430e-04, -4.946484918998246e-04, 0.000000000000000e+00, -4.940936622513430e-04, -6.931179800653445e-02, 0.000000000000000e+00, -6.849406792292891e-02, -6.963641829989027e-02, 0.000000000000000e+00, -6.862873495172268e-02, -7.417400356429271e-02, 0.000000000000000e+00, -7.572830547024959e-02, -7.334552139519983e-02, 0.000000000000000e+00, -7.287090193642294e-02, -6.694201655940997e-02, 0.000000000000000e+00, 4.594486358220689e-01, -6.694201655940997e-02, 0.000000000000000e+00, -8.146462951157815e-02, 2.529511950496239e+01, 0.000000000000000e+00, 2.247393995248954e+01, 2.433121631530606e+01, 0.000000000000000e+00, 2.125802682815378e+01, 2.155453404976942e-01, 0.000000000000000e+00, -4.140615690724840e-02, -9.338617457031940e+00, 0.000000000000000e+00, -8.962415989619171e+00, -3.728587405423126e+00, 0.000000000000000e+00, -2.414789258665025e+01, -3.728587405423121e+00, 0.000000000000000e+00, 1.461845623380863e+02, 6.324502891647868e+05, 0.000000000000000e+00, -8.697182560922936e+04, 5.496562592031311e+05, 0.000000000000000e+00, -7.377342614215957e+04, -5.275313869692275e+02, 0.000000000000000e+00, -4.479592262482792e+02, 2.911560186073127e+06, 0.000000000000000e+00, -5.052455458802899e+05, -1.469860621409361e+05, 0.000000000000000e+00, 4.834051135477696e+06, 8.908246081239239e+05, 0.000000000000000e+00, -7.976184399510326e+05, -1.472586842491321e-04, 0.000000000000000e+00, -1.473645573290202e-04, 1.366724519043030e-04, 0.000000000000000e+00, -1.472848212505277e-04, -1.472536604628397e-04, 0.000000000000000e+00, -1.473615009287910e-04, -1.471829013767182e-04, 0.000000000000000e+00, -1.472890679530835e-04, -1.472167756227923e-04, 0.000000000000000e+00, -1.473245591380972e-04, -1.472167756227923e-04, 0.000000000000000e+00, 1.392004792446630e-04, -2.773674372554658e-03, 0.000000000000000e+00, 1.475530287854715e-02, -2.713280958506702e-03, 0.000000000000000e+00, 1.436574742507581e-02, -2.825746272419394e-03, 0.000000000000000e+00, -2.811134687988966e-03, 1.488026401670030e-02, 0.000000000000000e+00, -2.757183336921718e-03, -2.702134405387215e-03, 0.000000000000000e+00, -2.737948509413763e-03, 1.416883797641405e-02, 0.000000000000000e+00, -2.737948509413763e-03, -1.025335659798429e-01, 0.000000000000000e+00, -1.033522695104260e-01, -8.034770046340062e-02, 0.000000000000000e+00, -8.023837098314476e-02, -1.373710303756100e-01, 0.000000000000000e+00, -1.232695380472547e-01, -1.216373575430305e-01, 0.000000000000000e+00, -4.756406297930343e-02, -9.114341563490407e-02, 0.000000000000000e+00, -1.062500958298354e-01, -9.114341563490407e-02, 0.000000000000000e+00, -1.062500958298355e-01, -2.772532128482061e+01, 0.000000000000000e+00, -2.694703519272505e+01, -4.013980501624541e+00, 0.000000000000000e+00, -3.954479255697701e+00, -3.745231745831648e+01, 0.000000000000000e+00, -3.201032277111278e+01, -2.612633620795315e-03, 0.000000000000000e+00, -2.618912829917272e-03, -1.850696987331730e+01, 0.000000000000000e+00, -1.556805053927049e+01, -1.850696987331730e+01, 0.000000000000000e+00, 9.410259415819421e+01, -1.137880614283164e+06, 0.000000000000000e+00, 6.144157409836779e+06, -5.393192492064009e+05, 0.000000000000000e+00, -5.155543621544106e+05, 7.817219820454814e+06, 0.000000000000000e+00, -1.085937822937839e+06, -1.145047929881029e+02, 0.000000000000000e+00, -1.124183374456558e+02, -1.210640295064698e+06, 0.000000000000000e+00, -4.674117176644959e+05, -1.210640295064698e+06, 0.000000000000000e+00, -4.674117176644955e+05, -1.020468181015161e-01, 0.000000000000000e+00, -1.008720307405895e-01, -9.119322290079350e-02, 0.000000000000000e+00, -1.026225276366914e-01, -1.004765995061875e-01, 0.000000000000000e+00, -1.020002502397344e-01, -1.026788784120382e-01, 0.000000000000000e+00, -1.014966877624549e-01, -1.018965214020953e-01, 0.000000000000000e+00, -1.017483878258304e-01, -1.029388801247870e-01, 0.000000000000000e+00, -1.017483878258304e-01, -1.107231034591138e-01, 0.000000000000000e+00, -1.096322706917914e-01, -1.753059750077852e-01, 0.000000000000000e+00, -1.730471326955794e-01, -1.526957216577620e-01, 0.000000000000000e+00, -1.506806546993901e-01, -1.337486618824764e-01, 0.000000000000000e+00, -1.323476224992790e-01, 3.739261719500555e-01, 0.000000000000000e+00, -1.413694453425234e-01, -1.429507433718234e-01, 0.000000000000000e+00, -1.413694453425234e-01, -6.985503566990114e-02, 0.000000000000000e+00, -6.951465508943719e-02, -1.992670648413678e+00, 0.000000000000000e+00, 1.167720824730448e+01, -1.157804754113443e+00, 0.000000000000000e+00, -1.123655614674641e+00, -4.990236631256372e-01, 0.000000000000000e+00, 2.427556391564358e+00, -7.520821758590905e-01, 0.000000000000000e+00, -7.528786651416955e-01, -7.520821758590915e-01, 0.000000000000000e+00, -7.528786651416954e-01, -2.255249834329638e-01, 0.000000000000000e+00, 1.035034908391000e+00, -5.582772303658172e+02, 0.000000000000000e+00, -5.469726574138023e+02, 1.390117712011437e+03, 0.000000000000000e+00, -2.078035487854040e+02, 2.422421528588067e+00, 0.000000000000000e+00, -5.402841971589643e-01, -5.982417150145668e+01, 0.000000000000000e+00, -5.081755272999838e+01, -5.982417150145665e+01, 0.000000000000000e+00, -5.081755272999841e+01, -3.565324348573379e+04, 0.000000000000000e+00, 1.941850974030745e+05, -2.769565331682714e+07, 0.000000000000000e+00, -2.750661715013094e+07, -3.287506014520127e+06, 0.000000000000000e+00, 1.656041586992740e+07, -6.802070409976960e+01, 0.000000000000000e+00, 3.925243931763756e+02, -1.424534685595745e+06, 0.000000000000000e+00, -6.070121839031006e+05, 8.633543515944885e+06, 0.000000000000000e+00, -6.070121839031026e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_csk_loc1_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk_loc1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [1.200693197969843e-01, 1.200696357909950e-01, 1.200733352785915e-01, 1.200725539732998e-01, 1.200808204960515e-01, 1.200847852270816e-01, 1.200355606300755e-01, 1.200270547826876e-01, 1.200719842933662e-01, "nan", 1.200719842933662e-01, 2.171249999999999e-01, 8.405849286997409e-02, 2.171250000000000e-01, 2.171250000000002e-01, 2.171250000000001e-01, 2.171250000000000e-01, 2.171250000000001e-01, 2.171250000000000e-01, 2.171250000000000e-01, 8.400622007942155e-02, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000001e-01, 2.171250000000001e-01, 2.171250000000001e-01, 2.171250000000002e-01, 2.171250000000001e-01, 2.171250000000001e-01, 2.171250000000001e-01, 2.171250000000000e-01, 1.293879578721786e-02, 2.171250000000000e-01, 2.171250000000001e-01, 3.126586827404818e-03, 3.816401926102813e-03, 3.512958954777161e-03, 4.388010340960619e-03, 4.140853813777976e-02, 2.171250000000002e-01, 2.171250000000000e-01, 2.171250000000002e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171249999999999e-01, 2.117803326017656e-04, 3.612430669311192e-09, 2.171250000000001e-01, 4.590693784873441e-09, 2.171250000000001e-01, 2.171250000000001e-01, 2.171250000000000e-01, 4.313595227372625e-10, 2.171250000000000e-01, 2.171249999999999e-01, 6.068710148259382e-10, 2.282959177288020e-09, 2.171250000000001e-01, 2.171250000000000e-01, 2.171250000000000e-01, 1.578164809714013e-01, 2.171250000000000e-01, 2.171249999999999e-01, 2.171250000000000e-01, 2.171249999999999e-01, 2.171250000000000e-01, 2.171249999999999e-01, 2.171250000000000e-01, 2.171249999999999e-01, 1.573175508736213e-01, 2.171250000000000e-01, 2.280677524692480e-02, 2.171250000000002e-01, 2.368869702210728e-02, 2.171250000000001e-01, 2.171250000000000e-01, 2.130367731931817e-02, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.512509334895033e-02, 2.171250000000000e-01, 2.171250000000003e-01, 2.171250000000002e-01, 2.171250000000001e-01, 2.171250000000002e-01, 2.171250000000001e-01, 2.171250000000001e-01, 2.171250000000000e-01, 1.996371474948241e-01, 2.171249999999999e-01, 2.171250000000000e-01, 2.171249999999999e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000002e-01, 2.171250000000001e-01, 2.171250000000003e-01, 2.171250000000000e-01, 2.171250000000002e-01, 2.137257689870214e-01, 2.137545701581151e-01, 2.171249999999999e-01, 2.171249999999998e-01, 2.171249999999999e-01, 4.922992974874243e-04, 2.171250000000000e-01, 1.935807135009890e-10, 2.171249999999999e-01, 2.171250000000000e-01, 7.961641281016017e-10, 2.171250000000000e-01, 2.171249999999999e-01, 2.171250000000000e-01, 2.171250000000001e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000001e-01, 2.171250000000001e-01, 2.171248655822342e-01, 2.133825049769415e-01, 2.171249999999999e-01, 2.163136779026652e-01, 2.171250000000001e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.168136093155484e-01, 2.171249999999999e-01, 2.171250000000000e-01, 2.171249999999999e-01, 2.171249999999999e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000001e-01, 2.171250000000000e-01, 2.171250000000001e-01, 2.171250000000001e-01, 2.171250000000001e-01, 1.059342733575238e-01, 2.171250000000000e-01, 2.171250000000001e-01, 2.171250000000000e-01, 2.171250000000001e-01, 2.171250000000001e-01, 2.171250000000001e-01, 3.018108211379973e-03, 2.171250000000001e-01, 2.171250000000000e-01, 2.171250000000000e-01, 3.428356933542916e-02, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000001e-01, 2.171250000000000e-01, 2.171249999999997e-01, 4.230482096978365e-02, 2.171250000000000e-01, 2.171250000000001e-01, 7.380520898043159e-06, 2.171250000000000e-01, 5.454913052075418e-02, 2.171249999999999e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000001e-01, 2.171250000000001e-01, 2.171250000000001e-01, 1.414320058178409e-08, 2.171250000000000e-01, 2.171249999999999e-01, 2.171250000000001e-01, 1.205225270824546e-10, 2.171250000000002e-01, 6.700468506289366e-05, 2.171250000000001e-01, 2.171250000000000e-01, 7.149710079768221e-10, 2.171250000000000e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_csk_loc1_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk_loc1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
