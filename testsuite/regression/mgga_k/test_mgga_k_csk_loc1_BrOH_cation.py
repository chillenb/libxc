
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_k_csk_loc1_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk_loc1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([1.489851334430384e+03, 1.489832984177188e+03, 1.489795901371635e+03, 1.490067834033409e+03, 1.489919026620656e+03, 1.489919026620656e+03, 8.117593629043728e+01, 8.115940795993328e+01, 8.072218147808243e+01, 8.087441700816009e+01, 8.086191781341599e+01, 8.086191781341599e+01, 6.392077341341224e+00, 6.415750530304082e+00, 7.000348483115234e+00, 6.635871817955401e+00, 6.701465855457647e+00, 6.701465855457647e+00, 7.090921626337117e-01, 6.904471659388722e-01, 1.430273942074244e+01, 1.024017739760632e+00, 8.447403396852075e-01, 8.447403396852076e-01, 8.968385490439417e-01, 8.811991555995859e-01, 1.137675361646977e+00, 1.019564569646807e+00, 9.060517478531671e-01, 9.060517478531672e-01, 1.465472604663846e+03, 5.502997621045167e+02, 4.221989483248338e+01, 2.995815313546636e+03, 5.829675603986433e+01, 2.210555125365547e+02, 2.723900729368145e+01, 7.491719763306187e+01, 4.038555594026083e+01, 3.982978014679729e+01, 3.962422859824630e+01, 3.196962320962786e+01, 4.562583970262341e+01, 1.574864455573147e+01, 3.746213913997092e+01, 2.306482546969651e+00, 2.572922685775321e+00, 3.589365829236932e+00, 9.221219903361604e-01, 6.884763541130749e+00, 8.996876898306405e-01, 2.718489286853522e+01, 7.518932796037701e-01, 7.461354324602123e-01, 6.502302851390624e+00, 6.591661934055846e+03, 2.817690239787659e-01, 8.108016247751726e-01, 1.644562371698291e+00, 4.137919034161891e-01, 2.747938556277159e+05, 2.203789087598514e-01, 1.710097731319566e-01, 2.461317519399357e+03, 1.505895121405608e-01, 3.478018574211976e+06, 3.573556137483544e-02, 1.714007870581972e+00, 2.401030963803530e+01, 6.496290906662490e-01, 2.749234937147462e+00, 5.973399450638796e+01, 6.119916727547810e+01, 1.064855352033489e+00, 9.839946072796186e-01, 6.783970672933733e-01, 2.889420842814756e+00, 1.833077578282133e+00, 1.758836966213886e+00, 9.656324998873423e-01, 1.363112907683118e+00, 9.068742384038047e-01, 7.157458038111782e-01, 7.178386172801102e-01, 8.120356352603115e-01, 3.205942872059527e-01, 4.583345262482855e-01, 7.258255249190928e-01, 3.710531394368386e-01, 3.710531393996668e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_k_csk_loc1_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk_loc1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([7.956997748535963e+02, 7.956068343535596e+02, 7.957393846800618e+02, 7.956356103832317e+02, 7.958186091587402e+02, 7.957623148129994e+02, 7.953717340485783e+02, 7.951926436768607e+02, 7.957258057788458e+02, 7.953852102543785e+02, 7.957258057788458e+02, 7.953852102543785e+02, 9.640338278996956e+01, 9.642804188128488e+01, 9.639563320949111e+01, 9.642499475411745e+01, 9.626328761615370e+01, 9.624636931089506e+01, 9.621303173860990e+01, 9.624057171007303e+01, 9.639292197278201e+01, 9.610763610314913e+01, 9.639292197278201e+01, 9.610763610314913e+01, 3.756506500099534e+00, 3.766598281794700e+00, 3.751632436794961e+00, 3.763929035542038e+00, 3.689407178755257e+00, 3.676038214007667e+00, 3.735531850130938e+00, 3.739215810366816e+00, 3.795663789772751e+00, 3.698046891473397e+00, 3.795663789772751e+00, 3.698046891473397e+00, 3.199878648009643e-01, -1.447056402531072e-02, 3.223137453271447e-01, 3.960899054349168e-03, 4.943320701004588e+00, 5.180577288061650e+00, 2.546749699255895e-01, 2.593778014075070e-01, 2.905940932751647e-01, 1.980039370079746e-01, 2.905940932751639e-01, 1.980039370079744e-01, 1.203226544935575e-01, 1.209429077140683e-01, 1.172320984018058e-01, 1.175493355350594e-01, 1.608097234572421e-01, 1.607900871216981e-01, 1.256519508603083e-01, 1.273912297753425e-01, 1.204025009470365e-01, 7.556290244339553e-02, 1.204025009470366e-01, 7.556290244339503e-02, 2.116991933755359e+02, 2.116000446009548e+02, 2.117226385929372e+02, 2.116226608109525e+02, -3.837375885329228e+01, -3.870602650166258e+01, 2.117212689316594e+02, 2.116218361622012e+02, 1.466508506811789e+01, 1.488901928408340e+01, 2.117106685849164e+02, 2.116113017625451e+02, -2.709834935604898e+01, -2.707987125295925e+01, 3.381703059877874e+01, 3.380111608937911e+01, 2.611796466639571e+01, 2.672352795090338e+01, 2.344870069879465e+01, 2.600026263779966e+01, 3.074499006713456e+01, 2.883194331296046e+01, -4.529783964686912e+00, -4.656149126203722e+00, 2.750343553835429e+00, 2.735395822946872e+00, 3.114022923920202e+00, 3.115517737339300e+00, 2.285898563967190e+00, 2.443982025228806e+00, 2.373345911930904e+00, 2.535102740600377e+00, 2.955199118664393e+00, 2.673673076879547e+00, 2.955199118664394e+00, 2.673673076879550e+00, -9.281533545812828e-01, -9.146662411576502e-01, 3.907131925128224e-01, 3.930488203249254e-01, -9.014444969672289e-01, -8.980064264601264e-01, 2.824152742592591e+01, 2.821553311570680e+01, -7.457673231351272e-01, -6.004365746792955e-01, -7.978202622116057e-01, -6.674888964679671e-01, 1.060405991728725e-01, 1.139804197906367e-01, 1.142863961494807e-01, 1.189398303398156e-01, -2.899528173098991e-01, -2.748789586025910e-01, -8.028002938169813e-01, -8.184133694090665e-01, 6.790505525240706e-02, 6.853302567187824e-02, -4.112409723303774e-01, -4.147767830146939e-01, 2.629495587075940e+00, 2.649470338735839e+00, -2.216647966083675e-01, -2.190136691469803e-01, -1.723411225550990e-01, -1.696884075432823e-01, 2.627042058051376e+00, 2.646940696534240e+00, -1.515347358259871e-01, -1.493555365816976e-01, 2.626063635300404e+00, 2.645950692174201e+00, -3.577233220015955e-02, -3.568981343705590e-02, 1.023966912087755e+00, 9.955139726818786e-01, 2.135815283742999e+00, 2.152307170427874e+00, 5.731765685280206e-02, -2.560794140674166e-02, 2.197937985001317e+00, 2.213418656869881e+00, 2.197937985001305e+00, 2.213418656869911e+00, 3.423805412529185e+00, 3.432700007333101e+00, -1.064767959011303e+00, -1.062245914384107e+00, -9.899220518579269e-01, -9.751930244026712e-01, -6.407007008756020e-01, -6.417707856505117e-01, 8.275944326588229e-01, 8.258539192523456e-01, 8.275944326588218e-01, 8.258539192523440e-01, 1.668683903437177e+00, 1.683375840190190e+00, -9.661165370694415e-01, -9.651177932770423e-01, 1.719481197672131e-01, 1.706301210982520e-01, 9.094627263467996e-01, 8.992265848675846e-01, -7.597996147815734e-01, -6.781106011986265e-01, -7.302405488195461e-01, -6.640290792045893e-01, -8.165376857897390e-01, -8.079897558218980e-01, -3.662903376933667e-01, -2.752101342333732e-01, -4.661839788557920e-01, -4.518103152043033e-01, -7.219875959577063e-01, -7.273622950321927e-01, -2.863698114135331e-01, -4.071377723461193e-01, -2.863698114438906e-01, -4.071377725131228e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_csk_loc1_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk_loc1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.095582198090736e-05, 0.000000000000000e+00, 1.095607662204851e-05, 1.095570083444364e-05, 0.000000000000000e+00, 1.095598857242912e-05, 1.095531783179213e-05, 0.000000000000000e+00, 1.095543873679245e-05, 1.095668762431466e-05, 0.000000000000000e+00, 1.095718406034508e-05, 1.095574947707960e-05, 0.000000000000000e+00, 1.095649019055665e-05, 1.095574947707960e-05, 0.000000000000000e+00, 1.095649019055665e-05, -4.445463223455790e-04, 0.000000000000000e+00, -4.467074992152328e-04, -4.440710684934492e-04, 0.000000000000000e+00, -4.465804298897693e-04, -4.365724105641769e-04, 0.000000000000000e+00, -4.356401225004803e-04, -4.299847077395925e-04, 0.000000000000000e+00, -4.319507473464677e-04, -4.459703106938064e-04, 0.000000000000000e+00, -4.241234404225766e-04, -4.459703106938064e-04, 0.000000000000000e+00, -4.241234404225766e-04, -6.931179800653445e-02, 0.000000000000000e+00, -6.849406792292891e-02, -6.963641829989027e-02, 0.000000000000000e+00, -6.862873495172268e-02, -7.417400356429271e-02, 0.000000000000000e+00, -7.572830547024959e-02, -7.334552139519983e-02, 0.000000000000000e+00, -7.287090193642294e-02, -6.694201655940997e-02, 0.000000000000000e+00, -8.146462951157815e-02, -6.694201655940997e-02, 0.000000000000000e+00, -8.146462951157815e-02, -4.215436479716702e+00, 0.000000000000000e+00, 8.088915901608626e+00, -4.090820830238328e+00, 0.000000000000000e+00, 7.580469494340650e+00, -4.572395320232218e-02, 0.000000000000000e+00, -4.140615690724840e-02, -9.338617457031940e+00, 0.000000000000000e+00, -8.962415989619171e+00, -1.917945184480947e+00, 0.000000000000000e+00, -2.414789258665025e+01, -1.917945184480921e+00, 0.000000000000000e+00, -2.414789258665024e+01, -1.043542997348642e+05, 0.000000000000000e+00, -8.697182560922936e+04, -9.069328500244662e+04, 0.000000000000000e+00, -7.377342614215957e+04, -5.275313869692275e+02, 0.000000000000000e+00, -4.479592262482792e+02, -4.804074318139646e+05, 0.000000000000000e+00, -5.052455458802899e+05, -1.469860621409361e+05, 0.000000000000000e+00, -7.976184399510334e+05, -1.469860621409361e+05, 0.000000000000000e+00, -7.976184399510326e+05, -1.472586842491321e-04, 0.000000000000000e+00, -1.473645573290202e-04, -1.471762149091606e-04, 0.000000000000000e+00, -1.472848212505277e-04, 8.923350877876708e-04, 0.000000000000000e+00, 8.930118147200014e-04, -1.471829013767182e-04, 0.000000000000000e+00, -1.472890679530835e-04, 8.523904192075009e-04, 0.000000000000000e+00, 8.526455166900096e-04, -1.472167756227923e-04, 0.000000000000000e+00, -1.473245591380972e-04, 1.681001518010033e-02, 0.000000000000000e+00, 1.681251682636491e-02, -2.713280958506702e-03, 0.000000000000000e+00, -2.715497349859211e-03, 7.388014155090448e-04, 0.000000000000000e+00, 5.009418530080067e-04, 2.103951180333654e-03, 0.000000000000000e+00, 9.973710268592739e-04, -1.114011663650950e-03, 0.000000000000000e+00, -2.779510167466705e-04, 1.285835332629537e-02, 0.000000000000000e+00, 1.283854421116814e-02, -1.025335659798429e-01, 0.000000000000000e+00, -1.033522695104260e-01, -8.034770046340062e-02, 0.000000000000000e+00, -8.023837098314476e-02, -1.373710303756100e-01, 0.000000000000000e+00, -1.232695380472547e-01, -1.216373575430305e-01, 0.000000000000000e+00, -1.102758061066137e-01, -9.114341563490407e-02, 0.000000000000000e+00, -1.062500958298354e-01, -9.114341563490407e-02, 0.000000000000000e+00, -1.062500958298355e-01, 1.680240008487447e+02, 0.000000000000000e+00, 1.633068831938091e+02, -4.013980501624541e+00, 0.000000000000000e+00, -3.954479255697701e+00, 2.269835239784525e+02, 0.000000000000000e+00, 1.940017261500830e+02, -2.937320018813114e-03, 0.000000000000000e+00, -2.941282504421439e-03, 1.062220198153097e+02, 0.000000000000000e+00, 8.702953389626114e+01, 1.113902307458794e+02, 0.000000000000000e+00, 9.349317367437433e+01, -1.137880614283164e+06, 0.000000000000000e+00, -1.013785973676060e+06, -5.393192492064009e+05, 0.000000000000000e+00, -5.155543621544106e+05, 7.817219853849011e+06, 0.000000000000000e+00, 6.581441351138418e+06, 6.939619155666643e+02, 0.000000000000000e+00, 6.813187982117297e+02, -1.210640295064698e+06, 0.000000000000000e+00, -4.674117176644959e+05, 7.337213909482779e+06, 0.000000000000000e+00, 2.832798288874170e+06, -1.020468181015161e-01, 0.000000000000000e+00, -1.008724716623016e-01, 6.292686936089159e-01, 0.000000000000000e+00, 6.219547128778851e-01, 6.254503941824113e-01, 0.000000000000000e+00, 6.181833347860303e-01, -1.026788784120382e-01, 0.000000000000000e+00, -1.014966877624549e-01, 6.238719999265140e-01, 0.000000000000000e+00, 6.166568953080208e-01, -1.029388801247870e-01, 0.000000000000000e+00, -1.017483878258304e-01, 6.710491118725730e-01, 0.000000000000000e+00, 6.644380041918775e-01, 4.328631812911390e-01, 0.000000000000000e+00, 4.492485354186938e-01, -1.526957216577620e-01, 0.000000000000000e+00, -1.506806546993901e-01, 7.797686660048656e-01, 0.000000000000000e+00, 7.805249446867222e-01, -1.429507433718234e-01, 0.000000000000000e+00, -1.413694453425234e-01, -1.429507433718234e-01, 0.000000000000000e+00, -1.413694453425234e-01, -6.985503566990114e-02, 0.000000000000000e+00, -6.951465508943719e-02, 1.207673351427729e+01, 0.000000000000000e+00, 1.186936346391306e+01, 7.016977654925668e+00, 0.000000000000000e+00, 6.810013388195436e+00, 3.022583504585177e+00, 0.000000000000000e+00, 2.973182036398920e+00, -7.520821758590905e-01, 0.000000000000000e+00, -7.528786651416955e-01, -7.520821758590915e-01, 0.000000000000000e+00, -7.528786651416954e-01, -1.812770764563812e-01, 0.000000000000000e+00, -1.722462705114279e-01, 3.383493612663604e+03, 0.000000000000000e+00, 3.314979185690633e+03, -2.293785060364240e+02, 0.000000000000000e+00, -2.078035487854040e+02, -5.650959901475263e-01, 0.000000000000000e+00, -3.410826035974555e-01, 3.625700059731895e+02, 0.000000000000000e+00, 3.079840783149218e+02, 3.522282199520059e+02, 0.000000000000000e+00, 3.042165861779074e+02, 2.160802635421592e+05, 0.000000000000000e+00, 1.941851121125830e+05, 1.678524443439336e+08, 0.000000000000000e+00, 1.667067706067339e+08, 1.992427887587728e+07, 0.000000000000000e+00, 1.656041588063359e+07, 4.121154054466326e+02, 0.000000000000000e+00, 3.925986434499584e+02, 8.633543549052577e+06, 0.000000000000000e+00, 3.678861720586439e+06, 8.633543549060948e+06, 0.000000000000000e+00, 3.678861720614703e+06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_csk_loc1_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk_loc1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([2.846919235769000e-02, 2.846613228072392e-02, 2.846940799629028e-02, 2.846628949217601e-02, 2.846973014267491e-02, 2.846685024987356e-02, 2.846727932016699e-02, 2.846373332092500e-02, 2.846933981461337e-02, 2.846470187169275e-02, 2.846933981461337e-02, 2.846470187169275e-02, 2.140240863340506e-01, 2.141573738292340e-01, 2.139947847010271e-01, 2.141495696556997e-01, 2.135329525478935e-01, 2.134766279477806e-01, 2.131282478974167e-01, 2.132517120404334e-01, 2.140987451113053e-01, 2.127701638653929e-01, 2.140987451113053e-01, 2.127701638653929e-01, 2.171250000000000e-01, 2.171250000000001e-01, 2.171250000000001e-01, 2.171250000000001e-01, 2.171250000000002e-01, 2.171250000000001e-01, 2.171250000000001e-01, 2.171250000000001e-01, 2.171250000000000e-01, 2.171250000000001e-01, 2.171250000000000e-01, 2.171250000000001e-01, 2.169115052755100e-01, 1.206667039949427e-01, 2.171178158647017e-01, 1.214786270738821e-01, 2.171250000000002e-01, 2.171250000000002e-01, 2.171250000000000e-01, 2.171250000000002e-01, 2.021916870952971e-01, 2.171250000000000e-01, 2.021916870952968e-01, 2.171250000000001e-01, 2.171250000000000e-01, 2.171250000000001e-01, 2.171250000000001e-01, 2.171250000000001e-01, 2.171250000000001e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171249999999999e-01, 2.171250000000002e-01, 2.171249999999999e-01, 2.171250000000001e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171249999999999e-01, 2.171250000000000e-01, 2.325145210984774e-05, 1.840380543018516e-05, 2.171249999999999e-01, 2.171250000000000e-01, 8.320467222722396e-03, 8.397484333121463e-03, 2.171249999999999e-01, 2.171250000000000e-01, 1.469380534154300e-06, 1.989388927384349e-06, 2.171250000000002e-01, 2.171250000000001e-01, 1.783332728705430e-01, 1.808934794449280e-01, 1.630338437853854e-01, 1.752494424779964e-01, 1.990513874503945e-01, 1.894952319956546e-01, 4.003904879836079e-02, 4.217568339543443e-02, 2.171250000000003e-01, 2.171250000000002e-01, 2.171250000000001e-01, 2.171250000000002e-01, 2.171250000000001e-01, 2.171250000000001e-01, 2.171250000000000e-01, 2.171250000000001e-01, 2.171249999999999e-01, 2.171250000000000e-01, 2.171249999999999e-01, 2.171250000000000e-01, 9.149800814273746e-06, 9.679104743258256e-06, 2.171250000000001e-01, 2.171250000000003e-01, 1.791555601948337e-07, 2.209928816081795e-07, 2.171250000000001e-01, 2.171250000000001e-01, 9.872424172475837e-03, 1.446373304806883e-02, 1.284805284080374e-03, 1.696089114147320e-03, 2.171250000000000e-01, 2.171250000000000e-01, 2.171249999999999e-01, 2.171250000000000e-01, 1.542395833531695e-17, 5.857437244006130e-17, 1.752845034620703e-06, 1.219752006045021e-06, 2.171250000000001e-01, 2.171250000000000e-01, 6.073594930874340e-15, 1.027190030031048e-13, 2.171250000000001e-01, 2.171250000000002e-01, 2.136115157639222e-11, 2.150334343347311e-11, 7.190753575737435e-14, 7.197385488217521e-14, 2.171250000000000e-01, 2.171250000000000e-01, 2.478829040278605e-10, 1.831834871825157e-10, 2.171250000000000e-01, 2.171249999999999e-01, 2.343655869123298e-13, 2.236329179746180e-13, 1.104419256302806e-01, 1.065389819294167e-01, 2.171250000000000e-01, 2.171250000000001e-01, 7.088296152972653e-03, 5.014649044299407e-03, 2.171250000000001e-01, 2.171250000000000e-01, 2.171250000000001e-01, 2.171250000000000e-01, 2.171250000000001e-01, 2.171250000000001e-01, 8.996184363105496e-07, 8.909750800277056e-07, 5.539105666897253e-07, 5.648682605665166e-07, 1.110661286170602e-04, 9.935550391056672e-05, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000001e-01, 2.171250000000000e-01, 2.110915471502983e-01, 2.103486918818847e-01, 2.618201664904237e-07, 3.720072243028719e-07, 2.171250000000001e-01, 2.171250000000000e-01, 2.171249999999999e-01, 2.057869493265741e-01, 3.754494660497654e-07, 6.594460293865332e-07, 5.316396660876375e-03, 2.280510413844874e-03, 6.678062027742995e-12, 2.542941744704816e-11, 5.254703985576317e-13, 1.344254479573707e-13, 2.137819456102535e-14, 3.347112240610568e-14, 5.935336769546567e-05, 3.176279854128666e-05, 2.707065055073077e-13, 1.945986496304821e-12, 9.039917039164395e-14, 5.146948832535770e-13])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
