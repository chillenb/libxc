
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_k_pgsl025_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_pgsl025", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.328082967926192e+03, 2.328084270935316e+03, 2.328112814097113e+03, 2.328092974097859e+03, 2.328100127724952e+03, 2.328100127724952e+03, 6.613388455174265e+01, 6.613060852220249e+01, 6.605827942018321e+01, "nan", 6.613314509691648e+01, inf, 2.978665060089647e+00, inf, inf, inf, inf, inf, 2.986446738268972e+196, inf, 3.842054427345563e+00, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, 1.324269054322425e+02, inf, inf, 3.151743317445258e+01, 3.148396476783537e+01, 3.232946747862230e+01, 3.228771493319411e+01, 3.112167253975958e+01, inf, inf, inf, inf, inf, inf, 1.833503303817070e+00, 9.219337397850395e-01, inf, 8.996643050512182e-01, 2.693786543714294e+131, inf, inf, 6.674701683388641e-01, inf, inf, 8.107085906494393e-01, 4.129761035027057e-01, inf, inf, inf, 1.590249705358963e+00, inf, inf, inf, inf, inf, inf, inf, inf, 1.447792259565515e+00, inf, 1.067362427315622e+00, inf, 8.546519250391533e-01, inf, inf, 1.358472962563718e+00, inf, inf, inf, 7.143488347941994e-01, inf, inf, inf, 1.439086436167684e+106, inf, inf, inf]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_k_pgsl025_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_pgsl025", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [2.830532309840428e+03, 2.830578153915435e+03, 2.830738620339966e+03, 2.830057409253305e+03, 2.830420528719977e+03, 2.830420528719977e+03, 6.370556834850066e+01, 6.371487813180775e+01, 6.393284683109778e+01, "nan", 6.371980214738567e+01, "nan", 1.109607470171403e+00, "nan", "nan", "nan", "nan", "nan", -4.977411230448286e+196, "nan", 1.998430355029976e+00, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 1.835006385111731e+02, "nan", "nan", -3.998140183874765e+00, -3.041153038496350e+00, -6.280271783167175e+00, -5.434214268949319e+00, -2.373015136176318e+00, "nan", "nan", "nan", "nan", "nan", "nan", 2.154382188042734e+00, -9.219337389171687e-01, "nan", -8.996643050109695e-01, -4.489644239523826e+131, "nan", "nan", -6.674701683388641e-01, "nan", "nan", -8.107085906494386e-01, -4.129761035027057e-01, "nan", "nan", "nan", 2.562207749919708e+00, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 1.641992345328114e+00, "nan", -1.027142741404099e+00, "nan", 1.736675476204971e-01, "nan", "nan", 5.115554300877421e-01, "nan", "nan", "nan", -7.143488347900675e-01, "nan", "nan", "nan", -2.398477393612805e+106, "nan", "nan", "nan"]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_pgsl025_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_pgsl025", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [2.657435753610125e-06, 2.657367000866587e-06, 2.657129118478494e-06, 2.658150668246390e-06, 2.657605731630764e-06, 2.657605731630764e-06, 7.444719181693107e-04, 7.443794949499742e-04, 7.421873343147567e-04, 7.455725369923753e-04, 7.443072783604594e-04, 7.443072783604594e-04, 1.374931699335458e-01, 1.387916597715740e-01, 1.725636423629326e-01, 1.673762849194891e-01, 1.676850580127171e-01, 1.676850580127171e-01, 1.193212455190515e+01, 1.134875168833884e+01, 8.178660949250080e-02, 2.771297209375232e+01, 1.953516900512177e+01, 1.953516900512178e+01, 2.874952765754122e+05, 2.465546137483149e+05, 1.468181512983259e+03, 1.492465251230529e+06, 7.522070256195636e+05, 7.522070256195636e+05, 1.522447037666083e-04, 1.514554890783927e-04, 1.522113870628737e-04, 1.515146167629040e-04, 1.518429464263411e-04, 1.518429464263411e-04, 6.549727330206403e-03, 6.350129899235482e-03, 6.791576510877441e-03, 6.610321803337663e-03, 6.323236078284687e-03, 6.323236078284687e-03, 1.420249906390372e-01, 5.380066560452619e-02, 1.936352293527043e-01, 9.057304538987443e-02, 1.267065034727309e-01, 1.267065034727309e-01, 8.282011696864036e+01, 1.205660589743946e+01, 1.046004417136014e+02, 1.917006523813090e-03, 5.124461602555305e+01, 5.124461602555305e+01, 3.249256950004610e+06, 1.597482152034641e+06, 3.573149841128374e+06, 3.437938582102904e+02, 2.043738650702208e+06, 2.043738650702208e+06, 4.619427401394000e-02, 6.760819262993260e-02, 6.013766973571144e-02, 5.390507104998704e-02, 5.702687421782188e-02, 5.702687421782188e-02, 4.334809434949627e-02, 3.423625636375341e-01, 2.365646839875352e-01, 1.466733538693065e-01, 1.898580108795344e-01, 1.898580108795344e-01, 4.880898834047775e-02, 5.917157275974327e+00, 3.266210784210736e+00, 1.050065138852581e+00, 1.935078670557683e+00, 1.935078670557683e+00, 4.447257815915788e-01, 1.674445854271037e+03, 6.607838326576669e+02, 9.874954776493788e-01, 1.665281126257556e+02, 1.665281126257556e+02, 1.022742173599572e+05, 8.363882291868500e+07, 9.043637243187241e+06, 2.011089761174651e+02, 2.579643228134502e+06, 2.579643228134509e+06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_pgsl025_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_pgsl025", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [1.406740473146546e-10, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 4.262055119960672e-316, 0.000000000000000e+00, "nan", 0.000000000000000e+00, 1.594474170896850e+155, 5.346287040970323e-155, 2.545490200378366e+245, 5.425311363546710e+158, 2.989097729984840e+211, 1.308913200500921e+158, 3.015400566713926e+211, 3.514758272038436e+97, 2.440161600012010e+214, 1.364824520568687e-155, 4.961545679773450e+229, 6.339370882018474e+214, 5.260351115841400e+243, 4.902578009326709e+176, 2.962863808415862e+207, 5.374300534767351e+227, 2.947325028727531e+237, 8.306527979919908e+278, 6.941773862940761e+188, 2.473625471241302e+167, 4.974520961676683e+240, 3.254488701574548e+202, 4.975870600510972e-20, 2.961019284666838e+221, 4.115090987599211e+173, 8.493526029475823e-18, 6.284156130173789e-159, 6.726447460173193e-159, 6.513840880554901e-159, 8.014904621010378e-101, 3.315804240175299e+156, 1.774942929594885e+178, 2.061767681220603e+216, 3.687947156355685e+178, 3.783421160720091e+216, 1.638530910548498e+178, 2.496675464529953e-156, 2.966143358635496e-152, 1.753832888454345e+200, 5.850048075406658e-93, 9.523908387689523e+63, 1.249311117060723e+162, 2.850472299344508e+249, 1.000072364780932e-81, 1.960672421241670e+170, 1.265010707543768e+286, 3.163519746867710e-151, 2.518782973063861e-143, 2.106058311617221e+170, 7.664374151837232e+235, 8.655044397516151e+224, 8.255281381544026e-261, 1.766154439590747e+207, 2.110134485753641e+162, 5.099139568779995e+240, 3.842097443577545e+226, 2.802087414850648e+159, 5.103684160964951e+226, 7.630575084443362e+197, 2.759172327697484e+244, 4.631442235323290e-156, 1.405335076006011e+245, 1.630037419133256e-85, 1.799256232825210e+223, 1.425571454901162e-153, 5.247961335558200e+174, 2.995490092518654e+197, 1.546912286831889e-155, 3.398063985210527e+256, 7.245599816422008e+255, 5.570710642251003e+251, 9.451248212192340e-152, 3.706052487690140e+253, 1.646485714438064e+258, 2.477645155148389e+269, 2.212490677677458e+54, 9.245155466739230e+182, 1.376859744115924e+233, 3.570872010897855e+260]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_pgsl025_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_pgsl025", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
