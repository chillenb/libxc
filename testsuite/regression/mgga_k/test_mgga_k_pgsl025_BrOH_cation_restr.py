
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_k_pgsl025_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_pgsl025", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([2.396574433062568e+03, 2.396577354157101e+03, 2.396611626452863e+03, 2.396567825632154e+03, 2.396587738829696e+03, 2.396587738829696e+03, 6.669554495510454e+01, 6.669163515807557e+01, 6.660270630431548e+01, 6.676032755189033e+01, 6.668352627306561e+01, 6.668352627306561e+01, 3.303767403786840e+00, 3.320259434016737e+00, 3.835039127016343e+00, 3.789089964958245e+00, 3.772433889911554e+00, 3.772433889911554e+00, 7.135858887804625e-01, 6.806782725589544e-01, 5.382087779907051e+00, 1.203556330553131e+00, 8.826615096123979e-01, 8.826615096123981e-01, 1.879757579933880e+02, 1.634913746733149e+02, 9.762863811304582e+00, 7.134176095558370e+02, 3.577031763529644e+02, 3.577031763529644e+02, 5.744659994112642e+02, 1.781528033373491e+02, 1.905137189778091e+04, 2.144529559364100e+03, 1.625891682724036e+02, 1.351253853787108e+02, 3.254527305711237e+04, 3.794085851086319e+01, 3.365833728429238e+01, 3.351160742613855e+01, 3.229491655671040e+01, 3.125130964186252e+01, 3.916998370120627e+01, 5.040290199944282e+00, 3.096043101318456e+01, 1.515925002198519e+00, 1.855388005919222e+00, 1.915431954863532e+00, 7.889127044010174e+00, 1.144858249817855e+01, 4.794253935098686e+02, 1.730070228228687e+01, 1.044166687331841e+00, 8.507509551033562e-01, 3.986175040483384e+04, 2.467535964984560e+10, 5.299258309627580e+09, 1.988369452122116e+01, 1.963737206508893e+03, 3.997375384526358e+06, 1.429398341224090e+09, 2.353731718959135e+08, 7.041622738749178e+10, 1.150074549410098e+05, 2.398053025597711e+07, 2.303133715235929e+11, 2.110533037026841e+10, 1.594805757513144e+00, 1.450372342651040e+01, 1.918023988020695e+00, 1.508394871061900e+00, 8.279739851093260e+01, 5.377732719845289e+01, 7.616946279513750e+02, 1.786316980612199e+03, 1.597202023456722e+01, 1.386607009847727e+00, 1.069775821421579e+00, 1.389942119529040e+00, 2.174177401482041e+01, 8.121921298332460e+00, 6.909578419517377e-01, 1.309197111449353e+02, 1.334600417678561e+00, 8.094414091868505e+04, 3.745183951555125e+04, 1.913954399948368e+06, 7.903422557127880e-01, 1.242871887653534e+05, 4.439383982230920e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_k_pgsl025_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_pgsl025", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([2.716379867946469e+03, 2.716423015212460e+03, 2.716573933080384e+03, 2.715932656696147e+03, 2.716274510212070e+03, 2.716274510212070e+03, 6.276946767623089e+01, 6.277983373868595e+01, 6.302546869087730e+01, 6.265931865823411e+01, 6.280250018713713e+01, 6.280250018713713e+01, 5.677702306760802e-01, 5.152029363117887e-01, -9.441162553135257e-01, -7.635117410670856e-01, -7.473508675730165e-01, -7.473508675730165e-01, -7.458380951162253e-01, -6.969664219289026e-01, -5.682918992391681e-01, -1.494823826521951e+00, -1.016055540544069e+00, -1.016055540544070e+00, -3.128065283826147e+02, -2.720124900535163e+02, -1.565930593244063e+01, -1.188518634500214e+03, -5.957190106585698e+02, -5.957190106585696e+02, -5.534607283682277e+02, 1.073082680297538e+02, -3.134829241530415e+04, -3.170003784708588e+03, 1.331259045164394e+02, 1.788988760059273e+02, -5.419359084674706e+04, -1.380264261020939e+01, -8.495054792617312e+00, -7.474035090523398e+00, -4.328421831094349e+00, -2.589076973014561e+00, -6.027344650037715e+01, -2.270018675445872e+00, -4.735506338330716e+01, 2.266874897103765e+00, 2.117907684539148e+00, 2.017834436298631e+00, -1.253392257929239e+01, -1.841186453819140e+01, -7.984425463130405e+02, 2.678806085469176e+01, -1.246660759752782e+00, -9.243012060386404e-01, -6.643580569461084e+04, -4.112559941593855e+10, -8.832097182524820e+09, -3.259901847493561e+01, -3.272620026779153e+03, -6.662292032226531e+06, -2.382330563451351e+09, -3.922886146399861e+08, -1.173603789739403e+11, -1.916738589087224e+05, -3.996754520382412e+07, -3.838556192007652e+11, -3.517555061214027e+10, 6.305220762093846e-01, -2.037052512282266e+01, 1.110775391874793e+00, 1.540987992834141e+00, -1.339406847402836e+02, -8.289501637916275e+01, -1.268739251948169e+03, -2.976330536630201e+03, -2.502194630159295e+01, -1.192627406749775e+00, -6.645754260395279e-01, 4.591068351455390e-01, -3.559253897937133e+01, -1.290845437173953e+01, 4.113633293411344e-01, -2.177232860183585e+02, -1.748101472930670e+00, -1.349063602879148e+05, -6.241951994072623e+04, -3.189923694378878e+06, -8.335346815904895e-01, -2.071450696309404e+05, -7.398970853938384e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_pgsl025_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_pgsl025", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([2.657435753610125e-06, 2.657367000866587e-06, 2.657129118478494e-06, 2.658150668246390e-06, 2.657605731630764e-06, 2.657605731630764e-06, 7.444719181693107e-04, 7.443794949499742e-04, 7.421873343147567e-04, 7.455725369923753e-04, 7.443072783604594e-04, 7.443072783604594e-04, 1.374931699335458e-01, 1.387916597715740e-01, 1.725636423629326e-01, 1.673762849194891e-01, 1.676850580127171e-01, 1.676850580127171e-01, 1.193212455190515e+01, 1.134875168833884e+01, 8.178660949250080e-02, 2.771297209375232e+01, 1.953516900512177e+01, 1.953516900512178e+01, 2.874952765754122e+05, 2.465546137483149e+05, 1.468181512983259e+03, 1.492465251230529e+06, 7.522070256195636e+05, 7.522070256195636e+05, 1.522447037666083e-04, 1.514554890783927e-04, 1.522113870628737e-04, 1.515146167629040e-04, 1.518429464263411e-04, 1.518429464263411e-04, 6.549727330206403e-03, 6.350129899235482e-03, 6.791576510877441e-03, 6.610321803337663e-03, 6.323236078284687e-03, 6.323236078284687e-03, 1.420249906390372e-01, 5.380066560452619e-02, 1.936352293527043e-01, 9.057304538987443e-02, 1.267065034727309e-01, 1.267065034727309e-01, 8.282011696864036e+01, 1.205660589743946e+01, 1.046004417136014e+02, 1.917006523813090e-03, 5.124461602555305e+01, 5.124461602555305e+01, 3.249256950004610e+06, 1.597482152034641e+06, 3.573149841128374e+06, 3.437938582102904e+02, 2.043738650702208e+06, 2.043738650702208e+06, 4.619427401394000e-02, 6.760819262993260e-02, 6.013766973571144e-02, 5.390507104998704e-02, 5.702687421782188e-02, 5.702687421782188e-02, 4.334809434949627e-02, 3.423625636375341e-01, 2.365646839875352e-01, 1.466733538693065e-01, 1.898580108795344e-01, 1.898580108795344e-01, 4.880898834047775e-02, 5.917157275974327e+00, 3.266210784210736e+00, 1.050065138852581e+00, 1.935078670557683e+00, 1.935078670557683e+00, 4.447257815915788e-01, 1.674445854271037e+03, 6.607838326576669e+02, 9.874954776493788e-01, 1.665281126257556e+02, 1.665281126257556e+02, 1.022742173599572e+05, 8.363882291868500e+07, 9.043637243187241e+06, 2.011089761174651e+02, 2.579643228134502e+06, 2.579643228134509e+06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_pgsl025_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_pgsl025", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([-1.364825745956503e-02, -1.364838061254655e-02, -1.364877043911285e-02, -1.364694955172857e-02, -1.364792578542838e-02, -1.364792578542838e-02, 7.591340196949203e-03, 7.587039646371791e-03, 7.473397591478683e-03, 7.517667284767073e-03, 7.514528633781675e-03, 7.514528633781675e-03, 2.994354217724852e-02, 3.021240031292421e-02, 3.721602034648283e-02, 3.399380302290590e-02, 3.458017324854718e-02, 3.458017324854718e-02, 6.361746286066813e-02, 5.924885348416708e-02, 5.589086841165675e-02, 1.771816553292531e-01, 1.084129025794596e-01, 1.084129025794596e-01, 7.994788722377434e+01, 7.082133301151855e+01, 2.992201696836811e+00, 2.700621086384390e+02, 1.521194154925808e+02, 1.521194154925808e+02, 1.422326764014191e-01, 4.574296219726873e-02, -9.305544818469366e-01, 3.034231328904990e-01, -3.713668341413934e-02, 1.105917791288574e-02, -3.245503019606434e+00, 4.540686147352752e-02, 2.085909770627711e-02, 1.989006559167468e-02, 1.936862210599463e-02, 6.438270345618210e-03, 3.669300463238301e-01, 9.812692126533269e-02, 3.515453993079392e-01, 8.157947228213506e-03, 8.740572692981622e-03, 1.691170800445969e-02, -1.018508149464579e+00, 6.565073599005679e-01, -9.124045689167707e+00, 8.425411867417890e-03, 1.812167879227343e-01, 1.092183906384028e-01, 2.617738119055060e+03, 1.625551434034784e+06, -9.851784861226642e+05, -2.708313994351640e+00, 4.977692882396129e+02, -2.246050563147970e+04, 2.258856033609697e+03, -9.219105533363263e+02, -1.591350697966156e+04, 2.030324183266507e+01, -2.934249746348757e+02, 2.875592058752311e+04, -8.921599672515138e+03, 8.033333290873367e-03, 2.465595705142848e-01, -4.538968813132804e-02, 1.645834181406815e-02, 6.030011434492184e-01, 3.790178963407420e-01, -4.432931258045980e+00, -5.655072290489374e+00, -3.939687959226222e-01, 8.163488029178957e-02, 4.861060731959636e-02, 1.378463423480146e-02, -4.791408260073375e+00, 2.066012426879546e+00, 1.196321982783838e-02, -5.557343654572555e+00, 3.835630460817785e-01, -1.177794578839393e+03, -7.491940685852621e+03, -2.551548047321009e+04, -1.320130538913559e-01, -4.280121071791717e+03, -8.089183536191281e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
