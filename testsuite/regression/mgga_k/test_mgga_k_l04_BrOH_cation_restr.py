
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_k_l04_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_l04", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.180205770077245e+03, 2.180214426689958e+03, 2.180262286089303e+03, 2.180133305315566e+03, 2.180199554181269e+03, 2.180199554181269e+03, 5.901711231188712e+01, 5.901643998590703e+01, 5.900381110999315e+01, "nan", 5.901915155442582e+01, 9.890520436522981e+01, 2.318657395435181e+00, 3.671255750317539e+00, 3.478831026016172e+00, 3.536823331879331e+00, 3.524450439433823e+00, 3.524450439433823e+00, 2.453143255284348e-01, 2.528011424990255e-01, 3.105358206757036e+00, 1.413881614369025e-01, 1.782833035766138e-01, 1.782833035766138e-01, 2.972747259795820e-04, 3.293338522033477e-04, 1.002440557098565e-02, 9.915371207602361e-05, 1.565621847477957e-04, 1.565621847477957e-04, 2.216986875341803e+02, 2.217800970113275e+02, 2.217027418071367e+02, 1.276680482438104e+02, 2.217397866991710e+02, 2.217397866991710e+02, 2.109814422891573e+01, 2.129786067192454e+01, 2.112453777644048e+01, 2.129770826337375e+01, 2.119912398771493e+01, 3.173583696580346e+01, 2.815321644124943e+00, 3.322533017525258e+00, 2.410433490206040e+00, 2.604673037134269e+00, 2.906831924074402e+00, 1.704381670988294e+00, 6.791105966681273e-02, 2.460599747705794e-01, 5.817018255698862e-02, 3.013643116676024e+01, 9.385962370331068e-02, 9.385962370331068e-02, 5.902768578371497e-05, 9.475914210579782e-05, "nan", 2.636823829951611e-02, 8.040718915947930e-05, 8.040719113081468e-05, 2.842727484954974e+00, 2.810207859280914e+00, 1.583319244855416e+00, 2.831054834586512e+00, 2.826335163374214e+00, 2.826335163374214e+00, 2.690702926453649e+00, 1.982775154247480e+00, 2.174199313791620e+00, 2.372775083706191e+00, 2.270273834601762e+00, 1.335689900156785e+00, 3.651718203256355e+00, 3.585625569601388e-01, 5.664966452722426e-01, 6.350073470975287e-01, 7.474652982560744e-01, 7.474652982560744e-01, 1.058593184982092e+00, 9.183277844648384e-03, 1.706889961600817e-02, 9.185001180601855e-01, 4.268147949471724e-02, 4.278124542611030e-02, 5.921081243943160e-04, 6.770797968159040e-06, 2.983204605931140e-05, 3.772455799823853e-02, 6.884494109595822e-05, 6.884494109595810e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_k_l04_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_l04", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.318838531289769e+03, 3.318861645559635e+03, 3.318962738139156e+03, 3.318618865179749e+03, 3.318799285924586e+03, 3.318799285924586e+03, 8.625344083917787e+01, 8.625519412562585e+01, 8.629988308352202e+01, "nan", 8.625970151535738e+01, "nan", 2.996706524471161e+00, "nan", "nan", "nan", "nan", "nan", 4.088572092140579e-01, "nan", 4.163234033903094e+00, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 1.996868058367122e+02, "nan", "nan", 2.283457990311171e+01, 2.337062596154192e+01, 2.213710890163534e+01, 2.260337026923730e+01, 2.347301853902692e+01, "nan", "nan", "nan", "nan", "nan", "nan", 2.577872214635380e+00, 1.118890216200590e-01, "nan", 9.609782450027311e-02, 5.022738527793372e+01, "nan", "nan", 9.837947471389232e-05, "nan", "nan", 4.385020554971970e-02, 1.340119714185526e-04, "nan", "nan", "nan", 2.587007903345190e+00, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 2.007196367098416e+00, "nan", 4.287417862239679e-01, "nan", 7.810807386937023e-01, "nan", "nan", 1.369635053729206e+00, "nan", "nan", "nan", 7.060258192913213e-02, "nan", "nan", "nan", 4.972007676551901e-05, "nan", "nan", "nan"]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_l04_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_l04", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [7.971192277521074e-07, 7.971097777537924e-07, 7.970701652165038e-07, 7.972107465483423e-07, 7.971367372935008e-07, 7.971367372935008e-07, 1.937842618232533e-04, 1.937757428237778e-04, 1.935649717612051e-04, "nan", 1.937600354405930e-04, "nan", 3.094968643421008e-02, "nan", "nan", "nan", "nan", "nan", 0.000000000000000e+00, "nan", 1.879633463984231e-02, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 5.331298219215271e-05, "nan", "nan", 1.428543324053534e-03, 1.387035088223094e-03, 1.475481699358982e-03, 1.438478233405036e-03, 1.382428551376632e-03, "nan", "nan", "nan", "nan", "nan", "nan", 3.693344035224862e-02, 4.366148256183645e-02, "nan", 3.716792992641829e-02, 2.081016913085905e-131, "nan", "nan", 2.906753250070078e-06, "nan", "nan", 1.540286013215751e-02, 1.951174349627958e-05, "nan", "nan", "nan", 3.535478011100313e-02, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 5.391744809066459e-02, "nan", 3.560788651743403e-01, "nan", 2.327768144958119e-01, "nan", "nan", 1.001545346009364e-01, "nan", "nan", "nan", 4.661360164413395e-02, "nan", "nan", "nan", 1.001190782252648e-113, "nan", "nan", "nan"]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_l04_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_l04", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [-2.336655590718069e-03, -2.336584860354608e-03, -2.336383726624038e-03, -2.337434589571122e-03, -2.336867782294047e-03, -2.336867782294047e-03, -3.261097473126738e-03, -3.260407719286631e-03, -3.244477213755594e-03, "nan", -3.260270494931923e-03, 0.000000000000000e+00, -5.591082408132345e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -4.966072632559495e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, "nan", 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.678612063126597e-03, 0.000000000000000e+00, 0.000000000000000e+00, -7.918702207427497e-03, -7.775158981915243e-03, -8.231855152514405e-03, -8.112644917192133e-03, -7.678035634218051e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -2.487792511862699e-03, -2.989154337774603e-05, 0.000000000000000e+00, -2.021245076287113e-05, 2.083748223801416e-196, 0.000000000000000e+00, 0.000000000000000e+00, -5.254278950577670e-14, 0.000000000000000e+00, "nan", -2.584253788910963e-06, -5.607006128945560e-13, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -5.468351446119442e-04, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -2.637875420917004e-03, 0.000000000000000e+00, -3.314360237386855e-03, 0.000000000000000e+00, -6.350725731444671e-03, 0.000000000000000e+00, 0.000000000000000e+00, -5.573479066293208e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.595236646482940e-05, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 1.195132890736337e-168, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_l04_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_l04", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
