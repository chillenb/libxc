
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_k_l04_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_l04", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([2.228877277940033e+03, 2.228886168626604e+03, 2.228935422948368e+03, 2.228802991559714e+03, 2.228870996643199e+03, 2.228870996643199e+03, 5.875860937569063e+01, 5.875805535851998e+01, 5.874822243534214e+01, 5.878833961580232e+01, 5.876109301740400e+01, 5.876109301740400e+01, 2.330583031755980e+00, 2.329282979770484e+00, 2.312322386193349e+00, 2.331177311876086e+00, 2.323359386536398e+00, 2.323359386536398e+00, 2.130392948355702e-01, 2.156851332350121e-01, 3.404085723209518e+00, 1.373801461475765e-01, 1.675141714518257e-01, 1.675141714518257e-01, 2.972746852596076e-04, 3.293337939048576e-04, 1.002342078652254e-02, 9.915371075011380e-05, 1.565621781217995e-04, 1.565621781217995e-04, 1.800437864258363e+02, 1.397514642165329e+02, 2.197017300685302e+02, 2.061198175524231e+02, 1.396823948755594e+02, 1.279099469685844e+02, 3.131484731011488e+01, 2.166446095881124e+01, 2.056879339038910e+01, 2.075607110273053e+01, 2.072016898561624e+01, 2.093561503939292e+01, 2.709541468358855e+00, 2.390862174225675e+00, 2.320128605812191e+00, 1.479717591241842e+00, 1.700646957569422e+00, 1.712911163957810e+00, 6.810810400460934e-02, 2.449520640609771e-01, 5.832878217569309e-02, 1.701732165441397e+01, 9.252403869091687e-02, 9.259671219667615e-02, 5.902768606918166e-05, 9.475914210579777e-05, 5.540440697881989e-05, 2.638371421599419e-02, 8.040719057048869e-05, 8.040719113061347e-05, 2.842727458870859e+00, 2.810207801133747e+00, 2.821629685011609e+00, 2.830854954050422e+00, 2.826334333302460e+00, 2.826335163287785e+00, 2.690702923154325e+00, 1.232274511922002e+00, 2.028171473195878e+00, 1.548683127761437e+00, 1.340463978348807e+00, 2.235529624776225e+00, 3.369085884874353e+00, 3.927456905021303e-01, 5.664615094344111e-01, 9.706177518952461e-01, 5.852424871620738e-01, 5.320079916541458e-01, 1.045800585748807e+00, 9.183103920956542e-03, 1.706460288179574e-02, 5.592765090313678e-01, 4.277962562929716e-02, 4.264621639364435e-02, 5.921081238783078e-04, 6.770797968046320e-06, 2.983204605925455e-05, 3.766827528556514e-02, 6.884494109143547e-05, 6.884494109465624e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_k_l04_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_l04", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([3.218767140762000e+03, 3.218790428263721e+03, 3.218890572612428e+03, 3.218544092237579e+03, 3.218726125745326e+03, 3.218726125745326e+03, 8.720435548100448e+01, 8.720550651973349e+01, 8.723530811470033e+01, 8.720541174811100e+01, 8.720473917902628e+01, 8.720473917902628e+01, 3.095904689982983e+00, 3.084346819768623e+00, 2.787451222727818e+00, 2.849193786338105e+00, 2.841816192938414e+00, 2.841816192938414e+00, 2.172520912436390e-01, 2.095417070644731e-01, 3.995659651749579e+00, 2.091942094489132e-01, 2.255710988380284e-01, 2.255710988380285e-01, 4.954576083101474e-04, 5.488893703554946e-04, 1.670085674869466e-02, 1.652561782151903e-04, 2.609369317449202e-04, 2.609369317449202e-04, 2.025736225337058e+02, 1.873129016378522e+02, 3.553521323801384e+02, 2.780019190950525e+02, 1.832025641272230e+02, 2.000300368719814e+02, 5.215291772622261e+01, 2.506791493258843e+01, 2.392906430521263e+01, 2.435287812222183e+01, 2.514979541561040e+01, 2.413742628411305e+01, 4.019153450667424e+00, 2.957541115915830e+00, 3.446360660996774e+00, 2.371141929804542e+00, 2.596926222598806e+00, 2.586999551108818e+00, 1.133248672177972e-01, 4.042016798960206e-01, 9.721149371162406e-02, 2.752316320760081e+01, 1.470338742477142e-01, 1.473422895240298e-01, 9.837947674026790e-05, 1.579319035096628e-04, 9.234067829803289e-05, 4.396224486093821e-02, 1.340119824549725e-04, 1.340119852170162e-04, 4.737878943508390e+00, 4.683679330919120e+00, 4.702716140227790e+00, 4.716916036680977e+00, 4.710552353391607e+00, 4.710558604972696e+00, 4.484504852242914e+00, 1.663966967627553e+00, 2.771938020442301e+00, 1.914052238289455e+00, 2.018168534824706e+00, 3.548368169062759e+00, 4.474719156269477e+00, 6.544376364928405e-01, 9.439506144514640e-01, 1.532898211297072e+00, 6.119571040070829e-01, 5.634659535796717e-01, 1.419089685151420e+00, 1.530441907727624e-02, 2.842088732998663e-02, 7.939076260993776e-01, 7.129349150718629e-02, 7.035638063160794e-02, 9.868468713808882e-04, 1.128466327966488e-05, 4.972007676523317e-05, 6.248868943454895e-02, 1.147415684703785e-04, 1.147415684867134e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_l04_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_l04", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([9.529264605854480e-07, 9.529167537072931e-07, 9.528743531243879e-07, 9.530188527911007e-07, 9.529430225859515e-07, 9.529430225859515e-07, 1.724977971528149e-04, 1.725017457229521e-04, 1.726199484112883e-04, 1.727404494967510e-04, 1.726882172811435e-04, 1.726882172811435e-04, 1.962534834480630e-02, 1.971198306370631e-02, 2.240348043478716e-02, 2.277995918463533e-02, 2.258202583397108e-02, 2.258202583397108e-02, 9.886886669587482e-01, 1.069862416074308e+00, 9.684518385108256e-03, 2.290927817656883e-01, 5.363282062671456e-01, 5.363282062671453e-01, 2.550341810467253e-05, 3.190012075224820e-05, 2.497287298566443e-03, 3.796324436277121e-06, 1.074430083508599e-05, 1.074430083508601e-05, 1.158910845117868e-04, 3.569602983266008e-05, 1.770274671567405e-05, 9.899909121595492e-05, 8.002669686714751e-05, 4.462339036712881e-05, 1.365887125058292e-06, 7.356460460152013e-04, 1.169077898010306e-03, 1.148502450709661e-03, 1.090862284650952e-03, 1.295612452599182e-03, 2.395107159741997e-02, 6.386719649028712e-02, 2.542904960564978e-02, 3.563529298867281e-02, 3.219528236149179e-02, 2.814502971076203e-02, 3.008449566315040e-03, 8.085361098267439e-04, 1.461612374405350e-05, 8.881219318451932e-04, 1.858959048604686e-01, 1.903606170146575e-01, -9.377636706777473e-09, -7.737180753067580e-18, 3.997592192449010e-16, 6.906924083066145e-04, -1.915498217988907e-07, 1.068691691972372e-11, 9.771398842456816e-08, 7.655051029962944e-08, 4.275001331390731e-10, 4.542813275545310e-04, 1.623627734232517e-06, 1.690545854509576e-10, 3.042788726950707e-08, 6.920187808423170e-02, 4.114857873660450e-02, 7.785625060663916e-02, 4.141116278700242e-02, 1.617816396711958e-02, 1.096175647536559e-01, 5.704313615792081e-05, 4.695714989606071e-05, 2.577215698047118e-02, 1.374264393992605e-01, 2.280128683897795e-01, 8.202543166996464e-02, 2.992680852676744e-04, 4.062244977055500e-03, 1.937826161633567e-01, 7.820458545649016e-05, 6.291108248480021e-02, 3.649618755067260e-09, 9.594405119270891e-09, 3.162780302979895e-11, 2.867142000999074e-02, 1.895390926652303e-09, 2.840352701326211e-10])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_l04_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_l04", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([-7.152865300075304e-03, -7.152837809687864e-03, -7.152771705432388e-03, -7.153182051445760e-03, -7.152958944487089e-03, -7.152958944487089e-03, -2.095897623812495e-04, -2.106678119013053e-04, -2.414009976614057e-04, -2.506036481788213e-04, -2.401509005403686e-04, -2.401509005403686e-04, 6.581082953484412e-03, 6.624584121878267e-03, 7.512799094697003e-03, 6.467190421190447e-03, 6.732228516002428e-03, 6.732228516002428e-03, 8.761233878158292e-04, 9.681501344436975e-04, 1.258837221330399e-02, 3.507552564890332e-04, 6.667224202870048e-04, 6.667224202870028e-04, 3.568981209779763e-12, 5.389113097187816e-12, 6.898936539227905e-08, 1.332394693728098e-13, 7.557154717398428e-13, 7.557154717398474e-13, 6.646912240353391e-03, 1.105615789424137e-02, -9.506288372559098e-05, 1.864675184978241e-03, -1.104973907873963e-02, 2.683554192121394e-03, -7.997393891535590e-07, 9.722132229194512e-03, -1.854832568310732e-05, -2.595588517641594e-04, 1.292669781292343e-04, -5.346657057788022e-03, 9.451063638321791e-04, 7.802478628176046e-03, 9.908365673443411e-04, 2.191068181740933e-03, 1.010207756289934e-03, 4.187054674550487e-03, -4.356404686822925e-06, 7.299955171521924e-05, -1.606211301550943e-08, 2.595948710777549e-03, 1.852469143993441e-06, -1.036309316534482e-04, 9.227873450493918e-16, 3.014566301569410e-24, -1.353379280174549e-23, -2.670486430248407e-07, 1.469780830535818e-13, -1.124627065294859e-18, 4.122033255217763e-14, -2.277505918328248e-13, -5.635199850467432e-17, 3.527867346584423e-08, -1.015667699052022e-11, 1.079114508869923e-17, -1.394683062322759e-15, -2.197316097980313e-03, 2.342354806599516e-03, -1.165199396689475e-02, 3.892101933561896e-03, 2.486510096193812e-04, 1.502522591274815e-03, -1.948815503273612e-07, -1.104803747675131e-07, -4.229673942864203e-04, 1.151616811587024e-02, 8.645002614646079e-03, 8.767265196278181e-05, -2.033399180996455e-08, 4.033729449980406e-07, 3.969814299861915e-04, -6.389340453135236e-08, 1.857232212836519e-07, -7.300317271584221e-15, -1.889058503874613e-17, -7.471642587465173e-19, -9.737774108191650e-06, -1.511177902544413e-16, -2.335527579200023e-17])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
