
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_k_l06_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_l06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.179998418611337e+03, 2.180007098353859e+03, 2.180055021259957e+03, 2.179925697011335e+03, 2.179992131502603e+03, 2.179992131502603e+03, 5.899763406066389e+01, 5.899697693690383e+01, 5.898469597529899e+01, "nan", 5.899969059067054e+01, 1.231380759447373e+02, 2.313803899673332e+00, 4.570754110428599e+00, 4.331183195361598e+00, 4.403384259091450e+00, 4.387979870825037e+00, 4.387979870825037e+00, 3.054190549539160e-01, 3.147402250847068e-01, 3.100934069837610e+00, 1.760298284851901e-01, 2.219646894861833e-01, 2.219646894861833e-01, 3.701103295732491e-04, 4.100242971445226e-04, 1.248049607119388e-02, 1.234474707997500e-04, 1.949216557336747e-04, 1.949216557336747e-04, 2.760173238369007e+02, 2.761186795384930e+02, 2.760223714516791e+02, 1.276646715515926e+02, 2.760684927529591e+02, 2.760684927529591e+02, 2.097154410527423e+01, 2.117655983019691e+01, 2.098321059505552e+01, 2.116088938691464e+01, 2.108266883610412e+01, 3.951146886097261e+01, 3.505106658927173e+00, 4.136590441996524e+00, 3.001016418515946e+00, 3.242846807873375e+00, 3.619037971990636e+00, 1.704175974233867e+00, 8.406184042228630e-02, 3.063473965270074e-01, 7.210178663666010e-02, 3.752019090939218e+01, 1.168562720829467e-01, 1.168562720829467e-01, 7.349012261762905e-05, 1.179761824665310e-04, "nan", 3.279248639937592e-02, 1.001078380265422e-04, 1.001078443901385e-04, 3.539227234594717e+00, 3.498739940102513e+00, 1.583318760319401e+00, 3.524694655477442e+00, 3.518818612493617e+00, 3.518818612493617e+00, 3.349954973844178e+00, 2.468577049024301e+00, 2.706902249875820e+00, 2.954131284924670e+00, 2.826516093412171e+00, 1.335488823346913e+00, 4.546429647734907e+00, 3.898521159764118e-01, 7.052946038145549e-01, 6.330263613281749e-01, 9.306025830837823e-01, 9.306025830837823e-01, 1.056399496967542e+00, 1.143328272676290e-02, 2.125096925585053e-02, 1.143542829913069e+00, 5.293843048794617e-02, 5.326312484869386e-02, 7.371811792625464e-04, 8.429718534637031e-06, 3.714122807606064e-05, 4.696749294015728e-02, 8.571271491215199e-05, 8.571271491215183e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_k_l06_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_l06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.320675196850007e+03, 3.320698109662597e+03, 3.320798649434264e+03, 3.320457768029813e+03, 3.320636572006913e+03, 3.320636572006913e+03, 8.642067794782379e+01, 8.642230546928141e+01, 8.646411482032428e+01, "nan", 8.642679590140649e+01, "nan", 3.032485160584932e+00, "nan", "nan", "nan", "nan", "nan", 5.090317582565267e-01, "nan", 4.197661855826494e+00, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 1.997171338654964e+02, "nan", "nan", 2.343751092420368e+01, 2.397904929196287e+01, 2.271884097544257e+01, 2.320262263115988e+01, 2.407570933879022e+01, "nan", "nan", "nan", "nan", "nan", "nan", 2.579686660402880e+00, 1.358649846598153e-01, "nan", 1.173850423963239e-01, 6.253365151565362e+01, "nan", "nan", 1.224835325560668e-04, "nan", "nan", 5.433923546538727e-02, 1.668463627706798e-04, "nan", "nan", "nan", 2.587012286274363e+00, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 2.008962115943117e+00, "nan", 2.624904050366987e-01, "nan", 7.944688745644730e-01, "nan", "nan", 1.385833943249243e+00, "nan", "nan", "nan", 8.649006587771797e-02, "nan", "nan", "nan", 6.190204679343442e-05, "nan", "nan", "nan"]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_l06_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_l06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [7.915941136617454e-07, 7.915851843910817e-07, 7.915471398098170e-07, 7.916799863116548e-07, 7.916101372870800e-07, 7.916101372870800e-07, 1.905882291285806e-04, 1.905815106523412e-04, 1.904124106121698e-04, "nan", 1.905663923782461e-04, "nan", 2.938502195658070e-02, "nan", "nan", "nan", "nan", "nan", 0.000000000000000e+00, "nan", 1.802021697314023e-02, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 5.316657775107198e-05, "nan", "nan", 1.334234247534100e-03, 1.294313954227048e-03, 1.383221873777858e-03, 1.346176418973653e-03, 1.289544777930125e-03, "nan", "nan", "nan", "nan", "nan", "nan", 3.663021933104006e-02, 1.427699562872854e-01, "nan", 1.214080341002080e-01, 7.745716379012947e-131, "nan", "nan", 9.383071482643740e-06, "nan", "nan", 5.007823757002471e-02, 6.298634473281014e-05, "nan", "nan", "nan", 3.535124140228270e-02, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 5.340010565750365e-02, "nan", 8.166184497331873e-01, "nan", 2.187649637647209e-01, "nan", "nan", 9.511618191131484e-02, "nan", "nan", "nan", 1.521669518801475e-01, "nan", "nan", "nan", 3.726514566914999e-113, "nan", "nan", "nan"]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_l06_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_l06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [-2.317596353923205e-03, -2.317527354539936e-03, -2.317331139304252e-03, -2.318356296280371e-03, -2.317803356671270e-03, -2.317803356671270e-03, -3.211712041198361e-03, -3.211050218842050e-03, -3.195762902287820e-03, "nan", -3.210918550550451e-03, 0.000000000000000e+00, -5.442767411130077e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -4.838780268095997e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.671735645331331e-03, 0.000000000000000e+00, 0.000000000000000e+00, -7.959902258408563e-03, -7.778595304202791e-03, -8.381088430107318e-03, -8.215997217861414e-03, -7.659279709624124e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -2.464823817496186e-03, -1.281915200654010e-04, 0.000000000000000e+00, -8.677292026409296e-05, 7.558059543956653e-196, 0.000000000000000e+00, 0.000000000000000e+00, -2.279472257791396e-13, 0.000000000000000e+00, "nan", -1.114749163159543e-05, -2.432455465463992e-12, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -5.466427251411826e-04, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -2.610603908575831e-03, 0.000000000000000e+00, -9.632142178574133e-03, 0.000000000000000e+00, -6.199503141594329e-03, 0.000000000000000e+00, 0.000000000000000e+00, -5.425583797263645e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -6.852659592291179e-05, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 2.870488217793152e-168, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_l06_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_l06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
