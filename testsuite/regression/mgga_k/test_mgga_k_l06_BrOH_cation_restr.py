
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_k_l06_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_l06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([2.228844383929125e+03, 2.228853328882421e+03, 2.228902740260080e+03, 2.228769503732046e+03, 2.228837942707082e+03, 2.228837942707082e+03, 5.874359203997780e+01, 5.874304956830883e+01, 5.873347926266708e+01, 5.877311834687403e+01, 5.874608270253592e+01, 5.874608270253592e+01, 2.325448660508720e+00, 2.323959137808719e+00, 2.300313999699952e+00, 2.319583542886429e+00, 2.312005790287996e+00, 2.312005790287996e+00, 2.168850791254738e-01, 2.173545119272111e-01, 3.408262347438078e+00, 1.618461716728264e-01, 1.856490150468476e-01, 1.856490150468476e-01, 3.701101843509685e-04, 4.100240896019793e-04, 1.247698516555991e-02, 1.234474661446061e-04, 1.949216324864672e-04, 1.949216324864672e-04, 1.913039301932600e+02, 1.403724676328060e+02, 2.692857249093487e+02, 2.344865896499302e+02, 1.402950276593989e+02, 1.279057910167558e+02, 3.897230860146063e+01, 2.154887389149930e+01, 2.043120589007815e+01, 2.062499517223156e+01, 2.061389038208191e+01, 2.082255315759468e+01, 3.192108016041247e+00, 2.495484617941757e+00, 2.734556065064642e+00, 1.479711559203331e+00, 1.700479954566060e+00, 1.712648700063568e+00, 8.473355103157486e-02, 3.033411198158603e-01, 7.261889045091069e-02, 1.701737899796178e+01, 1.119037906736130e-01, 1.123112016991533e-01, 7.349012354957051e-05, 1.179761824665309e-04, 6.897910092817590e-05, 3.284458369525773e-02, 1.001078429386641e-04, 1.001078443896551e-04, 3.539227138445755e+00, 3.498739729242289e+00, 3.512960239166104e+00, 3.523962552738633e+00, 3.518815578186015e+00, 3.518818612177677e+00, 3.349954961620752e+00, 1.230299279359589e+00, 2.312808964943122e+00, 1.560386551057025e+00, 1.340222175541569e+00, 2.714776365757632e+00, 3.819890669969791e+00, 4.889213724730438e-01, 7.051932383165830e-01, 1.176697588096315e+00, 5.924524998342663e-01, 5.272199551136901e-01, 1.044034392135777e+00, 1.143282532384531e-02, 2.123614001657683e-02, 5.588279048843935e-01, 5.325909770065539e-02, 5.276471584237164e-02, 7.371811780219331e-04, 8.429718534362289e-06, 3.714122807592409e-05, 4.679289725222498e-02, 8.571271490128037e-05, 8.571271490902413e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_k_l06_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_l06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([3.220877968223279e+03, 3.220900885652346e+03, 3.220999991432353e+03, 3.220659003564863e+03, 3.220838072460966e+03, 3.220838072460966e+03, 8.733445511735121e+01, 8.733551143587063e+01, 8.736317248400823e+01, 8.733734551867310e+01, 8.733486060543079e+01, 8.733486060543079e+01, 3.129416233721506e+00, 3.118894181191142e+00, 2.851177612467795e+00, 2.915703818587309e+00, 2.906301185143785e+00, 2.906301185143785e+00, 1.329494186896220e-01, 1.364169157679725e-01, 3.974278278867568e+00, 2.052662904716022e-01, 1.620685105538823e-01, 1.620685105538825e-01, 6.168496212490811e-04, 6.833725064732212e-04, 2.077839979253353e-02, 2.057457556889869e-04, 3.248692816706634e-04, 3.248692816706634e-04, 1.911878341826248e+02, 1.859189421863525e+02, 4.131996281961985e+02, 2.567976447856867e+02, 1.813948967851353e+02, 2.000657085811140e+02, 6.482728005579436e+01, 2.551326953076472e+01, 2.479666217709115e+01, 2.519568187126655e+01, 2.587097313058585e+01, 2.483694036344397e+01, 4.018981584489833e+00, 2.879230105466783e+00, 3.449896142988006e+00, 2.371208843505297e+00, 2.598335202345616e+00, 2.589182584529890e+00, 1.407278990496787e-01, 4.941629237837360e-01, 1.210234994152372e-01, 2.752318377618800e+01, 1.599761857009432e-01, 1.617182889893874e-01, 1.224835391487575e-04, 1.966269707775511e-04, 1.149651682136259e-04, 5.471413628374065e-02, 1.668464003946642e-04, 1.668464073144754e-04, 5.898711325067108e+00, 5.831231643918597e+00, 5.854933726578418e+00, 5.868937592037157e+00, 5.864674692650803e+00, 5.864697685095082e+00, 5.583258196303523e+00, 1.679851655465463e+00, 2.511810444190778e+00, 1.883128600717770e+00, 2.020111957734130e+00, 3.974470687668450e+00, 4.249310597847695e+00, 8.144633876191709e-01, 1.174855196000046e+00, 1.706412722694250e+00, 5.404438734166065e-01, 5.749219694203971e-01, 1.433065751227595e+00, 1.905276125689166e-02, 3.532823198512226e-02, 7.976026183165984e-01, 8.875025681183606e-02, 8.527542206598310e-02, 1.228635292496920e-03, 1.404953088960566e-05, 6.190204679274781e-05, 7.708627229858396e-02, 1.428545247985888e-04, 1.428545248378502e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_l06_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_l06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([9.427993295236677e-07, 9.427903524647286e-07, 9.427501733216403e-07, 9.428838310040379e-07, 9.428138283348082e-07, 9.428138283348082e-07, 1.699990828152761e-04, 1.700043048521912e-04, 1.701511268251349e-04, 1.702139184559858e-04, 1.701869243860337e-04, 1.701869243860337e-04, 1.829955814657132e-02, 1.834951430756391e-02, 1.995456770521689e-02, 2.040676375416945e-02, 2.023396718411536e-02, 2.023396718411536e-02, 1.613742041595327e+00, 1.588019827999821e+00, 8.338602382243095e-03, 6.762622376367060e-01, 1.403696985359297e+00, 1.403696985359297e+00, 7.956710045048709e-05, 9.879592297673362e-05, 7.788292773377977e-03, 1.110764035024604e-05, 3.134871262315983e-05, 3.134871262315986e-05, 1.213498820555709e-04, 2.955579831969098e-05, 5.999743531459423e-05, 1.989187083500224e-04, 7.864145902850322e-05, 4.446674349992161e-05, 5.055716894108703e-06, 6.463489732014444e-04, 1.045237402731185e-03, 1.029896377819305e-03, 9.862640521985269e-04, 1.191130296202742e-03, 6.436978263658659e-02, 4.570853578338653e-02, 6.907727718785510e-02, 3.559464016028188e-02, 3.197173174365248e-02, 2.781545431556132e-02, 7.538963080446775e-03, 3.167555731965954e-03, 4.342185371097557e-05, 8.871214999996811e-04, 6.869954519481909e-01, 7.097811984712740e-01, -2.654242374594001e-08, -2.028749715892644e-19, 1.200514517363963e-15, 1.644858177564867e-03, -1.661400754894384e-06, 2.580280421011241e-11, 3.636994755391798e-07, 2.849272058651737e-07, 1.591190704239620e-09, 1.689440199946011e-03, 6.043254029958033e-06, 6.292350940780142e-10, 1.132551012231723e-07, 6.582122232177903e-02, 9.092292082460064e-02, 7.596037973540785e-02, 4.091243353841607e-02, 5.227034790023812e-02, 1.986856832940494e-01, 2.068012817403748e-04, 1.732265099153937e-04, 8.269043882303094e-02, 1.331517106209802e-01, 1.988001749969531e-01, 7.773874738044738e-02, 7.189761166838115e-04, 1.113154818817987e-02, 1.875528317102224e-01, 2.143100151254990e-04, 2.325391551594562e-01, 8.640268288957760e-09, 2.159531894528554e-08, 7.512846405586440e-11, 8.728202845261217e-02, 4.454173840992410e-09, 6.754393321943913e-10])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_l06_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_l06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([-7.262518703901285e-03, -7.262496147565157e-03, -7.262444971783269e-03, -7.262782235386707e-03, -7.262598413262838e-03, -7.262598413262838e-03, -2.055305297291535e-04, -2.065892031588841e-04, -2.367674656687808e-04, -2.457238629983502e-04, -2.355030630753605e-04, -2.355030630753605e-04, 6.445737155013911e-03, 6.488422822252506e-03, 7.463512219421928e-03, 6.353202089952318e-03, 6.625139585905799e-03, 6.625139585905799e-03, 2.129531641972058e-03, 2.105939508464506e-03, 1.368620011207652e-02, 1.777889436513083e-03, 2.849458455001858e-03, 2.849458455001851e-03, 1.889803493230227e-11, 2.843337571182507e-11, 3.640194288651372e-07, 6.837946288590098e-13, 3.872889406692261e-12, 3.872889406692283e-12, 9.427642000338446e-03, 1.223730273737535e-02, -3.066593936306212e-04, 3.852630536807055e-03, -1.222161924788997e-02, 2.678571810580567e-03, -2.483538884336497e-06, 1.002309604312279e-02, -1.797281447245027e-05, -2.508790180337183e-04, 1.241354608174742e-04, -5.222602221178521e-03, 2.440296937709513e-03, 1.067052799094284e-02, 2.567154012135197e-03, 2.193077333134728e-03, 9.986020454209312e-04, 4.169981637984508e-03, -1.188030455279273e-05, 2.017909108405381e-04, -3.997633255618082e-08, 2.605255427234969e-03, 1.081541523428074e-05, -5.584681684999633e-04, 2.266976633847393e-15, 7.240706752578353e-24, -3.250802575395840e-23, -7.025943234104342e-07, 4.105999027101494e-13, -2.701480331319452e-18, 1.519427435322820e-13, -8.258963823023271e-13, -2.055062068232635e-16, 1.291613876479155e-07, -3.712742794911262e-11, 3.944684254937700e-17, -5.167059710106311e-15, -2.115398384726637e-03, 5.168063643656723e-03, -1.325286003466999e-02, 3.865937797575801e-03, 7.513834616004329e-04, 2.833603492768256e-03, -5.376247646962940e-07, -3.187150309973336e-07, -1.221639309770835e-03, 1.588927678448753e-02, 9.378445694330249e-03, 8.414490106968181e-05, -5.825179380720068e-08, 1.986548181897110e-06, 3.844603539012437e-04, -1.594726872958148e-07, 1.063855402927089e-06, -1.756318068448437e-14, -4.672634965262408e-17, -1.795189357332112e-18, -3.800646972155510e-05, -3.635197022318359e-16, -5.612275980825396e-17])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
