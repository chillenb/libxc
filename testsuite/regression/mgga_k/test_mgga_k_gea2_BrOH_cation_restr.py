
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_k_gea2_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_gea2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([5.018846151903882e+02, 5.018691622521849e+02, 5.018257171318352e+02, 5.020541019021832e+02, 5.019308821071850e+02, 5.019308821071850e+02, 8.338550247441626e+01, 8.337109455799668e+01, 8.299584810936884e+01, 8.318176930952383e+01, 8.313944485899152e+01, 8.313944485899152e+01, 5.902523728128787e+00, 5.924953461690217e+00, 6.496747346401284e+00, 6.226304387458818e+00, 6.269850947788548e+00, 6.269850947788548e+00, 7.167730695854112e-01, 6.976936597947987e-01, 1.225343339005729e+01, 9.864087878933304e-01, 8.088397071978131e-01, 8.088397071978133e-01, 8.619325918827656e-01, 8.451994941218949e-01, 1.092880638348286e+00, 9.647884632520928e-01, 8.579106421870533e-01, 8.579106421870533e-01, 1.163305954135130e+03, 4.607481804970701e+02, -6.649431273780931e+03, 2.337948021995478e+03, -1.430036388157266e+02, 2.080496587267672e+02, -3.318979048684482e+03, 6.801230806199179e+01, 4.156766273746246e+01, 4.104136107189024e+01, 4.072940941200346e+01, 2.724971702873020e+01, 3.558981337639192e+01, 1.258187031844960e+01, 2.926485253309492e+01, 2.174520869697301e+00, 2.534067935003733e+00, 3.314296792007464e+00, -2.139979406145299e+00, 5.553611213293212e+00, -1.734992404471655e+01, 2.530617662431117e+01, 6.930205731991782e-01, 4.710367520166598e-01, 5.149962646753108e+00, 5.059973702763425e+03, -1.792962993967351e+03, -2.242755858727005e+00, 1.360679275354534e+00, -5.927857175539722e+01, 2.109340682389333e+05, -8.510181867114891e+04, -1.474976611546043e+06, 1.889720129164949e+03, -2.724050652786848e+04, 2.669751752167567e+06, -7.885465655259065e+05, 1.749857111102202e+00, 1.890562857413603e+01, -2.167526029564260e+00, 2.558749611187169e+00, 4.630064910782158e+01, 4.752588360627966e+01, -5.685919778250355e+01, -1.048104721534810e+02, -1.216836845457868e+01, 2.510431697861390e+00, 1.699575229212283e+00, 1.803605510588966e+00, -1.332992810693238e+00, 1.272540790383937e+00, 9.193306358207626e-01, -7.706721338695844e+00, 6.421129427960196e-01, -2.281762714465132e+01, -1.630867977191579e+00, -2.495288746757130e+01, -6.206280964696132e-02, -9.638517345046163e+00, -1.825261543135354e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_k_gea2_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_gea2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([3.340691448367180e+03, 3.340713240100394e+03, 3.340810806219727e+03, 3.340486575054284e+03, 3.340656367135575e+03, 3.340656367135575e+03, 8.747035897306912e+01, 8.747153298815606e+01, 8.750294839015164e+01, 8.748153516426378e+01, 8.747598379068866e+01, 8.747598379068866e+01, 3.155359418607865e+00, 3.145390864301660e+00, 2.898527102705109e+00, 2.951231150203782e+00, 2.943465191689542e+00, 2.943465191689542e+00, 1.584973465195286e-01, 1.680114979619868e-01, 4.326356279599850e+00, 4.549909588791855e-02, 8.960684230184263e-02, 8.960684230184268e-02, -8.079229033844067e-02, -7.855147105517382e-02, -9.276101578187390e-02, -8.502752116050985e-02, -7.534701139491047e-02, -7.534701139491032e-02, 2.002232770944510e+02, 2.003336281324936e+02, 2.002284604422072e+02, 2.003258785737784e+02, 2.002791629184382e+02, 2.002791629184383e+02, 2.591567429953020e+01, 2.636352726669847e+01, 2.548035128806157e+01, 2.587430400088231e+01, 2.637388686357374e+01, 2.637388686357373e+01, 2.505467079578181e+00, 3.039183195578682e+00, 2.133564511463970e+00, 2.373695336420269e+00, 2.597403275376495e+00, 2.597403275376495e+00, -3.947194993416574e-02, 1.165171690180189e-01, -4.607350912495614e-02, 2.758209626057853e+01, 4.445882900008584e-03, 4.445882900008253e-03, -7.410881795960093e-02, -7.837215171305145e-02, -3.125087848951163e-02, -6.570107669447281e-02, -4.581194769967462e-02, -4.581194769969039e-02, 2.617448361818051e+00, 2.571789779302585e+00, 2.587826415853237e+00, 2.601080187171113e+00, 2.594446390790169e+00, 2.594446392222133e+00, 2.481897665442627e+00, 1.704299925805720e+00, 1.917517295668942e+00, 2.137152627628441e+00, 2.024555483285699e+00, 2.024555483285710e+00, 3.337017619767958e+00, 2.445960871834634e-01, 4.140811771486060e-01, 8.386821833310767e-01, 5.988785942277887e-01, 5.988785942277886e-01, 1.441562456497980e+00, -9.880765958311588e-02, -8.891069421730287e-02, 7.993430649908615e-01, -3.984766054305257e-02, -3.984766054305107e-02, -8.966017185648846e-02, -3.542461006079612e-02, -5.089495043615504e-02, -4.576437268459205e-02, -4.076605969133140e-02, -4.076605969133187e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_gea2_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_gea2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([7.183953787654940e-07, 7.183893682631378e-07, 7.183607928828548e-07, 7.184502578105938e-07, 7.184036418952782e-07, 7.184036418952782e-07, 1.664681860032593e-04, 1.664671080924783e-04, 1.664299622155120e-04, 1.663997345264199e-04, 1.664548556919529e-04, 1.664548556919529e-04, 2.319882383468693e-02, 2.327572545538750e-02, 2.523336579838395e-02, 2.461530012016502e-02, 2.474503507101396e-02, 2.474503507101396e-02, 1.347537376940258e+00, 1.288120930395629e+00, 1.463234655859147e-02, 3.079680157877443e+00, 2.174999573677185e+00, 2.174999573677185e+00, 3.194391961949024e+04, 2.739495708314610e+04, 1.631312792203622e+02, 1.658294723589477e+05, 8.357855840217377e+04, 8.357855840217377e+04, 4.959986591457623e-05, 4.957255826638204e-05, 4.959850537338012e-05, 4.957439916723075e-05, 4.958607665301922e-05, 4.958607665301922e-05, 9.339678835530145e-04, 9.139355898125141e-04, 9.489634823461900e-04, 9.308513546092439e-04, 9.157991813360176e-04, 9.157991813360176e-04, 3.466036699017193e-02, 2.703467963187623e-02, 4.375044316032168e-02, 3.894891499899829e-02, 3.303659686621606e-02, 3.303659686621606e-02, 9.202235221843139e+00, 1.341416743411938e+00, 1.162227130169867e+01, 9.896632747999955e-04, 5.693862463623886e+00, 5.693862463623886e+00, 3.610285500005122e+05, 1.774980168927379e+05, 3.970166490142638e+05, 3.819931757892115e+01, 2.270820723002453e+05, 2.270820723002453e+05, 3.416035244395434e-02, 3.475501813953918e-02, 3.454420179375649e-02, 3.437183858735150e-02, 3.445797034785218e-02, 3.445797034785218e-02, 3.709595524647125e-02, 5.864283848261793e-02, 5.107121077603443e-02, 4.479611240503675e-02, 4.786387105051244e-02, 4.786387105051244e-02, 2.346277095164451e-02, 6.651226722146274e-01, 3.839981853311544e-01, 1.666317594008231e-01, 2.533603399772363e-01, 2.533603399772363e-01, 7.515271475907020e-02, 1.860495393634486e+02, 7.342042585085188e+01, 1.859971804991142e-01, 1.850312362512264e+01, 1.850312362512264e+01, 1.136380192888414e+04, 9.293202546520555e+06, 1.004848582576360e+06, 2.234544179083027e+01, 2.866270253482781e+05, 2.866270253482788e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_gea2_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_gea2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
