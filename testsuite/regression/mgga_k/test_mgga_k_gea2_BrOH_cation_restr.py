
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_k_gea2_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_gea2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.174661428036044e+03, 2.174670382318328e+03, 2.174719078022784e+03, 2.174585419242660e+03, 2.174654199957851e+03, 2.174654199957851e+03, 5.872317282026687e+01, 5.872262989447155e+01, 5.871296661902575e+01, "nan", 5.872535303891933e+01, 5.180316785008896e+158, 2.283464658310274e+00, 3.069769412996968e+247, 6.199800114085374e+160, 3.472747176702942e+213, 1.515381359837794e+160, 3.491050292329440e+213, 2.832292206292505e+98, 2.026363276226612e+215, 3.068669126370083e+00, 2.304356808896689e+230, 3.712585968444266e+215, 3.080669376382135e+244, 4.787427229419799e+174, 3.205293098725391e+205, 1.769702495553026e+227, 9.599678649680796e+234, 4.271949308384513e+276, 3.570072372529033e+186, 1.801427348034212e+171, 3.624044482107371e+244, 2.370137368216885e+206, 1.275005908630654e+02, 2.156773538947710e+225, 2.997386541308796e+177, 2.038575111376189e+01, 2.061202879808782e+01, 2.033200776679095e+01, 2.053040989204215e+01, 2.053791944212245e+01, 3.456674805837993e+159, 1.641466780578144e+180, 2.250239367766099e+218, 2.920112124756467e+180, 3.237110974936640e+218, 1.564567285658232e+180, 1.699465791991433e+00, 1.402161615542910e-01, 1.417584220365898e+201, 1.322962154229163e-01, 9.428155032081324e+66, 3.851847625381693e+162, 8.788511370392916e+249, 7.419607248448210e-02, 6.103034789762935e+167, 2.302280301332675e+283, 1.047053256543291e-01, 4.593080533623173e-02, 5.562691408223595e+167, 7.157009791050721e+237, 7.989644013574817e+226, 1.583096991161308e+00, 1.642466967177405e+209, 1.959085914932769e+164, 4.734130727172778e+242, 3.395891544766095e+228, 1.825050277143932e+161, 3.645044461059098e+228, 5.947487372823020e+199, 2.057674875824533e+246, 1.331355580427179e+00, 1.685764204229549e+247, 3.360094251790727e-01, 3.348189602958543e+224, 6.222962427147601e-01, 1.288550212669576e+176, 7.354931084594145e+198, 1.042633633514585e+00, 1.025059233311372e+256, 4.062557803211777e+255, 1.680774700693662e+253, 1.030867520820170e-01, 5.208164278161075e+253, 3.202422824071468e+256, 5.510596955669803e+265, 2.168124293414503e+51, 1.145666103663418e+183, 3.113733365559888e+230, 8.075436421170018e+257]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_k_gea2_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_gea2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.340691448367181e+03, 3.340713240100395e+03, 3.340810806219727e+03, 3.340486575054284e+03, 3.340656367135574e+03, 3.340656367135574e+03, 8.747035897306912e+01, 8.747153298815606e+01, 8.750294839015163e+01, "nan", 8.747598379068866e+01, -8.445794608764039e+142, 3.155359418607864e+00, 2.312516591860911e+231, 2.056626095808308e+145, 6.845585230236283e+197, 2.833936521759832e+144, -3.153278045782945e+197, 1.040268934703118e+83, -3.874235040294018e+197, 4.326356279599855e+00, 5.073775379921379e+214, 9.102322217292212e+199, 1.512931870666329e+228, -4.616355523844274e+156, 9.661153783647030e+188, 7.623873101498690e+211, 1.024979464401867e+219, 9.393232445518200e+260, 2.261114628482170e+171, 3.039092609375996e+155, 8.319771179681805e+228, 4.335994645211597e+190, 2.003258785737783e+02, -1.283362096600156e+209, 6.757133664443071e+161, 2.591567429953002e+01, 2.636352726669851e+01, 2.548035128806158e+01, 2.587430400088232e+01, 2.637388686357373e+01, 2.133449528191341e+144, -2.814268833513812e+164, -1.005156453701073e+202, 5.286934758825326e+164, 2.370204035855883e+203, 9.844690001030542e+164, 2.597403275376494e+00, -3.947194993416599e-02, 3.974856516312884e+185, -4.607350912495624e-02, -1.088906118403380e+51, 2.689393430176569e+147, 6.200533816499226e+234, -7.410881795960067e-02, 3.331220488970020e+152, -1.859711720239028e+267, -6.570107669447053e-02, -4.581194769967472e-02, 1.544517712055928e+152, -1.454405030289522e+222, 5.895886550954022e+211, 2.587826416467611e+00, -4.297960537068788e+193, 1.538574014555095e+149, 3.691528157600536e+227, 3.930480014441321e+213, 1.379784798129933e+145, 1.156566825996381e+213, 1.119297432810564e+184, 9.908991996148972e+230, 2.024555483285699e+00, -1.759707698011784e+230, 2.445960871834700e-01, 7.009001473696654e+207, 8.386821833310729e-01, 3.105450234287909e+160, 2.488298057885723e+183, 1.441562456497980e+00, 6.783081714811567e+240, 2.449986353012569e+239, 3.139665474653403e+237, -3.984766054305131e-02, 2.318456405285523e+238, -3.210246142533801e+240, 6.082984006760453e+249, 1.282595904595587e+36, 7.383862590538589e+167, 9.869389952060350e+214, 6.908616956749563e+241]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_gea2_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_gea2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [7.183953787654940e-07, 7.183893682631378e-07, 7.183607928828548e-07, 7.184502578105938e-07, 7.184036418952782e-07, 7.184036418952782e-07, 1.664681860032593e-04, 1.664671080924783e-04, 1.664299622155120e-04, 1.663997345264199e-04, 1.664548556919529e-04, 1.664548556919529e-04, 2.319882383468693e-02, 2.327572545538750e-02, 2.523336579838395e-02, 2.461530012016502e-02, 2.474503507101396e-02, 2.474503507101396e-02, 1.347537376940258e+00, 1.288120930395629e+00, 1.463234655859147e-02, 3.079680157877443e+00, 2.174999573677185e+00, 2.174999573677185e+00, 3.194391961949024e+04, 2.739495708314610e+04, 1.631312792203622e+02, 1.658294723589477e+05, 8.357855840217377e+04, 8.357855840217377e+04, 4.959986591457623e-05, 4.957255826638204e-05, 4.959850537338012e-05, 4.957439916723075e-05, 4.958607665301922e-05, 4.958607665301922e-05, 9.339678835530145e-04, 9.139355898125141e-04, 9.489634823461900e-04, 9.308513546092439e-04, 9.157991813360176e-04, 9.157991813360176e-04, 3.466036699017193e-02, 2.703467963187623e-02, 4.375044316032168e-02, 3.894891499899829e-02, 3.303659686621606e-02, 3.303659686621606e-02, 9.202235221843139e+00, 1.341416743411938e+00, 1.162227130169867e+01, 9.896632747999955e-04, 5.693862463623886e+00, 5.693862463623886e+00, 3.610285500005122e+05, 1.774980168927379e+05, 3.970166490142638e+05, 3.819931757892115e+01, 2.270820723002453e+05, 2.270820723002453e+05, 3.416035244395434e-02, 3.475501813953918e-02, 3.454420179375649e-02, 3.437183858735150e-02, 3.445797034785218e-02, 3.445797034785218e-02, 3.709595524647125e-02, 5.864283848261793e-02, 5.107121077603443e-02, 4.479611240503675e-02, 4.786387105051244e-02, 4.786387105051244e-02, 2.346277095164451e-02, 6.651226722146274e-01, 3.839981853311544e-01, 1.666317594008231e-01, 2.533603399772363e-01, 2.533603399772363e-01, 7.515271475907020e-02, 1.860495393634486e+02, 7.342042585085188e+01, 1.859971804991142e-01, 1.850312362512264e+01, 1.850312362512264e+01, 1.136380192888414e+04, 9.293202546520555e+06, 1.004848582576360e+06, 2.234544179083027e+01, 2.866270253482781e+05, 2.866270253482788e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_gea2_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_gea2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_gea2_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_gea2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
