
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data

# test_mgga_k_gea2_BrOH_cation_restr_1_zk() not generated due to NaN in reference data

# test_mgga_k_gea2_BrOH_cation_restr_1_vrho() not generated due to NaN in reference data


def test_mgga_k_gea2_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_gea2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([7.183953787654940e-07, 7.183893682631378e-07, 7.183607928828548e-07, 7.184502578105938e-07, 7.184036418952782e-07, 7.184036418952782e-07, 1.664681860032593e-04, 1.664671080924783e-04, 1.664299622155120e-04, 1.663997345264199e-04, 1.664548556919529e-04, 1.664548556919529e-04, 2.319882383468693e-02, 2.327572545538750e-02, 2.523336579838395e-02, 2.461530012016502e-02, 2.474503507101396e-02, 2.474503507101396e-02, 1.347537376940258e+00, 1.288120930395629e+00, 1.463234655859147e-02, 3.079680157877443e+00, 2.174999573677185e+00, 2.174999573677185e+00, 3.194391961949024e+04, 2.739495708314610e+04, 1.631312792203622e+02, 1.658294723589477e+05, 8.357855840217377e+04, 8.357855840217377e+04, 4.959986591457623e-05, 4.957255826638204e-05, 4.959850537338012e-05, 4.957439916723075e-05, 4.958607665301922e-05, 4.958607665301922e-05, 9.339678835530145e-04, 9.139355898125141e-04, 9.489634823461900e-04, 9.308513546092439e-04, 9.157991813360176e-04, 9.157991813360176e-04, 3.466036699017193e-02, 2.703467963187623e-02, 4.375044316032168e-02, 3.894891499899829e-02, 3.303659686621606e-02, 3.303659686621606e-02, 9.202235221843139e+00, 1.341416743411938e+00, 1.162227130169867e+01, 9.896632747999955e-04, 5.693862463623886e+00, 5.693862463623886e+00, 3.610285500005122e+05, 1.774980168927379e+05, 3.970166490142638e+05, 3.819931757892115e+01, 2.270820723002453e+05, 2.270820723002453e+05, 3.416035244395434e-02, 3.475501813953918e-02, 3.454420179375649e-02, 3.437183858735150e-02, 3.445797034785218e-02, 3.445797034785218e-02, 3.709595524647125e-02, 5.864283848261793e-02, 5.107121077603443e-02, 4.479611240503675e-02, 4.786387105051244e-02, 4.786387105051244e-02, 2.346277095164451e-02, 6.651226722146274e-01, 3.839981853311544e-01, 1.666317594008231e-01, 2.533603399772363e-01, 2.533603399772363e-01, 7.515271475907020e-02, 1.860495393634486e+02, 7.342042585085188e+01, 1.859971804991142e-01, 1.850312362512264e+01, 1.850312362512264e+01, 1.136380192888414e+04, 9.293202546520555e+06, 1.004848582576360e+06, 2.234544179083027e+01, 2.866270253482781e+05, 2.866270253482788e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_gea2_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_gea2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
