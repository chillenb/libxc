
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_k_csk_loc4_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk_loc4", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([9.968812876513441e+02, 9.968590506696573e+02, 9.968062022278168e+02, 9.971360414133248e+02, 9.969566725364068e+02, 9.969566725364068e+02, 8.115903513316195e+01, 8.114236677607803e+01, 8.070072372636876e+01, 8.085037586180425e+01, 8.083968765600108e+01, 8.083968765600108e+01, 6.392077341341224e+00, 6.415750530304082e+00, 7.000348483115234e+00, 6.635871817955401e+00, 6.701465855457647e+00, 6.701465855457647e+00, 7.028805717920003e-01, 6.840950458154237e-01, 1.430273942074244e+01, 1.024017739760632e+00, 8.443761325304038e-01, 8.443761325304038e-01, 8.968385490439417e-01, 8.811991555995859e-01, 1.137675361646977e+00, 1.019564569646807e+00, 9.060517478531671e-01, 9.060517478531672e-01, 1.465472604663846e+03, 5.502997621045167e+02, 4.137020202949689e+01, 2.995815313546636e+03, 4.135816043288497e+01, 2.210555125365547e+02, 2.720445601017069e+01, 7.491719763306187e+01, 4.016311014393960e+01, 3.947638644520275e+01, 3.952174381970310e+01, 2.734417620963890e+01, 4.562583970262341e+01, 1.574864455573147e+01, 3.746213913997092e+01, 2.306482546969651e+00, 2.572922685775321e+00, 3.589365829236932e+00, 9.219460237835981e-01, 6.884763541130749e+00, 8.996654982293117e-01, 2.718489286853522e+01, 7.432011899474984e-01, 7.430526497467913e-01, 6.502302851390624e+00, 6.591661934055846e+03, 2.817998616719934e-01, 8.107747112534071e-01, 1.644562371698291e+00, 4.138413698373848e-01, 2.747938556277159e+05, 1.778162424514166e+00, 1.735135084899902e+00, 2.461317519399357e+03, 1.717288811339329e+00, 3.478018574211976e+06, 1.527275253712666e+00, 1.591439899629146e+00, 2.401030963803530e+01, 4.956545675313792e-01, 2.749234937147462e+00, 5.973399450638796e+01, 6.119916727547810e+01, 1.064542702525497e+00, 9.836380974050030e-01, 6.698755034270305e-01, 2.889420842814756e+00, 1.833077578282133e+00, 1.758033181705218e+00, 9.656281648611147e-01, 1.363112907683118e+00, 9.063575664472365e-01, 7.157195819185465e-01, 7.157247279658812e-01, 8.123643722870599e-01, 3.205980404412532e-01, 4.583511409756730e-01, 7.256151233411910e-01, 3.710947565390497e-01, 3.710947565390492e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_k_csk_loc4_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk_loc4", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-5.844884987057675e+02, -5.845838449740712e+02, -5.844541237424598e+02, -5.845588737752311e+02, -5.843984938124665e+02, -5.844640731583373e+02, -5.847861224321756e+02, -5.849582420930666e+02, -5.844652436458467e+02, -5.848009058913094e+02, -5.844652436458467e+02, -5.848009058913094e+02, 9.716843772391398e+01, 9.715825536996563e+01, 9.716810201658767e+01, 9.715706470809999e+01, 9.715134341840474e+01, 9.714808712578370e+01, 9.721179930184979e+01, 9.720623090366566e+01, 9.713891299458741e+01, 9.719532108852849e+01, 9.713891299458741e+01, 9.719532108852849e+01, 3.756506500099534e+00, 3.766598281794700e+00, 3.751632436794961e+00, 3.763929035542038e+00, 3.689407178755257e+00, 3.676038214007667e+00, 3.735531850130938e+00, 3.739215810366816e+00, 3.795663789772751e+00, 3.698046891473397e+00, 3.795663789772751e+00, 3.698046891473397e+00, 3.207225092912189e-01, 3.349091059467975e-01, 3.223374074745146e-01, 3.393996952904482e-01, 4.943320701004588e+00, 5.180577288061650e+00, 2.546749699255895e-01, 2.593778014075070e-01, 3.465607092151548e-01, 1.980039370079746e-01, 3.465607092151548e-01, 1.980039370079745e-01, 1.203226544935575e-01, 1.209429077140683e-01, 1.172320984018058e-01, 1.175493355350594e-01, 1.608097234572421e-01, 1.607900871216981e-01, 1.256519508603083e-01, 1.273912297753425e-01, 1.204025009470365e-01, 7.556290244339553e-02, 1.204025009470366e-01, 7.556290244339503e-02, 2.116991933755359e+02, 2.116000446009548e+02, 2.117226385929372e+02, 2.116226608109525e+02, -4.136988682152828e+01, -4.137050633718120e+01, 2.117212689316594e+02, 2.116218361622012e+02, -4.003266355459294e+01, -4.001194266480715e+01, 2.117106685849164e+02, 2.116113017625451e+02, -2.720496201341012e+01, -2.720394714903742e+01, 3.381703059877874e+01, 3.380111608937911e+01, 3.329885141599342e+01, 3.332940824877805e+01, 3.362992885701046e+01, 3.366828173195014e+01, 3.375489772044217e+01, 3.363562828324299e+01, -1.592614865564544e+01, -1.518876473857619e+01, 2.750343553835429e+00, 2.735395822946872e+00, 3.114022923920202e+00, 3.115517737339300e+00, 2.285898563967190e+00, 2.443982025228806e+00, 2.373345911930904e+00, 2.535102740600377e+00, 2.955199118664393e+00, 2.673673076879547e+00, 2.955199118664394e+00, 2.673673076879550e+00, -9.287706266380493e-01, -9.153129961542248e-01, 3.907131925128224e-01, 3.930488203249254e-01, -9.015103943453137e-01, -8.980882884155864e-01, 2.824152742592591e+01, 2.821553311570680e+01, -8.094402731738658e-01, -6.781057086639448e-01, -8.121222696552205e-01, -6.849024733677287e-01, 1.060405991728725e-01, 1.139804197906367e-01, 1.142863961494807e-01, 1.189398303398156e-01, -2.899046030184472e-01, -2.748248835865256e-01, -8.029051312337991e-01, -8.185008993139148e-01, 6.790505525240706e-02, 6.853302567187824e-02, -4.111906775263499e-01, -4.146819266480015e-01, 2.629495587075940e+00, 2.649470338735839e+00, 2.364446239019450e+00, 2.387332251866251e+00, 2.424318808302715e+00, 2.447281896795838e+00, 2.627042058051376e+00, 2.646940696534240e+00, 2.449380871681332e+00, 2.471826050826166e+00, 2.626063635300404e+00, 2.645950692174201e+00, 2.441880775873546e+00, 2.458371218392013e+00, 2.009418045372110e+00, 2.017281798345961e+00, 2.135815283742999e+00, 2.152307170427874e+00, -4.864800896957749e-01, -4.902698293114044e-01, 2.197937985001317e+00, 2.213418656869881e+00, 2.197937985001305e+00, 2.213418656869911e+00, 3.423805412529185e+00, 3.432700007333101e+00, -1.065811002516784e+00, -1.063296006555732e+00, -9.910943810187927e-01, -9.764015937143740e-01, -6.699889998174742e-01, -6.697626012620534e-01, 8.275944326588229e-01, 8.258539192523456e-01, 8.275944326588218e-01, 8.258539192523440e-01, 1.707887181382642e+00, 1.727244070537969e+00, -9.661310038406514e-01, -9.651355495425284e-01, 1.719481197672131e-01, 1.706301210982520e-01, 9.094627263467996e-01, 9.339355095836579e-01, -7.598705016110414e-01, -6.782156197002187e-01, -7.594454664933592e-01, -6.781690190518341e-01, -8.160102974632626e-01, -8.074234383090123e-01, -3.662840966403836e-01, -2.752038646114244e-01, -4.661581390799410e-01, -4.517810851509203e-01, -7.230163685054464e-01, -7.280904282845491e-01, -2.863246864083914e-01, -4.070580830778693e-01, -2.863246864083908e-01, -4.070580830778690e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_csk_loc4_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk_loc4", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.222941069525383e-05, 0.000000000000000e+00, 1.222968443667864e-05, 1.222927620389987e-05, 0.000000000000000e+00, 1.222958669228196e-05, 1.222884978022725e-05, 0.000000000000000e+00, 1.222897486750055e-05, 1.223037040822927e-05, 0.000000000000000e+00, 1.223091234309393e-05, 1.222933026778041e-05, 0.000000000000000e+00, 1.223014115528683e-05, 1.222933026778041e-05, 0.000000000000000e+00, 1.223014115528683e-05, -4.944003939129213e-04, 0.000000000000000e+00, -4.944206313606236e-04, -4.943957568574284e-04, 0.000000000000000e+00, -4.944188657519541e-04, -4.943122524514328e-04, 0.000000000000000e+00, -4.942817240514452e-04, -4.942176155413913e-04, 0.000000000000000e+00, -4.941968079835725e-04, -4.946484918998246e-04, 0.000000000000000e+00, -4.940936622513430e-04, -4.946484918998246e-04, 0.000000000000000e+00, -4.940936622513430e-04, -6.931179800653445e-02, 0.000000000000000e+00, -6.849406792292891e-02, -6.963641829989027e-02, 0.000000000000000e+00, -6.862873495172268e-02, -7.417400356429271e-02, 0.000000000000000e+00, -7.572830547024959e-02, -7.334552139519983e-02, 0.000000000000000e+00, -7.287090193642294e-02, -6.694201655940997e-02, 0.000000000000000e+00, -8.146462951157815e-02, -6.694201655940997e-02, 0.000000000000000e+00, -8.146462951157815e-02, -4.244906977753854e+00, 0.000000000000000e+00, -3.783809105043911e+00, -4.091776743709882e+00, 0.000000000000000e+00, -3.590820842626492e+00, -4.572395320232218e-02, 0.000000000000000e+00, -4.140615690724840e-02, -9.338617457031940e+00, 0.000000000000000e+00, -8.962415989619171e+00, -3.728587405423126e+00, 0.000000000000000e+00, -2.414789258665025e+01, -3.728587405423121e+00, 0.000000000000000e+00, -2.414789258665024e+01, -1.043542997348642e+05, 0.000000000000000e+00, -8.697182560922936e+04, -9.069328500244662e+04, 0.000000000000000e+00, -7.377342614215957e+04, -5.275313869692275e+02, 0.000000000000000e+00, -4.479592262482792e+02, -4.804074318139646e+05, 0.000000000000000e+00, -5.052455458802899e+05, -1.469860621409361e+05, 0.000000000000000e+00, -7.976184399510334e+05, -1.469860621409361e+05, 0.000000000000000e+00, -7.976184399510326e+05, -1.472586842491321e-04, 0.000000000000000e+00, -1.473645573290202e-04, -1.471762149091606e-04, 0.000000000000000e+00, -1.472848212505277e-04, 8.924464266828369e-04, 0.000000000000000e+00, 8.931000054143450e-04, -1.471829013767182e-04, 0.000000000000000e+00, -1.472890679530835e-04, 8.908278461365727e-04, 0.000000000000000e+00, 8.914439566320484e-04, -1.472167756227923e-04, 0.000000000000000e+00, -1.473245591380972e-04, 1.681014769388945e-02, 0.000000000000000e+00, 1.681269629690747e-02, -2.713280958506702e-03, 0.000000000000000e+00, -2.715497349859211e-03, -2.825746272419394e-03, 0.000000000000000e+00, -2.811134687988966e-03, -2.772114026604149e-03, 0.000000000000000e+00, -2.757183336921718e-03, -2.702134405387215e-03, 0.000000000000000e+00, -2.737948509413763e-03, 1.389033724718635e-02, 0.000000000000000e+00, 1.364821934063028e-02, -1.025335659798429e-01, 0.000000000000000e+00, -1.033522695104260e-01, -8.034770046340062e-02, 0.000000000000000e+00, -8.023837098314476e-02, -1.373710303756100e-01, 0.000000000000000e+00, -1.232695380472547e-01, -1.216373575430305e-01, 0.000000000000000e+00, -1.102758061066137e-01, -9.114341563490407e-02, 0.000000000000000e+00, -1.062500958298354e-01, -9.114341563490407e-02, 0.000000000000000e+00, -1.062500958298355e-01, 1.680322502128135e+02, 0.000000000000000e+00, 1.633153648049708e+02, -4.013980501624541e+00, 0.000000000000000e+00, -3.954479255697701e+00, 2.269837377312026e+02, 0.000000000000000e+00, 1.940019559287600e+02, -2.937320018813114e-03, 0.000000000000000e+00, -2.941282504421439e-03, 1.118811432534342e+02, 0.000000000000000e+00, 9.365151708881943e+01, 1.121622532197286e+02, 0.000000000000000e+00, 9.434973989441666e+01, -1.137880614283164e+06, 0.000000000000000e+00, -1.013785973676060e+06, -5.393192492064009e+05, 0.000000000000000e+00, -5.155543621544106e+05, 7.817219853849012e+06, 0.000000000000000e+00, 6.581441351138420e+06, 6.939684420990091e+02, 0.000000000000000e+00, 6.813232580549858e+02, -1.210640295064698e+06, 0.000000000000000e+00, -4.674117176644959e+05, 7.337213909483018e+06, 0.000000000000000e+00, 2.832798288875731e+06, -1.020468181015161e-01, 0.000000000000000e+00, -1.008724716623016e-01, 6.292686936810395e-01, 0.000000000000000e+00, 6.219547129496448e-01, 6.254503941826526e-01, 0.000000000000000e+00, 6.181833347862691e-01, -1.026788784120382e-01, 0.000000000000000e+00, -1.014966877624549e-01, 6.238720007562848e-01, 0.000000000000000e+00, 6.166568959141232e-01, -1.029388801247870e-01, 0.000000000000000e+00, -1.017483878258304e-01, 6.710491118734169e-01, 0.000000000000000e+00, 6.644380041926747e-01, -1.730491046278561e-01, 0.000000000000000e+00, -1.672816699096142e-01, -1.526957216577620e-01, 0.000000000000000e+00, -1.506806546993901e-01, 8.097834015680696e-01, 0.000000000000000e+00, 8.017928457085399e-01, -1.429507433718234e-01, 0.000000000000000e+00, -1.413694453425234e-01, -1.429507433718234e-01, 0.000000000000000e+00, -1.413694453425234e-01, -6.985503566990114e-02, 0.000000000000000e+00, -6.951465508943719e-02, 1.207679178428570e+01, 0.000000000000000e+00, 1.186942019883408e+01, 7.016998484024255e+00, 0.000000000000000e+00, 6.810034044353761e+00, 3.024385774888029e+00, 0.000000000000000e+00, 2.974767836557190e+00, -7.520821758590905e-01, 0.000000000000000e+00, -7.528786651416955e-01, -7.520821758590915e-01, 0.000000000000000e+00, -7.528786651416954e-01, -2.255249834329638e-01, 0.000000000000000e+00, -2.209294459765018e-01, 3.383498386562854e+03, 0.000000000000000e+00, 3.314985821479716e+03, -2.293785060364240e+02, 0.000000000000000e+00, -2.078035487854040e+02, -5.650959901475263e-01, 0.000000000000000e+00, -5.402841971589643e-01, 3.625707342598806e+02, 0.000000000000000e+00, 3.079851688887231e+02, 3.624045033983388e+02, 0.000000000000000e+00, 3.079704017106945e+02, 2.160802635499018e+05, 0.000000000000000e+00, 1.941851121390783e+05, 1.678524443444068e+08, 0.000000000000000e+00, 1.667067706068541e+08, 1.992427887587956e+07, 0.000000000000000e+00, 1.656041588063657e+07, 4.122466897702454e+02, 0.000000000000000e+00, 3.926655633759152e+02, 8.633543549065117e+06, 0.000000000000000e+00, 3.678861720624852e+06, 8.633543549065135e+06, 0.000000000000000e+00, 3.678861720624863e+06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_csk_loc4_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk_loc4", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([1.011319815422164e-02, 1.010993370102863e-02, 1.011342822206025e-02, 1.011010139474905e-02, 1.011377193121025e-02, 1.011069955715218e-02, 1.011115726443413e-02, 1.010737502355151e-02, 1.011335547768859e-02, 1.010840800508019e-02, 1.011335547768859e-02, 1.010840800508019e-02, 2.171250000000001e-01, 2.171250000000000e-01, 2.171250000000002e-01, 2.171250000000001e-01, 2.171250000000000e-01, 2.171250000000001e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000001e-01, 2.171250000000001e-01, 2.171250000000001e-01, 2.171250000000002e-01, 2.171250000000001e-01, 2.171250000000001e-01, 2.171250000000001e-01, 2.171250000000000e-01, 2.171250000000001e-01, 2.171250000000000e-01, 2.171250000000001e-01, 2.171250000000000e-01, 2.171094696448658e-01, 2.171250000000001e-01, 2.171136328964708e-01, 2.171250000000002e-01, 2.171250000000002e-01, 2.171250000000000e-01, 2.171250000000002e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171249999999999e-01, 2.171250000000001e-01, 2.171250000000000e-01, 2.171250000000001e-01, 2.171250000000001e-01, 2.171250000000001e-01, 2.171250000000001e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171249999999999e-01, 2.171250000000002e-01, 2.171249999999999e-01, 2.171250000000001e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171249999999999e-01, 2.171250000000000e-01, 7.615695026966731e-11, 4.480215793275657e-11, 2.171249999999999e-01, 2.171250000000000e-01, 2.914043942498702e-04, 2.989400100366842e-04, 2.171249999999999e-01, 2.171250000000000e-01, 2.058072803636129e-10, -9.169774275535242e-11, 2.171250000000002e-01, 2.171250000000001e-01, 2.171250000000001e-01, 2.171250000000000e-01, 2.171249999999999e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.829456768652005e-02, 3.308171640863369e-02, 2.171250000000003e-01, 2.171250000000002e-01, 2.171250000000001e-01, 2.171250000000002e-01, 2.171250000000001e-01, 2.171250000000001e-01, 2.171250000000000e-01, 2.171250000000001e-01, 2.171249999999999e-01, 2.171250000000000e-01, 2.171249999999999e-01, 2.171250000000000e-01, -1.973748601729737e-12, -6.579883370333171e-13, 2.171250000000001e-01, 2.171250000000003e-01, 3.645964672643489e-09, 2.495862911035311e-10, 2.171250000000001e-01, 2.171250000000001e-01, 4.690937005048040e-04, 1.383312968768305e-03, 1.994874877041388e-06, 4.111702231879812e-06, 2.171250000000000e-01, 2.171250000000000e-01, 2.171249999999999e-01, 2.171250000000000e-01, 0.000000000000000e+00, 0.000000000000000e+00, 6.798099023343300e-11, -2.211860120107712e-10, 2.171250000000001e-01, 2.171250000000000e-01, 0.000000000000000e+00, 0.000000000000000e+00, 2.171250000000001e-01, 2.171250000000002e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 2.171250000000000e-01, 2.171250000000000e-01, 0.000000000000000e+00, 0.000000000000000e+00, 2.171250000000000e-01, 2.171249999999999e-01, 0.000000000000000e+00, 0.000000000000000e+00, 2.167291070677606e-01, 2.161004394823830e-01, 2.171250000000000e-01, 2.171250000000001e-01, 1.872818732380739e-04, 7.294949938393334e-05, 2.171250000000001e-01, 2.171250000000000e-01, 2.171250000000001e-01, 2.171250000000000e-01, 2.171250000000001e-01, 2.171250000000001e-01, 3.747292045725855e-10, 1.245237714780406e-10, 6.840382361777517e-10, -4.384980932421885e-10, 3.835267691099669e-09, 2.894264073866134e-09, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000001e-01, 2.171250000000000e-01, 2.171249999999997e-01, 2.171249999999998e-01, -1.140737570623086e-09, -1.066624010411683e-09, 2.171250000000001e-01, 2.171250000000000e-01, 2.171249999999999e-01, 2.171249999999999e-01, 1.085938325781760e-09, -5.011307155883333e-10, 8.544926521189334e-05, 8.935672826935019e-06, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 7.882266567214763e-10, 1.622194874611519e-10, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
