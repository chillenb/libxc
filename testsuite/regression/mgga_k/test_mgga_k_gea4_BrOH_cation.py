
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_k_gea4_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_gea4", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.179916555765740e+03, 2.179925227658053e+03, 2.179973176340042e+03, 2.179843712948866e+03, "nan", inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, 2.372003120602777e-01, 2.354825827520602e-01, inf, inf, inf, inf, inf, 1.267655913270491e+151, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, 1.696936693756947e+01, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_k_gea4_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_gea4", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.321426725316725e+03, 3.321418567670670e+03, 3.321453170591558e+03, 3.321437777262592e+03, 3.321535347217524e+03, 3.321556211009321e+03, 3.321236739962806e+03, 3.321175590653521e+03, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 1.965302343490547e-02, 5.542199231927663e-02, 3.983868423235326e-02, 7.863406353823643e-02, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 3.633829821333816e+135, -3.831360445869565e+151, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 2.757999096992046e+01, 2.755568124124152e+01, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan"]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_gea4_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_gea4", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.578709496828652e-06, 0.000000000000000e+00, 1.578715212663023e-06, 1.578689320930031e-06, 0.000000000000000e+00, 1.578700553596037e-06, 1.578628264045086e-06, 0.000000000000000e+00, 1.578612081546474e-06, 1.578856108605300e-06, 0.000000000000000e+00, 1.578902521667363e-06, 1.578697288906598e-06, 0.000000000000000e+00, "nan", 1.578697288906598e-06, 0.000000000000000e+00, -8.387674270096224e+146, 3.784396450186202e-04, 0.000000000000000e+00, -7.200340840567267e+239, -1.341203764544236e+153, 0.000000000000000e+00, -7.702193451695975e+205, -3.341415644882107e+152, 0.000000000000000e+00, -7.696497618550927e+205, -1.146230938874077e+89, 0.000000000000000e+00, -8.578014943536176e+205, 3.786528815422251e-04, 0.000000000000000e+00, -4.077824213908669e+220, -9.330426178237209e+205, 0.000000000000000e+00, -7.719164640831756e+234, -4.339363729135437e+166, 0.000000000000000e+00, -3.282197052613340e+197, -3.180434501286058e+221, 0.000000000000000e+00, -1.632440117882142e+226, -1.773217887588661e+268, 0.000000000000000e+00, -1.566139398355426e+178, -1.222809535054964e+172, 0.000000000000000e+00, -2.419113291289320e+245, -1.261037506958057e+207, 0.000000000000000e+00, 8.044258208758046e-02, -1.147804373033521e+226, 0.000000000000000e+00, -2.692734514296984e+178, 5.764557185932704e+00, 0.000000000000000e+00, 4.879604901638496e+00, 5.388098762419841e+00, 0.000000000000000e+00, 4.470565802769245e+00, 3.785060108945273e-02, 0.000000000000000e+00, -2.766459836773256e+158, -6.542024046481112e+183, 0.000000000000000e+00, -1.030387825060777e+222, -7.969448098190163e+182, 0.000000000000000e+00, -1.446215966691830e+223, -5.654707130462424e+182, 0.000000000000000e+00, 8.268212016719581e+01, 7.060945710012686e+07, 0.000000000000000e+00, -5.604725465449607e+213, 5.444273260615177e+07, 0.000000000000000e+00, -3.257607599202499e+82, -4.390195946686113e+168, 0.000000000000000e+00, -6.476950959908081e+255, 9.401055898598585e+08, 0.000000000000000e+00, -1.988773342428286e+177, -1.246365804229699e+291, 0.000000000000000e+00, 1.316011590429132e+09, 1.250823841782261e+08, 0.000000000000000e+00, -4.787574899257665e+177, -4.525341350770000e+228, 0.000000000000000e+00, -4.974899672792711e+217, 1.061691970347254e-04, 0.000000000000000e+00, -1.032622282905615e+200, -1.227909485954224e+155, 0.000000000000000e+00, -2.973041355168157e+233, -1.974572930622393e+219, 0.000000000000000e+00, -6.725752067987505e+151, -1.540419875084305e+219, 0.000000000000000e+00, -2.871132510553090e+190, -9.278576921227458e+236, 0.000000000000000e+00, 1.063083711449806e-04, -3.897550555707234e+241, 0.000000000000000e+00, 2.492504523766368e-03, -4.460257001210657e+217, 0.000000000000000e+00, 2.425945560091341e-03, -2.899195150985569e+169, 0.000000000000000e+00, -1.632114735687433e+192, 2.516906235979036e-03, 0.000000000000000e+00, -2.941632285401635e+246, -2.799588151948525e+246, 0.000000000000000e+00, -4.735474606428522e+246, 2.393027657304850e-03, 0.000000000000000e+00, -1.475027083322957e+245, -2.318235126023399e+249, 0.000000000000000e+00, -4.982487975622856e+255, -9.264153089815020e+41, 0.000000000000000e+00, -2.193382428044834e+178, -1.949445056174217e+222, 0.000000000000000e+00, -3.787539886452845e+249, -3.656171752540426e+249, 0.000000000000000e+00, 7.752873323064774e-02, -5.021969139053322e+250, 0.000000000000000e+00, -3.110214185291785e+159, -1.268237462038609e+154, 0.000000000000000e+00, -9.534547492270671e+245, -5.445600030466222e+48, 0.000000000000000e+00, -1.195248087426816e+185, -1.256034359651828e+255, 0.000000000000000e+00, -8.301354786558715e+225, -7.682767617957192e+247, 0.000000000000000e+00, -6.143916766182159e+223, 2.037179426789818e-03, 0.000000000000000e+00, 2.039831907711689e-03, -3.174684208160882e+173, 0.000000000000000e+00, -8.271033893650959e+235, -4.354864124956692e+179, 0.000000000000000e+00, 3.834604869596879e+01, -1.158769245128134e+244, 0.000000000000000e+00, 2.961116732428395e+09, -4.051451208236263e+268, 0.000000000000000e+00, -2.271710942005982e+185, 1.858111990218319e+09, 0.000000000000000e+00, -7.555375234680197e+177, -7.370661298484197e+186, 0.000000000000000e+00, -9.625506507377507e+234, -3.896838605203004e+258, 0.000000000000000e+00, -1.421087989391249e+196, -2.456249394616118e+192, 0.000000000000000e+00, -3.679654397509588e+195, -8.562015672999960e+245, 0.000000000000000e+00, 6.865093510614284e-02, 7.204990160697307e-02, 0.000000000000000e+00, -3.825018800753755e+231, 7.113446103368365e-02, 0.000000000000000e+00, -1.449469283261681e+193, -4.658220413303103e+178, 0.000000000000000e+00, -3.438404897640332e+244, 7.075619367899043e-02, 0.000000000000000e+00, -3.851178931297829e+207, -5.431668593552757e+154, 0.000000000000000e+00, -1.314222126447004e+246, -6.514080524581632e+240, 0.000000000000000e+00, -8.527163558907613e+157, -8.248191332680229e+159, 0.000000000000000e+00, -1.587176968993521e+208, -1.554508411705471e+155, 0.000000000000000e+00, -7.933808132869191e+212, -1.103736686856977e+256, 0.000000000000000e+00, -1.433676632462634e+222, 1.070115984183865e-01, 0.000000000000000e+00, -2.728315450490699e+212, -1.752052583030687e+222, 0.000000000000000e+00, -4.396412324499573e+217, -7.194981428066122e+171, 0.000000000000000e+00, -3.180820174963710e+221, -7.041157670440893e+258, 0.000000000000000e+00, 2.684951221864473e+00, -1.992716190887941e+162, 0.000000000000000e+00, -6.755154526291015e+171, -2.596028160664485e+233, 0.000000000000000e+00, 4.162593351137939e-01, -1.113986707875163e+181, 0.000000000000000e+00, -1.533862826699102e+229, -1.456855456156898e+224, 0.000000000000000e+00, -1.224931718146098e+248, -3.441989317954589e+256, 0.000000000000000e+00, 1.824038468254368e-01, -8.431670920476047e+250, 0.000000000000000e+00, -1.542119977943044e+52, 3.575510073061945e+03, 0.000000000000000e+00, -1.869546439883485e+221, 4.527740053666469e-01, 0.000000000000000e+00, -1.682889687582771e+174, -1.002535699462459e+186, 0.000000000000000e+00, -6.445540721152179e+180, -1.627564862416154e+224, 0.000000000000000e+00, -5.216631945590833e+233, -5.771197525096824e+212, 0.000000000000000e+00, 1.096668347388112e+07, -3.436911325186406e+263, 0.000000000000000e+00, -4.007251532940058e+186, -6.239938220340458e+265, 0.000000000000000e+00, 1.011443213773406e+10, -1.315954229707271e+215, 0.000000000000000e+00, 3.625464792813667e+02, -1.558012319869994e+178, 0.000000000000000e+00, -8.158055069665846e+175, 2.165487854425396e+09, 0.000000000000000e+00, -2.168892617683716e+243]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_gea4_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_gea4", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [1.643515822351769e-01, 1.643515884762100e-01, 1.643516617513429e-01, 1.643516462763810e-01, 1.643518100016653e-01, 1.643518885217170e-01, 1.643509134301547e-01, 1.643507448898489e-01, 1.643516349929124e-01, "nan", 1.643516349929124e-01, 1.441384041947557e+151, 1.634628578314559e-01, 5.339835774266050e+241, 9.946984917349031e+154, 5.712034460214221e+207, 2.478566392762337e+154, 5.709394034783871e+207, 8.504040818673785e+90, 6.364412102936564e+207, 1.634612163112846e-01, 3.026151367644765e+222, 6.916338210622691e+207, 5.728388329063786e+236, 2.295568835000248e+166, 1.757045959044317e+197, 1.674640002471321e+221, 8.721731166658511e+225, 8.765603322898420e+267, 7.583044532218164e+177, 6.113031684251740e+171, 1.217232370171520e+245, 6.907177927745857e+206, 1.557361354359666e-01, 6.286957356178785e+225, 1.211981192936299e+178, 1.428396182364120e-01, 1.452426662819863e-01, 1.442729531398184e-01, 1.467884075719011e-01, 1.612926083839360e-01, 2.449801388448321e+158, 2.568626631739975e+181, 4.215480174392192e+219, 7.837099286143159e+180, 2.195964661861053e+220, 5.560799276120490e+180, 7.093329724481079e-02, -2.335986066620089e+01, 2.362910045411429e+207, -2.070297843533696e+01, 1.619087227162118e+76, 3.051455427198705e+164, 5.301558444331932e+251, -6.791891976855470e+01, 1.443292074852811e+170, 3.109143739397766e+284, -5.723506287695871e+01, -2.942803261220586e+01, 2.200857003551197e+170, 1.126787080216253e+231, 1.237834872296509e+220, 1.649969458619987e-01, 2.570720914646655e+202, 3.057536748275498e+157, 7.397557412830840e+235, 4.919118102641706e+221, 1.674332742998251e+154, 3.836659364904601e+221, 7.145777956925618e+192, 2.310976352201814e+239, 1.649893476712350e-01, 5.152377959600681e+242, 1.588324025215332e-01, 6.027490673176209e+218, 1.590106813000288e-01, 3.761973367544683e+170, 2.128827452875170e+193, 1.585036862501513e-01, 3.911957867304817e+247, 3.798906722285565e+247, 6.341758009888835e+247, 1.592809109376767e-01, 1.975359514707922e+246, 8.290158818583228e+248, 1.767655675470278e+255, 4.227695520022363e+41, 1.002313748101120e+178, 5.203400736259777e+221, 1.126608119923622e+249, 1.102125478836197e+249, 1.656349432927309e-01, 2.020320032437294e+250, 1.073327848820715e+159, 5.102073468589724e+153, 3.290350676732491e+245, 7.201792147541810e+45, 1.626366792940610e+182, 1.147354681184786e+253, 7.697170453022988e+223, 7.521603426506894e+244, 7.037634381389112e+220, 1.659653622882801e-01, 1.659664947518775e-01, 6.289797218527627e+170, 1.948036088411959e+233, 8.628011627048185e+176, 1.043758837094405e-01, 3.733977459618180e+236, -1.014691663295367e+02, 2.754457794474356e+261, 1.615660228835483e+178, -4.994862869034669e+01, 2.551070783427946e+170, 2.360229418278589e+183, 3.139481036841117e+231, 1.180235638721582e+251, 1.114789331156951e+189, 7.439243363180637e+184, 2.886548542603360e+188, 3.076436683840133e+245, 1.664170863009634e-01, 1.659522800833427e-01, 1.366665707723478e+231, 1.661135744248929e-01, 5.210497712310978e+192, 1.663452287324772e+178, 1.242157246962390e+244, 1.661807743905761e-01, 1.387834216983423e+207, 1.934751782049399e+154, 4.736010630347978e+245, 2.157179592810625e+240, 2.851921809643070e+157, 1.725176122404523e+159, 3.363042655290552e+207, 3.732825068294016e+154, 1.930614774574519e+212, 3.025850473204491e+255, 3.971974879305666e+221, 1.640497009536779e-01, 7.076368796827127e+211, 4.493990484355960e+221, 1.140287314851353e+217, 3.776620871577767e+171, 1.677776764222553e+221, 1.295626959001116e+257, 1.423885336790281e-01, 6.310758361715864e+160, 2.204314169417972e+170, 1.907478668008563e+232, 1.605876776627273e-01, 5.431079288921863e+179, 7.470212609674908e+227, 7.102685731303370e+222, 5.965657559208053e+246, 5.596110598060735e+255, 1.613687083419648e-01, 5.537773175551870e+246, 1.033770124060650e+48, -3.524249172321626e-01, 3.298790445578574e+217, 1.622174747777444e-01, 1.142101796347987e+173, 6.144613688921443e+182, 4.650686237580275e+177, 9.975462558163337e+220, 3.763984969680574e+230, 5.935240534424038e+206, -1.172267724993849e+01, 4.550175454678123e+254, 5.341716700597720e+177, 6.959614179723840e+257, -1.286419882415868e+02, 7.093671805939162e+211, -4.653548395902611e-03, 4.010230075327540e+170, 4.927886026345373e+168, -5.271778836864333e+01, 1.310123005061422e+236]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_gea4_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_gea4", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
