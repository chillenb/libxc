
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_k_gea4_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_gea4", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([5.574337861658204e+02, 5.574183394437915e+02, 5.573757307232752e+02, 5.576040534009951e+02, 5.574807498503706e+02, 5.574807498503706e+02, 8.340004593706652e+01, 8.338564318047679e+01, 8.301059267088843e+01, 8.319684076159066e+01, 8.315433282600877e+01, 8.315433282600877e+01, 5.942179833056636e+00, 5.965058429702028e+00, 6.546208386519800e+00, 6.262390839944612e+00, 6.326720934036787e+00, 6.326720934036787e+00, 7.192080682007840e-01, 6.999977381723808e-01, 1.263796839705518e+01, 1.007222968348716e+00, 8.585429595821250e-01, 8.585429595821252e-01, 9.417322665330325e+00, 8.494469329636694e+00, 1.502035772716533e+00, 4.123948331592847e+01, 1.975456517620376e+01, 1.975456517620382e+01, 1.330468830238570e+03, 4.756385076631568e+02, 9.192999664001677e+02, 3.111350182959961e+03, -1.282124597251628e+02, 2.084833833278861e+02, 9.758117326004602e+03, 6.887564389270575e+01, 4.159597480784818e+01, 4.106938941257948e+01, 4.075421666320625e+01, 2.747187577399063e+01, 5.004081379323272e+01, 1.378019319973872e+01, 4.062377100111591e+01, 2.179733656064464e+00, 2.540334663879021e+00, 3.332724277542625e+00, 2.548890503761521e+00, 8.605044445749510e+00, 1.864507824551725e+02, 2.535828932140924e+01, 7.000260248301030e-01, 4.966832148055769e-01, 1.283630566648070e+04, 9.759443573199749e+09, 2.501908237493909e+09, 9.833167902810038e+00, 6.694159281814527e+02, 2.280173250771620e+06, 5.649055236581588e+08, 9.290068146364978e+07, 2.781676026200869e+10, 4.747398579880767e+04, 9.500330966656556e+06, 9.098914583023706e+10, 8.338151103231928e+09, 1.752680345136061e+00, 2.369862181619613e+01, -1.932916196720647e+00, 2.567572327810717e+00, 7.774100323566287e+01, 6.773151924859361e+01, 2.520756031278929e+02, 6.103523200469203e+02, -5.712223896749965e+00, 2.604099954831613e+00, 1.716522268053708e+00, 1.804327268824720e+00, 1.742966569002088e+01, 1.766808939998462e+00, 9.198702411717330e-01, 5.202065029460528e+01, 6.563902320875763e-01, 3.733402213147852e+04, 2.161588489673227e+04, 7.831471181721743e+05, 4.475684900887498e-01, 5.973001450243483e+04, 1.968313987233547e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_k_gea4_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_gea4", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([3.214375223947892e+03, 3.214351885036385e+03, 3.214401516823620e+03, 3.214370986253747e+03, 3.214481946254474e+03, 3.214487249142108e+03, 3.214184982106291e+03, 3.214108759924335e+03, 3.214391093149642e+03, 3.214257304490424e+03, 3.214391093149642e+03, 3.214257304490424e+03, 8.738510167312572e+01, 8.738898436264390e+01, 8.738603453874465e+01, 8.739008675807008e+01, 8.741082735248600e+01, 8.741889905589687e+01, 8.738624600885878e+01, 8.739527187237560e+01, 8.735451782817601e+01, 8.742040880676436e+01, 8.735451782817601e+01, 8.742040880676436e+01, 3.131642342781286e+00, 3.168728648453765e+00, 3.117916440823082e+00, 3.163031884616226e+00, 2.934265459233793e+00, 2.875635646345827e+00, 2.954873711079862e+00, 2.975461472603284e+00, 3.232077374435732e+00, 2.636084511652022e+00, 3.232077374435732e+00, 2.636084511652022e+00, 1.518394219396507e-01, 1.658358608825292e-01, 1.597354212312977e-01, 1.766530695280693e-01, 3.611298859142664e+00, 4.171425841476936e+00, 7.716495751562606e-02, 7.249465756806901e-02, 1.660637127015704e-01, 3.302590486181076e-02, 1.660637127015704e-01, 3.302590486181036e-02, 1.360358687271711e+01, 1.206355365562691e+01, 1.199384034299499e+01, 1.039107967650417e+01, 5.669143308110577e-01, 4.712000876999121e-01, 4.629144173702714e+01, 4.868841328686415e+01, 1.836312412888803e+01, 1.736103024435293e+01, 1.836312412888799e+01, 1.736103024435283e+01, -1.390570798659604e+02, 2.612052207674938e+00, 1.782557828973815e+02, 1.788061427624854e+02, -1.100646948761606e+04, -1.396080032756043e+04, -1.002152683963061e+03, -1.131569792848501e+03, 1.724856150467233e+02, 1.726705276512616e+02, 1.998822832099519e+02, 2.001959236580010e+02, -2.522483655317102e+04, -1.862910095734801e+04, 2.612781062114522e+01, 2.611809663456355e+01, 2.529938974463721e+01, 2.544993053811518e+01, 2.565443264494505e+01, 2.583188742564575e+01, 2.648387158949421e+01, 2.611284549421987e+01, 2.551172860512556e+01, 2.520957099344762e+01, -1.490476396009598e+01, -2.720397611226522e+01, 1.119254856101424e+00, 1.058328601438817e+00, -2.199443216721292e+01, -1.114280911565925e+01, 2.292251237421418e+00, 2.448650969265781e+00, 2.731582171162758e+00, 2.462928899989544e+00, 2.724183585470558e+00, 2.452543736016719e+00, -1.025274603534952e+01, -9.867075974474153e+00, -4.037813787581993e+00, -3.919177631008247e+00, -3.751244191552781e+02, -3.375979879177313e+02, 2.753467739274127e+01, 2.751039874073583e+01, -3.556903698185444e-02, -4.053315092467627e-03, -1.773104206327559e-01, -1.177849413151026e-01, -2.057703053793371e+04, -1.684874374970808e+04, -1.735881882395272e+10, -1.521681812792963e+10, -7.492046484628440e+09, -1.373779567941713e+09, -2.075965730337304e+01, -2.948534404661108e+01, -2.475118953157889e+03, -1.655465559971214e+02, -1.063208980976585e+07, -1.188029553034328e+06, -9.319636096046337e+08, -9.502452420868130e+08, -1.548862819638930e+08, -1.550659956682180e+08, -4.620447369368843e+10, -4.652113638298877e+10, -8.458381451974924e+04, -6.744835427573707e+04, -1.342380972686371e+07, -1.830651504167111e+07, -1.514993802167004e+11, -1.517871840688885e+11, -1.352496963383446e+10, -1.426781963813632e+10, 1.679850570767478e+00, 1.695373706075827e+00, -5.560859427740111e+00, -5.885649951791728e+00, 1.774207512204470e+00, 1.630297132133055e+00, 2.013119303150776e+00, 2.028817521116560e+00, -5.031594427469944e+01, -4.905271842346659e+01, -3.107747440430810e+01, -2.916228419421263e+01, -5.176177466085209e+02, -5.286051007522477e+02, -1.201361261522854e+03, -1.201605848256282e+03, -9.726518104418298e+00, -1.108222773820653e+01, 5.264348781469044e-01, 5.207024166879929e-01, 6.034384552018099e-01, 6.025421934112529e-01, 1.428266301751900e+00, 1.450751765197666e+00, -5.069479801664243e+01, -3.733133921633382e+01, 3.479926381937624e-01, 2.854160118843715e-01, 7.870824359261521e-01, 8.108733623090001e-01, -1.335092555002979e+02, -8.496193006946146e+01, -6.761927434587288e-02, -9.816306079337002e-02, -1.026601328046288e+05, -2.931471871155985e+04, -1.774904559684612e+04, -6.351402106210376e+04, -1.562827571398142e+06, -1.130000887530527e+06, -1.217290124622357e+00, -2.082272443934682e+00, -2.160985283226845e+05, -5.388935719234175e+04, -6.436086029411242e+05, -2.010040008299805e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_gea4_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_gea4", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.892447826932074e-06, 0.000000000000000e+00, 1.892486974772219e-06, 1.892427888818582e-06, 0.000000000000000e+00, 1.892472483650444e-06, 1.892363443780518e-06, 0.000000000000000e+00, 1.892380360964213e-06, 1.892588893062985e-06, 0.000000000000000e+00, 1.892667621133364e-06, 1.892435965891762e-06, 0.000000000000000e+00, 1.892552373416953e-06, 1.892435965891762e-06, 0.000000000000000e+00, 1.892552373416953e-06, 3.380130594060586e-04, 0.000000000000000e+00, 3.379447221401092e-04, 3.380303284967410e-04, 0.000000000000000e+00, 3.379503210983755e-04, 3.382952510300310e-04, 0.000000000000000e+00, 3.383160771362221e-04, 3.384200276867172e-04, 0.000000000000000e+00, 3.383429348564079e-04, 3.381294824585533e-04, 0.000000000000000e+00, 3.385691899213068e-04, 3.381294824585533e-04, 0.000000000000000e+00, 3.385691899213068e-04, 3.487105557104429e-02, 0.000000000000000e+00, 3.477375393527080e-02, 3.496383671223180e-02, 0.000000000000000e+00, 3.477771176344297e-02, 3.577690868062949e-02, 0.000000000000000e+00, 3.678316682367800e-02, 3.765850169908397e-02, 0.000000000000000e+00, 3.775198574096120e-02, 3.382968469707585e-02, 0.000000000000000e+00, 4.299623070658277e-02, 3.382968469707585e-02, 0.000000000000000e+00, 4.299623070658277e-02, 2.539539477854729e+00, 0.000000000000000e+00, 2.525721978475796e+00, 2.452506067638919e+00, 0.000000000000000e+00, 2.415742542489926e+00, 6.493059812429025e-03, 0.000000000000000e+00, 1.107167694066386e-02, 5.358249801900563e-01, 0.000000000000000e+00, 2.446606570781546e+00, 2.303278375406899e+00, 0.000000000000000e+00, -3.340102402752419e+01, 2.303278375406899e+00, 0.000000000000000e+00, -3.340102402752422e+01, -2.509038202410835e+07, 0.000000000000000e+00, -1.837032572574623e+07, -2.004188914781890e+07, 0.000000000000000e+00, -1.399851704007677e+07, -4.568334671350284e+03, 0.000000000000000e+00, -3.197804258379374e+03, -4.335913828828587e+08, 0.000000000000000e+00, -4.600368174885277e+08, -5.061511219715597e+07, 0.000000000000000e+00, -1.001486030077731e+09, -5.061511219715615e+07, 0.000000000000000e+00, -1.001486030077733e+09, -1.482077801675056e-04, 0.000000000000000e+00, -9.058697972158408e-05, 3.318350226205534e-05, 0.000000000000000e+00, 3.411228646339091e-05, 1.495650598131493e-03, 0.000000000000000e+00, 1.671024369066332e-03, -3.629310387892579e-04, 0.000000000000000e+00, -3.873439176359568e-04, 1.653051989859575e-04, 0.000000000000000e+00, 1.650829581526173e-04, 8.601667023957257e-05, 0.000000000000000e+00, 9.142703374087367e-05, 1.068779145240253e-01, 0.000000000000000e+00, 9.210020500053533e-02, 1.094992529485152e-03, 0.000000000000000e+00, 1.098654520209249e-03, 1.939139424647318e-03, 0.000000000000000e+00, 1.927239239641577e-03, 1.924479949275433e-03, 0.000000000000000e+00, 1.899433777151956e-03, 1.835601122194491e-03, 0.000000000000000e+00, 1.870619704337400e-03, 2.226897371338239e-03, 0.000000000000000e+00, 2.236670056508201e-03, -2.758556310057095e-01, 0.000000000000000e+00, -3.842794302100726e-01, -2.847597894141606e-02, 0.000000000000000e+00, -2.973484995753310e-02, -5.054773313390120e-01, 0.000000000000000e+00, -3.039229739604372e-01, 7.358950638619316e-02, 0.000000000000000e+00, 6.873307931820487e-02, 5.983201587515637e-02, 0.000000000000000e+00, 6.818747224482796e-02, 5.186532855430338e-02, 0.000000000000000e+00, 5.881627290886173e-02, 4.258388914073055e+02, 0.000000000000000e+00, 4.029445749965844e+02, -2.169611335663796e+01, 0.000000000000000e+00, -2.093984232201348e+01, 4.071525959228074e+03, 0.000000000000000e+00, 3.135302276062996e+03, 1.770430617744332e-03, 0.000000000000000e+00, 1.772928452776292e-03, 1.432156604893900e+01, 0.000000000000000e+00, 1.200144105700605e+01, 2.952348021451140e+01, 0.000000000000000e+00, 2.345819477023170e+01, -3.075828073538945e+10, 0.000000000000000e+00, -2.406292505271464e+10, -9.838616355697879e+12, 0.000000000000000e+00, -8.674467920887118e+12, 2.067048636045698e+13, 0.000000000000000e+00, 7.036313745887494e+12, 3.929144014107158e+03, 0.000000000000000e+00, 4.632853677690970e+03, -1.220337160841737e+10, 0.000000000000000e+00, -1.079575526357370e+09, 7.143965810216071e+11, 0.000000000000000e+00, 6.699836238269986e+10, -2.476143314067948e+03, 0.000000000000000e+00, -2.462021338232608e+03, 1.033120935018714e+03, 0.000000000000000e+00, 1.017731599010368e+03, 1.769844500963899e+04, 0.000000000000000e+00, 1.748440343894488e+04, -2.371709649296689e+01, 0.000000000000000e+00, -2.084700126382425e+01, 3.007220160597704e+02, 0.000000000000000e+00, 3.457645052499803e+02, -3.193984033647417e+04, 0.000000000000000e+00, -3.147813486629009e+04, 1.051746833212584e+04, 0.000000000000000e+00, 1.066077252935636e+04, 1.289015788091050e-01, 0.000000000000000e+00, 1.277793404841762e-01, -2.844528792728058e-01, 0.000000000000000e+00, -2.873739642612344e-01, 1.557203135426257e-01, 0.000000000000000e+00, 1.677910932367685e-01, 8.153070435634333e-02, 0.000000000000000e+00, 8.080190019405233e-02, -8.290501323035139e-01, 0.000000000000000e+00, -8.056016970867625e-01, -2.408737964141326e-01, 0.000000000000000e+00, -2.312026395216138e-01, 9.767345429583321e+01, 0.000000000000000e+00, 9.645826691900774e+01, 7.219305244953281e+01, 0.000000000000000e+00, 6.938936833032908e+01, 2.478555966967997e+00, 0.000000000000000e+00, 2.560729932412614e+00, 6.573509378153598e-02, 0.000000000000000e+00, 5.457554341504438e-02, 3.329214598015748e-01, 0.000000000000000e+00, 3.228810493161624e-01, 1.530056792318228e-01, 0.000000000000000e+00, 1.501494609919817e-01, 4.850232863142608e+04, 0.000000000000000e+00, 3.963141037005711e+04, -1.385251348782959e+03, 0.000000000000000e+00, -1.727701418475233e+03, 3.677999971679423e-01, 0.000000000000000e+00, 3.711777152004672e-01, 4.488790571104693e+03, 0.000000000000000e+00, 2.883401988007817e+03, 3.673963071521772e+01, 0.000000000000000e+00, 5.462668262201754e+01, 6.327191085455816e+08, 0.000000000000000e+00, 2.907557317073268e+08, 1.705668671225592e+12, 0.000000000000000e+00, 3.411983743389642e+12, 1.032097871251889e+12, 0.000000000000000e+00, 6.854919700318643e+11, 4.033724452184321e+02, 0.000000000000000e+00, 5.272197393841245e+02, 1.256217174409116e+11, 0.000000000000000e+00, 1.991230159856515e+10, 2.176048682323746e+11, 0.000000000000000e+00, 3.881089623721066e+10])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_gea4_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_gea4", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([1.589599548481214e-01, 1.589594073872425e-01, 1.589599780211394e-01, 1.589594243345538e-01, 1.589600070043069e-01, 1.589594778425136e-01, 1.589597419944747e-01, 1.589591413636304e-01, 1.589599709984223e-01, 1.589592414166702e-01, 1.589599709984223e-01, 1.589592414166702e-01, 1.664610515169333e-01, 1.664669228619672e-01, 1.664595077462705e-01, 1.664663760882054e-01, 1.664348024388359e-01, 1.664314931083315e-01, 1.664221605558500e-01, 1.664265780023664e-01, 1.664650826744356e-01, 1.664038248163439e-01, 1.664650826744356e-01, 1.664038248163439e-01, 1.732066964293401e-01, 1.730229148909261e-01, 1.732492880392132e-01, 1.730591196878250e-01, 1.740507209069635e-01, 1.739580634438238e-01, 1.729255526525840e-01, 1.727455674788911e-01, 1.730858633275045e-01, 1.725904793666019e-01, 1.730858633275045e-01, 1.725904793666019e-01, 1.706966831652560e-01, 1.680412403727395e-01, 1.705789824152675e-01, 1.677629069059612e-01, 1.864386518243023e-01, 1.817841569336116e-01, 1.918935678572904e-01, 1.839394846247932e-01, 1.699469004183375e-01, 2.471963785275008e-01, 1.699469004183375e-01, 2.471963785275009e-01, 1.026591335688541e+01, 9.056253049388229e+00, 9.410637998028706e+00, 8.124055428533563e+00, 5.558368724236534e-01, 4.949251548168923e-01, 3.692727049619413e+01, 3.739634011397329e+01, 1.440089538225206e+01, 4.930072979746229e+01, 1.440089538225210e+01, 4.930072979746231e+01, 2.283510714649119e-01, 2.139876087625203e-01, 1.831801974377803e-01, 1.829551263261577e-01, -1.809740831758501e-01, -2.243382095626052e-01, 2.818619380872661e-01, 2.878742267718015e-01, 1.502758316600851e-01, 1.503613168602965e-01, 1.700238939426285e-01, 1.686930684992004e-01, -1.221098493030400e+00, -1.025559558548446e+00, 1.769698930597972e-01, 1.769327529719209e-01, 1.666416595582045e-01, 1.666581098598492e-01, 1.663396904587308e-01, 1.665272119499387e-01, 1.668449214152079e-01, 1.667180329995502e-01, 1.615352191640296e-01, 1.618158786310093e-01, 2.901533730177595e-01, 3.278374274666635e-01, 2.043933837038266e-01, 2.049851856175717e-01, 3.264548445543599e-01, 2.819212546202239e-01, 1.692286719153704e-01, 1.685594951188233e-01, 1.674164853203602e-01, 1.679613775916066e-01, 1.706214548334778e-01, 1.711953571907316e-01, -3.651736283280080e-01, -3.505062371021226e-01, 3.915115514176131e-01, 3.874627018048296e-01, -3.786883146920461e+00, -3.392951933175597e+00, 1.692951968321352e-01, 1.692937712034208e-01, 1.674177741110817e-01, 1.664240473074006e-01, 1.372992013128428e-01, 1.394405166190024e-01, 9.967987998030478e+02, 8.759378582803079e+02, 6.689012121679529e+05, 6.169393743809593e+05, -5.876026317475851e+05, -2.375785210387145e+05, -1.052056325185748e+00, -1.304828356803258e+00, 3.734401787565521e+02, 8.682935162914261e+01, -2.163309501729615e+04, -5.253625246167609e+03, 8.898998722994695e+02, 8.951244908645997e+02, -3.646486670076102e+02, -3.634405102536536e+02, -6.288057555069081e+03, -6.285036259612811e+03, 8.660764647119892e+00, 7.722562145080028e+00, -1.069253235732351e+02, -1.244104125156523e+02, 1.137711211197285e+04, 1.134384314141017e+04, -3.482735806683283e+03, -3.565318957295777e+03, 1.646784570862113e-01, 1.645605398662529e-01, 2.598472014228301e-01, 2.614681152420525e-01, 1.487690180903742e-01, 1.449720132855248e-01, 1.705855148074850e-01, 1.705394964515051e-01, 4.041482317499031e-01, 4.004439510872450e-01, 3.178364303619869e-01, 3.133524867282079e-01, -1.604591347040765e+00, -1.613258687192724e+00, -2.094080213627041e+00, -2.072103711399534e+00, 9.570570818894583e-03, 3.906335892055507e-04, 1.886882177966730e-01, 1.892305728102653e-01, 1.756619372448916e-01, 1.761635687826560e-01, 1.667725762833543e-01, 1.667218237162692e-01, -2.943073430257903e+00, -2.414987410045521e+00, 4.405638793674749e-01, 5.218182856045078e-01, 1.677310754549304e-01, 1.663959588331253e-01, -2.550784001843137e+00, -1.881857726221306e+00, 1.779101650339753e-01, 1.592039862261496e-01, -6.498221947218030e+02, -3.319086243958038e+02, -2.231802390833809e+03, -4.528456450979135e+03, -1.150310222040672e+04, -9.191451665943810e+03, -1.667900116058748e-02, -9.784750575275983e-02, -3.230406941144922e+03, -1.200336664504494e+03, -5.597997960952073e+03, -2.341909253094054e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
