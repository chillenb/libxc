
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_k_csk_loc4_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk_loc4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [1.910249341892557e+03, 1.910264661281354e+03, 1.910328637559868e+03, 1.910100468667361e+03, 1.910220625484294e+03, 1.910220625484294e+03, 4.944128841498807e+01, 4.944150104671677e+01, 4.944948028894188e+01, "nan", 4.944392732641403e+01, 6.748657691670338e+158, 2.292422854139308e+00, 3.999142102781801e+247, 8.076789598624721e+160, 4.524121384449758e+213, 1.974163066528686e+160, 4.547965768332178e+213, 3.689768671747560e+98, 2.639844758104218e+215, 2.862534014645545e+00, 3.002000832790162e+230, 4.836571370390768e+215, 4.013342030081827e+244, 6.236820823126644e+174, 4.175695584364503e+205, 2.305479926081705e+227, 1.250598136087166e+235, 5.565281961497925e+276, 4.650911783312199e+186, 2.346809477651569e+171, 4.721223949065379e+244, 3.087696456444548e+206, 1.161549137748066e+02, 2.809736727864130e+225, 3.904845316690034e+177, 2.739741397645088e+01, 2.718035280775087e+01, 2.852643193882119e+01, 2.832806235837344e+01, 2.674176629002769e+01, 4.503183103305446e+159, 2.138420848398177e+180, 2.931499336357286e+218, 3.804176070526488e+180, 4.217146322598707e+218, 2.038240031391262e+180, 1.480460543723542e+00, 9.219337469991499e-01, 1.846757843081674e+201, 8.996643087116837e-01, 1.228252896804395e+67, 5.017994493966003e+162, 1.144923318777937e+250, 6.675028887856946e-01, 7.950728572363663e+167, 2.999295662561143e+283, 8.107085907530451e-01, 4.130206751164145e-01, 7.246796232063289e+167, 9.323794505291327e+237, 1.040850873868459e+227, 1.535880218609656e+00, 2.139723841490365e+209, 2.552199175678665e+164, 6.167388804824337e+242, 4.423997709944032e+228, 2.377584248549258e+161, 4.748581671644741e+228, 7.748089174945189e+199, 2.680635944480411e+246, 1.150349057890517e+00, 2.196129317060045e+247, 1.064567072255945e+00, 4.361854005254243e+224, 6.859228292035359e-01, 1.678658789555290e+176, 9.581636470455021e+198, 1.044491286303680e+00, 1.335395916196389e+256, 5.292497178134141e+255, 2.189629241328669e+253, 7.143488367485870e-01, 6.784936013374339e+253, 4.171956334059106e+256, 7.178930183998836e+265, 2.824523923245744e+51, 1.492516516547518e+183, 4.056416141983144e+230, 1.052027479767924e+258]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_k_csk_loc4_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk_loc4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.604842884762473e+03, 3.604858646605504e+03, 3.604941895237712e+03, 3.604707092929912e+03, 3.604828260756369e+03, 3.604828260756369e+03, 8.237660717354326e+01, 8.240722462810132e+01, 8.310988595864013e+01, "nan", 8.241728559456374e+01, -3.723434875078846e+143, -1.055783207788859e+00, -7.775234665830337e+228, 3.028220733321210e+144, 1.896256793463810e+198, -5.128756434925045e+144, -1.230786436300061e+198, -6.436865011370805e+82, -9.050736802023904e+199, -3.569271778520052e-01, -2.839005181007609e+214, 4.274242175305496e+199, -8.836330003340068e+228, -2.140637999558249e+158, -1.702365862209171e+190, -1.070371965981029e+211, -3.328555292553498e+218, 7.758510556857293e+259, 1.288361385527866e+171, -5.777483488697387e+155, 9.142990171985982e+228, -2.687500693929608e+190, 2.116715556620371e+02, 2.926331008083390e+209, -5.401894952895583e+161, -2.485150922924368e+01, -2.435197595533092e+01, -2.647634360067443e+01, -2.607854712422146e+01, -2.374108755700785e+01, -2.224514699935798e+143, -7.887643669910792e+164, -4.085978508733923e+202, -1.344099809229834e+164, 1.132382382629685e+203, 1.124075365261747e+165, 2.814201910008405e+00, -9.219336506130921e-01, -4.043063229116847e+185, -8.996642599079142e-01, -2.819683852047708e+51, 4.699406446734538e+147, 2.861530360106315e+234, -6.674156342608129e-01, 1.179416101639866e+152, -6.773970694934900e+267, -8.107085893384124e-01, -4.129018174798576e-01, 4.483685346351848e+151, -2.356337432860358e+222, 6.818270941915698e+211, 2.635043189019262e+00, -6.669962137549514e+193, 1.758414701045458e+149, 2.291602936652690e+227, 5.049745056620749e+213, -3.204367040182918e+145, 5.161014981817030e+212, -9.326592748095563e+183, 5.527751307362938e+230, 2.195954340346030e+00, -2.084711922331380e+231, -1.064222445547792e+00, 4.823809688466674e+208, -4.778219524995947e-01, 5.570419368204589e+159, -7.345308080530187e+182, -4.733702278502259e-01, 7.873361856280054e+239, -2.556881448885758e+240, 1.297040507247203e+238, -7.143488106868223e-01, -2.239676996590854e+238, -2.272602172017112e+241, 1.049195490909868e+250, 5.628601512845028e+35, 5.700483021132050e+167, -4.477960676918883e+214, 3.823169287897557e+241]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_csk_loc4_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk_loc4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.066143232579444e-06, -1.066135178228784e-06, -1.066095226400894e-06, -1.066215078600727e-06, -1.066152893198872e-06, -1.066152893198872e-06, 4.087476902890459e-07, -7.560012476741515e-08, -1.115887409571406e-05, "nan", -1.719039934965614e-07, -2.471854607025499e-04, 1.739332320954238e-01, -3.456445230125043e-02, -3.747154821060016e-02, -3.655372067844504e-02, -3.674637708045572e-02, -3.674637708045572e-02, -2.001093004756285e+00, -1.912859581637510e+00, 9.520712458007838e-02, -4.573325034448005e+00, -3.229874366910618e+00, -3.229874366910618e+00, -4.743672063494301e+04, -4.068151126847196e+04, -2.422499496422378e+02, -2.462567664530374e+05, -1.241141592272281e+05, -1.241141592272281e+05, -7.365580088314568e-05, -7.361524902557733e-05, -7.365378047946943e-05, -7.361798276333765e-05, -7.363532382973350e-05, -7.363532382973350e-05, 8.170343327348959e-03, 7.967349168929038e-03, 8.355925541006001e-03, 8.177342475193892e-03, 7.963219141858989e-03, -1.359961784283986e-03, -5.147064498040534e-02, -4.014649925333620e-02, -6.496940809307770e-02, -5.783913877351247e-02, -4.905934634633084e-02, -4.874080074953552e-02, 8.282011439894721e+01, -1.992003863966729e+00, 1.046004400131106e+02, -1.469649963077993e-03, -8.455385758481471e+00, -8.455385758481471e+00, 3.249256950004610e+06, -2.635845550857157e+05, -5.895697237861817e+05, 3.437938580292646e+02, 2.043738650702208e+06, -3.372168773658643e+05, -5.072812337927218e-02, -5.161120193721565e-02, -5.129813966372839e-02, -5.104218030221695e-02, -5.117008596656047e-02, -5.117008596656047e-02, -5.508749354100984e-02, -8.708461514668764e-02, -7.584074800241111e-02, -6.652222692147958e-02, -7.107784851001094e-02, -6.863153026965590e-02, -3.484221486319211e-02, 5.985522696914738e+00, -5.702373052167645e-01, 1.360927783780668e+00, -3.762401048661960e-01, -3.762401048661959e-01, 5.618657744164156e-01, -2.762835659547210e+02, -1.090293323885151e+02, -2.762058130411847e-01, 1.665281108034139e+02, -2.747713858330712e+01, -1.687524586439295e+04, -1.380040578158303e+07, -1.492200145125896e+06, -3.318298105938295e+01, -4.256411326421931e+05, -4.256411326421939e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_csk_loc4_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk_loc4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [2.171055743091595e-01, 2.171055992609833e-01, 2.171056700553896e-01, 2.171052976659451e-01, 2.171054992950310e-01, 2.171054992950310e-01, 1.863225435430966e-01, 1.863827950528118e-01, 1.877618406051298e-01, "nan", 1.863947766235059e-01, 2.171250000000000e-01, 3.111395716155090e-02, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 5.163329005366935e-02, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000001e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 5.218626060321804e-03, 5.847432890871584e-03, 4.031498202258140e-03, 4.456406079299319e-03, 6.308180063136388e-03, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000001e-01, 2.171250000000000e-01, 2.169253277558371e-01, 5.845574585467437e-09, 2.171250000000000e-01, 3.032879915784490e-09, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 0.000000000000000e+00, 2.171250000000000e-01, 2.171250000000001e-01, 9.813549470157986e-11, 0.000000000000000e+00, 2.171250000000001e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000001e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.160666080442026e-01, 2.171250000000000e-01, 1.810004169133549e-05, 2.171250000000001e-01, 1.724415061009116e-02, 2.171250000000000e-01, 2.171250000000000e-01, 3.155259258949145e-02, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000001e-01, 2.039901175215259e-09, 2.171250000000001e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_csk_loc4_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk_loc4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
