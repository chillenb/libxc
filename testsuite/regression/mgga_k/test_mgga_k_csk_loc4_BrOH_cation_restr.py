
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_k_csk_loc4_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk_loc4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([9.968812871512024e+02, 9.968590501342222e+02, 9.968062018108302e+02, 9.971360406529511e+02, 9.969566692925407e+02, 9.969566692925407e+02, 8.115903575876183e+01, 8.114236748336575e+01, 8.070072423146837e+01, 8.085037655977337e+01, 8.083967961389480e+01, 8.083967961389480e+01, 6.392088372293399e+00, 6.415763960758412e+00, 7.000361997424125e+00, 6.635875058084686e+00, 6.704898939877370e+00, 6.704898939877370e+00, 7.026445015678506e-01, 6.837729309209828e-01, 1.429971729204718e+01, 1.024007206786016e+00, 8.144242383226700e-01, 8.144242383226704e-01, 8.968384486250444e-01, 8.811983001304924e-01, 1.137655295732150e+00, 1.019570685237304e+00, 9.071649535185653e-01, 9.071649535185655e-01, 1.465472595858366e+03, 5.502997528219872e+02, 4.137020203065610e+01, 2.995815304682557e+03, 4.135815142265864e+01, 2.210555034041247e+02, 2.720444919762337e+01, 7.491719735376326e+01, 4.016311007359846e+01, 3.947637571883351e+01, 3.952159268783128e+01, 2.734059816628470e+01, 4.562583790081703e+01, 1.574864981918696e+01, 3.745997293191193e+01, 2.304601369710469e+00, 2.567716102855483e+00, 3.584159246317094e+00, 9.219337397894602e-01, 6.884759578010232e+00, 8.996643095894212e-01, 2.718488880456934e+01, 7.405605553451881e-01, 7.404177734768173e-01, 6.502355047299372e+00, 6.591661999351793e+03, 2.817492980420089e-01, 8.107085912098402e-01, 1.644692083852105e+00, 4.130206751164150e-01, 2.747938555988530e+05, 1.778130205719404e+00, 1.735102697565016e+00, 2.461317490616654e+03, 1.717256659067884e+00, 3.478018574182981e+06, 1.527248513078962e+00, 1.591406629096286e+00, 2.401028087618143e+01, 4.955893495076381e-01, 2.749214159135655e+00, 5.973397372837615e+01, 6.119918148708130e+01, 1.064541241397205e+00, 9.836075169677668e-01, 6.698640631757223e-01, 2.889431178224985e+00, 1.833087913692361e+00, 1.758005398469948e+00, 9.656265763543554e-01, 1.363115793276578e+00, 9.062610474611450e-01, 7.143488205104486e-01, 7.143521168851502e-01, 8.121930600067843e-01, 3.188815419703820e-01, 4.583191396995908e-01, 7.255536172939209e-01, 3.675051353691497e-01, 3.675051353691493e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_k_csk_loc4_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk_loc4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-5.845361756545692e+02, -5.845065025880772e+02, -5.844312872391370e+02, -5.848721861646073e+02, -5.846330762652130e+02, -5.846330762652130e+02, 9.716334599151736e+01, 9.716258273966923e+01, 9.714971463925343e+01, 9.720901431017417e+01, 9.716711533431223e+01, 9.716711533431223e+01, 3.761464907830803e+00, 3.757651975546667e+00, 3.682471343068822e+00, 3.737345965635614e+00, 3.720472429432903e+00, 3.720472429432903e+00, 3.278299797183528e-01, 3.308898796192781e-01, 5.060759758441279e+00, 2.570361903251245e-01, 2.762409431986566e-01, 2.762409431986571e-01, 1.206590416312048e-01, 1.174050271099900e-01, 1.607643802800405e-01, 1.264935084046107e-01, 1.122497511574913e-01, 1.122497511574912e-01, 2.116496220979236e+02, 2.116726526455947e+02, -4.137019692466479e+01, 2.116715556620357e+02, -4.002238768151342e+01, 2.116609881025570e+02, -2.720444896333523e+01, 3.380907252207393e+01, 3.331399849429637e+01, 3.364897982363808e+01, 3.369467717612739e+01, -1.559224351584055e+01, 2.742864651470260e+00, 3.114764311319393e+00, 2.365587985732866e+00, 2.454933542635654e+00, 2.816430906321719e+00, 2.816430906321720e+00, -9.219337393287678e-01, 3.918824228043361e-01, -8.996643285431446e-01, 2.822853185108152e+01, -7.355343063715708e-01, -7.403919855303136e-01, 1.101871118539643e-01, 1.166001956192000e-01, -2.816673994359796e-01, -8.107085939754179e-01, 6.821534310079466e-02, -4.129018174798579e-01, 2.639491436984349e+00, 2.375909497578326e+00, 2.435820710063903e+00, 2.636999824439741e+00, 2.460622370310113e+00, 2.636015478940544e+00, 2.450139404812613e+00, 2.013988394105532e+00, 2.144065987007189e+00, -4.889416851659313e-01, 2.205684478149801e+00, 2.205684478149820e+00, 3.428231472386682e+00, -1.064541318653606e+00, -9.836081288842348e-01, -6.698634292607688e-01, 8.267141291888327e-01, 8.267141291888319e-01, 1.717546804401266e+00, -9.656266223028269e-01, 1.712195719195131e-01, 9.216902504282991e-01, -7.143487590548072e-01, -7.142374577728943e-01, -8.113178077903840e-01, -3.188715333998450e-01, -4.582750420705304e-01, -7.255536122993922e-01, -3.674033690112843e-01, -3.674033690112838e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_csk_loc4_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk_loc4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([6.114773787993696e-06, 6.114715729006366e-06, 6.114456167106843e-06, 6.115320692254059e-06, 6.114867860424494e-06, 6.114867860424494e-06, -2.472052562148399e-04, -2.472036555173301e-04, -2.471484938900352e-04, -2.471036057717335e-04, -2.471854607025499e-04, -2.471854607025499e-04, -3.445025339451010e-02, -3.456445230125043e-02, -3.747154821060016e-02, -3.655372067844504e-02, -3.674637708045572e-02, -3.674637708045572e-02, -2.001093004756285e+00, -1.912859581637510e+00, -2.172903463950833e-02, -4.573325034448005e+00, -3.229874366910618e+00, -3.229874366910618e+00, -4.743672063494301e+04, -4.068151126847196e+04, -2.422499496422378e+02, -2.462567664530374e+05, -1.241141592272281e+05, -1.241141592272281e+05, -7.365580088314568e-05, -7.361524902557733e-05, 4.463865482382857e-04, -7.361798276333765e-05, 4.455679691211970e-04, -7.363532382973350e-05, 8.405710951463649e-03, -1.357194350871584e-03, -1.409210771284092e-03, -1.382314261594728e-03, -1.359961784283986e-03, 6.890479457390341e-03, -5.147064498040534e-02, -4.014649925333620e-02, -6.496940809307770e-02, -5.783913877351247e-02, -4.905934634633084e-02, -4.905934634633084e-02, 8.282011699151823e+01, -1.992003863966729e+00, 1.046004418081545e+02, -1.469649963077993e-03, 5.098986165824898e+01, 5.124393074529076e+01, -5.361273967507604e+05, -2.635845550857157e+05, 3.573149841128374e+06, 3.437938584343335e+02, -3.372168773658643e+05, 2.043738650702208e+06, -5.072812337927218e-02, 3.127951632558526e-01, 3.108978161438084e-01, -5.104218030221695e-02, 3.101217331306695e-01, -5.117008596656047e-02, 3.338635972182413e-01, -8.522962570856592e-02, -7.584074800241111e-02, 4.029187331415099e-01, -7.107784851001094e-02, -7.107784851001094e-02, -3.484221486319211e-02, 5.986104056930354e+00, 3.455983685656109e+00, 1.499685807908993e+00, -3.762401048661960e-01, -3.762401048661959e-01, -1.116017814172192e-01, 1.674445875958855e+03, -1.090293323885151e+02, -2.762058130411847e-01, 1.665281116190086e+02, 1.665085237044234e+02, 1.022742173599572e+05, 8.363882291868500e+07, 9.043637243187241e+06, 2.011089757642504e+02, 2.579643228134502e+06, 2.579643228134509e+06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_csk_loc4_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk_loc4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([1.011156577938204e-02, 1.011176465811451e-02, 1.011223559825110e-02, 1.010926597188044e-02, 1.011088149541004e-02, 1.011088149541004e-02, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000001e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000001e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000001e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 5.099345645925516e-11, 2.171250000000000e-01, 2.951409668901022e-04, 2.171250000000000e-01, 1.138496608329941e-11, 2.171250000000001e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 3.056509094916318e-02, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000001e-01, 2.171250000000000e-01, 2.171250000000000e-01, 1.140932850392524e-11, 2.171250000000000e-01, -1.654663143784517e-10, 2.171250000000000e-01, 9.270542218018098e-04, 3.023839371008214e-06, 2.171250000000000e-01, 2.171250000000000e-01, 0.000000000000000e+00, -1.214555999686964e-10, 2.171250000000001e-01, 0.000000000000000e+00, 2.171250000000000e-01, 0.000000000000000e+00, 0.000000000000000e+00, 2.171250000000000e-01, 0.000000000000000e+00, 2.171250000000000e-01, 0.000000000000000e+00, 2.164699599493070e-01, 2.171250000000001e-01, 1.138485693271874e-04, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, -2.179001457828143e-10, -9.532115902411394e-10, 3.317944243698499e-09, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, -2.413952143963984e-09, 2.171250000000000e-01, 2.171250000000001e-01, 1.127111448712740e-09, 2.192334791627869e-05, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 3.273407889282500e-10, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
