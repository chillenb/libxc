
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_k_rda_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_rda", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([1.725092293253676e+03, 1.725092445902828e+03, 1.725109162530132e+03, 1.725106124407858e+03, 1.725105458258580e+03, 1.725105458258580e+03, 8.183923177268576e+01, 8.181793725577691e+01, 8.125380478953333e+01, 8.148544803348462e+01, 8.145135932612911e+01, 8.145135932612911e+01, 4.981303018855002e+00, 4.980861121658124e+00, 4.962728022060941e+00, 4.882277768832468e+00, 4.932381335619866e+00, 4.932381335619866e+00, 4.508921367782699e-01, 4.448028578640451e-01, 9.672447518815684e+00, 5.687657298624843e-01, 5.135805665869152e-01, 5.135805665869153e-01, 7.279931990950875e-01, 7.079151879075871e-01, 8.708717538930366e-01, 7.655716284908942e-01, 6.852391194533184e-01, 6.852391194533175e-01, 3.043404026637559e+03, 4.178816489248825e+02, -9.594160848486172e+02, -3.000822516509355e+03, -3.023553190744492e+01, 2.208115855229926e+02, -1.337050058329543e+02, 4.934904735404122e+01, 3.694240074189213e+01, 3.693647817055282e+01, 3.703441184763443e+01, 2.614285973040900e+01, -3.065812227589353e+01, 1.657495852343496e+01, -2.892236292879043e+01, 2.287948465421007e+00, 2.582814559396744e+00, 3.402603360433100e+00, 5.926843505507255e-01, -1.083197372991383e+00, 5.877165499226383e-01, 2.712734810478268e+01, 5.113959325696649e-01, 4.878556220147946e-01, 6.674655569223658e-01, 7.060181195042987e-01, 2.814667764162995e-01, 6.740959287092327e-01, 4.133065637486523e-01, 4.133070768394710e-01, -1.536616183168917e+01, -1.504485134471346e+01, -1.515918435182477e+01, -1.536420436994240e+01, -1.519554054668654e+01, -1.520546021889060e+01, -1.458290794269126e+01, 1.695175509955871e+00, -5.903297225664622e+01, -8.178134400310160e-01, 2.619041449010735e+00, -1.642696819967233e+01, -3.639081319011104e+01, -9.848241849416682e-01, -1.996880486542446e+00, -2.989860180936419e+00, 1.718770954161873e+00, 1.162496843284750e+00, 1.766795838324587e+00, 9.168020203391722e-01, 8.776026512560543e-01, 9.153766852249873e-01, 4.894140788468527e-01, 5.630877134208123e-01, 8.088141283553774e-01, 3.205575016268167e-01, 4.581716824588117e-01, 5.643270126031410e-01, 3.706452609006686e-01, 3.706452506669956e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_k_rda_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_rda", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([3.822018088751317e+03, 3.822264898313384e+03, 3.822084660458558e+03, 3.822313177116022e+03, 3.822253038404879e+03, 3.822567242137042e+03, 3.821504401367058e+03, 3.821611915494972e+03, 3.822060022810605e+03, 3.821961563092061e+03, 3.822060022810605e+03, 3.821961563092061e+03, 7.401459160601075e+01, 7.405660245063289e+01, 7.397085304863785e+01, 7.402898865492675e+01, 7.313038082262122e+01, 7.297996743861314e+01, 7.339993812809131e+01, 7.340596855622019e+01, 7.411085146458218e+01, 7.264536845714717e+01, 7.411085146458218e+01, 7.264536845714717e+01, 6.500289833287717e+00, 6.496414195258676e+00, 6.494292270633260e+00, 6.496857871477309e+00, 6.339320296532483e+00, 6.226693013792720e+00, 6.286760520281027e+00, 6.298643063357940e+00, 6.546288836780257e+00, 5.454462758423890e+00, 6.546288836780257e+00, 5.454462758423890e+00, 7.447069497762678e-02, 1.346424294396100e-01, 1.192572278505000e-01, 1.863350619370012e-01, 6.951476126990023e+00, 8.492564159820869e+00, -2.611650046554524e-01, -3.439374467536073e-01, 9.620789546943739e-02, -1.611756780667974e-01, 9.620789546943648e-02, -1.611756780667939e-01, -7.301366201702986e-01, -7.340062600199102e-01, -7.114846865009723e-01, -7.135429435254429e-01, -9.661523662372893e-01, -9.634487412639708e-01, -7.618654449391125e-01, -7.723963623792649e-01, -7.304383567698075e-01, -4.581231755781687e-01, -7.304383567698068e-01, -4.581231755781683e-01, -2.838575239289232e+04, -3.935625447490094e+03, 2.845856021898987e+02, 2.889507797804909e+02, -1.392011242176723e+03, -1.448832354881866e+03, -1.502336120141453e+04, -1.251711380943490e+04, 2.940686025114902e+02, 2.945285715455304e+02, 2.517991598454339e+02, 1.990383571765111e+02, -2.827514302810470e+02, -2.784873105771487e+02, 5.816755475580861e+01, 5.813414972065821e+01, 4.339865222347709e+01, 4.343453721117574e+01, 4.273758876305598e+01, 4.334132711720258e+01, 4.402803999482026e+01, 4.371288695170130e+01, 1.304024387280837e+01, 1.686320747026876e+01, -1.535410429732950e+02, -8.121383966515639e+01, -2.101312913668329e+01, -2.280303448132388e+01, -6.861882632305290e+01, -1.751315303660134e+02, 2.157779554587128e+00, 1.966849622705772e+00, 2.412578429817039e+00, 2.551605359401494e+00, 4.097853451540653e+00, 3.927777375335647e+00, -1.401131424507321e+00, -1.393274226263306e+00, -5.990889937030804e+00, -6.154587851282047e+00, -1.383644606406584e+00, -1.431261908734778e+00, 2.419325854374138e+01, 2.415558575722925e+01, -7.631648926173721e-01, -5.536717188835271e-01, -8.532685901459438e-01, -6.417930974979522e-01, -6.428664322422749e-01, -6.910022625740228e-01, -6.929673635543868e-01, -7.211798321679680e-01, -2.904253770348583e-01, -2.754089604929074e-01, -1.014781354268342e+00, -1.037067245864282e+00, -4.117340899298756e-01, -4.157077627830733e-01, -4.117339205352349e-01, -4.157064679072377e-01, -2.572583395524884e+01, -2.592270558849617e+01, -2.555888347473136e+01, -2.575444897620014e+01, -2.562225270400101e+01, -2.581866205300551e+01, -2.602119098856275e+01, -2.626510430514812e+01, -2.560991917448536e+01, -2.581088723382171e+01, -2.564533477087492e+01, -2.584161065833609e+01, -2.431885361305026e+01, -2.447960563951038e+01, 1.483844010374725e+00, 1.416153871815702e+00, -5.875744670406583e+02, -4.994351547052231e+02, 2.975771112591505e+00, 2.551096435001070e+00, 3.094417257328146e+00, 3.097697240148758e+00, -4.052439693976822e+01, -4.138474823467099e+01, -1.159744746348259e+02, -1.235183706360117e+02, -4.323707954251018e+00, -4.360311873064485e+00, -5.752279204708006e+00, -5.830520093807464e+00, -4.529468941496869e+00, -4.745974070626053e+00, 1.224506612481838e+00, 1.206813829122864e+00, 1.314446278319954e+00, 1.320036371259607e+00, 1.987941694745294e+00, 1.970581104647291e+00, -1.045127352067995e+00, -1.044518850633678e+00, -9.736041157663707e-01, -8.226394821526242e-01, 1.099475689833321e+00, 8.762892662845454e-01, -1.106993492123534e+00, -1.058666113074357e+00, -8.277191969966267e-01, -7.428021332258929e-01, -8.217056202764814e-01, -8.135380146786170e-01, -3.663515040521409e-01, -2.752715824114677e-01, -4.664372375786853e-01, -4.520968015546892e-01, -8.748393361995735e-01, -9.306057382328250e-01, -2.868120730294809e-01, -4.079187342939202e-01, -2.868120815373098e-01, -4.079187805857795e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_rda_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_rda", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.329042315600883e-06, 0.000000000000000e+00, 1.329165729487616e-06, 1.329004111189233e-06, 0.000000000000000e+00, 1.329137963422440e-06, 1.328916318005006e-06, 0.000000000000000e+00, 1.329002674495974e-06, 1.329347904363391e-06, 0.000000000000000e+00, 1.329552669612138e-06, 1.329017780375533e-06, 0.000000000000000e+00, 1.329358383484599e-06, 1.329017780375533e-06, 0.000000000000000e+00, 1.329358383484599e-06, -5.351883089684974e-05, 0.000000000000000e+00, -5.457626781459892e-05, -5.320347733014071e-05, 0.000000000000000e+00, -5.445106563128011e-05, -4.793218675157183e-05, 0.000000000000000e+00, -4.716435917928358e-05, -4.608213377530016e-05, 0.000000000000000e+00, -4.684167399260703e-05, -5.437298514412166e-05, 0.000000000000000e+00, -4.191736781548688e-05, -5.437298514412166e-05, 0.000000000000000e+00, -4.191736781548688e-05, -8.382826090189173e-02, 0.000000000000000e+00, -8.405503420198085e-02, -8.351270728568776e-02, 0.000000000000000e+00, -8.427158228178629e-02, -8.067620533416595e-02, 0.000000000000000e+00, -7.334504938277059e-02, -6.222190001421524e-02, 0.000000000000000e+00, -6.201707757599544e-02, -8.787590214355953e-02, 0.000000000000000e+00, -1.885320244805201e-02, -8.787590214355953e-02, 0.000000000000000e+00, -1.885320244805201e-02, 6.504373012430825e+00, 0.000000000000000e+00, 5.743858259767388e+00, 5.738678326010556e+00, 0.000000000000000e+00, 4.979728186033748e+00, -2.117792098338795e-01, 0.000000000000000e+00, -1.436569137855845e-01, 1.826887815484937e+01, 0.000000000000000e+00, 2.222901965747817e+01, 5.708818156086912e+00, 0.000000000000000e+00, 2.284901094671471e+01, 5.708818156086923e+00, 0.000000000000000e+00, 2.284901094671418e+01, 6.324255191572119e+05, 0.000000000000000e+00, 5.270763768367837e+05, 5.496275123356932e+05, 0.000000000000000e+00, 4.470817957069341e+05, 3.126037901012558e+03, 0.000000000000000e+00, 2.646581244913903e+03, 2.911538479947170e+06, 0.000000000000000e+00, 3.062075116503251e+06, 8.907975932685127e+05, 0.000000000000000e+00, 4.833321746950093e+06, 8.907975932685126e+05, 0.000000000000000e+00, 4.833321746950089e+06, -2.546774147451933e-02, 0.000000000000000e+00, -5.842142375360993e-03, -6.959011775557265e-04, 0.000000000000000e+00, -6.845818440841886e-04, 8.608861830842593e-04, 0.000000000000000e+00, 8.671060448841750e-04, -2.864586599512550e-03, 0.000000000000000e+00, -1.926670582204037e-03, 2.275554826686862e-04, 0.000000000000000e+00, 2.264716938317783e-04, -1.780560981325220e-04, 0.000000000000000e+00, -1.313884695242925e-04, 1.676069701766004e-02, 0.000000000000000e+00, 1.674689743125947e-02, -4.133149070497180e-03, 0.000000000000000e+00, -4.114322176511277e-03, 4.710848906419376e-04, 0.000000000000000e+00, 4.155624585481503e-04, 5.167329249917852e-04, 0.000000000000000e+00, 4.039315170032952e-04, 9.433136055793313e-05, 0.000000000000000e+00, 2.336829285166190e-04, 3.803156405474791e-03, 0.000000000000000e+00, 3.197168628054633e-03, -1.238144736582031e+00, 0.000000000000000e+00, 5.910193300249571e-02, -1.687878956521294e+00, 0.000000000000000e+00, -1.757897828177695e+00, 4.296400131822955e-02, 0.000000000000000e+00, -2.609319707939170e+00, -1.364335006301661e-01, 0.000000000000000e+00, -1.036741418936444e-01, -4.148220226809265e-02, 0.000000000000000e+00, -6.530288882221735e-02, -1.122618557259437e-01, 0.000000000000000e+00, -1.415330024826475e-01, 1.659901778999705e+02, 0.000000000000000e+00, 1.612249416731761e+02, 1.254269450702748e+01, 0.000000000000000e+00, 1.156631430969072e+01, 2.269007502115535e+02, 0.000000000000000e+00, 1.939147799635337e+02, -3.493422418866985e-03, 0.000000000000000e+00, -3.497718306716396e-03, 8.155236620897382e+01, 0.000000000000000e+00, 6.071169488608702e+01, 8.962745698958111e+01, 0.000000000000000e+00, 6.909859302090379e+01, 6.896246092737692e+06, 0.000000000000000e+00, 6.144157351534327e+06, 3.268601510341779e+06, 0.000000000000000e+00, 3.124571891844860e+06, 7.817219853848870e+06, 0.000000000000000e+00, 6.581441351137680e+06, 6.921424057511260e+02, 0.000000000000000e+00, 6.800016201520070e+02, 7.337213415033457e+06, 0.000000000000000e+00, 2.832791448913729e+06, 7.337213909383957e+06, 0.000000000000000e+00, 2.832798288231963e+06, 6.184655592843434e-01, 0.000000000000000e+00, 6.113483082519189e-01, 6.292686636369532e-01, 0.000000000000000e+00, 6.219546830571372e-01, 6.254503940821045e-01, 0.000000000000000e+00, 6.181833346867934e-01, 6.222404206950649e-01, 0.000000000000000e+00, 6.150615656601746e-01, 6.238716554373169e-01, 0.000000000000000e+00, 6.166566436288864e-01, 6.238720007256441e-01, 0.000000000000000e+00, 6.166568958836589e-01, 6.710491115217742e-01, 0.000000000000000e+00, 6.644380038604384e-01, 7.317649743804590e-02, 0.000000000000000e+00, 8.212784857250995e-02, -2.477440091322830e+01, 0.000000000000000e+00, -1.962755070095401e+01, 2.282846223277292e-01, 0.000000000000000e+00, 2.704324659460169e-01, -1.705527686644445e-01, 0.000000000000000e+00, -1.677817016791309e-01, 6.518217967581491e-01, 0.000000000000000e+00, 6.345078104857006e-01, -4.706636785811286e-02, 0.000000000000000e+00, -1.072094200691525e-01, 1.205482936272947e+01, 0.000000000000000e+00, 1.184802618977260e+01, 7.008926750148293e+00, 0.000000000000000e+00, 6.802048192052699e+00, 2.684015816495212e+00, 0.000000000000000e+00, 2.664267318520078e+00, -2.925722296185015e+00, 0.000000000000000e+00, -3.078823801850919e+00, -6.399560925776434e-01, 0.000000000000000e+00, -7.161385520603013e-01, -3.090627976369205e-02, 0.000000000000000e+00, -3.025816225029336e-02, 3.382203642178618e+03, 0.000000000000000e+00, 3.313286062355419e+03, 1.293941539586448e+03, 0.000000000000000e+00, 1.019856760540685e+03, -2.297478947207477e-01, 0.000000000000000e+00, -5.630371630125876e-02, 3.623067541683238e+02, 0.000000000000000e+00, 3.075996050382688e+02, 3.175649414853817e+02, 0.000000000000000e+00, 2.642066352539802e+02, 2.160802604200054e+05, 0.000000000000000e+00, 1.941851016818153e+05, 1.678524441975706e+08, 0.000000000000000e+00, 1.667067705623450e+08, 1.992427887494602e+07, 0.000000000000000e+00, 1.656041587942346e+07, 3.902596671423592e+02, 0.000000000000000e+00, 3.806705470012423e+02, 8.633543543968409e+06, 0.000000000000000e+00, 3.678861705451854e+06, 8.633543547345338e+06, 0.000000000000000e+00, 3.678861716506932e+06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_rda_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_rda", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([7.229449543117222e-02, 7.231121861196008e-02, 7.229649754551282e-02, 7.231266786737854e-02, 7.230065201892234e-02, 7.231926984586406e-02, 7.227823153304137e-02, 7.229062865230293e-02, 7.229580169249671e-02, 7.230046085099121e-02, 7.229580169249671e-02, 7.230046085099121e-02, 2.597386811033903e-01, 2.596904817354398e-01, 2.598776694207108e-01, 2.597867003496173e-01, 2.626632700475702e-01, 2.631942415548925e-01, 2.613782568793062e-01, 2.614565838029800e-01, 2.593542670120093e-01, 2.639885548049049e-01, 2.593542670120093e-01, 2.639885548049049e-01, 8.169443512534613e-02, 8.303475563612044e-02, 8.125702335711327e-02, 8.288155776342546e-02, 7.789827960555822e-02, 7.590938401614121e-02, 7.355070206367011e-02, 7.375702795254048e-02, 8.562175038534543e-02, 6.432774174674821e-02, 8.562175038534543e-02, 6.432774174674821e-02, 4.867402265726762e-02, 4.251183204640253e-02, 4.899027202963328e-02, 4.224141224753637e-02, 1.573114144253839e-01, 1.271595250813580e-01, 6.662409025028092e-02, 5.487681754112472e-02, 4.697264868744494e-02, 9.302102473574191e-02, 4.697264868744509e-02, 9.302102473574242e-02, 4.353039722455724e-06, 5.392449861848970e-06, 5.818994669662179e-06, 7.427548723048473e-06, 2.462480614280129e-03, 2.777666104283357e-03, 8.346703687265415e-07, 6.974648211154102e-07, 3.383388726717784e-06, 1.703279649166321e-05, 3.383388726717655e-06, 1.703279649166322e-05, 3.322331603458354e+00, 8.323828540382138e-01, 1.492477856243218e-01, 1.474657644261301e-01, 4.655902608106723e-03, 3.815265278428232e-03, 4.707388485565518e-01, 3.522259939957912e-01, 1.376796597897285e-01, 1.378481033502162e-01, 1.756859444433697e-01, 2.346689174597311e-01, 3.768305694755417e-04, 5.023016134275575e-04, 8.896282501668436e-02, 8.876982931356579e-02, 7.538851960251812e-02, 7.709902866194991e-02, 8.009011975351982e-02, 8.037965598460999e-02, 8.658627442113642e-02, 8.327230119428140e-02, 2.143141101300608e-01, 1.937636508970619e-01, 3.336947637429635e-01, 9.960791824829472e-02, 4.779301134970015e-01, 4.952031547351462e-01, 1.044102040565297e-01, 5.026012858305995e-01, 2.491538726216940e-01, 2.925908827178566e-01, 2.603467429841813e-01, 2.204170854654387e-01, 1.355390420600928e-01, 1.232929037765113e-01, 1.831890242342569e-03, 1.929001707051204e-03, 5.357294940125273e-02, 5.726096559885077e-02, 4.722355951422336e-05, 5.805604983350930e-05, 2.668286547547555e-01, 2.670091904200985e-01, 2.332931894240901e-02, 2.823136659084699e-02, 1.039632121010082e-02, 9.976159713567941e-03, 8.188845975888348e-10, 1.097260992588747e-09, 1.410388297954155e-15, 1.658013017487935e-15, 2.330929369649973e-15, 1.425675657025119e-14, 3.872922663648088e-04, 2.764752241600183e-04, 7.160559737607971e-09, 2.669235552417981e-07, 1.711778921958413e-12, 2.885905703645383e-11, 7.971143121572890e-10, 7.878337080611620e-10, 6.045644020517207e-09, 6.085879175879304e-09, 2.035575937146449e-11, 2.037533393942688e-11, 8.927290777114460e-06, 1.131101979859879e-05, 7.009408416321920e-08, 5.180806073077183e-08, 4.874275347112651e-12, 4.902908235715876e-12, 6.635186656806017e-11, 6.331385954394349e-11, 2.149087774929133e-01, 2.249407838275277e-01, 3.129481878047127e+00, 2.533608790831121e+00, 1.340072692569377e-01, 1.235083140627230e-01, 1.306850532460579e-01, 1.320563631608487e-01, 2.664452567803885e-02, 2.793711874378724e-02, 1.224330576236721e-01, 1.384467999353345e-01, 2.333377834946925e-04, 2.312346998576373e-04, 1.469176447378523e-04, 1.497681584271109e-04, 1.578831804980039e-02, 1.455508597434645e-02, 1.524093189293877e-01, 1.566278820186968e-01, 7.815019987513608e-02, 8.056733194087685e-02, 1.319096744060071e-01, 1.376802831336101e-01, 6.007245603957102e-05, 8.556232198733894e-05, 7.691203923480847e-03, 2.136494062982253e-02, 1.397045600160888e-01, 1.936370026585505e-01, 9.536503076544188e-05, 1.645835402793395e-04, 1.204942726087323e-02, 1.254114322002955e-02, 1.849776302536374e-09, 6.927198940680261e-09, 1.261486877894728e-10, 3.512362094949386e-11, 5.965645874152357e-12, 9.330699146859014e-12, 4.711065668908478e-03, 6.537855208691078e-03, 7.527204799046263e-11, 5.304351754264617e-10, 2.532329752779267e-11, 1.428379135549570e-10])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
