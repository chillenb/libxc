
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_k_csk4_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk4", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([1.066841043212564e+03, 1.066820216588306e+03, 1.066771627295486e+03, 1.067080424388309e+03, 1.066912371374116e+03, 1.066912371374116e+03, 8.338550291704396e+01, 8.337109506212141e+01, 8.299584849811325e+01, 8.318176980212949e+01, 8.313945549299693e+01, 8.313945549299693e+01, 5.902597921374561e+00, 5.925062997209745e+00, 6.496949190596034e+00, 6.226325773872906e+00, 6.289561598130844e+00, 6.289561598130844e+00, 7.170275143593561e-01, 6.980276669965186e-01, 1.225773006441606e+01, 9.864324843287396e-01, 8.391241254116930e-01, 8.391241254116932e-01, 8.619337891616601e-01, 8.452007149960010e-01, 1.092901508082865e+00, 9.647926139436971e-01, 8.586993307281974e-01, 8.586993307281972e-01, 1.163305962958880e+03, 4.607481897939805e+02, 4.137020315642285e+01, 2.337948030882008e+03, 4.161454519469970e+01, 2.080496678789304e+02, 2.720445653419778e+01, 6.801231060363961e+01, 4.156777000458391e+01, 4.104147181037560e+01, 4.073001646416309e+01, 2.872244500620683e+01, 3.558983510443561e+01, 1.258187465649583e+01, 2.926703027113372e+01, 2.176475947782150e+00, 2.539337432100533e+00, 3.319566289104265e+00, 9.219460238126472e-01, 5.553615614797248e+00, 8.996655501632325e-01, 2.530618094381838e+01, 7.435495084451610e-01, 7.430557593129867e-01, 5.149997896707569e+00, 5.059973746758540e+03, 2.817998616719934e-01, 8.107747109065004e-01, 1.360774814615487e+00, 4.138413698373848e-01, 2.109340682685623e+05, 1.778162424514166e+00, 1.735135084899902e+00, 1.889720158693735e+03, 1.717288811339329e+00, 2.669751752197311e+06, 1.527275253712666e+00, 1.749883069349503e+00, 1.890565863768249e+01, 4.970533805977724e-01, 2.558771808686829e+00, 4.630067130532125e+01, 4.752590440124794e+01, 1.064542730313786e+00, 9.836381101174869e-01, 6.698756299653499e-01, 2.510438765626136e+00, 1.699582296977030e+00, 1.803678563711039e+00, 9.656281599180578e-01, 1.272564158052444e+00, 9.195041304170553e-01, 7.157195827676139e-01, 7.157379189983410e-01, 8.123643722870599e-01, 3.205980404412532e-01, 4.583511409756730e-01, 7.256151243228638e-01, 3.710947565390497e-01, 3.710947565390493e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_k_csk4_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk4", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([4.322730115585421e+01, 4.298371087249528e+01, 4.327283777358635e+01, 4.301681843978520e+01, 4.335167891478135e+01, 4.314819170404112e+01, 4.283712689411393e+01, 4.249263214498063e+01, 4.325785756975247e+01, 4.270495649785315e+01, 4.325785756975247e+01, 4.270495649785315e+01, 8.746901638494192e+01, 8.747170079892045e+01, 8.747019852041539e+01, 8.747286659872005e+01, 8.749870330140980e+01, 8.750719259417598e+01, 8.747751330533175e+01, 8.748555594068134e+01, 8.743776719781481e+01, 8.751418738453083e+01, 8.743776719781481e+01, 8.751418738453083e+01, 3.136173329908093e+00, 3.174383174583706e+00, 3.121833828591177e+00, 3.168707489947442e+00, 2.930970147640966e+00, 2.865617035952471e+00, 2.940613671681932e+00, 2.961798297591084e+00, 3.242742992261856e+00, 2.597030847296133e+00, 3.242742992261856e+00, 2.597030847296133e+00, 1.486849661289606e-01, 1.680131432891447e-01, 1.566396613323928e-01, 1.790161040040532e-01, 4.147763104386704e+00, 4.499124298462974e+00, 4.408321997606465e-02, 4.690764856755236e-02, 1.642172262152327e-01, -1.890408981171161e-02, 1.642172262152330e-01, -1.890408981171127e-02, -8.059404309904425e-02, -8.095601468449677e-02, -7.847056877692901e-02, -7.861430121252480e-02, -9.364623061646349e-02, -9.194660150290164e-02, -8.445825116012076e-02, -8.563463355505303e-02, -8.073587105702262e-02, -5.077295248212526e-02, -8.073587105702223e-02, -5.077295248212548e-02, 2.002720020765978e+02, 2.001745464648464e+02, 2.003842707736226e+02, 2.002829790906943e+02, -4.136987553481316e+01, -4.137049955853119e+01, 2.003748060381416e+02, 2.002769454011033e+02, -3.780596820300980e+01, -3.773998176674260e+01, 2.003293345887517e+02, 2.002289849913731e+02, -2.720496862168878e+01, -2.720394577883732e+01, 2.637153964752542e+01, 2.635551195897581e+01, 2.540771562999584e+01, 2.555273851671210e+01, 2.579972389197236e+01, 2.594863648427917e+01, 2.654843610280695e+01, 2.619807607928444e+01, -1.328658606437257e+00, 8.794618212795119e-01, 2.511961641559664e+00, 2.498950439556877e+00, 3.037350766590898e+00, 3.041006988663286e+00, 2.051572969683480e+00, 2.214002476010930e+00, 2.296020220699454e+00, 2.450176569379046e+00, 2.730413053534675e+00, 2.461222062900512e+00, 2.730413053534676e+00, 2.461222062900514e+00, -9.287706258775039e-01, -9.153129951558304e-01, 1.154084545466835e-01, 1.176230775060941e-01, -9.015108624428613e-01, -8.980883869064230e-01, 2.759427928822242e+01, 2.756991065711439e+01, -8.028645610045710e-01, -6.620468377799164e-01, -8.120874736632814e-01, -6.848382970411904e-01, -7.132009691837608e-02, -7.665975820094145e-02, -7.681624621648110e-02, -7.994547121415736e-02, -2.899046030184471e-01, -2.748248835865256e-01, -8.029051323629945e-01, -8.185008941798195e-01, -4.564314655543317e-02, -4.599145277494066e-02, -4.111906775263499e-01, -4.146819266480015e-01, 2.607206957520255e+00, 2.627668468846375e+00, 2.364446239019450e+00, 2.387332251866251e+00, 2.424318808302715e+00, 2.447281896795838e+00, 2.590874612873236e+00, 2.611264530469513e+00, 2.449380871681332e+00, 2.471826050826166e+00, 2.584188895572688e+00, 2.604682240820060e+00, 2.441880775873546e+00, 2.458371218392013e+00, 1.696059162978955e+00, 1.712518961656857e+00, 1.908172513866171e+00, 1.926835533285502e+00, -4.697480642252927e-01, -4.824093888495565e-01, 2.016746052675512e+00, 2.032349079989890e+00, 2.016746052675514e+00, 2.032349079989891e+00, 3.330802288922535e+00, 3.343196864606579e+00, -1.065811174935678e+00, -1.063296116112628e+00, -9.910948241957798e-01, -9.764012896999454e-01, -6.699878059788047e-01, -6.697616390285913e-01, 5.986934856907230e-01, 5.990500998375016e-01, 5.986934856907219e-01, 5.990500998374997e-01, 1.430207247478122e+00, 1.452831140262040e+00, -9.661309552656209e-01, -9.651355341118014e-01, -9.027678949033713e-02, -8.765255771995395e-02, 7.862473931604317e-01, 8.122677825069561e-01, -7.598705652839296e-01, -6.782155737762927e-01, -7.582587875996823e-01, -6.780622781176386e-01, -8.160102974632624e-01, -8.074234383090121e-01, -3.662840966403836e-01, -2.752038646114244e-01, -4.661581390799409e-01, -4.517810851509205e-01, -7.230163496627479e-01, -7.280904232939582e-01, -2.863246864083914e-01, -4.070580830778694e-01, -2.863246864083907e-01, -4.070580830778688e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_csk4_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk4", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.107020581150523e-05, 0.000000000000000e+00, 1.107080700738382e-05, 1.107005974957536e-05, 0.000000000000000e+00, 1.107070079655212e-05, 1.106963763173713e-05, 0.000000000000000e+00, 1.107008397856132e-05, 1.107129058137164e-05, 0.000000000000000e+00, 1.107218937803411e-05, 1.107011636644028e-05, 0.000000000000000e+00, 1.107138220163060e-05, 1.107011636644028e-05, 0.000000000000000e+00, 1.107138220163060e-05, 3.329295581905195e-04, 0.000000000000000e+00, 3.329431861014302e-04, 3.329264355942283e-04, 0.000000000000000e+00, 3.329419971393634e-04, 3.328702036709986e-04, 0.000000000000000e+00, 3.328496458258891e-04, 3.328064751120481e-04, 0.000000000000000e+00, 3.327924632886012e-04, 3.330966275419693e-04, 0.000000000000000e+00, 3.327230048830597e-04, 3.330966275419693e-04, 0.000000000000000e+00, 3.327230048830597e-04, 4.667461145221176e-02, 0.000000000000000e+00, 4.612395146325179e-02, 4.689321097635709e-02, 0.000000000000000e+00, 4.621463633112640e-02, 4.994882394901868e-02, 0.000000000000000e+00, 5.099549189915797e-02, 4.939092349845110e-02, 0.000000000000000e+00, 4.907131443530170e-02, 4.507879902990573e-02, 0.000000000000000e+00, 5.485833637143311e-02, 4.507879902990573e-02, 0.000000000000000e+00, 5.485833637143311e-02, 2.858523217342664e+00, 0.000000000000000e+00, 2.549307065111152e+00, 2.755405214619448e+00, 0.000000000000000e+00, 2.418955322315148e+00, 3.079054087698469e-02, 0.000000000000000e+00, 2.788293394427504e-02, 6.288631284196602e+00, 0.000000000000000e+00, 6.035296962706517e+00, 2.510833269645204e+00, 0.000000000000000e+00, 1.626120712905741e+01, 2.510833269645202e+00, 0.000000000000000e+00, 1.626120712905741e+01, 7.027225571371324e+04, 0.000000000000000e+00, 5.856688593214098e+04, 6.107291919356678e+04, 0.000000000000000e+00, 4.967907484320510e+04, 3.552399912250694e+02, 0.000000000000000e+00, 3.016560446116364e+02, 3.235066880902121e+05, 0.000000000000000e+00, 3.402326908284780e+05, 9.898051322621966e+04, 0.000000000000000e+00, 5.371167945798205e+05, 9.898051322621966e+04, 0.000000000000000e+00, 5.371167945798200e+05, 9.916409713746271e-05, 0.000000000000000e+00, 9.923539214075449e-05, 9.910856222839115e-05, 0.000000000000000e+00, 9.918169781180323e-05, 8.924464260173629e-04, 0.000000000000000e+00, 8.931000050680403e-04, 9.911306490014708e-05, 0.000000000000000e+00, 9.918455754416397e-05, 8.882338279271541e-04, 0.000000000000000e+00, 8.887812364904291e-04, 9.913587584026417e-05, 0.000000000000000e+00, 9.920845733205202e-05, 1.681014771572354e-02, 0.000000000000000e+00, 1.681269629163901e-02, 1.827125224583641e-03, 0.000000000000000e+00, 1.828617744012938e-03, 1.902859442706665e-03, 0.000000000000000e+00, 1.893019991911766e-03, 1.866743452258686e-03, 0.000000000000000e+00, 1.856689115772203e-03, 1.819619128206880e-03, 0.000000000000000e+00, 1.843736369975599e-03, 1.040571855098519e-02, 0.000000000000000e+00, 9.727088337930003e-03, 6.904617237699867e-02, 0.000000000000000e+00, 6.959748788580875e-02, 5.410619559824963e-02, 0.000000000000000e+00, 5.403257305262277e-02, 9.250574436068019e-02, 0.000000000000000e+00, 8.300978993081132e-02, 8.191067848015529e-02, 0.000000000000000e+00, 7.425980209199574e-02, 6.137603746458187e-02, 0.000000000000000e+00, 7.154888608069736e-02, 6.137603746458187e-02, 0.000000000000000e+00, 7.154888608069730e-02, 1.680322501954708e+02, 0.000000000000000e+00, 1.633153647814864e+02, 2.703017172811141e+00, 0.000000000000000e+00, 2.662948993735825e+00, 2.269837417480204e+02, 0.000000000000000e+00, 1.940019566484364e+02, 1.977993278662029e-03, 0.000000000000000e+00, 1.980661619139016e-03, 1.111856442201872e+02, 0.000000000000000e+00, 9.198728934642037e+01, 1.121597825241277e+02, 0.000000000000000e+00, 9.434551189318017e+01, 7.662495719078560e+05, 0.000000000000000e+00, 6.826841573576160e+05, 3.631779455935363e+05, 0.000000000000000e+00, 3.471746546494351e+05, 7.817219853849012e+06, 0.000000000000000e+00, 6.581441351138420e+06, 6.939684422672343e+02, 0.000000000000000e+00, 6.813232574212176e+02, 8.152459899425586e+05, 0.000000000000000e+00, 3.147553654306371e+05, 7.337213909483018e+06, 0.000000000000000e+00, 2.832798288875731e+06, 6.871839602795703e-02, 0.000000000000000e+00, 6.792759034498436e-02, 6.292686936810395e-01, 0.000000000000000e+00, 6.219547129496448e-01, 6.254503941826526e-01, 0.000000000000000e+00, 6.181833347862691e-01, 6.914402586669245e-02, 0.000000000000000e+00, 6.834793788717505e-02, 6.238720007562848e-01, 0.000000000000000e+00, 6.166568959141232e-01, 6.931911119514284e-02, 0.000000000000000e+00, 6.851743287934708e-02, 6.710491118734169e-01, 0.000000000000000e+00, 6.644380041926748e-01, 1.180511617951773e-01, 0.000000000000000e+00, 1.165300598823821e-01, 1.028254017897388e-01, 0.000000000000000e+00, 1.014684543430237e-01, 8.082651433086351e-01, 0.000000000000000e+00, 8.012066296723641e-01, 9.626312684971289e-02, 0.000000000000000e+00, 9.519827969193487e-02, 9.626312684971289e-02, 0.000000000000000e+00, 9.519827969193487e-02, 4.704042806053953e-02, 0.000000000000000e+00, 4.681121554844254e-02, 1.207679180977562e+01, 0.000000000000000e+00, 1.186942021445754e+01, 7.016998504986986e+00, 0.000000000000000e+00, 6.810034030542593e+00, 3.024385658686621e+00, 0.000000000000000e+00, 2.974767750313159e+00, 5.064526436761558e-01, 0.000000000000000e+00, 5.069890000954181e-01, 5.064526436761563e-01, 0.000000000000000e+00, 5.069890000954180e-01, 1.518686757124337e-01, 0.000000000000000e+00, 1.487740376946142e-01, 3.383498349740632e+03, 0.000000000000000e+00, 3.314985808460874e+03, 1.544636404285685e+02, 0.000000000000000e+00, 1.399350496871409e+02, 3.805360203013646e-01, 0.000000000000000e+00, 3.638277421945886e-01, 3.625707359495248e+02, 0.000000000000000e+00, 3.079851676658412e+02, 3.619346314584978e+02, 0.000000000000000e+00, 3.079362154929083e+02, 2.160802635499018e+05, 0.000000000000000e+00, 1.941851121390783e+05, 1.678524443444068e+08, 0.000000000000000e+00, 1.667067706068541e+08, 1.992427887587956e+07, 0.000000000000000e+00, 1.656041588063657e+07, 4.122466863696499e+02, 0.000000000000000e+00, 3.926655627087804e+02, 8.633543549065115e+06, 0.000000000000000e+00, 3.678861720624852e+06, 8.633543549065135e+06, 0.000000000000000e+00, 3.678861720624863e+06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_csk4_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk4", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([2.698272773430705e-02, 2.697463056469272e-02, 2.698328987749856e-02, 2.697504035036931e-02, 2.698412657435078e-02, 2.697649821349658e-02, 2.697773696943518e-02, 2.696837382592317e-02, 2.698311230353643e-02, 2.697089574754231e-02, 2.698311230353643e-02, 2.697089574754231e-02, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666668e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666668e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666668e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666668e-01, 1.666666666666668e-01, 1.666666666666668e-01, 1.666666666666667e-01, 1.666666666666668e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666668e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666668e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666665e-01, 1.666666666666666e-01, 2.164312222211893e-10, 1.177772164220803e-10, 1.666666666666665e-01, 1.666666666666667e-01, 8.382969757021348e-04, 8.599064216565353e-04, 1.666666666666666e-01, 1.666666666666666e-01, -3.648559242507915e-11, -3.349676616243948e-11, 1.666666666666668e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666667e-01, 6.836198931138202e-02, 7.758858478527640e-02, 1.666666666666668e-01, 1.666666666666668e-01, 1.666666666666667e-01, 1.666666666666668e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666666e-01, 1.666666666666666e-01, 1.666666666666666e-01, 1.736627444537562e-11, 2.630010026798970e-11, 1.666666666666667e-01, 1.666666666666669e-01, 3.499103976941866e-10, -4.444615479144083e-10, 1.666666666666667e-01, 1.666666666666667e-01, 1.634572455243674e-03, 4.698899953710195e-03, 6.137115236377527e-06, 1.253862308975693e-05, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666665e-01, 1.666666666666666e-01, 0.000000000000000e+00, 0.000000000000000e+00, 2.293998875372678e-11, -4.811023485170315e-11, 1.666666666666667e-01, 1.666666666666667e-01, 0.000000000000000e+00, 0.000000000000000e+00, 1.666666666666667e-01, 1.666666666666668e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 1.666666666666666e-01, 1.666666666666667e-01, 0.000000000000000e+00, 0.000000000000000e+00, 1.666666666666666e-01, 1.666666666666666e-01, 0.000000000000000e+00, 0.000000000000000e+00, 1.666666666359997e-01, 1.666666659166594e-01, 1.666666666666666e-01, 1.666666666666667e-01, 5.396033936910264e-04, 2.104239774025730e-04, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, -1.875308274041175e-11, -1.215255605733472e-10, 1.280316820643278e-10, -6.088723608399130e-11, 1.106248076894469e-08, 8.347731913508414e-09, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666664e-01, 1.666666666666665e-01, 8.929075521043676e-10, -3.367086327630499e-10, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666666e-01, 2.187193218200309e-10, 2.403250454948812e-10, 3.289555923957935e-04, 2.980210540424850e-05, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 2.339666403198526e-09, 4.817606825748979e-10, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
