
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_k_rda_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_rda", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([1.724995204070912e+03, 1.724995336235986e+03, 1.725012018561506e+03, 1.725008873992837e+03, 1.724995141474526e+03, 1.724995141474526e+03, 8.173030876273528e+01, 8.171153075588248e+01, 8.114651200789801e+01, 8.136835236374904e+01, 8.172561212205390e+01, 8.172561212205390e+01, 4.970201232065271e+00, 4.969252501684522e+00, 4.943995498125472e+00, 4.869569558083418e+00, 4.969498127210692e+00, 4.969498127210692e+00, 4.192944713409369e-01, 4.179783615565568e-01, 9.212911597872669e+00, 5.435554832480860e-01, 4.187182340139365e-01, 4.187182340139367e-01, 4.964616918763689e-01, 4.950809489506098e-01, 6.627726984407698e-01, 5.969348265608574e-01, 4.857543048230565e-01, 4.857543048230565e-01, 1.487669285364793e+04, 3.351334928758543e+02, -9.571184947135670e+02, -4.178055425988045e+03, 4.402172796755205e+01, 2.336812183855130e+02, -1.301457507759546e+02, 4.948465813883461e+01, 3.695861994949764e+01, 3.739422656171138e+01, 3.706576908982194e+01, 2.259289443786530e+01, -2.594380422100303e+01, 1.970469119150092e+01, -4.312914772116482e+01, 2.118304243230376e+00, 2.578967730211441e+00, 3.481050862297835e+00, 4.442395990215430e-01, -1.875212874882926e+00, 3.467811022628593e-01, 2.712029677797976e+01, 4.649624684167319e-01, 4.373535316692378e-01, 5.796122429196735e-01, 5.785251737213010e-01, 3.420188241467084e-01, 5.388436749244664e-01, 4.760027119536822e-01, 4.760040819441187e-01, -1.586898810564840e+01, -1.556332337296862e+01, -1.567465791627822e+01, -1.587305373575066e+01, -1.571128970570550e+01, -1.571652484872011e+01, -1.488583620075102e+01, 1.693500831502327e+00, -1.422084239318245e+02, 3.317239450008377e-01, 2.669564361041770e+00, -1.888307548261879e+01, -3.541555068431564e+01, -1.298950653563037e+00, -2.356911718565192e+00, -3.415757679460107e+00, 1.772811442020113e+00, 1.185913966094664e+00, 1.719174558700047e+00, 7.292155532355608e-01, 7.354311584304462e-01, 8.867810772543450e-01, 3.757006017992526e-01, 4.837353304518994e-01, 5.710163082082234e-01, 4.425528407379318e-01, 4.765362523722781e-01, 4.079362047896158e-01, 3.940701885061070e-01, 3.940694495708453e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_k_rda_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_rda", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([3.821967273865567e+03, 3.822017252842538e+03, 3.822215269868656e+03, 3.821399571511702e+03, 3.821993832056829e+03, 3.821993832056829e+03, 7.385555778430887e+01, 7.382406243919239e+01, 7.287536667097777e+01, 7.320987950985646e+01, 7.384723476765502e+01, 7.384723476765502e+01, 6.474756765807432e+00, 6.469669429453477e+00, 6.174734306615953e+00, 6.191545275083765e+00, 6.472670493489957e+00, 6.472670493489957e+00, 2.944689513209127e-01, 3.295097595876602e-01, 8.587325070410674e+00, -1.155665155782579e-01, 3.056912261547649e-01, 3.056912261547653e-01, -5.078812975006048e-01, -5.075262365197869e-01, -7.618522795578626e-01, -5.993918705045524e-01, -4.979412647353881e-01, -4.979412647353881e-01, -3.364905177143489e+05, 3.540270219356289e+02, -1.414925203722249e+03, -2.675522508567982e+04, 3.035521973805344e+02, 2.482195330918900e+02, -2.706832083053723e+02, 5.796946284451982e+01, 4.353566606911515e+01, 4.441168619254610e+01, 4.401878167356784e+01, 7.008550722737856e+00, -8.409554232568593e+01, -3.514310986294000e+01, -2.561321825704895e+02, 1.793783448127514e+00, 2.425961001135526e+00, 4.105727720750911e+00, -1.310493534442370e+00, -8.868488891800508e+00, -1.386225734586126e+00, 2.419504168557379e+01, -5.321487067391815e-01, -6.275266799912380e-01, -5.822456907856179e-01, -5.819630055079613e-01, -3.439500505900865e-01, -9.186224543296075e-01, -4.788612477783409e-01, -4.788578407672604e-01, -2.662345402572754e+01, -2.645453872916335e+01, -2.652145608475757e+01, -2.694939814671511e+01, -2.652590914846778e+01, -2.654335706330826e+01, -2.491713334404030e+01, 1.418393696806860e+00, -2.999355955434663e+03, 3.353584310117755e+00, 3.103732382726311e+00, -5.200326059267972e+01, -1.157194148621660e+02, -4.555920193371614e+00, -6.117558940880304e+00, -5.531612188427875e+00, 1.243959845345075e+00, 1.417364730276192e+00, 1.874922555869110e+00, -9.262042944231065e-01, -1.809090864082519e-01, 9.449466080190375e-01, -1.068514780053168e+00, -6.517643789711772e-01, -5.878593253909166e-01, -4.428105320520665e-01, -4.774660952590302e-01, -7.056898432665920e-01, -3.961278330767103e-01, -3.961306732950042e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_rda_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_rda", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([6.646471793458224e-07, 6.646328206030217e-07, 6.645805883440512e-07, 6.648160381870401e-07, 6.646395063622621e-07, 6.646395063622621e-07, -2.619896344084783e-05, -2.609710727375602e-05, -2.285547837168858e-05, -2.237776951864456e-05, -2.617892569291796e-05, -2.617892569291796e-05, -4.095867632443564e-02, -4.086587405900887e-02, -3.491374846372514e-02, -2.807451049093108e-02, -4.091284518864007e-02, -4.091284518864007e-02, 1.695373799796399e+00, 1.449316574262021e+00, -7.016777551250789e-02, 5.626367508597246e+00, 1.614983154836215e+00, 1.614983154836215e+00, 5.959776589371089e+04, 5.185139762646105e+04, 7.208929682991462e+02, 5.399625831897052e+05, 5.350684707532953e+04, 5.350684707532953e+04, -1.141485371925174e-01, -2.138771664775261e-04, 4.323784908679335e-04, -3.873651021037178e-03, 7.510628504483344e-05, -8.760031275415428e-05, 8.383592682705204e-03, -2.094059879343886e-03, 1.989242566070515e-04, 1.424978661099042e-04, 6.045660434426873e-05, 2.599715491430142e-03, -6.203313625653929e-03, -1.175366889496631e+00, -2.603729262518830e+00, -4.485917684970910e-02, -2.432934548668734e-02, -6.254766915943653e-02, 6.746127625025737e+01, -1.605063287380688e+00, 7.140220136514429e+01, -1.760364594906503e-03, 2.756356936896058e+01, 3.184097553246646e+01, 6.017463803270528e+05, 4.031448391943500e+05, 9.574968365467290e+05, 2.838130790903841e+02, 5.329459729206631e+05, 5.329472721449964e+05, 2.934235176944964e-01, 2.981735632873029e-01, 2.964590737731869e-01, 2.951160644163059e-01, 2.958018426548971e-01, 2.958018789592259e-01, 3.235901008645643e-01, 3.430921132572106e-02, -7.299263513261580e+01, 7.339338251557530e-02, -8.133496690162538e-02, 2.157238466277553e-01, -3.340923363885650e-02, 5.099398612483059e+00, 3.048015836626955e+00, 1.354034174892761e+00, -1.465549664440097e+00, -3.607929838811590e-01, -1.453556561230608e-02, 9.721083895493849e+02, 7.960882204461474e+01, -8.818133395711850e-02, 1.283918113899252e+02, 1.020079819941374e+02, 3.705064242574031e+04, 1.964459228059670e+07, 2.865708564733840e+06, 1.339733200352170e+02, 8.682202567930392e+05, 8.682210883130948e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_rda_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_rda", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([7.230555724365663e-02, 7.230705909148594e-02, 7.231203358763619e-02, 7.228761957977481e-02, 7.230636319574525e-02, 7.230636319574525e-02, 2.602082042077906e-01, 2.603113038257832e-01, 2.634218833454433e-01, 2.619644142858882e-01, 2.602400582704709e-01, 2.602400582704709e-01, 8.035733766666200e-02, 8.010743539963718e-02, 7.514917172187949e-02, 7.176755402158497e-02, 8.026221491358305e-02, 8.026221491358305e-02, 4.521903562650095e-02, 4.566578697557139e-02, 1.260539946068477e-01, 7.848933682602455e-02, 4.536332910526571e-02, 4.536332910526575e-02, 8.718722614763186e-05, 1.038606919221145e-04, 7.388472772819613e-03, 5.434668643545427e-05, 1.037918879508735e-04, 1.037918879508735e-04, 2.894249389278884e+01, 1.134996718878997e-01, 4.286572056320338e-03, 1.086118119109968e+00, 1.368920131288493e-01, 1.788631429239587e-01, 7.693660790762659e-04, 8.949967635620693e-02, 7.718274627523093e-02, 7.761702709223513e-02, 8.544304635168488e-02, 2.145648344319700e-01, 1.122872199028854e-01, 6.174264400342206e-01, 8.867246559955038e-01, 3.192346303833365e-01, 2.527112626853378e-01, 1.297483491605875e-01, 2.838490642793894e-03, 1.290007655773688e-01, 1.166086580161243e-04, 2.660289826530297e-01, 3.092594977272150e-02, 1.208227556113164e-02, 1.917136583827197e-08, 4.419419643879843e-14, 1.885822814752826e-14, 7.948973348085582e-04, 2.661011028884510e-07, 7.739638767300352e-10, 9.420016112010640e-10, 9.401312258205271e-09, 2.611224928524319e-11, 9.865627017877926e-06, 1.554851448661994e-08, 5.685075198332513e-12, 4.789784628586809e-11, 2.419842744403604e-01, 1.905825358614443e+01, 1.390966000758147e-01, 1.383211749476647e-01, 5.165408041732719e-02, 1.271123974904913e-01, 3.120958720947465e-04, 1.404056640135942e-04, 9.915942744032994e-03, 1.564410991505525e-01, 7.938155060530118e-02, 1.487274572801662e-01, 7.978784799729031e-05, 8.973866848877050e-02, 1.734654953491900e-01, 1.927045872699412e-04, 1.935181668831141e-02, 2.642434310882602e-07, 4.561838155870820e-12, 2.166233954952915e-10, 1.265028228898786e-02, 1.710136752406154e-07, 6.239907554275722e-10])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
