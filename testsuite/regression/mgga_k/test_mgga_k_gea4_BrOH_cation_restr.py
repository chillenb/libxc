
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_k_gea4_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_gea4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([5.574337860787822e+02, 5.574183393445938e+02, 5.573757306360992e+02, 5.576040531414392e+02, 5.574807489661486e+02, 5.574807489661486e+02, 8.340004526960246e+01, 8.338564237153626e+01, 8.301059220340454e+01, 8.319684013362968e+01, 8.315429900573439e+01, 8.315429900573439e+01, 5.942106172167985e+00, 5.964952619107437e+00, 6.546027962327106e+00, 6.262364399795806e+00, 6.308970729788844e+00, 6.308970729788844e+00, 7.188460116359991e-01, 6.995391582869507e-01, 1.262779414825834e+01, 1.006650289169621e+00, 8.149355444782146e-01, 8.149355444782148e-01, 9.423400971712244e+00, 8.498579416181627e+00, 1.500933521146880e+00, 4.125428834987881e+01, 2.120476282523565e+01, 2.120476282523571e+01, 1.327616519513344e+03, 4.756377988820082e+02, 8.933020284777228e+02, 3.110850302078890e+03, -1.282125688340986e+02, 2.084588834793794e+02, 9.683430390908919e+03, 6.887563905952962e+01, 4.159586402056049e+01, 4.106920668484437e+01, 4.075356640869851e+01, 2.747106829540331e+01, 4.979165049095455e+01, 1.378012254192604e+01, 4.034342450449626e+01, 2.177713057656723e+00, 2.535015874309322e+00, 3.327442549856221e+00, 2.548465572980762e+00, 8.604884520939656e+00, 1.865869896732539e+02, 2.535828502189449e+01, 6.993666525069799e-01, 4.957428542905830e-01, 1.280786748297108e+04, 9.746254759869009e+09, 2.094025794504438e+09, 9.728199734126761e+00, 4.568928594949099e+02, 1.595685984949719e+06, 5.649111920974361e+08, 9.290219082716972e+07, 2.781728635941035e+10, 4.731944125458446e+04, 9.446627131270967e+06, 9.099066068126337e+10, 8.337120313939552e+09, 1.752652673343063e+00, 2.369835498239391e+01, -1.935066667856145e+00, 2.567550065274101e+00, 7.773958418961799e+01, 6.772707177076599e+01, 2.520866131213662e+02, 6.104239262263092e+02, -5.717202460224316e+00, 2.604085344523675e+00, 1.716505927089863e+00, 1.804253726176009e+00, 1.727105019231232e+01, 1.760487404848057e+00, 9.195949038888502e-01, 5.104503133502079e+01, 6.550726352559860e-01, 3.367852342433154e+04, 1.936226011977497e+04, 7.770445342946345e+05, 4.321707356405357e-01, 5.192935841475908e+04, 1.806910674374251e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_k_gea4_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_gea4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([3.214363554641265e+03, 3.214386251713849e+03, 3.214484597782618e+03, 3.214146871423151e+03, 3.214324200279657e+03, 3.214324200279657e+03, 8.738704413962034e+01, 8.738806203083952e+01, 8.741486367296622e+01, 8.739076005526954e+01, 8.738749890379707e+01, 8.738749890379707e+01, 3.150240402025815e+00, 3.140554449567414e+00, 2.905153447810634e+00, 2.965186946203416e+00, 2.955183074043398e+00, 2.955183074043398e+00, 1.588420136548724e-01, 1.682090603385871e-01, 3.906233676035696e+00, 7.556728775298942e-02, 1.001371477409128e-01, 1.001371477409131e-01, 1.277665464776136e+01, 1.112198292619110e+01, 5.150805155805657e-01, 4.747028947970507e+01, 2.367242616531929e+01, 2.367242616531912e+01, -6.349392444463487e+01, 1.785320182071748e+02, -1.243976333218298e+04, -1.066004897252740e+03, 1.725781863818322e+02, 2.000798841209588e+02, -2.180274084459344e+04, 2.612295830017805e+01, 2.537482724477368e+01, 2.574356721584734e+01, 2.629936191093935e+01, 2.536122137278634e+01, -2.061463134537424e+01, 1.088884173957056e+00, -1.581807080342309e+01, 2.371220951785761e+00, 2.598892824305576e+00, 2.590086374440068e+00, -1.005616596734092e+01, -3.977814066300962e+00, -3.551273258652337e+02, 2.752253928436709e+01, -1.735776633841952e-02, -1.427289810543914e-01, -1.855443878225853e+04, -1.624170908054748e+10, -3.490539450336352e+09, -2.498580748212428e+01, -4.845140714259281e+02, -2.676156233274833e+06, -9.411667735047637e+08, -1.549791796735484e+08, -4.636460706200352e+10, -7.570890545302190e+04, -1.578985533684756e+07, -1.516466438501254e+11, -1.389651533169557e+10, 1.687620632816393e+00, -5.723953211821530e+00, 1.705370608256914e+00, 2.020976601325045e+00, -4.967854146175376e+01, -3.011031292343139e+01, -5.231778651997345e+02, -1.201604938181297e+03, -1.040184046808495e+01, 5.235907619020459e-01, 6.030174150855009e-01, 1.439555419443539e+00, -4.367264636174405e+01, 3.345507121945529e-01, 7.991856260744659e-01, -1.055270619000590e+02, -8.439843488343199e-02, -5.791652165669844e+04, -3.716250902352528e+04, -1.316205935172546e+06, -1.636482928847977e+00, -8.944500217846812e+04, -3.065505712085284e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_gea4_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_gea4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([9.462337003753725e-07, 9.462250930303949e-07, 9.461859512451175e-07, 9.463141281569905e-07, 9.462470837897888e-07, 9.462470837897888e-07, 1.689894439313371e-04, 1.689951609578463e-04, 1.691528306443528e-04, 1.691907368881955e-04, 1.691749157689231e-04, 1.691749157689231e-04, 1.741097705059858e-02, 1.743476728966729e-02, 1.813371242165351e-02, 1.885288260230352e-02, 1.865787573189887e-02, 1.865787573189887e-02, 1.272399128920424e+00, 1.223790306989785e+00, 4.541319215120712e-03, 7.713731741172123e-01, 1.575821683061881e+00, 1.575821683061881e+00, -1.065710812806395e+07, -8.295122034004863e+06, -1.896238394050122e+03, -2.233019707210295e+08, -6.375224903061792e+07, -6.375224903061806e+07, -5.971251471940372e-05, 1.682372014008631e-05, 7.916261781247264e-04, -1.875629291228366e-04, 8.259711438597000e-05, 4.435961560004760e-05, 4.974527718836291e-02, 5.484107935254273e-04, 9.665804167726027e-04, 9.559409295682081e-04, 9.264503621465106e-04, 1.115916051051142e-03, -1.647527790100154e-01, -1.455340944215614e-02, -1.964639304235612e-01, 3.555824567945733e-02, 3.188610636018101e-02, 2.756696230858734e-02, 2.070702161108086e+02, -1.065658970589061e+01, 1.777285016203788e+03, 8.858392780760094e-04, 6.470881122170216e+00, 1.303006466998357e+01, -1.354975730983871e+10, -4.616005271173992e+12, 6.258893494838493e+12, 2.145176512117567e+03, -1.359467487562336e+09, 8.205513483577542e+10, -1.234578562092088e+03, 5.126920919460395e+02, 8.795545691547819e+03, -1.113077632664887e+01, 1.618084295703804e+02, -1.585389537851522e+04, 5.295321480380224e+03, 6.416997539615409e-02, -1.429849556443004e-01, 8.092449208702408e-02, 4.058237425588292e-02, -4.086049701132549e-01, -1.180053180813273e-01, 4.853397405595231e+01, 3.538519353749850e+01, 1.260459014365241e+00, 3.007335381232200e-02, 1.639460102560967e-01, 7.577978378045092e-02, 2.197804429373129e+04, -7.939783239330916e+02, 1.849280338624078e-01, 1.782658797147130e+03, 2.385349910670588e+01, 2.201555049511243e+08, 1.282435186162638e+12, 4.161691917528958e+11, 2.349414137074084e+02, 2.021784817980270e+10, 3.768633207638885e+10])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_gea4_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_gea4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([1.589596811187641e-01, 1.589597011795683e-01, 1.589597424218898e-01, 1.589594416846964e-01, 1.589596062233605e-01, 1.589596062233605e-01, 1.664639874421164e-01, 1.664629421835579e-01, 1.664331479835019e-01, 1.664243697496987e-01, 1.664344259153114e-01, 1.664344259153114e-01, 1.731147796918337e-01, 1.731543345318637e-01, 1.740076533917195e-01, 1.728353367796138e-01, 1.731259167251112e-01, 1.731259167251112e-01, 1.692498103424242e-01, 1.690258037412486e-01, 1.839513329265222e-01, 1.877883030227268e-01, 1.752982764423533e-01, 1.752982764423533e-01, 9.613199328261000e+00, 8.707716795738190e+00, 5.225704625120032e-01, 3.716838945844758e+01, 2.111959384799144e+01, 2.111959384799147e+01, 2.211736452938979e-01, 1.830677323012622e-01, -2.026429464114978e-01, 2.848662846163300e-01, 1.503185469784090e-01, 1.693588872557523e-01, -1.123341379233648e+00, 1.769513389297653e-01, 1.666500331745673e-01, 1.664339763024467e-01, 1.667826454109715e-01, 1.616743582957611e-01, 3.088720065436082e-01, 2.046897246127597e-01, 3.024042430501254e-01, 1.688706636154768e-01, 1.676582222288948e-01, 1.708863250679972e-01, -3.577233613703690e-01, 3.894688927661798e-01, -3.577017158320190e+00, 1.692944857588759e-01, 1.671037666745139e-01, 1.386599554016916e-01, 9.323389302284036e+02, 6.421261094990293e+05, -3.892520134508926e+05, -1.180419677882368e+00, 1.504890069429403e+02, -8.919446763810367e+03, 8.925539821858854e+02, -3.640456172725346e+02, -6.286651452207368e+03, 8.187285994491367e+00, -1.157547914403997e+02, 1.136052987509114e+04, -3.524416039776520e+03, 1.646188251041715e-01, 2.606689535379415e-01, 1.468535624979193e-01, 1.705623797211049e-01, 4.022829927127692e-01, 3.155861393314273e-01, -1.609061507979964e+00, -2.083097380512948e+00, 4.911290708195815e-03, 1.889599201812842e-01, 1.759132938218992e-01, 1.667476493859418e-01, -2.674693177465226e+00, 4.850082126025737e-01, 1.670413926741736e-01, -2.179440468096815e+00, 1.675844012974886e-01, -4.775026041439850e+02, -3.384418672921810e+03, -1.021859525695374e+04, -5.896762739625024e-02, -1.738890541915843e+03, -3.243705342666287e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
