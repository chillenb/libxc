
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_k_gea4_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_gea4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.179916555750503e+03, 2.179925227632488e+03, 2.179973176317459e+03, 2.179843712767845e+03, 2.179910222539887e+03, 2.179910222539887e+03, 5.898959739627570e+01, 5.898894683479283e+01, 5.897681597794593e+01, "nan", 5.899166140655548e+01, inf, 2.311465984594097e+00, inf, inf, inf, inf, inf, 1.179830810180335e+196, inf, 3.098904612780427e+00, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, 1.276633719710930e+02, inf, inf, 2.089092449856752e+01, 2.110125337335788e+01, 2.088731399072408e+01, 2.107040479283186e+01, 2.101152954606914e+01, inf, inf, inf, inf, inf, inf, 1.704094213152001e+00, 4.068616634545607e-01, inf, 4.289803181060312e-01, 1.064211967887129e+131, inf, inf, 1.614471351827196e+02, inf, "nan", 6.372702708604567e-01, 4.539597356194135e+01, inf, inf, inf, 1.583318579836247e+00, inf, inf, inf, inf, inf, inf, inf, inf, 1.335408357265699e+00, inf, 3.976971507886972e-01, inf, 6.320032289993666e-01, inf, inf, 1.055344355212100e+00, inf, inf, inf, 3.581160089032229e-01, inf, inf, inf, 5.685279747822947e+105, inf, inf, inf]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_k_gea4_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_gea4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.321422646508004e+03, 3.321445473948476e+03, 3.321545779139252e+03, 3.321206165461938e+03, 3.321384284334773e+03, 3.321384284334773e+03, 8.649346886103673e+01, 8.649503754031133e+01, 8.653550074077762e+01, "nan", 8.649951977602272e+01, "nan", 3.052687888900517e+00, "nan", "nan", "nan", "nan", "nan", -1.966384683633891e+196, "nan", 4.215492829428594e+00, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 1.997290145110104e+02, "nan", "nan", 2.406337188857605e+01, 2.456970382404164e+01, 2.344422846697339e+01, 2.389432269798669e+01, 2.463731648243584e+01, "nan", "nan", "nan", "nan", "nan", "nan", 2.580432397787745e+00, -1.017172123568488e+00, "nan", -1.133915218963044e+00, -1.773686613145215e+131, "nan", "nan", -5.917748855554884e+02, "nan", "nan", -2.018439209116938e+00, -1.663293020552518e+02, "nan", "nan", "nan", 2.587013924659498e+00, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 2.009695301544460e+00, "nan", 1.840775994817977e-02, "nan", 8.030899002875158e-01, "nan", "nan", 1.394956476940427e+00, "nan", "nan", "nan", -9.749549355541395e-01, "nan", "nan", "nan", -9.475466246371580e+105, "nan", "nan", "nan"]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_gea4_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_gea4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [7.893561773639679e-07, 7.893474686134002e-07, 7.893100863728428e-07, 7.894396573767097e-07, 7.893715703726973e-07, 7.893715703726973e-07, 1.892089100420533e-04, 1.892030417404781e-04, 1.890535871046935e-04, "nan", 1.891881922381899e-04, -4.246527488338902e+152, 2.852545640990268e-02, -9.479700968541783e+244, -2.190381859304052e+158, -1.177240603393294e+211, -5.182256488209349e+157, -1.193859084423864e+211, -7.578029027970795e+98, -5.029157168837053e+215, 1.762635211208062e-02, -2.444795805184134e+231, -2.206100634523477e+216, -1.830601829495575e+245, -2.505720925731404e+182, -1.298680429996149e+213, -1.402746433842038e+231, -7.820053670147305e+243, -1.110796214222442e+285, -9.282935235495640e+194, -1.963063867143184e+164, -3.945595683520897e+237, -2.582684405642401e+199, 5.310938298092832e-05, -2.349205267528926e+218, -3.264819474323887e+170, 1.246147807775092e-03, 1.212393941082923e-03, 1.283292768739773e-03, 1.252176041556641e-03, 1.210254654438936e-03, -4.858577293796854e+154, -9.843227732219137e+177, -8.918276597944857e+215, -2.581589159078548e+178, -2.357762387108770e+216, -8.661037623139938e+177, 3.650624678318724e-02, 5.710939104301300e+01, -3.764193282750687e+201, 8.061086630616796e+01, -1.508073978216953e+62, -1.138144907971212e+164, -2.596831556613977e+251, 1.571493848617554e+09, -5.568247464746865e+176, -inf, 4.898845701387724e+02, 4.490842164515748e+08, -7.651969372595107e+176, -4.189083556625493e+235, -4.812899600547049e+224, 3.534991932459704e-02, -9.712956050871582e+206, -1.163375224641267e+162, -2.811296000969290e+240, -2.280420397112544e+226, -2.629157754932207e+159, -4.170421272303189e+226, -5.469121587164759e+197, -2.113034695984873e+244, 5.318653346058395e-02, -5.275688799782556e+244, 1.358884710427612e+00, -1.105457805361039e+224, 2.100955965474753e-01, -2.127400429063065e+175, -1.214301421182351e+198, 9.235502673574927e-02, -1.011533182681508e+260, -8.511600385064930e+258, -1.657818356536153e+252, 1.374073304615821e+02, -1.097176757454783e+256, -2.993654006017829e+263, -3.684041322431888e+277, -3.557148994284164e+61, -3.305393333267161e+185, -6.314323404443813e+239, -1.637613475812926e+267]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_gea4_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_gea4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [1.643515853558956e-01, 1.643516540141546e-01, 1.643518492620331e-01, 1.643508291619226e-01, 1.643513793731594e-01, 1.643513793731594e-01, 1.634649394630748e-01, 1.634655931874604e-01, 1.634806946140288e-01, "nan", 1.634657232451754e-01, 6.299157218357927e+154, 1.612852321650194e-01, 1.005625758174169e+245, 2.143332884364133e+158, 1.180878115549567e+211, 5.171015113090062e+157, 1.191269359689453e+211, 1.388546477842345e+97, 9.640144592640041e+213, 1.618709898503122e-01, 1.960116811762350e+229, 2.504442817587544e+214, 2.078163403789195e+243, 1.936820941956230e+176, 1.170514097151946e+207, 2.123180458179694e+227, 1.164375319991123e+237, 3.281591300709099e+278, 2.742429180421040e+188, 9.772347540706379e+166, 1.965242849057454e+240, 1.285723931486241e+202, 1.649954173015649e-01, 1.169785396411590e+221, 1.625714958063886e+173, 1.588326532034621e-01, 1.590128257550383e-01, 1.584094019819640e-01, 1.585761726119085e-01, 1.591308440851465e-01, 1.309947354143328e+156, 7.012120215683498e+177, 8.145255036920911e+215, 1.456966777819529e+178, 1.494684903000529e+216, 6.473208535500233e+177, 1.642051564736428e-01, 4.465022854156349e-02, 6.928722522288768e+199, 2.754410159791572e-02, 3.762531708716849e+63, 4.935550092091742e+161, 1.126112513321287e+249, -1.018292155711260e+02, 7.745866355522646e+169, 4.997573165605012e+285, -1.104684702372764e-01, -4.616058841098079e+01, 8.320230366882845e+169, 3.027900899491251e+235, 3.419276799018726e+224, 1.661200046033247e-01, 6.977400255173322e+206, 8.336333770878574e+161, 2.014474891369873e+240, 1.517865656721991e+226, 1.106997497224947e+159, 2.016270285813313e+226, 3.014548181508489e+197, 1.090043388719993e+244, 1.640603187575224e-01, 5.551941041011404e+244, 1.422199766801766e-01, 7.108172771655148e+222, 1.605532841591083e-01, 2.073268675776078e+174, 1.183403493340702e+197, 1.613018679598474e-01, 1.342445031194282e+256, 2.862459186734621e+255, 2.200774574716445e+251, 1.605332136394638e-02, 1.464119501309685e+253, 6.504634921236792e+257, 9.788227773425727e+268, 8.740703911812175e+53, 3.652407097971052e+182, 5.439445902680192e+232, 1.410714868502856e+260]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_gea4_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_gea4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
