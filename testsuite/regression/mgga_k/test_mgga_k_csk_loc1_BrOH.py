
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_k_csk_loc1_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk_loc1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.084905005931600e+03, 2.084906311994353e+03, 2.084932380552926e+03, 2.084910420145999e+03, 2.084905520063980e+03, 2.084905520063980e+03, 5.973217997239852e+01, 5.972926414521761e+01, 5.965432353383925e+01, "nan", 5.973118909037015e+01, 6.750024779050042e+158, 2.934724407645806e+00, 4.073911872586521e+247, 8.229624791632110e+160, 4.615599965551045e+213, 1.887959845604003e+160, 4.349375639415015e+213, 3.161337388106755e+98, 2.274054003574825e+215, 3.490045163858692e+00, 2.953281295839279e+230, 2.536866395028610e+215, 2.105068187394058e+244, 1.293907504073804e+174, 8.789863952227591e+204, 1.213682249423623e+227, 4.526748721105103e+234, 3.962459548758215e+275, 3.311431466314644e+185, 2.349882525533170e+171, 4.727487524156285e+244, 3.091650428790833e+206, 1.197265371738110e+02, 2.813435297445920e+225, 3.909985421799057e+177, 3.134289678752091e+01, 3.123942441112331e+01, 3.194070280628516e+01, 3.185255410235131e+01, 3.052304435494188e+01, 4.493003758057297e+159, 2.210001210958987e+180, 3.030482809667016e+218, 3.645430796810773e+180, 4.000435648921610e+218, 1.973653341173608e+180, 1.665423738138901e+00, 8.073245607467939e-01, 1.555813560446080e+201, 7.448068059934223e-01, 1.232571990649424e+67, 4.354330636700302e+162, 9.934994328156659e+249, 5.805996352863160e-01, 2.006466981620083e+167, 8.037211526131098e+282, 6.896553831619791e-01, 4.770743017871012e-01, 1.889752540389195e+167, 8.898622110265405e+237, 9.921964065037037e+226, 1.589906031761143e+00, 2.041495110161453e+209, 2.434351517599338e+164, 5.882609962311021e+242, 4.287864498120557e+228, 2.232913153158970e+161, 4.493215458797669e+228, 7.440295715023968e+199, 2.554878636450047e+246, 1.319044300709977e+00, 2.269435351038900e+247, 9.871185394221724e-01, 3.851188054001366e+224, 8.033394614712583e-01, 1.553822493124064e+176, 8.869081889283199e+198, 1.248571212120141e+00, 7.758555312267617e+255, 3.140589964981077e+255, 2.264644868935848e+253, 6.424158033509578e-01, 5.238829488680708e+253, 1.511367926963808e+256, 1.686144682106011e+265, 8.950228977694508e+50, 1.098979397066040e+183, 1.365253154475761e+230, 3.540770436452705e+257]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_k_csk_loc1_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk_loc1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [2.566240465409315e+03, 2.566303072062483e+03, 2.566519128372146e+03, 2.565494630885200e+03, 2.566273996696651e+03, 2.566273996696651e+03, 4.817963078518383e+01, 4.819143066782429e+01, 4.851958337444394e+01, "nan", 4.818611034569565e+01, -1.711269224430626e+143, -1.335800343014622e-01, -6.133461888547176e+231, -2.092753746997583e+145, 5.429903166906434e+197, -1.749233092180454e+144, -1.078320449134048e+198, -1.069098765672840e+83, -1.978573719725706e+200, 1.484977363579725e+00, -6.192512150208535e+214, 4.369693490053778e+199, 1.270543645994840e+228, 5.318918857255745e+157, -4.835160548529958e+189, -4.747731649063986e+211, -9.377761527883972e+218, -1.737717001388725e+259, -3.813837288643970e+169, -3.359266316968684e+155, -2.371442980023039e+229, 5.276179763693761e+190, 1.826012506652927e+02, -4.283944405799610e+209, 5.378374368985942e+161, -1.198648356769367e+01, -1.127208613256556e+01, -1.315161147701656e+01, -1.259866968077248e+01, -9.979427141675624e+00, -3.929700816357619e+144, -5.477230554847011e+164, 1.248604369835580e+203, -7.319998293163580e+164, 2.873693092965007e+201, -3.984767221933825e+164, 2.010268391055122e+00, -8.022482171235481e-01, -5.167420871985476e+185, -7.395870374415172e-01, -1.836200565733664e+51, 1.703729665366081e+147, -2.109328725975528e+234, -5.805995953041642e-01, -6.617962553565229e+151, 1.075936774496741e+267, -6.887540098583291e-01, -4.770742445796853e-01, 6.057234245224351e+151, 1.793869667416777e+222, -6.113356062598222e+211, 2.714974608391513e+00, -2.560808392033462e+192, -1.404424362720776e+149, -3.980018848214542e+227, 1.261198696345811e+213, -3.619635675134614e+144, -4.663998842566265e+211, 5.522896302687701e+183, -1.270413491315710e+231, 1.562198920925827e+00, -1.505293037340970e+232, -8.619881979445531e-01, 2.673251518853979e+208, -1.843806668096089e-02, -1.055353625467537e+161, -1.229973668236003e+183, 1.714588494636108e-01, 1.382348846840014e+240, 1.573461789413534e+240, -1.052049318791153e+238, -6.396373232288243e-01, -1.016567144578690e+237, 5.625039584887119e+240, -1.047045706223724e+250, -5.750645980086951e+35, -2.117347353697458e+167, 5.954372472506785e+214, 9.986652594947611e+238]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_csk_loc1_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk_loc1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [2.300593541801428e-06, 2.300472101657698e-06, 2.300069139683881e-06, 2.302056266779529e-06, 2.300528373728269e-06, 2.300528373728269e-06, 8.222255436633404e-04, 8.220854198641083e-04, 8.181234481129181e-04, "nan", 8.221429707687797e-04, -2.472355334932013e-04, 1.709048149191250e-01, -3.521068493704325e-02, -3.818061351843336e-02, -3.729284375174069e-02, -3.514182064063837e-02, -3.514182064063837e-02, -1.714505893405703e+00, -1.647803711390635e+00, 8.367393889358860e-02, -4.499104442777782e+00, -1.694125675833426e+00, -1.694125675833426e+00, -9.841348747844100e+03, -8.563482231794515e+03, -1.275285290834196e+02, -8.913674748409093e+04, -8.836880840331354e+03, -8.836880840331354e+03, -7.375225004317645e-05, -7.371291324254355e-05, -7.374809836833034e-05, 6.905086182115143e-05, -7.373225297122965e-05, -7.373225297122965e-05, 7.416942488363510e-03, 7.224322855423782e-03, 7.533400558669461e-03, 7.381503951203047e-03, 7.134077358315784e-03, -1.356887620917998e-03, -5.319354598546049e-02, -4.150206494903226e-02, -6.225828582121706e-02, -5.486690168006797e-02, -4.750477929046341e-02, 1.061805860658394e-01, 6.867315848465537e+01, -1.678177047213094e+00, 7.137335941889025e+01, -1.474817918412267e-03, -7.337103557516324e+00, -7.337103557516324e+00, 6.017464825938194e+05, -6.651889846709739e+04, -1.579869780302338e+05, 2.852423883804038e+02, 5.329472633900299e+05, -8.793630043642275e+04, -4.841488087911890e-02, -4.919864159513981e-02, -4.859044833780653e-02, -4.869897669896317e-02, -4.880731003106816e-02, -4.880731003106816e-02, -5.339236666285022e-02, -8.178569601370621e-02, -7.176223236636087e-02, -6.387962615585639e-02, -6.774335659304102e-02, 1.563843619519986e-01, -3.600523589606962e-02, 4.991730631280648e+00, -5.034765251545205e-01, 1.165184181597290e+00, -3.482603739330055e-01, -3.482603739330056e-01, 5.117963205788200e-01, -1.605187871500873e+02, -6.469846192883088e+01, -2.856684891979313e-01, 1.284770812888559e+02, -2.121582924157989e+01, -6.113368241862037e+03, -3.241357726446034e+06, -4.728419139774357e+05, -2.443350684108390e+01, -1.432564802708559e+05, -1.432564802708565e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_csk_loc1_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk_loc1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [1.200625822538177e-01, 1.200655997155359e-01, 1.200747052154566e-01, 1.200253462782391e-01, 1.200642089438586e-01, 1.200642089438586e-01, 8.410510642601114e-02, 8.412189121985329e-02, 8.458450404381559e-02, "nan", 8.411373885899930e-02, 2.171250000000000e-01, 3.665133858475582e-02, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 6.018119856016352e-02, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000001e-01, 2.171250000000000e-01, 2.171250000000000e-01, 1.575684969341834e-01, 2.171250000000001e-01, 2.171250000000001e-01, 2.247422075660686e-02, 2.333247039622648e-02, 2.131915418082777e-02, 2.195675216146516e-02, 2.469134904594879e-02, 2.171250000000001e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 1.176387503428820e-01, 2.183213955865654e-04, 2.171250000000000e-01, 2.432612478620544e-04, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.406377787904250e-09, 2.171250000000000e-01, 2.171250000000000e-01, 4.552704895637730e-05, 4.190224298081391e-09, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.169204960599572e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000001e-01, 2.171250000000001e-01, 2.171250000000000e-01, 1.153838343349813e-01, 2.171250000000000e-01, 4.378456198771028e-03, 2.171250000000000e-01, 3.766828391239226e-02, 2.171250000000000e-01, 2.171250000000000e-01, 4.517922981105875e-02, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 1.503124466414453e-04, 2.171250000000001e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_csk_loc1_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk_loc1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
