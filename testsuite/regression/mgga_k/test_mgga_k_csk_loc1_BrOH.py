
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_k_csk_loc1_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk_loc1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([1.489817075079013e+03, 1.489801100782695e+03, 1.489767936426036e+03, 1.490028508676588e+03, 1.489808333163561e+03, 1.489808333163561e+03, 8.108408417696718e+01, 8.106947878790000e+01, 8.063248969845266e+01, 8.077781675704767e+01, 8.108076776544445e+01, 8.108076776544445e+01, 6.512095713303879e+00, 6.533478178802010e+00, 7.109801814402934e+00, 6.758841733448229e+00, 6.518874466475972e+00, 6.518874466475972e+00, 6.073534238989136e-01, 5.928080692784616e-01, 1.324570291539508e+01, 1.041309050160192e+00, 6.027953213955497e-01, 6.027953213955495e-01, 6.260924450036663e-01, 6.237873700755397e-01, 8.990874190660660e-01, 9.758597343046533e-01, 6.124097229978698e-01, 6.124097229978698e-01, 1.868998314077619e+03, 4.109949012339962e+02, 4.220315042344058e+01, 2.603984185555166e+03, 6.427888986218863e+01, 2.345799154614149e+02, 2.743326329617795e+01, 7.548214503348193e+01, 4.030785169205760e+01, 4.084848472533053e+01, 3.964319599815381e+01, 3.120084506676559e+01, 4.883997913690617e+01, 1.676127779829225e+01, 3.047253842436504e+01, 2.198379497421836e+00, 2.573480604033924e+00, 3.673503489913244e+00, 8.066153442188397e-01, 6.187604474981142e+00, 7.438626814782791e-01, 2.716730617906020e+01, 7.034060371072383e-01, 6.942081459998579e-01, 4.692702926477382e+00, 3.072187715031507e+03, 3.427430342258516e-01, 6.895344283724028e-01, 1.928931445984286e+00, 4.770742913376271e-01, 2.599950566371145e+05, 1.958770092777012e-01, 1.490172362960396e-01, 2.559761390666549e+03, 1.308945878233987e-01, 3.328434941147042e+06, 4.044652994658361e-02, 1.709185116043466e+00, 2.236509618190453e+01, 7.196992846682733e-01, 2.774996006777361e+00, 5.076439741294332e+01, 6.016048095529231e+01, 9.632187821162599e-01, 8.844408022883323e-01, 6.444770781920884e-01, 2.904543496525994e+00, 1.795870537203718e+00, 1.692607129137595e+00, 5.676352020790748e+00, 1.325068163026964e+00, 8.727132149649859e-01, 6.419291286326598e-01, 6.466104746223930e-01, 5.773381883896148e-01, 2.354581540699841e+01, 4.768849521585822e-01, 5.785565082814282e-01, 3.948424438052825e-01, 3.948424408070716e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_k_csk_loc1_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk_loc1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([7.955186644889411e+02, 7.955484295281947e+02, 7.956440812515460e+02, 7.951565720809958e+02, 7.955346748044340e+02, 7.955346748044340e+02, 9.636304087284933e+01, 9.635797890598194e+01, 9.619684405619142e+01, 9.616619155848562e+01, 9.636302173243035e+01, 9.636302173243035e+01, 3.744051763486782e+00, 3.740888171671924e+00, 3.677641359833602e+00, 3.727660577475240e+00, 3.742873574594956e+00, 3.742873574594956e+00, 2.325686957579673e-01, 2.515162674496512e-01, 5.217877219834809e+00, 2.442796036914476e-01, 2.403394191138290e-01, 2.403394191138276e-01, 8.344194473912898e-02, 8.336051208222438e-02, 1.342225046825888e-01, 9.884641336555243e-02, 8.178695593638427e-02, 8.178695593638427e-02, 2.114701590173779e+02, 2.114924060299643e+02, -3.849687306184366e+01, 2.114900891319025e+02, 3.387279677169624e+01, 2.114810412880139e+02, -2.723128432919458e+01, 3.376189178482552e+01, 2.709201590225031e+01, 2.946363239423251e+01, 3.048324378386607e+01, -6.977074579027708e+00, 2.681397308528450e+00, 3.043592658161325e+00, 2.422965461434193e+00, 2.545740097313887e+00, 2.872236981544585e+00, 2.872236981544586e+00, -8.054703155802596e-01, 4.038861318634522e-01, -7.436770800968057e-01, 2.816124587158501e+01, -5.647650676075764e-01, -6.692601406143437e-01, 9.596678612084122e-02, 9.588859100750162e-02, -3.427430342218759e-01, -6.893099905551701e-01, 7.889925654183988e-02, -4.770742901289657e-01, 2.720043165060787e+00, -1.958160529399292e-01, -1.490140121419800e-01, 2.717375751779792e+00, -1.308157727760136e-01, 2.716375092921702e+00, -4.044241081463248e-02, 1.246965421936444e+00, 2.211351888193981e+00, 2.852272622626131e-01, 2.269067752992169e+00, 2.269067752992168e+00, 3.350171597632789e+00, -9.614591038152591e-01, -8.828086517126676e-01, -6.160129955717495e-01, 8.521428509114521e-01, 8.521428509114520e-01, 1.655248256475873e+00, 1.445742188657462e-01, 1.490540916015516e-01, 8.963479615892287e-01, -6.417637585132494e-01, -5.853027072192742e-01, -5.773380497258253e-01, 7.305359550962413e-02, -4.768849519479616e-01, -5.763636939278137e-01, -3.948424285399979e-01, -3.948424400228217e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_csk_loc1_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk_loc1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([5.478448845950776e-06, 5.478403320121443e-06, 5.478181868180487e-06, 5.478928706444912e-06, 5.478424987364062e-06, 5.478424987364062e-06, -2.214376630095261e-04, -2.212916027007667e-04, -2.163190574074594e-04, -2.138767747195913e-04, -2.214150031730734e-04, -2.214150031730734e-04, -3.510236502169899e-02, -3.521068493704325e-02, -3.818061351843336e-02, -3.729284375174069e-02, -3.514182064063837e-02, -3.514182064063837e-02, 1.963967232265046e-01, -3.221388766278442e-02, -2.039039221523134e-02, -4.499104442777782e+00, 8.914633859246883e-02, 8.914633859248902e-02, -9.841348747844100e+03, -8.563482231794515e+03, -1.275285290834196e+02, -8.913674748409093e+04, -8.836880840331354e+03, -8.836880840331354e+03, -7.375225004317645e-05, -7.371291324254355e-05, 4.469075913334166e-04, -7.371751349258339e-05, 4.103320509628836e-04, -7.373225297122965e-05, 8.433828435639681e-03, -1.362599982341794e-03, 1.688389094411342e-04, -3.270438382631998e-04, -5.106071842268568e-04, 6.761106976193987e-03, -5.319354598546049e-02, -4.150206494903226e-02, -6.225828582121706e-02, -5.486690168006797e-02, -4.750477929046341e-02, -4.750477929046341e-02, 6.874823256948963e+01, -1.678177047213094e+00, 7.146646771018514e+01, -1.474817918412267e-03, 3.898497249549222e+01, 4.395853106716748e+01, -9.928817090994887e+04, -6.651889846709739e+04, 9.574968365468713e+05, 2.853063522594931e+02, -8.793630043642275e+04, 5.329472753642530e+05, -4.841488087911890e-02, 2.981735853719408e-01, 2.964590738341771e-01, -4.869897669896317e-02, 2.958018788889569e-01, -4.880731003106816e-02, 3.235901009866773e-01, 1.713036321852263e-01, -7.176223236636087e-02, 3.599325527950731e-01, -6.774335659304102e-02, -6.774335659304104e-02, -3.600523589606962e-02, 5.111788936335977e+00, 3.051364237688133e+00, 1.459867235075013e+00, -3.482603739330055e-01, -3.482603739330056e-01, -7.987838918056824e-02, -1.605187871500873e+02, -6.469846192883088e+01, -2.856673059781472e-01, 1.285802508762129e+02, 1.202095018442226e+02, 3.705071641496244e+04, -3.241357726446034e+06, 2.865708569547995e+06, 1.479879091673981e+02, 8.682210892661022e+05, 8.682210925401232e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_csk_loc1_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk_loc1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([2.846615287034612e-02, 2.846631520624041e-02, 2.846672172740507e-02, 2.846404243888928e-02, 2.846624122879496e-02, 2.846624122879496e-02, 2.139157723444159e-01, 2.138977786815268e-01, 2.132872701638588e-01, 2.129867309450482e-01, 2.139133950467287e-01, 2.139133950467287e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 1.828507923845589e-01, 1.869745719275220e-01, 2.171250000000000e-01, 2.171250000000000e-01, 1.847552146299724e-01, 1.847552146299721e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000001e-01, 2.171250000000000e-01, 2.109118422843910e-05, 2.171250000000001e-01, 1.523565280708360e-02, 2.171250000000001e-01, 3.133404548852359e-06, 2.171250000000000e-01, 1.826741876479765e-01, 1.936580101762430e-01, 1.979454562659543e-01, 3.314410471093587e-02, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 1.481508012061663e-05, 2.171250000000000e-01, 4.499462831563193e-07, 2.171250000000000e-01, 2.297776190244728e-02, 2.132352057211154e-03, 2.171250000000000e-01, 2.171250000000000e-01, 6.588580454530576e-17, 3.744153363206896e-06, 2.171250000000000e-01, 2.799653482339580e-12, 2.171250000000000e-01, 3.322076700207659e-11, 9.223745849783205e-14, 2.171250000000000e-01, 5.494987244558891e-11, 2.171250000000000e-01, 1.691831472444133e-13, 1.219628316249504e-01, 2.171250000000001e-01, 1.310209961405866e-02, 2.171250000000000e-01, 2.171250000000001e-01, 2.171250000000000e-01, 1.216126781790579e-06, 5.278429276625910e-07, 5.974477657197450e-05, 2.171250000000000e-01, 2.171250000000000e-01, 2.084102080743452e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171248726288896e-01, 7.717041809549699e-07, 1.213388241308377e-02, 1.018033024522448e-09, 2.171250000000000e-01, 7.948600940787995e-13, 1.182445217269611e-04, 7.050631570309133e-10, 2.258647806475685e-12])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
