
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_k_gea2_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_gea2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.174661428050298e+03, 2.174670382342665e+03, 2.174719078043336e+03, 2.174585419414901e+03, "nan", 2.235776438633231e+156, 2.195501689557920e+245, 2.348531916409483e+211, 2.348007859263193e+211, 2.617660370712495e+211, 1.245490961477084e+226, 2.357666560887409e+240, 2.714332777021039e+199, 1.347430398061815e+228, 1.289752558926838e+270, 1.799522673341579e+247, 1.182477815775573e+209, 1.076298841607312e+228, 2.043799002307132e-01, 2.060122985952767e-01, 5.522964502499951e+160, 2.563380674654953e+220, 1.807679364268299e+220, 1.030049551736922e+182, 3.375773905583338e+205, 2.609815975330735e+74, 2.517941224351986e+251, 5.701827303153918e+167, 4.846680085101264e+282, 2.047373110638042e+167, 1.039177586272665e+235, 2.368837186992143e+206, 6.814266944326821e+239, 4.538211291509264e+225, 3.539047759066538e+225, 2.131712748681549e+243, 6.710416383634128e+245, 7.968864844882329e+221, 2.754796198599904e+196, 5.128622081770453e+250, 1.334304771858394e+251, 2.577744535915778e+249, 2.055259235281607e+257, 1.386086539150481e+180, 1.232625994390770e+251, 1.097615878437434e+251, 2.760846388687791e+252, 3.482230717777454e+247, 4.718049018806884e+182, 1.159146300057031e+254, 1.592108094109101e+245, 1.696547815022245e+01, 8.725343206949856e+233, 2.896861733418344e+177, 8.299546151392136e+233, 1.044693024239473e+259, 6.740496665662060e+167, 3.496931627224665e+231, 1.488088068949892e+248, 1.777955565535866e+186, 3.600864789436409e+247, 1.612294010738601e+233, 6.171933606572435e+194, 1.476143213769108e+246, 1.646583119166707e+209, 5.618996174539627e+247, 2.393231523142655e+242, 2.802263364056596e+209, 1.764458919078884e+214, 2.958745759792663e+257, 6.741056356502140e+213, 4.202516557686787e+223, 2.557536215065224e+223, 2.085249974402980e+258, 5.321689810149776e+171, 7.730089210738331e+233, 2.319346032824794e+229, 1.852212904251273e+248, 3.843044964175866e+257, 2.078337974900047e+246, 2.536601801910711e+217, 4.525601780411235e+174, 9.486770553111002e+182, 7.627325661934132e+230, 1.333416547548022e+205, 1.273531794359946e+251, 7.346443302647653e+254, 1.067809469775010e+212, 5.114144479001140e+167, 6.588741437566952e+233]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_k_gea2_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_gea2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.340695604223617e+03, 3.340687292489046e+03, 3.340720849789054e+03, 3.340705630378502e+03, 3.340800981540523e+03, 3.340820630866541e+03, 3.340515893290355e+03, 3.340457256603753e+03, "nan", "nan", -2.271171956031120e+140, 1.121871370913757e+141, -3.555557937287709e+229, -1.620504658995508e+230, -1.886539663338785e+195, 1.029455370006234e+196, 8.697339002416929e+195, -2.785409726452352e+196, -1.584392197264805e+195, 7.555126826222178e+195, -8.094222705465998e+210, 1.247932938468658e+211, -1.304083811063424e+225, 3.039121260509949e+225, -2.729260397229429e+183, 1.762188600768667e+184, 1.189367071587880e+213, -2.168075527543847e+212, 4.751540687729951e+253, 8.223159321510369e+254, 4.817418595584552e+231, -2.190499626558899e+231, 4.532388046549965e+193, -3.662190703452087e+193, 7.507613652412180e+212, -3.829633622073814e+212, 1.486849661289603e-01, 1.680131432891444e-01, 1.566396613323927e-01, 1.790161040040532e-01, -1.281170035945475e+145, 1.089337993277281e+145, 2.973484340572844e+204, 8.765088955134034e+204, -1.089450038142167e+205, 1.165713483791136e+205, -2.191039614043649e+166, -2.191039614043649e+166, -4.367840764883858e+189, 3.757404366264660e+189, 5.431021328727569e+58, -5.247372604721686e+58, -1.243411153889228e+236, 8.855025654105949e+235, 1.662642913689726e+151, 4.581915341396301e+152, 2.634931205522231e+266, -1.174870472070013e+267, 2.532770588975654e+152, -9.878872083582242e+152, 5.787116625706601e+218, -4.054745304666380e+219, 3.207851186666348e+190, -6.931264593163548e+189, -2.537691341623626e+224, -4.562135111503935e+224, 5.805891179742704e+210, -1.389875229273314e+210, 1.294031043229103e+210, -1.447833189996950e+209, 1.160344549960874e+228, 3.309245402854904e+227, -2.449539308375813e+230, -2.449539308375813e+230, 1.330977405940369e+206, -1.937034985246218e+205, -1.904311886638062e+181, 1.132272858246673e+181, 3.313628182638630e+235, 1.534590863464013e+235, 2.535779066913610e+235, 7.357853111686028e+235, -1.766353696919707e+233, -1.766353696919707e+233, -4.194260067678781e+241, 2.573175571435849e+242, -6.884220201702760e+164, -9.250978477216816e+164, -6.958898745740247e+233, 1.446538173903557e+236, 5.164536403326993e+235, 6.978626048764486e+235, 5.190756334642153e+237, 1.426566890770744e+237, 1.735485071491902e+232, 2.779793666315957e+232, 3.475867475663669e+166, 3.475867475663669e+166, -3.102423647982920e+237, -3.102423647982920e+237, -1.254795332644836e+230, -6.740601241499717e+228, 2.759427928822242e+01, 2.756991065711439e+01, 5.173219091329859e+218, 6.275385962236857e+218, 1.818168548113634e+162, 6.944225469871670e+161, 8.425965391736009e+217, -4.853308144438422e+218, -7.569950723655936e+243, 3.634753458014764e+243, -7.251829648681811e+151, 1.733975311626692e+152, 1.600912370024727e+216, 3.141087113152066e+216, 5.747354934675596e+232, -1.899493071889472e+232, 3.236211845786751e+170, 3.236211845786751e+170, 1.977552511620739e+232, -1.052311021643191e+232, 9.329701284758387e+217, 1.638307411276523e+218, -1.451162805394226e+179, -4.084378746122257e+178, -8.620079215779412e+230, -1.175676787838258e+231, 1.519181511737077e+194, 6.364751167551143e+193, 4.425580813803597e+232, 5.426812218405968e+232, 3.574654629408713e+227, 1.445981756698429e+227, 6.043263477708325e+193, 9.501062312276849e+193, -1.192968105195780e+198, 6.613233047353835e+198, -8.806448058704220e+241, -2.190780289651095e+241, 8.219215042929593e+196, 4.246838006186047e+198, 2.930012068014570e+207, 1.485469056794602e+208, 6.834489527798040e+207, 1.291605247720249e+208, 4.060124010767015e+242, -1.304961895973883e+243, 6.775116230964672e+155, 3.657038576767923e+156, -2.180647232508703e+217, -2.571902685125979e+218, 2.814161301390623e+212, 2.390336792184624e+214, -4.517347784215250e+232, 4.197614200247289e+232, 7.786620911450918e+242, 2.265879882284554e+242, 3.268256114150994e+231, -2.921274355637932e+230, -7.547569613407288e+201, -7.547569613407288e+201, 2.213487264477503e+159, 2.213487264477503e+159, 1.398582503070689e+167, 1.398582503070689e+167, -3.287251514460923e+215, 6.873222745203807e+214, 1.492889335665261e+190, 6.537315873803532e+188, -2.281280042277329e+235, 3.841516651586334e+235, 6.676601696158685e+239, 2.810944707739239e+239, -1.927316533950808e+196, 4.019789638810630e+196, -1.405490597301063e+152, 2.976404615084837e+151, -1.291735467609028e+218, 4.447804846475102e+218]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_gea2_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_gea2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.436787982279863e-06, 0.000000000000000e+00, 1.436793532792833e-06, 1.436774056774607e-06, 0.000000000000000e+00, 1.436783416308430e-06, 1.436726759413062e-06, 0.000000000000000e+00, 1.436716412155617e-06, 1.436884097927220e-06, 0.000000000000000e+00, 1.436916933690333e-06, 1.436779815572765e-06, 0.000000000000000e+00, 1.436834753058636e-06, 1.436779815572765e-06, 0.000000000000000e+00, 1.436834753058636e-06, 3.329295581905193e-04, 0.000000000000000e+00, 3.329431861014300e-04, 3.329264355942279e-04, 0.000000000000000e+00, 3.329419971393632e-04, 3.328702036709985e-04, 0.000000000000000e+00, 3.328496458258889e-04, 3.328064751120480e-04, 0.000000000000000e+00, 3.327924632886009e-04, 3.330966275419693e-04, 0.000000000000000e+00, 3.327230048830593e-04, 3.330966275419693e-04, 0.000000000000000e+00, 3.327230048830593e-04, 4.667461145221172e-02, 0.000000000000000e+00, 4.612395146325177e-02, 4.689321097635706e-02, 0.000000000000000e+00, 4.621463633112638e-02, 4.994882394901864e-02, 0.000000000000000e+00, 5.099549189915795e-02, 4.939092349845109e-02, 0.000000000000000e+00, 4.907131443530165e-02, 4.507879902990570e-02, 0.000000000000000e+00, 5.485833637143308e-02, 4.507879902990570e-02, 0.000000000000000e+00, 5.485833637143308e-02, 2.858523217342664e+00, 0.000000000000000e+00, 2.549307065111150e+00, 2.755405214619447e+00, 0.000000000000000e+00, 2.418955322315147e+00, 3.079054087698465e-02, 0.000000000000000e+00, 2.788293394427501e-02, 6.288631284196595e+00, 0.000000000000000e+00, 6.035296962706513e+00, 2.510833269645201e+00, 0.000000000000000e+00, 1.626120712905740e+01, 2.510833269645200e+00, 0.000000000000000e+00, 1.626120712905740e+01, 7.027225571371322e+04, 0.000000000000000e+00, 5.856688593214098e+04, 6.107291919356673e+04, 0.000000000000000e+00, 4.967907484320508e+04, 3.552399912250690e+02, 0.000000000000000e+00, 3.016560446116359e+02, 3.235066880902119e+05, 0.000000000000000e+00, 3.402326908284780e+05, 9.898051322621963e+04, 0.000000000000000e+00, 5.371167945798205e+05, 9.898051322621963e+04, 0.000000000000000e+00, 5.371167945798200e+05, 9.916409713746264e-05, 0.000000000000000e+00, 9.923539214075439e-05, 9.910856222839105e-05, 0.000000000000000e+00, 9.918169781180316e-05, 9.916071411639039e-05, 0.000000000000000e+00, 9.923333395878184e-05, 9.911306490014697e-05, 0.000000000000000e+00, 9.918455754416394e-05, 9.913587584026412e-05, 0.000000000000000e+00, 9.920845733205198e-05, 9.913587584026412e-05, 0.000000000000000e+00, 9.920845733205198e-05, 1.867794190272495e-03, 0.000000000000000e+00, 1.868077365403937e-03, 1.827125224583638e-03, 0.000000000000000e+00, 1.828617744012937e-03, 1.902859442706663e-03, 0.000000000000000e+00, 1.893019991911763e-03, 1.866743452258686e-03, 0.000000000000000e+00, 1.856689115772201e-03, 1.819619128206877e-03, 0.000000000000000e+00, 1.843736369975597e-03, 1.819619128206877e-03, 0.000000000000000e+00, 1.843736369975597e-03, 6.904617237699862e-02, 0.000000000000000e+00, 6.959748788580873e-02, 5.410619559824957e-02, 0.000000000000000e+00, 5.403257305262276e-02, 9.250574436068013e-02, 0.000000000000000e+00, 8.300978993081129e-02, 8.191067848015521e-02, 0.000000000000000e+00, 7.425980209199573e-02, 6.137603746458185e-02, 0.000000000000000e+00, 7.154888608069729e-02, 6.137603746458187e-02, 0.000000000000000e+00, 7.154888608069730e-02, 1.867025002344823e+01, 0.000000000000000e+00, 1.814615164493268e+01, 2.703017172811138e+00, 0.000000000000000e+00, 2.662948993735825e+00, 2.522041579684610e+01, 0.000000000000000e+00, 2.155577290984025e+01, 1.977993278662029e-03, 0.000000000000000e+00, 1.980661619139015e-03, 1.246260597529784e+01, 0.000000000000000e+00, 1.048353571668046e+01, 1.246260597529784e+01, 0.000000000000000e+00, 1.048353571668046e+01, 7.662495719078551e+05, 0.000000000000000e+00, 6.826841573576158e+05, 3.631779455935361e+05, 0.000000000000000e+00, 3.471746546494347e+05, 8.685799837610016e+05, 0.000000000000000e+00, 7.312712612376022e+05, 7.710760470579324e+01, 0.000000000000000e+00, 7.570258413848872e+01, 8.152459899425575e+05, 0.000000000000000e+00, 3.147553654306367e+05, 8.152459899425574e+05, 0.000000000000000e+00, 3.147553654306368e+05, 6.871839602795697e-02, 0.000000000000000e+00, 6.792759034498430e-02, 6.991874374233772e-02, 0.000000000000000e+00, 6.910607921662720e-02, 6.949448824251696e-02, 0.000000000000000e+00, 6.868703719847435e-02, 6.914402586669238e-02, 0.000000000000000e+00, 6.834793788717498e-02, 6.931911119514274e-02, 0.000000000000000e+00, 6.851743287934703e-02, 6.931911119514274e-02, 0.000000000000000e+00, 6.851743287934703e-02, 7.456101243037967e-02, 0.000000000000000e+00, 7.382644491029720e-02, 1.180511616214042e-01, 0.000000000000000e+00, 1.165300556872589e-01, 1.028254017897387e-01, 0.000000000000000e+00, 1.014684543430236e-01, 9.006643897809856e-02, 0.000000000000000e+00, 8.912297811399265e-02, 9.626312684971271e-02, 0.000000000000000e+00, 9.519827969193488e-02, 9.626312684971271e-02, 0.000000000000000e+00, 9.519827969193488e-02, 4.704042806053946e-02, 0.000000000000000e+00, 4.681121554844254e-02, 1.341865756507527e+00, 0.000000000000000e+00, 1.318824467418282e+00, 7.796665010864935e-01, 0.000000000000000e+00, 7.566704475923509e-01, 3.360428707916751e-01, 0.000000000000000e+00, 3.305297647503894e-01, 5.064526436761555e-01, 0.000000000000000e+00, 5.069890000954176e-01, 5.064526436761559e-01, 0.000000000000000e+00, 5.069890000954179e-01, 1.518686757124336e-01, 0.000000000000000e+00, 1.487740376946141e-01, 3.759442628726044e+02, 0.000000000000000e+00, 3.683317558342101e+02, 1.544636404285683e+02, 0.000000000000000e+00, 1.399350496871407e+02, 3.805360203013644e-01, 0.000000000000000e+00, 3.638277421945885e-01, 4.028563737471829e+01, 0.000000000000000e+00, 3.422057422895514e+01, 4.028563737471829e+01, 0.000000000000000e+00, 3.422057422895514e+01, 2.400891817221131e+04, 0.000000000000000e+00, 2.157612357100870e+04, 1.865027159382298e+07, 0.000000000000000e+00, 1.852297451187268e+07, 2.213808763986618e+06, 0.000000000000000e+00, 1.840046208959619e+06, 4.580518794597280e+01, 0.000000000000000e+00, 4.362950707974350e+01, 9.592826165627908e+05, 0.000000000000000e+00, 4.087624134027614e+05, 9.592826165627930e+05, 0.000000000000000e+00, 4.087624134027626e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_gea2_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_gea2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [1.666666666666666e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666668e-01, 1.666666666666668e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666668e-01, 1.666666666666667e-01, 1.666666666666668e-01, 1.666666666666668e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666668e-01, 1.666666666666668e-01, 1.666666666666668e-01, 1.666666666666667e-01, 1.666666666666668e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666668e-01, 1.666666666666667e-01, 1.666666666666668e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666668e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666666e-01, 1.666666666666666e-01, 1.666666666666666e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666666e-01, 1.666666666666666e-01, 1.666666666666666e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666668e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666669e-01, 1.666666666666668e-01, 1.666666666666667e-01, 1.666666666666668e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666668e-01, 1.666666666666667e-01, 1.666666666666669e-01, 1.666666666666667e-01, 1.666666666666668e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666665e-01, 1.666666666666666e-01, 1.666666666666665e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666668e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666668e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666666e-01, 1.666666666666666e-01, 1.666666666666666e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666668e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666668e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666668e-01, 1.666666666666667e-01, 1.666666666666664e-01, 1.666666666666665e-01, 1.666666666666666e-01, 1.666666666666668e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666668e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666668e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_gea2_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_gea2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
