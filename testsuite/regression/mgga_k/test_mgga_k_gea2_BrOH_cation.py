
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_k_gea2_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_gea2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.436787982279863e-06, 0.000000000000000e+00, 1.436793532792833e-06, 1.436774056774607e-06, 0.000000000000000e+00, 1.436783416308430e-06, 1.436726759413062e-06, 0.000000000000000e+00, 1.436716412155617e-06, 1.436884097927220e-06, 0.000000000000000e+00, 1.436916933690333e-06, 1.436779815572765e-06, 0.000000000000000e+00, 1.436834753058636e-06, 1.436779815572765e-06, 0.000000000000000e+00, 1.436834753058636e-06, 3.329295581905193e-04, 0.000000000000000e+00, 3.329431861014300e-04, 3.329264355942279e-04, 0.000000000000000e+00, 3.329419971393632e-04, 3.328702036709985e-04, 0.000000000000000e+00, 3.328496458258889e-04, 3.328064751120480e-04, 0.000000000000000e+00, 3.327924632886009e-04, 3.330966275419693e-04, 0.000000000000000e+00, 3.327230048830593e-04, 3.330966275419693e-04, 0.000000000000000e+00, 3.327230048830593e-04, 4.667461145221172e-02, 0.000000000000000e+00, 4.612395146325177e-02, 4.689321097635706e-02, 0.000000000000000e+00, 4.621463633112638e-02, 4.994882394901864e-02, 0.000000000000000e+00, 5.099549189915795e-02, 4.939092349845109e-02, 0.000000000000000e+00, 4.907131443530165e-02, 4.507879902990570e-02, 0.000000000000000e+00, 5.485833637143308e-02, 4.507879902990570e-02, 0.000000000000000e+00, 5.485833637143308e-02, 2.858523217342664e+00, 0.000000000000000e+00, 2.549307065111150e+00, 2.755405214619447e+00, 0.000000000000000e+00, 2.418955322315147e+00, 3.079054087698465e-02, 0.000000000000000e+00, 2.788293394427501e-02, 6.288631284196595e+00, 0.000000000000000e+00, 6.035296962706513e+00, 2.510833269645201e+00, 0.000000000000000e+00, 1.626120712905740e+01, 2.510833269645200e+00, 0.000000000000000e+00, 1.626120712905740e+01, 7.027225571371322e+04, 0.000000000000000e+00, 5.856688593214098e+04, 6.107291919356673e+04, 0.000000000000000e+00, 4.967907484320508e+04, 3.552399912250690e+02, 0.000000000000000e+00, 3.016560446116359e+02, 3.235066880902119e+05, 0.000000000000000e+00, 3.402326908284780e+05, 9.898051322621963e+04, 0.000000000000000e+00, 5.371167945798205e+05, 9.898051322621963e+04, 0.000000000000000e+00, 5.371167945798200e+05, 9.916409713746264e-05, 0.000000000000000e+00, 9.923539214075439e-05, 9.910856222839105e-05, 0.000000000000000e+00, 9.918169781180316e-05, 9.916071411639039e-05, 0.000000000000000e+00, 9.923333395878184e-05, 9.911306490014697e-05, 0.000000000000000e+00, 9.918455754416394e-05, 9.913587584026412e-05, 0.000000000000000e+00, 9.920845733205198e-05, 9.913587584026412e-05, 0.000000000000000e+00, 9.920845733205198e-05, 1.867794190272495e-03, 0.000000000000000e+00, 1.868077365403937e-03, 1.827125224583638e-03, 0.000000000000000e+00, 1.828617744012937e-03, 1.902859442706663e-03, 0.000000000000000e+00, 1.893019991911763e-03, 1.866743452258686e-03, 0.000000000000000e+00, 1.856689115772201e-03, 1.819619128206877e-03, 0.000000000000000e+00, 1.843736369975597e-03, 1.819619128206877e-03, 0.000000000000000e+00, 1.843736369975597e-03, 6.904617237699862e-02, 0.000000000000000e+00, 6.959748788580873e-02, 5.410619559824957e-02, 0.000000000000000e+00, 5.403257305262276e-02, 9.250574436068013e-02, 0.000000000000000e+00, 8.300978993081129e-02, 8.191067848015521e-02, 0.000000000000000e+00, 7.425980209199573e-02, 6.137603746458185e-02, 0.000000000000000e+00, 7.154888608069729e-02, 6.137603746458187e-02, 0.000000000000000e+00, 7.154888608069730e-02, 1.867025002344823e+01, 0.000000000000000e+00, 1.814615164493268e+01, 2.703017172811138e+00, 0.000000000000000e+00, 2.662948993735825e+00, 2.522041579684610e+01, 0.000000000000000e+00, 2.155577290984025e+01, 1.977993278662029e-03, 0.000000000000000e+00, 1.980661619139015e-03, 1.246260597529784e+01, 0.000000000000000e+00, 1.048353571668046e+01, 1.246260597529784e+01, 0.000000000000000e+00, 1.048353571668046e+01, 7.662495719078551e+05, 0.000000000000000e+00, 6.826841573576158e+05, 3.631779455935361e+05, 0.000000000000000e+00, 3.471746546494347e+05, 8.685799837610016e+05, 0.000000000000000e+00, 7.312712612376022e+05, 7.710760470579324e+01, 0.000000000000000e+00, 7.570258413848872e+01, 8.152459899425575e+05, 0.000000000000000e+00, 3.147553654306367e+05, 8.152459899425574e+05, 0.000000000000000e+00, 3.147553654306368e+05, 6.871839602795697e-02, 0.000000000000000e+00, 6.792759034498430e-02, 6.991874374233772e-02, 0.000000000000000e+00, 6.910607921662720e-02, 6.949448824251696e-02, 0.000000000000000e+00, 6.868703719847435e-02, 6.914402586669238e-02, 0.000000000000000e+00, 6.834793788717498e-02, 6.931911119514274e-02, 0.000000000000000e+00, 6.851743287934703e-02, 6.931911119514274e-02, 0.000000000000000e+00, 6.851743287934703e-02, 7.456101243037967e-02, 0.000000000000000e+00, 7.382644491029720e-02, 1.180511616214042e-01, 0.000000000000000e+00, 1.165300556872589e-01, 1.028254017897387e-01, 0.000000000000000e+00, 1.014684543430236e-01, 9.006643897809856e-02, 0.000000000000000e+00, 8.912297811399265e-02, 9.626312684971271e-02, 0.000000000000000e+00, 9.519827969193488e-02, 9.626312684971271e-02, 0.000000000000000e+00, 9.519827969193488e-02, 4.704042806053946e-02, 0.000000000000000e+00, 4.681121554844254e-02, 1.341865756507527e+00, 0.000000000000000e+00, 1.318824467418282e+00, 7.796665010864935e-01, 0.000000000000000e+00, 7.566704475923509e-01, 3.360428707916751e-01, 0.000000000000000e+00, 3.305297647503894e-01, 5.064526436761555e-01, 0.000000000000000e+00, 5.069890000954176e-01, 5.064526436761559e-01, 0.000000000000000e+00, 5.069890000954179e-01, 1.518686757124336e-01, 0.000000000000000e+00, 1.487740376946141e-01, 3.759442628726044e+02, 0.000000000000000e+00, 3.683317558342101e+02, 1.544636404285683e+02, 0.000000000000000e+00, 1.399350496871407e+02, 3.805360203013644e-01, 0.000000000000000e+00, 3.638277421945885e-01, 4.028563737471829e+01, 0.000000000000000e+00, 3.422057422895514e+01, 4.028563737471829e+01, 0.000000000000000e+00, 3.422057422895514e+01, 2.400891817221131e+04, 0.000000000000000e+00, 2.157612357100870e+04, 1.865027159382298e+07, 0.000000000000000e+00, 1.852297451187268e+07, 2.213808763986618e+06, 0.000000000000000e+00, 1.840046208959619e+06, 4.580518794597280e+01, 0.000000000000000e+00, 4.362950707974350e+01, 9.592826165627908e+05, 0.000000000000000e+00, 4.087624134027614e+05, 9.592826165627930e+05, 0.000000000000000e+00, 4.087624134027626e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_gea2_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_gea2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [1.666666666666666e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666668e-01, 1.666666666666668e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666668e-01, 1.666666666666667e-01, 1.666666666666668e-01, 1.666666666666668e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666668e-01, 1.666666666666668e-01, 1.666666666666668e-01, 1.666666666666667e-01, 1.666666666666668e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666668e-01, 1.666666666666667e-01, 1.666666666666668e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666668e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666666e-01, 1.666666666666666e-01, 1.666666666666666e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666666e-01, 1.666666666666666e-01, 1.666666666666666e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666668e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666669e-01, 1.666666666666668e-01, 1.666666666666667e-01, 1.666666666666668e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666668e-01, 1.666666666666667e-01, 1.666666666666669e-01, 1.666666666666667e-01, 1.666666666666668e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666665e-01, 1.666666666666666e-01, 1.666666666666665e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666668e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666668e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666666e-01, 1.666666666666666e-01, 1.666666666666666e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666668e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666668e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666668e-01, 1.666666666666667e-01, 1.666666666666664e-01, 1.666666666666665e-01, 1.666666666666666e-01, 1.666666666666668e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666668e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666668e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_gea2_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_gea2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
