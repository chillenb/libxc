
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_k_gea2_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_gea2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([5.018846152046433e+02, 5.018691622765222e+02, 5.018257171523874e+02, 5.020541020744240e+02, 5.019308827916826e+02, 5.019308827916826e+02, 8.338550291704396e+01, 8.337109506212141e+01, 8.299584849811325e+01, 8.318176980212949e+01, 8.313945549299692e+01, 8.313945549299692e+01, 5.902597921374561e+00, 5.925062997209745e+00, 6.496949190596034e+00, 6.226325773872906e+00, 6.289561598130843e+00, 6.289561598130843e+00, 7.170275143593560e-01, 6.980276669965186e-01, 1.225773006441606e+01, 9.864324843287396e-01, 8.391241254116930e-01, 8.391241254116931e-01, 8.619337891616599e-01, 8.452007149960010e-01, 1.092901508082865e+00, 9.647926139436970e-01, 8.586993307281973e-01, 8.586993307281970e-01, 1.163305962958880e+03, 4.607481897939805e+02, -6.649431264627912e+03, 2.337948030882008e+03, -1.430036296635633e+02, 2.080496678789303e+02, -3.318979047840191e+03, 6.801231060363961e+01, 4.156777000458391e+01, 4.104147181037560e+01, 4.073001646416308e+01, 2.725032408088983e+01, 3.558983510443561e+01, 1.258187465649583e+01, 2.926703027113372e+01, 2.176475947782149e+00, 2.539337432100533e+00, 3.319566289104265e+00, -2.139973787972850e+00, 5.553615614797249e+00, -1.734981362757890e+01, 2.530618094381838e+01, 6.935284066709753e-01, 4.715445854884572e-01, 5.149997896707569e+00, 5.059973746758540e+03, -1.792962988237422e+03, -2.242747825078256e+00, 1.360774814615487e+00, -5.927847621613626e+01, 2.109340682685623e+05, -8.510181864128361e+04, -1.474976611516071e+06, 1.889720158693735e+03, -2.724050649812416e+04, 2.669751752197311e+06, -7.885465655048853e+05, 1.749883069336347e+00, 1.890565863768249e+01, -2.167505435510755e+00, 2.558771808686829e+00, 4.630067130532125e+01, 4.752590440124793e+01, -5.685918854441834e+01, -1.048104296504327e+02, -1.216834636250865e+01, 2.510438765626136e+00, 1.699582296977030e+00, 1.803678563711039e+00, -1.332992337835088e+00, 1.272564158052444e+00, 9.195041304170551e-01, -7.706481708396502e+00, 6.423525730953629e-01, -2.281760764826245e+01, -1.630677255117524e+00, -2.495288384243333e+01, -6.204910017479491e-02, -9.638115427320287e+00, -1.825221351362767e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_k_gea2_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_gea2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([3.340695604223617e+03, 3.340687292489045e+03, 3.340720849789053e+03, 3.340705630378501e+03, 3.340800981540523e+03, 3.340820630866541e+03, 3.340515893290354e+03, 3.340457256603754e+03, 3.340710693232944e+03, 3.340602039831774e+03, 3.340710693232944e+03, 3.340602039831774e+03, 8.746901638494191e+01, 8.747170079892045e+01, 8.747019852041537e+01, 8.747286659872006e+01, 8.749870330140980e+01, 8.750719259417595e+01, 8.747751330533175e+01, 8.748555594068132e+01, 8.743776719781478e+01, 8.751418738453081e+01, 8.743776719781478e+01, 8.751418738453081e+01, 3.136173329908092e+00, 3.174383174583708e+00, 3.121833828591176e+00, 3.168707489947442e+00, 2.930970147640966e+00, 2.865617035952471e+00, 2.940613671681932e+00, 2.961798297591084e+00, 3.242742992261856e+00, 2.597030847296129e+00, 3.242742992261856e+00, 2.597030847296129e+00, 1.486849661289604e-01, 1.680131432891442e-01, 1.566396613323928e-01, 1.790161040040532e-01, 4.147763104386706e+00, 4.499124298462974e+00, 4.408321997606465e-02, 4.690764856755197e-02, 1.642172262152327e-01, -1.890408981171197e-02, 1.642172262152328e-01, -1.890408981171175e-02, -8.059404309904447e-02, -8.095601468449699e-02, -7.847056877692972e-02, -7.861430121252504e-02, -9.364623061646371e-02, -9.194660150290218e-02, -8.445825116012119e-02, -8.563463355505362e-02, -8.073587105702273e-02, -5.077295248212522e-02, -8.073587105702250e-02, -5.077295248212544e-02, 2.002720020765978e+02, 2.001745464648464e+02, 2.003842707736226e+02, 2.002829790906942e+02, 2.002784742555941e+02, 2.001784404947140e+02, 2.003748060381426e+02, 2.002769454011041e+02, 2.003293345887515e+02, 2.002289849913730e+02, 2.003293345887516e+02, 2.002289849913730e+02, 2.591707901675597e+01, 2.591426797622832e+01, 2.637153964752541e+01, 2.635551195897577e+01, 2.540771562999582e+01, 2.555273851671208e+01, 2.579972389197236e+01, 2.594863648427916e+01, 2.654843610280693e+01, 2.619807607928442e+01, 2.654843610280692e+01, 2.619807607928442e+01, 2.511961641559675e+00, 2.498950439556877e+00, 3.037350766590898e+00, 3.041006988663282e+00, 2.051572969683494e+00, 2.214002476010930e+00, 2.296020220699453e+00, 2.450176569379046e+00, 2.730413053534675e+00, 2.461222062900511e+00, 2.730413053534676e+00, 2.461222062900514e+00, -4.083058920970297e-02, -3.814016224870151e-02, 1.154084545466820e-01, 1.176230775060950e-01, -4.913138396081068e-02, -4.311932375691555e-02, 2.759427928822242e+01, 2.756991065711439e+01, -8.583891116869236e-03, 1.552749331255297e-02, -8.583891116869304e-03, 1.552749331255297e-02, -7.132009691837723e-02, -7.665975820094145e-02, -7.681624621648110e-02, -7.994547121415736e-02, -3.216876540983220e-02, -3.048803149385015e-02, -6.498368344338788e-02, -6.641768841804715e-02, -4.564314655543317e-02, -4.599145277494066e-02, -4.564314655544801e-02, -4.599145277494137e-02, 2.607206957454695e+00, 2.627668468922810e+00, 2.561513859463638e+00, 2.582043674842176e+00, 2.577512795135583e+00, 2.598117930793813e+00, 2.590874612874706e+00, 2.611264530469880e+00, 2.584188892438194e+00, 2.604682239081532e+00, 2.584188894821916e+00, 2.604682240820060e+00, 2.473681639619111e+00, 2.490098677898773e+00, 1.696059163314801e+00, 1.712518970002997e+00, 1.908172513866167e+00, 1.926835533285502e+00, 2.129398450632241e+00, 2.144892076424506e+00, 2.016746052675513e+00, 2.032349079989890e+00, 2.016746052675506e+00, 2.032349079989908e+00, 3.330802288922527e+00, 3.343196864606572e+00, 2.423569548097290e-01, 2.468264181962009e-01, 4.080135293989295e-01, 4.200914952891335e-01, 8.336264669338159e-01, 8.437212685296971e-01, 5.986934856907222e-01, 5.990500998375016e-01, 5.986934856907218e-01, 5.990500998374997e-01, 1.430207247478122e+00, 1.452831140262040e+00, -9.892165524663504e-02, -9.869534644902568e-02, -9.027678949033746e-02, -8.765255771995395e-02, 7.862473931604315e-01, 8.122677825069561e-01, -4.708078943808752e-02, -3.371600079098296e-02, -4.708078943808350e-02, -3.371600079097698e-02, -9.019901750295693e-02, -8.921031422044373e-02, -4.069268534426841e-02, -3.057263417538239e-02, -5.177238008677763e-02, -5.017191606593485e-02, -4.605001599397234e-02, -4.548326643349641e-02, -3.177374286598222e-02, -4.515784068875456e-02, -3.177374286599538e-02, -4.515784068874458e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_gea2_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_gea2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.436787982279863e-06, 0.000000000000000e+00, 1.436793532792833e-06, 1.436774056774607e-06, 0.000000000000000e+00, 1.436783416308430e-06, 1.436726759413062e-06, 0.000000000000000e+00, 1.436716412155617e-06, 1.436884097927220e-06, 0.000000000000000e+00, 1.436916933690333e-06, 1.436779815572765e-06, 0.000000000000000e+00, 1.436834753058636e-06, 1.436779815572765e-06, 0.000000000000000e+00, 1.436834753058636e-06, 3.329295581905193e-04, 0.000000000000000e+00, 3.329431861014300e-04, 3.329264355942279e-04, 0.000000000000000e+00, 3.329419971393632e-04, 3.328702036709985e-04, 0.000000000000000e+00, 3.328496458258889e-04, 3.328064751120480e-04, 0.000000000000000e+00, 3.327924632886009e-04, 3.330966275419693e-04, 0.000000000000000e+00, 3.327230048830593e-04, 3.330966275419693e-04, 0.000000000000000e+00, 3.327230048830593e-04, 4.667461145221172e-02, 0.000000000000000e+00, 4.612395146325177e-02, 4.689321097635706e-02, 0.000000000000000e+00, 4.621463633112638e-02, 4.994882394901864e-02, 0.000000000000000e+00, 5.099549189915795e-02, 4.939092349845109e-02, 0.000000000000000e+00, 4.907131443530165e-02, 4.507879902990570e-02, 0.000000000000000e+00, 5.485833637143308e-02, 4.507879902990570e-02, 0.000000000000000e+00, 5.485833637143308e-02, 2.858523217342664e+00, 0.000000000000000e+00, 2.549307065111150e+00, 2.755405214619447e+00, 0.000000000000000e+00, 2.418955322315147e+00, 3.079054087698465e-02, 0.000000000000000e+00, 2.788293394427501e-02, 6.288631284196595e+00, 0.000000000000000e+00, 6.035296962706513e+00, 2.510833269645201e+00, 0.000000000000000e+00, 1.626120712905740e+01, 2.510833269645200e+00, 0.000000000000000e+00, 1.626120712905740e+01, 7.027225571371322e+04, 0.000000000000000e+00, 5.856688593214098e+04, 6.107291919356673e+04, 0.000000000000000e+00, 4.967907484320508e+04, 3.552399912250690e+02, 0.000000000000000e+00, 3.016560446116359e+02, 3.235066880902119e+05, 0.000000000000000e+00, 3.402326908284780e+05, 9.898051322621963e+04, 0.000000000000000e+00, 5.371167945798205e+05, 9.898051322621963e+04, 0.000000000000000e+00, 5.371167945798200e+05, 9.916409713746264e-05, 0.000000000000000e+00, 9.923539214075439e-05, 9.910856222839105e-05, 0.000000000000000e+00, 9.918169781180316e-05, 9.916071411639039e-05, 0.000000000000000e+00, 9.923333395878184e-05, 9.911306490014697e-05, 0.000000000000000e+00, 9.918455754416394e-05, 9.913587584026412e-05, 0.000000000000000e+00, 9.920845733205198e-05, 9.913587584026412e-05, 0.000000000000000e+00, 9.920845733205198e-05, 1.867794190272495e-03, 0.000000000000000e+00, 1.868077365403937e-03, 1.827125224583638e-03, 0.000000000000000e+00, 1.828617744012937e-03, 1.902859442706663e-03, 0.000000000000000e+00, 1.893019991911763e-03, 1.866743452258686e-03, 0.000000000000000e+00, 1.856689115772201e-03, 1.819619128206877e-03, 0.000000000000000e+00, 1.843736369975597e-03, 1.819619128206877e-03, 0.000000000000000e+00, 1.843736369975597e-03, 6.904617237699862e-02, 0.000000000000000e+00, 6.959748788580873e-02, 5.410619559824957e-02, 0.000000000000000e+00, 5.403257305262276e-02, 9.250574436068013e-02, 0.000000000000000e+00, 8.300978993081129e-02, 8.191067848015521e-02, 0.000000000000000e+00, 7.425980209199573e-02, 6.137603746458185e-02, 0.000000000000000e+00, 7.154888608069729e-02, 6.137603746458187e-02, 0.000000000000000e+00, 7.154888608069730e-02, 1.867025002344823e+01, 0.000000000000000e+00, 1.814615164493268e+01, 2.703017172811138e+00, 0.000000000000000e+00, 2.662948993735825e+00, 2.522041579684610e+01, 0.000000000000000e+00, 2.155577290984025e+01, 1.977993278662029e-03, 0.000000000000000e+00, 1.980661619139015e-03, 1.246260597529784e+01, 0.000000000000000e+00, 1.048353571668046e+01, 1.246260597529784e+01, 0.000000000000000e+00, 1.048353571668046e+01, 7.662495719078551e+05, 0.000000000000000e+00, 6.826841573576158e+05, 3.631779455935361e+05, 0.000000000000000e+00, 3.471746546494347e+05, 8.685799837610016e+05, 0.000000000000000e+00, 7.312712612376022e+05, 7.710760470579324e+01, 0.000000000000000e+00, 7.570258413848872e+01, 8.152459899425575e+05, 0.000000000000000e+00, 3.147553654306367e+05, 8.152459899425574e+05, 0.000000000000000e+00, 3.147553654306368e+05, 6.871839602795697e-02, 0.000000000000000e+00, 6.792759034498430e-02, 6.991874374233772e-02, 0.000000000000000e+00, 6.910607921662720e-02, 6.949448824251696e-02, 0.000000000000000e+00, 6.868703719847435e-02, 6.914402586669238e-02, 0.000000000000000e+00, 6.834793788717498e-02, 6.931911119514274e-02, 0.000000000000000e+00, 6.851743287934703e-02, 6.931911119514274e-02, 0.000000000000000e+00, 6.851743287934703e-02, 7.456101243037967e-02, 0.000000000000000e+00, 7.382644491029720e-02, 1.180511616214042e-01, 0.000000000000000e+00, 1.165300556872589e-01, 1.028254017897387e-01, 0.000000000000000e+00, 1.014684543430236e-01, 9.006643897809856e-02, 0.000000000000000e+00, 8.912297811399265e-02, 9.626312684971271e-02, 0.000000000000000e+00, 9.519827969193488e-02, 9.626312684971271e-02, 0.000000000000000e+00, 9.519827969193488e-02, 4.704042806053946e-02, 0.000000000000000e+00, 4.681121554844254e-02, 1.341865756507527e+00, 0.000000000000000e+00, 1.318824467418282e+00, 7.796665010864935e-01, 0.000000000000000e+00, 7.566704475923509e-01, 3.360428707916751e-01, 0.000000000000000e+00, 3.305297647503894e-01, 5.064526436761555e-01, 0.000000000000000e+00, 5.069890000954176e-01, 5.064526436761559e-01, 0.000000000000000e+00, 5.069890000954179e-01, 1.518686757124336e-01, 0.000000000000000e+00, 1.487740376946141e-01, 3.759442628726044e+02, 0.000000000000000e+00, 3.683317558342101e+02, 1.544636404285683e+02, 0.000000000000000e+00, 1.399350496871407e+02, 3.805360203013644e-01, 0.000000000000000e+00, 3.638277421945885e-01, 4.028563737471829e+01, 0.000000000000000e+00, 3.422057422895514e+01, 4.028563737471829e+01, 0.000000000000000e+00, 3.422057422895514e+01, 2.400891817221131e+04, 0.000000000000000e+00, 2.157612357100870e+04, 1.865027159382298e+07, 0.000000000000000e+00, 1.852297451187268e+07, 2.213808763986618e+06, 0.000000000000000e+00, 1.840046208959619e+06, 4.580518794597280e+01, 0.000000000000000e+00, 4.362950707974350e+01, 9.592826165627908e+05, 0.000000000000000e+00, 4.087624134027614e+05, 9.592826165627930e+05, 0.000000000000000e+00, 4.087624134027626e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_gea2_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_gea2", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([1.666666666666666e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666668e-01, 1.666666666666668e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666668e-01, 1.666666666666667e-01, 1.666666666666668e-01, 1.666666666666668e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666668e-01, 1.666666666666668e-01, 1.666666666666668e-01, 1.666666666666667e-01, 1.666666666666668e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666668e-01, 1.666666666666667e-01, 1.666666666666668e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666668e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666666e-01, 1.666666666666666e-01, 1.666666666666666e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666666e-01, 1.666666666666666e-01, 1.666666666666666e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666668e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666669e-01, 1.666666666666668e-01, 1.666666666666667e-01, 1.666666666666668e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666668e-01, 1.666666666666667e-01, 1.666666666666669e-01, 1.666666666666667e-01, 1.666666666666668e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666665e-01, 1.666666666666666e-01, 1.666666666666665e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666668e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666668e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666666e-01, 1.666666666666666e-01, 1.666666666666666e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666668e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666668e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666668e-01, 1.666666666666667e-01, 1.666666666666664e-01, 1.666666666666665e-01, 1.666666666666666e-01, 1.666666666666668e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666668e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666668e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
