
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_k_csk4_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.174556074032927e+03, 2.174563864369937e+03, 2.174610446148312e+03, 2.174482361036223e+03, 2.174560076020624e+03, 2.174560076020624e+03, 5.871907815416719e+01, 5.871867971098876e+01, 5.871258751376299e+01, "nan", 5.871937348988333e+01, 5.181366170830967e+158, 2.539115082034564e+00, 3.127163210582630e+247, 6.317117475825837e+160, 3.542966774554630e+213, 1.449211165307237e+160, 3.338611122176177e+213, 2.426664661759167e+98, 1.745579737919651e+215, 3.178021901897723e+00, 2.266959352016334e+230, 1.947316365402886e+215, 1.615865045015588e+244, 9.932124383602412e+173, 6.747160968894717e+204, 9.316309724994226e+226, 3.474763938672119e+234, 3.041611628292622e+275, 2.541877924632235e+185, 1.803786241054055e+171, 3.628852446099623e+244, 2.373172465009275e+206, 1.273919311307969e+02, 2.159612586794027e+225, 3.001332121895265e+177, 2.792185239430417e+01, 2.774290738190606e+01, 2.858095797085722e+01, 2.843142038026868e+01, 2.698162324451085e+01, 3.448861069320511e+159, 1.696412366884657e+180, 2.326219773300338e+218, 2.798258143781057e+180, 3.070762348049595e+218, 1.514990091094690e+180, 1.732768318952767e+00, 8.063655918462709e-01, 1.194253356703957e+201, 7.438203360051666e-01, 9.461308698134133e+66, 3.342414612704127e+162, 7.626171044449555e+249, 5.805997445000225e-01, 1.540178070712019e+167, 6.169419709177584e+282, 6.894857959685730e-01, 4.770740186761524e-01, 1.450587250346724e+167, 6.830644490704589e+237, 7.616168923459633e+226, 1.631035265615234e+00, 1.567065906859683e+209, 1.868625229398839e+164, 4.515532498415675e+242, 3.291394740449477e+228, 1.713999733762403e+161, 3.449023572287598e+228, 5.711222962981360e+199, 1.961142687737515e+246, 1.369026497333962e+00, 1.742034427970755e+247, 9.630067622026262e-01, 2.956198851660998e+224, 6.949633095945600e-01, 1.192724999519527e+176, 6.807969210733600e+198, 1.087816345957475e+00, 5.955521252940024e+255, 2.410738794842507e+255, 1.738357220445863e+253, 6.418915877472272e-01, 4.021362109906511e+253, 1.160136577980278e+256, 1.294296436082142e+265, 6.870258282628677e+50, 8.435842618046748e+182, 1.047977857974102e+230, 2.717920120094189e+257]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_k_csk4_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.340513684108789e+03, 3.340532650321213e+03, 3.340625231246209e+03, 3.340314494262583e+03, 3.340523619638398e+03, 3.340523619638398e+03, 8.740280259430385e+01, 8.740414889607491e+01, 8.744770070079755e+01, "nan", 8.740423990717262e+01, 2.943847398559341e+142, -2.115922244335990e-01, 1.099101048319773e+232, 8.299854120978226e+144, -6.408686171031664e+197, 5.197968278733903e+144, -1.176109242294122e+198, 8.648989779805343e+81, -7.508060182927921e+199, 3.869477414659619e+00, -3.108566705440070e+214, 6.270244727033256e+199, 1.672593200991521e+228, 5.645479309751429e+157, -1.325307271412593e+189, -1.949160291979774e+210, -1.751697593574262e+218, -6.386264671535064e+259, 3.978090296743076e+169, 6.909216933344034e+155, -3.171159607480551e+227, 6.916497524202567e+190, 2.001393922111266e+02, 5.835255817693752e+209, 5.812978139413726e+161, -2.099844362413702e+01, -2.010336443240809e+01, -2.246982667822925e+01, -2.182751884256402e+01, -1.828300558687812e+01, -2.463003996618649e+144, 1.773600485033962e+164, 5.267053627659431e+202, -4.610122701100891e+164, 6.703440998808902e+202, 5.235759740565976e+164, 2.657338512602186e+00, -8.063646880881826e-01, 2.663720699577967e+185, -7.438192388107765e-01, 4.722911523154184e+51, 1.437433329415714e+147, 3.338543103253939e+233, -5.806006803526613e-01, -1.361468961431250e+151, 1.887418146464597e+267, -6.894857812440397e-01, -4.770718504283510e-01, 4.640795179769941e+151, 1.967228473367239e+222, -3.122436800053677e+211, 2.674239074603077e+00, -8.900326303703339e+192, -4.187135965402024e+148, -1.257653464775094e+227, 7.862669550585454e+212, 3.023736339126594e+145, 9.404298600583375e+212, 2.338835974807258e+184, 1.542652750496364e+230, 2.096124393688024e+00, -3.733847458284233e+231, -9.604382267005993e-01, 6.376888163819135e+208, -1.444870798318531e-02, -3.901052248743033e+159, -2.099351260986807e+180, 5.003071372151806e-01, 2.303783204046766e+240, 2.181652063260440e+240, -5.667953976734618e+237, -6.418913084492150e-01, 1.258046769088962e+238, 3.032876596354003e+240, -8.067205242408658e+249, -5.889322896382203e+34, -6.393690746998066e+166, 3.787981578429515e+214, 5.334717242851125e+241]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_csk4_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [7.184506981373223e-07, 7.184454664175311e-07, 7.184182744201735e-07, 7.185040248364823e-07, 7.184479713063171e-07, 7.184479713063171e-07, 1.674464248729670e-04, 1.674400162376810e-04, 1.672529620572833e-04, "nan", 1.674409856768616e-04, 1.664885747428966e-04, 1.511321894951859e-01, 2.371089894750390e-02, 2.571085085416391e-02, 2.511302609544829e-02, 2.366452568393156e-02, 2.366452568393156e-02, 1.154549423168824e+00, 1.109632128882583e+00, 2.756881139893929e-02, 3.029699961466519e+00, 1.140825370931601e+00, 1.140825370931601e+00, 6.627170873969103e+03, 5.766654701545130e+03, 8.587779736257212e+01, 6.002474578053267e+04, 5.950761508640646e+03, 5.950761508640646e+03, 4.966481484388988e-05, 4.963832541585424e-05, 4.966201910325284e-05, 4.964142322732896e-05, 4.965134880217488e-05, 4.965134880217488e-05, 7.799221082001157e-03, 7.566931241182772e-03, 7.955386507818312e-03, 7.777846602870065e-03, 7.415590729656504e-03, 9.137290376552186e-04, 3.582056968717880e-02, 2.794751848419684e-02, 4.192477159677918e-02, 3.694740853876635e-02, 3.198975036394844e-02, 3.198975036404657e-02, 6.875367477928437e+01, 1.130085553678851e+00, 7.146660862065082e+01, 9.931433794022008e-04, 4.940810476441973e+00, 4.940810476441973e+00, 6.017469750517647e+05, 4.479387102161443e+04, 1.063885373940969e+05, 2.853120822164257e+02, 5.329460627684963e+05, 5.921636393025101e+04, 3.260261338661207e-02, 3.313039838056557e-02, 3.293989709270266e-02, 3.279392370300551e-02, 3.286687544179676e-02, 3.286687544179676e-02, 3.595445566521904e-02, 5.507454277017259e-02, 4.832473560024299e-02, 4.301658326993700e-02, 4.561842194817579e-02, 4.561842194959466e-02, 2.424595009836341e-02, 5.107731953110552e+00, 3.390414310804853e-01, 1.006703317552323e+00, 2.345187703252563e-01, 2.345187703252564e-01, 3.518448405686927e-01, 1.080934593603283e+02, 4.356798783086257e+01, 1.923693529952400e-01, 1.285807664979883e+02, 1.428675369803361e+01, 4.116746290816192e+03, 2.182732475721235e+06, 3.184120632844689e+05, 1.645353996032587e+01, 9.646901028340467e+04, 9.646901028340506e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_csk4_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [1.666666666666623e-01, 1.666666666666624e-01, 1.666666666666624e-01, 1.666666666666622e-01, 1.666666666666624e-01, 1.666666666666624e-01, 1.665471429477600e-01, 1.665478129548556e-01, 1.665650124316264e-01, "nan", 1.665474879513209e-01, 1.666666666666667e-01, 5.429951309215211e-02, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.456709810359817e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.411144008398306e-02, 1.569467319252454e-02, 1.214656966713316e-02, 1.320792210859699e-02, 1.842200513736375e-02, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666028e-01, 6.304381681024890e-08, 1.666666666666667e-01, 8.297322612526570e-08, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, -1.510255292118614e-07, 1.666666666666667e-01, 1.666666666666667e-01, 1.201341423299911e-09, 4.266148190549522e-07, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666660188e-01, 1.666666666666667e-01, 1.500323199516118e-04, 1.666666666666666e-01, 5.824416174963264e-02, 1.666666666666667e-01, 1.666666666666667e-01, 8.984642884263466e-02, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 2.447534399512770e-08, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666667e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_csk4_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
