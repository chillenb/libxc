
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_k_csk4_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([1.066829294026474e+03, 1.066811164306250e+03, 1.066767060354507e+03, 1.067062969464288e+03, 1.066819426431932e+03, 1.066819426431932e+03, 8.331364762589480e+01, 8.330104673378113e+01, 8.292836297814476e+01, 8.310471122656735e+01, 8.331060720034790e+01, 8.331060720034790e+01, 6.024516630709454e+00, 6.045337007246419e+00, 6.625748086928353e+00, 6.363119515422674e+00, 6.031293405136220e+00, 6.031293405136220e+00, 6.189675084707820e-01, 6.043694212713436e-01, 1.141028121411902e+01, 9.794427453910085e-01, 6.143674597939707e-01, 6.143674597939704e-01, 5.998133885046762e-01, 5.978275472233345e-01, 8.650725908214896e-01, 8.912804348154230e-01, 5.868496828172696e-01, 5.868496828172696e-01, 1.473028978191027e+03, 3.537926797348543e+02, 4.134740437659894e+01, 2.037154319421063e+03, 4.273537928588867e+01, 2.184055227158985e+02, 2.738672696712099e+01, 6.847911140769708e+01, 4.147950550253873e+01, 4.196233006906568e+01, 4.072047928106871e+01, 2.765399390320919e+01, 3.804193631949980e+01, 1.334409033837889e+01, 2.390038303457154e+01, 2.111720850612655e+00, 2.543062507417824e+00, 3.387447758524575e+00, 8.063655243506571e-01, 4.999943177008743e+00, 7.438202566724998e-01, 2.528042667242410e+01, 6.923805877895132e-01, 6.902096042215644e-01, 3.740221954089434e+00, 2.358370640837607e+03, 3.428169238900468e-01, 6.894857948937453e-01, 1.594118800745210e+00, 4.771834901704871e-01, 1.995744148231601e+05, 1.804145993216961e+00, 1.763494369882174e+00, 1.965293833085642e+03, 1.747744692694677e+00, 2.554930317553545e+06, 1.563370330697172e+00, 1.763905903235074e+00, 1.764158902044818e+01, 4.963186419269792e-01, 2.581011044439544e+00, 3.941801078051013e+01, 4.671116164132632e+01, 9.628139761986314e-01, 8.840645990245395e-01, 6.379359482392425e-01, 2.511156134747196e+00, 1.660131026842935e+00, 1.739700577876423e+00, 4.549680224326259e+00, 1.202853650909617e+00, 8.815882224414777e-01, 6.418915649222138e-01, 6.421557510533900e-01, 5.773594647084349e-01, 1.817918178214576e+01, 4.769205305788559e-01, 5.781333307094760e-01, 3.949213124192420e-01, 3.949213124192424e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_k_csk4_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([4.293417006778146e+01, 4.296840203664362e+01, 4.306541337211893e+01, 4.250377225272698e+01, 4.295269590281929e+01, 4.295269590281929e+01, 8.746152952431265e+01, 8.746253787743366e+01, 8.749743867029413e+01, 8.747435971358478e+01, 8.746279331068173e+01, 8.746279331068173e+01, 3.096415771298543e+00, 3.087019006893379e+00, 2.834983546710081e+00, 2.885264569153500e+00, 3.093003541797470e+00, 3.093003541797470e+00, 1.956242842511136e-01, 2.045055280864500e-01, 4.555460297355387e+00, 5.648681617323228e-02, 1.983316232902825e-01, 1.983316232902824e-01, -5.487843665018985e-02, -5.469618338569916e-02, -6.661484088022417e-02, -6.626142546197894e-02, -5.366638171982967e-02, -5.366638171982967e-02, 2.000452441837051e+02, 2.001520839798623e+02, -4.134738842211437e+01, 2.001393922111276e+02, -2.773310911916805e+01, 2.000998308469549e+02, -2.738672701019430e+01, 2.626527399135601e+01, 2.558609985152638e+01, 2.592456471890541e+01, 2.644147686151581e+01, -1.004483108353565e+01, 2.452361228665222e+00, 2.974641023065071e+00, 2.202341358446905e+00, 2.456691473376860e+00, 2.657338512602890e+00, 2.657338512602890e+00, -8.063655212807092e-01, 1.544923923327787e-01, -7.438202689950812e-01, 2.751850188428746e+01, -6.055648058530382e-01, -6.900304050238308e-01, -6.434322221880796e-02, -6.420459623945297e-02, -3.426198847830589e-01, -6.894857949315507e-01, -5.282625604538242e-02, -4.768922925434803e-01, 2.702103480116423e+00, 2.484608808951526e+00, 2.541779970336136e+00, 2.686250008046203e+00, 2.563904088646794e+00, 2.680238665482643e+00, 2.497762339467600e+00, 1.790240559388912e+00, 1.998388113148001e+00, -3.790559882987452e-01, 2.096124393693766e+00, 2.096124393693767e+00, 3.267345293716192e+00, -9.628139665593999e-01, -8.840645001154170e-01, -6.379353541827116e-01, 6.428487786096539e-01, 6.428487786096543e-01, 1.448848717608964e+00, -7.696580778215328e-02, -6.300362646055430e-02, 7.848744093006030e-01, -6.418915568753688e-01, -6.286038423065631e-01, -5.774611274918922e-01, -4.916684277996971e-02, -4.768256546630978e-01, -5.781331805757126e-01, -3.947109876404504e-01, -3.947109876404509e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_csk4_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([5.535816669251842e-06, 5.535761765940459e-06, 5.535515818302648e-06, 5.536417411866912e-06, 5.535787715140366e-06, 5.535787715140366e-06, 1.664912415598493e-04, 1.664901933197833e-04, 1.664408301245254e-04, 1.664200446771929e-04, 1.664885747428966e-04, 1.664885747428966e-04, 2.363795624356837e-02, 2.371089894750390e-02, 2.571085085416391e-02, 2.511302609544829e-02, 2.366452568393156e-02, 2.366452568393156e-02, 1.154549423168824e+00, 1.109632128882583e+00, 1.373090384864065e-02, 3.029699961466519e+00, 1.140825370931601e+00, 1.140825370931601e+00, 6.627170873969103e+03, 5.766654701545130e+03, 8.587779736257212e+01, 6.002474578053267e+04, 5.950761508640646e+03, 5.950761508640646e+03, 4.966481484388988e-05, 4.963832541585424e-05, 4.469581715249948e-04, 4.964142322732896e-05, 4.359903303365968e-04, 4.965134880217488e-05, 8.433970232064408e-03, 9.175757456847101e-04, 9.451609734595376e-04, 9.296949858735900e-04, 9.137290376552186e-04, 6.387347248261199e-03, 3.582056968717880e-02, 2.794751848419684e-02, 4.192477159677918e-02, 3.694740853876635e-02, 3.198975036394844e-02, 3.198975036394844e-02, 6.875369787037391e+01, 1.130085553678851e+00, 7.146664029419225e+01, 9.931433794022008e-04, 4.014241798509796e+01, 4.446184990853296e+01, 6.686072115148076e+04, 4.479387102161443e+04, 9.574968365468717e+05, 2.853120840514410e+02, 5.921636393025101e+04, 5.329472753722589e+05, 3.260261338661207e-02, 2.981735854250898e-01, 2.964590738343238e-01, 3.279392370300551e-02, 2.958018789761704e-01, 3.286687544179676e-02, 3.235901009869712e-01, 5.507454277017259e-02, 4.832473560024299e-02, 3.810002945676302e-01, 4.561842194817579e-02, 4.561842194817580e-02, 2.424595009836341e-02, 5.111822291311047e+00, 3.051372877479227e+00, 1.460335349391344e+00, 2.345187703252563e-01, 2.345187703252564e-01, 7.506229171454372e-02, 1.080934593603283e+02, 4.356798783086257e+01, 1.923693529952400e-01, 1.285807831762866e+02, 1.263561564361598e+02, 3.705129395911268e+04, 2.182732475721235e+06, 2.865708569560217e+06, 1.480818491483934e+02, 8.682210925506414e+05, 8.682210925506453e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_csk4_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([2.697469987602836e-02, 2.697512300570449e-02, 2.697617937790063e-02, 2.696919512362000e-02, 2.697493021322313e-02, 2.697493021322313e-02, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.695965608092328e-10, 1.666666666666667e-01, 4.561729416410652e-03, 1.666666666666667e-01, -4.742225170768934e-12, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 4.186630679894530e-02, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 7.150516475223146e-11, 1.666666666666667e-01, -1.255315327922694e-10, 1.666666666666667e-01, 1.823619628256082e-02, 2.295667326377857e-05, 1.666666666666667e-01, 1.666666666666667e-01, 0.000000000000000e+00, -4.584936372256475e-12, 1.666666666666667e-01, 0.000000000000000e+00, 1.666666666666666e-01, 0.000000000000000e+00, 0.000000000000000e+00, 1.666666666666667e-01, 0.000000000000000e+00, 1.666666666666667e-01, 0.000000000000000e+00, 1.666666666666667e-01, 1.666666666666667e-01, 2.977996310950098e-03, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 2.837912288200392e-11, 1.379588108424382e-10, 2.313332349959971e-09, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.545950837604403e-10, 3.244011453375012e-03, -2.921713564339249e-06, 1.666666666666667e-01, 0.000000000000000e+00, 1.328809707763511e-08, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
