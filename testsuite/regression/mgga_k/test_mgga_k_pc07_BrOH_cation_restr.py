
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_k_pc07_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_pc07", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([9.576367974801365e+02, 9.576137152017669e+02, 9.575583428865839e+02, 9.579007924317527e+02, 9.577146356803477e+02, 9.577146356803477e+02, 8.340004417906000e+01, 8.338564128026499e+01, 8.301059108374147e+01, 8.319683896893899e+01, 8.315429787125326e+01, 8.315429787125326e+01, 5.941846610903247e+00, 5.964688767694707e+00, 6.545678291310472e+00, 6.262188251803429e+00, 6.308758374104960e+00, 6.308758374104960e+00, 7.188432605016314e-01, 6.995369230700340e-01, 1.259792215476409e+01, 1.006361259513962e+00, 8.149103213016050e-01, 8.149103213016051e-01, 8.003348858061450e-01, 7.849108702406843e-01, 1.372949156013311e+00, 7.843312974065231e-01, 7.077682265117650e-01, 7.077682265117641e-01, 9.386678377393887e+02, 4.736896352310713e+02, 4.137020142314888e+01, 6.458044153197344e+02, 4.122190207527881e+01, 2.084582355966442e+02, 3.049178346209563e+01, 6.886272814338460e+01, 4.159585604865625e+01, 4.106919901403906e+01, 4.075356029605744e+01, 2.651392869738521e+01, 8.365269627687379e+00, 1.199029408659323e+01, 7.777171512580016e+00, 2.177709384669055e+00, 2.535015677325092e+00, 3.327392826337857e+00, 9.219337397706971e-01, 2.996953938552526e+00, 8.996643050506318e-01, 2.535819012105644e+01, 7.404162975527331e-01, 7.404162975527331e-01, 6.677713945399222e-01, 7.061901679219820e-01, 2.817490568006480e-01, 8.107085906494392e-01, 4.142542018201604e-01, 4.130053322692149e-01, 1.656243794244201e+00, 1.776502863853272e+00, 1.735010700805468e+00, 1.770101799966217e+00, 1.712318977540121e+00, 1.717307046475361e+00, 1.527104075595914e+00, 1.752651316779287e+00, 9.226164232600100e+00, 4.949091981250061e-01, 2.567522938608037e+00, 4.725182077777013e+00, 7.840969303456149e+00, 1.064541222388073e+00, 1.085178846875183e+00, 6.698639965281545e-01, 2.596683683064529e+00, 1.716345818893312e+00, 1.804253624529960e+00, 9.656265679940101e-01, 1.566542424127638e+00, 9.195948684769313e-01, 7.143488347941436e-01, 7.143488347941434e-01, 8.118648404256343e-01, 3.188777887564307e-01, 4.583026031529024e-01, 7.255536168961272e-01, 3.674669729849501e-01, 3.674669729849498e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_k_pc07_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_pc07", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-9.576367974801361e+02, -9.576137152017666e+02, -9.575583428865840e+02, -9.579007924317524e+02, -9.577146356803473e+02, -9.577146356803473e+02, 8.738705685690056e+01, 8.738807477580040e+01, 8.741487728025744e+01, 8.739077431486324e+01, 8.738751264755948e+01, 8.738751264755948e+01, 3.150317525249142e+00, 3.140625048642744e+00, 2.904959203209788e+00, 2.964998013675806e+00, 2.954995767561198e+00, 2.954995767561198e+00, 1.588376515909129e-01, 1.682058622014752e-01, 3.985302280354360e+00, 7.425245655114943e-02, 1.000136230639600e-01, 1.000136230639600e-01, -9.022124460901384e-01, -8.893785291243658e-01, -8.331576744231568e-02, -8.068303071908779e-01, -7.417550004301924e-01, -7.417550004301915e-01, 1.175582503323561e+03, 1.873391153745939e+02, -4.137020142314886e+01, 1.408315646343971e+03, -4.122190207527880e+01, 2.000811850832760e+02, -2.296802180495546e+01, 2.612664097227148e+01, 2.537488213193501e+01, 2.574363472186738e+01, 2.629939645934330e+01, -2.651392868469750e+01, 1.561865712596007e+01, 9.536909391838446e+00, 1.385503204288039e+01, 2.371231573692032e+00, 2.598892313326422e+00, 2.590181278273592e+00, -9.219337397706977e-01, 3.596843994843051e-01, -8.996643050506312e-01, 2.752290733537529e+01, -7.404162975527325e-01, -7.404162975527325e-01, -6.672988357568731e-01, -7.060494842341363e-01, -2.816675603947321e-01, -8.107085906494390e-01, -4.128644848716978e-01, -4.129122217386607e-01, 2.548466659731534e+00, 2.371022875492849e+00, 2.435538232796139e+00, 2.706735576526382e+00, 2.445318226343907e+00, 2.460778548465395e+00, 2.449666957465664e+00, 1.687636340010232e+00, 1.484350015348895e+01, -4.949091981250062e-01, 2.021018160045924e+00, 8.267097030388713e+00, 1.932125231595000e+01, -1.064541222388072e+00, -6.389693926223563e-01, -6.698639965281546e-01, 5.323515612090347e-01, 6.028481330067342e-01, 1.439556026010373e+00, -9.656265679940094e-01, -3.028465548781945e-01, 7.991856676496025e-01, -7.143488347941434e-01, -7.143488347941430e-01, -8.118648404256337e-01, -3.188777887564304e-01, -4.583025948899337e-01, -7.255536168961264e-01, -3.674669729849501e-01, -3.674669729849495e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_pc07_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_pc07", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([6.465558408889446e-06, 6.465504314368240e-06, 6.465247135945692e-06, 6.466052320295345e-06, 6.465632777057504e-06, 6.465632777057504e-06, 1.689890999281236e-04, 1.689948158378874e-04, 1.691524521798205e-04, 1.691903418675054e-04, 1.691745357730996e-04, 1.691745357730996e-04, 1.751171226566355e-02, 1.753704313224357e-02, 1.826679661414831e-02, 1.892488033159551e-02, 1.874316818981871e-02, 1.874316818981871e-02, 1.272682761119956e+00, 1.224013217794367e+00, 7.578308282211580e-03, 8.560082804085635e-01, 1.582005704983503e+00, 1.582005704983503e+00, 3.999231128606431e+05, 3.504224814490990e+05, -2.469827261751256e+02, 1.630694780819214e+06, 8.727688826200303e+05, 8.727688826200300e+05, 1.545707909962537e-03, 3.580637365626250e-05, 4.463865483604211e-04, 1.831622008728773e-03, 4.462746898771731e-04, 4.437954972226503e-05, 3.105437561475232e-03, 5.640004530595049e-04, 9.665732610763243e-04, 9.559297489319516e-04, 9.264471174539054e-04, 8.242192630228838e-03, 1.134161974287885e+00, 4.233917303959610e-01, 1.479193212793926e+00, 3.556746998580902e-02, 3.188663074678278e-02, 2.762022341368120e-02, 8.282011699658828e+01, 3.468670799440784e+01, 1.046004417152880e+02, 8.863028921410337e-04, 5.124476217261497e+01, 5.124476217261497e+01, 3.250866970864729e+06, 1.597482981588126e+06, 3.573146782475417e+06, 3.437938582102904e+02, 2.053728061997730e+06, 2.043663577840756e+06, 3.075580135565374e-01, 3.125089032687132e-01, 3.108813320835457e-01, 3.222329578761264e-01, 3.092301210185591e-01, 3.101308326710591e-01, 3.338320226141226e-01, 6.416519888231557e-02, 2.037430447569025e+00, 4.031650116453307e-01, 4.063904136364493e-02, 1.102803305873348e+00, 7.342839309651032e-01, 5.986104049931646e+00, 2.127833126799395e+00, 1.499685834607407e+00, 9.224827621710363e-02, 1.662106114045646e-01, 7.577965405433723e-02, 1.674445854271037e+03, 9.974077174144202e+01, 1.849284377740704e-01, 1.665281126261038e+02, 1.665281126261037e+02, 1.022742173599572e+05, 8.363882291868500e+07, 9.043637083503995e+06, 2.011089761174724e+02, 2.579643228134502e+06, 2.579643228134509e+06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_pc07_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_pc07", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 1.664640156626493e-01, 1.664629705689115e-01, 1.664331812053275e-01, 1.664244048698586e-01, 1.664344591192712e-01, 1.664344591192712e-01, 1.730226564830006e-01, 1.730610901492291e-01, 1.738941906593438e-01, 1.727702116653933e-01, 1.730499668854039e-01, 1.730499668854039e-01, 1.692423061253574e-01, 1.690195490418281e-01, 1.807675140073066e-01, 1.871314506439179e-01, 1.752214228355061e-01, 1.752214228355061e-01, -6.024726225918889e-02, -6.424985641079953e-02, 2.824988512961695e-01, -1.341678216963178e-02, -2.311316417184993e-02, -2.311316417184972e-02, 6.513404633933963e-04, 1.780523940383280e-01, 0.000000000000000e+00, -3.536875734412825e-02, 0.000000000000000e+00, 1.693498363117797e-01, -1.407042719885209e-03, 1.766106456250343e-01, 1.666500106397283e-01, 1.664340734176248e-01, 1.667825617011127e-01, 4.073105668562667e-11, -2.950636348329898e-02, 8.568590542536922e-02, -3.345113237835317e-02, 1.688653068912546e-01, 1.676577971054053e-01, 1.708518506335097e-01, 0.000000000000000e+00, -5.664425079672980e-02, 0.000000000000000e+00, 1.692842805733966e-01, 0.000000000000000e+00, 0.000000000000000e+00, -1.086037310233975e-05, -1.207916865029909e-11, -2.241876352978981e-11, 0.000000000000000e+00, -2.558857600947371e-04, -4.262302288508508e-08, -4.886519165212325e-10, -3.186917858293069e-09, -1.039525478442002e-11, -6.245686285254529e-06, -3.020664950501501e-08, -3.145577828104776e-12, -3.052809047494732e-11, 1.646206851413311e-01, -5.204760007141877e-02, 0.000000000000000e+00, 1.705365616555386e-01, -1.082998910408509e-02, -2.049108080738852e-02, 0.000000000000000e+00, -7.912485705177356e-04, 0.000000000000000e+00, 1.849140702641729e-01, 1.757220250708903e-01, 1.667476145942585e-01, 0.000000000000000e+00, 2.187961752704076e-01, 1.670412858151574e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -5.394195282833412e-11, 0.000000000000000e+00, 0.000000000000000e+00, -2.251549769396691e-29])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
