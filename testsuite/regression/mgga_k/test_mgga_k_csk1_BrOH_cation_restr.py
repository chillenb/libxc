
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_k_csk1_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.249622224126309e+03, 2.249623971067483e+03, 2.249652973762448e+03, 2.249626393281220e+03, 2.249637296664046e+03, 2.249637296664046e+03, 6.410865736929935e+01, 6.410510657424985e+01, 6.402640644563276e+01, "nan", 6.410749085993329e+01, 5.180316785008895e+158, 2.969522950563750e+00, 3.069769412996968e+247, 6.199800114085374e+160, 3.472747176702942e+213, 1.515381359837794e+160, 3.491050292329440e+213, 2.832292206292505e+98, 2.026363276226612e+215, 3.800314578915992e+00, 2.304356808896689e+230, 3.712585968444266e+215, 3.080669376382135e+244, 4.787427229419800e+174, 3.205293098725391e+205, 1.769702495553026e+227, 9.599678649680795e+234, 4.271949308384513e+276, 3.570072372529033e+186, 1.801427348034211e+171, 3.624044482107371e+244, 2.370137368216885e+206, 1.287620387756201e+02, 2.156773538947711e+225, 2.997386541308796e+177, 3.217956014937099e+01, 3.210642531135922e+01, 3.309281782161969e+01, 3.301856071920555e+01, 3.171038590273237e+01, 3.456674805837993e+159, 1.641466780578144e+180, 2.250239367766099e+218, 2.920112124756466e+180, 3.237110974936640e+218, 1.564567285658232e+180, 1.771215535472817e+00, 9.227913252827900e-01, 1.417584220365898e+201, 9.003092377993864e-01, 9.428155032081326e+66, 3.851847625381693e+162, 8.788511370392916e+249, 6.674701692411023e-01, 6.103034789762934e+167, 2.302280301332675e+283, 8.108560291164741e-01, 4.129761062085123e-01, 5.562691408223595e+167, 7.157009791050721e+237, 7.989644013574817e+226, 1.583102156406369e+00, 1.642466967177405e+209, 1.959085914932769e+164, 4.734130727172778e+242, 3.395891544766095e+228, 1.825050277143932e+161, 3.645044461059098e+228, 5.947487372823020e+199, 2.057674875824533e+246, 1.398724652010077e+00, 1.685764204229549e+247, 1.087774348579469e+00, 3.348189602958543e+224, 8.595615869199746e-01, 1.288550212669576e+176, 7.354931084594145e+198, 1.354012826935946e+00, 1.025059233311372e+256, 4.062557803211776e+255, 1.680774700693662e+253, 7.147862120460151e-01, 5.208164278161074e+253, 3.202422824071468e+256, 5.510596955669804e+265, 2.168124293414503e+51, 1.145666103663418e+183, 3.113733365559887e+230, 8.075436421170019e+257]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_k_csk1_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [2.780040605901200e+03, 2.780101903426046e+03, 2.780305809344814e+03, 2.779394827473744e+03, 2.779881959024085e+03, 2.779881959024085e+03, 5.685403397490047e+01, 5.686715786676705e+01, 5.717309408083882e+01, "nan", 5.687251066797224e+01, -2.456055432469168e+143, 5.570090821694753e-01, 2.312516591860911e+231, 2.056626095808308e+145, 6.845585230236283e+197, -2.039986500322312e+144, -3.153278045782945e+197, 1.040268934703118e+83, -3.874235040294018e+197, 1.306257662161338e+00, 5.073775379921379e+214, 9.102322217292212e+199, 6.469887159972205e+228, 1.675288773635429e+159, 9.661153783647030e+188, 7.623873101498690e+211, -3.870275149522414e+218, 1.431335867444365e+261, 2.261114628482170e+171, -1.452679567652796e+155, 8.319771179681805e+228, 4.335994645211597e+190, 1.877425303611044e+02, 5.601258747439572e+209, 6.757133664443071e+161, -8.460063700721371e+00, -7.657591409966995e+00, -1.046151909744066e+01, -9.767224251641688e+00, -7.037292769519348e+00, 2.133449528191341e+144, -2.814268833513812e+164, -1.005156453701073e+202, -9.776797595477414e+164, 2.370204035855883e+203, 9.844690001030542e+164, 2.088423511369125e+00, -9.182524089187996e-01, 3.974856516312884e+185, -8.968926192841953e-01, 1.720352951578089e+51, 2.689393430176569e+147, 6.200533816499226e+234, -6.674701644292098e-01, 2.283735494443254e+152, -1.859711720239028e+267, -8.100723416857853e-01, -4.129760917778360e-01, 1.544517712055928e+152, -1.454405030289522e+222, 5.895886550954022e+211, 2.587679520743840e+00, -4.297960537068788e+193, 1.538574014555095e+149, 3.691528157600536e+227, 3.930480014441321e+213, 1.379784798129933e+145, 1.156566825996381e+213, 1.119297432810564e+184, 9.908991996148972e+230, 1.569465313457218e+00, -3.281006954402596e+231, -9.684367566281408e-01, 4.810381320454332e+208, 1.925464680793490e-02, 8.383518196985768e+160, 2.488298057885723e+183, 2.595657140186384e-01, 5.116078106591603e+240, -5.885031688087249e+239, 8.340523400812278e+237, -7.124679630858922e-01, 1.507548730887510e+236, -3.210246142533801e+240, 2.473213703177490e+250, 9.502889056493584e+35, 7.383862590538589e+167, -2.251954107769504e+214, 1.757744004935733e+242]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_csk1_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [2.454189097440700e-06, 2.454079943954821e-06, 2.453730346344291e-06, 2.455352478750891e-06, 2.454483148808778e-06, 2.454483148808778e-06, 8.001046648012695e-04, 7.999546188534870e-04, 7.964201436723208e-04, "nan", 7.998669171539565e-04, 1.664548556919531e-04, 1.566596335694027e-01, 2.327572545538752e-02, 2.523336579838395e-02, 2.461530012016504e-02, 2.474503507101397e-02, 2.474503507101397e-02, 1.347537376940258e+00, 1.288120930395630e+00, 9.334641188283435e-02, 3.079680157877444e+00, 2.174999573677186e+00, 2.174999573677187e+00, 3.194391961949027e+04, 2.739495708314611e+04, 1.631312792203622e+02, 1.658294723589478e+05, 8.357855840217383e+04, 8.357855840217383e+04, 4.959986591457627e-05, 4.957255826638210e-05, 4.959850537338016e-05, 1.093716433055360e-04, 4.958607665301929e-05, 4.958607665301929e-05, 7.194590403110104e-03, 6.996859533860891e-03, 7.407204421874897e-03, 7.229668299462527e-03, 6.981348039625760e-03, 9.157991813360183e-04, 3.466036699017194e-02, 2.703467963187626e-02, 4.375044316032174e-02, 3.894891499899829e-02, 3.303659686621608e-02, 1.213858014109739e-01, 8.274425225853773e+01, 1.341416743411939e+00, 1.045264617024898e+02, 9.896632747999966e-04, 5.693862463623890e+00, 5.693862463623890e+00, 3.249256945612580e+06, 1.774980168927380e+05, 3.970166490142642e+05, 3.437317561699452e+02, 2.043738637312238e+06, 2.270820723002456e+05, 3.416035244395439e-02, 3.475501813953920e-02, 3.465021974067203e-02, 3.437183858735152e-02, 3.445797034785220e-02, 3.445797034785220e-02, 3.709595524647128e-02, 5.864283848261801e-02, 5.107121077603450e-02, 4.479611240503678e-02, 4.786387105051243e-02, 1.875796219106224e-01, 2.346277095164455e-02, 5.865101873184091e+00, 3.839981853311548e-01, 1.186571817028310e+00, 2.533603399772365e-01, 2.533603399772366e-01, 5.067835968848201e-01, 1.860495393634487e+02, 7.342042585085191e+01, 1.859971804991144e-01, 1.664274132237824e+02, 1.850312362512265e+01, 1.136380192888414e+04, 9.293202546520567e+06, 1.004848582576361e+06, 2.234544179083028e+01, 2.866270253482781e+05, 2.866270253482792e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_csk1_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [1.163289693373645e-01, 1.163315393326761e-01, 1.163388471058411e-01, 1.163006704924460e-01, 1.163212606143263e-01, 1.163212606143263e-01, 8.736767091320730e-02, 8.738580076217863e-02, 8.780589380882391e-02, "nan", 8.738940822361548e-02, 1.666666666666667e-01, 4.681431742891772e-02, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 5.459466547702400e-02, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.415372462304126e-01, 1.666666666666667e-01, 1.666666666666667e-01, 2.701557360346230e-02, 2.800527347847538e-02, 2.488388077112092e-02, 2.569318860489495e-02, 2.868270272599066e-02, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.109524405473889e-01, 1.717534205495614e-04, 1.666666666666667e-01, 1.326117956309590e-04, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666667e-01, 2.534443214905823e-10, 1.666666666666667e-01, 1.666666666666667e-01, 3.386951886030871e-05, 1.228444428766065e-09, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666027280861606e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.058536829756106e-01, 1.666666666666667e-01, 3.790095853817572e-03, 1.666666666666667e-01, 3.914745138034181e-02, 1.666666666666667e-01, 1.666666666666667e-01, 4.701283815076235e-02, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.133810840554423e-04, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666666e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_csk1_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
