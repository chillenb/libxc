
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_k_csk1_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([1.614168500723539e+03, 1.614151096493309e+03, 1.614117894496215e+03, 1.614375730480379e+03, 1.614234354244081e+03, 1.614234354244081e+03, 8.338700411804517e+01, 8.337261264092507e+01, 8.299791350269238e+01, 8.318416530240265e+01, 8.314154435933041e+01, 8.314154435933041e+01, 5.902523728128787e+00, 5.924953461690216e+00, 6.496747346401284e+00, 6.226304387458819e+00, 6.269850947788549e+00, 6.269850947788549e+00, 7.172672552323623e-01, 6.981182758945176e-01, 1.225343339005729e+01, 9.864087878933305e-01, 8.088397071978131e-01, 8.088397071978133e-01, 8.619325918827658e-01, 8.451994941218950e-01, 1.092880638348286e+00, 9.647884632520928e-01, 8.579106421870533e-01, 8.579106421870533e-01, 1.163305954135130e+03, 4.607481804970701e+02, 4.247186540479277e+01, 2.337948021995478e+03, 6.283959011877388e+01, 2.080496587267672e+02, 2.724918728331458e+01, 6.801230806199180e+01, 4.162101897194998e+01, 4.113736334259267e+01, 4.074784696495271e+01, 3.318588537128833e+01, 3.558981337639192e+01, 1.258187031844960e+01, 2.926485253309492e+01, 2.174520869697301e+00, 2.534067935003733e+00, 3.314296792007465e+00, 9.221630331774643e-01, 5.553611213293211e+00, 8.996928808242871e-01, 2.530617662431117e+01, 7.519357294317379e-01, 7.444090958347355e-01, 5.149962646753108e+00, 5.059973702763425e+03, 2.817185860649878e-01, 8.107434001882629e-01, 1.360679275354534e+00, 4.129761035193441e-01, 2.109340682389333e+05, 2.203795738242779e-01, 1.710072489574692e-01, 1.889720129164949e+03, 1.505970729052431e-01, 2.669751752167567e+06, 3.572945443848131e-02, 1.804309822658567e+00, 1.890562857413603e+01, 6.902561643313185e-01, 2.558749611187169e+00, 4.630064910782158e+01, 4.752588360627965e+01, 1.064948384095894e+00, 9.840715755258557e-01, 6.809241545153242e-01, 2.510431697861390e+00, 1.699575229212283e+00, 1.803691136994285e+00, 9.656321881034450e-01, 1.272540790383937e+00, 9.193306421524299e-01, 7.143821014206632e-01, 7.170522058807985e-01, 8.118648427051174e-01, 3.188777887600432e-01, 4.583026030940729e-01, 7.258217275427865e-01, 3.674669730577244e-01, 3.674669730240569e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_k_csk1_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([1.139110662195725e+03, 1.139146463053630e+03, 1.139257447840351e+03, 1.138725192202266e+03, 1.139010960616695e+03, 1.139010960616695e+03, 8.738220922185639e+01, 8.738260576739097e+01, 8.738894601817391e+01, 8.735206713557909e+01, 8.736003964473996e+01, 8.736003964473996e+01, 3.155359418607866e+00, 3.145390864301659e+00, 2.898527102705111e+00, 2.951231150203784e+00, 2.943465191689544e+00, 2.943465191689544e+00, 1.120482735242158e-01, 1.282314746640243e-01, 4.326356279599858e+00, 4.549909588791879e-02, 8.960684230184281e-02, 8.960684230184268e-02, -8.079229033844004e-02, -7.855147105517371e-02, -9.276101578187368e-02, -8.502752116050953e-02, -7.534701139491047e-02, -7.534701139491032e-02, 2.002232770944508e+02, 2.003336281324933e+02, -3.770308393256415e+01, 2.003258785737777e+02, 2.859983346594781e+01, 2.002791629184383e+02, -2.705512959635194e+01, 2.636352726669850e+01, 2.330209930801558e+01, 2.267793716082111e+01, 2.541455523324853e+01, -9.135684335295793e-01, 2.505467079578170e+00, 3.039183195578686e+00, 2.133564511463970e+00, 2.373695336420269e+00, 2.597403275376495e+00, 2.597403275376497e+00, -9.211106030246706e-01, 1.165171690180180e-01, -8.995678312945453e-01, 2.758209626057853e+01, -6.410148950892467e-01, -7.197098097586526e-01, -7.410881795960093e-02, -7.837215171305145e-02, -2.817185860638713e-01, -8.105844879297016e-01, -4.581194769967393e-02, -4.129761034471343e-01, 2.617448361818051e+00, -2.203177942965522e-01, -1.710036553743869e-01, 2.601080187171113e+00, -1.504018580919353e-01, 2.594446393063180e+00, -3.572334191325949e-02, 1.144666727722222e+00, 1.917517295668937e+00, 1.416462978850532e-01, 2.024555483285699e+00, 2.024555483285710e+00, 3.337017619767934e+00, -1.063178244904060e+00, -9.820569392216340e-01, -6.327612692104253e-01, 5.988785942277887e-01, 5.988785942277887e-01, 1.435564126782887e+00, -9.656057487489558e-01, -8.891069421730287e-02, 7.993416547082411e-01, -7.142354988844957e-01, -6.892177197247119e-01, -8.118648327577559e-01, -3.188777887438640e-01, -4.583026030706713e-01, -7.244517232742232e-01, -3.674669727399931e-01, -3.674669728539058e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_csk1_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([5.326414839055584e-06, 5.326363422085196e-06, 5.326135376907349e-06, 5.326901050753067e-06, 5.326499731235872e-06, 5.326499731235872e-06, 1.693351830962290e-04, 1.693590965685475e-04, 1.701227802465152e-04, 1.705514545486166e-04, 1.701967461748467e-04, 1.701967461748467e-04, 2.319882383468695e-02, 2.327572545538752e-02, 2.523336579838395e-02, 2.461530012016504e-02, 2.474503507101397e-02, 2.474503507101397e-02, 2.197912702567664e+00, 2.009638719947166e+00, 1.463234655859148e-02, 3.079680157877444e+00, 2.174999573677186e+00, 2.174999573677187e+00, 3.194391961949027e+04, 2.739495708314611e+04, 1.631312792203622e+02, 1.658294723589478e+05, 8.357855840217383e+04, 8.357855840217383e+04, 4.959986591457627e-05, 4.957255826638210e-05, 4.463227787305167e-04, 4.957439916723079e-05, 4.218372483508839e-04, 4.958607665301929e-05, 8.405611742297894e-03, 9.139355898125147e-04, 1.489230670140196e-03, 1.698501260733731e-03, 1.164248888431105e-03, 6.188645170177699e-03, 3.466036699017194e-02, 2.703467963187626e-02, 4.375044316032174e-02, 3.894891499899829e-02, 3.303659686621608e-02, 3.303659686621608e-02, 8.281469334332624e+01, 1.341416743411939e+00, 1.046002964703141e+02, 9.896632747999966e-04, 4.681037878024893e+01, 5.070861025018655e+01, 3.610285500005124e+05, 1.774980168927380e+05, 3.573149841128374e+06, 3.437903965417833e+02, 2.270820723002456e+05, 2.043738650701702e+06, 3.416035244395439e-02, 3.127951632092746e-01, 3.108978161436530e-01, 3.437183858735152e-02, 3.101217326748194e-01, 3.445797034785220e-02, 3.338635972177104e-01, 2.236959241000596e-01, 5.107121077603450e-02, 3.874007721890676e-01, 4.786387105051243e-02, 4.786387105051243e-02, 2.346277095164455e-02, 5.986066833856053e+00, 3.455970241661946e+00, 1.498599333470764e+00, 2.533603399772365e-01, 2.533603399772366e-01, 7.850615834383062e-02, 1.674442225866634e+03, 7.342042585085191e+01, 1.860018917641589e-01, 1.665275300553444e+02, 1.626872386882912e+02, 1.022742173511875e+05, 8.363882291854726e+07, 9.043637243185539e+06, 2.010502063797269e+02, 2.579643228117825e+06, 2.579643228129693e+06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_csk1_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([3.303495318365491e-02, 3.303515192595480e-02, 3.303562111836389e-02, 3.303265307160721e-02, 3.303426802237276e-02, 3.303426802237276e-02, 1.663078647385772e-01, 1.663047347474515e-01, 1.662044079005461e-01, 1.661468691599263e-01, 1.661983351697999e-01, 1.661983351697999e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.535196082470596e-01, 1.549972494085834e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 2.678576594884311e-05, 1.666666666666667e-01, 1.026726451244706e-02, 1.666666666666667e-01, 2.212997206631132e-06, 1.666666666666667e-01, 1.548057609292328e-01, 1.494859360393724e-01, 1.610147337211383e-01, 4.671574255619541e-02, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.227884025656588e-05, 1.666666666666667e-01, 2.603567648799917e-07, 1.666666666666666e-01, 1.622501209524501e-02, 1.961731915482469e-03, 1.666666666666667e-01, 1.666666666666667e-01, 2.659439888192511e-17, 1.887941944208860e-06, 1.666666666666667e-01, 4.647138735261037e-14, 1.666666666666667e-01, 2.792038379644126e-11, 9.371262106729640e-14, 1.666666666666667e-01, 2.756076314384993e-10, 1.666666666666667e-01, 2.981439213874179e-13, 1.080302493421098e-01, 1.666666666666667e-01, 7.331476722115887e-03, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.165702118734488e-06, 7.284278370928976e-07, 1.358410931273641e-04, 1.666666666666667e-01, 1.666666666666667e-01, 1.657370474474566e-01, 4.062990891197995e-07, 1.666666666666667e-01, 1.666661389632099e-01, 6.559374009932879e-07, 4.324578306827972e-03, 1.607766885890249e-11, 3.087859677686594e-13, 3.529747479028745e-14, 5.479280955039155e-05, 1.212179170084006e-12, 3.500476740027751e-13])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
