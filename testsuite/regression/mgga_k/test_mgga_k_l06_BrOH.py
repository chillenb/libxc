
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_k_l06_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_l06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([2.228739650298483e+03, 2.228747434560102e+03, 2.228794720305873e+03, 2.228667067054489e+03, 2.228743650254544e+03, 2.228743650254544e+03, 5.873902064897651e+01, 5.873862797139041e+01, 5.873275653347530e+01, 5.876850102205758e+01, 5.873931560177998e+01, 5.873931560177998e+01, 2.319023774714417e+00, 2.317869353538964e+00, 2.301894873744081e+00, 2.318627993789741e+00, 2.318557163176266e+00, 2.318557163176266e+00, 2.137309625902335e-01, 2.146225994627607e-01, 3.427358303070770e+00, 1.611381193515150e-01, 2.139188701591888e-01, 2.139188701591888e-01, 1.056091740541527e-03, 1.158698688376770e-03, 1.912241185668584e-02, 2.430541473718632e-04, 1.134674943965426e-03, 1.134674943965426e-03, 2.066242183391753e+02, 1.332556203191989e+02, 2.689132853654655e+02, 2.266065735368996e+02, 1.342332341011519e+02, 1.279838646410020e+02, 3.886434642947037e+01, 2.154938119877478e+01, 2.044479156713129e+01, 2.061039499754118e+01, 2.061512501668374e+01, 2.091223660701190e+01, 3.163216938574597e+00, 2.500944495252453e+00, 2.675131318810168e+00, 1.532926247614680e+00, 1.733670646043857e+00, 1.746932590842899e+00, 9.584550037600868e-02, 3.378651232802394e-01, 9.360919783318630e-02, 1.697735280743625e+01, 1.208812742720113e-01, 1.214721206676056e-01, 2.261913371163771e-04, 2.954229829442999e-04, 1.659561878604843e-04, 3.717992988283492e-02, 2.452611858572133e-04, 2.452612012526668e-04, 3.651083080033104e+00, 3.612203342772820e+00, 3.626117311631564e+00, 3.635988600474247e+00, 3.631485225553241e+00, 3.631486185637051e+00, 3.420488983116713e+00, 1.268867114219051e+00, 2.315177552103273e+00, 1.493771777348758e+00, 1.377729107414835e+00, 2.745427533143507e+00, 3.718197401195690e+00, 5.431404519523714e-01, 7.662258693030014e-01, 1.218839937817433e+00, 6.058607342116871e-01, 5.391142812294526e-01, 1.038524179044436e+00, 1.642015078999110e-02, 3.004055566154620e-02, 5.430841474064152e-01, 6.327749267904058e-02, 6.224959306119186e-02, 1.450620729999325e-03, 2.214401340476078e-05, 7.990924003850422e-05, 5.703846757743705e-02, 1.771460300812735e-04, 1.771460448824822e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_k_l06_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_l06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([3.220697878700046e+03, 3.220717825210832e+03, 3.220811734718315e+03, 3.220484886444096e+03, 3.220708357056636e+03, 3.220708357056636e+03, 8.732405570192203e+01, 8.732494576085955e+01, 8.735583273440533e+01, 8.732860924289486e+01, 8.732531680276048e+01, 8.732531680276048e+01, 3.067810942946236e+00, 3.057817606849430e+00, 2.779952355621676e+00, 2.841063524593211e+00, 3.064211221469624e+00, 3.064211221469624e+00, 1.622535120719784e-01, 1.735039713732286e-01, 4.272237967621423e+00, 1.978807984558437e-01, 1.656566963379450e-01, 1.656566963379450e-01, 1.760119615189151e-03, 1.931120268845495e-03, 3.177466168231949e-02, 4.050900461398412e-04, 1.891081804053697e-03, 1.891081804053697e-03, 2.057946289168102e+02, 1.930386851904080e+02, 4.119171002903487e+02, 2.378687223606000e+02, 1.881436321537308e+02, 1.996810450205132e+02, 6.454261507591919e+01, 2.538567405480518e+01, 2.493132251124434e+01, 2.532267765379575e+01, 2.596022349710157e+01, 2.464842748013309e+01, 4.120807811183491e+00, 2.888357233486656e+00, 2.996290517707386e+00, 2.456146332364860e+00, 2.658217042832187e+00, 2.647720554829457e+00, 1.588255427968737e-01, 5.415215946292432e-01, 1.559902038189615e-01, 2.745877135092965e+01, 1.616736520144419e-01, 1.636842650429995e-01, 3.769855561216191e-04, 4.923716382404734e-04, 2.765936464341355e-04, 6.188512689776912e-02, 4.087685950646574e-04, 4.087686684383656e-04, 6.085137578873968e+00, 6.020336611724034e+00, 6.043528844335893e+00, 6.054755218411981e+00, 6.052469684613701e+00, 6.052476973408438e+00, 5.700814922092238e+00, 1.770949993449503e+00, 2.364814991359681e+00, 2.046908668511430e+00, 2.091398193908513e+00, 3.775469190781060e+00, 4.133416044425555e+00, 9.045514366873649e-01, 1.276503372180282e+00, 1.864954766990786e+00, 5.750256903459864e-01, 6.242522477523019e-01, 1.441278541779044e+00, 2.736532176205233e-02, 4.985115246669777e-02, 7.837662303597580e-01, 1.054341861107132e-01, 9.828174302937411e-02, 2.417700494818236e-03, 3.690668900774114e-05, 1.331820667012456e-04, 9.211223482688223e-02, 2.952433170304468e-04, 2.952434079532067e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_l06_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_l06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([9.428794685868675e-07, 9.428716541421436e-07, 9.428334999212088e-07, 9.429616641151859e-07, 9.428753745963316e-07, 9.428753745963316e-07, 1.700817313662244e-04, 1.700866356432222e-04, 1.702281732902232e-04, 1.702936624046008e-04, 1.700798052883485e-04, 1.700798052883485e-04, 1.867707095395023e-02, 1.873275872593297e-02, 2.067848177529942e-02, 2.110801590249857e-02, 1.869901792771518e-02, 1.869901792771518e-02, 1.454291175743989e+00, 1.383129445305155e+00, 8.076101200284309e-03, 7.035038789425503e-01, 1.432456602836173e+00, 1.432456602836173e+00, 1.147476845906223e-03, 1.331429093454433e-03, 3.022528823781299e-02, 3.400987583206634e-05, 1.364296202200889e-03, 1.364296202200889e-03, 1.637297030497018e-04, 3.222833728826435e-05, 6.121640038478244e-05, 1.985647058602703e-04, 7.131919308876512e-05, 4.342993103855315e-05, 9.245072819282678e-06, 6.460498740609270e-04, 1.037094008071550e-03, 1.009529710993718e-03, 9.802832606161367e-04, 1.225056090497713e-03, 6.195618380837919e-02, 5.735343864414710e-02, 8.801097235118348e-02, 3.479285181855103e-02, 3.103841478547915e-02, 2.678055120208808e-02, 1.324896370137038e-02, 8.474274211550722e-03, 1.358947255916515e-04, 8.896104146210548e-04, 9.470888531848101e-01, 1.006282397707513e+00, -3.720259509238217e-07, 1.474741452388320e-15, 3.458997532307425e-15, 5.867093333705383e-03, -4.035438098202243e-06, 4.790357277917413e-09, 6.630173544545342e-07, 5.680614736447686e-07, 2.729773863948523e-09, 2.249094936473693e-03, 2.110040643402202e-06, 9.837073572963768e-10, 6.601639486492021e-08, 6.082820657724435e-02, 9.898308066937295e-02, 6.332642617978979e-02, 3.909784479158300e-02, 7.534655548966232e-02, 2.207162084690827e-01, 3.576471295736475e-04, 2.091339122700171e-04, 5.461367566131253e-02, 1.252256074954802e-01, 1.812319567414049e-01, 7.771037537004519e-02, -1.140040800295197e-04, 1.949090672625695e-02, 1.924916432828020e-01, 3.667100853165479e-04, 3.990311860577552e-01, 2.610107654891008e-06, -9.364259539011442e-11, 3.964803018024139e-09, 2.731054322860667e-01, 3.718407188972365e-05, 5.650178907629719e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_l06_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_l06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([-7.262730163100334e-03, -7.262710518233327e-03, -7.262663423039968e-03, -7.262988322622354e-03, -7.262719450610552e-03, -7.262719450610552e-03, -2.141638141089879e-04, -2.151469788994400e-04, -2.462685064394612e-04, -2.544447957822612e-04, -2.143327371836956e-04, -2.143327371836956e-04, 6.616634151275143e-03, 6.652601316116017e-03, 7.513778028568088e-03, 6.443288023594504e-03, 6.627574069906916e-03, 6.627574069906916e-03, 1.734198039551923e-03, 1.634335127601494e-03, 1.238627496313822e-02, 2.896902692230191e-03, 1.714979054046437e-03, 1.714979054046430e-03, 1.395129222866144e-09, 1.847039896976654e-09, 2.600276276735314e-06, 1.201498643674613e-11, 1.838481367564301e-09, 1.838481367564301e-09, 7.294724333061117e-03, 9.343160570341692e-03, -3.162661757794465e-04, 4.769555151137911e-03, -9.928897932929242e-03, 3.232891573692137e-03, -6.182296922128055e-06, 1.015980203465964e-02, 1.992962132247912e-05, 2.071202695286558e-04, 1.825986756684056e-04, -6.179830490805853e-03, 1.993554174733438e-03, 9.796321858326934e-03, 4.302086271455621e-03, 1.506728439024896e-03, 9.235368120680250e-04, 4.277403181292873e-03, -2.418203373096889e-05, 4.125010894581636e-04, -1.419825796669336e-07, 2.620885034221199e-03, 1.106114477912241e-04, -9.035831874247973e-04, 1.821796791143435e-13, 1.123684110588412e-21, -2.175436236451352e-22, -2.824649549607939e-06, 3.741962332420314e-12, -1.894609026779355e-15, 2.487061560930600e-13, -1.839030997716830e-12, -3.513748610749799e-16, 1.494676126261101e-07, -5.803945050415290e-12, 5.842355137464157e-17, -2.964969457434738e-15, -1.859844931450399e-03, 6.290621345874107e-03, -1.056732605634703e-02, 3.775443059583721e-03, 1.297579743322418e-03, 2.806589411865686e-03, -9.220463307093801e-07, -3.207491205898312e-07, -5.864365465680942e-04, 1.581440497150519e-02, 8.836705236110350e-03, -4.833009946666353e-05, 4.147464796557743e-08, 1.038267996593292e-05, 4.941979787132865e-04, -3.109768835397659e-07, 3.009237384734299e-05, -1.332524261698661e-11, 1.098321810783205e-18, -2.879557434635554e-16, -1.489430826109348e-04, -5.360993951028451e-12, -1.373139868790672e-15])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
