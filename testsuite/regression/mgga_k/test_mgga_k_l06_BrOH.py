
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_k_l06_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_l06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.179893430276209e+03, 2.179900983876676e+03, 2.179946855739208e+03, 2.179822925736958e+03, 2.179897312133346e+03, 2.179897312133346e+03, 5.899305062890384e+01, 5.899256408140786e+01, 5.898407404571157e+01, "nan", 5.899330298383494e+01, 1.231214492213339e+02, 2.310335860982110e+00, 4.514655983289344e+00, 4.277391903588860e+00, 4.345008634322594e+00, 4.520552038197052e+00, 4.520552038197052e+00, 3.385698829169679e-01, 3.476460722769087e-01, 3.184551875335039e+00, 1.779604908028330e-01, 3.412797828772668e-01, 3.412797828772668e-01, 1.056098834689388e-03, 1.158708103465670e-03, 1.914268022073452e-02, 2.430541959204144e-04, 1.134684125349027e-03, 1.134684125349027e-03, 2.757766311142174e+02, 2.758747342846297e+02, 2.757869809780169e+02, 1.275563086275209e+02, 2.758264914821013e+02, 2.758264914821013e+02, 2.096332141516145e+01, 2.116092290429858e+01, 2.098498427010500e+01, 2.113684190612122e+01, 2.107546443370605e+01, 3.957112444792168e+01, 3.429006829263815e+00, 4.046018284314564e+00, 3.087518289566855e+00, 3.358927942849632e+00, 3.697567478877750e+00, 1.737200153851939e+00, 9.455928330522327e-02, 3.434386172805001e-01, 9.197948125581527e-02, 3.743248919451012e+01, 1.284471716200127e-01, 1.284471716200127e-01, 2.261913018056113e-04, 2.954229829443079e-04, 1.659561878604858e-04, 3.708121930296069e-02, 2.452611312179972e-04, 2.452612013461741e-04, 3.651083228938027e+00, 3.612203732126409e+00, 1.631198373012713e+00, 3.636869807525179e+00, 3.631486186084855e+00, 3.631486186084855e+00, 3.420488991446279e+00, 2.574084160626509e+00, 2.808516748140201e+00, 3.035051520096504e+00, 2.918523337968088e+00, 1.372665303960482e+00, 4.447990705803117e+00, 3.989828352894849e-01, 7.663399990112321e-01, 6.380042164552271e-01, 9.798018840076507e-01, 9.798018840076504e-01, 1.049546062324537e+00, 1.642065204472427e-02, 3.009389079281978e-02, 1.118148330159898e+00, 6.260837143844931e-02, 6.328502714060429e-02, 1.450620934039269e-03, 2.214401340481946e-05, 7.990924004718380e-05, 5.759928718674487e-02, 1.771460449369757e-04, 1.771460449369752e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_k_l06_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_l06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.320496008463972e+03, 3.320515950554781e+03, 3.320611263566968e+03, 3.320284565477556e+03, 3.320506471916147e+03, 3.320506471916147e+03, 8.641151163032198e+01, 8.641288446469191e+01, 8.645767786988601e+01, "nan", 8.641295394686775e+01, "nan", 2.951102865053364e+00, "nan", "nan", "nan", "nan", "nan", 5.642831381949466e-01, "nan", 4.458376620053333e+00, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 1.995295267896323e+02, "nan", "nan", 2.330755399036757e+01, 2.383510333975556e+01, 2.289039601653893e+01, 2.330592239387626e+01, 2.418911532959958e+01, "nan", "nan", "nan", "nan", "nan", "nan", 2.640701320883840e+00, 1.495273431510710e-01, "nan", 1.445125343007813e-01, 6.238748199085020e+01, "nan", "nan", 3.769853049210182e-04, "nan", "nan", 6.116804363712330e-02, 4.087681779887365e-04, "nan", "nan", "nan", 2.673640505399277e+00, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 2.082451732293869e+00, "nan", 2.205069477557968e-01, "nan", 8.199392532173982e-01, "nan", "nan", 1.399817467009649e+00, "nan", "nan", "nan", 1.007162408040416e-01, "nan", "nan", "nan", 1.331820667453063e-04, "nan", "nan", "nan"]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_l06_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_l06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [7.916596577447368e-07, 7.916518852147507e-07, 7.916158644783994e-07, 7.917432022309989e-07, 7.916555707303186e-07, 7.916555707303186e-07, 1.906198194328715e-04, 1.906142022120134e-04, 1.904365367060550e-04, "nan", 1.906144942747334e-04, "nan", 3.059264083053376e-02, "nan", "nan", "nan", "nan", "nan", 0.000000000000000e+00, "nan", 1.640364588450976e-02, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 5.324345112679462e-05, "nan", "nan", 1.343235059357410e-03, 1.304062107886424e-03, 1.371340427410576e-03, 1.339753225493849e-03, 1.282193461577136e-03, "nan", "nan", "nan", "nan", "nan", "nan", 3.532227198085538e-02, 2.580759909554610e-01, "nan", 3.165829673700164e-01, 7.734749266677585e-131, "nan", "nan", 7.698869884171097e-05, "nan", "nan", 9.838015774551866e-02, 1.566927888621795e-04, "nan", "nan", "nan", 3.358926074984158e-02, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 5.046999562455383e-02, "nan", 8.849151960583360e-01, "nan", 2.089437515894015e-01, "nan", "nan", 9.365570330528428e-02, "nan", "nan", "nan", 2.727578680871670e-01, "nan", "nan", "nan", 2.327310390759123e-111, "nan", "nan", "nan"]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_l06_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_l06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [-2.317733617170028e-03, -2.317673558348059e-03, -2.317492311130142e-03, -2.318475009477329e-03, -2.317701243444349e-03, -2.317701243444349e-03, -3.212338718090184e-03, -3.211805796855695e-03, -3.197175755952460e-03, "nan", -3.212064617766791e-03, 0.000000000000000e+00, -5.898720435655257e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -4.172435791166113e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.673985493936758e-03, 0.000000000000000e+00, 0.000000000000000e+00, -8.030199069227088e-03, -7.852133792728868e-03, -8.284375735153462e-03, -8.141931183514093e-03, -7.587379154209896e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -2.366577273061181e-03, -2.761645720399160e-04, 0.000000000000000e+00, -3.251842720500607e-04, 7.450558170235382e-196, 0.000000000000000e+00, 0.000000000000000e+00, -1.009676505808245e-11, 0.000000000000000e+00, "nan", -2.616209208529929e-05, -2.319995243905275e-11, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -4.614870227658675e-04, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -2.413124825539670e-03, 0.000000000000000e+00, -1.200752315096351e-02, 0.000000000000000e+00, -5.792406548002192e-03, 0.000000000000000e+00, 0.000000000000000e+00, -5.120290776574297e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.572982705997077e-04, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 8.985830496120986e-166, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_l06_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_l06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
