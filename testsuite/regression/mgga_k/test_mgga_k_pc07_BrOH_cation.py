
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_k_pc07_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_pc07", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([9.576367975698388e+02, 9.576137153110917e+02, 9.575583429374415e+02, 9.579007926319266e+02, 9.577146380611766e+02, 9.577146380611766e+02, 8.340004484648279e+01, 8.338564208915000e+01, 8.301059155121342e+01, 8.319683959687177e+01, 8.315433168759992e+01, 8.315433168759992e+01, 5.941920261172386e+00, 5.964794649344412e+00, 6.545858545523950e+00, 6.262214557786586e+00, 6.326515548545192e+00, 6.326515548545192e+00, 7.192048030506358e-01, 6.999949587448751e-01, 1.260521201889689e+01, 1.006885024332774e+00, 8.564000083232253e-01, 8.564000083232254e-01, 8.006650160874803e-01, 7.853580894081736e-01, 1.372048623819307e+00, 7.843760742016942e-01, 7.262037603245561e-01, 7.262037603245549e-01, 9.243898898822293e+02, 4.736895413841675e+02, 4.137020147034134e+01, 6.460461958015110e+02, 4.122190214674667e+01, 2.084824637656325e+02, 3.060920024827218e+01, 6.886273266154762e+01, 4.159596683300530e+01, 4.106938169994700e+01, 4.075421052725447e+01, 2.651557992303280e+01, 8.458363979829084e+00, 1.198966730696456e+01, 7.901387769825504e+00, 2.179729415390655e+00, 2.540334406031679e+00, 3.332673576577029e+00, 9.219460237054212e-01, 2.997032028438732e+00, 8.996655480150828e-01, 2.535819442065709e+01, 7.430511113666531e-01, 7.430511113666531e-01, 6.680901201465779e-01, 7.065860064753176e-01, 2.817995771230112e-01, 8.107747108292320e-01, 4.156551712194058e-01, 4.138207739106333e-01, 1.656275919421802e+00, 1.776535021108470e+00, 1.735043084698040e+00, 1.770375767609837e+00, 1.712322294390126e+00, 1.717339200672947e+00, 1.527130791727632e+00, 1.752678985127894e+00, 9.226518703887946e+00, 4.949122333197422e-01, 2.567545197674319e+00, 4.725446015525971e+00, 7.842424366392004e+00, 1.064542724110567e+00, 1.085175940863605e+00, 6.698754362395861e-01, 2.596689049782148e+00, 1.716361360582053e+00, 1.804327166990721e+00, 9.656281610296017e-01, 1.554829746876385e+00, 9.198701623963914e-01, 7.157195856743035e-01, 7.157195856743035e-01, 8.120356333034537e-01, 3.205942872028503e-01, 4.583345272518606e-01, 7.256151228337153e-01, 3.710531393594770e-01, 3.710553697559925e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_k_pc07_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_pc07", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-9.576393445190124e+02, -9.576342506108240e+02, -9.576125940544704e+02, -9.576148365750159e+02, -9.575722847002248e+02, -9.575444012750652e+02, -9.578732328355682e+02, -9.579283530580846e+02, -9.576211039500453e+02, -9.578081757487282e+02, -9.576211039500453e+02, -9.578081757487282e+02, 8.738511451451164e+01, 8.738899695686850e+01, 8.738604742667029e+01, 8.739009936145995e+01, 8.741084092434565e+01, 8.741891269878916e+01, 8.738626038059314e+01, 8.739528602060437e+01, 8.735453054808931e+01, 8.742042365484939e+01, 8.735453054808931e+01, 8.742042365484939e+01, 3.131705471775899e+00, 3.168818225947112e+00, 3.117966287218798e+00, 3.163121152343578e+00, 2.934127170213140e+00, 2.875390545867980e+00, 2.954673734730960e+00, 2.975283003799344e+00, 3.232271262658258e+00, 2.635728428974295e+00, 3.232271262658258e+00, 2.635728428974295e+00, 1.518216838973440e-01, 1.658382536688940e-01, 1.597192838091787e-01, 1.766558480217245e-01, 3.736406127111521e+00, 4.220604807587607e+00, 7.501163660020595e-02, 7.173518912199324e-02, 1.660531012551202e-01, -7.301877550569730e-03, 1.660531012551198e-01, -7.301877550570046e-03, -8.891701244035730e-01, -9.143855374154706e-01, -8.751405428513358e-01, -9.026447780993018e-01, -1.542400024639496e-01, -3.178761337192262e-02, -8.009722825238774e-01, -8.131138997317002e-01, -8.359268225454251e-01, -4.672149725823925e-01, -8.359268225454219e-01, -4.672149725823919e-01, 1.416057320513903e+03, 8.673826930672795e+02, 1.873616036338203e+02, 1.873220130552248e+02, -4.136989289908963e+01, -4.137051026757364e+01, 1.433586783310167e+03, 1.383322675945295e+03, -4.122012312494293e+01, -4.122368247104610e+01, 1.998863832694188e+02, 2.001961762559329e+02, -1.939153045943570e+01, -2.574330931082887e+01, 2.613159978329336e+01, 2.612167386777969e+01, 2.529944673845180e+01, 2.544998340579983e+01, 2.565450949289346e+01, 2.583194647596477e+01, 2.648390080636989e+01, 2.611288602457197e+01, -2.609986098942334e+01, -2.693679833938081e+01, 1.735384495720240e+01, 1.408872031104503e+01, 9.298234498062001e+00, 9.778255778601244e+00, 1.175767516513164e+01, 1.599529517786388e+01, 2.292272698644125e+00, 2.448656092014833e+00, 2.731581901226932e+00, 2.462928037147779e+00, 2.724256771349121e+00, 2.452670089508483e+00, -9.287706266941604e-01, -9.153129962636577e-01, 3.523522199835713e-01, 3.668695091384570e-01, -9.015109121111524e-01, -8.980883238443450e-01, 2.753504590613402e+01, 2.751076632780542e+01, -8.121392656598382e-01, -6.849342027066375e-01, -8.121392656598382e-01, -6.849342027066375e-01, -6.421923207990694e-01, -6.902653762541757e-01, -6.920357904659887e-01, -7.202198243773947e-01, -2.899047127481741e-01, -2.748251409447824e-01, -8.029051329422281e-01, -8.185008927589957e-01, -4.110648865662610e-01, -4.151241737275473e-01, -4.111949308950603e-01, -4.146997321374108e-01, 2.537433272692121e+00, 2.559464914074455e+00, 2.359585387409291e+00, 2.382419769472244e+00, 2.424037424640328e+00, 2.446998317357777e+00, 2.682611330943337e+00, 2.732198038111231e+00, 2.432875849321813e+00, 2.457532967047861e+00, 2.449536249962611e+00, 2.471983031842766e+00, 2.441404243277380e+00, 2.457902660377884e+00, 1.679865280946305e+00, 1.695390439805893e+00, 1.476735174707537e+01, 1.491471527169411e+01, -4.953839972299114e-01, -4.944454112146604e-01, 2.013161730354268e+00, 2.028858230925353e+00, 8.181982274933560e+00, 8.352589303867942e+00, 1.905783040562295e+01, 1.958960739594927e+01, -1.065811166737055e+00, -1.063296062018464e+00, -6.483347959328620e-01, -6.308202603056751e-01, -6.699896337504940e-01, -6.697631122485233e-01, 5.344478654016138e-01, 5.302550736173068e-01, 6.032721526592834e-01, 6.023713676320230e-01, 1.428266899932008e+00, 1.450752381929712e+00, -9.661309765582571e-01, -9.651355270281794e-01, -8.307232488927999e-02, -5.194674186196356e-01, 7.870819925361778e-01, 8.108736848565071e-01, -7.598705813280078e-01, -6.782155886543124e-01, -7.598705813280076e-01, -6.782155886543121e-01, -8.165376899553629e-01, -8.079897645996434e-01, -3.662903377081299e-01, -2.752101342405479e-01, -4.661838114139846e-01, -4.518103151691904e-01, -7.230163781680909e-01, -7.280904308473184e-01, -2.863698114852049e-01, -4.071377726877607e-01, -2.863116805225588e-01, -4.071377726877603e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_pc07_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_pc07", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.293109184051877e-05, 0.000000000000000e+00, 1.293114179513549e-05, 1.293096651097146e-05, 0.000000000000000e+00, 1.293105074677587e-05, 1.293054083471756e-05, 0.000000000000000e+00, 1.293044770940055e-05, 1.293195688134498e-05, 0.000000000000000e+00, 1.293225240321300e-05, 1.293101834015489e-05, 0.000000000000000e+00, 1.293151277752772e-05, 1.293101834015489e-05, 0.000000000000000e+00, 1.293151277752772e-05, 3.380123635929137e-04, 0.000000000000000e+00, 3.379440418909590e-04, 3.380296291900899e-04, 0.000000000000000e+00, 3.379496398591456e-04, 3.382944974015233e-04, 0.000000000000000e+00, 3.383153168970907e-04, 3.384192309566562e-04, 0.000000000000000e+00, 3.383421514669750e-04, 3.381287952892518e-04, 0.000000000000000e+00, 3.385683529869191e-04, 3.381287952892518e-04, 0.000000000000000e+00, 3.385683529869191e-04, 3.507957713899289e-02, 0.000000000000000e+00, 3.496822579445155e-02, 3.517507658840958e-02, 0.000000000000000e+00, 3.497553453382203e-02, 3.605542083868123e-02, 0.000000000000000e+00, 3.703671904989607e-02, 3.780866767143640e-02, 0.000000000000000e+00, 3.788999170474093e-02, 3.403979827373915e-02, 0.000000000000000e+00, 4.309831449056620e-02, 3.403979827373915e-02, 0.000000000000000e+00, 4.309831449056620e-02, 2.541014250752135e+00, 0.000000000000000e+00, 2.525872925333267e+00, 2.453832624587917e+00, 0.000000000000000e+00, 2.415825743752163e+00, 1.631904766990474e-02, 0.000000000000000e+00, 1.480427520136522e-02, 8.355919420313254e-01, 0.000000000000000e+00, 2.538461118709829e+00, 2.304125045448509e+00, 0.000000000000000e+00, -1.532240437457091e+01, 2.304125045448508e+00, 0.000000000000000e+00, -1.532240437457090e+01, 8.646731220290778e+05, 0.000000000000000e+00, 7.452070780542028e+05, 7.645970209514750e+05, 0.000000000000000e+00, 6.481912870884314e+05, -2.172561002384248e+02, 0.000000000000000e+00, -6.447373868833582e+02, 3.179471913325865e+06, 0.000000000000000e+00, 3.347868579061124e+06, 1.113677068629083e+06, 0.000000000000000e+00, 5.055317720828420e+06, 1.113677068629081e+06, 0.000000000000000e+00, 5.055317720828413e+06, 3.714190526466704e-03, 0.000000000000000e+00, 2.256173959976001e-03, 7.224976043266941e-05, 0.000000000000000e+00, 7.099960643203920e-05, 8.924464270475136e-04, 0.000000000000000e+00, 8.931000056290367e-04, 3.722423398481351e-03, 0.000000000000000e+00, 3.604949945893689e-03, 8.922228825623769e-04, 0.000000000000000e+00, 8.928761159884677e-04, 8.610180012218291e-05, 0.000000000000000e+00, 9.144246194648106e-05, 6.198596683621457e-03, 0.000000000000000e+00, 9.706349546275837e-03, 1.126375258877803e-03, 0.000000000000000e+00, 1.129631072671355e-03, 1.939124432286450e-03, 0.000000000000000e+00, 1.927225578924113e-03, 1.924453035919697e-03, 0.000000000000000e+00, 1.899415675569059e-03, 1.835597273104024e-03, 0.000000000000000e+00, 1.870610341831866e-03, 1.637657215386188e-02, 0.000000000000000e+00, 1.659362433974692e-02, 2.479487129418711e+00, 0.000000000000000e+00, 2.085941340611007e+00, 8.226785242609993e-01, 0.000000000000000e+00, 8.710360124508156e-01, 2.798639451319037e+00, 0.000000000000000e+00, 3.100195162905766e+00, 7.362199270371124e-02, 0.000000000000000e+00, 6.874361211683916e-02, 5.983247538947164e-02, 0.000000000000000e+00, 6.818991002333394e-02, 5.194506265967447e-02, 0.000000000000000e+00, 5.896264951439550e-02, 1.680322502110340e+02, 0.000000000000000e+00, 1.633153648043942e+02, 6.970088203021253e+01, 0.000000000000000e+00, 6.904278829439485e+01, 2.269837421716149e+02, 0.000000000000000e+00, 1.940019561885622e+02, 1.771357943687436e-03, 0.000000000000000e+00, 1.773855579348175e-03, 1.121634537776805e+02, 0.000000000000000e+00, 9.435182145012415e+01, 1.121634537776805e+02, 0.000000000000000e+00, 9.435182145012415e+01, 6.899382404680469e+06, 0.000000000000000e+00, 6.147456300994826e+06, 3.268603139720401e+06, 0.000000000000000e+00, 3.124573580666010e+06, 7.817215420569661e+06, 0.000000000000000e+00, 6.581432122514381e+06, 6.939684423521389e+02, 0.000000000000000e+00, 6.813232572463984e+02, 7.348156785808919e+06, 0.000000000000000e+00, 2.862481397791492e+06, 7.337102026431647e+06, 0.000000000000000e+00, 2.832622649626541e+06, 6.186972735062060e-01, 0.000000000000000e+00, 6.115760187202014e-01, 6.286937593255009e-01, 0.000000000000000e+00, 6.213845729484534e-01, 6.254172396990029e-01, 0.000000000000000e+00, 6.181505497696335e-01, 6.467710055167857e-01, 0.000000000000000e+00, 6.423357802559572e-01, 6.219304884013991e-01, 0.000000000000000e+00, 6.150071462614598e-01, 6.238902796240222e-01, 0.000000000000000e+00, 6.166750163747083e-01, 6.709848890318152e-01, 0.000000000000000e+00, 6.643758869238470e-01, 1.288925272254980e-01, 0.000000000000000e+00, 1.277692818897728e-01, 4.101569817465758e+00, 0.000000000000000e+00, 4.047382839913236e+00, 8.105979508028870e-01, 0.000000000000000e+00, 8.021068030259341e-01, 8.164680239034845e-02, 0.000000000000000e+00, 8.091254929167224e-02, 2.206729221683358e+00, 0.000000000000000e+00, 2.204517257774113e+00, 1.456402300007891e+00, 0.000000000000000e+00, 1.480989146921967e+00, 1.207679180856774e+01, 0.000000000000000e+00, 1.186942020676454e+01, 4.288903930774949e+00, 0.000000000000000e+00, 4.235577910400323e+00, 3.024385837125076e+00, 0.000000000000000e+00, 2.974767882753505e+00, 1.834051738362655e-01, 0.000000000000000e+00, 1.858725170998226e-01, 3.370144819961220e-01, 0.000000000000000e+00, 3.278800593067792e-01, 1.530054557590564e-01, 0.000000000000000e+00, 1.501491660521111e-01, 3.383498365853439e+03, 0.000000000000000e+00, 3.314985802507891e+03, -2.319832465816777e+02, 0.000000000000000e+00, 6.556828317461179e+02, 3.678076762052910e-01, 0.000000000000000e+00, 3.711761891910905e-01, 3.625707363724647e+02, 0.000000000000000e+00, 3.079851680605962e+02, 3.625707363724647e+02, 0.000000000000000e+00, 3.079851680605963e+02, 2.160802635499018e+05, 0.000000000000000e+00, 1.941851121390783e+05, 1.678524443444068e+08, 0.000000000000000e+00, 1.667067706068541e+08, 1.992427187682215e+07, 0.000000000000000e+00, 1.656041587876477e+07, 4.122466915137551e+02, 0.000000000000000e+00, 3.926655637176916e+02, 8.633543549065115e+06, 0.000000000000000e+00, 3.678861720624852e+06, 8.632165862980336e+06, 0.000000000000000e+00, 3.678861720624863e+06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_pc07_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_pc07", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 1.664610802474734e-01, 1.664669505755856e-01, 1.664595367268392e-01, 1.664664038824690e-01, 1.664348354025853e-01, 1.664315265887457e-01, 1.664221961003441e-01, 1.664266127005214e-01, 1.664651107578145e-01, 1.664038633960813e-01, 1.664651107578145e-01, 1.664038633960813e-01, 1.731118797087416e-01, 1.729334896237256e-01, 1.731535939915223e-01, 1.729683719853244e-01, 1.739315963018712e-01, 1.738503276495443e-01, 1.728579333965296e-01, 1.726828761586166e-01, 1.729882404293081e-01, 1.725462359678728e-01, 1.729882404293081e-01, 1.725462359678728e-01, 1.706809840475220e-01, 1.680379400270141e-01, 1.705644618689360e-01, 1.677605175925242e-01, 1.817000877211696e-01, 1.796606592105806e-01, 1.907943678540193e-01, 1.835606413625273e-01, 1.699359595562762e-01, 2.246012530101280e-01, 1.699359595562762e-01, 2.246012530101281e-01, -5.651867455247099e-02, -6.378520771274511e-02, -5.956576499336898e-02, -6.864261966229482e-02, 2.661928089914619e-01, 2.931543127756540e-01, -1.325210860908613e-02, -1.360322271115435e-02, -3.730624635285115e-02, -5.474793127775340e-03, -3.730624635285071e-02, -5.474793127775300e-03, -2.828066185333909e-02, 4.320904964565988e-02, 1.780353841125905e-01, 1.780669938207658e-01, 0.000000000000000e+00, 0.000000000000000e+00, -3.684997590376810e-02, -3.394113043005108e-02, 0.000000000000000e+00, 0.000000000000000e+00, 1.700052399335272e-01, 1.686894240031807e-01, -1.308501120541354e-03, -1.021330869234561e-03, 1.766270148271068e-01, 1.765942377092034e-01, 1.666416411147864e-01, 1.666580834893510e-01, 1.663398415440772e-01, 1.665272578110271e-01, 1.668448087578498e-01, 1.667179802163599e-01, 1.911174700832538e-16, 3.370075872643405e-08, -3.742686732064322e-02, -2.341160131664835e-02, 8.816693465772033e-02, 8.320338786695251e-02, -2.543138017590196e-02, -4.242634602884791e-02, 1.692198939596379e-01, 1.685562225273585e-01, 1.674162746793048e-01, 1.679605010574118e-01, 1.705933807078103e-01, 1.711521407359174e-01, 0.000000000000000e+00, 0.000000000000000e+00, -5.639704943897633e-02, -5.687365192158204e-02, 0.000000000000000e+00, 0.000000000000000e+00, 1.692849838700942e-01, 1.692835738329180e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -9.393502673129517e-06, -1.240742860223889e-05, -1.107746036895265e-11, -1.315154340176992e-11, -1.075046052481153e-11, -5.557612184147616e-11, 0.000000000000000e+00, 0.000000000000000e+00, -5.116305441421674e-05, -6.891791439729683e-04, -1.070760939523089e-08, -9.624305547545354e-08, -4.919285998727873e-10, -4.855035726364836e-10, -3.180327576676778e-09, -3.193641543042257e-09, -1.040265204687662e-11, -1.038876734068434e-11, -5.572858075372033e-06, -7.032644393579606e-06, -3.542753432030617e-08, -2.612981391247005e-08, -3.139516047386153e-12, -3.151779182221313e-12, -3.126653427297231e-11, -2.982871035874757e-11, 1.646801988742571e-01, 1.645625207887589e-01, -5.217394053204982e-02, -5.188301085458021e-02, 0.000000000000000e+00, 0.000000000000000e+00, 1.705592342900075e-01, 1.705141306396389e-01, -1.067383071524769e-02, -1.098746280349228e-02, -1.996461412143844e-02, -2.103657625948017e-02, 0.000000000000000e+00, 0.000000000000000e+00, -8.073919025273780e-04, -7.719656403471390e-04, 0.000000000000000e+00, 0.000000000000000e+00, 1.848354123560964e-01, 1.849853697983800e-01, 1.754878059913376e-01, 1.759539912401888e-01, 1.667725324580498e-01, 1.667217977909887e-01, 0.000000000000000e+00, 0.000000000000000e+00, 2.711068187441905e-01, 1.591922015463935e-01, 1.677304861527445e-01, 1.663960163441784e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.033804556767335e-09, -3.570050824567437e-13, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -3.382163455585292e-07, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
