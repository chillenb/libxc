
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_k_rda_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_rda", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([1.725092295397545e+03, 1.725092447895010e+03, 1.725109165170626e+03, 1.725106125345509e+03, 1.725105457180492e+03, 1.725105457180492e+03, 8.183923033098586e+01, 8.181793616943253e+01, 8.125383019541260e+01, 8.148544657246555e+01, 8.145341131147268e+01, 8.145341131147268e+01, 4.981396663984264e+00, 4.980961131738517e+00, 4.962308001922469e+00, 4.882282296040964e+00, 4.898732655606071e+00, 4.898732655606071e+00, 4.500962467136300e-01, 4.437951528271613e-01, 9.631058672830383e+00, 5.679892205336302e-01, 4.743184165389972e-01, 4.743184165389973e-01, 7.279965243197192e-01, 7.079242053527720e-01, 8.710121959542931e-01, 7.655346339144810e-01, 6.785776898192805e-01, 6.785776898192796e-01, 2.602133272959555e+03, 4.178760738638057e+02, -9.599187819157975e+02, -2.991018917297065e+03, -3.023574274789951e+01, 2.218911436959449e+02, -1.337526892941167e+02, 4.934903144090859e+01, 3.694253095013742e+01, 3.693592419530849e+01, 3.703380690560060e+01, 2.617141498018327e+01, -2.923699335621104e+01, 1.657289559301072e+01, -2.647568984309138e+01, 2.290861319650232e+00, 2.582973402642874e+00, 3.396723479754758e+00, 5.926982302011203e-01, -1.082884917799100e+00, 5.887398456385721e-01, 2.712734557376987e+01, 5.083463657430206e-01, 4.844531027655991e-01, 6.671494444963428e-01, 7.056224419122548e-01, 2.814175706635763e-01, 6.739902799826573e-01, 4.125389908930851e-01, 4.125392500278647e-01, -1.536587718225586e+01, -1.504456428480473e+01, -1.515889626848438e+01, -1.536352274008906e+01, -1.519531103078769e+01, -1.520517434375221e+01, -1.458271540287974e+01, 1.695406005826364e+00, -5.888923550138018e+01, -8.237797406827035e-01, 2.619025576579773e+00, -1.642588097831644e+01, -3.637433632356636e+01, -9.847441390797012e-01, -1.996554314106016e+00, -2.990472867259363e+00, 1.718693555862754e+00, 1.162444610117460e+00, 1.766844117421008e+00, 9.167955313356235e-01, 8.759143855458144e-01, 9.200311568881508e-01, 4.887250720465385e-01, 5.619695646730225e-01, 8.086483698370417e-01, 3.188410033439277e-01, 4.581405249579084e-01, 5.646601273990994e-01, 3.670929498758552e-01, 3.670929427290905e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_k_rda_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_rda", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([3.822141497366451e+03, 3.822198922330850e+03, 3.822410145494259e+03, 3.821558160778077e+03, 3.822010797112137e+03, 3.822010797112137e+03, 7.403560208232088e+01, 7.399992739097705e+01, 7.305517706912403e+01, 7.340295746585190e+01, 7.337836681655007e+01, 7.337836681655007e+01, 6.499581555278852e+00, 6.497275543249164e+00, 6.285719184749753e+00, 6.293238850770101e+00, 6.301104036841892e+00, 6.301104036841892e+00, 1.049961146062887e-01, 1.535361837626746e-01, 7.790571474286179e+00, -3.056356533988704e-01, -1.582162014127586e-01, -1.582162014127583e-01, -7.322316367244637e-01, -7.126020493069638e-01, -9.646456425864329e-01, -7.669607490484180e-01, -6.808163008219974e-01, -6.808163008219966e-01, -9.718059840850472e+03, 2.867848322818863e+02, -1.421724022920184e+03, -1.365219997648151e+04, 2.942999245219786e+02, 2.267613452807205e+02, -2.807680862481043e+02, 5.815088845443228e+01, 4.341889059090979e+01, 4.304148843357714e+01, 4.387824950526161e+01, 1.496502327751734e+01, -1.044156266918274e+02, -2.189517064731075e+01, -1.005970867564746e+02, 2.058801281157733e+00, 2.478052870116740e+00, 4.018577891261457e+00, -1.397114881784809e+00, -6.071929998286448e+00, -1.407703826188969e+00, 2.417443374784013e+01, -6.469679022890281e-01, -7.377572365081702e-01, -6.680047401202328e-01, -7.069953276845277e-01, -2.822202783047686e-01, -1.026126747197411e+00, -4.137048143051121e-01, -4.137041865850509e-01, -2.582435755448540e+01, -2.565675252747243e+01, -2.572054385594828e+01, -2.614202590712409e+01, -2.571069164610405e+01, -2.574355981218452e+01, -2.439928953997925e+01, 1.449961412587906e+00, -5.396393677461654e+02, 2.778256928016352e+00, 3.096078569180413e+00, -4.095181028269775e+01, -1.196164359127228e+02, -4.342042804885752e+00, -5.791401345039653e+00, -4.640087164399215e+00, 1.215859780873258e+00, 1.317378474611868e+00, 1.979419175236296e+00, -1.044845711866450e+00, -9.160821782821487e-01, 9.928341682183531e-01, -1.078649509202498e+00, -7.804971868373644e-01, -8.172247895245025e-01, -3.189390964062411e-01, -4.585727313453251e-01, -9.026231680682146e-01, -3.680903181427589e-01, -3.680903424816314e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_rda_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_rda", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([6.645520103180774e-07, 6.645355176675157e-07, 6.644797472232330e-07, 6.647251420264309e-07, 6.645940369533419e-07, 6.645940369533419e-07, -2.702380340888689e-05, -2.691368713110750e-05, -2.377437335066463e-05, -2.323096910046202e-05, -2.409551491035238e-05, -2.409551491035238e-05, -4.198563248867706e-02, -4.196963016466228e-02, -3.857759261777963e-02, -3.106311429959914e-02, -3.334989781644834e-02, -3.334989781644834e-02, 3.060333522588504e+00, 2.678770298666922e+00, -8.664048932992863e-02, 1.025232985971597e+01, 6.666389685349141e+00, 6.666389685349140e+00, 2.874826817904192e+05, 2.465399534104429e+05, 1.433404669912291e+03, 1.492455056766008e+06, 7.521904768623991e+05, 7.521904768623991e+05, -5.498516348991215e-03, -3.451151050136368e-04, 4.320985032874565e-04, -1.172777756707439e-03, 1.135073242691358e-04, -7.785103217113796e-05, 8.377335203460009e-03, -2.061872060039983e-03, 2.215198301756267e-04, 2.300205732558287e-04, 8.132709878713192e-05, 1.739186855927844e-03, -1.601273400869782e-01, -8.612658163395982e-01, -3.511570851362892e-01, -5.942217148040171e-02, -2.601440631624020e-02, -6.268029111152346e-02, 8.178690606636191e+01, 6.028504351922336e+00, 1.045578686512068e+02, -1.747784917786321e-03, 3.498156930648240e+01, 3.919279527142323e+01, 3.249256920244491e+06, 1.597482152034616e+06, 3.573149841128225e+06, 3.430235549693350e+02, 2.043737480703814e+06, 2.043738650540533e+06, 3.074431695409954e-01, 3.127951482721339e-01, 3.108978160938056e-01, 3.093153976865503e-01, 3.101215866130309e-01, 3.101217331153939e-01, 3.338635970474035e-01, 3.879834765046909e-02, -1.097965738763741e+01, 1.251898463540785e-01, -8.457904991793531e-02, 3.215846723655821e-01, -3.797183456730341e-02, 5.975267888309695e+00, 3.451969869941759e+00, 1.337295491324644e+00, -1.500974189473668e+00, -3.389669585975183e-01, -1.532932179555350e-02, 1.673706816754012e+03, 5.867058113093228e+02, -7.349423683628072e-02, 1.663672490647912e+02, 1.442437658171440e+02, 1.022742146480784e+05, 8.363882288168848e+07, 9.043637242650788e+06, 1.928976211449695e+02, 2.579643222990173e+06, 2.579643226619731e+06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_rda_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_rda", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([7.230285743453327e-02, 7.230458308072693e-02, 7.230996151040017e-02, 7.228443026465255e-02, 7.229813131489826e-02, 7.229813131489826e-02, 2.597145970218355e-01, 2.598322031529874e-01, 2.629286264027533e-01, 2.614174298455122e-01, 2.616633677084529e-01, 2.616633677084529e-01, 8.233848895278481e-02, 8.203726907799200e-02, 7.691101430316852e-02, 7.364263478363041e-02, 7.461525951566161e-02, 7.461525951566161e-02, 4.535018754555017e-02, 4.525040970505128e-02, 1.407506420812999e-01, 6.034579482455570e-02, 5.274666773776233e-02, 5.274666773776229e-02, 4.865656290406830e-06, 6.610708875066530e-06, 2.618093679172742e-03, 7.641433758215642e-07, 2.461672073686581e-06, 2.461672073686688e-06, 1.488127405990305e+00, 1.483542620159389e-01, 4.204415233347061e-03, 4.051303765256630e-01, 1.377642675904800e-01, 2.013973510764109e-01, 4.328177822790625e-04, 8.886635358600649e-02, 7.623817599411496e-02, 8.023398766418353e-02, 8.492248796242438e-02, 2.046363176220264e-01, 1.675746121229095e-01, 4.864800697582955e-01, 2.100546415961870e-01, 2.711044850611772e-01, 2.410709072878815e-01, 1.293366574335278e-01, 1.880284121029829e-03, 5.538825199500921e-02, 5.257604425603585e-05, 2.669187454690045e-01, 2.619967560995835e-02, 1.042165565551405e-02, 9.524910159682744e-10, 1.530477870054264e-15, 5.311452838289430e-15, 3.238295426112534e-04, 6.238764444350743e-08, 1.003846890428867e-11, 7.923793868671004e-10, 6.065677302398563e-09, 2.036486581408724e-11, 1.002468003261123e-05, 5.982878097509890e-08, 4.888515378922382e-12, 6.479187709841930e-11, 2.199267487011451e-01, 2.803959632335505e+00, 1.289227589732370e-01, 1.313703049832277e-01, 2.728399141153278e-02, 1.301023340951681e-01, 2.322488509108474e-04, 1.483324406215020e-04, 1.514316985782050e-02, 1.545124493365329e-01, 7.935387701485098e-02, 1.347921685503310e-01, 7.122075365441028e-05, 1.253992506068654e-02, 1.641305386852268e-01, 1.267482779023247e-04, 1.244755318271055e-02, 3.395337984308597e-09, 5.970649768360695e-11, 7.554232837101669e-12, 7.388685242246705e-03, 2.555590060345605e-10, 7.482268088987424e-11])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
