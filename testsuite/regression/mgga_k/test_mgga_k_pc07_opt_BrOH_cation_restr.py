
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_k_pc07_opt_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_pc07_opt", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([9.576367974801365e+02, 9.576137152017669e+02, 9.575583428865839e+02, 9.579007924317527e+02, 9.577146356803477e+02, 9.577146356803477e+02, 7.658271628482571e+01, 7.656633783520695e+01, 7.613346242264184e+01, 7.629025062542382e+01, 7.627473806048040e+01, 7.627473806048040e+01, 5.941846610903247e+00, 5.964688767694707e+00, 6.545678291310472e+00, 6.262188251803429e+00, 6.308758374104960e+00, 6.308758374104960e+00, 6.983626063259895e-01, 6.786387100943124e-01, 1.259792215476409e+01, 1.006361259513962e+00, 8.141065717118439e-01, 8.141065717118441e-01, 8.003348858061450e-01, 7.849108702406843e-01, 1.372949156013311e+00, 7.843312974065231e-01, 7.077682265117650e-01, 7.077682265117641e-01, 9.386678377393887e+02, 4.736896352310713e+02, 4.137020142314888e+01, 6.458044153197344e+02, 4.122190207527881e+01, 2.067820844037469e+02, 2.950540250331974e+01, 6.886272814338460e+01, 3.898101862153159e+01, 3.830390940156624e+01, 3.824784473307157e+01, 2.651421027795011e+01, 8.365269627687379e+00, 1.199029408659323e+01, 7.777171512580016e+00, 2.145295770769229e+00, 2.417955666226923e+00, 3.327087780396180e+00, 9.219337397706971e-01, 2.996953938552526e+00, 8.996643050506318e-01, 2.516819663816178e+01, 7.404162975527331e-01, 7.404162975527331e-01, 6.677713945399222e-01, 7.061853510818095e-01, 2.817461220701049e-01, 8.107085906494392e-01, 4.142542018201604e-01, 4.129973716917622e-01, 1.509044526745353e+00, 1.630405759834483e+00, 1.588720490675410e+00, 1.641656984771548e+00, 1.564525554571115e+00, 1.570809914234362e+00, 1.387587158167594e+00, 1.533772492507855e+00, 9.226164232600100e+00, 4.949091981250061e-01, 2.566186543991055e+00, 4.725182077777013e+00, 7.840969303456149e+00, 1.064541222388073e+00, 1.040168206109542e+00, 6.698639965281545e-01, 2.596683683064529e+00, 1.716345818893312e+00, 1.684337636087048e+00, 9.656265679940101e-01, 1.566542424127638e+00, 8.634948096043403e-01, 7.143488347941436e-01, 7.143488347941434e-01, 8.118648404256343e-01, 3.188777887564307e-01, 4.583026422469370e-01, 7.255536168961272e-01, 3.674669729849501e-01, 3.674669729849498e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_k_pc07_opt_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_pc07_opt", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-9.576367974801361e+02, -9.576137152017666e+02, -9.575583428865840e+02, -9.579007924317524e+02, -9.577146356803473e+02, -9.577146356803473e+02, 8.678720129481998e+01, 8.678610774179079e+01, 8.676091819901454e+01, 8.679476019390178e+01, 8.677012469472598e+01, 8.677012469472598e+01, 3.150317525249142e+00, 3.140625048642744e+00, 2.904959203209788e+00, 2.964998013675806e+00, 2.954995767561198e+00, 2.954995767561198e+00, 2.704018282317094e-01, 2.745262210419740e-01, 3.985302280354360e+00, 7.425245655114943e-02, 1.549003396930610e-01, 1.549003396930612e-01, -9.022124460901384e-01, -8.893785291243658e-01, -8.331576744231568e-02, -8.068303071908779e-01, -7.417550004301924e-01, -7.417550004301915e-01, 1.175582503323561e+03, 1.873391153745939e+02, -4.137020142314886e+01, 1.408315646343971e+03, -4.122190207527880e+01, 1.921374422344669e+02, -2.381780099342939e+01, 2.612664097227148e+01, 2.873233962168657e+01, 2.885586143662305e+01, 2.936618432566078e+01, -2.637313873175879e+01, 1.561865712596007e+01, 9.536909391838446e+00, 1.385503204288039e+01, 2.233981894274783e+00, 2.528229664908307e+00, 2.583293618330898e+00, -9.219337397706977e-01, 3.596843994843051e-01, -8.996643050506312e-01, 2.614533732296578e+01, -7.404162975527325e-01, -7.404162975527325e-01, -6.672988357568731e-01, -7.060576075104996e-01, -2.816723889286760e-01, -8.107085906494390e-01, -4.128644848716978e-01, -4.129222038524920e-01, 2.303381707335174e+00, 2.126962647292499e+00, 2.191687656598061e+00, 2.519337904526632e+00, 2.197157091508203e+00, 2.216635422130412e+00, 2.217078549845381e+00, 1.629037227695776e+00, 1.484350015348895e+01, -4.949091981250062e-01, 2.004931187992077e+00, 8.267097030388713e+00, 1.932125231595000e+01, -1.064541222388072e+00, -8.236480524095380e-01, -6.698639965281546e-01, 5.323515612090347e-01, 6.028481330067342e-01, 1.519503541775306e+00, -9.656265679940094e-01, -3.028465548781945e-01, 8.218860099871326e-01, -7.143488347941434e-01, -7.143488347941430e-01, -8.118648404256337e-01, -3.188777887564304e-01, -4.583009376574119e-01, -7.255536168961264e-01, -3.674669729849501e-01, -3.674669729849495e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_pc07_opt_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_pc07_opt", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([6.465558408889446e-06, 6.465504314368240e-06, 6.465247135945692e-06, 6.466052320295345e-06, 6.465632777057504e-06, 6.465632777057504e-06, -1.716092849171559e-04, -1.715858083576285e-04, -1.708911395080743e-04, -1.705610016366267e-04, -1.708977359656034e-04, -1.708977359656034e-04, 1.751171226566355e-02, 1.753704313224357e-02, 1.826679661414831e-02, 1.892488033159551e-02, 1.874316818981871e-02, 1.874316818981871e-02, -1.380213790522896e+00, -1.319692817123571e+00, 7.578308282211580e-03, 8.560082804085635e-01, -2.765640861402704e-01, -2.765640861402703e-01, 3.999231128606431e+05, 3.504224814490990e+05, -2.469827261751256e+02, 1.630694780819214e+06, 8.727688826200303e+05, 8.727688826200300e+05, 1.545707909962537e-03, 3.580637365626250e-05, 4.463865483604211e-04, 1.831622008728773e-03, 4.462746898771731e-04, -1.092762732820683e-05, 6.493401286464719e-03, 5.640004530595049e-04, -8.765854831254580e-04, -8.136594441911709e-04, -8.956539148556015e-04, 8.222304641412720e-03, 1.134161974287885e+00, 4.233917303959610e-01, 1.479193212793926e+00, -1.977304899225048e-02, -3.563054862140325e-02, 2.557224190578510e-02, 8.282011699658828e+01, 3.468670799440784e+01, 1.046004417152880e+02, -1.150783819826689e-04, 5.124476217261497e+01, 5.124476217261497e+01, 3.250866970864729e+06, 1.597483197005432e+06, 3.573145987289322e+06, 3.437938582102904e+02, 2.053728061997730e+06, 2.043647315525182e+06, 3.075878539323303e-01, 3.124345132493521e-01, 3.108770487183681e-01, 3.255551911135183e-01, 3.089983840672432e-01, 3.101331971596690e-01, 3.338238179627907e-01, -1.352216145685759e-02, 2.037430447569025e+00, 4.031650116453307e-01, 3.001288549269748e-02, 1.102803305873348e+00, 7.342839309651032e-01, 5.986104049931646e+00, 2.958425740532144e+00, 1.499685834607407e+00, 9.224827621710363e-02, 1.662106114045646e-01, -7.728486624456460e-02, 1.674445854271037e+03, 9.974077174144202e+01, -2.011648758639293e-01, 1.665281126261038e+02, 1.665281126261037e+02, 1.022742173599572e+05, 8.363882291868500e+07, 9.043605665328367e+06, 2.011089761174724e+02, 2.579643228134502e+06, 2.579643228134509e+06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_pc07_opt_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_pc07_opt", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 2.091184895373105e-01, 2.091154471362526e-01, 2.090265459804553e-01, 2.089888476212869e-01, 2.090252698168777e-01, 2.090252698168777e-01, 1.730226564830006e-01, 1.730610901492291e-01, 1.738941906593438e-01, 1.727702116653933e-01, 1.730499668854039e-01, 1.730499668854039e-01, 2.106035199377244e-01, 2.104828464389654e-01, 1.807675140073066e-01, 1.871314506439179e-01, 1.933207623531898e-01, 1.933207623531898e-01, -6.024726225918889e-02, -6.424985641079953e-02, 2.824988512961695e-01, -1.341678216963178e-02, -2.311316417184993e-02, -2.311316417184972e-02, 6.513404633933963e-04, 1.780523940383280e-01, 0.000000000000000e+00, -3.536875734412825e-02, 0.000000000000000e+00, 1.926550730378418e-01, -5.076533217790424e-04, 1.766106456250343e-01, 2.072043342154190e-01, 2.061175219880300e-01, 2.083223715867321e-01, 4.512058574748480e-04, -2.950636348329898e-02, 8.568590542536922e-02, -3.345113237835317e-02, 1.985348363205618e-01, 2.103027061916329e-01, 1.721491793774029e-01, 0.000000000000000e+00, -5.664425079672980e-02, 0.000000000000000e+00, 1.904194451955023e-01, 0.000000000000000e+00, 0.000000000000000e+00, -1.086037310233975e-05, -1.521587050793002e-11, -2.824717533696495e-11, 0.000000000000000e+00, -2.558857600947371e-04, -5.185604045625891e-08, -6.156229947659292e-10, -4.015098155335943e-09, -1.309645046357101e-11, -7.855880716227951e-06, -3.805759362150121e-08, -3.962946906946087e-12, -3.846080555304058e-11, 1.922056402794901e-01, -5.204760007141877e-02, 0.000000000000000e+00, 1.751814778480912e-01, -1.082998910408509e-02, -2.049108080738852e-02, 0.000000000000000e+00, -2.964212162976043e-04, 0.000000000000000e+00, 1.849140702641729e-01, 1.757220250708903e-01, 2.092440606852767e-01, 0.000000000000000e+00, 2.187961752704076e-01, 2.103532556721019e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.066718898853066e-08, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
