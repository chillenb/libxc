
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_k_csk1_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([1.614168501220756e+03, 1.614151097027089e+03, 1.614117894920009e+03, 1.614375731292189e+03, 1.614234357398580e+03, 1.614234357398580e+03, 8.338700548676547e+01, 8.337261439205508e+01, 8.299791406376772e+01, 8.318416655864186e+01, 8.314164453187416e+01, 8.314164453187416e+01, 5.902597921374561e+00, 5.925062997209745e+00, 6.496949190596034e+00, 6.226325773872906e+00, 6.289561598130844e+00, 6.289561598130844e+00, 7.192452856146310e-01, 7.003162999287509e-01, 1.225773006441606e+01, 9.864324843287396e-01, 8.391493957680188e-01, 8.391493957680188e-01, 8.619337891616601e-01, 8.452007149960010e-01, 1.092901508082865e+00, 9.647926139436971e-01, 8.586993307281974e-01, 8.586993307281972e-01, 1.163305962958880e+03, 4.607481897939805e+02, 4.247562365607953e+01, 2.337948030882008e+03, 6.283970126510084e+01, 2.080496678789304e+02, 2.724945137725433e+01, 6.801231060363961e+01, 4.162125083348481e+01, 4.114022944134589e+01, 4.074978506919921e+01, 3.318839675593692e+01, 3.558983510443561e+01, 1.258187465649583e+01, 2.926703027113372e+01, 2.176475947782150e+00, 2.539337432100533e+00, 3.319566289104265e+00, 9.221754130322530e-01, 5.553615614797248e+00, 8.996943969012718e-01, 2.530618094381838e+01, 7.545241970752663e-01, 7.470665038979247e-01, 5.149997896707569e+00, 5.059973746758540e+03, 2.817690239788896e-01, 8.108098103166685e-01, 1.360774814615487e+00, 4.137919034225388e-01, 2.109340682685623e+05, 2.203822220711117e-01, 1.710099659643582e-01, 1.889720158693735e+03, 1.506000416219324e-01, 2.669751752197311e+06, 3.573588924062011e-02, 1.804374018208505e+00, 1.890565863768249e+01, 6.916595828200280e-01, 2.558771808686829e+00, 4.630067130532125e+01, 4.752590440124794e+01, 1.064949922087967e+00, 9.841024519491062e-01, 6.809449551762257e-01, 2.510438765626136e+00, 1.699582296977030e+00, 1.803765411569081e+00, 9.656338253962343e-01, 1.272564158052444e+00, 9.195822455690463e-01, 7.157537492766847e-01, 7.185407234114577e-01, 8.120356358533083e-01, 3.205942872068971e-01, 4.583345262495642e-01, 7.258900310127696e-01, 3.710531394602836e-01, 3.710531394118423e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_k_csk1_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([1.139161295466338e+03, 1.139060030800067e+03, 1.139202766739934e+03, 1.139090161049824e+03, 1.139288671846318e+03, 1.139226226260828e+03, 1.138820696127812e+03, 1.138629688382189e+03, 1.139188400631100e+03, 1.138833511138472e+03, 1.139188400631100e+03, 1.138833511138472e+03, 8.737795369330829e+01, 8.738639397054745e+01, 8.737787591369168e+01, 8.738724105842272e+01, 8.738596258374832e+01, 8.739191811009026e+01, 8.734498062437360e+01, 8.735909938367814e+01, 8.734991342908127e+01, 8.736426273049021e+01, 8.734991342908127e+01, 8.736426273049021e+01, 3.136173329908093e+00, 3.174383174583706e+00, 3.121833828591177e+00, 3.168707489947442e+00, 2.930970147640966e+00, 2.865617035952471e+00, 2.940613671681932e+00, 2.961798297591084e+00, 3.242742992261856e+00, 2.597030847296133e+00, 3.242742992261856e+00, 2.597030847296133e+00, 1.486846863671906e-01, 3.302112009858138e-03, 1.566396613250839e-01, 2.034667393349049e-02, 4.147763104386704e+00, 4.499124298462974e+00, 4.408321997606465e-02, 4.690764856755236e-02, 1.578598428194840e-01, -1.890408981171169e-02, 1.578598428194840e-01, -1.890408981171139e-02, -8.059404309904425e-02, -8.095601468449677e-02, -7.847056877692901e-02, -7.861430121252480e-02, -9.364623061646349e-02, -9.194660150290164e-02, -8.445825116012076e-02, -8.563463355505303e-02, -8.073587105702262e-02, -5.077295248212526e-02, -8.073587105702223e-02, -5.077295248212548e-02, 2.002720020765978e+02, 2.001745464648464e+02, 2.003842707736226e+02, 2.002829790906943e+02, -3.747524592304662e+01, -3.790613063329702e+01, 2.003748060381416e+02, 2.002769454011033e+02, 2.846762825653303e+01, 2.873280344746941e+01, 2.003293345887517e+02, 2.002289849913731e+02, -2.706614416843227e+01, -2.704240745733131e+01, 2.637153964752542e+01, 2.635551195897581e+01, 2.310076543038057e+01, 2.349709222836028e+01, 2.192407561454509e+01, 2.337535278256499e+01, 2.587609046498135e+01, 2.488063937854074e+01, -8.590108633944128e-01, -9.577964753581446e-01, 2.511961641559664e+00, 2.498950439556877e+00, 3.037350766590898e+00, 3.041006988663286e+00, 2.051572969683480e+00, 2.214002476010930e+00, 2.296020220699454e+00, 2.450176569379046e+00, 2.730413053534675e+00, 2.461222062900512e+00, 2.730413053534676e+00, 2.461222062900514e+00, -9.279666045683619e-01, -9.144706120620065e-01, 1.154084545466835e-01, 1.176230775060941e-01, -9.014243902706625e-01, -8.979816350097044e-01, 2.759427928822242e+01, 2.756991065711439e+01, -7.263525444821330e-01, -5.778418177108600e-01, -7.935613421944173e-01, -6.624190529333503e-01, -7.132009691837608e-02, -7.665975820094145e-02, -7.681624621648110e-02, -7.994547121415736e-02, -2.899528173097720e-01, -2.748789586022384e-01, -8.027684706781428e-01, -8.183868148889510e-01, -4.564314655543317e-02, -4.599145277494066e-02, -4.112409723267733e-01, -4.147767829866856e-01, 2.607206957520255e+00, 2.627668468846375e+00, -2.216538140092542e-01, -2.190025638378751e-01, -1.723404827925372e-01, -1.696877624667326e-01, 2.590874612873236e+00, 2.611264530469513e+00, -1.514971089372772e-01, -1.493229387746765e-01, 2.584188895572688e+00, 2.604682240820060e+00, -3.577123007503098e-02, -3.568872970952573e-02, 1.153878060184529e+00, 1.135913496758665e+00, 1.908172513866171e+00, 1.926835533285502e+00, 1.962696393470844e-01, 9.618864011625773e-02, 2.016746052675512e+00, 2.032349079989890e+00, 2.016746052675514e+00, 2.032349079989891e+00, 3.330802288922535e+00, 3.343196864606579e+00, -1.064452626091829e+00, -1.061928482618677e+00, -9.895674330164508e-01, -9.748277266083445e-01, -6.320120738178844e-01, -6.334575600733594e-01, 5.986934856907230e-01, 5.990500998375016e-01, 5.986934856907219e-01, 5.990500998374997e-01, 1.424687326752728e+00, 1.446254781932635e+00, -9.661121379227380e-01, -9.651123836259330e-01, -9.027678949033713e-02, -8.765255771995395e-02, 7.862473931604316e-01, 8.053593958642263e-01, -7.597781261922393e-01, -6.780788209900410e-01, -7.196170571112480e-01, -6.594997608161646e-01, -8.165376845280575e-01, -8.079897531623752e-01, -3.662903376888741e-01, -2.752101342311971e-01, -4.661839788523034e-01, -4.518103151993638e-01, -7.216736459031724e-01, -7.271408839148484e-01, -2.863698113918268e-01, -4.071377722426072e-01, -2.863698114313801e-01, -4.071377724602304e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_csk1_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.065269490774201e-05, 0.000000000000000e+00, 1.065296444157722e-05, 1.065257580721051e-05, 0.000000000000000e+00, 1.065287787492207e-05, 1.065220153840846e-05, 0.000000000000000e+00, 1.065233996008547e-05, 1.065354830097633e-05, 0.000000000000000e+00, 1.065405590166928e-05, 1.065262351217913e-05, 0.000000000000000e+00, 1.065337542340975e-05, 1.065262351217913e-05, 0.000000000000000e+00, 1.065337542340975e-05, 3.388446551378431e-04, 0.000000000000000e+00, 3.385001269128220e-04, 3.389217090018821e-04, 0.000000000000000e+00, 3.385201116564869e-04, 3.401734819362733e-04, 0.000000000000000e+00, 3.403183297112594e-04, 3.412963667333117e-04, 0.000000000000000e+00, 3.409124228429244e-04, 3.388115088420902e-04, 0.000000000000000e+00, 3.423263646958544e-04, 3.388115088420902e-04, 0.000000000000000e+00, 3.423263646958544e-04, 4.667461145221176e-02, 0.000000000000000e+00, 4.612395146325179e-02, 4.689321097635709e-02, 0.000000000000000e+00, 4.621463633112640e-02, 4.994882394901868e-02, 0.000000000000000e+00, 5.099549189915797e-02, 4.939092349845110e-02, 0.000000000000000e+00, 4.907131443530170e-02, 4.507879902990573e-02, 0.000000000000000e+00, 5.485833637143311e-02, 4.507879902990573e-02, 0.000000000000000e+00, 5.485833637143311e-02, 2.858534527300161e+00, 0.000000000000000e+00, 8.116953619001038e+00, 2.755405214917251e+00, 0.000000000000000e+00, 7.672042137237910e+00, 3.079054087698469e-02, 0.000000000000000e+00, 2.788293394427504e-02, 6.288631284196602e+00, 0.000000000000000e+00, 6.035296962706517e+00, 2.717379133211836e+00, 0.000000000000000e+00, 1.626120712905741e+01, 2.717379133211838e+00, 0.000000000000000e+00, 1.626120712905741e+01, 7.027225571371324e+04, 0.000000000000000e+00, 5.856688593214098e+04, 6.107291919356678e+04, 0.000000000000000e+00, 4.967907484320510e+04, 3.552399912250694e+02, 0.000000000000000e+00, 3.016560446116364e+02, 3.235066880902121e+05, 0.000000000000000e+00, 3.402326908284780e+05, 9.898051322621966e+04, 0.000000000000000e+00, 5.371167945798205e+05, 9.898051322621966e+04, 0.000000000000000e+00, 5.371167945798200e+05, 9.916409713746271e-05, 0.000000000000000e+00, 9.923539214075449e-05, 9.910856222839115e-05, 0.000000000000000e+00, 9.918169781180323e-05, 8.923026681747974e-04, 0.000000000000000e+00, 8.929860989119421e-04, 9.911306490014708e-05, 0.000000000000000e+00, 9.918455754416397e-05, 8.435829739947883e-04, 0.000000000000000e+00, 8.437643557705661e-04, 9.913587584026417e-05, 0.000000000000000e+00, 9.920845733205202e-05, 1.680997620701557e-02, 0.000000000000000e+00, 1.681246407804274e-02, 1.827125224583641e-03, 0.000000000000000e+00, 1.828617744012938e-03, 3.041338804842537e-03, 0.000000000000000e+00, 2.918006261615552e-03, 3.706128939928685e-03, 0.000000000000000e+00, 3.108051246494080e-03, 2.173480491491094e-03, 0.000000000000000e+00, 2.515473914984109e-03, 1.239203582868322e-02, 0.000000000000000e+00, 1.235746664393055e-02, 6.904617237699867e-02, 0.000000000000000e+00, 6.959748788580875e-02, 5.410619559824963e-02, 0.000000000000000e+00, 5.403257305262277e-02, 9.250574436068019e-02, 0.000000000000000e+00, 8.300978993081132e-02, 8.191067848015529e-02, 0.000000000000000e+00, 7.425980209199574e-02, 6.137603746458187e-02, 0.000000000000000e+00, 7.154888608069736e-02, 6.137603746458187e-02, 0.000000000000000e+00, 7.154888608069730e-02, 1.680215536822793e+02, 0.000000000000000e+00, 1.633043679068273e+02, 2.703017172811141e+00, 0.000000000000000e+00, 2.662948993735825e+00, 2.269834595520902e+02, 0.000000000000000e+00, 1.940016582352415e+02, 1.977993278662029e-03, 0.000000000000000e+00, 1.980661619139016e-03, 1.044499987437266e+02, 0.000000000000000e+00, 8.505526588198168e+01, 1.111596317804436e+02, 0.000000000000000e+00, 9.324482226051282e+01, 7.662495719078560e+05, 0.000000000000000e+00, 6.826841573576160e+05, 3.631779455935363e+05, 0.000000000000000e+00, 3.471746546494351e+05, 7.817219853849011e+06, 0.000000000000000e+00, 6.581441351138418e+06, 6.939599712406458e+02, 0.000000000000000e+00, 6.813174719661092e+02, 8.152459899425586e+05, 0.000000000000000e+00, 3.147553654306371e+05, 7.337213909482709e+06, 0.000000000000000e+00, 2.832798288873709e+06, 6.871839602795703e-02, 0.000000000000000e+00, 6.792759034498436e-02, 6.292686935876455e-01, 0.000000000000000e+00, 6.219547128567218e-01, 6.254503941823402e-01, 0.000000000000000e+00, 6.181833347859600e-01, 6.914402586669245e-02, 0.000000000000000e+00, 6.834793788717505e-02, 6.238719996818064e-01, 0.000000000000000e+00, 6.166568951292741e-01, 6.931911119514284e-02, 0.000000000000000e+00, 6.851743287934708e-02, 6.710491118723243e-01, 0.000000000000000e+00, 6.644380041916425e-01, 4.413487870784389e-01, 0.000000000000000e+00, 4.530315525053738e-01, 1.028254017897388e-01, 0.000000000000000e+00, 1.014684543430237e-01, 7.727636343766655e-01, 0.000000000000000e+00, 7.753809557742821e-01, 9.626312684971289e-02, 0.000000000000000e+00, 9.519827969193487e-02, 9.626312684971289e-02, 0.000000000000000e+00, 9.519827969193487e-02, 4.704042806053953e-02, 0.000000000000000e+00, 4.681121554844254e-02, 1.207671635089777e+01, 0.000000000000000e+00, 1.186934675738286e+01, 7.016971513958895e+00, 0.000000000000000e+00, 6.810007310641516e+00, 3.022065816635275e+00, 0.000000000000000e+00, 2.972725877835716e+00, 5.064526436761558e-01, 0.000000000000000e+00, 5.069890000954181e-01, 5.064526436761563e-01, 0.000000000000000e+00, 5.069890000954180e-01, 1.580930254746016e-01, 0.000000000000000e+00, 1.560614151054001e-01, 3.383492187131344e+03, 0.000000000000000e+00, 3.314977195500117e+03, 1.544636404285685e+02, 0.000000000000000e+00, 1.399350496871409e+02, 3.805360203013646e-01, 0.000000000000000e+00, 4.032650915058265e-01, 3.625697900821776e+02, 0.000000000000000e+00, 3.079837563051370e+02, 3.483832059770887e+02, 0.000000000000000e+00, 3.029836422369621e+02, 2.160802635398730e+05, 0.000000000000000e+00, 1.941851121047516e+05, 1.678524443437921e+08, 0.000000000000000e+00, 1.667067706066983e+08, 1.992427887587661e+07, 0.000000000000000e+00, 1.656041588063272e+07, 4.120755322615361e+02, 0.000000000000000e+00, 3.925784953425193e+02, 8.633543549048875e+06, 0.000000000000000e+00, 3.678861720575085e+06, 8.633543549059713e+06, 0.000000000000000e+00, 3.678861720611704e+06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_csk1_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk1", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([3.303660898587389e-02, 3.303329748907910e-02, 3.303683886217754e-02, 3.303346509401728e-02, 3.303718100568433e-02, 3.303406135628544e-02, 3.303456798834382e-02, 3.303073824427669e-02, 3.303676624747078e-02, 3.303176985135241e-02, 3.303676624747078e-02, 3.303176985135241e-02, 1.662965247451373e-01, 1.663189508849055e-01, 1.662915041203127e-01, 1.663176247311187e-01, 1.662095766993203e-01, 1.661991955940774e-01, 1.661352084309154e-01, 1.661583443856369e-01, 1.663092327653858e-01, 1.660653556867716e-01, 1.663092327653858e-01, 1.660653556867716e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666668e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666668e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666665842380500e-01, 1.211669941765207e-01, 1.666666666644151e-01, 1.214242813962015e-01, 1.666666666666668e-01, 1.666666666666668e-01, 1.666666666666667e-01, 1.666666666666668e-01, 1.649528775129516e-01, 1.666666666666667e-01, 1.649528775129515e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666668e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666668e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666665e-01, 1.666666666666666e-01, 3.020325682010405e-05, 2.391390585667986e-05, 1.666666666666665e-01, 1.666666666666667e-01, 1.022164196263516e-02, 1.031325049014465e-02, 1.666666666666666e-01, 1.666666666666666e-01, 1.912967688782701e-06, 2.589678977311124e-06, 1.666666666666668e-01, 1.666666666666667e-01, 1.542020991257453e-01, 1.553863417308145e-01, 1.461386552000890e-01, 1.526255198917008e-01, 1.626152079735760e-01, 1.590763558090127e-01, 4.562008178218310e-02, 4.786657629530812e-02, 1.666666666666668e-01, 1.666666666666668e-01, 1.666666666666667e-01, 1.666666666666668e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666666e-01, 1.666666666666666e-01, 1.666666666666666e-01, 1.193579886591567e-05, 1.262537848931159e-05, 1.666666666666667e-01, 1.666666666666669e-01, 2.334579577393120e-07, 2.879674450305943e-07, 1.666666666666667e-01, 1.666666666666667e-01, 1.289433206767177e-02, 1.847451530067325e-02, 1.678056605273470e-03, 2.199876429114222e-03, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666665e-01, 1.666666666666666e-01, 1.776829944163486e-17, 6.113200813965275e-17, 2.288768923836291e-06, 1.592107773583785e-06, 1.666666666666667e-01, 1.666666666666667e-01, 7.897807958240547e-15, 1.338354069100702e-13, 1.666666666666667e-01, 1.666666666666668e-01, 2.782815498679059e-11, 2.801339909136617e-11, 9.365820865587457e-14, 9.375542272613685e-14, 1.666666666666666e-01, 1.666666666666667e-01, 3.229263551886922e-10, 2.386403348258978e-10, 1.666666666666666e-01, 1.666666666666666e-01, 3.053253384225151e-13, 2.913316724414852e-13, 1.096120209985266e-01, 1.065066692391198e-01, 1.666666666666666e-01, 1.666666666666667e-01, 8.751483177190442e-03, 6.247417851064802e-03, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.171529106737432e-06, 1.160272264704485e-06, 7.213506113543177e-07, 7.356155325027972e-07, 1.438321250211007e-04, 1.287078310563718e-04, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.658128108417560e-01, 1.656461904795757e-01, 3.424001632781270e-07, 4.868237915972255e-07, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.644084236887446e-01, 4.893650011613010e-07, 8.594704422297796e-07, 7.336946097051370e-03, 3.044906668190278e-03, 8.702312514292805e-12, 3.314495928874418e-11, 6.866061488883381e-13, 1.753017890143002e-13, 2.784819395369824e-14, 4.361498039310710e-14, 7.784746476248337e-05, 4.157563548541878e-05, 3.527301739354338e-13, 2.536434292352658e-12, 1.177755182964371e-13, 6.706757772457384e-13])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
