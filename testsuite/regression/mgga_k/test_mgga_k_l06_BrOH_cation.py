
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_k_l06_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_l06", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([2.228844384003399e+03, 2.228853328969076e+03, 2.228902740333976e+03, 2.228769503981714e+03, 2.228837943592209e+03, 2.228837943592209e+03, 5.874359272791789e+01, 5.874305040117913e+01, 5.873347974609079e+01, 5.877311899753551e+01, 5.874611690147313e+01, 5.874611690147313e+01, 2.325532206346548e+00, 2.324079822512544e+00, 2.300535973741822e+00, 2.319615783155867e+00, 2.334487941145273e+00, 2.334487941145273e+00, 2.171327182512333e-01, 2.177080564485766e-01, 3.415639834814896e+00, 1.618861004204628e-01, 2.114016291528751e-01, 2.114016291528751e-01, 3.718079020278501e-04, 4.124359048636762e-04, 1.252305513022191e-02, 1.234910182301844e-04, 2.473404596829509e-04, 2.473404596829509e-04, 1.908793855316302e+02, 1.403727153620966e+02, 2.692266161634179e+02, 2.344615216130709e+02, 1.402950703519608e+02, 1.279297326979045e+02, 3.897187409205567e+01, 2.154887818117521e+01, 2.043134622296962e+01, 2.062521072235404e+01, 2.061465299450867e+01, 2.082344769082507e+01, 3.182924075877351e+00, 2.495466536319609e+00, 2.724584624116686e+00, 1.481730870479197e+00, 1.705798761998503e+00, 1.717928186084450e+00, 8.474298414871359e-02, 3.033495628136493e-01, 7.286653444798977e-02, 1.701738329773776e+01, 1.120615568764092e-01, 1.125359659070023e-01, 7.362594429689934e-05, 1.180094484717517e-04, 6.926145936218753e-05, 3.284597466000076e-02, 1.111016254710834e-04, 1.111016290897443e-04, 3.539292992445658e+00, 3.498806145949364e+00, 3.513026878970372e+00, 3.524019654150590e+00, 3.518881659960306e+00, 3.518884741860725e+00, 3.350000569081380e+00, 1.230327086863655e+00, 2.312812682538076e+00, 1.560813572656639e+00, 1.340244442202257e+00, 2.714797562531883e+00, 3.819850087551929e+00, 4.889417312247389e-01, 7.052809541140308e-01, 1.176642458673576e+00, 5.924586456926402e-01, 5.272354889412962e-01, 1.044108959451572e+00, 1.143348176062488e-02, 2.126489240916035e-02, 5.591067242301785e-01, 5.345492980575656e-02, 5.293972888071191e-02, 7.383477554753858e-04, 8.429773452510218e-06, 3.731668719050993e-05, 4.680670195697429e-02, 9.347218529954786e-05, 9.347218531474875e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_k_l06_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_l06", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([3.220888520153342e+03, 3.220867416118396e+03, 3.220915068655140e+03, 3.220886702422920e+03, 3.220996096174581e+03, 3.221003886635881e+03, 3.220696268256108e+03, 3.220621738159310e+03, 3.220904552709299e+03, 3.220771589214148e+03, 3.220904552709299e+03, 3.220771589214148e+03, 8.733236854476687e+01, 8.733653908066537e+01, 8.733332966806353e+01, 8.733769001217578e+01, 8.735901530484846e+01, 8.736732845443807e+01, 8.733267540250880e+01, 8.734201298762774e+01, 8.730170955170053e+01, 8.736793546647699e+01, 8.730170955170053e+01, 8.736793546647699e+01, 3.108903445011161e+00, 3.149668637272548e+00, 3.093848297994796e+00, 3.143554283912207e+00, 2.885828253109271e+00, 2.815497163326167e+00, 2.903197083345097e+00, 2.928091459114591e+00, 3.217166199295287e+00, 2.483583848564515e+00, 3.217166199295287e+00, 2.483583848564515e+00, 1.339319682526106e-01, 1.345095113822726e-01, 1.344677629652007e-01, 1.411329479590765e-01, 3.729898395245034e+00, 4.210562382015154e+00, 2.082623931484589e-01, 2.023110011687555e-01, 1.422485840948048e-01, 1.445011160471517e-01, 1.422485840948046e-01, 1.445011160471517e-01, 5.788982659363324e-04, 6.536670633379692e-04, 6.356610134664842e-04, 7.294722893215106e-04, 1.963507657909167e-02, 2.189055694571604e-02, 2.091878789565131e-04, 2.022745935480309e-04, 4.607074865124298e-04, 1.491922278327413e-04, 4.607074865124299e-04, 1.491922278327413e-04, 1.972808010590456e+02, 1.855490896031353e+02, 1.858338187706180e+02, 1.860049061575984e+02, 4.081220313208369e+02, 4.175783863342975e+02, 2.533488081604350e+02, 2.602488189142696e+02, 1.813858754666903e+02, 1.814041059387654e+02, 1.998699297747497e+02, 2.001829533068314e+02, 6.485340647343243e+01, 6.479531554519964e+01, 2.551825750387585e+01, 2.550827490774383e+01, 2.470380597645770e+01, 2.488869606181656e+01, 2.508918570109723e+01, 2.530080340920379e+01, 2.608384933410328e+01, 2.565405406694772e+01, 2.501520045639382e+01, 2.465590193059969e+01, 3.714105029743251e+00, 4.275549122328657e+00, 2.870993209328471e+00, 2.887534133068894e+00, 3.645161392252319e+00, 3.209663537609336e+00, 2.292259674636381e+00, 2.448629504343864e+00, 2.731058633652285e+00, 2.462330170958424e+00, 2.723323001314153e+00, 2.451607121317034e+00, 1.394097630309137e-01, 1.420390217632650e-01, 4.920041793258823e-01, 4.963095809512948e-01, 1.146181683764337e-01, 1.272633129809849e-01, 2.753532233710240e+01, 2.751104277647553e+01, 1.592684100594625e-01, 1.580138017029021e-01, 1.601242566608855e-01, 1.612525708942973e-01, 1.177276817352387e-04, 1.271487823575691e-04, 1.936626085965636e-04, 1.995691531198033e-04, 1.082892995441290e-04, 1.214524886993176e-04, 5.437010788467380e-02, 5.505509799663414e-02, 1.129621557402990e-04, 2.130475833378912e-04, 1.129621565804722e-04, 2.130476073350231e-04, 5.875931077612270e+00, 5.921447669332620e+00, 5.808485299929617e+00, 5.853933709419118e+00, 5.832102944118418e+00, 5.877720082163553e+00, 5.846911839664683e+00, 5.890798439108504e+00, 5.841909058770039e+00, 5.887395477564039e+00, 5.841935601950008e+00, 5.887415681452784e+00, 5.564816962104924e+00, 5.601669025308651e+00, 1.671957542212132e+00, 1.687725378354137e+00, 2.490734247012730e+00, 2.532438404944986e+00, 1.899650048989187e+00, 1.870790962069338e+00, 2.012243002335669e+00, 2.027964266735107e+00, 3.971114026224703e+00, 3.977662462339741e+00, 4.276517986736440e+00, 4.224291701508478e+00, 8.097534508169715e-01, 8.191595922996370e-01, 1.163114563470871e+00, 1.186536885823808e+00, 1.681139712390621e+00, 1.730345522097591e+00, 5.407540702559103e-01, 5.401468879137464e-01, 5.750945415455807e-01, 5.746913075928947e-01, 1.421499982371352e+00, 1.444516546811073e+00, 1.892303661522880e-02, 1.918194012606506e-02, 3.415586559694666e-02, 3.648175846818756e-02, 7.853777384743355e-01, 8.093590987313068e-01, 8.387145829583256e-02, 9.349604610123670e-02, 8.131634012945312e-02, 8.894769323031954e-02, 1.184523533997738e-03, 1.271968835274206e-03, 1.401743815486611e-05, 1.408158701086767e-05, 5.803616243427583e-05, 6.565073653205301e-05, 7.560120981959327e-02, 7.852082573877030e-02, 1.013509225119263e-04, 1.789828636708254e-04, 1.013509225194474e-04, 1.789828637779263e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_l06_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_l06", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.885580596222454e-06, 0.000000000000000e+00, 1.885616721957090e-06, 1.885559800846823e-06, 0.000000000000000e+00, 1.885601609243037e-06, 1.885493786752742e-06, 0.000000000000000e+00, 1.885506906208395e-06, 1.885728865787503e-06, 0.000000000000000e+00, 1.885806459773829e-06, 1.885568164901502e-06, 0.000000000000000e+00, 1.885687153248734e-06, 1.885568164901502e-06, 0.000000000000000e+00, 1.885687153248734e-06, 3.400367452426344e-04, 0.000000000000000e+00, 3.399595998956027e-04, 3.400533670383157e-04, 0.000000000000000e+00, 3.399638675895983e-04, 3.402952069906895e-04, 0.000000000000000e+00, 3.403093113474260e-04, 3.404711641592691e-04, 0.000000000000000e+00, 3.403845342620327e-04, 3.401563421572396e-04, 0.000000000000000e+00, 3.405904529425656e-04, 3.401563421572396e-04, 0.000000000000000e+00, 3.405904529425656e-04, 3.676464289623468e-02, 0.000000000000000e+00, 3.644148309728030e-02, 3.693469969585522e-02, 0.000000000000000e+00, 3.647612500241035e-02, 3.916188418240103e-02, 0.000000000000000e+00, 4.071150002787623e-02, 4.088396056102830e-02, 0.000000000000000e+00, 4.074577014561255e-02, 3.529653082482967e-02, 0.000000000000000e+00, 5.097289118723600e-02, 3.529653082482967e-02, 0.000000000000000e+00, 5.097289118723600e-02, 3.182323247023208e+00, 0.000000000000000e+00, 3.225717111157733e+00, 3.167846048805939e+00, 0.000000000000000e+00, 3.133949978461534e+00, 1.727196953760959e-02, 0.000000000000000e+00, 1.633208824147041e-02, 1.191599070746542e+00, 0.000000000000000e+00, 1.514608065534879e+00, 2.906200306531174e+00, 0.000000000000000e+00, 2.437343954251786e-01, 2.906200306531173e+00, 0.000000000000000e+00, 2.437343954251787e-01, 1.452467641778197e-04, 0.000000000000000e+00, 1.730206403553948e-04, 1.769465536176357e-04, 0.000000000000000e+00, 2.182315766990754e-04, 1.386763217513636e-02, 0.000000000000000e+00, 1.729614165771262e-02, 2.286494430105952e-05, 0.000000000000000e+00, 2.155980352798657e-05, 9.444624761999120e-05, 0.000000000000000e+00, 3.258182120548823e-05, 9.444624761999124e-05, 0.000000000000000e+00, 3.258182120548823e-05, 2.824615415306342e-04, 0.000000000000000e+00, 1.988145254972439e-04, 5.911993319472238e-05, 0.000000000000000e+00, 5.910841546094031e-05, 1.328486193871090e-04, 0.000000000000000e+00, 1.087955878643761e-04, 3.989382511407584e-04, 0.000000000000000e+00, 3.962442340109417e-04, 1.573530079957368e-04, 0.000000000000000e+00, 1.572126017840890e-04, 8.635460827788463e-05, 0.000000000000000e+00, 9.156405367762575e-05, 8.728753792700427e-06, 0.000000000000000e+00, 1.185071207329527e-05, 1.291185864669027e-03, 0.000000000000000e+00, 1.294214640480364e-03, 2.100512345120054e-03, 0.000000000000000e+00, 2.080591314898217e-03, 2.076733553884535e-03, 0.000000000000000e+00, 2.043122701339140e-03, 1.948086481471390e-03, 0.000000000000000e+00, 1.997842988871448e-03, 2.370280290088336e-03, 0.000000000000000e+00, 2.394487245943232e-03, 1.431372244332771e-01, 0.000000000000000e+00, 1.141732764493485e-01, 8.995782571579376e-02, 0.000000000000000e+00, 9.288654750599602e-02, 1.136947050862861e-01, 0.000000000000000e+00, 1.589492056159375e-01, 7.369947329238923e-02, 0.000000000000000e+00, 6.878281644430076e-02, 5.998026894772903e-02, 0.000000000000000e+00, 6.838911381048242e-02, 5.226358143991986e-02, 0.000000000000000e+00, 5.944914085403864e-02, 1.459719775095446e-02, 0.000000000000000e+00, 1.556554419540393e-02, 6.176073931376093e-03, 0.000000000000000e+00, 6.496733818746371e-03, 7.738641099527935e-05, 0.000000000000000e+00, 9.666562136759133e-05, 1.772995669310957e-03, 0.000000000000000e+00, 1.775492279348003e-03, 9.503666456220023e-01, 0.000000000000000e+00, 1.883121086885077e+00, 9.959109812127305e-01, 0.000000000000000e+00, 1.903729652710150e+00, -4.706462821886191e-08, 0.000000000000000e+00, -5.930152762573728e-08, 4.498414545456248e-18, 0.000000000000000e+00, -6.027419580079189e-18, 8.774097770253118e-16, 0.000000000000000e+00, 8.164010656755517e-15, 4.427139008021715e-03, 0.000000000000000e+00, 2.523541514376207e-03, -7.229208294601491e-07, 0.000000000000000e+00, -5.080067089327722e-06, 6.491632876766300e-12, 0.000000000000000e+00, 1.753140877115018e-10, 7.143273050757673e-07, 0.000000000000000e+00, 7.407413079341699e-07, 5.600530125788774e-07, 0.000000000000000e+00, 5.797630253103569e-07, 3.125690165357265e-09, 0.000000000000000e+00, 3.239876414198394e-09, 2.966321781299799e-03, 0.000000000000000e+00, 3.866072869008284e-03, 1.392857625013749e-05, 0.000000000000000e+00, 1.063889101736719e-05, 1.234150896549332e-09, 0.000000000000000e+00, 1.283109757664006e-09, 2.309605042164881e-07, 0.000000000000000e+00, 2.221383164140827e-07, 1.322708912513245e-01, 0.000000000000000e+00, 1.310167607005390e-01, 1.813436170444312e-01, 0.000000000000000e+00, 1.823443471731282e-01, 1.474657424190304e-01, 0.000000000000000e+00, 1.563493342650309e-01, 8.220449250658408e-02, 0.000000000000000e+00, 8.144871191031051e-02, 1.031309363355202e-01, 0.000000000000000e+00, 1.059488673157567e-01, 3.904743709382976e-01, 0.000000000000000e+00, 4.036676550019833e-01, 4.139273659315497e-04, 0.000000000000000e+00, 4.133957753685813e-04, 3.364601218041314e-04, 0.000000000000000e+00, 3.565841347622437e-04, 1.735408798790235e-01, 0.000000000000000e+00, 1.579853101077568e-01, 2.674295091037764e-01, 0.000000000000000e+00, 2.652551189312359e-01, 4.020375537187263e-01, 0.000000000000000e+00, 3.932712737902830e-01, 1.571052747190331e-01, 0.000000000000000e+00, 1.538993719004509e-01, 1.134638976762228e-03, 0.000000000000000e+00, 1.838004487633997e-03, 2.537407586004501e-02, 0.000000000000000e+00, 1.941550082756365e-02, 3.733452318318042e-01, 0.000000000000000e+00, 3.762504127896937e-01, 2.884190859267900e-04, 0.000000000000000e+00, 6.165185625581277e-04, 3.406722400560429e-01, 0.000000000000000e+00, 6.070770087468446e-01, 7.214597097686785e-09, 0.000000000000000e+00, 4.929406340247370e-08, 1.539924688178460e-07, 0.000000000000000e+00, 1.734261856262104e-08, 1.159169053503155e-10, 0.000000000000000e+00, 1.892112755105719e-10, 2.264368835079659e-01, 0.000000000000000e+00, 1.354231799058838e-01, 2.290477337214469e-09, 0.000000000000000e+00, 1.952269024505867e-08, 4.376460761615572e-10, 0.000000000000000e+00, 2.571511856938305e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_l06_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_l06", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([-7.262294634731001e-03, -7.262742771528930e-03, -7.262268556663377e-03, -7.262723738038377e-03, -7.262231610884743e-03, -7.262658326739003e-03, -7.262528597170097e-03, -7.263035880333858e-03, -7.262276693495287e-03, -7.262920160057935e-03, -7.262276693495287e-03, -7.262920160057935e-03, -2.085113369726605e-04, -2.025503367863487e-04, -2.100757387247287e-04, -2.031033325620978e-04, -2.350943454972200e-04, -2.384409521339457e-04, -2.479690728266788e-04, -2.434796967337612e-04, -2.044267318819572e-04, -2.665190961716291e-04, -2.044267318819572e-04, -2.665190961716291e-04, 6.544362315762581e-03, 6.347748615547387e-03, 6.593286744105332e-03, 6.384219564600469e-03, 7.473776813039682e-03, 7.447358521574103e-03, 6.448041635101589e-03, 6.258806489828217e-03, 6.367694781949551e-03, 6.338589729305291e-03, 6.367694781949551e-03, 6.338589729305291e-03, 3.046339155584360e-03, 1.210312900562157e-03, 3.216650951003536e-03, 1.037914843075312e-03, 1.473871961426927e-02, 1.255849385647011e-02, 1.872568705203510e-03, 1.624021889068001e-03, 2.597792204167826e-03, 2.778239610854789e-04, 2.597792204167820e-03, 2.778239610854799e-04, 1.580501589264265e-11, 2.226720106101933e-11, 2.308651155143417e-11, 3.433528728587321e-11, 3.092233908941628e-07, 4.228696578216070e-07, 7.388651216094660e-13, 6.307414258315602e-13, 8.492139095585877e-12, 1.336318497942250e-12, 8.492139095585930e-12, 1.336318497942255e-12, 8.430671383180989e-03, 1.056637925117022e-02, 1.227557383414149e-02, 1.219832914028732e-02, -3.612165056822928e-04, -2.622838711202957e-04, 4.006580303645145e-03, 3.705012223795205e-03, -1.223624568914763e-02, -1.220687819556764e-02, 3.324000940393088e-03, 2.023823175046457e-03, -1.995593314514559e-06, -3.144550528435461e-06, 1.003754420120711e-02, 1.000860620512828e-02, -2.704618771555204e-05, -9.237089185394577e-06, -3.528457691118863e-04, -1.502208859036695e-04, 1.904001340026210e-04, 5.509330421717886e-05, -5.350500629612674e-03, -5.091374863682459e-03, 3.260632569293488e-03, 1.850337819561699e-03, 1.074991830797742e-02, 1.059127477782704e-02, 1.735620386879171e-03, 3.644498964938078e-03, 2.543550131292523e-03, 1.886637859899064e-03, 7.552166879863583e-04, 1.303408030972268e-03, 3.915873918955147e-03, 4.464118087182632e-03, -1.136196820232349e-05, -1.241257589978160e-05, 1.964538782908088e-04, 2.072205032118500e-04, -3.377262605563556e-08, -4.672984438322585e-08, 2.605951464305966e-03, 2.604555989148090e-03, 9.970985450867864e-06, -1.026738626661407e-05, -3.276947302174054e-04, -8.847540851785287e-04, 1.864688023405289e-15, 2.719305590809989e-15, 6.405550010328411e-24, 8.164207593763810e-24, -9.449763628026898e-24, -1.429790035006424e-22, -9.187791966955658e-07, -5.520437276467934e-07, 3.277486456383681e-14, 1.688060483490627e-12, -1.893471379366118e-19, -1.321976158164302e-17, 1.510724171475070e-13, 1.528508879791955e-13, -8.140605737078978e-13, -8.378645820987358e-13, -2.030704099850021e-16, -2.079760076662662e-16, 1.076328319790128e-07, 1.560652807648790e-07, -4.658078118139002e-11, -3.023739335460563e-11, 3.885112839233504e-17, 4.004972148148411e-17, -5.330166355307703e-15, -5.012403411229200e-15, -2.055224825224065e-03, -2.174111781093778e-03, 5.239702646605586e-03, 5.099978302358962e-03, -1.280180549679668e-02, -1.354187356180483e-02, 3.888477305253673e-03, 3.843637842254707e-03, 7.342789987851232e-04, 7.687158732181385e-04, 2.780813456675639e-03, 2.885083755233765e-03, -5.403185732333086e-07, -5.351921444115681e-07, -3.114996824919336e-07, -3.260916381487567e-07, -1.314584909619879e-03, -1.139658129282165e-03, 1.584215210937715e-02, 1.593300079174461e-02, 9.165234670152365e-03, 9.587709544189445e-03, 1.101463429582535e-04, 5.726100537331136e-05, -4.684658118125793e-08, -7.276282422631292e-08, 1.635297944287700e-06, 2.289051679558626e-06, 1.092228809365022e-03, -2.774805325818657e-04, -1.017713578823082e-07, -2.414505285421794e-07, 8.023628384823128e-06, -1.314891619831661e-05, -6.977229359463319e-15, -5.215923146919328e-14, -1.458538881951850e-16, -2.015781034997420e-17, -1.258515185566877e-18, -2.466679882788246e-18, -4.248986991040487e-05, -3.298927571402323e-05, -5.680737581234739e-17, -1.103119244061370e-15, -1.092416972636103e-17, -1.490630755016440e-16])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
