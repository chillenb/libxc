
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_k_l06_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_l06", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.179998418626605e+03, 2.180007098379465e+03, 2.180055021282701e+03, 2.179925697193074e+03, "nan", 3.412585480191983e+03, 9.106492615734903e+01, 1.231320337252549e+02, 1.231503544817229e+02, 1.231652680840954e+02, 9.110203231435193e+01, 1.231380974860956e+02, 4.580939189229362e+00, 4.570888987737737e+00, 4.331441891467598e+00, 4.403410034942715e+00, 3.643845007253769e+00, 4.411332153153588e+00, 2.361418266619573e-01, 2.367281987810042e-01, 4.820652405798155e+00, 1.760711532413151e-01, 2.896829499704914e-01, 2.894959648020780e-01, 3.718080118246711e-04, 4.124360653612668e-04, 1.252664298432736e-02, 1.234910210027295e-04, 2.473405097568026e-04, 2.473404739741197e-04, 2.760173436385301e+02, 2.018454027885353e+02, 2.760223919975759e+02, 2.761118638220375e+02, 2.760685132908824e+02, 2.019107224254976e+02, 2.998566762166426e+01, 3.037771405008175e+01, 3.858560344899543e+01, 3.018329635826687e+01, 3.951242022890926e+01, 3.015508954086346e+01, 3.505137450322913e+00, 4.136591507190854e+00, 3.005897197090833e+00, 2.291345802465046e+00, 3.630816399193811e+00, 3.630816399193812e+00, 8.486136512821747e-02, 3.063568860839846e-01, 7.286876108193810e-02, 1.696937218374702e+01, 1.173393336354860e-01, 1.149236417007534e-01, 7.362594379642357e-05, 1.180094484717518e-04, 6.926145774894132e-05, 3.285287160332909e-02, 1.111016290910431e-04, 1.111016290910432e-04, 2.552523344094177e+00, 2.550186915881674e+00, 2.557697491463642e+00, 3.524760302802886e+00, 2.560734273457222e+00, 3.518884742176732e+00, 3.350000581307296e+00, 2.468634713361972e+00, 2.706968596101545e+00, 2.954176781719138e+00, 2.088112871983771e+00, 2.826564666030725e+00, 4.546444713491352e+00, 4.382257102841732e-01, 7.053823918498570e-01, 9.274066441740727e-01, 9.306027278946736e-01, 9.306027278946736e-01, 1.564674355760153e+00, 1.143394721528459e-02, 2.127475615174797e-02, 8.651115033120518e-01, 5.345925600359187e-02, 5.345925600359189e-02, 7.383473691658960e-04, 8.429773452885833e-06, 3.731668701377987e-05, 4.686791658854648e-02, 9.347218532024200e-05, 9.347218443390705e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_k_l06_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_l06", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.320679270560034e+03, 3.320671123110813e+03, 3.320705814765071e+03, 3.320690404516503e+03, 3.320788168156771e+03, 3.320809130656839e+03, 3.320488446745603e+03, 3.320427088991111e+03, "nan", "nan", 3.320695231402229e+03, "nan", 8.641786173353294e+01, "nan", "nan", "nan", "nan", "nan", 2.052725658488373e+02, "nan", 8.638581283824459e+01, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 2.070413008411631e+00, "nan", "nan", 1.510860420333271e-01, 1.393530031582809e-01, 1.406054554023991e-01, 1.330868259038329e-01, 3.986764410129759e+00, "nan", "nan", "nan", "nan", "nan", "nan", 1.437522065791815e-01, 5.788984363943289e-04, "nan", 6.356612413065135e-04, 7.294738972218660e-04, "nan", "nan", 2.091878837555654e-04, "nan", "nan", 1.491922254478924e-04, 4.607075584669753e-04, "nan", "nan", "nan", 1.997764969286786e+02, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 1.996159670142843e+02, "nan", 2.343604961750689e+01, "nan", 2.397015856195731e+01, "nan", "nan", 2.307869802118801e+01, "nan", "nan", "nan", 2.434411822277031e+01, "nan", "nan", "nan", 6.891187876234646e+00, "nan", "nan", "nan", "nan", 2.447398102507927e+00, "nan", "nan", "nan", "nan", 1.400743663633516e-01, "nan", "nan", "nan", "nan", "nan", 2.757994308513437e+01, 2.755563371101282e+01, "nan", "nan", "nan", 1.745877455578344e-01, "nan", 1.271487754845045e-04, "nan", "nan", 1.082892748377400e-04, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 2.627497117929586e+00, 2.560132529139092e+00, "nan", 2.576682609666876e+00, "nan", "nan", "nan", 2.583547410549383e+00, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 2.001077641988025e+00, "nan", "nan", "nan", "nan", "nan", "nan", 2.609777979321845e-01, "nan", "nan", "nan", 7.998382382992821e-01, "nan", "nan", "nan", "nan", "nan", 1.398300053475029e+00, "nan", 1.918518450940894e-02, 3.416992604429748e-02, "nan", 7.665699981734833e-01, "nan", "nan", "nan", "nan", "nan", "nan", 1.271963691319953e-03, "nan", "nan", "nan", 6.565073426573668e-05, "nan", 7.796588715233534e-02, "nan", "nan", 1.013509017580810e-04, "nan"]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_l06_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_l06", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.583185379420239e-06, 0.000000000000000e+00, 1.583191075264933e-06, 1.583164692463676e-06, 0.000000000000000e+00, 1.583176045177251e-06, 1.583102617585936e-06, 0.000000000000000e+00, 1.583085941767168e-06, 1.583336219951111e-06, 0.000000000000000e+00, 1.583383726132612e-06, 1.583172835546968e-06, 0.000000000000000e+00, "nan", 1.583172835546968e-06, 0.000000000000000e+00, "nan", 3.812035885079382e-04, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", 0.000000000000000e+00, 0.000000000000000e+00, "nan", 3.814224469884729e-04, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, 8.923310952774173e-02, "nan", 0.000000000000000e+00, "nan", 3.644078795187318e+00, 0.000000000000000e+00, 3.707839157729546e+00, 3.811404660331636e+00, 0.000000000000000e+00, 3.772311063194313e+00, 3.898719763683900e-02, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, 5.243551787849466e-01, 1.488409372772221e-04, 0.000000000000000e+00, "nan", 1.853213537286364e-04, 0.000000000000000e+00, 0.000000000000000e+00, "nan", 0.000000000000000e+00, "nan", 2.826689984443749e-05, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, 7.831759377988010e-05, 1.053182845865557e-04, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", 1.062832210501881e-04, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, 1.064241038112179e-04, "nan", 0.000000000000000e+00, 2.668702937281332e-03, "nan", 0.000000000000000e+00, 2.589954172642566e-03, "nan", 0.000000000000000e+00, "nan", 2.708926327089259e-03, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", 2.543542730211991e-03, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", 2.895408350797130e-85, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, 7.754837047224021e-02, "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", 1.271624842046441e-95, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", 2.037340786316161e-03, 0.000000000000000e+00, 2.039992692671474e-03, "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, 1.229611321569461e+00, "nan", 0.000000000000000e+00, 1.793208259614736e-05, "nan", 0.000000000000000e+00, "nan", 1.903133138025303e-04, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, 6.865117752892909e-02, 7.205593523131969e-02, 0.000000000000000e+00, "nan", 7.113721682219622e-02, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", 7.075804930353208e-02, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", 1.074464467628989e-01, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, 1.636060252949937e+00, "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, 4.332059922092980e-01, "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, 1.876857080471547e-01, "nan", 0.000000000000000e+00, 2.115125842426700e-100, 3.066868927235240e-02, 0.000000000000000e+00, "nan", 4.610523060027849e-01, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, 3.541508743567769e-04, "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, 2.374330632624749e-05, "nan", 0.000000000000000e+00, 2.433802478096797e-01, "nan", 0.000000000000000e+00, "nan", 1.788672267100683e-04, 0.000000000000000e+00, "nan"]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_l06_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_l06", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [-2.317599491003523e-03, -2.317593217248975e-03, -2.317519579012853e-03, -2.317535130655613e-03, -2.317370594167656e-03, -2.317291685138174e-03, -2.318271610051882e-03, -2.318440986416213e-03, -2.317546470036478e-03, "nan", -2.317546470036478e-03, 0.000000000000000e+00, -3.213819487138603e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -3.215481394128169e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.077296679740233e-02, 0.000000000000000e+00, 0.000000000000000e+00, -9.984727650471814e-03, -1.129586851990352e-02, -1.078443574341340e-02, -1.201726433988721e-02, -5.435148125178166e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -2.637679610865951e-04, -1.857086145240855e-11, 0.000000000000000e+00, -2.660404308685466e-11, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -7.663113036220274e-13, 0.000000000000000e+00, 0.000000000000000e+00, -1.278761154661563e-12, -9.330054596392495e-12, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.670204546460336e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.677815439544004e-03, 0.000000000000000e+00, -7.960153755599299e-03, 0.000000000000000e+00, -7.780759444400260e-03, 0.000000000000000e+00, 0.000000000000000e+00, -8.287901001122007e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -7.506996084671751e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 4.968008274895690e-130, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.031707423575767e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 5.710913490903461e-144, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -7.012754131405757e-04, -7.001430046723428e-04, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -9.442626950437172e-04, 0.000000000000000e+00, -2.303783127596264e-13, 0.000000000000000e+00, 0.000000000000000e+00, -1.921531672372884e-12, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -2.495774456636530e-04, -7.143570074742090e-04, 0.000000000000000e+00, -5.530724591741714e-04, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -4.858771082977948e-04, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -2.621297117437289e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -9.728162995502703e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -6.163945956263221e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -5.356556598230495e-03, 0.000000000000000e+00, 1.760747208937508e-150, -1.711289710720888e-06, 0.000000000000000e+00, -4.482841931562676e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.438580571399575e-10, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.131753578990583e-13, 0.000000000000000e+00, -4.670905728314091e-05, 0.000000000000000e+00, 0.000000000000000e+00, -1.635222220330453e-12, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_l06_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_l06", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
