
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_k_pc07_opt_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_pc07_opt", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [1.783120983392164e+03, 1.783132191109905e+03, 1.783183121963072e+03, 1.783016061764306e+03, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 6.133439007214845e-01, 5.899448096818292e-01, "nan", "nan", "nan", "nan", "nan", 7.104297794410714e-01, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 1.486947552442497e+01, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan"]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_k_pc07_opt_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_pc07_opt", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.087057675183864e+03, 3.087050910837680e+03, 3.087092716888784e+03, 3.087076372983202e+03, 3.087188603506001e+03, 3.087218324855161e+03, 3.086792981814555e+03, 3.086713921793820e+03, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", -6.230735969659266e-01, -6.046666987219147e-01, -6.001125614805222e-01, -5.810185954179770e-01, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", -7.064595589579462e-01, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 2.549407702404962e+01, 2.547087998444184e+01, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan"]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_pc07_opt_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_pc07_opt", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-5.832610231885551e-07, 0.000000000000000e+00, -5.832698826987815e-07, -5.833393287938257e-07, 0.000000000000000e+00, -5.833267931541781e-07, -5.834766023941841e-07, 0.000000000000000e+00, -5.835552670747211e-07, -5.825937121471585e-07, 0.000000000000000e+00, -5.824289443846918e-07, -5.833134200926319e-07, 0.000000000000000e+00, "nan", -5.833134200926319e-07, 0.000000000000000e+00, "nan", 2.186480819690630e-04, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", 2.197443799241209e-04, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, 4.937250273428978e-01, "nan", 0.000000000000000e+00, "nan", 2.572670895608397e+01, 0.000000000000000e+00, 2.294376358600035e+01, 2.479864693157502e+01, 0.000000000000000e+00, 2.177059790083632e+01, 2.760086433214637e-01, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, 1.463508641615166e+02, 6.325497679369517e+05, 0.000000000000000e+00, "nan", 5.497661830191854e+05, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", 2.911614709841251e+06, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, 4.834178534675215e+06, 8.909130834592527e+05, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", -7.484677978398693e-05, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, -7.462748568413027e-05, "nan", 0.000000000000000e+00, 1.681269628863544e-02, "nan", 0.000000000000000e+00, 1.645755969611644e-02, "nan", 0.000000000000000e+00, "nan", 1.680069107032818e-02, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", 1.637657215386190e-02, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", 4.869557603842462e-01, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, -7.018318990994370e-02, "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", 1.680322502110340e+02, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", -1.995868346383299e-03, 0.000000000000000e+00, -1.998929800924407e-03, "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, 9.435182145012415e+01, "nan", 0.000000000000000e+00, 6.144209015004766e+06, "nan", 0.000000000000000e+00, "nan", 7.817490178820768e+06, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, -7.236224053563485e-02, -7.039900657650537e-02, 0.000000000000000e+00, "nan", -7.168654781556884e-02, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", -7.212545833111803e-02, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", -1.404546936947561e-02, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, 1.186942020676454e+01, "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, 2.974767882753505e+00, "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, 1.319747414995533e+00, "nan", 0.000000000000000e+00, 3.314985802507890e+03, 1.390172763857115e+03, 0.000000000000000e+00, "nan", 1.794870208506016e+00, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, 1.943050682915965e+05, "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, 1.656050244600136e+07, "nan", 0.000000000000000e+00, 3.926655637176916e+02, "nan", 0.000000000000000e+00, "nan", 8.633811624558937e+06, 0.000000000000000e+00, "nan"]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_pc07_opt_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_pc07_opt", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [1.956515640974760e-01, 1.956516605647920e-01, 1.956527902028882e-01, 1.956525516418109e-01, 1.956550754312985e-01, 1.956562856521828e-01, 1.956412498438925e-01, 1.956386494639184e-01, 1.956523776941838e-01, "nan", 1.956523776941838e-01, "nan", 1.734412340907207e-01, "nan", "nan", "nan", "nan", "nan", 0.000000000000000e+00, "nan", 1.733794672792848e-01, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 7.457390702601366e-04, "nan", "nan", "nan", "nan", "nan", "nan", 0.000000000000000e+00, 3.695063679985905e-03, "nan", 4.146090095624844e-03, 0.000000000000000e+00, "nan", "nan", 1.307209269784319e-03, "nan", "nan", 1.546982076862849e-03, 2.959394450564830e-03, "nan", "nan", "nan", 2.030053113003221e-01, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 2.029424428663412e-01, "nan", 0.000000000000000e+00, "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", "nan", 0.000000000000000e+00, "nan", "nan", "nan", -9.053208526718295e-61, "nan", "nan", "nan", "nan", 2.070464223840691e-01, "nan", "nan", "nan", "nan", -2.496177214920213e-63, "nan", "nan", "nan", "nan", "nan", 2.084237678761101e-01, 2.084278058506790e-01, "nan", "nan", "nan", 0.000000000000000e+00, "nan", 8.792283877102397e-04, "nan", "nan", 1.768153062522802e-03, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 2.096585010001487e-01, 2.083767894934031e-01, "nan", 2.089131998660187e-01, "nan", "nan", "nan", 2.091088328304085e-01, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 1.902033025806533e-01, "nan", "nan", "nan", "nan", "nan", "nan", 0.000000000000000e+00, "nan", "nan", "nan", 0.000000000000000e+00, "nan", "nan", "nan", "nan", "nan", 2.681551293482116e-03, "nan", 5.767008838509356e-65, 0.000000000000000e+00, "nan", 8.896554715185782e-02, "nan", "nan", "nan", "nan", "nan", "nan", 7.048965050896106e-03, "nan", "nan", "nan", 6.949426347912123e-04, "nan", 0.000000000000000e+00, "nan", "nan", 1.677034482494901e-03, "nan"]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_pc07_opt_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_pc07_opt", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
