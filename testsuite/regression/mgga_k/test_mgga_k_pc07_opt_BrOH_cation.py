
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_k_pc07_opt_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_pc07_opt", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([9.576367975698388e+02, 9.576137153110917e+02, 9.575583429374415e+02, 9.579007926319266e+02, 9.577146380611766e+02, 9.577146380611766e+02, 7.658271663554623e+01, 7.656633840298680e+01, 7.613346225016616e+01, 7.629025064405035e+01, 7.627481737357341e+01, 7.627481737357341e+01, 5.941920261172386e+00, 5.964794649344412e+00, 6.545858545523950e+00, 6.262214557786582e+00, 6.326478856749814e+00, 6.326478856749814e+00, 6.990184671848552e-01, 6.794239838773145e-01, 1.260521201889689e+01, 1.006885024332774e+00, 8.405838568431996e-01, 8.405838568431997e-01, 8.006650160874803e-01, 7.853580894081736e-01, 1.372048623819307e+00, 7.843760742016942e-01, 7.262037603245561e-01, 7.262037603245549e-01, 9.243898898822293e+02, 4.736895413841675e+02, 4.137020147034134e+01, 6.460461958015110e+02, 4.122190214674667e+01, 2.063615887945350e+02, 2.949251052521520e+01, 6.886273266154762e+01, 3.898105507964431e+01, 3.830445489386238e+01, 3.824830973882032e+01, 2.651687134904722e+01, 8.458363979829084e+00, 1.198966730696456e+01, 7.901387769825504e+00, 2.145963332558614e+00, 2.422587661491953e+00, 3.332010416583741e+00, 9.219460237054212e-01, 2.997032028438732e+00, 8.996655480150828e-01, 2.516820053165585e+01, 7.430511113666531e-01, 7.430511113666531e-01, 6.680901201465779e-01, 7.065811885049175e-01, 2.817966193750383e-01, 8.107747108292320e-01, 4.156551712194058e-01, 4.138112993153228e-01, 1.509073917832322e+00, 1.630435135756960e+00, 1.588750099045470e+00, 1.641990234972752e+00, 1.564518622674437e+00, 1.570839315543930e+00, 1.387611969011136e+00, 1.533818002267120e+00, 9.226518703887946e+00, 4.949122333197422e-01, 2.566205076370982e+00, 4.725446015525971e+00, 7.842424366392004e+00, 1.064542724110567e+00, 1.040210033768270e+00, 6.698754362395861e-01, 2.596689049782148e+00, 1.716361360582053e+00, 1.684369155868984e+00, 9.656281610296017e-01, 1.554829746876385e+00, 8.637960833396072e-01, 7.157195856743035e-01, 7.157195856743035e-01, 8.120356333034537e-01, 3.205942872028503e-01, 4.583345849434403e-01, 7.256151228337153e-01, 3.710531393594770e-01, 3.710544569867240e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_k_pc07_opt_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_pc07_opt", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-9.576393445190124e+02, -9.576342506108240e+02, -9.576125940544704e+02, -9.576148365750159e+02, -9.575722847002248e+02, -9.575444012750652e+02, -9.578732328355682e+02, -9.579283530580846e+02, -9.576211039500453e+02, -9.578081757487282e+02, -9.576211039500453e+02, -9.578081757487282e+02, 8.678872522203962e+01, 8.678566562400140e+01, 8.678760108144994e+01, 8.678459883016690e+01, 8.676258348481247e+01, 8.675925268370227e+01, 8.679450829884209e+01, 8.679500416383785e+01, 8.676436520414805e+01, 8.677513746913385e+01, 8.676436520414805e+01, 8.677513746913385e+01, 3.131705471775899e+00, 3.168818225947112e+00, 3.117966287218798e+00, 3.163121152343578e+00, 2.934127170213140e+00, 2.875390545867980e+00, 2.954673734730960e+00, 2.975283003799626e+00, 3.232271262658257e+00, 2.639863759985842e+00, 3.232271262658257e+00, 2.639863759985842e+00, 2.762398030406308e-01, 2.499348175170712e-01, 2.783580591065355e-01, 2.553438219227737e-01, 3.736406127111521e+00, 4.220604807587607e+00, 7.501163660020595e-02, 7.173518912199324e-02, 2.939234175621826e-01, -7.301877550569746e-03, 2.939234175621823e-01, -7.301877550569882e-03, -8.891701244035730e-01, -9.143855374154706e-01, -8.751405428513358e-01, -9.026447780993018e-01, -1.542400024639496e-01, -3.178761337192262e-02, -8.009722825238774e-01, -8.131138997317002e-01, -8.359268225454251e-01, -4.672149725823925e-01, -8.359268225454219e-01, -4.672149725823919e-01, 1.416057320513903e+03, 8.673826930672795e+02, 1.873616036338203e+02, 1.873220130552248e+02, -4.136989289908963e+01, -4.137051026757364e+01, 1.433586783310167e+03, 1.383322675945295e+03, -4.122012312494293e+01, -4.122368247104610e+01, 1.955488474323765e+02, 1.905297420033143e+02, -2.256160483095843e+01, -2.509378562568931e+01, 2.613159978329336e+01, 2.612167386777969e+01, 2.868870310801348e+01, 2.877511845412572e+01, 2.870451070660116e+01, 2.899354354179490e+01, 2.949608873033690e+01, 2.922810703933644e+01, -2.609986098942340e+01, -2.614223853986115e+01, 1.735384495720240e+01, 1.408872031104503e+01, 9.298234498062001e+00, 9.778255778601244e+00, 1.175767516513164e+01, 1.599529517786388e+01, 2.178303211570066e+00, 2.296304613270829e+00, 2.654765351370784e+00, 2.396948474060051e+00, 2.706110366277954e+00, 2.451566516724268e+00, -9.287706266941604e-01, -9.153129962636577e-01, 3.523522199835713e-01, 3.668695091384570e-01, -9.015109121111524e-01, -8.980883238443450e-01, 2.615765515319372e+01, 2.613301436438155e+01, -8.121392656598382e-01, -6.849342027066375e-01, -8.121392656598382e-01, -6.849342027066375e-01, -6.421923207990694e-01, -6.902653762541757e-01, -6.920437940706343e-01, -7.202280662347483e-01, -2.899092500137775e-01, -2.748302646346819e-01, -8.029051329422281e-01, -8.185008927589957e-01, -4.110648865662610e-01, -4.151241737275473e-01, -4.112007815861579e-01, -4.147146090871408e-01, 2.293296422722340e+00, 2.313433730321197e+00, 2.116478928425050e+00, 2.137407592283719e+00, 2.181137719576630e+00, 2.202198717565782e+00, 2.492791836849952e+00, 2.547571538123291e+00, 2.185350286052082e+00, 2.208688749300389e+00, 2.206340642364432e+00, 2.226894223153367e+00, 2.209582596899371e+00, 2.224548706560560e+00, 1.631641651109887e+00, 1.626126018688619e+00, 1.476735174707537e+01, 1.491471527169411e+01, -4.953839972299114e-01, -4.944454112146604e-01, 1.998005589238212e+00, 2.011822742121379e+00, 8.181982274933560e+00, 8.352589303867942e+00, 1.905783040562295e+01, 1.958960739594927e+01, -1.065811166737055e+00, -1.063296062018464e+00, -8.338067187196346e-01, -8.138782297854451e-01, -6.699896337504940e-01, -6.697631122485233e-01, 5.344478654016138e-01, 5.302550736173068e-01, 6.032721526592834e-01, 6.023713676320230e-01, 1.510797195290214e+00, 1.528196875664582e+00, -9.661309765582571e-01, -9.651355270281794e-01, -8.307232488927999e-02, -5.194674186196356e-01, 8.116387518751224e-01, 8.282728209445837e-01, -7.598705813280078e-01, -6.782155886543124e-01, -7.598705813280076e-01, -6.782155886543121e-01, -8.165376899553629e-01, -8.079897645996434e-01, -3.662903377081299e-01, -2.752101342405479e-01, -4.661807282421001e-01, -4.518098104587762e-01, -7.230163781680909e-01, -7.280904308473184e-01, -2.863698114852049e-01, -4.071377726877607e-01, -2.863463906818516e-01, -4.071377726877603e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_pc07_opt_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_pc07_opt", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.293109184051877e-05, 0.000000000000000e+00, 1.293114179513549e-05, 1.293096651097146e-05, 0.000000000000000e+00, 1.293105074677587e-05, 1.293054083471756e-05, 0.000000000000000e+00, 1.293044770940055e-05, 1.293195688134498e-05, 0.000000000000000e+00, 1.293225240321300e-05, 1.293101834015489e-05, 0.000000000000000e+00, 1.293151277752772e-05, 1.293101834015489e-05, 0.000000000000000e+00, 1.293151277752772e-05, -3.430606201187669e-04, 0.000000000000000e+00, -3.433760476353162e-04, -3.429882799913353e-04, 0.000000000000000e+00, -3.433543286939030e-04, -3.418587995557356e-04, 0.000000000000000e+00, -3.417056707851504e-04, -3.410065603284435e-04, 0.000000000000000e+00, -3.412371061529290e-04, -3.434111625855427e-04, 0.000000000000000e+00, -3.401479765087695e-04, -3.434111625855427e-04, 0.000000000000000e+00, -3.401479765087695e-04, 3.507957713899289e-02, 0.000000000000000e+00, 3.496822579445155e-02, 3.517507658840958e-02, 0.000000000000000e+00, 3.497553453382203e-02, 3.605542083868123e-02, 0.000000000000000e+00, 3.703671904989607e-02, 3.780866767143640e-02, 0.000000000000000e+00, 3.788999170378489e-02, 3.403979827373915e-02, 0.000000000000000e+00, 4.199752788072742e-02, 3.403979827373915e-02, 0.000000000000000e+00, 4.199752788072742e-02, -3.486517528889261e+00, 0.000000000000000e+00, -1.653696240620292e+00, -3.357015840475906e+00, 0.000000000000000e+00, -1.541001325194359e+00, 1.631904766990474e-02, 0.000000000000000e+00, 1.480427520136522e-02, 8.355919420313254e-01, 0.000000000000000e+00, 2.538461118709829e+00, -2.872167332940530e+00, 0.000000000000000e+00, -1.532240437457091e+01, -2.872167332940531e+00, 0.000000000000000e+00, -1.532240437457090e+01, 8.646731220290778e+05, 0.000000000000000e+00, 7.452070780542028e+05, 7.645970209514750e+05, 0.000000000000000e+00, 6.481912870884314e+05, -2.172561002384248e+02, 0.000000000000000e+00, -6.447373868833582e+02, 3.179471913325865e+06, 0.000000000000000e+00, 3.347868579061124e+06, 1.113677068629083e+06, 0.000000000000000e+00, 5.055317720828420e+06, 1.113677068629081e+06, 0.000000000000000e+00, 5.055317720828413e+06, 3.714190526466704e-03, 0.000000000000000e+00, 2.256173959976001e-03, 7.224976043266941e-05, 0.000000000000000e+00, 7.099960643203920e-05, 8.924464270475136e-04, 0.000000000000000e+00, 8.931000056290367e-04, 3.722423398481351e-03, 0.000000000000000e+00, 3.604949945893689e-03, 8.922228825623769e-04, 0.000000000000000e+00, 8.928761159884677e-04, 3.631075709376916e-05, 0.000000000000000e+00, -6.983458928364457e-05, 1.291410769549191e-02, 0.000000000000000e+00, 1.326150441393571e-02, 1.126375258877803e-03, 0.000000000000000e+00, 1.129631072671355e-03, -1.748302448511036e-03, 0.000000000000000e+00, -1.757660584102377e-03, -1.574207525362539e-03, 0.000000000000000e+00, -1.675175111646200e-03, -1.809894893331934e-03, 0.000000000000000e+00, -1.769175739386074e-03, 1.637657215386190e-02, 0.000000000000000e+00, 1.636708119375344e-02, 2.479487129418711e+00, 0.000000000000000e+00, 2.085941340611007e+00, 8.226785242609993e-01, 0.000000000000000e+00, 8.710360124508156e-01, 2.798639451319037e+00, 0.000000000000000e+00, 3.100195162905766e+00, -1.825789967514979e-02, 0.000000000000000e+00, -5.263613039688342e-02, -6.711565912445933e-02, 0.000000000000000e+00, -7.422636902729210e-02, 4.169479871833812e-02, 0.000000000000000e+00, 5.827541099043334e-02, 1.680322502110340e+02, 0.000000000000000e+00, 1.633153648043942e+02, 6.970088203021253e+01, 0.000000000000000e+00, 6.904278829439485e+01, 2.269837421716149e+02, 0.000000000000000e+00, 1.940019561885622e+02, -2.289485276785603e-04, 0.000000000000000e+00, -2.313722092965227e-04, 1.121634537776805e+02, 0.000000000000000e+00, 9.435182145012415e+01, 1.121634537776805e+02, 0.000000000000000e+00, 9.435182145012415e+01, 6.899382404680469e+06, 0.000000000000000e+00, 6.147456300994826e+06, 3.268603562849244e+06, 0.000000000000000e+00, 3.124574019201539e+06, 7.817214268143269e+06, 0.000000000000000e+00, 6.581429722857845e+06, 6.939684423521389e+02, 0.000000000000000e+00, 6.813232572463984e+02, 7.348156785808919e+06, 0.000000000000000e+00, 2.862481397791492e+06, 7.337074441929800e+06, 0.000000000000000e+00, 2.832594265638471e+06, 6.187574807200286e-01, 0.000000000000000e+00, 6.116351856441753e-01, 6.285443518694794e-01, 0.000000000000000e+00, 6.212364113851212e-01, 6.254086245423542e-01, 0.000000000000000e+00, 6.181420306186601e-01, 6.530850844630407e-01, 0.000000000000000e+00, 6.493438315051221e-01, 6.214258653036193e-01, 0.000000000000000e+00, 6.145783698850948e-01, 6.238950293336524e-01, 0.000000000000000e+00, 6.166797249226976e-01, 6.709682007443022e-01, 0.000000000000000e+00, 6.643597457717575e-01, -3.210621995148253e-02, 0.000000000000000e+00, -2.194538222528711e-02, 4.101569817465758e+00, 0.000000000000000e+00, 4.047382839913236e+00, 8.105979508028870e-01, 0.000000000000000e+00, 8.021068030259341e-01, 6.152179629884959e-02, 0.000000000000000e+00, 5.852175965154471e-02, 2.206729221683358e+00, 0.000000000000000e+00, 2.204517257774113e+00, 1.456402300007891e+00, 0.000000000000000e+00, 1.480989146921967e+00, 1.207679180856774e+01, 0.000000000000000e+00, 1.186942020676454e+01, 6.020329050554860e+00, 0.000000000000000e+00, 5.816935471024685e+00, 3.024385837125076e+00, 0.000000000000000e+00, 2.974767882753505e+00, 1.834051738362655e-01, 0.000000000000000e+00, 1.858725170998226e-01, 3.370144819961220e-01, 0.000000000000000e+00, 3.278800593067792e-01, -1.565295962401723e-01, 0.000000000000000e+00, -1.526148402168205e-01, 3.383498365853439e+03, 0.000000000000000e+00, 3.314985802507891e+03, -2.319832465816777e+02, 0.000000000000000e+00, 6.556828317461179e+02, -4.219501471545556e-01, 0.000000000000000e+00, -3.625788453754322e-01, 3.625707363724647e+02, 0.000000000000000e+00, 3.079851680605962e+02, 3.625707363724647e+02, 0.000000000000000e+00, 3.079851680605963e+02, 2.160802635499018e+05, 0.000000000000000e+00, 1.941851121390783e+05, 1.678524443444068e+08, 0.000000000000000e+00, 1.667067706068541e+08, 1.992414858111243e+07, 0.000000000000000e+00, 1.656039778488206e+07, 4.122466915137551e+02, 0.000000000000000e+00, 3.926655637176916e+02, 8.633543549065115e+06, 0.000000000000000e+00, 3.678861720624852e+06, 8.633058957338387e+06, 0.000000000000000e+00, 3.678861720624863e+06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_pc07_opt_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_pc07_opt", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 2.091085828340268e-01, 2.091283662466119e-01, 2.091039230239757e-01, 2.091269315618496e-01, 2.090311144875802e-01, 2.090219716583465e-01, 2.089808646367276e-01, 2.089968094926651e-01, 2.091206290437750e-01, 2.089278191494580e-01, 2.091206290437750e-01, 2.089278191494580e-01, 1.731118797087416e-01, 1.729334896237256e-01, 1.731535939915223e-01, 1.729683719853244e-01, 1.739315963018712e-01, 1.738503276495443e-01, 1.728579333965296e-01, 1.726828761590255e-01, 1.729882404293081e-01, 1.729677302573020e-01, 1.729882404293081e-01, 1.729677302573020e-01, 2.150525273030418e-01, 2.024355281285225e-01, 2.149203570591512e-01, 2.020569356398747e-01, 1.817000877211696e-01, 1.796606592105806e-01, 1.907943678540193e-01, 1.835606413625273e-01, 2.132820387117184e-01, 2.246012530101280e-01, 2.132820387117184e-01, 2.246012530101281e-01, -5.651867455247099e-02, -6.378520771274511e-02, -5.956576499336898e-02, -6.864261966229482e-02, 2.661928089914619e-01, 2.931543127756540e-01, -1.325210860908613e-02, -1.360322271115435e-02, -3.730624635285115e-02, -5.474793127775340e-03, -3.730624635285071e-02, -5.474793127775300e-03, -2.828066185333909e-02, 4.320904964565988e-02, 1.780353841125905e-01, 1.780669938207658e-01, 0.000000000000000e+00, 0.000000000000000e+00, -3.684997590376810e-02, -3.394113043005108e-02, 0.000000000000000e+00, 0.000000000000000e+00, 1.805058190660846e-01, 2.026357559792971e-01, -4.804173031836653e-04, -5.103806520706715e-04, 1.766270148271068e-01, 1.765942377092034e-01, 2.071035246140623e-01, 2.073012285082675e-01, 2.054603935300108e-01, 2.067186957850919e-01, 2.086736027916062e-01, 2.079335669658001e-01, 0.000000000000000e+00, 2.553408444143382e-03, -3.742686732064322e-02, -2.341160131664835e-02, 8.816693465772033e-02, 8.320338786695251e-02, -2.543138017590196e-02, -4.242634602884791e-02, 1.926504427503516e-01, 2.026781286627043e-01, 2.105654035456470e-01, 2.095068439143891e-01, 1.740875652531214e-01, 1.713532123663942e-01, 0.000000000000000e+00, 0.000000000000000e+00, -5.639704943897633e-02, -5.687365192158204e-02, 0.000000000000000e+00, 0.000000000000000e+00, 1.904084750786205e-01, 1.904304734727056e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -9.393502673129517e-06, -1.240742860223889e-05, -1.395413560276265e-11, -1.656659964002574e-11, -1.354503164445402e-11, -7.002720398234610e-11, 0.000000000000000e+00, 0.000000000000000e+00, -5.116305441421674e-05, -6.891791439729683e-04, -1.334754518106687e-08, -1.117963088122265e-07, -6.197510748531605e-10, -6.116566010892998e-10, -4.006795238537338e-09, -4.023569144597976e-09, -1.310576990844091e-11, -1.308827725353237e-11, -7.010561552813264e-06, -8.844308769461149e-06, -4.463558909802912e-08, -3.292105457519395e-08, -3.955309991450010e-12, -3.970759663508368e-12, -3.939113450042735e-11, -3.757969103803528e-11, 1.930801737731213e-01, 1.913132155866017e-01, -5.217394053204982e-02, -5.188301085458021e-02, 0.000000000000000e+00, 0.000000000000000e+00, 1.749334056771365e-01, 1.754349760723967e-01, -1.067383071524769e-02, -1.098746280349228e-02, -1.996461412143844e-02, -2.103657625948017e-02, 0.000000000000000e+00, 0.000000000000000e+00, -2.949688244193496e-04, -2.977863784041041e-04, 0.000000000000000e+00, 0.000000000000000e+00, 1.848354123560964e-01, 1.849853697983800e-01, 1.754878059913376e-01, 1.759539912401888e-01, 2.093012913582802e-01, 2.091819511009470e-01, 0.000000000000000e+00, 0.000000000000000e+00, 2.711068187441905e-01, 1.591922015463935e-01, 2.110624287095217e-01, 2.084498962563996e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.924535208150326e-08, -3.451375273452016e-09, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.189653032841838e-07, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
