
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_k_pgsl025_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_pgsl025", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([2.396477339190938e+03, 2.396479879254197e+03, 2.396513307088719e+03, 2.396471410606030e+03, 2.396478493600727e+03, 2.396478493600727e+03, 6.668980728494161e+01, 6.668666023856825e+01, 6.660445547751702e+01, 6.675198583734692e+01, 6.668888078530162e+01, 6.668888078530162e+01, 3.414369912154473e+00, 3.431860625909073e+00, 4.020651949658465e+00, 3.964771815580617e+00, 3.420482506610100e+00, 3.420482506610100e+00, 5.655866254764618e-01, 5.423000403654928e-01, 4.974616943436782e+00, 1.114661200069252e+00, 5.580234564422480e-01, 5.580234564422480e-01, 3.232524130753207e+01, 2.930100746843754e+01, 4.301694416868753e+00, 3.187947011259850e+02, 2.883420269462210e+01, 2.883420269462210e+01, 8.789650330713099e+02, 1.534444707636256e+02, 1.860586562041656e+04, 1.635605457814888e+03, 1.459496834828525e+02, 1.357632374652075e+02, 1.752002735543046e+04, 3.820827632644107e+01, 3.346089271082452e+01, 3.344688743806866e+01, 3.214735256801903e+01, 3.102208206802722e+01, 4.576194461090199e+01, 5.568527805426475e+00, 2.015827794445951e+01, 1.568553933695111e+00, 1.879931898444146e+00, 1.943936558586875e+00, 5.919199550482555e+00, 8.363443336143831e+00, 2.754841241177787e+02, 1.726030073602485e+01, 9.458967612802062e-01, 7.802201735668973e-01, 6.791955529297908e+03, 2.140576989656152e+09, 3.590970112521391e+09, 7.976581106045512e+00, 1.101387472402729e+03, 1.198654504379608e+05, 1.240382637059466e+09, 1.567718890865659e+08, 5.668620648889563e+10, 1.205553292945862e+05, 9.528450976978205e+07, 2.043844998792982e+11, 2.915065541459795e+10, 1.586252430835111e+00, 1.225771412359425e+01, 1.646637674841815e+00, 1.530173508597644e+00, 5.787536782461021e+01, 5.310209280893816e+01, 6.238393732442227e+02, 2.063380441537319e+03, 2.874883067816291e+01, 1.310986983536956e+00, 1.001834669477734e+00, 1.350587993021876e+00, 1.381219010424099e+02, 5.374066872888504e+00, 6.575248466746159e-01, 1.025452234886479e+02, 1.121900326781348e+00, 1.661476546048926e+03, 1.687771428715465e+06, 1.329594548978078e+05, 5.886206944407433e-01, 1.021406467008820e+02, 1.071467880189087e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_k_pgsl025_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_pgsl025", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([2.716176173473497e+03, 2.716213730952769e+03, 2.716355123135742e+03, 2.715740386185037e+03, 2.716196199419465e+03, 2.716196199419465e+03, 6.276003885902461e+01, 6.276850917822281e+01, 6.300837030010032e+01, 6.265884555476390e+01, 6.276472357683073e+01, 6.276472357683073e+01, 2.326216102927197e-01, 1.799823240060636e-01, -1.398040064457286e+00, -1.206673524163970e+00, 2.139152331866367e-01, 2.139152331866367e-01, -5.206893483651303e-01, -4.785392046555569e-01, 6.443010434593029e-01, -1.403434264580617e+00, -5.073963514788044e-01, -5.073963514788044e-01, -5.354142942737467e+01, -4.850167636175905e+01, -6.684571550565206e+00, -5.309258511591502e+02, -4.772995417878840e+01, -4.772995417878840e+01, -1.061320630728849e+03, 1.481195296227274e+02, -3.060613020368267e+04, -2.322177253212171e+03, 1.604940429494553e+02, 1.774714529788637e+02, -2.915169563089293e+04, -1.445866690757546e+01, -7.945711164576017e+00, -7.251992114035273e+00, -3.927120664642255e+00, -2.051669831322580e+00, -7.136409549080615e+01, -3.282459123172074e+00, -2.920133336769803e+01, 2.347339091018375e+00, 2.202323201195413e+00, 2.095648767624198e+00, -9.327755459834005e+00, -1.332301313791004e+01, -4.586443264482577e+02, 2.672630515572946e+01, -1.116321574692447e+00, -8.401939285035990e-01, -1.131953881574465e+04, -3.567628315707046e+09, -5.984950187307151e+09, -1.283464464683285e+01, -1.835327737810509e+03, -1.997754326804072e+05, -2.067304389677648e+09, -2.612864764528167e+08, -9.447701080944356e+10, -2.009201488325931e+05, -1.588075108916295e+08, -3.406408331267722e+11, -4.858442568591796e+10, 8.376383349856235e-01, -1.644972543486945e+01, 1.688730624829811e+00, 1.656542675833209e+00, -9.225211451752108e+01, -8.191224949004004e+01, -1.039000629899876e+03, -3.438054914376663e+03, -4.626999950053867e+01, -9.858481993992401e-01, -4.705943426338688e-01, 5.510441909297212e-01, -2.296682629070800e+02, -8.444767534610559e+00, 4.457547940066761e-01, -1.704807781006192e+02, -1.441906164174968e+00, -2.768742684643464e+03, -2.812952086092790e+06, -2.215987735730450e+05, -5.956122751718067e-01, -1.699711828743853e+02, -1.785777168032207e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_pgsl025_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_pgsl025", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([2.657732861875011e-06, 2.657673010056417e-06, 2.657450318028386e-06, 2.658429570163190e-06, 2.657700927568262e-06, 2.657700927568262e-06, 7.446579789450542e-04, 7.445827492442082e-04, 7.424233005522892e-04, 7.456698726929428e-04, 7.446097705255579e-04, 7.446097705255579e-04, 1.455745646146784e-01, 1.468348509622877e-01, 1.819007555555542e-01, 1.765660295681148e-01, 1.460299847592703e-01, 1.460299847592703e-01, 9.908237704320786e+00, 9.426816744323027e+00, 7.101519190026379e-02, 2.725552925205998e+01, 9.760913155310085e+00, 9.760913155310085e+00, 5.964453786572185e+04, 5.189989231390612e+04, 7.729001762631485e+02, 5.402227120247934e+05, 5.355685357776579e+04, 5.355685357776579e+04, 1.525099571264788e-04, 1.517439244926303e-04, 1.524329155169286e-04, 1.518372563239861e-04, 1.521151726787854e-04, 1.521151726787854e-04, 6.594828726201592e-03, 6.399681905892300e-03, 6.733795003740752e-03, 6.578595481058418e-03, 6.284647409423548e-03, 6.284647409423548e-03, 1.455873882187853e-01, 5.386785340122084e-02, 1.772575638991895e-01, 8.850748687124807e-02, 1.197968836457716e-01, 1.197968836457716e-01, 6.875369467534709e+01, 1.012335775827125e+01, 7.146663204493187e+01, 1.920792369982746e-03, 4.446642752569446e+01, 4.446642752569446e+01, 6.017464903633265e+05, 4.031448391945296e+05, 9.574968365468716e+05, 2.853120840444642e+02, 5.329472753722589e+05, 5.329472753722589e+05, 4.170629240242792e-02, 6.032353160763471e-02, 5.369706000702427e-02, 4.853666848182482e-02, 5.112063760989742e-02, 5.112063760989742e-02, 4.266513823950108e-02, 3.048575461889274e-01, 2.114909762948219e-01, 1.369318386678758e-01, 1.727992177887080e-01, 1.727992177887080e-01, 4.868014263257071e-02, 4.979734213182028e+00, 2.780289353647937e+00, 9.907724990359075e-01, 1.710269504347909e+00, 1.710269504347910e+00, 4.316974476490873e-01, 9.728411342429536e+02, 3.921118904777628e+02, 9.828734385701757e-01, 1.285807830987737e+02, 1.285807830987737e+02, 3.705071661734569e+04, 1.964459228149110e+07, 2.865708569560217e+06, 1.480818593819084e+02, 8.682210925506414e+05, 8.682210925506451e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_pgsl025_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_pgsl025", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([-1.364852725629326e-02, -1.364863443757288e-02, -1.364899507489735e-02, -1.364725454700470e-02, -1.364858472073731e-02, -1.364858472073731e-02, 7.571358138259604e-03, 7.567568848844347e-03, 7.453215747465880e-03, 7.496017586748012e-03, 7.570249839108698e-03, 7.570249839108698e-03, 3.141454725219373e-02, 3.166757105349365e-02, 3.882995126740307e-02, 3.567310028261683e-02, 3.150000635716517e-02, 3.150000635716517e-02, 4.618958519849325e-02, 4.318558332489289e-02, 4.812194435758103e-02, 1.756277647252455e-01, 4.525530567049255e-02, 4.525530567049254e-02, 1.951161266310303e+01, 1.772078375699697e+01, 1.535893921123036e+00, 1.286063553483191e+02, 1.776463806513402e+01, 1.776463806513402e+01, 1.849382805373287e-01, 3.110410221213268e-02, -9.199278001731561e-01, 2.623850036576391e-01, -2.495977398003058e-02, 1.250671716300097e-02, -2.382918792004881e+00, 4.600074702019348e-02, 2.070028103829511e-02, 2.077736332456553e-02, 1.932776742544210e-02, 3.781663133531615e-03, 4.025886375755330e-01, 1.078664166968064e-01, 2.754275376259170e-01, 6.548750238361046e-03, 8.305774752184497e-03, 1.696099380669193e-02, -8.200112918534701e-01, 5.238339670985436e-01, -6.089093002574662e+00, 8.460120713894553e-03, 1.585863765661050e-01, 9.409619768132471e-02, 6.158954663145740e+02, 3.025585471777902e+05, -5.228478295341851e+05, -1.573164890219366e+00, 2.381374509509423e+02, -2.484836743356830e+03, 2.071729793563385e+03, -7.404813323671574e+02, -1.405348101694092e+04, 2.046409410340178e+01, -5.757515149050735e+02, 2.666538874269891e+04, -1.037638799840546e+04, 7.331852888501105e-03, 2.200437045916283e-01, -2.734318102420037e-02, 1.573937364775953e-02, 4.941211354392465e-01, 3.808659721344362e-01, -3.805812805764929e+00, -5.831071934897511e+00, -5.305764032783111e-01, 7.700499986120958e-02, 4.408516586474373e-02, 1.271267525904455e-02, 1.027867452999573e+01, 1.390565146313937e+00, 1.148715391121888e-02, -4.510345866943378e+00, 3.095567194675718e-01, -1.202709684667417e+02, 3.103092559050213e+04, -4.584864163156743e+03, -4.796130499329002e-02, -8.518412439219072e+01, -2.764325545832839e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
