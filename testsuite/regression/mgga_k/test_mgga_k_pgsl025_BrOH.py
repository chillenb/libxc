
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_k_pgsl025_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_pgsl025", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.327986682164233e+03, 2.327987814010958e+03, 2.328015893916428e+03, 2.327996914617037e+03, 2.327987086536772e+03, 2.327987086536772e+03, 6.613115139551563e+01, 6.612856105532725e+01, 6.606298863469770e+01, "nan", 6.613038247261194e+01, inf, 3.060986583254431e+00, inf, inf, inf, inf, inf, 1.977634347861056e+196, inf, 3.783526757475643e+00, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, 1.323264241045991e+02, inf, inf, 3.163673243689552e+01, 3.159891417795441e+01, 3.214867359562545e+01, 3.211025620134254e+01, 3.097728889868166e+01, inf, inf, inf, inf, inf, inf, 1.859741535406962e+00, 8.063655263186120e-01, inf, 7.438202590966699e-01, 2.719120821717941e+131, inf, inf, 5.805996277894765e-01, inf, inf, 6.894857948645149e-01, 4.770742910603595e-01, inf, inf, inf, 1.636323434009856e+00, inf, inf, inf, inf, inf, inf, inf, inf, 1.472945875671027e+00, inf, 9.698457567397040e-01, inf, 8.396643550654892e-01, inf, inf, 1.323801423989098e+00, inf, inf, inf, 6.418915668451415e-01, inf, inf, inf, 6.716204577889216e+104, inf, inf, inf]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_k_pgsl025_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_pgsl025", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [2.830327268518005e+03, 2.830367173024835e+03, 2.830517478422896e+03, 2.829864546166692e+03, 2.830348544526057e+03, 2.830348544526057e+03, 6.369113200806790e+01, 6.369867448362447e+01, 6.391081503813253e+01, "nan", 6.369555409798021e+01, "nan", 8.215938251261234e-01, "nan", "nan", "nan", "nan", "nan", -3.296057246435091e+196, "nan", 2.629451353394535e+00, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 1.832878029716439e+02, "nan", "nan", -4.377925903677972e+00, -3.443063326764325e+00, -5.758679305910890e+00, -5.024273386158407e+00, -1.977014549079986e+00, "nan", "nan", "nan", "nan", "nan", "nan", 2.235973806257388e+00, -8.063654195607737e-01, "nan", -7.438200171207509e-01, -4.531868036196570e+131, "nan", "nan", -5.805996277894765e-01, "nan", "nan", -6.894857948645148e-01, -4.770742910603593e-01, "nan", "nan", "nan", 2.655229537446876e+00, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 1.751922064044238e+00, "nan", -8.847507540719934e-01, "nan", 2.452777046237159e-01, "nan", "nan", 5.956884726510168e-01, "nan", "nan", "nan", -6.418915642812909e-01, "nan", "nan", "nan", -1.119367429648203e+105, "nan", "nan", "nan"]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_pgsl025_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_pgsl025", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [2.657732861875011e-06, 2.657673010056417e-06, 2.657450318028386e-06, 2.658429570163190e-06, 2.657700927568262e-06, 2.657700927568262e-06, 7.446579789450542e-04, 7.445827492442082e-04, 7.424233005522892e-04, 7.456698726929428e-04, 7.446097705255579e-04, 7.446097705255579e-04, 1.455745646146784e-01, 1.468348509622877e-01, 1.819007555555542e-01, 1.765660295681148e-01, 1.460299847592703e-01, 1.460299847592703e-01, 9.908237704320786e+00, 9.426816744323027e+00, 7.101519190026379e-02, 2.725552925205998e+01, 9.760913155310085e+00, 9.760913155310085e+00, 5.964453786572185e+04, 5.189989231390612e+04, 7.729001762631485e+02, 5.402227120247934e+05, 5.355685357776579e+04, 5.355685357776579e+04, 1.525099571264788e-04, 1.517439244926303e-04, 1.524329155169286e-04, 1.518372563239861e-04, 1.521151726787854e-04, 1.521151726787854e-04, 6.594828726201592e-03, 6.399681905892300e-03, 6.733795003740752e-03, 6.578595481058418e-03, 6.284647409423548e-03, 6.284647409423548e-03, 1.455873882187853e-01, 5.386785340122084e-02, 1.772575638991895e-01, 8.850748687124807e-02, 1.197968836457716e-01, 1.197968836457716e-01, 6.875369467534709e+01, 1.012335775827125e+01, 7.146663204493187e+01, 1.920792369982746e-03, 4.446642752569446e+01, 4.446642752569446e+01, 6.017464903633265e+05, 4.031448391945296e+05, 9.574968365468716e+05, 2.853120840444642e+02, 5.329472753722589e+05, 5.329472753722589e+05, 4.170629240242792e-02, 6.032353160763471e-02, 5.369706000702427e-02, 4.853666848182482e-02, 5.112063760989742e-02, 5.112063760989742e-02, 4.266513823950108e-02, 3.048575461889274e-01, 2.114909762948219e-01, 1.369318386678758e-01, 1.727992177887080e-01, 1.727992177887080e-01, 4.868014263257071e-02, 4.979734213182028e+00, 2.780289353647937e+00, 9.907724990359075e-01, 1.710269504347909e+00, 1.710269504347910e+00, 4.316974476490873e-01, 9.728411342429536e+02, 3.921118904777628e+02, 9.828734385701757e-01, 1.285807830987737e+02, 1.285807830987737e+02, 3.705071661734569e+04, 1.964459228149110e+07, 2.865708569560217e+06, 1.480818593819084e+02, 8.682210925506414e+05, 8.682210925506451e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_pgsl025_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_pgsl025", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [1.406921019028984e-10, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 4.263038607035283e-316, 0.000000000000000e+00, "nan", 0.000000000000000e+00, 1.595012532943603e+155, 5.516016219639091e-155, 2.625302904004208e+245, 5.597491511819572e+158, 3.090508690899850e+211, 1.215048830651391e+158, 2.799161114067105e+211, 2.716532942005818e+97, 1.903074975319420e+214, 1.227586382261323e-155, 4.828071261941095e+229, 2.162616366313402e+214, 1.794518987355948e+243, 3.564438449595738e+175, 2.206990992014733e+206, 1.844568158130621e+227, 5.418458061662912e+236, 1.015973345809923e+277, 8.490499561834738e+186, 2.479026340721206e+167, 4.985525192416879e+240, 3.261437598339800e+202, 4.987087859510623e-20, 2.967518316149071e+221, 4.124123048288294e+173, 8.541170186087942e-18, 6.325927244465694e-159, 6.681585884835127e-159, 6.500359883861327e-159, 7.984731523027108e-101, 3.303321485736789e+156, 1.875066234096450e+178, 2.179096360602230e+216, 3.435039780342824e+178, 3.464966603161957e+216, 1.552913327967991e+178, 2.366217554712699e-156, 2.174999561781158e-152, 1.317955895414265e+200, 3.100576947985571e-93, 9.579791085540420e+63, 9.862552070396440e+161, 2.250274658857569e+249, 6.017470116490231e-83, 1.975969287182322e+169, 1.408978609155805e+285, 2.318501084398463e-151, 2.680951117592644e-144, 2.241653784636058e+169, 7.090771375776590e+235, 7.991307905557879e+224, 7.626237759415984e-261, 1.633100986443666e+207, 1.950254753746098e+162, 4.712790227906379e+240, 3.647080146096708e+226, 2.523722161184151e+159, 4.654496176878048e+226, 7.132086157101364e+197, 2.546827648305214e+244, 4.275008493685904e-156, 1.484384449746849e+245, 1.252900889912475e-85, 1.462061641974585e+223, 1.363775384535498e-153, 4.613766224161138e+174, 2.633497110588349e+197, 1.543811480423613e-155, 1.374620808438081e+256, 3.036164860737279e+255, 5.892412466600196e+251, 6.141908574368437e-152, 2.408384061042828e+253, 3.031158964026416e+257, 2.215291866982963e+268, 3.258589076566459e+53, 5.550919041595751e+182, 2.242199130309243e+232, 5.815121076418588e+259]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_pgsl025_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_pgsl025", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
