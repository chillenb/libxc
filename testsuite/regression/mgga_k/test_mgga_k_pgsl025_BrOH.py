
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data

# test_mgga_k_pgsl025_BrOH_1_zk() not generated due to NaN

# test_mgga_k_pgsl025_BrOH_1_vrho() not generated due to NaN


def test_mgga_k_pgsl025_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_pgsl025", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [2.657732861875011e-06, 2.657673010056417e-06, 2.657450318028386e-06, 2.658429570163190e-06, 2.657700927568262e-06, 2.657700927568262e-06, 7.446579789450542e-04, 7.445827492442082e-04, 7.424233005522892e-04, 7.456698726929428e-04, 7.446097705255579e-04, 7.446097705255579e-04, 1.455745646146784e-01, 1.468348509622877e-01, 1.819007555555542e-01, 1.765660295681148e-01, 1.460299847592703e-01, 1.460299847592703e-01, 9.908237704320786e+00, 9.426816744323027e+00, 7.101519190026379e-02, 2.725552925205998e+01, 9.760913155310085e+00, 9.760913155310085e+00, 5.964453786572185e+04, 5.189989231390612e+04, 7.729001762631485e+02, 5.402227120247934e+05, 5.355685357776579e+04, 5.355685357776579e+04, 1.525099571264788e-04, 1.517439244926303e-04, 1.524329155169286e-04, 1.518372563239861e-04, 1.521151726787854e-04, 1.521151726787854e-04, 6.594828726201592e-03, 6.399681905892300e-03, 6.733795003740752e-03, 6.578595481058418e-03, 6.284647409423548e-03, 6.284647409423548e-03, 1.455873882187853e-01, 5.386785340122084e-02, 1.772575638991895e-01, 8.850748687124807e-02, 1.197968836457716e-01, 1.197968836457716e-01, 6.875369467534709e+01, 1.012335775827125e+01, 7.146663204493187e+01, 1.920792369982746e-03, 4.446642752569446e+01, 4.446642752569446e+01, 6.017464903633265e+05, 4.031448391945296e+05, 9.574968365468716e+05, 2.853120840444642e+02, 5.329472753722589e+05, 5.329472753722589e+05, 4.170629240242792e-02, 6.032353160763471e-02, 5.369706000702427e-02, 4.853666848182482e-02, 5.112063760989742e-02, 5.112063760989742e-02, 4.266513823950108e-02, 3.048575461889274e-01, 2.114909762948219e-01, 1.369318386678758e-01, 1.727992177887080e-01, 1.727992177887080e-01, 4.868014263257071e-02, 4.979734213182028e+00, 2.780289353647937e+00, 9.907724990359075e-01, 1.710269504347909e+00, 1.710269504347910e+00, 4.316974476490873e-01, 9.728411342429536e+02, 3.921118904777628e+02, 9.828734385701757e-01, 1.285807830987737e+02, 1.285807830987737e+02, 3.705071661734569e+04, 1.964459228149110e+07, 2.865708569560217e+06, 1.480818593819084e+02, 8.682210925506414e+05, 8.682210925506451e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05

# test_mgga_k_pgsl025_BrOH_1_vlapl() not generated due to NaN


def test_mgga_k_pgsl025_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_pgsl025", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
