
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_k_pc07_opt_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_pc07_opt", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([9.576441355770073e+02, 9.576240422466032e+02, 9.575736041280999e+02, 9.579018626923280e+02, 9.576332113362187e+02, 9.576332113362187e+02, 7.649343033491620e+01, 7.647896905249888e+01, 7.604617042173992e+01, 7.619577862418716e+01, 7.649007004546563e+01, 7.649007004546563e+01, 6.065233952975984e+00, 6.086386127054907e+00, 6.674383098649808e+00, 6.399391647867790e+00, 6.072104207891227e+00, 6.072104207891227e+00, 5.980836275023277e-01, 5.831142505392614e-01, 1.168177900632578e+01, 1.007220329656371e+00, 5.934351748276306e-01, 5.934351748276304e-01, 6.640053152162366e-01, 6.753101350478989e-01, 1.002853171230671e+00, 6.168804736052419e-01, 6.620884883728172e-01, 6.620884883728172e-01, 8.838622149258383e+02, 3.597699258610896e+02, 4.134740268824918e+01, 7.163004356505800e+02, 4.121967564166240e+01, 2.184474429696121e+02, 2.742539274255191e+01, 6.935345826913931e+01, 3.891865180417381e+01, 3.950148332265448e+01, 3.827958166005034e+01, 2.630403091725037e+01, 7.619977629268902e+00, 1.213002956623863e+01, 9.219553212220365e+00, 2.047031687504497e+00, 2.420752612431492e+00, 3.401420677314536e+00, 8.063655240642430e-01, 3.138463247970129e+00, 7.438202537154897e-01, 2.514859671291114e+01, 6.901994569116964e-01, 6.901994569116964e-01, 5.817410321511892e-01, 5.799356310186121e-01, 3.428093172584866e-01, 6.894857948645150e-01, 4.801349807103978e-01, 4.770742910603597e-01, 1.539416510229799e+00, 1.651157672545191e+00, 1.612383245265154e+00, 1.670561522892674e+00, 1.593316664232867e+00, 1.596613090731085e+00, 1.420794019485150e+00, 1.548250699045966e+00, 9.828128145105605e+00, 4.844923140454186e-01, 2.587959483307456e+00, 5.397068142072645e+00, 7.564214768372891e+00, 9.628139785354010e-01, 9.795770418441926e-01, 6.379358854449723e-01, 2.596727514173423e+00, 1.675734078367145e+00, 1.617654777141888e+00, 9.001523274609341e-01, 1.431756096010389e+00, 8.301520970802252e-01, 6.418915667998963e-01, 6.418915667998958e-01, 5.773381571176470e-01, 4.426718570482334e-01, 4.768849521104467e-01, 5.781333190135602e-01, 3.948424406271953e-01, 3.948424406271957e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_k_pc07_opt_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_pc07_opt", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-9.576441355770078e+02, -9.576240422466037e+02, -9.575736041281002e+02, -9.579018626923277e+02, -9.576332113362186e+02, -9.576332113362186e+02, 8.677397880437161e+01, 8.677306557481266e+01, 8.675198812050493e+01, 8.678143344931958e+01, 8.677448061317730e+01, 8.677448061317730e+01, 3.094372054528301e+00, 3.085346910625684e+00, 2.847832827455893e+00, 2.903720207470021e+00, 3.091112721350191e+00, 3.091112721350191e+00, 2.811894851831127e-01, 2.857536552771567e-01, 4.280513696286525e+00, 8.058433045281184e-02, 2.826466598731550e-01, 2.826466598731551e-01, -7.913149450433359e-01, -7.947334999508512e-01, 5.956862057802497e-02, -6.253151474977950e-01, -7.795441792438339e-01, -7.795441792438339e-01, 1.595230462883467e+03, 1.927872594353533e+02, -4.134740268824915e+01, 1.540716239640571e+03, -4.121967564166239e+01, 1.947801987924847e+02, -2.738766910836770e+01, 2.601505581264426e+01, 2.882197594747997e+01, 2.924905798939484e+01, 2.942868675099546e+01, -2.630403091725038e+01, 1.416734218152173e+01, 1.227725262861799e+01, 1.661025588486643e+01, 2.298831409631810e+00, 2.579663215620982e+00, 2.644902113484003e+00, -8.063655240642431e-01, 6.327786697666004e-01, -7.438202537154899e-01, 2.609923582547276e+01, -6.901994569116958e-01, -6.901994569116958e-01, -5.800328338143202e-01, -5.796142797064991e-01, -3.426318661914234e-01, -6.894857948645147e-01, -4.767675781783494e-01, -4.770742910603595e-01, 2.393790463826743e+00, 2.226061610892593e+00, 2.289735837632022e+00, 2.618016851358973e+00, 2.301790549259489e+00, 2.312120293645749e+00, 2.259879274384558e+00, 1.745883161517309e+00, 1.551751280115969e+01, -4.844923140454181e-01, 2.071923782404868e+00, 1.010757134736998e+01, 1.881223054342627e+01, -9.628139785354000e-01, -6.759669676023115e-01, -6.379358854449723e-01, 5.715121705561449e-01, 6.446890409757109e-01, 1.512916223702813e+00, -7.571259567112033e-01, -3.770454726630920e-01, 8.006431979634834e-01, -6.418915667998958e-01, -6.418915667998951e-01, -5.773381571176469e-01, -4.426251936445216e-01, -4.768849521104465e-01, -5.781333190135604e-01, -3.948424406271952e-01, -3.948424406271954e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_pc07_opt_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_pc07_opt", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([6.466056283234561e-06, 6.466009197756442e-06, 6.465764469780238e-06, 6.466536223526937e-06, 6.466031741755515e-06, 6.466031741755515e-06, -1.714311312077178e-04, -1.714088688851053e-04, -1.706722609942217e-04, -1.703724737890396e-04, -1.714253227859502e-04, -1.714253227859502e-04, 1.773300485313875e-02, 1.776144335349760e-02, 1.865197410369786e-02, 1.929855171101672e-02, 1.774544155688908e-02, 1.774544155688908e-02, -1.170299667844034e+00, -1.131612560671251e+00, 7.368075124216939e-03, 2.622744439045943e-01, -1.161261849731942e+00, -1.161261849731942e+00, 1.187035101626018e+05, 1.043643920604703e+05, -2.455055441480316e+02, 5.931782662255391e+05, 1.076677734602523e+05, 1.076677734602523e+05, 2.084590575264894e-03, 3.163893627986861e-05, 4.469581719292751e-04, 1.998842246927652e-03, 4.468621392195734e-04, 1.419861626041876e-05, 8.129317295009866e-03, 5.611501907954224e-04, -8.844889699495451e-04, -9.100066714665695e-04, -9.054710853216348e-04, 8.223561338896962e-03, 1.096784945323910e+00, 5.994103380242410e-01, 1.633453455704867e+00, -3.303482848954539e-02, -3.464143143922294e-02, 2.562370914335063e-02, 6.875369789659389e+01, 3.081542277952800e+01, 7.146664024634522e+01, -1.009944894772542e-04, 4.446729428797773e+01, 4.446729428797773e+01, 6.031310020583335e+05, 4.031462563357521e+05, 9.574948906133804e+05, 2.853120840444643e+02, 5.383033075310469e+05, 5.329472753722589e+05, 2.935740772501705e-01, 2.977455635379156e-01, 2.964366499099755e-01, 3.104882647793195e-01, 2.952557792499777e-01, 2.958136709196393e-01, 3.235569512911763e-01, -2.517086900594066e-02, 1.946516230470813e+00, 3.871492494294327e-01, 2.721206827928950e-02, 1.201969652245313e+00, 7.555407080162475e-01, 5.111822292084749e+00, 2.572687299924008e+00, 1.460335367408629e+00, 9.456601282415082e-02, 1.579836832686601e-01, -7.616668755361471e-02, 1.117161465046018e+03, 1.758046620711623e+02, -2.102519639291629e-01, 1.285807832823024e+02, 1.285807832823024e+02, 3.705071661734569e+04, 1.964517025253040e+07, 2.865708569560217e+06, 1.480818596429328e+02, 8.682210925506414e+05, 8.682210925506453e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_pc07_opt_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_pc07_opt", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 2.090915761488539e-01, 2.090887040411696e-01, 2.089959810548271e-01, 2.089609450932991e-01, 2.090911446396749e-01, 2.090911446396749e-01, 1.731610349522449e-01, 1.731921157762456e-01, 1.738884360812979e-01, 1.728115212305627e-01, 1.731701648819161e-01, 1.731701648819161e-01, 2.098707851546879e-01, 2.099159460660332e-01, 1.794761205299911e-01, 1.916806340051962e-01, 2.099353916685370e-01, 2.099353916685370e-01, -1.399122362777241e-01, -1.404587978085896e-01, 2.872103487601415e-01, -1.181782557514611e-02, -1.404401389629510e-01, -1.404401389629510e-01, -4.731734061532358e-02, 1.762689898354763e-01, 0.000000000000000e+00, -4.384509722031589e-02, 0.000000000000000e+00, 1.821693260366746e-01, -1.105085242027224e-04, 1.767565271653905e-01, 2.074577630354605e-01, 2.083813050623513e-01, 2.085995139598613e-01, 0.000000000000000e+00, -2.469007084533434e-02, 5.516757130541491e-02, -4.665786123793647e-02, 2.064761499362899e-01, 2.103740469684883e-01, 1.715991210609253e-01, 0.000000000000000e+00, -5.687530908546585e-02, 0.000000000000000e+00, 1.901173840454896e-01, 0.000000000000000e+00, 0.000000000000000e+00, -6.058143625424292e-05, -1.440748138305143e-10, -5.072083921029928e-11, 0.000000000000000e+00, -5.185553221423403e-04, 0.000000000000000e+00, -7.244073569374039e-10, -6.116323786025154e-09, -1.653475596296347e-11, -7.638051747886838e-06, -9.748540457835071e-09, -4.544982875967905e-12, -2.850457043160477e-11, 1.969375109158783e-01, -5.116435254048343e-02, 0.000000000000000e+00, 1.757973692718508e-01, -1.577532810280090e-02, -2.007919652078114e-02, 0.000000000000000e+00, -2.721990231761781e-04, 0.000000000000000e+00, 1.841473337993887e-01, 1.752184037189925e-01, 2.089175307728057e-01, -4.483356308166180e-03, 1.671068025342639e-01, 2.105956686179924e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.197246987270584e-07, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
