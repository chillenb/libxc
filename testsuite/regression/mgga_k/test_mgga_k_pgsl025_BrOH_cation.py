
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_k_pgsl025_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_pgsl025", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.328082967967289e+03, 2.328084270992947e+03, 2.328112814165335e+03, 2.328092974474205e+03, "nan", inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, 6.158898184789743e-01, 5.933856788698868e-01, inf, inf, inf, inf, inf, 3.208754030465930e+151, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, 1.708988517385277e+01, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_k_pgsl025_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_pgsl025", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [2.830534565399171e+03, 2.830530054098072e+03, 2.830587684568420e+03, 2.830568623007798e+03, 2.830714652334146e+03, 2.830762587949459e+03, 2.830115831442711e+03, 2.829998985072903e+03, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", -5.985553325001002e-01, -5.676651952775947e-01, -5.693935410206207e-01, -5.337065818615644e-01, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 1.065180918384244e+136, -9.698131128607332e+151, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 2.715072419114657e+01, 2.712813373809717e+01, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan"]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_pgsl025_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_pgsl025", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [5.314865541902636e-06, 0.000000000000000e+00, 5.314877473105034e-06, 5.314706214880409e-06, 0.000000000000000e+00, 5.314761789545037e-06, 5.314330532095072e-06, 0.000000000000000e+00, 5.314185942894398e-06, 5.316126501614160e-06, 0.000000000000000e+00, 5.316476178858566e-06, 5.314763748014359e-06, 0.000000000000000e+00, 5.315659216268295e-06, 5.314763748014359e-06, 0.000000000000000e+00, 5.315659216268295e-06, 1.489471120426001e-03, 0.000000000000000e+00, 1.488416474945260e-03, 1.489317469627951e-03, 0.000000000000000e+00, 1.488200418330173e-03, 1.484959295434881e-03, 0.000000000000000e+00, 1.483790099061985e-03, 1.491789442733719e-03, 0.000000000000000e+00, 1.490500735395748e-03, 1.490658468047506e-03, 0.000000000000000e+00, 1.486574387146463e-03, 1.490658468047506e-03, 0.000000000000000e+00, 1.486574387146463e-03, 2.803582423563805e-01, 0.000000000000000e+00, 2.696878316222881e-01, 2.841909951814345e-01, 0.000000000000000e+00, 2.710829265545272e-01, 3.359074929160683e-01, 0.000000000000000e+00, 3.544990299972074e-01, 3.377053440019367e-01, 0.000000000000000e+00, 3.318142528529749e-01, 2.525127927908552e-01, 0.000000000000000e+00, 4.308599909078028e-01, 2.525127927908552e-01, 0.000000000000000e+00, 4.308599909078028e-01, 2.539588637151878e+01, 0.000000000000000e+00, 2.249148097761870e+01, 2.438720960290815e+01, 0.000000000000000e+00, 2.120571420906932e+01, 1.823630593831302e-01, 0.000000000000000e+00, 1.472504405000895e-01, 5.658987408307299e+01, 0.000000000000000e+00, 5.430887039765022e+01, 2.227048342638913e+01, 0.000000000000000e+00, 1.463508588786506e+02, 2.227048342638912e+01, 0.000000000000000e+00, 1.463508588786506e+02, 6.324503014234192e+05, 0.000000000000000e+00, 5.271019733892687e+05, 5.496562727421005e+05, 0.000000000000000e+00, 4.471116735888456e+05, 3.197159921025621e+03, 0.000000000000000e+00, 2.714904401504723e+03, 2.911560192811907e+06, 0.000000000000000e+00, 3.062094217456302e+06, 8.908246190359766e+05, 0.000000000000000e+00, 4.834051151218384e+06, 8.908246190359766e+05, 0.000000000000000e+00, 4.834051151218380e+06, 3.043509033941792e-04, 0.000000000000000e+00, 3.046280200123773e-04, 3.027461613529956e-04, 0.000000000000000e+00, 3.030759511630018e-04, 3.042671387391807e-04, 0.000000000000000e+00, 3.045785483817162e-04, 3.028900839224659e-04, 0.000000000000000e+00, 3.031684933842764e-04, 3.035244341568674e-04, 0.000000000000000e+00, 3.038475014282835e-04, 3.035244341568674e-04, 0.000000000000000e+00, 3.038475014282835e-04, 1.309829910006728e-02, 0.000000000000000e+00, 1.310061309573974e-02, 1.269365136890142e-02, 0.000000000000000e+00, 1.270687718342416e-02, 1.366490888883155e-02, 0.000000000000000e+00, 1.350170801337262e-02, 1.330181964513014e-02, 0.000000000000000e+00, 1.313982180211711e-02, 1.246067089348064e-02, 0.000000000000000e+00, 1.283460113517374e-02, 1.246067089348064e-02, 0.000000000000000e+00, 1.283460113517374e-02, 2.831723604531490e-01, 0.000000000000000e+00, 2.849563948485893e-01, 1.084203127721542e-01, 0.000000000000000e+00, 1.067963883068254e-01, 4.206416326329914e-01, 0.000000000000000e+00, 3.581506379681265e-01, 1.889160704232808e-01, 0.000000000000000e+00, 1.738151322628165e-01, 2.321991617595898e-01, 0.000000000000000e+00, 2.780905632843436e-01, 2.321991617595900e-01, 0.000000000000000e+00, 2.780905632843435e-01, 1.680322501718963e+02, 0.000000000000000e+00, 1.633153647255778e+02, 2.429561890532178e+01, 0.000000000000000e+00, 2.393349037244075e+01, 2.269837421707443e+02, 0.000000000000000e+00, 1.940019561775987e+02, 3.832835380601127e-03, 0.000000000000000e+00, 3.835189495597517e-03, 1.121634140249295e+02, 0.000000000000000e+00, 9.435052051172438e+01, 1.121634140249295e+02, 0.000000000000000e+00, 9.435052051172438e+01, 6.896246147170695e+06, 0.000000000000000e+00, 6.144157416218540e+06, 3.268601510341824e+06, 0.000000000000000e+00, 3.124571891844912e+06, 7.817219853849012e+06, 0.000000000000000e+00, 6.581441351138420e+06, 6.939684423521389e+02, 0.000000000000000e+00, 6.813232572463984e+02, 7.337213909483019e+06, 0.000000000000000e+00, 2.832798288875731e+06, 7.337213909483018e+06, 0.000000000000000e+00, 2.832798288875731e+06, 9.328263577353801e-02, 0.000000000000000e+00, 9.151199515894801e-02, 1.366313724726786e-01, 0.000000000000000e+00, 1.338280719853241e-01, 1.215586379658634e-01, 0.000000000000000e+00, 1.190170110352297e-01, 1.088469442674388e-01, 0.000000000000000e+00, 1.067928505909709e-01, 1.152112282714474e-01, 0.000000000000000e+00, 1.129184372546416e-01, 1.152112282714474e-01, 0.000000000000000e+00, 1.129184372546416e-01, 8.718543255572984e-02, 0.000000000000000e+00, 8.621676390310644e-02, 6.915476899663140e-01, 0.000000000000000e+00, 6.780114904512690e-01, 4.788145226916256e-01, 0.000000000000000e+00, 4.675501249611038e-01, 2.956729842383216e-01, 0.000000000000000e+00, 2.910538559009553e-01, 3.827534299798173e-01, 0.000000000000000e+00, 3.767230302188577e-01, 3.827534299798173e-01, 0.000000000000000e+00, 3.767230302188577e-01, 9.886024617149800e-02, 0.000000000000000e+00, 9.642252460770953e-02, 1.194187055820974e+01, 0.000000000000000e+00, 1.172855195423387e+01, 6.650309886995337e+00, 0.000000000000000e+00, 6.417840149459259e+00, 2.123284675929348e+00, 0.000000000000000e+00, 2.077433025456897e+00, 3.873368798388030e+00, 0.000000000000000e+00, 3.867080634745529e+00, 3.873368798388034e+00, 0.000000000000000e+00, 3.867080634745530e+00, 9.045180541077454e-01, 0.000000000000000e+00, 8.749077040216444e-01, 3.383498365853439e+03, 0.000000000000000e+00, 3.314985802507890e+03, 1.390172763857115e+03, 0.000000000000000e+00, 1.259415447184266e+03, 2.044525856382108e+00, 0.000000000000000e+00, 1.910524559464577e+00, 3.625707363724385e+02, 0.000000000000000e+00, 3.079851680515123e+02, 3.625707363724384e+02, 0.000000000000000e+00, 3.079851680515124e+02, 2.160802635499018e+05, 0.000000000000000e+00, 1.941851121390783e+05, 1.678524443444068e+08, 0.000000000000000e+00, 1.667067706068541e+08, 1.992427887587956e+07, 0.000000000000000e+00, 1.656041588063657e+07, 4.122466915137452e+02, 0.000000000000000e+00, 3.926655637176709e+02, 8.633543549065117e+06, 0.000000000000000e+00, 3.678861720624852e+06, 8.633543549065135e+06, 0.000000000000000e+00, 3.678861720624863e+06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_pgsl025_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_pgsl025", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [2.813471888941847e-10, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, "nan", 0.000000000000000e+00, 3.648503356179753e+151, 2.854365526358130e-158, 1.351645930361094e+242, 2.517830557203974e+155, 1.445858722741725e+208, 6.273871181679666e+154, 1.445190365054668e+208, 2.152585332226801e+91, 1.610991813555818e+208, 1.572113562992958e-158, 7.659945649350812e+222, 1.750698109563869e+208, 1.449998295794271e+237, 5.810658613594378e+166, 4.447522583830926e+197, 4.238932506255531e+221, 2.207688201560436e+226, 2.218793341108663e+268, 1.919458147217724e+178, 1.547361145076221e+172, 3.081119436996660e+245, 1.748379412960670e+207, 3.711000706096725e-15, 1.591386080782755e+226, 3.067827394620008e+178, 3.452107629480868e-12, 2.188120505380862e-153, 2.504142561998983e-153, 2.015562803572503e-153, 1.768371361824658e-98, 6.201059764509811e+158, 6.501836161591811e+181, 1.067043419143024e+220, 1.983765756804987e+181, 5.558535550335790e+220, 1.407577316768000e+181, 4.826191599885897e-152, 5.533370460300948e-146, 5.981116052447680e+207, 5.853319377828122e-87, 4.098314543754111e+76, 7.723996550096721e+164, 1.341956981221521e+252, 5.247038975325479e-82, 3.653333064471178e+170, 7.870020090350596e+284, 1.632447032453889e-144, 3.976022553513947e-144, 5.570919290238969e+170, 2.852179796797391e+231, 3.133269520500538e+220, 3.012579895413900e-265, 6.507137315199346e+202, 7.739389894072356e+157, 1.872506720122807e+236, 1.245151769731182e+222, 4.238154755714321e+154, 9.711544017414774e+221, 1.808775045346797e+193, 5.849658891510842e+239, 9.831000446717379e-161, 1.304195671023922e+243, 5.741156967526012e-90, 1.525708576647729e+219, 4.866808334214216e-157, 9.522495086597481e+170, 5.388594490090274e+193, 2.060688262849948e-158, 9.902143351615316e+247, 9.615982640785335e+247, 1.605257496253112e+248, 1.247464638374914e-158, 5.000128771604427e+246, 2.098446450953880e+249, 4.474378428534140e+255, 1.070135428505660e+42, 2.537106674880961e+178, 1.317110811365756e+222, 2.851726803556669e+249, 2.789755118304125e+249, 1.050646945477470e-154, 5.113935082106899e+250, 2.716861117327435e+159, 1.291462346736774e+154, 8.328700150479120e+245, 1.822953637346521e+46, 4.116740944630919e+182, 2.904241536748990e+253, 1.948346270921444e+224, 1.903905867334558e+245, 1.781401202789119e+221, 6.729160259039182e-90, 1.473292515918112e-99, 1.592104920939806e+171, 4.930966348792772e+233, 2.183965443096572e+177, 4.014551412786330e-27, 9.451630444658520e+236, 7.512531764810453e-249, 6.972221292263212e+261, 4.089639954239818e+178, 7.766342691780714e-143, 6.457397920551986e+170, 5.974330715017678e+183, 7.946811374504079e+231, 2.987471460514004e+251, 2.821810494491033e+189, 1.883058476305099e+185, 7.306575998464756e+188, 7.787230355970337e+245, 1.074425118918239e-261, 1.778033356599403e-155, 3.459372572675053e+231, 2.225097321753053e-156, 1.318907233428716e+193, 4.210613602290829e+178, 3.144210531373550e+244, 2.087744297337079e-154, 3.512955361739292e+207, 4.897340448312541e+154, 1.198802690806832e+246, 5.460360844301894e+240, 7.218927080659019e+157, 4.366852059836448e+159, 8.512701721204209e+207, 9.448713454119226e+154, 4.886868648141751e+212, 7.659184010298865e+255, 1.005406141324247e+222, 1.649779708680170e-155, 1.791205851696866e+212, 1.137541341352602e+222, 2.886352265717488e+217, 9.559571581181221e+171, 4.246872434438339e+221, 3.279555739971574e+257, 3.954681377035108e-86, 1.597410710309328e+161, 5.579670241339241e+170, 4.828305378396675e+232, 2.993064206421783e-155, 1.374741945008346e+180, 1.890897566823962e+228, 1.797867325736166e+223, 1.510057069674538e+247, 1.416515495134123e+256, 5.825328964593898e-154, 1.401748835061567e+247, 2.616730626528521e+48, 3.620828188550867e-150, 8.350063315370764e+217, 1.869969330944195e-153, 2.890945172005842e+173, 1.555355340008241e+183, 1.177204953887507e+178, 2.525038960035095e+221, 9.527586954503954e+230, 1.502357760276085e+207, 7.732086534105468e-147, 1.151763161965400e+255, 1.352122039838798e+178, 1.761652339242597e+258, 3.100043664781615e-142, 1.795585675878351e+212, 5.310890726198742e-150, 1.015089487817283e+171, 1.247371150418673e+169, 1.468138380720427e-105, 3.316248856561726e+236]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_pgsl025_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_pgsl025", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
