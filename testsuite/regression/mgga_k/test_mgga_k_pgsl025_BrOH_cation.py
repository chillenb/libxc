
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_k_pgsl025_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_pgsl025", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([2.396574433284164e+03, 2.396577354384936e+03, 2.396611626738090e+03, 2.396567826113490e+03, 2.396587741630408e+03, 2.396587741630408e+03, 6.669554905843489e+01, 6.669163984860404e+01, 6.660271074772133e+01, 6.676033228351378e+01, 6.668362637700662e+01, 6.668362637700662e+01, 3.304390188944974e+00, 3.321162262043785e+00, 3.836527005352451e+00, 3.789319326722761e+00, 3.930939125256113e+00, 3.930939125256113e+00, 7.145361143536757e-01, 6.817584450677181e-01, 5.416786912413812e+00, 1.205251739928675e+00, 9.717192470205902e-01, 9.717192470205903e-01, 1.877856299670684e+02, 1.633227172571439e+02, 9.768648198887657e+00, 7.133888298015829e+02, 3.082591522484051e+02, 3.082591522484051e+02, 5.816853352143260e+02, 1.781545666927631e+02, 1.911717660729858e+04, 2.145795105852360e+03, 1.625894367800655e+02, 1.351872968225738e+02, 3.273432522344776e+04, 3.794087096932050e+01, 3.365911177562745e+01, 3.351227753151512e+01, 3.229825419788344e+01, 3.125622771018123e+01, 3.980050996626208e+01, 5.040470938730986e+00, 3.167435533783904e+01, 1.518040351194093e+00, 1.860529487320273e+00, 1.920396314407244e+00, 7.889556335828058e+00, 1.144901127422333e+01, 4.791020831746662e+02, 1.730070672066731e+01, 1.052342309810659e+00, 8.578936032619371e-01, 3.992441170196436e+04, 2.470874424123401e+10, 6.331668909072569e+09, 2.014488608973728e+01, 2.574719355524026e+03, 5.725805261667290e+06, 1.429383992964835e+09, 2.353693513108014e+08, 7.041489570344724e+10, 1.153986532360764e+05, 2.411646825687049e+07, 2.303095370572356e+11, 2.110793955550079e+10, 1.594846369495045e+00, 1.450427589195700e+01, 1.923485505492688e+00, 1.508419011601339e+00, 8.280099736598945e+01, 5.378896553471718e+01, 7.616679719473977e+02, 1.786135897255908e+03, 1.598481716353873e+01, 1.386687169729382e+00, 1.069851827589763e+00, 1.390125381300665e+00, 2.212371538209338e+01, 8.116789420128230e+00, 6.916020040341559e-01, 1.331274581006014e+02, 1.352051574579177e+00, 9.014336986184845e+04, 4.371037513238542e+04, 1.929189043034792e+06, 8.339429920281405e-01, 1.442537286933051e+05, 4.852935946993207e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_k_pgsl025_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_pgsl025", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([2.716393701008044e+03, 2.716366034054886e+03, 2.716443692355575e+03, 2.716402337174731e+03, 2.716563105009513e+03, 2.716584760126206e+03, 2.715999355778824e+03, 2.715865955083359e+03, 2.716425565104946e+03, 2.716123438750101e+03, 2.716425565104946e+03, 2.716123438750101e+03, 6.274208195183718e+01, 6.279683553781842e+01, 6.275097097395921e+01, 6.280867621940047e+01, 6.299426006567435e+01, 6.305665604724608e+01, 6.262663273940640e+01, 6.269198133486643e+01, 6.269486791572974e+01, 6.290972666731027e+01, 6.269486791572974e+01, 6.290972666731027e+01, 4.509747309480909e-01, 6.814219060928904e-01, 3.724310019694451e-01, 6.534110872735234e-01, -7.454969296081954e-01, -1.149503172965151e+00, -8.414710123407241e-01, -6.865747559320476e-01, 9.877120240880343e-01, -3.181848567258805e+00, 9.877120240880343e-01, -3.181848567258805e+00, -7.911774362861090e-01, -7.069158233566765e-01, -7.454222507972602e-01, -6.557631625334281e-01, -1.753548531834602e+00, 4.186817411746050e-01, -1.578247240121083e+00, -1.420233470685503e+00, -8.202810695529158e-01, -3.205593754656444e+00, -8.202810695529150e-01, -3.205593754656443e+00, -3.326872478139356e+02, -2.956563926852348e+02, -2.930499209583235e+02, -2.543900785995359e+02, -1.691716756109559e+01, -1.460900206582860e+01, -1.166978830953155e+03, -1.211073629630227e+03, -4.495618207250624e+02, -8.592241706487843e+02, -4.495618207250624e+02, -8.592241706487847e+02, -7.538312904874821e+02, -3.770191517761863e+02, 1.063978522334284e+02, 1.082135376680685e+02, -2.774757288258002e+04, -3.517107820652393e+04, -3.004711608401926e+03, -3.339635140162521e+03, 1.328723366669820e+02, 1.333788237867944e+02, 1.774943696076524e+02, 1.800980248020834e+02, -6.277497098497752e+04, -4.624113135255245e+04, -1.381405804925092e+01, -1.379125272861106e+01, -8.926986872432627e+00, -8.066400280540726e+00, -7.851688764382046e+00, -7.099150636019783e+00, -3.454855268478607e+00, -5.217692369121952e+00, -1.706149044138155e+00, -3.493135955037340e+00, -4.535765888473242e+01, -7.741844281433644e+01, -2.194003770575284e+00, -2.346547946248703e+00, -6.354350961733319e+01, -3.507206274187339e+01, 2.188814580529934e+00, 2.343141835375028e+00, 2.251773153659821e+00, 1.981891344943755e+00, 2.153790662386128e+00, 1.880020139590139e+00, -1.273903881510192e+01, -1.233595896423188e+01, -1.862261109091924e+01, -1.820565389862129e+01, -8.431606064560939e+02, -7.592228216439603e+02, 2.679892730371453e+01, 2.677719271304342e+01, -1.462725565051560e+00, -1.086743962878582e+00, -1.078521496217224e+00, -8.132381207522321e-01, -7.208121049384614e+04, -6.160355684459256e+04, -4.395357298566553e+10, -3.853106954421619e+10, -1.895906758210862e+10, -3.475395978083078e+09, -2.532079589617013e+01, -4.060723952042237e+01, -1.116284432018565e+04, -1.637767927756209e+03, -2.664248161663306e+07, -2.941134975757005e+06, -2.359035072412272e+09, -2.405310419550836e+09, -3.920534484589145e+08, -3.925083862151165e+08, -1.169550411227355e+11, -1.177565940773082e+11, -2.141405596456889e+05, -1.707623153301527e+05, -3.397852901454956e+07, -4.633780463475304e+07, -3.834828585870251e+11, -3.842113611780505e+11, -3.423507560457927e+10, -3.611541459719425e+10, 6.146849989056414e-01, 6.462023927073323e-01, -1.994092310373588e+01, -2.079609648499320e+01, 1.267280046632340e+00, 9.379330839619945e-01, 1.531204812771954e+00, 1.550724254906354e+00, -1.355823279201960e+02, -1.323289896602510e+02, -8.538889627181729e+01, -8.045200539500146e+01, -1.254739925390938e+03, -1.282410062447220e+03, -2.974874636089793e+03, -2.977148369801302e+03, -2.340110838894357e+01, -2.665836140056334e+01, -1.187057992730983e+00, -1.198477571312123e+00, -6.641226161323939e-01, -6.652897147302059e-01, 4.341925256552565e-01, 4.831709273389346e-01, -4.550891637942298e+01, -2.713720449688696e+01, -1.187030751805770e+01, -1.383253229323160e+01, 3.833811363971923e-01, 4.367396098216424e-01, -2.769432825311980e+02, -1.742224492287967e+02, -2.150318928364055e+00, -1.458540063270722e+00, -2.438260408128360e+05, -6.613389745966082e+04, -2.159485361449638e+04, -1.237561255105806e+05, -3.793604433706204e+06, -2.734659107132311e+06, -7.252777541533422e-01, -1.078453666405094e+00, -5.190253513575644e+05, -1.217065044120015e+05, -1.580565777442247e+06, -4.799728349919769e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_pgsl025_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_pgsl025", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([5.314865541902636e-06, 0.000000000000000e+00, 5.314877473105034e-06, 5.314706214880409e-06, 0.000000000000000e+00, 5.314761789545037e-06, 5.314330532095072e-06, 0.000000000000000e+00, 5.314185942894398e-06, 5.316126501614160e-06, 0.000000000000000e+00, 5.316476178858566e-06, 5.314763748014359e-06, 0.000000000000000e+00, 5.315659216268295e-06, 5.314763748014359e-06, 0.000000000000000e+00, 5.315659216268295e-06, 1.489471120426001e-03, 0.000000000000000e+00, 1.488416474945260e-03, 1.489317469627951e-03, 0.000000000000000e+00, 1.488200418330173e-03, 1.484959295434881e-03, 0.000000000000000e+00, 1.483790099061985e-03, 1.491789442733719e-03, 0.000000000000000e+00, 1.490500735395748e-03, 1.490658468047506e-03, 0.000000000000000e+00, 1.486574387146463e-03, 1.490658468047506e-03, 0.000000000000000e+00, 1.486574387146463e-03, 2.803582423563805e-01, 0.000000000000000e+00, 2.696878316222881e-01, 2.841909951814345e-01, 0.000000000000000e+00, 2.710829265545272e-01, 3.359074929160683e-01, 0.000000000000000e+00, 3.544990299972074e-01, 3.377053440019367e-01, 0.000000000000000e+00, 3.318142528529749e-01, 2.525127927908552e-01, 0.000000000000000e+00, 4.308599909078028e-01, 2.525127927908552e-01, 0.000000000000000e+00, 4.308599909078028e-01, 2.539588637151878e+01, 0.000000000000000e+00, 2.249148097761870e+01, 2.438720960290815e+01, 0.000000000000000e+00, 2.120571420906932e+01, 1.823630593831302e-01, 0.000000000000000e+00, 1.472504405000895e-01, 5.658987408307299e+01, 0.000000000000000e+00, 5.430887039765022e+01, 2.227048342638913e+01, 0.000000000000000e+00, 1.463508588786506e+02, 2.227048342638912e+01, 0.000000000000000e+00, 1.463508588786506e+02, 6.324503014234192e+05, 0.000000000000000e+00, 5.271019733892687e+05, 5.496562727421005e+05, 0.000000000000000e+00, 4.471116735888456e+05, 3.197159921025621e+03, 0.000000000000000e+00, 2.714904401504723e+03, 2.911560192811907e+06, 0.000000000000000e+00, 3.062094217456302e+06, 8.908246190359766e+05, 0.000000000000000e+00, 4.834051151218384e+06, 8.908246190359766e+05, 0.000000000000000e+00, 4.834051151218380e+06, 3.043509033941792e-04, 0.000000000000000e+00, 3.046280200123773e-04, 3.027461613529956e-04, 0.000000000000000e+00, 3.030759511630018e-04, 3.042671387391807e-04, 0.000000000000000e+00, 3.045785483817162e-04, 3.028900839224659e-04, 0.000000000000000e+00, 3.031684933842764e-04, 3.035244341568674e-04, 0.000000000000000e+00, 3.038475014282835e-04, 3.035244341568674e-04, 0.000000000000000e+00, 3.038475014282835e-04, 1.309829910006728e-02, 0.000000000000000e+00, 1.310061309573974e-02, 1.269365136890142e-02, 0.000000000000000e+00, 1.270687718342416e-02, 1.366490888883155e-02, 0.000000000000000e+00, 1.350170801337262e-02, 1.330181964513014e-02, 0.000000000000000e+00, 1.313982180211711e-02, 1.246067089348064e-02, 0.000000000000000e+00, 1.283460113517374e-02, 1.246067089348064e-02, 0.000000000000000e+00, 1.283460113517374e-02, 2.831723604531490e-01, 0.000000000000000e+00, 2.849563948485893e-01, 1.084203127721542e-01, 0.000000000000000e+00, 1.067963883068254e-01, 4.206416326329914e-01, 0.000000000000000e+00, 3.581506379681265e-01, 1.889160704232808e-01, 0.000000000000000e+00, 1.738151322628165e-01, 2.321991617595898e-01, 0.000000000000000e+00, 2.780905632843436e-01, 2.321991617595900e-01, 0.000000000000000e+00, 2.780905632843435e-01, 1.680322501718963e+02, 0.000000000000000e+00, 1.633153647255778e+02, 2.429561890532178e+01, 0.000000000000000e+00, 2.393349037244075e+01, 2.269837421707443e+02, 0.000000000000000e+00, 1.940019561775987e+02, 3.832835380601127e-03, 0.000000000000000e+00, 3.835189495597517e-03, 1.121634140249295e+02, 0.000000000000000e+00, 9.435052051172438e+01, 1.121634140249295e+02, 0.000000000000000e+00, 9.435052051172438e+01, 6.896246147170695e+06, 0.000000000000000e+00, 6.144157416218540e+06, 3.268601510341824e+06, 0.000000000000000e+00, 3.124571891844912e+06, 7.817219853849012e+06, 0.000000000000000e+00, 6.581441351138420e+06, 6.939684423521389e+02, 0.000000000000000e+00, 6.813232572463984e+02, 7.337213909483019e+06, 0.000000000000000e+00, 2.832798288875731e+06, 7.337213909483018e+06, 0.000000000000000e+00, 2.832798288875731e+06, 9.328263577353801e-02, 0.000000000000000e+00, 9.151199515894801e-02, 1.366313724726786e-01, 0.000000000000000e+00, 1.338280719853241e-01, 1.215586379658634e-01, 0.000000000000000e+00, 1.190170110352297e-01, 1.088469442674388e-01, 0.000000000000000e+00, 1.067928505909709e-01, 1.152112282714474e-01, 0.000000000000000e+00, 1.129184372546416e-01, 1.152112282714474e-01, 0.000000000000000e+00, 1.129184372546416e-01, 8.718543255572984e-02, 0.000000000000000e+00, 8.621676390310644e-02, 6.915476899663140e-01, 0.000000000000000e+00, 6.780114904512690e-01, 4.788145226916256e-01, 0.000000000000000e+00, 4.675501249611038e-01, 2.956729842383216e-01, 0.000000000000000e+00, 2.910538559009553e-01, 3.827534299798173e-01, 0.000000000000000e+00, 3.767230302188577e-01, 3.827534299798173e-01, 0.000000000000000e+00, 3.767230302188577e-01, 9.886024617149800e-02, 0.000000000000000e+00, 9.642252460770953e-02, 1.194187055820974e+01, 0.000000000000000e+00, 1.172855195423387e+01, 6.650309886995337e+00, 0.000000000000000e+00, 6.417840149459259e+00, 2.123284675929348e+00, 0.000000000000000e+00, 2.077433025456897e+00, 3.873368798388030e+00, 0.000000000000000e+00, 3.867080634745529e+00, 3.873368798388034e+00, 0.000000000000000e+00, 3.867080634745530e+00, 9.045180541077454e-01, 0.000000000000000e+00, 8.749077040216444e-01, 3.383498365853439e+03, 0.000000000000000e+00, 3.314985802507890e+03, 1.390172763857115e+03, 0.000000000000000e+00, 1.259415447184266e+03, 2.044525856382108e+00, 0.000000000000000e+00, 1.910524559464577e+00, 3.625707363724385e+02, 0.000000000000000e+00, 3.079851680515123e+02, 3.625707363724384e+02, 0.000000000000000e+00, 3.079851680515124e+02, 2.160802635499018e+05, 0.000000000000000e+00, 1.941851121390783e+05, 1.678524443444068e+08, 0.000000000000000e+00, 1.667067706068541e+08, 1.992427887587956e+07, 0.000000000000000e+00, 1.656041588063657e+07, 4.122466915137452e+02, 0.000000000000000e+00, 3.926655637176709e+02, 8.633543549065117e+06, 0.000000000000000e+00, 3.678861720624852e+06, 8.633543549065135e+06, 0.000000000000000e+00, 3.678861720624863e+06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_pgsl025_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_pgsl025", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([-1.364755654213718e-02, -1.364895838144920e-02, -1.364769944207764e-02, -1.364906179025013e-02, -1.364800133706360e-02, -1.364953953173371e-02, -1.364640269656497e-02, -1.364749642574066e-02, -1.364764948605283e-02, -1.364820209686937e-02, -1.364764948605283e-02, -1.364820209686937e-02, 7.589177766364683e-03, 7.593502771528311e-03, 7.583950335723733e-03, 7.590129193085204e-03, 7.482661990115124e-03, 7.464134138509730e-03, 7.517879150881834e-03, 7.517455429817155e-03, 7.603536731726196e-03, 7.425684242312107e-03, 7.603536731726196e-03, 7.425684242312107e-03, 3.055138876118284e-02, 2.934644065037288e-02, 3.091710814975859e-02, 2.952284470388223e-02, 3.659518462046465e-02, 3.785416602525705e-02, 3.446831200808900e-02, 3.352400474530038e-02, 2.843845172855305e-02, 4.266255807442419e-02, 2.843845172855305e-02, 4.266255807442419e-02, 7.051319560458867e-02, 5.770889066721917e-02, 6.658713660348056e-02, 5.309170143933974e-02, 6.365092245842724e-02, 4.917257318079338e-02, 1.887375465648108e-01, 1.663107539349870e-01, 6.693352035870420e-02, 4.461659244968095e-01, 6.693352035870420e-02, 4.461659244968095e-01, 8.511524049593720e+01, 7.549938100216272e+01, 7.622509159695684e+01, 6.628328994770990e+01, 3.206596157696343e+00, 2.809531093307745e+00, 2.653919191076454e+02, 2.749427904894430e+02, 1.109419739859717e+02, 2.696687252071282e+02, 1.109419739859717e+02, 2.696687252071280e+02, 1.603998312765911e-01, 1.240437267984720e-01, 4.602635555119716e-02, 4.545921329656914e-02, -8.757062428953316e-01, -9.854695449017790e-01, 2.958176571847640e-01, 3.110377103010624e-01, -3.724602485429610e-02, -3.702720299018803e-02, 1.274125779839181e-02, 9.375043345787339e-03, -3.492951338060275e+00, -2.997992151458384e+00, 4.544841402544226e-02, 4.536524391947705e-02, 2.102775215218143e-02, 2.069173918041089e-02, 1.983488565296660e-02, 1.994459066432071e-02, 1.914640152125092e-02, 1.959483015034319e-02, 5.706217697955899e-03, 7.186251904974053e-03, 3.195589168422064e-01, 4.149267724907267e-01, 9.740482866611093e-02, 9.884732653717364e-02, 4.128061374170130e-01, 2.993553928845529e-01, 9.023544021962418e-03, 7.402771809796324e-03, 7.985719779165078e-03, 9.650301320970072e-03, 1.609829885924409e-02, 1.783631218125519e-02, -1.032087898660830e+00, -1.005333777971691e+00, 6.621209526091427e-01, 6.509915979125623e-01, -9.634822030924230e+00, -8.675987251449550e+00, 8.428643689133359e-03, 8.422168517969116e-03, 2.117023959843576e-01, 1.570594141073366e-01, 1.354647585888154e-01, 8.875735205232854e-02, 2.781223841457284e+03, 2.474061531043669e+03, 1.693325088430014e+06, 1.561798366702196e+06, -1.487242729144702e+06, -6.012638276197474e+05, -2.385855031859184e+00, -3.020789168352691e+00, 1.117323893268854e+03, 3.116011047324812e+02, -5.458671832173955e+04, -1.320642459594055e+04, 2.252137827616086e+03, 2.265362624251319e+03, -9.234370050719743e+02, -9.203788937802274e+02, -1.591706616125388e+04, -1.590941853937745e+04, 2.150174600775006e+01, 1.912689847436801e+01, -2.710753703799276e+02, -3.153345289363627e+02, 2.879789438834610e+04, 2.871368227943839e+04, -8.816096581085150e+03, -9.025135183775223e+03, 8.274338872113228e-03, 7.797109814205077e-03, 2.445596727427540e-01, 2.485037218505270e-01, -4.051981670344280e-02, -5.017344967667342e-02, 1.654377881744916e-02, 1.637391368994707e-02, 6.077494060779449e-01, 5.983195644866640e-01, 3.847578984041090e-01, 3.733219320014881e-01, -4.421182061830625e+00, -4.443982027831621e+00, -5.682167173966014e+00, -5.627922853147473e+00, -3.820861576528595e-01, -4.054987678111021e-01, 8.105606774897982e-02, 8.221468941449250e-02, 4.808329510228306e-02, 4.913883546960642e-02, 1.402573218397388e-02, 1.355007329120785e-02, -5.452972000000056e+00, -4.151472613045919e+00, 2.007252891392833e+00, 2.110692654106490e+00, 1.395630171412709e-02, 1.010738971849914e-02, -6.449394899066767e+00, -4.841771462374051e+00, 4.576122108409221e-01, 3.246659972585709e-01, -1.612625816397994e+03, -8.104706787129716e+02, -4.411672487378186e+03, -1.053715108260530e+04, -2.873709018997756e+04, -2.294023699668376e+04, -1.926170405373849e-02, -2.358972045595449e-01, -8.043525667964956e+03, -2.931005147073117e+03, -1.403649043685181e+04, -5.820610761940443e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
