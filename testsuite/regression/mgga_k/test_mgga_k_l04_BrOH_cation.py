
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_k_l04_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_l04", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.180205770092591e+03, 2.180214426715667e+03, 2.180262286112425e+03, 2.180133305499002e+03, "nan", 2.955622350373261e+03, 7.895931430628933e+01, 9.890035122010678e+01, 9.891506655611222e+01, 9.892704524653077e+01, 7.898403668094154e+01, 9.890522166737153e+01, 3.679436463655285e+00, 3.671364084540907e+00, 3.479038812202826e+00, 3.536844035189964e+00, 3.148660127196102e+00, 3.543207125685251e+00, 2.207355557308597e-01, 2.242183929062535e-01, 4.159357489150469e+00, 1.414213537165327e-01, 2.326749963253635e-01, 2.326177173019070e-01, 2.986383332436450e-04, 3.312710246245992e-04, 1.006147103460666e-02, 9.918869278151651e-05, 1.986653073198673e-04, 1.986652962352347e-04, 2.216987034389618e+02, 1.746944941945773e+02, 2.217027583097182e+02, 2.217746225890275e+02, 2.217398031953481e+02, 1.747315116331396e+02, 2.621124916292809e+01, 2.654261715172084e+01, 3.099217659037745e+01, 2.638966234673080e+01, 3.173660110995205e+01, 2.636570329921033e+01, 2.815346375949481e+00, 3.322533873095415e+00, 2.414353759373047e+00, 1.997887940208548e+00, 2.916292423929490e+00, 2.916292423929491e+00, 6.816113209764219e-02, 2.460675968368247e-01, 5.852860418157450e-02, 1.696938621804306e+01, 9.424762149528793e-02, 9.350894329239684e-02, 5.913677791595345e-05, 9.478586155077482e-05, 5.563119838242657e-05, 2.638761370098205e-02, 8.923746165638550e-05, 8.923746165638554e-05, 2.207626016088656e+00, 2.202561053754585e+00, 2.208659473800215e+00, 2.831107562892434e+00, 2.211129871566247e+00, 2.826388279112567e+00, 2.690739558627944e+00, 1.982821470572127e+00, 2.174252603458231e+00, 2.372811626990794e+00, 1.807510138716384e+00, 2.270312848405800e+00, 3.651730304157792e+00, 3.752164350761632e-01, 5.665671571225032e-01, 8.089788951294673e-01, 7.474654145690076e-01, 7.474654145690076e-01, 1.363385562448134e+00, 9.183811565615940e-03, 1.709046154336735e-02, 7.486481206659608e-01, 4.293877908747985e-02, 4.293877908747987e-02, 5.930450062385565e-04, 6.770842078809458e-06, 2.997297576530367e-05, 3.770159391274604e-02, 7.507739194911691e-05, 7.507739167454382e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_k_l04_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_l04", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.318842592863767e+03, 3.318834469685301e+03, 3.318869370512798e+03, 3.318853920560935e+03, 3.318952140329568e+03, 3.318973335886582e+03, 3.318649789752973e+03, 3.318587940249397e+03, "nan", "nan", 3.318858709613174e+03, "nan", 8.625021914268822e+01, "nan", "nan", "nan", "nan", "nan", 1.648760947423430e+02, "nan", 8.621790800055368e+01, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 2.131556425027962e+00, "nan", "nan", 2.519086431563015e-01, 2.464844129541704e-01, 2.441315441477783e-01, 2.368826611937910e-01, 3.939920571729342e+00, "nan", "nan", "nan", "nan", "nan", "nan", 1.203576395116268e-01, 4.649748190172184e-04, "nan", 5.105671443770158e-04, 5.859175915352832e-04, "nan", "nan", 1.680209131570107e-04, "nan", "nan", 1.198320585312543e-04, 3.700430852786569e-04, "nan", "nan", "nan", 1.997462705930014e+02, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 1.995852121338495e+02, "nan", 2.283314826541248e+01, "nan", 2.336183107230718e+01, "nan", "nan", 2.248417831521140e+01, "nan", "nan", "nan", 2.374793201897235e+01, "nan", "nan", "nan", 5.535041375212512e+00, "nan", "nan", "nan", "nan", 2.447344521464730e+00, "nan", "nan", "nan", "nan", 1.125085293497268e-01, "nan", "nan", "nan", "nan", "nan", 2.757981562096694e+01, 2.755550718581651e+01, "nan", "nan", "nan", 1.557478766708500e-01, "nan", 1.021266245726408e-04, "nan", "nan", 8.697857488323588e-05, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 2.627496927786749e+00, 2.560119782343532e+00, "nan", 2.576678033733105e+00, "nan", "nan", "nan", 2.583544687129383e+00, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 1.999290818367995e+00, "nan", "nan", "nan", "nan", "nan", "nan", 4.287176833582211e-01, "nan", "nan", "nan", 7.865529258646318e-01, "nan", "nan", "nan", "nan", "nan", 1.382565647136514e+00, "nan", 1.540964953471671e-02, 2.748173339008312e-02, "nan", 7.616818401717399e-01, "nan", "nan", "nan", "nan", "nan", "nan", 1.021651030874647e-03, "nan", "nan", "nan", 5.273104502580105e-05, "nan", 6.340577393084756e-02, "nan", "nan", 8.140563213897727e-05, "nan"]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_l04_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_l04", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.594235630048142e-06, 0.000000000000000e+00, 1.594241281004072e-06, 1.594213736337082e-06, 0.000000000000000e+00, 1.594225374764337e-06, 1.594149250338506e-06, 0.000000000000000e+00, 1.594131410671314e-06, 1.594396449360626e-06, 0.000000000000000e+00, 1.594446537827729e-06, 1.594222293289559e-06, 0.000000000000000e+00, "nan", 1.594222293289559e-06, 0.000000000000000e+00, "nan", 3.876068648727258e-04, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", 0.000000000000000e+00, 0.000000000000000e+00, "nan", 3.878378925322094e-04, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, 8.798471498345252e-02, "nan", 0.000000000000000e+00, "nan", 1.630525698697902e+00, 0.000000000000000e+00, 1.863046614560637e+00, 1.821866937858001e+00, 0.000000000000000e+00, 2.070396413190733e+00, 4.105837439687443e-02, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, 1.600705461622606e-01, 4.610502088093223e-05, 0.000000000000000e+00, "nan", 5.740439415037511e-05, 0.000000000000000e+00, 0.000000000000000e+00, "nan", 0.000000000000000e+00, "nan", 8.756604513552733e-06, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, 2.426128312334962e-05, 3.262417414684257e-05, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", 1.065751166137797e-04, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, 1.067202606382692e-04, "nan", 0.000000000000000e+00, 2.857333310176081e-03, "nan", 0.000000000000000e+00, 2.775468662700633e-03, "nan", 0.000000000000000e+00, "nan", 2.892597880760735e-03, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", 2.727353181222320e-03, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", 7.779001261426034e-86, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, 7.760007721824116e-02, "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", 3.416433902187441e-96, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", 2.037770638428210e-03, 0.000000000000000e+00, 2.040421029775327e-03, "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, 3.764906679214633e-01, "nan", 0.000000000000000e+00, 5.555124960111821e-06, "nan", 0.000000000000000e+00, "nan", 5.895500863416315e-05, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, 6.865183151516469e-02, 7.207200165496473e-02, 0.000000000000000e+00, "nan", 7.114459164919029e-02, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", 7.076302478369537e-02, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", 1.084990287916132e-01, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, 7.183026839419910e-01, "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, 4.607651545650998e-01, "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, 1.974171592911921e-01, "nan", 0.000000000000000e+00, 5.682641134809980e-101, 9.460067342161904e-03, 0.000000000000000e+00, "nan", 4.780535140239460e-01, 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, 1.096899896709768e-04, "nan", 0.000000000000000e+00, "nan", "nan", 0.000000000000000e+00, 7.355406407774230e-06, "nan", 0.000000000000000e+00, 7.462759681854057e-02, "nan", 0.000000000000000e+00, "nan", 5.540940709709450e-05, 0.000000000000000e+00, "nan"]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_l04_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_l04", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [-2.336658807646044e-03, -2.336652374206556e-03, -2.336576889904964e-03, -2.336592831408816e-03, -2.336424170433896e-03, -2.336343283560233e-03, -2.337347779022735e-03, -2.337521404268876e-03, -2.336604455057461e-03, "nan", -2.336604455057461e-03, 0.000000000000000e+00, -3.263293909072530e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -3.265026043539854e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -9.282736441151405e-03, 0.000000000000000e+00, 0.000000000000000e+00, -3.531273842129533e-03, -4.520847659493431e-03, -4.092129220526554e-03, -5.287440430419606e-03, -5.583278576361627e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -6.163587084623898e-05, -4.280861812369412e-12, 0.000000000000000e+00, -6.132678210052337e-12, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.766391955926392e-13, 0.000000000000000e+00, 0.000000000000000e+00, -2.947630080488480e-13, -2.150690478953605e-12, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.677060999043554e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.684771516963141e-03, 0.000000000000000e+00, -7.918897824795103e-03, 0.000000000000000e+00, -7.776901486025428e-03, 0.000000000000000e+00, 0.000000000000000e+00, -8.165144359415930e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -7.551159422244171e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 1.372203459180929e-130, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.033173241435395e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 2.292228810016211e-144, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -7.017006220380897e-04, -7.005660247172488e-04, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -2.226852195434883e-04, 0.000000000000000e+00, -5.310316786470915e-14, 0.000000000000000e+00, 0.000000000000000e+00, -4.429275213948562e-13, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -2.495939160300686e-04, -7.148080754888394e-04, 0.000000000000000e+00, -5.532721507742657e-04, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -4.860096058162555e-04, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -2.648901130151476e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -3.371904585539717e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -6.315844923630381e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -5.502641177752815e-03, 0.000000000000000e+00, 7.293016817283098e-151, -3.956428608386998e-07, 0.000000000000000e+00, -4.593616530499541e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -3.316342457113408e-11, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -2.608731756318304e-14, 0.000000000000000e+00, -1.086279790445129e-05, 0.000000000000000e+00, 0.000000000000000e+00, -3.769304729105697e-13, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_l04_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_l04", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
