
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_k_l04_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_l04", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([2.228877278010284e+03, 2.228886168709681e+03, 2.228935423017193e+03, 2.228802991810494e+03, 2.228870997553912e+03, 2.228870997553912e+03, 5.875861010907639e+01, 5.875805624388702e+01, 5.874822295634290e+01, 5.878834031838461e+01, 5.876112782786149e+01, 5.876112782786149e+01, 2.330678800721806e+00, 2.329421980600807e+00, 2.312580667158588e+00, 2.331212843873747e+00, 2.349290588311499e+00, 2.349290588311499e+00, 2.132118464132701e-01, 2.159172663078638e-01, 3.409804139524065e+00, 1.374128548857124e-01, 2.046358359580551e-01, 2.046358359580551e-01, 2.986383036024806e-04, 3.312709810935408e-04, 1.006046493786590e-02, 9.918869203895774e-05, 1.986652931715787e-04, 1.986652931715787e-04, 1.796448329194952e+02, 1.397516104265478e+02, 2.196823194807837e+02, 2.061028722145618e+02, 1.396824226549168e+02, 1.279337494302454e+02, 3.131470732839796e+01, 2.166446504588473e+01, 2.056895927061639e+01, 2.075631395738233e+01, 2.072105875544207e+01, 2.093662986693565e+01, 2.705250191498345e+00, 2.390845471788506e+00, 2.317186352005398e+00, 1.481736352869453e+00, 1.705965605931757e+00, 1.718189209058248e+00, 6.811573183825920e-02, 2.449593140550674e-01, 5.852770868651351e-02, 1.701732595442181e+01, 9.282259359218967e-02, 9.290811452785155e-02, 5.913677806770377e-05, 9.478586155077478e-05, 5.563119888218458e-05, 2.638489848291958e-02, 8.923746032051249e-05, 8.923746165584479e-05, 2.842780353189042e+00, 2.810261147433447e+00, 2.821683210482274e+00, 2.830905350906978e+00, 2.826387435912029e+00, 2.826388279026120e+00, 2.690739555327944e+00, 1.232302611237201e+00, 2.028195835087036e+00, 1.548822367544847e+00, 1.340486263344711e+00, 2.235559038651329e+00, 3.368978373663944e+00, 3.927620496527966e-01, 5.665319983593422e-01, 9.706177268599934e-01, 5.852469294323092e-01, 5.320232997720754e-01, 1.045877161236626e+00, 9.183635096784371e-03, 1.708769098933612e-02, 5.595605156338364e-01, 4.293704130334121e-02, 4.279796361036441e-02, 5.930451257170625e-04, 6.770842078658344e-06, 2.997297582003771e-05, 3.768053963167293e-02, 7.507739194051173e-05, 7.507739194683061e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_k_l04_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_l04", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([3.218777505232532e+03, 3.218756776146535e+03, 3.218804482619330e+03, 3.218776373707247e+03, 3.218886296290066e+03, 3.218894848915168e+03, 3.218581641679812e+03, 3.218506542049065e+03, 3.218793823142104e+03, 3.218658424970848e+03, 3.218793823142104e+03, 3.218658424970848e+03, 8.720193534917748e+01, 8.720677226359281e+01, 8.720296858388421e+01, 8.720804041048287e+01, 8.723085794178229e+01, 8.723975647128798e+01, 8.720037849966916e+01, 8.721044147603619e+01, 8.717108646008504e+01, 8.723830747347118e+01, 8.717108646008504e+01, 8.723830747347118e+01, 3.073045614369895e+00, 3.118399144859181e+00, 3.056379715030922e+00, 3.111770801985140e+00, 2.826421961408009e+00, 2.747450523788032e+00, 2.835216945420450e+00, 2.863092065565332e+00, 3.191779218501782e+00, 2.399943789382502e+00, 3.191779218501782e+00, 2.399943789382502e+00, 2.222711919012269e-01, 2.129457309687299e-01, 2.149183904998347e-01, 2.055575301300135e-01, 3.809140244519193e+00, 4.205502837970931e+00, 2.077895431364654e-01, 2.106093701033160e-01, 2.347706348726213e-01, 1.205151086189650e-01, 2.347706348726212e-01, 1.205151086189651e-01, 4.649747819765548e-04, 5.250296766966980e-04, 5.105670946633338e-04, 5.859171256515975e-04, 1.578055995833160e-02, 1.759630674982907e-02, 1.680209120729077e-04, 1.624681201898829e-04, 3.700430693855481e-04, 1.198320590366207e-04, 3.700430693855481e-04, 1.198320590366207e-04, 2.112875346486900e+02, 1.947586961005130e+02, 1.872598938051364e+02, 1.873669864667768e+02, 3.537266669652070e+02, 3.567203903959514e+02, 2.751890225841715e+02, 2.807215621432492e+02, 1.832084038719966e+02, 1.831969399045776e+02, 1.998287186896712e+02, 2.001524684147558e+02, 5.216261111027459e+01, 5.214141758685408e+01, 2.507439216128922e+01, 2.506143219690938e+01, 2.382166265847261e+01, 2.403575386112475e+01, 2.423148017994123e+01, 2.447302269507937e+01, 2.539552022664170e+01, 2.489950573579714e+01, 2.434286706712800e+01, 2.392869268726810e+01, 3.865078669388905e+00, 4.132815017883366e+00, 2.950291081238404e+00, 2.964803019892084e+00, 3.464959927356573e+00, 3.378347467382265e+00, 2.292195821761261e+00, 2.448562896611310e+00, 2.729719737324209e+00, 2.460845221907241e+00, 2.721280454609813e+00, 2.449278541837673e+00, 1.122545420030157e-01, 1.143898423872966e-01, 4.022940902960929e-01, 4.061021953933629e-01, 9.206594371847263e-02, 1.022241701839152e-01, 2.753530100432623e+01, 2.751102297024357e+01, 1.408054878187442e-01, 1.522875299523814e-01, 1.409514030189740e-01, 1.528907332106353e-01, 9.455954495266170e-05, 1.021266266831947e-04, 1.555509109119328e-04, 1.602950811345172e-04, 8.697858253678054e-05, 9.755133108351340e-05, 4.368924657879721e-02, 4.423366149161959e-02, 9.073184759505061e-05, 1.711210430844671e-04, 9.073184793918699e-05, 1.711210523776203e-04, 4.719581713989148e+00, 4.756140909833492e+00, 4.665409323651446e+00, 4.701913773623167e+00, 4.684378325585432e+00, 4.721018270951846e+00, 4.698867607045121e+00, 4.734896382133469e+00, 4.692268752081406e+00, 4.728800336468002e+00, 4.692275970046500e+00, 4.728805829140317e+00, 4.469692748634524e+00, 4.499292534254598e+00, 1.655823833549817e+00, 1.672083436006067e+00, 2.753509228325179e+00, 2.790036112472091e+00, 1.922885290227456e+00, 1.909654708280870e+00, 2.010274637318552e+00, 2.026045252930936e+00, 3.539276366658260e+00, 3.557368560310489e+00, 4.506924383968711e+00, 4.442887988815689e+00, 6.506534269192319e-01, 6.582108841356931e-01, 9.345112300507338e-01, 9.533428653757553e-01, 1.518561589960918e+00, 1.546675597004288e+00, 6.107486308443716e-01, 6.131809832547271e-01, 5.628570756165623e-01, 5.640329851052166e-01, 1.407014046389148e+00, 1.431014616802152e+00, 1.520003430296125e-02, 1.540841462902444e-02, 2.747855095785474e-02, 2.934792536019957e-02, 7.814437217899002e-01, 8.058338746435636e-01, 6.737210274552780e-02, 7.510891005016898e-02, 6.667908863311618e-02, 7.388704603814282e-02, 9.514160543929415e-04, 1.021652622692560e-03, 1.125888621298176e-05, 1.131041093869657e-05, 4.661497641668519e-05, 5.273104572778536e-05, 6.141631771669821e-02, 6.354738893385962e-02, 8.140563856692042e-05, 1.437600561835494e-04, 8.140563857005080e-05, 1.437600562280922e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_l04_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_l04", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.905834383694384e-06, 0.000000000000000e+00, 1.905871458747011e-06, 1.905811897079889e-06, 0.000000000000000e+00, 1.905855118008175e-06, 1.905742458750369e-06, 0.000000000000000e+00, 1.905754953427249e-06, 1.905996597780671e-06, 0.000000000000000e+00, 1.906078815154594e-06, 1.905820843294655e-06, 0.000000000000000e+00, 1.905951253150375e-06, 1.905820843294655e-06, 0.000000000000000e+00, 1.905951253150375e-06, 3.450439699902054e-04, 0.000000000000000e+00, 3.449472473427971e-04, 3.450587514101101e-04, 0.000000000000000e+00, 3.449482639154911e-04, 3.452411251116460e-04, 0.000000000000000e+00, 3.452386917495433e-04, 3.455350069117631e-04, 0.000000000000000e+00, 3.454268343405015e-04, 3.451719830919113e-04, 0.000000000000000e+00, 3.455801569318306e-04, 3.451719830919113e-04, 0.000000000000000e+00, 3.455801569318306e-04, 3.957664223863028e-02, 0.000000000000000e+00, 3.893956380580536e-02, 3.985864125140601e-02, 0.000000000000000e+00, 3.901251487226048e-02, 4.374041730316432e-02, 0.000000000000000e+00, 4.593785260328387e-02, 4.573828242456550e-02, 0.000000000000000e+00, 4.538382310055566e-02, 3.739181938885816e-02, 0.000000000000000e+00, 5.809031992816592e-02, 3.739181938885816e-02, 0.000000000000000e+00, 5.809031992816592e-02, 1.821645710818718e+00, 0.000000000000000e+00, 2.105571090868489e+00, 1.977106824766819e+00, 0.000000000000000e+00, 2.261387645147446e+00, 1.997999616799220e-02, 0.000000000000000e+00, 1.868886151317383e-02, 4.185788283146185e-01, 0.000000000000000e+00, 4.964251729331894e-01, 1.722514269519570e+00, 0.000000000000000e+00, 9.859898528692930e-02, 1.722514269519568e+00, 0.000000000000000e+00, 9.859898528692947e-02, 4.662431966626061e-05, 0.000000000000000e+00, 5.538968540998935e-05, 5.725292584637746e-05, 0.000000000000000e+00, 7.034612462433914e-05, 4.479269046689442e-03, 0.000000000000000e+00, 5.511865135891305e-03, 7.860909858932186e-06, 0.000000000000000e+00, 7.323424453115999e-06, 3.126802185057814e-05, 0.000000000000000e+00, 1.431126899918086e-05, 3.126802185057818e-05, 0.000000000000000e+00, 1.431126899918089e-05, 2.445806683325229e-04, 0.000000000000000e+00, 2.102701344462133e-04, 7.157909785450750e-05, 0.000000000000000e+00, 7.121057549067695e-05, 3.964238049488731e-05, 0.000000000000000e+00, 3.179476556939547e-05, 2.026911149636843e-04, 0.000000000000000e+00, 1.933272113488510e-04, 1.601424185017858e-04, 0.000000000000000e+00, 1.599642198604767e-04, 8.675256189045952e-05, 0.000000000000000e+00, 9.182267696336680e-05, 2.357013984380257e-06, 0.000000000000000e+00, 3.203648956282230e-06, 1.469611787790063e-03, 0.000000000000000e+00, 1.472977602422249e-03, 2.351624511914275e-03, 0.000000000000000e+00, 2.324802510060093e-03, 2.317594039494361e-03, 0.000000000000000e+00, 2.276637489821993e-03, 2.148927719439226e-03, 0.000000000000000e+00, 2.215467023137314e-03, 2.572476457981632e-03, 0.000000000000000e+00, 2.610272226318008e-03, 5.775600934012737e-02, 0.000000000000000e+00, 3.997005656064131e-02, 1.257362403594269e-01, 0.000000000000000e+00, 1.297449853684879e-01, 3.841284840707849e-02, 0.000000000000000e+00, 6.517842064913465e-02, 7.380647437386284e-02, 0.000000000000000e+00, 6.884758559395814e-02, 6.037012729599162e-02, 0.000000000000000e+00, 6.890609801634645e-02, 5.281625194197863e-02, 0.000000000000000e+00, 6.024551089882382e-02, 5.832309053770259e-03, 0.000000000000000e+00, 6.203802053127257e-03, 1.564405688599742e-03, 0.000000000000000e+00, 1.670797760187910e-03, 2.622613101484525e-05, 0.000000000000000e+00, 3.233657074977711e-05, 1.774997446548721e-03, 0.000000000000000e+00, 1.777492222121390e-03, 2.561579379375819e-01, 0.000000000000000e+00, 5.138956469287820e-01, 2.648773017172695e-01, 0.000000000000000e+00, 5.179508122116975e-01, -1.687191702884260e-08, 0.000000000000000e+00, -2.064954785621878e-08, -1.269808054587487e-17, 0.000000000000000e+00, -1.856239354932595e-17, 2.848344349014611e-16, 0.000000000000000e+00, 2.819138986543616e-15, 1.855188192400764e-03, 0.000000000000000e+00, 1.059824443207956e-03, -2.085443638490263e-07, 0.000000000000000e+00, 1.199956371088371e-06, 2.680447288347131e-12, 0.000000000000000e+00, 7.275968260531181e-11, 1.919160588085607e-07, 0.000000000000000e+00, 1.990126259300657e-07, 1.504677088532296e-07, 0.000000000000000e+00, 1.557631373327785e-07, 8.397692108062647e-10, 0.000000000000000e+00, 8.704472660844983e-10, 7.975481050782848e-04, 0.000000000000000e+00, 1.039688513444487e-03, 3.742162012395701e-06, 0.000000000000000e+00, 2.858326101614150e-06, 3.315753843921649e-10, 0.000000000000000e+00, 3.447290054538915e-10, 6.205142295776719e-08, 0.000000000000000e+00, 5.968119382813273e-08, 1.391664704956098e-01, 0.000000000000000e+00, 1.376473194866704e-01, 8.232665247738510e-02, 0.000000000000000e+00, 8.228329018814824e-02, 1.505185664938846e-01, 0.000000000000000e+00, 1.608909468894049e-01, 8.322020639529773e-02, 0.000000000000000e+00, 8.242836836693385e-02, 3.183766116359765e-02, 0.000000000000000e+00, 3.287776915418994e-02, 2.108985156171896e-01, 0.000000000000000e+00, 2.275118929890076e-01, 1.142232089793974e-04, 0.000000000000000e+00, 1.139835408169755e-04, 9.122871807721473e-05, 0.000000000000000e+00, 9.663734373350033e-05, 5.447268889217384e-02, 0.000000000000000e+00, 4.892497052621329e-02, 2.769909130991405e-01, 0.000000000000000e+00, 2.727758449756243e-01, 4.611370988257910e-01, 0.000000000000000e+00, 4.510227746603486e-01, 1.660312249657833e-01, 0.000000000000000e+00, 1.621430141783007e-01, 4.781656525450565e-04, 0.000000000000000e+00, 7.532213171562020e-04, 8.607371230300625e-03, 0.000000000000000e+00, 7.622651567931646e-03, 3.865742140235075e-01, 0.000000000000000e+00, 3.881068567222985e-01, 1.062359486451362e-04, 0.000000000000000e+00, 2.232753850767563e-04, 9.356862216290164e-02, 0.000000000000000e+00, 1.623036574119895e-01, 3.027365520420753e-09, 0.000000000000000e+00, 2.101085430424999e-08, 6.791530206453959e-08, 0.000000000000000e+00, 7.617322913351954e-09, 4.878137175926043e-11, 0.000000000000000e+00, 7.968114509035316e-11, 7.017370003136861e-02, 0.000000000000000e+00, 4.664350135594766e-02, 9.650161960998197e-10, 0.000000000000000e+00, 8.355917875016096e-09, 1.829099552177461e-10, 0.000000000000000e+00, 1.084659563832047e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_l04_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_l04", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([-7.152657294060004e-03, -7.153073303399594e-03, -7.152625494255799e-03, -7.153050123548679e-03, -7.152577079414463e-03, -7.152966324474197e-03, -7.152938255748624e-03, -7.153425853037823e-03, -7.152635597924097e-03, -7.153282319383185e-03, -7.152635597924097e-03, -7.153282319383185e-03, -2.126341371623392e-04, -2.065461491212147e-04, -2.142282006163771e-04, -2.071082684467619e-04, -2.397004230088546e-04, -2.431018732053053e-04, -2.528996310915470e-04, -2.483088445730247e-04, -2.084726296512841e-04, -2.717640474010006e-04, -2.084726296512841e-04, -2.717640474010006e-04, 6.681128662850620e-03, 6.480753261862817e-03, 6.730881099371270e-03, 6.517555581740428e-03, 7.543940030110731e-03, 7.469575575876463e-03, 6.552355580437354e-03, 6.381347958515477e-03, 6.483108710248487e-03, 5.849698566962117e-03, 6.483108710248487e-03, 5.849698566962117e-03, 1.145571483598470e-03, 5.415746267828043e-04, 1.334900420083638e-03, 5.234611371638759e-04, 1.302814487528444e-02, 1.185865278881064e-02, 3.785928369391575e-04, 3.138522149004653e-04, 1.022805562049651e-03, 6.127766659845265e-05, 1.022805562049648e-03, 6.127766659845293e-05, 2.986967361629757e-12, 4.202787970906190e-12, 4.380079320418934e-12, 6.502470597609798e-12, 5.881144300254262e-08, 7.990589306265128e-08, 1.443858113124863e-13, 1.225324314454812e-13, 1.629255046146414e-12, 2.921317585520205e-13, 1.629255046146425e-12, 2.921317585520218e-13, 5.714970529026021e-03, 7.724833154786830e-03, 1.107824956435078e-02, 1.103338103150577e-02, -1.131297187648903e-04, -8.059940050169059e-05, 1.969851031579060e-03, 1.766077837769382e-03, -1.105815023398728e-02, -1.104122017929638e-02, 3.323366471781459e-03, 2.030861506312437e-03, -6.425032961119093e-07, -1.012812239609054e-06, 9.734236720514844e-03, 9.709982632944319e-03, -2.787789836753043e-05, -9.543953342118478e-06, -3.646495306126083e-04, -1.555783214803325e-04, 1.985159164002286e-04, 5.728531997403956e-05, -5.481215588761999e-03, -5.207683430405876e-03, 1.347568816752731e-03, 6.815980842327439e-04, 7.877430548727825e-03, 7.728200700648181e-03, 6.263786371081769e-04, 1.529032122774685e-03, 2.538423337856164e-03, 1.886463782259905e-03, 7.637347454358430e-04, 1.318854952902398e-03, 3.933354029494197e-03, 4.479794163745768e-03, -4.166510663890747e-06, -4.551346605595483e-06, 7.110781644690640e-05, 7.492306682385289e-05, -1.359214967215822e-08, -1.874541796726825e-08, 2.596641736931825e-03, 2.595252318677335e-03, 1.706613273672846e-06, -1.773556870734451e-06, -5.991044554185350e-05, -1.679567962924555e-04, 7.610930205048675e-16, 1.103886921575008e-15, 2.666859596476418e-24, 3.399054124612141e-24, -3.934176780283411e-24, -5.952470974809190e-23, -3.443469132731578e-07, -2.120754018732369e-07, 1.285140961090138e-14, 5.507592871263006e-13, -7.883058068448196e-20, -5.503005325180297e-18, 4.099008025033697e-14, 4.146089825592974e-14, -2.245416912723139e-13, -2.309953542803888e-13, -5.569681663336900e-17, -5.701643059086950e-17, 2.940034191994196e-08, 4.262522589036920e-08, -1.274525344616425e-11, -8.270233713939695e-12, 1.063025340283449e-17, 1.095397200816540e-17, -1.438739317476894e-15, -1.352912071803566e-15, -2.135607291618299e-03, -2.257459717385515e-03, 2.380694871594696e-03, 2.306151077316744e-03, -1.146495603823125e-02, -1.169766091141606e-02, 3.914926846082174e-03, 3.869522100215303e-03, 2.425020817448541e-04, 2.549055282652360e-04, 1.449094070538212e-03, 1.556542513119982e-03, -1.959857320039234e-07, -1.938742867859242e-07, -1.081805522299542e-07, -1.128310157225289e-07, -4.575674518576549e-04, -3.926864006492702e-04, 1.152133992620561e-02, 1.150802384478187e-02, 8.464649682182952e-03, 8.820030554780775e-03, 1.148179205409071e-04, 5.963377095423591e-05, -1.670739436556572e-08, -2.476375155544039e-08, 3.196653365161513e-07, 4.821931810015849e-07, 1.128432230438423e-03, -2.862637654317854e-04, -4.092279166232662e-08, -9.639255884345454e-08, 1.408270409344165e-06, -2.291472396796945e-06, -2.901754558543730e-15, -2.165462748354303e-14, -5.584858277466783e-17, -8.289086467508563e-18, -5.238132621261618e-19, -1.026613412763586e-18, -1.002773858483195e-05, -9.036446215220079e-06, -2.363821370403878e-17, -4.581344134944513e-16, -4.547247359491693e-18, -6.201798342610299e-17])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
