
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_k_csk4_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([1.066841042105473e+03, 1.066820215423357e+03, 1.066771626334756e+03, 1.067080422802922e+03, 1.066912366887734e+03, 1.066912366887734e+03, 8.338550247441628e+01, 8.337109455799668e+01, 8.299584810936884e+01, 8.318176930952383e+01, 8.313944485899152e+01, 8.313944485899152e+01, 5.902523728128787e+00, 5.924953461690216e+00, 6.496747346401284e+00, 6.226304387458819e+00, 6.269850947788549e+00, 6.269850947788549e+00, 7.167730695854113e-01, 6.976936597947988e-01, 1.225343339005729e+01, 9.864087878933305e-01, 8.088397071978131e-01, 8.088397071978133e-01, 8.619325918827658e-01, 8.451994941218950e-01, 1.092880638348286e+00, 9.647884632520928e-01, 8.579106421870533e-01, 8.579106421870533e-01, 1.163305954135130e+03, 4.607481804970701e+02, 4.137020303365902e+01, 2.337948021995478e+03, 4.161451948758368e+01, 2.080496587267672e+02, 2.720444902713274e+01, 6.801230806199180e+01, 4.156766273746246e+01, 4.104136107189024e+01, 4.072940941200346e+01, 2.871710896211257e+01, 3.558981337639192e+01, 1.258187031844960e+01, 2.926485253309492e+01, 2.174520869697301e+00, 2.534067935003733e+00, 3.314296792007465e+00, 9.219337398597727e-01, 5.553611213293211e+00, 8.996643075302495e-01, 2.530617662431117e+01, 7.408986972302358e-01, 7.404207628491936e-01, 5.149962646753108e+00, 5.059973702763425e+03, 2.817492980420089e-01, 8.107085905975919e-01, 1.360679275354534e+00, 4.130206751164150e-01, 2.109340682389333e+05, 1.778130205719404e+00, 1.735102697565016e+00, 1.889720129164949e+03, 1.717256659067884e+00, 2.669751752167567e+06, 1.527248513078962e+00, 1.749857111107327e+00, 1.890562857413603e+01, 4.968712751117725e-01, 2.558749611187169e+00, 4.630064910782158e+01, 4.752588360627965e+01, 1.064541221227674e+00, 9.836073187310178e-01, 6.698641886928870e-01, 2.510431697861390e+00, 1.699575229212283e+00, 1.803605510588966e+00, 9.656265689571509e-01, 1.272540790383937e+00, 9.193306358207626e-01, 7.143488373483976e-01, 7.143598900360568e-01, 8.121930600067843e-01, 3.188815419703820e-01, 4.583191396995908e-01, 7.255536180654715e-01, 3.675051353691497e-01, 3.675051353691494e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_k_csk4_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([4.310549782145879e+01, 4.314481989343363e+01, 4.324992707212378e+01, 4.266487097984125e+01, 4.298140041357785e+01, 4.298140041357785e+01, 8.747035897306917e+01, 8.747153298815606e+01, 8.750294839015164e+01, 8.748153516426378e+01, 8.747598379068867e+01, 8.747598379068867e+01, 3.155359418607866e+00, 3.145390864301659e+00, 2.898527102705111e+00, 2.951231150203784e+00, 2.943465191689544e+00, 2.943465191689544e+00, 1.584973465195289e-01, 1.680114979619872e-01, 4.326356279599858e+00, 4.549909588791879e-02, 8.960684230184281e-02, 8.960684230184268e-02, -8.079229033844004e-02, -7.855147105517371e-02, -9.276101578187368e-02, -8.502752116050953e-02, -7.534701139491047e-02, -7.534701139491032e-02, 2.002232770944508e+02, 2.003336281324933e+02, -4.137018776372039e+01, 2.003258785737777e+02, -3.777321714702319e+01, 2.002791629184383e+02, -2.720444809251532e+01, 2.636352726669850e+01, 2.548035128806159e+01, 2.587430400088233e+01, 2.637388686357376e+01, -2.711353329198036e-01, 2.505467079578170e+00, 3.039183195578686e+00, 2.133564511463970e+00, 2.373695336420269e+00, 2.597403275376495e+00, 2.597403275376497e+00, -9.219337387004614e-01, 1.165171690180180e-01, -8.996643178820422e-01, 2.758209626057853e+01, -7.237975772003744e-01, -7.403425190237483e-01, -7.410881795960093e-02, -7.837215171305145e-02, -2.816673994359796e-01, -8.107085903271246e-01, -4.581194769967393e-02, -4.129018174798579e-01, 2.617448361818051e+00, 2.375909497578326e+00, 2.435820710063903e+00, 2.601080187171113e+00, 2.460622370310113e+00, 2.594446393063180e+00, 2.450139404812613e+00, 1.704299923972196e+00, 1.917517295668937e+00, -4.777148749468647e-01, 2.024555483285699e+00, 2.024555483285710e+00, 3.337017619767934e+00, -1.064541216438481e+00, -9.836071311097173e-01, -6.698623609930833e-01, 5.988785942277887e-01, 5.988785942277887e-01, 1.441562456497981e+00, -9.656265742448864e-01, -8.891069421730287e-02, 7.993430649908616e-01, -7.143488483310811e-01, -7.139642638077320e-01, -8.113178077903845e-01, -3.188715333998449e-01, -4.582750420705303e-01, -7.255536034139450e-01, -3.674033690112842e-01, -3.674033690112837e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_csk4_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([5.535253215561103e-06, 5.535190147247647e-06, 5.534930414105653e-06, 5.535869999869083e-06, 5.535374653252068e-06, 5.535374653252068e-06, 1.664681860032595e-04, 1.664671080924784e-04, 1.664299622155122e-04, 1.663997345264201e-04, 1.664548556919531e-04, 1.664548556919531e-04, 2.319882383468695e-02, 2.327572545538752e-02, 2.523336579838395e-02, 2.461530012016504e-02, 2.474503507101397e-02, 2.474503507101397e-02, 1.347537376940258e+00, 1.288120930395630e+00, 1.463234655859148e-02, 3.079680157877444e+00, 2.174999573677186e+00, 2.174999573677187e+00, 3.194391961949027e+04, 2.739495708314611e+04, 1.631312792203622e+02, 1.658294723589478e+05, 8.357855840217383e+04, 8.357855840217383e+04, 4.959986591457627e-05, 4.957255826638210e-05, 4.463865479781802e-04, 4.957439916723079e-05, 4.442539282094289e-04, 4.958607665301929e-05, 8.405710949933927e-03, 9.139355898125147e-04, 9.489634823461907e-04, 9.308513546092443e-04, 9.157991813360183e-04, 5.041303221146217e-03, 3.466036699017194e-02, 2.703467963187626e-02, 4.375044316032174e-02, 3.894891499899829e-02, 3.303659686621608e-02, 3.303659686621608e-02, 8.282011698525130e+01, 1.341416743411939e+00, 1.046004417657297e+02, 9.896632747999966e-04, 5.037036714238043e+01, 5.124223108687338e+01, 3.610285500005124e+05, 1.774980168927380e+05, 3.573149841128374e+06, 3.437938581888810e+02, 2.270820723002456e+05, 2.043738650702208e+06, 3.416035244395439e-02, 3.127951632558526e-01, 3.108978161438084e-01, 3.437183858735152e-02, 3.101217331306695e-01, 3.445797034785220e-02, 3.338635972182413e-01, 5.864283895009084e-02, 5.107121077603450e-02, 4.024591581978560e-01, 4.786387105051243e-02, 4.786387105051243e-02, 2.346277095164455e-02, 5.986104049502940e+00, 3.455983662593331e+00, 1.499685758062223e+00, 2.533603399772365e-01, 2.533603399772366e-01, 7.515271475907023e-02, 1.674445856760048e+03, 7.342042585085191e+01, 1.859971804991144e-01, 1.665281128051676e+02, 1.664599291027743e+02, 1.022742173599572e+05, 8.363882291868500e+07, 9.043637243187241e+06, 2.011089750827189e+02, 2.579643228134502e+06, 2.579643228134509e+06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_csk4_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([2.697867882675667e-02, 2.697916478803798e-02, 2.698031207116297e-02, 2.697305503274335e-02, 2.697700352430147e-02, 2.697700352430147e-02, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.605563075809970e-10, 1.666666666666667e-01, 8.490125505578117e-04, 1.666666666666667e-01, 4.557616145045775e-11, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 7.281639623511468e-02, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 2.566629242285315e-11, 1.666666666666667e-01, -9.041861089153231e-11, 1.666666666666666e-01, 3.199333184857512e-03, 9.261016276153712e-06, 1.666666666666667e-01, 1.666666666666667e-01, 0.000000000000000e+00, 1.167632934345290e-11, 1.666666666666667e-01, 0.000000000000000e+00, 1.666666666666667e-01, 0.000000000000000e+00, 0.000000000000000e+00, 1.666666666666667e-01, 0.000000000000000e+00, 1.666666666666667e-01, 0.000000000000000e+00, 1.666666665005932e-01, 1.666666666666667e-01, 3.282713469142153e-04, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.342819433962911e-11, 2.922680655384571e-10, 9.570152436047000e-09, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666666e-01, -2.787129454459681e-10, 1.666666666666667e-01, 1.666666666666667e-01, -2.016144306079408e-10, 7.677028474454924e-05, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 9.647320409007226e-10, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
