
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_k_csk4_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.174661428036045e+03, 2.174670382318329e+03, 2.174719078022784e+03, 2.174585419242660e+03, 2.174654199957851e+03, 2.174654199957851e+03, 5.872374125630325e+01, 5.872319380970543e+01, 5.871343451823041e+01, "nan", 5.872591608564996e+01, 5.180316785008895e+158, 2.451899415467181e+00, 3.069769412996968e+247, 6.199800114085374e+160, 3.472747176702942e+213, 1.515381359837794e+160, 3.491050292329440e+213, 2.832292206292505e+98, 2.026363276226612e+215, 3.163243750475442e+00, 2.304356808896689e+230, 3.712585968444266e+215, 3.080669376382135e+244, 4.787427229419800e+174, 3.205293098725391e+205, 1.769702495553026e+227, 9.599678649680795e+234, 4.271949308384513e+276, 3.570072372529033e+186, 1.801427348034211e+171, 3.624044482107371e+244, 2.370137368216885e+206, 1.275005908630654e+02, 2.156773538947711e+225, 2.997386541308796e+177, 2.775949745274404e+01, 2.758150380547958e+01, 2.881956638312497e+01, 2.864908686190947e+01, 2.716651023523474e+01, 3.456674805837993e+159, 1.641466780578144e+180, 2.250239367766099e+218, 2.920112124756466e+180, 3.237110974936640e+218, 1.564567285658232e+180, 1.699465791991686e+00, 9.219337611001365e-01, 1.417584220365898e+201, 8.996643158516795e-01, 9.428155032081326e+66, 3.851847625381693e+162, 8.788511370392916e+249, 6.675028887856946e-01, 6.103034789762934e+167, 2.302280301332675e+283, 8.107085909587822e-01, 4.130206751164147e-01, 5.562691408223595e+167, 7.157009791050721e+237, 7.989644013574817e+226, 1.583096991161308e+00, 1.642466967177405e+209, 1.959085914932769e+164, 4.734130727172778e+242, 3.395891544766095e+228, 1.825050277143932e+161, 3.645044461059098e+228, 5.947487372823020e+199, 2.057674875824533e+246, 1.331355580482342e+00, 1.685764204229549e+247, 1.064617475007751e+00, 3.348189602958543e+224, 7.141381178451918e-01, 1.288550212669576e+176, 7.354931084594145e+198, 1.118028665082120e+00, 1.025059233311372e+256, 4.062557803211776e+255, 1.680774700693662e+253, 7.143488405613557e-01, 5.208164278161074e+253, 3.202422824071468e+256, 5.510596955669804e+265, 2.168124293414503e+51, 1.145666103663418e+183, 3.113733365559887e+230, 8.075436421170019e+257]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_k_csk4_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.340691448367124e+03, 3.340713240100337e+03, 3.340810806219670e+03, 3.340486575054225e+03, 3.340656367135516e+03, 3.340656367135516e+03, 8.741202417785802e+01, 8.741361531755659e+01, 8.745398368848022e+01, "nan", 8.741814601569827e+01, -2.456055432469168e+143, 5.187383404129562e-01, 2.312516591860911e+231, 2.056626095808308e+145, 6.845585230236283e+197, -2.039986500322312e+144, -3.153278045782945e+197, 1.040268934703118e+83, -3.874235040294018e+197, 2.199704246936673e+00, 5.073775379921379e+214, 9.102322217292212e+199, 6.469887159972205e+228, 1.675288773635429e+159, 9.661153783647030e+188, 7.623873101498690e+211, -3.870275149522414e+218, 1.431335867444365e+261, 2.261114628482170e+171, -1.452679567652796e+155, 8.319771179681805e+228, 4.335994645211597e+190, 2.003258785737783e+02, 5.601258747439572e+209, 6.757133664443071e+161, -2.058621896212475e+01, -1.964811228652993e+01, -2.299248570204114e+01, -2.227545695347197e+01, -1.877710227973908e+01, 2.133449528191341e+144, -2.814268833513812e+164, -1.005156453701073e+202, -9.776797595477414e+164, 2.370204035855883e+203, 9.844690001030542e+164, 2.597403275302664e+00, -9.219334767094453e-01, 3.974856516312884e+185, -8.996641718395173e-01, 1.720352951578089e+51, 2.689393430176569e+147, 6.200533816499226e+234, -6.674156342608129e-01, 2.283735494443254e+152, -1.859711720239028e+267, -8.107085868138667e-01, -4.129018174798575e-01, 1.544517712055928e+152, -1.454405030289522e+222, 5.895886550954022e+211, 2.587826416467611e+00, -4.297960537068788e+193, 1.538574014555095e+149, 3.691528157600536e+227, 3.930480014441321e+213, 1.379784798129933e+145, 1.156566825996381e+213, 1.119297432810564e+184, 9.908991996148972e+230, 2.024555470464899e+00, -3.281006954402596e+231, -1.063601105849743e+00, 4.810381320454332e+208, -1.718152662562589e-01, 8.383518196985768e+160, 2.488298057885723e+183, 2.504674699246591e-01, 5.116078106591603e+240, -5.885031688087249e+239, 8.340523400812278e+237, -7.143487636660203e-01, 1.507548730887510e+236, -3.210246142533801e+240, 2.473213703177490e+250, 9.502889056493584e+35, 7.383862590538589e+167, -2.251954107769504e+214, 1.757744004935733e+242]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_csk4_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [7.183953787656419e-07, 7.183893682632851e-07, 7.183607928830003e-07, 7.184502578107483e-07, 7.184036418954284e-07, 7.184036418954284e-07, 1.674169441224987e-04, 1.674092521218933e-04, 1.672297095184221e-04, "nan", 1.673956204577913e-04, 1.664548556919531e-04, 1.272539072878400e-01, 2.327572545538752e-02, 2.523336579838395e-02, 2.461530012016504e-02, 2.474503507101397e-02, 2.474503507101397e-02, 1.347537376940258e+00, 1.288120930395630e+00, 5.704403554817924e-02, 3.079680157877444e+00, 2.174999573677186e+00, 2.174999573677187e+00, 3.194391961949027e+04, 2.739495708314611e+04, 1.631312792203622e+02, 1.658294723589478e+05, 8.357855840217383e+04, 8.357855840217383e+04, 4.959986591457627e-05, 4.957255826638210e-05, 4.959850537338016e-05, 4.957439916723079e-05, 4.958607665301929e-05, 4.958607665301929e-05, 7.746053603350754e-03, 7.505765670106447e-03, 8.017795661259852e-03, 7.812719265264801e-03, 7.467073027697208e-03, 9.157991813360183e-04, 3.466036699017194e-02, 2.703467963187626e-02, 4.375044316032174e-02, 3.894891499899829e-02, 3.303659686621608e-02, 3.303659687665285e-02, 8.282010933229593e+01, 1.341416743411939e+00, 1.046004366921849e+02, 9.896632747999966e-04, 5.693862463623890e+00, 5.693862463623890e+00, 3.249256950004610e+06, 1.774980168927380e+05, 3.970166490142642e+05, 3.437938576823283e+02, 2.043738650702208e+06, 2.270820723002456e+05, 3.416035244395439e-02, 3.475501813953920e-02, 3.454420179375652e-02, 3.437183858735152e-02, 3.445797034785220e-02, 3.445797034785220e-02, 3.709595524647128e-02, 5.864283848261801e-02, 5.107121077603450e-02, 4.479611240503678e-02, 4.786387105051243e-02, 4.786387423028384e-02, 2.346277095164455e-02, 5.984389622936234e+00, 3.839981853311548e-01, 1.143500936591243e+00, 2.533603399772365e-01, 2.533603399772366e-01, 4.092879853026966e-01, 1.860495393634487e+02, 7.342042585085191e+01, 1.859971804991144e-01, 1.665281072483947e+02, 1.850312362512265e+01, 1.136380192888414e+04, 9.293202546520567e+06, 1.004848582576361e+06, 2.234544179083028e+01, 2.866270253482781e+05, 2.866270253482792e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_csk4_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [1.666666666666624e-01, 1.666666666666624e-01, 1.666666666666625e-01, 1.666666666666622e-01, 1.666666666666624e-01, 1.666666666666624e-01, 1.665479305007639e-01, 1.665487574842599e-01, 1.665665560740657e-01, "nan", 1.665489214325400e-01, 1.666666666666667e-01, 7.322166040018362e-02, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.062814884991261e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.471449037137697e-02, 1.640466257113855e-02, 1.147909643835637e-02, 1.264395677992782e-02, 1.763304163101212e-02, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666600851e-01, 1.735151878769501e-08, 1.666666666666667e-01, 9.004090328348369e-09, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666667e-01, 0.000000000000000e+00, 1.666666666666667e-01, 1.666666666666667e-01, 2.879425631177458e-10, 0.000000000000000e+00, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666652826324e-01, 1.666666666666667e-01, 5.370021285268563e-05, 1.666666666666667e-01, 4.453243928620153e-02, 1.666666666666667e-01, 1.666666666666667e-01, 7.403992002184584e-02, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 6.054956288902104e-09, 1.666666666666667e-01, 1.666666666666666e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666666e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_csk4_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
