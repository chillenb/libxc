
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_k_gea4_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_gea4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([5.573819032453575e+02, 5.573684596321380e+02, 5.573294496415469e+02, 5.575477366083825e+02, 5.573746431707938e+02, 5.573746431707938e+02, 8.332828122350732e+01, 8.331568608033275e+01, 8.294322829642039e+01, 8.311988588822011e+01, 8.332524040773029e+01, 8.332524040773029e+01, 6.065501953025614e+00, 6.086657176074712e+00, 6.674708744021117e+00, 6.399562617379916e+00, 6.072372934185099e+00, 6.072372934185099e+00, 6.201514686017171e-01, 6.054299646537467e-01, 1.169917009242656e+01, 1.007928763419170e+00, 6.155133351498534e-01, 6.155133351498532e-01, 2.120960517756906e+00, 1.967464370362937e+00, 1.026779400126126e+00, 2.904285614187441e+01, 1.937077217681714e+00, 1.937077217681714e+00, 1.754536887723065e+03, 3.600303751015579e+02, 7.995202404679693e+02, 2.612029532524535e+03, -4.689059022294001e+01, 2.190021441824812e+02, 4.599538268538461e+03, 6.936713043803874e+01, 4.150711676732399e+01, 4.198956149675329e+01, 4.074434602352979e+01, 2.479572962192578e+01, 5.483255983778682e+01, 1.476869834694756e+01, 3.083878310219296e+01, 2.113294947424569e+00, 2.543907570501865e+00, 3.401602801128815e+00, 1.429590049140354e+00, 7.168953626400238e+00, 1.018328978099561e+02, 2.533304775110036e+01, 6.764770635153136e-01, 4.715984686433901e-01, 2.090710365855483e+03, 8.453505621024500e+08, 1.418971170783087e+09, 3.696473687787505e+00, 2.592520731110759e+02, 4.947020928266485e+04, 4.902270429379816e+08, 6.186426022146745e+07, 2.239320990030994e+10, 4.958734367455234e+04, 3.758823276801165e+07, 8.074704250493391e+10, 1.151537261699762e+10, 1.766208063257223e+00, 2.159784081952247e+01, -6.878699734004382e-01, 2.589671674076160e+00, 6.115381426838390e+01, 6.668485966484647e+01, 1.984262710410176e+02, 7.065303210178524e+02, -5.269095261526378e+00, 2.604677435998936e+00, 1.675879777895452e+00, 1.740278201867542e+00, 4.518134367826644e+01, 1.645648588052870e+00, 8.818376089224222e-01, 3.814677061797416e+01, 6.260688612873292e-01, 7.811793755583112e+02, 6.426081985555510e+05, 5.648017483612436e+04, 2.248986853804245e-01, 1.230627637820552e+02, 4.428038637416079e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_k_gea4_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_gea4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([3.214183338323720e+03, 3.214203093038640e+03, 3.214296295043192e+03, 3.213972565453504e+03, 3.214193714361741e+03, 3.214193714361741e+03, 8.737670716061653e+01, 8.737756673921447e+01, 8.740764155089302e+01, 8.738205213866271e+01, 8.737795195106331e+01, 8.737795195106331e+01, 3.094357516897478e+00, 3.085340708145897e+00, 2.848130598651395e+00, 2.903961322980554e+00, 3.091101443070919e+00, 3.091101443070919e+00, 1.953569535711104e-01, 2.042203963029682e-01, 4.232066456658433e+00, 8.298059188965803e-02, 1.980776331068190e-01, 1.980776331068189e-01, 2.135768671060787e+00, 1.927712604515128e+00, 1.785192264093778e-01, 1.140861509489127e+01, 1.897316242600197e+00, 1.897316242600197e+00, -2.558609202946240e+02, 1.917014925631960e+02, -1.214448585314144e+04, -7.391362347459311e+02, 1.856654839227438e+02, 1.996940031830192e+02, -1.180042276196756e+04, 2.601105398842220e+01, 2.548719990129343e+01, 2.584945612295916e+01, 2.637464121571502e+01, 2.517695167026243e+01, -2.494900540708251e+01, 6.473615124560829e-01, -8.981418324512747e+00, 2.456174125924876e+00, 2.658700524604668e+00, 2.648493037545463e+00, -7.180159966387003e+00, -2.745844152243605e+00, -2.029607006267677e+02, 2.745810437820714e+01, 7.184495939412416e-03, -9.474355981174382e-02, -2.921976774626533e+03, -1.408601861907284e+09, -2.365274386710656e+09, -1.123658038623841e+01, -2.769155392881274e+02, -8.463398684496601e+04, -8.167122055372077e+08, -1.032249729367085e+08, -3.732426111041444e+10, -7.936329585326386e+04, -6.273912533387779e+07, -1.345741397508005e+11, -1.919384917261635e+10, 1.776389650393257e+00, -4.304918960504424e+00, 2.009743625544366e+00, 2.092059561359686e+00, -3.358715820736649e+01, -2.982011716926023e+01, -4.273616639076505e+02, -1.382067684183407e+03, -1.915417486174245e+01, 5.595293124283889e-01, 6.447885320967450e-01, 1.446533997470701e+00, -5.522199198546521e+01, 5.413966537071317e-02, 7.849427747144068e-01, -8.148183598921668e+01, -3.388347065286057e-02, -1.445269309157577e+03, -1.047035248488888e+06, -9.818824241055571e+04, -7.262294563118716e-01, -3.123865009904089e+02, -7.580939804543320e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_gea4_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_gea4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([9.463138524996915e-07, 9.463063599347277e-07, 9.462691608994919e-07, 9.463920755187463e-07, 9.463099322337604e-07, 9.463099322337604e-07, 1.690704752628595e-04, 1.690757655524462e-04, 1.692275336892826e-04, 1.692693711533627e-04, 1.690687962030363e-04, 1.690687962030363e-04, 1.762905228795774e-02, 1.765638246462151e-02, 1.852691715026863e-02, 1.922835158819580e-02, 1.764120920603413e-02, 1.764120920603413e-02, 1.119134655556431e+00, 1.078867147248785e+00, 5.587762557339065e-03, 6.414827029088782e-02, 1.106429254080624e+00, 1.106429254080624e+00, -5.560408153789619e+05, -4.369499738222779e+05, -4.609756146407454e+02, -5.269435422466019e+07, -4.527181607788492e+05, -4.527181607788492e+05, -9.372349350766653e-05, 2.847594895138486e-05, 7.841970982726737e-04, -1.552166966167693e-04, 7.303516530017406e-05, 4.327097617799400e-05, 3.698197104300232e-02, 5.447321253900176e-04, 9.611633185608971e-04, 9.386019558563609e-04, 9.221882353825093e-04, 1.149467066005469e-03, -1.907627449694878e-01, -1.945955705282866e-02, -1.376322667691018e-01, 3.477584824946765e-02, 3.096491450290204e-02, 2.653486175251832e-02, 1.385938429781506e+02, -6.917476368255715e+00, 8.118016719870087e+02, 8.883023594242279e-04, 5.124954428661777e+00, 1.022309445204641e+01, -5.765686827272571e+08, -2.168021276178371e+11, 8.901056384206875e+11, 1.111179902122575e+03, -1.703760404513669e+08, 2.409538053353608e+09, -1.080668007413194e+03, 3.925530556998194e+02, 7.406757084382978e+03, -1.070428608117821e+01, 3.028038876380294e+02, -1.402249473218892e+04, 5.969274274222249e+03, 5.967494056929076e-02, -1.154532142436944e-01, 6.512616888683986e-02, 3.882133716815405e-02, -3.103469998192982e-01, -1.227218870503226e-01, 3.563629614949570e+01, 3.215804712458311e+01, 1.579314265654383e+00, 3.250512103180547e-02, 1.560302248424094e-01, 7.602862915362998e-02, -1.513809636920919e+04, -3.930226513871413e+02, 1.902937552639481e-01, 1.114730449646112e+03, 1.295827203701868e+01, 8.711170610599434e+06, -1.062807082316963e+12, 2.426882412964786e+10, 1.082092248514493e+02, 2.346049521745760e+08, 4.369870893545044e+09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_gea4_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_gea4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([1.589594379460776e-01, 1.589594554201658e-01, 1.589594932996346e-01, 1.589592030655644e-01, 1.589594475128247e-01, 1.589594475128247e-01, 1.664554742903758e-01, 1.664545036841108e-01, 1.664237791421689e-01, 1.664157694125156e-01, 1.664553071881163e-01, 1.664553071881163e-01, 1.732548436108954e-01, 1.732866776475679e-01, 1.739943936088101e-01, 1.728743832559101e-01, 1.732641430154606e-01, 1.732641430154606e-01, 1.683122338623185e-01, 1.681828578979909e-01, 1.815317345167136e-01, 1.931313176440130e-01, 1.682812117070524e-01, 1.682812117070524e-01, 2.548021991814764e+00, 2.321515959025623e+00, 3.467248770820425e-01, 2.334541621440514e+01, 2.329556380393202e+00, 2.329556380393202e+00, 2.380437364906135e-01, 1.772828107613091e-01, -1.984452594294925e-01, 2.686514442483895e-01, 1.551277973099477e-01, 1.699293740578120e-01, -7.826375194925790e-01, 1.771130099740432e-01, 1.666851341180351e-01, 1.668589528327318e-01, 1.668374334235695e-01, 1.606957625921974e-01, 3.229973938294990e-01, 2.085874330269647e-01, 2.725712534325763e-01, 1.681755699769981e-01, 1.675841475657367e-01, 1.710034933650483e-01, -2.515549153638594e-01, 3.440787375226718e-01, -2.328128355624925e+00, 1.693105672017296e-01, 1.689746681127753e-01, 1.434970665780473e-01, 2.146576492656883e+02, 1.195074286030653e+05, -2.065801934507190e+05, -6.629759853421664e-01, 7.240142067989268e+01, -1.003341470898486e+03, 8.186276198363565e+02, -2.923697772619569e+02, -5.551826295353776e+03, 8.250898966154377e+00, -2.272911266597012e+02, 1.053464082696163e+04, -4.099147243270329e+03, 1.648560128934133e-01, 2.505134403375261e-01, 1.540717513631075e-01, 1.704745823331629e-01, 3.594649079791825e-01, 3.163748795339293e-01, -1.356765901509267e+00, -2.149921835220669e+00, -4.866346766789482e-02, 1.884005006627083e-01, 1.753951341455860e-01, 1.666199750587663e-01, 3.678648889280938e+00, 4.294287528890759e-01, 1.671500012188762e-01, -1.729102755332073e+00, 1.750562911512641e-01, -5.181726053434265e+01, 1.203481480751860e+04, -1.878156451980424e+03, 3.500167258311768e-02, -5.851697051349750e+01, -1.116943211082643e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
