
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_k_gea4_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_gea4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.179811552062930e+03, 2.179819096588069e+03, 2.179864992205979e+03, 2.179740928653940e+03, 2.179815421090450e+03, 2.179815421090450e+03, 5.898500845676134e+01, 5.898452719046546e+01, 5.897618049751036e+01, "nan", 5.898526345982408e+01, inf, 2.307210721851693e+00, inf, inf, inf, inf, inf, 7.812876435994296e+195, inf, 3.183359690077259e+00, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, 1.275550031295773e+02, inf, inf, 2.088031002840825e+01, 2.108323584894899e+01, 2.089272725170540e+01, 2.104916376198930e+01, 2.100659665475485e+01, inf, inf, inf, inf, inf, inf, 1.737129245111936e+00, 3.125462680463551e-01, inf, 2.816473333159832e-01, 1.074220571542890e+131, inf, inf, 3.973564400657737e+01, inf, inf, 4.333518163330939e-01, 2.475551701096389e+01, inf, inf, inf, 1.631198278821053e+00, inf, inf, inf, inf, inf, inf, inf, inf, 1.372604764879659e+00, inf, 3.942930517037657e-01, inf, 6.371959613188632e-01, inf, inf, 1.048698751260412e+00, inf, inf, inf, 2.728059461503584e-01, inf, inf, inf, 2.653315388795740e+104, inf, inf, inf]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_k_gea4_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_gea4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.321243597759306e+03, 3.321263465521453e+03, 3.321358562368153e+03, 3.321033079664348e+03, 3.321254021049093e+03, 3.321254021049093e+03, 8.648435186503751e+01, 8.648567734555085e+01, 8.652918531294465e+01, "nan", 8.648577044341347e+01, "nan", 2.977717373681412e+00, "nan", "nan", "nan", "nan", "nan", -1.302146072665716e+196, "nan", 4.469008928381766e+00, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 1.995414615489321e+02, "nan", "nan", 2.394933098447932e+01, 2.444193126382734e+01, 2.359261582239941e+01, 2.397923927804164e+01, 2.473486948732755e+01, "nan", "nan", "nan", "nan", "nan", "nan", 2.641348450019264e+00, -6.789704112654309e-01, "nan", -5.900162392103934e-01, -1.790367619238152e+131, "nan", "nan", -1.455247947259915e+02, "nan", "nan", -1.296330711414309e+00, -9.062829129944753e+01, "nan", "nan", "nan", 2.673641359515075e+00, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 2.083004079359474e+00, "nan", 1.296373762047467e-01, "nan", 8.268471379103078e-01, "nan", "nan", 1.407207345840115e+00, "nan", "nan", "nan", -6.598222645989453e-01, "nan", "nan", "nan", -4.422192314659568e+104, "nan", "nan", "nan"]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_gea4_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_gea4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [7.894211479091560e-07, 7.894135673833292e-07, 7.893781610710887e-07, 7.895023583989264e-07, 7.894171641727350e-07, 7.894171641727350e-07, 1.892395123305893e-04, 1.892345815621240e-04, 1.890758443469691e-04, "nan", 1.892345579016098e-04, -4.248821812909404e+152, 2.951026338169958e-02, -9.959726698149159e+244, -2.302660310685459e+158, -1.241792406444441e+211, -4.600568681628932e+157, -1.059853121236855e+211, -5.018194465939080e+98, -3.378741018058971e+215, 1.615988721307633e-02, -2.340417170601686e+231, -3.947468189251574e+215, -3.275572463030636e+244, -3.779542828034628e+180, -2.036312796859120e+211, -2.534519208086307e+230, -5.203865082780697e+242, -9.673304128080865e+281, -8.083990077071427e+191, -1.969926147280709e+164, -3.959569949922052e+237, -2.591513221005088e+199, 5.318594362440025e-05, -2.357460591871360e+218, -3.276292351578410e+170, 1.253142320001899e-03, 1.220078841375741e-03, 1.274204882993553e-03, 1.247667723896719e-03, 1.204753712657279e-03, -4.829345219564933e+154, -1.074655051304444e+178, -9.744053730684284e+215, -2.304212131467574e+178, -2.048344586563297e+216, -7.948369551767100e+177, 3.521610907732712e-02, 3.836484985479208e+01, -2.383044668469654e+201, 3.817141591315703e+01, -1.522256974825709e+62, -7.796640095019066e+163, -1.778908897496857e+251, 8.229875778026159e+07, -1.416181014283460e+175, -2.398386775162479e+291, 3.132368739020096e+02, 5.525010292356569e+07, -2.123881381066132e+175, -3.698842844436789e+235, -4.236083431886323e+224, 3.358850642813629e-02, -8.568926263797851e+206, -1.025580481138319e+162, -2.478315030462651e+240, -2.098060502725352e+226, -2.223885505698700e+159, -3.598836753599575e+226, -4.908767649045042e+197, -1.858916132634679e+244, 5.030942338036992e-02, -5.758449807255788e+244, 1.050271722809917e+00, -7.931191542767159e+223, 2.018574001969938e-01, -1.731223650333552e+175, -9.881672064484727e+197, 9.129650977389660e-02, -2.377400295884210e+259, -2.116473499281506e+258, -1.813631318049545e+252, 8.371924174269037e+01, -5.505278382462202e+255, -1.996561987524798e+262, -7.736623202023744e+275, -1.660118514025212e+60, -1.461316292278871e+185, -3.460843695347891e+238, -8.975663598724317e+265]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_gea4_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_gea4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [1.643514487695780e-01, 1.643515085313057e-01, 1.643516888847792e-01, 1.643507110347515e-01, 1.643514809827456e-01, 1.643514809827456e-01, 1.634643204579770e-01, 1.634648468549377e-01, 1.634792988468738e-01, "nan", 1.634645912022956e-01, 6.301284080764854e+154, 1.608441582766953e-01, 1.037156702816477e+245, 2.211354671336126e+158, 1.220941705046854e+211, 4.800192911215372e+157, 1.105841427779597e+211, 1.073198199310941e+97, 7.518320890150799e+213, 1.625205960050767e-01, 1.907386177556976e+229, 8.543669595312200e+213, 7.089457727825965e+242, 1.408173214655106e+175, 8.718976758576722e+205, 7.287182846935787e+226, 2.140625407076705e+236, 4.013721859989821e+276, 3.354271431835946e+186, 9.793684309022042e+166, 1.969590199473335e+240, 1.288469174652761e+202, 1.649931711984581e-01, 1.172352915021855e+221, 1.629283179570685e+173, 1.587624971019421e-01, 1.589398753487815e-01, 1.585072453127827e-01, 1.586506117662367e-01, 1.592017722184566e-01, 1.305015895599721e+156, 7.407669072973627e+177, 8.608775745589050e+215, 1.357052752728029e+178, 1.368875695076328e+216, 6.134966233947618e+177, 1.643028538364787e-01, 7.240016289923994e-02, 5.206739339908204e+199, 7.743925033049785e-02, 3.784608823917204e+63, 3.896316867317111e+161, 8.889973960918794e+248, -2.865907816722988e+01, 7.806298418498058e+168, 5.566335246047627e+284, -4.147874476167647e-02, -2.167757228838078e+01, 8.855916186216521e+168, 2.801292395368529e+235, 3.157059913306816e+224, 1.662051660962051e-01, 6.451756983481151e+206, 7.704710138256190e+161, 1.861843053000051e+240, 1.440821786112279e+226, 9.970260389863311e+158, 1.838813304445648e+226, 2.817614284286957e+197, 1.006154132663789e+244, 1.642565581760233e-01, 5.864234863197428e+244, 1.467650834842844e-01, 5.776045992986015e+222, 1.609469632568701e-01, 1.822722458927857e+174, 1.040393920232434e+197, 1.615976835984030e-01, 5.430600724693652e+255, 1.199472537575221e+255, 2.327866653471683e+251, 5.276227852209995e-02, 9.514603697946968e+252, 1.197494899368461e+257, 8.751770338698134e+267, 1.287343832717614e+53, 2.192955670753878e+182, 8.858070638258737e+231, 2.297331783276479e+259]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_gea4_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_gea4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
