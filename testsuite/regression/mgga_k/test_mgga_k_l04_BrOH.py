
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_k_l04_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_l04", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.180100819380919e+03, 2.180108352843863e+03, 2.180154166189299e+03, 2.180030565478326e+03, 2.180104690357137e+03, 2.180104690357137e+03, 5.901254156276417e+01, 5.901204278210185e+01, 5.900322058119711e+01, "nan", 5.901278779107879e+01, 9.889184968623617e+01, 2.316564297440892e+00, 3.626197414894915e+00, 3.435625553906636e+00, 3.489935697381104e+00, 3.630933159798523e+00, 3.630933159798523e+00, 2.719412594756056e-01, 2.792313064948991e-01, 3.187277743448278e+00, 1.429388804133173e-01, 2.741178665674930e-01, 2.741178665674930e-01, 8.482646027514054e-04, 9.306809522048393e-04, 1.537550984782060e-02, 1.952225153341174e-04, 9.113847560684084e-04, 9.113847560684084e-04, 2.215053617676083e+02, 2.215841587931754e+02, 2.215136748371961e+02, 1.275597004208136e+02, 2.215454098992479e+02, 2.215454098992479e+02, 2.109236120399455e+01, 2.128479087501207e+01, 2.112302561538089e+01, 2.127090752591987e+01, 2.118928064342359e+01, 3.178375267321938e+01, 2.754197827244846e+00, 3.249784944302526e+00, 2.479912286010065e+00, 2.697910066295965e+00, 2.969907271547400e+00, 1.737379335528896e+00, 7.669756403033107e-02, 2.758518546634115e-01, 7.469176366126062e-02, 3.006598864955309e+01, 1.031695002682559e-01, 1.031695002682559e-01, 1.816781610049705e-04, 2.372854235224984e-04, 1.332969558772557e-04, 2.984249036958641e-02, 1.969951729462446e-04, 1.969951946698567e-04, 2.932570857081123e+00, 2.901342623666982e+00, 1.631198626348936e+00, 2.921154555999743e+00, 2.916830400577506e+00, 2.916830400577506e+00, 2.747356251366468e+00, 2.067519067573563e+00, 2.255816657900678e+00, 2.437770677762286e+00, 2.344174577780245e+00, 1.372817965480707e+00, 3.572651484091195e+00, 3.816870493720300e-01, 6.155286545931713e-01, 6.396309913546329e-01, 7.869824571459492e-01, 7.869824571459489e-01, 1.051352835680112e+00, 1.318916130395484e-02, 2.417158459049283e-02, 8.981031111346642e-01, 5.062336307563390e-02, 5.083089446199918e-02, 1.165147001338754e-03, 1.778619776593692e-05, 6.418355701029368e-05, 4.626407572791084e-02, 1.422847128523171e-04, 1.422847128523167e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_k_l04_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_l04", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.318659016313390e+03, 3.318679133798137e+03, 3.318774956157580e+03, 3.318445390065856e+03, 3.318669574539428e+03, 3.318669574539428e+03, 8.624417014432150e+01, 8.624564417175310e+01, 8.629318628087074e+01, "nan", 8.624566308782714e+01, "nan", 2.907401679074559e+00, "nan", "nan", "nan", "nan", "nan", 4.532354324593426e-01, "nan", 4.436129545047499e+00, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 1.994990642299205e+02, "nan", "nan", 2.270616747198163e+01, 2.322632763822666e+01, 2.230062848259722e+01, 2.270347023880206e+01, 2.358944143735986e+01, "nan", "nan", "nan", "nan", "nan", "nan", 2.639116305038355e+00, 1.253655044432153e-01, "nan", 1.218049135985272e-01, 5.010998108258849e+01, "nan", "nan", 3.027968736471155e-04, "nan", "nan", 4.954282156469615e-02, 3.283251723815829e-04, "nan", "nan", "nan", 2.673638214718284e+00, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 2.081103083184291e+00, "nan", 3.925488423544078e-01, "nan", 8.083842791853136e-01, "nan", "nan", 1.386088043452404e+00, "nan", "nan", "nan", 8.326244723747646e-02, "nan", "nan", "nan", 1.069725950171561e-04, "nan", "nan", "nan"]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_l04_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_l04", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [7.971861407201660e-07, 7.971779148082188e-07, 7.971404393177689e-07, 7.972751928319670e-07, 7.971818098763928e-07, 7.971818098763928e-07, 1.938179808073333e-04, 1.938109096390002e-04, 1.935930776961693e-04, "nan", 1.938118669267056e-04, "nan", 3.243209366746790e-02, "nan", "nan", "nan", "nan", "nan", 0.000000000000000e+00, "nan", 1.692113490276237e-02, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 5.339063952292943e-05, "nan", "nan", 1.437522598337420e-03, 1.397046547510607e-03, 1.464374282582559e-03, 1.432563291820153e-03, 1.374737443142328e-03, "nan", "nan", "nan", "nan", "nan", "nan", 3.558356984239269e-02, 7.877625920503006e-02, "nan", 9.660989847695380e-02, 2.078070413996494e-131, "nan", "nan", 2.384853483469477e-05, "nan", "nan", 3.020703855672959e-02, 4.853679710163756e-05, "nan", "nan", "nan", 3.359128468572403e-02, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 5.086404493535006e-02, "nan", 4.849927078261481e-01, "nan", 2.211903969368614e-01, "nan", "nan", 9.814267146211000e-02, "nan", "nan", "nan", 8.336811737396724e-02, "nan", "nan", "nan", 6.252710592777318e-112, "nan", "nan", "nan"]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_l04_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_l04", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [-2.336796295369918e-03, -2.336734729531960e-03, -2.336548938460758e-03, -2.337556280883160e-03, -2.336763108749468e-03, -2.336763108749468e-03, -3.261750604810669e-03, -3.261195186216033e-03, -3.245949350000415e-03, "nan", -3.261464932717405e-03, 0.000000000000000e+00, -6.052879624897796e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -4.267724912895348e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.680891319169694e-03, 0.000000000000000e+00, 0.000000000000000e+00, -7.972992755744633e-03, -7.833980342831693e-03, -8.162591061384693e-03, -8.057654755427284e-03, -7.618529954170802e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -2.386888589914527e-03, -6.454272472660581e-05, 0.000000000000000e+00, -7.604453705142904e-05, 2.053941479754876e-196, 0.000000000000000e+00, 0.000000000000000e+00, -2.327429526406662e-12, 0.000000000000000e+00, "nan", -6.075853789662046e-06, -5.347961785725980e-12, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -4.615996303693592e-04, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -2.434670839969204e-03, 0.000000000000000e+00, -5.275140716775469e-03, 0.000000000000000e+00, -5.946207118919675e-03, 0.000000000000000e+00, 0.000000000000000e+00, -5.258815618087725e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -3.669933756928846e-05, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 3.741123263411615e-166, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_l04_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_l04", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
