
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_k_l04_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_l04", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([2.228772609363752e+03, 2.228780346383694e+03, 2.228827487025225e+03, 2.228700605218425e+03, 2.228776583860596e+03, 2.228776583860596e+03, 5.875404953698605e+01, 5.875364760229096e+01, 5.874752617417684e+01, 5.878372402537710e+01, 5.875433978647950e+01, 5.875433978647950e+01, 2.325457453203005e+00, 2.324518768036382e+00, 2.316601297953699e+00, 2.332925956644892e+00, 2.325067304920511e+00, 2.325067304920511e+00, 2.166385430723429e-01, 2.180358892556098e-01, 3.426213413450713e+00, 1.380074776558845e-01, 2.170135021157001e-01, 2.170135021157001e-01, 8.482626079039823e-04, 9.306783056303307e-04, 1.536983259121448e-02, 1.952225007341271e-04, 9.113821748900179e-04, 9.113821748900179e-04, 1.903283881052704e+02, 1.331377448614581e+02, 2.194700379996785e+02, 2.020504726659516e+02, 1.340674762482259e+02, 1.279882169640255e+02, 3.123812410309232e+01, 2.166626566792912e+01, 2.057789757100669e+01, 2.073793637676368e+01, 2.071841630579629e+01, 2.102430980421416e+01, 2.666121636350808e+00, 2.379677048904827e+00, 2.330017036604628e+00, 1.532934270018772e+00, 1.733815688392750e+00, 1.747166277270932e+00, 7.707531065350275e-02, 2.738273677969802e-01, 7.519015571822300e-02, 1.697729276822010e+01, 1.011235501959566e-01, 1.012299653342957e-01, 1.816781717612617e-04, 2.372854235224951e-04, 1.332969558772551e-04, 2.987133076973873e-02, 1.969951886773055e-04, 1.969951946309501e-04, 2.932570816766165e+00, 2.901342516666451e+00, 2.912518090770231e+00, 2.920914533596493e+00, 2.916830138533180e+00, 2.916830400455340e+00, 2.747356249117045e+00, 1.270277707609903e+00, 2.064109087861077e+00, 1.491330211355703e+00, 1.377917073227666e+00, 2.288750212303872e+00, 3.285438999225641e+00, 4.363220572427422e-01, 6.154898919986349e-01, 9.952017526015230e-01, 6.007856131638492e-01, 5.430892273009672e-01, 1.039963745866809e+00, 1.318895900846643e-02, 2.415537869449817e-02, 5.434213830522617e-01, 5.082788950548680e-02, 5.055058985692970e-02, 1.165146917072703e-03, 1.778619776591249e-05, 6.418355700668449e-05, 4.608753586226371e-02, 1.422847073912504e-04, 1.422847128296431e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_k_l04_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_l04", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([3.218586524246315e+03, 3.218606792927133e+03, 3.218701660399254e+03, 3.218369548004838e+03, 3.218597176501916e+03, 3.218597176501916e+03, 8.719383514273277e+01, 8.719480080179737e+01, 8.722771947281420e+01, 8.719663777109307e+01, 8.719513552449675e+01, 8.719513552449675e+01, 3.027270297116608e+00, 3.016172693472162e+00, 2.707658887649780e+00, 2.764249768927674e+00, 3.023274648257576e+00, 3.023274648257576e+00, 1.887852314299416e-01, 1.892682434690388e-01, 4.265792241569279e+00, 2.068073768766896e-01, 1.886434469240044e-01, 1.886434469240043e-01, 1.413761238622059e-03, 1.551117534232057e-03, 2.558839775138006e-02, 3.253707696055278e-04, 1.518957639311007e-03, 1.518957639311007e-03, 2.235150024184377e+02, 1.932610072986183e+02, 3.547438420211228e+02, 2.611840248446795e+02, 1.886792183041503e+02, 1.996405071090196e+02, 5.199305078256426e+01, 2.495282110844167e+01, 2.408287983058828e+01, 2.449795720749967e+01, 2.525506887013211e+01, 2.398586631926495e+01, 4.021041572642139e+00, 2.945228934821282e+00, 3.238404481734500e+00, 2.456077736537429e+00, 2.656988591814695e+00, 2.645720418354887e+00, 1.281132669447022e-01, 4.488201843033818e-01, 1.253072812960709e-01, 2.745876163178855e+01, 1.575882466076124e-01, 1.579735243015843e-01, 3.027969505590551e-04, 3.954757058708141e-04, 2.221615931287564e-04, 4.975399028533146e-02, 3.283252949382156e-04, 3.283253242533910e-04, 4.887617788377836e+00, 4.835570237104659e+00, 4.854196815675808e+00, 4.866774995349087e+00, 4.861382021883905e+00, 4.861384000039855e+00, 4.578927068451993e+00, 1.759288116377261e+00, 2.690575691872717e+00, 2.054514879544485e+00, 2.089857046178283e+00, 3.538295413451678e+00, 4.336456401641542e+00, 7.269754100403990e-01, 1.025644361865503e+00, 1.605789398045580e+00, 6.292336512258913e-01, 6.089524249742990e-01, 1.429694359929485e+00, 2.198094892038943e-02, 4.018792283688927e-02, 7.809661659982220e-01, 8.470213010275059e-02, 8.276767231385525e-02, 1.941911229522786e-03, 2.964366294310693e-05, 1.069725949988268e-04, 7.588339327279274e-02, 2.371411540142217e-04, 2.371411879727270e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_l04_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_l04", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([9.530088451975011e-07, 9.530003953380024e-07, 9.529601778146960e-07, 9.530987379674714e-07, 9.530044096460509e-07, 9.530044096460509e-07, 1.725834149124377e-04, 1.725873101933918e-04, 1.727015784399901e-04, 1.728219323533017e-04, 1.725808877073593e-04, 1.725808877073593e-04, 2.024245527027646e-02, 2.033696930361845e-02, 2.346012249158038e-02, 2.383426058875594e-02, 2.027827398491057e-02, 2.027827398491057e-02, 1.304680836929123e+00, 1.319246699057366e+00, 9.218335942132514e-03, 2.703545330814126e-01, 1.311378228888246e+00, 1.311378228888246e+00, 3.720635022119282e-04, 4.310912507361673e-04, 9.631357761886285e-03, 1.471136160926519e-05, 4.419422848275084e-04, 4.419422848275084e-04, 1.252801089955126e-04, 3.443713374419054e-05, 1.809873081331247e-05, 1.115525772868499e-04, 7.191026741183846e-05, 4.362253713181352e-05, 2.505084215859682e-06, 7.361737626850816e-04, 1.158532466810723e-03, 1.125917148188786e-03, 1.082955773205134e-03, 1.325126978594953e-03, 2.206164630139993e-02, 7.846180116323781e-02, 3.866892945987144e-02, 3.482148843239626e-02, 3.123118273192439e-02, 2.708616420146744e-02, 5.177122479316206e-03, 2.340546598161854e-03, 4.331158928463912e-05, 8.906269187498990e-04, 2.620844277292401e-01, 2.725571290640274e-01, -1.240415225595968e-07, 9.556657114096567e-17, 1.067749559544444e-15, 2.416027311605921e-03, -5.073428811737085e-07, 2.022227778925612e-09, 1.781307872590694e-07, 1.526193457013904e-07, 7.333996402589401e-10, 6.048580808175291e-04, 5.668985345907445e-07, 2.642895177705219e-10, 1.773641442230863e-08, 6.329768233473688e-02, 5.091244669811053e-02, 6.399282836150326e-02, 3.949718552308658e-02, 2.517870847785695e-02, 1.250883566998515e-01, 9.811667153589759e-05, 5.653005592152638e-05, 1.611251979650304e-02, 1.340792845776231e-01, 2.076218093692558e-01, 8.146192800908350e-02, -3.615388176297664e-05, 8.662031140904749e-03, 1.978195024250620e-01, 1.284625669677862e-04, 1.093977262331469e-01, 1.140371543204616e-06, -3.825682946880297e-11, 1.698319440021536e-09, 8.667576304474311e-02, 1.487751317977670e-05, 2.388325160008994e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_l04_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_l04", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([-7.153074845768862e-03, -7.153050906109873e-03, -7.152990008208430e-03, -7.153384853546474e-03, -7.153061824516589e-03, -7.153061824516589e-03, -2.183946951129338e-04, -2.193959908319361e-04, -2.510912957595121e-04, -2.594974349721718e-04, -2.185663064466192e-04, -2.185663064466192e-04, 6.756364605942379e-03, 6.791893806313102e-03, 7.490337656769211e-03, 6.504628938310835e-03, 6.767233859763922e-03, 6.767233859763922e-03, 1.136119198091848e-03, 1.163063465999379e-03, 1.172455215452082e-02, 6.332925871987475e-04, 1.153983903108100e-03, 1.153983903108095e-03, 2.650898983642013e-10, 3.507333465705862e-10, 4.923063601778295e-07, 2.610195442977045e-12, 3.491888478668539e-10, 3.491888478668539e-10, 4.664870500334233e-03, 8.919003427074150e-03, -9.822186219737555e-05, 2.523620689505949e-03, -9.401912620545645e-03, 3.233347026290097e-03, -1.994699347513720e-06, 9.820541372883042e-03, 2.059908288290155e-05, 2.145121971689729e-04, 1.902619529883767e-04, -6.286702771425498e-03, 7.443647414521360e-04, 7.061871631794045e-03, 1.901287063254715e-03, 1.508090066566179e-03, 9.334784887895175e-04, 4.288674341285382e-03, -8.837111332529703e-06, 1.475660348519809e-04, -5.613561461563277e-08, 2.611354744053838e-03, 1.919235891705061e-05, -1.687853732143193e-04, 7.333569197343841e-14, 4.677591545698482e-22, -9.055851561373473e-23, -1.035688494434202e-06, 1.345556129293548e-12, -7.879500498925563e-16, 6.733544275848222e-14, -5.053949431346668e-13, -9.605695022168330e-17, 4.073181321320912e-08, -1.583385343996591e-12, 1.593862379985666e-17, -8.006984779918956e-16, -1.924450835888448e-03, 3.120652519710142e-03, -9.932530564297260e-03, 3.794404717876043e-03, 4.569251664719177e-04, 1.522959232990480e-03, -3.276333632283438e-07, -1.089471116631151e-07, -1.945407849061216e-04, 1.224049314470581e-02, 8.542901937115856e-03, -5.024428690312910e-05, 1.636888644021286e-08, 2.336607111003247e-06, 5.086692336481058e-04, -1.236069125590221e-07, 5.218116931112148e-06, -5.464569583377542e-12, 4.569867213956815e-19, -1.195919286998639e-16, -3.674154788339847e-05, -1.740306258458758e-12, -5.710613332348788e-16])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
