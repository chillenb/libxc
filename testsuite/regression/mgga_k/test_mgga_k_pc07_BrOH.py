
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_k_pc07_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_pc07", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.179808264051363e+03, 2.179815808850845e+03, 2.179861705261830e+03, 2.179737637220071e+03, 2.179812133227045e+03, 2.179812133227045e+03, 5.806162322816837e+01, 5.806541865249810e+01, 5.816979981789694e+01, "nan", 5.806407151287058e+01, "nan", 2.345562949575114e+00, "nan", "nan", "nan", "nan", "nan", 5.005338209717326e-01, "nan", 2.547122222049864e+00, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 1.275549400206174e+02, "nan", "nan", 2.738672693907647e+01, 2.715072842705275e+01, 2.811031806543980e+01, 2.792183416083171e+01, 2.630403091725037e+01, "nan", "nan", "nan", "nan", "nan", "nan", 1.737126435279887e+00, 8.063655240642430e-01, "nan", 7.438202537154897e-01, 1.899413625252676e+01, "nan", "nan", 5.815838125866419e-01, "nan", "nan", 6.894857948645150e-01, 4.781203767311650e-01, "nan", "nan", "nan", 1.631198271851993e+00, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 1.372602395448805e+00, "nan", 9.628139785354010e-01, "nan", 6.379358854449723e-01, "nan", "nan", 9.451885827774315e-01, "nan", "nan", "nan", 6.418915667998963e-01, "nan", "nan", "nan", 4.769205305788559e-01, "nan", "nan", "nan"]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_k_pc07_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_pc07", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.321268110029812e+03, 3.321287975831800e+03, 3.321383067023555e+03, 3.321057616393462e+03, 3.321278532260782e+03, 3.321278532260782e+03, 1.544838387928497e+02, 1.542885300555813e+02, 1.489650000066290e+02, "nan", 1.543846934694453e+02, "nan", -2.345562949575114e+00, "nan", "nan", "nan", "nan", "nan", "nan", "nan", 4.401884224096725e+00, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 1.995419515822497e+02, "nan", "nan", -2.738672693907645e+01, -2.715072842705276e+01, -2.811031806543976e+01, -2.792183416083170e+01, -2.630403091725038e+01, "nan", "nan", "nan", "nan", "nan", "nan", 2.641369338588884e+00, -8.063655240642431e-01, "nan", -7.438202537154899e-01, -3.165689375421127e+01, "nan", "nan", -5.791213990320940e-01, "nan", "nan", -6.894857948645147e-01, -4.755629688481071e-01, "nan", "nan", "nan", 2.673641419288214e+00, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 2.083021647367910e+00, "nan", -9.628139785354000e-01, "nan", -6.379358854449723e-01, "nan", "nan", -9.437768506686171e-01, "nan", "nan", "nan", -6.418915667998958e-01, "nan", "nan", "nan", -4.768256546727454e-01, "nan", "nan", "nan"]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_pc07_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_pc07", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [7.893452069243111e-07, 7.893376314801993e-07, 7.893022417081162e-07, 7.894263558553401e-07, 7.893412259171945e-07, 7.893412259171945e-07, -9.237027774000317e-04, -9.206173492115216e-04, -8.359799301592624e-04, "nan", -9.221040240475426e-04, "nan", 2.127416061921151e-01, "nan", "nan", "nan", "nan", "nan", "nan", "nan", -3.026497881554942e-03, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 5.318351783460606e-05, "nan", "nan", 8.433970231851095e-03, 8.258181711162384e-03, 8.506448761135833e-03, 8.367254872862299e-03, 8.223561338896962e-03, "nan", "nan", "nan", "nan", "nan", "nan", 3.521256181354997e-02, 6.875369789659389e+01, "nan", 7.146664024634522e+01, 0.000000000000000e+00, "nan", "nan", 6.018094838238123e+05, "nan", "nan", 2.853120840444643e+02, 5.330445289294029e+05, "nan", "nan", "nan", 3.358845316970813e-02, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 5.030413433909543e-02, "nan", 5.111822292084749e+00, "nan", 1.460335367408629e+00, "nan", "nan", 6.751852293803378e-01, "nan", "nan", "nan", 1.285807832823024e+02, "nan", "nan", "nan", 2.865708569473290e+06, "nan", "nan", "nan"]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_pc07_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_pc07", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [1.643540978197184e-01, 1.643541574219022e-01, 1.643543372938963e-01, 1.643533620548903e-01, 1.643541299468907e-01, 1.643541299468907e-01, 3.024279840178731e-01, 3.020435684663305e-01, 2.915094681182598e-01, "nan", 3.022302631067089e-01, "nan", 0.000000000000000e+00, "nan", "nan", "nan", "nan", "nan", 0.000000000000000e+00, "nan", 1.915509545581870e-01, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 1.649943848531431e-01, "nan", "nan", 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, "nan", "nan", "nan", "nan", "nan", "nan", 1.643056341706911e-01, 0.000000000000000e+00, "nan", 0.000000000000000e+00, 6.691863623571303e-67, "nan", "nan", 3.036008231968172e-03, "nan", "nan", 0.000000000000000e+00, 3.968430237864011e-03, "nan", "nan", "nan", 1.662052048458035e-01, "nan", "nan", "nan", "nan", "nan", "nan", "nan", "nan", 1.642594664390267e-01, "nan", 0.000000000000000e+00, "nan", 0.000000000000000e+00, "nan", "nan", 1.038297833313248e-04, "nan", "nan", "nan", 0.000000000000000e+00, "nan", "nan", "nan", 7.019048564121885e-63, "nan", "nan", "nan"]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_pc07_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_pc07", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
