
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_k_pc07_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_pc07", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([9.576441355770073e+02, 9.576240422466032e+02, 9.575736041280999e+02, 9.579018626923280e+02, 9.576332113362187e+02, 9.576332113362187e+02, 8.332828012021703e+01, 8.331568497620985e+01, 8.294322715948249e+01, 8.311988470833855e+01, 8.332523930448986e+01, 8.332523930448986e+01, 6.065233952975984e+00, 6.086386127054907e+00, 6.674383098649808e+00, 6.399391647867796e+00, 6.072104207891227e+00, 6.072104207891227e+00, 6.201504438728735e-01, 6.054291229257796e-01, 1.168177900632578e+01, 1.007220329656371e+00, 6.155123674831058e-01, 6.155123674831058e-01, 6.640053152162366e-01, 6.753101350478989e-01, 1.002853171230671e+00, 6.168804736052419e-01, 6.620884883728172e-01, 6.620884883728172e-01, 8.838622149258383e+02, 3.597699258610896e+02, 4.134740268824918e+01, 7.163004356505800e+02, 4.121967564166240e+01, 2.190006954833389e+02, 2.738678297580936e+01, 6.935345826913931e+01, 4.150710906931049e+01, 4.198955392272742e+01, 4.074434000834363e+01, 2.630403091725037e+01, 7.619977629268902e+00, 1.213002956623863e+01, 9.219553212220365e+00, 2.113294155301368e+00, 2.543907415986609e+00, 3.401544833347526e+00, 8.063655240642430e-01, 3.138463247970129e+00, 7.438202537154897e-01, 2.533295053563915e+01, 6.901994569116964e-01, 6.901994569116964e-01, 5.817410321511892e-01, 5.799475111361413e-01, 3.428163707998398e-01, 6.894857948645150e-01, 4.801349807103978e-01, 4.770742910603597e-01, 1.691254823801264e+00, 1.802090294284471e+00, 1.763388492461455e+00, 1.803471252277964e+00, 1.745183499734950e+00, 1.747799995118866e+00, 1.563243206356822e+00, 1.766207117870151e+00, 9.828128145105605e+00, 4.844923140454186e-01, 2.589645486753731e+00, 5.397068142072645e+00, 7.564214768372891e+00, 9.628139785354010e-01, 1.050577000896629e+00, 6.379358854449723e-01, 2.596727514173423e+00, 1.675734078367145e+00, 1.740278119507517e+00, 9.001523274609341e-01, 1.431756096010389e+00, 8.818375751853549e-01, 6.418915667998963e-01, 6.418915667998958e-01, 5.773381571176470e-01, 4.426718570482334e-01, 4.768849521104467e-01, 5.781333190135602e-01, 3.948424406271953e-01, 3.948424406271957e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_k_pc07_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_pc07", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-9.576441355770078e+02, -9.576240422466037e+02, -9.575736041281002e+02, -9.579018626923277e+02, -9.576332113362186e+02, -9.576332113362186e+02, 8.737672017430323e+01, 8.737757978018092e+01, 8.740765551777781e+01, 8.738206672424469e+01, 8.737796496742735e+01, 8.737796496742735e+01, 3.094372054528301e+00, 3.085346910625684e+00, 2.847832827455893e+00, 2.903720207469280e+00, 3.091112721350191e+00, 3.091112721350191e+00, 1.953563090341432e-01, 2.042199740688775e-01, 4.280513696286525e+00, 8.058433045281184e-02, 1.980770288706614e-01, 1.980770288706616e-01, -7.913149450433359e-01, -7.947334999508512e-01, 5.956862057802497e-02, -6.253151474977950e-01, -7.795441792438339e-01, -7.795441792438339e-01, 1.595230462883467e+03, 1.927872594353533e+02, -4.134740268824915e+01, 1.540716239640571e+03, -4.121967564166239e+01, 1.996975403723085e+02, -2.738692624974472e+01, 2.601505581264426e+01, 2.548725052438998e+01, 2.584949361023112e+01, 2.637467184958239e+01, -2.630403091725038e+01, 1.416734218152173e+01, 1.227725262861799e+01, 1.661025588486643e+01, 2.456175616936947e+00, 2.658700115561295e+00, 2.648614331414453e+00, -8.063655240642431e-01, 6.327786697666004e-01, -7.438202537154899e-01, 2.745848267770143e+01, -6.901994569116958e-01, -6.901994569116958e-01, -5.800328338143202e-01, -5.795940597161943e-01, -3.426202539611237e-01, -6.894857948645147e-01, -4.767675781783494e-01, -4.770742910603595e-01, 2.646574478935991e+00, 2.478351673949345e+00, 2.541450903700536e+00, 2.811988584609070e+00, 2.555878333739478e+00, 2.564077386881181e+00, 2.497347362144455e+00, 1.776400781662618e+00, 1.551751280115969e+01, -4.844923140454181e-01, 2.092104852175583e+00, 1.010757134736998e+01, 1.881223054342627e+01, -9.628139785354000e-01, -5.621682298992720e-01, -6.379358854449723e-01, 5.715121705561449e-01, 6.446890409757109e-01, 1.446534642499104e+00, -7.571259567112033e-01, -3.770454726630920e-01, 7.849427580699001e-01, -6.418915667998958e-01, -6.418915667998951e-01, -5.773381571176469e-01, -4.426251936445216e-01, -4.768849521104465e-01, -5.781333190135604e-01, -3.948424406271952e-01, -3.948424406271954e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_pc07_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_pc07", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([6.466056283234561e-06, 6.466009197756442e-06, 6.465764469780238e-06, 6.466536223526937e-06, 6.466031741755515e-06, 6.466031741755515e-06, 1.690701208728148e-04, 1.690754100932501e-04, 1.692271430402284e-04, 1.692689649054975e-04, 1.690684416698595e-04, 1.690684416698595e-04, 1.773300485313875e-02, 1.776144335349760e-02, 1.865197410369786e-02, 1.929855171143181e-02, 1.774544155688908e-02, 1.774544155688908e-02, 1.119226808240259e+00, 1.078940916089501e+00, 7.368075124216939e-03, 2.622744439045943e-01, 1.106516357585261e+00, 1.106516357585261e+00, 1.187035101626018e+05, 1.043643920604703e+05, -2.455055441480316e+02, 5.931782662255391e+05, 1.076677734602523e+05, 1.076677734602523e+05, 2.084590575264894e-03, 3.163893627986861e-05, 4.469581719292751e-04, 1.998842246927652e-03, 4.468621392195734e-04, 4.330956824585176e-05, 8.432606413436152e-03, 5.611501907954224e-04, 9.611571061787596e-04, 9.385996274781585e-04, 9.221860876910710e-04, 8.223561338896962e-03, 1.096784945323910e+00, 5.994103380242410e-01, 1.633453455704867e+00, 3.477831054254250e-02, 3.096532408930446e-02, 2.659285256313417e-02, 6.875369789659389e+01, 3.081542277952800e+01, 7.146664024634522e+01, 8.887778230919893e-04, 4.446729428797773e+01, 4.446729428797773e+01, 6.031310020583335e+05, 4.031459643423689e+05, 9.574952921237822e+05, 2.853120840444643e+02, 5.383033075310469e+05, 5.329472753722589e+05, 2.935430252631333e-01, 2.978338513472826e-01, 2.964412749366950e-01, 3.073428455497454e-01, 2.953684249239448e-01, 2.958112387980507e-01, 3.235637885601077e-01, 5.967155151124034e-02, 1.946516230470813e+00, 3.871492494294327e-01, 3.887321472831000e-02, 1.201969652245313e+00, 7.555407080162475e-01, 5.111822292084749e+00, 2.617066770426967e+00, 1.460335367408629e+00, 9.456601282415082e-02, 1.579836832686601e-01, 7.602840925598719e-02, 1.117161465046018e+03, 1.758046620711623e+02, 1.902944391322947e-01, 1.285807832823024e+02, 1.285807832823024e+02, 3.705071661734569e+04, 1.964517025253040e+07, 2.865708569560217e+06, 1.480818596429328e+02, 8.682210925506414e+05, 8.682210925506453e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_pc07_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_pc07", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 1.664555039318725e-01, 1.664545334815498e-01, 1.664238140142562e-01, 1.664158060664831e-01, 1.664553368542419e-01, 1.664553368542419e-01, 1.731610349522449e-01, 1.731921157762456e-01, 1.738884360812979e-01, 1.728115212302157e-01, 1.731701648819161e-01, 1.731701648819161e-01, 1.683091072444395e-01, 1.681802173491707e-01, 1.794761205299911e-01, 1.916806340051962e-01, 1.682782202574553e-01, 1.682782202574553e-01, -1.399122362777241e-01, -1.404587978085896e-01, 2.872103487601415e-01, -1.181782557514611e-02, -1.404401389629510e-01, -1.404401389629510e-01, -4.731734061532358e-02, 1.762689898354763e-01, 0.000000000000000e+00, -4.384509722031589e-02, 0.000000000000000e+00, 1.699124053071382e-01, -4.947057523186597e-07, 1.767565271653905e-01, 1.666850929067555e-01, 1.668588157717411e-01, 1.668373227155534e-01, 0.000000000000000e+00, -2.469007084533434e-02, 5.516757130541491e-02, -4.665786123793647e-02, 1.681739883083122e-01, 1.675838018738864e-01, 1.709650597722674e-01, 0.000000000000000e+00, -5.687530908546585e-02, 0.000000000000000e+00, 1.693001485160475e-01, 0.000000000000000e+00, 0.000000000000000e+00, -6.058143625424292e-05, -1.143890692726804e-10, -4.025545351315290e-11, 0.000000000000000e+00, -5.185553221423403e-04, 0.000000000000000e+00, -5.750000087430617e-10, -4.854713469756772e-09, -1.312439446953409e-11, -6.072194297381107e-06, -7.737678966062922e-09, -3.607567342911743e-12, -2.262537880884929e-11, 1.648574117486808e-01, -5.116435254048343e-02, 0.000000000000000e+00, 1.704498306619635e-01, -1.577532810280090e-02, -2.007919652078114e-02, 0.000000000000000e+00, -2.469631501318730e-04, 0.000000000000000e+00, 1.841473337993887e-01, 1.752184037189925e-01, 1.666199804883112e-01, -4.483356308166180e-03, 1.671068025342639e-01, 1.671498640528660e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -1.197246987270584e-07, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
