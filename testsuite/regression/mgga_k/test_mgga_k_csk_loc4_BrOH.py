
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_k_csk_loc4_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk_loc4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([9.968815398938162e+02, 9.968621823998456e+02, 9.968141001041093e+02, 9.971302365637081e+02, 9.968710117658937e+02, 9.968710117658937e+02, 8.106586095179514e+01, 8.105111745543670e+01, 8.060926078608802e+01, 8.075206689695139e+01, 8.106252612690504e+01, 8.106252612690504e+01, 6.512095713303879e+00, 6.533478178802010e+00, 7.109801814402934e+00, 6.758841733448229e+00, 6.518874466475972e+00, 6.518874466475972e+00, 6.056819784268227e-01, 5.914238710788915e-01, 1.324570291539508e+01, 1.041309050160192e+00, 6.012654584562734e-01, 6.012654584562732e-01, 6.260924450036663e-01, 6.237873700755397e-01, 8.990874190660660e-01, 9.758597343046533e-01, 6.124097229978698e-01, 6.124097229978698e-01, 1.868998314077619e+03, 4.109949012339962e+02, 4.134740329419515e+01, 2.603984185555166e+03, 4.174879075488721e+01, 2.345799154614149e+02, 2.738672710008301e+01, 7.548214503348193e+01, 4.011517981501180e+01, 4.074488449882240e+01, 3.956693351088644e+01, 2.678951767194157e+01, 4.883997913690617e+01, 1.676127779829225e+01, 3.047253842436504e+01, 2.198379497421836e+00, 2.573480604033924e+00, 3.673503489913244e+00, 8.063655241888141e-01, 6.187604474981142e+00, 7.438202252744477e-01, 2.716730617906020e+01, 6.908464000905959e-01, 6.902028083868892e-01, 4.692702926477382e+00, 3.072187715031507e+03, 3.428169238900468e-01, 6.894857947237224e-01, 1.928931445984286e+00, 4.771834901704870e-01, 2.599950566371145e+05, 1.804145993216961e+00, 1.763494369882174e+00, 2.559761390666549e+03, 1.747744692694678e+00, 3.328434941147042e+06, 1.563370330697172e+00, 1.616747509541252e+00, 2.236509618190453e+01, 4.886095600680521e-01, 2.774996006777361e+00, 5.076439741294332e+01, 6.016048095529231e+01, 9.628139688968375e-01, 8.840644847284055e-01, 6.379359072146727e-01, 2.904543496525994e+00, 1.795870537203718e+00, 1.691363717236267e+00, 5.676352020790748e+00, 1.325068163026964e+00, 8.727132140376415e-01, 6.418915702844042e-01, 6.419636455801572e-01, 5.779840257436663e-01, 2.354581540699841e+01, 4.769205305788559e-01, 5.781333229891240e-01, 3.949213124192420e-01, 3.949213124192424e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_k_csk_loc4_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk_loc4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-5.846085950566439e+02, -5.845827637790422e+02, -5.845137642296792e+02, -5.849367261490352e+02, -5.845945830007971e+02, -5.845945830007971e+02, 9.715549548950717e+01, 9.715495104552441e+01, 9.714801102761864e+01, 9.720119084295230e+01, 9.715604320331329e+01, 9.715604320331329e+01, 3.744051763486782e+00, 3.740888171671924e+00, 3.677641359833602e+00, 3.727660577475240e+00, 3.742873574594956e+00, 3.742873574594956e+00, 3.338272337083084e-01, 3.373752522105279e-01, 5.217877219834809e+00, 2.442796036914476e-01, 3.348039422411853e-01, 3.348039422411851e-01, 8.344194473912898e-02, 8.336051208222438e-02, 1.342225046825888e-01, 9.884641336555243e-02, 8.178695593638427e-02, 8.178695593638427e-02, 2.114701590173779e+02, 2.114924060299643e+02, -4.134739783563741e+01, 2.114900891319025e+02, -3.647294557804996e+01, 2.114810412880139e+02, -2.738672772612215e+01, 3.376189178482552e+01, 3.334767100626169e+01, 3.363409337331281e+01, 3.370431206477882e+01, -2.010829888766445e+01, 2.681397308528450e+00, 3.043592658161325e+00, 2.422965461434193e+00, 2.545740097313887e+00, 2.872236981544585e+00, 2.872236981544586e+00, -8.063655232586145e-01, 4.038861318634522e-01, -7.438201066909385e-01, 2.816124587158501e+01, -6.651100777308212e-01, -6.901437954945970e-01, 9.596678612084122e-02, 9.588859100750162e-02, -3.426198847830592e-01, -6.894857939610803e-01, 7.889925654183988e-02, -4.768922925434806e-01, 2.720043165060787e+00, 2.484608808951526e+00, 2.541779970336136e+00, 2.717375751779792e+00, 2.563904088646795e+00, 2.716375092921702e+00, 2.497762339467600e+00, 2.088055451956374e+00, 2.211351888193981e+00, -4.475689861119272e-01, 2.269067752992169e+00, 2.269067752992168e+00, 3.350171597632789e+00, -9.628139296922632e-01, -8.840639256116124e-01, -6.379357010489063e-01, 8.521428509114521e-01, 8.521428509114520e-01, 1.709824633612485e+00, 1.445742188657462e-01, 1.490540916015516e-01, 8.963482641709031e-01, -6.418915852070767e-01, -6.384047335854734e-01, -5.762617094076149e-01, 7.305359550962413e-02, -4.768256546630977e-01, -5.781332719431523e-01, -3.947109876404507e-01, -3.947109876404509e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_csk_loc4_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk_loc4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([6.115300512012456e-06, 6.115249973128799e-06, 6.115003476888081e-06, 6.115832518643294e-06, 6.115274031905271e-06, 6.115274031905271e-06, -2.472394937163762e-04, -2.472379370798780e-04, -2.471646327349199e-04, -2.471337663456313e-04, -2.472355334932013e-04, -2.472355334932013e-04, -3.510236502169899e-02, -3.521068493704325e-02, -3.818061351843336e-02, -3.729284375174069e-02, -3.514182064063837e-02, -3.514182064063837e-02, -1.714505893405703e+00, -1.647803711390635e+00, -2.039039221523134e-02, -4.499104442777782e+00, -1.694125675833426e+00, -1.694125675833426e+00, -9.841348747844100e+03, -8.563482231794515e+03, -1.275285290834196e+02, -8.913674748409093e+04, -8.836880840331354e+03, -8.836880840331354e+03, -7.375225004317645e-05, -7.371291324254355e-05, 4.469581717928091e-04, -7.371751349258339e-05, 4.430110107289859e-04, -7.373225297122965e-05, 8.433970233772596e-03, -1.362599982341794e-03, -1.403564045587413e-03, -1.380597054022279e-03, -1.356887620917998e-03, 7.518033762505467e-03, -5.319354598546049e-02, -4.150206494903226e-02, -6.225828582121706e-02, -5.486690168006797e-02, -4.750477929046341e-02, -4.750477929046341e-02, 6.875369788976842e+01, -1.678177047213094e+00, 7.146663978339670e+01, -1.474817918412267e-03, 4.319449943982684e+01, 4.446550747801432e+01, -9.928817090994887e+04, -6.651889846709739e+04, 9.574968365468716e+05, 2.853120839756159e+02, -8.793630043642275e+04, 5.329472753722589e+05, -4.841488087911890e-02, 2.981735854250898e-01, 2.964590738343238e-01, -4.869897669896317e-02, 2.958018789761704e-01, -4.880731003106816e-02, 3.235901009869711e-01, -8.176070824737468e-02, -7.176223236636087e-02, 3.849831103886318e-01, -6.774335659304102e-02, -6.774335659304104e-02, -3.600523589606962e-02, 5.111822288901819e+00, 3.051372866955373e+00, 1.460335361117258e+00, -3.482603739330055e-01, -3.482603739330056e-01, -1.114675031960973e-01, -1.605187871500873e+02, -6.469846192883088e+01, -2.856684891979313e-01, 1.285807834800174e+02, 1.280023496233435e+02, 3.705071661734569e+04, -3.241357726446034e+06, 2.865708569560217e+06, 1.480818560727527e+02, 8.682210925506414e+05, 8.682210925506451e+05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_csk_loc4_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk_loc4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([1.010995566338120e-02, 1.011012882351151e-02, 1.011056245960078e-02, 1.010770469708230e-02, 1.011004991314499e-02, 1.011004991314499e-02, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000001e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000001e-01, 2.171250000000000e-01, 5.690379526380065e-11, 2.171250000000001e-01, 1.606195314551835e-03, 2.171250000000001e-01, -4.246119760202935e-11, 2.171250000000000e-01, 2.171250000000001e-01, 2.171250000000000e-01, 2.171250000000001e-01, 1.598961339562965e-02, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 1.850208370361718e-11, 2.171250000000000e-01, 1.207294558801950e-09, 2.171250000000000e-01, 5.334596924164326e-03, 7.488960965442566e-06, 2.171250000000000e-01, 2.171250000000000e-01, 0.000000000000000e+00, 4.497359375425006e-11, 2.171250000000000e-01, 0.000000000000000e+00, 2.171250000000000e-01, 0.000000000000000e+00, 0.000000000000000e+00, 2.171250000000000e-01, 0.000000000000000e+00, 2.171250000000000e-01, 0.000000000000000e+00, 2.171156045424994e-01, 2.171250000000001e-01, 1.042777890048721e-03, 2.171250000000000e-01, 2.171250000000001e-01, 2.171250000000000e-01, 1.160473340854127e-10, 7.799114224745699e-10, 8.029281083674686e-10, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, -2.865809989567428e-10, 8.384195482485791e-04, 0.000000000000000e+00, 2.171250000000000e-01, 0.000000000000000e+00, 4.493369836443845e-09, 0.000000000000000e+00, 0.000000000000000e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
