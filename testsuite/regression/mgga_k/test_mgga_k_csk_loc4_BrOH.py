
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_k_csk_loc4_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk_loc4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [1.910141967549694e+03, 1.910155298086260e+03, 1.910215798668051e+03, 1.909997120015994e+03, 1.910148979234320e+03, 1.910148979234320e+03, 4.943672681055109e+01, 4.943693172566984e+01, 4.944721886425660e+01, "nan", 4.943725320781969e+01, 6.750024779050042e+158, 2.416774485895560e+00, 4.073911872586521e+247, 8.229624791632110e+160, 4.615599965551045e+213, 1.887959845604003e+160, 4.349375639415015e+213, 3.161337388106755e+98, 2.274054003574825e+215, 2.751647067135466e+00, 2.953281295839279e+230, 2.536866395028610e+215, 2.105068187394058e+244, 1.293907504073804e+174, 8.789863952227591e+204, 1.213682249423623e+227, 4.526748721105103e+234, 3.962459548758215e+275, 3.311431466314644e+185, 2.349882525533170e+171, 4.727487524156285e+244, 3.091650428790833e+206, 1.160412342100215e+02, 2.813435297445920e+225, 3.909985421799057e+177, 2.757260054476406e+01, 2.735689715218543e+01, 2.827331642993480e+01, 2.809860047606789e+01, 2.654086958978718e+01, 4.493003758057297e+159, 2.210001210958987e+180, 3.030482809667016e+218, 3.645430796810773e+180, 4.000435648921610e+218, 1.973653341173608e+180, 1.517874173007436e+00, 8.063655470363025e-01, 1.555813560446080e+201, 7.438202816044902e-01, 1.232571990649424e+67, 4.354330636700302e+162, 9.934994328156659e+249, 5.806021456384955e-01, 2.006466981620083e+167, 8.037211526131098e+282, 6.894857952387413e-01, 4.770751597735426e-01, 1.889752540389195e+167, 8.898622110265405e+237, 9.921964065037037e+226, 1.589890156352316e+00, 2.041495110161453e+209, 2.434351517599338e+164, 5.882609962311021e+242, 4.287864498120557e+228, 2.232913153158970e+161, 4.493215458797669e+228, 7.440295715023968e+199, 2.554878636450047e+246, 1.196090968374377e+00, 2.269435351038900e+247, 9.628793553281443e-01, 3.851188054001366e+224, 6.590414674953790e-01, 1.553822493124064e+176, 8.869081889283199e+198, 1.000789812678238e+00, 7.758555312267617e+255, 3.140589964981077e+255, 2.264644868935848e+253, 6.418915738992620e-01, 5.238829488680708e+253, 1.511367926963808e+256, 1.686144682106011e+265, 8.950228977694508e+50, 1.098979397066040e+183, 1.365253154475761e+230, 3.540770436452705e+257]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_k_csk_loc4_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk_loc4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.604666473035912e+03, 3.604680190846764e+03, 3.604759744639184e+03, 3.604534719229609e+03, 3.604673553830165e+03, 3.604673553830165e+03, 8.234032140913834e+01, 8.236505868268436e+01, 8.304317092877187e+01, "nan", 8.235374877928631e+01, -1.711269224430626e+143, -1.499649935889843e+00, -6.133461888547176e+231, -2.092753746997583e+145, 5.429903166906434e+197, -1.749233092180454e+144, -1.078320449134048e+198, -1.069098765672840e+83, -1.978573719725706e+200, 1.349666746163229e+00, -6.192512150208535e+214, 4.369693490053778e+199, 1.270543645994840e+228, 5.318918857255745e+157, -4.835160548529958e+189, -4.747731649063986e+211, -9.377761527883972e+218, -1.737717001388725e+259, -3.813837288643970e+169, -3.359266316968684e+155, -2.371442980023039e+229, 5.276179763693761e+190, 2.114900891319020e+02, -4.283944405799610e+209, 5.378374368985942e+161, -2.511934633137088e+01, -2.463841071042353e+01, -2.611936454204017e+01, -2.576424957727270e+01, -2.342312772554648e+01, -3.929700816357619e+144, -5.477230554847011e+164, 1.248604369835580e+203, -7.319998293163580e+164, 2.873693092965007e+201, -3.984767221933825e+164, 2.871731539774049e+00, -8.063652407411108e-01, -5.167420871985476e+185, -7.438199097521290e-01, -1.836200565733664e+51, 1.703729665366081e+147, -2.109328725975528e+234, -5.806233392242340e-01, -6.617962553565229e+151, 1.075936774496741e+267, -6.894857902488168e-01, -4.770822215369612e-01, 6.057234245224351e+151, 1.793869667416777e+222, -6.113356062598222e+211, 2.715384183865995e+00, -2.560808392033462e+192, -1.404424362720776e+149, -3.980018848214542e+227, 1.261198696345811e+213, -3.619635675134614e+144, -4.663998842566265e+211, 5.522896302687701e+183, -1.270413491315710e+231, 2.268219986616693e+00, -1.505293037340970e+232, -9.620078846982240e-01, 2.673251518853979e+208, -3.879251388644835e-01, -1.055353625467537e+161, -1.229973668236003e+183, -3.029934948426877e-01, 1.382348846840014e+240, 1.573461789413534e+240, -1.052049318791153e+238, -6.418914792424507e-01, -1.016567144578690e+237, 5.625039584887119e+240, -1.047045706223724e+250, -5.750645980086951e+35, -2.117347353697458e+167, 5.954372472506785e+214, 9.986652594947611e+238]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_csk_loc4_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk_loc4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.066223605121285e-06, -1.066216596200574e-06, -1.066178516008095e-06, -1.066293361270334e-06, -1.066219965594244e-06, -1.066219965594244e-06, 8.678272995668534e-07, 4.774541180715745e-07, -1.014354630508093e-05, "nan", 6.670062283054453e-07, -2.472355334932013e-04, 1.880069046200667e-01, -3.521068493704325e-02, -3.818061351843336e-02, -3.729284375174069e-02, -3.514182064063837e-02, -3.514182064063837e-02, -1.714505893405703e+00, -1.647803711390635e+00, 6.251570462316473e-02, -4.499104442777782e+00, -1.694125675833426e+00, -1.694125675833426e+00, -9.841348747844100e+03, -8.563482231794515e+03, -1.275285290834196e+02, -8.913674748409093e+04, -8.836880840331354e+03, -8.836880840331354e+03, -7.375225004317645e-05, -7.371291324254355e-05, -7.374809836833034e-05, -7.371751349258339e-05, -7.373225297122965e-05, -7.373225297122965e-05, 8.207899042909366e-03, 8.010818943216192e-03, 8.311346263020034e-03, 8.157902865266574e-03, 7.932087164449085e-03, -1.356887620917998e-03, -5.319354598546049e-02, -4.150206494903226e-02, -6.225828582121706e-02, -5.486690168006797e-02, -4.750477929046341e-02, -4.743366556821017e-02, 6.875369006182983e+01, -1.678177047213094e+00, 7.146662952802130e+01, -1.474817918412267e-03, -7.337103557516324e+00, -7.337103557516324e+00, 6.017573369841262e+05, -6.651889846709739e+04, -1.579869780302338e+05, 2.853120834250014e+02, 5.329512041286373e+05, -8.793630043642275e+04, -4.841488087911890e-02, -4.919864159513981e-02, -4.891574718266343e-02, -4.869897669896317e-02, -4.880731003106816e-02, -4.880731003106816e-02, -5.339236666285022e-02, -8.178569601370621e-02, -7.176223236636087e-02, -6.387962615585639e-02, -6.774335659304102e-02, -6.753176186976900e-02, -3.600523589606962e-02, 5.110434322439930e+00, -5.034765251545205e-01, 1.275913921563624e+00, -3.482603739330055e-01, -3.482603739330056e-01, 5.282755362948723e-01, -1.605187871500873e+02, -6.469846192883088e+01, -2.856684891979313e-01, 1.285807775939575e+02, -2.121582924157989e+01, -6.113368241862037e+03, -3.241357726446034e+06, -4.728419139774357e+05, -2.443350684108390e+01, -1.432564802708559e+05, -1.432564802708565e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_csk_loc4_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk_loc4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [2.171055245937357e-01, 2.171055463630997e-01, 2.171056119212732e-01, 2.171052541399219e-01, 2.171055363321607e-01, 2.171055363321607e-01, 1.862654503345627e-01, 1.863140045157376e-01, 1.876354253842002e-01, "nan", 1.862904270990129e-01, 2.171250000000000e-01, 2.166896395554398e-02, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 9.209082295089296e-02, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000001e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000001e-01, 2.171250000000001e-01, 2.171250000000001e-01, 4.995708169731963e-03, 5.582565190786904e-03, 4.274629178546936e-03, 4.663135528747134e-03, 6.605779164676849e-03, 2.171250000000001e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.170789654442066e-01, 2.123800731603688e-08, 2.171250000000000e-01, 2.795164800268502e-08, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, -3.359423822025399e-06, 2.171250000000000e-01, 2.171250000000000e-01, 4.046494790649968e-10, -1.373898846594674e-06, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000001e-01, 2.171250000000001e-01, 2.171250000000000e-01, 2.170289480973884e-01, 2.171250000000000e-01, 5.060438213916835e-05, 2.171250000000000e-01, 2.353654572834392e-02, 2.171250000000000e-01, 2.171250000000000e-01, 4.063295048227544e-02, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 8.245058781834092e-09, 2.171250000000001e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_csk_loc4_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk_loc4", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
