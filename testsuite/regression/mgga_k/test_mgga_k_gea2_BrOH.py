
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_k_gea2_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_gea2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.174556074032927e+03, 2.174563864369937e+03, 2.174610446148311e+03, 2.174482361036222e+03, 2.174560076020624e+03, 2.174560076020624e+03, 5.871850545877722e+01, 5.871811068177015e+01, 5.871211140005142e+01, "nan", 5.871880267784184e+01, 5.181366170830966e+158, 2.274838431592477e+00, 3.127163210582629e+247, 6.317117475825837e+160, 3.542966774554630e+213, 1.449211165307237e+160, 3.338611122176177e+213, 2.426664661759168e+98, 1.745579737919651e+215, 3.159782043993545e+00, 2.266959352016334e+230, 1.947316365402886e+215, 1.615865045015588e+244, 9.932124383602412e+173, 6.747160968894717e+204, 9.316309724994226e+226, 3.474763938672119e+234, 3.041611628292622e+275, 2.541877924632235e+185, 1.803786241054055e+171, 3.628852446099623e+244, 2.373172465009275e+206, 1.273919311307969e+02, 2.159612586794027e+225, 3.001332121895265e+177, 2.036719753406924e+01, 2.058596055962299e+01, 2.034904978921623e+01, 2.051862045993555e+01, 2.054115827997623e+01, 3.448861069320511e+159, 1.696412366884657e+180, 2.326219773300338e+218, 2.798258143781058e+180, 3.070762348049595e+218, 1.514990091094690e+180, 1.732768318952765e+00, 1.323666918398366e-01, 1.194253356703957e+201, 1.243278442314280e-01, 9.461308698134131e+66, 3.342414612704127e+162, 7.626171044449555e+249, 6.461177827573326e-02, 1.540178070712019e+167, 6.169419709177583e+282, 9.317213172018106e-02, 5.311745367238958e-02, 1.450587250346724e+167, 6.830644490704589e+237, 7.616168923459633e+226, 1.631035265615234e+00, 1.567065906859683e+209, 1.868625229398839e+164, 4.515532498415675e+242, 3.291394740449476e+228, 1.713999733762403e+161, 3.449023572287597e+228, 5.711222962981360e+199, 1.961142687737515e+246, 1.369026497333944e+00, 1.742034427970755e+247, 3.488731465589179e-01, 2.956198851660998e+224, 6.285469442896220e-01, 1.192724999519527e+176, 6.807969210733600e+198, 1.037342013505271e+00, 5.955521252940024e+255, 2.410738794842507e+255, 1.738357220445863e+253, 9.949805596606340e-02, 4.021362109906511e+253, 1.160136577980278e+256, 1.294296436082142e+265, 6.870258282628677e+50, 8.435842618046749e+182, 1.047977857974102e+230, 2.717920120094189e+257]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_k_gea2_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_gea2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.340513684108847e+03, 3.340532650321271e+03, 3.340625231246267e+03, 3.340314494262643e+03, 3.340523619638456e+03, 3.340523619638456e+03, 8.746152952431265e+01, 8.746253787743368e+01, 8.749743867029413e+01, "nan", 8.746279331068172e+01, -1.316962436467165e+143, 3.096415771298540e+00, -2.494282055327033e+231, 8.299854120978226e+144, -6.408686171031664e+197, 5.197968278733903e+144, -1.176109242294122e+198, 6.935739266185937e+82, -6.149245794688201e+198, 4.555460297355385e+00, -5.800562124442227e+213, 1.307955082119120e+200, 4.704855100016343e+228, 5.645479309751429e+157, -1.325307271412593e+189, -1.949160291979774e+210, -1.751697593574262e+218, -6.386264671535064e+259, 3.978090296743076e+169, 6.909216933344034e+155, -3.171159607480551e+227, 1.048090425671991e+191, 2.001393922111266e+02, 5.835255817693752e+209, 1.522780460241056e+162, 2.583074346372236e+01, 2.626527399135601e+01, 2.558609985152638e+01, 2.592456471890540e+01, 2.644147686151582e+01, -2.463003996618649e+144, 1.773600485033962e+164, 5.267053627659431e+202, -3.234975488658007e+161, 6.703440998808902e+202, 2.932315877759859e+164, 2.657338512602889e+00, -1.831196517486290e-02, 6.162447253388346e+185, -1.317811256702435e-02, 1.918252260867140e+51, 1.437433329415714e+147, 3.338543103253939e+233, -6.434322221880796e-02, -1.361468961431250e+151, -2.743818087593203e+266, -4.900520116696190e-02, -5.282625604538312e-02, 4.640795179769941e+151, 1.967228473367239e+222, -3.122436800053677e+211, 2.674239074603077e+00, 4.026600784594725e+193, -4.187135965402024e+148, -1.257653464775094e+227, -4.072081229577106e+212, 8.040345926040108e+145, -1.198889063917739e+212, 2.338835974807258e+184, 1.542652750496364e+230, 2.096124393693765e+00, -3.733847458284233e+231, 2.961770284025223e-01, 1.048636933690380e+209, 8.585602003508596e-01, 3.753910196694660e+160, -2.099351260986807e+180, 1.448848717608963e+00, 2.303783204046766e+240, 2.181652063260440e+240, -5.667953976734618e+237, -2.436000058986356e-02, -4.135853172234205e+236, 3.032876596354003e+240, -8.067205242408658e+249, 2.418352077273521e+34, 2.578846171502577e+167, 3.787981578429515e+214, 5.334717242851125e+241]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_gea2_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_gea2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [7.184506981371736e-07, 7.184454664173825e-07, 7.184182744200265e-07, 7.185040248363264e-07, 7.184479713061683e-07, 7.184479713061683e-07, 1.664912415598492e-04, 1.664901933197832e-04, 1.664408301245251e-04, 1.664200446771928e-04, 1.664885747428965e-04, 1.664885747428965e-04, 2.363795624356835e-02, 2.371089894750388e-02, 2.571085085416388e-02, 2.511302609544826e-02, 2.366452568393155e-02, 2.366452568393155e-02, 1.154549423168824e+00, 1.109632128882582e+00, 1.373090384864063e-02, 3.029699961466519e+00, 1.140825370931600e+00, 1.140825370931600e+00, 6.627170873969095e+03, 5.766654701545124e+03, 8.587779736257205e+01, 6.002474578053259e+04, 5.950761508640642e+03, 5.950761508640642e+03, 4.966481484388984e-05, 4.963832541585422e-05, 4.966201910325279e-05, 4.964142322732890e-05, 4.965134880217483e-05, 4.965134880217483e-05, 9.371078035390106e-04, 9.175757456847093e-04, 9.451609734595366e-04, 9.296949858735887e-04, 9.137290376552178e-04, 9.137290376552178e-04, 3.582056968717878e-02, 2.794751848419681e-02, 4.192477159677917e-02, 3.694740853876629e-02, 3.198975036394842e-02, 3.198975036394842e-02, 7.639299766288211e+00, 1.130085553678851e+00, 7.940737805149471e+00, 9.931433794021999e-04, 4.940810476441970e+00, 4.940810476441970e+00, 6.686072115148074e+04, 4.479387102161440e+04, 1.063885373940969e+05, 3.170134267160714e+01, 5.921636393025099e+04, 5.921636393025099e+04, 3.260261338661206e-02, 3.313039838056553e-02, 3.293989709270265e-02, 3.279392370300548e-02, 3.286687544179671e-02, 3.286687544179671e-02, 3.595445566521901e-02, 5.507454277017253e-02, 4.832473560024300e-02, 4.301658326993696e-02, 4.561842194817578e-02, 4.561842194817577e-02, 2.424595009836338e-02, 5.679802546760833e-01, 3.390414310804853e-01, 1.622594852676255e-01, 2.345187703252563e-01, 2.345187703252563e-01, 7.506229171454361e-02, 1.080934593603282e+02, 4.356798783086254e+01, 1.923693529952399e-01, 1.428675369803360e+01, 1.428675369803359e+01, 4.116746290816190e+03, 2.182732475721234e+06, 3.184120632844686e+05, 1.645353996032586e+01, 9.646901028340461e+04, 9.646901028340503e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_gea2_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_gea2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_gea2_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_gea2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
