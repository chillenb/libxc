
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_k_gea2_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_gea2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([5.018320639230516e+02, 5.018186151043225e+02, 5.017787884226061e+02, 5.019971063854517e+02, 5.018248079726245e+02, 5.018248079726245e+02, 8.331364762589480e+01, 8.330104673378113e+01, 8.292836297814478e+01, 8.310471122656732e+01, 8.331060720034790e+01, 8.331060720034790e+01, 6.024516630709454e+00, 6.045337007246419e+00, 6.625748086928353e+00, 6.363119515422673e+00, 6.031293405136220e+00, 6.031293405136220e+00, 6.189675084707820e-01, 6.043694212713436e-01, 1.141028121411902e+01, 9.794427453910084e-01, 6.143674597939707e-01, 6.143674597939704e-01, 5.998133885046762e-01, 5.978275472233344e-01, 8.650725908214896e-01, 8.912804348154230e-01, 5.868496828172696e-01, 5.868496828172696e-01, 1.473028978191027e+03, 3.537926797348542e+02, -6.566434647245890e+03, 2.037154319421063e+03, -5.425700952585123e+01, 2.184055227158985e+02, -2.425987063700827e+03, 6.847911140769708e+01, 4.147950550253872e+01, 4.196233006906567e+01, 4.072047928106871e+01, 2.448943604065951e+01, 3.804193631949980e+01, 1.334409033837889e+01, 2.390038303457154e+01, 2.111720850612655e+00, 2.543062507417824e+00, 3.387447758524575e+00, -1.945992502705485e+00, 4.999943177008743e+00, -1.491569556278573e+01, 2.528042667242411e+01, 6.713266715844345e-01, 4.527697354670586e-01, 3.740221954089434e+00, 2.358370640837607e+03, -2.289327830705027e+03, -1.450869300614961e+00, 1.594118800745210e+00, -1.602640617219249e+01, 1.995744148231601e+05, -7.057043373452818e+04, -1.344533729253199e+06, 1.965293833085642e+03, -5.516366453646186e+04, 2.554930317553545e+06, -9.364404347730746e+05, 1.763905903235075e+00, 1.764158902044818e+01, -7.844372012168711e-01, 2.581011044439544e+00, 3.941801078051012e+01, 4.671116164132632e+01, -5.420535388075568e+01, -1.174612619951695e+02, -1.690531883555095e+01, 2.511156134747196e+00, 1.660131026842935e+00, 1.739700577876423e+00, 4.549680224326260e+00, 1.202853650909617e+00, 8.815882224414776e-01, -7.431582333282949e+00, 6.163756099533778e-01, -4.538419974871770e+00, 1.817918178214577e+01, -9.613492451421045e+00, 1.699455640150661e-02, -3.541904596786746e-01, -1.287618661112583e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_k_gea2_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_gea2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([3.340513684108847e+03, 3.340532650321270e+03, 3.340625231246267e+03, 3.340314494262645e+03, 3.340523619638456e+03, 3.340523619638456e+03, 8.746152952431267e+01, 8.746253787743366e+01, 8.749743867029414e+01, 8.747435971358475e+01, 8.746279331068172e+01, 8.746279331068172e+01, 3.096415771298542e+00, 3.087019006893378e+00, 2.834983546710081e+00, 2.885264569153497e+00, 3.093003541797470e+00, 3.093003541797470e+00, 1.956242842511136e-01, 2.045055280864498e-01, 4.555460297355387e+00, 5.648681617323165e-02, 1.983316232902825e-01, 1.983316232902824e-01, -5.487843665018985e-02, -5.469618338569955e-02, -6.661484088022417e-02, -6.626142546197916e-02, -5.366638171982967e-02, -5.366638171982967e-02, 2.000452441837056e+02, 2.001520839798621e+02, 2.000563197898701e+02, 2.001393922111266e+02, 2.000998308469548e+02, 2.000998308469549e+02, 2.583074346372308e+01, 2.626527399135601e+01, 2.558609985152637e+01, 2.592456471890539e+01, 2.644147686151581e+01, 2.644147686151582e+01, 2.452361228665227e+00, 2.974641023065071e+00, 2.202341358446905e+00, 2.456691473376860e+00, 2.657338512602889e+00, 2.657338512602890e+00, -1.831196517486198e-02, 1.544923923327787e-01, -1.317811256702974e-02, 2.751850188428747e+01, 1.862667428893451e-02, 1.862667428893450e-02, -6.434322221880796e-02, -6.420459623886157e-02, -3.795940991657949e-02, -4.900520116696302e-02, -5.282625604538242e-02, -5.282625604539341e-02, 2.702103480116423e+00, 2.658709202199523e+00, 2.674239074311045e+00, 2.686250008046203e+00, 2.680238666139655e+00, 2.680238665482643e+00, 2.533713965198457e+00, 1.790240559388913e+00, 1.998388113147999e+00, 2.198357725541780e+00, 2.096124393693766e+00, 2.096124393693764e+00, 3.267345293716192e+00, 2.961770284024934e-01, 4.704408252007258e-01, 8.585602003508711e-01, 6.428487786096531e-01, 6.428487786096541e-01, 1.448848717608963e+00, -7.696580778215147e-02, -6.300362646055430e-02, 7.848744093006028e-01, -2.436000058986684e-02, -2.436000058986346e-02, -6.307223641415384e-02, -4.916684277996919e-02, -5.292791945381571e-02, -2.149491078971427e-02, -4.373992930516624e-02, -4.373992930516937e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_gea2_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_gea2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([7.184506981371736e-07, 7.184454664173825e-07, 7.184182744200265e-07, 7.185040248363264e-07, 7.184479713061683e-07, 7.184479713061683e-07, 1.664912415598492e-04, 1.664901933197832e-04, 1.664408301245251e-04, 1.664200446771928e-04, 1.664885747428965e-04, 1.664885747428965e-04, 2.363795624356835e-02, 2.371089894750388e-02, 2.571085085416388e-02, 2.511302609544826e-02, 2.366452568393155e-02, 2.366452568393155e-02, 1.154549423168824e+00, 1.109632128882582e+00, 1.373090384864063e-02, 3.029699961466519e+00, 1.140825370931600e+00, 1.140825370931600e+00, 6.627170873969095e+03, 5.766654701545124e+03, 8.587779736257205e+01, 6.002474578053259e+04, 5.950761508640642e+03, 5.950761508640642e+03, 4.966481484388984e-05, 4.963832541585422e-05, 4.966201910325279e-05, 4.964142322732890e-05, 4.965134880217483e-05, 4.965134880217483e-05, 9.371078035390106e-04, 9.175757456847093e-04, 9.451609734595366e-04, 9.296949858735887e-04, 9.137290376552178e-04, 9.137290376552178e-04, 3.582056968717878e-02, 2.794751848419681e-02, 4.192477159677917e-02, 3.694740853876629e-02, 3.198975036394842e-02, 3.198975036394842e-02, 7.639299766288211e+00, 1.130085553678851e+00, 7.940737805149471e+00, 9.931433794021999e-04, 4.940810476441970e+00, 4.940810476441970e+00, 6.686072115148074e+04, 4.479387102161440e+04, 1.063885373940969e+05, 3.170134267160714e+01, 5.921636393025099e+04, 5.921636393025099e+04, 3.260261338661206e-02, 3.313039838056553e-02, 3.293989709270265e-02, 3.279392370300548e-02, 3.286687544179671e-02, 3.286687544179671e-02, 3.595445566521901e-02, 5.507454277017253e-02, 4.832473560024300e-02, 4.301658326993696e-02, 4.561842194817578e-02, 4.561842194817577e-02, 2.424595009836338e-02, 5.679802546760833e-01, 3.390414310804853e-01, 1.622594852676255e-01, 2.345187703252563e-01, 2.345187703252563e-01, 7.506229171454361e-02, 1.080934593603282e+02, 4.356798783086254e+01, 1.923693529952399e-01, 1.428675369803360e+01, 1.428675369803359e+01, 4.116746290816190e+03, 2.182732475721234e+06, 3.184120632844686e+05, 1.645353996032586e+01, 9.646901028340461e+04, 9.646901028340503e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_gea2_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_gea2", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01, 1.666666666666667e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
