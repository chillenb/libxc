
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_mgga_k_csk_loc1_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk_loc1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([1.489851333963454e+03, 1.489832983674957e+03, 1.489795900977123e+03, 1.490067833271593e+03, 1.489919023514251e+03, 1.489919023514251e+03, 8.117593136830264e+01, 8.115940122560659e+01, 8.072218103859154e+01, 8.087441357873608e+01, 8.086142181680945e+01, 8.086142181680945e+01, 6.392088372293399e+00, 6.415763960758412e+00, 7.000361997424125e+00, 6.635875058084686e+00, 6.704898939877370e+00, 6.704898939877370e+00, 7.051660156742956e-01, 6.860101146140148e-01, 1.429971729204718e+01, 1.024007206786016e+00, 8.144242383226700e-01, 8.144242383226704e-01, 8.968384486250444e-01, 8.811983001304924e-01, 1.137655295732150e+00, 1.019570685237304e+00, 9.071649535185653e-01, 9.071649535185655e-01, 1.465472595858366e+03, 5.502997528219872e+02, 4.221699809905284e+01, 2.995815304682557e+03, 5.829666271127357e+01, 2.210555034041247e+02, 2.723880271149306e+01, 7.491719735376326e+01, 4.038525698885188e+01, 3.982452832054453e+01, 3.962037560669663e+01, 3.196716461469604e+01, 4.562583790081703e+01, 1.574864981918696e+01, 3.745997293191193e+01, 2.304601369710469e+00, 2.567716102855483e+00, 3.584159246317094e+00, 9.221096327178344e-01, 6.884759578010232e+00, 8.996862372219973e-01, 2.718488880456934e+01, 7.492861497463889e-01, 7.434825386315511e-01, 6.502355047299372e+00, 6.591661999351793e+03, 2.817185860649025e-01, 8.107352827054076e-01, 1.644692083852105e+00, 4.129761035154784e-01, 2.747938555988530e+05, 2.203762606516297e-01, 1.710070562735136e-01, 2.461317490616654e+03, 1.505866037851865e-01, 3.478018574182981e+06, 3.572912665591548e-02, 1.713935588360177e+00, 2.401028087618143e+01, 6.484671040908420e-01, 2.749214159135655e+00, 5.973397372837615e+01, 6.119918148708130e+01, 1.064853822461473e+00, 9.839637602239349e-01, 6.783783826022449e-01, 2.889431178224985e+00, 1.833087913692361e+00, 1.758801917045175e+00, 9.656308730768570e-01, 1.363115793276578e+00, 9.062617637943921e-01, 7.143743644467045e-01, 7.163861135314415e-01, 8.118648421750597e-01, 3.188777887592011e-01, 4.583026030928223e-01, 7.257588486112169e-01, 3.674669730408012e-01, 3.674669730149643e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_mgga_k_csk_loc1_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk_loc1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([7.956533035944730e+02, 7.956874966078453e+02, 7.957904607409921e+02, 7.952821886538501e+02, 7.955555124054599e+02, 7.955555124054599e+02, 9.641584384776334e+01, 9.641048900696947e+01, 9.625484437002419e+01, 9.622689210981144e+01, 9.625994784968596e+01, 9.625994784968596e+01, 3.761464907830803e+00, 3.757651975546667e+00, 3.682471343068822e+00, 3.737345965635614e+00, 3.720472429432903e+00, 3.720472429432903e+00, 1.641900852353727e-01, 1.856928772372402e-01, 5.060759758441279e+00, 2.570361903251245e-01, 2.762409431986566e-01, 2.762409431986571e-01, 1.206590416312048e-01, 1.174050271099900e-01, 1.607643802800405e-01, 1.264935084046107e-01, 1.122497511574913e-01, 1.122497511574912e-01, 2.116496220979236e+02, 2.116726526455947e+02, -3.854946738474440e+01, 2.116715556620357e+02, 1.477671544337367e+01, 2.116609881025570e+02, -2.708976516728668e+01, 3.380907252207393e+01, 2.642531717549513e+01, 2.474099568893733e+01, 2.984307878108419e+01, -4.598278565980047e+00, 2.742864651470260e+00, 3.114764311319393e+00, 2.365587985732866e+00, 2.454933542635654e+00, 2.816430906321719e+00, 2.816430906321720e+00, -9.213017774522105e-01, 3.918824228043361e-01, -8.995902498649849e-01, 2.822853185108152e+01, -6.626911930613942e-01, -7.244109631103054e-01, 1.101871118539643e-01, 1.166001956192000e-01, -2.817185860640749e-01, -8.106133805960798e-01, 6.821534310079466e-02, -4.129761034600500e-01, 2.639491436984349e+00, -2.203288381596377e-01, -1.710042977850591e-01, 2.636999824439741e+00, -1.504367546116434e-01, 2.636015478940544e+00, -3.572443461428107e-02, 1.009346211751698e+00, 2.144065987007189e+00, 1.190111693508380e-02, 2.205684478149801e+00, 2.205684478149820e+00, 3.428231472386682e+00, -1.063494608112904e+00, -9.824168795519505e-01, -6.412535480756656e-01, 8.267141291888327e-01, 8.267141291888319e-01, 1.676211114074181e+00, -9.656106125802559e-01, 1.712195719195131e-01, 9.215799935542406e-01, -7.142618375449060e-01, -6.954854274413922e-01, -8.118648345404810e-01, -3.188777887467907e-01, -4.583026030748604e-01, -7.247089265247770e-01, -3.674669727969457e-01, -3.674669728843670e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_csk_loc1_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk_loc1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([5.477974652507437e-06, 5.477922353328899e-06, 5.477689144405761e-06, 5.478467921411033e-06, 5.478059914638912e-06, 5.478059914638912e-06, -2.228170437341783e-04, -2.226676671147507e-04, -2.180536940554517e-04, -2.154862324990450e-04, -2.177997398621368e-04, -2.177997398621368e-04, -3.445025339451010e-02, -3.456445230125043e-02, -3.747154821060016e-02, -3.655372067844504e-02, -3.674637708045572e-02, -3.674637708045572e-02, 9.925309009313796e-01, 7.186709256197276e-01, -2.172903463950833e-02, -4.573325034448005e+00, -3.229874366910618e+00, -3.229874366910618e+00, -4.743672063494301e+04, -4.068151126847196e+04, -2.422499496422378e+02, -2.462567664530374e+05, -1.241141592272281e+05, -1.241141592272281e+05, -7.365580088314568e-05, -7.361524902557733e-05, 4.463371680359583e-04, -7.361798276333765e-05, 4.262593372010899e-04, -7.363532382973350e-05, 8.405634282971296e-03, -1.357194350871584e-03, 3.091159674701960e-04, 7.741770759963848e-04, -3.590440885684729e-04, 6.425501692481784e-03, -5.147064498040534e-02, -4.014649925333620e-02, -6.496940809307770e-02, -5.783913877351247e-02, -4.905934634633084e-02, -4.905934634633084e-02, 8.281593402591102e+01, -1.992003863966729e+00, 1.046003295788277e+02, -1.469649963077993e-03, 4.778817702494461e+01, 5.083023339018573e+01, -5.361273967507604e+05, -2.635845550857157e+05, 3.573149841128374e+06, 3.437911905436839e+02, -3.372168773658643e+05, 2.043738650701817e+06, -5.072812337927218e-02, 3.127951632198828e-01, 3.108978161436884e-01, -5.104218030221695e-02, 3.101217327786374e-01, -5.117008596656047e-02, 3.338635972178314e-01, 2.206827724475339e-01, -7.584074800241111e-02, 3.903831754444075e-01, -7.107784851001094e-02, -7.107784851001094e-02, -3.484221486319211e-02, 5.986075298902882e+00, 3.455973295823424e+00, 1.498841915352008e+00, -3.762401048661960e-01, -3.762401048661959e-01, -8.846478094815012e-02, 1.674443063863478e+03, -1.090293323885151e+02, -2.758392129337573e-01, 1.665276629503685e+02, 1.636671053929591e+02, 1.022742173531873e+05, 8.363882291857880e+07, 9.043637243185926e+06, 2.010638428917366e+02, 2.579643228121628e+06, 2.579643228130790e+06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_mgga_k_csk_loc1_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("mgga_k_csk_loc1", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = numpy.asarray([2.846766226468542e-02, 2.846784869104930e-02, 2.846829013427400e-02, 2.846550627257944e-02, 2.846702080654307e-02, 2.846702080654307e-02, 2.140911778366740e-01, 2.140727751813498e-01, 2.135048609199452e-01, 2.131902734652375e-01, 2.134692096962765e-01, 2.134692096962765e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 1.711207648418577e-01, 1.748198568672428e-01, 2.171250000000001e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000001e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.061706055168033e-05, 2.171250000000000e-01, 8.358818517091443e-03, 2.171250000000000e-01, 1.699923141465692e-06, 2.171250000000001e-01, 1.796279031563029e-01, 1.691506853153771e-01, 1.944921360342705e-01, 4.107922067762337e-02, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000001e-01, 2.171250000000000e-01, 2.171250000000000e-01, 9.413104641669861e-06, 2.171250000000000e-01, 1.998008035332162e-07, 2.171250000000000e-01, 1.257134322437755e-02, 1.507610366205933e-03, 2.171250000000000e-01, 2.171250000000000e-01, 2.315954185147271e-17, 1.446163328571675e-06, 2.171250000000001e-01, 3.566535271439517e-14, 2.171250000000000e-01, 2.143193717385663e-11, 7.193123507359846e-14, 2.171250000000000e-01, 2.115602257269871e-10, 2.171250000000000e-01, 2.288524301069989e-13, 1.084451546982938e-01, 2.171250000000001e-01, 5.908732358992294e-03, 2.171250000000000e-01, 2.171250000000000e-01, 2.171250000000000e-01, 8.951442654815654e-07, 5.593469896944483e-07, 1.048780280219338e-04, 2.171250000000000e-01, 2.171250000000000e-01, 2.107496537192300e-01, 3.105849714112090e-07, 2.171250000000000e-01, 2.170841842648028e-01, 5.032639241675772e-07, 3.201955574006670e-03, 1.233680599967622e-11, 2.366219201505875e-13, 2.708878390863727e-14, 4.182624002963710e-05, 9.301111914301654e-13, 2.686522452972122e-13])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
