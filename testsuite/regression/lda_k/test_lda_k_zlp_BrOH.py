
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_k_zlp_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_k_zlp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [3.166344291658919e+03, 3.166358681119268e+03, 3.166433473421863e+03, 3.166197630110164e+03, 3.166351791585936e+03, 3.166351791585936e+03, 9.555960957485183e+01, 9.556000391305832e+01, 9.557857853285924e+01, 9.558640250205100e+01, 9.556061281474686e+01, 9.556061281474686e+01, 3.622212189651362e+00, 3.614812954229206e+00, 3.425660203518647e+00, 3.479572468853283e+00, 3.619512622153792e+00, 3.619512622153792e+00, 2.730211313041846e-01, 2.803288519373064e-01, 5.193807525530485e+00, 1.436285136880173e-01, 2.752030592328381e-01, 2.752030592328381e-01, 8.543645389994671e-04, 9.373628705988168e-04, 1.547506533463561e-02, 1.966518258237497e-04, 9.179305367768151e-04, 9.179305367768151e-04, 2.106590005179739e+02, 2.107322179421294e+02, 2.106667249799484e+02, 2.107236521964542e+02, 2.106962129532363e+02, 2.106962129532363e+02, 3.067639107924162e+01, 3.110548819883260e+01, 3.050375841565056e+01, 3.083748334076510e+01, 3.119178394783704e+01, 3.119178394783704e+01, 2.748757062852505e+00, 3.241140716776981e+00, 2.476031410450727e+00, 2.692802288052000e+00, 2.963131028044593e+00, 2.963131028044593e+00, 7.757847194874110e-02, 2.769412592988738e-01, 7.560423993671903e-02, 2.952354479685674e+01, 1.037034535057017e-01, 1.037034535057017e-01, 1.830091234965609e-04, 2.390196653025161e-04, 1.342758064699728e-04, 3.006229873913893e-02, 1.984373720292681e-04, 1.984373720292681e-04, 2.926032398295274e+00, 2.895000937979149e+00, 2.906106209158845e+00, 2.914688256456371e+00, 2.910391365572384e+00, 2.910391365572384e+00, 2.741956308106986e+00, 2.065671028302759e+00, 2.253088945022148e+00, 2.434115195385475e+00, 2.341005648334486e+00, 2.341005648334486e+00, 3.561672218965970e+00, 4.377623923961594e-01, 6.170609067727499e-01, 1.007355166395602e+00, 7.885046201328001e-01, 7.885046201328000e-01, 1.681587187346772e+00, 1.327541746392111e-02, 2.432279538334236e-02, 8.995502029836043e-01, 5.112504637998087e-02, 5.112504637998087e-02, 1.173477495761162e-03, 1.791804566762344e-05, 6.465698525450687e-05, 4.653495013100458e-02, 1.433290675756637e-04, 1.433290675756633e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_k_zlp_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_k_zlp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [5.142378502879241e+03, 5.142401647638920e+03, 5.142521947463193e+03, 5.142142604704900e+03, 5.142390566153795e+03, 5.142390566153795e+03, 1.581917474636747e+02, 1.581923985171073e+02, 1.582230652528195e+02, 1.582359826355652e+02, 1.581934038154028e+02, 1.581934038154028e+02, 6.026172285072823e+00, 6.013871553931883e+00, 5.699408808678644e+00, 5.789038678087656e+00, 6.021684438753691e+00, 6.021684438753691e+00, 4.547600553403205e-01, 4.669290152004716e-01, 8.638293008422103e+00, 2.392709753938330e-01, 4.583934569876805e-01, 4.583934569876805e-01, 1.423872352849753e-03, 1.562193057640081e-03, 2.578728460016596e-02, 3.277448956932666e-04, 1.529808176612274e-03, 1.529808176612274e-03, 3.478735195079084e+02, 3.479939930060982e+02, 3.478862295107650e+02, 3.479798987576876e+02, 3.479347496617426e+02, 3.479347496617426e+02, 5.090773116618287e+01, 5.161857761460063e+01, 5.062173950289765e+01, 5.117460095472030e+01, 5.176153312545242e+01, 5.176153312545242e+01, 4.573920568480081e+00, 5.392631668250895e+00, 4.120387609443037e+00, 4.480873311667614e+00, 4.930387035796999e+00, 4.930387035796999e+00, 1.292519654234815e-01, 4.612879441714295e-01, 1.259632286100680e-01, 4.899779608300071e+01, 1.727701489833911e-01, 1.727701489833911e-01, 3.050078660216868e-04, 3.983552943491553e-04, 2.237883291140031e-04, 5.009216144682458e-02, 3.307206984277246e-04, 3.307206984277246e-04, 4.868700305455624e+00, 4.817101345317262e+00, 4.835567196405236e+00, 4.849837383118795e+00, 4.842692538792175e+00, 4.842692538792175e+00, 4.562611681057432e+00, 3.437887363306234e+00, 3.749609064646837e+00, 4.050678541815351e+00, 3.895828180261394e+00, 3.895828180261394e+00, 5.925527881703661e+00, 7.290643480477760e-01, 1.027554802786986e+00, 1.677158003733345e+00, 1.312926870687816e+00, 1.312926870687816e+00, 2.798986838935619e+00, 2.212209422128588e-02, 4.052938586876023e-02, 1.497745737239548e+00, 8.518339641423422e-02, 8.518339641423422e-02, 1.955687306561896e-03, 2.986315940984227e-05, 1.077600235004656e-04, 7.753639474233302e-02, 2.388766322396904e-04, 2.388766322396897e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
