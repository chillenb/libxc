
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_k_lp_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_k_lp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([2.138297638194435e+03, 2.138308018903913e+03, 2.138361974936008e+03, 2.138191835246950e+03, 2.138303048720868e+03, 2.138303048720868e+03, 5.667678528840705e+01, 5.667702318355924e+01, 5.668822885019954e+01, 5.669294889727956e+01, 5.667739051996147e+01, 5.667739051996147e+01, 2.082537613443067e+00, 2.078264362923315e+00, 1.969042866696697e+00, 2.000169367218873e+00, 2.080978536681378e+00, 2.080978536681378e+00, 1.558563320505294e-01, 1.600344401871688e-01, 2.991346483664778e+00, 8.192184463508136e-02, 1.571037999717669e-01, 1.571037999717669e-01, 4.861616433198622e-04, 5.333965129074215e-04, 8.812088952258011e-03, 1.118869024594746e-04, 5.223373806589681e-04, 5.223373806589681e-04, 1.269502586006883e+02, 1.269954191453039e+02, 1.269550230286259e+02, 1.269901357625577e+02, 1.269732111857975e+02, 1.269732111857975e+02, 1.791182211032596e+01, 1.816511647058923e+01, 1.780993289323255e+01, 1.800690795289108e+01, 1.821606298360750e+01, 1.821606298360750e+01, 1.578499606582965e+00, 1.862532968879852e+00, 1.421299708068918e+00, 1.546239684062393e+00, 1.702128080035225e+00, 1.702128080035225e+00, 4.422119104750832e-02, 1.580975918846612e-01, 4.309486912584340e-02, 1.723156949198637e+01, 5.912901897381592e-02, 5.912901897381592e-02, 1.041243010922642e-04, 1.359942063612841e-04, 7.639581671641839e-05, 1.712436065638076e-02, 1.129028692888659e-04, 1.129028692888659e-04, 1.680729647808157e+00, 1.662831966795238e+00, 1.669236906506887e+00, 1.674186680346877e+00, 1.671708398806864e+00, 1.671708398806864e+00, 1.574578528465192e+00, 1.184946848219817e+00, 1.292864903092876e+00, 1.397147299196228e+00, 1.343505035180958e+00, 1.343505035180958e+00, 2.047575851781636e+00, 2.500982454325457e-01, 3.527748549884711e-01, 5.765797794985799e-01, 4.510393141349830e-01, 4.510393141349829e-01, 9.639435253226586e-01, 7.559037961437323e-03, 1.385333921519642e-02, 5.147253380179854e-01, 2.913245596115741e-02, 2.913245596115741e-02, 6.677748653459532e-04, 1.019371444505985e-05, 3.678520057188221e-05, 2.651509801257992e-02, 8.154692485718320e-05, 8.154692485718295e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_k_lp_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_k_lp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([3.563829396990724e+03, 3.563846698173189e+03, 3.563936624893347e+03, 3.563653058744917e+03, 3.563838414534780e+03, 3.563838414534780e+03, 9.446130881401174e+01, 9.446170530593206e+01, 9.448038141699924e+01, 9.448824816213261e+01, 9.446231753326911e+01, 9.446231753326911e+01, 3.470896022405112e+00, 3.463773938205525e+00, 3.281738111161161e+00, 3.333615612031455e+00, 3.468297561135630e+00, 3.468297561135630e+00, 2.597605534175491e-01, 2.667240669786147e-01, 4.985577472774630e+00, 1.365364077251356e-01, 2.618396666196116e-01, 2.618396666196116e-01, 8.102694055331037e-04, 8.889941881790360e-04, 1.468681492043002e-02, 1.864781707657911e-04, 8.705623010982803e-04, 8.705623010982803e-04, 2.115837643344805e+02, 2.116590319088399e+02, 2.115917050477099e+02, 2.116502262709296e+02, 2.116220186429959e+02, 2.116220186429959e+02, 2.985303685054327e+01, 3.027519411764871e+01, 2.968322148872091e+01, 3.001151325481846e+01, 3.036010497267917e+01, 3.036010497267917e+01, 2.630832677638275e+00, 3.104221614799753e+00, 2.368832846781531e+00, 2.577066140103989e+00, 2.836880133392042e+00, 2.836880133392042e+00, 7.370198507918055e-02, 2.634959864744353e-01, 7.182478187640567e-02, 2.871928248664396e+01, 9.854836495635988e-02, 9.854836495635988e-02, 1.735405018204403e-04, 2.266570106021402e-04, 1.273263611940307e-04, 2.854060109396793e-02, 1.881714488147766e-04, 1.881714488147766e-04, 2.801216079680262e+00, 2.771386611325397e+00, 2.782061510844812e+00, 2.790311133911462e+00, 2.786180664678107e+00, 2.786180664678107e+00, 2.624297547441987e+00, 1.974911413699695e+00, 2.154774838488128e+00, 2.328578831993713e+00, 2.239175058634930e+00, 2.239175058634930e+00, 3.412626419636060e+00, 4.168304090542429e-01, 5.879580916474518e-01, 9.609662991642998e-01, 7.517321902249717e-01, 7.517321902249716e-01, 1.606572542204431e+00, 1.259839660239554e-02, 2.308889869199403e-02, 8.578755633633091e-01, 4.855409326859569e-02, 4.855409326859569e-02, 1.112958108909922e-03, 1.698952407509974e-05, 6.130866761980368e-05, 4.419183002096654e-02, 1.359115414286387e-04, 1.359115414286383e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
