
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_k_tf_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_k_tf", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([2.068257322189938e+03, 2.068268858419211e+03, 2.068323706605842e+03, 2.068151998011354e+03, 2.068241463079995e+03, 2.068241463079995e+03, 5.482257443525845e+01, 5.482281109762017e+01, 5.483096815749016e+01, 5.483760822978424e+01, 5.482551090209066e+01, 5.482551090209066e+01, 2.039598926638185e+00, 2.035124215377443e+00, 1.928513753992698e+00, 1.960556560526588e+00, 1.964083772552801e+00, 1.964083772552801e+00, 1.362305779157170e-01, 1.404628752972957e-01, 2.776918305958254e+00, 7.839321159453033e-02, 1.289772706903346e-01, 1.289772706903345e-01, 1.655423200111201e-04, 1.836313975754448e-04, 5.577312103440501e-03, 5.498264599117754e-05, 1.101248932918689e-04, 1.101248932918689e-04, 1.228928511302449e+02, 1.229379788095977e+02, 1.228950988413072e+02, 1.229349349163124e+02, 1.229156337003038e+02, 1.229156337003038e+02, 1.736303458540612e+01, 1.761583515554057e+01, 1.717969877515380e+01, 1.740183820200764e+01, 1.759235094786699e+01, 1.759235094786699e+01, 1.560613290437629e+00, 1.841759353157104e+00, 1.338333569497255e+00, 1.445757399817720e+00, 1.616570079783531e+00, 1.616570079783531e+00, 3.778333264836042e-02, 1.364011068940270e-01, 3.244379389222534e-02, 1.670534300090884e+01, 5.224369262488246e-02, 5.224369262488246e-02, 3.278091911364585e-05, 5.254205185741399e-05, 3.083769339367224e-05, 1.462728032205214e-02, 4.946644215985892e-05, 4.946644215985894e-05, 1.575820609356038e+00, 1.557794459862446e+00, 1.564125948299155e+00, 1.569350090295141e+00, 1.566734079330691e+00, 1.566734079330691e+00, 1.491540775292652e+00, 1.099124983687432e+00, 1.205239802360439e+00, 1.315305779928378e+00, 1.258488275169513e+00, 1.258488275169513e+00, 2.024240745098554e+00, 2.177361383630930e-01, 3.140616170302125e-01, 5.478877307581700e-01, 4.143378129539956e-01, 4.143378129539955e-01, 9.316283696185153e-01, 5.090804637259391e-03, 9.474498993304719e-03, 5.092889254025847e-01, 2.380198397310413e-02, 2.380198397310414e-02, 3.287389836061587e-04, 3.753238402887727e-06, 1.661473160759285e-05, 2.091849299475440e-02, 4.161717957268121e-05, 4.161717957268113e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_k_tf_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_k_tf", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([3.447099975836842e+03, 3.447091098112471e+03, 3.447122249128440e+03, 3.447107278886837e+03, 3.447197902062771e+03, 3.447214453230437e+03, 3.446946252494306e+03, 3.446893740276874e+03, 3.447113038116283e+03, 3.447025170470524e+03, 3.447113038116283e+03, 3.447025170470524e+03, 9.137220404650010e+01, 9.136971068666502e+01, 9.137277538004209e+01, 9.136992821215266e+01, 9.138306552152852e+01, 9.138682822057751e+01, 9.139473101016800e+01, 9.139729636844164e+01, 9.134164880617405e+01, 9.141001583684380e+01, 9.134164880617405e+01, 9.141001583684380e+01, 3.385804384311088e+00, 3.412699113099199e+00, 3.375273912375394e+00, 3.408233262822531e+00, 3.236176196379112e+00, 3.191742258509894e+00, 3.260500262607086e+00, 3.274642367118542e+00, 3.465246331300447e+00, 3.040095653806098e+00, 3.465246331300447e+00, 3.040095653806098e+00, 2.179153657918411e-01, 2.351983320360239e-01, 2.233188348302286e-01, 2.435737257171619e-01, 4.467907006446222e+00, 4.773350853633469e+00, 1.288283909819096e-01, 1.324087161087814e-01, 2.375948853701311e-01, 6.838284251009388e-02, 2.375948853701310e-01, 6.838284251009391e-02, 2.577466766506430e-04, 2.910365825316134e-04, 2.830196249755988e-04, 3.247880219153455e-04, 8.750531586235677e-03, 9.758303376212233e-03, 9.313798290862348e-05, 9.005993806333629e-05, 2.051237132219190e-04, 6.642575752139358e-05, 2.051237132219190e-04, 6.642575752139358e-05, 2.048704694001139e+02, 2.047723324351115e+02, 2.049469942421596e+02, 2.048462312920054e+02, 2.048751290221585e+02, 2.047751638577755e+02, 2.049407870818110e+02, 2.048422937959128e+02, 2.049093482693008e+02, 2.048093941548226e+02, 2.049093482693008e+02, 2.048093941548226e+02, 2.893985319787927e+01, 2.893692853178785e+01, 2.936771306855293e+01, 2.935173092493287e+01, 2.858322298854618e+01, 2.868218307689961e+01, 2.895071180546856e+01, 2.905513356583690e+01, 2.944842065718729e+01, 2.919105483339249e+01, 2.944842065718729e+01, 2.919105483339249e+01, 2.607889976479511e+00, 2.594099487198713e+00, 3.068204753443744e+00, 3.070991193361891e+00, 2.145868983479734e+00, 2.306549578311876e+00, 2.327137199062209e+00, 2.484352090997287e+00, 2.820870222600959e+00, 2.546715428686843e+00, 2.820870222600959e+00, 2.546715428686843e+00, 6.236614708964903e-02, 6.356128178059381e-02, 2.261950694223920e-01, 2.284583864875150e-01, 5.103649516265246e-02, 5.666826778133637e-02, 2.785474131546730e+01, 2.782971848753388e+01, 8.165380506755690e-02, 9.163129361329019e-02, 8.165380506755690e-02, 9.163129361329019e-02, 5.241659922745897e-05, 5.661121217158015e-05, 8.622556037246842e-05, 8.885536648254848e-05, 4.821429187182967e-05, 5.407501723032954e-05, 2.422799799463903e-02, 2.452685522184309e-02, 5.029481593087743e-05, 9.485645919142681e-05, 5.029481593087743e-05, 9.485645919142684e-05, 2.616176224830498e+00, 2.636441857230798e+00, 2.586147312090236e+00, 2.606382602798366e+00, 2.596662044030066e+00, 2.616972435063782e+00, 2.605428916768840e+00, 2.625621136532640e+00, 2.601039895058819e+00, 2.621289262640157e+00, 2.601039895058819e+00, 2.621289262640157e+00, 2.477656748457466e+00, 2.494064611444406e+00, 1.823904776324347e+00, 1.839742472190058e+00, 1.999779262307544e+00, 2.017568586461500e+00, 2.184441116991121e+00, 2.199830455448357e+00, 2.089660311156722e+00, 2.105214100867149e+00, 2.089660311156722e+00, 2.105214100867149e+00, 3.368228093190802e+00, 3.379214225864742e+00, 3.607804177804929e-01, 3.649704250871391e-01, 5.181351878707496e-01, 5.285805220331530e-01, 9.080697595727624e-01, 9.181393921128619e-01, 6.908065428207422e-01, 6.903192424591670e-01, 6.908065428207421e-01, 6.903192424591669e-01, 1.541949675608712e+00, 1.563258878803660e+00, 8.426231037616800e-03, 8.541934331882876e-03, 1.524631282658521e-02, 1.628413395739238e-02, 8.358310282454886e-01, 8.612286384734354e-01, 3.734927515391699e-02, 4.164128683727972e-02, 3.734927515391701e-02, 4.164128683727973e-02, 5.273924921003548e-04, 5.663262906312630e-04, 6.241067746297442e-06, 6.269629123632286e-06, 2.583978737078527e-05, 2.923006969410206e-05, 3.428513713581555e-02, 3.541567032731691e-02, 4.512507681353008e-05, 7.968960989127172e-05, 4.512507681352998e-05, 7.968960989127158e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
