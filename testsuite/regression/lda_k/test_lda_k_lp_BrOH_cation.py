
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_k_lp_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_k_lp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([2.138407408544677e+03, 2.138419336053832e+03, 2.138476044553001e+03, 2.138298512034864e+03, 2.138391011533613e+03, 2.138391011533613e+03, 5.668201827213579e+01, 5.668226296148958e+01, 5.669069668831398e+01, 5.669756197515938e+01, 5.668505433653724e+01, 5.668505433653724e+01, 2.108776992296479e+00, 2.104150510084422e+00, 1.993924089992691e+00, 2.027053707931180e+00, 2.030700554117792e+00, 2.030700554117792e+00, 1.408511764758734e-01, 1.452270227396977e-01, 2.871104390481222e+00, 8.105211215974568e-02, 1.333518553126897e-01, 1.333518553126897e-01, 1.711570991392065e-04, 1.898597127174501e-04, 5.766480502114132e-03, 5.684751905262486e-05, 1.138600526897582e-04, 1.138600526897582e-04, 1.270610675444572e+02, 1.271077258411899e+02, 1.270633914922253e+02, 1.271045787067003e+02, 1.270846228419905e+02, 1.270846228419905e+02, 1.795194504759991e+01, 1.821331997723750e+01, 1.776239094778413e+01, 1.799206478527895e+01, 1.818903924430635e+01, 1.818903924430635e+01, 1.613545368045184e+00, 1.904227198082618e+00, 1.383726478041280e+00, 1.494793854497271e+00, 1.671400070944993e+00, 1.671400070944993e+00, 3.906484826037618e-02, 1.410274893682186e-01, 3.354420577946823e-02, 1.727194621876109e+01, 5.401566727707199e-02, 5.401566727707199e-02, 3.389276544047287e-05, 5.432414610434750e-05, 3.188363039161625e-05, 1.512340088051362e-02, 5.114421946152543e-05, 5.114421946152545e-05, 1.629268480972350e+00, 1.610630929826723e+00, 1.617177166426450e+00, 1.622578498179348e+00, 1.619873758702689e+00, 1.619873758702689e+00, 1.542130086915448e+00, 1.136404538650489e+00, 1.246118505076323e+00, 1.359917643768980e+00, 1.301173032154244e+00, 1.301173032154244e+00, 2.092897899867425e+00, 2.251212005334741e-01, 3.247137971622527e-01, 5.664707045559817e-01, 4.283911094403248e-01, 4.283911094403248e-01, 9.632268607144224e-01, 5.263471926328009e-03, 9.795850169204087e-03, 5.265627248052023e-01, 2.460928740349133e-02, 2.460928740349134e-02, 3.398889830964173e-04, 3.880538809489802e-06, 1.717826151488667e-05, 2.162799566361925e-02, 4.302872962960211e-05, 4.302872962960203e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_k_lp_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_k_lp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([3.564016936982823e+03, 3.564007758148371e+03, 3.564039965728452e+03, 3.564024487733906e+03, 3.564118184620036e+03, 3.564135297161681e+03, 3.563857999731150e+03, 3.563803706431379e+03, 3.564030442301930e+03, 3.563939594406628e+03, 3.564030442301930e+03, 3.563939594406628e+03, 9.447131939134414e+01, 9.446874146301465e+01, 9.447191010308286e+01, 9.446896636641972e+01, 9.448254926028707e+01, 9.448643958062399e+01, 9.449461041296054e+01, 9.449726278173453e+01, 9.443972779411776e+01, 9.451041366251329e+01, 9.443972779411776e+01, 9.451041366251329e+01, 3.500642353161207e+00, 3.528449283505058e+00, 3.489754714103357e+00, 3.523831962819368e+00, 3.345939153434559e+00, 3.299998128151621e+00, 3.371088230809881e+00, 3.385709999936601e+00, 3.582778771182628e+00, 3.143208052032908e+00, 3.582778771182628e+00, 3.143208052032908e+00, 2.253065069058183e-01, 2.431756678954458e-01, 2.308932480233572e-01, 2.518351338647286e-01, 4.619447174569638e+00, 4.935250908810987e+00, 1.331979259790123e-01, 1.368996867290697e-01, 2.456535062909124e-01, 7.070221653372180e-02, 2.456535062909123e-01, 7.070221653372186e-02, 2.664887956465254e-04, 3.009078114052835e-04, 2.926189388129614e-04, 3.358040147223829e-04, 9.047327608586678e-03, 1.008928048296422e-02, 9.629698903124083e-05, 9.311454464660037e-05, 2.120809936538753e-04, 6.867875214460167e-05, 2.120809936538753e-04, 6.867875214460167e-05, 2.118191604385853e+02, 2.117176949145609e+02, 2.118982808108003e+02, 2.117941002348126e+02, 2.118239781032898e+02, 2.117206223719601e+02, 2.118918631191848e+02, 2.117900291887560e+02, 2.118593579812281e+02, 2.117560136745881e+02, 2.118593579812281e+02, 2.117560136745881e+02, 2.992142022976829e+01, 2.991839636635908e+01, 3.036379203111589e+01, 3.034726781338200e+01, 2.955269402071939e+01, 2.965501058636856e+01, 2.993264713401579e+01, 3.004061061785759e+01, 3.044723701816361e+01, 3.018114199294389e+01, 3.044723701816361e+01, 3.018114199294389e+01, 2.696343045201147e+00, 2.682084817209338e+00, 3.172270541631165e+00, 3.175151490582972e+00, 2.218651462179082e+00, 2.384781938649294e+00, 2.406067839714160e+00, 2.568615065361863e+00, 2.916547045590008e+00, 2.633093610611598e+00, 2.916547045590008e+00, 2.633093610611598e+00, 6.448144993761325e-02, 6.571712059131074e-02, 2.338670372586745e-01, 2.362071203460246e-01, 5.276752471322717e-02, 5.859031289428444e-02, 2.879950408154323e+01, 2.877363254222292e+01, 8.442329676243804e-02, 9.473919662458602e-02, 8.442329676243804e-02, 9.473919662458602e-02, 5.419443843671880e-05, 5.853132210174972e-05, 8.915011450856107e-05, 9.186911702749174e-05, 4.984959938509413e-05, 5.590910580704739e-05, 2.504975074913999e-02, 2.535874446181478e-02, 5.200068958735797e-05, 9.807375170730088e-05, 5.200068958735798e-05, 9.807375170730092e-05, 2.704910342254897e+00, 2.725863333934752e+00, 2.673862924322237e+00, 2.694784545196037e+00, 2.684734289523151e+00, 2.705733557936693e+00, 2.693798512535071e+00, 2.714675601606440e+00, 2.689260626247771e+00, 2.710196801446913e+00, 2.689260626247771e+00, 2.710196801446913e+00, 2.561692633643001e+00, 2.578657010073931e+00, 1.885767038910948e+00, 1.902141909585963e+00, 2.067606745104874e+00, 2.085999438390999e+00, 2.258531865443793e+00, 2.274443171554732e+00, 2.160536333065109e+00, 2.176617668202125e+00, 2.160536333065109e+00, 2.176617668202125e+00, 3.482469918453440e+00, 3.493828673115714e+00, 3.730171821283657e-01, 3.773493039442824e-01, 5.357090302464539e-01, 5.465086438718791e-01, 9.388692018697721e-01, 9.492803710188176e-01, 7.142369632589413e-01, 7.137331348947437e-01, 7.142369632589411e-01, 7.137331348947435e-01, 1.594248730343391e+00, 1.616280688114493e+00, 8.712027601028903e-03, 8.831655260023301e-03, 1.576342941062992e-02, 1.683645082389992e-02, 8.641803144683987e-01, 8.904393477560293e-01, 3.861606862744861e-02, 4.305365455198199e-02, 3.861606862744862e-02, 4.305365455198201e-02, 5.452803189518550e-04, 5.855346540039005e-04, 6.452749066920050e-06, 6.482279174337439e-06, 2.671620796700460e-05, 3.022148013959980e-05, 3.544800275459403e-02, 3.661688078847058e-02, 4.665560592191084e-05, 8.239248102605348e-05, 4.665560592191076e-05, 8.239248102605332e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
