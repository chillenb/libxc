
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_k_lp96_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_k_lp96", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [3.739720553303134e-02, 3.739720657119415e-02, 3.739721150695031e-02, 3.739719605432745e-02, 3.739720410579336e-02, 3.739720410579336e-02, 3.549732920230390e-02, 3.549733406354252e-02, 3.549750159959721e-02, 3.549763795167123e-02, 3.549738932177718e-02, 3.549738932177718e-02, 2.643034453542784e-02, 2.641843509944711e-02, 2.612413818784416e-02, 2.621526883879361e-02, 2.619600808802476e-02, 2.619600808802476e-02, -3.781088464510467e-05, 4.052237212808923e-04, 2.797810800523843e-02, -8.590105060141467e-03, -4.908091568957596e-03, -4.908091568957596e-03, 5.510479709962297e+00, 4.915008283609821e+00, 1.151963917153359e-02, 1.812088062647585e+01, 1.111799795115093e+01, 1.111799795115093e+01, 3.624753525536444e-02, 3.624781303662995e-02, 3.624754909275330e-02, 3.624779430723055e-02, 3.624767551088247e-02, 3.624767551088247e-02, 3.375985266023755e-02, 3.378826970682254e-02, 3.373884962754464e-02, 3.376424634282880e-02, 3.378560838924781e-02, 3.378560838924781e-02, 2.489638062269448e-02, 2.586717979335852e-02, 2.391971933661523e-02, 2.441551275405746e-02, 2.508943488219863e-02, 2.508943488219863e-02, -1.994245200246908e-02, 7.050596893643651e-06, -2.202029775475484e-02, 3.368295597223201e-02, -1.514322065487408e-02, -1.514322065487408e-02, 3.129225147474344e+01, 1.901321306860713e+01, 3.343479152976980e+01, -2.606024135078887e-02, 2.261780810994079e+01, 2.261780810994079e+01, 2.495513579088124e-02, 2.488532592052347e-02, 2.490997720931534e-02, 2.493021111200737e-02, 2.492009108059822e-02, 2.492009108059822e-02, 2.461844089971561e-02, 2.259372038442022e-02, 2.323338048462790e-02, 2.381691944242030e-02, 2.352484220666851e-02, 2.352484220666851e-02, 2.638958277388222e-02, 6.526087713637399e-03, 1.103739280830416e-02, 1.687542109235737e-02, 1.409561938325786e-02, 1.409561938325786e-02, 2.138091394721385e-02, 1.977476341357501e-02, -1.843016818922814e-02, 1.617460645085502e-02, -2.526485318361363e-02, -2.526485318361364e-02, 2.512280280042023e+00, 2.896264424460296e+02, 6.357783717593320e+01, -2.609255663070807e-02, 2.663188197342194e+01, 2.663188197342199e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_k_lp96_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_k_lp96", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.752128988437703e-02, 3.752128988437703e-02, 3.752129057749218e-02, 3.752129057749218e-02, 3.752129387278202e-02, 3.752129387278202e-02, 3.752128355605030e-02, 3.752128355605030e-02, 3.752128893150117e-02, 3.752128893150117e-02, 3.752128893150117e-02, 3.752128893150117e-02, 3.624807761805012e-02, 3.624807761805012e-02, 3.624808088826679e-02, 3.624808088826679e-02, 3.624819359184926e-02, 3.624819359184926e-02, 3.624828531752444e-02, 3.624828531752444e-02, 3.624811806117527e-02, 3.624811806117527e-02, 3.624811806117527e-02, 3.624811806117527e-02, 3.002721933621081e-02, 3.002721933621081e-02, 3.001887549550281e-02, 3.001887549550281e-02, 2.981253233670034e-02, 2.981253233670034e-02, 2.987645984987471e-02, 2.987645984987471e-02, 2.986295098245803e-02, 2.986295098245803e-02, 2.986295098245803e-02, 2.986295098245803e-02, 9.819898835423157e-03, 9.819898835423157e-03, 1.019654647916347e-02, 1.019654647916347e-02, 3.110747326103743e-02, 3.110747326103743e-02, 2.100758491699209e-03, 2.100758491699209e-03, 5.541018826256626e-03, 5.541018826256626e-03, 5.541018826256626e-03, 5.541018826256626e-03, 1.421126939782375e+00, 1.421126939782375e+00, 1.244644567109571e+00, 1.244644567109571e+00, -4.690248263248911e-02, -4.690248263248911e-02, 5.302086931203739e+00, 5.302086931203739e+00, 3.123666295741295e+00, 3.123666295741295e+00, 3.123666295741295e+00, 3.123666295741295e+00, 3.675198621993148e-02, 3.675198621993148e-02, 3.675217252234653e-02, 3.675217252234653e-02, 3.675199550040013e-02, 3.675199550040013e-02, 3.675215996091433e-02, 3.675215996091433e-02, 3.675208028656652e-02, 3.675208028656652e-02, 3.675208028656652e-02, 3.675208028656652e-02, 3.507507102164089e-02, 3.507507102164089e-02, 3.509432422169957e-02, 3.509432422169957e-02, 3.506083950578752e-02, 3.506083950578752e-02, 3.507804799272438e-02, 3.507804799272438e-02, 3.509252121577522e-02, 3.509252121577522e-02, 3.509252121577522e-02, 3.509252121577522e-02, 2.894840950891426e-02, 2.894840950891426e-02, 2.963212133515971e-02, 2.963212133515971e-02, 2.825712656980165e-02, 2.825712656980165e-02, 2.860848784075464e-02, 2.860848784075464e-02, 2.908464192278122e-02, 2.908464192278122e-02, 2.908464192278122e-02, 2.908464192278122e-02, -1.058505048041351e-02, -1.058505048041351e-02, 9.858124494627626e-03, 9.858124494627626e-03, -1.363427039330017e-02, -1.363427039330017e-02, 3.502296020116451e-02, 3.502296020116451e-02, -4.679617420688094e-03, -4.679617420688094e-03, -4.679617420688094e-03, -4.679617420688094e-03, 9.466532218523600e+00, 9.466532218523600e+00, 5.582030195971810e+00, 5.582030195971810e+00, 1.014887273172321e+01, 1.014887273172321e+01, -3.030279396680948e-02, -3.030279396680948e-02, 6.716731024355207e+00, 6.716731024355207e+00, 6.716731024355207e+00, 6.716731024355207e+00, 2.898988545672903e-02, 2.898988545672903e-02, 2.894060447181587e-02, 2.894060447181587e-02, 2.895800860586939e-02, 2.895800860586939e-02, 2.897229236429595e-02, 2.897229236429595e-02, 2.896514849586270e-02, 2.896514849586270e-02, 2.896514849586270e-02, 2.896514849586270e-02, 2.875203895660806e-02, 2.875203895660806e-02, 2.731287452928600e-02, 2.731287452928600e-02, 2.776921467951671e-02, 2.776921467951671e-02, 2.818415968476704e-02, 2.818415968476704e-02, 2.797662876396724e-02, 2.797662876396724e-02, 2.797662876396724e-02, 2.797662876396724e-02, 2.999865930091149e-02, 2.999865930091149e-02, 1.522637503917666e-02, 1.522637503917666e-02, 1.875961970928134e-02, 1.875961970928134e-02, 2.315898311129862e-02, 2.315898311129862e-02, 2.108621930904342e-02, 2.108621930904342e-02, 2.108621930904342e-02, 2.108621930904342e-02, 2.644326527590523e-02, 2.644326527590523e-02, -4.755160113355292e-02, -4.755160113355292e-02, -3.914641016171016e-02, -3.914641016171016e-02, 2.263996077543155e-02, 2.263996077543155e-02, -1.999288471132879e-02, -1.999288471132879e-02, -1.999288471132879e-02, -1.999288471132879e-02, 5.502157570870234e-01, 5.502157570870234e-01, 9.364600769803923e+01, 9.364600769803923e+01, 1.982605432255862e+01, 1.982605432255862e+01, -2.265446617535444e-02, -2.265446617535444e-02, 7.986331532204711e+00, 7.986331532204711e+00, 7.986331532204725e+00, 7.986331532204725e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
