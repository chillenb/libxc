
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_k_tf_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_k_tf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.068151152837109e+03, 2.068161193009204e+03, 2.068213379022968e+03, 2.068048820737075e+03, 2.068156385872156e+03, 2.068156385872156e+03, 5.481751311865872e+01, 5.481774320970144e+01, 5.482858127637959e+01, 5.483314648312894e+01, 5.481809849569633e+01, 5.481809849569633e+01, 2.014220326084131e+00, 2.010087258810929e+00, 1.904448754937160e+00, 1.934554155976222e+00, 2.012712394566809e+00, 2.012712394566809e+00, 1.507434919487836e-01, 1.547845379683477e-01, 2.893215878005849e+00, 7.923441264596306e-02, 1.519500368999407e-01, 1.519500368999407e-01, 4.702131944298256e-04, 5.158985322643233e-04, 8.523009893470402e-03, 1.082164719146992e-04, 5.052021929425768e-04, 5.052021929425768e-04, 1.227856772547718e+02, 1.228293563155074e+02, 1.227902853864724e+02, 1.228242462532213e+02, 1.228078768842838e+02, 1.228078768842838e+02, 1.732422787417185e+01, 1.756921295661713e+01, 1.722568111527848e+01, 1.741619444206536e+01, 1.761848817805953e+01, 1.761848817805953e+01, 1.526717199137941e+00, 1.801432895954837e+00, 1.374674216191832e+00, 1.495515557813728e+00, 1.646290061833371e+00, 1.646290061833371e+00, 4.277052249936514e-02, 1.529112276404720e-01, 4.168114937415140e-02, 1.666629082569462e+01, 5.718930170080707e-02, 5.718930170080707e-02, 1.007085213469909e-04, 1.315329398683473e-04, 7.388966512043002e-05, 1.656259895745718e-02, 1.091991101274150e-04, 1.091991101274150e-04, 1.625593601486210e+00, 1.608283050813183e+00, 1.614477877581867e+00, 1.619265274944426e+00, 1.616868293003052e+00, 1.616868293003052e+00, 1.522924751311790e+00, 1.146074871160512e+00, 1.250452692849600e+00, 1.351314122928096e+00, 1.299431584135391e+00, 1.299431584135391e+00, 1.980405478986250e+00, 2.418938156105400e-01, 3.412021366924453e-01, 5.576651792401807e-01, 4.362430471984198e-01, 4.362430471984197e-01, 9.323215241678381e-01, 7.311065024365213e-03, 1.339888281069448e-02, 4.978398620480401e-01, 2.817677076607493e-02, 2.817677076607493e-02, 6.458686260192648e-04, 9.859311400186761e-06, 3.557846840925370e-05, 2.564527479374215e-02, 7.887179204673898e-05, 7.887179204673875e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_k_tf_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_k_tf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.446918588061849e+03, 3.446935321682006e+03, 3.447022298371613e+03, 3.446748034561792e+03, 3.446927309786926e+03, 3.446927309786926e+03, 9.136252186443120e+01, 9.136290534950241e+01, 9.138096879396598e+01, 9.138857747188156e+01, 9.136349749282722e+01, 9.136349749282722e+01, 3.357033876806885e+00, 3.350145431351548e+00, 3.174081258228600e+00, 3.224256926627037e+00, 3.354520657611348e+00, 3.354520657611348e+00, 2.512391532479727e-01, 2.579742299472461e-01, 4.822026463343082e+00, 1.320573544099385e-01, 2.532500614999012e-01, 2.532500614999012e-01, 7.836886573830427e-04, 8.598308871072056e-04, 1.420501648911734e-02, 1.803607865244987e-04, 8.420036549042947e-04, 8.420036549042947e-04, 2.046427954246197e+02, 2.047155938591791e+02, 2.046504756441206e+02, 2.047070770887022e+02, 2.046797948071396e+02, 2.046797948071396e+02, 2.887371312361975e+01, 2.928202159436189e+01, 2.870946852546413e+01, 2.902699073677560e+01, 2.936414696343254e+01, 2.936414696343254e+01, 2.544528665229902e+00, 3.002388159924729e+00, 2.291123693653054e+00, 2.492525929689546e+00, 2.743816769722284e+00, 2.743816769722284e+00, 7.128420416560857e-02, 2.548520460674534e-01, 6.946858229025235e-02, 2.777715137615770e+01, 9.531550283467845e-02, 9.531550283467845e-02, 1.678475355783182e-04, 2.192215664472454e-04, 1.231494418673834e-04, 2.760433159576198e-02, 1.819985168790251e-04, 1.819985168790251e-04, 2.709322669143684e+00, 2.680471751355305e+00, 2.690796462636444e+00, 2.698775458240709e+00, 2.694780488338421e+00, 2.694780488338421e+00, 2.538207918852983e+00, 1.910124785267520e+00, 2.084087821416000e+00, 2.252190204880161e+00, 2.165719306892318e+00, 2.165719306892318e+00, 3.300675798310417e+00, 4.031563593509001e-01, 5.686702278207422e-01, 9.294419654003011e-01, 7.270717453306996e-01, 7.270717453306995e-01, 1.553869206946397e+00, 1.218510837394202e-02, 2.233147135115746e-02, 8.297331034134002e-01, 4.696128461012489e-02, 4.696128461012489e-02, 1.076447710032108e-03, 1.643218566697794e-05, 5.929744734875617e-05, 4.274212465623693e-02, 1.314529867445650e-04, 1.314529867445646e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
