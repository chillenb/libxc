
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_k_zlp_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_k_zlp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [3.166496452051837e+03, 3.166512985558342e+03, 3.166591592886140e+03, 3.166345502738282e+03, 3.166473722449728e+03, 3.166473722449728e+03, 9.556828380827486e+01, 9.556868940111578e+01, 9.558266918345626e+01, 9.559404912073357e+01, 9.557330000020208e+01, 9.557330000020208e+01, 3.667572770076588e+00, 3.659526460591846e+00, 3.468549578750119e+00, 3.526112383727115e+00, 3.513831626697380e+00, 3.513831626697380e+00, 2.463260002575012e-01, 2.538325820588352e-01, 4.979332238108680e+00, 1.420720872274224e-01, 1.790958185053277e-01, 1.790958185053277e-01, 2.994425885070105e-04, 3.317328921962502e-04, 1.009102576129463e-02, 9.988328244172835e-05, 1.577105044342536e-04, 1.577105044342536e-04, 2.108386354467114e+02, 2.109142782180633e+02, 2.108424025529297e+02, 2.109091767281428e+02, 2.108768234299467e+02, 2.108768234299467e+02, 3.074436791214833e+01, 3.118713494300982e+01, 3.042308985493866e+01, 3.081221375763825e+01, 3.114526842082362e+01, 3.114526842082362e+01, 2.809511940885482e+00, 3.313379143464226e+00, 2.406922131917168e+00, 2.600102341954330e+00, 2.900455789457892e+00, 2.900455789457892e+00, 6.853212288319735e-02, 2.470736390652555e-01, 5.866110195498262e-02, 2.959198383093969e+01, 9.435411225933719e-02, 9.435411225933719e-02, 5.946326726244588e-05, 9.545657325644785e-05, 5.581337699492238e-05, 2.655018087927276e-02, 8.099956578747845e-05, 8.099956578747845e-05, 2.836749904972276e+00, 2.804429313205446e+00, 2.815781475731969e+00, 2.825148941365760e+00, 2.820458177816427e+00, 2.820458177816427e+00, 2.685637311573173e+00, 1.981295195518443e+00, 2.171863176522771e+00, 2.369459549412845e+00, 2.267475150063070e+00, 2.267475150063070e+00, 3.640138864804073e+00, 3.941021193076686e-01, 5.680059491509442e-01, 9.897017643182544e-01, 7.490016083827671e-01, 7.490016083827671e-01, 1.680242470275836e+00, 9.244594691319153e-03, 1.717862016840139e-02, 9.199279962361555e-01, 4.303406077041830e-02, 4.303406077041831e-02, 5.963898496015934e-04, 6.821100918921357e-06, 3.005282211712195e-05, 3.795065382721969e-02, 6.935256694178934e-05, 6.935256694178923e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_k_zlp_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_k_zlp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [5.142623245534064e+03, 5.142649838872790e+03, 5.142776274900394e+03, 5.142380450842604e+03, 5.142586686074841e+03, 5.142586686074841e+03, 1.582060686439494e+02, 1.582067382785895e+02, 1.582298189224657e+02, 1.582486072086378e+02, 1.582143503867178e+02, 1.582143503867178e+02, 6.101580625749027e+00, 6.088204350816692e+00, 5.770713091015895e+00, 5.866410765772216e+00, 5.845994247556984e+00, 5.845994247556984e+00, 4.103057689855807e-01, 4.228063327180102e-01, 8.281878040664308e+00, 2.366786307456648e-01, 2.983423742682270e-01, 2.983423742682270e-01, 4.990559831054487e-04, 5.528707540384393e-04, 1.681595000820054e-02, 1.664690916132930e-04, 2.628449269198144e-04, 2.628449269198144e-04, 3.481690942501075e+02, 3.482935579382933e+02, 3.481752927052962e+02, 3.482851638814039e+02, 3.482319293265943e+02, 3.482319293265943e+02, 5.102034383185527e+01, 5.175383171760907e+01, 5.048809871562352e+01, 5.113273890319224e+01, 5.168447671474213e+01, 5.168447671474213e+01, 4.674947913809390e+00, 5.512735383742202e+00, 4.005454346758324e+00, 4.326718504601270e+00, 4.826171683841821e+00, 4.826171683841821e+00, 1.141821236465328e-01, 4.115508032223816e-01, 9.773803457065780e-02, 4.911118478325942e+01, 1.571966383475566e-01, 1.571966383475566e-01, 9.910401241695117e-05, 1.590914371516675e-04, 9.302098809148201e-05, 4.424053977157751e-02, 1.349970302378293e-04, 1.349970302378293e-04, 4.720240382097676e+00, 4.666496254150772e+00, 4.685373205003030e+00, 4.700949847125427e+00, 4.693149841166925e+00, 4.693149841166925e+00, 4.468958535096919e+00, 3.297542133801854e+00, 3.614513626054721e+00, 3.943150392880128e+00, 3.773535890080421e+00, 3.773535890080421e+00, 6.055974067741063e+00, 6.563722989870838e-01, 9.458944600436210e-01, 1.647779524362659e+00, 1.247176482969298e+00, 1.247176482969298e+00, 2.796749793371077e+00, 1.540551928328035e-02, 2.862581435269284e-02, 1.531660033007339e+00, 7.170389995439615e-02, 7.170389995439617e-02, 9.939423591712022e-04, 1.136844034399844e-05, 5.008750591815485e-05, 6.323478081987957e-02, 1.155858192794009e-04, 1.155858192794007e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
