
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_k_lp_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_k_lp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([2.138407408540245e+03, 2.138419336041229e+03, 2.138476044537595e+03, 2.138298511879776e+03, 2.138391011099409e+03, 2.138391011099409e+03, 5.668201825894565e+01, 5.668226294429056e+01, 5.669069665828010e+01, 5.669756196120034e+01, 5.668504442024741e+01, 5.668504442024741e+01, 2.108735741269777e+00, 2.104088421033565e+00, 1.993805002536212e+00, 2.027041842346447e+00, 2.019950628467644e+00, 2.019950628467644e+00, 1.405957707559310e-01, 1.448866526692532e-01, 2.867192275504367e+00, 8.103308883476172e-02, 1.021786168633769e-01, 1.021786168633769e-01, 1.703755748276223e-04, 1.887494612750713e-04, 5.745237358587979e-03, 5.682747039990671e-05, 8.972970081723729e-05, 8.972970081723729e-05, 1.270610584290294e+02, 1.271077162349349e+02, 1.270633820341835e+02, 1.271045695281020e+02, 1.270846133876192e+02, 1.270846133876192e+02, 1.795194499029850e+01, 1.821331829066406e+01, 1.776232464308584e+01, 1.799199190220119e+01, 1.818860129419762e+01, 1.818860129419762e+01, 1.613531193618454e+00, 1.904226707733979e+00, 1.381479673807900e+00, 1.492803212508015e+00, 1.665978022045088e+00, 1.665978022045088e+00, 3.906045070863604e-02, 1.410231209715659e-01, 3.343018636163395e-02, 1.727194185906845e+01, 5.379329604580723e-02, 5.379329604580723e-02, 3.383024208960787e-05, 5.430883252266970e-05, 3.175365028390716e-05, 1.512269061838162e-02, 4.608337074080079e-05, 4.608337074080079e-05, 1.629238165913742e+00, 1.610600355722715e+00, 1.617146489641499e+00, 1.622548278269459e+00, 1.619843316745593e+00, 1.619843316745593e+00, 1.542109092100863e+00, 1.136377993607315e+00, 1.246087963436595e+00, 1.359896699899299e+00, 1.301150672368132e+00, 1.301150672368132e+00, 2.092890964538391e+00, 2.251118216331257e-01, 3.246733850586651e-01, 5.664491773693534e-01, 4.283910427784758e-01, 4.283910427784758e-01, 9.631701649560401e-01, 5.263166037502966e-03, 9.782612948912833e-03, 5.264153724406808e-01, 2.451900092514341e-02, 2.451900092514342e-02, 3.393519638151672e-04, 3.880513528573652e-06, 1.709749114692105e-05, 2.162088698556001e-02, 3.945675628678674e-05, 3.945675628678667e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_k_lp_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_k_lp", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([3.564012347567075e+03, 3.564032226735382e+03, 3.564126740895992e+03, 3.563830853132961e+03, 3.563985018499015e+03, 3.563985018499015e+03, 9.447003043157608e+01, 9.447043824048427e+01, 9.448449443046682e+01, 9.449593660200058e+01, 9.447507403374568e+01, 9.447507403374568e+01, 3.514559568782962e+00, 3.506814035055942e+00, 3.323008337560354e+00, 3.378403070577412e+00, 3.366584380779408e+00, 3.366584380779408e+00, 2.343262845932184e-01, 2.414777544487553e-01, 4.778653792507278e+00, 1.350551480579362e-01, 1.702976947722948e-01, 1.702976947722948e-01, 2.839592913793705e-04, 3.145824354584522e-04, 9.575395597646632e-03, 9.471245066651119e-05, 1.495495013620622e-04, 1.495495013620622e-04, 2.117684307150490e+02, 2.118461937248915e+02, 2.117723033903058e+02, 2.118409492135033e+02, 2.118076889793653e+02, 2.118076889793653e+02, 2.991990831716416e+01, 3.035553048444010e+01, 2.960387440514307e+01, 2.998665317033531e+01, 3.031433549032937e+01, 3.031433549032937e+01, 2.689218656030756e+00, 3.173711179556631e+00, 2.302466123013168e+00, 2.488005354180025e+00, 2.776630036741813e+00, 2.776630036741813e+00, 6.510075118106007e-02, 2.350385349526098e-01, 5.571697726938992e-02, 2.878656976511408e+01, 8.965549340967872e-02, 8.965549340967872e-02, 5.638373681601312e-05, 9.051472087111617e-05, 5.292275047317860e-05, 2.520448436396937e-02, 7.680561790133465e-05, 7.680561790133465e-05, 2.715396943189571e+00, 2.684333926204526e+00, 2.695244149402498e+00, 2.704247130449099e+00, 2.699738861242655e+00, 2.699738861242655e+00, 2.570181820168105e+00, 1.893963322678858e+00, 2.076813272394325e+00, 2.266494499832164e+00, 2.168584453946887e+00, 2.168584453946887e+00, 3.488151607563985e+00, 3.751863693885428e-01, 5.411223084311084e-01, 9.440819622822557e-01, 7.139850712974598e-01, 7.139850712974598e-01, 1.605283608260067e+00, 8.771943395838276e-03, 1.630435491485472e-02, 8.773589540678014e-01, 4.086500154190569e-02, 4.086500154190570e-02, 5.655866063586120e-04, 6.467522547622753e-06, 2.849581857820174e-05, 3.603481164260003e-02, 6.576126047797790e-05, 6.576126047797779e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
