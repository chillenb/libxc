
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_k_lp96_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_k_lp96", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [3.739719597827623e-02, 3.739719688187721e-02, 3.739720157843711e-02, 3.739718676816024e-02, 3.739719644924264e-02, 3.739719644924264e-02, 3.549722522978682e-02, 3.549722995677365e-02, 3.549745258034025e-02, 3.549754633412534e-02, 3.549723725570554e-02, 3.549723725570554e-02, 2.636270572538681e-02, 2.635155596174817e-02, 2.605480205191701e-02, 2.614175790937275e-02, 2.635864162639984e-02, 2.635864162639984e-02, 1.468061245982541e-03, 1.848745453506276e-03, 2.817517409737205e-02, -8.415232961323377e-03, 1.583041122675548e-03, 1.583041122675548e-03, 1.636215983730319e+00, 1.460800616430561e+00, -1.475676300341475e-02, 8.753242387495121e+00, 1.498884368065655e+00, 1.498884368065655e+00, 3.624687498798322e-02, 3.624714420813725e-02, 3.624690339740348e-02, 3.624711271915779e-02, 3.624701183544329e-02, 3.624701183544329e-02, 3.375543603546437e-02, 3.378307476540642e-02, 3.374415406574512e-02, 3.376587912658207e-02, 3.378856490162153e-02, 3.378856490162153e-02, 2.476231841202829e-02, 2.574153463613194e-02, 2.410346038254815e-02, 2.463501692716604e-02, 2.521747337420250e-02, 2.521747337420250e-02, -1.814631799732567e-02, 1.673829635607619e-03, -1.852797551666445e-02, 3.367824951442147e-02, -1.364749779569891e-02, -1.364749779569891e-02, 9.464924421296377e+00, 7.070664969555091e+00, 1.321734928090261e+01, -2.654921053791760e-02, 8.667488558755727e+00, 8.667488558755727e+00, 2.514216265210432e-02, 2.507810254613778e-02, 2.510114114453753e-02, 2.511885835797205e-02, 2.510999705712698e-02, 2.510999705712698e-02, 2.474704616898039e-02, 2.288733751028236e-02, 2.348212345663654e-02, 2.399291112972635e-02, 2.373726834083190e-02, 2.373726834083190e-02, 2.627049614470821e-02, 7.877728482897157e-03, 1.198514273772460e-02, 1.704191896066738e-02, 1.463068218253679e-02, 1.463068218253679e-02, 2.138700755906016e-02, -7.636575386832017e-03, -2.533619263266984e-02, 1.595586942055814e-02, -2.363650037873335e-02, -2.363650037873335e-02, 1.103447878456482e+00, 1.082065026854066e+02, 2.866485394935757e+01, -2.458833913859975e-02, 1.232346293084905e+01, 1.232346293084909e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_k_lp96_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_k_lp96", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.752128350527575e-02, 3.752128410855256e-02, 3.752128724414643e-02, 3.752127735626781e-02, 3.752128381971002e-02, 3.752128381971002e-02, 3.624800767440802e-02, 3.624801085431317e-02, 3.624816061599491e-02, 3.624822368530835e-02, 3.624801576439887e-02, 3.624801576439887e-02, 2.997982454309631e-02, 2.997201033439021e-02, 2.976387409197739e-02, 2.982489470810463e-02, 2.997697630688585e-02, 2.997697630688585e-02, 1.109257791322473e-02, 1.141101307711316e-02, 3.124443710336123e-02, 2.269007474634181e-03, 1.118889263801313e-02, 1.118889263801313e-02, 3.095896261721069e-01, 2.629418964738164e-01, -4.104227902509692e-02, 2.398883399385336e+00, 2.730125165478799e-01, 2.730125165478799e-01, 3.675154339079257e-02, 3.675172395191927e-02, 3.675156244449017e-02, 3.675170283283580e-02, 3.675163517195291e-02, 3.675163517195291e-02, 3.507207845042976e-02, 3.509080470183577e-02, 3.506443387676375e-02, 3.507915428301111e-02, 3.509452421085782e-02, 3.509452421085782e-02, 2.885372664222182e-02, 2.954382113454375e-02, 2.838744713094886e-02, 2.876375816742199e-02, 2.917492069327931e-02, 2.917492069327931e-02, -8.234593733402570e-03, 1.126485952346342e-02, -8.717121087109418e-03, 3.501977021270318e-02, -3.035084401839046e-03, -3.035084401839046e-03, 2.616195652117185e+00, 1.888595207534546e+00, 3.772564473919842e+00, -2.764581723218441e-02, 2.372752136656601e+00, 2.372752136656601e+00, 2.912182692480048e-02, 2.907664875724109e-02, 2.909289834867581e-02, 2.910539336017760e-02, 2.909914409553427e-02, 2.909914409553427e-02, 2.884293631900437e-02, 2.752253911196524e-02, 2.794624873820828e-02, 2.830905376606335e-02, 2.812759656293013e-02, 2.812759656293013e-02, 2.991518733048403e-02, 1.629874349044055e-02, 1.948613829278819e-02, 2.328195220203209e-02, 2.148816320704426e-02, 2.148816320704426e-02, 2.644764914245512e-02, -4.355522892823480e-02, -3.215837286549397e-02, 2.247748627021757e-02, -1.641476408026367e-02, -1.641476408026367e-02, 1.703018823142896e-01, 3.429158812247661e+01, 8.631304093507927e+00, -1.835697050541530e-02, 3.495736211907439e+00, 3.495736211907450e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
