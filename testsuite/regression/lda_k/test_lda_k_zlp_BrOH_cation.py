
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_k_zlp_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_k_zlp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([3.166496452058399e+03, 3.166512985577003e+03, 3.166591592908954e+03, 3.166345502967932e+03, 3.166473723092686e+03, 3.166473723092686e+03, 9.556828383051398e+01, 9.556868943011405e+01, 9.558266923409452e+01, 9.559404914426899e+01, 9.557331671947175e+01, 9.557331671947175e+01, 3.667644515027511e+00, 3.659634448698359e+00, 3.468756750838903e+00, 3.526133024339653e+00, 3.532531800950049e+00, 3.532531800950049e+00, 2.467734750933233e-01, 2.544288896706461e-01, 4.986126243655455e+00, 1.421054400654462e-01, 2.337353979684797e-01, 2.337353979684796e-01, 3.008161519598629e-04, 3.336841927168309e-04, 1.012833755455812e-02, 9.991852112520187e-05, 2.001224363958081e-04, 2.001224363958081e-04, 2.108386505723870e+02, 2.109142941580581e+02, 2.108424182471151e+02, 2.109091919585206e+02, 2.108768391179811e+02, 2.108768391179811e+02, 3.074436801028230e+01, 3.118713783097305e+01, 3.042320342080543e+01, 3.081233857366660e+01, 3.114601834510151e+01, 3.114601834510151e+01, 2.809536621673379e+00, 3.313379996677210e+00, 2.410836690298256e+00, 2.603569559103174e+00, 2.909895537710482e+00, 2.909895537710482e+00, 6.853983845101015e-02, 2.470812925312292e-01, 5.886117576318912e-02, 2.959199130039246e+01, 9.474415417274099e-02, 9.474415417274099e-02, 5.957316428040934e-05, 9.548348935762963e-05, 5.604184297248859e-05, 2.655142785235131e-02, 8.989489055008041e-05, 8.989489055008043e-05, 2.836802688071410e+00, 2.804482549821966e+00, 2.815834890263897e+00, 2.825201559674610e+00, 2.820511183107713e+00, 2.820511183107713e+00, 2.685673874782409e+00, 1.981341477272228e+00, 2.171916408930612e+00, 2.369496041634659e+00, 2.267514115772765e+00, 2.267514115772765e+00, 3.640150927334413e+00, 3.941185389007280e-01, 5.680766488642927e-01, 9.897393766856791e-01, 7.490017249347654e-01, 7.490017249347652e-01, 1.680341375562342e+00, 9.245131975947450e-03, 1.720186520330734e-02, 9.201854992889376e-01, 4.319252537539277e-02, 4.319252537539279e-02, 5.973336273972991e-04, 6.821145357287339e-06, 3.019479484750365e-05, 3.796313152900757e-02, 7.563097256062244e-05, 7.563097256062231e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_k_zlp_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_k_zlp", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([5.142630041417779e+03, 5.142616449645412e+03, 5.142661298561701e+03, 5.142638379169844e+03, 5.142763605020994e+03, 5.142788944762648e+03, 5.142420648919579e+03, 5.142340252592965e+03, 5.142653948431909e+03, 5.142519423234357e+03, 5.142653948431909e+03, 5.142519423234357e+03, 1.582082418844680e+02, 1.582038953881047e+02, 1.582092199007714e+02, 1.582042566364234e+02, 1.582265392910441e+02, 1.582330985189898e+02, 1.582463712078142e+02, 1.582508431932417e+02, 1.581547549951419e+02, 1.582739342561804e+02, 1.581547549951419e+02, 1.582739342561804e+02, 6.077375195220608e+00, 6.125737793981852e+00, 6.058533677674059e+00, 6.117802381467007e+00, 5.810604382594277e+00, 5.730682462602209e+00, 5.853686277078794e+00, 5.879121371763393e+00, 6.222022732988405e+00, 5.457361719322873e+00, 6.222022732988405e+00, 5.457361719322873e+00, 3.945025451445942e-01, 4.258095960670107e-01, 4.042623402377665e-01, 4.409512474515416e-01, 8.005367395304571e+00, 8.553810458665726e+00, 2.334224118484234e-01, 2.399125615359124e-01, 4.303779674666975e-01, 1.237282456416091e-01, 4.303779674666973e-01, 1.237282456416091e-01, 4.683507473864508e-04, 5.288436859023956e-04, 5.142691414368091e-04, 5.901682196877893e-04, 1.588843406932358e-02, 1.771853657704362e-02, 1.692541677542209e-04, 1.636605175514370e-04, 3.727497900853006e-04, 1.207034816785125e-04, 3.727497900853006e-04, 1.207034816785125e-04, 3.482532723325890e+02, 3.480849056205948e+02, 3.483799876171819e+02, 3.482071171444862e+02, 3.482610388103115e+02, 3.480895356568278e+02, 3.483696469202363e+02, 3.482006702224712e+02, 3.483176656258976e+02, 3.481461820880965e+02, 3.483176656258976e+02, 3.481461820880965e+02, 5.102293312147017e+01, 5.101775447541153e+01, 5.176797815637910e+01, 5.173968331191033e+01, 5.040043677627022e+01, 5.057568332383318e+01, 5.104024988652906e+01, 5.122514291895344e+01, 5.191204536925434e+01, 5.145639730419076e+01, 5.191204536925434e+01, 5.145639730419076e+01, 4.687352972475942e+00, 4.662526268190776e+00, 5.510228652623773e+00, 5.515241541126771e+00, 3.859415984962746e+00, 4.148861518026520e+00, 4.183994112818822e+00, 4.467112087474508e+00, 5.069740412432228e+00, 4.576250014812442e+00, 5.069740412432227e+00, 4.576250014812443e+00, 1.130955464153055e-01, 1.152635483596260e-01, 4.094983224753835e-01, 4.135981668138394e-01, 9.256242444217098e-02, 1.027798718550060e-01, 4.913334506931791e+01, 4.908901941216280e+01, 1.480190512450130e-01, 1.661132682794245e-01, 1.480190512450130e-01, 1.661132682794245e-01, 9.525588966637682e-05, 1.028788109501440e-04, 1.566929195472349e-04, 1.614720070561485e-04, 8.761930643979634e-05, 9.827009818524274e-05, 4.396888094453045e-02, 4.451136635067252e-02, 9.139779351605228e-05, 1.723792401034824e-04, 9.139779351605228e-05, 1.723792401034824e-04, 4.701981481999760e+00, 4.738463807543232e+00, 4.648263664404348e+00, 4.684693065807236e+00, 4.667073253842882e+00, 4.703637258020316e+00, 4.682756778318880e+00, 4.719107552516911e+00, 4.674905079433795e+00, 4.711358979599432e+00, 4.674905079433795e+00, 4.711358979599432e+00, 4.454174220982348e+00, 4.483718280182733e+00, 3.283251659780281e+00, 3.311801537354604e+00, 3.598467023576810e+00, 3.630524482149030e+00, 3.929276350327134e+00, 3.956999923897823e+00, 3.759510581967706e+00, 3.787535028772667e+00, 3.759510581967706e+00, 3.787535028772667e+00, 6.046091941313416e+00, 6.065848080071959e+00, 6.525746945461790e-01, 6.601589181394393e-01, 9.364240015398314e-01, 9.553175883568253e-01, 1.638671707662377e+00, 1.656862134777619e+00, 1.247616892287308e+00, 1.246735995589082e+00, 1.247616892287307e+00, 1.246735995589082e+00, 2.777499324046780e+00, 2.815933894071089e+00, 1.530027884647327e-02, 1.551040127342965e-02, 2.767592265059671e-02, 2.956018684334237e-02, 1.508629496598156e+00, 1.554518011903834e+00, 6.775665594878834e-02, 7.554520096060779e-02, 6.775665594878837e-02, 7.554520096060784e-02, 9.582552647880315e-04, 1.028999740693223e-03, 1.134247176958123e-05, 1.139437929196387e-05, 4.695942334972486e-05, 5.312075545218785e-05, 6.220476309114402e-02, 6.425646826214450e-02, 8.200392575149680e-05, 1.448181116145247e-04, 8.200392575149667e-05, 1.448181116145245e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
