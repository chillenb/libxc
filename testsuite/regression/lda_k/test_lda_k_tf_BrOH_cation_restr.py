
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_lda_k_tf_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_k_tf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [2.068257322185651e+03, 2.068268858407022e+03, 2.068323706590942e+03, 2.068151997861355e+03, 2.068241462660034e+03, 2.068241462660034e+03, 5.482257442250101e+01, 5.482281108098537e+01, 5.483096812844153e+01, 5.483760821628312e+01, 5.482550131110300e+01, 5.482550131110300e+01, 2.039559028844302e+00, 2.035064163147195e+00, 1.928398573179697e+00, 1.960545084190316e+00, 1.953686496360213e+00, 1.953686496360213e+00, 1.359835507363829e-01, 1.401336710083290e-01, 2.773134527238727e+00, 7.837481232644264e-02, 9.882666495377707e-02, 9.882666495377707e-02, 1.647864334698349e-04, 1.825575677402149e-04, 5.556765837575194e-03, 5.496325503105522e-05, 8.678613345221493e-05, 8.678613345221493e-05, 1.228928423138472e+02, 1.229379695184742e+02, 1.228950896935348e+02, 1.229349260388164e+02, 1.229156245560815e+02, 1.229156245560815e+02, 1.736303452998447e+01, 1.761583352429488e+01, 1.717963464556970e+01, 1.740176770984668e+01, 1.759192736463607e+01, 1.759192736463607e+01, 1.560599581000522e+00, 1.841758878894267e+00, 1.336160471289380e+00, 1.443832060495715e+00, 1.611325900262973e+00, 1.611325900262973e+00, 3.777907935754692e-02, 1.363968818018733e-01, 3.233351486173503e-02, 1.670533878423517e+01, 5.202861624352034e-02, 5.202861624352034e-02, 3.272044683052633e-05, 5.252724063514292e-05, 3.071197726098668e-05, 1.462659335994692e-02, 4.457161370887732e-05, 4.457161370887732e-05, 1.575791288777702e+00, 1.557764888736649e+00, 1.564096277860844e+00, 1.569320861744187e+00, 1.566704636016749e+00, 1.566704636016749e+00, 1.491520469209340e+00, 1.099099309449823e+00, 1.205210262633936e+00, 1.315285523118731e+00, 1.258466648892329e+00, 1.258466648892329e+00, 2.024234037281793e+00, 2.177270671359536e-01, 3.140225306387155e-01, 5.478669097671875e-01, 4.143377484789770e-01, 4.143377484789770e-01, 9.315735337547116e-01, 5.090508783064516e-03, 9.461696017742891e-03, 5.091464069069765e-01, 2.371465932711213e-02, 2.371465932711214e-02, 3.282195811498426e-04, 3.753213951307672e-06, 1.653661089762273e-05, 2.091161751565329e-02, 3.816238419953339e-05, 3.816238419953332e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_lda_k_tf_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("lda_k_tf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.447095536976085e+03, 3.447114764011702e+03, 3.447206177651570e+03, 3.446919996435591e+03, 3.447069104433391e+03, 3.447069104433391e+03, 9.137095737083503e+01, 9.137135180164229e+01, 9.138494688073588e+01, 9.139601369380522e+01, 9.137583551850501e+01, 9.137583551850501e+01, 3.399265048073838e+00, 3.391773605245325e+00, 3.213997621966162e+00, 3.267575140317194e+00, 3.256144160600354e+00, 3.256144160600354e+00, 2.266392512273049e-01, 2.335561183472150e-01, 4.621890878731212e+00, 1.306246872107377e-01, 1.647111082562951e-01, 1.647111082562951e-01, 2.746440557830581e-04, 3.042626129003582e-04, 9.261276395958657e-03, 9.160542505175871e-05, 1.446435557536916e-04, 1.446435557536916e-04, 2.048214038564120e+02, 2.048966158641237e+02, 2.048251494892246e+02, 2.048915433980274e+02, 2.048593742601359e+02, 2.048593742601359e+02, 2.893839088330745e+01, 2.935972254049147e+01, 2.863272440928284e+01, 2.900294618307779e+01, 2.931987894106011e+01, 2.931987894106011e+01, 2.600999301667537e+00, 3.069598131490446e+00, 2.226934118815633e+00, 2.406386767492858e+00, 2.685543167104955e+00, 2.685543167104955e+00, 6.296513226257822e-02, 2.273281363364555e-01, 5.388919143622505e-02, 2.784223130705861e+01, 8.671436040586722e-02, 8.671436040586722e-02, 5.453407805087721e-05, 8.754540105857153e-05, 5.118662876831114e-05, 2.437765559991153e-02, 7.428602284812888e-05, 7.428602284812888e-05, 2.626318814629503e+00, 2.596274814561082e+00, 2.606827129768074e+00, 2.615534769573644e+00, 2.611174393361248e+00, 2.611174393361248e+00, 2.485867448682234e+00, 1.831832182416371e+00, 2.008683771056560e+00, 2.192142538531219e+00, 2.097444414820549e+00, 2.097444414820549e+00, 3.373723395469656e+00, 3.628784452265892e-01, 5.233708843978592e-01, 9.131115162786460e-01, 6.905629141316284e-01, 6.905629141316284e-01, 1.552622556257853e+00, 8.484181305107526e-03, 1.576949336290482e-02, 8.485773448449608e-01, 3.952443221185355e-02, 3.952443221185357e-02, 5.470326352497377e-04, 6.255356585512788e-06, 2.756101816270455e-05, 3.485269585942215e-02, 6.360397366588900e-05, 6.360397366588888e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
