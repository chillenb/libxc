
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_mn12_sx_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_mn12_sx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-4.675148875216254e+00, -4.674929192409563e+00, -4.673977051296995e+00, -4.677549839618742e+00, -4.675033091584842e+00, -4.675033091584842e+00, -2.460729108591623e+00, -2.460436141378377e+00, -2.451671270128568e+00, -2.455287506365296e+00, -2.460660422563691e+00, -2.943518121380286e+00, -2.197134880251892e-01, -5.196874336443542e-01, -4.827758595437075e-01, -4.990645380520016e-01, -5.204799082608864e-01, -5.204799082608864e-01, -2.170166006482770e-01, -2.210302596539911e-01, 1.171557995106956e-01, -3.017611449518784e-02, -2.182472775878817e-01, -2.182472775878817e-01, 8.545139203776669e-03, 8.920420562783070e-03, 3.083338738516495e-02, 4.275388567863258e-03, 8.840181531101537e-03, 8.840181531101464e-03, -4.763095581206006e+00, -4.742746846316757e+00, -4.760865368065987e+00, -9.288678391135800e-01, -4.752958256231234e+00, -4.752958256231234e+00, -1.385901394498514e+00, -1.390472166270690e+00, -1.383114165483228e+00, -1.388180981849958e+00, -1.390444642964481e+00, -1.547271383365028e+00, -4.478969784896085e-01, -5.168330329723658e-01, -4.285097784038529e-01, -4.459611196238574e-01, -4.728179481207686e-01, -4.450671833656427e-01, 2.613858495820958e-01, -1.616083263890432e-01, 2.543933083058523e-01, -1.752630158906261e+00, -1.249740235541343e-02, -1.249740235541343e-02, 2.348048463292092e-02, 4.690359205467886e-03, 3.578491060953417e-03, 2.163205957064959e-01, 2.442430832743725e-02, 4.297964486775431e-03, -3.766720981577609e-01, -4.124321040480488e-01, -3.273921199197886e-01, -3.884009801536609e-01, -3.935106971501510e-01, -3.935106971501510e-01, -3.839483398889921e-01, -3.856005550917845e-01, -4.037571703134179e-01, -4.270651888887355e-01, -4.163543215050475e-01, -4.113585218485085e-01, -5.408987629875256e-01, 3.808101554708915e-02, -2.969557735732312e-01, -2.121404594515017e-01, -3.108608628554492e-01, -3.108608628554493e-01, -3.080819868121249e-01, 2.871316799443901e-02, 3.635772861662410e-02, -2.836093270482257e-01, 2.328568630990153e-01, 3.306906221969844e-02, 9.754451392997075e-03, 1.342975406359118e-03, 2.512835188306105e-03, 3.241292667366611e-02, 3.684491082816618e-03, 3.684491082816631e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_mn12_sx_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_mn12_sx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([8.197358578714150e+00, 8.197962524656662e+00, 8.200622635266420e+00, 8.190796398677586e+00, 8.197676598599612e+00, 8.197676598599612e+00, -1.188277920798143e+00, -1.187184275681610e+00, -1.154748593890992e+00, -1.167208153760142e+00, -1.187974647438868e+00, -4.192927636247965e+00, -1.304951205599114e+00, -8.247304505561175e-01, -9.106878320914924e-01, -8.699365335561473e-01, -8.224205598236083e-01, -8.224205598236083e-01, -2.653728843108020e-01, -2.489582783832658e-01, -1.896591452634507e+00, -2.606687832422694e-01, -2.607587928029036e-01, -2.607587928029036e-01, 1.197902422742829e-02, 1.257835264887500e-02, 5.943684265361757e-02, 5.676851585139557e-03, 1.246907401319861e-02, 1.246907401319886e-02, 1.725928942112648e+00, 1.842003172092032e+00, 1.738728684907022e+00, 3.525924834454689e+00, 1.784060040039504e+00, 1.784060040039504e+00, -1.718136656820825e+00, -1.574730121254291e+00, -1.785489944539089e+00, -1.666132217211864e+00, -1.539296690259093e+00, -2.277222719796320e+00, -6.101138587242417e-01, -7.319341820012837e-01, -4.607312451918014e-01, -6.523466737864497e-01, -7.093043921268977e-01, -6.618750407759117e-01, 1.904266765840691e-01, -4.392944437502659e-01, 1.779553114427207e-01, -2.564477007125613e+00, -1.970931635125927e-01, -1.970931635125927e-01, 3.108885458526714e-02, 6.244304428636458e-03, 4.791561657907655e-03, 2.338602305123532e-01, 3.232765888651182e-02, 5.723224187239748e-03, -2.642910056093561e-01, -3.274829067196134e-01, -2.365368904536665e-01, -2.834716938582769e-01, -2.917183001185453e-01, -2.917183001185453e-01, -3.131259695458676e-01, -4.601894364764698e-01, -5.965084094646982e-01, -5.885496180801241e-01, -6.170112841054494e-01, -5.238197862821862e-01, -8.208428487704414e-01, -4.325387450176861e-01, -2.698058140873601e-01, -5.164678564621753e-01, -1.756270196870701e-01, -1.756270196870708e-01, -5.706284779459792e-01, 5.456316840826849e-02, 6.976678418831492e-02, -1.506429775314377e-01, 1.925948612157077e-01, 1.906302611945547e-03, 1.348235702767648e-02, 1.784392018024173e-03, 3.340983251230420e-03, 2.145893861439814e-03, 4.907293926326864e-03, 4.907293926326629e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_mn12_sx_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_mn12_sx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.195681538758111e-07, -1.195710862660731e-07, -1.195829476881023e-07, -1.195353751488885e-07, -1.195697051285035e-07, -1.195697051285035e-07, -4.617246736018500e-06, -4.628764634207793e-06, -4.978230979291405e-06, -4.840704173881100e-06, -4.620365096809762e-06, -7.015992586847000e-06, -1.991377815159072e-02, -2.122084631376366e-03, -1.768484300154142e-03, -1.985327062797795e-03, -2.130037197821549e-03, -2.130037197821549e-03, -1.437178604079983e+00, -1.469865870261592e+00, -1.740175266038626e-02, -1.675342770354122e-01, -1.446089447945276e+00, -1.446089447945276e+00, -6.301348101342696e+01, -6.231544341289425e+01, -1.471115325421955e+01, -2.304226262268884e+01, -6.516705438163171e+01, -6.516705438161128e+01, -3.834380852786133e-05, -3.863523358192065e-05, -3.837608730117372e-05, -4.378736513706775e-05, -3.848957755844610e-05, -3.848957755844610e-05, 1.391329973086496e-05, 8.930138884092270e-06, 1.553234878521227e-05, 1.234641729251220e-05, 7.367986136719864e-06, -2.427455155125197e-05, -4.134209178038269e-03, -9.544322833309866e-03, -7.529400122225982e-03, -2.894309336235920e-03, -3.771721696277892e-03, -5.521286178331142e-03, -2.956971168005616e+02, -2.772799056061009e-01, -3.087673833470158e+02, -4.216623325488228e-04, -4.619185212459217e-01, -4.619185212459217e-01, -7.284024883830389e+07, -2.903193939303496e+01, -1.139038851783023e+02, -2.300889001911984e+03, -6.192702315783895e+07, -3.578056451459432e+01, -1.342142299458875e-01, -7.685378296178971e-02, -1.021314687287973e-01, -1.096952308157108e-01, -1.015381386370802e-01, -1.015381386370802e-01, -1.166607919827601e-01, -4.731193574569051e-03, 2.774695454719128e-03, -5.198872431251072e-03, 1.764565313256773e-03, -4.236883139567492e-03, -6.730273040363167e-03, -3.659058574689894e+00, -2.816122934482126e-01, -1.650163831050269e-01, -1.955606088901636e-01, -1.955606088901633e-01, -2.082895083094203e-02, -1.495944070145113e+01, -9.810821403387875e+00, -9.941520337850344e-02, -7.146836811457496e+02, -4.177004644518083e+00, -2.479198049706198e+01, -3.225101636428372e+01, -6.329303349885684e+01, -5.019175762442035e+00, -5.032391018168231e+01, -5.032391018167521e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_mn12_sx_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_mn12_sx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-8.294042928495893e-03, -8.294404538031791e-03, -8.295969695293559e-03, -8.290090698578684e-03, -8.294233527371665e-03, -8.294233527371665e-03, -1.624246402019547e-02, -1.625096728101207e-02, -1.650399914581346e-02, -1.640610731931368e-02, -1.624479608402009e-02, 8.755218335311890e-03, 9.211795133287128e-02, 3.364482556188153e-02, 4.032289379393755e-02, 3.780403894751739e-02, 3.344928640428047e-02, 3.344928640428047e-02, 2.145631013130979e-01, 2.055104329981180e-01, 8.930119884155716e-02, 1.419110186143817e-01, 2.120518572483958e-01, 2.120518572483958e-01, 5.755269251283261e-04, 6.555076016801396e-04, 1.429240905350180e-02, 2.286235542440452e-05, 6.646980523291067e-04, 6.646980523293801e-04, 2.133390322457672e-02, 2.031662077723012e-02, 2.122251301110018e-02, -6.475068689747081e-02, 2.082649564887924e-02, 2.082649564887924e-02, -3.842812825469675e-03, -6.779865967051083e-03, -2.493048982057536e-03, -4.906393547138344e-03, -7.503022865293568e-03, 8.069088115962927e-03, 2.114832902862702e-02, 5.614154202387564e-02, -5.804210572393541e-03, 3.166573672887717e-02, 4.609636275498363e-02, 4.522995106048675e-02, 8.168690313158897e-02, 1.898235419645794e-01, 9.066506904069685e-02, 8.370047404351515e-02, 1.486178352033647e-01, 1.486178352033647e-01, 2.717730231230027e-05, 3.860020072259118e-05, 6.423853729959954e-05, 2.490615261121541e-02, 3.128651299031932e-05, 3.604289158597347e-05, 2.506507204150325e-01, -4.182558105972954e-02, -2.609404637696803e-01, 9.126632949311324e-02, 4.930330970041898e-02, 4.930330970041898e-02, 1.561615528748157e-01, -1.523844540942326e-02, 8.537279294489176e-03, -1.131259604201614e-02, 8.375607681600785e-03, -5.603911814177549e-03, 7.802644153992710e-02, 2.687193016643502e-01, 9.217705792031873e-02, 1.402570011863045e-01, 1.684604147826562e-02, 1.684604147826572e-02, 7.817275688144339e-02, 1.070846344235306e-02, 2.241599845180610e-02, -8.996672591404918e-02, 7.796175125854707e-02, 8.061905708592616e-02, 3.590475552684368e-04, 8.891167145460873e-07, 1.192044715242666e-05, 8.488455184579745e-02, 3.118928716746012e-05, 3.118928716728906e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
