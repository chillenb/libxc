
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_mn12_sx_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_mn12_sx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.110754866965741e+01, -2.110752692773534e+01, -2.110800246992602e+01, -2.110837851430848e+01, -2.110753199972611e+01, -2.110753199972611e+01, -2.664382630377833e+00, -2.664293270343272e+00, -2.661811122077320e+00, -2.664532907536280e+00, -2.664361963591540e+00, -2.664361963591540e+00, -3.956960660625148e-01, -3.948640832329949e-01, -3.757001372336957e-01, -4.007945266325443e-01, -3.954218251257051e-01, -3.954218251257051e-01, -2.063623354573313e-01, -2.083713664919133e-01, -1.416187022620213e-01, -2.905898246106033e-02, -2.068665394888572e-01, -2.068665394888572e-01, 8.556163997762104e-03, 8.936372050984643e-03, 3.318176216898949e-02, 4.291584690566716e-03, 8.853854104574285e-03, 8.853854104574285e-03, -4.739680794839225e+00, -4.719414917012813e+00, -4.737755327910067e+00, -4.721994352835146e+00, -4.729185591098293e+00, -4.729185591098293e+00, -1.514165676381116e+00, -1.532049836973503e+00, -1.508665265741141e+00, -1.522977463003645e+00, -1.532677322780976e+00, -1.532677322780976e+00, -4.366174424319301e-01, -4.850881848081259e-01, -4.040247668112335e-01, -4.310593442342268e-01, -4.637430237015794e-01, -4.637430237015794e-01, 3.386650318204750e-02, -1.589592952369244e-01, 3.003732484724137e-02, -1.203243158565412e+00, -1.151065691838768e-02, -1.151065691838768e-02, 4.144165538571889e-03, 4.708162940042537e-03, 3.584406864261724e-03, 4.785088330250281e-02, 4.318730424036407e-03, 4.318730424036379e-03, -3.452184726539128e-01, -3.951891494070466e-01, -3.773338965392217e-01, -3.630941193220854e-01, -3.702136941207342e-01, -3.702136941207342e-01, -3.364969542717294e-01, -3.848791541717612e-01, -4.041676416145650e-01, -4.253285244734133e-01, -4.165582090157946e-01, -4.165582090157945e-01, -5.036391953744046e-01, -2.445998208076709e-01, -2.822167811142855e-01, -2.896846655981629e-01, -2.894504253685352e-01, -2.894504253685353e-01, -3.541849232270589e-01, 2.983230249100912e-02, 4.046810310299419e-02, -2.614787957210356e-01, 3.702219819579414e-02, 3.702219819579400e-02, 9.981215532806086e-03, 1.343752526793554e-03, 2.513884377140218e-03, 3.643204853570508e-02, 3.700553270326055e-03, 3.700553270326045e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_mn12_sx_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_mn12_sx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-7.477423444319464e+00, -7.476167353158919e+00, -7.471313800750436e+00, -7.491780425813765e+00, -7.476755825504058e+00, -7.476755825504058e+00, -2.575334156549427e+00, -2.574865551653274e+00, -2.561659089940274e+00, -2.574163288987636e+00, -2.575167730529357e+00, -2.575167730529357e+00, -7.451062261596463e-01, -7.439842807623294e-01, -7.186157148109568e-01, -7.119940658787710e-01, -7.446669357917766e-01, -7.446669357917766e-01, -2.310229414638577e-01, -2.128706620903385e-01, -1.128190448858713e+00, -2.612023178660771e-01, -2.253566216186712e-01, -2.253566216186712e-01, 1.202173229503886e-02, 1.263995029690617e-02, 6.527385085663777e-02, 5.741313291152256e-03, 1.252187135519330e-02, 1.252187135519261e-02, 1.740840539847743e+00, 1.856580268213574e+00, 1.753415709827954e+00, 1.843353592147909e+00, 1.799054994199907e+00, 1.799054994199907e+00, -2.153956464274684e+00, -2.156644566151530e+00, -2.174582755858572e+00, -2.174489787748853e+00, -2.130629855620279e+00, -2.130629855620279e+00, -6.260347667616095e-01, -6.019843255994333e-01, -5.340975749953574e-01, -6.503703984697878e-01, -6.909600991303917e-01, -6.909600991303917e-01, -5.099731353756695e-02, -4.148403492344863e-01, -6.603284623853049e-02, -1.323321386604072e+00, -2.065785371432211e-01, -2.065785371432211e-01, 5.536626996606649e-03, 6.315053606173670e-03, 4.815064195131072e-03, 8.264918779324194e-02, 5.805759639974114e-03, 5.805759639974114e-03, -2.572130560855755e-01, -3.021329577345487e-01, -2.791063427900643e-01, -2.667210894297329e-01, -2.723135326769585e-01, -2.723135326769590e-01, -2.798710166586935e-01, -4.649922597334240e-01, -5.929326184145256e-01, -5.608769786119059e-01, -6.031127233959750e-01, -6.031127233959751e-01, -7.004817167516723e-01, -3.636491889341182e-01, -2.399833383898222e-01, -2.256470209294874e-01, -1.784417859467152e-01, -1.784417859467163e-01, -3.368273837235314e-01, 5.768806367235312e-02, 7.698833445730312e-02, -2.483875285793153e-01, -7.139632255269145e-03, -7.139632255270565e-03, 1.436036875770634e-02, 1.787498837899926e-03, 3.345170287043555e-03, -7.161167215677623e-03, 4.971188472571428e-03, 4.971188472571444e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_mn12_sx_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_mn12_sx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.019652463756048e-07, -1.019680695090935e-07, -1.019789493451782e-07, -1.019330992462138e-07, -1.019667451372180e-07, -1.019667451372180e-07, -1.062415533970885e-05, -1.063308680148791e-05, -1.090316600997255e-05, -1.079732797947783e-05, -1.062642230194474e-05, -1.062642230194474e-05, -1.201002895246567e-02, -1.204565847384055e-02, -1.216386493012816e-02, -1.126199448377888e-02, -1.202244899449677e-02, -1.202244899449677e-02, -1.838420005542649e+00, -1.915273889950166e+00, -9.979908976995862e-03, -8.882084318585892e-02, -1.865879732522465e+00, -1.865879732522465e+00, -6.555252857319387e+01, -6.550245341814896e+01, -1.808359009372013e+01, -4.772942740083294e+01, -6.804501797136037e+01, -6.804501797136045e+01, -3.837805788633914e-05, -3.866930863446793e-05, -3.840988541488039e-05, -3.863618473239328e-05, -3.852432278521579e-05, -3.852432278521579e-05, -3.026643616192122e-05, -3.358892443708836e-05, -2.708026379327790e-05, -2.945012281292907e-05, -3.695681031430065e-05, -3.695681031430065e-05, -7.617045318590609e-03, -1.432967968002683e-02, -1.292671069544265e-02, -6.620890478210055e-03, -6.697013351506343e-03, -6.697013351506343e-03, -1.427223985763229e+00, -3.872130243143861e-01, -1.363153763277354e+00, -5.257328426743911e-04, -2.413510005471489e-01, -2.413510005471489e-01, -5.063846098436824e+01, -5.065972577913277e+01, -1.449158072295465e+02, -1.063615874730642e+01, -7.480037551338687e+01, -7.480037551314062e+01, -1.373778610479188e-01, -7.913456027809769e-02, -9.654705627049347e-02, -1.124954056746271e-01, -1.042147598339771e-01, -1.042147598339771e-01, -1.228522365909987e-01, -5.912342791169423e-03, 1.312288601571123e-03, -7.484495080527036e-03, -8.453720672603055e-05, -8.453720672598943e-05, -1.031952677900912e-02, -4.124649726668466e-01, -3.651636427576821e-01, -1.553079364883585e-01, -2.633792713937554e-01, -2.633792713937552e-01, -3.097814693466185e-02, -1.699462457082087e+01, -1.208498826189509e+01, -1.542927272289261e-01, -3.930632721903497e+00, -3.930632721903592e+00, -4.900637101766834e+01, -8.763122088965058e+01, -7.535377625601210e+01, -4.686290334710454e+00, -1.093139191311692e+02, -1.093139191312270e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_mn12_sx_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_mn12_sx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.148824469530928e-02, 1.148811269286119e-02, 1.148813636591650e-02, 1.149031933862375e-02, 1.148816949263736e-02, 1.148816949263736e-02, -2.967421737042408e-03, -2.967058146865675e-03, -2.947952596975488e-03, -2.885233789276239e-03, -2.967780990613833e-03, -2.967780990613833e-03, 5.499471176158488e-02, 5.514982234282615e-02, 5.746228239558452e-02, 5.464261413031751e-02, 5.504681769401445e-02, 5.504681769401445e-02, 2.185023178641849e-01, 2.114603806035955e-01, 6.457259041377129e-02, 1.362747300679318e-01, 2.165677532770818e-01, 2.165677532770818e-01, 5.756019787939466e-04, 6.556259918776518e-04, 1.439982150006204e-02, 2.287120157565555e-05, 6.648019541497664e-04, 6.648019541500395e-04, 2.081562662069810e-02, 1.979933037230517e-02, 2.071088838016887e-02, 1.992093498041114e-02, 2.029986596848426e-02, 2.029986596848426e-02, 6.767935635697951e-03, 7.139513543253563e-03, 6.791520976398249e-03, 6.993700903466489e-03, 7.061003493349049e-03, 7.061003493349049e-03, 4.133620106684418e-02, -7.206206522577276e-04, 2.867342134731096e-02, 5.197942894049457e-02, 5.408135682373327e-02, 5.408135682373327e-02, 8.102874591539559e-02, 1.886148049461635e-01, 9.009667731884004e-02, 7.062658843934522e-03, 1.471935171803944e-01, 1.471935171803944e-01, 3.132812919005545e-05, 3.861514092007784e-05, 6.424945300679600e-05, 2.681026930211897e-02, 3.606068568541602e-05, 3.606068568529553e-05, 1.262900645283740e-01, -1.088338738004263e-01, -6.815396409784460e-02, -8.137332594317767e-03, -4.198692593802457e-02, -4.198692593802454e-02, -4.899862624950686e-02, -8.951764232818134e-03, 1.483473429827423e-02, -2.134842964982678e-02, 1.043206495403503e-02, 1.043206495403526e-02, 3.949282900777171e-02, 1.583240765136503e-01, 1.013623564776130e-01, 2.300376299897506e-02, 4.283024147199446e-02, 4.283024147199436e-02, -2.644008406583368e-03, 1.074998605614447e-02, 2.265712846522698e-02, 5.438447807941894e-03, 8.095908291956666e-02, 8.095908291956955e-02, 3.598775778177693e-04, 8.891701275783208e-07, 1.192096089347097e-05, 8.520708472372540e-02, 3.120322945838871e-05, 3.120322945821779e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
