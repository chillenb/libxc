
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_mn15_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_mn15", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [4.611929836365530e+00, 4.612686058241568e+00, 4.615755026208727e+00, 4.604560336702463e+00, 4.610466423927385e+00, 4.610466423927385e+00, -2.420029145773953e+00, -2.419574089580641e+00, -2.407594416761496e+00, -2.412675708317725e+00, -2.411863966907969e+00, -2.417790611583033e+00, -4.758058880079074e-01, -6.887043586079571e-01, -7.370921367323557e-01, -7.112789073406652e-01, -7.171879294721574e-01, -7.171879294721574e-01, -2.065109759698440e-01, -2.070803366872636e-01, -6.963062795337989e-01, -1.551208469444285e-01, -1.837073035741889e-01, -1.837073035741889e-01, 7.951124507927293e-03, 8.311107500621756e-03, 1.737812428778924e-02, 4.839047843917185e-03, 5.971460161961872e-03, 5.971460161961872e-03, 5.486237696582563e-01, 5.872454154535169e-01, 5.508371556823882e-01, 2.317167185704854e+00, 5.679388201649807e-01, 5.679388201649807e-01, -1.465892592172277e+00, -1.444919618624215e+00, -1.482569014569168e+00, -1.463986934915781e+00, -1.445696255753143e+00, -1.443540355096593e+00, -3.362645794526113e-01, -2.745170254381757e-01, -3.537846106076245e-01, -3.213908912996261e-01, -3.293834099588675e-01, -2.701560959543504e-01, 6.581716313196573e-02, -2.255745304294351e-01, 6.690679525721122e-02, -9.913779857069063e-01, -1.075541725850154e-01, -1.075541725850157e-01, 4.631743584681751e-03, 4.738250474080472e-03, 3.672815831710956e-03, 6.219538632647871e-02, 5.389588530376650e-03, 4.382883499801348e-03, 6.721336495093995e-02, -6.595636049986919e-02, 3.303834608513288e-02, 1.260872589691959e-02, -7.240690655303969e-03, -7.240690655303969e-03, 4.547352858777432e-02, -3.038375227282434e-01, -2.757965042687281e-01, -2.242475105857927e-01, -2.562369830670015e-01, -2.034792055170948e-01, -3.214084856229277e-01, -4.974254366860117e-02, -2.888427932789719e-01, -1.743161134606045e-01, -2.769975767067927e-01, -2.769975767067927e-01, -2.386802077831338e-01, 1.802022992878198e-02, 9.775860080800254e-03, -2.264249844281463e-01, 6.418027044541542e-02, -3.432480083035442e-02, 1.066259923697666e-02, 1.326871955254804e-03, 2.733665867073627e-03, -2.672704055852915e-02, 4.072762208615798e-03, 4.072762208615796e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_mn15_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_mn15", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [4.629757951549016e+01, 4.629894953085277e+01, 4.630458810774033e+01, 4.628429655718623e+01, 4.629499181409189e+01, 4.629499181409189e+01, -3.496342924151967e-01, -3.486662096974978e-01, -3.230221112121419e-01, -3.333945630085960e-01, -3.323063754240113e-01, -1.989610604730038e+00, -4.890859862523305e-01, -8.078573374988568e-02, -4.998102740292495e-02, -6.312278824610978e-02, -5.997261951809912e-02, -5.997261951809912e-02, -1.082840094917344e-01, -1.000906220193521e-01, -7.209305407856262e-01, -1.877127628493995e-01, -1.725477960071367e-01, -1.725477960071372e-01, 1.020885417926583e-02, 1.064057269658131e-02, 8.466235534265548e-03, 6.333708348374805e-03, 7.764988314450763e-03, 7.764988314450763e-03, 1.073136569023331e+01, 1.080157949808010e+01, 1.073539256497839e+01, 1.143828112613228e+01, 1.076657756557154e+01, 1.076657756557154e+01, -7.075698772853343e-01, -6.561711760132549e-01, -7.458348738217334e-01, -7.019583691012703e-01, -6.590962404743199e-01, -1.045479685348155e+00, -2.047893745962271e-01, 6.159988487647120e-03, -1.930564871747527e-01, -1.930185976624492e-01, -1.891415655749049e-01, -1.389260906982581e-01, 4.211967618411074e-02, -1.819867043280976e-01, 4.948240687723267e-02, 8.925153414334776e-02, -1.634963866160749e-01, -1.634963866160741e-01, 6.149258308593940e-03, 6.205643286625710e-03, 4.822365475323831e-03, 6.427001045858857e-02, 7.147787371024508e-03, 5.741836960055406e-03, 3.951370215589544e-01, 3.184095149455243e-01, 3.393529436119127e-01, 3.760365341648519e-01, 3.650681003135520e-01, 3.650681003135520e-01, 3.760145520401308e-01, -1.703423607486714e-01, -1.458370727017539e-01, 4.294081135613315e-03, -9.151844073435429e-02, -4.256720179227971e-02, -8.019056758841074e-02, -1.787754754760608e-01, -7.095963239395842e-02, -2.536545187376821e-01, -4.537992257151233e-02, -4.537992257151229e-02, -2.639050332472318e-01, 1.043320847692452e-02, -9.664479841225865e-03, -7.482283375505873e-02, 5.241978649828227e-02, -8.632130036417680e-02, 1.345185275561260e-02, 1.761740298553252e-03, 3.609147993641381e-03, -7.555371461680224e-02, 5.341287284716981e-03, 5.341287284716994e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_mn15_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_mn15", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.645067849977420e-08, -4.645220756556248e-08, -4.645802586580203e-08, -4.643543419571737e-08, -4.644740814270433e-08, -4.644740814270433e-08, -2.276961513207961e-06, -2.281512513652755e-06, -2.402451321328776e-06, -2.352249613307387e-06, -2.358824588675656e-06, 2.107652635487091e-06, -1.115766118536035e-02, -3.778591393191009e-03, -4.863930926796320e-03, -4.435853966275276e-03, -4.529396708973217e-03, -4.529396708973217e-03, -1.669774154274538e+00, -1.637348832229806e+00, -5.517342529441179e-03, -1.809803357468772e+00, -1.887305817679861e+00, -1.887305817679861e+00, 1.022473787318964e+00, 1.011413031105425e+00, -1.448609061611123e+00, 1.061462841168821e+00, 1.324729238885009e+00, 1.324729238885009e+00, -1.888103963265722e-05, -1.902216523358178e-05, -1.888925015477125e-05, -1.828940333573003e-05, -1.895161366172518e-05, -1.895161366172518e-05, -2.332788233641319e-05, -2.450195253815291e-05, -2.263025901038005e-05, -2.339837844076358e-05, -2.446524869447273e-05, 2.436541778021790e-05, -1.164398821397168e-02, -2.430776406455568e-02, -1.020346897964458e-02, -1.387868879898626e-02, -1.311579222596920e-02, -1.381395769519630e-02, -8.879418239352948e+01, -1.052081718477652e+00, -1.223683911623046e+02, -2.239078113949308e-04, -2.624017396695302e+00, -2.624017396695304e+00, -1.486711532512031e+08, 9.468007192161204e-01, 8.375734344420385e+00, -6.290778569154680e+02, -7.997846388276315e+07, 3.031317886053604e+00, -9.824043220257103e-02, -7.471457640745052e-02, -7.511798790260318e-02, -8.904734783555196e-02, -8.555946238417191e-02, -8.555946238417191e-02, -1.029012010212377e-01, -1.835501066868863e-02, -2.477424420737055e-02, -4.350343132983313e-02, -3.205862447713335e-02, -2.774420091473515e-02, -1.568560197554733e-02, -2.316743977191193e+00, -3.280630071338677e-01, -2.091856307745186e-01, -1.874695840984448e-01, -1.874695840984450e-01, -4.899460575581643e-02, -1.393001885237457e+00, -1.710963078628226e+00, -1.075724098694002e-01, -2.360935290680690e+02, -3.136429924187117e+00, 2.931973597512240e-01, 1.496959565812389e+00, 3.902678557616424e+00, -3.324735622698995e+00, 4.434681424127645e+00, 4.434681423974836e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_mn15_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_mn15", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-2.334793642327636e-02, -2.334873223918035e-02, -2.335190701590024e-02, -2.334013252214598e-02, -2.334635224254701e-02, -2.334635224254701e-02, -2.203672918234700e-02, -2.204483987423637e-02, -2.226004168633327e-02, -2.217116570178741e-02, -2.218240554221328e-02, -1.171626262114848e-02, -2.046339802518125e-02, -5.054615416657635e-02, -4.669036254046657e-02, -4.864660508218653e-02, -4.821343385240622e-02, -4.821343385240622e-02, 6.142216662599180e-02, 5.588342315708301e-02, -1.315471858847554e-02, 7.592918221690485e-02, 8.706425476759977e-02, 8.706425476760025e-02, 6.383277150089826e-05, 7.741556731984724e-05, 5.140902964985308e-03, 9.154846659040930e-06, 2.515703211410864e-05, 2.515703211410864e-05, -7.167567281141242e-02, -7.243042417167396e-02, -7.171901784301342e-02, -1.150282315532422e-01, -7.205298827285568e-02, -7.205298827285568e-02, -2.528768029189419e-02, -2.636426636700685e-02, -2.449238783101274e-02, -2.540265777736342e-02, -2.630496558200404e-02, -2.222093560093925e-02, -4.699274081926468e-02, -1.017745156142331e-01, -5.668319984234228e-02, -5.014096159066093e-02, -4.763850367285679e-02, -1.019286506333246e-01, 1.454478837153741e-02, 6.103574857828517e-02, 1.263051449008317e-02, -2.630982049131193e-02, 7.820504964400077e-02, 7.820504964400023e-02, 7.807356005857524e-07, 7.564205453116044e-06, 2.745681849758243e-05, 6.033902629397177e-03, 4.909704139729829e-06, 1.837045879398939e-05, -8.583620928958804e-01, -5.108109267258200e-01, -7.536130385284189e-01, -7.119998284268321e-01, -6.600350408748483e-01, -6.600350408748483e-01, -8.340675709227124e-01, -6.122139945941480e-02, -6.588418993415603e-02, -1.458974689890785e-01, -8.821551015474946e-02, -1.801225662971738e-01, -6.349693711850660e-02, 4.011686309778588e-02, -1.908717853700522e-02, 1.702638600095891e-04, -5.860200283668252e-02, -5.860200283668245e-02, -3.275429317178342e-02, 4.631106819828634e-03, 9.341906110701809e-03, -9.388880481487907e-02, 1.462340419572809e-02, 4.386422937063181e-02, 8.455479173129162e-05, 1.793374576254559e-07, 4.729192839906531e-06, 4.140362304866502e-02, 2.076863364551745e-05, 2.076863364554852e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
