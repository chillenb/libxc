
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_revm06_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revm06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.196972012972835e+01, -1.196970368486834e+01, -1.196968396729179e+01, -1.196992541247959e+01, -1.196979138845396e+01, -1.196979138845396e+01, -2.103447635317359e+00, -2.103431612524911e+00, -2.103144263348089e+00, -2.104458124501304e+00, -2.103676174419901e+00, -2.103676174419901e+00, -4.168406701239598e-01, -4.169017644210541e-01, -4.191115131142084e-01, -4.237403694441702e-01, -4.220932783930655e-01, -4.220932783930655e-01, -1.326226708075025e-01, -1.337717224827815e-01, -4.382726441443563e-01, -1.071788280526889e-01, -1.112861363481559e-01, -1.112861363481559e-01, -1.818863579273422e-02, -1.912940299929597e-02, -9.217636906903433e-02, -1.054827003138504e-02, -1.323550593087034e-02, -1.323550593087034e-02, -2.751649061831212e+00, -2.747918946015051e+00, -2.751446036767519e+00, -2.748155137899749e+00, -2.749779151031774e+00, -2.749779151031774e+00, -1.292961885445657e+00, -1.299675246606128e+00, -1.294397600771227e+00, -1.300283318157916e+00, -1.296029785233050e+00, -1.296029785233050e+00, -3.466493695959719e-01, -3.416383364526815e-01, -3.283547636039204e-01, -3.188801925368847e-01, -3.472223557275978e-01, -3.472223557275978e-01, -1.258871303582388e-01, -1.337361724293816e-01, -1.264943147078947e-01, -1.063866571585201e+00, -1.024981488840283e-01, -1.024981488840282e-01, -8.145151894239918e-03, -1.031311562580243e-02, -7.878191625614230e-03, -1.170990673383218e-01, -9.492741243063488e-03, -9.492741243063494e-03, -3.104532829164131e-01, -2.818831277169631e-01, -2.849004777775773e-01, -2.930235032844876e-01, -2.882429675005066e-01, -2.882429675005066e-01, -2.933740954353218e-01, -3.103676017902346e-01, -3.052967763714727e-01, -2.962624649015679e-01, -3.014342654502113e-01, -3.014342654502113e-01, -3.644137510742717e-01, -1.688262788325724e-01, -1.931251800361244e-01, -2.223674948804535e-01, -2.058154725338837e-01, -2.058154725338836e-01, -2.875953685054285e-01, -8.932163435237220e-02, -1.103973242565587e-01, -2.082445905887808e-01, -1.114638666256765e-01, -1.114638666256766e-01, -2.560033613808106e-02, -2.760726047193722e-03, -5.790593442401260e-03, -1.105161239311695e-01, -8.783598716818733e-03, -8.783598716818721e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_revm06_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revm06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.258846855109493e+01, -1.258842130135338e+01, -1.258822777157974e+01, -1.258892273614718e+01, -1.258855675997870e+01, -1.258855675997870e+01, -2.455482532307711e+00, -2.455400328825694e+00, -2.453102353883995e+00, -2.453235275238904e+00, -2.453400936971311e+00, -2.453400936971311e+00, -4.484846796948407e-01, -4.481476322454044e-01, -4.479999950876837e-01, -4.389602872519018e-01, -4.413076735486207e-01, -4.413076735486207e-01, -1.371728809776172e-01, -1.349089354777644e-01, -6.559143297417142e-01, -4.439847113736879e-02, -1.081068864078803e-01, -1.081068864078798e-01, -2.405220295522092e-02, -2.526834066454603e-02, -9.875453887830818e-02, -1.403017940655412e-02, -1.756863106688821e-02, -1.756863106688821e-02, -2.682392420192672e+00, -2.675844039088430e+00, -2.681986609347973e+00, -2.676210674868367e+00, -2.679100124765508e+00, -2.679100124765508e+00, -1.311996877955474e+00, -1.326232599454885e+00, -1.296656169521317e+00, -1.311173866720279e+00, -1.326623838888417e+00, -1.326623838888417e+00, -3.638416354705719e-01, -3.865094560686994e-01, -3.706562507961432e-01, -3.671807368805189e-01, -3.668549495195253e-01, -3.668549495195253e-01, -1.764071842289492e-02, -1.341925745360827e-01, -2.757516304427324e-02, -1.239492688385528e+00, -1.487645220546907e-02, -1.487645220546890e-02, -1.084548180047742e-02, -1.371926249869676e-02, -1.046591036187222e-02, -7.640501219497854e-02, -1.261404070214487e-02, -1.261404070214476e-02, -5.081604433615448e-01, -3.678742540042858e-01, -4.240685945781947e-01, -4.720459596191313e-01, -4.487411332524741e-01, -4.487411332524741e-01, -4.877622419162485e-01, -3.083000220929222e-01, -3.083745006312311e-01, -3.116713839336881e-01, -3.179899297134604e-01, -3.179899297134604e-01, -4.222920107663578e-01, -1.793971886625740e-01, -1.725185720941793e-01, -2.368827200902121e-01, -1.894565214297182e-01, -1.894565214297181e-01, -3.052183748606689e-01, -9.780686674264359e-02, -1.014483507975786e-01, -2.276391361886092e-01, -2.835676586397722e-02, -2.835676586397797e-02, -3.371230511210879e-02, -3.680061783073142e-03, -7.711011796321235e-03, -3.587503663479604e-02, -1.167169479619526e-02, -1.167169479619513e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_revm06_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revm06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.364156955638950e-09, -4.364108396980416e-09, -4.363855886949216e-09, -4.364577893601498e-09, -4.364204808245671e-09, -4.364204808245671e-09, -6.814576300595052e-06, -6.814576081658138e-06, -6.813252342216570e-06, -6.803447498676357e-06, -6.810637728292554e-06, -6.810637728292554e-06, -4.862824730549010e-03, -4.872693071951516e-03, -5.050072337511767e-03, -4.853089212956097e-03, -4.915074478256023e-03, -4.915074478256023e-03, -5.637278378469680e-01, -5.560252548226202e-01, -2.920432076194881e-03, -9.777182051934257e-01, -7.961142853056203e-01, -7.961142853056200e-01, -8.427632151009169e+00, -8.907794791608433e+00, -4.491762587455142e+00, -7.813754006766541e+00, -9.847614401433406e+00, -9.847614401433429e+00, -1.211007068716412e-06, -1.209340581107252e-06, -1.210902225406983e-06, -1.209432335598243e-06, -1.210179218072543e-06, -1.210179218072543e-06, -5.428529843005400e-05, -5.295136230625640e-05, -5.451631322692957e-05, -5.332454640028241e-05, -5.342770202886378e-05, -5.342770202886378e-05, -8.091304472102162e-03, -6.010525238899046e-03, -1.132931072303852e-02, -1.047220861964232e-02, -7.602544906379474e-03, -7.602544906379474e-03, -1.817096440113072e+00, -3.881938635057885e-01, -2.146858578793342e+00, -7.800680292006878e-05, -1.567977893250261e+00, -1.567977893250260e+00, -1.066379401862109e+01, -9.368386105578720e+00, -5.784895885671308e+01, -4.132184443775365e+00, -2.726589069374333e+01, -2.726589069374327e+01, -8.060411394009186e-03, -7.346189169864052e-03, -7.419986263136879e-03, -7.622703536372073e-03, -7.503256637881100e-03, -7.503256637881100e-03, -8.867876315121316e-03, -1.463773512334826e-02, -1.273640382445172e-02, -1.093571215330240e-02, -1.186575343791257e-02, -1.186575343791257e-02, -5.081825311450467e-03, -2.076786406587045e-01, -1.306792006885842e-01, -5.970348656333878e-02, -8.996493119657988e-02, -8.996493119657992e-02, -2.081830301026793e-02, -4.109184843006787e+00, -3.802951469803057e+00, -7.342943884916805e-02, -3.567908508914594e+00, -3.567908508914596e+00, -7.025492225086004e+00, -4.641765382998522e+01, -2.168587821209919e+01, -3.757613654483022e+00, -3.417682297911145e+01, -3.417682297911151e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_revm06_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revm06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_revm06_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revm06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-9.659516946242549e-04, -9.660182485574891e-04, -9.662885104749873e-04, -9.653041057888787e-04, -9.658231921155558e-04, -9.658231921155558e-04, 5.765553801602063e-04, 5.756270338753332e-04, 5.503985761764423e-04, 5.592854179208042e-04, 5.589867795223339e-04, 5.589867795223339e-04, 2.771090578979826e-03, 2.834827863151654e-03, 4.972553048969915e-03, 3.668432656986723e-03, 3.969434211688824e-03, 3.969434211688824e-03, 3.323956270923950e-02, 2.995126441022414e-02, 9.284850780870307e-03, -1.645264862073377e-02, 2.454412634489080e-02, 2.454412634489130e-02, -1.160296648215867e-04, -1.408299774012293e-04, -9.723957334492803e-03, -1.639739340548460e-05, -4.530804957013577e-05, -4.530804957013576e-05, -9.897818853288514e-03, -1.003397368272802e-02, -9.905775707948780e-03, -1.002588736355576e-02, -9.966186213109013e-03, -9.966186213109013e-03, 1.089820259494202e-03, 1.113518167158138e-03, 1.012675850189596e-03, 1.070285840624039e-03, 1.125366715071265e-03, 1.125366715071265e-03, -1.683440236233098e-02, -3.571646047623580e-02, -9.471602795125799e-04, -1.641126831491953e-02, -1.957902107335820e-02, -1.957902107335820e-02, -5.255552134336745e-02, 2.308241450988489e-02, -5.095249119374744e-02, -5.963238926990138e-03, -4.388749114895888e-02, -4.388749114895948e-02, -5.157090906988330e-06, -1.346702062632408e-05, -4.887844072886653e-05, -3.343963496055061e-02, -3.267582047680907e-05, -3.267582047680908e-05, 4.211031072960712e-01, 1.245674480144440e-02, 1.423533225402405e-01, 2.811989579794841e-01, 2.097743166794290e-01, 2.097743166794290e-01, 3.887463824882433e-01, -1.023580376976233e-02, -2.535348866561135e-02, -4.818033351053091e-02, -2.859752601373669e-02, -2.859752601373669e-02, -2.217215087646867e-02, 2.823239660682127e-02, 7.675035459232879e-03, 6.884086356167493e-03, 1.099183330620351e-03, 1.099183330620361e-03, 1.759799983946492e-03, -8.799783132448556e-03, -1.734997357311780e-02, 1.579485569466222e-03, -5.773796652830322e-02, -5.773796652830263e-02, -1.538013663229019e-04, -3.154571379742133e-07, -8.423139052141978e-06, -5.696575252162705e-02, -3.698302145361085e-05, -3.698302145362474e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
