
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_revm06_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revm06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.127519145057148e+01, -1.127519507590746e+01, -1.127523207425334e+01, -1.127517576620481e+01, -1.127520238202885e+01, -1.127520238202885e+01, -1.927604077282176e+00, -1.927625253835562e+00, -1.928209185387514e+00, -1.928149772665801e+00, -1.927955925861682e+00, -2.284336450330916e+00, -3.572415388955487e-01, -4.922873472661237e-01, -4.913646044540116e-01, -4.899986655994235e-01, -4.904239786796587e-01, -4.904239786796587e-01, -1.345690447038235e-01, -1.361401116220192e-01, -3.708278901408598e-01, -1.132592985373761e-01, -1.161701222820371e-01, -1.161701222820371e-01, -1.818881386776960e-02, -1.912979293322314e-02, -9.247503348188303e-02, -1.054870171734083e-02, -1.323609882118784e-02, -1.323609882118784e-02, -2.752376741390032e+00, -2.748637138513670e+00, -2.752158515398393e+00, -2.630762129780136e+00, -2.750509591140910e+00, -2.750509591140910e+00, -1.074171898618370e+00, -1.084419674270436e+00, -1.066535709391342e+00, -1.075653585849658e+00, -1.083546188905341e+00, -1.320153811840669e+00, -3.596552851764065e-01, -3.553487334857985e-01, -3.508554422214675e-01, -3.451083374714321e-01, -3.593154908916295e-01, -3.253418046049676e-01, -4.186480155549013e-02, -1.361667018119714e-01, -4.225668594964841e-02, -1.145163313047584e+00, -1.052690645582906e-01, -1.052690645582906e-01, -4.506477967790866e-03, -1.031404251196258e-02, -7.878749400670159e-03, -4.216820459617364e-02, -5.234380283419313e-03, -9.493848949323733e-03, -3.120781057367706e-01, -2.832954200349411e-01, -2.807468458519514e-01, -2.945349047897138e-01, -2.897211296192320e-01, -2.897211296192320e-01, -2.964497591344046e-01, -3.120685238873271e-01, -3.074979422847847e-01, -2.988699406409012e-01, -3.039894666665968e-01, -2.818527693363624e-01, -3.829034306362152e-01, -1.052494289788389e-01, -1.977149133478077e-01, -1.905898683539790e-01, -2.127702562395528e-01, -2.127702562395528e-01, -2.516151906232013e-01, -8.944920352966156e-02, -1.110994602153307e-01, -2.183268943849208e-01, -3.710387740147843e-02, -1.135736620013134e-01, -2.561334738465894e-02, -2.760835002875789e-03, -5.790659701903124e-03, -1.116896189910684e-01, -8.784341985294028e-03, -8.784341985294016e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_revm06_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revm06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.353784814572615e+01, -1.353777950650730e+01, -1.353752866836569e+01, -1.353854101860685e+01, -1.353800335370439e+01, -1.353800335370439e+01, -2.678495511321744e+00, -2.678376707675377e+00, -2.675230211946975e+00, -2.676758595006731e+00, -2.676317509546160e+00, -2.312111436892256e+00, -5.224810115900012e-01, -4.173904308062270e-01, -4.335563780562109e-01, -4.219582726095881e-01, -4.243334859106813e-01, -4.243334859106813e-01, -1.383543093193230e-01, -1.361459824906370e-01, -7.315863469881280e-01, -5.188774712748911e-02, -1.132800073035409e-01, -1.132800073035405e-01, -2.405294173090485e-02, -2.526995723384398e-02, -9.987335095516493e-02, -1.403197117762729e-02, -1.757109209753049e-02, -1.757109209753049e-02, -2.681402544655231e+00, -2.674864603145785e+00, -2.681017281663586e+00, -2.852319196054646e+00, -2.678105224198764e+00, -2.678105224198764e+00, -1.531657833940982e+00, -1.542953103237742e+00, -1.521901656348756e+00, -1.533500547818901e+00, -1.541957750403304e+00, -1.315520929098802e+00, -3.503691306898755e-01, -3.685001074954212e-01, -3.515278887180795e-01, -3.364928418782887e-01, -3.537592016026932e-01, -3.970852507490439e-01, -1.250598674453462e-02, -1.368775346862312e-01, -1.233396178560169e-02, -1.139603632940182e+00, -1.905640409475086e-02, -1.905640409475071e-02, -5.987459774364145e-03, -1.372309506295035e-02, -1.046822307420282e-02, -1.957571302579288e-02, -6.912786919712773e-03, -1.261862233015894e-02, -5.065662569500268e-01, -3.661524539359730e-01, -4.287841007024017e-01, -4.705673853957995e-01, -4.472350290406926e-01, -4.472350290406926e-01, -4.847618296253602e-01, -3.069605291431487e-01, -3.061117498037824e-01, -3.084487864630120e-01, -3.151506342089842e-01, -3.442644817218600e-01, -3.990762630255085e-01, -2.037404102553477e-01, -1.731618556981278e-01, -2.719137481650933e-01, -1.875671916908904e-01, -1.875671916908904e-01, -3.459835068632650e-01, -9.829018888919785e-02, -1.039104800774639e-01, -2.201924027013770e-01, -1.094375930816604e-02, -3.343836497280896e-02, -3.376581000084337e-02, -3.680500251966106e-03, -7.711287322119308e-03, -3.885874747936720e-02, -1.167477415326789e-02, -1.167477415326776e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_revm06_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revm06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.038730273100812e-09, -5.038653688748785e-09, -5.038304074813591e-09, -5.039442343699521e-09, -5.038847219556674e-09, -5.038847219556674e-09, -8.265667151748986e-06, -8.265366628520718e-06, -8.256857180138944e-06, -8.257304959779013e-06, -8.260689860842473e-06, -5.471686783378842e-06, -6.611206740164378e-03, -3.054686124296171e-03, -3.166477953281904e-03, -3.170915394747814e-03, -3.168823315649899e-03, -3.168823315649899e-03, -5.334423831020287e-01, -5.209077037965326e-01, -3.820047455608918e-03, -7.400588797034123e-01, -6.630525886625953e-01, -6.630525886625952e-01, -8.276590689106502e+00, -8.617374297148261e+00, -3.564858866112235e+00, -6.100069483759773e+00, -8.478600835458581e+00, -8.478600835458581e+00, -1.210198759135537e-06, -1.208543165198602e-06, -1.210110818495680e-06, -1.343464047790949e-06, -1.209368024493423e-06, -1.209368024493423e-06, -8.425214893040388e-05, -8.147908946803068e-05, -8.638019228911528e-05, -8.383290483117219e-05, -8.172157786186155e-05, -5.061019814349551e-05, -7.347792596235101e-03, -5.454662816289363e-03, -9.503181483793983e-03, -8.596691195139120e-03, -6.956425325529021e-03, -8.847865928961899e-03, -3.175046046437689e+01, -3.587878923473060e-01, -4.542167067796788e+01, -6.503092581691763e-05, -1.321011910451840e+00, -1.321011910451839e+00, -5.906705434516644e+07, -5.393369038633931e+00, -4.356311247410672e+01, -2.588045905959296e+02, -3.179539110546007e+07, -1.672247320273716e+01, -7.958567344681571e-03, -7.256709862544864e-03, -7.685377595385433e-03, -7.527616987009548e-03, -7.410119860336375e-03, -7.410119860336375e-03, -8.646534215378787e-03, -1.441663547538572e-02, -1.249574757618675e-02, -1.069461130956425e-02, -1.160841547194749e-02, -1.393566840823211e-02, -4.496125369351275e-03, -6.182603703141728e-01, -1.205560345779945e-01, -8.481862420558829e-02, -8.118439496551016e-02, -8.118439496551018e-02, -2.848523881155594e-02, -3.664490043595228e+00, -2.888230159992327e+00, -6.452793712675296e-02, -8.549818412777057e+01, -2.792989952807566e+00, -3.945411470225769e+00, -6.613737991544255e+00, -1.894685103893896e+01, -3.217894620138405e+00, -2.383183194002911e+01, -2.383183194002915e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_revm06_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revm06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-8.769998543775284e-04, -8.770652288829018e-04, -8.773279268614900e-04, -8.763608410775123e-04, -8.768711977221763e-04, -8.768711977221763e-04, 8.146517162370983e-04, 8.137558291381871e-04, 7.895587769809494e-04, 7.993966885682410e-04, 7.984333514041800e-04, 3.024192057107872e-04, 4.405554215805662e-03, 6.144062962239545e-04, 3.161740523117675e-03, 1.835466785190912e-03, 2.119466601573975e-03, 2.119466601573975e-03, 3.282940683296790e-02, 2.941494309804934e-02, 9.621810753048906e-03, -1.896203755216018e-02, 2.327635678303608e-02, 2.327635678303659e-02, -1.160706282377960e-04, -1.409214470110503e-04, -9.791654105432090e-03, -1.647611317890990e-05, -4.543998861938508e-05, -4.543998861938508e-05, -9.900989557874633e-03, -1.003714134511948e-02, -9.908882379916968e-03, -9.509263879264852e-03, -9.969388482770744e-03, -9.969388482770744e-03, 1.915996263613296e-03, 1.921516505278806e-03, 1.882287626826310e-03, 1.918295533924252e-03, 1.922943607058998e-03, 1.029926349220905e-03, -1.823156841838931e-02, -3.790774822950835e-02, -2.563792865594861e-03, -1.949003279178826e-02, -2.096229773700417e-02, -1.710209845992227e-02, -2.364603945516842e-02, 2.263491835312204e-02, -2.441462393793960e-02, -6.895122509088073e-03, -4.549553871897557e-02, -4.549553871897618e-02, -1.230006209138688e-05, -1.360959194949088e-05, -4.914818839359358e-05, -2.280343645443954e-02, -7.677272996951743e-05, -3.298452527460226e-05, 4.231041590950250e-01, 1.239297439546158e-02, 1.407258386404479e-01, 2.824651230118845e-01, 2.106789098080573e-01, 2.106789098080573e-01, 3.924104560690672e-01, -1.042836478416294e-02, -2.570598720513491e-02, -4.880076178551073e-02, -2.903898866959815e-02, -2.523853043458784e-02, -2.422936781188971e-02, 3.391572461374311e-02, 6.916280301600472e-03, 1.064555465969546e-02, -9.842260303091519e-05, -9.842260303090777e-05, 4.863299683967269e-03, -8.828828468160929e-03, -1.752792997009575e-02, -1.364822804321933e-04, -2.799982665889519e-02, -5.891514584160540e-02, -1.555488314438014e-04, -3.187376959717486e-07, -8.445066808153918e-06, -5.762969865154551e-02, -3.724206969469665e-05, -3.724206969471054e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
