
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_mn15_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_mn15", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.332785672924317e+00, -2.332156329077225e+00, -2.329863127393854e+00, -2.339186617385002e+00, -2.334230841885625e+00, -2.334230841885625e+00, -2.450804697561723e+00, -2.450449923449961e+00, -2.441135508791770e+00, -2.445188076984905e+00, -2.444451233317346e+00, -2.444451233317346e+00, -5.761305713111742e-01, -5.775470166188130e-01, -6.152380148140617e-01, -6.067778375456714e-01, -6.117026729278725e-01, -6.117026729278725e-01, -2.001578541757151e-01, -1.992709614431281e-01, -8.038210436764963e-01, -1.405189833995233e-01, -1.854381167614263e-01, -1.854381167614261e-01, 7.962853608158352e-03, 8.326550442110290e-03, 1.744460152342214e-02, 4.839586805202015e-03, 6.550876816838993e-03, 6.550876816838992e-03, 5.599723399631175e-01, 5.985452957874482e-01, 5.619544265380058e-01, 5.959904857301372e-01, 5.793808544329162e-01, 5.793808544329162e-01, -1.468542304387119e+00, -1.452051171745509e+00, -1.480436123849625e+00, -1.464520526522948e+00, -1.453611925728613e+00, -1.453611925728613e+00, -3.157061348370770e-01, -2.186982118977507e-01, -3.263716653610186e-01, -2.795973981126865e-01, -3.069680009346262e-01, -3.069680009346263e-01, -6.260805456398623e-02, -2.184308539030340e-01, -4.949646806219468e-02, -7.291453672599167e-01, -1.027289780106642e-01, -1.027289780106642e-01, 3.794286273079697e-03, 4.738570582233138e-03, 3.678219671340207e-03, -3.833421433503769e-03, 4.557741194194125e-03, 4.557741194194132e-03, 8.691142918667691e-02, -5.164179355628618e-02, -9.764239407889513e-03, 3.018209518009052e-02, 9.541275373489623e-03, 9.541275373489649e-03, 8.075329131488437e-02, -3.016575782534128e-01, -2.714578628782820e-01, -2.138701040462616e-01, -2.492869712315569e-01, -2.492869712315569e-01, -2.625332768984379e-01, -2.673134112612536e-01, -2.761057751000422e-01, -2.484067804922314e-01, -2.602961675013659e-01, -2.602961675013659e-01, -2.964029152438645e-01, 1.806771735897639e-02, 1.014218089541979e-02, -2.082800400604221e-01, -3.238779108164060e-02, -3.238779108164050e-02, 1.066649152214258e-02, 1.326851204825766e-03, 2.738533799001536e-03, -2.559609389779053e-02, 4.208455745092840e-03, 4.208455745092833e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_mn15_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_mn15", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([3.865980513802487e+01, 3.867101004377314e+01, 3.866187285270838e+01, 3.867250984863289e+01, 3.866751873413112e+01, 3.868087077398010e+01, 3.864430166847259e+01, 3.865123856749732e+01, 3.866112991274122e+01, 3.866236160929287e+01, 3.866112991274122e+01, 3.866236160929287e+01, -1.002988514675214e+00, -1.002609358191171e+00, -1.002182924013127e+00, -1.001984149845524e+00, -9.852309628244244e-01, -9.818899991168580e-01, -9.962410225669405e-01, -9.951968761625825e-01, -1.004752881317142e+00, -9.799130795028387e-01, -1.004752881317142e+00, -9.799130795028387e-01, -2.804605492459066e-01, -2.849966545048260e-01, -2.785832290036996e-01, -2.845693940109502e-01, -2.567332655940712e-01, -2.445042350326340e-01, -2.408825241260448e-01, -2.423371789724458e-01, -2.968540338592912e-01, -1.836568357416770e-01, -2.968540338592912e-01, -1.836568357416770e-01, -1.110467426144307e-01, -9.251997279259905e-02, -1.033814004413919e-01, -8.259229040625536e-02, -5.417070907502238e-01, -5.230160145877286e-01, -1.535542753810968e-01, -1.643200394216606e-01, -1.100648958013250e-01, -9.928738125071734e-02, -1.100648958013254e-01, -9.928738125071712e-02, 9.944924345270513e-03, 1.045364896418640e-02, 1.033243570514015e-02, 1.092296590727768e-02, 1.039777464961863e-02, 7.455774195142997e-03, 6.381445476070211e-03, 6.284498242054504e-03, 9.037169985821341e-03, 5.456394021121360e-03, 9.037169985821301e-03, 5.456394021121404e-03, 1.073732280709785e+01, 1.073408094750473e+01, 1.080855919970043e+01, 1.080292098700121e+01, 1.074217216812083e+01, 1.073708999293440e+01, 1.080325977202494e+01, 1.079958999209871e+01, 1.077316972773570e+01, 1.076856966677181e+01, 1.077316972773570e+01, 1.076856966677181e+01, -9.622167191850121e-01, -9.647702357227695e-01, -9.862025282511960e-01, -9.878304897309509e-01, -9.509397729027284e-01, -9.576584702528969e-01, -9.781050069420989e-01, -9.835062147120950e-01, -9.766158995091112e-01, -9.777919365172953e-01, -9.766158995091112e-01, -9.777919365172953e-01, -1.808128310282810e-01, -1.772004804588139e-01, 5.334948937794351e-02, 6.986816469331016e-02, -2.046025489979531e-01, -2.006542094144023e-01, -1.833211866140587e-01, -1.474630889249882e-01, -1.433365244495543e-01, -1.705656926762292e-01, -1.433365244495545e-01, -1.705656926762289e-01, -1.127419967271364e-01, -1.134545793384591e-01, -1.720685971531151e-01, -1.712419922146005e-01, -9.119648580111260e-02, -1.041707973578109e-01, 7.741778309169043e-01, 7.752398124777244e-01, -1.447373873361812e-01, -1.558710071491823e-01, -1.447373873361817e-01, -1.558710071491826e-01, 4.895948211556644e-03, 5.075653053973949e-03, 6.161401027826559e-03, 6.247906613852620e-03, 4.690479808232211e-03, 4.945433168186945e-03, -3.252999798080981e-02, -3.682676874387915e-02, 4.798661093674213e-03, 6.407078678164356e-03, 4.798661093674198e-03, 6.407078678164406e-03, 3.822110477832660e-01, 3.850415098598870e-01, 3.131457654744835e-01, 3.189544145652711e-01, 3.451912149195810e-01, 3.502964094173766e-01, 3.664901180356655e-01, 3.703742323086328e-01, 3.565934593677632e-01, 3.610749889615686e-01, 3.565934593677632e-01, 3.610749889615687e-01, 3.573907248667853e-01, 3.602169903417057e-01, -1.686828038843079e-01, -1.698666256914549e-01, -1.419063757057804e-01, -1.389628041752312e-01, 1.166565988384543e-02, 1.499359192926812e-02, -8.488593840257690e-02, -8.182077957636144e-02, -8.488593840257676e-02, -8.182077957636115e-02, -1.897961332296207e-02, 8.396083998474108e-03, -1.243883390928024e-01, -1.223874453427595e-01, -7.134246855954975e-02, -6.779392824432796e-02, -9.293555731663196e-02, -9.452899085321408e-02, -5.622674628920497e-02, -5.623183717382813e-02, -5.622674628920500e-02, -5.623183717382821e-02, -1.432386820412535e-01, -1.463367444910550e-01, 1.069771759437611e-02, 1.054364799337014e-02, -6.526440931179892e-03, -9.880061651304268e-03, -1.032689433410312e-01, -9.800002397733136e-02, -7.243698577897474e-02, -8.721693216289082e-02, -7.243698577897470e-02, -8.721693216289131e-02, 1.326718750562247e-02, 1.362152575613742e-02, 1.759694860733077e-03, 1.763589615129566e-03, 3.499967495178162e-03, 3.711366231400184e-03, -6.833469060202761e-02, -7.602146876912870e-02, 4.554381599777733e-03, 5.920642219263673e-03, 4.554381599777702e-03, 5.920642219263627e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_mn15_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_mn15", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-9.406824460185895e-08, 0.000000000000000e+00, -9.410311081442524e-08, -9.407210001314328e-08, 0.000000000000000e+00, -9.410590526938489e-08, -9.408228763230747e-08, 0.000000000000000e+00, -9.412110347263929e-08, -9.403913795891522e-08, 0.000000000000000e+00, -9.406598523507114e-08, -9.407078281289883e-08, 0.000000000000000e+00, -9.408641107437174e-08, -9.407078281289883e-08, 0.000000000000000e+00, -9.408641107437174e-08, -5.945959128778857e-07, 0.000000000000000e+00, -5.919687043458668e-07, -6.052005371061630e-07, 0.000000000000000e+00, -5.994500425781468e-07, -8.204058453088111e-07, 0.000000000000000e+00, -8.609710781347707e-07, -7.137887845113029e-07, 0.000000000000000e+00, -7.199151117996965e-07, -5.713925107978978e-07, 0.000000000000000e+00, -9.155689719416146e-07, -5.713925107978978e-07, 0.000000000000000e+00, -9.155689719416146e-07, -1.611052607003336e-02, 0.000000000000000e+00, -1.577752578448955e-02, -1.622385022318339e-02, 0.000000000000000e+00, -1.584193383662946e-02, -1.794426282543998e-02, 0.000000000000000e+00, -1.823490390528000e-02, -1.672281188626274e-02, 0.000000000000000e+00, -1.646637289540725e-02, -1.543374973513945e-02, 0.000000000000000e+00, -1.839149184174765e-02, -1.543374973513945e-02, 0.000000000000000e+00, -1.839149184174765e-02, -3.746236518192751e+00, 0.000000000000000e+00, -3.431655355092125e+00, -3.766497557700625e+00, 0.000000000000000e+00, -3.377621601132742e+00, -1.127645304817778e-02, 0.000000000000000e+00, -9.308199715600604e-03, -4.766718134328299e+00, 0.000000000000000e+00, -4.674078417525450e+00, -3.214555482724810e+00, 0.000000000000000e+00, -5.942488467641408e+00, -3.214555482724808e+00, 0.000000000000000e+00, -5.942488467641480e+00, 2.154644655669599e+00, 0.000000000000000e+00, 2.011273869383897e+00, 2.172163973552498e+00, 0.000000000000000e+00, 2.007952142565435e+00, -3.377139587997205e+00, 0.000000000000000e+00, -3.635861327600644e+00, 2.699516238594176e+00, 0.000000000000000e+00, 2.643918772692524e+00, 2.363667089805943e+00, 0.000000000000000e+00, 7.951261426256726e+00, 2.363667089814087e+00, 0.000000000000000e+00, 7.951261425926943e+00, -3.773712132710620e-05, 0.000000000000000e+00, -3.777426196867055e-05, -3.802397212529942e-05, 0.000000000000000e+00, -3.805177179760034e-05, -3.775747264770986e-05, 0.000000000000000e+00, -3.778699554895518e-05, -3.800340505981302e-05, 0.000000000000000e+00, -3.803889796475676e-05, -3.788053694215581e-05, 0.000000000000000e+00, -3.791293673752450e-05, -3.788053694215581e-05, 0.000000000000000e+00, -3.791293673752450e-05, 4.224434039373188e-05, 0.000000000000000e+00, 4.224538112227450e-05, 3.911457381654959e-05, 0.000000000000000e+00, 3.907724554071467e-05, 4.706871798880078e-05, 0.000000000000000e+00, 4.585341905983603e-05, 4.546019559866773e-05, 0.000000000000000e+00, 4.382790568163648e-05, 3.591308926472778e-05, 0.000000000000000e+00, 4.008100266129983e-05, 3.591308926472778e-05, 0.000000000000000e+00, 4.008100266129983e-05, -2.500966323315397e-02, 0.000000000000000e+00, -2.581651381898099e-02, -4.310437896555148e-02, 0.000000000000000e+00, -4.537791488682513e-02, -3.368947187007331e-02, 0.000000000000000e+00, -2.775320330610127e-02, -3.276617706383685e-02, 0.000000000000000e+00, -3.153823230071909e-02, -2.754287556223306e-02, 0.000000000000000e+00, -2.753496339857035e-02, -2.754287556223307e-02, 0.000000000000000e+00, -2.753496339857038e-02, -5.001211673477532e+00, 0.000000000000000e+00, -5.073962312946972e+00, -2.299733231534371e+00, 0.000000000000000e+00, -2.277902646855591e+00, -5.360364179004402e+00, 0.000000000000000e+00, -5.322592074529319e+00, -4.653643979839017e-04, 0.000000000000000e+00, -4.668922175718613e-04, -5.547696850251111e+00, 0.000000000000000e+00, -6.619874694550067e+00, -5.547696850251135e+00, 0.000000000000000e+00, -6.619874694550069e+00, 4.180911456907096e+00, 0.000000000000000e+00, 3.578549819404103e+00, 3.315374484862026e+00, 0.000000000000000e+00, 3.042962615048641e+00, 2.076088180904704e+01, 0.000000000000000e+00, 2.274239551160275e+01, -6.191686166266368e+00, 0.000000000000000e+00, -6.062851152100033e+00, 1.026807340564244e+01, 0.000000000000000e+00, 9.057451065645619e+00, 1.026807340580327e+01, 0.000000000000000e+00, 9.057451065717617e+00, -1.920605728678228e-01, 0.000000000000000e+00, -1.914942130569128e-01, -1.463521677888918e-01, 0.000000000000000e+00, -1.464250053185140e-01, -1.609009648296260e-01, 0.000000000000000e+00, -1.608973503255559e-01, -1.742706655924376e-01, 0.000000000000000e+00, -1.738574109199479e-01, -1.674341405804544e-01, 0.000000000000000e+00, -1.672330761602334e-01, -1.674341405804544e-01, 0.000000000000000e+00, -1.672330761602333e-01, -1.956637570859566e-01, 0.000000000000000e+00, -1.959298102309208e-01, -3.798913865629316e-02, 0.000000000000000e+00, -3.766551678832120e-02, -4.960347951855458e-02, 0.000000000000000e+00, -5.009069474294584e-02, -8.511030180512723e-02, 0.000000000000000e+00, -8.507188325454737e-02, -6.338931572502565e-02, 0.000000000000000e+00, -6.367217677724815e-02, -6.338931572502557e-02, 0.000000000000000e+00, -6.367217677724815e-02, -2.788736529173855e-02, 0.000000000000000e+00, -3.036331302735191e-02, -1.254277024868937e+00, 0.000000000000000e+00, -1.236966648898359e+00, -7.495489701853109e-01, 0.000000000000000e+00, -7.264640267766230e-01, -2.546039927699891e-01, 0.000000000000000e+00, -2.488952075317510e-01, -4.475035363126130e-01, 0.000000000000000e+00, -4.487869416915281e-01, -4.475035363126128e-01, 0.000000000000000e+00, -4.487869416915283e-01, -6.011361611482136e-02, 0.000000000000000e+00, -5.730424776843979e-02, -3.051412947221094e+00, 0.000000000000000e+00, -3.079919470734267e+00, -4.178843898891524e+00, 0.000000000000000e+00, -4.392372444341021e+00, -3.037950598375132e-01, 0.000000000000000e+00, -2.489494419888797e-01, -6.987657750995843e+00, 0.000000000000000e+00, -8.173519120120874e+00, -6.987657750995739e+00, 0.000000000000000e+00, -8.173519120120933e+00, 1.050563511824594e+00, 0.000000000000000e+00, 9.936355639040486e-01, 1.523507297662658e+01, 0.000000000000000e+00, 2.698611786440184e+01, 8.600437962475469e+00, 0.000000000000000e+00, 9.049998544852732e+00, -7.527378884101117e+00, 0.000000000000000e+00, -7.502531173827375e+00, 2.148894955551073e+01, 0.000000000000000e+00, 9.725745232038225e+00, 2.148894955529340e+01, 0.000000000000000e+00, 9.725745231900822e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_mn15_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_mn15", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-1.346322685473897e-02, -1.346647862900577e-02, -1.346400755001022e-02, -1.346704506886782e-02, -1.346585346696144e-02, -1.346987300550440e-02, -1.345708584448809e-02, -1.345868147056894e-02, -1.346373755225085e-02, -1.346267216693667e-02, -1.346373755225085e-02, -1.346267216693667e-02, -1.716874662234816e-02, -1.717185497791103e-02, -1.717320657288222e-02, -1.717541594357337e-02, -1.726828910127261e-02, -1.728722550651777e-02, -1.720160823265279e-02, -1.720821872342581e-02, -1.716038714292815e-02, -1.729351773938203e-02, -1.716038714292815e-02, -1.729351773938203e-02, -2.820858440420294e-02, -2.863296585302477e-02, -2.810946987206130e-02, -2.855470594965363e-02, -2.629129074168233e-02, -2.636528156254658e-02, -2.849133528729872e-02, -2.895222744522809e-02, -2.846469397225703e-02, -2.794609583521146e-02, -2.846469397225703e-02, -2.794609583521146e-02, 7.076812165161094e-02, 5.514370597865854e-02, 6.793211568815985e-02, 4.836026064045207e-02, -1.241230623003653e-02, -1.585506698484144e-02, 7.052739483870718e-02, 8.047912159085857e-02, 6.290465955209207e-02, 3.724505754243132e-02, 6.290465955209228e-02, 3.724505754243094e-02, 5.796913083239340e-05, 6.968662806877027e-05, 6.905192113565049e-05, 8.576558996839635e-05, 4.633320356283023e-03, 5.631629061920878e-03, 9.337366514827813e-06, 8.972172379023231e-06, 3.923216685843860e-05, 1.252829531250545e-05, 3.923216685843861e-05, 1.252829531257030e-05, -7.195950392804101e-02, -7.195895844118627e-02, -7.272588789777001e-02, -7.269963299885233e-02, -7.200618099397012e-02, -7.198740440097823e-02, -7.266349461054392e-02, -7.265999289790162e-02, -7.234805990500863e-02, -7.232969367380077e-02, -7.234805990500863e-02, -7.232969367380077e-02, -2.289340009109602e-02, -2.286112691393963e-02, -2.239125717305603e-02, -2.236493802157935e-02, -2.334421199058107e-02, -2.317903300387560e-02, -2.289911833354561e-02, -2.272020033842724e-02, -2.233573823229630e-02, -2.256163738917656e-02, -2.233573823229630e-02, -2.256163738917656e-02, -6.482085014565898e-02, -6.577980716593566e-02, -1.861470694721286e-01, -1.969579815709916e-01, -5.064430906500635e-02, -5.700581454259102e-02, -7.468271812259682e-02, -9.064588707372077e-02, -7.540243309182032e-02, -6.950859475676582e-02, -7.540243309182014e-02, -6.950859475676585e-02, 4.131832680600220e-02, 4.187207931977173e-02, 6.217840404900991e-02, 6.162955786550069e-02, 3.422563099876329e-02, 3.999031025244441e-02, -7.331456225172983e-02, -7.341873440843673e-02, 6.544030956313210e-02, 8.980022477389453e-02, 6.544030956313189e-02, 8.980022477389489e-02, 2.880385668998875e-06, 2.973796239307594e-06, 7.894991055241832e-06, 7.277874279675731e-06, 2.388309282562079e-05, 3.111427773590557e-05, 1.843476208927809e-02, 2.099709241463872e-02, 4.792487150623604e-06, 3.922337558449798e-05, 4.792487150603177e-06, 3.922337558452848e-05, -9.033070957138167e-01, -9.104712354037068e-01, -5.409431969249811e-01, -5.485630964298608e-01, -6.464030210620809e-01, -6.549371145073266e-01, -7.513664264285798e-01, -7.581045331951946e-01, -6.967658830754065e-01, -7.044701396824719e-01, -6.967658830754065e-01, -7.044701396824719e-01, -9.216312504974219e-01, -9.299209592606610e-01, -6.190830566353615e-02, -6.157759664457529e-02, -7.195524976308448e-02, -7.297939382786693e-02, -1.688009722936026e-01, -1.704966024958152e-01, -1.013944632288112e-01, -1.024787646168954e-01, -1.013944632288111e-01, -1.024787646168949e-01, -1.352590479934165e-01, -1.480313725650118e-01, 2.748451971496307e-02, 2.634675565781725e-02, -1.068115781356780e-02, -1.397538730095945e-02, -5.413837298236611e-02, -5.390094623190440e-02, -4.440844179804015e-02, -4.481236719088424e-02, -4.440844179804017e-02, -4.481236719088420e-02, -6.251365632670848e-02, -6.345612344069262e-02, 4.631653064635949e-03, 4.625633230791023e-03, 8.748646507085584e-03, 9.889733417226459e-03, -6.277289218218632e-02, -8.358679734713058e-02, 3.706132633602182e-02, 5.032861442601698e-02, 3.706132633602202e-02, 5.032861442601765e-02, 8.071076189028750e-05, 8.835048151139528e-05, 1.791166278841709e-07, 1.795505187623539e-07, 4.162174231830586e-06, 5.301704937632490e-06, 3.852925561489576e-02, 4.409511092832728e-02, 1.051937066590575e-05, 3.136189998668246e-05, 1.051937066584600e-05, 3.136189998673950e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
