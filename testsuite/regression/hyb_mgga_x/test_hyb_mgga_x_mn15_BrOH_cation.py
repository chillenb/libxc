
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_mn15_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_mn15", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [4.611930050064438e+00, 4.612686256380085e+00, 4.615755305020386e+00, 8.938392810773355e-01, 8.993690248134885e-01, -2.811787484148724e+00, -2.420854090918387e+00, -2.421348847203682e+00, -2.415872046063189e+00, -2.418309173287319e+00, -2.417784289589288e+00, -2.417282480607348e+00, -4.757963011220254e-01, -5.805362829494370e-01, -7.370875715876091e-01, -5.935675141420268e-01, -4.733936008383574e-01, -7.168872420134991e-01, -1.166342947763500e-01, -1.190187569277152e-01, -9.470324451396617e-01, -1.551173182981945e-01, -1.969069406871247e-01, -1.781528965433431e-01, 7.962875117720716e-03, 9.343586759353529e-03, 3.053235534477377e-02, 4.839661413109493e-03, 6.550960438111738e-03, 6.550960438111738e-03, 5.486241690577662e-01, 5.872458133084837e-01, 5.508375419693436e-01, 5.849079485384853e-01, 1.434422506042124e+00, 1.433543553007760e+00, -1.457376034941740e+00, -1.443154654257621e+00, -1.470074977080780e+00, -1.456104759560975e+00, -1.445597807427870e+00, -1.443570864467268e+00, -3.077459543836641e-01, -2.744559866377971e-01, -3.541067073857072e-01, -3.213343084141673e-01, -3.031432767896185e-01, -3.293266635859585e-01, -6.741824385856060e-02, -1.133818356675716e-01, -5.359846625233098e-02, -9.913777838035374e-01, -1.079667193111000e-01, -1.079667193111000e-01, 4.181381852522276e-03, 4.738729613201783e-03, 3.678326944048228e-03, 2.915550946767084e-02, 4.557839675660950e-03, 4.557839675660954e-03, 6.722036289688685e-02, -6.594660008528910e-02, 3.304565859586393e-02, 3.915805641019376e-02, 4.897623414087557e-02, 2.078349583852211e-02, 4.548153081469985e-02, -2.764937621182818e-01, -2.509829065356194e-01, -2.242455428041775e-01, -2.562348823687706e-01, -2.295854241787976e-01, -2.800767469725726e-01, -2.731033088339648e-01, -1.941175686728670e-01, -2.238076509671429e-01, -2.769969607856492e-01, -2.083983216482660e-01, -3.080651763847929e-01, 4.610414602138826e-02, 9.735928070598480e-03, -2.263819632769531e-01, -3.467723730377592e-02, -3.467723730377581e-02, 1.414386110391266e-02, 1.326875328287617e-03, 3.314309347522983e-03, 6.346791743346897e-02, 4.208559862350495e-03, 4.945439067117291e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_mn15_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_mn15", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [4.629275166543903e+01, 4.630240757307453e+01, 4.629433988536307e+01, 4.630355938486793e+01, 4.629891769634752e+01, 4.631025870994838e+01, 4.628108881444955e+01, 3.808608828192602e+01, 4.629376118049713e+01, 3.809767895215960e+01, 3.809389984117607e+01, 3.809767895215960e+01, -1.996885388889568e+00, -3.501134286426019e-01, -1.996388477565264e+00, -1.996940430358472e+00, -1.986510312851245e+00, -1.984723546842136e+00, -1.990334631273850e+00, -1.990352147876638e+00, -1.997631775110204e+00, -1.981276369581030e+00, -3.517976520846591e-01, -1.981276369581030e+00, -4.910819450556562e-01, -4.870902158255521e-01, -4.920687329495108e-01, -8.472224725305512e-02, -5.191166115616552e-02, -4.810711523962023e-02, -6.097879910916632e-02, -4.960508883544804e-01, -4.865188557276677e-01, -5.140172905469297e-01, -9.068755818818207e-02, -3.645086030886151e-02, -1.314356758836234e-01, -9.566018781755163e-02, -1.359867445948234e-01, -8.618815530747909e-02, 1.137093754488490e-01, -6.985940888731509e-01, -1.887977643615228e-01, -1.859596221343305e-01, -1.223323140410768e-01, -1.313363506689272e-01, -1.223323140410775e-01, 4.143929652117628e-02, 9.945035794738825e-03, 1.045370224727745e-02, 1.361164973976340e-02, 1.092309747335755e-02, 5.630070139764254e-02, 6.985010658623793e-03, 6.381763831433649e-03, 6.284755688377279e-03, 9.037434193060689e-03, 5.457004891767272e-03, 9.037434193060691e-03, 5.457004891767328e-03, 1.073285837501143e+01, 1.072987401519260e+01, 1.080427659837804e+01, 1.079888236170346e+01, 1.073782168804708e+01, 1.073296364369314e+01, 1.079905882702817e+01, 1.079561084410141e+01, 1.141940775012609e+01, 1.076443454528045e+01, 1.076872105250969e+01, 1.141522860054900e+01, -1.019931564757205e+00, -1.021908131678200e+00, -1.046869513834715e+00, -1.047422300224111e+00, -9.902629034263892e-01, -1.001662934670502e+00, -1.019799844786880e+00, -1.029309681354531e+00, -1.051749699951080e+00, -6.730662578878698e-01, -1.051749699951080e+00, -1.038662105475546e+00, -2.065333445178101e-01, -1.729087124832603e-01, -3.293955166426859e-03, 1.582699570687935e-02, -1.786119262899535e-01, -2.028601058857407e-01, -1.974150291743441e-01, -1.850287756803105e-01, -1.763531497877155e-01, -1.668518224634526e-01, -1.763531497877155e-01, -1.978730938309780e-01, -1.242064712423822e-01, -1.262451398617552e-01, -1.065125634003096e-01, -1.818604705990061e-01, -1.022893090575804e-01, -1.147496255132038e-01, 8.840981316848034e-02, 9.009679584556364e-02, -1.568427686830891e-01, -1.674680444730713e-01, -1.568427686830893e-01, -1.674680444730709e-01, 6.031138760246849e-03, 5.076193628333726e-03, 6.161992606651533e-03, 6.248545985894530e-03, 4.690842249891089e-03, 4.945901358427070e-03, -3.717828287781265e-02, 6.372970569924433e-02, 4.799692838138727e-03, 6.407213039106567e-03, 4.799692838138704e-03, 6.407213039106632e-03, 3.936366480786655e-01, 3.966076758987997e-01, 3.153610480114063e-01, 3.214189083387420e-01, 3.372101976363579e-01, 3.414645931136984e-01, 3.548991889790692e-01, 3.780532413253284e-01, 3.465339289861468e-01, 3.503137817508074e-01, 3.465339289861468e-01, 3.673981848269248e-01, 3.744428600869796e-01, 3.775499055092362e-01, -1.696731369112637e-01, -2.256816821567926e-01, -1.472163392042880e-01, -1.166776140699677e-01, 2.624859265351828e-03, 5.963690871337338e-03, -9.312050468442890e-02, -8.990480904600531e-02, -9.312050468442858e-02, -4.037891099203449e-02, -9.477834574716068e-02, 3.452253609472026e-02, -1.291484946632414e-01, -1.271969477163646e-01, -2.260470768184664e-01, -6.884937309248110e-02, -2.532834442427764e-01, -6.409946280546863e-02, -4.548253266865845e-02, -4.527976002083667e-02, -4.548253266865847e-02, -2.475269140216669e-01, -1.329569912720449e-01, -1.386061146643747e-01, 5.561261419011855e-02, 5.586429519333024e-02, -7.914451478186636e-03, -1.138934414743920e-02, -6.915558908792116e-02, -7.955752283203220e-02, -7.829574206259765e-02, -9.388549559489281e-02, -7.829574206259730e-02, -9.388549559489337e-02, 1.824779924365272e-02, 1.886012102313150e-02, 1.759768309128733e-03, 1.763707694612490e-03, 4.259743107613270e-03, 4.526274924379577e-03, 5.614131861395321e-02, 5.363119295555621e-02, 4.555482071764588e-03, 5.920754374986429e-03, 4.555482071764596e-03, 7.394287949498207e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_mn15_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_mn15", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-9.288499625864772e-08, 0.000000000000000e+00, -9.291772079099946e-08, -9.288854230002023e-08, 0.000000000000000e+00, -9.292029090439999e-08, -9.289787755523039e-08, 0.000000000000000e+00, -9.293422932860791e-08, -9.285819775038519e-08, 0.000000000000000e+00, -9.403516029334444e-08, -9.288733492778713e-08, 0.000000000000000e+00, -9.405571840214131e-08, -9.403993566255046e-08, 0.000000000000000e+00, -9.405571840214131e-08, 4.375497212725017e-06, 0.000000000000000e+00, -4.549560520806242e-06, 4.364381074090200e-06, 0.000000000000000e+00, 4.377492404499788e-06, 4.145717726257446e-06, 0.000000000000000e+00, 4.105913060264360e-06, 4.224665708051784e-06, 0.000000000000000e+00, 4.224181438155810e-06, 4.402491781488018e-06, 0.000000000000000e+00, 4.024231005592232e-06, -4.537400707127606e-06, 0.000000000000000e+00, 4.024231005592232e-06, -2.263961599796564e-02, 0.000000000000000e+00, -2.199381766665478e-02, -2.287480241766423e-02, 0.000000000000000e+00, -7.356841026239062e-03, -9.489025006186895e-03, 0.000000000000000e+00, -9.972924136045251e-03, -8.993652417219210e-03, 0.000000000000000e+00, -2.504478942763478e-02, -2.103452701403968e-02, 0.000000000000000e+00, -3.120872809631554e-02, -6.902946969005148e-03, 0.000000000000000e+00, -1.182679601339524e-02, -1.434680215304135e+01, 0.000000000000000e+00, -3.298177797773975e+00, -1.359539716403449e+01, 0.000000000000000e+00, -3.208418246454756e+00, -6.474492015658594e-03, 0.000000000000000e+00, -1.016486185820406e-02, -3.424572357323848e+00, 0.000000000000000e+00, -3.828463110650880e+00, -2.829383827773190e+00, 0.000000000000000e+00, -3.437963579986851e+00, -2.829383827773189e+00, 0.000000000000000e+00, -1.484297615071901e+02, 2.102396124386523e+00, 0.000000000000000e+00, 1.990263249496037e+00, -1.088364420138913e+07, 0.000000000000000e+00, 1.962282251464321e+00, -1.030109413557873e+04, 0.000000000000000e+00, -3.046069194503929e+00, 2.105272574497878e+00, 0.000000000000000e+00, 2.141402944508576e+00, 2.194189973864886e+00, 0.000000000000000e+00, 4.977777839078526e+00, 2.194189973864886e+00, 0.000000000000000e+00, 4.977777838618974e+00, -3.774370528274557e-05, 0.000000000000000e+00, -3.778047504968681e-05, -3.803062724396503e-05, 0.000000000000000e+00, -3.805804569418836e-05, -3.776391142494562e-05, 0.000000000000000e+00, -3.779310311186847e-05, -3.800990786028494e-05, 0.000000000000000e+00, -3.804506433731109e-05, -3.644469681719936e-05, 0.000000000000000e+00, -3.791919963194218e-05, -3.788727163718042e-05, 0.000000000000000e+00, -3.647530788294756e-05, 5.325151376459838e-05, 0.000000000000000e+00, 5.293903596417752e-05, 4.854007866975175e-05, 0.000000000000000e+00, 4.825110933314012e-05, 5.628692507148065e-05, 0.000000000000000e+00, 5.532106260208904e-05, 5.328387688068607e-05, 0.000000000000000e+00, 5.184199676766840e-05, 4.725011825615607e-05, 0.000000000000000e+00, -4.831418262047176e-05, 4.725011825615607e-05, 0.000000000000000e+00, 5.013188366737944e-05, -2.278982301959162e-02, 0.000000000000000e+00, -2.782850232338469e-02, -4.735338927299881e-02, 0.000000000000000e+00, -4.991449305926146e-02, -2.097839817407262e-02, 0.000000000000000e+00, -2.059500114431637e-02, -2.644096523672936e-02, 0.000000000000000e+00, -2.928944499405228e-02, -2.709422446840706e-02, 0.000000000000000e+00, -2.909891167230520e-02, -2.709422446840709e-02, 0.000000000000000e+00, -2.542890056088515e-02, -4.020815154271218e+00, 0.000000000000000e+00, -4.000844140756202e+00, -1.288368876475634e+01, 0.000000000000000e+00, -2.089318891713153e+00, -4.093430761184178e+00, 0.000000000000000e+00, -4.256483624154721e+00, -4.470101562941627e-04, 0.000000000000000e+00, -4.486242421021457e-04, -4.707869069188491e+00, 0.000000000000000e+00, -5.788546885318823e+00, -4.707869069188503e+00, 0.000000000000000e+00, -5.788546885318826e+00, -3.219242844282686e+08, 0.000000000000000e+00, 1.536630703623437e+00, 2.027902853449099e+00, 0.000000000000000e+00, 1.776825053794285e+00, 1.606102322906764e+01, 0.000000000000000e+00, 1.735778534476602e+01, -4.495056132921436e+00, 0.000000000000000e+00, -1.244412733538394e+03, 3.005784264459231e+00, 0.000000000000000e+00, 8.587827806863913e+00, 3.005784264431017e+00, 0.000000000000000e+00, 8.587827807049759e+00, -1.968337604668013e-01, 0.000000000000000e+00, -1.961212492711299e-01, -1.494251594196720e-01, 0.000000000000000e+00, -1.494241887825780e-01, -1.501062042995387e-01, 0.000000000000000e+00, -1.503544411175674e-01, -1.651479442394559e-01, 0.000000000000000e+00, -1.778260693932874e-01, -1.574175159981746e-01, 0.000000000000000e+00, -1.574570222738103e-01, -1.574175159981746e-01, 0.000000000000000e+00, -1.709615079627993e-01, -2.058429858813934e-01, 0.000000000000000e+00, -2.057521668223667e-01, -3.684843540429480e-02, 0.000000000000000e+00, -5.724516540335671e-02, -4.927217328735926e-02, 0.000000000000000e+00, -4.902384443667807e-02, -8.702236714516444e-02, 0.000000000000000e+00, -8.698999602527425e-02, -6.396471409790704e-02, 0.000000000000000e+00, -6.426853305833137e-02, -6.396471409790695e-02, 0.000000000000000e+00, -5.551071300818487e-02, -2.991572402443779e-02, 0.000000000000000e+00, -2.872486148942911e-02, -1.188233721919150e+00, 0.000000000000000e+00, -1.169818685591014e+00, -2.024831110699961e+00, 0.000000000000000e+00, -6.458231969793742e-01, -4.242337560118896e-01, 0.000000000000000e+00, -1.841367301410010e-01, -3.745431403983066e-01, 0.000000000000000e+00, -3.753332683922545e-01, -3.745431403983063e-01, 0.000000000000000e+00, -9.373644968357410e-01, -4.887430431666870e-02, 0.000000000000000e+00, -4.767267519101131e-02, -1.113519908122969e+04, 0.000000000000000e+00, -1.082636319083492e+04, -3.314787458133350e+00, 0.000000000000000e+00, -3.522981702956815e+00, -2.256951135126327e-01, 0.000000000000000e+00, -2.063808610184662e-01, -5.725529854879192e+00, 0.000000000000000e+00, -6.791390179486227e+00, -5.725529854879305e+00, 0.000000000000000e+00, -6.791390179486179e+00, -3.104940788272534e+06, 0.000000000000000e+00, -2.689371330951643e+06, 3.000833589097142e+00, 0.000000000000000e+00, 2.987073548073417e+00, -1.329220775271538e+09, 0.000000000000000e+00, -1.038244465457257e+09, -6.317853676075531e+02, 0.000000000000000e+00, -5.939339095231117e+02, 7.873225059207065e+00, 0.000000000000000e+00, 9.209439625801458e+00, 7.873225058950996e+00, 0.000000000000000e+00, -1.389441742911085e+08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_mn15_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_mn15", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-2.334453991735181e-02, -2.335133355305424e-02, -2.334546250045622e-02, -2.335200257073484e-02, -2.334802789367554e-02, -2.335578687994662e-02, -2.333768528050473e-02, -1.276220361709418e-02, -2.334513531764804e-02, -1.276647168245790e-02, -1.276453233729831e-02, -1.276647168245790e-02, -1.174084475526121e-02, -2.203282043991602e-02, -1.173909244472394e-02, -1.174126551892254e-02, -1.170559735328756e-02, -1.169959247440865e-02, -1.171673032841627e-02, -1.171653126338455e-02, -1.174653589225556e-02, -1.168666859265372e-02, -2.202144109630617e-02, -1.168666859265372e-02, -2.020883817499183e-02, -2.071936009965671e-02, -2.005755977520386e-02, -5.090867020108532e-02, -4.700953602684984e-02, -4.636056556120115e-02, -4.835343364266793e-02, -1.904874957175537e-02, -2.111298333471225e-02, -1.600542665831229e-02, -5.130330554996595e-02, -4.370748165863952e-02, 7.219986769217673e-02, 5.359006614673694e-02, 7.394090783156226e-02, 4.602422906723244e-02, -3.091510332382193e-02, -1.458322040666344e-02, 7.117672185856394e-02, 8.071745112798760e-02, 5.966897624162425e-02, 3.792806888835477e-02, 5.966897624162441e-02, 1.316521693178077e-02, 5.796960938872186e-05, 6.968690375232605e-05, 1.852335349457157e-05, 8.576643532003660e-05, 1.313115083286903e-03, 5.639025580587276e-03, 9.337631225197572e-06, 8.972380137323615e-06, 3.923294592046839e-05, 1.252905308899393e-05, 3.923294592046839e-05, 1.252905308905881e-05, -7.166763070236153e-02, -7.168373399874069e-02, -7.243519144845201e-02, -7.242566027133729e-02, -7.172102389595834e-02, -7.171701819413809e-02, -7.237913210192069e-02, -7.239052454821061e-02, -1.146830428642481e-01, -7.205425216190227e-02, -7.205173472115611e-02, -1.146942003482099e-01, -2.292856902819914e-02, -2.287115107121988e-02, -2.219191757470208e-02, -2.215583970202052e-02, -2.357153321677720e-02, -2.333511107048921e-02, -2.293537377027651e-02, -2.268625642942922e-02, -2.202106392775225e-02, -2.601326453349985e-02, -2.202106392775225e-02, -2.242187285376255e-02, -4.683875224735194e-02, -8.677967016522796e-02, -9.762200665930332e-02, -1.061740198025964e-01, -5.977415990184359e-02, -5.359309279344793e-02, -5.095176815172452e-02, -5.026261028622590e-02, -4.830217913997260e-02, -8.973835632886312e-02, -4.830217913997234e-02, -4.807108336430724e-02, 4.153015345059663e-02, 4.211447841313239e-02, 4.066889664408796e-02, 6.073063868141253e-02, 3.443796239257969e-02, 4.021024588623330e-02, -2.629015546100210e-02, -2.632958031897947e-02, 6.579300501721164e-02, 9.030626183369046e-02, 6.579300501721139e-02, 9.030626183369093e-02, 7.692298819432595e-07, 2.973964574466239e-06, 7.895416556769540e-06, 7.278294399064662e-06, 2.388405243994434e-05, 3.111582612855266e-05, 1.853634202314107e-02, 6.456769309207322e-03, 4.793026997923115e-06, 3.922384161281673e-05, 4.793026997902676e-06, 3.922384161284724e-05, -8.542859986753023e-01, -8.623680712984567e-01, -5.067533486724106e-01, -5.148289447920634e-01, -7.497975807686345e-01, -7.573709882565530e-01, -8.385857170304677e-01, -7.157081932666970e-01, -7.926123851349379e-01, -7.993626269179580e-01, -7.926123851349379e-01, -6.641904006932958e-01, -8.287702123648121e-01, -8.393072098419513e-01, -6.144511939989163e-02, -5.783516568075141e-02, -6.552320285948111e-02, -1.237672424149256e-01, -1.451341392758985e-01, -1.466603830612676e-01, -8.761250613671991e-02, -8.882509569743763e-02, -8.761250613671988e-02, -1.816789021876716e-01, -5.979351057994792e-02, -1.761241773311433e-01, 2.575562432426243e-02, 2.452149080512480e-02, 3.320433965552148e-02, -2.087530655220096e-02, 4.793544813240293e-04, -7.706814463399574e-02, -5.832338688885860e-02, -5.888229252133709e-02, -5.832338688885862e-02, 2.108418834594984e-02, -6.938266213478346e-02, -6.875455567522683e-02, 1.310370584808920e-03, 1.309210361492584e-03, 8.768483034261105e-03, 9.912717292796556e-03, -8.974724246586756e-02, -9.837108328477881e-02, 3.726159007182946e-02, 5.066155061773236e-02, 3.726159007182966e-02, 5.066155061773305e-02, 2.170921407341716e-05, 2.377456371704518e-05, 1.791201071988983e-07, 1.795561136260073e-07, 1.110683228347252e-06, 1.414971712668919e-06, 1.260877956148390e-02, 1.460569908523777e-02, 1.052068560382530e-05, 3.136222803216860e-05, 1.052068560376552e-05, 8.384313698067176e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
