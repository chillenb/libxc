
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_revm11_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revm11", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.274134696770366e+01, -1.274135305744720e+01, -1.274137820981774e+01, -1.274128451707357e+01, -1.274133368659822e+01, -1.274133368659822e+01, -2.723952287139443e+00, -2.723734872466506e+00, -2.718168693731380e+00, -2.721960054326543e+00, -2.720693539150544e+00, -2.720693539150544e+00, -4.441982172057835e-01, -4.444565641940939e-01, -4.529774434350393e-01, -4.571150921123701e-01, -4.564193515089040e-01, -4.564193515089040e-01, -4.941758713090583e-02, -5.055040425037340e-02, -5.263130718062068e-01, -2.966986662391316e-02, -4.768343928781728e-02, -4.768343928781727e-02, -9.248771524055997e-06, -1.080203230170623e-05, -1.589457409064989e-03, -1.774282779483140e-06, -5.176492563939070e-06, -5.176492563939070e-06, -3.036177296722261e+00, -3.040105926348709e+00, -3.036374473222577e+00, -3.039841355402503e+00, -3.038148218208376e+00, -3.038148218208376e+00, -1.686459714959139e+00, -1.677205078179538e+00, -1.702414613899164e+00, -1.694633039369528e+00, -1.673252964786539e+00, -1.673252964786539e+00, -2.682858230057656e-01, -2.679036892328367e-01, -2.725502626771207e-01, -2.507189752577775e-01, -2.644918789292562e-01, -2.644918789292562e-01, -1.456551360819466e-02, -5.467641539922451e-02, -1.245424536610826e-02, -1.134622387047597e+00, -1.859512916181740e-02, -1.859512916181742e-02, -8.176326843720406e-07, -1.657447023874505e-06, -7.455950460008842e-07, -5.260635359377016e-03, -1.547142670259827e-06, -1.547142670259827e-06, -2.770228067896093e-01, -2.586205968400983e-01, -2.660133831639757e-01, -2.716481625875593e-01, -2.689180110780137e-01, -2.689180110780139e-01, -2.629987856940590e-01, -2.304471299246721e-01, -2.074919700037269e-01, -2.022245753156376e-01, -2.009290145023049e-01, -2.009290145023048e-01, -2.907190686742515e-01, -8.606765996662502e-02, -1.153486912964623e-01, -1.551537824949528e-01, -1.355499817808865e-01, -1.355499817808866e-01, -2.219900323532258e-01, -1.406786229498333e-03, -3.226104289051452e-03, -1.287956289516755e-01, -8.265003678470138e-03, -8.265003678470138e-03, -2.576923847384184e-05, -3.168333636741743e-08, -2.953420621447070e-07, -7.289241502004385e-03, -1.191045850435184e-06, -1.191045850435180e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_revm11_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revm11", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.618518696746941e+01, -1.618846567763539e+01, -1.618577291805561e+01, -1.618889070047543e+01, -1.618741030315999e+01, -1.619130328173219e+01, -1.618083111282284e+01, -1.618290595294889e+01, -1.618556091479669e+01, -1.618608553551849e+01, -1.618556091479669e+01, -1.618608553551849e+01, -1.994484183262085e+00, -1.995863664051435e+00, -1.993974665417729e+00, -1.995626273753445e+00, -1.985216774626433e+00, -1.983953962765967e+00, -1.984049417494387e+00, -1.985047272516570e+00, -1.995185206959468e+00, -1.977160647033708e+00, -1.995185206959468e+00, -1.977160647033708e+00, -4.481445120644283e-01, -4.529386875465210e-01, -4.463473216996917e-01, -4.523079553545641e-01, -4.229086264441603e-01, -4.167761952982774e-01, -4.260237684666831e-01, -4.281007114500469e-01, -4.622512195046423e-01, -4.101205169578390e-01, -4.622512195046423e-01, -4.101205169578390e-01, -6.258928913544670e-02, -6.577816838990914e-02, -6.276568172425238e-02, -6.636098081664893e-02, -4.174653310810301e-01, -5.092859515637551e-01, -4.292787142187995e-02, -4.352647527198315e-02, -6.795776838793785e-02, -1.700021048689599e-02, -6.795776838793768e-02, -1.700021048689600e-02, -1.659932881615218e-05, -1.989229843906543e-05, -1.907650136189051e-05, -2.341351617906332e-05, -2.528668009228473e-03, -2.873364009069988e-03, -3.629232674067344e-06, -3.451295369847185e-06, -1.180915005490575e-05, -2.184967055487231e-06, -1.180915005490575e-05, -2.184967055487219e-06, -4.950570135030941e+00, -4.949495263425798e+00, -4.969384101136752e+00, -4.967679772345799e+00, -4.951897735109385e+00, -4.950323334402783e+00, -4.968030472146519e+00, -4.966832075652506e+00, -4.960025609990571e+00, -4.958618921841119e+00, -4.960025609990571e+00, -4.958618921841119e+00, -9.949694911897274e-01, -9.890993138958822e-01, -9.531282285803070e-01, -9.485964887065973e-01, -1.020995809230256e+00, -1.007768016728271e+00, -9.829798574087422e-01, -9.694017107163275e-01, -9.535651729006266e-01, -9.647194016082140e-01, -9.535651729006266e-01, -9.647194016082140e-01, -2.228742377684051e-01, -2.227289113469719e-01, -3.891444936858194e-01, -3.978081946978554e-01, -2.325791390993260e-01, -2.157660123591741e-01, -2.510336976408983e-01, -2.613446697854042e-01, -2.566028130378914e-01, -2.263092204961607e-01, -2.566028130378918e-01, -2.263092204961600e-01, -1.307584817677520e-02, -1.352181322948171e-02, -7.594694844280135e-02, -7.656734020003179e-02, -1.027207926613284e-02, -1.149614934160141e-02, -1.135396972253646e+00, -1.135252755155629e+00, -2.137317125970072e-02, -2.698167982081708e-02, -2.137317125970049e-02, -2.698167982081702e-02, -1.534173110380876e-06, -1.721915260399777e-06, -3.232930931325332e-06, -3.382082086420217e-06, -1.350384294801585e-06, -1.602698679641455e-06, -6.106054263897040e-03, -6.174153800402022e-03, -1.440691614798092e-06, -3.719638304439853e-06, -1.440691614798088e-06, -3.719638304439859e-06, -4.268076765947157e-01, -4.281319953433482e-01, -4.471490109001541e-01, -4.494313349238030e-01, -4.439634024360878e-01, -4.456882666092549e-01, -4.376440226858507e-01, -4.391661057104747e-01, -4.411824214489172e-01, -4.427787517396033e-01, -4.411824214489172e-01, -4.427787517396040e-01, -4.099885264990255e-01, -4.112471008650206e-01, -1.431751313352031e-01, -1.437181893666241e-01, -1.851303233527099e-01, -1.893290587306470e-01, -3.103869031632501e-01, -3.137380889547534e-01, -2.385640006495675e-01, -2.422492246900093e-01, -2.385640006495675e-01, -2.422492246900091e-01, -3.681353535418465e-01, -3.827802820779309e-01, -1.074835252590961e-01, -1.081201558894380e-01, -1.269806534761728e-01, -1.274004788668897e-01, -1.383527272463834e-01, -1.394784277594479e-01, -1.321643908814576e-01, -1.315293757003917e-01, -1.321643908814576e-01, -1.315293757003919e-01, -1.601852874431049e-01, -1.556245658255518e-01, -2.433420318181059e-03, -2.475611824327973e-03, -4.758937022701155e-03, -5.031891643523358e-03, -1.159726017128673e-01, -1.025258571096757e-01, -7.110461320694813e-03, -7.531267084869300e-03, -7.110461320694774e-03, -7.531267084869278e-03, -4.822830544188040e-05, -5.359151555358880e-05, -6.313677372430881e-08, -6.356347925630501e-08, -5.313203115775193e-07, -6.390892392967967e-07, -6.441276613098667e-03, -6.514216932701558e-03, -1.223311797070020e-06, -2.866747752602088e-06, -1.223311797070018e-06, -2.866747752602072e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_revm11_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revm11", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [9.516784948472659e-09, 0.000000000000000e+00, 9.520097986762903e-09, 9.517268179739946e-09, 0.000000000000000e+00, 9.520448158354496e-09, 9.518439133218636e-09, 0.000000000000000e+00, 9.522229595240607e-09, 9.513022235822336e-09, 0.000000000000000e+00, 9.515316310056042e-09, 9.517104427182973e-09, 0.000000000000000e+00, 9.517802493974849e-09, 9.517104427182973e-09, 0.000000000000000e+00, 9.517802493974849e-09, -1.735937924486790e-05, 0.000000000000000e+00, -1.737236074859311e-05, -1.735100646506119e-05, 0.000000000000000e+00, -1.736749168382289e-05, -1.719404694833728e-05, 0.000000000000000e+00, -1.716659357580169e-05, -1.722114590806243e-05, 0.000000000000000e+00, -1.722528949296911e-05, -1.738840857549532e-05, 0.000000000000000e+00, -1.708191670488439e-05, -1.738840857549532e-05, 0.000000000000000e+00, -1.708191670488439e-05, -1.511526128202377e-02, 0.000000000000000e+00, -1.506939395129491e-02, -1.512616708479563e-02, 0.000000000000000e+00, -1.509341872422545e-02, -1.517118706865786e-02, 0.000000000000000e+00, -1.489700241199643e-02, -1.430005291308578e-02, 0.000000000000000e+00, -1.429722335276002e-02, -1.507158021100338e-02, 0.000000000000000e+00, -1.257688220931123e-02, -1.507158021100338e-02, 0.000000000000000e+00, -1.257688220931123e-02, -2.768581309645046e-01, 0.000000000000000e+00, -3.011541130853164e-01, -3.009847473998571e-01, 0.000000000000000e+00, -3.233506660679578e-01, -1.213591269063862e-02, 0.000000000000000e+00, -1.101923059184125e-02, -1.171553606243586e-01, 0.000000000000000e+00, -1.153219858397410e-01, -2.611846909974430e-01, 0.000000000000000e+00, -6.506159943033947e-01, -2.611846909974432e-01, 0.000000000000000e+00, -6.506159943033947e-01, -2.166211645741864e-02, 0.000000000000000e+00, -2.420909745995387e-02, -2.505717084078633e-02, 0.000000000000000e+00, -2.859932952080685e-02, -4.102134110406720e-01, 0.000000000000000e+00, -4.570287381017412e-01, -7.178527447668863e-03, 0.000000000000000e+00, -6.752976592736866e-03, -1.721737224306706e-02, 0.000000000000000e+00, -1.415873184070105e-02, -1.721737224306710e-02, 0.000000000000000e+00, -1.415873184070108e-02, 3.647463945200030e-06, 0.000000000000000e+00, 3.650599845679526e-06, 3.651296654085053e-06, 0.000000000000000e+00, 3.654317429048978e-06, 3.647637767363174e-06, 0.000000000000000e+00, 3.650696952063508e-06, 3.650929300960344e-06, 0.000000000000000e+00, 3.654076503121517e-06, 3.649581344548850e-06, 0.000000000000000e+00, 3.652572426784910e-06, 3.649581344548850e-06, 0.000000000000000e+00, 3.652572426784910e-06, -1.530318794033598e-04, 0.000000000000000e+00, -1.524617837252512e-04, -1.447890495246326e-04, 0.000000000000000e+00, -1.444777295882407e-04, -1.563920456471434e-04, 0.000000000000000e+00, -1.550181335948827e-04, -1.495130930965227e-04, 0.000000000000000e+00, -1.479053791525124e-04, -1.452288218953859e-04, 0.000000000000000e+00, -1.478097833267602e-04, -1.452288218953859e-04, 0.000000000000000e+00, -1.478097833267602e-04, -2.688769597424312e-03, 0.000000000000000e+00, -2.192509547285485e-03, 1.105598471330455e-02, 0.000000000000000e+00, 1.155358333698488e-02, -1.946668586062787e-02, 0.000000000000000e+00, -1.140358831600062e-02, -4.376485757096863e-03, 0.000000000000000e+00, 9.893151882689353e-04, 1.972921445768928e-03, 0.000000000000000e+00, -1.668766007190241e-03, 1.972921445768932e-03, 0.000000000000000e+00, -1.668766007190235e-03, -7.943644173045387e-01, 0.000000000000000e+00, -7.743801937083301e-01, -9.577455817201595e-02, 0.000000000000000e+00, -9.674171126218314e-02, -9.820078711133893e-01, 0.000000000000000e+00, -8.873360148526673e-01, 4.509121522096406e-05, 0.000000000000000e+00, 4.546756855434328e-05, -4.240572170121675e-01, 0.000000000000000e+00, -2.278196246611271e-01, -4.240572170121678e-01, 0.000000000000000e+00, -2.278196246611276e-01, -5.672976693076229e-03, 0.000000000000000e+00, -5.303014482213350e-03, -8.033806844782295e-03, 0.000000000000000e+00, -7.643705098099076e-03, -2.558534466630214e-02, 0.000000000000000e+00, -3.191837007406385e-02, -1.154687304668824e+00, 0.000000000000000e+00, -1.119846040400800e+00, -1.327604304692673e-02, 0.000000000000000e+00, -2.457807604406704e-02, -1.327604304692669e-02, 0.000000000000000e+00, -2.457807604406701e-02, -2.353975301994476e-02, 0.000000000000000e+00, -2.465897494567903e-02, 6.870951243128546e-03, 0.000000000000000e+00, 6.072945905009603e-03, -2.729158594405752e-04, 0.000000000000000e+00, -1.270896243974176e-03, -8.843457959397328e-03, 0.000000000000000e+00, -9.798489984372777e-03, -4.211569054470167e-03, 0.000000000000000e+00, -5.200260622309110e-03, -4.211569054470167e-03, 0.000000000000000e+00, -5.200260622309110e-03, -1.909175261733635e-02, 0.000000000000000e+00, -2.048976271458954e-02, -1.419332657776678e-02, 0.000000000000000e+00, -1.350389648357604e-02, 1.813256014512727e-03, 0.000000000000000e+00, 2.512739223437761e-03, 1.772038857149531e-02, 0.000000000000000e+00, 1.769685920069437e-02, 1.028347100147394e-02, 0.000000000000000e+00, 1.054270629732353e-02, 1.028347100147395e-02, 0.000000000000000e+00, 1.054270629732353e-02, 6.543055781088668e-03, 0.000000000000000e+00, 7.481905862717243e-03, -1.315991208906072e-01, 0.000000000000000e+00, -1.330398758128055e-01, -1.501172677804393e-01, 0.000000000000000e+00, -1.509926644039289e-01, -9.533754895541902e-02, 0.000000000000000e+00, -9.388662849545920e-02, -1.347122757023768e-01, 0.000000000000000e+00, -1.352395060205326e-01, -1.347122757023768e-01, 0.000000000000000e+00, -1.352395060205327e-01, -3.077061629561313e-02, 0.000000000000000e+00, -2.822815248723770e-02, -3.617409986480626e-01, 0.000000000000000e+00, -3.670107936736386e-01, -6.224604002901680e-01, 0.000000000000000e+00, -6.744112224775484e-01, -9.542706894512951e-02, 0.000000000000000e+00, -6.642867426898706e-02, -1.272033591068573e+00, 0.000000000000000e+00, -1.231597653185058e+00, -1.272033591068573e+00, 0.000000000000000e+00, -1.231597653185057e+00, -3.508881409221937e-02, 0.000000000000000e+00, -3.845764428063401e-02, -2.078796533779632e-03, 0.000000000000000e+00, -3.699122373094169e-03, -5.310896796095038e-03, 0.000000000000000e+00, -6.395360698281336e-03, -1.354158143773867e+00, 0.000000000000000e+00, -1.319738630938081e+00, -2.455535850602753e-02, 0.000000000000000e+00, -2.143868521240202e-02, -2.455535850602753e-02, 0.000000000000000e+00, -2.143868521240205e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_revm11_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revm11", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_revm11_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revm11", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-1.601361283597906e-03, -1.599882524715589e-03, -1.601106187561596e-03, -1.599697434922301e-03, -1.600414582785864e-03, -1.598671160742390e-03, -1.603277525378329e-03, -1.602326859106278e-03, -1.601197246622925e-03, -1.600958712663442e-03, -1.601197246622925e-03, -1.600958712663442e-03, -8.718799792031611e-03, -8.707681587486601e-03, -8.725413249004216e-03, -8.711424873255599e-03, -8.847570664603926e-03, -8.867740240646228e-03, -8.829199405377261e-03, -8.823435881205214e-03, -8.705968658426136e-03, -8.934077600342644e-03, -8.705968658426136e-03, -8.934077600342644e-03, 1.105170456407385e-03, 1.082624754441694e-03, 1.086304259730288e-03, 1.099819734138727e-03, 6.270835941585655e-04, 2.577112084428076e-04, 1.168194442042137e-04, 1.033695595526294e-04, 1.355872681832131e-03, -1.440880034986623e-03, 1.355872681832131e-03, -1.440880034986623e-03, -4.927728393968836e-03, -4.275708912995275e-03, -4.704217638286993e-03, -4.156481808866622e-03, -3.127381181386125e-04, 1.700900055661395e-03, -4.686978170282114e-03, -5.148266344079965e-03, -4.953637893974320e-03, -1.584628333395473e-03, -4.953637893974141e-03, -1.584628333395439e-03, -1.355564454827322e-08, -1.842761365839799e-08, -1.774883298311113e-08, -2.534137823865527e-08, -3.863535346126003e-05, -5.218133591048334e-05, -7.811974707166007e-10, -7.256477253415083e-10, -7.282325601998306e-09, -7.452568282370250e-10, -7.282325601998306e-09, -7.452568282313804e-10, 5.801842588872518e-03, 5.804969954831745e-03, 6.082831518576200e-03, 6.076645197662994e-03, 5.821431584575287e-03, 5.817183751066167e-03, 6.062369041074761e-03, 6.063817776367803e-03, 5.942622663004595e-03, 5.940804275390427e-03, 5.942622663004595e-03, 5.940804275390427e-03, -1.281873552573813e-02, -1.299050177784439e-02, -1.427705161220930e-02, -1.440895834528404e-02, -1.182978104098603e-02, -1.226875007494677e-02, -1.308250975263575e-02, -1.355579639348599e-02, -1.441273442390364e-02, -1.385375131358511e-02, -1.441273442390364e-02, -1.385375131358511e-02, -7.171276792075054e-02, -7.254502966357937e-02, -1.519990197800060e-02, -9.735054427496084e-03, -4.202185291635471e-02, -5.841950674593932e-02, -5.362949565745852e-02, -5.650595335434337e-02, -6.964729786266592e-02, -7.128586989611539e-02, -6.964729786266592e-02, -7.128586989611527e-02, -1.705189553917541e-03, -1.739678218318173e-03, -6.416404842818206e-03, -6.428498206923490e-03, -1.234346222545068e-03, -1.528488668477283e-03, -2.124883920112339e-02, -2.124478677943446e-02, -2.964376023945819e-03, -4.021350660762705e-03, -2.964376023945699e-03, -4.021350660762797e-03, -1.350535771971642e-10, -1.506727102748167e-10, -6.110796707006847e-10, -5.806616073120037e-10, -1.028568345030232e-09, -1.503633115391631e-09, -3.776297228039935e-04, -4.347869953203566e-04, -2.154782959105889e-10, -3.339123051617730e-09, -2.154782959137230e-10, -3.339123051620023e-09, 1.051355436436078e-01, 1.031004367478303e-01, 1.235502321926727e-01, 1.249033276367332e-01, 1.301766847440319e-01, 1.305198624303427e-01, 1.266279208133497e-01, 1.260193389763023e-01, 1.296712073611064e-01, 1.295193318586424e-01, 1.296712073611064e-01, 1.295193318586464e-01, 8.671126619644340e-02, 8.540636003532959e-02, -8.177467005764606e-02, -8.263792198627770e-02, -8.750852889498749e-02, -8.654359582814455e-02, -2.121846857397278e-02, -1.954806198119653e-02, -6.696228649786243e-02, -6.552020482631463e-02, -6.696228649786211e-02, -6.552020482631511e-02, -3.703508182564137e-02, -3.094098860556390e-02, -5.252148047699444e-03, -5.190466869240555e-03, -4.622492276720428e-03, -4.900020321128667e-03, -3.121448034042350e-02, -3.126505325435015e-02, -1.433574479052878e-02, -1.468946699012731e-02, -1.433574479052865e-02, -1.468946699012750e-02, -5.516042704504136e-02, -5.996298947052135e-02, -3.732354205148548e-05, -3.778507331171141e-05, -1.247669560057442e-04, -1.494321289933453e-04, -4.980492763475446e-02, -7.205878611937179e-02, -9.994557294695141e-04, -1.364884350324564e-03, -9.994557294694271e-04, -1.364884350324591e-03, -3.903031055210090e-08, -4.592859653668725e-08, -9.914130348495811e-13, -9.983327189382652e-13, -9.582312263835713e-11, -1.381462004861796e-10, -9.574359719195460e-04, -1.112836590304623e-03, -4.239067867674531e-10, -2.240197641129251e-09, -4.239067867603717e-10, -2.240197641119495e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
