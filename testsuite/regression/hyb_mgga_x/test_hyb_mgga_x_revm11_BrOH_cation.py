
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_revm11_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revm11", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.359854957597156e+01, -1.359857204567501e+01, -1.359869024768199e+01, -1.314597288711943e+01, -1.314609582239513e+01, -1.269365868289212e+01, -2.723596513293513e+00, -2.951013911834169e+00, -2.941686670480215e+00, -2.945744920278890e+00, -2.944962424231345e+00, -2.717108844528832e+00, -3.416462041820115e-01, -4.415896231429257e-01, -5.419669729462685e-01, -4.337589859000537e-01, -3.263221238874731e-01, -5.400212137051046e-01, -3.848160065979023e-02, -3.982121628619203e-02, -5.622208112504602e-01, -3.013431297716623e-02, -4.870664673064093e-02, -4.706659811493271e-02, -9.249003432278949e-06, -7.273877280643674e-06, -1.057294540216309e-03, -1.774477823460763e-06, -5.176967556710054e-06, -5.176967556710054e-06, -3.035081529873003e+00, -3.039021826583309e+00, -3.035301451386368e+00, -3.038777669731481e+00, -3.133680968999479e+00, -3.133594012774682e+00, -1.720802748885936e+00, -1.705646678756502e+00, -1.732835260399653e+00, -1.719631585400085e+00, -1.529839968976368e+00, -1.705974601299133e+00, -2.685050152721986e-01, -2.559406752952891e-01, -2.877834368829687e-01, -2.540472318953995e-01, -2.632959599660196e-01, -2.646525086994782e-01, -1.539508659907432e-02, -3.964248667813835e-02, -1.322677554815681e-02, -1.118672059595139e+00, -1.892469927673630e-02, -1.892469927673635e-02, -5.208842940786009e-07, -1.657840100802246e-06, -7.457384244089269e-07, -3.353443669736575e-03, -1.547305676533346e-06, -1.547305676533346e-06, -2.794464761191235e-01, -2.580079667685363e-01, -2.658462919227716e-01, -2.712031367242880e-01, -2.677838803898043e-01, -2.686737954479048e-01, -2.664220199408379e-01, -2.228369875137695e-01, -2.096508392212435e-01, -2.001521409277282e-01, -1.998369667014250e-01, -2.056066140097102e-01, -2.883825907176150e-01, -8.666797729973144e-02, -9.409870797951406e-02, -1.465283176616325e-01, -1.405937694122551e-01, -1.192197838410398e-01, -2.281373267000620e-01, -2.737834870532885e-04, -3.286550663703578e-03, -1.344056480417889e-01, -8.659359612112552e-03, -8.659359612112554e-03, -4.651762951360911e-06, -3.168663795804945e-08, -5.301842607236665e-08, -2.026162062245606e-03, -1.191186425870390e-06, -3.643941518170727e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_revm11_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revm11", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.732795189065904e+01, -1.732992624528804e+01, -1.732830142095386e+01, -1.733017979342041e+01, -1.732932089716654e+01, -1.733166822928597e+01, -1.732539565309481e+01, -1.608325729286329e+01, -1.732817291595651e+01, -1.608656352657262e+01, -1.608557438186773e+01, -1.608656352657262e+01, -1.343581645172856e+00, -2.877267729918096e+00, -1.343129849914264e+00, -1.343639661071904e+00, -1.334422776455852e+00, -1.332895140366957e+00, -1.337685431625305e+00, -1.337692729303928e+00, -1.344370531902555e+00, -1.329951519738707e+00, -2.877737177326621e+00, -1.329951519738707e+00, -6.064516456341562e-01, -6.090440201731684e-01, -6.052754234144271e-01, -4.724092931127507e-01, -5.005162621979283e-01, -5.022260998958679e-01, -4.901966115783256e-01, -5.927297587966892e-01, -6.145295620009947e-01, -5.516926986833890e-01, -4.702102615523014e-01, -5.084667454389082e-01, -5.164434293683513e-02, -6.683854624253094e-02, -5.386938223118471e-02, -6.772531031651059e-02, -7.663584007207307e-01, -7.017265386038148e-01, -4.029874249111519e-02, -4.269500317774762e-02, -7.172714408086735e-02, -1.446303746800106e-02, -7.172714408086718e-02, -9.300013003226422e-03, -1.660073243950101e-05, -1.989310863396902e-05, -3.451657314810478e-06, -2.341590405782412e-05, -5.603403524720520e-04, -2.940764021014107e-03, -3.630253699715038e-06, -3.452087826844029e-06, -1.181153120191666e-05, -2.186269666903316e-06, -1.181153120191666e-05, -2.186269666903305e-06, -4.951321433152147e+00, -4.950203494568537e+00, -4.970183981507038e+00, -4.968431778500274e+00, -4.952635212920866e+00, -4.951021155931872e+00, -4.968809186702723e+00, -4.967569492775600e+00, -4.757742144452081e+00, -4.959351424948951e+00, -4.960814886058022e+00, -4.756416638583437e+00, -9.529944798501906e-01, -9.480467208626824e-01, -9.126256957973736e-01, -9.090919335327280e-01, -9.910131274728324e-01, -9.751568967242290e-01, -9.540878209365773e-01, -9.383008333609854e-01, -9.027497650402537e-01, -1.772536057690903e+00, -9.027497650402535e-01, -9.230704485259191e-01, -1.833091112280326e-01, -2.966863057318104e-01, -3.726511549629026e-01, -3.850571892277438e-01, -1.736082510773033e-01, -1.614210673828793e-01, -1.661986126864980e-01, -1.915958580114858e-01, -2.262170887165233e-01, -2.927507001152594e-01, -2.262170887165238e-01, -1.856364487803044e-01, -1.276901951967772e-02, -1.302373842092027e-02, -4.668372328404175e-02, -7.815906367592065e-02, -1.100987220732592e-02, -1.154782502501564e-02, -8.303850469420495e-01, -8.307724445806594e-01, -1.959980844174911e-02, -2.585934037342316e-02, -1.959980844174893e-02, -2.585934037342316e-02, -2.757170256811401e-07, -1.722872881144229e-06, -3.234657184220773e-06, -3.384017596288299e-06, -1.350916167279305e-06, -1.603482130123035e-06, -7.091377201528383e-03, -2.367755960087823e-03, -1.442283338714289e-06, -3.720077290078788e-06, -1.442283338714284e-06, -3.720077290078793e-06, -4.325515835355856e-01, -4.335935691973942e-01, -4.530298591074320e-01, -4.552828265302319e-01, -4.244994162004013e-01, -4.265158592640759e-01, -4.230677896115385e-01, -4.456852933926485e-01, -4.239937426861232e-01, -4.259169927686263e-01, -4.239937426861232e-01, -4.493553181524385e-01, -4.222156299292242e-01, -4.228675516106282e-01, -1.390123437779918e-01, -2.500343293253282e-01, -1.792336120752356e-01, -2.533194222492796e-01, -3.075931400762862e-01, -3.110670381561002e-01, -2.328276898952065e-01, -2.367887029435526e-01, -2.328276898952064e-01, -2.793353540642419e-01, -3.264048776931971e-01, -3.949255602280524e-01, -1.100601442041180e-01, -1.108063213296706e-01, -1.400330563546923e-01, -1.327626506706445e-01, -1.998520001770583e-01, -1.287813812017744e-01, -1.341134074016058e-01, -1.333242698878579e-01, -1.341134074016056e-01, -1.776494617798196e-01, -1.434305272196854e-01, -1.394098141187150e-01, -5.301361750773246e-04, -5.408694298212617e-04, -5.000507044207222e-03, -5.304397139926953e-03, -9.842913140301449e-02, -8.813118341761893e-02, -7.740276615902619e-03, -7.598676796814779e-03, -7.740276615902582e-03, -7.598676796814768e-03, -8.770369944484864e-06, -9.756782291455308e-06, -6.314854677506478e-08, -6.358249407290729e-08, -9.543815335210611e-08, -1.148184889842417e-07, -3.664865785103869e-03, -3.805266152624647e-03, -1.224809358675822e-06, -2.867044430524926e-06, -1.224809358675819e-06, -5.164688360711303e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_revm11_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revm11", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.383795205017237e-08, 0.000000000000000e+00, 1.384225485782477e-08, 1.383839495005870e-08, 0.000000000000000e+00, 1.384257553767843e-08, 1.383954340541382e-08, 0.000000000000000e+00, 1.384429435806137e-08, 1.383458832453259e-08, 0.000000000000000e+00, 9.262721645530731e-09, 1.383824580087317e-08, 0.000000000000000e+00, 9.265334879707173e-09, 9.263540245436359e-09, 0.000000000000000e+00, 9.265334879707173e-09, -1.336724608424312e-05, 0.000000000000000e+00, -2.179705566252448e-05, -1.336337507432626e-05, 0.000000000000000e+00, -1.336850945735693e-05, -1.328755998059575e-05, 0.000000000000000e+00, -1.327328180446422e-05, -1.331089367879032e-05, 0.000000000000000e+00, -1.331006130281015e-05, -1.338428239791181e-05, 0.000000000000000e+00, -1.323995777229604e-05, -2.182793874064359e-05, 0.000000000000000e+00, -1.323995777229604e-05, -2.525874961826238e-02, 0.000000000000000e+00, -2.447301845366099e-02, -2.552672622536241e-02, 0.000000000000000e+00, -6.587383924795488e-03, -6.157489023336125e-03, 0.000000000000000e+00, -6.137240807771164e-03, -6.411346057570619e-03, 0.000000000000000e+00, -2.779210913557524e-02, -2.353812529999058e-02, 0.000000000000000e+00, -3.487907128097280e-02, -6.520396313937383e-03, 0.000000000000000e+00, -5.964108237241602e-03, -2.481939390455950e+00, 0.000000000000000e+00, -2.822209319909856e-01, -2.358623414322175e+00, 0.000000000000000e+00, -2.984549560926641e-01, -1.402545843831531e-03, 0.000000000000000e+00, -1.689774336102153e-02, -1.661323776404897e-01, 0.000000000000000e+00, -1.299623655599113e-01, -2.060487719501404e-01, 0.000000000000000e+00, -6.870822508041706e-01, -2.060487719501403e-01, 0.000000000000000e+00, -1.691282302857296e+01, -2.114206388014993e-02, 0.000000000000000e+00, -2.395924451859006e-02, -5.555229874953146e+03, 0.000000000000000e+00, -2.795832379511770e-02, -1.718337734610692e+02, 0.000000000000000e+00, -3.738591563021136e-01, -5.601590960256653e-03, 0.000000000000000e+00, -5.472061418532006e-03, -1.599140044162468e-02, 0.000000000000000e+00, -8.874075394027993e-03, -1.599140044162468e-02, 0.000000000000000e+00, -8.874075394028000e-03, 3.641129211430348e-06, 0.000000000000000e+00, 3.644622593567680e-06, 3.645035492264079e-06, 0.000000000000000e+00, 3.648411137816940e-06, 3.641452157248036e-06, 0.000000000000000e+00, 3.644826769567301e-06, 3.644801208891071e-06, 0.000000000000000e+00, 3.648265331085149e-06, 4.701206822874015e-06, 0.000000000000000e+00, 3.646612409631584e-06, 3.643174397324780e-06, 0.000000000000000e+00, 4.705757375161760e-06, -1.411843906168632e-04, 0.000000000000000e+00, -1.410634126681331e-04, -1.355308177479560e-04, 0.000000000000000e+00, -1.355307952370412e-04, -1.456827159371021e-04, 0.000000000000000e+00, -1.443532148819229e-04, -1.411085895902304e-04, 0.000000000000000e+00, -1.395720066910211e-04, -1.343131768070397e-04, 0.000000000000000e+00, -2.658994195133508e-04, -1.343131768070397e-04, 0.000000000000000e+00, -1.376758872824328e-04, -3.184782815351399e-03, 0.000000000000000e+00, -8.473453005803810e-04, 8.513348599761085e-03, 0.000000000000000e+00, 9.036001189253894e-03, -1.549133075230036e-02, 0.000000000000000e+00, -1.020847896403914e-02, -5.237940328748660e-03, 0.000000000000000e+00, -1.064623622107785e-03, 1.046274144344257e-03, 0.000000000000000e+00, -2.153238837525711e-04, 1.046274144344259e-03, 0.000000000000000e+00, -2.414211609233484e-03, -7.635637556629000e-01, 0.000000000000000e+00, -7.510794694081974e-01, -2.798185692795273e+00, 0.000000000000000e+00, -8.174187670392483e-02, -8.526782744800064e-01, 0.000000000000000e+00, -8.288547745365749e-01, 1.269646425339535e-05, 0.000000000000000e+00, 1.294657890722861e-05, -4.846905419455572e-01, 0.000000000000000e+00, -2.724300804201269e-01, -4.846905419455578e-01, 0.000000000000000e+00, -2.724300804201265e-01, -3.004523465785107e+04, 0.000000000000000e+00, -2.279498245853144e-03, -4.919361853227964e-03, 0.000000000000000e+00, -4.468505528543811e-03, -1.980752425503439e-02, 0.000000000000000e+00, -2.438327633260346e-02, -8.017847489632265e-01, 0.000000000000000e+00, -5.600139643573267e+01, -3.894214910453715e-03, 0.000000000000000e+00, -2.330941551953966e-02, -3.894214910453718e-03, 0.000000000000000e+00, -2.330941551953965e-02, -2.314048678935219e-02, 0.000000000000000e+00, -2.424402292005254e-02, 6.586271567855758e-03, 0.000000000000000e+00, 5.814599886072597e-03, 1.032519345693204e-04, 0.000000000000000e+00, -9.722708741518989e-04, -8.981863006657719e-03, 0.000000000000000e+00, -9.712877454500007e-03, -4.107536105711160e-03, 0.000000000000000e+00, -5.158265060501119e-03, -4.107536105711160e-03, 0.000000000000000e+00, -5.215481916349143e-03, -1.853113043005391e-02, 0.000000000000000e+00, -1.988473602859028e-02, -1.406485274025994e-02, 0.000000000000000e+00, -1.576621442509428e-02, 1.427633952578088e-03, 0.000000000000000e+00, 7.787877111181644e-03, 1.668684658093631e-02, 0.000000000000000e+00, 1.667546451047246e-02, 9.519322899707219e-03, 0.000000000000000e+00, 9.800463447718850e-03, 9.519322899707231e-03, 0.000000000000000e+00, 1.693040176309805e-02, 4.431495655382488e-03, 0.000000000000000e+00, 8.535745074135273e-03, -1.186548210415753e-01, 0.000000000000000e+00, -1.196798815667592e-01, -6.214538299253446e-01, 0.000000000000000e+00, -1.289666170045973e-01, -1.555674105100489e-01, 0.000000000000000e+00, -7.534511578562511e-02, -1.135220813674872e-01, 0.000000000000000e+00, -1.139974664177227e-01, -1.135220813674873e-01, 0.000000000000000e+00, -3.137173385434648e-01, -2.779328674890579e-02, 0.000000000000000e+00, -2.589416110291163e-02, -1.786188384619481e+02, 0.000000000000000e+00, -1.761431089575887e+02, -4.763934706238070e-01, 0.000000000000000e+00, -5.220419890930537e-01, -7.897778153230946e-02, 0.000000000000000e+00, -6.054452877573448e-02, -1.106429482433863e+00, 0.000000000000000e+00, -1.158759147653963e+00, -1.106429482433862e+00, 0.000000000000000e+00, -1.158759147653961e+00, -2.978636366324190e+03, 0.000000000000000e+00, -2.773326230569641e+03, -4.095739569174681e-04, 0.000000000000000e+00, -4.096391784196894e-04, -6.095042307294844e+04, 0.000000000000000e+00, -5.387899121995610e+04, -3.739298286856560e+01, 0.000000000000000e+00, -3.567385575275956e+01, -9.016606586638469e-03, 0.000000000000000e+00, -2.030477154830067e-02, -9.016606586638462e-03, 0.000000000000000e+00, -1.975152913231247e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_revm11_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revm11", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-5.014366648926088e-04, -5.002907287640217e-04, -5.012668045551584e-04, -5.001675147935910e-04, -5.007861304666902e-04, -4.994610116893556e-04, -5.026914286450421e-04, -1.667585960162654e-03, -5.013278403949007e-04, -1.666160617463932e-03, -1.666695882158402e-03, -1.666160617463932e-03, -1.287423506095103e-02, -3.833906079194188e-03, -1.288147781432222e-02, -1.287318657282768e-02, -1.302240020040246e-02, -1.304750884768483e-02, -1.297012949306485e-02, -1.297015133668799e-02, -1.286001037107401e-02, -1.309701201576666e-02, -3.827115656811795e-03, -1.309701201576666e-02, 1.026291107421501e-02, 1.021958333081350e-02, 1.026847258874561e-02, -5.740806269006003e-03, -3.870108374090766e-03, -3.738755181827214e-03, -4.263685366695848e-03, 1.024344673628961e-02, 1.013206604558294e-02, 9.157652645228904e-03, -6.163864774955281e-03, -3.489448713122493e-03, 6.959888607064903e-03, -4.314649237204264e-03, 7.630891952099246e-03, -4.239298638792986e-03, -4.067047565626676e-03, 5.957120858421649e-03, -4.703527852051009e-03, -5.119287373800346e-03, -4.981707627688993e-03, -1.876180732957822e-03, -4.981707627688839e-03, -3.109470118568677e-04, -1.355617894055170e-08, -1.842796346757924e-08, -2.443372234954076e-09, -2.534258234252990e-08, -5.565956975783340e-06, -5.270798710253330e-05, -7.813000850273995e-10, -7.257255223624577e-10, -7.283010487062381e-09, -7.454642377173855e-10, -7.283010487062381e-09, -7.454642377117406e-10, 5.802573413122652e-03, 5.805663376713052e-03, 6.084285817319743e-03, 6.077997085282948e-03, 5.822195038566872e-03, 5.817894196832474e-03, 6.063739622518214e-03, 6.065116536249970e-03, 5.772538931297468e-03, 5.941830277593410e-03, 5.943735068562531e-03, 5.772001898914728e-03, -1.381209298593894e-02, -1.395927165589060e-02, -1.518937383602258e-02, -1.529853236574484e-02, -1.260572884875779e-02, -1.308485925395756e-02, -1.378287941921865e-02, -1.429088673297848e-02, -1.553347623139461e-02, -1.806504695902967e-03, -1.553347623139461e-02, -1.480460626085877e-02, -8.631412263503430e-02, -4.222706560754588e-02, -3.089905936819830e-02, -2.372186504995593e-02, -5.941109613021585e-02, -7.593369667630072e-02, -8.761459819125524e-02, -8.789977363484873e-02, -8.259816005639670e-02, -4.268722721699280e-02, -8.259816005639670e-02, -8.739303093314764e-02, -1.831728237152407e-03, -1.880042276354069e-03, 2.162563077974000e-03, -6.359443526690810e-03, -1.345082209585529e-03, -1.644895176820443e-03, -3.520116943495516e-02, -3.520200201184326e-02, -3.073522594271991e-03, -4.058657803006485e-03, -3.073522594271876e-03, -4.058657803006576e-03, -1.856784087165500e-11, -1.507118432981468e-10, -6.112320107639159e-10, -5.808167544343802e-10, -1.028757444940852e-09, -1.503976137122273e-09, -4.004112176889430e-04, -6.951179641964367e-05, -2.155894416769943e-10, -3.339306928377506e-09, -2.155894416801290e-10, -3.339306928379800e-09, 1.400425717990222e-01, 1.379988728339116e-01, 1.350361479004608e-01, 1.366257698891941e-01, 7.987286176106374e-02, 7.932799138109528e-02, 7.462307019560488e-02, 1.499965946704659e-01, 7.797348015653056e-02, 7.714683393443598e-02, 7.797348015653056e-02, 1.500474189609804e-01, 1.485242933716222e-01, 1.470182163696972e-01, -8.355301141818788e-02, -3.730846149112897e-02, -9.088915128259727e-02, -4.416595879262317e-02, -2.461343925488146e-02, -2.285312460518740e-02, -7.123182442998206e-02, -6.962249327574996e-02, -7.123182442998190e-02, -3.102958475789143e-02, -5.982990145819853e-02, -2.097018869287803e-02, -5.254127283488217e-03, -5.196762637220875e-03, 1.324215193939442e-02, -5.455046145221786e-03, -2.129243907577015e-03, -3.976673653584382e-02, -1.683856790044947e-02, -1.725068090614302e-02, -1.683856790044924e-02, 1.082792649558054e-02, -6.243894607603106e-02, -6.703889950246404e-02, -5.340444976814308e-06, -5.412270218387088e-06, -1.273525999946162e-04, -1.526927996240763e-04, -6.363757197058374e-02, -8.424185489394431e-02, -1.061681806786439e-03, -1.450596758157277e-03, -1.061681806786351e-03, -1.450596758157307e-03, -5.382536086807249e-09, -6.336067736245206e-09, -9.914994100956073e-13, -9.984722487191952e-13, -1.317105499551740e-11, -1.898927665447325e-11, -1.639703491348990e-04, -1.873675195970319e-04, -4.241490068656235e-10, -2.240305839157980e-09, -4.241490068585417e-10, -3.081129170449994e-10]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
