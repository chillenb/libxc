
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_revscan0_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revscan0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.739214724064687e+01, -1.739219873271458e+01, -1.739246288052822e+01, -1.739169744603238e+01, -1.739209348813686e+01, -1.739209348813686e+01, -2.518679513210187e+00, -2.518784864634145e+00, -2.521866538302307e+00, -2.522845590207318e+00, -2.521689117397848e+00, -2.521689117397848e+00, -4.414069209091899e-01, -4.408792220803134e-01, -4.291285467905356e-01, -4.385511951919709e-01, -4.373513044631438e-01, -4.373513044631438e-01, -1.349722230638342e-01, -1.364595206331395e-01, -4.832852710301285e-01, -8.547358537363157e-02, -1.234647524034221e-01, -1.234647524034221e-01, -1.926211463069787e-03, -2.071363211066306e-03, -1.780211586342207e-02, -8.966567501533741e-04, -1.450789256751121e-03, -1.450789256751122e-03, -4.251079742540799e+00, -4.251907765078801e+00, -4.251135197304640e+00, -4.251865495785388e+00, -4.251490536541755e+00, -4.251490536541755e+00, -1.561198181181685e+00, -1.577928531251670e+00, -1.555885260762504e+00, -1.570778329954999e+00, -1.573162191939674e+00, -1.573162191939674e+00, -4.633718727113932e-01, -5.034125299596131e-01, -4.078348886588097e-01, -4.168786738035641e-01, -4.730456345486519e-01, -4.730456345486519e-01, -5.498411889630602e-02, -1.297024069996811e-01, -5.034745652985601e-02, -1.436046523755758e+00, -7.099361898082203e-02, -7.099361898082204e-02, -6.431718673998581e-04, -8.824521306706798e-04, -7.268712120349330e-04, -3.197293941735099e-02, -9.288454369965856e-04, -9.288454369965856e-04, -4.800821888299773e-01, -4.773726975926794e-01, -4.783334154534817e-01, -4.791184430662837e-01, -4.787253180058285e-01, -4.787253180058285e-01, -4.653300251290959e-01, -3.992211733694021e-01, -4.183724964948619e-01, -4.371922014621793e-01, -4.274698954754360e-01, -4.274698954754360e-01, -5.209747187814783e-01, -1.716740432979548e-01, -2.048063809893753e-01, -2.637941676769197e-01, -2.349727135574677e-01, -2.349727135574677e-01, -3.588855076678182e-01, -1.685061706268923e-02, -2.441437687386014e-02, -2.592551678238899e-01, -4.316868136921995e-02, -4.316868136921996e-02, -2.982421251316433e-03, -1.629322736844773e-04, -4.312550434012824e-04, -4.118157265568272e-02, -8.413568300732453e-04, -8.413568300732442e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_revscan0_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revscan0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.270590091864934e+01, -2.270596485166141e+01, -2.270599213234642e+01, -2.270603109063776e+01, -2.270628764806425e+01, -2.270645348092125e+01, -2.270525835424694e+01, -2.270514140774994e+01, -2.270595548520675e+01, -2.270566855341231e+01, -2.270595548520675e+01, -2.270566855341231e+01, -3.572152943829733e+00, -3.569895101646784e+00, -3.572942989160776e+00, -3.570262037140069e+00, -3.586006611591555e+00, -3.587906265381537e+00, -3.587890256052060e+00, -3.586657701794036e+00, -3.569970299693659e+00, -3.597516811209926e+00, -3.569970299693659e+00, -3.597516811209926e+00, -6.225747460595800e-01, -6.282125122312368e-01, -6.209747073859894e-01, -6.271735447859905e-01, -5.985461985236438e-01, -5.963951972255156e-01, -6.156443879672050e-01, -6.199282279105078e-01, -6.310919339939913e-01, -5.911145285718427e-01, -6.310919339939913e-01, -5.911145285718427e-01, -1.102964033719606e-01, -1.506842870555693e-01, -1.099403736720275e-01, -1.539489982137696e-01, -6.135021643853766e-01, -6.379135093746012e-01, -1.105394732654840e-01, -8.324361311463357e-02, -1.082511575321742e-01, -8.283967886322360e-02, -1.082511575321742e-01, -8.283967886322360e-02, -3.009107306857428e-03, -1.482752874012453e-03, -3.399171315423518e-03, -3.334123783970491e-03, -2.710968264858490e-02, -2.848330612395620e-02, -1.671643885034633e-03, -1.630363061501080e-03, -2.824002229337051e-03, -1.453363485437003e-03, -2.824002229337053e-03, -1.453363485437004e-03, -5.572030992863136e+00, -5.570684995092756e+00, -5.573771731139620e+00, -5.572366443653801e+00, -5.572136970179032e+00, -5.570749447280557e+00, -5.573630275723954e+00, -5.572276645443648e+00, -5.572915669747514e+00, -5.571528411074610e+00, -5.572915669747514e+00, -5.571528411074610e+00, -1.936999925879815e+00, -1.938959146703970e+00, -1.965239906523755e+00, -1.966133033351836e+00, -1.922116904045756e+00, -1.928132206876095e+00, -1.947416320803250e+00, -1.953534672018124e+00, -1.964814453343840e+00, -1.955104690747017e+00, -1.964814453343840e+00, -1.955104690747017e+00, -6.171546559278203e-01, -6.155932616977111e-01, -6.955437241160287e-01, -6.953704948903834e-01, -5.588039578376162e-01, -5.810861921657823e-01, -6.308585520383018e-01, -6.460354664207614e-01, -6.455162099548338e-01, -6.125079370053591e-01, -6.455162099548337e-01, -6.125079370053591e-01, -7.375388405821078e-02, -7.572385594374872e-02, -6.000417445282445e-02, -5.677553850885703e-02, -6.929247816437939e-02, -7.085979410637616e-02, -2.193853455657834e+00, -2.192825709316260e+00, -6.640823496412582e-02, -2.557472199177929e-02, -6.640823496412568e-02, -2.557472199177875e-02, -1.168542933223804e-03, -1.215432833381106e-03, -1.613514094809249e-03, -1.635182823000668e-03, -1.266340275521625e-03, -1.378553401624031e-03, -4.791802837109914e-02, -4.637115125984888e-02, -1.228430638556390e-03, -1.850528512711379e-03, -1.228430638556390e-03, -1.850528512711379e-03, -6.394384143285049e-01, -6.419616661601617e-01, -6.320812280157475e-01, -6.346514830110273e-01, -6.346060553818937e-01, -6.371766297403574e-01, -6.367564407709072e-01, -6.392822793137209e-01, -6.356760084053883e-01, -6.382236081321304e-01, -6.356760084053883e-01, -6.382236081321304e-01, -6.241966358958621e-01, -6.262109903937723e-01, -5.083893284709404e-01, -5.109419684867500e-01, -5.405562627836409e-01, -5.433011154939089e-01, -5.732778242559253e-01, -5.754010700020871e-01, -5.566039792514202e-01, -5.588438772178762e-01, -5.566039792514201e-01, -5.588438772178763e-01, -7.345502054361033e-01, -7.338027784005896e-01, -1.694783941141238e-01, -1.708259973622656e-01, -2.183847183946012e-01, -2.239214016693593e-01, -3.388187235323973e-01, -3.411342271078590e-01, -2.785823170517772e-01, -2.789373482232020e-01, -2.785823170517771e-01, -2.789373482232020e-01, -4.558678837140189e-01, -4.611982175162183e-01, -2.320082312887405e-02, -2.475889526507345e-02, -3.673281461985753e-02, -3.794231165991768e-02, -3.383166281526684e-01, -3.458450753189267e-01, -5.667872053803787e-02, -5.772665825496044e-02, -5.667872053803791e-02, -5.772665825496047e-02, -5.145914477066968e-03, -5.392073795627074e-03, -2.996437609268303e-04, -3.181202234559744e-04, -7.646564623307248e-04, -8.365739776656327e-04, -5.177622468985262e-02, 4.087592796946806e-03, -1.214446105310440e-03, -1.657716002654779e-03, -1.214446105310438e-03, -1.657716002654778e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_revscan0_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revscan0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-8.124877845458797e-09, 0.000000000000000e+00, -8.123213705080028e-09, -8.124789254224762e-09, 0.000000000000000e+00, -8.123149568893250e-09, -8.124219174532056e-09, 0.000000000000000e+00, -8.122413441366946e-09, -8.125210205226854e-09, 0.000000000000000e+00, -8.123678270444817e-09, -8.124832933595037e-09, 0.000000000000000e+00, -8.122963067691415e-09, -8.124832933595037e-09, 0.000000000000000e+00, -8.122963067691415e-09, -2.638664546732520e-05, 0.000000000000000e+00, -2.621339917972191e-05, -2.644130313156464e-05, 0.000000000000000e+00, -2.623701132430096e-05, -2.732029304559483e-05, 0.000000000000000e+00, -2.743681557070732e-05, -2.753410380504500e-05, 0.000000000000000e+00, -2.742058385505717e-05, -2.629426850554499e-05, 0.000000000000000e+00, -2.814362980989685e-05, -2.629426850554499e-05, 0.000000000000000e+00, -2.814362980989685e-05, -7.961701614829089e-03, 0.000000000000000e+00, -8.283039302430189e-03, -7.893071202932747e-03, 0.000000000000000e+00, -8.231850249900483e-03, -6.813767385059056e-03, 0.000000000000000e+00, -6.940480969285164e-03, -8.222014113477106e-03, 0.000000000000000e+00, -8.553631889645769e-03, -8.188894624824144e-03, 0.000000000000000e+00, -9.751388592161792e-03, -8.188894624824144e-03, 0.000000000000000e+00, -9.751388592161792e-03, -3.360482684985032e+00, 0.000000000000000e+00, -1.633204570163262e+00, -3.553998890485280e+00, 0.000000000000000e+00, -1.630234431564728e+00, -2.061306613691072e-03, 0.000000000000000e+00, -2.505666860139751e-03, -7.768046419975437e-01, 0.000000000000000e+00, -4.008515243875157e+00, -3.235264414977173e+00, 0.000000000000000e+00, 2.450854837283855e-01, -3.235264414977168e+00, 0.000000000000000e+00, 2.450854837283853e-01, 1.495255727304201e+01, 0.000000000000000e+00, -1.281478508518890e+03, 1.620004615973601e+02, 0.000000000000000e+00, -1.042833107003123e+02, 3.831452299277985e+00, 0.000000000000000e+00, 2.000882184841587e+00, 6.603365544910855e+02, 0.000000000000000e+00, 6.691347939642674e+02, 3.166777658736416e+02, 0.000000000000000e+00, 1.573655364964321e+03, 3.166777658736439e+02, 0.000000000000000e+00, 1.573655364964323e+03, -2.285679096913264e-06, 0.000000000000000e+00, -2.287247174534804e-06, -2.286348678530925e-06, 0.000000000000000e+00, -2.287895567692684e-06, -2.285487476316945e-06, 0.000000000000000e+00, -2.287104557784971e-06, -2.286070264994538e-06, 0.000000000000000e+00, -2.287701581950562e-06, -2.286194882786886e-06, 0.000000000000000e+00, -2.287601201005232e-06, -2.286194882786886e-06, 0.000000000000000e+00, -2.287601201005232e-06, -1.334945340054676e-04, 0.000000000000000e+00, -1.317313754114407e-04, -1.218498974862851e-04, 0.000000000000000e+00, -1.207287362884940e-04, -1.288000477083807e-04, 0.000000000000000e+00, -1.286738205717851e-04, -1.187108126273888e-04, 0.000000000000000e+00, -1.184268936159922e-04, -1.295991372985734e-04, 0.000000000000000e+00, -1.260749776078603e-04, -1.295991372985734e-04, 0.000000000000000e+00, -1.260749776078603e-04, -2.438788524244943e-02, 0.000000000000000e+00, -2.392714378850094e-02, -2.030782361326591e-02, 0.000000000000000e+00, -1.975320320962273e-02, -5.877750926455693e-02, 0.000000000000000e+00, -4.453960711716719e-02, -6.222552556109819e-02, 0.000000000000000e+00, -5.026266300448437e-02, -1.835657578682104e-02, 0.000000000000000e+00, -2.674481789538933e-02, -1.835657578682104e-02, 0.000000000000000e+00, -2.674481789538931e-02, -1.280939049223175e+00, 0.000000000000000e+00, -9.854144070099495e-01, -3.330251270129192e+00, 0.000000000000000e+00, -3.401582829873948e+00, -4.610755058530017e-01, 0.000000000000000e+00, -1.216501671232820e+00, -4.154658094424163e-04, 0.000000000000000e+00, -4.160575838144641e-04, -4.892040925200225e+00, 0.000000000000000e+00, -1.358819121818880e+01, -4.892040925200249e+00, 0.000000000000000e+00, -1.358819121818888e+01, 1.323783753041162e+03, 0.000000000000000e+00, 1.141022665354353e+03, 7.873848131536726e+02, 0.000000000000000e+00, 7.333958746345340e+02, 3.465030924817921e+03, 0.000000000000000e+00, 3.317008285422654e+03, 9.516244678604818e-01, 0.000000000000000e+00, -1.187439735781995e+00, 2.267997232273698e+03, 0.000000000000000e+00, 1.123956485662100e+03, 2.267997232273694e+03, 0.000000000000000e+00, 1.123956485662097e+03, -1.734056674499051e-02, 0.000000000000000e+00, -1.705571022717704e-02, -1.680137051501423e-02, 0.000000000000000e+00, -1.653536940166035e-02, -1.698064195585271e-02, 0.000000000000000e+00, -1.670946803448197e-02, -1.714042821835358e-02, 0.000000000000000e+00, -1.686273147379570e-02, -1.706045782024767e-02, 0.000000000000000e+00, -1.678573147784208e-02, -1.706045782024767e-02, 0.000000000000000e+00, -1.678573147784208e-02, -2.114675432627606e-02, 0.000000000000000e+00, -2.076280671285721e-02, -2.653579137557225e-02, 0.000000000000000e+00, -2.609308921835853e-02, -2.408805511891440e-02, 0.000000000000000e+00, -2.368459703206822e-02, -2.248911381263183e-02, 0.000000000000000e+00, -2.218189931172038e-02, -2.343645743227995e-02, 0.000000000000000e+00, -2.300488828999896e-02, -2.343645743227996e-02, 0.000000000000000e+00, -2.300488828999896e-02, -2.004560299881362e-02, 0.000000000000000e+00, -1.887475324473599e-02, -8.094271444741621e-01, 0.000000000000000e+00, -7.988940995208738e-01, -5.241563420411157e-01, 0.000000000000000e+00, -4.958488408377366e-01, -2.678817746640083e-01, 0.000000000000000e+00, -2.655364039575161e-01, -3.329362445431077e-01, 0.000000000000000e+00, -3.336626094026598e-01, -3.329362445431070e-01, 0.000000000000000e+00, -3.336626094026597e-01, -6.012484586633304e-02, 0.000000000000000e+00, -5.511574888965615e-02, -8.963806372263367e+00, 0.000000000000000e+00, -3.697983298002160e+00, 1.380134535918334e+00, 0.000000000000000e+00, 9.253967091350745e-01, -3.317200555142660e-01, 0.000000000000000e+00, -2.188384511741096e-01, -2.215260274826254e+00, 0.000000000000000e+00, -3.986883048567309e+00, -2.215260274826245e+00, 0.000000000000000e+00, -3.986883048567294e+00, 1.258954673217857e+02, 0.000000000000000e+00, 1.189944365455874e+02, 1.535033367491711e+04, 0.000000000000000e+00, 2.135180367967756e+04, 3.491618917318509e+03, 0.000000000000000e+00, 3.253786637636386e+03, -4.303765833943897e+00, 0.000000000000000e+00, -3.913668542987087e+01, 3.737856090575154e+03, 0.000000000000000e+00, 1.377791597672848e+03, 3.737856090575162e+03, 0.000000000000000e+00, 1.377791597672859e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_revscan0_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revscan0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([6.572032410035714e-04, 6.570920674175562e-04, 6.572020319452585e-04, 6.570912032948782e-04, 6.571805012992689e-04, 6.570653251435583e-04, 6.571935048726059e-04, 6.570820280591369e-04, 6.572029817398905e-04, 6.570624436009526e-04, 6.572029817398905e-04, 6.570624436009526e-04, 7.808232726190347e-03, 7.746281936097490e-03, 7.826983638489753e-03, 7.754134407584900e-03, 8.126503932721138e-03, 8.165871594735988e-03, 8.213849871971960e-03, 8.172905685661968e-03, 7.772252119985872e-03, 8.421059886479614e-03, 7.772252119985872e-03, 8.421059886479614e-03, 1.406793384155469e-02, 1.470309554852092e-02, 1.394513672639904e-02, 1.457793558647361e-02, 1.184298437255378e-02, 1.234767762648462e-02, 1.571720393562288e-02, 1.647606343820839e-02, 1.421490320147837e-02, 1.894692092386790e-02, 1.421490320147837e-02, 1.894692092386790e-02, 1.346212189406338e-01, 7.567293086729543e-02, 1.471350803850316e-01, 7.931063299575464e-02, 1.421294415569746e-03, 2.126998005347071e-03, 1.662540591676429e-02, 7.698413351170570e-02, 1.468110619131510e-01, 1.619823990701849e-03, 1.468110619131507e-01, 1.619823990701849e-03, 4.175637460784719e-04, 2.903574694990911e-03, 1.840465255221433e-04, 7.506847248940848e-04, 7.495366264227258e-04, 1.303515194854241e-03, 5.735876335877870e-07, 7.455504103972602e-07, 2.950100514777531e-05, 2.483964823019574e-07, 2.950100514777343e-05, 2.483964823019567e-07, 2.677501064782189e-03, 2.677571833070594e-03, 2.679103899706188e-03, 2.679121655030119e-03, 2.677385269132526e-03, 2.677477542088557e-03, 2.678768167593952e-03, 2.678892816066495e-03, 2.678476822012849e-03, 2.678375732362415e-03, 2.678476822012849e-03, 2.678375732362415e-03, 8.310470214868798e-03, 8.209082263667315e-03, 7.794773878465250e-03, 7.724251026775677e-03, 7.919014865273622e-03, 7.946456826219408e-03, 7.476672379817449e-03, 7.494432525931355e-03, 8.269678349558881e-03, 7.976825572983827e-03, 8.269678349558881e-03, 7.976825572983827e-03, 3.826234509528945e-02, 3.734900732492914e-02, 3.848486856896819e-02, 3.758247971029402e-02, 6.526317847235458e-02, 5.658619892748121e-02, 7.163742485508678e-02, 6.643966405417667e-02, 3.267962282929442e-02, 4.015960946436987e-02, 3.267962282929442e-02, 4.015960946436987e-02, 1.074177812188746e-02, 9.169909044662023e-03, 1.403853802441838e-01, 1.453725613370077e-01, 5.130421511649727e-03, 9.424847273670527e-03, 2.035272300462615e-02, 2.035478481216394e-02, 4.703556916089345e-02, 1.479485697809555e-01, 4.703556916089369e-02, 1.479485697809564e-01, 1.669323033863830e-08, 1.930459907683483e-08, 1.398204364615892e-07, 1.098291471964923e-07, 1.457973143640000e-06, 1.783514129055100e-06, 1.576717969550791e-03, 4.678174328523154e-03, 1.895260368401734e-08, 5.417732390430086e-05, 1.895260368401742e-08, 5.417732390430135e-05, 2.771187593196285e-02, 2.757904992466422e-02, 2.683253172899548e-02, 2.671669606468791e-02, 2.712897023567083e-02, 2.700884438288683e-02, 2.738652791029840e-02, 2.725929374327126e-02, 2.725767763562056e-02, 2.713358496380012e-02, 2.725767763562056e-02, 2.713358496380012e-02, 3.054018676699139e-02, 3.031548611493973e-02, 2.667933254992139e-02, 2.657239889948834e-02, 2.733746867373505e-02, 2.722971516261503e-02, 2.839904837952876e-02, 2.830303919583372e-02, 2.803772758840733e-02, 2.784396787641717e-02, 2.803772758840734e-02, 2.784396787641717e-02, 4.295885870338133e-02, 4.083765211073929e-02, 7.043072135171574e-02, 7.070041272207191e-02, 7.747896010692669e-02, 7.557865880828078e-02, 8.772906763316264e-02, 8.827913221696851e-02, 7.493620599081874e-02, 7.500474930841844e-02, 7.493620599081860e-02, 7.500474930841838e-02, 4.467588971258590e-02, 4.198057923731539e-02, 4.507009989981246e-03, 2.980062508503301e-03, 1.300058670366730e-03, 1.634732544121562e-03, 9.406840559339172e-02, 6.653159463209152e-02, 9.456699109493025e-03, 1.659498209602087e-02, 9.456699109492999e-03, 1.659498209602085e-02, 1.773345339435601e-06, 1.757441509224959e-06, 3.201279528471146e-10, 2.370323195422669e-10, 8.402694264061845e-07, 1.024049894117242e-06, 1.387253932799783e-02, 1.032914920584662e-01, 5.902413280201392e-08, 3.996668350723010e-05, 5.902413280201368e-08, 3.996668350722849e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
