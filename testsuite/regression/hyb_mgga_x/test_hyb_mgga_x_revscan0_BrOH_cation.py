
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_revscan0_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revscan0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.631270105764347e+01, -1.631279858716194e+01, -1.631322525391813e+01, -1.687162269587088e+01, -1.687222781227797e+01, -1.743201106749829e+01, -2.564096330173942e+00, -2.824578904415390e+00, -2.824938880052053e+00, -2.825049463235847e+00, -2.824744252253329e+00, -2.564332717110194e+00, -3.881113063527457e-01, -4.639117176026279e-01, -5.239525710159291e-01, -4.527274575412608e-01, -3.776256237656680e-01, -5.289944560095319e-01, -1.190685332118750e-01, -1.213209335613363e-01, -5.231629417258361e-01, -1.021144362033703e-01, -1.319392902596843e-01, -1.292731119294516e-01, -2.456471437218379e-03, -2.973748765617621e-03, -2.080026625540686e-02, -1.124492925259133e-03, -1.841151276223044e-03, -1.841151276223044e-03, -4.251765300959450e+00, -4.252585529270998e+00, -4.251806472326282e+00, -4.252530502919456e+00, -4.171463668521653e+00, -4.171532465478659e+00, -1.586746734177997e+00, -1.598873284806129e+00, -1.577849310799286e+00, -1.588589908364943e+00, -1.426830598196354e+00, -1.597768929601002e+00, -4.438138401576263e-01, -5.202551935795092e-01, -4.416850598446073e-01, -4.600121710094491e-01, -4.554469737370942e-01, -4.865198235069125e-01, -6.796937855073631e-02, -1.159712704240504e-01, -6.244385069497067e-02, -1.564861880556731e+00, -8.240357263699713e-02, -8.240357263699713e-02, -1.066362186163383e-03, -1.076824030607266e-03, -9.093011270315194e-04, -3.497068220016034e-02, -1.158955034277141e-03, -1.158955034277101e-03, -4.817452626119012e-01, -4.789129378622221e-01, -4.730236160121276e-01, -4.779329696371808e-01, -4.740959070817518e-01, -4.771943380342188e-01, -4.686795731173481e-01, -3.714420547515442e-01, -3.950330413129433e-01, -4.396818838765079e-01, -4.298144409011572e-01, -4.115546556948443e-01, -5.246974951522914e-01, -1.747886744664019e-01, -1.813449586042364e-01, -2.506921064977056e-01, -2.442858404649843e-01, -2.126989700303992e-01, -3.683337899850995e-01, -1.778348717303191e-02, -3.066087690587147e-02, -2.723820856782762e-01, -5.335487378470142e-02, -5.335487378470142e-02, -4.513743615809179e-03, -1.699653179028078e-04, -1.014371752945310e-03, -3.622017977597135e-02, -1.051076400585457e-03, -1.438011783594620e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_revscan0_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revscan0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.454844072724285e+01, -2.454771086619319e+01, -2.454841753184409e+01, -2.454769418480723e+01, -2.454839745165017e+01, -2.454765052371318e+01, -2.454865137850456e+01, -2.269970310033000e+01, -2.454842151272440e+01, -2.270022834474611e+01, -2.270048076634639e+01, -2.270022834474611e+01, -3.557407585953943e+00, -4.012594525281623e+00, -3.557483814612147e+00, -3.557352572996209e+00, -3.558946601769099e+00, -3.559245188155268e+00, -3.558715393968687e+00, -3.558767039285438e+00, -3.556667609897441e+00, -3.560149633551087e+00, -4.011339910640426e+00, -3.560149633551088e+00, -5.909156435620477e-01, -5.998936333975304e-01, -5.881261747014987e-01, -6.430431844716322e-01, -6.127176734562269e-01, -6.062497065957649e-01, -6.194764866030558e-01, -5.682570568340253e-01, -6.088656787852643e-01, -5.220497355245113e-01, -6.503377466003997e-01, -5.829471058263501e-01, -1.337941593714607e-01, -1.586251402193221e-01, -1.361955813990114e-01, -1.634654878436474e-01, -6.443363389698120e-01, -6.332709335598691e-01, -6.973607604492352e-02, -7.990480284404661e-02, -1.536789534683610e-01, 1.322750933519829e-02, -1.536789534683608e-01, -6.839746323622491e-02, 6.257058757457545e-01, 5.998428917248602e-01, -4.326366209280379e-03, 5.672649446274440e-01, -2.411376808939627e-02, 1.888832817231906e-01, 9.854655081106682e-01, 9.916822971085830e-01, 6.891527890739453e-01, 7.920619102653087e-01, 6.891527890739453e-01, 7.920619102652546e-01, -5.571761438820879e+00, -5.570431159882140e+00, -5.573501057617714e+00, -5.572111752824707e+00, -5.571873567062481e+00, -5.570500053032151e+00, -5.573365751894285e+00, -5.572026299275989e+00, -5.810620744189143e+00, -5.571273347906672e+00, -5.572640792357529e+00, -5.809229768465233e+00, -1.974888961920740e+00, -1.975399011966082e+00, -1.995379466467833e+00, -1.995245649408939e+00, -1.957162098423996e+00, -1.962756951895177e+00, -1.975146614524630e+00, -1.980895369771661e+00, -1.999518631565817e+00, -2.093207488581761e+00, -1.999518631565817e+00, -1.987706527165828e+00, -6.143452292582873e-01, -5.991468677337768e-01, -6.778314732125074e-01, -6.786909867604755e-01, -5.463358759480369e-01, -5.719879432975015e-01, -5.792947704517406e-01, -6.015475549468936e-01, -6.427937112496358e-01, -6.140748966093852e-01, -6.427937112496358e-01, -6.078996198965099e-01, 1.142945137186441e-02, 9.661739239089426e-03, -1.309977833753270e-01, -1.313548136526868e-01, 3.190052339748939e-02, 1.762259153747660e-02, -2.019559773288579e+00, -2.018699762329665e+00, -3.070278387832345e-02, -5.542895641954144e-02, -3.070278387832353e-02, -5.542895641954150e-02, -1.861683342148434e-03, 1.348393619616829e+00, 1.031063006299886e+00, 1.075003427411830e+00, 5.545896329858263e-01, 5.148396237016235e-01, 9.176419898804825e-02, -4.058797732222793e-02, 1.075175438161377e+00, 5.515266057645253e-01, 1.075175438161302e+00, 5.515266057651125e-01, -6.374984028101275e-01, -6.400588824466460e-01, -6.307271917414654e-01, -6.333153961933892e-01, -6.424259224424235e-01, -6.447968804599196e-01, -6.425725880334744e-01, -6.375987964840969e-01, -6.424815317576402e-01, -6.448646833114335e-01, -6.424815317576401e-01, -6.366232629899899e-01, -6.199497132923429e-01, -6.221056994585230e-01, -5.095286728352820e-01, -4.627759482426537e-01, -5.410123398526984e-01, -6.195532586002467e-01, -5.724842783319120e-01, -5.745937849363953e-01, -5.564985560879308e-01, -5.587278073459307e-01, -5.564985560879306e-01, -6.217181572821597e-01, -7.069338104529911e-01, -7.788358414113707e-01, -1.897073915461907e-01, -1.913843009289812e-01, -2.206329935826943e-01, -2.485588960906525e-01, -3.617017475197116e-01, -3.513249446011961e-01, -2.970553952143994e-01, -2.971640484654108e-01, -2.970553952143993e-01, -2.909902150312839e-01, -4.627418171926018e-01, -4.670861929145876e-01, -2.366199526754328e-02, -2.382410727168515e-02, 1.545962342422407e-01, 1.438517008469384e-01, -3.399065331819677e-01, -3.484299129540301e-01, 3.620754922361782e-02, 1.490519424107091e-02, 3.620754922361731e-02, 1.490519424107132e-02, -5.906029677306118e-03, -6.120208815912995e-03, 2.107657242466296e+00, 2.108578977081625e+00, -1.307121308090858e-03, -1.390232550827910e-03, -4.821842948409262e-02, -4.906702967911649e-02, 7.585793068423088e-01, 5.747095026835749e-01, 7.585793068489206e-01, -2.295567403008327e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_revscan0_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revscan0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.442959844610124e-08, 0.000000000000000e+00, -2.442429988070144e-08, -2.442848651804062e-08, 0.000000000000000e+00, -2.442349336196931e-08, -2.442516587713385e-08, 0.000000000000000e+00, -2.441867073064820e-08, -2.443766565804243e-08, 0.000000000000000e+00, -7.609294280139041e-09, -2.442890276033322e-08, 0.000000000000000e+00, -7.608941165084121e-09, -7.608462632427064e-09, 0.000000000000000e+00, -7.608941165084121e-09, -9.199268555321984e-06, 0.000000000000000e+00, -3.149629147336348e-05, -9.199527985632458e-06, 0.000000000000000e+00, -9.199665244822720e-06, -9.204756156413980e-06, 0.000000000000000e+00, -9.205309046804619e-06, -9.199748121979615e-06, 0.000000000000000e+00, -9.199241533648030e-06, -9.204589530264748e-06, 0.000000000000000e+00, -9.203280412543058e-06, -3.150112400915869e-05, 0.000000000000000e+00, -9.203280412543058e-06, -1.591420197255827e-02, 0.000000000000000e+00, -1.562312413513641e-02, -1.602513194202716e-02, 0.000000000000000e+00, -6.141455129516443e-03, -6.739802394511143e-03, 0.000000000000000e+00, -6.918528041022443e-03, -6.660162252179790e-03, 0.000000000000000e+00, -1.709599750893196e-02, -1.512497860323594e-02, 0.000000000000000e+00, -2.002928374389639e-02, -5.951063131526617e-03, 0.000000000000000e+00, -7.585304388543306e-03, -3.906364468454713e+00, 0.000000000000000e+00, -1.259032624314381e+00, -3.719522188353937e+00, 0.000000000000000e+00, -1.178142486121879e+00, -3.438384775278676e-03, 0.000000000000000e+00, -8.141575671372026e-03, -4.002583662050824e+00, 0.000000000000000e+00, -3.807782334805691e+00, -1.223283836680587e+00, 0.000000000000000e+00, -1.376812855453548e+01, -1.223283836680587e+00, 0.000000000000000e+00, -4.093301278995128e+01, -5.405296083344283e+05, 0.000000000000000e+00, -4.331184910648116e+05, -2.420430669216671e+06, 0.000000000000000e+00, -3.557406063940472e+05, -2.527081330935504e+03, 0.000000000000000e+00, -5.979849099155068e+02, -3.336928265607773e+06, 0.000000000000000e+00, -3.549413613824253e+06, -8.160059463196069e+05, 0.000000000000000e+00, -6.637552642916959e+06, -8.160059463196069e+05, 0.000000000000000e+00, -6.637552642916501e+06, -2.274571493172115e-06, 0.000000000000000e+00, -2.276767768581064e-06, -2.275363776594160e-06, 0.000000000000000e+00, -2.277534843051428e-06, -2.274641603295503e-06, 0.000000000000000e+00, -2.276813074478169e-06, -2.275319934505034e-06, 0.000000000000000e+00, -2.277508418257485e-06, -5.119108275895710e-06, 0.000000000000000e+00, -2.277149247276064e-06, -2.274957166470209e-06, 0.000000000000000e+00, -5.124426454553102e-06, -8.941062408189662e-05, 0.000000000000000e+00, -8.947143472173726e-05, -8.724015408604526e-05, 0.000000000000000e+00, -8.736506010889281e-05, -9.127215843435325e-05, 0.000000000000000e+00, -9.079237946575719e-05, -8.933570644074672e-05, 0.000000000000000e+00, -8.884798418283222e-05, -8.686460764425124e-05, 0.000000000000000e+00, -2.452157859452975e-04, -8.686460764425124e-05, 0.000000000000000e+00, -8.817790459847328e-05, -1.210569545859177e-02, 0.000000000000000e+00, -2.723528748926458e-02, -9.664964925489452e-03, 0.000000000000000e+00, -9.707178733414361e-03, -1.676145678056750e-02, 0.000000000000000e+00, -1.490278880704684e-02, -1.508673255365832e-02, 0.000000000000000e+00, -1.353989841053455e-02, -1.065372472012000e-02, 0.000000000000000e+00, -3.416439724361380e-02, -1.065372472012000e-02, 0.000000000000000e+00, -1.276988308213640e-02, -1.656106457385334e+01, 0.000000000000000e+00, -1.595651646980757e+01, -3.646771337918947e+00, 0.000000000000000e+00, -1.298213258360222e+00, -2.449627961269882e+01, 0.000000000000000e+00, -2.000083241745312e+01, -1.091641620619152e-04, 0.000000000000000e+00, -1.093742119935050e-04, -9.833226353008252e+00, 0.000000000000000e+00, -7.896298803155821e+00, -9.833226353008246e+00, 0.000000000000000e+00, -7.896298803155826e+00, -7.057060545083882e+07, 0.000000000000000e+00, -7.873658255113612e+06, -3.816472158113384e+06, 0.000000000000000e+00, -3.570982192322089e+06, -1.318864506078183e+07, 0.000000000000000e+00, -1.080553487629777e+07, -1.047156400963011e+02, 0.000000000000000e+00, -3.203198454438816e+02, -1.039945199192522e+07, 0.000000000000000e+00, -3.682470427088579e+06, -1.039945199192449e+07, 0.000000000000000e+00, -3.682470427092476e+06, -1.573278250576921e-02, 0.000000000000000e+00, -1.551559940072771e-02, -1.531721821485289e-02, 0.000000000000000e+00, -1.511015022958164e-02, -2.223662180689073e-02, 0.000000000000000e+00, -2.174290948922301e-02, -2.100558186820509e-02, 0.000000000000000e+00, -1.535912610403189e-02, -2.161154174423574e-02, 0.000000000000000e+00, -2.114976062099010e-02, -2.161154174423574e-02, 0.000000000000000e+00, -1.529920035551141e-02, -1.741365841952459e-02, 0.000000000000000e+00, -1.721547166346078e-02, -2.397079523808168e-02, 0.000000000000000e+00, -2.593714279592332e-02, -2.115588886248310e-02, 0.000000000000000e+00, -9.365247591973200e-02, -1.920593485484511e-02, 0.000000000000000e+00, -1.896272818003865e-02, -2.009592971245401e-02, 0.000000000000000e+00, -1.983729824823390e-02, -2.009592971245399e-02, 0.000000000000000e+00, -7.729262873915803e-02, -7.764155821971715e-03, 0.000000000000000e+00, -2.795293983274331e-02, -5.307265671463999e-01, 0.000000000000000e+00, -5.189341574109514e-01, -6.863755083040699e-01, 0.000000000000000e+00, -2.530291783166817e-01, -2.397656993578233e-01, 0.000000000000000e+00, -8.866357450214821e-02, -1.521582517401186e-01, 0.000000000000000e+00, -1.524674243573935e-01, -1.521582517401188e-01, 0.000000000000000e+00, -3.719642918237331e-01, -3.240030345662280e-02, 0.000000000000000e+00, -3.171102276079021e-02, -2.725410592490015e+03, 0.000000000000000e+00, -2.652058672139122e+03, -2.533982870238718e+02, 0.000000000000000e+00, -2.237392744604053e+02, -1.097007786768182e-01, 0.000000000000000e+00, -1.058921683113966e-01, -4.554231632575294e+01, 0.000000000000000e+00, -3.704443656514420e+01, -4.554231632575281e+01, 0.000000000000000e+00, -3.704443656514437e+01, -6.970222983957827e+05, 0.000000000000000e+00, -6.044740309489599e+05, -4.287525193849724e+08, 0.000000000000000e+00, -4.250748730233179e+08, -2.903913163907966e+08, 0.000000000000000e+00, -2.269346914927606e+08, -1.633453915093571e+02, 0.000000000000000e+00, -1.529482340743314e+02, -1.387855939410726e+07, 0.000000000000000e+00, -5.070606629074977e+06, -1.387855939422809e+07, 0.000000000000000e+00, -3.053117452608916e+07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_revscan0_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revscan0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.640606463580566e-03, 1.640279501008083e-03, 1.640552859265527e-03, 1.640240632839624e-03, 1.640398448858465e-03, 1.640014680221192e-03, 1.641000225736121e-03, 6.234707495073142e-04, 1.640572382816438e-03, 6.234735075301498e-04, 6.234597178602864e-04, 6.234735075301498e-04, 3.342903878259994e-03, 7.074876168446883e-03, 3.343015839020710e-03, 3.342925378746564e-03, 3.345212660636074e-03, 3.345571781653757e-03, 3.344130784900223e-03, 3.344087069573322e-03, 3.343190225226744e-03, 3.346009702875928e-03, 7.070529366513086e-03, 3.346009702875928e-03, 7.118358628236194e-03, 7.764081749915121e-03, 6.941258826807361e-03, 1.609484726178600e-02, 1.631403202753422e-02, 1.639788758791093e-02, 1.631294872363338e-02, 5.937006766638676e-03, 8.153544522132575e-03, 3.663633016961542e-03, 1.599216332847814e-02, 1.669129088204661e-02, 7.035418138314257e-03, 5.950591011180400e-02, 7.667230335200387e-03, 5.874633511732925e-02, 1.337949638169020e-02, 1.825918086080308e-03, 7.476391847004785e-02, 7.437049340376409e-02, 5.852426793142053e-02, 9.753320632383383e-02, 5.852426793142054e-02, 3.194490505142572e-04, 8.552165961593841e-01, 8.222967875806237e-01, 2.308145725926862e-07, 7.962951122635860e-01, 1.924674275721584e-05, 2.226384419008305e-01, 1.146349887258507e+00, 1.159395567269628e+00, 9.164857487863254e-01, 1.373404460887559e+00, 9.164857487863254e-01, 1.373404460887463e+00, 2.667326492225254e-03, 2.667979419262705e-03, 2.669043582473219e-03, 2.669639573462898e-03, 2.667450531755362e-03, 2.668057194674541e-03, 2.668922507504171e-03, 2.669563980740185e-03, 5.140105587607809e-03, 2.668809306918656e-03, 2.668184049911817e-03, 5.141643499017638e-03, 5.803152059909763e-03, 5.806060478290088e-03, 5.786611167688116e-03, 5.790034214496453e-03, 5.816073404117825e-03, 5.815104811657085e-03, 5.801582056813583e-03, 5.800571354562216e-03, 5.785009835799075e-03, 8.381166401565195e-03, 5.785009835799075e-03, 5.796635302855901e-03, 2.101143862938257e-02, 2.372825446214164e-02, 2.100206840130628e-02, 2.109414804640739e-02, 2.191009967717684e-02, 2.163775187947478e-02, 2.210029289255474e-02, 2.179597230508422e-02, 2.069738278819909e-02, 3.325739379777160e-02, 2.069738278819909e-02, 2.136790418057914e-02, 1.022052280266457e-01, 1.013568935456338e-01, 2.803508350434585e-03, 5.802059248197812e-02, 1.114440189466053e-01, 1.067643816731572e-01, 6.581705093327800e-03, 6.585337114484661e-03, 9.183492084470797e-02, 8.835140826576540e-02, 9.183492084470776e-02, 8.835140826576546e-02, 9.424045698214261e-09, 1.281634314660355e+00, 1.167850816864720e+00, 1.143093507314879e+00, 1.687621781924130e+00, 1.642377555963074e+00, 1.541135687033500e-01, 1.137858976648421e-04, 1.417555300246416e+00, 1.300502161048676e+00, 1.417555300246316e+00, 1.300502161050053e+00, 2.574981203637648e-02, 2.567792648060605e-02, 2.500787787369937e-02, 2.494585215999325e-02, 3.354815911463906e-02, 3.322923670794442e-02, 3.214266633246766e-02, 2.540464530216256e-02, 3.283471080227916e-02, 3.254510327654834e-02, 3.283471080227916e-02, 2.529779286690186e-02, 2.632629637198070e-02, 2.627153225783484e-02, 2.445350437460038e-02, 2.407607163415865e-03, 2.454149381868713e-02, 8.358549531201172e-02, 2.503195101890761e-02, 2.496946982452938e-02, 2.472948586867220e-02, 2.467505309109388e-02, 2.472948586867221e-02, 7.698570035700293e-02, 1.953724397186933e-02, 5.707726687174791e-02, 4.751707747592079e-02, 4.728451139634742e-02, 1.169581565986376e-02, 4.044239198130439e-02, 4.245650499282207e-02, 3.252243941746934e-02, 3.643850346199540e-02, 3.647471748925626e-02, 3.643850346199544e-02, 2.955551536995704e-02, 2.580297570780897e-02, 2.576275449117706e-02, 1.913947041155596e-05, 1.914601587870871e-05, 1.848839374057900e-01, 1.803594506300083e-01, 3.488424572399308e-02, 3.512204134447287e-02, 1.294924924168180e-01, 1.245654195509387e-01, 1.294924924168176e-01, 1.245654195509393e-01, 2.733727124613491e-07, 2.998311310308157e-07, 2.554386861977891e+00, 2.549880745474407e+00, 1.355989522787097e-08, 1.728444470183387e-08, 2.491605154640713e-04, 2.947495324201510e-04, 1.607832740248863e+00, 1.378824015801970e+00, 1.607832740262855e+00, 1.030562445076361e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
