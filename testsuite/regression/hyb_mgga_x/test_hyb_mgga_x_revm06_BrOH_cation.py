
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_revm06_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revm06", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.127519143373231e+01, -1.127519506036206e+01, -1.127523205205793e+01, -1.164456985600134e+01, -1.164452429330467e+01, -1.201389551545451e+01, -2.106545066669829e+00, -2.285454418265901e+00, -2.283786152827691e+00, -2.284668361630636e+00, -2.284331713538163e+00, -2.105407880344012e+00, -3.572372254705290e-01, -4.241694078218722e-01, -4.913622474401188e-01, -4.190722130456996e-01, -3.460535110611922e-01, -4.897104299839409e-01, -1.101977287717274e-01, -1.123281266448400e-01, -4.901543537096904e-01, -1.134305423510730e-01, -1.379830344426120e-01, -1.256566888283992e-01, -1.822150981635636e-02, -1.541709367595462e-02, -6.910357518199985e-02, -1.055018269036419e-02, -1.469193727326056e-02, -1.469193727326056e-02, -2.752376780844494e+00, -2.748637184704783e+00, -2.752158561108599e+00, -2.748859953811350e+00, -2.691202677393886e+00, -2.691254139119889e+00, -1.317654478500234e+00, -1.320684902822588e+00, -1.315938253762296e+00, -1.318367653144811e+00, -1.201717070351014e+00, -1.320164102484973e+00, -3.413070331606038e-01, -3.553313783228179e-01, -3.507098682112797e-01, -3.451599810193902e-01, -3.430772814218114e-01, -3.596186472874293e-01, -1.292580348475203e-01, -1.025793385543172e-01, -1.295882396319200e-01, -1.145163362888614e+00, -1.057297735179697e-01, -1.057297735179697e-01, -6.470823375579216e-03, -1.031519531540153e-02, -7.891492379039723e-03, -8.028200763059570e-02, -9.908736332532100e-03, -9.908736332532114e-03, -3.120827020092625e-01, -2.833069202891486e-01, -2.807613130714492e-01, -2.921611674678593e-01, -2.845564789870464e-01, -2.871391529588380e-01, -2.964582970388600e-01, -2.926266061183723e-01, -2.938037964646357e-01, -2.988707128014582e-01, -3.039909115984189e-01, -2.929090894389102e-01, -3.699690520681801e-01, -1.707689756585928e-01, -1.681684839499400e-01, -2.128358600118501e-01, -2.127702477017440e-01, -1.880946559910565e-01, -2.963101473600367e-01, -3.920634792091243e-02, -1.111068021537016e-01, -2.181761754291728e-01, -1.132974795984073e-01, -1.132974795984073e-01, -1.393781010139890e-02, -2.760842195280774e-03, -3.209036381740131e-03, -3.674258934459228e-02, -9.102456376827195e-03, -6.004554565719773e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_revm06_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revm06", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.353827690290842e+01, -1.353741913737560e+01, -1.353819735673139e+01, -1.353736142340924e+01, -1.353799763390561e+01, -1.353705937553762e+01, -1.353888589175931e+01, -1.253696061060942e+01, -1.353822350669718e+01, -1.253669270916760e+01, -1.253705483954140e+01, -1.253669270916760e+01, -2.313449446728653e+00, -2.678538710530411e+00, -2.313361875467680e+00, -2.313436202698137e+00, -2.311595756356497e+00, -2.311293282804566e+00, -2.312444567070197e+00, -2.312474445453585e+00, -2.313272858958053e+00, -2.310872155312861e+00, -2.678340031891471e+00, -2.310872155312861e+00, -5.232315284380878e-01, -5.218691630086842e-01, -5.235145226701226e-01, -4.166219256933513e-01, -4.322734957759591e-01, -4.349435727870016e-01, -4.235861092719290e-01, -5.235687025500244e-01, -5.239580057295458e-01, -5.397090430414482e-01, -4.180577126381899e-01, -4.481330013090024e-01, -1.585326720468166e-01, -1.342647422343741e-01, -1.590828696841783e-01, -1.311443295390243e-01, -6.596074920266959e-01, -7.274142787758479e-01, -4.322198528041381e-02, -6.113366999121910e-02, -1.470789612272582e-01, -2.771192681315073e-02, -1.470789612272581e-01, -1.306502478597988e-02, -2.332186207050575e-02, -2.473915651417104e-02, -1.310046455537468e-02, -2.607898682116400e-02, -3.313227445173512e-02, -1.001065427738800e-01, -1.414805244690552e-02, -1.391390064573492e-02, -2.086719017790934e-02, -1.194510386389824e-02, -2.086719017790935e-02, -1.194510386389832e-02, -2.681746274581321e+00, -2.681058590722854e+00, -2.675097438226542e+00, -2.674631686721137e+00, -2.681271905340550e+00, -2.680762534526802e+00, -2.675570950789162e+00, -2.674928234788753e+00, -2.856045882833266e+00, -2.677820007857461e+00, -2.678390277776257e+00, -2.855448040617209e+00, -1.300919098100296e+00, -1.301601234665511e+00, -1.316693670011838e+00, -1.316664076968731e+00, -1.285120584608239e+00, -1.290647587608981e+00, -1.301022193953805e+00, -1.305954495250937e+00, -1.319568857582393e+00, -1.538707052579978e+00, -1.319568857582394e+00, -1.311255160508079e+00, -3.512272340114508e-01, -3.956464457368112e-01, -3.704265791990820e-01, -3.663760247443656e-01, -3.525201339659947e-01, -3.488167984172062e-01, -3.341430412950109e-01, -3.404055013399605e-01, -3.627910339487926e-01, -3.907840998213875e-01, -3.627910339487925e-01, -3.457550544234614e-01, -2.553671379606033e-02, -2.436158916461258e-02, -1.478929460398397e-01, -1.374762059212836e-01, -4.134002442150145e-02, -2.970601026294556e-02, -1.139847836698724e+00, -1.139359440232732e+00, -1.215314061926520e-02, -3.119238003869723e-02, -1.215314061926466e-02, -3.119238003869680e-02, -5.870710986864515e-03, -1.105287931175727e-02, -1.361838459557331e-02, -1.382615316517460e-02, -1.016471415628183e-02, -1.075438010531867e-02, -8.442035645563101e-02, -1.874599591409835e-02, -1.041313306297124e-02, -1.421633571866683e-02, -1.041313306297115e-02, -1.421633571866713e-02, -5.051156698258379e-01, -5.078994122370892e-01, -3.624566965349397e-01, -3.698657541061651e-01, -4.246605173097039e-01, -4.328720631252568e-01, -4.721748649655283e-01, -4.737667580869680e-01, -4.489509006477905e-01, -4.564341476574632e-01, -4.489509006477905e-01, -4.510255371815222e-01, -4.824347648976661e-01, -4.869662278819509e-01, -3.068608363828000e-01, -3.520345381540114e-01, -3.053610999515353e-01, -3.419286439284378e-01, -3.083240493745120e-01, -3.085674757530918e-01, -3.145792651744842e-01, -3.157112297414664e-01, -3.145792651744841e-01, -3.447184588674056e-01, -3.992470384177738e-01, -4.327382598978260e-01, -1.807134770877809e-01, -1.808045667147990e-01, -2.140644997044125e-01, -1.724829171429915e-01, -2.711476029069242e-01, -2.311393630435685e-01, -1.874741452007399e-01, -1.876635753312694e-01, -1.874741452007399e-01, -2.311380864824586e-01, -2.995361676162026e-01, -2.991872281971971e-01, -3.278382195482679e-02, -3.292819169530066e-02, -1.048877824983841e-01, -1.028878262240218e-01, -2.217097935191916e-01, -2.170029088571047e-01, -4.338990324642119e-02, -2.529870896070517e-02, -4.338990324642104e-02, -2.529870896070618e-02, -1.766050677835791e-02, -1.823018037652215e-02, -3.676295484488571e-03, -3.684695422971042e-03, -4.121799875505159e-03, -4.379353665123707e-03, -1.184296287267022e-02, -1.080668660004615e-02, -9.852570632154426e-03, -1.304618753983822e-02, -9.852570632154410e-03, -7.119416718078995e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_revm06_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revm06", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.007759551777544e-08, 0.000000000000000e+00, -1.007732554487156e-08, -1.007741804832978e-08, 0.000000000000000e+00, -1.007719667817426e-08, -1.007684231909703e-08, 0.000000000000000e+00, -1.007637394722030e-08, -1.007884363661056e-08, 0.000000000000000e+00, -8.646998166077780e-09, -1.007748885393545e-08, 0.000000000000000e+00, -8.646365038778479e-09, -8.645913780681636e-09, 0.000000000000000e+00, -8.646365038778479e-09, -1.093150251574766e-05, 0.000000000000000e+00, -1.653201178981150e-05, -1.093225650618220e-05, 0.000000000000000e+00, -1.093190055575329e-05, -1.094706254048482e-05, 0.000000000000000e+00, -1.094924282925032e-05, -1.093800056960748e-05, 0.000000000000000e+00, -1.093740981398990e-05, -1.093683028388706e-05, 0.000000000000000e+00, -1.094987959267618e-05, -1.654295606698149e-05, 0.000000000000000e+00, -1.094987959267618e-05, -1.335986641044402e-02, 0.000000000000000e+00, -1.308692417517477e-02, -1.346200615679570e-02, 0.000000000000000e+00, -6.094751209995004e-03, -6.283342768373351e-03, 0.000000000000000e+00, -6.382930393601888e-03, -6.336491377165377e-03, 0.000000000000000e+00, -1.442635609953856e-02, -1.265356433424283e-02, 0.000000000000000e+00, -1.717569643551649e-02, -5.954556786015914e-03, 0.000000000000000e+00, -6.708993728294390e-03, -3.433998001736108e+00, 0.000000000000000e+00, -1.046210727149131e+00, -3.259883325106128e+00, 0.000000000000000e+00, -1.014558013522934e+00, -2.363593153307813e-03, 0.000000000000000e+00, -7.111788205890930e-03, -1.434617671752533e+00, 0.000000000000000e+00, -1.528003173538923e+00, -9.180299369835205e-01, 0.000000000000000e+00, -2.265231908730596e+00, -9.180299369835201e-01, 0.000000000000000e+00, -5.421758375872842e+01, -1.652338117737700e+01, 0.000000000000000e+00, -1.657700503961918e+01, -4.367634810330564e+06, 0.000000000000000e+00, -1.732552563328017e+01, -4.341369051897250e+03, 0.000000000000000e+00, -7.213361471194762e+00, -1.213950098797803e+01, 0.000000000000000e+00, -1.226438396754241e+01, -1.571444071566889e+01, 0.000000000000000e+00, -2.696204226411940e+01, -1.571444071566889e+01, 0.000000000000000e+00, -2.696204226411942e+01, -2.419243112356167e-06, 0.000000000000000e+00, -2.421552858702893e-06, -2.415876674892286e-06, 0.000000000000000e+00, -2.418297019331707e-06, -2.419025485380308e-06, 0.000000000000000e+00, -2.421418798890528e-06, -2.416138011918425e-06, 0.000000000000000e+00, -2.418462114838647e-06, -2.688166716448308e-06, 0.000000000000000e+00, -2.419925758394310e-06, -2.417547337364387e-06, 0.000000000000000e+00, -2.690837720145737e-06, -1.025869982106422e-04, 0.000000000000000e+00, -1.027442509993600e-04, -1.009177611094168e-04, 0.000000000000000e+00, -1.011184105584693e-04, -1.039072907803467e-04, 0.000000000000000e+00, -1.036857031167328e-04, -1.024848768011841e-04, 0.000000000000000e+00, -1.022363300329607e-04, -1.006736475806561e-04, 0.000000000000000e+00, -1.650886199673984e-04, -1.006736475806561e-04, 0.000000000000000e+00, -1.017709224245393e-04, -1.460378269698230e-02, 0.000000000000000e+00, -1.923102967652497e-02, -1.091830198270867e-02, 0.000000000000000e+00, -1.089929000123409e-02, -2.000933607367166e-02, 0.000000000000000e+00, -1.804493937222807e-02, -1.824357059547045e-02, 0.000000000000000e+00, -1.623138602114721e-02, -1.267501638802821e-02, 0.000000000000000e+00, -1.990030995771611e-02, -1.267501638802822e-02, 0.000000000000000e+00, -1.537000039862814e-02, -2.759485154367945e+00, 0.000000000000000e+00, -2.711701279083585e+00, -3.275104681501736e+00, 0.000000000000000e+00, -7.120583433094717e-01, -3.213795420110547e+00, 0.000000000000000e+00, -3.096865779206019e+00, -1.299415314010642e-04, 0.000000000000000e+00, -1.301823734861945e-04, -2.562697117582407e+00, 0.000000000000000e+00, -2.702858786352845e+00, -2.562697117582407e+00, 0.000000000000000e+00, -2.702858786352846e+00, -1.278729573773950e+08, 0.000000000000000e+00, -8.131107381105895e+00, -1.151668967113038e+01, 0.000000000000000e+00, -1.015193655593479e+01, -8.288485161322066e+01, 0.000000000000000e+00, -9.095242449484189e+01, -5.706295079245773e+00, 0.000000000000000e+00, -5.085462864311407e+02, -1.563336592381970e+01, 0.000000000000000e+00, -4.954562597459594e+01, -1.563336592381972e+01, 0.000000000000000e+00, -4.954562597459593e+01, -1.599318383780935e-02, 0.000000000000000e+00, -1.584156158472709e-02, -1.462084386929959e-02, 0.000000000000000e+00, -1.440824199004160e-02, -1.547459818878605e-02, 0.000000000000000e+00, -1.526930596955721e-02, -1.575087209891788e-02, 0.000000000000000e+00, -1.497451396697857e-02, -1.557504762277572e-02, 0.000000000000000e+00, -1.538293707392215e-02, -1.557504762277572e-02, 0.000000000000000e+00, -1.473667528078238e-02, -1.735257178228932e-02, 0.000000000000000e+00, -1.723427014742909e-02, -2.905225005960229e-02, 0.000000000000000e+00, -3.942588830924355e-02, -2.519826342294585e-02, 0.000000000000000e+00, -3.101241638875419e-02, -2.154081740030458e-02, 0.000000000000000e+00, -2.123938315287856e-02, -2.338383725263416e-02, 0.000000000000000e+00, -2.305183141353544e-02, -2.338383725263416e-02, 0.000000000000000e+00, -2.764503925834046e-02, -9.009913256866675e-03, 0.000000000000000e+00, -1.062532121281896e-02, -4.001952855894488e-01, 0.000000000000000e+00, -3.945298256293562e-01, -5.832242591563963e-01, 0.000000000000000e+00, -2.383971666639942e-01, -1.715543195719453e-01, 0.000000000000000e+00, -1.013804303985002e-01, -1.620443988582713e-01, 0.000000000000000e+00, -1.626945789831266e-01, -1.620443988582714e-01, 0.000000000000000e+00, -3.083137382804087e-01, -3.861278359540845e-02, 0.000000000000000e+00, -3.797990009739233e-02, -4.683867675954185e+03, 0.000000000000000e+00, -4.557299932134549e+03, -5.723188566799136e+00, 0.000000000000000e+00, -5.821028830602685e+00, -1.300681019871247e-01, 0.000000000000000e+00, -1.278306306728769e-01, -5.366512087457727e+00, 0.000000000000000e+00, -5.750325626621227e+00, -5.366512087457728e+00, 0.000000000000000e+00, -5.750325626621230e+00, -1.256217199269251e+06, 0.000000000000000e+00, -1.089011715942129e+06, -1.325676970328893e+01, 0.000000000000000e+00, -1.319847817919890e+01, -5.261832615904070e+08, 0.000000000000000e+00, -4.111564170542029e+08, -2.360612945547957e+02, 0.000000000000000e+00, -2.156339786274383e+02, -4.033248721131935e+01, 0.000000000000000e+00, -5.138767291064786e+01, -4.033248721131941e+01, 0.000000000000000e+00, -5.522629203084881e+07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_revm06_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revm06", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-8.767315536271521e-04, -8.772683425371880e-04, -8.768073001214028e-04, -8.773233317135018e-04, -8.770196733231607e-04, -8.776364230641509e-04, -8.761705808555744e-04, -9.711746169855625e-04, -8.767802751411249e-04, -9.715926613363121e-04, -9.714060293859361e-04, -9.715926613363121e-04, 3.190506120706202e-04, 8.150983313425782e-04, 3.179064240389501e-04, 3.192423702166843e-04, 2.951538657383465e-04, 2.909757950835668e-04, 3.035138078369688e-04, 3.034787227761730e-04, 3.216426521565672e-04, 2.824487071361899e-04, 8.167492673078301e-04, 2.824487071361899e-04, 4.571188602934269e-03, 4.252022889628409e-03, 4.674084293438721e-03, 4.225455768977097e-04, 2.922265655824473e-03, 3.409485590688354e-03, 2.026091603369165e-03, 5.437276644896911e-03, 4.051592918615401e-03, 8.570201157187159e-03, 1.906421811951560e-04, 5.364181671687425e-03, 4.414493765808411e-02, 2.755346762741723e-02, 4.276039791097495e-02, 2.272978330805389e-02, 8.289380424837829e-03, 8.983158385973238e-03, -2.491569441518097e-02, -1.230480749595909e-02, 3.497639117585703e-02, -5.113905100931526e-02, 3.497639117585674e-02, -2.258304261995296e-02, -1.053337362097857e-04, -1.268000325005842e-04, -2.860555769466160e-04, -1.562406216916560e-04, -1.139879461398147e-02, -1.071050568894638e-02, -1.680736868728721e-05, -1.614547949333610e-05, -7.111795312063476e-05, -2.248372360279799e-05, -7.111795312063476e-05, -2.248372360262970e-05, -9.899364265676527e-03, -9.902618515900347e-03, -1.003780684914722e-02, -1.003647596943867e-02, -9.909085653615594e-03, -9.908680088601204e-03, -1.002779274463056e-02, -1.003019747208235e-02, -9.450042589457461e-03, -9.969790160237524e-03, -9.968988710726759e-03, -9.450738571484353e-03, 9.876165506710985e-04, 9.950748133916790e-04, 1.029547954591114e-03, 1.031196251114654e-03, 9.067562872750620e-04, 9.436417609201492e-04, 9.860105092155797e-04, 1.008798314110631e-03, 1.031582902111719e-03, 1.925678903431183e-03, 1.031582902111719e-03, 1.024165114050797e-03, -1.785436708482691e-02, -1.462849057337690e-02, -3.600861023193940e-02, -3.999552491778157e-02, 1.075274815862401e-03, -6.936657836259019e-03, -1.684562941758357e-02, -2.130100683844572e-02, -2.174304221697658e-02, -1.537414018133267e-02, -2.174304221697659e-02, -1.938941265675970e-02, -5.397706087762266e-02, -5.411634896352661e-02, 3.186910313311811e-02, 2.277788314378864e-02, -5.024184762186275e-02, -5.396267023419187e-02, -6.891624954354990e-03, -6.898626127577584e-03, -5.255058653415437e-02, -3.440954654492837e-02, -5.255058653415507e-02, -3.440954654492845e-02, -1.211711624770636e-05, -5.334524545251001e-06, -1.420323184082610e-05, -1.309721371272228e-05, -4.274239449727463e-05, -5.571047212573347e-05, -3.228891118385673e-02, -2.346683213238861e-02, -8.588818522225505e-06, -7.050957675214265e-05, -8.588818522269361e-06, -7.050957675209588e-05, 4.208938654656914e-01, 4.248529177085202e-01, 6.221286817955646e-03, 1.864356359007795e-02, 1.321910906047764e-01, 1.492353949709347e-01, 2.712020250777759e-01, 2.896347010999414e-01, 1.992614522306924e-01, 2.156548414239093e-01, 1.992614522306924e-01, 2.189296061880054e-01, 3.861230955393826e-01, 3.982945569678520e-01, -1.005398188359177e-02, -6.476375297290098e-03, -2.558820753496603e-02, -2.149069882684513e-02, -4.832663003270283e-02, -4.927794047124613e-02, -2.892980836916482e-02, -2.915424781637560e-02, -2.892980836916482e-02, -2.536830015552339e-02, -2.333827676753206e-02, -2.243393800610684e-02, 2.822896657315866e-02, 2.777220467302236e-02, 1.666660059843717e-02, 6.077650242546098e-03, 1.066333148866798e-02, 5.352364360656061e-03, -1.470496410849652e-04, -4.779196513890161e-05, -1.470496410849991e-04, 8.045118497515219e-03, 1.758160187942381e-03, 1.176351796999165e-04, -1.142669624814078e-02, -1.140384293510688e-02, -1.652357486321896e-02, -1.851796310265395e-02, 3.933393678849369e-03, -6.172641433258255e-03, -5.376026450554821e-02, -6.306005298585574e-02, -5.376026450554669e-02, -6.306005298585508e-02, -3.349564469530013e-04, -3.660843035072257e-04, -3.183496627860670e-07, -3.191280496401336e-07, -1.743434584454043e-05, -2.220233754157258e-05, -2.800788101365797e-02, -2.898280969295097e-02, -1.883158207553138e-05, -5.631116488713563e-05, -1.883158207575725e-05, -1.305227167736347e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
