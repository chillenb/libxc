
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_revm06_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revm06", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.196972011199093e+01, -1.196970366846314e+01, -1.196968394406193e+01, -1.196992540362667e+01, -1.196979138819579e+01, -1.196979138819579e+01, -2.103447642182817e+00, -2.103431617460668e+00, -2.103144232640084e+00, -2.104458137612694e+00, -2.103672239472076e+00, -2.103672239472076e+00, -4.168428885407953e-01, -4.169055031883822e-01, -4.191217917300256e-01, -4.237366843083789e-01, -4.228355092661960e-01, -4.228355092661960e-01, -1.325651479113357e-01, -1.336761174151453e-01, -4.383227570749783e-01, -1.073711961975984e-01, -1.336216940783997e-01, -1.336216940783996e-01, -1.822133694438970e-02, -1.917336304639549e-02, -9.223889548589959e-02, -1.054974980903137e-02, -1.469137742017524e-02, -1.469137742017524e-02, -2.751649103818256e+00, -2.747918994981446e+00, -2.751446084912017e+00, -2.748155181651875e+00, -2.749779199269706e+00, -2.749779199269706e+00, -1.292962002107164e+00, -1.299675328045737e+00, -1.294402795240991e+00, -1.300287766524681e+00, -1.296047355273688e+00, -1.296047355273688e+00, -3.466491701131721e-01, -3.416221186384836e-01, -3.282170827954225e-01, -3.189208284040372e-01, -3.475069119551261e-01, -3.475069119551261e-01, -1.258833966808145e-01, -1.337378379627021e-01, -1.263940634347216e-01, -1.063866648015253e+00, -1.030722221094708e-01, -1.030722221094707e-01, -8.151161742091042e-03, -1.031427137521581e-02, -7.890927880202261e-03, -1.170683346154188e-01, -9.908194157009302e-03, -9.908194157009316e-03, -3.104579779575524e-01, -2.818946319133147e-01, -2.849151689051793e-01, -2.930341737295135e-01, -2.882559578682273e-01, -2.882559578682273e-01, -2.933828285038977e-01, -3.103684473975193e-01, -3.052989511734764e-01, -2.962633319289639e-01, -3.014357921702880e-01, -3.014357921702880e-01, -3.643985751347067e-01, -1.688279837368009e-01, -1.931246376878779e-01, -2.223708676527030e-01, -2.058179388025276e-01, -2.058179388025276e-01, -2.875942931495795e-01, -8.932301774454424e-02, -1.104046636416763e-01, -2.081147130352107e-01, -1.112211417140579e-01, -1.112211417140579e-01, -2.561608273354126e-02, -2.760730669257628e-03, -5.801498327931097e-03, -1.104782568678010e-01, -9.101898542394037e-03, -9.101898542394031e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_revm06_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revm06", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.258889038508395e+01, -1.258804645653889e+01, -1.258883563019462e+01, -1.258800673097062e+01, -1.258867884124850e+01, -1.258777636196839e+01, -1.258928813904182e+01, -1.258855719690335e+01, -1.258885365170453e+01, -1.258825982928070e+01, -1.258885365170453e+01, -1.258825982928070e+01, -2.455332884901319e+00, -2.455632145676732e+00, -2.455220551988524e+00, -2.455580024015334e+00, -2.453238909932353e+00, -2.452964902502829e+00, -2.453102803818298e+00, -2.453367750502549e+00, -2.455164187208175e+00, -2.451557869607773e+00, -2.455164187208175e+00, -2.451557869607773e+00, -4.480523983592520e-01, -4.490742025352070e-01, -4.475790224493408e-01, -4.489234312862015e-01, -4.487792735823690e-01, -4.473376746689727e-01, -4.398075132142741e-01, -4.381896512238098e-01, -4.545616543137402e-01, -4.455243916521566e-01, -4.545616543137402e-01, -4.455243916521566e-01, -1.393221284074744e-01, -1.337231827950469e-01, -1.382705711444532e-01, -1.305701101585223e-01, -6.444886460013111e-01, -6.546343274466542e-01, -3.370369230652913e-02, -5.561377263201209e-02, -1.446431281331940e-01, -8.572925015392625e-03, -1.446431281331938e-01, -8.572925015392767e-03, -2.332088373416698e-02, -2.473865691950185e-02, -2.439841419219604e-02, -2.607766792407436e-02, -9.834580293412629e-02, -9.900068029059451e-02, -1.414606372657594e-02, -1.391230593426432e-02, -2.086509937385457e-02, -1.194152784368306e-02, -2.086509937385458e-02, -1.194152784368314e-02, -2.682765471356245e+00, -2.682019117679843e+00, -2.676106034974267e+00, -2.675581935842931e+00, -2.682267177445187e+00, -2.681705894369507e+00, -2.676558006913335e+00, -2.675863117253291e+00, -2.679421728169629e+00, -2.678778325718949e+00, -2.679421728169629e+00, -2.678778325718949e+00, -1.311822325844448e+00, -1.312165079950104e+00, -1.326390038112903e+00, -1.326071538054692e+00, -1.293666402097180e+00, -1.299573265766598e+00, -1.308503998690469e+00, -1.313754125320470e+00, -1.331600974604128e+00, -1.321443862190199e+00, -1.331600974604128e+00, -1.321443862190199e+00, -3.649934112778917e-01, -3.627035946635381e-01, -3.887581913204958e-01, -3.840614456984803e-01, -3.726037157393607e-01, -3.668770914448822e-01, -3.669130407200980e-01, -3.690359841176714e-01, -3.744915213097522e-01, -3.604145025867924e-01, -3.744915213097522e-01, -3.604145025867925e-01, -1.857935152099121e-02, -1.672748198474550e-02, -1.336682684247407e-01, -1.347160612561916e-01, -3.321492989624059e-02, -2.280401193622940e-02, -1.239780118907265e+00, -1.239205143122502e+00, -7.298475372508887e-03, -2.778459011790437e-02, -7.298475372508391e-03, -2.778459011790401e-02, -1.063311928675824e-02, -1.104977123519217e-02, -1.361473073815964e-02, -1.382217353072537e-02, -1.016271390038445e-02, -1.075175315379372e-02, -7.844181602988758e-02, -7.431446146577000e-02, -1.040730574932849e-02, -1.421550227266115e-02, -1.040730574932841e-02, -1.421550227266145e-02, -5.067185476984639e-01, -5.094852406078560e-01, -3.642102526090027e-01, -3.715563158164034e-01, -4.198665572617488e-01, -4.282323070548835e-01, -4.687915963411022e-01, -4.752263694998410e-01, -4.449140843938523e-01, -4.525079656223889e-01, -4.449140843938524e-01, -4.525079656223889e-01, -4.854747820930921e-01, -4.899282885632926e-01, -3.081982683488532e-01, -3.084058625246353e-01, -3.076319701239726e-01, -3.091258599403221e-01, -3.115475958278608e-01, -3.117889230055569e-01, -3.174639192328034e-01, -3.185054027236167e-01, -3.174639192328034e-01, -3.185054027236167e-01, -4.231978480154164e-01, -4.209614915768277e-01, -1.793533943149797e-01, -1.794290725917900e-01, -1.731906246150718e-01, -1.719404662770948e-01, -2.360942357054950e-01, -2.376671732901117e-01, -1.893413431363432e-01, -1.895732459590079e-01, -1.893413431363432e-01, -1.895732459590079e-01, -3.054660816224960e-01, -3.048045979607046e-01, -9.757959097717993e-02, -9.803001049167338e-02, -1.024778048910149e-01, -1.003805265824409e-01, -2.301158377281362e-01, -2.233715624571050e-01, -3.828770694686604e-02, -2.042420432326553e-02, -3.828770694686591e-02, -2.042420432326649e-02, -3.312608588433363e-02, -3.427680030591550e-02, -3.675948868858534e-03, -3.684146999963828e-03, -7.467599818415508e-03, -7.939773128464318e-03, -3.865344476815113e-02, -3.326773556871798e-02, -9.846468027002318e-03, -1.304551673763701e-02, -9.846468027002302e-03, -1.304551673763733e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_revm06_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revm06", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-8.728430457608404e-09, 0.000000000000000e+00, -8.728197338965999e-09, -8.728317938625990e-09, 0.000000000000000e+00, -8.728115624425488e-09, -8.727895602850721e-09, 0.000000000000000e+00, -8.727527915329672e-09, -8.729165145067316e-09, 0.000000000000000e+00, -8.729146412083484e-09, -8.728365431646100e-09, 0.000000000000000e+00, -8.728453786754375e-09, -8.728365431646100e-09, 0.000000000000000e+00, -8.728453786754375e-09, -1.362695943995954e-05, 0.000000000000000e+00, -1.363134575474583e-05, -1.362671951873887e-05, 0.000000000000000e+00, -1.363158481570264e-05, -1.362633012255330e-05, 0.000000000000000e+00, -1.362667823143952e-05, -1.360549451113213e-05, 0.000000000000000e+00, -1.360829502102441e-05, -1.363585755015751e-05, 0.000000000000000e+00, -1.360666665603045e-05, -1.363585755015751e-05, 0.000000000000000e+00, -1.360666665603045e-05, -9.752170835562259e-03, 0.000000000000000e+00, -9.697869134417465e-03, -9.775447139203640e-03, 0.000000000000000e+00, -9.713472833500148e-03, -1.008727345835764e-02, 0.000000000000000e+00, -1.010907796029331e-02, -9.719263940406236e-03, 0.000000000000000e+00, -9.692574012116954e-03, -9.587749433726712e-03, 0.000000000000000e+00, -9.683021965603181e-03, -9.587749433726712e-03, 0.000000000000000e+00, -9.683021965603181e-03, -1.179859187164097e+00, 0.000000000000000e+00, -1.077262344843285e+00, -1.174545933177285e+00, 0.000000000000000e+00, -1.052976994190492e+00, -6.115862749659366e-03, 0.000000000000000e+00, -5.569454981747049e-03, -2.043850335598400e+00, 0.000000000000000e+00, -1.874324770041010e+00, -1.014494482709655e+00, 0.000000000000000e+00, -4.486316424896775e+00, -1.014494482709655e+00, 0.000000000000000e+00, -4.486316424896780e+00, -1.696364363532541e+01, 0.000000000000000e+00, -1.676418956640951e+01, -1.788719734452690e+01, 0.000000000000000e+00, -1.775571054670620e+01, -9.036431126356922e+00, 0.000000000000000e+00, -8.926010480186708e+00, -1.585823430019447e+01, 0.000000000000000e+00, -1.538645952009588e+01, -1.702091134544980e+01, 0.000000000000000e+00, -4.448207927230744e+01, -1.702091134544985e+01, 0.000000000000000e+00, -4.448207927230752e+01, -2.420906610439692e-06, 0.000000000000000e+00, -2.423122497177221e-06, -2.417517913496130e-06, 0.000000000000000e+00, -2.419845340794175e-06, -2.420649619657082e-06, 0.000000000000000e+00, -2.422960200544980e-06, -2.417744576416542e-06, 0.000000000000000e+00, -2.419985624966013e-06, -2.419228253346868e-06, 0.000000000000000e+00, -2.421489488013530e-06, -2.419228253346868e-06, 0.000000000000000e+00, -2.421489488013530e-06, -1.085895426007001e-04, 0.000000000000000e+00, -1.085516170521505e-04, -1.058752303725874e-04, 0.000000000000000e+00, -1.059301795679022e-04, -1.091103137121218e-04, 0.000000000000000e+00, -1.089533119907648e-04, -1.067504570822910e-04, 0.000000000000000e+00, -1.065461987647979e-04, -1.065931154866379e-04, 0.000000000000000e+00, -1.071090796101967e-04, -1.065931154866379e-04, 0.000000000000000e+00, -1.071090796101967e-04, -1.611678355259630e-02, 0.000000000000000e+00, -1.624808075986881e-02, -1.205680296285463e-02, 0.000000000000000e+00, -1.198408991635967e-02, -2.447381482117288e-02, 0.000000000000000e+00, -2.103560524931258e-02, -2.266257216300060e-02, 0.000000000000000e+00, -1.943276060327581e-02, -1.368694740550314e-02, 0.000000000000000e+00, -1.704524911826405e-02, -1.368694740550315e-02, 0.000000000000000e+00, -1.704524911826405e-02, -3.621959829094644e+00, 0.000000000000000e+00, -3.645360825622003e+00, -7.807689154632920e-01, 0.000000000000000e+00, -7.720522270034056e-01, -4.510418485311821e+00, 0.000000000000000e+00, -4.095806444714098e+00, -1.558766702799144e-04, 0.000000000000000e+00, -1.561507340714851e-04, -3.106422500345761e+00, 0.000000000000000e+00, -3.117938862126500e+00, -3.106422500345761e+00, 0.000000000000000e+00, -3.117938862126499e+00, -2.305187117252967e+01, 0.000000000000000e+00, -1.991197648734157e+01, -1.947457559427005e+01, 0.000000000000000e+00, -1.802811576206793e+01, -1.091946872411931e+02, 0.000000000000000e+00, -1.215427561475134e+02, -8.523494937749174e+00, 0.000000000000000e+00, -8.009956734847020e+00, -5.654300582569434e+01, 0.000000000000000e+00, -5.246901215612095e+01, -5.654300582569421e+01, 0.000000000000000e+00, -5.246901215612091e+01, -1.620068513827571e-02, 0.000000000000000e+00, -1.604149702158424e-02, -1.480353265244112e-02, 0.000000000000000e+00, -1.458355581062355e-02, -1.493414243940125e-02, 0.000000000000000e+00, -1.474792408091816e-02, -1.533108492175361e-02, 0.000000000000000e+00, -1.516115833356550e-02, -1.509541436779220e-02, 0.000000000000000e+00, -1.491939339580122e-02, -1.509541436779220e-02, 0.000000000000000e+00, -1.491939339580122e-02, -1.780479984976396e-02, 0.000000000000000e+00, -1.766755324403258e-02, -2.950120988265906e-02, 0.000000000000000e+00, -2.905237901809614e-02, -2.568784419028856e-02, 0.000000000000000e+00, -2.526067031515566e-02, -2.202815820173399e-02, 0.000000000000000e+00, -2.171649409560117e-02, -2.391211765430295e-02, 0.000000000000000e+00, -2.355318943195506e-02, -2.391211765430295e-02, 0.000000000000000e+00, -2.355318943195506e-02, -1.022744498640273e-02, 0.000000000000000e+00, -1.009897766261548e-02, -4.180888555007194e-01, 0.000000000000000e+00, -4.126530139194161e-01, -2.644730851328503e-01, 0.000000000000000e+00, -2.582685854888359e-01, -1.205360400819457e-01, 0.000000000000000e+00, -1.182946117315650e-01, -1.795477089091645e-01, 0.000000000000000e+00, -1.803008022206921e-01, -1.795477089091646e-01, 0.000000000000000e+00, -1.803008022206922e-01, -4.216474733717121e-02, 0.000000000000000e+00, -4.111305121605113e-02, -8.209465267069048e+00, 0.000000000000000e+00, -8.226823385096612e+00, -7.582103351525138e+00, 0.000000000000000e+00, -7.618329319884114e+00, -1.521099261833669e-01, 0.000000000000000e+00, -1.416888987131282e-01, -6.905105117683076e+00, 0.000000000000000e+00, -7.251000314549509e+00, -6.905105117683080e+00, 0.000000000000000e+00, -7.251000314549512e+00, -1.388245056617156e+01, 0.000000000000000e+00, -1.419221721891609e+01, -7.111313525518901e+01, 0.000000000000000e+00, -1.223419946393008e+02, -4.191259448984270e+01, 0.000000000000000e+00, -4.463040988955555e+01, -7.749757130031317e+00, 0.000000000000000e+00, -7.287927267103829e+00, -1.161386337939579e+02, 0.000000000000000e+00, -5.449899833266538e+01, -1.161386337939581e+02, 0.000000000000000e+00, -5.449899833266552e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_revm06_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revm06", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-9.656680693381239e-04, -9.662355179205150e-04, -9.657451825069327e-04, -9.662914986608948e-04, -9.659640067313291e-04, -9.666132700994465e-04, -9.650997389543439e-04, -9.655085785787888e-04, -9.657176177168933e-04, -9.659287963643802e-04, -9.657176177168933e-04, -9.659287963643802e-04, 5.759279673634831e-04, 5.771823013585251e-04, 5.747831418166749e-04, 5.764699538468682e-04, 5.524044264346472e-04, 5.483846841068666e-04, 5.591464206348414e-04, 5.594243648776993e-04, 5.785300260851390e-04, 5.387254314521879e-04, 5.785300260851390e-04, 5.387254314521879e-04, 2.921341959206079e-03, 2.634683497995858e-03, 3.011762663454863e-03, 2.676012999184441e-03, 4.792857943925880e-03, 5.159237806725790e-03, 3.839975805051550e-03, 3.502059376978249e-03, 2.534862245565092e-03, 6.549172989355535e-03, 2.534862245565092e-03, 6.549172989355535e-03, 3.729302528587067e-02, 2.780730881973408e-02, 3.563967915883617e-02, 2.309453463414073e-02, 9.466064216997373e-03, 8.583428847423870e-03, -2.170908225356151e-02, -1.049332328420614e-02, 3.560300297563765e-02, -4.749386615384082e-02, 3.560300297563736e-02, -4.749386615383996e-02, -1.052797350129746e-04, -1.267722210746115e-04, -1.254882400388404e-04, -1.561654840585590e-04, -8.795918667931824e-03, -1.064074795422235e-02, -1.672070834380214e-05, -1.607481609174199e-05, -7.100749459274541e-05, -2.226884458567373e-05, -7.100749459274541e-05, -2.226884458550545e-05, -9.896100587616209e-03, -9.899540925591154e-03, -1.003454528915458e-02, -1.003340231233010e-02, -9.905896333498388e-03, -9.905656165533653e-03, -1.002460304886392e-02, -1.002717482646722e-02, -9.965669488376405e-03, -9.966704997155728e-03, -9.965669488376405e-03, -9.966704997155728e-03, 1.087674258711684e-03, 1.091849376495799e-03, 1.113908163820776e-03, 1.113054199230719e-03, 9.930391969558115e-04, 1.031009704831750e-03, 1.057581090774422e-03, 1.081295006994634e-03, 1.132412816266166e-03, 1.114121678105378e-03, 1.132412816266166e-03, 1.114121678105378e-03, -1.644128339402412e-02, -1.722754528931873e-02, -3.384225987800799e-02, -3.777591020552692e-02, 2.684472799230672e-03, -5.301218271634068e-03, -1.366516633640515e-02, -1.837512539645922e-02, -2.052939369546363e-02, -1.782940415238166e-02, -2.052939369546364e-02, -1.782940415238166e-02, -5.256442450901534e-02, -5.254008745459124e-02, 2.292785898709753e-02, 2.323567669415274e-02, -4.886415621427386e-02, -5.259565177302736e-02, -5.959889233755305e-03, -5.966595341470747e-03, -5.095144866526752e-02, -3.298035027752185e-02, -5.095144866526821e-02, -3.298035027752194e-02, -5.077814772848728e-06, -5.249592626813932e-06, -1.406128593507098e-05, -1.295487405121669e-05, -4.251452859334203e-05, -5.539770129273671e-05, -3.163597317699687e-02, -3.534088693198695e-02, -8.422148705319068e-06, -7.043124528446394e-05, -8.422148705362919e-06, -7.043124528441720e-05, 4.188773168642621e-01, 4.228697225829847e-01, 6.315779252625769e-03, 1.867700378227928e-02, 1.337145699788388e-01, 1.509640923474188e-01, 2.738744672297925e-01, 2.883497081347803e-01, 2.014477575595543e-01, 2.179967890555475e-01, 2.014477575595543e-01, 2.179967890555475e-01, 3.824591507579900e-01, 3.946360448168488e-01, -9.861780697253297e-03, -1.060590581177884e-02, -2.523355601196086e-02, -2.546407766709645e-02, -4.770777438391029e-02, -4.865595821207324e-02, -2.848080445794996e-02, -2.872022712005695e-02, -2.848080445794996e-02, -2.872022712005695e-02, -2.125663881668620e-02, -2.334202672405358e-02, 2.845322318789062e-02, 2.800616156054074e-02, 8.547860748812232e-03, 6.849095464639700e-03, 6.872125730851797e-03, 6.895777873116753e-03, 1.048104106415576e-03, 1.151377107310180e-03, 1.048104106415532e-03, 1.151377107310159e-03, 2.557038232601336e-03, 8.806865774607256e-04, -8.804625730121012e-03, -8.796254698816876e-03, -1.635559978090331e-02, -1.833037902395802e-02, 5.784992614453021e-03, -4.589957821257204e-03, -5.276037403305189e-02, -6.174640112306366e-02, -5.276037403305039e-02, -6.174640112306299e-02, -1.468148913430117e-04, -1.607994645991850e-04, -3.129211624216792e-07, -3.201032797122269e-07, -7.411711606442100e-06, -9.444866830482900e-06, -5.449753007647452e-02, -5.936996856146993e-02, -1.849442011148651e-05, -5.624713524841036e-05, -1.849442011171234e-05, -5.624713524836611e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
