
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_tau_hcth_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_tau_hcth", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.765977989538016e+01, -1.765980659375421e+01, -1.765998047836550e+01, -1.765954219020772e+01, -1.765979351746860e+01, -1.765979351746860e+01, -2.907628441953035e+00, -2.907617906231460e+00, -2.907452248991671e+00, -2.908424976498563e+00, -2.907634995652760e+00, -2.907634995652760e+00, -5.734301460304699e-01, -5.733041324455250e-01, -5.730989622392439e-01, -5.763456232541648e-01, -5.733812603977819e-01, -5.733812603977819e-01, -1.818923067017492e-01, -1.813223415524810e-01, -6.751864359720057e-01, -1.793165329277290e-01, -1.816675075682661e-01, -1.816675075682661e-01, -2.387377704330320e-02, -2.498690032888509e-02, -9.348522052556017e-02, -1.152752981847800e-02, -2.472693135480256e-02, -2.472693135480257e-02, -4.263498719784440e+00, -4.263502398155042e+00, -4.263503227620091e+00, -4.263505983731209e+00, -4.263493955661250e+00, -4.263493955661250e+00, -1.727949141685867e+00, -1.737367013280650e+00, -1.728161075216215e+00, -1.735430131986144e+00, -1.734298842931512e+00, -1.734298842931512e+00, -4.826204391261015e-01, -5.102646746763541e-01, -4.589584804416327e-01, -4.674465003589825e-01, -4.987020261549561e-01, -4.987020261549561e-01, -1.661090447384973e-01, -2.202897045649111e-01, -1.618119024884033e-01, -1.553472199062253e+00, -1.708242905519152e-01, -1.708242905519152e-01, -1.112118197845771e-02, -1.270383954106834e-02, -9.522521194330761e-03, -1.199452395880581e-01, -1.157496188990218e-02, -1.157496188990218e-02, -4.828571585301844e-01, -4.820147166098121e-01, -4.823087607456467e-01, -4.825446887779040e-01, -4.824257614902102e-01, -4.824257614902102e-01, -4.669849593864100e-01, -4.300950474821244e-01, -4.393586525933997e-01, -4.479453382894683e-01, -4.433127380105952e-01, -4.433127380105952e-01, -5.355620114236296e-01, -2.423923395001462e-01, -2.587462643018424e-01, -3.018516978841533e-01, -2.762724082332930e-01, -2.762724082332930e-01, -3.882965168430642e-01, -8.825355313377434e-02, -1.126955894888986e-01, -2.800381550509002e-01, -1.408941230762267e-01, -1.408941230762266e-01, -2.793662301232009e-02, -3.484243020170564e-03, -6.615797956548640e-03, -1.340575107549718e-01, -9.839658292227061e-03, -9.839658292227046e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_tau_hcth_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_tau_hcth", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.188293514794166e+01, -2.188301933852118e+01, -2.188338491202569e+01, -2.188200618372349e+01, -2.188297963503537e+01, -2.188297963503537e+01, -3.591216657371765e+00, -3.591226076684247e+00, -3.591583622911332e+00, -3.591019509422765e+00, -3.591240947130082e+00, -3.591240947130082e+00, -6.584919058094172e-01, -6.566768607624410e-01, -6.000510664776832e-01, -6.091660294998097e-01, -6.578393493126117e-01, -6.578393493126117e-01, -1.183657732348233e-01, -1.264827114823238e-01, -8.086162329023699e-01, -7.841815656951188e-02, -1.208646249215431e-01, -1.208646249215431e-01, -3.132274050853873e-02, -3.273119823470981e-02, -1.033989586026883e-01, -1.532201603749095e-02, -3.239176283160543e-02, -3.239176283160544e-02, -5.423282265454970e+00, -5.426237584610865e+00, -5.423585413290211e+00, -5.425883319497641e+00, -5.424797675805208e+00, -5.424797675805208e+00, -1.886063369743932e+00, -1.908628164447392e+00, -1.868901897306031e+00, -1.887340284146980e+00, -1.921804309151749e+00, -1.921804309151749e+00, -5.959081729276628e-01, -6.694073240082615e-01, -5.678757941552517e-01, -6.048682996401826e-01, -6.198970998850895e-01, -6.198970998850895e-01, -1.101868872879743e-01, -8.264774822770449e-02, -1.040644259104267e-01, -2.032280288001331e+00, -8.543485503860866e-02, -8.543485503860866e-02, -1.478383928851289e-02, -1.687216242422129e-02, -1.264947702213048e-02, -1.112595406831498e-01, -1.537233476276734e-02, -1.537233476276730e-02, -6.416016269455270e-01, -6.354157284449584e-01, -6.377923303292549e-01, -6.394878229219559e-01, -6.386526227030805e-01, -6.386526227030805e-01, -6.214977578678501e-01, -5.028362250109544e-01, -5.310366583624202e-01, -5.668525073084305e-01, -5.477247175066541e-01, -5.477247175066541e-01, -7.003815975674358e-01, -1.278018312000927e-01, -2.145127253619568e-01, -3.523267395600179e-01, -2.908511265264740e-01, -2.908511265264739e-01, -4.578669373176483e-01, -1.015577368588513e-01, -1.147650476491571e-01, -3.388698532399657e-01, -1.032949978416573e-01, -1.032949978416570e-01, -3.653929589516428e-02, -4.643866630750059e-03, -8.809685365077020e-03, -9.773669071359084e-02, -1.307430907793885e-02, -1.307430907793879e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_tau_hcth_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_tau_hcth", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.191929343168382e-09, -4.191860124594525e-09, -4.191575701033386e-09, -4.192709626018060e-09, -4.191892623139264e-09, -4.191892623139264e-09, -4.773526398042510e-06, -4.773781744089098e-06, -4.781036610429659e-06, -4.780023241535965e-06, -4.773485223624205e-06, -4.773485223624205e-06, -3.482941517677044e-03, -3.510244210995120e-03, -4.397733105875788e-03, -4.200971989025711e-03, -3.492758454073361e-03, -3.492758454073361e-03, -9.327101807980634e-01, -8.650987294670796e-01, -1.697577482945169e-03, -2.523272756748613e+00, -9.118500083831875e-01, -9.118500083831875e-01, -2.283055146809115e+01, -2.287392333188090e+01, -8.811514446826436e+00, -1.627699552872935e+01, -2.376260971048775e+01, -2.376260971048778e+01, -1.068744862224852e-06, -1.064810171792834e-06, -1.068345815423763e-06, -1.065286390153584e-06, -1.066723376839760e-06, -1.066723376839760e-06, -5.368689759366357e-05, -5.232922708554710e-05, -5.468532709434919e-05, -5.355678419762856e-05, -5.161203381232127e-05, -5.161203381232127e-05, -7.042507303618464e-03, -3.748631915902735e-03, -8.038488863786374e-03, -6.130748460615345e-03, -6.186410833992816e-03, -6.186410833992816e-03, -3.863518390201708e+00, -9.034029851351427e-01, -4.369759293152794e+00, -4.526644410619256e-05, -3.722789600878885e+00, -3.722789600878885e+00, -1.726858829683108e+01, -1.729609464197215e+01, -4.950982048238646e+01, -7.913498530326818e+00, -2.554672508289356e+01, -2.554672508290199e+01, -4.340615307925384e-03, -4.702238746373287e-03, -4.533078579918286e-03, -4.432989044949710e-03, -4.479595713582511e-03, -4.479595713582511e-03, -4.715544147716021e-03, -1.370935391841877e-02, -1.190995499057769e-02, -9.019050440302287e-03, -1.061920152557241e-02, -1.061920152557241e-02, -3.205323569031073e-03, -3.787693565000672e-01, -1.649557990692481e-01, -4.747316148287396e-02, -8.496554214795680e-02, -8.496554214795687e-02, -1.821520472927569e-02, -7.596540554114954e+00, -7.154466076613006e+00, -6.059025763871553e-02, -6.914578121826626e+00, -6.914578121826632e+00, -1.712478132212219e+01, -2.980320580120162e+01, -2.564957876578174e+01, -8.455988149857886e+00, -3.731846644395615e+01, -3.731846644396541e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_tau_hcth_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_tau_hcth", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-4.613539930042737e-06, -4.614477980557664e-06, -4.616745888395020e-06, -4.601361448076990e-06, -4.614051188417314e-06, -4.614051188417314e-06, 9.513238856176363e-05, 9.510514070380663e-05, 9.446346500029035e-05, 9.770600347372229e-05, 9.510527259479184e-05, 9.510527259479184e-05, -3.439367151162295e-04, -3.586522932491569e-04, -7.981481802778346e-04, -7.196375446146077e-04, -3.491320655097128e-04, -3.491320655097128e-04, -4.588791430757641e-03, -4.442747057613769e-03, -1.631039657953654e-04, 4.271215435850829e-03, -4.568963670327695e-03, -4.568963670327695e-03, 2.800529469940416e-06, 3.483454565644806e-06, 6.191878791940188e-04, 1.525781777977686e-08, 3.536189033115019e-06, 3.536189032959231e-06, 3.522271352235550e-05, 3.798402148470361e-05, 3.552133145689181e-05, 3.766683558831546e-05, 3.660611021240336e-05, 3.660611021240336e-05, 9.028430354415249e-04, 1.003866984973213e-03, 8.838481813096508e-04, 9.692554060784212e-04, 9.859308914799340e-04, 9.859308914799340e-04, 3.106812167554096e-04, -6.783624771347890e-04, 4.825566339495734e-04, -1.277669729980548e-03, -2.100600972512517e-04, -2.100600972512517e-04, 5.715084296779564e-03, 1.749017828000300e-03, 6.227063016922297e-03, -3.629253024648035e-04, 8.664821935991406e-03, 8.664821935991406e-03, 2.400739971665268e-08, 3.519973383402487e-08, 6.489846983875792e-08, 1.429570783022016e-03, 3.022968718583833e-08, 3.022968718114509e-08, 1.602848208999099e-03, 2.214528832490367e-03, 2.198099687516222e-03, 2.033730765491402e-03, 2.133479427619215e-03, 2.133479427619216e-03, 1.504439952856664e-03, 4.688169341749903e-03, 1.081264139860125e-03, -3.150680818226353e-04, -1.297761800639362e-04, -1.297761800639372e-04, -9.645773358698445e-04, -3.016798856146504e-03, -1.780006369919092e-03, 3.157648004090560e-03, 2.423237084537351e-03, 2.423237084537341e-03, 3.815708118600251e-03, 4.092274905705939e-04, 1.226890130630135e-03, 2.713641964632915e-03, 5.862861834080879e-03, 5.862861834080938e-03, 1.503891899616164e-06, 6.327354167523224e-11, 4.308553406364563e-09, 6.030430430292265e-03, 2.235316882392013e-08, 2.235316881002456e-08])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
