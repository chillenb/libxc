
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_tau_hcth_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_tau_hcth", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.718030221112216e+01, -1.718034370641974e+01, -1.718055955754123e+01, -1.717987942233855e+01, -1.718032383772339e+01, -1.718032383772339e+01, -2.800292867550018e+00, -2.800298082757647e+00, -2.800554870975025e+00, -2.800679240472904e+00, -2.800307635508402e+00, -3.061427054970249e+00, -5.369286867923014e-01, -6.572151897712977e-01, -6.657101120938410e-01, -6.587300543305611e-01, -6.570347671445897e-01, -6.570347671445897e-01, -1.881118987694967e-01, -1.879951471137457e-01, -6.434025111865193e-01, -2.056982737777342e-01, -1.881050711995397e-01, -1.881050711995397e-01, -2.387761570495087e-02, -2.499246860837342e-02, -9.460204338667014e-02, -1.153304873875301e-02, -2.473170452192260e-02, -2.473170452192262e-02, -4.264151838281846e+00, -4.264145917618520e+00, -4.264147056841244e+00, -4.186608526782620e+00, -4.264153303798617e+00, -4.264153303798617e+00, -1.574526876597685e+00, -1.585576304861145e+00, -1.570060172283854e+00, -1.578685447945839e+00, -1.587786045645305e+00, -1.759371965797257e+00, -4.964480274420274e-01, -5.227319337560484e-01, -4.784173046635637e-01, -4.870059001595672e-01, -5.099004736547768e-01, -4.848995301674754e-01, -7.818861375931586e-02, -2.274955640442716e-01, -7.718691308964538e-02, -1.620597829943677e+00, -1.804781336700596e-01, -1.804781336700596e-01, -3.793833405666068e-03, -1.270991321565653e-02, -9.524541589675105e-03, -4.865350916110218e-02, -3.950523924678227e-03, -1.158204691842081e-02, -4.838877237670925e-01, -4.830850823008496e-01, -4.801854032536457e-01, -4.835821822570234e-01, -4.834687517479512e-01, -4.834687517479512e-01, -4.689675269092591e-01, -4.319627344366632e-01, -4.418064818222671e-01, -4.505012142233547e-01, -4.460197061050157e-01, -4.306721922144138e-01, -5.528640455537888e-01, -1.860499733676314e-01, -2.665407480036273e-01, -2.824895283916266e-01, -2.846277189374800e-01, -2.846277189374799e-01, -3.651721548077643e-01, -8.874837702998374e-02, -1.150189604037350e-01, -2.910164917467153e-01, -6.346156819168136e-02, -1.468336240404371e-01, -2.801548680404394e-02, -3.484507284167225e-03, -6.616155056731658e-03, -1.401622869077385e-01, -9.845136667797993e-03, -9.845136667797981e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_tau_hcth_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_tau_hcth", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.289428417278053e+01, -2.289434090547860e+01, -2.289463482225277e+01, -2.289370510958435e+01, -2.289431374893348e+01, -2.289431374893348e+01, -3.728941468807509e+00, -3.728946816544346e+00, -3.729241008390442e+00, -3.729425046086583e+00, -3.728960690830149e+00, -3.404758697613184e+00, -7.161331155205117e-01, -4.474107079642612e-01, -3.800025312103668e-01, -4.072526868809161e-01, -4.491822334129618e-01, -4.491822334129618e-01, -1.054104455752331e-01, -1.117797854807116e-01, -8.583994000231445e-01, -1.037218622462434e-01, -1.072173704999295e-01, -1.072173704999295e-01, -3.133789854855946e-02, -3.275315905328167e-02, -1.072672266529544e-01, -1.534404458381921e-02, -3.241058786033377e-02, -3.241058786033382e-02, -5.421758981054615e+00, -5.424736775581913e+00, -5.422083794023171e+00, -5.583356394171870e+00, -5.423259898402979e+00, -5.423259898402979e+00, -2.097643069820302e+00, -2.112168868324118e+00, -2.091778632530371e+00, -2.103114098440086e+00, -2.115062960499332e+00, -1.877160938561649e+00, -5.783612215780820e-01, -6.426525403934061e-01, -5.464574810599152e-01, -5.737953893515743e-01, -6.025699730678540e-01, -6.455875859653237e-01, -1.042651894124202e-01, -7.914616707659325e-02, -1.029306429109433e-01, -1.918270725985419e+00, -9.923477496608646e-02, -9.923477496608646e-02, -5.058444552047195e-03, -1.689638975568595e-02, -1.265753573500324e-02, -6.487304089861334e-02, -5.267365246837575e-03, -1.540059853587774e-02, -6.401425562107147e-01, -6.335003014324306e-01, -6.405997855777423e-01, -6.379026744453207e-01, -6.370044978436047e-01, -6.370044978436047e-01, -6.186492957783170e-01, -5.007282589505437e-01, -5.269938864903726e-01, -5.611162677671993e-01, -5.423698862884451e-01, -5.737425341777669e-01, -6.664995134815452e-01, -2.482092328409077e-01, -1.950681304077252e-01, -3.763209680631098e-01, -2.712461484449941e-01, -2.712461484449940e-01, -4.862195927481673e-01, -1.033200861205541e-01, -1.223197469562175e-01, -3.256318800024037e-01, -8.462413493204517e-02, -1.177046484589161e-01, -3.685059930799879e-02, -4.644923422844512e-03, -8.811112342084910e-03, -1.125082994771461e-01, -1.309617144484395e-02, -1.309617144484392e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_tau_hcth_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_tau_hcth", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.035994358380525e-09, -2.035962902802460e-09, -2.035809116229028e-09, -2.036323360007796e-09, -2.035977897679664e-09, -2.035977897679664e-09, -4.502354736880279e-06, -4.501990141426379e-06, -4.490327425194070e-06, -4.493419205253612e-06, -4.502167876805342e-06, -5.583131113174353e-06, -3.616234930398380e-03, -5.196594611062906e-03, -6.058448055579736e-03, -5.768754874121809e-03, -5.175821212563005e-03, -5.175821212563005e-03, -9.702987616970539e-01, -9.094719941135417e-01, -1.671771385896300e-03, -1.911943140350131e+00, -9.519624486422680e-01, -9.519624486422680e-01, -2.193437444139221e+01, -2.174464372591945e+01, -6.832302558845440e+00, -7.845552092026417e+00, -2.274275566984887e+01, -2.274275566984817e+01, -1.071288985357403e-06, -1.067329996346963e-06, -1.070855125786150e-06, -5.649963230372852e-07, -1.069298620143144e-06, -1.069298620143144e-06, -4.760845704054320e-05, -4.591359706626813e-05, -4.831474756404474e-05, -4.697570242972511e-05, -4.555439696891700e-05, -5.401752093281579e-05, -7.956212019004706e-03, -5.674053153385310e-03, -9.206193442996656e-03, -8.516905296034022e-03, -7.055702284336020e-03, -3.773655814219697e-03, -6.493484146192401e+00, -8.899690352832095e-01, -6.851626701261399e+00, -6.895541022052613e-05, -3.217333352915003e+00, -3.217333352915003e+00, -1.146606550752920e+06, -9.896279021867432e+00, -3.888734281571591e+01, -4.255923360455268e+01, -9.752336686654361e+05, -1.219540779497076e+01, -4.556361107421307e-03, -4.978611271754716e-03, -3.903000847989350e-03, -4.674161645024453e-03, -4.729829796258488e-03, -4.729829796258488e-03, -5.282699535300503e-03, -1.388164473795204e-02, -1.228541318054709e-02, -9.690007192721773e-03, -1.116742051208007e-02, -5.329861690674297e-03, -4.867539480976780e-03, -2.432323608511271e-01, -1.757203778392067e-01, -4.571351711534262e-02, -9.379448385884460e-02, -9.379448385884470e-02, -1.524580009861558e-02, -6.543343698041775e+00, -5.305605387062825e+00, -6.797737130871018e-02, -1.488899382214505e+01, -5.470323611967608e+00, -8.581346822242251e+00, -1.096575738965350e+01, -2.154038811578985e+01, -6.573043166369558e+00, -1.714828370360016e+01, -1.714828370360284e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_tau_hcth_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_tau_hcth", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-7.496237815575606e-06, -7.495579479919401e-06, -7.492687863300448e-06, -7.503399310118275e-06, -7.495891100043554e-06, -7.495891100043554e-06, -3.600337454972193e-05, -3.602361862295104e-05, -3.663268133794902e-05, -3.639360344826164e-05, -3.600882254679546e-05, 8.636418618285577e-04, 2.133153656918204e-05, -9.805565366451635e-04, -1.159803727033005e-03, -1.143624320001674e-03, -9.698722970892652e-04, -9.698722970892652e-04, -4.083263170982236e-03, -4.095798119887136e-03, 2.302849415599398e-05, 1.053567944469152e-02, -4.103493640001224e-03, -4.103493640001224e-03, 2.801908357186949e-06, 3.485833500974574e-06, 6.439212787002337e-04, 1.528005658890545e-08, 3.538280839475006e-06, 3.538280839319128e-06, 3.490068869861731e-05, 3.765029346013313e-05, 3.520201752840543e-05, 1.757095498447964e-05, 3.627253625914415e-05, 3.627253625914415e-05, -3.314628069485307e-05, -3.810221174339672e-05, -3.101773547117718e-05, -3.487416956477504e-05, -3.942864157918629e-05, 1.200978639759349e-03, 4.201978146595725e-03, -3.244131580876266e-06, 5.744194812355700e-03, 2.941894065588795e-03, 2.487748181704404e-03, -4.490171447634626e-04, 8.208343277529520e-06, 3.439450467286324e-03, 9.577620134075323e-06, 7.293968275074543e-04, 1.156018336582471e-02, 1.156018336582471e-02, 9.594135935928130e-12, 3.525098642810127e-08, 6.494039501466685e-08, 1.040496739904163e-06, 1.209837959286385e-11, 3.028604515796245e-08, 2.092535616001232e-03, 2.389973673397172e-03, 9.808054408002296e-04, 2.421911793052664e-03, 2.475099475044308e-03, 2.475099475044308e-03, 2.494745803042900e-03, 5.427991805056410e-03, 1.846495192133046e-03, -1.627552378309101e-04, 4.158998645496930e-04, -4.012408094871475e-04, 7.582553566461890e-04, 8.362684719118613e-05, -1.835995381178168e-03, -2.030103414068904e-04, 3.103044091802373e-03, 3.103044091802363e-03, -3.187946983864863e-04, 4.167231126813786e-04, 1.315514215786391e-03, 9.297395240774210e-03, 6.822576055380585e-06, 6.919652777087787e-03, 1.516930612893569e-06, 6.328812998198724e-11, 4.309260649352605e-09, 7.213042891141348e-03, 2.239106506992834e-08, 2.239106505600922e-08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
