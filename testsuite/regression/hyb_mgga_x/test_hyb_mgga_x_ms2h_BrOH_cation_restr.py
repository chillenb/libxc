
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_ms2h_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_ms2h", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.042815733892604e+01, -2.042820488997891e+01, -2.042845544861605e+01, -2.042774753936572e+01, -2.042811289527807e+01, -2.042811289527807e+01, -3.068025541410078e+00, -3.068026754338664e+00, -3.068243823873687e+00, -3.069476306782272e+00, -3.068583054606006e+00, -3.068583054606006e+00, -6.003836176292148e-01, -6.001206094330083e-01, -5.951305437724836e-01, -6.005215688523555e-01, -5.988039239981270e-01, -5.988039239981270e-01, -1.802745153431436e-01, -1.814124563566193e-01, -6.891017682435558e-01, -1.436769999519727e-01, -1.561219115820687e-01, -1.561219115820687e-01, -7.653803906667326e-03, -8.055370779171242e-03, -4.387736698647141e-02, -4.421862109104253e-03, -5.555699662102057e-03, -5.555699662102057e-03, -4.958277633965640e+00, -4.958698209227361e+00, -4.958303000340660e+00, -4.958674188737030e+00, -4.958487521834136e+00, -4.958487521834136e+00, -1.917526118474603e+00, -1.935370368753470e+00, -1.916226424926213e+00, -1.931668219277957e+00, -1.928245507266271e+00, -1.928245507266271e+00, -5.467576163343525e-01, -5.853496992910225e-01, -4.840185578186496e-01, -4.886746455958045e-01, -5.568455910795218e-01, -5.568455910795218e-01, -1.073680650115663e-01, -1.856974946819179e-01, -1.001179967684565e-01, -1.668542480343994e+00, -1.212064383530984e-01, -1.212064383530984e-01, -3.411937561600702e-03, -4.322735419318194e-03, -3.305110556457032e-03, -6.948281941675738e-02, -3.981643369905714e-03, -3.981643369905714e-03, -5.551199792615534e-01, -5.539100184215312e-01, -5.543390894296512e-01, -5.546871261661347e-01, -5.545125771483379e-01, -5.545125771483379e-01, -5.387281066417415e-01, -4.798321129840422e-01, -4.964208104001400e-01, -5.129120292071351e-01, -5.043259341612591e-01, -5.043259341612591e-01, -6.041626796164108e-01, -2.302745888719266e-01, -2.644854126778765e-01, -3.204665019374352e-01, -2.927434696829435e-01, -2.927434696829435e-01, -4.325348601048597e-01, -4.206679155560854e-02, -5.677693577335029e-02, -3.092752877267926e-01, -8.613005203115154e-02, -8.613005203115155e-02, -1.079748840118370e-02, -1.155659779268915e-03, -2.425646575494592e-03, -8.148582774649055e-02, -3.684299779259738e-03, -3.684299779259735e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_ms2h_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_ms2h", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.619707990354975e+01, -2.619717522067641e+01, -2.619767007812690e+01, -2.619625517381093e+01, -2.619698637783970e+01, -2.619698637783970e+01, -3.834208577114868e+00, -3.834425306293500e+00, -3.840511203734051e+00, -3.840308546257267e+00, -3.839114521286027e+00, -3.839114521286027e+00, -7.193983291273743e-01, -7.181742261573910e-01, -6.897286447591948e-01, -6.979186450528940e-01, -6.963010522030531e-01, -6.963010522030531e-01, -1.567535265601510e-01, -1.554917443058334e-01, -8.214225669510079e-01, -1.534620477822406e-01, -1.640448843318674e-01, -1.640448843318674e-01, -1.019458554947613e-02, -1.072792907664415e-02, -5.698515416053248e-02, -5.893888613886508e-03, -7.403290417261331e-03, -7.403290417261331e-03, -6.445960071128072e+00, -6.447740204471450e+00, -6.446084246029955e+00, -6.447653674337285e+00, -6.446840824447944e+00, -6.446840824447944e+00, -2.110118808628269e+00, -2.165151302482388e+00, -2.110296183837492e+00, -2.164238182848260e+00, -2.141499438925504e+00, -2.141499438925504e+00, -6.954664908462679e-01, -8.081468292351494e-01, -6.234164812377798e-01, -6.812405565502575e-01, -7.131803806982663e-01, -7.131803806982663e-01, -1.249372439675788e-01, -1.574282226711115e-01, -1.179408470577809e-01, -2.400294221296368e+00, -1.329754960240223e-01, -1.329754960240223e-01, -4.548233636824240e-03, -5.761693625144038e-03, -4.404625787320458e-03, -8.626928191857412e-02, -5.306247908421742e-03, -5.306247908421742e-03, -7.373949019468187e-01, -7.294862222456492e-01, -7.322418702022084e-01, -7.345386758175048e-01, -7.333870435756216e-01, -7.333870435756216e-01, -7.197408637082653e-01, -5.864218366936517e-01, -6.216455356299172e-01, -6.596146978319022e-01, -6.395988269938606e-01, -6.395988269938606e-01, -8.524045008027853e-01, -2.062138385076456e-01, -2.382188590932797e-01, -3.722752037882336e-01, -2.950781517260468e-01, -2.950781517260468e-01, -4.998456195304061e-01, -5.481055084109282e-02, -7.256971274021148e-02, -3.762574831734667e-01, -1.021499113796485e-01, -1.021499113796485e-01, -1.437022071883096e-02, -1.540797012087332e-03, -3.233663478387423e-03, -9.767616763836107e-02, -4.910075783763139e-03, -4.910075783763134e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_ms2h_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_ms2h", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-3.366682568047943e-09, -3.366599373881575e-09, -3.365642435287160e-09, -3.366856185141665e-09, -3.366304229991384e-09, -3.366304229991384e-09, -6.925867494205938e-06, -6.932587451306717e-06, -7.124251672707489e-06, -7.146340786364898e-06, -7.103187994741283e-06, -7.103187994741283e-06, -3.861346078558065e-03, -3.863459132510863e-03, -3.877462170095393e-03, -3.837866922305845e-03, -3.855786384724672e-03, -3.855786384724672e-03, -1.303037625074779e+00, -1.376258522701591e+00, -1.968896985932969e-03, -5.631812045192526e-01, -5.445390231793847e-01, -5.445390231793845e-01, -1.549582920804755e+00, -1.636986433823751e+00, -9.104605000099026e-01, -1.408209700293326e+00, -1.789027519809208e+00, -1.789027519809212e+00, -6.814429322777815e-07, -6.810733203490853e-07, -6.809801904614972e-07, -6.806739074010235e-07, -6.814843034398976e-07, -6.814843034398976e-07, -1.120043111253917e-04, -9.696345363659359e-05, -1.035858741553872e-04, -8.911245647614450e-05, -1.074347034350655e-04, -1.074347034350655e-04, -2.232723314494049e-02, -1.712900212066544e-02, -2.374694449314817e-02, -2.025357058537623e-02, -2.019169618323221e-02, -2.019169618323221e-02, -6.249469998278864e-01, -8.183662117630403e-01, -6.854262805630368e-01, -1.887974558680815e-04, -8.458747117263727e-01, -8.458747117263731e-01, -1.855527863591426e+00, -1.657348840219308e+00, -1.040810025756271e+01, -1.015524507206603e+00, -4.843491994223561e+00, -4.843491994223551e+00, -6.910039339765861e-03, -6.869680000960156e-03, -6.884361150219515e-03, -6.896820041416864e-03, -6.892034815843882e-03, -6.892034815843882e-03, -1.076627752416861e-02, -1.317494886258252e-02, -1.290300764083503e-02, -1.228902463223827e-02, -1.303677922257303e-02, -1.303677922257303e-02, -1.566860219789066e-02, -4.286820216950318e-01, -3.418492964853317e-01, -1.347588363690514e-01, -2.484223648068623e-01, -2.484223648068624e-01, -5.368319316808014e-02, -8.326293175512748e-01, -8.245229717917919e-01, -2.087135892336626e-01, -1.129116959723113e+00, -1.129116959723114e+00, -1.248586964807291e+00, -8.133675335592011e+00, -3.936384083616000e+00, -1.192670609214501e+00, -6.117783921184874e+00, -6.117783921184888e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_ms2h_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_ms2h", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_ms2h_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_ms2h", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.696102378606954e-04, 1.696017267014178e-04, 1.694770669458754e-04, 1.695999481150573e-04, 1.695479940495957e-04, 1.695479940495957e-04, 1.325192052400421e-03, 1.329678799043536e-03, 1.458590790227537e-03, 1.479472752119344e-03, 1.446086819659508e-03, 1.446086819659508e-03, 2.590866512263939e-03, 2.573092349570621e-03, 2.202644388173614e-03, 2.617549319976108e-03, 2.502129964061049e-03, 2.502129964061049e-03, 8.419504887901717e-02, 9.394642873231181e-02, 3.515312180618907e-04, 2.118532471114477e-03, 4.476312934135370e-03, 4.476312934135363e-03, 3.099593688593989e-10, 9.046468628337938e-11, 2.354808540819953e-07, 5.705813342354497e-16, 3.954600521515250e-14, 3.954600522070983e-14, 4.874665172713376e-05, 4.815596582880956e-05, 4.772979798174388e-05, 4.725255513306288e-05, 4.895491259679100e-05, 4.895491259679100e-05, 1.002171819950159e-02, 8.559031394997346e-03, 8.915028271263503e-03, 7.483772743084094e-03, 9.732641798226804e-03, 9.732641798226804e-03, 5.652094833307535e-02, 5.539975744120517e-02, 4.009012567309810e-02, 3.562465022856504e-02, 5.329238500581586e-02, 5.329238500581586e-02, 1.808022920346418e-04, 5.024885428381951e-02, 9.489416260346328e-05, 1.476952881185059e-02, 2.830422360905063e-03, 2.830422360905073e-03, 1.210498179450551e-18, 4.947253740229323e-17, 3.992275025129588e-15, 7.141167620892337e-06, 5.229581015547444e-16, 5.229581006631990e-16, 8.522242861038708e-03, 8.214716252085467e-03, 8.323625622119871e-03, 8.414829741353193e-03, 8.373677276988883e-03, 8.373677276988883e-03, 1.768325873592632e-02, 1.143406722868953e-02, 1.410399686915996e-02, 1.617253113689477e-02, 1.608882900098958e-02, 1.608882900098960e-02, 5.869352214311863e-02, 5.481149784661093e-02, 7.839119604210866e-02, 6.311757993238450e-02, 8.576805354241931e-02, 8.576805354241929e-02, 6.240303507422269e-02, 1.136524249699548e-06, 1.108154301841760e-06, 9.694854683783384e-02, 1.641800503025658e-04, 1.641800503025661e-04, 7.947911466596516e-14, 1.164524478478694e-22, 2.253379137005342e-16, 3.801753338731127e-04, 1.288138811005497e-15, 1.288138810546694e-15]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
