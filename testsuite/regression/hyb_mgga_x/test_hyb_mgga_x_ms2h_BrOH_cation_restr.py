
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_ms2h_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_ms2h", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.878379110853494e+01, -1.878390245477404e+01, -1.878438992019013e+01, -1.878273742678732e+01, -1.878360429296677e+01, -1.878360429296677e+01, -2.925727359505068e+00, -2.925750242549299e+00, -2.926401959290158e+00, -2.926404355973923e+00, -2.926100079106495e+00, -3.431996801064030e+00, -5.550650303792409e-01, -6.876285520830118e-01, -6.757795370698665e-01, -6.783512857311128e-01, -6.778496081664230e-01, -6.778496081664230e-01, -1.831043618830624e-01, -1.851683811232163e-01, -6.437443761565080e-01, -1.489388771331706e-01, -1.623007143037532e-01, -1.623007143037532e-01, -7.653838819455039e-03, -8.055445419529919e-03, -4.394498822448110e-02, -4.421940677216621e-03, -5.555808397779668e-03, -5.555808397779668e-03, -4.958680600654812e+00, -4.959096332290671e+00, -4.958697444211881e+00, -4.730438322127252e+00, -4.958892292819209e+00, -4.958892292819209e+00, -1.638180079720196e+00, -1.651809220840229e+00, -1.628149313004077e+00, -1.640205971576445e+00, -1.650588883167873e+00, -1.958718119775277e+00, -5.693851880837011e-01, -6.098052494493268e-01, -5.330075743401690e-01, -5.474392908457749e-01, -5.769049961833536e-01, -5.045356572922682e-01, -7.491928046452534e-02, -1.901681946830300e-01, -6.930801001786738e-02, -1.854477165314129e+00, -1.236109343045412e-01, -1.236109343045412e-01, -2.204614258588174e-03, -4.322902142020327e-03, -3.305212048174265e-03, -4.661260052961672e-02, -2.573073418403292e-03, -3.981843246558816e-03, -5.562481491913538e-01, -5.549830577728078e-01, -5.484023482391519e-01, -5.557958642157637e-01, -5.556138635218121e-01, -5.556138635218121e-01, -5.414304776185839e-01, -4.810101260898082e-01, -4.980863961495661e-01, -5.150587566898546e-01, -5.063810335549194e-01, -4.546749333017374e-01, -6.415820242358459e-01, -1.804156502460502e-01, -2.723700767017786e-01, -2.908427207112607e-01, -3.059176848011901e-01, -3.059176848011901e-01, -3.817460163836184e-01, -4.209815462150059e-02, -5.695179560825808e-02, -3.298229124156766e-01, -5.935575079475131e-02, -8.705941073272269e-02, -1.079984475638675e-02, -1.155678821127565e-03, -2.425658677630055e-03, -8.205454979053259e-02, -3.684434558159076e-03, -3.684434558159073e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_ms2h_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_ms2h", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.821519620702078e+01, -2.821531543424771e+01, -2.821585328172924e+01, -2.821408120978366e+01, -2.821500904719446e+01, -2.821500904719446e+01, -4.006429654625990e+00, -4.006406925745084e+00, -4.005842808293709e+00, -4.006441942429652e+00, -4.005961948689504e+00, -4.203736820124864e+00, -7.539927882579355e-01, -8.030631562832906e-01, -7.826255092100001e-01, -7.885715826794533e-01, -7.872954624997862e-01, -7.872954624997862e-01, -2.092453151371945e-01, -2.120409254598399e-01, -8.645751120903713e-01, -1.704665706717191e-01, -1.839575194970977e-01, -1.839575194970980e-01, -1.019473088837025e-02, -1.072823477108967e-02, -5.726089632109064e-02, -5.894202977686110e-03, -7.403726088355216e-03, -7.403726088355216e-03, -6.447515552207743e+00, -6.449261004362666e+00, -6.447606850887387e+00, -6.810802799069520e+00, -6.448394632763417e+00, -6.448394632763417e+00, -2.254003278712895e+00, -2.272505897905298e+00, -2.239895302631426e+00, -2.256800444929998e+00, -2.270862392702614e+00, -2.373649151968130e+00, -7.160860082393458e-01, -7.862673827443564e-01, -6.579705424915693e-01, -6.889707374077998e-01, -7.290678758330049e-01, -6.966935921882669e-01, -9.991820518587546e-02, -2.155025722994487e-01, -9.242875697648671e-02, -2.350258783751916e+00, -1.432987846866189e-01, -1.432987846866190e-01, -2.939485678761790e-03, -5.762360359822840e-03, -4.405031856435728e-03, -6.215326220508681e-02, -3.430764563402314e-03, -5.307047203045237e-03, -7.364363436512239e-01, -7.298000448195381e-01, -7.438747123799648e-01, -7.340456859565668e-01, -7.330799721253896e-01, -7.330799721253896e-01, -7.161420596478015e-01, -5.984384297335913e-01, -6.312978303993182e-01, -6.647415903131700e-01, -6.475684519754433e-01, -6.796471230339104e-01, -8.219313261345799e-01, -2.424215068297315e-01, -3.157483988984575e-01, -4.001499712518737e-01, -3.626055964223266e-01, -3.626055964223265e-01, -5.213475943865251e-01, -5.494617673737348e-02, -7.327470756075646e-02, -4.056483507287907e-01, -7.915529186857424e-02, -1.058448670887500e-01, -1.437963325958616e-02, -1.540873174651649e-03, -3.233711914408261e-03, -1.002875786749182e-01, -4.910614889897796e-03, -4.910614889897774e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_ms2h_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_ms2h", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.558672877494617e-08, -1.558673499233193e-08, -1.558663585906694e-08, -1.558655535360810e-08, -1.558661698300945e-08, -1.558661698300945e-08, -7.211736034242384e-06, -7.211264379459240e-06, -7.197915871059049e-06, -7.200795845470429e-06, -7.203486800245236e-06, -2.632620796767261e-06, -4.876529424284798e-03, -1.415919394570496e-03, -1.452254056842304e-03, -1.461036677498320e-03, -1.458456353480498e-03, -1.458456353480498e-03, -2.417940722706662e-01, -2.363919003261546e-01, -2.564530951065540e-03, -3.031123479584550e-01, -2.949219939387910e-01, -2.949219939387850e-01, -1.522140539793817e+00, -1.585596730312927e+00, -7.137856338178108e-01, -1.118837440856919e+00, -1.556541488669523e+00, -1.556541488669523e+00, -6.593605212230493e-07, -6.592705017912919e-07, -6.593591199921125e-07, -4.127150504656104e-06, -6.593136570538680e-07, -6.593136570538680e-07, -7.240753188162800e-05, -7.056735065096183e-05, -7.370836369031177e-05, -7.211715148580452e-05, -7.074951746949164e-05, -2.424502463063420e-05, -3.637237117950608e-03, -2.856151745571424e-03, -4.593517061243470e-03, -4.260926320558461e-03, -3.475523045858867e-03, -1.015321110909456e-02, -1.376383691693673e+01, -1.601282905798665e-01, -1.879134579325272e+01, -3.267828623385502e-05, -4.927681253830036e-01, -4.927681253829961e-01, -1.835298793095157e+07, -9.891104864999163e-01, -7.994338011522331e+00, -9.184062158457935e+01, -9.890733812046463e+06, -3.068269190746927e+00, -4.238459105851453e-03, -4.250327869342082e-03, -1.476921269566873e-02, -4.242812755841455e-03, -4.244479423244442e-03, -4.244479423244442e-03, -4.717798253789806e-03, -7.020913355895716e-03, -6.280221151650629e-03, -5.618201825312088e-03, -5.947728754267786e-03, -3.572067198958141e-02, -2.313191950312281e-03, -4.163241778430499e-01, -5.535693277269883e-02, -7.257393515600065e-02, -3.831159460779017e-02, -3.831159460779027e-02, -2.466471276136009e-02, -7.288270827484600e-01, -6.093867717881351e-01, -3.111370108142590e-02, -3.493295566033431e+01, -7.741154431627050e-01, -7.266296107608690e-01, -1.211836128314874e+00, -3.473353881955133e+00, -8.667351990068021e-01, -4.372847375437686e+00, -4.372847375539397e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_ms2h_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_ms2h", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.858753992364932e-03, 1.858784101517070e-03, 1.858902059171419e-03, 1.858456376401865e-03, 1.858692374496864e-03, 1.858692374496864e-03, 7.928721366340580e-04, 7.926760268113478e-04, 7.872033631353819e-04, 7.894109429594948e-04, 7.892606479334006e-04, -1.075900614034233e-17, 1.327239489611264e-03, -4.661288045360247e-17, -2.033969748065781e-17, 1.072643490335665e-18, -2.529470426517243e-17, -2.529470426517243e-17, 9.654471425076129e-17, -8.979658510854036e-17, 2.535508144850549e-04, 4.192885892496351e-16, 3.177621095130528e-16, 1.842346986654255e-17, 2.562036213773702e-17, -4.355447619886802e-18, 9.634616713497565e-17, 1.430413092482707e-17, -8.713717902432490e-18, -8.713717902432490e-18, -1.350181555818455e-18, 1.547306533621938e-19, -7.749151915840148e-20, 7.306487117660521e-03, -1.234922473448868e-18, -1.234922473448868e-18, 1.344340859555822e-03, 1.387654364035125e-03, 1.301233946654705e-03, 1.349609343399777e-03, 1.385942896985464e-03, 5.545702937435263e-19, 1.800165647313532e-17, 1.548557449039299e-17, -3.575009819773122e-17, 2.898624740860293e-17, 2.079500509292874e-17, 1.117316227409129e-02, 1.410190476902743e-05, 1.730187027910861e-16, 1.002861142438916e-05, -1.846588476682258e-18, 2.559445134771156e-16, 1.092915443124126e-16, 3.741704410712588e-13, -6.047211901113045e-18, 1.493605941220886e-17, 1.946404603038702e-06, 6.396600451829603e-12, 4.804736160651867e-17, -1.344018085915625e-18, 6.078876254307600e-18, 3.274666800244172e-02, -1.262279718342707e-20, 1.399372780310145e-18, 1.399372780310145e-18, -3.086342455147103e-18, -3.985620609312054e-18, 7.678424652754017e-18, -1.093497235292624e-17, 1.011538527796927e-17, 5.874777356430673e-02, 1.064032180439127e-19, 9.987890266293582e-04, 1.122318636975360e-16, 7.394412779977762e-03, -1.480261750658299e-17, 2.696071477347785e-17, 5.723373585763357e-03, 2.158472810241909e-16, -2.990227601968350e-16, 2.593900687153617e-17, 1.038567717302931e-05, 3.242241242690814e-16, -5.465948575054041e-17, 4.028250587715235e-19, -5.671778514088719e-19, 1.706870811559444e-16, -9.955296955590856e-18, 2.947025285498466e-17])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
