
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_tau_hcth_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_tau_hcth", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.766019613569837e+01, -1.766022681515346e+01, -1.766040802868301e+01, -1.765995066123760e+01, -1.766018393714351e+01, -1.766018393714351e+01, -2.907731565271021e+00, -2.907717001092979e+00, -2.907457334124522e+00, -2.908531125747598e+00, -2.907817457925315e+00, -2.907817457925315e+00, -5.740837374827821e-01, -5.739015507552059e-01, -5.719178188511959e-01, -5.756127602180574e-01, -5.793131776918383e-01, -5.793131776918383e-01, -1.892272618623368e-01, -1.878994979325964e-01, -6.670809569622811e-01, -1.869211410014935e-01, -1.910528956449822e-01, -1.910528956449821e-01, -1.424537194063333e-02, -1.499746355456385e-02, -7.882919657238649e-02, -8.224256875446038e-03, -1.147104372242807e-02, -1.147104372242807e-02, -4.265286323269523e+00, -4.265291181895204e+00, -4.265293294142134e+00, -4.265297414588893e+00, -4.265284521685126e+00, -4.265284521685126e+00, -1.728497787572793e+00, -1.738257467386026e+00, -1.727772627246690e+00, -1.736266740397720e+00, -1.734424440995672e+00, -1.734424440995672e+00, -4.882312840802369e-01, -5.161791041966732e-01, -4.540608848592230e-01, -4.593624346793848e-01, -4.946648489562919e-01, -4.946648489562919e-01, -1.655105562477068e-01, -2.245417207963974e-01, -1.571832038370035e-01, -1.555312941677838e+00, -1.709896862728640e-01, -1.709896862728640e-01, -6.350603792708639e-03, -8.039531619272774e-03, -6.154895531697568e-03, -1.172964964941706e-01, -7.730711925544611e-03, -7.730711925544623e-03, -4.756376589092240e-01, -4.748240800098646e-01, -4.750920278000353e-01, -4.753306953038228e-01, -4.752092901898746e-01, -4.752092901898746e-01, -4.621085579921437e-01, -4.237788488848848e-01, -4.333906064777971e-01, -4.424977367405631e-01, -4.375813553763493e-01, -4.375813553763493e-01, -5.417216551556105e-01, -2.459597540970901e-01, -2.586716259196367e-01, -3.004856368977085e-01, -2.735292756334040e-01, -2.735292756334040e-01, -3.895534363493826e-01, -7.582484042127929e-02, -9.973264368079335e-02, -2.843930084727843e-01, -1.366636682984502e-01, -1.366636682984502e-01, -2.004970583977481e-02, -2.149941890232475e-03, -4.520387746100594e-03, -1.316285909769918e-01, -7.100017972535639e-03, -7.100017972535632e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_tau_hcth_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_tau_hcth", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.188359119870625e+01, -2.188353841421231e+01, -2.188370326024892e+01, -2.188361980941749e+01, -2.188401642345395e+01, -2.188408128893406e+01, -2.188275180351915e+01, -2.188246899497450e+01, -2.188366021738495e+01, -2.188308009645455e+01, -2.188366021738495e+01, -2.188308009645455e+01, -3.591438490399995e+00, -3.591562386070380e+00, -3.591444875775999e+00, -3.591579974886334e+00, -3.591741103480135e+00, -3.591878288288151e+00, -3.591162212946596e+00, -3.591381219569827e+00, -3.590831021955774e+00, -3.591701328609858e+00, -3.590831021955774e+00, -3.591701328609858e+00, -6.659431271287616e-01, -6.731927683533230e-01, -6.632811944059698e-01, -6.722196122859790e-01, -6.238689361434081e-01, -6.086324598144148e-01, -6.227190479171033e-01, -6.280499615593672e-01, -6.841437159208040e-01, -5.289225844318519e-01, -6.841437159208040e-01, -5.289225844318519e-01, -8.275685981666356e-02, -9.129825861286865e-02, -8.768213278469777e-02, -9.929727341010140e-02, -7.534584282453685e-01, -8.016092330160997e-01, -8.414400858632205e-02, -8.157608736320179e-02, -8.847307738914302e-02, -1.083119863470213e-01, -8.847307738914306e-02, -1.083119863470208e-01, -1.830154324868348e-02, -1.943434235820497e-02, -1.916441406361573e-02, -2.051151405760509e-02, -9.309075809072949e-02, -9.670795484262100e-02, -1.104126826518602e-02, -1.085824565421308e-02, -1.634514373231399e-02, -9.321156549024687e-03, -1.634514373231399e-02, -9.321156549024733e-03, -5.426530346716280e+00, -5.425155518017903e+00, -5.429632588037764e+00, -5.428153257058821e+00, -5.426702989551052e+00, -5.425258738726580e+00, -5.429364971503059e+00, -5.427982069373709e+00, -5.428120229811407e+00, -5.426662025087624e+00, -5.428120229811407e+00, -5.426662025087624e+00, -1.891298334474265e+00, -1.891427642424642e+00, -1.914586481656012e+00, -1.914024517096145e+00, -1.856099160998095e+00, -1.866893435436814e+00, -1.878025125142224e+00, -1.888375433963574e+00, -1.927710384171610e+00, -1.906805818160707e+00, -1.927710384171610e+00, -1.906805818160707e+00, -6.022805652196983e-01, -6.004407080106434e-01, -6.762075634212298e-01, -6.769232092470241e-01, -5.493928204502594e-01, -5.684816805399364e-01, -5.853183570094367e-01, -6.043542370191208e-01, -6.277138468140120e-01, -5.969855572967052e-01, -6.277138468140120e-01, -5.969855572967052e-01, -1.263318020834703e-01, -1.245537834660038e-01, -8.213112502856622e-02, -8.228925918032524e-02, -1.269632551669298e-01, -1.253957393616567e-01, -2.035037465406302e+00, -2.034165274998355e+00, -1.062230414685077e-01, -8.586231673164972e-02, -1.062230414685078e-01, -8.586231673164961e-02, -8.288303947852221e-03, -8.613503500834828e-03, -1.062328254745217e-02, -1.078427158370831e-02, -7.938654452346644e-03, -8.403335990694236e-03, -1.177969812749610e-01, -1.191539010915977e-01, -8.113675899854204e-03, -1.112426103387111e-02, -8.113675899854194e-03, -1.112426103387116e-02, -6.301508825534323e-01, -6.326244825421989e-01, -6.231818672010051e-01, -6.257513353646134e-01, -6.258569504201277e-01, -6.283972116833723e-01, -6.278767937591163e-01, -6.303594575944225e-01, -6.268883274596632e-01, -6.293973407235786e-01, -6.268883274596632e-01, -6.293973407235786e-01, -6.140920580891542e-01, -6.161205241171421e-01, -4.904731917248670e-01, -4.926973526148767e-01, -5.180745837792543e-01, -5.206535407748247e-01, -5.568670873750797e-01, -5.590679184041396e-01, -5.357936676452958e-01, -5.379566467187925e-01, -5.357936676452958e-01, -5.379566467187925e-01, -7.067296037501904e-01, -7.085351672650813e-01, -1.026867962296566e-01, -1.042097752147940e-01, -1.757957309308356e-01, -1.826300861680336e-01, -3.457968668982506e-01, -3.481202317424376e-01, -2.702211017277591e-01, -2.710409400382621e-01, -2.702211017277590e-01, -2.710409400382622e-01, -4.544895479773710e-01, -4.578485722063372e-01, -9.239886943711169e-02, -9.285468270032830e-02, -1.121889572517948e-01, -1.138674922879875e-01, -3.390366398760798e-01, -3.429768469071264e-01, -1.179840157439846e-01, -1.095791362877011e-01, -1.179840157439845e-01, -1.095791362877008e-01, -2.606107107030529e-02, -2.698288435787331e-02, -2.862842047900053e-03, -2.869128577289824e-03, -5.821739225248725e-03, -6.190996228733321e-03, -1.153539995689232e-01, -1.161908933463945e-01, -7.681156259100177e-03, -1.020143065986536e-02, -7.681156259100222e-03, -1.020143065986539e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_tau_hcth_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_tau_hcth", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-8.382780828408444e-09, 0.000000000000000e+00, -8.382991726713793e-09, -8.382596599479776e-09, 0.000000000000000e+00, -8.382857889712073e-09, -8.382112175670221e-09, 0.000000000000000e+00, -8.382134194331991e-09, -8.384191637736528e-09, 0.000000000000000e+00, -8.384785497827241e-09, -8.382666317058244e-09, 0.000000000000000e+00, -8.383802849072974e-09, -8.382666317058244e-09, 0.000000000000000e+00, -8.383802849072974e-09, -9.541768795654370e-06, 0.000000000000000e+00, -9.540014425178185e-06, -9.542530609871783e-06, 0.000000000000000e+00, -9.540390192054440e-06, -9.555780129376835e-06, 0.000000000000000e+00, -9.557316574101835e-06, -9.554940990315125e-06, 0.000000000000000e+00, -9.552856668513252e-06, -9.546352501145211e-06, 0.000000000000000e+00, -9.564272999017923e-06, -9.546352501145211e-06, 0.000000000000000e+00, -9.564272999017923e-06, -6.746866986991062e-03, 0.000000000000000e+00, -6.541231931620889e-03, -6.825166322312963e-03, 0.000000000000000e+00, -6.570004825538943e-03, -8.056044345216650e-03, 0.000000000000000e+00, -8.538192810621986e-03, -7.992113637541449e-03, 0.000000000000000e+00, -7.830860652492623e-03, -6.230897627086962e-03, 0.000000000000000e+00, -1.088760882700458e-02, -6.230897627086962e-03, 0.000000000000000e+00, -1.088760882700458e-02, -2.590062826650409e+00, 0.000000000000000e+00, -2.247133134257310e+00, -2.469095085980371e+00, 0.000000000000000e+00, -2.077080171411613e+00, -4.333440661649543e-03, 0.000000000000000e+00, -3.495068927915678e-03, -4.826157972903498e+00, 0.000000000000000e+00, -4.774336638659973e+00, -2.177512487092333e+00, 0.000000000000000e+00, -7.996498026867037e+00, -2.177512487092331e+00, 0.000000000000000e+00, -7.996498026867044e+00, -2.196961473693430e+01, 0.000000000000000e+00, -2.174445558168347e+01, -2.314280304648268e+01, 0.000000000000000e+00, -2.301750903690327e+01, -1.227268562002220e+01, 0.000000000000000e+00, -1.227636913337955e+01, -2.014751821383979e+01, 0.000000000000000e+00, -1.960117219856989e+01, -2.194115265869077e+01, 0.000000000000000e+00, -5.571067487432412e+01, -2.194115265869312e+01, 0.000000000000000e+00, -5.571067487423113e+01, -2.132001518991712e-06, 0.000000000000000e+00, -2.134298686534063e-06, -2.123760137507261e-06, 0.000000000000000e+00, -2.126326512818276e-06, -2.131558143216703e-06, 0.000000000000000e+00, -2.134035030158015e-06, -2.124486490253533e-06, 0.000000000000000e+00, -2.126792677030176e-06, -2.127770146758663e-06, 0.000000000000000e+00, -2.130293683208310e-06, -2.127770146758663e-06, 0.000000000000000e+00, -2.130293683208310e-06, -1.066503934037510e-04, 0.000000000000000e+00, -1.067834040794733e-04, -1.038717221602128e-04, 0.000000000000000e+00, -1.040869639770349e-04, -1.107860342520991e-04, 0.000000000000000e+00, -1.096534113151127e-04, -1.080639063511465e-04, 0.000000000000000e+00, -1.070183913115507e-04, -1.024447647129100e-04, 0.000000000000000e+00, -1.049670441815179e-04, -1.024447647129100e-04, 0.000000000000000e+00, -1.049670441815179e-04, -1.362445365990353e-02, 0.000000000000000e+00, -1.385033747679698e-02, -7.326240442965329e-03, 0.000000000000000e+00, -7.246729921533465e-03, -1.759840394451820e-02, 0.000000000000000e+00, -1.618856086379646e-02, -1.386954139311763e-02, 0.000000000000000e+00, -1.222916060729936e-02, -1.184835966650504e-02, 0.000000000000000e+00, -1.414069100380331e-02, -1.184835966650504e-02, 0.000000000000000e+00, -1.414069100380331e-02, -6.944392874186902e+00, 0.000000000000000e+00, -7.003316559451983e+00, -2.067970488378124e+00, 0.000000000000000e+00, -2.036643858509979e+00, -8.027902076498494e+00, 0.000000000000000e+00, -7.678587074430800e+00, -9.006263099147114e-05, 0.000000000000000e+00, -9.019133244727444e-05, -7.055450559842967e+00, 0.000000000000000e+00, -7.889807400609401e+00, -7.055450559842970e+00, 0.000000000000000e+00, -7.889807400609391e+00, -2.828937470092641e+01, 0.000000000000000e+00, -2.448539521415707e+01, -2.435401085153307e+01, 0.000000000000000e+00, -2.248563550839816e+01, -1.386929259469279e+02, 0.000000000000000e+00, -1.542624429006914e+02, -1.293197886930913e+01, 0.000000000000000e+00, -1.250713833382278e+01, -6.898516495289310e+01, 0.000000000000000e+00, -6.772366164231902e+01, -6.898516495289769e+01, 0.000000000000000e+00, -6.772366164232139e+01, -9.361040680028234e-03, 0.000000000000000e+00, -9.221183153148765e-03, -1.036216338446776e-02, 0.000000000000000e+00, -1.016938034988571e-02, -9.909405595993842e-03, 0.000000000000000e+00, -9.736537149350820e-03, -9.613961683188964e-03, 0.000000000000000e+00, -9.461087639152290e-03, -9.751556656246465e-03, 0.000000000000000e+00, -9.589528516100575e-03, -9.751556656246465e-03, 0.000000000000000e+00, -9.589528516100575e-03, -9.933760500824581e-03, 0.000000000000000e+00, -9.833548383113296e-03, -2.933425397059300e-02, 0.000000000000000e+00, -2.893749139736313e-02, -2.595536802593338e-02, 0.000000000000000e+00, -2.552058190544474e-02, -1.952015631029064e-02, 0.000000000000000e+00, -1.919275355660401e-02, -2.319970319063911e-02, 0.000000000000000e+00, -2.284486344447966e-02, -2.319970319063911e-02, 0.000000000000000e+00, -2.284486344447966e-02, -6.288124206911230e-03, 0.000000000000000e+00, -6.164782423664527e-03, -9.488469470886217e-01, 0.000000000000000e+00, -9.283984027920686e-01, -4.328721452856728e-01, 0.000000000000000e+00, -4.107398975872785e-01, -1.001031330427683e-01, 0.000000000000000e+00, -9.770100993397828e-02, -1.985949509214405e-01, 0.000000000000000e+00, -1.981639005672180e-01, -1.985949509214407e-01, 0.000000000000000e+00, -1.981639005672179e-01, -3.688690364964527e-02, 0.000000000000000e+00, -3.640113986623129e-02, -1.127092284121190e+01, 0.000000000000000e+00, -1.127678102563086e+01, -1.073353936167853e+01, 0.000000000000000e+00, -1.090248812638711e+01, -1.187281516222483e-01, 0.000000000000000e+00, -1.201447511204955e-01, -1.212125639236688e+01, 0.000000000000000e+00, -1.370225208928326e+01, -1.212125639236688e+01, 0.000000000000000e+00, -1.370225208928326e+01, -1.738396312017193e+01, 0.000000000000000e+00, -1.774152234154594e+01, -8.707059182446785e+01, 0.000000000000000e+00, -1.542276543233258e+02, -5.372771776688910e+01, 0.000000000000000e+00, -5.719397412064284e+01, -1.362185645136076e+01, 0.000000000000000e+00, -1.336570909139687e+01, -1.422007086239409e+02, 0.000000000000000e+00, -7.031790549798728e+01, -1.422007086239632e+02, 0.000000000000000e+00, -7.031790549800468e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_tau_hcth_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_tau_hcth", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_tau_hcth_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_tau_hcth", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-4.616925790839106e-06, -4.613495491057501e-06, -4.618173751084069e-06, -4.614400572971444e-06, -4.619966796489173e-06, -4.617578939587495e-06, -4.605876506189589e-06, -4.599631412111639e-06, -4.617767552466846e-06, -4.605205714297604e-06, -4.617767552466846e-06, -4.605205714297604e-06, 9.508885781087890e-05, 9.439394399843479e-05, 9.508277392811877e-05, 9.432163054552680e-05, 9.414476839277067e-05, 9.377326276963443e-05, 9.772724452410186e-05, 9.701787188704571e-05, 9.519057907907152e-05, 9.621303559388878e-05, 9.519057907907152e-05, 9.621303559388878e-05, -2.886913281604202e-04, -2.259431411418645e-04, -3.095777824918602e-04, -2.340169407904570e-04, -6.263103163955187e-04, -7.332057742372210e-04, -6.192532307032092e-04, -5.672008135420839e-04, -1.669125325101184e-04, -1.202921308898024e-03, -1.669125325101184e-04, -1.202921308898024e-03, -1.700148608962738e-03, -3.216885110554710e-03, -2.565396853317090e-03, -3.895080863587064e-03, -2.644643064041128e-04, -1.814529233267690e-04, 5.802157516729915e-03, 7.413822806875426e-03, -2.011754452493848e-03, 3.169318039813309e-03, -2.011754452493860e-03, 3.169318039813367e-03, 5.956825536692693e-08, 8.113756253694456e-08, 7.941699493663832e-08, 1.141141402375780e-07, 1.173982408740636e-04, 1.622747481457221e-04, 2.937025489432114e-09, 2.742156124530727e-09, 3.118877122381576e-08, 4.175219564324712e-09, 3.118877122381574e-08, 4.175219584503071e-09, 3.549922792065632e-05, 3.550713487290811e-05, 3.840315553544638e-05, 3.831300002173233e-05, 3.569232788111224e-05, 3.562671976734059e-05, 3.818212552382111e-05, 3.817387624597908e-05, 3.695349876896897e-05, 3.690485751160686e-05, 3.695349876896897e-05, 3.690485751160686e-05, 9.023580010284897e-04, 9.170620759136426e-04, 1.006644805429491e-03, 1.018057967552012e-03, 8.523635098923582e-04, 8.822101789381304e-04, 9.539178628513868e-04, 9.831743310648893e-04, 9.856823169181314e-04, 9.756355046058135e-04, 9.856823169181314e-04, 9.756355046058135e-04, 3.823592209174936e-04, 3.749525501998220e-04, -5.680611296124845e-04, -4.684488946100310e-04, 7.802676981189764e-04, 6.569143146443272e-04, -1.220162333869053e-03, -1.275621950509502e-03, -1.501734934918756e-04, 1.174745981186983e-05, -1.501734934918752e-04, 1.174745981186921e-05, 4.506111425284997e-03, 4.532515496163345e-03, 5.026633855734042e-03, 4.853174666533364e-03, 3.319914843100322e-03, 4.204828407612232e-03, -3.627469872988779e-04, -3.627319214420397e-04, 7.798818735780612e-03, 9.917058214617245e-03, 7.798818735780740e-03, 9.917058214617240e-03, 4.329450024224431e-10, 4.633864418275727e-10, 2.237370358372432e-09, 1.996006832037871e-09, 1.010566183039263e-08, 1.547752449291333e-08, 1.156204313037189e-03, 1.425944188978845e-03, 9.187803667847288e-10, 2.538096272283421e-08, 9.187803597144110e-10, 2.538096282876482e-08, 1.823880569155707e-03, 1.788838067806306e-03, 2.163982232763448e-03, 2.185225787768322e-03, 2.280578494295910e-03, 2.279577570709750e-03, 2.194473773707603e-03, 2.176945113481278e-03, 2.260810182767449e-03, 2.250634448607929e-03, 2.260810182767449e-03, 2.250634448607927e-03, 1.483521535125532e-03, 1.473653803627378e-03, 5.517824288182928e-03, 5.428915507642706e-03, 1.927461400227329e-03, 1.769305077618460e-03, -3.536977578837191e-04, -3.429595004408894e-04, 1.640432045537769e-04, 1.286704207362247e-04, 1.640432045537769e-04, 1.286704207362248e-04, -9.204993212501758e-04, -8.202835608630729e-04, -9.583896376096204e-04, -1.131978800605178e-03, -3.117748691748680e-03, -2.976335646652385e-03, 3.145285631612483e-03, 3.096389994808739e-03, 9.302459323630883e-04, 1.030206772769232e-03, 9.302459323630874e-04, 1.030206772769240e-03, 4.085980791129418e-03, 4.248064064604257e-03, 1.167874810913360e-04, 1.169904890766038e-04, 3.569332361436455e-04, 4.353342177141610e-04, 3.112073195118219e-03, 4.025464678296656e-03, 3.401208232110793e-03, 5.053628442606289e-03, 3.401208232110652e-03, 5.053628442606123e-03, 1.190527837859697e-07, 1.390544167731807e-07, 3.892227292622901e-12, 3.910623692644314e-12, 6.263899395218077e-10, 9.294814218736108e-10, 3.513782846680981e-03, 4.362520674117124e-03, 2.903589843290467e-09, 1.733779203082514e-08, 2.903589848228497e-09, 1.733779217393038e-08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
