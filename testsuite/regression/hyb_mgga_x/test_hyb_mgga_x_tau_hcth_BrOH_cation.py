
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_tau_hcth_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_tau_hcth", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.718074251388515e+01, -1.718079019107006e+01, -1.718101703651213e+01, -1.744163721500145e+01, -1.744194417152283e+01, -1.770325079267798e+01, -2.931128494263265e+00, -3.061800079691446e+00, -3.060455641190285e+00, -3.061275208175844e+00, -3.060869930746213e+00, -2.930185325599806e+00, -5.403038246483938e-01, -5.971563848947256e-01, -6.639536685344295e-01, -5.940138493819134e-01, -5.299116446130951e-01, -6.604998382485658e-01, -1.658032023770234e-01, -1.665046902995519e-01, -7.744714782338081e-01, -2.025214266179244e-01, -2.004428208214309e-01, -1.866072363601744e-01, -1.424559613335287e-02, -1.073342785767919e-02, -5.639099183947280e-02, -8.224812259448943e-03, -1.147176469703956e-02, -1.147176469703956e-02, -4.265928176974477e+00, -4.265923121298744e+00, -4.265921670153347e+00, -4.265917657907506e+00, -4.227029508196124e+00, -4.227062759295139e+00, -1.754065089292769e+00, -1.759798027285993e+00, -1.750569894499455e+00, -1.755203642458832e+00, -1.672668403547557e+00, -1.759011426623545e+00, -4.865940446190201e-01, -5.270705806167133e-01, -4.736742583961602e-01, -4.812619937660622e-01, -4.935796790183727e-01, -5.061735763233174e-01, -1.721326156804037e-01, -1.857494282051518e-01, -1.631506466954420e-01, -1.622144187947798e+00, -1.775158687890443e-01, -1.775158687890442e-01, -4.418675143373791e-03, -8.040704258297546e-03, -6.155619173543875e-03, -8.249717992639255e-02, -7.731393161167228e-03, -7.731393161167238e-03, -4.766029779763450e-01, -4.758448646145731e-01, -4.726145498454528e-01, -4.748703112521718e-01, -4.730284403774518e-01, -4.746046053843028e-01, -4.639396408756282e-01, -4.109044361304818e-01, -4.252861028511763e-01, -4.449108224305117e-01, -4.401434147608626e-01, -4.319964416641808e-01, -5.476050306332103e-01, -2.504479456612076e-01, -2.391960657636900e-01, -2.962733782734038e-01, -2.819934238807015e-01, -2.628571827989890e-01, -3.977991245939836e-01, -2.697343664744739e-02, -1.007438742903534e-01, -2.935356704757311e-01, -1.405271011837972e-01, -1.405271011837971e-01, -6.853339614996210e-03, -2.150079789723302e-03, -1.540240982667389e-03, -5.467730152855703e-02, -7.100720079815306e-03, -3.557703757454901e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_tau_hcth_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_tau_hcth", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.289488504396898e+01, -2.289486609892841e+01, -2.289496055738954e+01, -2.289492095514203e+01, -2.289521615793677e+01, -2.289528328814437e+01, -2.289436310945299e+01, -2.179120696486074e+01, -2.289492941384426e+01, -2.179187181083935e+01, -2.179205003350888e+01, -2.179187181083935e+01, -3.404456837397092e+00, -3.729103063987808e+00, -3.404591458130014e+00, -3.404394030603935e+00, -3.407157144413536e+00, -3.407644973981524e+00, -3.406519304986842e+00, -3.406570301220566e+00, -3.403610670643944e+00, -3.408911383506862e+00, -3.728535192879438e+00, -3.408911383506862e+00, -7.191801877725489e-01, -7.220055616065877e-01, -7.180677572021379e-01, -4.708640051884210e-01, -3.994219279943815e-01, -3.881752202248425e-01, -4.187559619904337e-01, -7.073203249549594e-01, -7.275251395028660e-01, -6.815865282001907e-01, -4.838921639280218e-01, -3.491707492995348e-01, -1.824743293601348e-01, -8.777624736564665e-02, -1.847263714463285e-01, -9.436157146048298e-02, -3.300627648595101e-01, -8.540522950923793e-01, -1.063810585394759e-01, -9.312464181558909e-02, -7.905290736510928e-02, -1.497748555819705e-01, -7.905290736510930e-02, -1.021148205985310e-01, -1.830276230657982e-02, -1.943496545921099e-02, -6.568523939728224e-03, -2.051315937456095e-02, -3.652399701252628e-02, -9.822654609249050e-02, -1.104372385770287e-02, -1.086021670932348e-02, -1.634774283165749e-02, -9.325548469809316e-03, -1.634774283165749e-02, -9.325548469809358e-03, -5.424989065747281e+00, -5.423702805450960e+00, -5.428115124536166e+00, -5.426723179800345e+00, -5.425198341828092e+00, -5.423832249880243e+00, -5.427879282286192e+00, -5.426574735357755e+00, -5.586094986433628e+00, -5.425216243095157e+00, -5.426564478662709e+00, -5.584731462504747e+00, -1.841627510643472e+00, -1.843662698959338e+00, -1.875122096808618e+00, -1.875914657915416e+00, -1.810148604564279e+00, -1.821498980699354e+00, -1.841577225356438e+00, -1.852462497743504e+00, -1.882113900033370e+00, -2.108926902055948e+00, -1.882113900033370e+00, -1.864087526935370e+00, -5.857679399654714e-01, -6.277397370752780e-01, -6.517489934800536e-01, -6.536233826655204e-01, -5.237964572035840e-01, -5.489471368297487e-01, -5.530299586950103e-01, -5.725792256387645e-01, -6.114657913208530e-01, -6.219744725728406e-01, -6.114657913208530e-01, -5.791550604082872e-01, -1.420947058085653e-01, -1.419599178323533e-01, -1.858541853572891e-01, -8.302990363591577e-02, -1.435987710668215e-01, -1.405467377222180e-01, -1.921143936662149e+00, -1.920323709343161e+00, -1.194973960278632e-01, -9.496718414919297e-02, -1.194973960278633e-01, -9.496718414919274e-02, -2.826792486719472e-03, -8.617292962214800e-03, -1.062776692576406e-02, -1.078915079937586e-02, -7.941124770472707e-03, -8.406580010492224e-03, -1.274395188772895e-01, -6.114972512864749e-02, -8.120764240452286e-03, -1.112529720893171e-02, -8.120764240452275e-03, -1.112529720893174e-02, -6.287323941602215e-01, -6.312472569789882e-01, -6.212227115125245e-01, -6.238626263996421e-01, -6.292864924123388e-01, -6.317452183711010e-01, -6.303572542609067e-01, -6.288371303687615e-01, -6.298239407031956e-01, -6.322718037358955e-01, -6.298239407031956e-01, -6.278015471591163e-01, -6.114531645404312e-01, -6.135760416412892e-01, -4.885865795514007e-01, -5.287844285479831e-01, -5.146550614939663e-01, -5.536013925377579e-01, -5.514952283384434e-01, -5.537170343273199e-01, -5.308958497089479e-01, -5.331883027504123e-01, -5.308958497089478e-01, -5.656231649643765e-01, -6.748404312139963e-01, -7.167034212745674e-01, -9.776041977854831e-02, -9.896570921600238e-02, -2.813721085485508e-01, -1.650835721429154e-01, -3.720153046634793e-01, -3.264675282075605e-01, -2.489092663155854e-01, -2.498754567992214e-01, -2.489092663155854e-01, -3.245997143753796e-01, -4.433769337787375e-01, -4.482590429712305e-01, -3.584080243608125e-02, -3.608603516716946e-02, -1.156575291595733e-01, -1.175298578387593e-01, -3.249547730342619e-01, -3.346784151429156e-01, -1.280956927418119e-01, -1.203322068062739e-01, -1.280956927418118e-01, -1.203322068062735e-01, -8.966572929483803e-03, -9.291650724053361e-03, -2.863264711889575e-03, -2.869808099565416e-03, -1.984741614996670e-03, -2.110932923437248e-03, -7.230124535237967e-02, -7.348461409685467e-02, -7.688588068137344e-03, -1.020226430478592e-02, -7.688588068137388e-03, -3.485462055952076e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_tau_hcth_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_tau_hcth", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.071590512125852e-09, 0.000000000000000e+00, -4.071399396662966e-09, -4.071506755220132e-09, 0.000000000000000e+00, -4.071338613984945e-09, -4.071240129384883e-09, 0.000000000000000e+00, -4.070956357902077e-09, -4.072184064213661e-09, 0.000000000000000e+00, -8.581995489153957e-09, -4.071539687213218e-09, 0.000000000000000e+00, -8.580907508584564e-09, -8.580643071595901e-09, 0.000000000000000e+00, -8.580907508584564e-09, -1.116275935204987e-05, 0.000000000000000e+00, -9.007213043291655e-06, -1.116298457715344e-05, 0.000000000000000e+00, -1.116325555406181e-05, -1.116781216830080e-05, 0.000000000000000e+00, -1.116825661480689e-05, -1.116223764569665e-05, 0.000000000000000e+00, -1.116162102838978e-05, -1.116941987715084e-05, 0.000000000000000e+00, -1.116538110155681e-05, -9.014016250458060e-06, 0.000000000000000e+00, -1.116538110155681e-05, -7.119366862539324e-03, 0.000000000000000e+00, -7.020103718675111e-03, -7.159798504284546e-03, 0.000000000000000e+00, -9.851778202744346e-03, -1.152874879277024e-02, 0.000000000000000e+00, -1.192540797892761e-02, -1.119777771707626e-02, 0.000000000000000e+00, -7.575530969463371e-03, -6.815609699408379e-03, 0.000000000000000e+00, -8.625209841440768e-03, -9.441358452134712e-03, 0.000000000000000e+00, -1.338629214987137e-02, -1.613008836449116e+00, 0.000000000000000e+00, -2.260563737018271e+00, -1.545936459433541e+00, 0.000000000000000e+00, -2.099293249180982e+00, -5.992923511057933e-03, 0.000000000000000e+00, -3.404979665679633e-03, -3.860392052700510e+00, 0.000000000000000e+00, -4.237168590319524e+00, -2.187972103216040e+00, 0.000000000000000e+00, -4.512875924568352e+00, -2.187972103216038e+00, 0.000000000000000e+00, -1.401049624532201e+01, -2.144265980278474e+01, 0.000000000000000e+00, -2.152027111164573e+01, -8.065689060235892e+05, 0.000000000000000e+00, -2.250221686031039e+01, -8.440486972532032e+02, 0.000000000000000e+00, -1.009515729649067e+01, -1.572280529454043e+01, 0.000000000000000e+00, -1.588415992917908e+01, -2.037991045503787e+01, 0.000000000000000e+00, -3.492254783753933e+01, -2.037991045503787e+01, 0.000000000000000e+00, -3.492254783746433e+01, -2.137139163103274e-06, 0.000000000000000e+00, -2.139146210089603e-06, -2.128846431096069e-06, 0.000000000000000e+00, -2.131124068453107e-06, -2.136575282666213e-06, 0.000000000000000e+00, -2.138795968883519e-06, -2.129463961772758e-06, 0.000000000000000e+00, -2.131512531176933e-06, -1.127574082057239e-06, 0.000000000000000e+00, -2.135131027844464e-06, -2.132970671202311e-06, 0.000000000000000e+00, -1.128665972767091e-06, -1.119377118833120e-04, 0.000000000000000e+00, -1.118819594069610e-04, -1.080658732643201e-04, 0.000000000000000e+00, -1.081486962494316e-04, -1.155879178360553e-04, 0.000000000000000e+00, -1.144361991574932e-04, -1.118685025185441e-04, 0.000000000000000e+00, -1.107968421024503e-04, -1.073609047613029e-04, 0.000000000000000e+00, -9.252911921181651e-05, -1.073609047613029e-04, 0.000000000000000e+00, -1.095337560682321e-04, -1.526733064564844e-02, 0.000000000000000e+00, -9.020921668630109e-03, -1.070878864859514e-02, 0.000000000000000e+00, -1.056115219495283e-02, -2.033377340064058e-02, 0.000000000000000e+00, -1.834741312251863e-02, -1.897110722138368e-02, 0.000000000000000e+00, -1.709606756570732e-02, -1.338061875538959e-02, 0.000000000000000e+00, -9.276670035903153e-03, -1.338061875538959e-02, 0.000000000000000e+00, -1.612480547964653e-02, -5.520301659984087e+00, 0.000000000000000e+00, -5.460166511297903e+00, -1.410088949851547e+00, 0.000000000000000e+00, -1.978140778035242e+00, -5.988292437346930e+00, 0.000000000000000e+00, -6.052312600445253e+00, -1.371779078857799e-04, 0.000000000000000e+00, -1.374319721824308e-04, -6.084706729360945e+00, 0.000000000000000e+00, -7.161969196032292e+00, -6.084706729360945e+00, 0.000000000000000e+00, -7.161969196032289e+00, -2.351454288794065e+07, 0.000000000000000e+00, -1.052659116420335e+01, -1.491486983695118e+01, 0.000000000000000e+00, -1.314708750217888e+01, -1.073837678522741e+02, 0.000000000000000e+00, -1.178603926293341e+02, -9.001991900456661e+00, 0.000000000000000e+00, -1.077638634132668e+02, -2.024111377485517e+01, 0.000000000000000e+00, -6.422994106844561e+01, -2.024111377483793e+01, 0.000000000000000e+00, -6.422994106845618e+01, -9.822599736647756e-03, 0.000000000000000e+00, -9.658365861485512e-03, -1.095044493871614e-02, 0.000000000000000e+00, -1.072956451805794e-02, -8.198120710185336e-03, 0.000000000000000e+00, -8.110116872083482e-03, -8.438426131646212e-03, 0.000000000000000e+00, -9.951671878748250e-03, -8.316339797926136e-03, 0.000000000000000e+00, -8.223949303185067e-03, -8.316339797926136e-03, 0.000000000000000e+00, -1.009920447692759e-02, -1.103646360456659e-02, 0.000000000000000e+00, -1.086996497941613e-02, -2.964822588460503e-02, 0.000000000000000e+00, -1.988839308999946e-02, -2.660135925600187e-02, 0.000000000000000e+00, -1.372842492572953e-02, -2.082727258727048e-02, 0.000000000000000e+00, -2.048155803663438e-02, -2.422818468642590e-02, 0.000000000000000e+00, -2.383588828993040e-02, -2.422818468642590e-02, 0.000000000000000e+00, -1.149039932237232e-02, -9.296434025473661e-03, 0.000000000000000e+00, -4.349432220923682e-03, -9.500914274772051e-01, 0.000000000000000e+00, -9.302492887210914e-01, -3.003518361048449e-01, 0.000000000000000e+00, -4.291279066429044e-01, -9.656099328175169e-02, 0.000000000000000e+00, -1.115487859421120e-01, -2.176932990321422e-01, 0.000000000000000e+00, -2.173263764679678e-01, -2.176932990321424e-01, 0.000000000000000e+00, -1.721167573085479e-01, -3.930315971566860e-02, 0.000000000000000e+00, -3.849812218660700e-02, -9.102607211100483e+02, 0.000000000000000e+00, -8.857704515318951e+02, -8.298701851288092e+00, 0.000000000000000e+00, -8.527539652438779e+00, -1.331920896261188e-01, 0.000000000000000e+00, -1.294429346852490e-01, -9.728267617499487e+00, 0.000000000000000e+00, -1.124681691191540e+01, -9.728267617499485e+00, 0.000000000000000e+00, -1.124681691191539e+01, -2.322773780952099e+05, 0.000000000000000e+00, -2.014380154123279e+05, -1.715589542107559e+01, 0.000000000000000e+00, -1.708046147106374e+01, -9.676010940487731e+07, 0.000000000000000e+00, -7.561614323011921e+07, -5.541651286061187e+01, 0.000000000000000e+00, -5.201242758892324e+01, -5.223236964073663e+01, 0.000000000000000e+00, -6.660054929521311e+01, -5.223236964074059e+01, 0.000000000000000e+00, -1.017351195734318e+07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_tau_hcth_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_tau_hcth", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-7.496870905586528e-06, -7.491069390358987e-06, -7.495993978826674e-06, -7.490433134952990e-06, -7.493503164829111e-06, -7.486774201894738e-06, -7.503340150629389e-06, -8.778282117885738e-07, -7.496309960619888e-06, -8.891019249931679e-07, -8.845877709351532e-07, -8.891019249931679e-07, 8.627169797783097e-04, -3.587996949549555e-05, 8.629505478309705e-04, 8.626888169553543e-04, 8.673984898098139e-04, 8.681660340047144e-04, 8.657294852457889e-04, 8.657233627829326e-04, 8.623329399337720e-04, 8.696184418996306e-04, -3.584601042207885e-05, 8.696184418996306e-04, 1.990635808037433e-05, 1.752661394937508e-05, 2.054798991166802e-05, -8.159950731905370e-04, -1.154375182288864e-03, -1.164023448323972e-03, -1.111269830378130e-03, 2.420072060227290e-05, 1.575309063432501e-05, 3.035473759671438e-05, -7.192682733046444e-04, -1.099884843899470e-03, 9.982787063915400e-05, -2.790190960452884e-03, 1.025758003594167e-04, -3.465485477820409e-03, 4.674842261327655e-04, 2.292376259779158e-05, 1.047289155130641e-02, 1.087284278572328e-02, -2.172483583511428e-04, 4.873477350308104e-03, -2.172483583511597e-04, 4.468024865558045e-06, 5.957227894951083e-08, 8.114020084832189e-08, 3.179281631169714e-11, 1.141234251208626e-07, 5.415809280917285e-08, 1.649309006293546e-04, 2.937687433254529e-09, 2.742660555780466e-09, 3.119379931213879e-08, 4.177213259251133e-09, 3.119379931213879e-08, 4.177213279439131e-09, 3.517195068140076e-05, 3.519830638566376e-05, 3.806356692241636e-05, 3.799314219740210e-05, 3.537156705797447e-05, 3.532271546995655e-05, 3.785082378764846e-05, 3.785980117565175e-05, 1.727767373859967e-05, 3.658943285268543e-05, 3.661418365563439e-05, 1.726827801555550e-05, 1.084907166277610e-03, 1.096729193207034e-03, 1.188472282746254e-03, 1.196315457098767e-03, 9.829160429173729e-04, 1.024730510451669e-03, 1.082524931315542e-03, 1.122539468648363e-03, 1.212362986212012e-03, -3.729634701012469e-05, 1.212362986212012e-03, 1.161101081035826e-03, 3.864331782993667e-03, -4.438430677397021e-04, -9.541520931249776e-05, -1.310254694551353e-04, 5.790488424247891e-03, 5.635430148740839e-03, 4.491710050259562e-03, 3.149259837818948e-03, 2.213957439289147e-03, -4.521450333839547e-04, 2.213957439289145e-03, 3.597534173642942e-03, 5.212955056975058e-03, 5.337378823416892e-03, 5.486258231474447e-05, 6.537189648727500e-03, 3.844098987452334e-03, 4.832708815247140e-03, 7.190513022707666e-04, 7.173507683523773e-04, 9.261160388960011e-03, 1.199611692971549e-02, 9.261160388960162e-03, 1.199611692971547e-02, 1.724534262614158e-13, 4.635930086042791e-10, 2.238327448780527e-09, 1.996921977713592e-09, 1.010884893737886e-08, 1.548358059575617e-08, 1.260384652744996e-03, 8.956701080959541e-07, 9.195937426506585e-10, 2.538335923184653e-08, 9.195937355740818e-10, 2.538335933778713e-08, 2.272056411629161e-03, 2.228582199179299e-03, 2.267163138358084e-03, 2.295774487269206e-03, 9.533203016950186e-04, 9.606319947567719e-04, 1.015621325359346e-03, 2.502566644879999e-03, 9.897286589177297e-04, 9.934192574975319e-04, 9.897286589177297e-04, 2.524650131124445e-03, 2.473392810246646e-03, 2.436766827593657e-03, 6.181615810242384e-03, -4.304600309398210e-04, 2.751013488696013e-03, -5.227996070713588e-04, -1.593810618288694e-04, -1.623772886600128e-04, 8.067743218800861e-04, 7.293599345370875e-04, 8.067743218800841e-04, -4.419378250083711e-04, 5.194633369017524e-04, -3.088032384811915e-04, -2.777758983368944e-04, -4.498113422990954e-04, 6.899528689742945e-05, -2.821972536343657e-03, -1.754601631487371e-04, 5.823878861845821e-03, 1.096723562027194e-03, 1.220175564062178e-03, 1.096723562027193e-03, -2.850296435166137e-05, 6.764461011900399e-03, 6.894970360380055e-03, 5.323691702433819e-08, 5.343571627199633e-08, 3.686029795298044e-04, 4.501971197748639e-04, 8.881483592411287e-03, 9.424727957543884e-03, 3.742553342780328e-03, 5.661732578490314e-03, 3.742553342780176e-03, 5.661732578490127e-03, 4.784572453601106e-11, 5.593258141709993e-11, 3.892809459637418e-12, 3.911562021316533e-12, 2.494046191730076e-13, 3.701382330007091e-13, 2.844725673318326e-06, 3.594224412593879e-06, 2.906436893486330e-09, 1.733922812675401e-08, 2.906436898429203e-09, 6.918547934652546e-12]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
