
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_m11_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-9.875959425429265e+00, -9.875994557072561e+00, -9.876156384051658e+00, -9.875634296298543e+00, -9.875906912235060e+00, -9.875906912235060e+00, -1.767725188503984e+00, -1.767785007362610e+00, -1.769385706502128e+00, -1.768908209877318e+00, -1.768767623574435e+00, -2.380743193910294e+00, -3.142499695489143e-01, -4.934507889568285e-01, -4.807313670098097e-01, -4.845777104869206e-01, -4.838412804347655e-01, -4.838412804347655e-01, -6.331840470915680e-02, -6.494473442987178e-02, -5.043228575320794e-01, -4.893000791178358e-02, -5.294695896533697e-02, -5.294695896533660e-02, -1.639259223847016e-05, -1.910092501983400e-05, -2.786987324012022e-03, -3.170409017563510e-06, -6.282061470889329e-06, -6.282061470889329e-06, -2.066481810894321e+00, -2.062250128264111e+00, -2.066243569684844e+00, -2.358034230864458e+00, -2.064402068521885e+00, -2.064402068521885e+00, -9.395106122034382e-01, -9.498602264748391e-01, -9.326900545429506e-01, -9.409236222509946e-01, -9.489651166367951e-01, -1.430174175756232e+00, -2.306239029172224e-01, -2.061570001173499e-01, -2.678705412732875e-01, -2.170804535491999e-01, -2.188131299915685e-01, -2.302790227163191e-01, -1.323541442998819e-02, -7.256262195176914e-02, -1.053824188409411e-02, -8.129205551319968e-01, -3.335907973516465e-02, -3.335907973516559e-02, -2.766941087498518e-07, -2.962423648576477e-06, -1.323682571167217e-06, -3.132260466823251e-03, -4.405228112032924e-07, -2.314427710896735e-06, 3.817354872624672e-02, -7.774624107508622e-02, -1.046583289989899e-01, 4.620152534718755e-03, -1.372866909364923e-02, -1.372866909364923e-02, 2.712223731609611e-02, -2.142029941891644e-01, -1.739473253730637e-01, -1.666391245153427e-01, -1.631910368325032e-01, -1.833758157808095e-01, -2.190260527075486e-01, -8.049329582432961e-02, -1.330438390501676e-01, -1.136874968564005e-01, -1.586055948673689e-01, -1.586055948673687e-01, -1.705799261468030e-01, -2.471727186651374e-03, -5.656554068319732e-03, -1.424799153290902e-01, -6.947768333166055e-03, -1.519539554302363e-02, -4.594392524023300e-05, -5.666238796151763e-08, -5.236794595508552e-07, -1.315950330246138e-02, -1.833645624552251e-06, -1.833645624552252e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_m11_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.358874997167175e+01, -1.358907294833655e+01, -1.359040539465180e+01, -1.358561901435757e+01, -1.358814277013749e+01, -1.358814277013749e+01, -2.738426611309472e+00, -2.738343896740306e+00, -2.735853431777277e+00, -2.737199942571858e+00, -2.736766737145714e+00, -4.869035050886334e-01, -1.763624227998204e-01, -5.412013447031622e-01, -5.847003637894433e-01, -5.688016197203172e-01, -5.736160128043944e-01, -5.736160128043944e-01, -8.565052735570002e-02, -9.098063870646525e-02, -3.426898136028766e-01, -4.806183591253666e-02, -4.356481898083101e-02, -4.356481898082995e-02, -3.260079633000062e-05, -3.795930570143064e-05, -4.834697244625526e-03, -6.330486360165964e-06, -1.252651916473594e-05, -1.252651916473594e-05, -2.112033705036393e+00, -2.049602031253991e+00, -2.108479308265825e+00, -2.608877040753133e+00, -2.080952649711797e+00, -2.080952649711797e+00, -1.373330475357386e+00, -1.433716075934082e+00, -1.320212671167269e+00, -1.381157615815145e+00, -1.430134016427896e+00, -4.686116656364081e-01, -5.164703971146425e-02, -3.370154912608523e-01, -6.033139526183900e-02, -5.258066859136876e-02, -7.975518028111932e-02, -2.178268945576209e-01, -2.882935388812563e-02, -5.721867251496501e-02, -2.331928674918180e-02, -3.550938938958121e-01, -4.001879806142736e-02, -4.001879806143742e-02, -5.537442477548336e-07, -5.916123002616245e-06, -2.641284866659892e-06, -7.087650326950402e-03, -8.826814636751147e-07, -4.619087669659890e-06, 5.792156445336917e-02, 2.312075208788753e-01, 1.133174679247981e-01, 2.007521512662633e-01, 2.317480067152116e-01, 2.317480067152116e-01, 1.199232847965360e-01, -4.021272847468053e-02, -9.044635072704242e-02, -2.758875374221961e-01, -1.929060364532386e-01, -2.247496077561535e-01, -2.854351883722247e-01, -6.771425588866960e-02, -1.782819020920256e-01, -1.781837043744448e-01, -1.399555884719991e-01, -1.399555884719983e-01, -2.780452687650734e-01, -4.336127490966625e-03, -8.974606345077303e-03, -4.579225841114924e-02, -1.561213907995861e-02, -1.854747434512173e-02, -9.115195689383829e-05, -1.133116988139557e-07, -1.046489411992309e-06, -1.608388457602560e-02, -3.659453500287060e-06, -3.659453500285975e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m11_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([8.467606927183192e-09, 8.467708685194871e-09, 8.468053064796618e-09, 8.466554400728626e-09, 8.467354835805439e-09, 8.467354835805439e-09, -1.593871684700366e-05, -1.593026452455238e-05, -1.570515308462892e-05, -1.579074370821191e-05, -1.578807479794696e-05, -8.251326426842014e-06, -1.099783185205437e-02, -2.925456384649735e-03, -2.479961142333558e-03, -2.711838534626588e-03, -2.653892987400897e-03, -2.653892987400897e-03, -1.733344021450727e-01, -1.719592755602580e-01, -8.528816530952403e-04, -1.743221169260042e-01, -2.214538680169546e-01, -2.214538680169534e-01, -1.966650087655242e-02, -2.268275918078076e-02, -2.749412759840842e-01, -4.837077581865259e-03, -1.061440425392859e-02, -1.061440425392859e-02, 2.805905981314677e-06, 2.849272048169858e-06, 2.808376104320500e-06, 3.554746779807798e-06, 2.827429192632877e-06, 2.827429192632877e-06, -2.051659844088728e-04, -1.916553564793302e-04, -2.149582771299841e-04, -2.034217931297777e-04, -1.926435743726910e-04, -8.516465629633054e-05, -2.834708443478217e-04, 6.345353772528101e-03, -8.848282232426554e-03, 5.624818341347326e-06, 1.612636668793278e-03, 3.875256989309099e-03, -8.350407051397713e+00, -1.415775581125711e-01, -1.127579457201106e+01, 3.016234074830741e-05, -1.997519451919803e-01, -1.997519451919859e-01, -2.539613935862065e+04, -4.087167219058833e-03, -1.930717558013218e-02, -3.877290962394566e+01, -1.862556457355343e+04, -1.075456984726130e-02, 1.923321103808906e-01, 6.229264170643779e-02, 1.003816378556613e-01, 1.280095544680371e-01, 1.084883753982616e-01, 1.084883753982616e-01, 1.814747357921529e-01, -8.347371227135057e-03, 4.674456210956628e-03, 1.231658829599360e-02, 9.184988664523783e-03, 1.432158969450010e-02, 4.133383646181502e-03, -1.045889538797128e-01, -6.623524374080329e-02, -1.429133158119597e-01, -7.723008104495163e-02, -7.723008104495165e-02, -3.680364184149856e-02, -2.599040586501482e-01, -3.661765947549678e-01, -5.662672826756036e-02, -1.673350065527394e+01, -5.433495687672034e-01, -1.865202066596668e-02, -3.582145099130598e-04, -4.521287976686846e-03, -6.132154107887486e-01, -1.312354883318184e-02, -1.312354883318185e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m11_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.329685137206332e-04, 2.331363359012166e-04, 2.338141576503171e-04, 2.313288105930987e-04, 2.326413090695344e-04, 2.326413090695344e-04, 2.671914675629145e-03, 2.671374988276612e-03, 2.654318665394376e-03, 2.661629441594211e-03, 2.661152058001069e-03, -1.175086723755430e-02, -2.555787957589282e-02, 7.491283435632549e-03, 9.186891534297709e-03, 8.943441524600734e-03, 9.074189577161081e-03, 9.074189577161081e-03, 5.137191000122237e-03, 8.311723154844726e-03, -1.477234059101821e-02, -1.310057060566941e-02, -1.670476617435280e-02, -1.670476617435505e-02, -2.918600816984650e-08, -3.926987014036877e-08, -8.562880679837106e-05, -1.379332454298816e-09, -6.010699665067759e-09, -6.010699665067759e-09, -1.961562036958557e-02, -2.067431012265586e-02, -1.967561501833014e-02, -8.100847110658990e-03, -2.014150464923476e-02, -2.014150464923476e-02, 1.846159963429911e-03, 2.817166859704597e-03, 9.769624522345548e-04, 1.965488463172084e-03, 2.767233721368810e-03, -1.265611871744086e-02, -1.185028724623333e-01, -1.038217422154692e-02, -7.864985902426920e-02, -1.224176068837115e-01, -1.166914299517034e-01, -5.128635245309691e-02, 2.416417850518448e-03, -1.644188369024272e-02, 2.053245424385767e-03, -4.142869786034727e-02, -8.146424907479173e-03, -8.146424907468579e-03, 2.348230972669991e-10, -1.088760017968093e-09, -2.300770752861180e-09, 6.493154420431287e-04, 2.012824655482216e-09, -2.240307795644426e-09, -1.015811118816901e+00, -1.049306278263601e+00, -6.783447285730937e-01, -1.269453823828969e+00, -1.270889368870631e+00, -1.270889368870631e+00, -1.188142419745428e+00, -1.081970817148061e-01, -1.227554117654585e-01, -1.148581722878170e-02, -6.734273017968360e-02, -3.094881192494471e-02, -4.397254063357145e-02, -3.235925804625899e-02, 1.567803547490689e-02, 5.002904476318856e-03, -5.775732543395495e-03, -5.775732543394260e-03, 1.388197953944610e-02, -7.063429306466858e-05, -2.620864737628005e-04, -9.227350686027555e-02, 1.789442652696892e-03, -2.201262891567649e-03, -7.791272622416363e-08, -1.821036746341139e-12, -2.126686989031270e-10, -1.901867064179594e-03, -2.165931117737045e-09, -2.165931117578893e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
