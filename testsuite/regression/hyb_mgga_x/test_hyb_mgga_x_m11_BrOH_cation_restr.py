
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_m11_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-8.805816156117876e+00, -8.805849604468710e+00, -8.805970293489665e+00, -8.805472298722615e+00, -8.805737077326679e+00, -8.805737077326679e+00, -2.090400138468352e+00, -2.090241326045740e+00, -2.086260546664319e+00, -2.089804647292810e+00, -2.088469150689864e+00, -2.088469150689864e+00, -4.051446717182740e-01, -4.057073595438156e-01, -4.160888276690919e-01, -4.185993200347579e-01, -4.173262685887710e-01, -4.173262685887710e-01, -6.269005431709705e-02, -6.416590465378492e-02, -5.236370532999270e-01, -4.742490793111472e-02, -5.133460555588681e-02, -5.133460555588644e-02, -1.639216939531479e-05, -1.909989992413691e-05, -2.764113454338912e-03, -3.170069888771719e-06, -6.281323427946358e-06, -6.281323427946358e-06, -2.068169639987392e+00, -2.063944003941879e+00, -2.067897701900362e+00, -2.064171743337648e+00, -2.066110470371351e+00, -2.066110470371351e+00, -1.403778756171903e+00, -1.393555396312794e+00, -1.422525519056438e+00, -1.414052646559515e+00, -1.388658442143576e+00, -1.388658442143576e+00, -2.305097618200786e-01, -2.231994867211117e-01, -2.461097501617420e-01, -2.187851293377406e-01, -2.220858635509312e-01, -2.220858635509312e-01, -2.576235689858433e-02, -7.160851880693536e-02, -2.187364662592688e-02, -8.596316233561730e-01, -3.293300612457413e-02, -3.293300612457505e-02, -1.457081272605428e-06, -2.961735246591792e-06, -1.323437981280102e-06, -9.104687637521168e-03, -2.313727995453779e-06, -2.313727995453770e-06, -1.293171902225603e-03, -8.993424645651016e-02, -5.116637892074685e-02, -2.121386148763070e-02, -3.548174644803387e-02, -3.548174644803387e-02, -3.808923594021306e-02, -2.132182818134498e-01, -1.747910764405524e-01, -1.696885321666046e-01, -1.652496106050307e-01, -1.652496106050310e-01, -2.376819379172044e-01, -9.842651204811891e-02, -1.304612853179589e-01, -1.616543014162611e-01, -1.516475345489620e-01, -1.516475345489620e-01, -2.136913885771863e-01, -2.462711836196159e-03, -5.568169934689068e-03, -1.333128162453260e-01, -1.480716578589645e-02, -1.480716578589659e-02, -4.588367721559263e-05, -5.665675941207744e-08, -5.236637291114870e-07, -1.294221748641215e-02, -1.833241785300329e-06, -1.833241785300330e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_m11_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.319705684547683e+01, -1.319743698370217e+01, -1.319897070945566e+01, -1.319333558679465e+01, -1.319631255615563e+01, -1.319631255615563e+01, -1.398083676220417e+00, -1.397962345162582e+00, -1.393977187155470e+00, -1.389380136969502e+00, -1.392401894177555e+00, -1.392401894177555e+00, -3.175427774357927e-01, -3.204866464282651e-01, -3.986078763067667e-01, -3.826250403017573e-01, -3.844838502785769e-01, -3.844838502785769e-01, -8.522241081079002e-02, -9.010562546786501e-02, -4.989308470421969e-01, -4.307603766253493e-02, -4.190612052047493e-02, -4.190612052047387e-02, -3.259882966784025e-05, -3.795454004516302e-05, -4.737177048386327e-03, -6.328905325294070e-06, -1.252308118374842e-05, -1.252308118374842e-05, -2.115739224295018e+00, -2.053397916075419e+00, -2.112115277306514e+00, -2.057122996128861e+00, -2.084742338062590e+00, -2.084742338062590e+00, -5.409224440734461e-01, -4.952659741401665e-01, -5.747575404238573e-01, -5.289919733163161e-01, -5.024954646719354e-01, -5.024954646719354e-01, -1.127168252131203e-01, -3.473783375022277e-01, -1.654059343661693e-01, -1.747803439898865e-01, -1.291982036918705e-01, -1.291982036918705e-01, -3.257549899961898e-02, -5.626300159641173e-02, -2.708280161757328e-02, -6.969859474652373e-01, -3.885663655279267e-02, -3.885663655280247e-02, -2.910841644181322e-06, -5.912913439092349e-06, -2.640145075245278e-06, -1.190741043126726e-02, -4.615826694055435e-06, -4.615826694055696e-06, 2.881912180498259e-02, 2.005406112547334e-01, 2.115645099807098e-01, 1.638981205900525e-01, 1.948416706171968e-01, 1.948416706171968e-01, 5.608783064414361e-02, -4.789714132511124e-02, -9.811857706743810e-02, -2.786677599664539e-01, -1.976406040113428e-01, -1.976406040113447e-01, -3.099387187983024e-01, -1.197369545311250e-01, -1.707752379329251e-01, -9.696800877073167e-02, -1.265086998298363e-01, -1.265086998298362e-01, -9.361968018484118e-02, -4.297359355324167e-03, -8.621523140249091e-03, -7.864850974067807e-02, -1.845605257069491e-02, -1.845605257068928e-02, -9.087221962088756e-05, -1.132854347027313e-07, -1.046416040218076e-06, -1.590090628828830e-02, -3.657571432726006e-06, -3.657571432724920e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m11_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([6.094811009546203e-09, 6.094954074227516e-09, 6.095411017331573e-09, 6.093296224526672e-09, 6.094429637422299e-09, 6.094429637422299e-09, -1.184335422249326e-05, -1.183821796141875e-05, -1.169862149987169e-05, -1.172976003193541e-05, -1.174022976692925e-05, -1.174022976692925e-05, -6.707038811466864e-03, -6.644728768582085e-03, -5.073229138659352e-03, -5.502776714227582e-03, -5.441053230229601e-03, -5.441053230229601e-03, -1.807818354752442e-01, -1.821241222458515e-01, -1.028514401171410e-03, -2.506222340162342e-01, -2.580142032638317e-01, -2.580142032638300e-01, -1.999789505572470e-02, -2.338848582262815e-02, -3.418453673742695e-01, -6.086224730825656e-03, -1.219266598768179e-02, -1.219266598768183e-02, 2.810002845436986e-06, 2.853370191595150e-06, 2.812390458865843e-06, 2.850647056425717e-06, 2.831569211893521e-06, 2.831569211893521e-06, -9.684299945972052e-05, -9.252623510722580e-05, -9.721581399786012e-05, -9.385270243363292e-05, -9.397179771101271e-05, -9.397179771101271e-05, 1.658380154896968e-04, 7.940463318920699e-03, -1.135286126154354e-02, 1.328517162845719e-03, 2.347476881780227e-03, 2.347476881780227e-03, -3.472126384221583e-01, -1.514000894629281e-01, -4.388837740125023e-01, 5.314158815716720e-05, -2.448802971519582e-01, -2.448802971519650e-01, -4.778003552711477e-03, -6.846547680901217e-03, -2.512498321770230e-02, -7.274588056479158e-01, -1.696986563990803e-02, -1.696986563990796e-02, 1.967761425170166e-01, 6.373270826670112e-02, 9.418757727343322e-02, 1.309574542006653e-01, 1.109867087840396e-01, 1.109867087840396e-01, 1.899087143946691e-01, -8.473016341140666e-03, 4.999331829069608e-03, 1.298315374272619e-02, 9.729705291269647e-03, 9.729705291269632e-03, 5.571353698119073e-03, -8.281989419969654e-02, -7.527062788245485e-02, -7.894749434318336e-02, -9.440324697790010e-02, -9.440324697790003e-02, -2.286844549664573e-02, -2.894027656503860e-01, -4.757405317942866e-01, -6.904255542014240e-02, -6.186985244954454e-01, -6.186985244954476e-01, -3.200297624237602e-02, -2.404239267669036e-03, -5.123166538559203e-03, -6.751286709360639e-01, -1.835254066762769e-02, -1.835254066762772e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m11_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-5.700455884315087e-04, -5.698742678414150e-04, -5.692059256609304e-04, -5.717450274909268e-04, -5.704002152487391e-04, -5.704002152487391e-04, -5.111827155723454e-03, -5.115935228259233e-03, -5.230248211570773e-03, -5.224068972951448e-03, -5.208052132050773e-03, -5.208052132050773e-03, -6.397010701325898e-03, -6.215528317238084e-03, -1.842834765328015e-03, -1.922767068941378e-03, -2.047266546317516e-03, -2.047266546317516e-03, 5.117067764574490e-03, 8.100958502384834e-03, -7.283876270089881e-03, -1.313813434236443e-02, -1.633961751719248e-02, -1.633961751719468e-02, -2.918344532643182e-08, -3.926269306494539e-08, -8.303030500961264e-05, -1.378831201349905e-09, -6.008298930403757e-09, -6.008298930403757e-09, -1.954469863015041e-02, -2.060131177395541e-02, -1.960600682722525e-02, -2.053805317506403e-02, -2.006879972831781e-02, -2.006879972831781e-02, -1.025369700026474e-02, -1.169025807303794e-02, -9.398544064491558e-03, -1.067528026450746e-02, -1.145922767968737e-02, -1.145922767968737e-02, -9.397640912817160e-02, 4.985003927275993e-03, -4.346627599073412e-02, -6.692241803945102e-02, -9.492878159467139e-02, -9.492878159467139e-02, -2.520794109694395e-03, -1.625687121353694e-02, -1.981367775734279e-03, -2.444542526790760e-02, -7.918143252392686e-03, -7.918143252382229e-03, -2.609743472993715e-10, -1.087900548509351e-09, -2.299325849842074e-09, -6.762045488088845e-04, -2.238006123116448e-09, -2.238006122639084e-09, -7.042870737089734e-01, -9.580500573891795e-01, -1.092226901115913e+00, -1.066632794891008e+00, -1.101048565752775e+00, -1.101048565752775e+00, -6.457486618879786e-01, -1.046113213338227e-01, -1.180346657186287e-01, -7.286654488553828e-03, -6.342327997185832e-02, -6.342327997185868e-02, -2.578798866134564e-02, 1.195837886686694e-03, 1.399741558647805e-02, -3.019360388280681e-02, -7.594255132319522e-03, -7.594255132318192e-03, -5.886207236447110e-02, -6.968923750034817e-05, -2.458347121170781e-04, -6.328614101471336e-02, -1.810817402480626e-03, -1.810817402480007e-03, -7.756454325384463e-08, -1.820422649537228e-12, -2.126470041710458e-10, -1.694266209320438e-03, -2.164310031066725e-09, -2.164310030908552e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
