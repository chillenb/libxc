
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_m05_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m05", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.312463423570776e+01, -1.312459505867468e+01, -1.312445035741057e+01, -1.312508416905573e+01, -1.312461341748973e+01, -1.312461341748973e+01, -2.301844554959593e+00, -2.301827694545798e+00, -2.301433313067042e+00, -2.301762937207807e+00, -2.301850817296454e+00, -2.657826060778405e+00, -4.865360404051328e-01, -6.206989498073112e-01, -6.184192504374072e-01, -6.172399008410157e-01, -6.206907915567693e-01, -6.206907915567693e-01, -1.743671607039591e-01, -1.754446914637633e-01, -5.878973775912275e-01, -2.010731969198115e-01, -1.747125171707368e-01, -1.747125171707368e-01, -1.854643740472081e-03, -2.024153736274978e-03, -3.667985518391111e-02, -5.372708618894286e-04, -2.004478394560681e-03, -2.004478394560740e-03, -3.296971127669640e+00, -3.301456252627447e+00, -3.297452036595905e+00, -3.167738269269107e+00, -3.299193602145475e+00, -3.299193602145475e+00, -1.321716894249788e+00, -1.323483468878176e+00, -1.321534665607208e+00, -1.322450437849529e+00, -1.323547330957562e+00, -1.556893939800261e+00, -4.299561864802705e-01, -4.120659135497271e-01, -4.129618593916795e-01, -4.191622180330206e-01, -4.373491121265153e-01, -4.013267575429970e-01, -9.732895351129692e-02, -2.017349415043531e-01, -9.697442447216832e-02, -1.386961323636248e+00, -1.771057858808616e-01, -1.771057858808616e-01, -2.919478733184603e-04, -6.151970697007073e-04, -4.683648180142284e-04, -4.080878669803731e-02, -3.074689169896385e-04, -5.544356827159025e-04, -3.299171158972901e-01, -4.291473839534398e-01, -4.033788985465186e-01, -3.804405487824746e-01, -3.970155318340050e-01, -3.970155318340050e-01, -3.683217193559379e-01, -3.739821756030610e-01, -3.733333278719246e-01, -3.465024704502507e-01, -3.609284427972320e-01, -3.380701946732494e-01, -4.567724452913851e-01, -1.691187495845047e-01, -2.525416219578693e-01, -2.362653347818214e-01, -2.628067367955221e-01, -2.628067367955221e-01, -2.997327955450119e-01, -2.978017991869386e-02, -5.820341930073216e-02, -2.520823095970762e-01, -7.627859451117303e-02, -1.263614172483578e-01, -2.034214748609780e-03, -1.468378595924861e-04, -2.932148282292498e-04, -1.204743038522559e-01, -4.624391469442901e-04, -4.624391469443224e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_m05_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m05", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.311042621672331e+01, -1.311066485957001e+01, -1.311173469383158e+01, -1.310785209602805e+01, -1.311055174994956e+01, -1.311055174994956e+01, -2.912103093005506e+00, -2.912560685984058e+00, -2.926416874559636e+00, -2.921287914699399e+00, -2.912243971969021e+00, -2.595936820241374e+00, -6.185132478282562e-01, -5.560106084561975e-01, -5.841118580297213e-01, -5.754779636368831e-01, -5.546982905948520e-01, -5.546982905948520e-01, -1.647485653172343e-01, -1.649978111713825e-01, -7.113912238643384e-01, -1.250099224495642e-01, -1.650306766136639e-01, -1.650306766136639e-01, -3.859980947561715e-03, -4.280807397937598e-03, -8.945656454853837e-02, -8.107927747009052e-04, -4.240327815057601e-03, -4.240327815059727e-03, -5.076091960806648e+00, -5.131484200903149e+00, -5.082224687212302e+00, -5.241486942324042e+00, -5.103907750497745e+00, -5.103907750497745e+00, -1.433585401775512e+00, -1.471593901589254e+00, -1.419651370088514e+00, -1.446423536209839e+00, -1.481956932851645e+00, -1.257424989036889e+00, -4.911967522300479e-01, -3.493069278810650e-01, -4.705030524295532e-01, -4.325877971231622e-01, -4.366116338006578e-01, -4.789569034592928e-01, -1.602741290641876e-01, -9.361437028332560e-02, -1.538913376614678e-01, -1.359214078777350e+00, -1.360459016947193e-01, -1.360459016947193e-01, -4.475721191922780e-04, -9.621331044964283e-04, -7.428068370482591e-04, -9.567575454817906e-02, -4.764109465385230e-04, -8.584414948027875e-04, -2.186405333298880e-01, -4.778417339295892e-01, -3.171871858877160e-01, -2.004804172966633e-01, -2.452951758675055e-01, -2.452951758675055e-01, -1.932440177468040e-01, -4.369272639620639e-01, -3.362023414774378e-01, -3.551508762158450e-01, -2.897232994484403e-01, -3.236680130594204e-01, -3.761600184181588e-01, -2.204571451755256e-01, -2.158728350925365e-01, -2.602114536681469e-01, -1.829173094503776e-01, -1.829173094503775e-01, -3.952814758305730e-01, -7.382802132782608e-02, -1.345416050540282e-01, -2.550936872657151e-01, -1.373363424058969e-01, -2.030196767730635e-01, -4.116056694525703e-03, -1.988670797375587e-04, -4.205142533755004e-04, -1.939729822489795e-01, -7.034209479154828e-04, -7.034209479157862e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m05_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m05", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.404553393573291e-09, -5.404471668553092e-09, -5.404071173740677e-09, -5.405407294209904e-09, -5.404510633306167e-09, -5.404510633306167e-09, -8.287164559370310e-06, -8.287016897950752e-06, -8.281503083650841e-06, -8.280965348606528e-06, -8.286965869416524e-06, -5.405608895373504e-06, -6.768241935479560e-03, -2.922756629462700e-03, -2.932855129746895e-03, -2.982231909468704e-03, -2.922257852477684e-03, -2.922257852477684e-03, -4.628395430480224e-01, -4.551068287364454e-01, -3.307331422313381e-03, -6.221389946124243e-01, -4.602976446588078e-01, -4.602976446588078e-01, -5.368331792661117e-01, -5.550473928468153e-01, -8.508277744059605e-01, -1.149161091893717e-01, -5.809457592683888e-01, -5.809457592684057e-01, -1.361122509448548e-06, -1.363287997742511e-06, -1.361362062540192e-06, -1.517634937564797e-06, -1.362189632812044e-06, -1.362189632812044e-06, -8.474849917267536e-05, -8.193435653715723e-05, -8.595395118086431e-05, -8.368055205477014e-05, -8.136660055986520e-05, -4.959442735352376e-05, -8.137432274516096e-03, -6.099373775948162e-03, -9.214794235944896e-03, -8.788555309152875e-03, -7.295229958426601e-03, -9.244012387151432e-03, -2.060672417793192e+01, -2.961599454986187e-01, -2.189960536099226e+01, -7.137137343684098e-05, -1.045268914334242e+00, -1.045268914334242e+00, -2.297566344834389e+05, -1.506284740068911e-01, -6.013611256407709e-01, -9.258929158510149e+01, -1.976431484696995e+05, -1.835732821090803e-01, -7.557061948105860e-03, -9.738589590122724e-03, -9.755762595596613e-03, -8.684598133562873e-03, -9.051080418353818e-03, -9.051080418353818e-03, -9.803162208629491e-03, -1.412921346851939e-02, -1.277721602826498e-02, -1.080713683490798e-02, -1.180186614459694e-02, -1.406862426526075e-02, -5.100526899056029e-03, -4.707151105045191e-01, -1.057198745840902e-01, -8.148815406881355e-02, -7.483313589283973e-02, -7.483313589283971e-02, -2.860541686821275e-02, -7.031650559081319e-01, -8.675185966711442e-01, -6.632596207608729e-02, -4.584615612708522e+01, -1.541406923023853e+00, -1.962670381127762e-01, -1.452473519239502e-01, -3.001048698739369e-01, -1.849828923736338e+00, -2.532640097120469e-01, -2.532640097120646e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m05_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m05", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-2.573366885211632e-03, -2.573253260257940e-03, -2.572751137265847e-03, -2.574598106111960e-03, -2.573307066534720e-03, -2.573307066534720e-03, -1.182128397706943e-03, -1.178781056180999e-03, -1.077725430851023e-03, -1.116840151799949e-03, -1.181193658814375e-03, -1.363862186738194e-03, -2.823156842451429e-03, -3.380200120585745e-03, -1.133120701443593e-04, -9.469085082547152e-04, -3.524226729622116e-03, -3.524226729622116e-03, -2.393017344848345e-04, -1.436468614692631e-03, -3.152562787119842e-03, -4.878310013702537e-02, -3.812632087608738e-04, -3.812632087608738e-04, 1.642509639718946e-03, 1.867464848290297e-03, 3.077308441662036e-02, 6.608463142086909e-05, 1.892687788826189e-03, 1.892687788827322e-03, 1.466982009531823e-02, 1.547066704701712e-02, 1.475821190980280e-02, 1.475981693191097e-02, 1.507096824313187e-02, 1.507096824313187e-02, -6.312099279885032e-03, -5.776835539738318e-03, -6.495880289972965e-03, -6.139273259285857e-03, -5.616516547296777e-03, -6.606730542041047e-03, 5.731041355381598e-03, -9.417243422246263e-02, 9.902498242451166e-03, -2.130406363712704e-02, -2.906833573305283e-02, -2.667411594868551e-02, 1.826949409429693e-02, -6.023765490366469e-02, 1.595888400694524e-02, -1.069226201607119e-02, -3.615304158163667e-02, -3.615304158163667e-02, 5.013105066045562e-05, 1.115828862298541e-04, 1.845273478606605e-04, 2.532520477839165e-02, 5.770118295117548e-05, 1.040482240471783e-04, -9.573911558255278e-01, -1.640033533496930e-01, -6.138047516969412e-01, -9.757265756323513e-01, -8.124320546290141e-01, -8.124320546290141e-01, -1.011192143404952e+00, 1.329818803520978e-02, -6.581741371238033e-02, -6.396481686283696e-02, -1.117789379005092e-01, -1.046997765083977e-01, -7.773649242209517e-02, -2.952427356310311e-03, -1.540450242592146e-02, -3.354105953052926e-02, -4.847658620414878e-02, -4.847658620414886e-02, -2.055327506616383e-03, 2.467106669730650e-02, 4.083984836943486e-02, -8.207742184912561e-03, 2.790816061209799e-02, 4.623203600352908e-02, 1.037663963570464e-03, 2.546669213347570e-06, 3.424894092235413e-05, 4.859065064743458e-02, 8.985492774091378e-05, 8.985492774195895e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
