
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_m05_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m05", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.386863083870153e+01, -1.386857157382793e+01, -1.386836479995637e+01, -1.386932661991865e+01, -1.386859920190625e+01, -1.386859920190625e+01, -2.477579809902882e+00, -2.477535517986389e+00, -2.476393056205619e+00, -2.477985514040532e+00, -2.477573103388186e+00, -2.477573103388186e+00, -5.492038260061184e-01, -5.493678595957550e-01, -5.534598885715378e-01, -5.566307608036655e-01, -5.492593206220724e-01, -5.492593206220724e-01, -1.711999868552743e-01, -1.718458085368028e-01, -6.444257722925533e-01, -1.915347839910353e-01, -1.713774733940492e-01, -1.713774733940492e-01, -1.854549783453350e-03, -2.024011585991715e-03, -3.653991004993045e-02, -5.371900051273348e-04, -2.004356455869825e-03, -2.004356455869884e-03, -3.296140037699260e+00, -3.300633041354505e+00, -3.296632307863154e+00, -3.300122720604476e+00, -3.298352346899411e+00, -3.298352346899411e+00, -1.540304481785693e+00, -1.538443590548089e+00, -1.545661257148850e+00, -1.543611258815113e+00, -1.532663339820536e+00, -1.532663339820536e+00, -4.141543575575398e-01, -3.953051495883435e-01, -3.903214367737776e-01, -3.940796724157550e-01, -4.245199662271740e-01, -4.245199662271740e-01, -1.564417486988411e-01, -1.992498613196932e-01, -1.550694259045511e-01, -1.297517763997091e+00, -1.738436204922727e-01, -1.738436204922727e-01, -5.264256891033552e-04, -6.151046017235128e-04, -4.683335709003908e-04, -6.942312770155601e-02, -5.543290013001837e-04, -5.543290013001437e-04, -3.281548344489236e-01, -4.269802835986940e-01, -4.082096343009345e-01, -3.784489874620640e-01, -3.949521814134106e-01, -3.949521814134106e-01, -3.643844771996232e-01, -3.720535471592676e-01, -3.707217168670406e-01, -3.435162110168761e-01, -3.579623641352607e-01, -3.579623641352607e-01, -4.338438817055847e-01, -2.227852334713464e-01, -2.474805494148806e-01, -2.662447341339253e-01, -2.554107881603994e-01, -2.554107881603992e-01, -3.340548416812570e-01, -2.972685018618540e-02, -5.781936494985004e-02, -2.397828920116411e-01, -1.246460375887432e-01, -1.246460375887432e-01, -2.032408455339338e-03, -1.468343591399571e-04, -2.932098529047700e-04, -1.187099753884527e-01, -4.623582137798548e-04, -4.623582137798870e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_m05_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m05", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.200951025442089e+01, -1.200979100868529e+01, -1.201101139833759e+01, -1.200644233716908e+01, -1.200965827892494e+01, -1.200965827892494e+01, -2.710300870288879e+00, -2.710819902634375e+00, -2.726445285511026e+00, -2.719762506655115e+00, -2.710463386859073e+00, -2.710463386859073e+00, -5.578384720784245e-01, -5.590305456064087e-01, -5.693115761339960e-01, -5.654654814301757e-01, -5.582424225831977e-01, -5.582424225831977e-01, -1.627751532406649e-01, -1.630289728108501e-01, -6.470794711139711e-01, -1.095649492017792e-01, -1.630256111076737e-01, -1.630256111076737e-01, -3.859537052130427e-03, -4.280131360406951e-03, -8.877939111685171e-02, -8.104554656435521e-04, -4.239747828686453e-03, -4.239747828688579e-03, -5.076710759696733e+00, -5.132087304306364e+00, -5.082833926642136e+00, -5.125861257954011e+00, -5.104529069625983e+00, -5.104529069625983e+00, -1.207675414124978e+00, -1.253183495239815e+00, -1.188819876070891e+00, -1.221228078004528e+00, -1.268042590288637e+00, -1.268042590288637e+00, -5.027478401959609e-01, -3.730351956080454e-01, -4.840410790010727e-01, -4.585580974119637e-01, -4.492335652741940e-01, -4.492335652741940e-01, -2.190611647617234e-01, -9.148452383901561e-02, -2.065976668968188e-01, -1.461382362076536e+00, -1.294335295439786e-01, -1.294335295439786e-01, -8.063781201032993e-04, -9.617423925887660e-04, -7.426741181423041e-04, -1.530035510092004e-01, -8.579923834977814e-04, -8.579923834968839e-04, -2.220306017464199e-01, -4.808294104876683e-01, -3.082956338357421e-01, -2.045129903539895e-01, -2.492585602865533e-01, -2.492585602865533e-01, -2.012994145742339e-01, -4.379566702573082e-01, -3.390000895420979e-01, -3.587013206970335e-01, -2.935490980782104e-01, -2.935490980782104e-01, -4.075655651438562e-01, -2.037884573740200e-01, -2.146789469541177e-01, -2.259013503645754e-01, -1.853736128526737e-01, -1.853736128526735e-01, -3.620546433668398e-01, -7.356502178888509e-02, -1.327765679228954e-01, -2.619773893454193e-01, -1.971623245986798e-01, -1.971623245986855e-01, -4.107630534632910e-03, -1.988530061214491e-04, -4.204938595865072e-04, -1.879492766912232e-01, -7.030823794984749e-04, -7.030823794987782e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m05_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m05", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.669310425095357e-09, -4.669256829460067e-09, -4.668962104609836e-09, -4.669838343177737e-09, -4.669282658934142e-09, -4.669282658934142e-09, -6.788040386498710e-06, -6.788131345305113e-06, -6.789432685957497e-06, -6.778965602177369e-06, -6.787986629110809e-06, -6.787986629110809e-06, -4.773352479720395e-03, -4.776073420410704e-03, -4.760801456987143e-03, -4.642883659840480e-03, -4.774428610098368e-03, -4.774428610098368e-03, -5.081117995953798e-01, -5.042524021689426e-01, -2.563561784026815e-03, -1.020139411409701e+00, -5.073210953733142e-01, -5.073210953733142e-01, -5.588575154856211e-01, -5.840046446842875e-01, -1.111047521845064e+00, -2.385290655322230e-01, -6.071156284548765e-01, -6.071156284548945e-01, -1.362061733397398e-06, -1.364217870258391e-06, -1.362288399943801e-06, -1.363963734684227e-06, -1.363140112408318e-06, -1.363140112408318e-06, -5.346909609098523e-05, -5.217418203328969e-05, -5.351628885240386e-05, -5.248920074270602e-05, -5.252954641331550e-05, -5.252954641331550e-05, -9.113669649746983e-03, -6.828514651365734e-03, -1.099524300355482e-02, -1.047913921376918e-02, -7.962858493033076e-03, -7.962858493033076e-03, -1.232770558163439e+00, -3.230967449081449e-01, -1.422695562068638e+00, -8.605036616883330e-05, -1.309540535799014e+00, -1.309540535799014e+00, -2.570449550946883e-01, -2.633859457081465e-01, -7.657929678940761e-01, -1.514245952980431e+00, -3.847835062208257e-01, -3.847835062207977e-01, -7.660253281445432e-03, -9.867228869779357e-03, -9.467300511277031e-03, -8.801796905077880e-03, -9.172732775488737e-03, -9.172732775488737e-03, -1.007421986922256e-02, -1.436500875153431e-02, -1.304611073855711e-02, -1.107031366052890e-02, -1.208476447039039e-02, -1.208476447039039e-02, -5.880489971326445e-03, -1.724705172058216e-01, -1.158964802004774e-01, -5.779662989949890e-02, -8.371063223458737e-02, -8.371063223458740e-02, -2.103747556878494e-02, -8.211034759698697e-01, -1.195670083912526e+00, -7.820737013250499e-02, -2.047538721748967e+00, -2.047538721748968e+00, -3.927849503153564e-01, -3.947896687155861e-01, -3.573743616776494e-01, -2.510692535565400e+00, -5.514681413844611e-01, -5.514681413844992e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m05_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m05", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-2.719243424433212e-03, -2.719119855350190e-03, -2.718578709161653e-03, -2.720587661668285e-03, -2.719178325027495e-03, -2.719178325027495e-03, -1.272378469067812e-03, -1.268762184736077e-03, -1.159656357758621e-03, -1.202345242823435e-03, -1.271365466858696e-03, -1.271365466858696e-03, -3.186790721605339e-03, -2.991745524666957e-03, -1.014096596630038e-04, -8.539279502882419e-04, -3.118645234570632e-03, -3.118645234570632e-03, -2.349551006786440e-04, -1.407002448863386e-03, -3.455692755620795e-03, -4.646895106006831e-02, -3.739853702164535e-04, -3.739853702164535e-04, 1.642426429501470e-03, 1.867333701800575e-03, 3.065567546284752e-02, 6.607468599166403e-05, 1.892572650707567e-03, 1.892572650708700e-03, 1.466612217383927e-02, 1.546680946825837e-02, 1.475454309818333e-02, 1.537665143661024e-02, 1.506712532494437e-02, 1.506712532494437e-02, -7.356004037310673e-03, -6.715108891608595e-03, -7.597553629571079e-03, -7.165978438773426e-03, -6.503907195603867e-03, -6.503907195603867e-03, 5.520413068373592e-03, -9.034197436211035e-02, 9.359598843672831e-03, -2.002923464486020e-02, -2.821564869235639e-02, -2.821564869235639e-02, 2.936548170759097e-02, -5.949561487105959e-02, 2.551946035776236e-02, -1.000273018918170e-02, -3.548712770223825e-02, -3.548712770223825e-02, 9.039378362115599e-05, 1.115661146223687e-04, 1.845150370575793e-04, 4.308275417271590e-02, 1.040282036712094e-04, 1.040282036693517e-04, -9.522771663068186e-01, -1.631751723132634e-01, -6.211554796872671e-01, -9.706187622997690e-01, -8.082097210243833e-01, -8.082097210243833e-01, -1.000382820669084e+00, 1.322960919544486e-02, -6.535699545038358e-02, -6.341354939997437e-02, -1.108603482764968e-01, -1.108603482764968e-01, -7.383436100455733e-02, -3.889321671894911e-03, -1.509578775282397e-02, -3.779704071070109e-02, -4.711235046976979e-02, -4.711235046976986e-02, -2.290680616305000e-03, 2.462688625946973e-02, 4.057036726945677e-02, -7.807275969226154e-03, 4.560442754590487e-02, 4.560442754590033e-02, 1.036742563587665e-03, 2.546608503563913e-06, 3.424835977986823e-05, 4.787904771410597e-02, 8.983920190176231e-05, 8.983920190280732e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
