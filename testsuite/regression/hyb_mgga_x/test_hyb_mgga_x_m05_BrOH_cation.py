
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_m05_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m05", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.312474093596274e+01, -1.312469592394610e+01, -1.312454002343137e+01, -1.352086280134356e+01, -1.352042622131657e+01, -1.391605786036097e+01, -2.480249772802357e+00, -2.658360317662912e+00, -2.655847473497952e+00, -2.657094768236550e+00, -2.656702109518757e+00, -2.478548939185626e+00, -4.888523243128907e-01, -5.544817041621601e-01, -6.194512257078022e-01, -5.495265227711867e-01, -4.797814972713978e-01, -6.174847878696779e-01, -1.510878699354847e-01, -1.522967044450491e-01, -6.947288715453268e-01, -1.972424604428994e-01, -1.763863476894943e-01, -1.683935989337388e-01, -7.198887593299131e-04, -6.289310494180146e-04, -1.555351607092943e-02, -3.630787832547668e-04, -5.472769651272409e-04, -5.472769651272322e-04, -3.298825826021916e+00, -3.303487922578972e+00, -3.299082309406526e+00, -3.303195047603157e+00, -3.234373532877890e+00, -3.234433831140024e+00, -1.563431634442375e+00, -1.558093648826988e+00, -1.569084332926594e+00, -1.563210950974526e+00, -1.440632765224270e+00, -1.557989953089214e+00, -4.134181598576100e-01, -4.093127438492903e-01, -4.096022174166351e-01, -4.158156663308408e-01, -4.170825324024034e-01, -4.349694472722189e-01, -1.440747443736084e-01, -1.777643623524971e-01, -1.281938008774931e-01, -1.387639103149476e+00, -1.721221576307996e-01, -1.721221576307997e-01, -2.162832176778187e-04, -3.528842296706999e-04, -2.796340762814140e-04, -4.857199274659241e-02, -3.563160359352056e-04, -3.563160359351788e-04, -3.390813430599250e-01, -4.247703044829267e-01, -4.085549823644892e-01, -3.878538237765068e-01, -3.989907347065258e-01, -4.024430348797549e-01, -3.511299672328564e-01, -3.475590297018369e-01, -3.575726184901555e-01, -3.436343143473518e-01, -3.613395465981691e-01, -3.492761044207416e-01, -4.378768043009929e-01, -2.223357743741402e-01, -2.211550467001633e-01, -2.576354212421612e-01, -2.644768418076134e-01, -2.398808057123455e-01, -3.444211830721825e-01, -9.630725425963485e-03, -3.491901873827381e-02, -2.542582774027414e-01, -1.082717972231252e-01, -1.082717972231250e-01, -5.993025349629434e-04, -8.983872433633252e-05, -1.076617298202991e-04, -5.811131574826756e-02, -3.237183624872237e-04, -2.132144313452442e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_m05_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m05", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.311050298259608e+01, -1.311236520653252e+01, -1.311082075846838e+01, -1.311259633387839e+01, -1.311174318136873e+01, -1.311394851506501e+01, -1.310817857968745e+01, -1.194781515020287e+01, -1.311070440402436e+01, -1.194989010005735e+01, -1.194930484213634e+01, -1.194989010005735e+01, -2.593202444237737e+00, -2.909505035254777e+00, -2.593972663890954e+00, -2.593044790634419e+00, -2.608910839149571e+00, -2.611606815729863e+00, -2.603704106744241e+00, -2.603760582101115e+00, -2.591070403677993e+00, -2.617251023788231e+00, -2.908180085766810e+00, -2.617251023788231e+00, -6.146409816616143e-01, -6.062239674493990e-01, -6.166345417222152e-01, -5.371682149401261e-01, -5.823526869689135e-01, -5.829082526040139e-01, -5.712562440751326e-01, -6.235565030139832e-01, -6.034212782368561e-01, -6.158662580337225e-01, -5.297606716589961e-01, -5.734179991942480e-01, -1.383813493409041e-01, -1.526013639072570e-01, -1.460220330166775e-01, -1.603970310170847e-01, -4.598562845016243e-01, -6.999677801841193e-01, -1.338777703198280e-01, -9.814699746191698e-02, -1.295944902042912e-01, -2.541496420796350e-01, -1.295944902042895e-01, -1.687795784597045e-01, -1.105028798467615e-03, -1.221239777223335e-03, -6.660985834252049e-04, -1.350454189978796e-03, -2.509511827384259e-02, -5.124304344765887e-02, -5.236109584833270e-04, -5.131377525443780e-04, -9.182226625148540e-04, -4.455559492893284e-04, -9.182226625148540e-04, -4.455559492910266e-04, -5.084732496096718e+00, -5.083872664594169e+00, -5.142858701414105e+00, -5.140041478586718e+00, -5.088784621165777e+00, -5.086396349991270e+00, -5.138624625334211e+00, -5.137387316103173e+00, -5.230815822631810e+00, -5.112009152103423e+00, -5.113920769064904e+00, -5.228905179213189e+00, -1.202028799160539e+00, -1.205727713764308e+00, -1.252156291566531e+00, -1.255027621341406e+00, -1.165688657246926e+00, -1.178162842562416e+00, -1.201570973337111e+00, -1.217676146797178e+00, -1.265049385924951e+00, -1.464295143019246e+00, -1.265049385924950e+00, -1.235819233844669e+00, -4.870381369740755e-01, -5.194633800874855e-01, -3.709584892780762e-01, -3.903675757525693e-01, -4.111198201056180e-01, -4.785257073150545e-01, -4.725375113804120e-01, -4.414561212233569e-01, -4.287461743429174e-01, -5.086673344307975e-01, -4.287461743429173e-01, -4.688375657500163e-01, -2.417292957333093e-01, -2.423990070225276e-01, -9.952521147597866e-02, -6.895483975038989e-02, -2.292230101711379e-01, -2.352630173082025e-01, -1.355709536324691e+00, -1.353927630106149e+00, -1.987834217376810e-01, -1.270497598352803e-01, -1.987834217376815e-01, -1.270497598352814e-01, -2.040992507645021e-04, -3.834054798843315e-04, -4.978197016627890e-04, -5.035427297252753e-04, -3.927857386745801e-04, -4.273683922379599e-04, -1.400907046893029e-01, -8.735827325767037e-02, -3.667557263533888e-04, -5.958785905748289e-04, -3.667557263534432e-04, -5.958785905750927e-04, -1.808000288602798e-01, -1.873651975522506e-01, -5.698586990525056e-01, -5.538740680653014e-01, -4.098187449727268e-01, -3.896302702546592e-01, -2.592650464935854e-01, -2.349602984341227e-01, -3.311382406908892e-01, -3.138407418629460e-01, -3.311382406908893e-01, -3.013368386152044e-01, -1.759051929471474e-01, -1.727536904287843e-01, -4.290784435652354e-01, -4.654507858275079e-01, -3.660502084514676e-01, -3.966647543658853e-01, -3.324865324504656e-01, -3.377679681419161e-01, -2.942166917414846e-01, -2.929322296930720e-01, -2.942166917414846e-01, -3.279369441295568e-01, -3.678408293858249e-01, -4.020795240879309e-01, -1.612679798676785e-01, -1.649041378446786e-01, -2.539974292457122e-01, -2.328658110216548e-01, -2.526196780323123e-01, -2.116090181548177e-01, -1.922939057918956e-01, -1.910043465626271e-01, -1.922939057918956e-01, -2.317969789306613e-01, -3.440780789468030e-01, -3.598616585465345e-01, -2.440018680932948e-02, -2.463339976740043e-02, -8.237776994430426e-02, -8.982480283956344e-02, -2.441293084502723e-01, -2.848406932024872e-01, -1.970560411941422e-01, -2.015489582001118e-01, -1.970560411941420e-01, -2.015489582001311e-01, -9.905328631640343e-04, -1.052431607109013e-03, -1.202856821369484e-04, -1.205633300429412e-04, -1.433473242969076e-04, -1.540279218900027e-04, -1.194985058599108e-01, -1.225534738216112e-01, -3.593131548094871e-04, -5.288105659020429e-04, -3.593131548093510e-04, -2.933858087285579e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m05_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m05", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.080804514546695e-08, 0.000000000000000e+00, -1.080756995534252e-08, -1.080782754286910e-08, 0.000000000000000e+00, -1.080741201227778e-08, -1.080713311427074e-08, 0.000000000000000e+00, -1.080641674997558e-08, -1.080958559488660e-08, 0.000000000000000e+00, -9.249115567801630e-09, -1.080791326427894e-08, 0.000000000000000e+00, -9.248318565152254e-09, -9.247883665258059e-09, 0.000000000000000e+00, -9.248318565152254e-09, -1.080473708112825e-05, 0.000000000000000e+00, -1.657266915310979e-05, -1.080577980863801e-05, 0.000000000000000e+00, -1.080508163794759e-05, -1.082632984970205e-05, 0.000000000000000e+00, -1.082957011180123e-05, -1.081519133792955e-05, 0.000000000000000e+00, -1.081461522604849e-05, -1.080934212026473e-05, 0.000000000000000e+00, -1.083240485813253e-05, -1.658316431874207e-05, 0.000000000000000e+00, -1.083240485813253e-05, -1.329716070743519e-02, 0.000000000000000e+00, -1.306923090375373e-02, -1.338507974870028e-02, 0.000000000000000e+00, -5.826621723686767e-03, -5.824079412554544e-03, 0.000000000000000e+00, -5.886730723297357e-03, -5.932663636089569e-03, 0.000000000000000e+00, -1.424419025334284e-02, -1.266152493664314e-02, 0.000000000000000e+00, -1.654588832075512e-02, -5.714405245664848e-03, 0.000000000000000e+00, -6.072963955462234e-03, -3.273541508201746e+00, 0.000000000000000e+00, -9.269951202753055e-01, -3.100020147984852e+00, 0.000000000000000e+00, -9.091070357198940e-01, -2.055909755257398e-03, 0.000000000000000e+00, -6.757748699031821e-03, -1.256271655861721e+00, 0.000000000000000e+00, -1.375353121804827e+00, -7.991674945878799e-01, 0.000000000000000e+00, -1.224917027124045e+00, -7.991674945878793e-01, 0.000000000000000e+00, -4.209878304446041e+01, -3.366585058339894e-01, 0.000000000000000e+00, -3.452832739869861e-01, -1.737397227608649e+05, 0.000000000000000e+00, -3.704615745393618e-01, -7.903829410302054e+02, 0.000000000000000e+00, -8.097857062462210e-01, -2.183653969544558e-01, 0.000000000000000e+00, -2.202439056850669e-01, -3.079892579573939e-01, 0.000000000000000e+00, -4.868042435476006e-01, -3.079892579573939e-01, 0.000000000000000e+00, -4.868042435475136e-01, -2.716854605081185e-06, 0.000000000000000e+00, -2.719499894191875e-06, -2.721415632036199e-06, 0.000000000000000e+00, -2.723910966447319e-06, -2.717183409973127e-06, 0.000000000000000e+00, -2.719706804275487e-06, -2.721092670818741e-06, 0.000000000000000e+00, -2.723709760889405e-06, -3.028122759053238e-06, 0.000000000000000e+00, -2.721679223352611e-06, -2.719101201778769e-06, 0.000000000000000e+00, -3.031024055140098e-06, -1.006492905121121e-04, 0.000000000000000e+00, -1.008015832231967e-04, -9.901371103192600e-05, 0.000000000000000e+00, -9.921274645654211e-05, -1.019791586537547e-04, 0.000000000000000e+00, -1.017449590346132e-04, -1.005495112084501e-04, 0.000000000000000e+00, -1.003003550650560e-04, -9.878286060797890e-05, 0.000000000000000e+00, -1.650366718968157e-04, -9.878286060797890e-05, 0.000000000000000e+00, -9.984488488667048e-05, -1.565073197986467e-02, 0.000000000000000e+00, -2.080646236186332e-02, -1.165234639740709e-02, 0.000000000000000e+00, -1.162120855720910e-02, -1.985025899712421e-02, 0.000000000000000e+00, -1.844512186885366e-02, -1.938769329895892e-02, 0.000000000000000e+00, -1.761968079960135e-02, -1.385611692945195e-02, 0.000000000000000e+00, -2.158377435256479e-02, -1.385611692945195e-02, 0.000000000000000e+00, -1.656646458901206e-02, -1.505882628287870e+00, 0.000000000000000e+00, -1.501019105705218e+00, -3.411305603833985e+00, 0.000000000000000e+00, -6.370242120808395e-01, -1.478280645169985e+00, 0.000000000000000e+00, -1.603008622555165e+00, -1.420109273728355e-04, 0.000000000000000e+00, -1.422797688618339e-04, -1.912689293546785e+00, 0.000000000000000e+00, -2.328678262773410e+00, -1.912689293546795e+00, 0.000000000000000e+00, -2.328678262773405e+00, -4.267952774800559e+06, 0.000000000000000e+00, -1.419009005655793e-01, -2.059535988476817e-01, 0.000000000000000e+00, -1.812301446005110e-01, -1.522163855506534e+00, 0.000000000000000e+00, -1.693326735305708e+00, -1.471042208633763e+00, 0.000000000000000e+00, -2.242095194153246e+02, -2.747512984136471e-01, 0.000000000000000e+00, -9.472576647147898e-01, -2.747512984136003e-01, 0.000000000000000e+00, -9.472576647147410e-01, -1.696157777209860e-02, 0.000000000000000e+00, -1.649647691680562e-02, -2.086213885050884e-02, 0.000000000000000e+00, -2.057731578865536e-02, -2.161622700888281e-02, 0.000000000000000e+00, -2.117133127835155e-02, -2.023368677079064e-02, 0.000000000000000e+00, -1.897838739580840e-02, -2.104602210840167e-02, 0.000000000000000e+00, -2.056689727521234e-02, -2.104602210840167e-02, 0.000000000000000e+00, -1.969451605520309e-02, -2.002665009513699e-02, 0.000000000000000e+00, -1.950330534262188e-02, -2.992365739114764e-02, 0.000000000000000e+00, -4.108622829202336e-02, -2.752853318010360e-02, 0.000000000000000e+00, -3.407878901234850e-02, -2.296736675488359e-02, 0.000000000000000e+00, -2.264723775379640e-02, -2.543402177255805e-02, 0.000000000000000e+00, -2.504841817365260e-02, -2.543402177255805e-02, 0.000000000000000e+00, -3.014481485911745e-02, -9.780221014552634e-03, 0.000000000000000e+00, -1.150045107325704e-02, -3.485144299516595e-01, 0.000000000000000e+00, -3.438414837264316e-01, -5.695041921196914e-01, 0.000000000000000e+00, -2.221221607641072e-01, -1.717929213091060e-01, 0.000000000000000e+00, -9.947729154255015e-02, -1.588371762784805e-01, 0.000000000000000e+00, -1.595304905623233e-01, -1.588371762784806e-01, 0.000000000000000e+00, -3.118794084476273e-01, -3.824793844028442e-02, 0.000000000000000e+00, -3.781124083744791e-02, -8.448615462461310e+02, 0.000000000000000e+00, -8.242659540305735e+02, -8.890866436391348e-01, 0.000000000000000e+00, -9.767939418338397e-01, -1.283820037110945e-01, 0.000000000000000e+00, -1.291178153645053e-01, -2.289623948515151e+00, 0.000000000000000e+00, -2.981898293620948e+00, -2.289623948515147e+00, 0.000000000000000e+00, -2.981898293620939e+00, -5.248488105028660e+04, 0.000000000000000e+00, -4.617315497743113e+04, -2.253109067585266e-01, 0.000000000000000e+00, -2.243225185019018e-01, -1.756479392222761e+07, 0.000000000000000e+00, -1.379153437607746e+07, -1.489020768241983e+02, 0.000000000000000e+00, -1.453687213492998e+02, -7.204668969623974e-01, 0.000000000000000e+00, -9.661314142657624e-01, -7.204668969623350e-01, 0.000000000000000e+00, -1.987715815176000e+06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m05_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m05", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-2.573438398110567e-03, -2.572465926497718e-03, -2.573287110025052e-03, -2.572355807767540e-03, -2.572854640049705e-03, -2.571719130418393e-03, -2.574550230612684e-03, -2.729075919999143e-03, -2.573341858040497e-03, -2.728170930401004e-03, -2.728476823204237e-03, -2.728170930401004e-03, -1.383899243501788e-03, -1.202157606900998e-03, -1.378537676421315e-03, -1.384797500447012e-03, -1.274058457139950e-03, -1.255297322602270e-03, -1.311991509845172e-03, -1.311832274483022e-03, -1.396065858785796e-03, -1.217396896600223e-03, -1.208835910371222e-03, -1.217396896600223e-03, -3.432685828405457e-03, -4.473919402020804e-03, -3.154182438203409e-03, -5.469906785248086e-03, -5.374826544613181e-04, -2.548974321645889e-04, -1.506343765495307e-03, -1.648926996367194e-03, -5.172220815286009e-03, -2.449258333577077e-04, -6.537013051277191e-03, -3.225446906316452e-04, -2.617813349694264e-02, -1.021466971717108e-02, -2.090454997647764e-02, -4.035361860642528e-03, -1.190707146431516e-02, -3.500522594053516e-03, -4.361928993092442e-02, -6.460169507800002e-02, -3.303326678601029e-02, 4.048497644101804e-02, -3.303326678600941e-02, 2.428821660609017e-02, 1.539752048562866e-04, 1.852988015826842e-04, 1.018078758579591e-04, 2.282384056871816e-04, 6.885645314504646e-03, 1.468403540297168e-02, 2.460736301106449e-05, 2.363876902248279e-05, 1.040122239254707e-04, 3.291655814999119e-05, 1.040122239254707e-04, 3.291655814915693e-05, 1.474701153227268e-02, 1.475580445526764e-02, 1.558746281992390e-02, 1.556827041401459e-02, 1.480549031893709e-02, 1.479225576526471e-02, 1.552611232714864e-02, 1.552980950000806e-02, 1.455478231736367e-02, 1.516184627398154e-02, 1.516794661743572e-02, 1.454887544048549e-02, -7.413608426692222e-03, -7.355720894234748e-03, -6.696681199685341e-03, -6.644287228477476e-03, -7.883756197583384e-03, -7.724299903584684e-03, -7.422724789619819e-03, -7.191325570592042e-03, -6.498122260400982e-03, -5.876962542138333e-03, -6.498122260400982e-03, -6.926834711290052e-03, 1.047744255640842e-03, -1.720583554941924e-03, -8.332014416888882e-02, -7.124955236763014e-02, -4.826346857793063e-03, 1.212441489395243e-02, 7.369174391618844e-03, -1.615619481983019e-02, -3.584309303244611e-02, -4.465733992191711e-03, -3.584309303244617e-02, -4.910608567103869e-03, 4.219099111772444e-02, 4.142920171196588e-02, -5.206316268151819e-02, -7.528456676733326e-02, 4.708919262404561e-02, 4.513983156513586e-02, -1.096110216135926e-02, -1.102785978973016e-02, 7.794395312824807e-03, -4.131055647554214e-02, 7.794395312824467e-03, -4.131055647554231e-02, 4.193046743593968e-06, 7.812933083326026e-06, 2.079612768395008e-05, 1.917710903758414e-05, 6.256286662643748e-05, 8.153093239193645e-05, 3.916820077496908e-02, 2.460799375876722e-02, 1.257814827451625e-05, 1.031550526456382e-04, 1.257814827480399e-05, 1.031550526446898e-04, -1.097943272275383e+00, -1.076493419909027e+00, 6.291093910383128e-02, 2.363256321866944e-02, -3.466962170139633e-01, -4.032654122431574e-01, -7.923903359357590e-01, -8.481921330311256e-01, -5.665316000004652e-01, -6.195445070219382e-01, -5.665316000004652e-01, -6.302231597665808e-01, -1.095684327478418e+00, -1.114505338627015e+00, 1.522400833943974e-02, 1.376467857204447e-02, -3.886532741065493e-02, -4.059628700481555e-02, -8.148234312078760e-02, -7.737908887381548e-02, -1.027073436596982e-01, -1.047683218917750e-01, -1.027073436596982e-01, -9.781301884512818e-02, -8.462470667840678e-02, -8.537294161395206e-02, -2.591294872583148e-02, -2.422535643943532e-02, -7.661699554415090e-04, -2.402318872651426e-03, -3.645292436774344e-02, -4.280138703352097e-02, -3.930762713772711e-02, -4.013449151074432e-02, -3.930762713772717e-02, -3.265680531829237e-02, -7.607135487529268e-03, -1.722486028292131e-03, 6.865900853892667e-03, 6.862813946204998e-03, 2.191720080981706e-02, 2.431844422758379e-02, -1.742708782738342e-02, 1.283691345899292e-02, 5.320840253076172e-02, 5.263850247460846e-02, 5.320840253076374e-02, 5.263850247461584e-02, 1.202516022847361e-04, 1.317790501597712e-04, 4.663937502011075e-07, 4.675340609170809e-07, 6.033172017234000e-06, 7.688641206691599e-06, 3.251757683650259e-02, 3.340144836705895e-02, 2.757323835725829e-05, 8.240010748664485e-05, 2.757323835799566e-05, 4.569053120427511e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
