
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_m05_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m05", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.386870278963608e+01, -1.386863470142446e+01, -1.386841164454367e+01, -1.386941741490201e+01, -1.386887902413021e+01, -1.386887902413021e+01, -2.477791850965470e+00, -2.477737781855920e+00, -2.476494006560621e+00, -2.478215021810619e+00, -2.477369057722058e+00, -2.477369057722058e+00, -5.477677267730936e-01, -5.479487767904202e-01, -5.516749047138179e-01, -5.549910641901211e-01, -5.537955422148754e-01, -5.537955422148754e-01, -1.715789371850920e-01, -1.718599427961860e-01, -6.489567026364259e-01, -1.918342806460441e-01, -1.729940748156903e-01, -1.729940748156903e-01, -7.198852100432978e-04, -7.756859283545128e-04, -1.905175031433646e-02, -3.630710750521903e-04, -5.472662696665521e-04, -5.472662696665435e-04, -3.298008619664857e+00, -3.302678931737102e+00, -3.298282036302805e+00, -3.302401318253383e+00, -3.300309145017040e+00, -3.300309145017040e+00, -1.539178234255506e+00, -1.537460975790317e+00, -1.547928670118302e+00, -1.545458224754551e+00, -1.534302299096937e+00, -1.534302299096937e+00, -4.192315989554670e-01, -3.946760603303586e-01, -3.869057322159796e-01, -3.875703969921254e-01, -4.218123899993120e-01, -4.218123899993120e-01, -1.422182523357610e-01, -2.081209805840994e-01, -1.266307953411108e-01, -1.298603135531447e+00, -1.699792651934700e-01, -1.699792651934701e-01, -2.722405069913366e-04, -3.528680508198249e-04, -2.796237332725719e-04, -6.176926935888603e-02, -3.563065680484855e-04, -3.563065680484588e-04, -3.373737038786763e-01, -4.227540946570713e-01, -4.143349518372456e-01, -3.889879483073962e-01, -4.039626111415565e-01, -4.039626111415568e-01, -3.476143961761612e-01, -3.659787291930485e-01, -3.701811042077575e-01, -3.408536425502071e-01, -3.585611278583600e-01, -3.585611278583600e-01, -4.318025396613622e-01, -2.206423300650813e-01, -2.450056792609027e-01, -2.671831492757108e-01, -2.576437901472451e-01, -2.576437901472451e-01, -3.357541896922580e-01, -1.713239868361543e-02, -3.480603637213180e-02, -2.442090381424483e-01, -1.072803473087809e-01, -1.072803473087806e-01, -1.079952513349230e-03, -8.983691320880473e-05, -1.942025394735747e-04, -9.783938963141720e-02, -3.237085723537732e-04, -3.237085723537525e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_m05_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m05", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.200958137917280e+01, -1.201164456190589e+01, -1.200995523145542e+01, -1.201191639742442e+01, -1.201100445087543e+01, -1.201346516288334e+01, -1.200680994645616e+01, -1.200809945665332e+01, -1.200981964974711e+01, -1.201013062634534e+01, -1.200981964974711e+01, -1.201013062634534e+01, -2.707985478342026e+00, -2.707583764294303e+00, -2.708691715398325e+00, -2.708061130724619e+00, -2.722623240931256e+00, -2.725198069355605e+00, -2.716860658711524e+00, -2.717119208065936e+00, -2.705956401028763e+00, -2.729700681639866e+00, -2.705956401028763e+00, -2.729700681639866e+00, -5.545064468337068e-01, -5.464238850281198e-01, -5.563680208402360e-01, -5.476784462245754e-01, -5.725916131805719e-01, -5.700979719438073e-01, -5.642465629111170e-01, -5.600378544579081e-01, -5.452094947346003e-01, -5.532340132421911e-01, -5.452094947346003e-01, -5.532340132421911e-01, -1.204802667810264e-01, -1.518206552536944e-01, -1.291492763254686e-01, -1.594245872194884e-01, -4.611888185132075e-01, -6.334906189464495e-01, -1.218191030581025e-01, -9.192093359948048e-02, -1.270339979702462e-01, -2.364561533682659e-01, -1.270339979702444e-01, -2.364561533682581e-01, -1.105008316158802e-03, -1.221229003568063e-03, -1.199585633875059e-03, -1.350424762660517e-03, -4.390725634206648e-02, -5.107641814295624e-02, -5.235760160017505e-04, -5.131097690782096e-04, -9.181811623255162e-04, -4.454931303933645e-04, -9.181811623255163e-04, -4.454931303950626e-04, -5.085357901932213e+00, -5.084461989345217e+00, -5.143467503681038e+00, -5.140615297947940e+00, -5.089394634422685e+00, -5.086974720755525e+00, -5.139221128298261e+00, -5.137952273022338e+00, -5.114548483532268e+00, -5.112592447834587e+00, -5.114548483532268e+00, -5.112592447834587e+00, -1.212601677541799e+00, -1.215930266095096e+00, -1.261151042208877e+00, -1.263720330297325e+00, -1.174178965380382e+00, -1.186955344917529e+00, -1.208806535795988e+00, -1.225114099599470e+00, -1.276110095994095e+00, -1.245406278607095e+00, -1.276110095994095e+00, -1.245406278607095e+00, -4.979825560660368e-01, -4.901642489662967e-01, -3.915316105244622e-01, -4.093587139551609e-01, -4.265781694713621e-01, -4.905959189839666e-01, -4.984989874022561e-01, -4.679607459475101e-01, -4.406203999821343e-01, -4.811405996871289e-01, -4.406203999821343e-01, -4.811405996871289e-01, -2.355385771527118e-01, -2.354776154824558e-01, -6.644190228539038e-02, -6.676175997839898e-02, -2.232539666068178e-01, -2.294783956042985e-01, -1.457861957398991e+00, -1.456077606377375e+00, -1.928906917377010e-01, -1.228180683567757e-01, -1.928906917377013e-01, -1.228180683567768e-01, -3.680513815038073e-04, -3.833537492161113e-04, -4.977563946817713e-04, -5.034740129529586e-04, -3.927495809431047e-04, -4.273200235774634e-04, -1.378275346842836e-01, -1.436227922698795e-01, -3.666580074880925e-04, -5.958625823755939e-04, -3.666580074881470e-04, -5.958625823758578e-04, -1.843538021503197e-01, -1.907544160683552e-01, -5.721516123167062e-01, -5.562118189541110e-01, -4.003600478821606e-01, -3.801168818743979e-01, -2.510356503390642e-01, -2.386355155353715e-01, -3.220913283366719e-01, -3.048199815996409e-01, -3.220913283366719e-01, -3.048199815996416e-01, -1.833822823130195e-01, -1.799118463499889e-01, -4.298677582654275e-01, -4.324117395639819e-01, -3.682973192507432e-01, -3.625064387954911e-01, -3.359095300916444e-01, -3.411492272560419e-01, -2.977249757637699e-01, -2.963432868449870e-01, -2.977249757637699e-01, -2.963432868449871e-01, -3.969230158195974e-01, -3.879228507277402e-01, -1.598323574256594e-01, -1.634194380412597e-01, -2.314918375902751e-01, -2.306782319113440e-01, -2.163675763922370e-01, -2.181154918141986e-01, -1.934062854234274e-01, -1.922008123292241e-01, -1.934062854234272e-01, -1.922008123292240e-01, -3.483879233096080e-01, -3.636967556761913e-01, -4.279422665151845e-02, -4.318591447383676e-02, -8.185950474682778e-02, -8.923789287919787e-02, -2.508481921679701e-01, -2.889555804366029e-01, -1.936426154353280e-01, -1.974730366888086e-01, -1.936426154353277e-01, -1.974730366888277e-01, -1.782095906801760e-03, -1.893060837073115e-03, -1.202801209308698e-04, -1.205543888679517e-04, -2.585300303567421e-04, -2.777807231258419e-04, -1.861082915026735e-01, -1.897505039444498e-01, -3.592083815474036e-04, -5.287979725922682e-04, -3.592083815472674e-04, -5.287979725938358e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m05_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m05", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-9.337779510433532e-09, 0.000000000000000e+00, -9.337372575056437e-09, -9.337636795487264e-09, 0.000000000000000e+00, -9.337268988878185e-09, -9.337121139593304e-09, 0.000000000000000e+00, -9.336546868464855e-09, -9.338730052503832e-09, 0.000000000000000e+00, -9.338597843097628e-09, -9.337695637792517e-09, 0.000000000000000e+00, -9.337734695460609e-09, -9.337695637792517e-09, 0.000000000000000e+00, -9.337734695460609e-09, -1.357265679481715e-05, 0.000000000000000e+00, -1.357689502954273e-05, -1.357272820388631e-05, 0.000000000000000e+00, -1.357734659430930e-05, -1.357867257618823e-05, 0.000000000000000e+00, -1.358021893270136e-05, -1.355501993876007e-05, 0.000000000000000e+00, -1.355793944650458e-05, -1.358081749954473e-05, 0.000000000000000e+00, -1.356217349222010e-05, -1.358081749954473e-05, 0.000000000000000e+00, -1.356217349222010e-05, -9.530896921747670e-03, 0.000000000000000e+00, -9.521266007113749e-03, -9.539913582336837e-03, 0.000000000000000e+00, -9.530649316426712e-03, -9.621750574322109e-03, 0.000000000000000e+00, -9.589142998331997e-03, -9.332008040149824e-03, 0.000000000000000e+00, -9.342782783811602e-03, -9.445688837189334e-03, 0.000000000000000e+00, -8.970418891080597e-03, -9.445688837189334e-03, 0.000000000000000e+00, -8.970418891080597e-03, -1.032423527192082e+00, 0.000000000000000e+00, -9.562523997205237e-01, -1.031381184351588e+00, 0.000000000000000e+00, -9.456819613256081e-01, -5.751638724525139e-03, 0.000000000000000e+00, -5.189227902582976e-03, -1.828153955228524e+00, 0.000000000000000e+00, -1.708292157591943e+00, -8.890270482625792e-01, 0.000000000000000e+00, -2.460323785434748e+00, -8.890270482625783e-01, 0.000000000000000e+00, -2.460323785434755e+00, -3.449396334372835e-01, 0.000000000000000e+00, -3.488839736832838e-01, -3.705279070571014e-01, 0.000000000000000e+00, -3.789552167623784e-01, -8.927685079222293e-01, 0.000000000000000e+00, -9.899329393453964e-01, -2.798387119824203e-01, 0.000000000000000e+00, -2.717992048886590e-01, -3.316010833104452e-01, 0.000000000000000e+00, -7.767041040148760e-01, -3.316010833104461e-01, 0.000000000000000e+00, -7.767041040147380e-01, -2.718751163002631e-06, 0.000000000000000e+00, -2.721289475734230e-06, -2.723292466471474e-06, 0.000000000000000e+00, -2.725681397961384e-06, -2.719035473015193e-06, 0.000000000000000e+00, -2.721464419337038e-06, -2.722929444033003e-06, 0.000000000000000e+00, -2.725451578387700e-06, -2.721020497400636e-06, 0.000000000000000e+00, -2.723464651121666e-06, -2.721020497400636e-06, 0.000000000000000e+00, -2.723464651121666e-06, -1.067840754635230e-04, 0.000000000000000e+00, -1.067359073412994e-04, -1.040742360495734e-04, 0.000000000000000e+00, -1.041241501241638e-04, -1.073029445807816e-04, 0.000000000000000e+00, -1.071319479076887e-04, -1.049078002780051e-04, 0.000000000000000e+00, -1.047019994676767e-04, -1.048253947167242e-04, 0.000000000000000e+00, -1.052956612433865e-04, -1.048253947167242e-04, 0.000000000000000e+00, -1.052956612433865e-04, -1.731578011098520e-02, 0.000000000000000e+00, -1.750821287742546e-02, -1.288949685739215e-02, 0.000000000000000e+00, -1.279841013393994e-02, -2.444583595729528e-02, 0.000000000000000e+00, -2.160077148535311e-02, -2.421914574521345e-02, 0.000000000000000e+00, -2.118492271247927e-02, -1.498864350612143e-02, 0.000000000000000e+00, -1.841956661368119e-02, -1.498864350612143e-02, 0.000000000000000e+00, -1.841956661368119e-02, -1.979391751471141e+00, 0.000000000000000e+00, -2.022153208962092e+00, -7.025626279028204e-01, 0.000000000000000e+00, -6.945165156086767e-01, -2.072031005131076e+00, 0.000000000000000e+00, -2.121154416695227e+00, -1.710505971994143e-04, 0.000000000000000e+00, -1.713574171013064e-04, -2.332098767450412e+00, 0.000000000000000e+00, -2.704983750427151e+00, -2.332098767450423e+00, 0.000000000000000e+00, -2.704983750427145e+00, -3.810083789233468e-01, 0.000000000000000e+00, -3.301176193630286e-01, -3.363426982872398e-01, 0.000000000000000e+00, -3.100074013640382e-01, -1.966176414038239e+00, 0.000000000000000e+00, -2.216610634216990e+00, -2.171058066699264e+00, 0.000000000000000e+00, -2.192961300412299e+00, -9.366740620983077e-01, 0.000000000000000e+00, -9.988140166043741e-01, -9.366740620981451e-01, 0.000000000000000e+00, -9.988140166043225e-01, -1.718347229507269e-02, 0.000000000000000e+00, -1.670638435878093e-02, -2.112589951895206e-02, 0.000000000000000e+00, -2.083062821244414e-02, -2.085359489535475e-02, 0.000000000000000e+00, -2.044115223578216e-02, -1.968943899054315e-02, 0.000000000000000e+00, -1.921720918179690e-02, -2.039160603456621e-02, 0.000000000000000e+00, -1.994118337645816e-02, -2.039160603456621e-02, 0.000000000000000e+00, -1.994118337645819e-02, -2.055317957040949e-02, 0.000000000000000e+00, -1.999790096899560e-02, -3.039989052717241e-02, 0.000000000000000e+00, -3.001782172275657e-02, -2.807599915646231e-02, 0.000000000000000e+00, -2.763388484081807e-02, -2.349608496004048e-02, 0.000000000000000e+00, -2.316484501084997e-02, -2.602043320148363e-02, 0.000000000000000e+00, -2.560432063924137e-02, -2.602043320148363e-02, 0.000000000000000e+00, -2.560432063924137e-02, -1.112923211994874e-02, 0.000000000000000e+00, -1.092090785003015e-02, -3.651406995325838e-01, 0.000000000000000e+00, -3.606916293481665e-01, -2.457670822691987e-01, 0.000000000000000e+00, -2.417462842285680e-01, -1.190137983757304e-01, 0.000000000000000e+00, -1.168074671488355e-01, -1.768752205150406e-01, 0.000000000000000e+00, -1.776776563998698e-01, -1.768752205150407e-01, 0.000000000000000e+00, -1.776776563998698e-01, -4.189383149239379e-02, 0.000000000000000e+00, -4.103971732393387e-02, -8.095651393354808e-01, 0.000000000000000e+00, -8.126013447394007e-01, -1.161838420353158e+00, 0.000000000000000e+00, -1.262282710871818e+00, -1.509724354219766e-01, 0.000000000000000e+00, -1.435790106377027e-01, -2.937690635071734e+00, 0.000000000000000e+00, -3.760274160806794e+00, -2.937690635071731e+00, 0.000000000000000e+00, -3.760274160806784e+00, -2.923351826974122e-01, 0.000000000000000e+00, -3.027388322248323e-01, -1.143567662978128e+00, 0.000000000000000e+00, -2.025676480148510e+00, -7.236252724128595e-01, 0.000000000000000e+00, -7.739947470415629e-01, -3.260623881928231e+00, 0.000000000000000e+00, -3.324060947964892e+00, -1.962082182340387e+00, 0.000000000000000e+00, -1.020084724076108e+00, -1.962082182340219e+00, 0.000000000000000e+00, -1.020084724076055e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m05_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m05", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-2.719311177744645e-03, -2.718283210662263e-03, -2.719146650747235e-03, -2.718163466191511e-03, -2.718680986686471e-03, -2.717476522002811e-03, -2.720525213115804e-03, -2.719838454822752e-03, -2.719206069118043e-03, -2.718942314539797e-03, -2.719206069118043e-03, -2.718942314539797e-03, -1.289922300954037e-03, -1.293866774796243e-03, -1.284955519465909e-03, -1.290624218979695e-03, -1.187996313778743e-03, -1.170547840635974e-03, -1.223721844053723e-03, -1.223462057964958e-03, -1.301205934429337e-03, -1.135762877487021e-03, -1.301205934429337e-03, -1.135762877487021e-03, -3.856002029679796e-03, -5.000751511576074e-03, -3.549204622788914e-03, -4.824808815229921e-03, -4.773974949082543e-04, -2.276288253655130e-04, -1.352728379040584e-03, -1.900979710995929e-03, -5.738929601103900e-03, -2.968515591448575e-04, -5.738929601103900e-03, -2.968515591448575e-04, -3.540542711180072e-02, -1.015910592347556e-02, -2.801733493644136e-02, -4.006438867185073e-03, -9.561042053221301e-03, -3.848680328007217e-03, -4.213953523172778e-02, -6.324925647450214e-02, -3.246166932567357e-02, 3.909517062630947e-02, -3.246166932567270e-02, 3.909517062630139e-02, 1.539741304843872e-04, 1.852981792393726e-04, 1.835418721563189e-04, 2.282364879492703e-04, 1.223564486187356e-02, 1.466017410391179e-02, 2.460678973025501e-05, 2.363831951244630e-05, 1.040104914190768e-04, 3.291493371520848e-05, 1.040104914190768e-04, 3.291493371437427e-05, 1.474325058993310e-02, 1.475225693696481e-02, 1.558353253872038e-02, 1.556457094655844e-02, 1.480180328702104e-02, 1.478876315010654e-02, 1.552228081596124e-02, 1.552617866127375e-02, 1.516403372780165e-02, 1.515821119880933e-02, 1.516403372780165e-02, 1.515821119880933e-02, -7.296719399661663e-03, -7.243482203810725e-03, -6.606649621326156e-03, -6.557646168952641e-03, -7.778484596524658e-03, -7.619154507096972e-03, -7.339169029401687e-03, -7.108941087081582e-03, -6.393458543023494e-03, -6.827848502204460e-03, -6.393458543023494e-03, -6.827848502204460e-03, 1.013217954164527e-03, -1.834956164381644e-03, -8.027998199321289e-02, -6.875399706192517e-02, -4.525233323269739e-03, 1.152700088915768e-02, 6.823852473673697e-03, -1.514595591384037e-02, -3.489680985873614e-02, -4.739341185621925e-03, -3.489680985873619e-02, -4.739341185621957e-03, 4.167732056527117e-02, 4.086713718034706e-02, -7.492565492082835e-02, -7.448088139860892e-02, 4.649060514196755e-02, 4.460761827509727e-02, -1.025765185996433e-02, -1.032041955767652e-02, 7.695410090896426e-03, -4.080488453949620e-02, 7.695410090896090e-03, -4.080488453949637e-02, 7.563249061673368e-06, 7.812573059234782e-06, 2.079520820093137e-05, 1.917620026938737e-05, 6.256082742430894e-05, 8.152763576547353e-05, 3.884931186255867e-02, 4.243613663759196e-02, 1.257699759177174e-05, 1.031540461031418e-04, 1.257699759205946e-05, 1.031540461021934e-04, -1.092339536817218e+00, -1.071144937118571e+00, 6.260848813121683e-02, 2.352180864256623e-02, -3.516574838274840e-01, -4.089055823719165e-01, -8.010168869977028e-01, -8.440622413871507e-01, -5.736691675826002e-01, -6.271801760446237e-01, -5.736691675826002e-01, -6.271801760446191e-01, -1.084522405149485e+00, -1.103542052418411e+00, 1.515092582817387e-02, 1.537208053168584e-02, -3.861250240631246e-02, -4.384423513136186e-02, -8.082095570304583e-02, -7.675485105693779e-02, -1.019032446671089e-01, -1.039772151671124e-01, -1.019032446671089e-01, -1.039772151671123e-01, -8.075339281023583e-02, -8.712478389672321e-02, -2.571895769094761e-02, -2.403774551360398e-02, -9.775066085770340e-04, -2.361121071840844e-03, -4.136699527038316e-02, -4.093326107588197e-02, -3.829438964790585e-02, -3.909519715216998e-02, -3.829438964790592e-02, -3.909519715217005e-02, -7.406556148079780e-03, -1.681169341218259e-03, 1.221520692332947e-02, 1.220727030105602e-02, 2.184777269392254e-02, 2.423839937792331e-02, -1.660423799334391e-02, 1.242445325094079e-02, 5.275745228316755e-02, 5.212984368752870e-02, 5.275745228316955e-02, 5.212984368753600e-02, 2.167057143154844e-04, 2.374581115367612e-04, 4.663865366575517e-07, 4.675224613120998e-07, 1.088285777064551e-05, 1.386884430774862e-05, 5.479292714494376e-02, 5.619533102424965e-02, 2.757044491022267e-05, 8.239940208735451e-05, 2.757044491095997e-05, 8.239940208929588e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
