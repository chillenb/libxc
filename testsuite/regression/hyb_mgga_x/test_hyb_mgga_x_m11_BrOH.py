
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_m11_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-8.805586291198283e+00, -8.805615393156318e+00, -8.805728860445626e+00, -8.805251277090150e+00, -8.805601796023694e+00, -8.805601796023694e+00, -2.089839711657888e+00, -2.089704313169685e+00, -2.085811265133624e+00, -2.089154046976965e+00, -2.089801735770934e+00, -2.089801735770934e+00, -4.087515978015487e-01, -4.092312887568448e-01, -4.184321387571794e-01, -4.211737198762752e-01, -4.089207425190375e-01, -4.089207425190375e-01, -6.794080794787656e-02, -6.937147682491962e-02, -5.211062701605552e-01, -4.748931290707615e-02, -6.836034521866029e-02, -6.836034521866029e-02, -7.773998767956801e-05, -8.915027221321621e-05, -4.663006422157616e-03, -8.737913319192601e-06, -8.640102274357046e-05, -8.640102274356997e-05, -2.067741671937137e+00, -2.063684720195591e+00, -2.067283483046511e+00, -2.064132979074158e+00, -2.065774845878602e+00, -2.065774845878602e+00, -1.406701100322987e+00, -1.396886683938735e+00, -1.417990282644873e+00, -1.410515210390640e+00, -1.384915764453158e+00, -1.384915764453158e+00, -2.332547580091744e-01, -2.205885167588008e-01, -2.445645543011732e-01, -2.154056307021125e-01, -2.205007779763916e-01, -2.205007779763916e-01, -2.837131699259950e-02, -7.415443162334014e-02, -2.710943055552629e-02, -8.598198277109571e-01, -3.521878914046563e-02, -3.521878914046563e-02, -7.844952980325330e-06, -1.169630495335356e-05, -4.927086659388250e-06, -1.012527588567468e-02, -8.849628546127793e-06, -8.849628546127687e-06, -4.723637097291350e-03, -7.096440657392339e-02, -3.531984800005423e-02, -1.307455230055200e-02, -2.318980711569496e-02, -2.318980711569496e-02, -4.497319325555995e-02, -2.050482088006559e-01, -1.718685588232860e-01, -1.733361088772165e-01, -1.674819566752614e-01, -1.674819566752610e-01, -2.381074343927821e-01, -1.061946283219245e-01, -1.371169311686006e-01, -1.602121231587201e-01, -1.516110799237881e-01, -1.516110799237879e-01, -2.106204057367412e-01, -3.895111631936904e-03, -8.125537576555686e-03, -1.313053482143655e-01, -1.734042446850650e-02, -1.734042446850670e-02, -1.247605754132725e-04, -2.411626009699455e-07, -1.651125682160999e-06, -1.529538959775980e-02, -5.436450690302815e-06, -5.436450690302951e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_m11_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.319576788220332e+01, -1.319609893478161e+01, -1.319754296475081e+01, -1.319214737079236e+01, -1.319594237711719e+01, -1.319594237711719e+01, -1.396236193260012e+00, -1.396112312427939e+00, -1.391859203052709e+00, -1.387541388441799e+00, -1.396247858584126e+00, -1.396247858584126e+00, -3.355783471092967e-01, -3.385365622723436e-01, -4.182308568593163e-01, -4.043389989294229e-01, -3.366191187574409e-01, -3.366191187574409e-01, -9.741214518879786e-02, -9.740835578775889e-02, -4.668437052164183e-01, -4.212416709987202e-02, -9.749568227458812e-02, -9.749568227458812e-02, -1.519438939456123e-04, -1.738519218159209e-04, -6.981288493326440e-03, -1.740223561469087e-05, -1.685003761504677e-04, -1.685003761504627e-04, -2.121440555845948e+00, -2.061230134896496e+00, -2.114802759868287e+00, -2.068024287767222e+00, -2.091490577840884e+00, -2.091490577840884e+00, -5.462856900954560e-01, -5.012171066348775e-01, -5.641685305717389e-01, -5.257048995010981e-01, -4.981957060034222e-01, -4.981957060034222e-01, -1.173529743842821e-01, -3.297472434746573e-01, -1.631290881323840e-01, -1.701877751808985e-01, -1.407520390632294e-01, -1.407520390632294e-01, -3.704629922383845e-02, -7.176102353310666e-02, -3.547247686662832e-02, -6.947860092782898e-01, -3.793618944820246e-02, -3.793618944820246e-02, -1.562488062998467e-05, -2.326783644879702e-05, -9.804222177499920e-06, -1.245218551273986e-02, -1.760639583758862e-05, -1.760639583758210e-05, -2.035710539816873e-02, 2.172787869068581e-01, 1.933504606547986e-01, 1.268125435647203e-01, 1.655274313534368e-01, 1.655274313534368e-01, 8.386530375432115e-02, -4.572683523065357e-02, -1.335390040057015e-01, -2.827722902043215e-01, -2.274956650936456e-01, -2.274956650936450e-01, -2.748436058509622e-01, -1.460139411350232e-01, -1.556178170517895e-01, -9.604981533333838e-02, -1.070879837618750e-01, -1.070879837618741e-01, -9.640084551043539e-02, -6.186397525827871e-03, -1.076357287365198e-02, -8.710440913921177e-02, -2.284614160270163e-02, -2.284614160270423e-02, -2.430747537885315e-04, -4.820839245467717e-07, -3.296326925979124e-06, -2.034516618595300e-02, -1.082371807419457e-05, -1.082371807419645e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m11_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([6.094891459766488e-09, 6.095015980714155e-09, 6.095439178855202e-09, 6.093416195332508e-09, 6.094958061284132e-09, 6.094958061284132e-09, -1.181734550724227e-05, -1.181275090374949e-05, -1.167035669035135e-05, -1.170166565517271e-05, -1.181598080691481e-05, -1.181598080691481e-05, -6.338361143873604e-03, -6.278547884846281e-03, -4.704906444589574e-03, -5.109805838765886e-03, -6.317586156533935e-03, -6.317586156533935e-03, -2.198147813781760e-01, -2.339289165322190e-01, -1.442162795604640e-03, -2.892190417679902e-01, -2.238655793766485e-01, -2.238655793766485e-01, -1.180459171733966e-01, -1.295917568305636e-01, -6.867902808226433e-01, -1.960854577977785e-02, -1.318402481550009e-01, -1.318402481550004e-01, 2.810190666475175e-06, 2.852111052973590e-06, 2.814713951036914e-06, 2.847284484121184e-06, 2.831092717034386e-06, 2.831092717034386e-06, -9.704550571241624e-05, -9.295789003255042e-05, -9.702674383912956e-05, -9.407025964449061e-05, -9.381049717582355e-05, -9.381049717582355e-05, -9.318474335813489e-04, 7.875776550312547e-03, -9.159836300850280e-03, 3.686713673889906e-03, 3.005882011319735e-03, 3.005882011319735e-03, -2.834133291968243e-01, -1.383480848772118e-01, -2.922976764269944e-01, 5.252022299532416e-05, -2.775281422720580e-01, -2.775281422720580e-01, -1.935247047228768e-02, -2.530787377645926e-02, -4.069458863006109e-02, -9.210866604199903e-01, -3.104768285639814e-02, -3.104768285639801e-02, 2.075998931045744e-01, 7.472082554797797e-02, 1.074382156534306e-01, 1.427531062356026e-01, 1.237904143475219e-01, 1.237904143475219e-01, 1.648715567335045e-01, -4.592156616213446e-03, 6.810869991633580e-03, 1.282607520958895e-02, 1.019461872856688e-02, 1.019461872856689e-02, 5.302155921444619e-03, -8.247929729672325e-02, -9.098059011304759e-02, -7.696347892943801e-02, -9.836152031428939e-02, -9.836152031428938e-02, -2.257248296651674e-02, -5.248703085412073e-01, -7.683888862753396e-01, -7.997382348704143e-02, -4.824948819849694e-01, -4.824948819849713e-01, -1.219631158136303e-01, -3.276388666954375e-03, -1.016691187782571e-02, -5.435856134851282e-01, -3.277267743377374e-02, -3.277267743377357e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m11_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-5.705218157855695e-04, -5.703725920190935e-04, -5.697444714298457e-04, -5.721759182757946e-04, -5.704429765509753e-04, -5.704429765509753e-04, -5.139396862361185e-03, -5.143135384652373e-03, -5.260029884657931e-03, -5.253255753484736e-03, -5.140159966041932e-03, -5.140159966041932e-03, -5.233758730340204e-03, -5.057241207796043e-03, -7.558657817810216e-04, -7.075236640395379e-04, -5.170394870911730e-03, -5.170394870911730e-03, 1.474370652770862e-02, 1.477921122722130e-02, -8.179141442195942e-03, -1.271662195896960e-02, 1.480269602554124e-02, 1.480269602554124e-02, -8.190861599275320e-07, -1.023397374725952e-06, -3.016922345638769e-04, -7.430168327278887e-09, -1.016008324775305e-06, -1.016008324817251e-06, -1.944106314183136e-02, -2.046128297437878e-02, -1.955319461955307e-02, -2.034580804964284e-02, -1.994731010177179e-02, -1.994731010177179e-02, -1.010507130971242e-02, -1.149307270793655e-02, -9.658842152939202e-03, -1.075611134382574e-02, -1.161030266671258e-02, -1.161030266671258e-02, -8.824214601333498e-02, -2.699131909745575e-03, -4.927394307834561e-02, -7.393966769360030e-02, -9.248308730436471e-02, -9.248308730436471e-02, -3.573604838572863e-03, -1.048768353796577e-02, -3.940609316378592e-03, -2.448646617062172e-02, -1.002043252710845e-02, -1.002043252710845e-02, -9.476066951675079e-09, -1.526541780018630e-08, -1.421608894020219e-08, -6.544820250094732e-04, -1.180677410347763e-08, -1.180677410303963e-08, -4.917434425070835e-01, -1.029604985484410e+00, -1.078361360786342e+00, -9.696256725911890e-01, -1.044972401679434e+00, -1.044972401679434e+00, -7.221356962913638e-01, -1.168779882850782e-01, -1.016844222886817e-01, -8.511350955548742e-03, -4.471707330232236e-02, -4.471707330232341e-02, -4.025445170390289e-02, 1.156447151989507e-02, 8.702793311518939e-03, -3.266153294468136e-02, -1.777651779417045e-02, -1.777651779417058e-02, -5.921924359728112e-02, -2.103963268380577e-04, -6.196599516217121e-04, -5.181619476603661e-02, -2.556433774194640e-03, -2.556433774191370e-03, -6.970236202480568e-07, -2.608327467420675e-11, -1.267653098133218e-09, -2.430868952434976e-03, -7.363834113414399e-09, -7.363834110193645e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
