
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_m11_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-9.875683314004071e+00, -9.875713876470622e+00, -9.875867455188699e+00, -9.875367513774270e+00, -9.875699278968611e+00, -9.875699278968611e+00, -1.767907402174038e+00, -1.767960323218656e+00, -1.769609098163835e+00, -1.769120393662749e+00, -1.767930876058861e+00, -2.385176448576916e+00, -3.172663500432713e-01, -4.908721835117407e-01, -4.773313394578432e-01, -4.812130362792825e-01, -4.911477992693288e-01, -4.911477992693288e-01, -6.928933766140410e-02, -7.100243996476732e-02, -4.912690604120426e-01, -5.013141244511642e-02, -6.980537782752885e-02, -6.980537782752885e-02, -7.775983395911528e-05, -8.918181563530250e-05, -4.749560960745715e-03, -8.744560238844551e-06, -8.642750275258050e-05, -8.642750275258001e-05, -2.066027657917413e+00, -2.061964341000853e+00, -2.065590450960029e+00, -2.357440865850241e+00, -2.064028351384785e+00, -2.064028351384785e+00, -9.380604030644978e-01, -9.479271914025059e-01, -9.343573827706839e-01, -9.415812399837930e-01, -9.502341141573091e-01, -1.427287323034062e+00, -2.352683201130013e-01, -2.025641893823384e-01, -2.630222202513240e-01, -2.082338057921622e-01, -2.161294855530939e-01, -2.307171660932618e-01, -1.610889563034286e-02, -7.523925580766663e-02, -1.574350784094183e-02, -8.138099491082268e-01, -3.589145235446303e-02, -3.589145235446303e-02, -1.497904073241286e-06, -1.170518989179165e-05, -4.928747145317368e-06, -3.806913357593135e-03, -1.691794843905589e-06, -8.858236531506437e-06, 4.278538280323569e-02, -5.464203616633485e-02, -9.079701777522753e-02, 1.905590023545616e-02, 4.509088936974934e-03, 4.509088936974934e-03, 1.878251125894756e-02, -2.056690032753335e-01, -1.705319309494819e-01, -1.699295134401168e-01, -1.650231904318230e-01, -1.861378338246243e-01, -2.193530759609010e-01, -8.007193638345830e-02, -1.409551225504759e-01, -1.154695556300059e-01, -1.599090476792513e-01, -1.599090476792510e-01, -1.709777787861847e-01, -3.929202323511138e-03, -8.374725565243140e-03, -1.433632641616943e-01, -9.186865804778307e-03, -1.778192734483629e-02, -1.253214450827483e-04, -2.411916514844804e-07, -1.651267224730970e-06, -1.571576421338350e-02, -5.441260390657693e-06, -5.441260390657828e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_m11_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.358759558207755e+01, -1.358787678804567e+01, -1.358913230100822e+01, -1.358455079310976e+01, -1.358774354540517e+01, -1.358774354540517e+01, -2.737860981195628e+00, -2.737784593454109e+00, -2.735227490520246e+00, -2.736526697079710e+00, -2.737853327728507e+00, -4.921069985372860e-01, -1.697410502863422e-01, -5.552222522544326e-01, -5.860181805264502e-01, -5.766625790963159e-01, -5.537072517164087e-01, -5.537072517164087e-01, -1.010628584406224e-01, -1.022155444396083e-01, -2.880707846754459e-01, -5.022723032934786e-02, -1.015225614973082e-01, -1.015225614973082e-01, -1.520352508530737e-04, -1.739969325047350e-04, -7.316978907709197e-03, -1.743318995038071e-05, -1.686221097613070e-04, -1.686221097613020e-04, -2.117685950267993e+00, -2.057385613263782e+00, -2.111085763292150e+00, -2.616056392147722e+00, -2.087626121914159e+00, -2.087626121914159e+00, -1.364103024170828e+00, -1.424121724655862e+00, -1.335306865488253e+00, -1.386612786030042e+00, -1.437483072377494e+00, -4.612358469654822e-01, -4.484002959804428e-02, -3.177280305402926e-01, -5.285091194427041e-02, -7.777236937358958e-02, -9.609006238601864e-02, -2.184422879492173e-01, -3.411196861644375e-02, -7.174520397850544e-02, -3.314710765317132e-02, -3.478515509582516e-01, -4.029313737081969e-02, -4.029313737081969e-02, -3.004913120565695e-06, -2.330918520403336e-05, -9.811948961833071e-06, -8.625080423758568e-03, -3.394851492354418e-06, -1.764646218219591e-05, 5.651748480947742e-03, 2.534927795414805e-01, 1.072072849713263e-01, 1.649971863653828e-01, 2.050409991143869e-01, 2.050409991143869e-01, 1.571437499315375e-01, -3.720417708303378e-02, -1.266407762434607e-01, -2.795126910793680e-01, -2.234261261748705e-01, -2.454440729833531e-01, -2.356017738201158e-01, -5.526850875281923e-02, -1.669558826060548e-01, -1.869082734049629e-01, -1.167650567957973e-01, -1.167650567957960e-01, -2.763462177418913e-01, -6.324150561325400e-03, -1.157594785827255e-02, -4.909204774113055e-02, -2.020251143067916e-02, -2.249118228830246e-02, -2.456580874651798e-04, -4.822194621878210e-07, -3.296986781538040e-06, -2.000923859623608e-02, -1.084611354732177e-05, -1.084611354732365e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m11_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([8.467921792236372e-09, 8.468010347046253e-09, 8.468329165918748e-09, 8.466898108381478e-09, 8.467968904751440e-09, 8.467968904751440e-09, -1.590172379869816e-05, -1.589425602732583e-05, -1.566624969641376e-05, -1.574982006595944e-05, -1.589935188521830e-05, -8.282373327094915e-06, -1.070902093133677e-02, -2.821002610123224e-03, -2.411835068821073e-03, -2.614357043668570e-03, -2.833338713880430e-03, -2.833338713880430e-03, -1.939155921870045e-01, -2.013666125282197e-01, -1.637220444936976e-03, -1.623269970664075e-01, -1.957722348530068e-01, -1.957722348530068e-01, -1.133937785306011e-01, -1.231660876845615e-01, -5.264254277932304e-01, -9.446806062435626e-03, -1.261572424578334e-01, -1.261572424578329e-01, 2.806020129562643e-06, 2.847938236182434e-06, 2.810595880163907e-06, 3.551907431141999e-06, 2.826849898433256e-06, 2.826849898433256e-06, -2.070742852898933e-04, -1.940470477883719e-04, -2.124013554350739e-04, -2.024037391704527e-04, -1.908986247743557e-04, -8.486487855582085e-05, -1.246639946584950e-03, 6.071055604980630e-03, -7.342379219601531e-03, 1.911058051888601e-03, 2.212526577276575e-03, 4.634237140476618e-03, -5.722627238889411e+00, -1.316381890078757e-01, -5.517536027930601e+00, 2.957426394466101e-05, -2.083466961439600e-01, -2.083466961439600e-01, -8.231885053365611e+03, -1.447338602399749e-02, -3.195660552910552e-02, -3.258918916337640e+01, -7.589639919668806e+03, -1.481229071186062e-02, 2.026519921741215e-01, 7.295211122174768e-02, 1.133528873863385e-01, 1.393677021030147e-01, 1.208568711858368e-01, 1.208568711858368e-01, 1.570381021551391e-01, -4.579253538003043e-03, 6.407743849498606e-03, 1.213441935873048e-02, 9.609731539736670e-03, 1.447386634304131e-02, 3.731030295172544e-03, -2.326415557200617e-01, -7.734482334186106e-02, -1.337824459486255e-01, -7.993432297306045e-02, -7.993432297306036e-02, -3.523355450155026e-02, -4.495031506720798e-01, -5.670212757840456e-01, -6.213764013101191e-02, -1.118883542789062e+01, -4.314637164831283e-01, -6.094261411172867e-02, -1.205418521842991e-03, -8.537657142089648e-03, -4.826297078695710e-01, -1.505098703011516e-02, -1.505098703011510e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m11_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.324991557763429e-04, 2.326452746386695e-04, 2.332829136625035e-04, 2.309044599060647e-04, 2.325761394396787e-04, 2.325761394396787e-04, 2.669401925611586e-03, 2.668894319858416e-03, 2.650734590345209e-03, 2.658208562465116e-03, 2.669249480950286e-03, -1.165917322227693e-02, -2.606460627108021e-02, 8.219272426462369e-03, 9.042291328367641e-03, 9.190359006005434e-03, 8.146546711797866e-03, 8.146546711797866e-03, 1.631060175622825e-02, 1.691759005607927e-02, -1.738654256871844e-02, -1.257075209820332e-02, 1.655431134768699e-02, 1.655431134768699e-02, -8.198049907430486e-07, -1.024643916603192e-06, -3.260970761263423e-04, -7.449420493451466e-09, -1.017080169234350e-06, -1.017080169276299e-06, -1.951294959870393e-02, -2.053523007783035e-02, -1.962439583315361e-02, -7.980459737209369e-03, -2.002146989108714e-02, -2.002146989108714e-02, 1.699863584648780e-03, 2.667167770241737e-03, 1.227251246598244e-03, 2.059900859442958e-03, 2.891197615302984e-03, -1.287029122488238e-02, -1.165839006299868e-01, -1.845716071302888e-02, -8.675437600882747e-02, -1.197114394189961e-01, -1.127476268282211e-01, -5.218485538383229e-02, 2.789379861122590e-03, -1.083232013178444e-02, 2.796369605158581e-03, -4.165030761895021e-02, -1.013912160881792e-02, -1.013912160881792e-02, 8.519287845901254e-09, -1.530493936065723e-08, -1.423240483245206e-08, 8.043774821039427e-04, 1.063358469517905e-08, -1.184592808062620e-08, -8.556540755636768e-01, -1.150805406770915e+00, -6.578511159298654e-01, -1.215182187353043e+00, -1.256023552296326e+00, -1.256023552296326e+00, -1.240216638393506e+00, -1.209822229748201e-01, -1.062424364623701e-01, -1.349807307484242e-02, -4.844630200507186e-02, -1.781547192800395e-02, -6.428655848297189e-02, -4.175123820585602e-02, 1.123817557039817e-02, 8.933615298308141e-03, -1.816441980054342e-02, -1.816441980054354e-02, 1.304788034895323e-02, -2.178372468399106e-04, -7.188310687695808e-04, -8.520420919606313e-02, 2.323569042760205e-03, -3.145171979026406e-03, -7.078885567570482e-07, -2.609394545774060e-11, -1.268022381047937e-09, -3.039528098563874e-03, -7.386034362772350e-09, -7.386034359550854e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
