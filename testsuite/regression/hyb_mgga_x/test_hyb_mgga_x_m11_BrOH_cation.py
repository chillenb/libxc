
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_m11_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m11", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-8.805816192972447e+00, -8.805849637961320e+00, -8.805970344342111e+00, -8.805472314545494e+00, -8.805737077606100e+00, -8.805737077606100e+00, -2.090400094347408e+00, -2.090241246963277e+00, -2.086260482169433e+00, -2.089804663640646e+00, -2.088450178608239e+00, -2.088450178608239e+00, -4.051124928983283e-01, -4.056617199391319e-01, -4.160473509273384e-01, -4.185852041023924e-01, -4.119432704536274e-01, -4.119432704536274e-01, -6.290927041640228e-02, -6.442776981061928e-02, -5.231289349412442e-01, -4.739357385216694e-02, -6.067267593553820e-02, -6.067267593553818e-02, -1.652654381543007e-05, -1.930045074870905e-05, -2.779006589888065e-03, -3.172077750594916e-06, -9.251795720721136e-06, -9.251795720721136e-06, -2.068169650486443e+00, -2.063944006343299e+00, -2.067897715392622e+00, -2.064171757484076e+00, -2.066110488555323e+00, -2.066110488555323e+00, -1.403776025988753e+00, -1.393553880441810e+00, -1.422503299604858e+00, -1.414030275806200e+00, -1.388635891298890e+00, -1.388635891298890e+00, -2.305018664330967e-01, -2.232111092157654e-01, -2.452694808650163e-01, -2.185089888828573e-01, -2.222698864125748e-01, -2.222698864125747e-01, -2.576522461961109e-02, -7.160955662152797e-02, -2.194499980422388e-02, -8.596316424648609e-01, -3.286414659582965e-02, -3.286414659582977e-02, -1.461924274483991e-06, -2.963238128095730e-06, -1.333147761378772e-06, -9.104179684327952e-03, -2.766045086451871e-06, -2.766045086451885e-06, -1.319373599323498e-03, -8.992015917508539e-02, -5.116437123292265e-02, -2.122201285842948e-02, -3.548541856660468e-02, -3.548541856660323e-02, -3.810427668207884e-02, -2.132161585436690e-01, -1.747993603575234e-01, -1.696899880627585e-01, -1.652547867411434e-01, -1.652547867411436e-01, -2.378044804490081e-01, -9.843024904309380e-02, -1.304661046927616e-01, -1.616562885519037e-01, -1.516492131191522e-01, -1.516492131191525e-01, -2.136575642950302e-01, -2.462930767736344e-03, -5.577472985902802e-03, -1.328011815302347e-01, -1.485726836027510e-02, -1.485726836027497e-02, -4.601272981849495e-05, -5.665727762485312e-08, -5.281098358368505e-07, -1.294441179301897e-02, -2.129486261561137e-06, -2.129486261561122e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_m11_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m11", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.319580250828525e+01, -1.319830981983791e+01, -1.319624359085708e+01, -1.319862912653736e+01, -1.319748653085545e+01, -1.320045304423030e+01, -1.319253085727037e+01, -1.319413967897619e+01, -1.319608362438292e+01, -1.319654136241123e+01, -1.319608362438292e+01, -1.319654136241123e+01, -1.397275887650094e+00, -1.398891211104294e+00, -1.397043917870006e+00, -1.398880297973971e+00, -1.394046146901233e+00, -1.393906406093486e+00, -1.388652685045635e+00, -1.390107595493150e+00, -1.397411060514624e+00, -1.387185091412726e+00, -1.397411060514624e+00, -1.387185091412726e+00, -3.244131467689710e-01, -3.109367292495298e-01, -3.287234786917080e-01, -3.126074337846481e-01, -3.901233223440859e-01, -4.070843058531721e-01, -3.874765145221302e-01, -3.777369736478582e-01, -2.985181863675861e-01, -4.745564550332330e-01, -2.985181863675861e-01, -4.745564550332330e-01, -7.690977612102443e-02, -9.237939843814749e-02, -8.129872031205310e-02, -9.695947884690753e-02, -5.144231226473110e-01, -4.730511613270418e-01, -4.477885856060090e-02, -4.156631832667313e-02, -8.349509498127862e-02, -3.700091750704772e-02, -8.349509498128263e-02, -3.700091750703618e-02, -2.965747900664025e-05, -3.553684424804342e-05, -3.408056611634781e-05, -4.182278077892598e-05, -4.431054892308721e-03, -5.033491093258415e-03, -6.487912985128016e-06, -6.169878720987523e-06, -2.110284811790819e-05, -3.906469115596390e-06, -2.110284811790819e-05, -3.906469115596273e-06, -2.116303028069232e+00, -2.115173916071121e+00, -2.052888743128374e+00, -2.053906371512582e+00, -2.111843068588058e+00, -2.112386683858254e+00, -2.057473380742038e+00, -2.056771320397955e+00, -2.084769346775576e+00, -2.084714328985013e+00, -2.084769346775576e+00, -2.084714328985013e+00, -5.437654161022957e-01, -5.380688901779395e-01, -4.973816327153706e-01, -4.931410766304694e-01, -5.840197659388612e-01, -5.657637481902981e-01, -5.377130981038980e-01, -5.205202534357660e-01, -4.955175077191286e-01, -5.103957871308864e-01, -4.955175077191286e-01, -5.103957871308864e-01, -1.133408266937852e-01, -1.122376650655506e-01, -3.447334788418489e-01, -3.491286745647638e-01, -1.782212689503927e-01, -1.482011547879768e-01, -1.865221029592733e-01, -1.715188235262754e-01, -1.486143815696239e-01, -1.194039073888190e-01, -1.486143815696275e-01, -1.194039073888187e-01, -3.218590757268887e-02, -3.296328776876235e-02, -5.601660045285180e-02, -5.651236842648703e-02, -2.540275170931949e-02, -2.873715648924480e-02, -6.969190945923466e-01, -6.970542834420300e-01, -4.021564604377049e-02, -3.630091870573290e-02, -4.021564604377598e-02, -3.630091870573551e-02, -2.743021172422190e-06, -3.078643653121579e-06, -5.779622072474155e-06, -6.046202170732322e-06, -2.414515186576249e-06, -2.865622751880896e-06, -1.182633592881456e-02, -1.198371566893161e-02, -2.575943708126926e-06, -6.649699443352538e-06, -2.575943708126768e-06, -6.649699443352372e-06, 3.537146502015134e-02, 2.222919713652954e-02, 1.969883092217066e-01, 2.038762977548791e-01, 2.118044006113246e-01, 2.110872218650375e-01, 1.670801077809536e-01, 1.605838168493443e-01, 1.966850172171935e-01, 1.928109589088290e-01, 1.966850172171935e-01, 1.928109589088381e-01, 6.100243512547746e-02, 5.106200861370240e-02, -4.835613169445800e-02, -4.746632249288055e-02, -9.478490707027375e-02, -1.015369973146921e-01, -2.780063904831313e-01, -2.792836714810640e-01, -1.946908473959355e-01, -2.005699990786873e-01, -1.946908473959353e-01, -2.005699990786887e-01, -2.961760158431455e-01, -3.234675527365405e-01, -1.185420486780034e-01, -1.209214158837245e-01, -1.709818604763809e-01, -1.703752301561336e-01, -9.664369987038819e-02, -9.728911255965103e-02, -1.273586243593140e-01, -1.256677837162380e-01, -1.273586243593144e-01, -1.256677837162388e-01, -9.659766125441101e-02, -9.050952699699341e-02, -4.260580234198150e-03, -4.334014059328274e-03, -8.358638703174204e-03, -8.875301760924730e-03, -8.700455726860080e-02, -6.780477140511577e-02, -1.737264474846285e-02, -1.964574523350094e-02, -1.737264474846410e-02, -1.964574523349795e-02, -8.608872950970856e-05, -9.565013540021092e-05, -1.129031159229356e-07, -1.136664324676923e-07, -9.500603526660586e-07, -1.142751409884430e-06, -1.563628972333835e-02, -1.616094087333273e-02, -2.187340417455145e-06, -5.125211771606161e-06, -2.187340417454938e-06, -5.125211771605285e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m11_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m11", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.218840038486643e-08, 0.000000000000000e+00, 1.219084377755311e-08, 1.218873216228962e-08, 0.000000000000000e+00, 1.219108425572029e-08, 1.218944321729852e-08, 0.000000000000000e+00, 1.219220098165434e-08, 1.218572835477395e-08, 0.000000000000000e+00, 1.218745663366836e-08, 1.218862493927416e-08, 0.000000000000000e+00, 1.218909360359909e-08, 1.218862493927416e-08, 0.000000000000000e+00, 1.218909360359909e-08, -2.367595702214297e-05, 0.000000000000000e+00, -2.369746156800220e-05, -2.366288631518063e-05, 0.000000000000000e+00, -2.368998730451638e-05, -2.341843430178874e-05, 0.000000000000000e+00, -2.337601189635617e-05, -2.345551141658793e-05, 0.000000000000000e+00, -2.346352756067670e-05, -2.371905941529840e-05, 0.000000000000000e+00, -2.323947668176674e-05, -2.371905941529840e-05, 0.000000000000000e+00, -2.323947668176674e-05, -1.310594057129203e-02, 0.000000000000000e+00, -1.371666754386054e-02, -1.292950149633477e-02, 0.000000000000000e+00, -1.364218987944659e-02, -1.042854459250573e-02, 0.000000000000000e+00, -9.864088750084325e-03, -1.080011473352854e-02, 0.000000000000000e+00, -1.121133021320851e-02, -1.413357453185953e-02, 0.000000000000000e+00, -7.588347752928344e-03, -1.413357453185953e-02, 0.000000000000000e+00, -7.588347752928344e-03, -3.720830303882232e-01, 0.000000000000000e+00, -3.584202566604255e-01, -3.698569075839594e-01, 0.000000000000000e+00, -3.681581903459059e-01, -1.523871123093591e-03, 0.000000000000000e+00, -2.786529793667569e-03, -5.009929070724382e-01, 0.000000000000000e+00, -5.004584420173679e-01, -3.308252663509670e-01, 0.000000000000000e+00, -6.988985621517673e-01, -3.308252663509673e-01, 0.000000000000000e+00, -6.988985621517592e-01, -3.775481659612858e-02, 0.000000000000000e+00, -4.217389245220203e-02, -4.365398184837132e-02, 0.000000000000000e+00, -4.979412118301569e-02, -6.505976939597617e-01, 0.000000000000000e+00, -7.147543119497631e-01, -1.254227860305955e-02, 0.000000000000000e+00, -1.179915838864254e-02, -3.003205780816832e-02, 0.000000000000000e+00, -2.473860272665480e-02, -3.003205780816839e-02, 0.000000000000000e+00, -2.473860272665495e-02, 5.617292312965774e-06, 0.000000000000000e+00, 5.622723001161032e-06, 5.705479807546949e-06, 0.000000000000000e+00, 5.708002492883363e-06, 5.623182670486997e-06, 0.000000000000000e+00, 5.626381092363141e-06, 5.698794416310007e-06, 0.000000000000000e+00, 5.703797264609580e-06, 5.661237400643587e-06, 0.000000000000000e+00, 5.665041794950355e-06, 5.661237400643587e-06, 0.000000000000000e+00, 5.665041794950355e-06, -1.939725862706789e-04, 0.000000000000000e+00, -1.933957937343941e-04, -1.852341323273697e-04, 0.000000000000000e+00, -1.848686556052762e-04, -1.946174974889317e-04, 0.000000000000000e+00, -1.941918191833946e-04, -1.881803613236987e-04, 0.000000000000000e+00, -1.871760789719581e-04, -1.870088623505287e-04, 0.000000000000000e+00, -1.887370957419764e-04, -1.870088623505287e-04, 0.000000000000000e+00, -1.887370957419764e-04, -1.073065506553888e-04, 0.000000000000000e+00, 7.806490145174657e-04, 1.562836503079743e-02, 0.000000000000000e+00, 1.614596569881423e-02, -3.071498268198196e-02, 0.000000000000000e+00, -1.547325493456260e-02, -2.205174914012165e-03, 0.000000000000000e+00, 6.323265808170092e-03, 6.553545448345872e-03, 0.000000000000000e+00, 1.805585606349337e-03, 6.553545448345879e-03, 0.000000000000000e+00, 1.805585606349349e-03, -7.018190476905225e-01, 0.000000000000000e+00, -6.870221109700915e-01, -3.040668336938587e-01, 0.000000000000000e+00, -3.015308696729536e-01, -9.552809171848583e-01, 0.000000000000000e+00, -8.064555927490989e-01, 1.060075802473308e-04, 0.000000000000000e+00, 1.065598131101031e-04, -4.598910443505138e-01, 0.000000000000000e+00, -5.543218721487022e-01, -4.598910443505130e-01, 0.000000000000000e+00, -5.543218721487062e-01, -9.917529605787827e-03, 0.000000000000000e+00, -9.270503882089824e-03, -1.403812244819250e-02, 0.000000000000000e+00, -1.335670960332552e-02, -4.469445926177735e-02, 0.000000000000000e+00, -5.574482429090923e-02, -1.493635345261192e+00, 0.000000000000000e+00, -1.416273220048109e+00, -2.320667479903941e-02, 0.000000000000000e+00, -4.290217204075360e-02, -2.320667479903922e-02, 0.000000000000000e+00, -4.290217204075349e-02, 3.897838688152123e-01, 0.000000000000000e+00, 3.972628879036167e-01, 1.254208914501156e-01, 0.000000000000000e+00, 1.295091115114851e-01, 1.854528999910855e-01, 0.000000000000000e+00, 1.912862814784189e-01, 2.590739918628779e-01, 0.000000000000000e+00, 2.647237059513303e-01, 2.190448084031915e-01, 0.000000000000000e+00, 2.248801894947561e-01, 2.190448084031915e-01, 0.000000000000000e+00, 2.248801894947560e-01, 3.749584882601993e-01, 0.000000000000000e+00, 3.846453230669769e-01, -1.756996395385928e-02, 0.000000000000000e+00, -1.633209605681239e-02, 9.548434003116342e-03, 0.000000000000000e+00, 1.043129893511932e-02, 2.601235291397827e-02, 0.000000000000000e+00, 2.592084407804269e-02, 1.939443509142067e-02, 0.000000000000000e+00, 1.951935408837485e-02, 1.939443509142064e-02, 0.000000000000000e+00, 1.951935408837484e-02, 1.074424911505679e-02, 0.000000000000000e+00, 1.151472311217166e-02, -1.666689091299417e-01, 0.000000000000000e+00, -1.646423504438843e-01, -1.483227073644952e-01, 0.000000000000000e+00, -1.527829946998028e-01, -1.590734287813285e-01, 0.000000000000000e+00, -1.567214993357702e-01, -1.877686825426408e-01, 0.000000000000000e+00, -1.898205056559410e-01, -1.877686825426408e-01, 0.000000000000000e+00, -1.898205056559413e-01, -4.810393394748184e-02, 0.000000000000000e+00, -4.334623266592889e-02, -5.747771531914934e-01, 0.000000000000000e+00, -5.828035025941003e-01, -9.196834130188213e-01, 0.000000000000000e+00, -9.812222363334392e-01, -1.680390771611792e-01, 0.000000000000000e+00, -1.060810750198405e-01, -1.306448285667334e+00, 0.000000000000000e+00, -1.142374439078297e+00, -1.306448285667334e+00, 0.000000000000000e+00, -1.142374439078304e+00, -6.103395495871337e-02, 0.000000000000000e+00, -6.686805448676694e-02, -3.635970900997443e-03, 0.000000000000000e+00, -6.470040718349259e-03, -9.285240986822110e-03, 0.000000000000000e+00, -1.118035598474028e-02, -1.404009227689267e+00, 0.000000000000000e+00, -1.296609026937791e+00, -4.291343321228453e-02, 0.000000000000000e+00, -3.743376149005108e-02, -4.291343321228456e-02, 0.000000000000000e+00, -3.743376149005118e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m11_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m11", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m11_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m11", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-5.706349290172198e-04, -5.694569723107064e-04, -5.704361011019639e-04, -5.693130994137654e-04, -5.698970721692067e-04, -5.685157595380289e-04, -5.721302464099434e-04, -5.713601488268338e-04, -5.705069864262275e-04, -5.702935133081835e-04, -5.705069864262275e-04, -5.702935133081835e-04, -5.118654890241272e-03, -5.105003760501446e-03, -5.124180056932222e-03, -5.107697891671948e-03, -5.222633902805192e-03, -5.237885756564203e-03, -5.228659685288986e-03, -5.219478915891794e-03, -5.108114420548374e-03, -5.310664383765372e-03, -5.108114420548374e-03, -5.310664383765372e-03, -5.991032064079659e-03, -6.795717571774526e-03, -5.720460565838748e-03, -6.700852643257072e-03, -2.394610244425989e-03, -1.299812281330019e-03, -1.721336494980629e-03, -2.131178841762642e-03, -7.878914359491063e-03, 2.843391041424204e-03, -7.878914359491063e-03, 2.843391041424204e-03, -1.419759183619009e-05, 9.751846098223162e-03, 2.506441469885478e-03, 1.266303815017286e-02, -6.864271677891037e-03, -7.921651812419305e-03, -1.195680335242211e-02, -1.425986014155607e-02, 5.027444706194878e-04, -1.825389356108445e-03, 5.027444706199500e-04, -1.825389356111702e-03, -2.484984932836926e-08, -3.379004584303850e-08, -3.254146193751346e-08, -4.647849573629046e-08, -7.081858025359224e-05, -9.592045856581996e-05, -1.430043860702453e-09, -1.328404455075816e-09, -1.334294971214658e-08, -1.364014283425180e-09, -1.334294971214658e-08, -1.364014284242383e-09, -1.953703638239540e-02, -1.955238916500154e-02, -2.061161043797959e-02, -2.059102073514829e-02, -1.961246107873114e-02, -1.959956265437657e-02, -2.053376132653225e-02, -2.054236808752547e-02, -2.007002868154674e-02, -2.006758619715408e-02, -2.007002868154674e-02, -2.006758619715408e-02, -1.016984252298933e-02, -1.033826851649348e-02, -1.162305050115536e-02, -1.175797016159419e-02, -9.177091543409481e-03, -9.620484490552058e-03, -1.043708102728884e-02, -1.091443103968126e-02, -1.171921859607596e-02, -1.119332475609958e-02, -1.171921859607596e-02, -1.119332475609958e-02, -9.285903575102200e-02, -9.505464271785395e-02, 3.368655274058637e-03, 5.994602791643349e-03, -3.130157706082993e-02, -5.771958128136407e-02, -5.749946667865301e-02, -7.218497138127219e-02, -9.092047785189183e-02, -9.362499305490948e-02, -9.092047785189095e-02, -9.362499305490976e-02, -2.508703989176091e-03, -2.533999742925658e-03, -1.629936384975261e-02, -1.621336002178549e-02, -1.741982249629941e-03, -2.232744664408803e-03, -2.444732168347878e-02, -2.444345778829025e-02, -5.779366861658771e-03, -1.035309017304489e-02, -5.779366861661723e-03, -1.035309017304373e-02, -2.470848538458117e-10, -2.756685572628167e-10, -1.118297890736868e-09, -1.062560688290223e-09, -1.883432177685333e-09, -2.753537120858702e-09, -6.157734580810788e-04, -7.428426120776038e-04, -3.940716960260941e-10, -6.118423033114304e-09, -3.940716959769391e-10, -6.118423032018987e-09, -7.259896756945906e-01, -6.821355109638140e-01, -9.466924371656645e-01, -9.690184651841354e-01, -1.087667873900495e+00, -1.096196065978797e+00, -1.071562662748341e+00, -1.061230086117440e+00, -1.101116901250309e+00, -1.100430551622665e+00, -1.101116901250309e+00, -1.100430551622654e+00, -6.612763835619201e-01, -6.296695253730963e-01, -1.036221591904145e-01, -1.055815660943834e-01, -1.193485798214658e-01, -1.166397358606822e-01, -7.232391625490913e-03, -7.385443293940161e-03, -6.519362758215590e-02, -6.166286704845920e-02, -6.519362758215531e-02, -6.166286704845902e-02, -3.225363304386098e-02, -1.918753789743986e-02, 8.392465262957721e-04, 1.548810326152326e-03, 1.406005485777118e-02, 1.385506180026970e-02, -3.022237675901900e-02, -3.016977135878541e-02, -7.269912323042700e-03, -7.920182765277648e-03, -7.269912323042715e-03, -7.920182765276878e-03, -5.543303440073468e-02, -6.244186595235708e-02, -6.933810881642059e-05, -7.004893621048704e-05, -2.242222756456469e-04, -2.680041049274551e-04, -4.726998308815011e-02, -8.377895220080918e-02, -1.545378528850936e-03, -2.119458777848963e-03, -1.545378528852327e-03, -2.119458777852490e-03, -7.137297915258903e-08, -8.396215143080319e-08, -1.814183678343784e-12, -1.826649353400561e-12, -1.754126560001421e-10, -2.528984084846076e-10, -1.527194178666811e-03, -1.874763345870055e-03, -7.753356745843438e-10, -4.104116024913148e-09, -7.753356750695572e-10, -4.104116027581941e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
