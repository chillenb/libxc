
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_m11_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m11", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-9.875959467135425e+00, -9.875994595505187e+00, -9.876156439538658e+00, -9.309978818066849e+00, -9.310251948587879e+00, -8.744565278054921e+00, -2.077311433832313e+00, -2.386732041548195e+00, -2.377445933412504e+00, -2.381428307378030e+00, -2.380720417937837e+00, -2.070809273999860e+00, -3.142628640050796e-01, -4.060537553161516e-01, -4.807385994199697e-01, -4.016185196852561e-01, -3.235123213316974e-01, -4.833215929473148e-01, -5.821049184770144e-02, -5.950348587965895e-02, -5.505845995588488e-01, -4.887454182053025e-02, -6.195368832801650e-02, -5.995996928499159e-02, -1.652694792875719e-05, -1.308538291270626e-05, -1.895515539898106e-03, -3.172418535122751e-06, -9.252624372965677e-06, -9.252624372965677e-06, -2.066481828865945e+00, -2.062250124410582e+00, -2.066243580519751e+00, -2.062511233595530e+00, -2.211785095120119e+00, -2.211628434143491e+00, -1.446812454030468e+00, -1.429573598032774e+00, -1.460098202833581e+00, -1.445304486362756e+00, -1.187393946206229e+00, -1.430118028897766e+00, -2.319646602298977e-01, -2.061693790669372e-01, -2.671458310018274e-01, -2.172616227885488e-01, -2.213601194625887e-01, -2.192949295515388e-01, -2.646747766678508e-02, -6.627459276930789e-02, -2.265235479259899e-02, -8.129205480260732e-01, -3.329426653950798e-02, -3.329426653950811e-02, -9.380248676980870e-07, -2.963924990061708e-06, -1.333398189703000e-06, -6.256875990646364e-03, -2.766329855775219e-06, -2.766329855775233e-06, 3.814230526656903e-02, -7.773256885835281e-02, -1.046580689169163e-01, -3.591744288564189e-02, -9.089749193798499e-02, -5.167702697568627e-02, 2.709397091225945e-02, -2.033585456560240e-01, -1.808816388746523e-01, -1.666406133059052e-01, -1.631967501011572e-01, -1.734026241173173e-01, -2.333019770558410e-01, -9.921027425081143e-02, -1.126394235082880e-01, -1.456401106033548e-01, -1.586046510115324e-01, -1.269149717301005e-01, -2.230105553383955e-01, -5.820136669150522e-04, -5.666022621549233e-03, -1.420815690849939e-01, -1.523438149192999e-02, -1.523438149192985e-02, -8.862100764557266e-06, -5.666305235343416e-08, -1.002777430536442e-07, -5.762588521600616e-03, -2.129731865480911e-06, -6.710978018832992e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_m11_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m11", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.358763317645157e+01, -1.358986597248678e+01, -1.358800783168873e+01, -1.359013733728535e+01, -1.358909078530825e+01, -1.359171892384729e+01, -1.358488266898993e+01, -1.313753625119988e+01, -1.358787099506839e+01, -1.313999225032518e+01, -1.313928160187063e+01, -1.313999225032518e+01, -4.939952365306794e-01, -2.738450790293618e+00, -4.934989658085081e-01, -4.940711576668477e-01, -4.839125147727794e-01, -4.822141423408828e-01, -4.874243154256468e-01, -4.874180218556114e-01, -4.950251547760901e-01, -4.788470031542152e-01, -2.738164550071749e+00, -4.788470031542152e-01, -1.733857924149203e-01, -1.796883467325486e-01, -1.717512968584516e-01, -5.328434886744897e-01, -5.843443503769049e-01, -5.847031618419007e-01, -5.721974142195444e-01, -1.632690505755196e-01, -1.855286413768361e-01, -1.695331293828505e-01, -5.233922118859923e-01, -5.744795609022028e-01, -4.685414723732390e-02, -9.284458796445275e-02, -4.505486245666909e-02, -9.787058744236041e-02, -5.114076472343636e-01, -2.937380398901374e-01, -5.083938273750292e-02, -4.528696741043966e-02, -8.373651297420293e-02, -3.535509143191472e-02, -8.373651297420702e-02, -3.175128361697462e-02, -2.965992259725941e-05, -3.553825384724560e-05, -6.604319815641427e-06, -4.182693220244903e-05, -1.311067014333415e-03, -5.134873118563955e-03, -6.489696281485965e-06, -6.171262866385341e-06, -2.110699786187451e-05, -3.908744253153642e-06, -2.110699786187451e-05, -3.908744253153525e-06, -2.112488299816606e+00, -2.111577737060458e+00, -2.048978103187300e+00, -2.050225240897225e+00, -2.108108571661266e+00, -2.108849266199337e+00, -2.053655949029432e+00, -2.053155459425291e+00, -2.628442159139399e+00, -2.081064576823788e+00, -2.080839800691419e+00, -2.628315362882635e+00, -5.238325186513431e-01, -5.174643214436303e-01, -4.678140029324980e-01, -4.637254200833478e-01, -5.800402899061892e-01, -5.568073617584121e-01, -5.251094383852269e-01, -5.034684045625539e-01, -4.549915132581889e-01, -1.414337566382371e+00, -4.549915132581890e-01, -4.827136363442984e-01, -5.008187580224836e-02, -2.298962029813109e-01, -3.343464102149112e-01, -3.385181940371442e-01, -7.629012970698616e-02, -4.817283112548602e-02, -4.225785415921631e-02, -7.041430982614796e-02, -1.103518936032170e-01, -2.231303934166744e-01, -1.103518936032207e-01, -5.660305620762313e-02, -3.175843665984835e-02, -3.243982567649080e-02, -7.757086869624100e-02, -5.747731313973022e-02, -2.561240976337793e-02, -2.849126049329206e-02, -3.545039748145319e-01, -3.556868370903962e-01, -4.063835531885383e-02, -3.783762249802181e-02, -4.063835531885936e-02, -3.783762249802450e-02, -5.218003322752495e-07, -3.080317422493494e-06, -5.782637526013041e-06, -6.049583247929242e-06, -2.415443886113783e-06, -2.866990313570649e-06, -1.293276821871255e-02, -7.213512247365613e-03, -2.578725462926498e-06, -6.650465182652238e-06, -2.578725462926340e-06, -6.650465182652072e-06, 6.543970856751764e-02, 5.036204641025924e-02, 2.276296841596887e-01, 2.345523597195493e-01, 1.131062633946025e-01, 1.133331093080409e-01, 9.113226096389171e-02, 1.969330124450238e-01, 1.079070081611988e-01, 1.054666053284660e-01, 1.079070081611988e-01, 2.293452237143015e-01, 1.266916332974723e-01, 1.130276210908342e-01, -4.066440660038803e-02, -2.508949348364607e-01, -8.692309314812179e-02, -1.826215824312628e-01, -2.752499923693504e-01, -2.764776374470282e-01, -1.897749538139518e-01, -1.960108166715678e-01, -1.897749538139515e-01, -2.267957838143023e-01, -2.666369708030034e-01, -3.279765522431761e-01, -1.186679873171323e-01, -1.211007611462254e-01, -5.648065519639311e-02, -1.782075909957630e-01, -1.772594516319617e-01, -9.057522696361936e-02, -1.409002962023666e-01, -1.390076959008455e-01, -1.409002962023666e-01, -9.791859302117376e-02, -6.779957528175919e-02, -6.141347001171370e-02, -1.238740399788139e-03, -1.264218159645987e-03, -8.693998864729251e-03, -9.245130880845123e-03, -5.490830886877074e-02, -3.785750108138290e-02, -1.772996524068362e-02, -1.953570012571018e-02, -1.772996524068486e-02, -1.953570012570718e-02, -1.682677244858190e-05, -1.873767657093083e-05, -1.129237073627985e-07, -1.136996899763474e-07, -1.806391323954275e-07, -2.173836906250115e-07, -1.262999901814898e-02, -1.342175541216128e-02, -2.189956806205240e-06, -5.125729490171121e-06, -2.189956806205034e-06, -9.820910457462810e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m11_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m11", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.693362183388144e-08, 0.000000000000000e+00, 1.693680604544177e-08, 1.693385795588373e-08, 0.000000000000000e+00, 1.693697695514089e-08, 1.693439973905954e-08, 0.000000000000000e+00, 1.693781268663948e-08, 1.693176864349708e-08, 0.000000000000000e+00, 1.190906066618446e-08, 1.693378519088000e-08, 0.000000000000000e+00, 1.191085459696467e-08, 1.190917094921367e-08, 0.000000000000000e+00, 1.191085459696467e-08, -1.658182932836340e-05, 0.000000000000000e+00, -3.188650687867624e-05, -1.657625064324813e-05, 0.000000000000000e+00, -1.658352924030748e-05, -1.646627356689073e-05, 0.000000000000000e+00, -1.644554021110006e-05, -1.650115949021760e-05, 0.000000000000000e+00, -1.650009954640566e-05, -1.660475151865228e-05, 0.000000000000000e+00, -1.639794018395644e-05, -3.193435090633254e-05, 0.000000000000000e+00, -1.639794018395644e-05, -2.169728929203790e-02, 0.000000000000000e+00, -2.227574815013589e-02, -2.154968904849372e-02, 0.000000000000000e+00, -5.973482369155824e-03, -4.992193028742882e-03, 0.000000000000000e+00, -4.928765841632024e-03, -5.342741332003822e-03, 0.000000000000000e+00, -2.087608269984430e-02, -2.217904436787805e-02, 0.000000000000000e+00, -1.586082373144806e-02, -6.032150218067817e-03, 0.000000000000000e+00, -4.730281652515492e-03, -3.930513059797198e-01, 0.000000000000000e+00, -3.485595961733722e-01, -5.152665411253111e-01, 0.000000000000000e+00, -3.530445900963187e-01, -1.755554695589170e-03, 0.000000000000000e+00, -3.099171686489622e-03, -3.159498440940545e-01, 0.000000000000000e+00, -3.848136032237477e-01, -3.108074584102947e-01, 0.000000000000000e+00, -5.601811333507044e-01, -3.108074584102948e-01, 0.000000000000000e+00, -1.533643716639247e+01, -3.684841902811071e-02, 0.000000000000000e+00, -4.173863165425717e-02, -9.744421548802075e+03, 0.000000000000000e+00, -4.867806995668360e-02, -2.795211832855857e+02, 0.000000000000000e+00, -5.846841128475881e-01, -9.787064959504167e-03, 0.000000000000000e+00, -9.561075549866783e-03, -2.789360976323349e-02, 0.000000000000000e+00, -1.550507688182696e-02, -2.789360976323349e-02, 0.000000000000000e+00, -1.550507688182704e-02, 5.608861282089325e-06, 0.000000000000000e+00, 5.614767105928614e-06, 5.697043317022931e-06, 0.000000000000000e+00, 5.700046844390006e-06, 5.614943151796069e-06, 0.000000000000000e+00, 5.618563595164509e-06, 5.690544768613300e-06, 0.000000000000000e+00, 5.695974218393576e-06, 7.065696477139014e-06, 0.000000000000000e+00, 5.657061847633911e-06, 5.652657872001889e-06, 0.000000000000000e+00, 7.071390179946694e-06, -1.746336296047827e-04, 0.000000000000000e+00, -1.747446576097304e-04, -1.697729797899868e-04, 0.000000000000000e+00, -1.699061615862897e-04, -1.775757339171929e-04, 0.000000000000000e+00, -1.770462444451353e-04, -1.744895509138151e-04, 0.000000000000000e+00, -1.734759448366681e-04, -1.686679073444065e-04, 0.000000000000000e+00, -3.930569143410397e-04, -1.686679073444065e-04, 0.000000000000000e+00, -1.719148857533217e-04, -9.436394189567834e-04, 0.000000000000000e+00, 2.957724477029682e-03, 1.241410822242295e-02, 0.000000000000000e+00, 1.297997347781661e-02, -2.237344269185845e-02, 0.000000000000000e+00, -1.292522963489556e-02, -3.542846968581694e-03, 0.000000000000000e+00, 2.920381926192319e-03, 5.077128979374879e-03, 0.000000000000000e+00, 4.171360893459292e-03, 5.077128979374883e-03, 0.000000000000000e+00, 5.450100776470640e-04, -6.264999569105876e-01, 0.000000000000000e+00, -6.093798785123684e-01, 1.937138584269416e-01, 0.000000000000000e+00, -2.815754126749299e-01, -7.982489764512953e-01, 0.000000000000000e+00, -7.116113279282874e-01, 6.013060710156396e-05, 0.000000000000000e+00, 6.051957586761936e-05, -3.917525179833209e-01, 0.000000000000000e+00, -4.557806831119948e-01, -3.917525179833202e-01, 0.000000000000000e+00, -4.557806831119990e-01, -5.284514091483627e+04, 0.000000000000000e+00, -3.984921672055946e-03, -8.596000052880623e-03, 0.000000000000000e+00, -7.808324620014099e-03, -3.460131561406290e-02, 0.000000000000000e+00, -4.258492685070264e-02, -1.035481485750922e+00, 0.000000000000000e+00, -7.614571921179764e+01, -6.807132117983749e-03, 0.000000000000000e+00, -4.068766623537650e-02, -6.807132117983714e-03, 0.000000000000000e+00, -4.068766623537642e-02, 3.808583615830800e-01, 0.000000000000000e+00, 3.884146314187467e-01, 1.225464574457058e-01, 0.000000000000000e+00, 1.266240637888857e-01, 1.978031477221696e-01, 0.000000000000000e+00, 2.037101180784861e-01, 2.719664335281508e-01, 0.000000000000000e+00, 2.588449852003756e-01, 2.317678465183785e-01, 0.000000000000000e+00, 2.376369156111223e-01, 2.317678465183785e-01, 0.000000000000000e+00, 2.198883306156373e-01, 3.580107571158143e-01, 0.000000000000000e+00, 3.678635173628440e-01, -1.729860626111070e-02, 0.000000000000000e+00, -2.180058814916793e-02, 8.906605690213067e-03, 0.000000000000000e+00, 1.897402393618900e-02, 2.467076888188556e-02, 0.000000000000000e+00, 2.459613399250019e-02, 1.828504533497202e-02, 0.000000000000000e+00, 1.844986588879191e-02, 1.828504533497199e-02, 0.000000000000000e+00, 2.866376504465800e-02, 7.856163933491521e-03, 0.000000000000000e+00, 1.290154495498205e-02, -1.619764201034203e-01, 0.000000000000000e+00, -1.597797366445516e-01, -4.859232356187783e-01, 0.000000000000000e+00, -1.341567978345558e-01, -2.889429556249039e-01, 0.000000000000000e+00, -1.181720209336414e-01, -1.536484719749184e-01, 0.000000000000000e+00, -1.552739619717541e-01, -1.536484719749187e-01, 0.000000000000000e+00, -4.889421097046699e-01, -4.174235709423934e-02, 0.000000000000000e+00, -3.833618294165139e-02, -2.910217336492178e+02, 0.000000000000000e+00, -2.868379259251327e+02, -7.038667089337656e-01, 0.000000000000000e+00, -7.595262320848988e-01, -1.298396225290140e-01, 0.000000000000000e+00, -9.219887963057075e-02, -1.116835237955127e+00, 0.000000000000000e+00, -1.027022953136847e+00, -1.116835237955128e+00, 0.000000000000000e+00, -1.027022953136853e+00, -5.217765232450133e+03, 0.000000000000000e+00, -4.856605092682723e+03, -7.163755398661640e-04, 0.000000000000000e+00, -7.164894526021287e-04, -1.072109759989771e+05, 0.000000000000000e+00, -9.476663257932779e+04, -4.277994885932348e+01, 0.000000000000000e+00, -3.903037849439848e+01, -1.575760111432196e-02, 0.000000000000000e+00, -3.545385212379362e-02, -1.575760111432196e-02, 0.000000000000000e+00, -3.470848629943330e+04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m11_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m11", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.323027811074319e-04, 2.336338799338536e-04, 2.324974670961877e-04, 2.337748707660038e-04, 2.330466622275781e-04, 2.345811459664590e-04, 2.308619037859681e-04, -6.188508746468029e-04, 2.324276573333382e-04, -6.177612195504438e-04, -6.181832841191248e-04, -6.177612195504438e-04, -1.162596192158706e-02, 2.672193108535560e-03, -1.163463427983509e-02, -1.162466854204716e-02, -1.180404852047169e-02, -1.183440833355512e-02, -1.174133133536061e-02, -1.174140332807129e-02, -1.160842810683859e-02, -1.189468107387984e-02, 2.673475554697244e-03, -1.189468107387984e-02, -2.578688283527892e-02, -2.529322297313443e-02, -2.591103665342947e-02, 7.052945824056510e-03, 9.190725160960192e-03, 9.160088112383020e-03, 9.036286400399191e-03, -2.653539929262426e-02, -2.480173086110970e-02, -2.549060624466563e-02, 6.338760816255978e-03, 8.265517770433431e-03, -3.211107107441502e-02, 9.864121795603756e-03, -3.451453897104047e-02, 1.296130778180507e-02, -3.215176227766973e-03, -1.710205194701849e-02, -1.193046695460390e-02, -1.423627844935775e-02, 3.326383322419196e-04, -3.135338251122251e-03, 3.326383322423553e-04, 2.431015677607517e-03, -2.485282966864240e-08, -3.379199691460419e-08, 2.919006149554181e-08, -4.648521247752138e-08, 6.249567327676078e-05, -9.886838906870637e-05, -1.430615876100487e-09, -1.328838127117861e-09, -1.334676876580278e-08, -1.365170592758740e-09, -1.334676876580278e-08, -1.365170593575933e-09, -1.961003174153931e-02, -1.962123383762035e-02, -2.068680466763437e-02, -2.066182258470834e-02, -1.968394355530020e-02, -1.966729548742803e-02, -2.060713563416458e-02, -2.061189800432125e-02, -7.813412437890445e-03, -2.013761897452428e-02, -2.014540329103592e-02, -7.807487742719681e-03, -1.117281456472667e-02, -1.133186788294944e-02, -1.268030119297603e-02, -1.279759036642350e-02, -9.843723725403706e-03, -1.037146703897488e-02, -1.114171828151651e-02, -1.169572959123415e-02, -1.305613509492632e-02, 2.521316407143570e-03, -1.305613509492632e-02, -1.225667427135360e-02, -1.179325303392530e-01, -4.375731507069704e-02, -1.158696858646471e-02, -9.991905122585720e-03, -6.436387805637064e-02, -9.272684656684541e-02, -1.192994446582809e-01, -1.209361900462992e-01, -1.084088321313550e-01, -4.609613683991322e-02, -1.084088321313542e-01, -1.202887827870282e-01, -3.103879460330124e-03, -3.188048356413781e-03, -1.192895509131447e-02, -1.640588891939496e-02, -2.297862297662450e-03, -2.795959583444198e-03, -4.143769770206773e-02, -4.141957065542097e-02, -6.172134117970371e-03, -1.043839686087726e-02, -6.172134117973405e-03, -1.043839686087610e-02, 2.223319889680763e-10, -2.758866774332757e-10, -1.119147079754921e-09, -1.063425507167900e-09, -1.884486598298381e-09, -2.755449970459840e-09, -7.416356476629642e-04, 6.888678780876885e-04, -3.946912439361671e-10, -6.119448499557487e-09, -3.946912438870046e-10, -6.119448498462148e-09, -1.036927879557357e+00, -9.941404300436922e-01, -1.036877317458232e+00, -1.061313038108838e+00, -6.783346961243947e-01, -6.778511140312634e-01, -6.316733730821074e-01, -1.264807735175739e+00, -6.725123209611840e-01, -6.644460206759725e-01, -6.725123209611840e-01, -1.271322233468088e+00, -1.203240013138963e+00, -1.172242824289760e+00, -1.072100775274225e-01, -1.327660790886896e-02, -1.241544639690688e-01, -5.811512158788207e-02, -1.138593052222826e-02, -1.163213189685125e-02, -6.923420608131693e-02, -6.546464430347634e-02, -6.923420608131635e-02, -2.970386666987744e-02, -5.212712285818664e-02, -1.116395290543682e-02, 7.398846522183323e-04, 1.462837112979195e-03, -4.500900175273129e-02, 1.561254089723713e-02, 4.860178367857418e-03, -4.043981548568681e-02, -5.404012703010930e-03, -6.152139060524756e-03, -5.404012703011026e-03, -2.766976172770898e-02, -6.949422459558668e-02, -7.656180556304502e-02, 6.004639032114496e-05, 6.082591050149050e-05, -2.386333970829457e-04, -2.861752894240518e-04, -7.527051360723958e-02, -1.111936526058699e-01, -1.872312625837629e-03, -2.548974164925323e-03, -1.872312625839043e-03, -2.548974164928838e-03, 6.422481589246643e-08, 7.558200757626556e-08, -1.814665100318915e-12, -1.827427038037628e-12, 1.577227401918039e-10, 2.273841167111550e-10, 1.475419467211981e-03, 1.650663853908703e-03, -7.766860332430410e-10, -4.104719386830711e-09, -7.766860337283058e-10, 3.686624447664825e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
