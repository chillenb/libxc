
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_m08_hx_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m08_hx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-8.648704868845948e+00, -8.648677427923189e+00, -8.648574853066483e+00, -8.649018383447157e+00, -8.648690295807317e+00, -8.648690295807317e+00, -1.564598478069059e+00, -1.564665888090386e+00, -1.566707024609928e+00, -1.566051555675099e+00, -1.564624642052472e+00, -2.199882549601914e+00, -2.500317272542482e-01, -4.569701084818608e-01, -4.521237784182264e-01, -4.527262210806473e-01, -4.570517592129236e-01, -4.570517592129236e-01, -1.273641858976546e-01, -1.284921912573606e-01, -2.680626889950101e-01, -8.169933935851974e-02, -1.277228306099519e-01, -1.277228306099519e-01, 6.575006357770256e-03, 6.808934806575516e-03, 1.641731470140235e-03, 3.493372212652152e-03, 6.736620614400664e-03, 6.736620614400867e-03, -1.785438956037249e+00, -1.784423151171159e+00, -1.785319917258088e+00, -1.761503051035005e+00, -1.784918672254976e+00, -1.784918672254976e+00, -8.293890326993005e-01, -8.462740942943097e-01, -8.221445757983300e-01, -8.355136953433856e-01, -8.502552982584811e-01, -1.280926577427064e+00, -2.917447752059024e-01, -2.343330300947644e-01, -3.243014083467693e-01, -2.595397735435604e-01, -2.658823796914809e-01, -2.541257456286931e-01, -1.561725983688811e-02, -1.258633216867935e-01, -1.569240602328259e-02, -8.357339877510006e-01, -6.833386514683612e-02, -6.833386514683612e-02, 3.981483559529970e-04, 3.829290608911773e-03, 2.863053388224027e-03, -4.903898756526256e-03, 4.135966409665930e-04, 3.494971030976956e-03, -2.339574705410009e-01, -2.447535854529565e-01, -1.083279546779615e-01, -2.546861294979486e-01, -2.562069339444584e-01, -2.562069339444584e-01, -2.468807724228539e-01, -2.656440136256019e-01, -2.180047936455018e-01, -1.962326436106218e-01, -2.052916063306077e-01, -2.206663367805694e-01, -2.611424784844871e-01, -8.148746482011630e-02, -1.866753651003527e-01, -1.500569543633693e-01, -2.045126120093459e-01, -2.045126120093453e-01, -2.058434804473459e-01, 5.176277534638188e-03, -8.146988514343256e-03, -2.077359499090068e-01, -1.195769669270660e-02, -4.156006908735356e-02, 7.839556986073741e-03, 1.069255349132670e-03, 2.017395592273302e-03, -3.959837272104304e-02, 2.978719886725625e-03, 2.978719886725806e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_m08_hx_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m08_hx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-8.539295443548086e+00, -8.538797266963305e+00, -8.536637525416804e+00, -8.544738192394371e+00, -8.539032885040355e+00, -8.539032885040355e+00, -2.549967515460405e+00, -2.549386036510340e+00, -2.531709808943603e+00, -2.538820489589511e+00, -2.549818290174471e+00, -1.584114153476932e+00, -3.846232462883226e-01, -4.230437171403827e-01, -4.554573900152916e-01, -4.360428525843642e-01, -4.225958954144054e-01, -4.225958954144054e-01, -1.297800390117600e-01, -1.263726113479058e-01, -5.743881675247383e-01, -1.210288331527585e-01, -1.287797980518273e-01, -1.287797980518273e-01, 7.335110647581608e-03, 7.447619579318750e-03, -3.436171836852315e-02, 4.559467472195244e-03, 7.365916938284910e-03, 7.365916938287969e-03, -2.067231300039634e+00, -2.081915850140960e+00, -2.068820268049114e+00, -2.983619213686518e-01, -2.074513943100893e+00, -2.074513943100893e+00, -1.563674746682994e+00, -1.579745203662774e+00, -1.552897585350260e+00, -1.571120899465454e+00, -1.581063790430586e+00, -1.225832146406716e+00, -1.546766706070701e-02, -2.294580467288851e-01, -1.068623467861987e-01, -5.195589619676878e-02, -7.175658530696118e-02, -2.841483996701797e-01, -2.971694002620003e-02, -1.857318025421279e-01, -2.903570760885978e-02, -2.596436589542647e-01, -9.816305907845607e-02, -9.816305907845607e-02, 5.140978404509525e-04, 4.958023245638508e-03, 3.694251787376852e-03, -1.683910639162293e-02, 5.323559915752522e-04, 4.535852471381969e-03, 1.898340141454352e-02, -3.323465237742744e-01, -7.465345025886326e-03, -1.288385485018659e-01, -1.862768023621224e-01, -1.862768023621224e-01, -1.229108726750060e-01, -1.955132788535554e-02, -1.108776241213345e-01, -1.997018208841335e-01, -1.817098427063772e-01, -2.616734911640521e-01, -1.954291309129242e-01, -1.562250597810365e-01, -1.704452065739533e-01, -2.813947916664243e-01, -2.063690156379457e-01, -2.063690156379459e-01, -3.094676717036950e-01, -2.481923513459788e-02, -5.756640107388848e-02, -1.359226400527563e-01, -2.479609674389565e-02, -7.037186722953960e-02, 9.001764432164404e-03, 1.422458078647542e-03, 2.659049046771686e-03, -6.724627519773368e-02, 3.881186861241679e-03, 3.881186861249187e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m08_hx_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m08_hx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([5.559401109311511e-09, 5.559507168496394e-09, 5.559925047855916e-09, 5.558202666158769e-09, 5.559457293330597e-09, 5.559457293330597e-09, -1.653977106324146e-05, -1.653720331748728e-05, -1.645667748295763e-05, -1.648280354252875e-05, -1.653874379445451e-05, -8.399022790197169e-06, -1.352484880756968e-02, -2.980055571563236e-03, -2.638930604977906e-03, -2.841621321689405e-03, -2.988500094676164e-03, -2.988500094676164e-03, -4.107595876157644e-01, -4.218104346191100e-01, -6.859158413006092e-03, -1.851004695222104e-01, -4.137194687940397e-01, -4.137194687940397e-01, 1.140137664810559e+01, 1.121443195944986e+01, 7.461403818558652e-01, 4.374242920537408e+00, 1.172756414755894e+01, 1.172756414755895e+01, -1.860046958523198e-07, -2.677438381641575e-07, -1.948935003760060e-07, -2.376801748003172e-07, -2.266101267721046e-07, -2.266101267721046e-07, -1.806193625794232e-04, -1.739184251532899e-04, -1.833425542934113e-04, -1.781507790035193e-04, -1.724445028287168e-04, -7.654235476676162e-05, -7.258882922762114e-03, 4.923076661978312e-03, -1.279717636791558e-02, -4.132378096514891e-03, -2.613235732105953e-03, -2.738024005644728e-03, -2.728013292580778e+01, -1.049974223687048e-01, -2.991007872858168e+01, -2.123410652698492e-05, -4.632899923491108e-01, -4.632899923491108e-01, 3.936726377972232e+06, 5.495924118906400e+00, 2.155998272339863e+01, -4.028773401886325e+01, 3.343836246768347e+06, 6.780586783971215e+00, -3.708074486613587e-01, -1.320940320430429e-01, -2.095923379730110e-01, -2.582079607185140e-01, -2.241258586047709e-01, -2.241258586047709e-01, -2.933932949877596e-01, -1.498437451061491e-02, -2.823984424388246e-04, 9.404150692079831e-03, 6.776718340324597e-03, 1.079172197792050e-02, 1.667701265195691e-03, -9.591895142890037e-01, -1.135957114615137e-01, -1.732898151806049e-01, -1.019720735157700e-01, -1.019720735157698e-01, -5.465519619717167e-02, 1.198262964385013e+00, -3.539421467346931e-01, -1.020873024728244e-01, -5.527970740051598e+01, -2.327636561667144e+00, 4.513622322836596e+00, 6.172585437454446e+00, 1.206855518173930e+01, -2.799393818316234e+00, 9.552949014961188e+00, 9.552949014961206e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m08_hx_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m08_hx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-1.754423128338447e-03, -1.754732577280798e-03, -1.756081329438212e-03, -1.751048770433209e-03, -1.754586171020820e-03, -1.754586171020820e-03, 3.491934469634173e-03, 3.487669708216032e-03, 3.356629380604811e-03, 3.407702686359322e-03, 3.490734569961334e-03, -1.188254103367662e-03, 4.790496214134534e-03, 4.997348442278973e-03, 5.747940487008202e-03, 5.180004598645560e-03, 5.010273692945520e-03, 5.010273692945520e-03, 2.098378229791846e-02, 1.909335205003303e-02, 9.438348497187145e-03, 1.807158715851757e-02, 2.039164160796378e-02, 2.039164160796378e-02, 1.374422899034382e-03, 1.561971226613545e-03, 2.460577194235204e-02, 5.552537134482700e-05, 1.583055691491272e-03, 1.583055691484590e-03, -3.848203667857018e-03, -3.356121205540808e-03, -3.794875178811804e-03, -2.973188727608642e-02, -3.604188844036478e-03, -3.604188844036478e-03, 8.791569910250879e-03, 8.897935888624905e-03, 8.664557357857422e-03, 8.856978636916387e-03, 8.886191673141726e-03, 5.317289155309577e-03, -1.216842538930252e-01, -8.645860934102279e-02, -6.427540139201464e-02, -1.281986835134227e-01, -1.198105093698715e-01, -2.598071689541481e-02, 5.327077812279492e-03, 2.743023391303212e-02, 5.264552977504950e-03, -3.712689578921121e-02, 2.186615788808494e-02, 2.186615788808494e-02, 1.441525748099051e-05, 9.373149686030674e-05, 1.549904451657707e-04, 6.321828174291874e-03, 1.659007484538772e-05, 8.740833384422572e-05, 5.283392406673841e-01, 7.225880584073888e-01, -3.810265465964702e-01, 6.971276668886526e-01, 7.412672741543552e-01, 7.412672741543552e-01, 7.168692028258661e-01, -1.268267140117734e-01, -1.245059279657936e-01, -1.018363706103130e-01, -1.022098745008449e-01, -2.681358547934814e-02, -8.775563673335826e-02, 2.789978395506989e-02, 1.357566175281980e-02, 4.976410509346760e-02, 3.564714717775026e-02, 3.564714717775089e-02, 1.649524191750881e-02, 1.988976678446465e-02, 3.204029249272185e-02, -2.666880260517847e-02, 6.933659240920295e-03, 4.068013076207527e-02, 8.688827778368727e-04, 2.140991955521500e-06, 2.878501857755866e-05, 4.264260013681527e-02, 7.549375489254038e-05, 7.549375489365532e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
