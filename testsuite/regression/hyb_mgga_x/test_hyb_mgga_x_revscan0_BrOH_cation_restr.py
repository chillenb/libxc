
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_revscan0_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revscan0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.739214724398851e+01, -1.739219873599623e+01, -1.739246288411194e+01, -1.739169744884430e+01, -1.739209349077955e+01, -1.739209349077955e+01, -2.518678988098051e+00, -2.518784142312016e+00, -2.521866294570350e+00, -2.522845317107946e+00, -2.521628999824186e+00, -2.521628999824186e+00, -4.413971499360790e-01, -4.408676292421557e-01, -4.291138046694384e-01, -4.385433062049646e-01, -4.357449207012731e-01, -4.357449207012731e-01, -1.352068926345811e-01, -1.367617566669345e-01, -4.829058978546137e-01, -8.467974548574934e-02, -1.037584666444054e-01, -1.037584666444054e-01, -1.919608518389341e-03, -2.063855134681180e-03, -1.776690516812343e-02, -8.964581202654501e-04, -1.254837415352197e-03, -1.254837415352197e-03, -4.251079618888036e+00, -4.251907635302615e+00, -4.251135069373955e+00, -4.251865371320115e+00, -4.251490408743914e+00, -4.251490408743914e+00, -1.561199822236613e+00, -1.577929313849173e+00, -1.555880242546076e+00, -1.570773366608779e+00, -1.573149331340573e+00, -1.573149331340573e+00, -4.633697970069235e-01, -5.034139749002460e-01, -4.078757765002573e-01, -4.167578441957154e-01, -4.725398983206589e-01, -4.725398983206589e-01, -5.497867448817361e-02, -1.297023291506231e-01, -5.024054707573987e-02, -1.436046298711875e+00, -7.002388492762415e-02, -7.002388492762419e-02, -6.425293515213627e-04, -8.823907285333561e-04, -7.249587285537459e-04, -3.194441541688027e-02, -8.716943418818925e-04, -8.716943418818925e-04, -4.800785562187895e-01, -4.773690174407323e-01, -4.783297291104570e-01, -4.791148154251770e-01, -4.787216621184974e-01, -4.787216621184974e-01, -4.653274103859937e-01, -3.992173606379658e-01, -4.183682750385538e-01, -4.371893999003935e-01, -4.274668944023350e-01, -4.274668944023349e-01, -5.209839558122493e-01, -1.716708044254800e-01, -2.047936719059146e-01, -2.637882150707443e-01, -2.349680995622713e-01, -2.349680995622713e-01, -3.588812053210585e-01, -1.684810068613403e-02, -2.439739398492480e-02, -2.595836683067664e-01, -4.305333126885579e-02, -4.305333126885579e-02, -2.979792729394985e-03, -1.626997799765296e-04, -4.299554912357195e-04, -4.069350114286943e-02, -8.008662580088957e-04, -8.008662580088952e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_revscan0_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revscan0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.270593288232262e+01, -2.270601160835769e+01, -2.270637056278085e+01, -2.270519987599739e+01, -2.270581200836762e+01, -2.270581200836762e+01, -3.571030305359996e+00, -3.571611134482104e+00, -3.586958222105324e+00, -3.587277388934053e+00, -3.584401856245025e+00, -3.584401856245025e+00, -6.253572344135674e-01, -6.240289412600893e-01, -5.974718833434882e-01, -6.177663440764726e-01, -6.119680873265065e-01, -6.119680873265065e-01, -1.342253800073334e-01, -1.359643881977650e-01, -6.252698689956833e-01, -1.049169286138922e-01, -8.896031880918012e-02, -8.896031880918009e-02, -2.734624716214308e-03, -3.443622286172578e-03, -2.784216300454025e-02, -1.651183275364254e-03, -2.281308687823106e-03, -2.281308687823107e-03, -5.571358067278155e+00, -5.573069168335046e+00, -5.571443288084967e+00, -5.572953535502494e+00, -5.572222117170124e+00, -5.572222117170124e+00, -1.937980722862579e+00, -1.965686629937764e+00, -1.925123397143310e+00, -1.950475946059435e+00, -1.959899043036226e+00, -1.959899043036226e+00, -6.163723717010077e-01, -6.954541408205205e-01, -5.720432485775820e-01, -6.418512144683414e-01, -6.292664430039013e-01, -6.292664430039013e-01, -7.479593491531321e-02, -5.830702585489125e-02, -7.031068454638537e-02, -2.193339839222748e+00, -5.333136906648983e-02, -5.333136906648960e-02, -1.192176284993609e-03, -1.624473453759327e-03, -1.323968631518709e-03, -4.753692743032618e-02, -1.592611443573044e-03, -1.592611443573044e-03, -6.407026985347086e-01, -6.333691374602937e-01, -6.358941303739802e-01, -6.380220194534224e-01, -6.369525304202099e-01, -6.369525304202099e-01, -6.252055337317437e-01, -5.096690006208500e-01, -5.419324583338561e-01, -5.743414455807032e-01, -5.577263339670001e-01, -5.577263339670000e-01, -7.341540225245441e-01, -1.701496256461664e-01, -2.211835010983321e-01, -3.399768612797478e-01, -2.787541643147728e-01, -2.787541643147727e-01, -4.585582526194192e-01, -2.409802680680179e-02, -3.735435842563986e-02, -3.417192251497423e-01, -5.758751164878520e-02, -5.758751164878523e-02, -5.271192646692377e-03, -3.085195930302089e-04, -8.016047020529581e-04, -4.201275491554014e-02, -1.464283897446478e-03, -1.464283897446477e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_revscan0_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revscan0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.062022864622670e-09, -4.061984684305324e-09, -4.061658123129172e-09, -4.062222105173288e-09, -4.061948989491802e-09, -4.061948989491802e-09, -1.315019412505936e-05, -1.316983293764257e-05, -1.368935170028514e-05, -1.373876713190477e-05, -1.363251188266159e-05, -1.363251188266159e-05, -4.060604476382105e-03, -4.030467428711037e-03, -3.433265403193614e-03, -4.193159879356079e-03, -3.949444165033727e-03, -3.949444165033727e-03, -1.136627675078889e+00, -1.168120388982176e+00, -1.147294581897708e-03, -8.101618447179257e-01, -2.309045532127950e+00, -2.309045532127950e+00, -1.539205025762801e+02, 3.311392617203715e+01, 1.464901174546020e+00, 3.323972993002610e+02, 2.498677687914795e+02, 2.498677687914799e+02, -1.143231483104708e-06, -1.143560983755555e-06, -1.143147913848305e-06, -1.143442863237544e-06, -1.143448974025194e-06, -1.143448974025194e-06, -6.630483173797940e-05, -6.064409827836471e-05, -6.437101012771954e-05, -5.928641015537268e-05, -6.393120642409460e-05, -6.393120642409460e-05, -1.208050648714198e-02, -1.001458424991083e-02, -2.680734594048612e-02, -2.878399134564428e-02, -1.093036814003832e-02, -1.093036814003832e-02, -5.599816051989401e-01, -1.684186344686391e+00, -4.058191963612525e-01, -2.078808623806712e-04, -4.011688706383036e+00, -4.011688706383062e+00, 6.123472104122595e+02, 3.798649125134349e+02, 1.695571758546884e+03, 1.369040122232968e-01, 7.980132972977190e+02, 7.980132972977181e+02, -8.598580548490130e-03, -8.333741092567371e-03, -8.422073641611917e-03, -8.500317398726564e-03, -8.461082955680300e-03, -8.461082955680300e-03, -1.047668230737430e-02, -1.315639770535135e-02, -1.194244128059312e-02, -1.116734230219660e-02, -1.160947480062921e-02, -1.160947480062921e-02, -9.726578585191324e-03, -4.020897161598994e-01, -2.548750519324130e-01, -1.333741717136422e-01, -1.666953349913688e-01, -1.666953349913689e-01, -2.877553239850211e-02, -2.934939623599267e+00, 5.761225647378974e-01, -1.352161977738078e-01, -1.462683765386513e+00, -1.462683765386509e+00, 6.117718249994672e+01, 9.008341790883094e+03, 1.684016520493001e+03, -5.534397363322604e+00, 1.042219499391835e+03, 1.042219499391838e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_revscan0_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revscan0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_revscan0_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revscan0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [6.571476509033660e-04, 6.571466144708920e-04, 6.571229091080658e-04, 6.571377641085844e-04, 6.571327105621719e-04, 6.571327105621719e-04, 7.777377551343328e-03, 7.790726067929923e-03, 8.146235765983844e-03, 8.193441287126917e-03, 8.111622534068377e-03, 8.111622534068377e-03, 1.438070265749708e-02, 1.425571523819136e-02, 1.207793442584047e-02, 1.609192495940145e-02, 1.475479175630722e-02, 1.475479175630722e-02, 9.801942003711434e-02, 1.049598765169729e-01, 1.752265562147105e-03, 3.218850159872661e-02, 1.212877972613062e-01, 1.212877972613062e-01, 9.923126337169929e-04, 3.643544437020815e-04, 9.982403053884941e-04, 6.468525847193630e-07, 5.231381902165579e-06, 5.231381902165403e-06, 2.677536538234809e-03, 2.679112884673653e-03, 2.677431490506552e-03, 2.678830566944511e-03, 2.678426416387483e-03, 2.678426416387483e-03, 8.259583770733424e-03, 7.759433762453962e-03, 7.933047195882713e-03, 7.485813798593775e-03, 8.124269720062168e-03, 8.124269720062168e-03, 3.780911453323151e-02, 3.803138355396989e-02, 6.401861805906083e-02, 7.152767101649900e-02, 3.586762641191862e-02, 3.586762641191862e-02, 9.888833461060953e-03, 1.429696403412890e-01, 7.007405966618965e-03, 2.035376400911738e-02, 8.190204132159534e-02, 8.190204132159583e-02, 1.796029195564660e-08, 1.224671399005967e-07, 1.615738036532496e-06, 2.540816922916021e-03, 3.960257397043603e-07, 3.960257397043638e-07, 2.764520363356497e-02, 2.677441077898260e-02, 2.706869407923526e-02, 2.732266867938784e-02, 2.719540131536289e-02, 2.719540131536289e-02, 3.042725385474700e-02, 2.662564336178992e-02, 2.728342752551971e-02, 2.835098660461261e-02, 2.794025879077336e-02, 2.794025879077337e-02, 4.188657881065282e-02, 7.057092356829139e-02, 7.652287995480121e-02, 8.801957777961855e-02, 7.498984185533455e-02, 7.498984185533462e-02, 4.329651945509805e-02, 3.613698385003744e-03, 1.460599756477199e-03, 7.937231913844735e-02, 1.229266276209750e-02, 1.229266276209747e-02, 1.758027911173326e-06, 2.709020444323346e-10, 9.296017915428837e-07, 3.100495997411976e-02, 7.748285216714636e-07, 7.748285216714593e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
