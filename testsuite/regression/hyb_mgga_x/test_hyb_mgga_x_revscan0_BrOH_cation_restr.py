
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_revscan0_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revscan0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.631270106779926e+01, -1.631279859639057e+01, -1.631322526787592e+01, -1.631177777688773e+01, -1.631253720512960e+01, -1.631253720512960e+01, -2.303681569908983e+00, -2.303834464324225e+00, -2.307918215592823e+00, -2.306473847487813e+00, -2.306388886799385e+00, -2.824744081451052e+00, -3.880933457421735e-01, -5.395636220382257e-01, -5.239397301505566e-01, -5.289094726025880e-01, -5.278446457954497e-01, -5.278446457954497e-01, -1.383333882259158e-01, -1.405905136528335e-01, -4.339659403308143e-01, -1.021011718984721e-01, -1.163079275366699e-01, -1.163079275366699e-01, -2.449944186658091e-03, -2.634097390587726e-03, -2.237915386512434e-02, -1.124259138211550e-03, -1.588215183476461e-03, -1.588215183476461e-03, -4.251765178580906e+00, -4.252585400430585e+00, -4.251806345423349e+00, -4.091891762775409e+00, -4.252179164472862e+00, -4.252179164472862e+00, -1.237512648143631e+00, -1.257029618932854e+00, -1.223133584971459e+00, -1.240068475792929e+00, -1.255561382999660e+00, -1.597753523335572e+00, -4.779663725782600e-01, -5.202552378104665e-01, -4.413992840620956e-01, -4.597676608679038e-01, -4.858856830331449e-01, -4.216208030293708e-01, -4.876503674540304e-02, -1.367867183234970e-01, -4.506798157197713e-02, -1.564861720756265e+00, -8.224435531082325e-02, -8.224435531082325e-02, -1.424173805013356e-03, -1.076585819879496e-03, -9.069022044997080e-04, -3.021183836061739e-02, -1.662217002515061e-03, -1.070926013302606e-03, -4.817416834988084e-01, -4.789093113189872e-01, -4.730201986134668e-01, -4.807327939459483e-01, -4.803222765306179e-01, -4.803222765306179e-01, -4.686770290521245e-01, -4.006822888101667e-01, -4.203225796945146e-01, -4.396791726278920e-01, -4.298114864876318e-01, -3.932249437679030e-01, -5.451844981755126e-01, -1.218146529810434e-01, -2.114966596430414e-01, -2.189361471116890e-01, -2.442858204746511e-01, -2.442858204746511e-01, -3.037303996067202e-01, -2.123529752506209e-02, -3.064024763695243e-02, -2.723528166443375e-01, -3.858645965473170e-02, -5.325972268843097e-02, -3.652234346290694e-03, -1.699646519431196e-04, -5.443778033189202e-04, -4.973636452133741e-02, -9.950394389900540e-04, -9.950394389899430e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_revscan0_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revscan0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.454807577162030e+01, -2.454805583586578e+01, -2.454802395112373e+01, -2.454831365529885e+01, -2.454815377908000e+01, -2.454815377908000e+01, -4.012805766755481e+00, -4.013186167074577e+00, -4.023023874660882e+00, -4.019474268746119e+00, -4.019441380689962e+00, -3.558409544056116e+00, -5.953806926036767e-01, -6.400755843568700e-01, -6.095008600489425e-01, -6.211367099085960e-01, -6.185877030186752e-01, -6.185877030186752e-01, -1.529570688915428e-01, -1.571397358640664e-01, -6.152129937835679e-01, -7.492950721491537e-02, -1.096553664948382e-01, -1.096553664948383e-01, 6.120534273350309e-01, 5.813096802102469e-01, 1.971259132122948e-01, 9.885595953587373e-01, 7.481593373238805e-01, 7.481593373238805e-01, -5.571096372102772e+00, -5.572806487597242e+00, -5.571186889982313e+00, -5.809404237765165e+00, -5.571957148659513e+00, -5.571957148659513e+00, -2.059779734497390e+00, -2.111662521792833e+00, -2.022867213484119e+00, -2.066104441784324e+00, -2.108030259389134e+00, -1.993632536613102e+00, -6.137449978354210e-01, -6.782609471564618e-01, -5.594942353109806e-01, -5.906435753166616e-01, -6.258340317595537e-01, -6.937133238513642e-01, -6.565544926522081e-02, -1.308823806448296e-01, -6.059888024690444e-02, -2.019129832723655e+00, -4.404673793339704e-02, -4.404673793339726e-02, -1.898914879065803e-03, 1.053779276164408e+00, 5.332040932917339e-01, -4.045256089563153e-02, -2.216341484815094e-03, 7.005790375718007e-01, -6.387812808969854e-01, -6.320240040678856e-01, -6.436130754044928e-01, -6.363236928752674e-01, -6.353387073975802e-01, -6.353387073975802e-01, -6.210296411939784e-01, -5.107871033802760e-01, -5.423664389389871e-01, -5.735409448582671e-01, -5.576154249594658e-01, -6.211267550884706e-01, -7.080474160226855e-01, -1.731304874589442e-01, -2.466830037728232e-01, -3.629060407174344e-01, -2.971096586783626e-01, -2.971096586783626e-01, -5.297672838335852e-01, 2.055439637312218e-01, 1.490163182636528e-01, -3.442328193936939e-01, -5.186615937001671e-02, 2.476497744229149e-02, 6.607752179253020e-01, 2.108122965123520e+00, 9.040849969692328e-01, 3.158925456439165e-02, 6.367833295839656e-01, 6.367833295857140e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_revscan0_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revscan0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.221347455477982e-08, -1.221299495058151e-08, -1.221095908852424e-08, -1.221807047447539e-08, -1.221433044377332e-08, -1.221433044377332e-08, -1.574980622041503e-05, -1.575389680006112e-05, -1.585791431563835e-05, -1.581079490885856e-05, -1.582246445151799e-05, -4.601956379046135e-06, -7.884060461486373e-03, -3.096887725402878e-03, -3.414050789265917e-03, -3.318064846873056e-03, -3.337856572999297e-03, -3.337856572999297e-03, -6.749508254803943e-01, -6.374135432575636e-01, -4.342014246074714e-03, -1.951390879532587e+00, -1.246803880057411e+00, -1.246803880057407e+00, -2.407202038764269e+05, -2.003350603872958e+05, -3.298824901679811e+02, -1.720087226551032e+06, -7.754874042880831e+05, -7.754874042880831e+05, -1.137834571731805e-06, -1.138224420735934e-06, -1.137863434310002e-06, -2.554147547554103e-06, -1.138026362913006e-06, -1.138026362913006e-06, -1.208094155768823e-04, -1.232135485083457e-04, -1.193286517702925e-04, -1.209079774283669e-04, -1.231883815088712e-04, -4.375809999190971e-05, -6.094265014532363e-03, -4.842928765723966e-03, -7.887132350986759e-03, -7.136415490591527e-03, -5.812043609084503e-03, -2.360796478770605e-02, -2.413410693934990e+01, -6.555064198187616e-01, -3.300129232866992e+01, -5.463454499920154e-05, -4.385169819293470e+00, -4.385169819293461e+00, -3.259833976718662e+07, -1.844851243790332e+06, -5.944472880800728e+06, -1.621623863192771e+02, -1.756740803239730e+07, -2.766615592898896e+06, -7.811778415330303e-03, -7.606540562352078e-03, -1.099362323401044e-02, -7.732780075236995e-03, -7.702163632974130e-03, -7.702163632974130e-03, -8.657047778827469e-03, -1.189387055408641e-02, -1.049988319825930e-02, -9.541818645548634e-03, -9.982926859159693e-03, -3.913901869054630e-02, -3.888982914762714e-03, -7.043449607032557e-01, -1.289032997353947e-01, -1.187345081592672e-01, -7.615626826956885e-02, -7.615626826956896e-02, -5.659038905647822e-02, -3.899293832203430e+02, -1.188763822406870e+02, -5.384817602990837e-02, -6.137466405893841e+01, -2.045481978974933e+01, -6.407775441773522e+04, -2.134531784030866e+08, -1.677613188346005e+07, -2.619444683231266e+01, -3.789520276185402e+06, -3.789520276195798e+06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_revscan0_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revscan0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.640442979764083e-03, 1.640396744166135e-03, 1.640206558946162e-03, 1.640891405085252e-03, 1.640530388025090e-03, 1.640530388025090e-03, 7.076393223146511e-03, 7.079543877518963e-03, 7.160828542994753e-03, 7.127727897829795e-03, 7.132044592883811e-03, 3.344593928942351e-03, 7.437202983822780e-03, 1.611197628207630e-02, 1.635567829391318e-02, 1.630908747025781e-02, 1.631727688555244e-02, 1.631727688555244e-02, 6.025952419771641e-02, 5.959267307637992e-02, 1.484630168179298e-03, 7.455955625515259e-02, 6.816070118086300e-02, 6.816070118086290e-02, 8.378801925863137e-01, 8.131659805932004e-01, 2.269977319215978e-01, 1.152765795126495e+00, 1.031350118664692e+00, 1.031350118664692e+00, 2.667652854760897e-03, 2.669341498244823e-03, 2.667753779380063e-03, 5.129955754025949e-03, 2.668496588171632e-03, 2.668496588171632e-03, 7.896157100915763e-03, 8.624099328940201e-03, 7.389775594224286e-03, 7.972563764650227e-03, 8.582357656750313e-03, 5.790783182260239e-03, 2.106612731196739e-02, 2.104778648219199e-02, 2.176532479413762e-02, 2.194391439171270e-02, 2.101880456265651e-02, 6.129660236446601e-02, 3.468806175873269e-04, 5.815471228630188e-02, 2.819569770217380e-04, 6.583519697225926e-03, 8.999862104922463e-02, 8.999862104922450e-02, 9.567284137900541e-09, 1.155077612822093e+00, 1.664178050056291e+00, 1.058455463589413e-04, 6.030648694721352e-08, 1.354092136743592e+00, 2.571380533121875e-02, 2.497682353404814e-02, 3.338729549271301e-02, 2.543952466672270e-02, 2.533103545792823e-02, 2.533103545792823e-02, 2.629889681526942e-02, 2.442166770359882e-02, 2.451673933512151e-02, 2.500062492735756e-02, 2.470220211531223e-02, 7.748345127125236e-02, 1.959999673053565e-02, 5.729096677991669e-03, 4.058958960209322e-02, 4.247182789720787e-02, 3.645656326701457e-02, 3.645656326701460e-02, 5.781954122511439e-02, 2.351199116888441e-01, 1.825594636298672e-01, 3.498958310251280e-02, 3.034470023057551e-04, 1.269241584854237e-01, 6.271066733041589e-01, 2.552127571568810e+00, 1.855243827784426e+00, 1.343620711338002e-01, 1.469440149585107e+00, 1.469440149589132e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
