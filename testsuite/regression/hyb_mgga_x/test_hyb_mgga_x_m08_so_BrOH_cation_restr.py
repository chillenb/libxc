
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_m08_so_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m08_so", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-6.586746529100780e+00, -6.586642755939473e+00, -6.586289956293526e+00, -6.587825985881682e+00, -6.587006054478852e+00, -6.587006054478852e+00, -1.758924281849439e+00, -1.758723772318102e+00, -1.753549215029473e+00, -1.757035724050436e+00, -1.755965055127176e+00, -1.755965055127176e+00, -3.776817059611772e-01, -3.782787189260127e-01, -3.949803417344732e-01, -3.980843534305230e-01, -3.962253339741525e-01, -3.962253339741525e-01, -1.325882671860457e-01, -1.335776429342164e-01, -4.193191346943110e-01, -1.022027734136729e-01, -1.134067695330875e-01, -1.134067695330871e-01, -6.657719991163888e-03, -7.010726200192613e-03, -4.091102003306837e-02, -3.835925795036449e-03, -4.824231031689941e-03, -4.824231031689941e-03, -1.264613420923903e+00, -1.260093524277132e+00, -1.264426718342510e+00, -1.260436372745078e+00, -1.262279898146329e+00, -1.262279898146329e+00, -1.221476873724969e+00, -1.211573804312366e+00, -1.237029258670786e+00, -1.229874454055850e+00, -1.207730536344483e+00, -1.207730536344483e+00, -2.237711394574237e-01, -1.521839402952070e-01, -2.574089568659029e-01, -2.130707671699224e-01, -2.164752561110750e-01, -2.164752561110750e-01, -9.120023035241916e-02, -1.343868465377448e-01, -8.812568106525538e-02, -6.710204951158477e-01, -8.837608420581590e-02, -8.837608420581740e-02, -2.958455994603773e-03, -3.749886545990924e-03, -2.868926008702383e-03, -6.683010553878078e-02, -3.455918252135378e-03, -3.455918252135435e-03, -1.635368837426243e-01, -1.688943918128980e-01, -1.859710331938966e-01, -1.886242209595354e-01, -1.892537186530600e-01, -1.892537186530600e-01, -1.657805071245410e-01, -2.199231221703884e-01, -1.839907520641048e-01, -1.508637242558020e-01, -1.756565155856969e-01, -1.756565155856968e-01, -1.963587311274761e-01, -1.690082378489435e-01, -1.918453310162826e-01, -2.067067093633294e-01, -2.031183718225358e-01, -2.031183718225361e-01, -2.392149291629029e-01, -3.898832600461861e-02, -5.417515627432951e-02, -1.696856613694060e-01, -7.669765150791887e-02, -7.669765150792161e-02, -9.415519490652646e-03, -1.001466685345656e-03, -2.102980311953519e-03, -7.406035847966008e-02, -3.197729817917201e-03, -3.197729817917193e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_m08_so_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m08_so", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-6.001536319134103e-01, -5.994827770771359e-01, -5.970113393803982e-01, -6.069516240254748e-01, -6.016700764332187e-01, -6.016700764332187e-01, -7.767137343196607e-01, -7.759236968553077e-01, -7.546166587666870e-01, -7.573084670222558e-01, -7.594406786615804e-01, -7.594406786615804e-01, -2.929901046209358e-01, -2.916408716628996e-01, -2.786734576533244e-01, -2.870501497498918e-01, -2.839626388940922e-01, -2.839626388940922e-01, -1.372885551178658e-01, -1.330518647164750e-01, -3.435671668576570e-01, -1.103438094832150e-01, -1.418946490860294e-01, -1.418946490860597e-01, -8.927453666049400e-03, -9.407820977999035e-03, -5.803568456646679e-02, -5.123704873621037e-03, -6.452893444802003e-03, -6.452893444802004e-03, -5.239044581800308e-02, -9.571297289985921e-02, -5.493537351846593e-02, -9.314392184280222e-02, -7.380687961737964e-02, -7.380687961737964e-02, -4.833881806345217e-01, -3.804079428936123e-01, -5.506214532358573e-01, -4.599917488812472e-01, -3.933342520523428e-01, -3.933342520523428e-01, -1.022569319161208e-01, 1.493684415868519e-01, -5.681857075435583e-02, -1.106436581026018e-01, -1.368184452258915e-01, -1.368184452258915e-01, -5.778426101542013e-02, -1.716224352471792e-01, -6.307175126917851e-02, -3.098034400703081e-01, -6.881453948760252e-02, -6.881453948762986e-02, -3.949054648905416e-03, -5.008754699367117e-03, -3.835522665436471e-03, -8.138275662841792e-02, -4.619847277234288e-03, -4.619847277231534e-03, -1.056910397354375e-02, -3.888707989193143e-01, -3.245969920989680e-01, -1.984988754298673e-01, -2.686157257881986e-01, -2.686157257881986e-01, -1.068196124777103e-01, 2.830202009638460e-02, -1.490191514135640e-01, 4.588420786654527e-02, -1.083414084521158e-01, -1.083414084521137e-01, 3.679426954625954e-02, -1.832322196433850e-01, -1.668693198107858e-01, -1.114029614667220e-01, -1.543365036666477e-01, -1.543365036666462e-01, -7.935363335030161e-03, -5.523361152239176e-02, -7.523466476847496e-02, -1.984139154296006e-02, -5.803219013282430e-02, -5.803219013284925e-02, -1.267086777004007e-02, -1.335618252229417e-03, -2.806543104419424e-03, -6.257361990698636e-02, -4.274462539029783e-03, -4.274462539029341e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m08_so_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m08_so", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.018391944102244e-08, -1.018485198226035e-08, -1.018845333575287e-08, -1.017465673520405e-08, -1.018196138099097e-08, -1.018196138099097e-08, -8.389465798157832e-06, -8.384326853643743e-06, -8.246133734644730e-06, -8.284989312790007e-06, -8.290222281299204e-06, -8.290222281299204e-06, -9.100440272965939e-03, -9.076779315689553e-03, -8.237751038232403e-03, -8.118805868080144e-03, -8.208103911177321e-03, -8.208103911177321e-03, -3.913336093689349e-01, -4.221491020394211e-01, -4.865294167454069e-03, -2.637309410319361e-01, -2.808010953111820e-01, -2.808010953111797e-01, 5.142941730443697e+00, 5.419541556892819e+00, 1.766596778456059e+00, 4.738591159642279e+00, 5.991684439177428e+00, 5.991684439177446e+00, -6.716620805677289e-06, -6.789530963213933e-06, -6.720698747033558e-06, -6.785021450737221e-06, -6.753257685023436e-06, -6.753257685023436e-06, -8.010890535973915e-05, -7.523042064452244e-05, -8.150638756493821e-05, -7.752987361063774e-05, -7.645755916380630e-05, -7.645755916380630e-05, -5.576655344197763e-04, -1.819320204380154e-02, -9.191957735341453e-03, -1.311605375924626e-04, -7.490343590713220e-04, -7.490343590713220e-04, -1.122519512879969e+00, -1.280426695764719e-01, -1.217226827387374e+00, -1.329109521830154e-05, -7.088201612378168e-01, -7.088201612378277e-01, 6.261044832299349e+00, 5.580049425560158e+00, 3.492866339229020e+01, -2.005802766587754e-01, 1.626780206869816e+01, 1.626780206869809e+01, -2.911925095052156e-02, -6.032614105144329e-02, -5.515459765886725e-02, -4.647743437857539e-02, -5.138346921820555e-02, -5.138346921820555e-02, -4.179304674153222e-02, -6.394148139701632e-03, -2.899099694579218e-03, -3.427208482098108e-02, -1.295346012165892e-02, -1.295346012165890e-02, -7.494686946355474e-03, -1.290868172637098e-01, -1.407923912412266e-01, -9.624166819376540e-02, -1.391127212512428e-01, -1.391127212512427e-01, -2.161441723722704e-02, 1.698940153001638e+00, 9.511591271438192e-01, -7.221180099082827e-02, -1.994834232935003e+00, -1.994834232935033e+00, 4.114230978900849e+00, 2.750853516298879e+01, 1.327980938843343e+01, -1.927599856369839e+00, 2.054436307881162e+01, 2.054436307881165e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m08_so_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m08_so", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-2.439044295291575e-03, -2.439239673740956e-03, -2.439862636086007e-03, -2.436964710971093e-03, -2.438518487434009e-03, -2.438518487434009e-03, -7.851380974070414e-03, -7.860511031008901e-03, -8.105238084806905e-03, -8.044912413172225e-03, -8.035706040203591e-03, -8.035706040203591e-03, 4.252892640857051e-03, 4.133481221930090e-03, 2.304546002870626e-03, 3.141851585960197e-03, 2.899870221674728e-03, 2.899870221674728e-03, 1.213530839436249e-02, 1.144909919805858e-02, 1.887356906683875e-03, -4.036747953260839e-03, 1.229121852619085e-02, 1.229121852619038e-02, 1.279471241856336e-05, 1.547382217000238e-05, 3.160977888393991e-04, 1.850957502509835e-06, 5.070048825293989e-06, 5.070048825293989e-06, 3.841454212917293e-04, 1.192265788098289e-03, 4.322791896490492e-04, 1.145023497014924e-03, 7.839170424553132e-04, 7.839170424553132e-04, -8.746114189890998e-03, -1.142970485519850e-02, -7.101547099652987e-03, -9.368851834433463e-03, -1.109706207076721e-02, -1.109706207076721e-02, -8.312103540722358e-02, -2.085827780208814e-01, -8.289830319641803e-02, -8.224139203863282e-02, -6.825505818115439e-02, -6.825505818115439e-02, -1.664763987873787e-02, 1.151347828786630e-02, -1.470757904155315e-02, -2.760891497405763e-02, -1.552416619196269e-02, -1.552416619192310e-02, 5.906227262203736e-07, 1.528502907347335e-06, 5.496505043588062e-06, -4.021237974326035e-03, 3.689479739659363e-06, 3.689479738908105e-06, -7.903420396052293e-01, 5.917590575071711e-01, 4.071114741582864e-01, -2.749466870026206e-03, 2.342971610403492e-01, 2.342971610403492e-01, -4.011669643491879e-01, -1.410983176738632e-01, -5.495842464096629e-02, -1.366418420696303e-01, -5.862827546279870e-02, -5.862827546280003e-02, -1.398237153777925e-01, 1.021863153371207e-02, 9.692751574585955e-03, -2.965663233415118e-02, 1.054002585648177e-02, 1.054002585648035e-02, -1.046367551344596e-01, 3.741692184715576e-04, -3.411420218312329e-04, -1.354924124151176e-01, -1.556110429683471e-02, -1.556110429679813e-02, 1.677549040413816e-05, 3.606894759069327e-08, 9.528281612837017e-07, -1.333126747117989e-02, 4.167661331761637e-06, 4.167661334846069e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
