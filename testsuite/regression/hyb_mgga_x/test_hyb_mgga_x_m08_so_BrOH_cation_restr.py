
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_m08_so_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m08_so", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-4.876946958378610e+00, -4.876717341664672e+00, -4.875798506207214e+00, -4.879196026060147e+00, -4.877401792648901e+00, -4.877401792648901e+00, -1.532351358877386e+00, -1.532347015037236e+00, -1.532204201100539e+00, -1.532413560321905e+00, -1.532232720964340e+00, -1.964653823258480e+00, -2.506175538939652e-01, -4.913757764162309e-01, -4.882426664884416e-01, -4.877475184890527e-01, -4.879436773642887e-01, -4.879436773642887e-01, -1.338860010789529e-01, -1.352935011338834e-01, -2.931745956520609e-01, -1.040852860729833e-01, -1.149712238985524e-01, -1.149712238985518e-01, -6.657611246833390e-03, -7.010488666699752e-03, -4.079281188809218e-02, -3.835661757350390e-03, -4.823868344774601e-03, -4.823868344774601e-03, -1.268648222048141e+00, -1.264124510505378e+00, -1.268379998069317e+00, -5.726527547878423e-01, -1.266354878669257e+00, -1.266354878669257e+00, -8.404876442642850e-01, -8.545866997703728e-01, -8.288967894244877e-01, -8.424104671656886e-01, -8.535915197065058e-01, -1.241558639393074e+00, -2.249805168013264e-01, -1.922165283849801e-01, -2.753367017118066e-01, -2.146728184587658e-01, -2.179042352187029e-01, -2.150595498193532e-01, -4.842413432241628e-02, -1.351591729591842e-01, -4.812354729476419e-02, -6.872575056519324e-01, -8.978911292969653e-02, -8.978911292969805e-02, -2.773891895679309e-03, -3.749325487004961e-03, -2.868585980700685e-03, -4.247647566909135e-02, -3.233581370886237e-03, -3.455247484754472e-03, -1.693813579058158e-01, -1.804370167798099e-01, -1.546897482596012e-01, -1.977976933915630e-01, -1.993297896552740e-01, -1.993297896552740e-01, -1.801487632017330e-01, -2.206689067378605e-01, -1.844986517613120e-01, -1.589631478119735e-01, -1.784300253595684e-01, -1.533813986958276e-01, -2.226736300048515e-01, -8.227974904684555e-02, -1.965383361289081e-01, -1.485095438686554e-01, -2.133184294460387e-01, -2.133184294460387e-01, -1.992703593061433e-01, -3.893540135174996e-02, -5.399841569220544e-02, -1.793660932633210e-01, -4.203223200458239e-02, -7.792308308363434e-02, -9.407774139485441e-03, -1.001402285286862e-03, -2.102939536929940e-03, -7.467218119600999e-02, -3.197277748616976e-03, -3.197277748616968e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_m08_so_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m08_so", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [6.574342051464017e+00, 6.574868065002344e+00, 6.577007031062124e+00, 6.569215184663782e+00, 6.573328109964873e+00, 6.573328109964873e+00, -1.994929456091654e+00, -1.993955673855494e+00, -1.968232469706766e+00, -1.978827272272669e+00, -1.977486858053190e+00, 1.241295934419718e-01, -3.659803696332753e-01, -4.347563321245367e-01, -4.519312114275073e-01, -4.417683520776570e-01, -4.440321408433239e-01, -4.440321408433239e-01, -1.426719888733677e-01, -1.397952795340790e-01, -4.178896720282593e-01, -1.061061395203897e-01, -1.486134497145938e-01, -1.486134497146249e-01, -8.927022997837425e-03, -9.406881510791736e-03, -5.772014969001311e-02, -5.122651720026523e-03, -6.451450352188241e-03, -6.451450352188241e-03, -5.749347285264787e-02, -1.006153995372798e-01, -5.992434033530301e-02, 5.711230987054111e-01, -7.886136430762254e-02, -7.886136430762254e-02, -1.468115935334629e+00, -1.431204184902516e+00, -1.487457230607261e+00, -1.465018852966585e+00, -1.433299229989503e+00, -3.406422629719493e-01, -8.941687762585566e-02, 5.946206807141113e-03, 6.029422116924223e-02, -9.559770868973083e-02, -1.544440423245010e-01, -9.550836497785929e-02, -2.199062362336578e-02, -1.748722637476252e-01, -2.431580953904671e-02, -5.775063635265825e-01, -6.488185888653014e-02, -6.488185888655784e-02, -3.695256295096056e-03, -5.006516274687927e-03, -3.834168338280622e-03, -3.506304831000766e-02, -4.301117400382616e-03, -4.617174570788128e-03, 1.709361847480077e-02, -3.702563501352451e-01, -4.009784970806141e-01, -1.701946720486545e-01, -2.416428655913126e-01, -2.416428655913126e-01, -5.014988591623227e-02, 3.539549164211363e-02, -1.555640978243136e-01, 1.836140976263814e-02, -1.290246680065475e-01, 5.777733339023459e-02, -1.317339287985596e-01, -1.148862508256260e-01, -1.807992386636166e-01, -2.640270239079195e-01, -1.657198209361695e-01, -1.657198209361672e-01, -2.373722765597676e-01, -5.508443606620866e-02, -7.508224410972232e-02, 2.933593745489029e-02, -2.196133948629364e-02, -6.279826911840722e-02, -1.264032240602534e-02, -1.335360710777257e-03, -2.806380248002594e-03, -6.555220127346485e-02, -4.272661353969440e-03, -4.272661353968999e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m08_so_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m08_so", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.303010820994872e-08, -1.303124404830949e-08, -1.303573344227676e-08, -1.301893267469259e-08, -1.302781357109903e-08, -1.302781357109903e-08, -1.110610913354828e-05, -1.109803089700003e-05, -1.088381255721226e-05, -1.096652210059790e-05, -1.096221850882074e-05, -5.968539043622898e-06, -1.572930453163423e-02, -3.439707694533386e-03, -2.995456696136227e-03, -3.260019046516670e-03, -3.197618339701534e-03, -3.197618339701534e-03, -3.412228207605695e-01, -3.595188071975554e-01, -7.894927716024838e-03, -2.745364613226808e-01, -1.964047902848285e-01, -1.964047902848263e-01, 5.057715712978254e+00, 5.256011737463552e+00, 1.420848312352803e+00, 3.766034624360827e+00, 5.216099650696215e+00, 5.216099650696215e+00, -6.708360825710907e-06, -6.781282985586147e-06, -6.712605833829994e-06, -8.197207138063466e-06, -6.744917581493758e-06, -6.744917581493758e-06, -1.674473416093482e-04, -1.530801245909233e-04, -1.783626586784976e-04, -1.656152046602639e-04, -1.540657279115307e-04, -6.950220058905029e-05, -8.632737669063684e-04, -1.533045996077482e-02, -7.428918372654987e-03, -9.591695239246898e-04, -9.609750363184249e-04, -2.828959656398600e-04, -2.710425573159334e+01, -1.102354551773373e-01, -3.329919170259060e+01, -1.496870230292584e-05, -7.583412997844664e-01, -7.583412997844760e-01, 1.020753079396339e+07, 3.331108780049493e+00, 2.684076765548399e+01, -8.118072723926606e+01, 5.437762848798089e+06, 1.030964047221439e+01, -2.850208838137874e-02, -5.902560415589889e-02, -5.862450099766949e-02, -4.547965116383982e-02, -5.027760377224769e-02, -5.027760377224769e-02, -4.003412017468239e-02, -6.344696514569418e-03, -2.922386182494105e-03, -3.292196797695959e-02, -1.252754594380842e-02, -1.646955370061075e-02, -6.160805238330098e-03, -1.285168403243603e+00, -1.166789697981285e-01, -1.727859924970740e-01, -1.125570303787476e-01, -1.125570303787477e-01, -3.355159637959788e-02, 1.525767874389313e+00, 7.323220592940149e-01, -6.042253656761265e-02, -5.992769725182119e+01, -1.682887937512588e+00, 2.397862019514521e+00, 4.098575617804395e+00, 1.171967416415529e+01, -1.704488110666467e+00, 1.469087888125376e+01, 1.469087888125377e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m08_so_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m08_so", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-7.667421630246109e-03, -7.667745453686416e-03, -7.669039117965725e-03, -7.664245475466723e-03, -7.666778766952709e-03, -7.666778766952709e-03, -3.624218184827447e-04, -3.697946432575931e-04, -5.656168545944211e-04, -4.860960819186271e-04, -4.946521267139269e-04, -1.434860701944557e-02, 3.037346010663008e-03, 5.321377291792772e-03, 3.904197598765728e-03, 4.555906604517651e-03, 4.395423685115674e-03, 4.395423685115674e-03, 1.225000701231256e-02, 1.161418446606860e-02, 1.095069043503532e-03, -4.484432377728264e-03, 1.257507883942996e-02, 1.257507883942946e-02, 1.279757805269149e-05, 1.548106179465907e-05, 3.954921788192648e-04, 1.852643024916949e-06, 5.075155798218615e-06, 5.075155798218615e-06, 5.056419211048894e-04, 1.311970033395756e-03, 5.512268038660280e-04, -1.936579065889697e-02, 9.057752393830515e-04, 9.057752393830515e-04, 6.695687414836156e-03, 5.775925741558040e-03, 7.205778409126744e-03, 6.603330925214057e-03, 5.837828286848343e-03, -1.251069311193549e-02, -8.672424693953840e-02, -8.292298982256924e-02, -1.211770791744724e-01, -8.616344645888827e-02, -5.824202547316762e-02, -8.910695987685535e-02, -2.324267770855337e-02, 1.163160141415059e-02, -2.210711858786409e-02, -1.356429768349762e-02, -1.553544542487434e-02, -1.553544542483428e-02, -1.897052619772485e-06, 1.531527430476138e-06, 5.505191818689232e-06, -1.342266910445309e-02, -1.193964136425320e-05, 3.699017892509413e-06, -8.766845257478213e-01, 5.789380466881926e-01, 5.032214276982566e-01, -5.735334722635600e-02, 1.911120051305464e-01, 1.911120051305464e-01, -5.534514590408369e-01, -1.442697700318994e-01, -5.006998843503379e-02, -1.027247337624594e-01, -4.060007156387210e-02, -2.098882512741516e-01, -3.970355318904630e-02, 2.770646390863534e-03, 1.009770748012259e-02, 3.949431490105755e-02, 8.511909399469395e-03, 8.511909399468047e-03, -1.312199184733737e-02, 4.058854835490998e-04, -6.292915149239149e-05, -1.762928972481284e-01, -2.476842820836891e-02, -1.369917567930077e-02, 1.697080189381565e-05, 3.609921963974463e-08, 9.530707363540219e-07, -1.215910051006886e-02, 4.175506588253480e-06, 4.175506591337970e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
