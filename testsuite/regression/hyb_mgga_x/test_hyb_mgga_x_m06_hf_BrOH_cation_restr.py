
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_m06_hf_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06_hf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [3.102417531276726e+00, 3.102488552955959e+00, 3.102782008080017e+00, 3.101730547925460e+00, 3.102284238886639e+00, 3.102284238886639e+00, -3.567781139688002e-01, -3.566803750413567e-01, -3.540396405605938e-01, -3.551554920301299e-01, -3.550000156300105e-01, -2.032629476488171e-01, -1.402069132480852e-01, -1.739146841564501e-01, -2.324622051284092e-01, -2.041256055377120e-01, -2.105735715390872e-01, -2.105735715390872e-01, -9.705012963371115e-02, -9.194571059892309e-02, -2.712680123013665e-01, -1.281441359825931e-01, -1.305600101715070e-01, -1.305600101715065e-01, 1.776705763070530e-02, 1.866916943410419e-02, 7.535179680522965e-02, 1.035531744048510e-02, 1.297128673998878e-02, 1.297128673998878e-02, 1.428423931117890e+00, 1.443654368246152e+00, 1.429294093113973e+00, 1.252011298748069e+00, 1.436034678567753e+00, 1.436034678567753e+00, -2.232396694438562e-01, -2.221765237435750e-01, -2.243794004204610e-01, -2.231742615475164e-01, -2.221788831049115e-01, -1.482537535382336e-01, 6.067851240183361e-02, 1.245373692723296e-01, -1.702959928055969e-02, 6.157401212999541e-02, 8.336761404328483e-02, 4.943066782850876e-02, 8.506067356814696e-02, -1.503974817324501e-01, 9.587196586445065e-02, 3.012440252998676e-01, -9.423775320207421e-02, -9.423775320207496e-02, 4.465990528951226e-03, 1.012698933168253e-02, 7.726764188793938e-03, 1.099030913887341e-01, 5.253523249472410e-03, 9.313485418591911e-03, 2.580453422524104e-03, 2.022459990528740e-01, 1.428580628886195e-01, 8.963745417736271e-02, 1.236019455600904e-01, 1.236019455600904e-01, 3.388231453037188e-02, 7.736686014089620e-03, 8.113709740837094e-02, 1.074317642026971e-01, 9.671331598567227e-02, 7.008223188374410e-02, 1.236099030402986e-01, -7.506331846072184e-02, -9.049820249282166e-02, -3.990806151311636e-02, -4.239723242608972e-02, -4.239723242608968e-02, -4.385023772975102e-02, 7.408720856963773e-02, 7.845881817264228e-02, -1.557872238595531e-02, 8.623976542021711e-02, 2.507763285192096e-03, 2.495368374207878e-02, 2.715192529248177e-03, 5.689778220753005e-03, 1.153103028527206e-02, 8.616950521281034e-03, 8.616950521280989e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_m06_hf_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06_hf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [7.489629350604505e+00, 7.490389181670388e+00, 7.493478001927347e+00, 7.482235700727919e+00, 7.488162356875261e+00, 7.488162356875261e+00, 1.505732678723777e-01, 1.518944136380255e-01, 1.872959546317284e-01, 1.728726189545966e-01, 1.743927210730414e-01, 4.344084577863259e-01, 1.648789551394149e-01, 4.736490087716006e-01, 4.785632679982151e-01, 4.835870538006812e-01, 4.837966848341990e-01, 4.837966848341990e-01, 9.682553217829401e-02, 1.060706382090049e-01, -2.129364315208037e-01, -1.413557332562573e-01, -1.294323574871519e-02, -1.294323574870662e-02, 2.333918472941242e-02, 2.447577956695204e-02, 6.031511322894715e-02, 1.374897672073729e-02, 1.715926974227944e-02, 1.715926974227944e-02, 4.805226466199509e+00, 4.843300969317030e+00, 4.807484773915213e+00, 4.906462725551571e+00, 4.824645524088561e+00, 4.824645524088561e+00, -1.870178054144625e-01, -1.876426450882166e-01, -1.696531110557326e-01, -1.884168437949389e-01, -1.882491436044577e-01, -4.080814372683790e-03, 4.290848157483338e-01, 2.590711040438632e-01, 1.980726783782383e-01, 4.076834767641690e-01, 3.759430501745462e-01, 3.665732114496728e-01, -1.103465649009902e-01, -4.190637623103320e-03, -7.445922346388825e-02, 1.031307129207108e+00, -1.911478533552047e-01, -1.911478533551706e-01, 5.989247844051009e-03, 1.345159432807290e-02, 1.023752880936326e-02, 6.782921812725870e-02, 7.112350452923589e-03, 1.234774829610243e-02, -3.618254916176215e-01, -5.689625648254128e-02, -2.954263610632854e-01, -4.432482646321129e-01, -3.959174419678362e-01, -3.959174419678362e-01, -4.205091994187986e-01, 3.062309689983865e-01, 2.755019567520841e-01, 2.478223363102077e-01, 1.352834154962190e-01, 1.521423599466223e-01, 1.617006228078414e-01, -5.024769469634980e-02, 1.937929285577679e-01, -3.166905583489802e-02, 1.276790471486352e-01, 1.276790471486355e-01, 5.274638130669534e-02, 6.274168963666915e-02, 3.040638660080956e-02, 8.079700005669550e-02, -5.617056244037859e-02, -1.598786232080056e-01, 3.259306141546309e-02, 3.619175600753033e-03, 7.569458351116964e-03, -1.414848470165376e-01, 1.142284512631606e-02, 1.142284512631341e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m06_hf_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06_hf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [6.468694266004987e-09, 6.468678882660163e-09, 6.468565421297707e-09, 6.468799218828231e-09, 6.468682934665873e-09, 6.468682934665873e-09, 3.438741719993232e-06, 3.440082697416113e-06, 3.475370930281317e-06, 3.459813540185986e-06, 3.462917504545605e-06, 2.306308752497460e-06, -1.410362397240345e-03, -9.115941877124601e-04, -1.595700979577651e-03, -1.294064782037503e-03, -1.362320138589794e-03, -1.362320138589794e-03, -4.902312621938368e-01, -4.387825566082949e-01, -3.312585939987606e-03, -1.452562297511327e+00, -1.083249928725234e+00, -1.083249928725232e+00, -1.152457622187973e+01, -1.200201517776239e+01, -5.192028451029160e+00, -8.482675474883740e+00, -1.179561467316304e+01, -1.179561467316304e+01, 1.952418928482503e-06, 1.960656817392308e-06, 1.952902510668814e-06, 2.159383060726436e-06, 1.956532525948090e-06, 1.956532525948090e-06, 2.400438539890578e-05, 2.531854856243440e-05, 2.280083522976342e-05, 2.413697552888399e-05, 2.527508921123041e-05, 1.521938680236437e-05, 6.602882113636980e-03, 7.285511409463139e-03, 5.020593222704311e-03, 7.861198516541717e-03, 6.992679034669365e-03, 8.750230839884774e-03, -2.781889020329549e+01, -5.711613963885748e-01, -3.353212279192097e+01, 6.912732630217855e-05, -2.648843707549236e+00, -2.648843707549239e+00, 5.802157003136507e+07, -7.499544946951086e+00, -6.059411284799422e+01, -2.916473843855879e+01, 3.115931129146675e+07, -2.325826862483511e+01, 1.007086881088709e-02, 1.450262159383908e-02, 1.406320720582820e-02, 1.205255941164021e-02, 1.281796193581178e-02, 1.281796193581178e-02, 1.202057773386612e-02, 9.591316119563891e-03, 1.330275743256096e-02, 1.450247648106404e-02, 1.405278740370342e-02, 1.663041260485801e-02, 5.551591625328261e-03, -5.115232055961674e-01, -5.762470605144498e-02, 2.305203690934633e-02, -4.062853809801219e-05, -4.062853809797712e-05, 1.277056225934246e-02, -5.317178363636323e+00, -4.335273292530102e+00, 3.061874519486552e-02, -5.975662068558759e+01, -4.951592711487113e+00, -5.497565634555458e+00, -9.192464027472743e+00, -2.634069582726763e+01, -5.608772147595456e+00, -3.314676417707798e+01, -3.314676417707810e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m06_hf_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06_hf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-1.966012358000789e-03, -1.966452335083796e-03, -1.968228526273943e-03, -1.961720711945913e-03, -1.965152880972512e-03, -1.965152880972512e-03, -4.708502372023642e-03, -4.718670613919384e-03, -4.992055223006672e-03, -4.879872908429482e-03, -4.892328227225727e-03, -7.791331448640733e-03, -3.357893524167715e-02, -6.010064025822888e-02, -5.688972777760349e-02, -5.946255305837307e-02, -5.897549651096457e-02, -5.897549651096457e-02, -1.421367363256019e-01, -1.535078831510400e-01, -6.035379827179053e-03, 6.549165932889760e-02, -3.118582092004203e-02, -3.118582092003333e-02, 3.497515746773690e-04, 4.246000200171894e-04, 2.910019060373905e-02, 4.966837565559876e-05, 1.369615210726923e-04, 1.369615210726923e-04, -4.878270153132979e-02, -4.939705219050278e-02, -4.881905065226800e-02, -4.697021972922845e-02, -4.909471136998268e-02, -4.909471136998268e-02, -2.131945309182627e-03, -2.149827577063647e-03, -2.441491578092874e-03, -2.108647085080552e-03, -2.135745493211278e-03, -6.783152263367400e-03, -1.845974236912629e-01, -1.130842378258071e-01, -9.858816680578023e-02, -1.905187990141244e-01, -1.610060698552319e-01, -1.400947731290335e-01, 1.221565156970802e-01, -3.379474463228065e-02, 1.122242732520336e-01, -4.262038085905234e-02, 1.295401422136150e-01, 1.295401422135857e-01, -2.009234485002169e-05, 4.102777045511779e-05, 1.481479344324955e-04, 4.897377396259603e-02, -1.244946194185926e-04, 9.942821767995902e-05, 1.488753326026832e+00, 6.234171614526208e-01, 1.255701969007498e+00, 1.698011779765677e+00, 1.520590570616255e+00, 1.520590570616255e+00, 1.768664718795294e+00, -1.758612701089226e-01, -1.577664033134181e-01, -1.635269344901232e-01, -5.726268785003674e-02, -4.697283660589453e-02, -4.043655573855018e-02, -2.665678019155513e-02, -1.433011733341420e-01, -1.288772912844324e-02, -1.093238538324574e-01, -1.093238538324577e-01, -5.152760344465414e-02, 2.626762350670874e-02, 5.164453628906267e-02, -1.178037779650229e-01, 1.243862744712022e-01, 1.661947311018653e-01, 4.686029035386139e-04, 9.610110952355343e-07, 2.546030404402541e-05, 1.632441699066473e-01, 1.122615384126987e-04, 1.122615384176355e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
