
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_m06_hf_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06_hf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([4.000074893677872e+00, 4.000131340480114e+00, 4.000397619715220e+00, 3.999562767743740e+00, 3.999997592240426e+00, 3.999997592240426e+00, -2.826343003973570e-01, -2.825208917907046e-01, -2.794201705678234e-01, -2.802848044615306e-01, -2.803448914599315e-01, -2.803448914599315e-01, -1.529502810891440e-01, -1.547165260546688e-01, -1.997838974766854e-01, -1.800528265034322e-01, -1.843839554981619e-01, -1.843839554981619e-01, -9.527897253629224e-02, -8.997503240397076e-02, -3.299609841444846e-01, -1.165750549953050e-01, -1.227637056695140e-01, -1.227637056695136e-01, 1.776730549853816e-02, 1.866971215944484e-02, 7.578265995118562e-02, 1.035591458303230e-02, 1.297210904043595e-02, 1.297210904043595e-02, 1.427249989614621e+00, 1.442489249006975e+00, 1.428144305972441e+00, 1.441586916514192e+00, 1.434852989730584e+00, 1.434852989730584e+00, -1.601676018868780e-01, -1.544066655375144e-01, -1.636679558122186e-01, -1.577820107598939e-01, -1.555777585830048e-01, -1.555777585830048e-01, 4.900133532587831e-02, 1.062900676225167e-01, -2.897241304107214e-02, 3.767593418412230e-02, 7.122745791557078e-02, 7.122745791557078e-02, -1.559245004313010e-02, -1.465675916258518e-01, 3.260470936782254e-03, 2.152152603418374e-01, -8.878147060502577e-02, -8.878147060502650e-02, 8.005575171831206e-03, 1.012826099657225e-02, 7.727535254606619e-03, 6.057815455005540e-02, 9.315008270407129e-03, 9.315008270407063e-03, 5.262003602384157e-04, 1.994249076024907e-01, 1.504721367575505e-01, 8.721918835367169e-02, 1.210466277728009e-01, 1.210466277728009e-01, 2.961339478097680e-02, 6.604717015170600e-03, 7.879436722426082e-02, 1.038984721469153e-01, 9.362168369520533e-02, 9.362168369520533e-02, 1.008696281719945e-01, -1.306833738342252e-01, -8.835243819693099e-02, -3.113645944279580e-02, -4.245723040197593e-02, -4.245723040197587e-02, -2.745786334342483e-02, 7.427149551230462e-02, 7.949772956897623e-02, -2.039300925378694e-02, 6.168189319232961e-03, 6.168189319235458e-03, 2.497154728574181e-02, 2.715331060004139e-03, 5.689870087399946e-03, 1.354980506733317e-02, 8.617975966728858e-03, 8.617975966728812e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_m06_hf_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06_hf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([6.868554984562703e+00, 6.869347117479534e+00, 6.872549898995899e+00, 6.860829311661025e+00, 6.867010598253780e+00, 6.867010598253780e+00, 2.553026224325349e-01, 2.566271911942520e-01, 2.922257271387994e-01, 2.784385797901612e-01, 2.795792248261139e-01, 2.795792248261139e-01, 2.994758801686896e-01, 3.009322391090065e-01, 3.057514251678047e-01, 3.265983287474056e-01, 3.213745485483995e-01, 3.213745485483995e-01, 9.280115175190587e-02, 1.009533072917879e-01, -1.626494809447934e-02, -1.339613636516002e-01, -1.590767305071966e-02, -1.590767305071129e-02, 2.334019245378365e-02, 2.447798406880749e-02, 6.188838519411720e-02, 1.375139985345722e-02, 1.716261026636527e-02, 1.716261026636527e-02, 4.805478988521731e+00, 4.843555165141104e+00, 4.807732265225139e+00, 4.841326521569981e+00, 4.824901443534395e+00, 4.824901443534395e+00, -1.052940791832295e-02, -2.634413630100741e-02, 2.912152728107366e-02, -7.281909422849705e-03, -2.919362385139403e-02, -2.919362385139403e-02, 4.182272072109546e-01, 2.693062209101310e-01, 1.757191887099706e-01, 3.900916734455857e-01, 3.703071788453635e-01, 3.703071788453635e-01, -2.035261581734684e-01, -5.828707494815354e-03, -1.776213793912138e-01, 1.025610415038854e+00, -1.841880454713747e-01, -1.841880454713410e-01, 1.065459200498929e-02, 1.345671482529560e-02, 1.024065293352920e-02, -3.804453161347451e-02, 1.235388711987221e-02, 1.235388711987533e-02, -3.575230491107031e-01, -5.229976201782085e-02, -3.116441498963621e-01, -4.376754207827748e-01, -3.902620056164060e-01, -3.902620056164060e-01, -4.107377945642411e-01, 3.041488837622000e-01, 2.748868642467859e-01, 2.493609581512260e-01, 1.366244474483663e-01, 1.366244474483664e-01, 1.759102446561438e-01, 1.061705064691038e-01, 1.827490516036782e-01, -6.355492432800941e-03, 1.145169496945360e-01, 1.145169496945362e-01, 7.811878408557302e-02, 6.342365247905064e-02, 3.396275940552063e-02, 7.100516930566599e-02, -1.509355185588106e-01, -1.509355185588298e-01, 3.266453289050961e-02, 3.619702199402964e-03, 7.569832321121391e-03, -1.362920093211032e-01, 1.142699267847183e-02, 1.142699267846918e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m06_hf_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06_hf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([5.672713374126837e-09, 5.672721572095689e-09, 5.672683464089927e-09, 5.672566506698177e-09, 5.672638236200504e-09, 5.672638236200504e-09, 2.897504978531210e-06, 2.898732165509298e-06, 2.930705698206878e-06, 2.913413403529245e-06, 2.917852628527673e-06, 2.917852628527673e-06, -1.066130631406135e-03, -1.106165602673654e-03, -2.105708032037205e-03, -1.612283027112342e-03, -1.725970767557214e-03, -1.725970767557214e-03, -5.080401459671756e-01, -4.571443803581078e-01, -2.559907774801609e-03, -1.806586483085277e+00, -1.243116899069782e+00, -1.243116899069780e+00, -1.172643330624634e+01, -1.238989938915786e+01, -6.418579949567789e+00, -1.074979778845073e+01, -1.361500803975858e+01, -1.361500803975862e+01, 1.953632746275639e-06, 1.961860931308057e-06, 1.954091327362175e-06, 1.961350092593454e-06, 1.957754054525163e-06, 1.957754054525163e-06, 1.517077919803764e-05, 1.626723960245761e-05, 1.392793913521484e-05, 1.500029615823025e-05, 1.636190260519942e-05, 1.636190260519942e-05, 7.253013391537411e-03, 7.967248177873552e-03, 6.016504402434675e-03, 9.480594679952242e-03, 7.617846497475990e-03, 7.617846497475990e-03, -3.170201458972114e+00, -6.056059544625004e-01, -3.633284790963221e+00, 8.200535524526354e-05, -3.033680963508640e+00, -3.033680963508645e+00, -1.401870253443918e+01, -1.266945284616626e+01, -7.945879740266328e+01, -6.287648759286690e+00, -3.702383497713342e+01, -3.702383497713344e+01, 1.018163128488326e-02, 1.466688998138609e-02, 1.362515023532229e-02, 1.218800500090728e-02, 1.296280336020268e-02, 1.296280336020268e-02, 1.228799962157357e-02, 9.744248545580536e-03, 1.355175552815227e-02, 1.480734135656290e-02, 1.434890816466779e-02, 1.434890816466779e-02, 6.220364788940258e-03, -2.070773551355345e-01, -5.979634847070604e-02, 1.629392918873131e-02, 1.519309993165953e-03, 1.519309993165967e-03, 9.512195718495675e-03, -5.909980872713361e+00, -5.547670169183041e+00, 3.519221574014944e-02, -6.061146677507479e+00, -6.061146677507441e+00, -9.494116920666446e+00, -5.294511129128875e+01, -2.998348426961450e+01, -6.381403982800477e+00, -4.675273990441083e+01, -4.675273990441101e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m06_hf_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06_hf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-2.213794732643797e-03, -2.214252567470210e-03, -2.216108786475839e-03, -2.209337168902287e-03, -2.212907318728963e-03, -2.212907318728963e-03, -6.113800763961283e-03, -6.124512896009750e-03, -6.413379322245415e-03, -6.302910948309969e-03, -6.311892978159326e-03, -6.311892978159326e-03, -4.519411773405648e-02, -4.524493212409279e-02, -4.336941310011645e-02, -4.656238303206657e-02, -4.578382726545979e-02, -4.578382726545979e-02, -1.383452473536076e-01, -1.487455070376656e-01, -1.159601425363377e-02, 6.950210675555807e-02, -2.474894792878826e-02, -2.474894792877975e-02, 3.497789399332830e-04, 4.246600352303190e-04, 2.910821695042160e-02, 4.971195104383737e-05, 1.370418324149201e-04, 1.370418324149201e-04, -4.876812787492947e-02, -4.938249515897296e-02, -4.880477128845343e-02, -4.934678826131151e-02, -4.907999313659227e-02, -4.907999313659227e-02, -6.435397734713651e-03, -6.369611977014648e-03, -6.988313838654702e-03, -6.520916907272234e-03, -6.301075829423901e-03, -6.301075829423901e-03, -1.758483158881263e-01, -1.061404371858860e-01, -8.803610158828741e-02, -1.714943706286078e-01, -1.535462202239722e-01, -1.535462202239722e-01, 1.511352257386205e-01, -3.133381002689850e-02, 1.471820967373790e-01, -3.818879953476444e-02, 1.306450576040251e-01, 1.306450576039962e-01, 1.579074838058987e-05, 4.107144911255831e-05, 1.482894608012819e-04, 9.853103197412516e-02, 9.954017461303855e-05, 9.954017461395689e-05, 1.481706954965432e+00, 6.208837860226045e-01, 1.272202107479293e+00, 1.690078027347758e+00, 1.513589523146261e+00, 1.513589523146261e+00, 1.751877783297408e+00, -1.745315645272215e-01, -1.561038823278931e-01, -1.614224336729015e-01, -5.606794544879519e-02, -5.606794544879519e-02, -3.523451958859519e-02, -9.746258762669183e-02, -1.379313976628615e-01, -3.264622376182448e-02, -1.024567367096816e-01, -1.024567367096819e-01, -7.052444103179434e-02, 2.627308118536274e-02, 5.163919915819465e-02, -1.072524803542831e-01, 1.660551646397377e-01, 1.660551646397463e-01, 4.690514924558225e-04, 9.277918540574397e-07, 2.547409960520461e-05, 1.631574791158672e-01, 1.123830739484547e-04, 1.123830739533912e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
