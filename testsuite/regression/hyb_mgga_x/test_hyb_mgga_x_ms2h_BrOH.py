
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_ms2h_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_ms2h", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.878314270568257e+01, -1.878323960733466e+01, -1.878370074202768e+01, -1.878211867180514e+01, -1.878319349944298e+01, -1.878319349944298e+01, -2.925671651096972e+00, -2.925692342312322e+00, -2.926416444717240e+00, -2.926370520133249e+00, -2.925691312053202e+00, -3.432234355982271e+00, -5.513370933266982e-01, -6.847948736844663e-01, -6.729524256092227e-01, -6.753497771491268e-01, -6.850807815785955e-01, -6.850807815785955e-01, -1.895180951998961e-01, -1.914313123368596e-01, -6.580114371277985e-01, -1.500930931242797e-01, -1.901009580920157e-01, -1.901009580920157e-01, -1.290871185851395e-02, -1.351866603008424e-02, -5.390104048361143e-02, -6.203866669327060e-03, -1.337774245041198e-02, -1.337774245041198e-02, -4.956570766964491e+00, -4.956972984705547e+00, -4.956610710231472e+00, -4.727854128108863e+00, -4.956778293718344e+00, -4.956778293718344e+00, -1.636109113448458e+00, -1.649331053978217e+00, -1.630707702366980e+00, -1.641044760272638e+00, -1.652078107080582e+00, -1.959679832697760e+00, -5.639352303601779e-01, -6.038651809966733e-01, -5.395307231402267e-01, -5.557438645161534e-01, -5.825188475756808e-01, -5.106863993882576e-01, -7.971950087763026e-02, -1.983166423031145e-01, -7.869915914775447e-02, -1.852492724175953e+00, -1.285234858459704e-01, -1.285234858459704e-01, -3.867729647999797e-03, -6.838922118416507e-03, -5.125579478367046e-03, -4.960188105651720e-02, -4.027472183845527e-03, -6.231509263136425e-03, -5.647828015886334e-01, -5.635324583665515e-01, -5.578994597675524e-01, -5.643280561824054e-01, -5.641560004364841e-01, -5.641560004364841e-01, -5.472744458385825e-01, -4.896652665961542e-01, -5.063334957694119e-01, -5.218155868549297e-01, -5.139311335001042e-01, -4.648375746508612e-01, -6.356033897670754e-01, -1.904456381025128e-01, -2.809813703631425e-01, -2.937345798965725e-01, -3.120760632160956e-01, -3.120760632160955e-01, -3.820263884188942e-01, -5.009747866523478e-02, -6.701042643891481e-02, -3.266333113756459e-01, -6.470234716997840e-02, -9.378622129360242e-02, -1.513335700562482e-02, -1.873052316756240e-03, -3.557672407149313e-03, -8.948810035891237e-02, -5.296231872803423e-03, -5.296231872803416e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_ms2h_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_ms2h", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.821435758845243e+01, -2.821446139699822e+01, -2.821497152117341e+01, -2.821327359944858e+01, -2.821441189424445e+01, -2.821441189424445e+01, -4.006093434738982e+00, -4.006073823859219e+00, -4.005591937480098e+00, -4.006106711594918e+00, -4.006107054277796e+00, -4.203182511606402e+00, -7.482380884504477e-01, -7.982268489204533e-01, -7.780762098584242e-01, -7.835724249607802e-01, -7.987331696098631e-01, -7.987331696098631e-01, -2.189547420816085e-01, -2.217219073830358e-01, -8.852044033127449e-01, -1.720103848012801e-01, -2.197836558848779e-01, -2.197836558848779e-01, -1.714042361425090e-02, -1.794347671917854e-02, -6.899941918731863e-02, -8.267094759028216e-03, -1.775630788446336e-02, -1.775630788446331e-02, -6.444643976994087e+00, -6.446334466605920e+00, -6.444825134504366e+00, -6.808304501301468e+00, -6.445499594627674e+00, -6.445499594627674e+00, -2.251129845835251e+00, -2.269192783666084e+00, -2.243541181952782e+00, -2.257955472079733e+00, -2.272819390101257e+00, -2.375677648266096e+00, -7.076329882909596e-01, -7.767965545702565e-01, -6.681324362981796e-01, -7.024173370284393e-01, -7.374837463399930e-01, -7.143806356551122e-01, -1.063350603931683e-01, -2.249652892495916e-01, -1.049788614295729e-01, -2.347342141372674e+00, -1.480451000186731e-01, -1.480451000186731e-01, -5.156972887460872e-03, -9.111450311925976e-03, -6.828170504181429e-03, -6.613999453421095e-02, -5.369962941091317e-03, -8.302705865587290e-03, -7.482228530395680e-01, -7.420044305961819e-01, -7.543190809768057e-01, -7.459415961576312e-01, -7.450787870099056e-01, -7.450787870099056e-01, -7.234215826529843e-01, -6.122509267182257e-01, -6.439827431717214e-01, -6.740534531490110e-01, -6.586516309595488e-01, -6.986823234430821e-01, -8.119818326479733e-01, -2.567474364368339e-01, -3.288017093537766e-01, -4.041509164542214e-01, -3.724699736101057e-01, -3.724699736101056e-01, -5.211074204945227e-01, -6.453754876567286e-02, -8.452317185536723e-02, -4.008184889796892e-01, -8.629533806614517e-02, -1.122494570052632e-01, -2.010605883687502e-02, -2.497249269761627e-03, -4.742085937924637e-03, -1.071263037954531e-01, -7.057293996232177e-03, -7.057293996232147e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_ms2h_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_ms2h", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.558782080177570e-08, -1.558782635193546e-08, -1.558772458035249e-08, -1.558764985531053e-08, -1.558782458023709e-08, -1.558782458023709e-08, -7.211094620659764e-06, -7.210668921847473e-06, -7.196423381390179e-06, -7.199732792109270e-06, -7.210839336942052e-06, -2.630823317629925e-06, -4.984233789854425e-03, -1.426421805772489e-03, -1.461989199879480e-03, -1.471628656576985e-03, -1.425550868056846e-03, -1.425550868056846e-03, -2.312751833797286e-01, -2.256782023629149e-01, -2.362306109469420e-03, -2.855831051664973e-01, -2.294958956310024e-01, -2.294958956310024e-01, -3.114954100772398e+00, -3.088852332901191e+00, -9.914275801705246e-01, -1.111275766436347e+00, -3.230650796814018e+00, -3.230650796819370e+00, -6.604699018793109e-07, -6.603828494323104e-07, -6.604627164329587e-07, -4.137726118316602e-06, -6.604232050664467e-07, -6.604232050664467e-07, -7.269236419478433e-05, -7.091253513510729e-05, -7.339016317920474e-05, -7.202192330111356e-05, -7.055954461176061e-05, -2.421791236567571e-05, -3.767112280171503e-03, -2.962144972975142e-03, -4.400289993375762e-03, -4.036627983492441e-03, -3.351846884354124e-03, -1.108926824522520e-02, -1.073769295816139e+01, -1.527904187594829e-01, -1.130598589434656e+01, -3.281084898932617e-05, -4.776047896826731e-01, -4.776047896826731e-01, -1.937370976035413e+06, -1.401964825876283e+00, -5.509368237774461e+00, -7.162402540273909e+01, -1.647809601756018e+06, -1.727594977851274e+00, -3.990352870893328e-03, -4.003164383153956e-03, -1.289179039887708e-02, -3.995072833786242e-03, -3.996813063172617e-03, -3.996813063172617e-03, -4.516922123436257e-03, -6.590670492945262e-03, -5.908422249478334e-03, -5.338139381211657e-03, -5.620900096092838e-03, -3.622055065158920e-02, -2.393059539250697e-03, -3.393542888643967e-01, -5.124484290362184e-02, -7.031144184742834e-02, -3.615257191680436e-02, -3.615257191680429e-02, -2.447265404947267e-02, -9.466068579060241e-01, -7.744913060522606e-01, -3.220520618080586e-02, -2.474274260470512e+01, -8.056068130163520e-01, -1.218148910645735e+00, -1.552647987166653e+00, -3.050480889609358e+00, -9.679968160916764e-01, -2.429031797482635e+00, -2.429031797510357e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_ms2h_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_ms2h", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.858702109199115e-03, 1.858728335706249e-03, 1.858839085893516e-03, 1.858412522858874e-03, 1.858715951976580e-03, 1.858715951976580e-03, 7.919695874120797e-04, 7.917934877880396e-04, 7.861778475757198e-04, 7.883564001462558e-04, 7.919169984633606e-04, 2.207965201802391e-18, 1.226607816389782e-03, -1.011039125610557e-17, 1.489783936343680e-17, -7.827524214289017e-17, -5.323625968872703e-17, -5.323625968872703e-17, 9.035869030228688e-17, 1.018598376522755e-16, 3.417317813708772e-04, -2.985766680145343e-16, 4.963053802292001e-17, 4.963053802292001e-17, 1.745399738136848e-17, -1.162587604434824e-16, -2.462601661517987e-16, -6.322182959039680e-18, -7.986103931965516e-17, 2.011071112232250e-17, -1.878043587114275e-18, 2.294717874973668e-19, -1.277246727604895e-19, 7.315828336064598e-03, 6.863378146184850e-20, 6.863378146184850e-20, 1.337508771438913e-03, 1.381562373791348e-03, 1.314074221497371e-03, 1.354325005396831e-03, 1.391325312387445e-03, 8.330599296848955e-18, 1.876078829244363e-17, -6.038364619208299e-18, -3.096946483118237e-17, 1.446282810184667e-17, 8.126913409545643e-18, 1.589908163130986e-02, 2.539130897937285e-05, 7.376930212259720e-17, 3.027271112345684e-05, 2.880894590082400e-18, 3.006715091588758e-16, 3.006715091588758e-16, 2.017091827963767e-11, -2.007197832287448e-17, -2.992913889618784e-17, 2.548920487972979e-06, 2.543907986235983e-11, 2.481093728369891e-17, 5.357148108299697e-18, -1.510443986678198e-18, 2.907838012573552e-02, -4.018904948141963e-18, -5.287616674949078e-20, -5.287616674949078e-20, 4.462298053312789e-18, -1.867671090269853e-17, 2.098509446185335e-17, 1.615490720120634e-17, -1.454224047434426e-17, 6.499764098254206e-02, -8.225556427811133e-18, 1.653703699745751e-03, -8.463019231420603e-17, 7.652477329134831e-03, -2.434682854303747e-17, -5.266551835523171e-17, 5.530925731708618e-03, -3.019936105109164e-17, -2.509606963591480e-17, 1.254422890322774e-17, 2.000546607749314e-05, -1.566445978210954e-16, 5.769934356881552e-17, 5.062158353784109e-18, -1.414202590488549e-18, -1.462247988663931e-16, -1.642542532290052e-18, 3.028838454462686e-17]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
