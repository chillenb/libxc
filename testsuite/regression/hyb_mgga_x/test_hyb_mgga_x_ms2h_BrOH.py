
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_ms2h_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_ms2h", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.042764725907353e+01, -2.042768864212733e+01, -2.042792797560573e+01, -2.042724970751405e+01, -2.042766861951575e+01, -2.042766861951575e+01, -3.068049844187946e+00, -3.068054424810082e+00, -3.068397047848190e+00, -3.069515775490830e+00, -3.068059340628067e+00, -3.068059340628067e+00, -5.993712800626124e-01, -5.991608357042532e-01, -5.951423788047483e-01, -6.000810070784813e-01, -5.992936711100783e-01, -5.992936711100783e-01, -1.832827902587264e-01, -1.841524656649898e-01, -6.989143100877346e-01, -1.424503606596023e-01, -1.834394018625890e-01, -1.834394018625890e-01, -1.290810368512805e-02, -1.351779534167225e-02, -5.370299867474201e-02, -6.203083735275963e-03, -1.337698586834968e-02, -1.337698586834968e-02, -4.956160762843600e+00, -4.956567644852644e+00, -4.956206478990516e+00, -4.956522777026869e+00, -4.956363554156380e+00, -4.956363554156380e+00, -1.916827783970429e+00, -1.934028759905434e+00, -1.917277799826728e+00, -1.930562827218908e+00, -1.928142661453631e+00, -1.928142661453631e+00, -5.360641635461565e-01, -5.737584173424338e-01, -4.908893880124729e-01, -5.037362729656485e-01, -5.634620884523063e-01, -5.634620884523063e-01, -1.122389795117247e-01, -1.930715754164774e-01, -1.103475701192065e-01, -1.665688110386650e+00, -1.252298481944675e-01, -1.252298481944675e-01, -5.984136565036319e-03, -6.838059634519572e-03, -5.125291892378235e-03, -7.312308567699612e-02, -6.230503653161186e-03, -6.230503653161186e-03, -5.635534605822388e-01, -5.623619956196899e-01, -5.627916569277728e-01, -5.631200416550938e-01, -5.629553385365780e-01, -5.629553385365780e-01, -5.442738592218811e-01, -4.883692460826893e-01, -5.044790147961560e-01, -5.194541996036700e-01, -5.116698077856806e-01, -5.116698077856806e-01, -5.903772388458056e-01, -2.391427331117232e-01, -2.716809447912392e-01, -3.219226132214513e-01, -2.976472136564287e-01, -2.976472136564287e-01, -4.296424354041079e-01, -5.000520447325515e-02, -6.657852921246131e-02, -2.999530680426575e-01, -9.231514422779449e-02, -9.231514422779449e-02, -1.512205105263420e-02, -1.873014893689186e-03, -3.557621724094476e-03, -8.800731808042525e-02, -5.295454599605763e-03, -5.295454599605755e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_ms2h_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_ms2h", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.619630488267583e+01, -2.619638782957123e+01, -2.619685929373736e+01, -2.619550527509650e+01, -2.619634769758646e+01, -2.619634769758646e+01, -3.835382957292727e+00, -3.835580766507409e+00, -3.841907159800751e+00, -3.841614096036589e+00, -3.835444453000276e+00, -3.835444453000276e+00, -7.124460301107136e-01, -7.113288937013827e-01, -6.835742373216671e-01, -6.912358556992729e-01, -7.120426587935724e-01, -7.120426587935724e-01, -1.623450443013056e-01, -1.664361919541811e-01, -8.453610121124302e-01, -1.511815868594688e-01, -1.635002918503369e-01, -1.635002918503369e-01, -1.713784125213516e-02, -1.793981666218307e-02, -6.820295250819770e-02, -8.263965595375032e-03, -1.775309897591450e-02, -1.775309897591450e-02, -6.443060365602322e+00, -6.444784648039454e+00, -6.443264952023717e+00, -6.444603951092231e+00, -6.443906635809691e+00, -6.443906635809691e+00, -2.108926918415944e+00, -2.162847288493127e+00, -2.113041693735581e+00, -2.158324551488542e+00, -2.141695204612749e+00, -2.141695204612749e+00, -6.889349962609198e-01, -8.051396716122383e-01, -6.393071559342940e-01, -7.143908435952596e-01, -7.229734740502343e-01, -7.229734740502343e-01, -1.274045652494003e-01, -1.597550268030596e-01, -1.245753839666576e-01, -2.394703802067474e+00, -1.356647202141189e-01, -1.356647202141189e-01, -7.972548936620855e-03, -9.108003145904375e-03, -6.827019332471698e-03, -8.905584871687078e-02, -8.298687640124997e-03, -8.298687640124997e-03, -7.494472399727542e-01, -7.419776293448963e-01, -7.446312952043177e-01, -7.466993299219908e-01, -7.456628239915769e-01, -7.456628239915769e-01, -7.273880011543173e-01, -6.006538213208067e-01, -6.347254830788820e-01, -6.690394157172046e-01, -6.510136252534107e-01, -6.510136252534107e-01, -8.466328498608656e-01, -2.219802961985716e-01, -2.560606717690297e-01, -3.789550720398852e-01, -3.106862693979183e-01, -3.106862693979183e-01, -5.015362562056520e-01, -6.414520711686915e-02, -8.283162138420881e-02, -3.735850335000642e-01, -1.067122252148277e-01, -1.067122252148277e-01, -2.006105631556485e-02, -2.497099594907665e-03, -4.741883078775066e-03, -1.016459839837129e-01, -7.054187832064098e-03, -7.054187832064088e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_ms2h_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_ms2h", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-3.367568547824556e-09, -3.367496247429111e-09, -3.366570969628142e-09, -3.367718504145938e-09, -3.367536078964680e-09, -3.367536078964680e-09, -6.978235006552182e-06, -6.984468605804199e-06, -7.182587489267464e-06, -7.202994318373737e-06, -6.979215882772188e-06, -6.979215882772188e-06, -3.867126329849509e-03, -3.868363326922896e-03, -3.858687932361328e-03, -3.827516184360712e-03, -3.867730397918141e-03, -3.867730397918141e-03, -1.448956271516908e+00, -1.410227621250639e+00, -1.881943264066762e-03, -6.001228432481551e-01, -1.438221042168170e+00, -1.438221042168170e+00, -3.258259346068384e+00, -3.266571156823254e+00, -1.356464769034502e+00, -2.308026180354260e+00, -3.393759789613557e+00, -3.393759789613557e+00, -6.829810004915152e-07, -6.826238433025218e-07, -6.826595739764152e-07, -6.823990758872905e-07, -6.831812325560772e-07, -6.831812325560772e-07, -1.108979198021457e-04, -9.623006578914100e-05, -1.044516282567403e-04, -9.225323454457675e-05, -1.088727838290814e-04, -1.088727838290814e-04, -2.476136655792597e-02, -1.920267471884804e-02, -2.428826147940748e-02, -2.474895598879433e-02, -1.896538096109547e-02, -1.896538096109547e-02, -7.255933662003415e-01, -8.608714347839456e-01, -8.314226279129714e-01, -1.878735342432930e-04, -8.438035176049034e-01, -8.438035176049034e-01, -2.448476830907883e+00, -2.453461167305318e+00, -7.022335224297467e+00, -1.310553239196116e+00, -3.623881005158262e+00, -3.623881005158261e+00, -6.652083603682131e-03, -6.612018164852678e-03, -6.627378549370349e-03, -6.638267963138959e-03, -6.634161725859669e-03, -6.634161725859668e-03, -1.073322800914832e-02, -1.263187410558598e-02, -1.252231947876526e-02, -1.206462605525785e-02, -1.269791429120847e-02, -1.269791429120848e-02, -1.660864366251709e-02, -3.895563467164581e-01, -3.219839063938763e-01, -1.300954658927520e-01, -2.363246641395629e-01, -2.363246641395630e-01, -5.724627608825378e-02, -1.152339721522923e+00, -1.138979342691110e+00, -1.866233498337977e-01, -1.256549004658087e+00, -1.256549004658089e+00, -2.446957547206231e+00, -4.220441590737449e+00, -3.633822954455679e+00, -1.534770611696964e+00, -5.292463060883747e+00, -5.292463060883735e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_ms2h_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_ms2h", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.696995668403892e-04, 1.696921771496116e-04, 1.695713967867164e-04, 1.696867294471881e-04, 1.696964991776351e-04, 1.696964991776351e-04, 1.360087491200330e-03, 1.364266131113174e-03, 1.498142685023654e-03, 1.517303026641203e-03, 1.360799168882743e-03, 1.360799168882743e-03, 2.522212659910256e-03, 2.507484449181638e-03, 2.184951549459106e-03, 2.576053332062763e-03, 2.517412853193110e-03, 2.517412853193110e-03, 1.098796035396034e-01, 1.101402782206505e-01, 4.742713677945485e-04, 6.944903549972459e-04, 1.099301210793374e-01, 1.099301210793374e-01, 1.565439594078322e-08, 1.172679024559308e-08, 2.253187130116677e-06, 8.712875524154979e-16, 1.813485720822674e-08, 1.813485720822946e-08, 4.962778552716036e-05, 4.905847838889958e-05, 4.893792414807927e-05, 4.853340305680904e-05, 5.018555179517540e-05, 5.018555179517540e-05, 9.859620827126086e-03, 8.433507900053289e-03, 9.051945481335918e-03, 7.850917763952614e-03, 9.920913204138859e-03, 9.920913204138859e-03, 6.083390545113056e-02, 6.044642750358122e-02, 4.440485863339871e-02, 5.375103849693637e-02, 5.150394577942795e-02, 5.150394577942795e-02, 2.670788622751332e-04, 6.469213396557653e-02, 3.381044308514444e-04, 1.457040372513585e-02, 2.665630791312705e-03, 2.665630791312705e-03, 7.616294367072513e-15, 6.242641715999021e-15, 1.020336588312738e-13, 2.432359593728526e-06, 2.672443821261016e-15, 2.672443817664179e-15, 8.893976498460313e-03, 8.580533274194644e-03, 8.695409476733156e-03, 8.781295922684595e-03, 8.742699275723839e-03, 8.742699275723837e-03, 1.873830188821913e-02, 1.194654646315291e-02, 1.487730643107330e-02, 1.697289081984922e-02, 1.684303442297684e-02, 1.684303442297687e-02, 5.950190624278318e-02, 5.793110679474060e-02, 8.358056291448702e-02, 6.197634282699702e-02, 8.802872802924164e-02, 8.802872802924164e-02, 6.702912729941062e-02, 4.137707382460468e-06, 6.066336355996525e-06, 7.695063070644120e-02, 2.764622738445440e-04, 2.764622738445410e-04, 3.745718085649089e-12, 2.570660877031623e-20, 2.045895821221570e-15, 2.414867685835454e-04, 1.329649310850856e-15, 1.329649313135258e-15])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
