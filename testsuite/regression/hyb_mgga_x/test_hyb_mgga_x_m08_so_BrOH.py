
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_m08_so_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m08_so", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-6.586884629152698e+00, -6.586794334399388e+00, -6.586465789507472e+00, -6.587935507843603e+00, -6.586836479246484e+00, -6.586836479246484e+00, -1.758092260655516e+00, -1.757918451940774e+00, -1.752787053178582e+00, -1.756095142025377e+00, -1.758044760463586e+00, -1.758044760463586e+00, -3.821102762551652e-01, -3.827284160777891e-01, -4.007796356349819e-01, -4.033788203750909e-01, -3.823325322304209e-01, -3.823325322304209e-01, -1.340489395352013e-01, -1.343563282178158e-01, -4.166144134181786e-01, -1.019593866173044e-01, -1.341234548658750e-01, -1.341234548658750e-01, -1.136026389396370e-02, -1.191383561658565e-02, -5.151540137323701e-02, -5.389770393024614e-03, -1.178959471877284e-02, -1.178959471877261e-02, -1.264514712784071e+00, -1.260108160242484e+00, -1.264067630064130e+00, -1.260641075011635e+00, -1.262209745084931e+00, -1.262209745084931e+00, -1.223964340491670e+00, -1.214678967471130e+00, -1.233353566357307e+00, -1.226870363578553e+00, -1.204351170032989e+00, -1.204351170032989e+00, -2.269636853447054e-01, -1.626956700504549e-01, -2.515884895857025e-01, -2.073467186183922e-01, -2.152541300468252e-01, -2.152541300468252e-01, -8.933898058431748e-02, -1.422803723065773e-01, -8.648970639667511e-02, -6.716073778003560e-01, -8.968713344129137e-02, -8.968713344129137e-02, -5.199720464612169e-03, -5.946231146147227e-03, -4.456843194465570e-03, -7.020497254798350e-02, -5.417573323072977e-03, -5.417573323072941e-03, -1.524983198891946e-01, -1.814220162498368e-01, -1.917352904738428e-01, -1.864332768621005e-01, -1.909925567475166e-01, -1.909925567475166e-01, -1.716498136974466e-01, -2.080067212693125e-01, -1.830497279701968e-01, -1.483199225263972e-01, -1.737178883676568e-01, -1.737178883676571e-01, -2.054049871377012e-01, -1.745938543840491e-01, -1.937477738386766e-01, -2.043812274747703e-01, -2.021909452237788e-01, -2.021909452237786e-01, -2.351845712278093e-01, -4.751599794466810e-02, -6.410398749555016e-02, -1.697280720346733e-01, -7.693362306414794e-02, -7.693362306414778e-02, -1.332384128957331e-02, -1.623394929786938e-03, -3.086391207068958e-03, -7.333401955281281e-02, -4.602384190762573e-03, -4.602384190762577e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_m08_so_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m08_so", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-6.018692341817088e-01, -6.012852917916736e-01, -5.989705557871765e-01, -6.084859923866653e-01, -6.015593996963982e-01, -6.015593996963982e-01, -7.717787972439336e-01, -7.710705360773058e-01, -7.495270795576267e-01, -7.521875460276374e-01, -7.716226021998562e-01, -7.716226021998562e-01, -2.868545280631586e-01, -2.859541767475201e-01, -2.827823524373060e-01, -2.884021830660752e-01, -2.865364754234099e-01, -2.865364754234099e-01, -1.188258841285070e-01, -1.161868121074693e-01, -3.308839222003275e-01, -1.082436237043728e-01, -1.179147844810858e-01, -1.179147844810858e-01, -1.547177468848478e-02, -1.625441260314711e-02, -7.018839316952907e-02, -7.216358177605351e-03, -1.608457313675966e-02, -1.608457313676448e-02, -4.778769210495084e-02, -8.953858219651929e-02, -5.238420690662426e-02, -8.481682082240011e-02, -6.842055005834245e-02, -6.842055005834245e-02, -4.951837722434380e-01, -3.956578106573189e-01, -5.310191622283279e-01, -4.528287918088699e-01, -3.813382677325365e-01, -3.813382677325365e-01, -8.526774468233875e-02, 1.212737461527780e-01, -5.226770316271191e-02, -1.114756012078880e-01, -1.446014411017179e-01, -1.446014411017179e-01, -5.286825170843922e-02, -1.717403929924498e-01, -5.213126230413694e-02, -3.124535663622321e-01, -8.277559208660472e-02, -8.277559208660472e-02, -6.961990260528761e-03, -7.970435017888886e-03, -5.973751535418789e-03, -7.767584778770928e-02, -7.261338149721969e-03, -7.261338149716725e-03, 2.729331007152874e-02, -3.730263922288727e-01, -2.654127554350523e-01, -1.358509264409559e-01, -2.039039934011815e-01, -2.039039934011815e-01, -1.613648517924724e-01, -1.329075029279678e-02, -1.545466175501277e-01, 5.799304507560231e-02, -7.440330498072052e-02, -7.440330498072280e-02, -1.219990666126282e-02, -1.682202091722448e-01, -1.605776536866128e-01, -1.009685567279105e-01, -1.391616034190157e-01, -1.391616034190183e-01, -8.753880213787747e-03, -6.625755618424028e-02, -7.920326541007476e-02, -3.900221913178498e-02, -4.661693768114775e-02, -4.661693768118141e-02, -1.818207359371235e-02, -2.165622586635805e-03, -4.122891147303501e-03, -4.445355576480689e-02, -6.164579144967607e-03, -6.164579144967640e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m08_so_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m08_so", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.018207591380299e-08, -1.018288745327740e-08, -1.018626413971895e-08, -1.017306837559624e-08, -1.018250480982076e-08, -1.018250480982076e-08, -8.364046195014314e-06, -8.359474851611449e-06, -8.219230595056376e-06, -8.257546270505106e-06, -8.362706538235828e-06, -8.362706538235828e-06, -8.909796215505637e-03, -8.881922131622311e-03, -7.893192386800991e-03, -7.812367223783008e-03, -8.900052411711344e-03, -8.900052411711344e-03, -5.559317824520635e-01, -5.848780574140885e-01, -4.824584889099078e-03, -2.940371743323206e-01, -5.654243356777332e-01, -5.654243356777332e-01, 1.016972292609197e+01, 1.011815167766000e+01, 1.138405864219070e+00, 7.725795969971181e+00, 1.050963134999543e+01, 1.050963134999529e+01, -6.720166957828620e-06, -6.790996220079030e-06, -6.727936086564311e-06, -6.782971320737042e-06, -6.755845479294859e-06, -6.755845479294859e-06, -8.047050369643507e-05, -7.581362056686812e-05, -8.105220756391805e-05, -7.758208320461380e-05, -7.612812552277911e-05, -7.612812552277911e-05, -8.507019690122505e-04, -1.529626249300558e-02, -6.937405011016992e-03, -6.264576525795149e-04, -1.134492748774307e-03, -1.134492748774307e-03, -1.082750228980371e+00, -1.696716471107101e-01, -1.160067992730570e+00, -1.261855372603703e-05, -5.253281341721165e-01, -5.253281341721165e-01, 8.182693284435825e+00, 8.180330020947583e+00, 2.337433688875717e+01, -7.598475732396840e-01, 1.209679845216947e+01, 1.209679845216962e+01, -2.183382733634050e-02, -5.483278201634804e-02, -4.791406015375772e-02, -3.900343141699043e-02, -4.389098866050450e-02, -4.389098866050450e-02, -4.492670233667807e-02, -3.328254566777191e-03, -5.370636828269711e-03, -3.525681406583946e-02, -1.631909514781164e-02, -1.631909514781165e-02, -5.323894768378638e-03, -1.578894734763748e-01, -1.561461231251346e-01, -9.180558901676830e-02, -1.365808418844672e-01, -1.365808418844672e-01, -2.102232271985766e-02, 1.416155748524269e+00, -1.061651949695175e-01, -8.635773168084843e-02, -2.199184978159346e+00, -2.199184978159348e+00, 7.730413846905266e+00, 1.426288753215744e+01, 1.222311904721304e+01, -2.663117297653338e+00, 1.770105717804625e+01, 1.770105717804645e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m08_so_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m08_so", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-2.438648760361942e-03, -2.438818876067305e-03, -2.439398187464813e-03, -2.436621494862166e-03, -2.438739897400507e-03, -2.438739897400507e-03, -7.902876521128699e-03, -7.911010086472950e-03, -8.158058952031639e-03, -8.099504574520794e-03, -7.904854892260244e-03, -7.904854892260244e-03, 3.676641838942998e-03, 3.584751584329804e-03, 2.206452880143705e-03, 2.832401384528719e-03, 3.644734129119173e-03, 3.644734129119173e-03, 1.214525982007098e-02, 1.315914494943840e-02, 1.094678797739741e-03, -4.854482047427636e-03, 1.238774923204901e-02, 1.238774923204901e-02, 1.138276922284236e-04, 1.279112817279406e-04, -9.699861669876648e-04, 5.007861207852132e-06, 1.296735582775348e-04, 1.296735582854062e-04, 2.980828924797606e-04, 1.078034004836808e-03, 3.845067271240453e-04, 9.903807140218036e-04, 6.835944939304540e-04, 6.835944939304540e-04, -8.448553423555183e-03, -1.102403034483626e-02, -7.573599699830210e-03, -9.545053788047611e-03, -1.142314511869359e-02, -1.142314511869359e-02, -8.930537450656971e-02, -1.978172784661772e-01, -8.885181514219145e-02, -8.225740481138237e-02, -6.376923724777092e-02, -6.376923724777092e-02, -1.939829709259484e-02, 1.353255461792084e-02, -2.011156177848611e-02, -2.749983550263261e-02, -1.110082980055741e-02, -1.110082980055741e-02, 6.857393635156274e-06, 8.412065715066599e-06, 1.393149720265302e-05, -6.772029430536772e-03, 7.841514658681301e-06, 7.841514659529801e-06, -9.827250847406985e-01, 5.206935243907249e-01, 2.058251140018894e-01, -2.433910627380602e-01, 3.130422883980617e-03, 3.130422883980617e-03, -1.868754948693106e-01, -1.281253302190351e-01, -4.477371712189738e-02, -1.403903520357148e-01, -7.482712836466460e-02, -7.482712836466367e-02, -1.197265947277044e-01, 8.638919683497514e-03, 1.341558038129984e-02, -3.952930494292321e-02, 2.354120044684600e-04, 2.354120044682294e-04, -1.066673430263247e-01, -1.459176763709422e-04, -3.743427139956546e-03, -1.146148510279388e-01, -2.090078577326693e-02, -2.090078577325134e-02, 7.018540446579428e-05, 1.964797359861248e-07, 2.627153789661682e-06, -2.196212946786040e-02, 6.794418701376915e-06, 6.794418702156194e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
