
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_m08_so_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m08_so", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-4.877507688242383e+00, -4.877307890129153e+00, -4.876444770650794e+00, -4.879693830933713e+00, -4.877402365568118e+00, -4.877402365568118e+00, -1.532242560598154e+00, -1.532238406374824e+00, -1.532112860654702e+00, -1.532296622527292e+00, -1.532248707723967e+00, -1.969403597699420e+00, -2.485432754085011e-01, -4.906173860587825e-01, -4.871775034743804e-01, -4.867975607274501e-01, -4.906797141191045e-01, -4.906797141191045e-01, -1.373260506753457e-01, -1.382883311171478e-01, -3.003704555894520e-01, -1.051351139045754e-01, -1.376319734585418e-01, -1.376319734585418e-01, -1.135855412568926e-02, -1.191137279690555e-02, -5.137177244140102e-02, -5.387151496874105e-03, -1.178748386767285e-02, -1.178748386767263e-02, -1.268614008113415e+00, -1.264204918786108e+00, -1.268114903504075e+00, -5.736045375357099e-01, -1.266377896877453e+00, -1.266377896877453e+00, -8.383437679117201e-01, -8.522228781225805e-01, -8.320718650509626e-01, -8.435320604286040e-01, -8.552469795082207e-01, -1.238789720249810e+00, -2.288311265028355e-01, -1.988443459321307e-01, -2.658999912886392e-01, -2.097040513579019e-01, -2.172736196344084e-01, -2.125437010635982e-01, -4.582151855078703e-02, -1.435154913863801e-01, -4.391178041336798e-02, -6.872242225672737e-01, -9.122537161948502e-02, -9.122537161948502e-02, -4.854250783406424e-03, -5.943359244331952e-03, -4.455889437250843e-03, -4.363168085948019e-02, -5.053191893476159e-03, -5.414219479738236e-03, -1.574992744949422e-01, -1.934061858595038e-01, -1.670233932436272e-01, -1.952173051343949e-01, -2.008189164767880e-01, -2.008189164767880e-01, -1.890437480117801e-01, -2.084595904100712e-01, -1.841270705059526e-01, -1.577423780464457e-01, -1.776946137141068e-01, -1.456189829093464e-01, -2.255918718452755e-01, -8.662307766395531e-02, -2.002370162358145e-01, -1.513395282564792e-01, -2.136911568836906e-01, -2.136911568836903e-01, -1.990080232587702e-01, -4.742401394974687e-02, -6.413325759888434e-02, -1.828759117720961e-01, -4.033716830494354e-02, -7.895248514347136e-02, -1.328829156923121e-02, -1.623268466090569e-03, -3.086221038220856e-03, -7.539940958924853e-02, -4.599786393217255e-03, -4.599786393217258e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_m08_so_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m08_so", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([6.572741007877371e+00, 6.573198993846258e+00, 6.575212218016519e+00, 6.567754994421652e+00, 6.572982201887917e+00, 6.572982201887917e+00, -1.990146835059371e+00, -1.989289134483474e+00, -1.963478852167392e+00, -1.973649331543808e+00, -1.989918227933669e+00, 1.132771196256252e-01, -3.512606541184292e-01, -4.382727542498819e-01, -4.559712426659561e-01, -4.455856842713448e-01, -4.378547255716990e-01, -4.378547255716990e-01, -1.292586645417585e-01, -1.279158139080540e-01, -4.006942978407117e-01, -1.033700600914535e-01, -1.288726968320494e-01, -1.288726968320494e-01, -1.546522355251101e-02, -1.624501695943946e-02, -7.029284824501582e-02, -7.205942824907142e-03, -1.607652074878897e-02, -1.607652074879378e-02, -5.299343815714033e-02, -9.454812576447377e-02, -5.750282985448452e-02, 5.846925094044775e-01, -7.361500452033039e-02, -7.361500452033039e-02, -1.471899613750398e+00, -1.438185133331364e+00, -1.482785817723236e+00, -1.461723423374397e+00, -1.426766910119616e+00, -3.254850259129851e-01, -5.645447412082250e-02, -3.986568154588457e-02, 6.078118071239200e-02, -1.501546072233570e-01, -1.735682904434547e-01, -8.208436023430658e-02, -1.931212590394129e-02, -1.778711454176630e-01, -1.873890324581304e-02, -5.732165384768916e-01, -7.779047492071835e-02, -7.779047492071835e-02, -6.446305988986979e-03, -7.959036852990016e-03, -5.969969044867961e-03, -3.385862025439335e-02, -6.707919434738324e-03, -7.248020050585646e-03, 5.543608993790101e-02, -3.491761085267941e-01, -3.353657889132901e-01, -1.050253244625470e-01, -1.736186831659224e-01, -1.736186831659224e-01, -9.946068265118319e-02, -7.577709305594328e-03, -1.665301295614956e-01, 2.874649304668428e-02, -9.938353224998321e-02, 9.772806764782686e-02, -1.768724115967820e-01, -1.098111990929997e-01, -1.753245718132299e-01, -2.593737235026952e-01, -1.434660532822142e-01, -1.434660532822172e-01, -2.288055487519893e-01, -6.615208767184730e-02, -8.108941211467605e-02, 2.050464741363749e-02, -1.760059239049214e-02, -4.961117849072572e-02, -1.804515777631010e-02, -2.165117049031632e-03, -4.122212531241655e-03, -4.750437318296743e-02, -6.154252566681854e-03, -6.154252566681887e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m08_so_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m08_so", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.302783246763706e-08, -1.302882093493082e-08, -1.303303453316499e-08, -1.301696779369047e-08, -1.302835391652914e-08, -1.302835391652914e-08, -1.106987471461269e-05, -1.106274810020575e-05, -1.084637688315162e-05, -1.092676483942645e-05, -1.106768593834861e-05, -6.003293661225674e-06, -1.608750343715742e-02, -3.350541504245269e-03, -2.905924733638753e-03, -3.157958197037546e-03, -3.361641817117123e-03, -3.361641817117123e-03, -4.514676825122436e-01, -4.665919983691318e-01, -7.345775324455011e-03, -2.757893372816593e-01, -4.555076614007861e-01, -4.555076614007861e-01, 9.768938535205326e+00, 9.616453910457762e+00, 8.742052589704435e-01, 3.722055527520681e+00, 1.005661115568470e+01, 1.005661115568456e+01, -6.711756997751822e-06, -6.782595579510543e-06, -6.719633258815793e-06, -8.196709055817369e-06, -6.747296384433823e-06, -6.747296384433823e-06, -1.695011268466717e-04, -1.555618081109417e-04, -1.754366094255913e-04, -1.644686406330788e-04, -1.522027618300917e-04, -6.908911296654247e-05, -1.168532249539380e-03, -1.263324933488725e-02, -5.836086513616360e-03, -1.138395023471431e-03, -1.259420567363223e-03, -8.516983304263729e-04, -2.433445603720043e+01, -1.392570009334640e-01, -2.642221458952418e+01, -1.454190356551502e-05, -5.812488968902346e-01, -5.812488968902346e-01, 1.051816109767669e+06, 4.678270298115674e+00, 1.835537570483388e+01, -7.260265791649607e+01, 8.919516692755170e+05, 5.771164830080000e+00, -2.135043424853908e-02, -5.359098560775998e-02, -5.043441844949865e-02, -3.812432104225557e-02, -4.289894742910907e-02, -4.289894742910907e-02, -4.289611263927521e-02, -3.361993974656786e-03, -5.281827712098994e-03, -3.377849029553949e-02, -1.570868485066909e-02, -2.071685703543034e-02, -4.359341453777720e-03, -1.069720955301691e+00, -1.286357775719873e-01, -1.578558298746594e-01, -1.105450485227665e-01, -1.105450485227664e-01, -3.161486783696051e-02, 1.212891712935317e+00, -5.769797466104727e-02, -6.849281846313841e-02, -5.106551999155890e+01, -1.978515276516353e+00, 3.862738540689703e+00, 5.247469257732435e+00, 1.026435567516378e+01, -2.377116900287644e+00, 8.129283380781841e+00, 8.129283380781938e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m08_so_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m08_so", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-7.666644565608377e-03, -7.666926488366165e-03, -7.668142296188063e-03, -7.663555718295758e-03, -7.666793195936984e-03, -7.666793195936984e-03, -3.978239446553060e-04, -4.043308656028552e-04, -6.014657538045226e-04, -5.247640062822837e-04, -3.996280008689552e-04, -1.421208347736136e-02, 1.857361555634464e-03, 5.015200787361270e-03, 3.673733194196933e-03, 4.221190629354817e-03, 5.051973451441876e-03, 5.051973451441876e-03, 1.268065672751943e-02, 1.384356061988463e-02, 8.715623460411936e-06, -5.758251038335830e-03, 1.297472277008515e-02, 1.297472277008515e-02, 1.141052827315309e-04, 1.283492708389568e-04, -5.239330839277651e-04, 5.040705656277973e-06, 1.300580918076747e-04, 1.300580918155459e-04, 4.218054074011428e-04, 1.200027712107892e-03, 5.064793012163718e-04, -1.956931501621672e-02, 8.085531702022797e-04, 8.085531702022797e-04, 6.799934869172203e-03, 5.951041817886899e-03, 7.083284669121834e-03, 6.530099867054336e-03, 5.689307124545621e-03, -1.289987928312147e-02, -9.918730657492970e-02, -6.931842760739759e-02, -1.264834682692902e-01, -5.970281983114373e-02, -4.817307311145777e-02, -9.563898153101984e-02, -2.502635014078333e-02, 1.369365549766800e-02, -2.583452545978382e-02, -1.382627630473472e-02, -1.139539328432543e-02, -1.139539328432543e-02, -2.237813052702213e-05, 8.467485537102295e-06, 1.397218685397042e-05, -1.492417758880520e-02, -2.576250511681865e-05, 7.907658407154373e-06, -1.081610310014860e+00, 4.968311706988279e-01, 3.134180369901947e-01, -3.109890031910032e-01, -5.343137431146816e-02, -5.343137431146816e-02, -3.307943719587730e-01, -1.306944879068923e-01, -3.571293837688769e-02, -1.034440679924599e-01, -5.209118629787042e-02, -2.404589918194742e-01, -2.930273323655798e-02, -3.334617974973670e-03, 1.372277715763091e-02, 3.524151609328129e-02, -5.051316078905439e-03, -5.051316078905450e-03, -1.721554719109166e-02, 1.756465041865215e-05, -2.661193553161478e-03, -1.634760817958394e-01, -2.833953085863224e-02, -1.897463267004786e-02, 7.325407003297206e-05, 1.966799448102605e-07, 2.629071608215585e-06, -1.980958662461031e-02, 6.846359155181304e-06, 6.846359155961045e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
