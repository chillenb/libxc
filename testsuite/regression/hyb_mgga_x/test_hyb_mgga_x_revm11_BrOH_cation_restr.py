
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_revm11_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revm11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.359854954009208e+01, -1.359857201263849e+01, -1.359869019969563e+01, -1.359835461574103e+01, -1.359852775019004e+01, -1.359852775019004e+01, -2.495950333853306e+00, -2.495875892074968e+00, -2.493933735291416e+00, -2.494966955278096e+00, -2.494578852905904e+00, -2.944982074978598e+00, -3.416426688074551e-01, -5.435826515241162e-01, -5.419631875495231e-01, -5.398042345034367e-01, -5.404356476742287e-01, -5.404356476742287e-01, -4.982345049844623e-02, -5.109387203121364e-02, -3.750977105930903e-01, -3.012506183098016e-02, -3.721616271205434e-02, -3.721616271205434e-02, -9.173744591853064e-06, -1.069026290617946e-05, -1.595263178724018e-03, -1.773353454807249e-06, -3.514350709729160e-06, -3.514350709729160e-06, -3.035081407399691e+00, -3.039021694935243e+00, -3.035301324987907e+00, -3.231346003251591e+00, -3.037046802137974e+00, -3.037046802137974e+00, -1.349697288942625e+00, -1.358647336765628e+00, -1.342483276527304e+00, -1.351212103403819e+00, -1.357756698045556e+00, -1.706018818886349e+00, -2.705845020279313e-01, -2.559042144121311e-01, -2.881443608599110e-01, -2.538412237765876e-01, -2.641958754826568e-01, -2.659107692238993e-01, -4.596495620789535e-03, -5.496318827944870e-02, -3.733769184263486e-03, -1.118672041855200e+00, -1.882662837834568e-02, -1.882662837834562e-02, -1.463163987750928e-07, -1.657000085797091e-06, -7.403038866294958e-07, -1.247764879923786e-03, -2.325587589721100e-07, -1.294493588456704e-06, -2.794454124468506e-01, -2.580041291921519e-01, -2.658434252835541e-01, -2.725721741811645e-01, -2.693834883117118e-01, -2.693834883117118e-01, -2.664218565130047e-01, -2.312538980771449e-01, -2.073149471026068e-01, -2.001489843720121e-01, -1.998331581781417e-01, -2.111550648424564e-01, -2.792417885195669e-01, -4.372952414129611e-02, -1.178864786449419e-01, -1.280852095455898e-01, -1.405941935316965e-01, -1.405941935316965e-01, -1.960244704787653e-01, -1.412333927960442e-03, -3.280916443737347e-03, -1.346447707438012e-01, -2.411322317179064e-03, -8.652100461254270e-03, -2.573147642515310e-05, -3.168626641428432e-08, -2.928643855401154e-07, -7.504360645137056e-03, -1.025552680055168e-06, -1.025552680055165e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_revm11_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revm11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.732893900782827e+01, -1.732924054999942e+01, -1.733049449205148e+01, -1.732602703185751e+01, -1.732837979494730e+01, -1.732837979494730e+01, -2.877018959440786e+00, -2.876480140870867e+00, -2.862357444239174e+00, -2.868331185393598e+00, -2.867377197076578e+00, -1.337113866532486e+00, -6.078176760601788e-01, -4.759550633223715e-01, -5.013824736761568e-01, -4.879172860747802e-01, -4.911825724756483e-01, -4.911825724756483e-01, -6.620264137387603e-02, -6.704423105341235e-02, -6.644863513650754e-01, -4.159268647052488e-02, -5.427728069015058e-02, -5.427728069015033e-02, -1.824779976354869e-05, -2.124922709219926e-05, -2.768172411916041e-03, -3.541174150916904e-06, -7.008386188990407e-06, -7.008386188990407e-06, -4.950762353819171e+00, -4.969307928260640e+00, -4.951828192638427e+00, -4.762010106097352e+00, -4.960083122801921e+00, -4.960083122801921e+00, -1.796005337705705e+00, -1.762511004217477e+00, -1.821908087573567e+00, -1.792792525526478e+00, -1.763940460986561e+00, -9.128186697578020e-01, -1.842321314589224e-01, -3.788407025285665e-01, -1.648750531242869e-01, -1.775065608658548e-01, -2.048121281678749e-01, -3.034828559784726e-01, -8.303817418287259e-03, -7.777991346577030e-02, -6.791535956440261e-03, -8.305779840348946e-01, -2.280317010111879e-02, -2.280317010111899e-02, -2.925890589795045e-07, -3.309344205247139e-06, -1.477236307170435e-06, -2.354237138621752e-03, -4.649504948705559e-07, -2.583641386169549e-06, -4.330732665425141e-01, -4.541681014609523e-01, -4.255133267382853e-01, -4.450169141326313e-01, -4.486361918830731e-01, -4.486361918830731e-01, -4.225439244526761e-01, -1.392691400100275e-01, -1.813785258754487e-01, -3.093335383000621e-01, -2.348083470899293e-01, -2.779842591760870e-01, -3.374962062738586e-01, -9.038766897079771e-02, -1.326892389818274e-01, -2.005967505302330e-01, -1.337199229203072e-01, -1.337199229203067e-01, -2.542745555110354e-01, -2.479771867216750e-03, -5.156018259349264e-03, -9.243247112747484e-02, -4.426355497463331e-03, -7.567889115566067e-03, -5.107246575887964e-05, -6.336552049536777e-08, -5.852521994858626e-07, -6.820563509251655e-03, -2.046792143543932e-06, -2.046792143543953e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_revm11_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revm11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [6.920051799810687e-09, 6.920242684618138e-09, 6.920959559186150e-09, 6.918139402953704e-09, 6.919636033564774e-09, 6.919636033564774e-09, -1.089567927416946e-05, -1.089041056379308e-05, -1.075053498051290e-05, -1.080327232846898e-05, -1.080203149736401e-05, -6.656352364083615e-06, -1.243170219753499e-02, -3.273511362267893e-03, -3.074189243136867e-03, -3.230618546214045e-03, -3.195307076246341e-03, -3.195307076246341e-03, -1.279539516834879e-01, -1.357027863887535e-01, -9.365190756200221e-03, -7.291207197322593e-02, -5.706515393352589e-02, -5.706515393352580e-02, -1.128652854534671e-02, -1.302390495641879e-02, -1.745880085425150e-01, -2.768437000219536e-03, -6.080534124103372e-03, -6.080534124103372e-03, 1.821437552243460e-06, 1.823361335111523e-06, 1.821569386046113e-06, 2.350686130033593e-06, 1.822446327581486e-06, 1.822446327581486e-06, -1.400083031058596e-04, -1.292035360167594e-04, -1.485518508557406e-04, -1.385956562887706e-04, -1.299434402746915e-04, -6.800052885845632e-05, -1.488172247739652e-03, 4.388831177472518e-03, -6.416056044952246e-03, -1.511458745941207e-03, -2.357733348900250e-04, 1.156637902431205e-03, -9.236032990018783e+00, -4.089922515976193e-02, -1.121395383002999e+01, 6.410593480253697e-06, -1.850037186505178e-01, -1.850037186505175e-01, -1.443920551583782e+04, -2.339001024623342e-03, -1.105366247318386e-02, -2.827099727944611e+01, -1.059606771468539e+04, -6.156766075591386e-03, -1.184828638673624e-02, 3.099845631843970e-03, -2.184728124736063e-04, -4.624363820934471e-03, -2.367809656991574e-03, -2.367809656991574e-03, -9.605268937287912e-03, -6.863678591883340e-03, 8.872582630231903e-04, 8.340967048260341e-03, 4.830940181805206e-03, 8.403606899153742e-03, 2.439497382627579e-03, -6.182900754000965e-01, -6.416835937713931e-02, -7.696464709723404e-02, -5.688023178206787e-02, -5.688023178206787e-02, -2.094551147797245e-02, -1.636212169757954e-01, -2.497612073164580e-01, -3.525839279116660e-02, -1.577133184203417e+01, -5.755503105497759e-01, -1.072524262021119e-02, -2.048022900376279e-04, -2.586154617804944e-03, -6.141433910357843e-01, -7.512917444953792e-03, -7.512917444953793e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_revm11_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revm11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-5.008637748335889e-04, -5.007172330701200e-04, -5.001236673345602e-04, -5.022927312082613e-04, -5.011482885651768e-04, -5.011482885651768e-04, -3.835999113700509e-03, -3.840278657347369e-03, -3.953266866075584e-03, -3.907221359211269e-03, -3.912532553451547e-03, -1.297834079693697e-02, 1.024770580841730e-02, -5.450726187143830e-03, -3.801028591296786e-03, -4.373819430890211e-03, -4.214341280671943e-03, -4.214341280671943e-03, -4.572063576630063e-03, -4.392372102575328e-03, 4.968178368692362e-03, -4.917811935724483e-03, -5.919353217715226e-03, -5.919353217715333e-03, -1.591792174238795e-08, -2.141213405624391e-08, -4.569435132266563e-05, -7.532974936639404e-10, -3.281000361604649e-09, -3.281000361604649e-09, 5.804115126923523e-03, 6.081141327965849e-03, 5.820043847105833e-03, 5.841569115437965e-03, 5.942781105930326e-03, 5.942781105930326e-03, -1.183013201172098e-03, -2.113747156767280e-03, -4.877834266828845e-04, -1.287075182774619e-03, -2.059927721210230e-03, -1.516899220954917e-02, -8.655208295375436e-02, -2.738123576202636e-02, -6.839498260509821e-02, -8.858945393840462e-02, -8.578081347804693e-02, -4.225855402469345e-02, -3.074183464130771e-04, -6.355420127662929e-03, -2.474181514249491e-04, -3.520160790637224e-02, -3.576166197236455e-03, -3.576166197236393e-03, -1.961123047665783e-11, -5.946453291225560e-10, -1.255905902141046e-09, -6.520570455768369e-05, -1.681830323143796e-10, -1.223123606382553e-09, 1.390321308817269e-01, 1.358493025152356e-01, 7.961038177748866e-02, 1.502659516600579e-01, 1.500518210492316e-01, 1.500518210492316e-01, 1.477888461824670e-01, -8.399449742802996e-02, -9.040892258760491e-02, -2.373152393116305e-02, -7.042981993941823e-02, -3.155555995471893e-02, -5.598064378003078e-02, 7.868486763544241e-03, -5.271724067504266e-03, -2.219489828330330e-03, -1.704305782930703e-02, -1.704305782930685e-02, -2.137082209894380e-02, -3.772092735982261e-05, -1.398466928203975e-04, -7.408616263663478e-02, -2.069436905504144e-04, -1.255036095582522e-03, -4.248523287907002e-08, -9.949807304772627e-13, -1.161648766719001e-10, -1.072804792978606e-03, -1.182453171521760e-09, -1.182453171524636e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
