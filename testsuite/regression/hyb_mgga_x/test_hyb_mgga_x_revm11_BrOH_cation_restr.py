
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_revm11_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revm11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.274134692142765e+01, -1.274135301545986e+01, -1.274137814545232e+01, -1.274128449780745e+01, -1.274133368624163e+01, -1.274133368624163e+01, -2.723952316847797e+00, -2.723734930295750e+00, -2.718168845040996e+00, -2.721960038726948e+00, -2.720715757974011e+00, -2.720715757974011e+00, -4.441875516140804e-01, -4.444411600795901e-01, -4.529669481950666e-01, -4.571129747485078e-01, -4.552209946640611e-01, -4.552209946640611e-01, -4.933933070991743e-02, -5.045095350287841e-02, -5.250627775270632e-01, -2.966989780459145e-02, -3.675407650695851e-02, -3.675407650695851e-02, -9.173501923806866e-06, -1.068967432042480e-05, -1.580738246675467e-03, -1.773159358955127e-06, -3.513927916777957e-06, -3.513927916777957e-06, -3.036177177627424e+00, -3.040105797197322e+00, -3.036374349205635e+00, -3.039841236151892e+00, -3.038148096547257e+00, -3.038148096547257e+00, -1.686462518832641e+00, -1.677206563868210e+00, -1.702432722644891e+00, -1.694652500267753e+00, -1.673268642309887e+00, -1.673268642309887e+00, -2.682880138444159e-01, -2.678793403063249e-01, -2.730026642429456e-01, -2.506610831840375e-01, -2.641606580344953e-01, -2.641606580344953e-01, -1.456388437930747e-02, -5.467483925697060e-02, -1.241709276882128e-02, -1.134622321410478e+00, -1.849898988173173e-02, -1.849898988173167e-02, -8.149235476871939e-07, -1.656606127619891e-06, -7.401638550622008e-07, -5.260725643755786e-03, -1.294093016015128e-06, -1.294093016015128e-06, -2.770212075742764e-01, -2.586167980161182e-01, -2.660105430840433e-01, -2.716457493560273e-01, -2.689154369248197e-01, -2.689154369248197e-01, -2.629971806207242e-01, -2.304467643511391e-01, -2.074867481446545e-01, -2.022215358571865e-01, -2.009256119539841e-01, -2.009256119539841e-01, -2.906597716560845e-01, -8.606513071253274e-02, -1.153427312637108e-01, -1.551508481528854e-01, -1.355484935689478e-01, -1.355484935689479e-01, -2.220125512674974e-01, -1.406658362059090e-03, -3.220631698750988e-03, -1.291068839231276e-01, -8.246408044883378e-03, -8.246408044883394e-03, -2.569683274266804e-05, -3.168304839886886e-08, -2.928553878057039e-07, -7.287916501585225e-03, -1.025321491753948e-06, -1.025321491753945e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_revm11_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revm11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.618682619901205e+01, -1.618733169021810e+01, -1.618935665201053e+01, -1.618186844376789e+01, -1.618582318913255e+01, -1.618582318913255e+01, -1.995173915863588e+00, -1.994800457139919e+00, -1.984585251641414e+00, -1.984548358484998e+00, -1.986160426848076e+00, -1.986160426848076e+00, -4.505706854063742e-01, -4.493557862449161e-01, -4.197246692486606e-01, -4.270777733136911e-01, -4.259548732261313e-01, -4.259548732261313e-01, -6.424598797819089e-02, -6.466738138769597e-02, -4.635801446711673e-01, -4.321114561601227e-02, -5.175230224602692e-02, -5.175230224602670e-02, -1.824666973395078e-05, -2.124648701204194e-05, -2.703967861004791e-03, -3.540268949885131e-06, -7.006415452317834e-06, -7.006415452317834e-06, -4.950032576883859e+00, -4.968531999297062e+00, -4.951110550809968e+00, -4.967431184854067e+00, -4.959322236371909e+00, -4.959322236371909e+00, -9.920388750034672e-01, -9.508654379304328e-01, -1.014361970532465e+00, -9.761648223860143e-01, -9.589907542845514e-01, -9.589907542845514e-01, -2.227734063633375e-01, -3.934570965631274e-01, -2.223751850925599e-01, -2.547891025421303e-01, -2.400916978734880e-01, -2.400916978734880e-01, -1.329492696290546e-02, -7.625854893820667e-02, -1.084920287071843e-02, -1.135324512343218e+00, -2.441235871725525e-02, -2.441235871725543e-02, -1.628048766268616e-06, -3.307506856996266e-06, -1.476583440321805e-06, -6.141077825899214e-03, -2.581773705476810e-06, -2.581773705476805e-06, -4.274705626093934e-01, -4.483005951893508e-01, -4.448336909920719e-01, -4.384088350088619e-01, -4.419862164015612e-01, -4.419862164015612e-01, -4.106198493887392e-01, -1.434351672291040e-01, -1.872170572811276e-01, -3.120659142675923e-01, -2.404059339119042e-01, -2.404059339119038e-01, -3.752968786617457e-01, -1.078030860360841e-01, -1.271975320543782e-01, -1.389202320350758e-01, -1.318474010839527e-01, -1.318474010839524e-01, -1.578542541516896e-01, -2.454551509282256e-03, -4.898778647280876e-03, -1.088216032562217e-01, -7.208944064659425e-03, -7.208944064659646e-03, -5.091133070998244e-05, -6.335050412147605e-08, -5.852102237807174e-07, -6.477749070595392e-03, -2.045714214664534e-06, -2.045714214664555e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_revm11_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revm11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([4.759220790913571e-09, 4.759429134829139e-09, 4.760167270956616e-09, 4.757084653447411e-09, 4.758726737971473e-09, 4.758726737971473e-09, -8.682934644244888e-06, -8.679624060445164e-06, -8.590164197611327e-06, -8.611609025161659e-06, -8.617761498633735e-06, -8.617761498633735e-06, -7.547880051370638e-03, -7.557337251000242e-03, -7.520751686634238e-03, -7.149965737770120e-03, -7.283319046734815e-03, -7.283319046734815e-03, -1.452790555370418e-01, -1.571008441300373e-01, -5.800427691229899e-03, -5.801541787172775e-02, -8.449883890251939e-02, -8.449883890251937e-02, -1.147671437893591e-02, -1.342911653739880e-02, -2.170721786914278e-01, -3.483369751942565e-03, -6.984652160242896e-03, -6.984652160242916e-03, 1.824515645126697e-06, 1.826403294187759e-06, 1.824583419285190e-06, 1.826251148336196e-06, 1.825538188836873e-06, 1.825538188836873e-06, -7.637371234853695e-05, -7.231692867070147e-05, -7.785783489770205e-05, -7.435964696985482e-05, -7.327321736176944e-05, -7.327321736176944e-05, -1.222375460732897e-03, 5.654791168234622e-03, -7.599540286717176e-03, -7.201729843805673e-04, 2.094028791834382e-04, 2.094028791834382e-04, -3.922794015246193e-01, -4.812811090823754e-02, -4.677712027174236e-01, 2.263947717161263e-05, -1.544775795723349e-01, -1.544775795723346e-01, -2.733127497273705e-03, -3.918137228661796e-03, -1.438444908631161e-02, -5.685714438711416e-01, -9.714892790968821e-03, -9.714892790968798e-03, -1.205197330877827e-02, 3.235517633816846e-03, -3.868772882826220e-04, -4.662037651008636e-03, -2.354216828908075e-03, -2.354216828908075e-03, -9.897020054309915e-03, -6.923116943611553e-03, 1.083484462831352e-03, 8.854715356978449e-03, 5.207567596230393e-03, 5.207567596230389e-03, 3.509237645720359e-03, -6.616496681113196e-02, -7.530648141603544e-02, -4.730527004620828e-02, -6.749241411176937e-02, -6.749241411176937e-02, -1.474816414135220e-02, -1.821919709680205e-01, -3.244899324121538e-01, -4.053787724953899e-02, -6.364116441851523e-01, -6.364116441851511e-01, -1.840227881554024e-02, -1.374577785630499e-03, -2.930426212573967e-03, -6.685499327027453e-01, -1.050639005452722e-02, -1.050639005452723e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_revm11_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revm11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-1.600622045715200e-03, -1.600401944227111e-03, -1.599543047905514e-03, -1.602802275300021e-03, -1.601078004296063e-03, -1.601078004296063e-03, -8.713240014636593e-03, -8.718417923923093e-03, -8.857652844746251e-03, -8.826317407250579e-03, -8.819725015517650e-03, -8.819725015517650e-03, 1.100332013397760e-03, 1.101060201781732e-03, 4.441667504575344e-04, 1.134003733930874e-04, 2.851264466158368e-04, 2.851264466158368e-04, -4.535674568118652e-03, -4.309479804617737e-03, 6.997250290271555e-04, -4.929637353539378e-03, -6.046365670025279e-03, -6.046365670025389e-03, -1.591746222924662e-08, -2.141084735545835e-08, -4.523000432551846e-05, -7.532075733491887e-10, -3.280569781373571e-09, -3.280569781373571e-09, 5.803402930999596e-03, 6.079738496803530e-03, 5.819307071099171e-03, 6.063090743847376e-03, 5.941712031422917e-03, 5.941712031422917e-03, -1.290437522231616e-02, -1.434283650164654e-02, -1.204834490377656e-02, -1.331832399688047e-02, -1.413391383367886e-02, -1.413391383367886e-02, -7.213455781082359e-02, -1.251800001327072e-02, -5.075421104757288e-02, -5.576472630154388e-02, -7.128094239469646e-02, -7.128094239469646e-02, -1.722412689155351e-03, -6.422562109529707e-03, -1.382088161879609e-03, -2.124683081632207e-02, -3.499100995330108e-03, -3.499100995330048e-03, -1.426431816724860e-10, -5.944911431686276e-10, -1.255646784124306e-09, -4.051464217383898e-04, -1.222710787530784e-09, -1.222710787521789e-09, 1.041240162460725e-01, 1.242425499373909e-01, 1.303644844828918e-01, 1.263331815405066e-01, 1.296082572144577e-01, 1.296082572144577e-01, 8.606309921260333e-02, -8.221316488542317e-02, -8.703930434951349e-02, -2.038138508509874e-02, -6.624411216835510e-02, -6.624411216835527e-02, -3.413382911134964e-02, -5.221165286079091e-03, -4.750671887476176e-03, -3.123690222528694e-02, -1.451025578618897e-02, -1.451025578618889e-02, -5.756866646720560e-02, -3.755207789256986e-05, -1.369306862422696e-04, -6.080899167391487e-02, -1.179114949558988e-03, -1.179114949558892e-03, -4.242278914141483e-08, -9.948705511219272e-13, -1.161609847847630e-10, -1.033479227630029e-03, -1.182162432638189e-09, -1.182162432641066e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
