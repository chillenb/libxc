
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_m06_sx_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06_sx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.420324782954781e+01, -1.420322845638577e+01, -1.420322198278237e+01, -1.420350696351363e+01, -1.420334640099009e+01, -1.420334640099009e+01, -2.332556143084610e+00, -2.332550730355656e+00, -2.332624430370311e+00, -2.334490418064535e+00, -2.333340061378851e+00, -2.333340061378851e+00, -4.446179448417462e-01, -4.445108321767433e-01, -4.428407891723330e-01, -4.528215941489809e-01, -4.496165958423134e-01, -4.496165958423134e-01, -1.436208287714413e-01, -1.454113567926558e-01, -4.218849475106319e-01, -1.036070635167788e-01, -1.151823115630845e-01, -1.151823115630845e-01, -1.062140690797746e-02, -1.117304752444556e-02, -5.582527622684898e-02, -6.152715116884525e-03, -7.723154989497971e-03, -7.723154989497971e-03, -3.279781926994658e+00, -3.275960498869557e+00, -3.279586586185723e+00, -3.276214558723358e+00, -3.277857654648636e+00, -3.277857654648636e+00, -1.485371365996658e+00, -1.493836458968711e+00, -1.489452696941272e+00, -1.497070734070905e+00, -1.488090261112970e+00, -1.488090261112970e+00, -3.980524633468158e-01, -3.964715983864193e-01, -3.668604556351329e-01, -3.578042550744976e-01, -4.012916030384012e-01, -4.012916030384012e-01, -9.502802520533331e-02, -1.397917841934191e-01, -9.225002325393755e-02, -1.204997541989189e+00, -9.251833916321302e-02, -9.251833916321305e-02, -4.749828150039831e-03, -6.015166635499261e-03, -4.596253548843473e-03, -7.619816406877024e-02, -5.537733939249758e-03, -5.537733939249763e-03, -3.522140527095442e-01, -3.370286087122048e-01, -3.362267017312825e-01, -3.397139043412046e-01, -3.373714712286741e-01, -3.373714712286741e-01, -3.339348577161752e-01, -3.588638316773604e-01, -3.592257343017701e-01, -3.503567973072577e-01, -3.565316456639547e-01, -3.565316456639547e-01, -4.207351021252109e-01, -1.820426631556336e-01, -2.149756529957096e-01, -2.515640953598316e-01, -2.347678788751093e-01, -2.347678788751092e-01, -3.273135981247938e-01, -5.396468947345952e-02, -6.849056937595931e-02, -2.349339412602166e-01, -8.069741840819758e-02, -8.069741840819761e-02, -1.495565027228680e-02, -1.609637764132871e-03, -3.376925417609904e-03, -7.872790772434060e-02, -5.124174697084969e-03, -5.124174697084965e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_m06_sx_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06_sx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.445391347511898e+01, -1.445385119575974e+01, -1.445358128835465e+01, -1.445449812409551e+01, -1.445401699163246e+01, -1.445401699163246e+01, -2.678081772498528e+00, -2.678145180802124e+00, -2.679703253865528e+00, -2.677836151239624e+00, -2.678380105384993e+00, -2.678380105384993e+00, -5.371377078075988e-01, -5.370267562396033e-01, -5.355822281084350e-01, -5.292127755516642e-01, -5.311688480694391e-01, -5.311688480694391e-01, -1.591891470251511e-01, -1.589579030312402e-01, -6.872611677363430e-01, -7.718498421707165e-02, -1.214695669271544e-01, -1.214695669271544e-01, -1.406848901220296e-02, -1.478593969026853e-02, -6.281572678280106e-02, -8.187253159558058e-03, -1.026019963684704e-02, -1.026019963684704e-02, -3.237615640940926e+00, -3.234800609916924e+00, -3.237410732740845e+00, -3.234929021809031e+00, -3.236207073324309e+00, -3.236207073324309e+00, -1.383571284613438e+00, -1.395951827618240e+00, -1.371653036172221e+00, -1.381668869105318e+00, -1.396743037166474e+00, -1.396743037166474e+00, -4.468655712416200e-01, -4.536017928336806e-01, -4.189463864356189e-01, -4.559838733622836e-01, -4.512378829136198e-01, -4.512378829136198e-01, -4.957732553314338e-02, -1.505458080911536e-01, -5.126574915274241e-02, -1.536030464397811e+00, -5.534523312155062e-02, -5.534523312155075e-02, -6.325586254525469e-03, -8.004663730481986e-03, -6.109912871777867e-03, -6.229317678163759e-02, -7.362598988388099e-03, -7.362598988388105e-03, -5.540526370580801e-01, -4.118008978073243e-01, -4.517371657180268e-01, -4.943644214614055e-01, -4.720546115409325e-01, -4.720546115409325e-01, -5.201374186527714e-01, -3.604918200434269e-01, -3.746123532260282e-01, -3.600434758843918e-01, -3.725034156779626e-01, -3.725034156779626e-01, -5.011024130072885e-01, -2.045818209435695e-01, -2.150700346184193e-01, -2.512544803674241e-01, -2.175699088307721e-01, -2.175699088307719e-01, -3.326166802550805e-01, -6.182779978255293e-02, -6.911332967841761e-02, -2.510184969979289e-01, -4.698153286099872e-02, -4.698153286099864e-02, -1.973253863924824e-02, -2.145678669158527e-03, -4.497934726993907e-03, -4.957531938004654e-02, -6.812981827353021e-03, -6.812981827352987e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m06_sx_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06_sx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-8.274938482871655e-09, -8.274865821023387e-09, -8.274468570975138e-09, -8.275550348100895e-09, -8.274994092057744e-09, -8.274994092057744e-09, -1.140922061215837e-05, -1.140951494168652e-05, -1.141517967287987e-05, -1.139643636169257e-05, -1.140836291049561e-05, -1.140836291049561e-05, -7.344656945297319e-03, -7.351310785196333e-03, -7.419279060427668e-03, -7.235559693102524e-03, -7.301679799010624e-03, -7.301679799010624e-03, -8.087179090577520e-01, -8.038839631764348e-01, -3.929966837462197e-03, -1.178799715996536e+00, -1.048499970573191e+00, -1.048499970573191e+00, -6.880859906201195e+00, -7.268837937056742e+00, -3.738144932869736e+00, -6.303757259985722e+00, -7.984556504463050e+00, -7.984556504463069e+00, -2.374225985976413e-06, -2.372966551461104e-06, -2.374137950704467e-06, -2.373027221771442e-06, -2.373605109916990e-06, -2.373605109916990e-06, -9.030923765108751e-05, -8.845751018668981e-05, -9.046972418096341e-05, -8.883728222050908e-05, -8.919336638577927e-05, -8.919336638577927e-05, -1.440066605801995e-02, -1.137544420193494e-02, -1.926124578641830e-02, -1.854140982426155e-02, -1.371093840468044e-02, -1.371093840468044e-02, -1.788328936253578e+00, -5.178724958618628e-01, -2.056025079390054e+00, -1.408084523779197e-04, -1.782451187484744e+00, -1.782451187484744e+00, -8.325875900843938e+00, -7.447864219632417e+00, -4.659698275348073e+01, -3.622376755253592e+00, -2.174562261273914e+01, -2.174562261273909e+01, -1.561641637289433e-02, -1.510606642010586e-02, -1.513067055453645e-02, -1.525587259235681e-02, -1.517826426651400e-02, -1.517826426651400e-02, -1.738406347419261e-02, -2.553922739461343e-02, -2.326255363390282e-02, -2.086366801603750e-02, -2.215450747849875e-02, -2.215450747849875e-02, -9.457828340572769e-03, -2.952340100294795e-01, -1.972406131272500e-01, -9.850280447376596e-02, -1.441983326360581e-01, -1.441983326360582e-01, -3.531665059785594e-02, -3.432871288264300e+00, -3.219154831727341e+00, -1.244887100465965e-01, -3.408499018397448e+00, -3.408499018397450e+00, -5.585802444255179e+00, -3.447116197645293e+01, -1.758709886958983e+01, -3.562144536986680e+00, -2.742641015962495e+01, -2.742641015962501e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m06_sx_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06_sx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m06_sx_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06_sx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-7.126287408229374e-04, -7.127152131570187e-04, -7.130654538968611e-04, -7.117858487360593e-04, -7.124609713407528e-04, -7.124609713407528e-04, 2.111876598881310e-03, 2.112053281339036e-03, 2.116640623868612e-03, 2.114555304318366e-03, 2.115018790958205e-03, 2.115018790958205e-03, 1.433866811609999e-02, 1.443441932270201e-02, 1.663128354795831e-02, 1.578909932875876e-02, 1.598355533051330e-02, 1.598355533051330e-02, 7.016189944194966e-02, 6.942094723955190e-02, 1.364927877427586e-02, 1.613614887392474e-02, 4.788074559930623e-02, 4.788074559930637e-02, -3.818324001490619e-05, -4.634146619544915e-05, -3.143048407583116e-03, -5.403023992949724e-06, -1.491988080338928e-05, -1.491988080338928e-05, -7.901142559560058e-03, -7.994067004456954e-03, -7.906585288917151e-03, -7.988559987393727e-03, -7.947829433966913e-03, -7.947829433966913e-03, 3.516534133647848e-03, 3.513750898774039e-03, 3.527586349021148e-03, 3.512319519547763e-03, 3.515389150064905e-03, 3.515389150064905e-03, 9.512479622711996e-03, -2.865631832188849e-02, 1.395877882369941e-02, 9.694595310111022e-03, 6.397118509279474e-03, 6.397118509279474e-03, -1.312441295288479e-02, 4.362970889430937e-02, -1.363494469011857e-02, 1.346219773221728e-03, 4.753096064331096e-04, 4.753096064330244e-04, -1.717499384547470e-06, -4.450164414504891e-06, -1.610753420595866e-05, -1.028258947237391e-02, -1.078804875860260e-05, -1.078804875859303e-05, 4.018773478051696e-01, -1.963441275275487e-02, 6.622990721317217e-02, 1.830556550698131e-01, 1.184981611142139e-01, 1.184981611142139e-01, 3.131536796625971e-01, 1.493851198571229e-02, 4.249884709063396e-03, -3.931848153219012e-02, -1.032679498411146e-02, -1.032679498411146e-02, -1.068084811208802e-02, 5.448653967527334e-02, 4.223497925621503e-02, 1.984113318834056e-02, 2.593984788709296e-02, 2.593984788709295e-02, 1.638940411861377e-02, -2.848700024085097e-03, -5.527352533973936e-03, 2.235680299865088e-02, -1.571563773338058e-02, -1.571563773338096e-02, -5.079732438972172e-05, -1.122461947739664e-07, -2.774324480337515e-06, -1.597521176538918e-02, -1.219458619018156e-05, -1.219458619021657e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
