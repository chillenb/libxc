
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_m06_sx_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06_sx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.289340083360060e+01, -1.289341605976533e+01, -1.289350316686754e+01, -1.289327473879544e+01, -1.289339175859749e+01, -1.289339175859749e+01, -2.040012704067091e+00, -2.040061351799768e+00, -2.041377603078736e+00, -2.041031016318013e+00, -2.040856139373445e+00, -2.638159389638105e+00, -3.553779494932671e-01, -5.598020494330735e-01, -5.504485324227081e-01, -5.528566751726979e-01, -5.524459810994874e-01, -5.524459810994874e-01, -1.464182452474130e-01, -1.488429348364340e-01, -3.317007592465619e-01, -1.110107045242761e-01, -1.216551559730459e-01, -1.216551559730459e-01, -1.062155236329545e-02, -1.117336596820714e-02, -5.607535642179829e-02, -6.153065412445769e-03, -7.723637424093754e-03, -7.723637424093754e-03, -3.281208607718143e+00, -3.277369771342526e+00, -3.280983532527004e+00, -3.046815700438049e+00, -3.279290352746996e+00, -3.279290352746996e+00, -1.126706864567646e+00, -1.139427127959493e+00, -1.117084707766034e+00, -1.128490846484367e+00, -1.138399298682571e+00, -1.528437366402088e+00, -4.212786292330778e-01, -4.225127683007990e-01, -4.053422480417520e-01, -4.045583832285034e-01, -4.231699602188450e-01, -3.620422463063933e-01, -2.038884268584480e-02, -1.430432476277157e-01, -1.996917429607545e-02, -1.352678033849815e+00, -9.568841761735608e-02, -9.568841761735611e-02, -2.625528925505968e-03, -6.015912847910940e-03, -4.596705829814578e-03, -1.967379896910165e-02, -3.045809704029912e-03, -5.538627353343228e-03, -3.553636255544214e-01, -3.399341685733758e-01, -3.277688435828097e-01, -3.427403287134807e-01, -3.403631544647026e-01, -3.403631544647026e-01, -3.399703565886985e-01, -3.618331183058616e-01, -3.632488527096665e-01, -3.553356330731735e-01, -3.613062942501070e-01, -3.201863122880736e-01, -4.552986740334039e-01, -9.477863051521940e-02, -2.219213734551321e-01, -1.997315250796706e-01, -2.459524613608063e-01, -2.459524613608063e-01, -2.669258036151531e-01, -5.407158732590549e-02, -6.908950693781253e-02, -2.521022381298924e-01, -1.742182849107602e-02, -8.273004271543963e-02, -1.496613274515317e-02, -1.609721907977381e-03, -3.376979326128876e-03, -7.984631146827312e-02, -5.124776181837927e-03, -5.124776181837922e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_m06_sx_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06_sx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.607657202267832e+01, -1.607647840261144e+01, -1.607613170028992e+01, -1.607751370850889e+01, -1.607677995176207e+01, -1.607677995176207e+01, -3.001597132132417e+00, -3.001611837962627e+00, -3.002047132481218e+00, -3.002144393020137e+00, -3.001822111339929e+00, -2.480581503542327e+00, -6.189159756241219e-01, -5.223950746232604e-01, -5.444269662933060e-01, -5.317286072326786e-01, -5.346828927856447e-01, -5.346828927856447e-01, -1.614549507268530e-01, -1.614876580226853e-01, -7.617667516595064e-01, -8.857946760912024e-02, -1.296383893487059e-01, -1.296383893487059e-01, -1.406907758421911e-02, -1.478722739837100e-02, -6.373824786592122e-02, -8.188671024617471e-03, -1.026215257468391e-02, -1.026215257468391e-02, -3.235912001473503e+00, -3.233114585560689e+00, -3.235742439519229e+00, -3.538377887532186e+00, -3.234494614924895e+00, -3.234494614924895e+00, -1.687136228474533e+00, -1.698991203126465e+00, -1.679052352624943e+00, -1.688936154668415e+00, -1.697841579795102e+00, -1.382883647013070e+00, -4.273238803039319e-01, -4.226452513058692e-01, -3.920942171284496e-01, -4.107766995541615e-01, -4.316419319659645e-01, -4.973189933751675e-01, -1.493715689770509e-02, -1.547519166181867e-01, -1.156796589527015e-02, -1.382126260763545e+00, -6.113918546502800e-02, -6.113918546502812e-02, -3.485174945949300e-03, -8.007673001774764e-03, -6.111741739495444e-03, -6.381959705345076e-03, -4.012420865172578e-03, -7.366203025150992e-03, -5.504925374746027e-01, -4.082117049104939e-01, -4.623740015538799e-01, -4.908387314265196e-01, -4.685160238811022e-01, -4.685160238811022e-01, -5.131589009374764e-01, -3.586513697928745e-01, -3.711684766786952e-01, -3.544919346268352e-01, -3.678207475812605e-01, -4.159401557613239e-01, -4.622777847248756e-01, -2.143708824380073e-01, -2.178227448037030e-01, -2.997761240948642e-01, -2.168075992191502e-01, -2.168075992191502e-01, -3.914275679050907e-01, -6.222626005880952e-02, -7.119821435277132e-02, -2.406805505855086e-01, -9.462285745070249e-03, -5.221523624097988e-02, -1.977459564800708e-02, -2.146009179895397e-03, -4.498153312727244e-03, -5.257982211441647e-02, -6.815412117158024e-03, -6.815412117157990e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m06_sx_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06_sx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-9.453447586770463e-09, -9.453328582631160e-09, -9.452772437280798e-09, -9.454542658941455e-09, -9.453618942590844e-09, -9.453618942590844e-09, -1.366834284075995e-05, -1.366822287123079e-05, -1.366410728630772e-05, -1.366081765656308e-05, -1.366684955122731e-05, -9.302659005240850e-06, -9.820819437794255e-03, -4.743782359254657e-03, -4.788882723617811e-03, -4.854814646633639e-03, -4.838001541967036e-03, -4.838001541967036e-03, -7.681262472177397e-01, -7.564125446884447e-01, -5.078363420075440e-03, -9.106908675197273e-01, -8.845632500230819e-01, -8.845632500230820e-01, -6.763447095621903e+00, -7.043130735519360e+00, -3.004087020591507e+00, -4.980204436594675e+00, -6.924302009260155e+00, -6.924302009260155e+00, -2.372764111410751e-06, -2.371523249648897e-06, -2.372706580895387e-06, -2.614825100363419e-06, -2.372137446222138e-06, -2.372137446222138e-06, -1.363025401816438e-04, -1.324088296849572e-04, -1.392359301177114e-04, -1.356953063377962e-04, -1.327694907813258e-04, -8.480216151137307e-05, -1.316732961234499e-02, -1.039838770758000e-02, -1.635355282944711e-02, -1.543353147933209e-02, -1.262573023116621e-02, -1.578915177896707e-02, -2.682730757955359e+01, -4.813312125827556e-01, -3.694610924581197e+01, -1.189153207118843e-04, -1.521380214797206e+00, -1.521380214797206e+00, -3.444853510709691e+07, -4.403075592602336e+00, -3.557222820471186e+01, -1.823503527178784e+02, -1.855296618420332e+07, -1.365426452138647e+01, -1.543485730718142e-02, -1.493693492508418e-02, -1.562714002630470e-02, -1.508099605190078e-02, -1.500515830319300e-02, -1.500515830319300e-02, -1.698483863584635e-02, -2.518060878578829e-02, -2.285456651262252e-02, -2.043799082096573e-02, -2.170903071086090e-02, -2.571916700792822e-02, -8.443011412618084e-03, -8.271665213085315e-01, -1.829283838766473e-01, -1.369053598658408e-01, -1.310065722164386e-01, -1.310065722164387e-01, -4.733613596720893e-02, -3.080255929779347e+00, -2.483765171207878e+00, -1.103771524521334e-01, -6.882897886188188e+01, -2.714837204804112e+00, -3.225689462048298e+00, -5.397708422514556e+00, -1.546584124249431e+01, -3.083766172556792e+00, -1.945942656753092e+01, -1.945942656753095e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m06_sx_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06_sx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-6.535422273700859e-04, -6.536256383531067e-04, -6.539616483937398e-04, -6.527272787533189e-04, -6.533787931370865e-04, -6.533787931370865e-04, 2.116986764085166e-03, 2.117154950934764e-03, 2.121525685384083e-03, 2.119573542139025e-03, 2.120003557694481e-03, 2.103186043530813e-03, 1.384676181171504e-02, 1.493993725342604e-02, 1.736507516999010e-02, 1.636053214016635e-02, 1.659856462385102e-02, 1.659856462385102e-02, 7.046586040793432e-02, 6.978571915527970e-02, 1.296297912763431e-02, 1.558584147000540e-02, 4.810254730868534e-02, 4.810254730868548e-02, -3.819579530549248e-05, -4.636936196488581e-05, -3.164899024890926e-03, -5.424514429069257e-06, -1.495791395175002e-05, -1.495791395175002e-05, -7.903504482001651e-03, -7.996424605357471e-03, -7.908899395779921e-03, -7.603814554619102e-03, -7.950213827878916e-03, -7.950213827878916e-03, 3.562272078279443e-03, 3.558639348554627e-03, 3.574148391006838e-03, 3.560139166734137e-03, 3.559448644604665e-03, 3.507232849307825e-03, 9.362305087509534e-03, -3.020606409477197e-02, 1.391048031311989e-02, 9.349300921827092e-03, 6.164393359479606e-03, 6.800986547271690e-03, -6.686465900158881e-03, 4.373036699974054e-02, -8.353554966815956e-03, 1.145630925472886e-03, -1.227268843514947e-05, -1.227268843523555e-05, -9.020109214196865e-06, -4.480843845043769e-06, -1.617974600450173e-05, -1.235090882339091e-02, -5.627119848606028e-05, -1.085893490854959e-05, 4.038378459550295e-01, -1.979750674095421e-02, 6.550810243855110e-02, 1.838909964702251e-01, 1.190092520480063e-01, 1.190092520480063e-01, 3.161697140404773e-01, 1.493012484292843e-02, 4.172409505578267e-03, -3.976702327792196e-02, -1.053015859665208e-02, -8.782433993445742e-03, -1.175361142490763e-02, 4.706930014229935e-02, 4.248752820663831e-02, 2.002252552808036e-02, 2.595478314375102e-02, 2.595478314375101e-02, 1.646020889754415e-02, -2.858294046334111e-03, -5.586763946720559e-03, 2.228999564389008e-02, -1.000487361057349e-02, -1.613318320199504e-02, -5.117371789987191e-05, -1.049586386936244e-07, -2.780667215181669e-06, -1.621287361655459e-02, -1.226050260656380e-05, -1.226050260659881e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
