
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_m06_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.407142036662801e+01, -1.407138366795225e+01, -1.407126320593798e+01, -1.407180333325991e+01, -1.407151428460973e+01, -1.407151428460973e+01, -2.289421753496724e+00, -2.289444362495059e+00, -2.290092360339401e+00, -2.290035171781609e+00, -2.289803179690139e+00, -2.702391232484342e+00, -4.045423967118002e-01, -6.114178649973990e-01, -6.065443696174893e-01, -6.066974821378213e-01, -6.068075532672432e-01, -6.068075532672432e-01, -1.656401982443096e-01, -1.672611516432005e-01, -3.212410043920783e-01, -1.783376760166549e-01, -1.597727174340869e-01, -1.597727174340869e-01, -2.566682171339663e-02, -2.699952685716032e-02, -1.346059510114516e-01, -1.487099578183145e-02, -1.866587413358683e-02, -1.866587413358683e-02, -3.467855241404344e+00, -3.471109859578397e+00, -3.468031898258653e+00, -3.373054247296518e+00, -3.469461780280605e+00, -3.469461780280605e+00, -1.283114040773750e+00, -1.293495165683939e+00, -1.275249282531203e+00, -1.284681555334484e+00, -1.292562422873273e+00, -1.586281046662189e+00, -4.407713473427471e-01, -4.333613058514329e-01, -4.140415757741787e-01, -4.238264938658430e-01, -4.462592879920638e-01, -4.117796563995155e-01, 1.095834571335864e-02, -1.850434185158642e-01, 1.077159578706758e-02, -1.430425476366746e+00, -1.742163848876610e-01, -1.742163848876600e-01, -6.326619358206686e-03, -1.453960595378682e-02, -1.110919589393102e-02, -4.439595689907504e-04, -7.301177946803360e-03, -1.338572550428207e-02, -2.504409749696897e-01, -4.062357217171562e-01, -3.718743430012043e-01, -3.286848376137372e-01, -3.550488792714768e-01, -3.550488792714768e-01, -2.740051930235899e-01, -3.716239753509341e-01, -3.841464301392750e-01, -3.639497574595719e-01, -3.791410249683952e-01, -3.582935662176224e-01, -4.755212570075901e-01, -9.335027687167062e-02, -2.442605822048177e-01, -2.278088844913509e-01, -2.640852436670417e-01, -2.640852436670417e-01, -2.989127991451081e-01, -1.298836044172568e-01, -1.648142550506256e-01, -2.576162816427989e-01, 9.250330687517412e-03, -1.841555072353897e-01, -3.616255380781136e-02, -3.890656781885387e-03, -8.161854714325874e-03, -1.796837902554275e-01, -1.238551048438532e-02, -1.238551048438531e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_m06_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.467864426571720e+01, -1.467877219259508e+01, -1.467931961565606e+01, -1.467742699873858e+01, -1.467841891229259e+01, -1.467841891229259e+01, -3.164891246366621e+00, -3.165121844100191e+00, -3.171395818090186e+00, -3.169115137514683e+00, -3.169028324394152e+00, -2.494227190797953e+00, -7.853112962851855e-01, -5.248181335730449e-01, -5.442941866905128e-01, -5.352254075766507e-01, -5.377475664619045e-01, -5.377475664619045e-01, -1.417145224827176e-01, -1.471553657786398e-01, -1.008398556264109e+00, 1.816488561666658e-02, -4.268491808476309e-02, -4.268491808476545e-02, -3.397927372475312e-02, -3.571015257537363e-02, -1.499500335022212e-01, -1.978771208717646e-02, -2.479366217439851e-02, -2.479366217439851e-02, -5.051254308684450e+00, -5.097064499433412e+00, -5.053899948329082e+00, -5.215379386618014e+00, -5.074283004791368e+00, -5.074283004791368e+00, -1.759522178926456e+00, -1.763179973125524e+00, -1.761913342812098e+00, -1.760103139274201e+00, -1.762319504619614e+00, -1.278947082105677e+00, -5.397845222383236e-01, -4.152079898660444e-01, -4.331433031914615e-01, -5.174006993991076e-01, -5.249772515058712e-01, -5.781478454104023e-01, 1.525183591046719e-03, -5.820273156119368e-02, 1.162959222680838e-02, -1.610878968515707e+00, 1.841837163134108e-02, 1.841837163134774e-02, -8.366013408042048e-03, -1.935075164702762e-02, -1.476731337204603e-02, 4.160891428808301e-02, -9.517569503775358e-03, -1.779894047301646e-02, 3.374787329634394e-02, -3.674055435071608e-01, -1.570643906440535e-01, 1.659454077384036e-02, -5.573872559030493e-02, -5.573872559030493e-02, 6.197482035138695e-02, -4.337615000287079e-01, -4.319746797954674e-01, -3.616220590950195e-01, -3.515776938181304e-01, -3.910712025393240e-01, -4.288718935895035e-01, -2.847623642808800e-01, -2.183454674684271e-01, -3.137850553115927e-01, -2.068465201483253e-01, -2.068465201483252e-01, -4.184016408604054e-01, -1.468104237449912e-01, -1.628303038402252e-01, -2.538573822696465e-01, 1.257644289742354e-02, -6.903745365742096e-02, -4.774525529450784e-02, -5.186793431257319e-03, -1.087075316826119e-02, -7.815244706834620e-02, -1.646796114279760e-02, -1.646796114279814e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m06_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.455841120963429e-09, -4.455721606343221e-09, -4.455203067784436e-09, -4.456976423560880e-09, -4.456045384197223e-09, -4.456045384197223e-09, -9.635848883155238e-06, -9.634573354831963e-06, -9.600404808790473e-06, -9.610699357940496e-06, -9.613588820847055e-06, -6.276042384870607e-06, -1.007879526165455e-02, -4.666334234838205e-03, -5.055816085240118e-03, -4.960908434533315e-03, -4.980734202661077e-03, -4.980734202661077e-03, -9.354984689698139e-01, -8.966716292223041e-01, -6.810247019237603e-03, -1.802671344165115e+00, -1.427713767373395e+00, -1.427713767373395e+00, -2.003985714937810e+01, -2.086632638495741e+01, -8.730762991164715e+00, -1.476474247554838e+01, -2.052427057453795e+01, -2.052427057453795e+01, -9.946752462154305e-07, -9.945429934252310e-07, -9.946708876294142e-07, -1.120251315162242e-06, -9.945950540300064e-07, -9.945950540300064e-07, -1.066533971192058e-04, -1.014163389835473e-04, -1.108071840782397e-04, -1.059169052114305e-04, -1.018158331302995e-04, -6.227965480267950e-05, -7.504552324230355e-03, -4.645546756869434e-03, -1.041730024206476e-02, -8.761826566419799e-03, -6.994958721188169e-03, -9.047466237700178e-03, -7.396213121762413e+01, -7.621971113932146e-01, -1.035224597201589e+02, -6.463654771168987e-05, -3.349815399908854e+00, -3.349815399908847e+00, -8.325782205431886e+07, -1.305404388415588e+01, -1.054484031311038e+02, -5.155690737104717e+02, -4.483810115335189e+07, -4.047738514575432e+01, -2.228623141658847e-03, -6.383312879000486e-03, -5.851694208747538e-03, -4.278200051238441e-03, -4.973311905035313e-03, -4.973311905035313e-03, -3.383284373300456e-03, -1.524624472605230e-02, -1.241529800457293e-02, -9.015386576631699e-03, -1.083855013755361e-02, -1.322259204389906e-02, -4.122516439424751e-03, -1.089466302405592e+00, -1.914323694616796e-01, -1.082730565100956e-01, -1.147350975732284e-01, -1.147350975732285e-01, -3.266622814778620e-02, -8.966475218082453e+00, -7.125316248859210e+00, -7.219960715357465e-02, -1.935446851280293e+02, -7.131682019591679e+00, -9.554672102159895e+00, -1.600595779578221e+01, -4.585636112426921e+01, -8.193189333888661e+00, -5.768609973040716e+01, -5.768609973040725e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m06_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-2.394138136962613e-03, -2.394095297084107e-03, -2.393916700177091e-03, -2.394548768026265e-03, -2.394217548650468e-03, -2.394217548650468e-03, 8.445154092487281e-04, 8.462404120066380e-04, 8.929411544727425e-04, 8.737005662813370e-04, 8.758358997819288e-04, -1.673110605021962e-03, 2.347150405213621e-02, 8.037057695374409e-03, 1.277157459924379e-02, 1.090913412274005e-02, 1.138076482424849e-02, 1.138076482424849e-02, 5.107067392530586e-02, 5.273636428192929e-02, 2.353536989843125e-02, -5.520902485680874e-02, -9.872546282624373e-03, -9.872546282629020e-03, -8.676849434486148e-05, -1.053775163847512e-04, -7.721895371211873e-03, -1.229643722043397e-05, -3.393200504287967e-05, -3.393200504287967e-05, 9.722641637890697e-03, 1.037374838293135e-02, 9.760198042878433e-03, 1.041773015912911e-02, 1.004914520693873e-02, 1.004914520693873e-02, 9.385187940723289e-04, 7.625817425355283e-04, 1.160825201492133e-03, 9.117488843677124e-04, 7.693977899360479e-04, -4.445825439500095e-03, 1.775094222660531e-02, -8.338187576388628e-02, 2.183094786966892e-04, 1.733649220326286e-02, 5.008755513379869e-03, 1.356297642344617e-02, 7.143938317924179e-03, -4.117290287163635e-03, 1.515937842811799e-03, -2.604475314062782e-03, -7.468563785061678e-02, -7.468563785061538e-02, -4.035397110628513e-05, -1.015641938922612e-05, -3.669215900587767e-05, -2.625818433418990e-02, -2.513354956010022e-04, -2.462254072190733e-05, -1.539705332836502e+00, -3.395685941730807e-01, -8.754649529878543e-01, -1.400632262061666e+00, -1.156232234074128e+00, -1.156232234074128e+00, -1.659580741137691e+00, 1.559563559737869e-02, -1.022160750305128e-02, -8.951211665230549e-02, -8.293294764185168e-02, -6.934251902848824e-02, -7.606438936914911e-02, 8.573911938670299e-02, 3.060656297013957e-02, 6.006547542249242e-03, -5.728095110388383e-03, -5.728095110388341e-03, 9.197517997649288e-03, -6.932432141900437e-03, -1.431055022449245e-02, -9.122948337527552e-03, -1.763565833429101e-04, -5.975052901780374e-02, -1.163815404010850e-04, -2.377346155171506e-07, -6.300764748055722e-06, -5.689056780955339e-02, -2.780128975043294e-05, -2.780128975020841e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
