
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_m06_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.468139564926295e+01, -1.468133424434078e+01, -1.468113519740944e+01, -1.468204164975922e+01, -1.468155620152002e+01, -1.468155620152002e+01, -2.494079745066102e+00, -2.494039126303206e+00, -2.493152491691363e+00, -2.494897983940621e+00, -2.493961513334368e+00, -2.493961513334368e+00, -4.958108299230815e-01, -4.955612959679251e-01, -4.904957118552333e-01, -5.024365620440152e-01, -4.987788874685725e-01, -4.987788874685725e-01, -1.622226317098143e-01, -1.631785273204304e-01, -4.425410264068749e-01, -1.633926639696009e-01, -1.492023652973629e-01, -1.492023652973629e-01, -2.566639016958877e-02, -2.699858115247990e-02, -1.338668298918948e-01, -1.486993847487513e-02, -1.866442856362496e-02, -1.866442856362496e-02, -3.467257126749014e+00, -3.470518812997805e+00, -3.467446238532104e+00, -3.470323185253519e+00, -3.468861032486616e+00, -3.468861032486616e+00, -1.559408192189492e+00, -1.560638752461753e+00, -1.566910744438915e+00, -1.567729782343523e+00, -1.556551081413573e+00, -1.556551081413573e+00, -4.274374079458748e-01, -4.216194451109836e-01, -3.892451946533639e-01, -3.968959356528795e-01, -4.340538993406047e-01, -4.340538993406047e-01, -2.040867041458396e-01, -1.798682422849687e-01, -2.027709553779901e-01, -1.349013340753401e+00, -1.671471404864744e-01, -1.671471404864734e-01, -1.147947511349663e-02, -1.453730359064982e-02, -1.110782735364341e-02, -1.781018575896284e-01, -1.338298173888722e-02, -1.338298173888723e-02, -2.499847799206847e-01, -4.049922974780202e-01, -3.750280396274349e-01, -3.278246856691936e-01, -3.540556479762622e-01, -3.540556479762622e-01, -2.727971124250510e-01, -3.698241682530297e-01, -3.819575611367120e-01, -3.617487353308433e-01, -3.767526180651077e-01, -3.767526180651077e-01, -4.584636556868043e-01, -2.076376462442361e-01, -2.369604875006962e-01, -2.683278070440096e-01, -2.542343243926641e-01, -2.542343243926641e-01, -3.400141904996410e-01, -1.295698266224982e-01, -1.630612610100161e-01, -2.462916064222628e-01, -1.787179356909593e-01, -1.787179356909593e-01, -3.613018321603921e-02, -3.890372165064272e-03, -8.161693304159032e-03, -1.766778170080411e-01, -1.238368027959277e-02, -1.238368027959275e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_m06_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.346881875519024e+01, -1.346900375465859e+01, -1.346974365337543e+01, -1.346700537254068e+01, -1.346844896878739e+01, -1.346844896878739e+01, -2.779053153001136e+00, -2.779429472606449e+00, -2.789331892584917e+00, -2.783635106814735e+00, -2.784759642854973e+00, -2.784759642854973e+00, -6.287081591036130e-01, -6.289936193122052e-01, -6.241077553897926e-01, -6.123541872414159e-01, -6.168083309085955e-01, -6.168083309085955e-01, -1.415348939811552e-01, -1.472052125525891e-01, -7.994347051437855e-01, 3.227883780566058e-02, -3.769520201021369e-02, -3.769520201021600e-02, -3.397739336911296e-02, -3.570603535861572e-02, -1.470372850266057e-01, -1.978311509443239e-02, -2.478736953430499e-02, -2.478736953430499e-02, -5.051913014604072e+00, -5.097705430844449e+00, -5.054544351275427e+00, -5.094943437226535e+00, -5.074939503749073e+00, -5.074939503749073e+00, -1.291328749079873e+00, -1.310208591763538e+00, -1.272976415833674e+00, -1.284483771087819e+00, -1.312875673062984e+00, -1.312875673062984e+00, -5.565098120412488e-01, -4.370431858696225e-01, -4.662679042997653e-01, -5.549888935827316e-01, -5.413468878630261e-01, -5.413468878630261e-01, -3.203859857404794e-02, -5.554365815264799e-02, -5.242408878847823e-02, -1.736924330452533e+00, 2.860099515257234e-02, 2.860099515257889e-02, -1.528492640015586e-02, -1.934081554149727e-02, -1.476137172288232e-02, -1.262066961674938e-01, -1.778708642769686e-02, -1.778708642769534e-02, 3.120807182248409e-02, -3.698732547203927e-01, -1.476300295145330e-01, 1.315470259030569e-02, -5.913897781433586e-02, -5.913897781433586e-02, 5.592097372482382e-02, -4.357659787737724e-01, -4.349039672977682e-01, -3.654155071224939e-01, -3.555874839541478e-01, -3.555874839541477e-01, -4.607616946894355e-01, -1.715685287535706e-01, -2.207451880451264e-01, -2.411999750622048e-01, -2.151608554572242e-01, -2.151608554572241e-01, -3.479662060217373e-01, -1.455582417586298e-01, -1.563477254353232e-01, -2.684416143435549e-01, -5.501685816034996e-02, -5.501685816037197e-02, -4.760635191681712e-02, -5.185622984808251e-03, -1.087004921862285e-02, -6.995633378785321e-02, -1.646002865584539e-02, -1.646002865584592e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m06_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-3.803637994304052e-09, -3.803551704821139e-09, -3.803151742461377e-09, -3.804431879478524e-09, -3.803763448095702e-09, -3.803763448095702e-09, -7.912026721856905e-06, -7.911246072825949e-06, -7.889207275668148e-06, -7.885804345273739e-06, -7.893410194809188e-06, -7.893410194809188e-06, -7.470671058606725e-03, -7.499827839007048e-03, -8.122131679613705e-03, -7.651260852371433e-03, -7.784178724222843e-03, -7.784178724222843e-03, -9.909748648191643e-01, -9.597301051494639e-01, -5.295091245222568e-03, -2.420997201334068e+00, -1.730527469338000e+00, -1.730527469338000e+00, -2.044107541164299e+01, -2.163815297114380e+01, -1.122259117487529e+01, -1.934634204129685e+01, -2.417440592389939e+01, -2.417440592389946e+01, -9.954297116287747e-07, -9.952883282650595e-07, -9.954096338374387e-07, -9.952850521112692e-07, -9.953527307134983e-07, -9.953527307134983e-07, -6.810771436565148e-05, -6.525960734388834e-05, -6.931952577540981e-05, -6.672014876890046e-05, -6.593447123491346e-05, -6.593447123491346e-05, -8.324509099242391e-03, -5.174324531762800e-03, -1.254083073065348e-02, -1.081989081795534e-02, -7.699711780019545e-03, -7.699711780019545e-03, -4.755995664435690e+00, -8.283307862016717e-01, -5.607531634800845e+00, -7.862397017738055e-05, -4.022341266543756e+00, -4.022341266543748e+00, -2.771997261712405e+01, -2.376748765121489e+01, -1.436817320917962e+02, -1.058953098468574e+01, -6.884942678125442e+01, -6.884942678125427e+01, -2.268995734876671e-03, -6.473544449126250e-03, -5.617485945381997e-03, -4.344013533128663e-03, -5.047564121391557e-03, -5.047564121391557e-03, -3.496294598795821e-03, -1.549725684192166e-02, -1.267594969250542e-02, -9.243296256679532e-03, -1.110339460963475e-02, -1.110339460963475e-02, -4.714536277060435e-03, -3.736341640173436e-01, -2.081580036765167e-01, -7.585362568173235e-02, -1.276795795064422e-01, -1.276795795064423e-01, -2.363490968967137e-02, -1.015795274491849e+01, -9.596984547279961e+00, -8.275803598765628e-02, -9.272225911871166e+00, -9.272225911871171e+00, -1.786246380419701e+01, -1.245364133272591e+02, -5.315553559553879e+01, -9.679715444474835e+00, -8.543058839827515e+01, -8.543058839827533e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m06_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m06_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-2.699502572520804e-03, -2.699448561392280e-03, -2.699234360592195e-03, -2.700032083785681e-03, -2.699612152696546e-03, -2.699612152696546e-03, -3.910351380527314e-04, -3.889843348364118e-04, -3.343457022996892e-04, -3.638861931759367e-04, -3.577560285053833e-04, -3.577560285053833e-04, 1.690095957406153e-02, 1.710463907035349e-02, 2.081487564266856e-02, 1.863288292717671e-02, 1.925261940276145e-02, 1.925261940276145e-02, 5.381646999480291e-02, 5.603822087990722e-02, 2.006616061074493e-02, -4.460792342674685e-02, -1.405095378565101e-03, -1.405095378569634e-03, -8.654763068283272e-05, -1.048848434473731e-04, -7.435045325769316e-03, -1.186141778041457e-05, -3.321032439293990e-05, -3.321032439293989e-05, 9.723337945024477e-03, 1.037427690073831e-02, 9.760870745465687e-03, 1.033512221603724e-02, 1.004976327002875e-02, 1.004976327002875e-02, -3.855571881588342e-03, -3.961951010124871e-03, -3.811089126086646e-03, -4.014923129706655e-03, -3.894591488725516e-03, -3.894591488725516e-03, 2.068359186016228e-02, -7.678604039848466e-02, 6.602889900244366e-03, 2.375325297696162e-02, 8.101986635533184e-03, 8.101986635533184e-03, -5.399015050610093e-02, -1.009716005602114e-03, -4.955425478514841e-02, -3.189618187142377e-04, -6.899423267195193e-02, -6.899423267195055e-02, -3.400982084142534e-06, -9.347639425937414e-06, -3.520085579628512e-05, -2.779575695403261e-02, -2.288568832860543e-05, -2.288568833028904e-05, -1.531391707851667e+00, -3.374269673531818e-01, -8.894191911043928e-01, -1.393174305454190e+00, -1.150030364817889e+00, -1.150030364817889e+00, -1.641823675450388e+00, 1.614101176702578e-02, -9.347675779396367e-03, -8.781209883734623e-02, -8.135071986218410e-02, -8.135071986218410e-02, -6.843970812853181e-02, 3.846125019597730e-02, 3.393642403603057e-02, -1.568646901558266e-02, -3.609635726666181e-04, -3.609635726665627e-04, -5.673880682851497e-03, -6.807522740128470e-03, -1.362928948065462e-02, -1.333777348603985e-03, -5.610992333611173e-02, -5.610992333611296e-02, -1.066326965821499e-04, -1.988222400236393e-07, -6.180258307209343e-06, -5.481770022630531e-02, -2.635994152197974e-05, -2.635994152175522e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
