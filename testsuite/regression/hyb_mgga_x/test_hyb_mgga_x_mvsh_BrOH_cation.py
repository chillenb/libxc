
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_mvsh_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_mvsh", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.651515152965721e+01, -1.651522215601876e+01, -1.651554046209665e+01, -1.698149169228225e+01, -1.698196952465172e+01, -1.744895305830035e+01, -2.573562808943566e+00, -2.835337730832447e+00, -2.835633580303933e+00, -2.835771075058771e+00, -2.835461720419417e+00, -2.573833606582113e+00, -4.257689545736004e-01, -4.842040162865293e-01, -5.261186612581168e-01, -4.734327904989193e-01, -4.162298594218364e-01, -5.312427909775532e-01, -1.246972511941345e-01, -1.269941738603552e-01, -5.499576572344163e-01, -9.699273161602689e-02, -1.303022928411162e-01, -1.301014123608441e-01, -1.098959544945209e-03, -2.357306280082653e-03, -1.745267260483303e-02, -4.626305507277965e-04, -8.006533940539998e-04, -8.006533940540003e-04, -4.253937929506076e+00, -4.254727098723137e+00, -4.253977304506570e+00, -4.254673935807231e+00, -4.170464072734226e+00, -4.170539468719635e+00, -1.593852060955673e+00, -1.605832867401587e+00, -1.585063356353938e+00, -1.595680820996732e+00, -1.449025915288948e+00, -1.604734733720654e+00, -4.488992695698698e-01, -5.207126851902547e-01, -4.431572019684419e-01, -4.610212197389698e-01, -4.605269063843375e-01, -4.874681172935635e-01, -5.743574160086105e-02, -1.210370071354036e-01, -5.162376182032733e-02, -1.567664453911816e+00, -7.595361211341828e-02, -7.595361211341829e-02, -9.160803618793138e-04, -4.403349469136460e-04, -3.834294587438209e-04, -3.195177662251369e-02, -4.929886846338569e-04, -4.929886846339334e-04, -4.817580658538567e-01, -4.789824198613972e-01, -4.705494731577954e-01, -4.767977792145028e-01, -4.716933392966975e-01, -4.760146526750184e-01, -4.686971421097635e-01, -3.696793625437989e-01, -4.014920063065517e-01, -4.400485690569326e-01, -4.303705666890848e-01, -4.165896745190578e-01, -5.297802521645738e-01, -1.746349366930287e-01, -1.897500551267891e-01, -2.553161116437483e-01, -2.455348826982325e-01, -2.197935541058051e-01, -3.696796746830779e-01, -2.037606253263325e-02, -2.074782367667265e-02, -2.733486091420758e-01, -4.384945568985896e-02, -4.384945568985897e-02, -5.173584050661591e-03, -6.239674407694290e-05, -1.162680962597655e-03, -4.143061145298798e-02, -4.440980930049147e-04, -1.478066338920543e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_mvsh_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_mvsh", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.334129215429228e+01, -2.334099329332350e+01, -2.334132806388730e+01, -2.334101950995892e+01, -2.334147272584894e+01, -2.334121898414869e+01, -2.334106421093004e+01, -2.200873874809503e+01, -2.334131104978435e+01, -2.200940152679597e+01, -2.200958500908076e+01, -2.200940152679597e+01, -3.201813368716881e+00, -3.432521766864338e+00, -3.202001280728597e+00, -3.201744230135137e+00, -3.205632391018558e+00, -3.206314490718460e+00, -3.204583875104217e+00, -3.204633499066030e+00, -3.200881458756009e+00, -3.207959927836996e+00, -3.431651637540770e+00, -3.207959927836996e+00, -5.951020580290349e-01, -5.989750911207800e-01, -5.937481402862763e-01, -5.053017802950205e-01, -4.592885347405204e-01, -4.508606476575918e-01, -4.715329869053062e-01, -5.822408592606432e-01, -6.045739113695389e-01, -5.535817323504512e-01, -5.142152409243779e-01, -4.198003732317681e-01, -1.456873507847214e-01, -1.087644226010174e-01, -1.478304649912507e-01, -1.153025172684940e-01, -3.706976792464270e-01, -6.850906311115205e-01, 2.122986444518012e-02, 1.945987880724433e-03, -9.655097652688430e-02, 1.477015621344114e-01, -9.655097652688417e-02, -7.791312244321658e-02, 7.351013095679113e-01, 7.117278942658687e-01, -4.958734874180912e-03, 6.804908750005418e-01, -2.761602148910607e-02, 3.486635268321708e-01, 1.068415217865207e+00, 1.073353908674743e+00, 7.940674452894350e-01, 8.618542351615601e-01, 7.940674452894350e-01, 8.618542351616296e-01, -5.461609730039648e+00, -5.460312187338753e+00, -5.464342827355633e+00, -5.462952808738667e+00, -5.461791430632545e+00, -5.460424444687764e+00, -5.464135434569455e+00, -5.462822190855931e+00, -5.675459448408013e+00, -5.461635182197677e+00, -5.462987658127640e+00, -5.674072523423298e+00, -1.728661654015602e+00, -1.730197911522345e+00, -1.757263915160649e+00, -1.757881510359880e+00, -1.703325105342314e+00, -1.712126079610133e+00, -1.728685690957497e+00, -1.737634695443214e+00, -1.763425709159856e+00, -1.873849494846552e+00, -1.763425709159856e+00, -1.747523487073074e+00, -5.779323435530644e-01, -7.051281774234242e-01, -6.581604007298357e-01, -6.598952055987284e-01, -4.938758385636897e-01, -5.274147368198330e-01, -5.430353083991675e-01, -5.694517861036790e-01, -6.117797704749643e-01, -7.055551278308110e-01, -6.117797704749642e-01, -5.733510357190723e-01, 1.386882842439864e-01, 1.363091071055325e-01, -1.457523585824754e-01, -5.327537292781234e-02, 1.670510810222905e-01, 1.453668346056741e-01, -1.921504053954374e+00, -1.920771588023411e+00, 6.951666840870589e-02, 2.510977221674010e-02, 6.951666840870614e-02, 2.510977221674001e-02, -2.133870606082814e-03, 1.407470897987618e+00, 1.111126223687688e+00, 1.156286188512367e+00, 6.125085659377240e-01, 5.745838172097193e-01, 2.377816846592115e-01, -4.639492130940752e-02, 1.134318084551719e+00, 6.264907433785570e-01, 1.134318084551814e+00, 6.264907433798687e-01, -6.345952400820920e-01, -6.372343890306753e-01, -6.245675235443371e-01, -6.272775709198151e-01, -6.401918726330381e-01, -6.426924116688297e-01, -6.412502350558029e-01, -6.336633645050396e-01, -6.407305994110123e-01, -6.432166981856741e-01, -6.407305994110124e-01, -6.322260087061473e-01, -6.167015344136672e-01, -6.189501422223411e-01, -4.714851565850277e-01, -5.312810275162863e-01, -5.145388792843620e-01, -6.466569854595575e-01, -5.567591405078721e-01, -5.589665556919785e-01, -5.354560909485537e-01, -5.378828879037149e-01, -5.354560909485537e-01, -5.916466338998494e-01, -6.809150039128214e-01, -7.374022759306033e-01, -1.197101010759649e-01, -1.216736995494776e-01, -2.301865813000602e-01, -1.878108649364539e-01, -3.278420620708667e-01, -3.067429856392322e-01, -2.461641162762586e-01, -2.466170572013418e-01, -2.461641162762585e-01, -2.754313892613456e-01, -4.176146004786095e-01, -4.236682864405556e-01, -2.709891699426466e-02, -2.728449280168119e-02, 3.169713180279574e-01, 3.035096988179619e-01, -3.053190000850989e-01, -3.192679199260831e-01, 1.596130316186748e-01, 1.242198549987111e-01, 1.596130316186730e-01, 1.242198549987119e-01, -6.769220241460901e-03, -7.014679586575413e-03, 2.034979843786237e+00, 2.036019556459752e+00, -1.498228834771724e-03, -1.593489990695474e-03, -5.501935997224092e-02, -5.596165642516108e-02, 8.165053163037530e-01, 6.458143165350921e-01, 8.165053162992398e-01, -2.631154403878345e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_mvsh_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_mvsh", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.001601724409112e-08, 0.000000000000000e+00, -1.001452121742513e-08, -1.001566034709765e-08, 0.000000000000000e+00, -1.001426279010944e-08, -1.001457896640364e-08, 0.000000000000000e+00, -1.001270004721018e-08, -1.001859586157966e-08, 0.000000000000000e+00, -1.605791566256206e-08, -1.001579547586687e-08, 0.000000000000000e+00, -1.605671476956294e-08, -1.605588677974353e-08, 0.000000000000000e+00, -1.605671476956294e-08, -2.250295180414785e-05, 0.000000000000000e+00, -7.887773793839987e-06, -2.250284383171104e-05, 0.000000000000000e+00, -2.250404428829557e-05, -2.250113770938195e-05, 0.000000000000000e+00, -2.249988456690379e-05, -2.249417419120310e-05, 0.000000000000000e+00, -2.249291599333447e-05, -2.251762258516724e-05, 0.000000000000000e+00, -2.248967573249513e-05, -7.884183748503429e-06, 0.000000000000000e+00, -2.248967573249513e-05, -1.145825354751798e-03, 0.000000000000000e+00, -1.194309188855542e-03, -1.134038221244252e-03, 0.000000000000000e+00, -1.573308484372578e-02, -1.729478638534305e-02, 0.000000000000000e+00, -1.775386127694251e-02, -1.708651963413654e-02, 0.000000000000000e+00, -1.084783729111298e-03, -1.201842152844134e-03, 0.000000000000000e+00, -8.880168525790793e-04, -1.523812197059117e-02, 0.000000000000000e+00, -1.945700068480881e-02, -9.953894093042373e-02, 0.000000000000000e+00, -3.224067196794827e+00, -1.031342938957405e-01, 0.000000000000000e+00, -3.020250982204632e+00, -8.720738741982651e-03, 0.000000000000000e+00, -2.450852012249047e-04, -9.564750996453022e+00, 0.000000000000000e+00, -9.215459220489914e+00, -3.118361757911327e+00, 0.000000000000000e+00, -2.992502616427669e+01, -3.118361757911325e+00, 0.000000000000000e+00, -3.353615334000493e-02, -6.327559703645564e+05, 0.000000000000000e+00, -5.118267022889055e+05, -9.653566800217653e-02, 0.000000000000000e+00, -4.247825669455712e+05, -4.642562845416100e-02, 0.000000000000000e+00, -1.000533187724340e+03, -3.613688289729870e+06, 0.000000000000000e+00, -3.837477171236771e+06, -9.376010261685762e+05, 0.000000000000000e+00, -7.213688100724787e+06, -9.376010261685762e+05, 0.000000000000000e+00, -7.213688100725362e+06, -4.556223398679663e-06, 0.000000000000000e+00, -4.560592755048956e-06, -4.553009238957595e-06, 0.000000000000000e+00, -4.557484443406309e-06, -4.556029266626554e-06, 0.000000000000000e+00, -4.560474819255247e-06, -4.553271389044243e-06, 0.000000000000000e+00, -4.557651086934766e-06, -2.914015837149373e-06, 0.000000000000000e+00, -4.559033334756303e-06, -4.554588837918022e-06, 0.000000000000000e+00, -2.916772637192774e-06, -2.230341600683742e-04, 0.000000000000000e+00, -2.231083368292456e-04, -2.168558301386547e-04, 0.000000000000000e+00, -2.171108605512083e-04, -2.283626836812157e-04, 0.000000000000000e+00, -2.268974691619498e-04, -2.228615081822313e-04, 0.000000000000000e+00, -2.213658793440054e-04, -2.157325863248570e-04, 0.000000000000000e+00, -5.119571074971657e-05, -2.157325863248570e-04, 0.000000000000000e+00, -2.194110188035982e-04, -2.787720146641981e-02, 0.000000000000000e+00, -4.063034969570480e-02, -2.027264457019311e-02, 0.000000000000000e+00, -2.024172841690661e-02, -4.083695238466187e-02, 0.000000000000000e+00, -3.549041526379115e-02, -3.498385225631910e-02, 0.000000000000000e+00, -3.075826987626609e-02, -2.388381315160001e-02, 0.000000000000000e+00, -4.431527095243960e-02, -2.388381315160002e-02, 0.000000000000000e+00, -2.924814011553371e-02, -3.605026619935801e+01, 0.000000000000000e+00, -3.481677491280178e+01, -4.169511824597924e-02, 0.000000000000000e+00, -3.238433166167110e+00, -5.183657614434327e+01, 0.000000000000000e+00, -4.315755051859680e+01, -2.449305493565364e-04, 0.000000000000000e+00, -2.453734627032230e-04, -2.261112448527531e+01, 0.000000000000000e+00, -1.876833214925365e+01, -2.261112448527534e+01, 0.000000000000000e+00, -1.876833214925364e+01, -4.946982419812163e-02, 0.000000000000000e+00, -8.213909957171741e+06, -4.108593814263169e+06, 0.000000000000000e+00, -3.837163808693954e+06, -1.454371211824576e+07, 0.000000000000000e+00, -1.203783971330286e+07, -2.013226130154849e+02, 0.000000000000000e+00, -5.739344546208754e-02, -1.096377052275635e+07, 0.000000000000000e+00, -4.173342412890045e+06, -1.096377052275727e+07, 0.000000000000000e+00, -4.173342412898767e+06, -2.804147925226599e-02, 0.000000000000000e+00, -2.761307704773560e-02, -2.865886887612192e-02, 0.000000000000000e+00, -2.821717858382699e-02, -2.269694640965721e-02, 0.000000000000000e+00, -2.245837645253007e-02, -2.340068434805461e-02, 0.000000000000000e+00, -2.782838120753342e-02, -2.304267848936724e-02, 0.000000000000000e+00, -2.279107393730884e-02, -2.304267848936724e-02, 0.000000000000000e+00, -2.791523033568633e-02, -3.125894655242725e-02, 0.000000000000000e+00, -3.085035560754409e-02, -5.680001541398584e-02, 0.000000000000000e+00, -4.148604564698689e-02, -4.751615436728446e-02, 0.000000000000000e+00, -8.305061031496300e-02, -4.000787465403680e-02, 0.000000000000000e+00, -3.945240530082919e-02, -4.362138805967306e-02, 0.000000000000000e+00, -4.298389104897808e-02, -4.362138805967306e-02, 0.000000000000000e+00, -3.662855112713941e-02, -1.679355029667803e-02, 0.000000000000000e+00, -1.176024726767358e-02, -1.353249667990374e+00, 0.000000000000000e+00, -1.323737475686495e+00, -3.715488157337026e-02, 0.000000000000000e+00, -6.492332101816737e-01, -4.745323798927874e-02, 0.000000000000000e+00, -2.214720028256108e-01, -3.870463940566744e-01, 0.000000000000000e+00, -3.877091147651592e-01, -3.870463940566746e-01, 0.000000000000000e+00, -4.561611077425352e-02, -7.906244087108621e-02, 0.000000000000000e+00, -7.700199101915231e-02, -4.886287840668049e-02, 0.000000000000000e+00, -4.788831554968841e-02, -4.476657744323309e+02, 0.000000000000000e+00, -4.003979055916795e+02, -2.688135324489635e-01, 0.000000000000000e+00, -2.542363667904684e-01, -9.518391369730382e+01, 0.000000000000000e+00, -7.995803551492217e+01, -9.518391369730304e+01, 0.000000000000000e+00, -7.995803551492264e+01, -4.494222541202809e-02, 0.000000000000000e+00, -4.429572094221833e-02, -4.139336101495842e+08, 0.000000000000000e+00, -4.104131823734262e+08, -2.056501603618419e-01, 0.000000000000000e+00, -2.178777177804568e-01, -7.478989106062020e-02, 0.000000000000000e+00, -8.391914351515911e-02, -1.492328317387967e+07, 0.000000000000000e+00, -5.686668895096855e+06, -1.492328317379730e+07, 0.000000000000000e+00, -2.885452708600539e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_mvsh_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_mvsh", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [7.745685644816807e-04, 7.744498804577673e-04, 7.745484715778764e-04, 7.744353483885537e-04, 7.744903399179732e-04, 7.743506081333024e-04, 7.747161511211043e-04, 1.250432629193707e-03, 7.745558170592537e-04, 1.250408915668544e-03, 1.250392928973319e-03, 1.250408915668544e-03, 7.665180241076873e-03, 2.632338930521518e-03, 7.665166889390164e-03, 7.665273956175320e-03, 7.664940444367087e-03, 7.664819129735226e-03, 7.664376930228596e-03, 7.664269642914806e-03, 7.666438521652771e-03, 7.663920117879666e-03, 2.629928807640074e-03, 7.663920117879666e-03, 2.727691229655293e-03, 2.877052307404228e-03, 2.687046678642813e-03, 3.940392570635998e-02, 4.030742414778912e-02, 4.056415764927732e-02, 4.020007101460311e-02, 2.456252228900990e-03, 2.962324193554738e-03, 1.798606113524687e-03, 3.909425026440852e-02, 4.146641683200782e-02, 3.869089555929548e-03, 1.485371797240530e-01, 4.158867787436587e-03, 1.462708495825661e-01, 3.364429896984794e-02, 9.766436014019499e-04, 1.828783080626683e-01, 1.838402290692169e-01, 1.468223737415531e-01, 2.152487357457626e-01, 1.468223737415530e-01, 2.291489943167943e-04, 1.000837754045548e+00, 9.714095434187986e-01, 1.756291573288687e-07, 9.504940189296796e-01, 1.452089654597828e-05, 3.721372095106850e-01, 1.241287658919596e+00, 1.253353105693813e+00, 1.052798245202263e+00, 1.492439151600765e+00, 1.052798245202263e+00, 1.492439151600885e+00, 5.129720280719056e-03, 5.130949403700303e-03, 5.128772548008276e-03, 5.130033531013925e-03, 5.129662650178475e-03, 5.130914369799309e-03, 5.128849488377056e-03, 5.130082379181273e-03, 3.266017823686166e-03, 5.130490015798734e-03, 5.129238661725858e-03, 3.266715936245793e-03, 1.360462188053504e-02, 1.360569047553900e-02, 1.350875393474521e-02, 1.351267396832422e-02, 1.368566977096255e-02, 1.366347505040424e-02, 1.360199965567135e-02, 1.357889249776236e-02, 1.349105449456440e-02, 3.085263380468734e-03, 1.349105449456440e-02, 1.354856996187110e-02, 4.543347582480506e-02, 6.486560703067107e-02, 4.191225626839104e-02, 4.189401686138676e-02, 5.002615467679011e-02, 4.828390356380800e-02, 4.809186769239456e-02, 4.655615934526459e-02, 4.369603700279261e-02, 6.881894693876865e-02, 4.369603700279263e-02, 4.597874351566754e-02, 2.259505505547365e-01, 2.246815569253875e-01, 1.713933216118571e-03, 1.458069105383256e-01, 2.386152200208534e-01, 2.336861747264821e-01, 1.390532632831823e-02, 1.391158913815941e-02, 2.160310936775401e-01, 2.150571335688253e-01, 2.160310936775404e-01, 2.150571335688252e-01, 7.173442354364650e-09, 1.336937883909682e+00, 1.257112306157618e+00, 1.228177881155957e+00, 1.860746670980010e+00, 1.829376579984991e+00, 2.972505397820571e-01, 8.423820095918389e-05, 1.494369052227641e+00, 1.473554714792827e+00, 1.494369052227767e+00, 1.473554714795905e+00, 4.539921413527194e-02, 4.522441401673187e-02, 4.566084015486926e-02, 4.548331148880819e-02, 3.628896331469721e-02, 3.632963748577087e-02, 3.760376990031796e-02, 4.531719005807235e-02, 3.693494572834476e-02, 3.695908387357555e-02, 3.693494572834476e-02, 4.535446331419023e-02, 4.665091271972195e-02, 4.649723718685603e-02, 5.430355578705727e-02, 3.955683879371037e-02, 5.189626874427951e-02, 9.094299947997489e-02, 4.967323723388500e-02, 4.949936593295975e-02, 5.077903784542707e-02, 5.059155366686825e-02, 5.077903784542707e-02, 4.275118234590739e-02, 3.999716295471867e-02, 2.791412539801258e-02, 1.191873299386248e-01, 1.185668278903344e-01, 5.294982109743020e-03, 9.979072127995584e-02, 1.569020639059297e-02, 7.637142822675944e-02, 8.781023020254942e-02, 8.784854956302882e-02, 8.781023020254944e-02, 9.997173019021964e-03, 5.901161929064865e-02, 5.861860037123795e-02, 1.444152564097875e-05, 1.444600924488429e-05, 3.265914668590958e-01, 3.228402870273571e-01, 8.013784811500328e-02, 7.900227827945926e-02, 2.734396579973462e-01, 2.727420651402949e-01, 2.734396579973441e-01, 2.727420651402965e-01, 2.079885718096967e-07, 2.281107982700708e-07, 2.466075367801647e+00, 2.461905594104794e+00, 1.032158612329895e-08, 1.315653660821512e-08, 1.814202335645054e-04, 2.137165854846739e-04, 1.728690549891191e+00, 1.546066640420439e+00, 1.728690549881645e+00, 7.843330159498774e-08]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
