
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_m06_2x_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06_2x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-7.868598278045583e+00, -7.868555942088663e+00, -7.868400325658414e+00, -7.869025060218292e+00, -7.868693255161768e+00, -7.868693255161768e+00, -1.562919632186173e+00, -1.562927009057145e+00, -1.563117919177420e+00, -1.563189599926707e+00, -1.563019963843341e+00, -1.804082101724691e+00, -3.144812450928290e-01, -4.001458373276192e-01, -4.216981037425034e-01, -4.096669322043057e-01, -4.124348214581263e-01, -4.124348214581263e-01, -1.290109536048892e-01, -1.280667153341507e-01, -4.394007869115615e-01, -1.267655532189899e-01, -1.264895643236300e-01, -1.264895643236300e-01, -1.682951478709806e-02, -1.770242007745784e-02, -8.746609221452091e-02, -9.753605236851464e-03, -1.224137178285358e-02, -1.224137178285358e-02, -1.798190892740833e+00, -1.795001738479861e+00, -1.798002198083336e+00, -1.722848756240164e+00, -1.796582585237387e+00, -1.796582585237387e+00, -8.668045708496566e-01, -8.767174330134682e-01, -8.594384881233876e-01, -8.681870815614258e-01, -8.759196106905822e-01, -1.031047308584653e+00, -2.682469390393178e-01, -2.439514092718870e-01, -2.758730647264064e-01, -2.568061948605794e-01, -2.640443422359592e-01, -2.415618918869893e-01, -8.143839763900342e-02, -1.474941056015500e-01, -7.989237202478862e-02, -8.352532235915251e-01, -1.166242152437917e-01, -1.166242152437910e-01, -4.174898762337384e-03, -9.536364882719290e-03, -7.285895325799516e-03, -6.722079870214041e-02, -4.867598229241064e-03, -8.779095967115364e-03, -1.852317575876656e-01, -2.046274499068686e-01, -2.019653620511880e-01, -2.007156188761838e-01, -2.041523743174945e-01, -2.041523743174945e-01, -1.870543851727700e-01, -2.411906010146861e-01, -2.242356716394941e-01, -2.038961875036767e-01, -2.167960078354872e-01, -2.023306632398792e-01, -2.714572930758711e-01, -1.222913831263225e-01, -1.684708854004378e-01, -1.536579714932539e-01, -1.639406371652671e-01, -1.639406371652671e-01, -2.036497721991414e-01, -8.445666244231340e-02, -1.065279808714243e-01, -1.723067194245278e-01, -6.953205436224567e-02, -1.170959154037872e-01, -2.370785961746137e-02, -2.552082653472347e-03, -5.353497506936740e-03, -1.142761492817135e-01, -8.123071901868135e-03, -8.123071901868079e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_m06_2x_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06_2x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-7.035386556506903e+00, -7.035176119474023e+00, -7.034339288211758e+00, -7.037453122456803e+00, -7.035807540821474e+00, -7.035807540821474e+00, -2.109640615028616e+00, -2.109107793581275e+00, -2.094917666595462e+00, -2.100884332265429e+00, -2.100028920034027e+00, -1.904392980350950e+00, -2.294351788209719e-01, -1.388154992947259e-01, -1.215483858512489e-01, -1.206863900881300e-01, -1.196592642702340e-01, -1.196592642702340e-01, -6.765809050942713e-02, -5.937733939848513e-02, -4.502544658635319e-01, -7.261456820121974e-02, -1.063692084048054e-01, -1.063692084048147e-01, -2.229196374891449e-02, -2.342792282184616e-02, -9.887481048083582e-02, -1.298038559049297e-02, -1.626474120115031e-02, -1.626474120115031e-02, -1.589827972953631e+00, -1.609700503588164e+00, -1.590950111734056e+00, -1.719128940458004e+00, -1.599695382579636e+00, -1.599695382579636e+00, -1.300997064823441e+00, -1.312057934745539e+00, -1.283565033311227e+00, -1.303309961405592e+00, -1.311432851964223e+00, -1.221140060004721e+00, -1.942051794076091e-01, -1.759897173135757e-01, -2.438546660625279e-01, -1.877926372008034e-01, -2.074901917671449e-01, -2.383222652362920e-01, -4.987301992967286e-02, -1.249675537290887e-01, -5.233859749065202e-02, -6.897924999421821e-01, -4.642147898263760e-02, -4.642147898261445e-02, -5.562312824816625e-03, -1.269369784779772e-02, -9.687278105108740e-03, -6.124007366044539e-02, -6.476794719417023e-03, -1.167594120708960e-02, -1.573442371694641e-01, -2.981965169967047e-01, -2.559378215309308e-01, -1.938021765272297e-01, -2.226513303211773e-01, -2.226513303211773e-01, -1.569902958259648e-01, -1.783852886870357e-01, -1.854252772771557e-01, -1.447169084584704e-01, -1.858580608421466e-01, -2.062562036070179e-01, -2.268505285382496e-01, -1.207935787541826e-01, -4.829442102050340e-02, -2.300821644451136e-01, -1.233748320794028e-01, -1.233748320794023e-01, -2.618464177811190e-01, -9.674582656860406e-02, -1.081002214934903e-01, -1.666981708094027e-01, -4.652020517383573e-02, -5.942069866846562e-02, -3.132471485617568e-02, -3.402322790858101e-03, -7.130891259945600e-03, -6.278750567496014e-02, -1.080284341127948e-02, -1.080284341128143e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m06_2x_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06_2x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-3.239770457407209e-09, -3.239707850362764e-09, -3.239429009276269e-09, -3.240358694024739e-09, -3.239871671213742e-09, -3.239871671213742e-09, -5.625567961687358e-06, -5.625533802914599e-06, -5.624128697948972e-06, -5.622684169666573e-06, -5.625178267142570e-06, -3.674054413021413e-06, -4.240160988929354e-03, -1.876821681542196e-03, -1.993089321457310e-03, -1.972505285122649e-03, -1.976434250825805e-03, -1.976434250825805e-03, -3.487959017244647e-01, -3.392270771961097e-01, -2.748285071396414e-03, -4.224092410856697e-01, -4.132270131445745e-01, -4.132270131445744e-01, -3.998727947965197e+00, -4.163744825586940e+00, -1.747253919407229e+00, -2.945730142814704e+00, -4.095017234264202e+00, -4.095017234264202e+00, -7.408394537618123e-07, -7.397006889786238e-07, -7.407771334740310e-07, -8.235448139907649e-07, -7.402622458725702e-07, -7.402622458725702e-07, -5.526948452915066e-05, -5.391752427014996e-05, -5.627406443200727e-05, -5.505011052627643e-05, -5.405165367416513e-05, -3.286167788854586e-05, -4.883460159441488e-03, -3.467790576115380e-03, -6.449268964926666e-03, -5.706788884486785e-03, -4.590271664076909e-03, -5.870812984906464e-03, -2.351413936348945e+01, -2.251850864474849e-01, -3.404092203338969e+01, -4.278031153947915e-05, -7.204692919796244e-01, -7.204692919796201e-01, -5.460421625422013e+07, -2.604411954483648e+00, -2.103870880839776e+01, -2.081009166243969e+02, -2.939660137501097e+07, -8.075843014153401e+00, -4.568705597421585e-03, -4.990568571041411e-03, -5.287452511127879e-03, -4.930711272248617e-03, -5.006802671979974e-03, -5.006802671979974e-03, -5.264005073825699e-03, -9.752516587708690e-03, -8.219646683700489e-03, -6.766123204408997e-03, -7.571753881849381e-03, -9.121908723849145e-03, -2.923286463584622e-03, -4.428361785477100e-01, -7.563912271440808e-02, -5.539820752423712e-02, -4.933619925173297e-02, -4.933619925173298e-02, -1.947463686288108e-02, -1.794170432686990e+00, -1.426962536054895e+00, -4.364820861557487e-02, -6.430890714237580e+01, -1.431237501027318e+00, -1.906664161738169e+00, -3.193199446666855e+00, -9.148611985151719e+00, -1.642645423104479e+00, -1.150925777864297e+01, -1.150925777864292e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m06_2x_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06_2x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-2.026407542556085e-03, -2.026549346029549e-03, -2.027118672385990e-03, -2.025019988582092e-03, -2.026128207359755e-03, -2.026128207359755e-03, 1.935778653883536e-04, 1.895468579838335e-04, 8.146934538099038e-05, 1.255539874320722e-04, 1.208666976580086e-04, 1.395077804401212e-04, -1.812208187557465e-02, -2.318363891018358e-02, -2.403834225879169e-02, -2.449754958032806e-02, -2.449659670659861e-02, -2.449659670659861e-02, -4.938514346262848e-02, -5.744944396577002e-02, -5.502212306166230e-03, -3.560705623360234e-02, -1.250181654881841e-02, -1.250181654881492e-02, -9.794388020641469e-05, -1.189295106105661e-04, -8.456419927663069e-03, -1.389298702921165e-05, -3.832546989663174e-05, -3.832546989663174e-05, -8.980641580036891e-03, -8.723009334439053e-03, -8.966173562382461e-03, -8.386764476194660e-03, -8.853173698827247e-03, -8.853173698827247e-03, 2.799124091434405e-03, 2.833000634992675e-03, 2.594700500331993e-03, 2.815304412126567e-03, 2.838844198994583e-03, 3.341611073825442e-03, -4.571425549985235e-02, -8.178826295069411e-02, -1.769895441005981e-02, -4.738708735288592e-02, -4.266036414198146e-02, -3.902798364645854e-02, -3.205205577532177e-02, -1.013562912710055e-02, -3.006015227208138e-02, -1.264760564782296e-02, -5.550431779927988e-02, -5.550431779928268e-02, -2.450344930574303e-06, -1.147554240949038e-05, -4.144865296661820e-05, -1.766334497340071e-02, -1.542265441177798e-05, -2.781596934963119e-05, -3.544046862996006e-01, 7.970209109634209e-02, -3.449814148912508e-02, -2.054049540219403e-01, -1.143900354843414e-01, -1.143900354843414e-01, -3.371974968098144e-01, -4.146843495182534e-02, -4.703275438703929e-02, -1.019855367434932e-01, -5.446277041538251e-02, -5.082883476520290e-02, -4.850619853764098e-02, -2.260497729712262e-02, -6.029851195585548e-02, 1.507929428849963e-02, -2.190318994416429e-02, -2.190318994416415e-02, -4.488020776166060e-03, -7.610694067666388e-03, -1.536308463751405e-02, -1.323666451743156e-02, -3.356745793148839e-02, -5.652949924056676e-02, -1.313068764806247e-04, -2.686937768017001e-07, -7.120080733344102e-06, -5.467463459792733e-02, -3.140664227510969e-05, -3.140664227398750e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
