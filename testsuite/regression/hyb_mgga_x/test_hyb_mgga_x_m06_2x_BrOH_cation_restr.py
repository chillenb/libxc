
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_m06_2x_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06_2x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-8.314621326320301e+00, -8.314564285582652e+00, -8.314364884606237e+00, -8.315207711250908e+00, -8.314758564102927e+00, -8.314758564102927e+00, -1.682220489770516e+00, -1.682206383134680e+00, -1.681902273152938e+00, -1.682865531589189e+00, -1.682302045530695e+00, -1.682302045530695e+00, -3.523791190065263e-01, -3.531976653426582e-01, -3.755531501530388e-01, -3.679209505848974e-01, -3.692462003084592e-01, -3.692462003084592e-01, -1.277360354839858e-01, -1.265211669327130e-01, -4.873715553685968e-01, -1.232664628722188e-01, -1.234262011698830e-01, -1.234262011698830e-01, -1.682942881172532e-02, -1.770223190648301e-02, -8.732072858087159e-02, -9.753398710929883e-03, -1.224108704727140e-02, -1.224108704727140e-02, -1.797745431646025e+00, -1.794562159524845e+00, -1.797566047531392e+00, -1.794757525616051e+00, -1.796135475691583e+00, -1.796135475691583e+00, -1.009145550189092e+00, -1.018038977613360e+00, -1.006571227246385e+00, -1.014444667621462e+00, -1.015366521543676e+00, -1.015366521543676e+00, -2.595922585382391e-01, -2.352276671796681e-01, -2.605595566344768e-01, -2.393513228455380e-01, -2.560559966580722e-01, -2.560559966580722e-01, -1.338134877824844e-01, -1.459645572047522e-01, -1.325691750940280e-01, -7.816603224603411e-01, -1.151079617321065e-01, -1.151079617321057e-01, -7.530513213836450e-03, -9.535926221351524e-03, -7.285628800258239e-03, -1.159046072962779e-01, -8.778570535399367e-03, -8.778570535399413e-03, -1.842989608151035e-01, -2.036561213889506e-01, -2.048225026904487e-01, -1.997255664247606e-01, -2.031535595787103e-01, -2.031535595787103e-01, -1.851817161265566e-01, -2.400397082268980e-01, -2.227874329643071e-01, -2.022462054908285e-01, -2.151289699124911e-01, -2.151289699124911e-01, -2.594213209014379e-01, -1.660192084534310e-01, -1.655844540159131e-01, -1.742734741293405e-01, -1.597035404107501e-01, -1.597035404107501e-01, -2.281269123587326e-01, -8.439442764716909e-02, -1.061835284297743e-01, -1.654718866766131e-01, -1.160158683344657e-01, -1.160158683344647e-01, -2.370170088790761e-02, -2.552032479399331e-03, -5.353465677138037e-03, -1.136777979560893e-01, -8.122717737752857e-03, -8.122717737752801e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_m06_2x_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06_2x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-6.328640280586873e+00, -6.328441048199528e+00, -6.327627480252686e+00, -6.330574953753353e+00, -6.329020285426838e+00, -6.329020285426838e+00, -1.982742095159842e+00, -1.982185121032018e+00, -1.967295381635166e+00, -1.972978591325737e+00, -1.972399827718307e+00, -1.972399827718307e+00, -1.711709572226921e-01, -1.688860575754067e-01, -1.439497782078329e-01, -1.428411685373795e-01, -1.424643279742323e-01, -1.424643279742323e-01, -6.694612515813379e-02, -5.873120732079986e-02, -3.888583308495696e-01, -6.687907781797758e-02, -1.018688789417376e-01, -1.018688789417467e-01, -2.229162108966592e-02, -2.342717321781083e-02, -9.834362443312322e-02, -1.297956036417877e-02, -1.626360448435411e-02, -1.626360448435411e-02, -1.590451773185416e+00, -1.610311754967207e+00, -1.591560624955257e+00, -1.609080457170610e+00, -1.600319320440767e+00, -1.600319320440767e+00, -1.212589068168891e+00, -1.222252426558830e+00, -1.194496963729465e+00, -1.214570986124346e+00, -1.221987232572473e+00, -1.221987232572473e+00, -2.043099748413357e-01, -1.895962632479885e-01, -2.562091651383423e-01, -2.105083746895481e-01, -2.168555179286706e-01, -2.168555179286706e-01, -5.400125255967181e-02, -1.226731143534476e-01, -6.157475582299268e-02, -7.593455079096448e-01, -4.368960035586338e-02, -4.368960035584051e-02, -1.003039753807845e-02, -1.269194494760379e-02, -9.686213702141695e-03, -9.271297255948263e-02, -1.167384257671424e-02, -1.167384257671476e-02, -1.589542457341586e-01, -2.991815418605445e-01, -2.520735118659411e-01, -1.953589522212185e-01, -2.240818063551273e-01, -2.240818063551273e-01, -1.602459455969296e-01, -1.794016009892448e-01, -1.870035310428264e-01, -1.471736686801515e-01, -1.878590726428921e-01, -1.878590726428921e-01, -2.434481899585317e-01, -9.923830754292005e-02, -4.862138829750538e-02, -2.151501549564780e-01, -1.239724482059529e-01, -1.239724482059524e-01, -2.378037338548236e-01, -9.651650509570958e-02, -1.069116019946860e-01, -1.708347816024197e-01, -5.673294773963794e-02, -5.673294773963182e-02, -3.130021172740007e-02, -3.402122115162566e-03, -7.130764011422560e-03, -6.123252379870502e-02, -1.080142885098052e-02, -1.080142885098247e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m06_2x_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06_2x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.799050858972975e-09, -2.799008482906578e-09, -2.798800855974140e-09, -2.799430148388514e-09, -2.799103196608894e-09, -2.799103196608894e-09, -4.608088099403687e-06, -4.608238776630760e-06, -4.611216729376976e-06, -4.602855829002849e-06, -4.607983077029853e-06, -4.607983077029853e-06, -3.064330703822078e-03, -3.073525804971449e-03, -3.270265118013942e-03, -3.095106718031687e-03, -3.146151247554975e-03, -3.146151247554975e-03, -3.699105229847964e-01, -3.635983119724498e-01, -2.052593101156005e-03, -5.675637489388826e-01, -5.026084489634081e-01, -5.026084489634079e-01, -4.066109289255751e+00, -4.293291047676327e+00, -2.172430483581330e+00, -3.706447825302374e+00, -4.703907659323478e+00, -4.703907659323490e+00, -7.413417986288502e-07, -7.401961542055801e-07, -7.412689666360830e-07, -7.402583984236354e-07, -7.407663232734140e-07, -7.407663232734140e-07, -3.499802299864106e-05, -3.446495839054169e-05, -3.486054126770153e-05, -3.439754793614354e-05, -3.476531453868264e-05, -3.476531453868264e-05, -5.390799545998769e-03, -3.827532842804770e-03, -7.731602172832279e-03, -6.985773070761138e-03, -5.027245902174353e-03, -5.027245902174353e-03, -9.414402029643039e-01, -2.449515678779722e-01, -1.101903499725948e+00, -5.152586464682585e-05, -8.610843773394417e-01, -8.610843773394361e-01, -4.886774812363951e+00, -4.362735791015250e+00, -2.737827734069685e+01, -2.048150081308350e+00, -1.274304538993018e+01, -1.274304538993022e+01, -4.627652819199194e-03, -5.052830136104039e-03, -5.103020009048271e-03, -4.993596596627983e-03, -5.070375016287044e-03, -5.070375016287044e-03, -5.399939675941713e-03, -9.906531365775196e-03, -8.381660420396097e-03, -6.921325658410240e-03, -7.743044840487163e-03, -7.743044840487163e-03, -3.311826370603646e-03, -1.365325560768036e-01, -8.237393534079103e-02, -3.845204566683635e-02, -5.494572662411393e-02, -5.494572662411395e-02, -1.408721715345230e-02, -1.997806144852438e+00, -1.854289641642830e+00, -4.988389494173828e-02, -1.825941326760582e+00, -1.825941326760568e+00, -3.271438015921602e+00, -2.143189430373083e+01, -1.036648474208979e+01, -1.914329120170455e+00, -1.609504601672201e+01, -1.609504601672195e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m06_2x_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06_2x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m06_2x_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06_2x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-2.141272279227105e-03, -2.141418951517992e-03, -2.142011540980582e-03, -2.139840920017089e-03, -2.140986605757412e-03, -2.140986605757412e-03, 2.083540604495633e-04, 2.040126842493316e-04, 8.766035851004585e-05, 1.351662509863954e-04, 1.300906561721868e-04, 1.300906561721868e-04, -2.030595892608524e-02, -2.046355696690604e-02, -2.140791025529154e-02, -2.200119418986931e-02, -2.193140536102527e-02, -2.193140536102527e-02, -4.889710727233146e-02, -5.675612645502490e-02, -6.102906161076587e-03, -3.462420005871783e-02, -1.219904371237659e-02, -1.219904371237319e-02, -9.794337984964771e-05, -1.189282464285023e-04, -8.442365842277217e-03, -1.389269285471104e-05, -3.832457844221171e-05, -3.832457844221171e-05, -8.978416829346367e-03, -8.720873151924227e-03, -8.963998591989084e-03, -8.736813724768686e-03, -8.850970438869187e-03, -8.850970438869187e-03, 3.258777948677950e-03, 3.289663192977294e-03, 3.038903776183943e-03, 3.289579641609658e-03, 3.290789844589748e-03, 3.290789844589748e-03, -4.423933736243453e-02, -7.886350135869512e-02, -1.671649864966893e-02, -4.416623224322135e-02, -4.136972587888203e-02, -4.136972587888203e-02, -5.266554227781603e-02, -1.003052028075943e-02, -4.988022622077410e-02, -1.183608902042774e-02, -5.478269565073273e-02, -5.478269565073549e-02, -4.419832893819945e-06, -1.147501454827794e-05, -4.144713673228141e-05, -3.045579794063804e-02, -2.781430455446412e-05, -2.781430455492328e-05, -3.526199623847251e-01, 7.932376006570663e-02, -3.498617587792569e-02, -2.043917708954724e-01, -1.138303826574087e-01, -1.138303826574087e-01, -3.338216908154606e-01, -4.127055940233821e-02, -4.672899070213642e-02, -1.011602427384525e-01, -5.404398270531190e-02, -5.404398270531188e-02, -4.635551306785179e-02, -3.068785667506524e-02, -5.926541049778555e-02, 1.710240593141584e-02, -2.133709518797255e-02, -2.133709518797242e-02, -5.027446440094384e-03, -7.605085866104660e-03, -1.531340893755824e-02, -1.271161019326442e-02, -5.600809317978132e-02, -5.600809317977888e-02, -1.312727661242348e-04, -2.686884942685666e-07, -7.120038400133674e-06, -5.438835753753181e-02, -3.140527295254186e-05, -3.140527295141973e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
