
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_m05_2x_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m05_2x", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-7.408329168868221e+00, -7.408333587029771e+00, -7.408366139324054e+00, -7.631624745998012e+00, -7.631617136254425e+00, -7.854930617201560e+00, -1.594022410894901e+00, -1.708531257651277e+00, -1.707955891419162e+00, -1.708347936824124e+00, -1.708116576005076e+00, -1.593626188054769e+00, -3.152746608959445e-01, -3.581311144861493e-01, -4.222056871241823e-01, -3.655768974012282e-01, -3.199569721707543e-01, -4.122039376284615e-01, -1.105750349414645e-01, -1.103125779663561e-01, -5.128449267795921e-01, -1.378498603698455e-01, -1.371290052672135e-01, -1.286434199458721e-01, -1.668359695820577e-02, -1.418411845912166e-02, -7.139119173268312e-02, -9.644988176490498e-03, -1.344282332823727e-02, -1.344282332823726e-02, -1.799441093520910e+00, -1.796610156637405e+00, -1.799276243847988e+00, -1.796779091901107e+00, -1.761667143036494e+00, -1.761698702866275e+00, -9.714711218478465e-01, -9.757731572296394e-01, -9.692431365924721e-01, -9.722071887446790e-01, -9.019682115104251e-01, -9.752763715150514e-01, -2.426888446671817e-01, -2.325954100027826e-01, -2.619193605963701e-01, -2.429442759664139e-01, -2.370164156333626e-01, -2.474158395980083e-01, -1.508094667591615e-01, -1.260766712469130e-01, -1.480173203392293e-01, -7.756137534767935e-01, -1.302012209577480e-01, -1.302012209577473e-01, -5.917727416500677e-03, -9.429583537598180e-03, -7.216622260223597e-03, -9.716281965901802e-02, -9.062781732499805e-03, -9.062781732499851e-03, -2.615094077552684e-01, -2.004613642506770e-01, -2.130047393874401e-01, -2.351232543874142e-01, -2.225907606996839e-01, -2.245346123318193e-01, -2.463614993030964e-01, -2.184331880789452e-01, -1.998100908751598e-01, -1.957567283434306e-01, -1.992642580015687e-01, -1.926087009635068e-01, -2.427158568830406e-01, -1.646601481201697e-01, -1.496208795665698e-01, -1.594883414942939e-01, -1.611398021224315e-01, -1.461600405424815e-01, -2.219700077157205e-01, -4.805830422815098e-02, -1.097873095170573e-01, -1.631576499699282e-01, -1.286103491451321e-01, -1.286103491451316e-01, -1.302899411224015e-02, -2.522543236754392e-03, -2.939463264957541e-03, -7.388230743390958e-02, -8.324348364752120e-03, -5.516890321834073e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_m05_2x_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m05_2x", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-9.004486136597807e+00, -9.004394480213271e+00, -9.004503640957291e+00, -9.004406938415181e+00, -9.004569421762291e+00, -9.004496678732288e+00, -9.004369263467709e+00, -8.445366115148101e+00, -9.004495774417038e+00, -8.445560584317994e+00, -8.445655088048609e+00, -8.445560584317994e+00, -1.928353856121229e+00, -2.097169983499257e+00, -1.927952363462240e+00, -1.928396729353791e+00, -1.919852185692096e+00, -1.918365297021451e+00, -1.923022470518011e+00, -1.923038291576837e+00, -1.928934179809195e+00, -1.915483974634849e+00, -2.097349079764580e+00, -1.915483974634849e+00, -2.165076798897863e-01, -2.157521746350680e-01, -2.169457870494165e-01, -1.237491443231356e-01, -1.449251657231156e-01, -1.516817315545231e-01, -1.325110039344000e-01, -2.215397513710524e-01, -2.172729549133078e-01, -2.659933441548690e-01, -1.260414053416396e-01, -1.829359370653742e-01, -9.671887732840942e-02, -6.583271610828281e-02, -9.488611731296843e-02, -5.840540410441677e-02, -4.121159381639062e-01, -4.228916367486650e-01, -4.459160542579743e-02, -4.913632785342828e-02, -8.560515762787949e-02, -8.375673428366574e-02, -8.560515762787636e-02, -6.756099709220813e-02, -2.141217047374000e-02, -2.272802093111683e-02, -1.244918609570742e-02, -2.397770911965034e-02, -5.940146962770587e-02, -1.052946706790323e-01, -1.294580144384927e-02, -1.273100771710227e-02, -1.913749197884109e-02, -1.093108838446471e-02, -1.913749197884109e-02, -1.093108838446513e-02, -1.678107270970989e+00, -1.677671992684880e+00, -1.673390073520703e+00, -1.673107508747744e+00, -1.677756160065952e+00, -1.677452781915964e+00, -1.673710599043634e+00, -1.673308560900072e+00, -1.784195080189884e+00, -1.675317783659980e+00, -1.675668046566630e+00, -1.783827524545904e+00, -1.047558481023611e+00, -1.051931454494929e+00, -1.093179139194830e+00, -1.095021174066163e+00, -9.963709869678438e-01, -1.016922963507778e+00, -1.046923964779357e+00, -1.064240525870745e+00, -1.101719590450955e+00, -1.176483218552761e+00, -1.101719590450955e+00, -1.080532075900824e+00, -1.410213538792998e-01, -1.749823947269791e-01, -2.509992962738212e-01, -2.480423132092354e-01, -2.865640028409439e-01, -2.165118879030553e-01, -1.417370601622996e-01, -1.350274746212846e-01, -1.574044330232698e-01, -1.715819319977986e-01, -1.574044330232698e-01, -1.360565533222242e-01, -7.869125145165974e-02, -7.741281565941553e-02, -9.931819073610144e-02, -9.113149345497015e-02, -9.351686415836515e-02, -8.220214943284254e-02, -4.908363492027216e-01, -4.911355357332780e-01, -4.515571331798494e-02, -3.726327349594156e-02, -4.515571331797833e-02, -3.726327349592947e-02, -5.392065721048945e-03, -1.010598841118198e-02, -1.245929620686379e-02, -1.264882255403852e-02, -9.305904320628682e-03, -9.849268499188811e-03, -1.144525853602894e-01, -7.029442603421696e-02, -9.522702920194004e-03, -1.302908336125646e-02, -9.522702920194500e-03, -1.302908336125642e-02, -4.341219208665957e-01, -4.266089891660515e-01, -3.665607728019288e-01, -3.777172903260534e-01, -4.442966213106018e-01, -4.528604082133650e-01, -4.783818608540866e-01, -4.788010125919077e-01, -4.666181759714745e-01, -4.723338140367774e-01, -4.666181759714745e-01, -4.703888084284273e-01, -4.528035307374395e-01, -4.487539007007684e-01, -1.762800337624098e-01, -2.035975454749234e-01, -1.303045542600403e-01, -1.598812553635577e-01, -2.085836846506029e-01, -2.085129890252078e-01, -1.860457987677042e-01, -1.892084713463333e-01, -1.860457987677042e-01, -2.066891311266415e-01, -2.423346008596026e-01, -2.755978481323192e-01, -1.046114520037635e-01, -1.036394451700018e-01, -9.597498476925663e-02, -5.568349104099866e-02, -1.998694960177069e-01, -1.832234944557010e-01, -8.510960826334354e-02, -8.676271212973594e-02, -8.510960826334363e-02, -1.171151276411382e-01, -2.461327537406586e-01, -2.367202180722501e-01, -5.840482136838059e-02, -5.877083942199973e-02, -1.182152005056415e-01, -1.183969384251949e-01, -1.863065570272942e-01, -1.512547958688873e-01, -8.849408923089946e-02, -7.025240999708958e-02, -8.849408923090923e-02, -7.025240999708450e-02, -1.696002786069621e-02, -1.756397051011933e-02, -3.359189165497339e-03, -3.366865388777285e-03, -3.785846900601466e-03, -4.025901511314554e-03, -6.152096379547174e-02, -5.811431718787689e-02, -9.013745472801933e-03, -1.195128458157842e-02, -9.013745472802601e-03, -6.631067056889407e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m05_2x_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m05_2x", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-6.100561026823313e-09, 0.000000000000000e+00, -6.100486799476012e-09, -6.100466684076572e-09, 0.000000000000000e+00, -6.100418284019784e-09, -6.100155131919551e-09, 0.000000000000000e+00, -6.099974598402373e-09, -6.101219826819939e-09, 0.000000000000000e+00, -5.220564893539164e-09, -6.100504850042983e-09, 0.000000000000000e+00, -5.220247691475467e-09, -5.219949288360981e-09, 0.000000000000000e+00, -5.220247691475467e-09, -6.944132633418131e-06, 0.000000000000000e+00, -1.065089055917342e-05, -6.945004947785929e-06, 0.000000000000000e+00, -6.944320761360714e-06, -6.962007625087026e-06, 0.000000000000000e+00, -6.964741790557569e-06, -6.953497973046201e-06, 0.000000000000000e+00, -6.953132629095667e-06, -6.946639066386376e-06, 0.000000000000000e+00, -6.967847288066673e-06, -1.065719410295221e-05, 0.000000000000000e+00, -6.967847288066673e-06, -8.617958361835650e-03, 0.000000000000000e+00, -8.387787738010806e-03, -8.700152419971087e-03, 0.000000000000000e+00, -3.744796898254789e-03, -3.953637428285340e-03, 0.000000000000000e+00, -4.028785458839989e-03, -3.960108330081644e-03, 0.000000000000000e+00, -9.435112349197463e-03, -8.077103989434845e-03, 0.000000000000000e+00, -1.165301012849561e-02, -3.645362279659495e-03, 0.000000000000000e+00, -4.277093445277194e-03, -2.427015836622851e+00, 0.000000000000000e+00, -6.726744456618792e-01, -2.292364447733493e+00, 0.000000000000000e+00, -6.496764439431943e-01, -1.520954377732787e-03, 0.000000000000000e+00, -4.974883363142658e-03, -8.867936561238144e-01, 0.000000000000000e+00, -9.516075637393477e-01, -5.922874542951474e-01, 0.000000000000000e+00, -1.300445974576670e+00, -5.922874542951465e-01, 0.000000000000000e+00, -4.469461337580155e+01, -7.898628720174841e+00, 0.000000000000000e+00, -7.926050509207606e+00, -3.996942154218999e+06, 0.000000000000000e+00, -8.286219238043765e+00, -3.911596458774041e+03, 0.000000000000000e+00, -3.597665483072729e+00, -5.796124336834122e+00, 0.000000000000000e+00, -5.855663339720341e+00, -7.509037701387693e+00, 0.000000000000000e+00, -1.287372390308596e+01, -7.509037701387693e+00, 0.000000000000000e+00, -1.287372390308583e+01, -1.482001704363984e-06, 0.000000000000000e+00, -1.483416936358130e-06, -1.479986554236430e-06, 0.000000000000000e+00, -1.481468035552602e-06, -1.481871796472101e-06, 0.000000000000000e+00, -1.483336939877840e-06, -1.480143326577921e-06, 0.000000000000000e+00, -1.481567086655066e-06, -1.649298781992111e-06, 0.000000000000000e+00, -1.482443424526344e-06, -1.480986953649511e-06, 0.000000000000000e+00, -1.650937274888942e-06, -6.251571329376367e-05, 0.000000000000000e+00, -6.266009411020453e-05, -6.199095879080266e-05, 0.000000000000000e+00, -6.215059122553589e-05, -6.291089116668257e-05, 0.000000000000000e+00, -6.293164473878410e-05, -6.244461066743056e-05, 0.000000000000000e+00, -6.246936470452523e-05, -6.196580962098375e-05, 0.000000000000000e+00, -1.030915529772740e-04, -6.196580962098375e-05, 0.000000000000000e+00, -6.236895183053322e-05, -9.216826215226938e-03, 0.000000000000000e+00, -1.217047849186442e-02, -6.609802127516061e-03, 0.000000000000000e+00, -6.615641201361724e-03, -1.279215029344937e-02, 0.000000000000000e+00, -1.171384265389504e-02, -1.161444850959836e-02, 0.000000000000000e+00, -1.006263318668182e-02, -7.736562315841218e-03, 0.000000000000000e+00, -1.254877221048032e-02, -7.736562315841221e-03, 0.000000000000000e+00, -9.631716263555055e-03, -1.586163952569541e+00, 0.000000000000000e+00, -1.561735128489809e+00, -2.418166128962628e+00, 0.000000000000000e+00, -4.519576232105494e-01, -1.806232556177041e+00, 0.000000000000000e+00, -1.767444445276623e+00, -7.938269739293396e-05, 0.000000000000000e+00, -7.952010331928016e-05, -1.541395120085841e+00, 0.000000000000000e+00, -1.665131746499823e+00, -1.541395120085842e+00, 0.000000000000000e+00, -1.665131746499807e+00, -1.168587216894860e+08, 0.000000000000000e+00, -3.881238395082818e+00, -5.498469102330774e+00, 0.000000000000000e+00, -4.846812775698466e+00, -3.958162421910731e+01, 0.000000000000000e+00, -4.343976462039625e+01, -3.011583196177432e+00, 0.000000000000000e+00, -4.315081338602702e+02, -7.462765464301726e+00, 0.000000000000000e+00, -2.366938083376562e+01, -7.462765464301780e+00, 0.000000000000000e+00, -2.366938083376570e+01, -1.295573254715431e-02, 0.000000000000000e+00, -1.284442132666025e-02, -9.811482327703366e-03, 0.000000000000000e+00, -9.744005470749405e-03, -1.117604746240282e-02, 0.000000000000000e+00, -1.112884903564626e-02, -1.214530442261540e-02, 0.000000000000000e+00, -1.161579186243781e-02, -1.163145651844018e-02, 0.000000000000000e+00, -1.158039418078595e-02, -1.163145651844018e-02, 0.000000000000000e+00, -1.108919133825517e-02, -1.388490367199267e-02, 0.000000000000000e+00, -1.384618151065317e-02, -1.883710754755296e-02, 0.000000000000000e+00, -2.577520015500267e-02, -1.541088684733978e-02, 0.000000000000000e+00, -1.900587564096664e-02, -1.308062080975387e-02, 0.000000000000000e+00, -1.290437988379582e-02, -1.401933105514440e-02, 0.000000000000000e+00, -1.381953620003375e-02, -1.401933105514440e-02, 0.000000000000000e+00, -1.663128415139124e-02, -5.401602768172900e-03, 0.000000000000000e+00, -6.399574857978435e-03, -2.582032524291470e-01, 0.000000000000000e+00, -2.545533092186415e-01, -3.879806299948147e-01, 0.000000000000000e+00, -1.494955067872717e-01, -1.063172617208242e-01, 0.000000000000000e+00, -6.159569785687685e-02, -9.681486889733511e-02, 0.000000000000000e+00, -9.715909929957460e-02, -9.681486889733516e-02, 0.000000000000000e+00, -1.899443943790647e-01, -2.462725887281092e-02, 0.000000000000000e+00, -2.439005848350429e-02, -4.222023356467247e+03, 0.000000000000000e+00, -4.107416148017113e+03, -2.906143861413685e+00, 0.000000000000000e+00, -2.970601470440211e+00, -8.237057815026050e-02, 0.000000000000000e+00, -8.286676160102345e-02, -2.988044714962688e+00, 0.000000000000000e+00, -3.282622049234411e+00, -2.988044714962669e+00, 0.000000000000000e+00, -3.282622049234406e+00, -1.150021212652536e+06, 0.000000000000000e+00, -9.970581072484487e+05, -6.326441604398528e+00, 0.000000000000000e+00, -6.298624076505671e+00, -4.808614634467016e+08, 0.000000000000000e+00, -3.757568281831725e+08, -1.962324017812991e+02, 0.000000000000000e+00, -1.787434717957503e+02, -1.925594450488687e+01, 0.000000000000000e+00, -2.454549246769842e+01, -1.925594450488683e+01, 0.000000000000000e+00, -5.049982108946198e+07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m05_2x_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m05_2x", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-5.120257427845395e-04, -5.120984199160426e-04, -5.120345614337744e-04, -5.121049743236832e-04, -5.120587005090587e-04, -5.121417556361523e-04, -5.119607696587031e-04, -5.428839885194455e-04, -5.120314839313682e-04, -5.429284129925735e-04, -5.428995111133134e-04, -5.429284129925735e-04, 1.078477231438257e-03, 9.360596530675116e-04, 1.075401416186578e-03, 1.078994834021964e-03, 1.013159072215966e-03, 1.001515029343730e-03, 1.036243897388906e-03, 1.036144672501646e-03, 1.085461051384003e-03, 9.775432791085093e-04, 9.398871048701813e-04, 9.775432791085093e-04, -1.939907621223200e-02, -1.958810408634026e-02, -1.932373509466458e-02, -2.481553745856520e-02, -2.209935854969953e-02, -2.144006713912920e-02, -2.346685990869384e-02, -1.867606366318107e-02, -1.952415209463137e-02, -1.406618507834652e-02, -2.467598380187653e-02, -1.852386598941000e-02, -2.453060065929361e-02, -5.033854673532485e-02, -2.708338577639272e-02, -5.814892337896298e-02, -6.082302567759203e-03, -6.580624603662618e-03, -6.022468922909763e-02, -5.703246280373565e-02, -3.290054454222178e-02, -4.868641486621534e-02, -3.290054454222101e-02, -2.920851866537963e-02, -6.435771882355829e-05, -7.750163082116434e-05, -4.257851366315847e-05, -9.553845422183313e-05, -3.240391543404321e-03, -7.037647527499650e-03, -1.024945529917901e-05, -9.845585388216213e-06, -4.342522732454112e-05, -1.371174488487479e-05, -4.342522732454112e-05, -1.371174488616724e-05, -7.733012237210289e-03, -7.735502165654498e-03, -7.829576302060848e-03, -7.828937569125860e-03, -7.740010476529421e-03, -7.739867822495732e-03, -7.822822208648111e-03, -7.824698762364395e-03, -7.467811597900305e-03, -7.783174715468097e-03, -7.782415785833352e-03, -7.468512569026680e-03, 1.181906164747210e-03, 1.268134523884933e-03, 1.918334446941609e-03, 1.962376132084664e-03, 3.328423278301092e-04, 6.865380107774209e-04, 1.165567081084045e-03, 1.464535108561532e-03, 2.059182882467232e-03, 1.471977149456530e-03, 2.059182882467232e-03, 1.734934047983809e-03, -6.171798625630835e-02, -5.751102295205239e-02, -1.939654673190303e-02, -2.210133862004401e-02, 4.081095092147146e-03, -2.516116766870866e-02, -6.002637547852890e-02, -6.702593834340231e-02, -5.903310906110976e-02, -5.906545594515972e-02, -5.903310906110975e-02, -6.494953225860302e-02, -5.166842817326062e-02, -5.225330718298186e-02, -2.082404956736976e-02, -2.993096881932450e-02, -4.406746391036553e-02, -5.012422964198620e-02, -1.892333119105868e-02, -1.891316084871585e-02, -6.810275452904915e-02, -7.160431213236852e-02, -6.810275452905136e-02, -7.160431213236379e-02, -1.745072717360555e-06, -3.251693881441595e-06, -8.660672706172466e-06, -7.986057909095431e-06, -2.607301946388828e-05, -3.399049758423185e-05, -2.379593694449273e-02, -1.544386931211153e-02, -5.235887391845649e-06, -4.303715403689859e-05, -5.235887391413396e-06, -4.303715403722800e-05, 3.971593167534208e-01, 3.589211952065325e-01, 2.386958110315304e-01, 2.594740602518921e-01, 4.163660915006694e-01, 4.344031353952049e-01, 5.261690079200930e-01, 5.368532251027899e-01, 4.830039540068906e-01, 4.944601964838743e-01, 4.830039540068906e-01, 5.029828589794001e-01, 5.229895967696444e-01, 5.024624936328044e-01, -3.683952955364023e-02, -3.532542884896369e-02, -7.122148437962711e-02, -6.370024278905828e-02, -2.694493016009407e-02, -2.781005487192412e-02, -3.755234066976450e-02, -3.567120284290255e-02, -3.755234066976450e-02, -3.330308219984143e-02, -2.686232409261372e-02, -1.952478724704040e-02, -2.714763508580677e-02, -2.780221738550398e-02, -4.188464999469769e-02, -5.661456702736922e-02, 3.590707413723746e-03, 4.600092183914918e-03, -4.293995707668660e-02, -4.206202446418900e-02, -4.293995707668645e-02, -3.422520860523531e-02, 6.315064967562462e-03, 1.050235395716762e-03, -3.226146181557923e-03, -3.226137247960175e-03, -1.123013929080760e-02, -1.270912298232588e-02, 1.280061417135657e-02, -2.149968825408766e-02, -4.571182417422522e-02, -5.863191686577808e-02, -4.571182417422427e-02, -5.863191686578769e-02, -5.036929020019405e-05, -5.522394920513636e-05, -1.939810595864552e-07, -1.944553843621135e-07, -2.510910264046695e-06, -3.200285284609184e-06, -2.761674225102294e-02, -3.098184804623338e-02, -1.148270819466070e-05, -3.436204882585548e-05, -1.148270819356713e-05, -1.905361912608018e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
