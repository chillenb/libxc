
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_mn12_sx_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_mn12_sx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-4.674504884666931e+00, -4.674252409930202e+00, -4.673239026930172e+00, -4.676975032661054e+00, -4.675002530015055e+00, -4.675002530015055e+00, -2.462475863958078e+00, -2.462143025797838e+00, -2.453366674974616e+00, -2.457164769632291e+00, -2.456482991947747e+00, -2.944829383499029e+00, -2.408583615688084e-01, -5.265623100592055e-01, -4.915696305057907e-01, -5.076580889775948e-01, -5.042350151519559e-01, -5.042350151519559e-01, -1.915164843787694e-01, -1.986784000329789e-01, 2.551766894161924e-01, -3.444154576974186e-02, -1.026238207439411e-01, -1.026238207439408e-01, 5.215746160124053e-03, 5.472783381156854e-03, 2.483571662156743e-02, 3.095933684765695e-03, 3.852942636373696e-03, 3.852942636373696e-03, -4.762832698587744e+00, -4.741761070377064e+00, -4.761627837452201e+00, -9.248503643668790e-01, -4.752347398290706e+00, -4.752347398290706e+00, -1.386963019821472e+00, -1.391093182732094e+00, -1.381588647175230e+00, -1.388081107044433e+00, -1.390532502166304e+00, -1.545104197091641e+00, -4.540575975849694e-01, -5.249846646571429e-01, -4.255355125068610e-01, -4.352524513504555e-01, -4.653981512921799e-01, -4.387494608026896e-01, 2.649384318116695e-01, -1.216569923926804e-01, 2.576708322303691e-01, -1.756715159868623e+00, 1.160122008132845e-03, 1.160122008132254e-03, 1.353171821213007e-02, 3.028942521489018e-03, 2.342502795117205e-03, 2.081346750288350e-01, 1.575210510215064e-02, 2.802159339017570e-03, -3.792041069459133e-01, -4.145334286926898e-01, -3.332010712667214e-01, -3.906145394562360e-01, -3.959572029633265e-01, -3.959572029633265e-01, -3.804428941175385e-01, -3.810946003756528e-01, -3.940034961385104e-01, -4.196671795415194e-01, -4.071478080484983e-01, -4.055603997772519e-01, -5.524551681432153e-01, 9.422998100841312e-02, -2.849859694621382e-01, -2.044505571320082e-01, -3.119083581993058e-01, -3.119083581993058e-01, -3.061968014378005e-01, 2.391686201046579e-02, 3.107705341286916e-02, -2.823553952625225e-01, 2.303490370658263e-01, 3.831474413503623e-02, 7.150654667742006e-03, 8.343170184604724e-04, 1.730788105520257e-03, 3.848979667226043e-02, 2.600743149528707e-03, 2.600743149528634e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_mn12_sx_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_mn12_sx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([8.199501239859265e+00, 8.200195474434498e+00, 8.203023964179193e+00, 8.192748391025498e+00, 8.198166365772627e+00, 8.198166365772627e+00, -1.194256583874003e+00, -1.193008000367364e+00, -1.160546585166328e+00, -1.173566729902445e+00, -1.172156974985919e+00, -4.191939772710759e+00, -1.284138607902994e+00, -8.049648424886185e-01, -8.941121141563504e-01, -8.497539296250142e-01, -8.602481942157889e-01, -8.602481942157889e-01, -3.452129264600132e-01, -3.307922383196288e-01, -1.821610548947325e+00, -2.696948643716985e-01, -3.780229805632463e-01, -3.780229805632461e-01, 6.963427419158306e-03, 7.319163000210650e-03, 4.431869846988745e-02, 4.105860667486694e-03, 5.121020118583655e-03, 5.121020118583655e-03, 1.740179708434269e+00, 1.860093777237781e+00, 1.747055157877361e+00, 3.542736523053005e+00, 1.800157472983829e+00, 1.800157472983829e+00, -1.697200851038469e+00, -1.551344638867242e+00, -1.820886832429627e+00, -1.680156781851478e+00, -1.559041138648133e+00, -2.278114512249148e+00, -6.384304388715640e-01, -7.135070451957400e-01, -4.293691055458262e-01, -6.069827233139161e-01, -6.882340436501372e-01, -6.611658078463204e-01, 2.229455183377226e-01, -4.310348030927680e-01, 2.330321640148861e-01, -2.565762201812401e+00, -1.517115391758581e-01, -1.517115391758584e-01, 1.797588399807526e-02, 4.015657828402825e-03, 3.123904540521469e-03, 2.299039822790894e-01, 2.090573250159555e-02, 3.727587587029349e-03, -2.858839386683342e-01, -3.547176111264299e-01, -2.457767782392716e-01, -3.055325559046254e-01, -3.149470653249324e-01, -3.149470653249324e-01, -3.193611475593403e-01, -4.100556240772101e-01, -5.669859603496169e-01, -5.871108563175710e-01, -6.063472956493106e-01, -5.355833904050139e-01, -8.186380962963704e-01, -3.776756886474808e-01, -3.404201126998931e-01, -5.207580861702156e-01, -2.055228806602958e-01, -2.055228806602948e-01, -5.723060095795545e-01, 4.200205319082200e-02, 6.038375424643552e-02, -1.582458473141165e-01, 2.146423090482959e-01, 4.086997695951183e-02, 9.551669625999527e-03, 1.109663613102150e-03, 2.300627492929884e-03, 4.878359204476270e-02, 3.462743898166096e-03, 3.462743898166467e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_mn12_sx_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_mn12_sx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.195692574344183e-07, -1.195726270534633e-07, -1.195853160755448e-07, -1.195355454118855e-07, -1.195619436515236e-07, -1.195619436515236e-07, -4.553725657781249e-06, -4.566764123833553e-06, -4.913867789814180e-06, -4.771199337075565e-06, -4.788206911242444e-06, -7.130894918809373e-06, -1.810927873699859e-02, -2.182834432796647e-03, -1.844569268852126e-03, -2.065547527556206e-03, -2.014351559767661e-03, -2.014351559767661e-03, -1.047872812267607e+00, -1.122673844293152e+00, -2.223851197832936e-02, -1.576525398460628e-01, -2.770493390176681e-01, -2.770493390176699e-01, -3.147544664233241e+01, -3.276047838274791e+01, -1.253919335216685e+01, -2.322827223540100e+01, -3.227100753206025e+01, -3.227100753206025e+01, -3.831522785903959e-05, -3.861565482492452e-05, -3.833267435612835e-05, -4.377395182510180e-05, -3.846538742389773e-05, -3.846538742389773e-05, 1.331181006731873e-05, 7.896917331384568e-06, 1.621268584074915e-05, 1.278022716425865e-05, 8.255669117335141e-06, -2.345671896043860e-05, -3.868625583939026e-03, -1.166154946442642e-02, -8.722202714687328e-03, -3.312399512494104e-03, -3.628509948752099e-03, -4.930194699501769e-03, -3.952437882186639e+02, -1.291224421177556e-01, -5.544564642918200e+02, -4.234872996277197e-04, -7.469541939327571e-01, -7.469541939327827e-01, -6.930428915200286e+08, -2.053870661972915e+01, -1.656884033780258e+02, -2.986930104590637e+03, -3.730875594930822e+08, -6.363608623492550e+01, -1.307291829790097e-01, -6.929686029611579e-02, -9.575914805681007e-02, -1.044765209547784e-01, -9.527573396173745e-02, -9.527573396173745e-02, -1.262892408182981e-01, -8.205031115654746e-03, 2.716707327528798e-03, -2.744649044288726e-03, 3.570113517614847e-03, -1.604086616719607e-03, -7.994597549681572e-03, -5.358126282164061e+00, -2.686506183923713e-01, -1.877919953819521e-01, -2.118407980793910e-01, -2.118407980793909e-01, -2.227068133069098e-02, -1.298272018467500e+01, -9.565799254008533e+00, -8.514907011354274e-02, -1.051945138012503e+03, -5.664729559900824e+00, -1.500691924282516e+01, -2.517099969466478e+01, -7.211450481633450e+01, -6.965980478219691e+00, -9.067306431340147e+01, -9.067306431400975e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_mn12_sx_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_mn12_sx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-8.295081210435689e-03, -8.295496898543257e-03, -8.297163356775251e-03, -8.291014203548382e-03, -8.294260020165374e-03, -8.294260020165374e-03, -1.619571325613943e-02, -1.620540734320996e-02, -1.645839046416912e-02, -1.635616752091512e-02, -1.636780377391625e-02, 8.863115313972665e-03, 8.931314815787310e-02, 3.188099357622916e-02, 3.908281056887134e-02, 3.617624178849920e-02, 3.688232813639479e-02, 3.688232813639479e-02, 2.347795852040333e-01, 2.319319548419115e-01, 8.827183938338165e-02, 1.492725290965819e-01, 2.077302142936215e-01, 2.077302142936214e-01, 5.866476114249599e-05, 7.120054693508588e-05, 5.223883455963611e-03, 8.371081085103406e-06, 2.304364662995723e-05, 2.304364662995723e-05, 2.121568790962447e-02, 2.016351060057278e-02, 2.115580974359192e-02, -6.495152786369134e-02, 2.069160267458743e-02, 2.069160267458743e-02, -4.272181625615682e-03, -7.268027694340823e-03, -1.793623259063857e-03, -4.628896515655689e-03, -7.100340847484973e-03, 7.966077511427081e-03, 2.763821618232235e-02, 5.002756938166076e-02, -9.606293330519110e-03, 2.042756310066504e-02, 4.040190034214157e-02, 4.757577216427774e-02, 5.981633509520353e-02, 1.739305376635280e-01, 5.049883687029279e-02, 8.410672283160218e-02, 1.310087062313286e-01, 1.310087062313275e-01, 2.306272214221292e-06, 6.915443653917020e-06, 2.508599784957296e-05, 2.153156694311454e-02, 1.452042732976443e-05, 1.679404557941908e-05, 2.351780871770128e-01, -4.953000264124285e-02, -2.770345295097924e-01, 7.585622428756880e-02, 3.289888965644016e-02, 3.289888965644016e-02, 2.258780578574819e-01, -2.255623919643427e-02, 1.382680791693098e-03, -1.267111326506220e-02, 5.540115553242602e-03, 1.001163567407399e-02, 7.960505710390592e-02, 2.550786925655541e-01, 1.200456419880458e-01, 1.449746983567714e-01, 4.242274502427483e-02, 4.242274502427468e-02, 7.851342524248761e-02, 4.673396395868788e-03, 1.000462294735803e-02, -9.673596007682643e-02, 5.492264876321468e-02, 5.736029177203866e-02, 7.804655447959264e-05, 1.633460323774481e-07, 4.314231787834600e-06, 5.279504414039870e-02, 1.898106317306040e-05, 1.898106317320331e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
