
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_mn12_sx_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_mn12_sx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.110822802708493e+01, -2.110820311052949e+01, -2.110868286136358e+01, -2.110906445578460e+01, -2.110878075347087e+01, -2.110878075347087e+01, -2.664766706551979e+00, -2.664660057533343e+00, -2.662057038546612e+00, -2.664959865591737e+00, -2.663680639707351e+00, -2.663680639707351e+00, -3.993202216608568e-01, -3.983129169742436e-01, -3.766305448006392e-01, -4.031669248342608e-01, -3.956828373753538e-01, -3.956828373753538e-01, -1.874474816609364e-01, -1.932006087059161e-01, -7.064074947581893e-02, -3.364664508242211e-02, -9.986688371678232e-02, -9.986688371678205e-02, 5.216422879846363e-03, 5.474263808040590e-03, 2.586624776863774e-02, 3.097561988226584e-03, 3.855186151907803e-03, 3.855186151907811e-03, -4.739791746208388e+00, -4.718810849360183e+00, -4.739056338498156e+00, -4.720531517529778e+00, -4.729112441724346e+00, -4.729112441724346e+00, -1.516332153015346e+00, -1.534709601008081e+00, -1.505557439101784e+00, -1.522364761405737e+00, -1.531285007591989e+00, -1.531285007591989e+00, -4.445266530091458e-01, -4.909519514449660e-01, -3.985518901644712e-01, -4.179089174373326e-01, -4.565745070589398e-01, -4.565745070589398e-01, 4.299126846559888e-02, -1.206344366614431e-01, 4.606367021896566e-02, -1.205256797934183e+00, 2.392464085900151e-03, 2.392464085899781e-03, 2.413383306222868e-03, 3.032400765046887e-03, 2.344601264837399e-03, 4.155818854330710e-02, 2.806297937366911e-03, 2.806297937366964e-03, -3.523757488062157e-01, -4.009236448933760e-01, -3.841004808523354e-01, -3.695031652853795e-01, -3.768193202239310e-01, -3.768193202239310e-01, -3.349963272891346e-01, -3.800621293649318e-01, -3.943546960504744e-01, -4.187390516968816e-01, -4.077323170817252e-01, -4.077323170817252e-01, -5.133527790898864e-01, -2.154098360797491e-01, -2.737631718907435e-01, -2.913098610297311e-01, -2.918023343598511e-01, -2.918023343598512e-01, -3.566809404548666e-01, 2.436477760813365e-02, 3.332948314939094e-02, -2.664452752716449e-01, 4.220040041184875e-02, 4.220040041184916e-02, 7.199041854787982e-03, 8.347124717565296e-04, 1.731038995654587e-03, 4.089901037235179e-02, 2.603532515074875e-03, 2.603532515074876e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_mn12_sx_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_mn12_sx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-7.473893723971378e+00, -7.472450176007551e+00, -7.467259469184422e+00, -7.488644903455542e+00, -7.477268646782192e+00, -7.477268646782192e+00, -2.576725757680807e+00, -2.576167438160182e+00, -2.562569196866583e+00, -2.575769287311748e+00, -2.570944051161354e+00, -2.570944051161354e+00, -7.542656534420491e-01, -7.531626999370545e-01, -7.247896352209673e-01, -7.154463756823398e-01, -7.195220771988249e-01, -7.195220771988249e-01, -3.232755577374826e-01, -3.041666575378958e-01, -9.773738701660474e-01, -2.732057248901599e-01, -3.469369180531995e-01, -3.469369180531995e-01, 6.966114179045651e-03, 7.325034600647107e-03, 4.763282082488583e-02, 4.112359882583331e-03, 5.129958114689893e-03, 5.129958114689690e-03, 1.754821823260558e+00, 1.874392350520500e+00, 1.761383344125762e+00, 1.866879538623773e+00, 1.814777520350300e+00, 1.814777520350300e+00, -2.149153103695780e+00, -2.152956980266002e+00, -2.182062178374235e+00, -2.181492246485999e+00, -2.136010291989907e+00, -2.136010291989907e+00, -6.441195309197315e-01, -5.807115881729491e-01, -5.085516737423389e-01, -6.385667937666865e-01, -6.772986835307854e-01, -6.772986835307854e-01, 9.473528481012355e-03, -4.177015681410530e-01, 3.627160871693057e-02, -1.325769104145024e+00, -1.618524574465689e-01, -1.618524574465706e-01, 3.206921783882356e-03, 4.029462027862644e-03, 3.132269988090237e-03, 7.872495613921453e-02, 3.744089599509711e-03, 3.744089599509647e-03, -2.755278751256610e-01, -3.294901983760685e-01, -3.026786343501065e-01, -2.868926854751545e-01, -2.940226574635555e-01, -2.940226574635555e-01, -2.916739295671644e-01, -4.153245016122261e-01, -5.667592781782159e-01, -5.631394786345685e-01, -5.966728814404403e-01, -5.966728814404402e-01, -6.875436825739228e-01, -4.287574465412120e-01, -3.038327606100115e-01, -2.174428030874246e-01, -1.933820016318993e-01, -1.933820016318986e-01, -3.264497156554685e-01, 4.347930327469084e-02, 6.648108768223233e-02, -2.372613143886821e-01, 3.860069467879802e-02, 3.860069467879899e-02, 9.742945336537995e-03, 1.111245063258538e-03, 2.301629942429990e-03, 4.872115675958429e-02, 3.473866272072701e-03, 3.473866272072562e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_mn12_sx_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_mn12_sx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.019667789301926e-07, -1.019700228930942e-07, -1.019816846979890e-07, -1.019337365028382e-07, -1.019592467793229e-07, -1.019592467793229e-07, -1.057274463144516e-05, -1.058285610765632e-05, -1.085177124359456e-05, -1.074162238537915e-05, -1.075646837306961e-05, -1.075646837306961e-05, -1.182377227973870e-02, -1.187799381508826e-02, -1.246118416319088e-02, -1.141891271539932e-02, -1.175755384265523e-02, -1.175755384265523e-02, -1.249876567872069e+00, -1.373774210414424e+00, -1.133991746748796e-02, -8.241613463330914e-02, -5.812475100749762e-01, -5.812475100749651e-01, -3.200357808817398e+01, -3.377480551829913e+01, -1.521248930224603e+01, -2.921833680456301e+01, -3.705754687983212e+01, -3.705754687992051e+01, -3.834885390396313e-05, -3.864909466614037e-05, -3.836561274672171e-05, -3.863048381912805e-05, -3.849926904010919e-05, -3.849926904010919e-05, -3.116316755973888e-05, -3.467261483727136e-05, -2.584000225148001e-05, -2.848719692269624e-05, -3.588147173731954e-05, -3.588147173731954e-05, -7.031113576713598e-03, -1.635753151894207e-02, -1.483644092649359e-02, -6.620152602902632e-03, -6.638520697572089e-03, -6.638520697572089e-03, -2.329191613846879e+00, -1.882110532769188e-01, -3.263021570575751e+00, -5.276609112143637e-04, -5.222757474137787e-01, -5.222757474138281e-01, -3.851643829789138e+01, -3.438332323585737e+01, -2.155067197890462e+02, -1.053262347094862e+01, -1.003301777974929e+02, -1.003301777970362e+02, -1.337595567876571e-01, -7.141777354701079e-02, -8.926152870362260e-02, -1.071351760977612e-01, -9.779991829231133e-02, -9.779991829231133e-02, -1.324633720934323e-01, -9.418802417482894e-03, 1.334246027257966e-03, -4.918073011475209e-03, 1.834726153981179e-03, 1.834726153981163e-03, -1.168065918376539e-02, -3.099352966113150e-01, -3.473785749190731e-01, -1.646582228593367e-01, -2.835454237044104e-01, -2.835454237044103e-01, -3.102522521375665e-02, -1.430108342240103e+01, -1.182315256499886e+01, -1.285949464656732e-01, -5.931333616575268e+00, -5.931333616575616e+00, -2.565659046885568e+01, -1.688953990936505e+02, -8.170779283005955e+01, -7.304506670377847e+00, -1.267251972196725e+02, -1.267251972192181e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_mn12_sx_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_mn12_sx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_mn12_sx_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_mn12_sx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.148805689149427e-02, 1.148790518895376e-02, 1.148790491229457e-02, 1.149017215130716e-02, 1.148888961496058e-02, 1.148888961496058e-02, -2.981951831334058e-03, -2.981791556100153e-03, -2.966755196454427e-03, -2.899958528595783e-03, -2.937950443315412e-03, -2.937950443315412e-03, 5.420311145475778e-02, 5.441161146801855e-02, 5.757667278227562e-02, 5.423385670377317e-02, 5.527174303063423e-02, 5.527174303063423e-02, 2.344253811648851e-01, 2.319659500876193e-01, 6.231225856898599e-02, 1.464860517700999e-01, 2.034100220426582e-01, 2.034100220426581e-01, 5.866553599447752e-05, 7.120250549360890e-05, 5.245005709786064e-03, 8.371533854415344e-06, 2.304502154730500e-05, 2.304502154730500e-05, 2.070602561040649e-02, 1.965499509200793e-02, 2.065648189383595e-02, 1.972895713145439e-02, 2.017721403120163e-02, 2.017721403120163e-02, 6.769812960213023e-03, 7.191556702467526e-03, 6.792513836332414e-03, 6.998093614017986e-03, 7.031430117712743e-03, 7.031430117712743e-03, 4.406519703835167e-02, -1.573608264310272e-02, 2.577806642586720e-02, 5.180192640256556e-02, 5.141175543640406e-02, 5.141175543640406e-02, 6.018243425412454e-02, 1.728981521406566e-01, 5.158237241950041e-02, 7.305258486186128e-03, 1.304943411673955e-01, 1.304943411673946e-01, 2.669871004169757e-06, 6.916255747090952e-06, 2.508832095414180e-05, 2.308332263170809e-02, 1.679660171436821e-05, 1.679660171424906e-05, 1.241949540055249e-01, -1.051817131077309e-01, -7.132043561570384e-02, -1.107002578473808e-02, -4.576738355139987e-02, -4.576738355139987e-02, 2.197189301739905e-02, -1.677042288829388e-02, 8.531271871859531e-03, -1.973841756444019e-02, 9.814912956644061e-03, 9.814912956643738e-03, 3.196250110173484e-02, 1.667949129736060e-01, 1.246086402361089e-01, 2.605307958180341e-02, 6.140328736982251e-02, 6.140328736982224e-02, -5.417288077971480e-03, 4.681952714801469e-03, 1.007531040159371e-02, -1.447595802428413e-02, 5.775918185572478e-02, 5.775918185572678e-02, 7.809962886824841e-05, 1.633540924049363e-07, 4.314296598418236e-06, 5.305345400687540e-02, 1.898316395884487e-05, 1.898316395898782e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
