
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_m06_2x_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06_2x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-8.314623921083376e+00, -8.314574291644064e+00, -8.314388668597426e+00, -8.315194406632127e+00, -8.314597527293202e+00, -8.314597527293202e+00, -1.682183530852084e+00, -1.682172720508045e+00, -1.681920427725815e+00, -1.682812024198613e+00, -1.682184336408692e+00, -1.682184336408692e+00, -3.571602325210035e-01, -3.579707285381118e-01, -3.813875102603224e-01, -3.739230023969616e-01, -3.574391895447619e-01, -3.574391895447619e-01, -1.186580265915820e-01, -1.168942341655801e-01, -4.798846918240149e-01, -1.229628435442465e-01, -1.181501414971207e-01, -1.181501414971207e-01, -2.799981373745239e-02, -2.927328503712442e-02, -9.787165862789224e-02, -1.366550131609196e-02, -2.896754833579189e-02, -2.896754833579221e-02, -1.797333436224059e+00, -1.794238061590826e+00, -1.796990766074820e+00, -1.794585504802262e+00, -1.795764212509285e+00, -1.795764212509285e+00, -1.008448977621335e+00, -1.017070700147372e+00, -1.007431258806273e+00, -1.014186247805642e+00, -1.015652888251466e+00, -1.015652888251466e+00, -2.594609518102515e-01, -2.371713726714612e-01, -2.610691013291431e-01, -2.389571917278767e-01, -2.561554079310967e-01, -2.561554079310967e-01, -1.264481543841640e-01, -1.476670384123960e-01, -1.211523768888775e-01, -7.812955658373640e-01, -1.130545322385528e-01, -1.130545322385528e-01, -1.317847565170079e-02, -1.505083261156106e-02, -1.127681154751055e-02, -1.181709511664711e-01, -1.371709840110014e-02, -1.371709840110013e-02, -1.823228032726845e-01, -2.080263762252677e-01, -2.057984470152762e-01, -1.982478163857110e-01, -2.027257780187224e-01, -2.027257780187224e-01, -1.910246642361402e-01, -2.376999651719588e-01, -2.220979647689565e-01, -2.027445778914447e-01, -2.150749861495189e-01, -2.150749861495189e-01, -2.601033149220356e-01, -1.608951914744967e-01, -1.579212796445051e-01, -1.754045425539931e-01, -1.599332202501702e-01, -1.599332202501702e-01, -2.269162271661838e-01, -9.413744555047036e-02, -1.120940209706939e-01, -1.629523381865075e-01, -1.115727902972097e-01, -1.115727902972096e-01, -3.288129494529245e-02, -4.135431835333482e-03, -7.846453109981012e-03, -1.064955431662563e-01, -1.166370683959113e-02, -1.166370683959105e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_m06_2x_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06_2x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-6.329103882554366e+00, -6.328930484631131e+00, -6.328165535922359e+00, -6.330984236447073e+00, -6.329012635486317e+00, -6.329012635486317e+00, -1.979852842118779e+00, -1.979359495057870e+00, -1.964372412686576e+00, -1.969841054419422e+00, -1.979728762336668e+00, -1.979728762336668e+00, -1.596263825916643e-01, -1.580019865105244e-01, -1.449355187369752e-01, -1.386145368740884e-01, -1.590445592686066e-01, -1.590445592686066e-01, -3.650300827830516e-02, -3.462310420241015e-02, -3.333722518301756e-01, -6.119522096586587e-02, -3.579916220116949e-02, -3.579916220116949e-02, -3.632748245044791e-02, -3.788114367600864e-02, -9.383873413242096e-02, -1.814804627888842e-02, -3.748453190305374e-02, -3.748453190305263e-02, -1.587729076323665e+00, -1.606884951492642e+00, -1.589805382919588e+00, -1.604689116465583e+00, -1.597265638459869e+00, -1.597265638459869e+00, -1.209858945951326e+00, -1.221500069503550e+00, -1.200281668802396e+00, -1.215667400133291e+00, -1.222020358664871e+00, -1.222020358664871e+00, -2.018723458031338e-01, -2.034248881816640e-01, -2.396013887268863e-01, -2.196741303331136e-01, -2.232466188642349e-01, -2.232466188642349e-01, -4.167356196486539e-02, -1.173558345075996e-01, -3.884648035929234e-02, -7.577561194350158e-01, -4.995267810389405e-02, -4.995267810389405e-02, -1.749411701032676e-02, -1.996078848196148e-02, -1.494950076639678e-02, -8.634770288850205e-02, -1.819763596964252e-02, -1.819763596964228e-02, -1.710650519742391e-01, -2.820536650264521e-01, -2.236060216564262e-01, -1.770252948231226e-01, -1.986948574382510e-01, -1.986948574382510e-01, -1.728423252193066e-01, -1.686630375354264e-01, -1.947452904959468e-01, -1.464941606461300e-01, -1.822159136089204e-01, -1.822159136089204e-01, -2.552547074999595e-01, -6.181321309476696e-02, -6.251691267308369e-02, -2.188767678863137e-01, -1.596566028481553e-01, -1.596566028481551e-01, -2.326620098008945e-01, -9.621015687191316e-02, -9.141780322533109e-02, -1.789251664767010e-01, -4.212637395908383e-02, -4.212637395907694e-02, -4.275410935679355e-02, -5.511458390402741e-03, -1.044058376621729e-02, -4.011771601546594e-02, -1.548441945951716e-02, -1.548441945951706e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m06_2x_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06_2x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.799379448987969e-09, -2.799342570259847e-09, -2.799145117440300e-09, -2.799747582215027e-09, -2.799360302003001e-09, -2.799360302003001e-09, -4.608824183699878e-06, -4.608938717285657e-06, -4.611257287515629e-06, -4.603628537106240e-06, -4.608802366972083e-06, -4.608802366972083e-06, -3.104223970833467e-03, -3.112112315988028e-03, -3.280653669790472e-03, -3.118909553903893e-03, -3.107034926599123e-03, -3.107034926599123e-03, -3.521702573426786e-01, -3.430063199072386e-01, -1.909008158260070e-03, -6.549162518927205e-01, -3.497545973560411e-01, -3.497545973560411e-01, -8.437576860425338e+00, -8.446460754062945e+00, -2.975925874716070e+00, -6.067907496127230e+00, -8.774213419563274e+00, -8.774213419563370e+00, -7.427108883836227e-07, -7.415945960825407e-07, -7.425819584400769e-07, -7.417147041404339e-07, -7.421518300795996e-07, -7.421518300795996e-07, -3.500662104467806e-05, -3.449254309760519e-05, -3.488085244801171e-05, -3.448654915384903e-05, -3.480985298406790e-05, -3.480985298406790e-05, -5.709565428100140e-03, -4.096906389552765e-03, -7.354241759202432e-03, -6.354211733118672e-03, -4.804789945943230e-03, -4.804789945943230e-03, -9.964191985541084e-01, -2.394518075208093e-01, -1.111521164977850e+00, -5.181491259070094e-05, -8.516245364825575e-01, -8.516245364825575e-01, -6.434831643337223e+00, -6.444721385571597e+00, -1.843921409850632e+01, -2.577525537785102e+00, -9.521625615061692e+00, -9.521625615061676e+00, -4.256036192175295e-03, -4.807350465612511e-03, -4.772929345443632e-03, -4.610758846004608e-03, -4.708289955037193e-03, -4.708289955037193e-03, -5.281301999330288e-03, -9.177609260832805e-03, -7.815875119674083e-03, -6.533741343926159e-03, -7.260904529358000e-03, -7.260904529358001e-03, -3.525542250116986e-03, -1.245579720754032e-01, -7.395538963698833e-02, -3.807696502115448e-02, -5.241795414705606e-02, -5.241795414705609e-02, -1.429030203886216e-02, -2.600227850454760e+00, -2.318037695093530e+00, -5.314838652413374e-02, -1.832786768407836e+00, -1.832786768407836e+00, -6.354666438954022e+00, -1.111882650511680e+01, -9.563529819455985e+00, -2.252359706280516e+00, -1.391164370131667e+01, -1.391164370131657e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m06_2x_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06_2x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m06_2x_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06_2x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-2.140894072896755e-03, -2.141021719854102e-03, -2.141578779651737e-03, -2.139502663808479e-03, -2.140961313965068e-03, -2.140961313965068e-03, 1.875196533483583e-04, 1.836758920888635e-04, 6.616663102601652e-05, 1.121352565422620e-04, 1.864517125927188e-04, 1.864517125927188e-04, -2.106231246698388e-02, -2.115983125918814e-02, -2.105001836672531e-02, -2.207370644559564e-02, -2.109776850680695e-02, -2.109776850680695e-02, -8.072186886393445e-02, -8.323073374157795e-02, -9.032672226954580e-03, -3.528288965389317e-02, -8.157746239647351e-02, -8.157746239647351e-02, -9.584940022121754e-04, -1.091200348925608e-03, -2.088298822379664e-02, -3.809050023790213e-05, -1.105975056374250e-03, -1.105975056374863e-03, -9.008784659709621e-03, -8.760585078840300e-03, -8.981960235237311e-03, -8.789124043842831e-03, -8.885755003591891e-03, -8.885755003591891e-03, 3.233573488983203e-03, 3.308040218385597e-03, 3.119328257381491e-03, 3.299921906513705e-03, 3.271960844782787e-03, 3.271960844782787e-03, -4.429090534667900e-02, -6.774798449132832e-02, -2.438277370232228e-02, -4.154061740336519e-02, -3.974457700413629e-02, -3.974457700413629e-02, -5.735636628212420e-02, -1.390543324087170e-02, -5.959916272320585e-02, -1.187543180568978e-02, -4.829663324362547e-02, -4.829663324362547e-02, -5.212487257436207e-05, -6.436058517670841e-05, -1.064754713505454e-04, -3.351197561652978e-02, -5.999968964169421e-05, -5.999968964054623e-05, -3.137710157945112e-01, 3.003898727029830e-02, -1.234951932684435e-01, -2.754245398993113e-01, -2.002954800546414e-01, -2.002954800546414e-01, -2.849601754572936e-01, -4.973406413906840e-02, -4.498449808054671e-02, -1.037234544296040e-01, -6.179531471298513e-02, -6.179531471298513e-02, -3.887390860836935e-02, -5.286857645600734e-02, -5.328734255183662e-02, 1.796744680175508e-02, -2.128005532052838e-03, -2.128005532052908e-03, -7.810157204206732e-03, -1.625542471016176e-02, -3.009146678080333e-02, -4.542316735972104e-03, -6.441285926501909e-02, -6.441285926502249e-02, -6.038026035783950e-04, -1.465540095982392e-06, -1.972606028104973e-05, -6.728401751478609e-02, -5.179793062173978e-05, -5.179793062149990e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
