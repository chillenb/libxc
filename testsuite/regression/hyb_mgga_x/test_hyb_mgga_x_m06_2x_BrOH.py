
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_m06_2x_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06_2x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-7.868577586416071e+00, -7.868540756499478e+00, -7.868395654948960e+00, -7.868992450748717e+00, -7.868558077065196e+00, -7.868558077065196e+00, -1.562865900609012e+00, -1.562872349140684e+00, -1.563091001485492e+00, -1.563138414506751e+00, -1.562875131438233e+00, -1.804569706631878e+00, -3.164058899309447e-01, -4.044504085638740e-01, -4.261508071165154e-01, -4.146378769805056e-01, -4.039243489590275e-01, -4.039243489590275e-01, -1.208531821266995e-01, -1.193422930806076e-01, -4.377896788110391e-01, -1.290863807534273e-01, -1.204493695479901e-01, -1.204493695479901e-01, -2.800123229145793e-02, -2.927534095705535e-02, -9.824649979090751e-02, -1.366755821994025e-02, -2.896931062957502e-02, -2.896931062957533e-02, -1.797786616542611e+00, -1.794685562715653e+00, -1.797437599335516e+00, -1.722595691834296e+00, -1.796222227877438e+00, -1.796222227877438e+00, -8.653380331438213e-01, -8.749597753180172e-01, -8.613500051004933e-01, -8.688787671198160e-01, -8.770775906873138e-01, -1.031709825358317e+00, -2.693605399657736e-01, -2.472273342492027e-01, -2.762122992929111e-01, -2.541664376789463e-01, -2.638965163893376e-01, -2.421606225161107e-01, -7.866868429946641e-02, -1.495087683320834e-01, -7.576401314251155e-02, -8.351536774392488e-01, -1.151759939352626e-01, -1.151759939352626e-01, -7.308586985271108e-03, -1.505309518615859e-02, -1.127756393392067e-02, -6.946407198459623e-02, -7.608444407083494e-03, -1.371973827647035e-02, -1.833019267232386e-01, -2.090821955476840e-01, -2.033630367930201e-01, -1.992910816501192e-01, -2.037848791935616e-01, -2.037848791935616e-01, -1.930887213186661e-01, -2.389321397269916e-01, -2.236625709481003e-01, -2.045070795984286e-01, -2.168570989944905e-01, -2.031231484699875e-01, -2.738497238182997e-01, -1.221373300750026e-01, -1.611508306304397e-01, -1.556538314403823e-01, -1.645644180571994e-01, -1.645644180571994e-01, -2.036020037330995e-01, -9.430632737813770e-02, -1.128385846043313e-01, -1.713108112913427e-01, -6.827826856109864e-02, -1.131082558342189e-01, -3.291051803852801e-02, -4.135530421814953e-03, -7.846586252335716e-03, -1.080783344814897e-01, -1.166574850485291e-02, -1.166574850485283e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_m06_2x_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06_2x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-7.035854862573862e+00, -7.035671713176591e+00, -7.034885821277459e+00, -7.037864055812810e+00, -7.035758279747988e+00, -7.035758279747988e+00, -2.106962817512171e+00, -2.106492168833619e+00, -2.092232622919744e+00, -2.097962348169883e+00, -2.106842229568369e+00, -1.912112635461001e+00, -2.222652857938247e-01, -1.292522958306798e-01, -1.261000044942995e-01, -1.190725861970265e-01, -1.301765687528251e-01, -1.301765687528251e-01, -3.645894155330513e-02, -3.436499968573704e-02, -3.942885712266896e-01, -7.065532024829323e-02, -3.569096529904287e-02, -3.569096529904287e-02, -3.633307262100664e-02, -3.788923406806803e-02, -9.510119457300735e-02, -1.815625540530438e-02, -3.749146675573758e-02, -3.749146675573647e-02, -1.587093997837991e+00, -1.606262064885632e+00, -1.589179663232870e+00, -1.715010493271635e+00, -1.596625928963585e+00, -1.596625928963585e+00, -1.298276605300215e+00, -1.310977569803303e+00, -1.289043757237977e+00, -1.304411059601235e+00, -1.311693071133216e+00, -1.221019231423840e+00, -1.903208542343851e-01, -1.883243085569459e-01, -2.256651477224099e-01, -2.002107399234979e-01, -2.141853764765225e-01, -2.437943349664178e-01, -4.531500342378526e-02, -1.195523579478272e-01, -4.358530397916605e-02, -6.878113996645391e-01, -5.361070283364149e-02, -5.361070283364149e-02, -9.711159626001277e-03, -1.996981175919484e-02, -1.495250075831956e-02, -6.052147699871519e-02, -1.010626521741407e-02, -1.820816556591111e-02, -1.694377184039824e-01, -2.808406209294561e-01, -2.272818592951519e-01, -1.752806650474927e-01, -1.970301163955282e-01, -1.970301163955282e-01, -1.693467019228668e-01, -1.674292350956357e-01, -1.930103588400619e-01, -1.438317666769478e-01, -1.799656645517533e-01, -1.999876326465068e-01, -2.370024599445055e-01, -9.441420097649181e-02, -6.175574727052272e-02, -2.335928007331309e-01, -1.593804424363343e-01, -1.593804424363341e-01, -2.565960861310450e-01, -9.679767863308027e-02, -9.373707654335807e-02, -1.742927635399170e-01, -4.071077972452960e-02, -4.552036789933663e-02, -4.286936760520316e-02, -5.511852636413654e-03, -1.044111573557956e-02, -4.361189701674348e-02, -1.549256618827589e-02, -1.549256618827579e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m06_2x_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06_2x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-3.240177740082098e-09, -3.240123249612164e-09, -3.239859116727648e-09, -3.240749441564909e-09, -3.240149210003902e-09, -3.240149210003902e-09, -5.626673128152532e-06, -5.626637301027199e-06, -5.624643944854504e-06, -5.623643875901683e-06, -5.626556149976805e-06, -3.670216874776944e-06, -4.401547747788917e-03, -1.904482218450559e-03, -2.021021466931120e-03, -2.003347978510098e-03, -1.901705513613207e-03, -1.901705513613207e-03, -3.207922372859455e-01, -3.095761523754555e-01, -2.462871270201491e-03, -3.994051537964136e-01, -3.173359413590112e-01, -3.173359413590112e-01, -8.105055556689303e+00, -8.027651942494419e+00, -2.278930773885361e+00, -2.923334809617845e+00, -8.395998781951844e+00, -8.395998781951933e+00, -7.421987443035581e-07, -7.410891134555670e-07, -7.420770129062411e-07, -8.252801156547319e-07, -7.416343482995489e-07, -7.416343482995489e-07, -5.548548248496100e-05, -5.416710361130794e-05, -5.602307545525289e-05, -5.497994693811518e-05, -5.391935770807114e-05, -3.286483213507409e-05, -5.097968631041313e-03, -3.659443476474751e-03, -6.163376703046407e-03, -5.329096228553229e-03, -4.401942793314736e-03, -5.577838387661951e-03, -1.665592632321632e+01, -2.194885444762675e-01, -1.710968636748368e+01, -4.297601091960968e-05, -6.797625810997784e-01, -6.797625810997784e-01, -5.751699197115458e+06, -3.685688486901678e+00, -1.447992735778517e+01, -1.576040293297813e+02, -4.890760738664629e+06, -4.542596127204495e+00, -4.198703094524877e-03, -4.744676931926939e-03, -4.918357194243487e-03, -4.549365101257790e-03, -4.645846778600670e-03, -4.645846778600670e-03, -5.139202920353720e-03, -9.026962852571667e-03, -7.654781325661364e-03, -6.378413377704784e-03, -7.090930365597149e-03, -8.452869553209235e-03, -3.057929384823699e-03, -3.399498102027677e-01, -6.746153553339515e-02, -5.368516464562170e-02, -4.685904025809708e-02, -4.685904025809707e-02, -1.943104084222272e-02, -2.226746585963784e+00, -1.681852573996048e+00, -4.507398552121616e-02, -4.103767486277776e+01, -1.379739578667032e+00, -3.175303837804417e+00, -4.090735483591154e+00, -8.030967466525032e+00, -1.659494371499258e+00, -6.388979527694035e+00, -6.388979527693993e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m06_2x_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06_2x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-2.026043664364733e-03, -2.026167073899758e-03, -2.026702122813465e-03, -2.024694731904002e-03, -2.026108706330638e-03, -2.026108706330638e-03, 1.742188450529668e-04, 1.706495233514042e-04, 6.149188977698612e-05, 1.041607289472823e-04, 1.732275937412084e-04, 2.000167906763273e-04, -1.865896343800751e-02, -2.390726871124639e-02, -2.352065045516176e-02, -2.447721782030451e-02, -2.384154468191876e-02, -2.384154468191876e-02, -8.221521122206757e-02, -8.497379439118820e-02, -8.240335106363459e-03, -3.703997400080235e-02, -8.316497797185934e-02, -8.316497797185934e-02, -9.585425623747134e-04, -1.091276986055440e-03, -2.096296851331849e-02, -3.809623354359729e-05, -1.106042340389575e-03, -1.106042340390188e-03, -9.011056138011625e-03, -8.762770057389603e-03, -8.984193657164194e-03, -8.436548257191628e-03, -8.888021343638620e-03, -8.888021343638620e-03, 2.774690822318833e-03, 2.845821952989336e-03, 2.667014138105410e-03, 2.827125770958762e-03, 2.825535739386179e-03, 3.323688822036121e-03, -4.598080018021059e-02, -7.062046914805771e-02, -2.579708572622782e-02, -4.418461176268356e-02, -4.094567240048524e-02, -3.757317320253515e-02, -3.568379383304054e-02, -1.407886431067083e-02, -3.727101245388936e-02, -1.269405712429878e-02, -4.920291674661850e-02, -4.920291674661850e-02, -2.890768062820161e-05, -6.437026043048747e-05, -1.064825753708013e-04, -1.969924303387643e-02, -3.327994665726690e-05, -6.001123666734968e-05, -3.154560521923396e-01, 3.019144747155399e-02, -1.220337563118121e-01, -2.768739422719636e-01, -2.013418846131246e-01, -2.013418846131246e-01, -2.880392232375497e-01, -4.999187254180081e-02, -4.530139888481892e-02, -1.046251444643645e-01, -6.230735112447427e-02, -5.836131439510664e-02, -4.092838701164083e-02, -4.013312463863412e-02, -5.437708922855754e-02, 1.594429594110164e-02, -2.189626341900682e-03, -2.189626341900754e-03, -7.007712388424406e-03, -1.628458681264402e-02, -3.029134373814480e-02, -4.775310215499904e-03, -3.941819947291586e-02, -6.529930949431416e-02, -6.043392302474360e-04, -1.465575033673853e-06, -1.972639500223879e-05, -6.828402704955278e-02, -5.180699755363690e-05, -5.180699755339699e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
