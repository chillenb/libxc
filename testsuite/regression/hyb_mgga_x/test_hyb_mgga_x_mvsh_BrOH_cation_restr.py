
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_mvsh_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_mvsh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.736955955414168e+01, -1.736961214093664e+01, -1.736989948918225e+01, -1.736911851052826e+01, -1.736952007168455e+01, -1.736952007168455e+01, -2.521144020699216e+00, -2.521329158866909e+00, -2.526574851517724e+00, -2.527589519321911e+00, -2.525992441883318e+00, -2.525992441883318e+00, -4.347057892436473e-01, -4.341299902633687e-01, -4.207264143988592e-01, -4.271462797378613e-01, -4.254824541171386e-01, -4.254824541171386e-01, -1.335555760380373e-01, -1.352679417999602e-01, -4.898956827443299e-01, -7.824487093971015e-02, -9.499060227902195e-02, -9.499060227902195e-02, -8.195240998152722e-04, -8.897829203531335e-04, -1.085827178571697e-02, -3.539824089531900e-04, -5.138923765958389e-04, -5.138923765958391e-04, -4.252570279792096e+00, -4.253376323590107e+00, -4.252638106084297e+00, -4.253348402600622e+00, -4.252963043993410e+00, -4.252963043993410e+00, -1.549800471206110e+00, -1.567678632106455e+00, -1.545492658755149e+00, -1.561869176243376e+00, -1.561845006480145e+00, -1.561845006480145e+00, -4.603521552521360e-01, -5.012865070031159e-01, -4.121134722626166e-01, -4.258593417497603e-01, -4.692186959160420e-01, -4.692186959160420e-01, -4.566277126343384e-02, -1.269312227182387e-01, -4.088950057965566e-02, -1.464941045827485e+00, -6.162616624297908e-02, -6.162616624297908e-02, -2.482959668587118e-04, -3.491721978123928e-04, -2.937875245217218e-04, -2.319463110629873e-02, -3.530178272760752e-04, -3.530178272760751e-04, -4.790208698978686e-01, -4.763136569505355e-01, -4.772668101682076e-01, -4.780509088784989e-01, -4.776571236140479e-01, -4.776571236140479e-01, -4.635696058180122e-01, -3.986867850242906e-01, -4.171778858423464e-01, -4.355300463267874e-01, -4.259258637868719e-01, -4.259258637868719e-01, -5.211171552004530e-01, -1.693977868675490e-01, -2.032584525811314e-01, -2.649174557932280e-01, -2.338373926121971e-01, -2.338373926121971e-01, -3.560662912734381e-01, -1.010036424059917e-02, -1.610451459973035e-02, -2.592440611627869e-01, -3.457643586386926e-02, -3.457643586386927e-02, -1.332880304251475e-03, -5.886463581087662e-05, -1.635082645213486e-04, -3.184462298753275e-02, -3.235306772802610e-04, -3.235306772802606e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_mvsh_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_mvsh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.217316828886726e+01, -2.217325907233695e+01, -2.217359062857724e+01, -2.217223893667904e+01, -2.217295748362560e+01, -2.217295748362560e+01, -3.881446282263433e+00, -3.881757968009223e+00, -3.889673566087147e+00, -3.887014678152796e+00, -3.886898347473702e+00, -3.886898347473702e+00, -6.133111670036941e-01, -6.123336583451519e-01, -5.902637057076467e-01, -6.001325971014561e-01, -5.976725954009341e-01, -5.976725954009341e-01, -1.378199754866520e-01, -1.451244534171667e-01, -6.768763520051867e-01, -1.189296148419016e-01, -1.106782074400199e-01, -1.106782074400198e-01, -1.268881989673103e-03, -1.645207393828813e-03, -2.116263327256439e-02, -7.077660977704570e-04, -1.026156109515136e-03, -1.026156109515136e-03, -5.463534037659954e+00, -5.466183226785379e+00, -5.463627303594694e+00, -5.465967329389926e+00, -5.464892015919802e+00, -5.464892015919802e+00, -1.884630349494542e+00, -1.891919791386865e+00, -1.853546968846052e+00, -1.857859809205331e+00, -1.903320974575016e+00, -1.903320974575016e+00, -6.150803260793858e-01, -6.874421377051485e-01, -5.822782104034990e-01, -6.522767150539731e-01, -6.271654573011635e-01, -6.271654573011635e-01, -8.172224185152632e-02, -9.591887625142531e-02, -7.496899495441395e-02, -2.141319837649527e+00, -8.399958223794186e-02, -8.399958223794175e-02, -4.965913716985693e-04, -6.983220365628021e-04, -5.873951018386045e-04, -4.471069846753384e-02, -7.059870080431311e-04, -7.059870080431310e-04, -6.397260761286567e-01, -6.300241916580007e-01, -6.334401089270710e-01, -6.362601015302349e-01, -6.348504446074505e-01, -6.348504446074505e-01, -6.246620853318026e-01, -4.822606179232862e-01, -5.253290272089048e-01, -5.663716635008893e-01, -5.460447705086230e-01, -5.460447705086231e-01, -7.198855149436352e-01, -1.650842738600521e-01, -2.341982351438159e-01, -3.473010971695631e-01, -2.895348466115586e-01, -2.895348466115586e-01, -4.576370836151032e-01, -1.812933745891630e-02, -3.130930720374345e-02, -3.450746747734503e-01, -6.187491297406100e-02, -6.187491297406104e-02, -2.665351783227190e-03, -1.177293367564735e-04, -3.268323875305284e-04, -5.044746850722964e-02, -6.469592107266283e-04, -6.469592107266277e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_mvsh_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_mvsh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-7.623839306599114e-09, -7.623775461187748e-09, -7.623657353049059e-09, -7.624616440543605e-09, -7.624090110764222e-09, -7.624090110764222e-09, -1.946131762497327e-05, -1.947146344445489e-05, -1.973986846722619e-05, -1.977857093030643e-05, -1.972037822260126e-05, -1.972037822260126e-05, -1.296518041743143e-03, -1.292023499059193e-03, -1.227908404225203e-03, -1.531522064166102e-03, -1.427819988124014e-03, -1.427819988124014e-03, -1.095887124552957e+00, -9.909919000237966e-01, -1.124676626583967e-04, -2.321595873696319e-01, -1.256074478297507e+00, -1.256074478297510e+00, -6.720024670245328e+01, 2.936846733256573e+01, 3.278964671585755e+00, 1.719220622928104e+02, 1.401877856170937e+02, 1.401877856170940e+02, -2.270975222005780e-06, -2.269503720077230e-06, -2.271068540815332e-06, -2.269761915446423e-06, -2.270146799482797e-06, -2.270146799482797e-06, -8.005583698382623e-05, -8.167988093324485e-05, -8.434548732027358e-05, -8.622209319281802e-05, -7.900567489273642e-05, -7.900567489273642e-05, -8.937131758346440e-03, -6.608610596829195e-03, -2.138090073189103e-02, -2.234505248771641e-02, -8.655453111749135e-03, -8.655453111749135e-03, 2.564131804306803e-01, -1.268067418773074e+00, 4.736655431285652e-01, -1.143718417581061e-04, -1.466608234072141e+00, -1.466608234072152e+00, 3.021484975818419e+02, 1.973827968808200e+02, 9.285770463483648e+02, 1.684869210242468e+00, 4.363361166804030e+02, 4.363361166804023e+02, -1.305371921766268e-02, -1.335479297283705e-02, -1.324777266872538e-02, -1.316035612187261e-02, -1.320359024056404e-02, -1.320359024056404e-02, -1.372367221253902e-02, -2.571689695441762e-02, -2.117878018051432e-02, -1.767278519799371e-02, -1.923972612219759e-02, -1.923972612219758e-02, -5.098544186205074e-03, -4.521181420103143e-01, -1.970819439508465e-01, -1.040861733584937e-01, -1.153237948931659e-01, -1.153237948931658e-01, -2.528334982572539e-02, 4.378242341184562e-01, 2.070555123743875e+00, -7.985631702909732e-02, 3.324648644813114e-01, 3.324648644813172e-01, 4.187412362254709e+01, 3.859907788996234e+03, 8.025518324209709e+02, -1.712147294033407e+00, 5.667729978297743e+02, 5.667729978297762e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_mvsh_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_mvsh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.187285822149293e-03, 1.187285551382268e-03, 1.187313422819528e-03, 1.187318796297311e-03, 1.187311815205266e-03, 1.187311815205266e-03, 1.305122128244910e-02, 1.305806915508182e-02, 1.323999103515699e-02, 1.326874784659937e-02, 1.322528844227150e-02, 1.322528844227150e-02, 6.686108178969843e-03, 6.650346857641336e-03, 6.068475697292780e-03, 7.565085182379945e-03, 7.057826614961497e-03, 7.057826614961497e-03, 9.829605087024573e-02, 9.289956773620901e-02, 1.206618337871773e-03, 1.973572519879533e-02, 7.406820307300706e-02, 7.406820307300716e-02, 5.145540019531145e-04, 1.943176381432379e-04, 7.101962330025354e-04, 3.252133316647333e-07, 2.721954994518255e-06, 2.721954994518073e-06, 5.111736060166652e-03, 5.111040888976066e-03, 5.112076543770964e-03, 5.111445905944148e-03, 5.111192778186793e-03, 5.111192778186793e-03, 9.811331512306887e-03, 1.021033860869780e-02, 1.018031953918992e-02, 1.058990640138371e-02, 9.860867587225944e-03, 9.860867587225944e-03, 2.898979266897683e-02, 2.724585596297306e-02, 5.470557248673371e-02, 6.387061138236540e-02, 2.941066911424166e-02, 2.941066911424166e-02, 7.220944016949627e-03, 1.148865865634945e-01, 5.317900462429335e-03, 1.286648117198463e-02, 4.171735923444819e-02, 4.171735923444841e-02, 8.844901937426850e-09, 6.174095655311383e-08, 8.334078306937642e-07, 1.984573257408934e-03, 2.042673288549727e-07, 2.042673288549727e-07, 4.249126103634575e-02, 4.278570082341981e-02, 4.268129261632644e-02, 4.259538814605171e-02, 4.263693953320606e-02, 4.263693953320606e-02, 4.112123827834518e-02, 4.951319712447119e-02, 4.656904775445209e-02, 4.409608392731820e-02, 4.503218570246636e-02, 4.503218570246634e-02, 2.423292554689203e-02, 8.217262865568352e-02, 6.095456215426487e-02, 7.062974746508663e-02, 5.285623475004220e-02, 5.285623475004219e-02, 3.823246919044085e-02, 2.344867391341148e-03, 1.089210927210156e-03, 4.862799851827063e-02, 8.698985879950147e-03, 8.698985879950119e-03, 9.999628764313180e-07, 1.249243415405306e-10, 4.501402354373877e-07, 1.849733444771260e-02, 3.985553273173067e-07, 3.985553273174390e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
