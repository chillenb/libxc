
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_mvsh_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_mvsh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.651515153332721e+01, -1.651522215932455e+01, -1.651554046716234e+01, -1.651449121327974e+01, -1.651504037764248e+01, -1.651504037764248e+01, -2.311808540356242e+00, -2.311868577050501e+00, -2.313500208636284e+00, -2.313048390224457e+00, -2.312856375921907e+00, -2.835461695281190e+00, -4.257621367193517e-01, -5.421956708501878e-01, -5.261064968138172e-01, -5.313161854214021e-01, -5.302025853412609e-01, -5.302025853412609e-01, -1.383994070897131e-01, -1.407911448798032e-01, -4.877206537567156e-01, -9.697868666837120e-02, -1.141235817829250e-01, -1.141235817829251e-01, -1.095553593923492e-03, -1.189152271643324e-03, -1.409546247670463e-02, -4.625236398591779e-04, -6.790379852302090e-04, -6.790379852302090e-04, -4.253937807357929e+00, -4.254726970045580e+00, -4.253977177785121e+00, -4.087467680132212e+00, -4.254336209270090e+00, -4.254336209270090e+00, -1.279434173492736e+00, -1.292597652609010e+00, -1.269767720328459e+00, -1.281294628988806e+00, -1.291494254012298e+00, -1.604719846542927e+00, -4.790357183649253e-01, -5.207126821583720e-01, -4.428760634095740e-01, -4.607772019746255e-01, -4.868349870424645e-01, -4.344316113202774e-01, -5.574300062782077e-02, -1.344878364676429e-01, -5.153633536038572e-02, -1.567664295146306e+00, -7.574804672579349e-02, -7.574804672579351e-02, -1.632399630705318e-03, -4.402218481983558e-04, -3.822455388905107e-04, -3.458920216115796e-02, -1.905239079377055e-03, -4.483942710022639e-04, -4.817544812048221e-01, -4.789787847873083e-01, -4.705458143600055e-01, -4.807609617554151e-01, -4.803583544972393e-01, -4.803583544972393e-01, -4.686945909605069e-01, -4.018369447243229e-01, -4.210733987014756e-01, -4.400458584985866e-01, -4.303676120572119e-01, -4.028190725385934e-01, -5.458388345527783e-01, -1.367791250295858e-01, -2.123977780912868e-01, -2.269424578225027e-01, -2.455348812190500e-01, -2.455348812190500e-01, -3.026615669901149e-01, -1.322244468672512e-02, -2.072743211263155e-02, -2.733226216971551e-01, -4.412886184612496e-02, -4.371182845149751e-02, -1.674955238223892e-03, -6.239648727861232e-05, -2.164629768086605e-04, -4.024569112375891e-02, -4.171848985260597e-04, -4.171848985259376e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_mvsh_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_mvsh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.334114263707811e+01, -2.334117370733594e+01, -2.334134573839726e+01, -2.334088098978454e+01, -2.334111942794107e+01, -2.334111942794107e+01, -3.432644235439857e+00, -3.432852271380864e+00, -3.438439623020828e+00, -3.436482851765831e+00, -3.436334953847948e+00, -3.204422197507235e+00, -5.970346545452820e-01, -5.006642524473610e-01, -4.551001861568117e-01, -4.743895097470649e-01, -4.700931280022885e-01, -4.700931280022885e-01, -1.006116663338263e-01, -1.062949208877297e-01, -6.704965651270853e-01, 1.135746731053548e-02, -4.126892473173006e-02, -4.126892473172970e-02, 7.227674222116728e-01, 6.933794411505194e-01, 3.582293030122580e-01, 1.070879053335490e+00, 8.431242010965414e-01, 8.431242010965414e-01, -5.460961019440179e+00, -5.463647896342865e+00, -5.461108011734255e+00, -5.675305470089043e+00, -5.462311490757234e+00, -5.462311490757234e+00, -1.857188456157826e+00, -1.883533406645067e+00, -1.837901028887965e+00, -1.860687914639046e+00, -1.881499753169993e+00, -1.755507657594739e+00, -5.777592927142492e-01, -6.590282728217709e-01, -5.112006696447071e-01, -5.565769877364460e-01, -5.931802910569088e-01, -7.476278827908079e-01, -7.477924348540592e-02, -5.283252216568174e-02, -6.908212029921178e-02, -1.921137816563253e+00, 4.542931822484202e-02, 4.542931822484230e-02, -2.176545379458055e-03, 1.134461663922282e+00, 5.921068771817866e-01, -4.624500038826754e-02, -2.540358463020712e-03, 7.726895555838313e-01, -6.359177745888482e-01, -6.259257309277581e-01, -6.414447558825931e-01, -6.323455830556257e-01, -6.308919040911789e-01, -6.308919040911789e-01, -6.178281113918135e-01, -4.729329866935325e-01, -5.161005583939511e-01, -5.578649934313100e-01, -5.366722995437800e-01, -5.916251133122838e-01, -6.829150219906145e-01, -1.882221481713791e-01, -1.853569084128087e-01, -3.288246983069554e-01, -2.463903232397085e-01, -2.463903232397085e-01, -4.522919287110331e-01, 3.665124047386020e-01, 3.099904189584540e-01, -3.124173576315853e-01, -5.914062037026122e-02, 1.407327456079464e-01, 8.014526260747368e-01, 2.035504330010302e+00, 9.460538290587004e-01, 1.478749981513098e-01, 7.033031672765943e-01, 7.033031672742870e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_mvsh_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_mvsh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-5.007634315868772e-09, -5.007480510057457e-09, -5.006819346902229e-09, -5.009102478147348e-09, -5.007901935608094e-09, -5.007901935608094e-09, -3.944996956194963e-06, -3.947429721401357e-06, -4.012014264489145e-06, -3.984298554673052e-06, -3.988916032828002e-06, -1.125182172716846e-05, -5.849083699104715e-04, -7.935980660071795e-03, -8.760857191313937e-03, -8.511703802640451e-03, -8.563519670260748e-03, -8.563519670260748e-03, -1.724907730242952e+00, -1.631252599023836e+00, -1.079428340190119e-04, -4.693250208504841e+00, -3.102020927403337e+00, -3.102020927403346e+00, -2.831782756499662e+05, -2.379284128967516e+05, -5.469568541474536e+02, -1.861229870068163e+06, -8.721174070140861e+05, -8.721174070140861e+05, -2.279203579458513e-06, -2.277622939172520e-06, -2.279125546636192e-06, -1.458879145609391e-06, -2.278405068315544e-06, -2.278405068315544e-06, -2.450351043173774e-05, -2.606577303808915e-05, -2.332453469467158e-05, -2.464866990028886e-05, -2.600112494068720e-05, -1.087792008410562e-04, -1.401450746198424e-02, -1.012858971634384e-02, -1.900085405448353e-02, -1.637638995811008e-02, -1.316452779904394e-02, -2.332819947652633e-02, -2.058313007546789e-02, -1.634894150511232e+00, -2.129721624598121e-02, -1.225759148858700e-04, -1.026453863333764e+01, -1.026453863333766e+01, -2.366260402827345e-02, -1.984093210815548e+06, -6.590176123326426e+06, -2.696703394212917e-02, -9.380747132827716e-02, -3.046809280216773e+06, -1.391291841301768e-02, -1.421826243428081e-02, -1.128861608830604e-02, -1.402142861987921e-02, -1.406563395541327e-02, -1.406563395541327e-02, -1.552673839811113e-02, -2.815820910804769e-02, -2.355048335311564e-02, -1.986422064027753e-02, -2.165029451558469e-02, -1.879849556081243e-02, -8.371816454724155e-03, -1.873082491852507e-02, -3.307680902518448e-01, -2.353823340064850e-02, -1.936887464379519e-01, -1.936887464379519e-01, -1.527509569312476e-02, -6.392116463598874e+02, -2.114084732124622e+02, -1.306782711714750e-01, -3.656543849042672e-02, -4.348683478824454e+01, -7.731433324889641e+04, -2.060831834826347e+08, -1.754432130215037e+07, -5.500940421311164e+01, -4.178972806228792e+06, -4.178972806215111e+06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_mvsh_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_mvsh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [7.745091760340218e-04, 7.744918673906649e-04, 7.744204114124504e-04, 7.746770718858875e-04, 7.745416586877644e-04, 7.745416586877644e-04, 2.633133727571174e-03, 2.634774565401048e-03, 2.678480225476296e-03, 2.660460010156012e-03, 2.662661240454709e-03, 7.665179415067749e-03, 2.801427319852673e-03, 3.948745013191571e-02, 4.043505282019511e-02, 4.016588714397803e-02, 4.022241269820236e-02, 4.022241269820236e-02, 1.508443346919028e-01, 1.489066155334940e-01, 8.196667688473060e-04, 1.833922318699835e-01, 1.711521681862561e-01, 1.711521681862565e-01, 9.853563620464183e-01, 9.654255323702392e-01, 3.759571815724355e-01, 1.247218779608026e+00, 1.159644522081883e+00, 1.159644522081883e+00, 5.130334694877622e-03, 5.129402884463956e-03, 5.130288357224734e-03, 3.269786130915659e-03, 5.129864186062229e-03, 5.129864186062229e-03, 2.915102669093588e-03, 3.168929010441815e-03, 2.730995464300889e-03, 2.942189519809823e-03, 3.154636891118344e-03, 1.351969680038741e-02, 4.549436025589351e-02, 4.190313676313026e-02, 4.912524620668861e-02, 4.729938058660256e-02, 4.477953147244602e-02, 7.845911534275309e-02, 2.485281453576782e-04, 1.461368414745310e-01, 2.036054140569513e-04, 1.390845631747238e-02, 2.157795654958707e-01, 2.157795654958711e-01, 7.282466235324225e-09, 1.242133163623638e+00, 1.844657743865306e+00, 7.843954537906271e-05, 4.589993505096177e-08, 1.491017869968797e+00, 4.531147702320684e-02, 4.557173028496326e-02, 3.630973105029595e-02, 4.540446874737746e-02, 4.544220235427263e-02, 4.544220235427263e-02, 4.657382156954479e-02, 5.418687173635270e-02, 5.178167993434819e-02, 4.958599694730723e-02, 5.068494985488053e-02, 4.363879651052162e-02, 3.996546396838554e-02, 3.129051009185008e-03, 1.002467522544251e-01, 1.569544291042158e-02, 8.782938612059500e-02, 8.782938612059499e-02, 2.258378636397562e-02, 3.849742833416806e-01, 3.246815882191888e-01, 7.956353048822604e-02, 2.195751691038815e-04, 2.731890163788221e-01, 7.563448773576151e-01, 2.463984493423947e+00, 1.940073887406716e+00, 2.852416331254630e-01, 1.620220904000084e+00, 1.620220903994777e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
