
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_dldf_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_dldf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-6.922641352191449e+00, -6.922613856960337e+00, -6.922516387908601e+00, -6.922921722799598e+00, -6.922705928712093e+00, -6.922705928712093e+00, -1.277697560309751e+00, -1.277678264930794e+00, -1.277191912268697e+00, -1.277504229406168e+00, -1.277338005393922e+00, -1.644293498172769e+00, -2.624947214448965e-01, -4.135983222661267e-01, -4.302227110081059e-01, -4.205055090863790e-01, -4.227368968105411e-01, -4.227368968105411e-01, -1.314916258488389e-01, -1.299686792813736e-01, -3.263436314030662e-01, -1.614990937157938e-01, -1.470560398913921e-01, -1.470560398913921e-01, -1.789522237391229e-02, -1.882404487844669e-02, -9.396693497564547e-02, -1.036936955311824e-02, -1.301498980147230e-02, -1.301498980147230e-02, -1.632816893433681e+00, -1.628112056336247e+00, -1.632544624711330e+00, -1.522080638914482e+00, -1.630465043375969e+00, -1.630465043375969e+00, -7.294179228675534e-01, -7.325277708328219e-01, -7.273009859884885e-01, -7.299783531063381e-01, -7.321528103103073e-01, -9.797243957690345e-01, -2.451911514791754e-01, -2.232577815511333e-01, -2.477225005531083e-01, -2.349855729931418e-01, -2.427845132987278e-01, -2.088030224106478e-01, -4.403788668925465e-02, -1.696147606557019e-01, -4.098667971025605e-02, -7.691161904657918e-01, -1.499493834955820e-01, -1.499493834955820e-01, -1.361765612543495e-03, -1.013834223616071e-02, -7.746138339662220e-03, -2.814349466129285e-02, -1.589224651956784e-03, -9.333563285226861e-03, -1.005026417846727e-01, -1.400186656135549e-01, -1.239357009234306e-01, -1.163704223758989e-01, -1.222439615249923e-01, -1.222439615249923e-01, -1.040806620999221e-01, -2.167967377574381e-01, -2.064836800558282e-01, -1.867109257798968e-01, -1.987259023651498e-01, -1.770593300553735e-01, -2.485019346844710e-01, -9.106391711104743e-02, -1.721467603204125e-01, -1.297646053403912e-01, -1.692998369249589e-01, -1.692998369249588e-01, -1.660505985787963e-01, -9.063282790970656e-02, -1.156238708597527e-01, -1.555082522457980e-01, -3.515753464799159e-02, -1.382133528413212e-01, -2.521162532338652e-02, -2.713025492050631e-03, -5.691287501381589e-03, -1.335179940458555e-01, -8.636124449882449e-03, -8.636124449882442e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_dldf_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_dldf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-6.713857600343222e+00, -6.713739756380919e+00, -6.713276548637092e+00, -6.715019296565663e+00, -6.714097753233247e+00, -6.714097753233247e+00, -1.563254978716228e+00, -1.563237377037461e+00, -1.562787794362139e+00, -1.563114126309949e+00, -1.562916919152485e+00, -1.090939999311748e+00, -3.029221092419689e-01, -1.214138986612525e-01, -9.768399654169022e-02, -1.079675592895657e-01, -1.056007618718727e-01, -1.056007618718727e-01, -1.627906997532624e-02, -1.815387007592681e-02, -3.698025030040393e-01, -1.507270932505596e-02, -7.362474453344908e-03, -7.362474453344882e-03, -2.364554010330829e-02, -2.484342643235882e-02, -1.013255265085781e-01, -1.379014295864005e-02, -1.726998687841995e-02, -1.726998687841995e-02, -1.038139900366718e+00, -1.031826491189897e+00, -1.037775373162353e+00, -1.226019324033653e+00, -1.034979376582787e+00, -1.034979376582787e+00, -8.841004909945059e-01, -8.903134595951290e-01, -8.794149235150345e-01, -8.850756268476208e-01, -8.897274789607413e-01, -5.761107199579429e-01, -1.915226991798943e-01, -1.594560849502515e-01, -1.760997332130006e-01, -1.837980239344862e-01, -1.906815521771306e-01, -2.393291002275887e-01, -5.535884179146611e-02, -8.534911502561767e-03, -5.187394466943748e-02, -6.033630772099412e-01, -2.450154685559052e-02, -2.450154685559059e-02, -1.815575653772265e-03, -1.348643680558394e-02, -1.028839183876459e-02, -3.649078148493219e-02, -2.118612314001701e-03, -1.240163460893657e-02, -5.099013423742448e-02, -7.128495094021259e-02, -7.088502921454819e-02, -5.679210074748900e-02, -5.971990665175240e-02, -5.971990665175240e-02, -5.157048025605946e-02, -1.624106793849761e-01, -1.619705746374056e-01, -1.319492017495566e-01, -1.515452614163579e-01, -1.852107393054957e-01, -1.874943816957409e-01, -1.031464620792105e-01, -4.043364771703740e-02, -1.570479482881806e-01, -6.995052448131810e-02, -6.995052448131794e-02, -2.032260377443174e-01, -9.931204079722745e-02, -1.099543814239699e-01, -1.072054448876039e-01, -4.457742966006348e-02, -6.541031063484594e-02, -3.319972995968570e-02, -3.616703154125657e-03, -7.577995837705102e-03, -6.839854904214793e-02, -1.147405584773015e-02, -1.147405584773013e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_dldf_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_dldf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.559017022233392e-09, -4.558935343041334e-09, -4.558568927698290e-09, -4.559782150651255e-09, -4.559146949194523e-09, -4.559146949194523e-09, -7.355976088200804e-06, -7.355785616580156e-06, -7.350251209412984e-06, -7.349823217023944e-06, -7.352924613036941e-06, -6.513141880595760e-06, -5.660967796968197e-03, -4.425973164911749e-03, -4.826822644082946e-03, -4.717520509637104e-03, -4.740031797921932e-03, -4.740031797921932e-03, -9.189762260322405e-01, -8.754970864761107e-01, -3.264815204878003e-03, -1.906593359572265e+00, -1.475923904992058e+00, -1.475923904992058e+00, -2.994792118770133e+01, -3.116883940482538e+01, -1.214864661073233e+01, -2.211971695139020e+01, -3.072184273639692e+01, -3.072184273639692e+01, -1.133934082459746e-06, -1.130479840778938e-06, -1.133742333691495e-06, -1.163751513412348e-06, -1.132203220581764e-06, -1.132203220581764e-06, -7.439147431684615e-05, -7.205712132135419e-05, -7.617109084503429e-05, -7.403504959639168e-05, -7.226516248265530e-05, -6.260263839446413e-05, -8.114738410997163e-03, -5.448316103965623e-03, -1.103116887090313e-02, -9.476976616264947e-03, -7.584816676695250e-03, -8.116879873825585e-03, -2.033802849955318e+01, -7.859953269664058e-01, -2.793323604212531e+01, -7.032209627043365e-05, -3.602295705965646e+00, -3.602295705965646e+00, -2.848820635345067e+07, -1.955882695735369e+01, -1.578990283039890e+02, -1.393576656508725e+02, -1.535147840794232e+07, -6.062018931464129e+01, -4.022709262297573e-03, -5.620089088862550e-03, -5.189774989316767e-03, -4.662528604229891e-03, -4.899756368952224e-03, -4.899756368952224e-03, -4.762419588946072e-03, -1.636599440125867e-02, -1.350907322944386e-02, -1.061423437838550e-02, -1.213611593716553e-02, -1.276807272879535e-02, -4.660485004757614e-03, -5.274436632372890e-01, -1.825408438931825e-01, -7.483062655196790e-02, -1.096820277853068e-01, -1.096820277853068e-01, -2.539851933696017e-02, -1.254119974349491e+01, -9.547215894607568e+00, -7.577416119192823e-02, -5.201001700365635e+01, -8.307812160123165e+00, -1.426001892070004e+01, -2.400153782606289e+01, -6.873175000640370e+01, -9.650285643543706e+00, -8.638992787048538e+01, -8.638992787048554e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_dldf_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_dldf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-1.475404237723834e-03, -1.475489345147302e-03, -1.475830581462884e-03, -1.474571273151546e-03, -1.475236187827881e-03, -1.475236187827881e-03, -1.055122743227434e-03, -1.055333460926845e-03, -1.060986882850634e-03, -1.058578860744855e-03, -1.058945293641160e-03, -1.363160615202891e-03, -4.492588106454500e-03, -7.072472066222290e-03, -7.117830372025185e-03, -7.146122206607542e-03, -7.141640604064691e-03, -7.141640604064691e-03, -2.415604919502302e-02, -2.440264799100675e-02, -2.650311652665588e-03, -1.455616430936925e-02, -1.957889422895152e-02, -1.957889422895154e-02, -8.467414047999071e-06, -1.028274762168298e-05, -7.507015306366501e-04, -1.200389018567003e-06, -3.312061257966956e-06, -3.312061257966956e-06, -1.234256438811432e-02, -1.248013730422007e-02, -1.235046457548677e-02, -1.165756963882540e-02, -1.241130971203703e-02, -1.241130971203703e-02, -1.704567110168780e-03, -1.710281402216686e-03, -1.702561992603116e-03, -1.704493584993719e-03, -1.710273008273872e-03, -2.288588073466579e-03, -1.699377678721349e-02, -6.101679992203978e-02, -9.783125466827764e-03, -1.825741450950959e-02, -2.116998334386321e-02, -1.820691298024762e-02, -1.833400559714905e-03, -1.718915895982520e-02, -1.539474724049202e-03, -7.616046838044769e-03, -1.297407975488847e-02, -1.297407975488847e-02, -6.495149178852124e-08, -9.914931728616660e-07, -3.581665751404208e-06, -6.432987508989079e-04, -4.092530136164184e-07, -2.403555027642829e-06, -3.293226770030001e-01, -2.177867788151780e-01, -2.438574729943087e-01, -2.835847987408499e-01, -2.669593986487552e-01, -2.669593986487552e-01, -3.191621908370204e-01, -1.320977533110876e-02, -2.847740629241638e-02, -7.643286335224057e-02, -4.568742732471891e-02, -4.070624502287787e-02, -3.991931448605820e-02, -9.773418039962914e-03, -1.770518944459708e-02, -9.555270137756889e-03, -1.551605138833504e-02, -1.551605138833504e-02, -8.420767099545276e-03, -6.738063053568119e-04, -1.397787586657569e-03, -1.486616794496090e-02, -1.670977006458802e-03, -6.569042365904933e-03, -1.135518456134651e-05, -2.321100774425757e-08, -6.151282143720305e-07, -6.125145049260356e-03, -2.713840310359293e-06, -2.713840310372473e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
