
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_dldf_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_dldf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-7.584668199684192e+00, -7.584618810352923e+00, -7.584457281174887e+00, -7.585187382330846e+00, -7.584796686356272e+00, -7.584796686356272e+00, -1.445425099056705e+00, -1.445369945366813e+00, -1.444050116023245e+00, -1.445742160523754e+00, -1.444978399405534e+00, -1.444978399405534e+00, -3.193713052533452e-01, -3.199085037243124e-01, -3.354459867863206e-01, -3.346230328960503e-01, -3.340574367369272e-01, -3.340574367369272e-01, -1.281925697507953e-01, -1.260646201881373e-01, -3.896639009974143e-01, -1.468290438806534e-01, -1.366950411851889e-01, -1.366950411851889e-01, -1.789457849377301e-02, -1.882263636714835e-02, -9.296567208395771e-02, -1.036781893968155e-02, -1.301285395500779e-02, -1.301285395500779e-02, -1.632135235304114e+00, -1.627440413924784e+00, -1.631877267158060e+00, -1.627735246052734e+00, -1.629781375141468e+00, -1.629781375141468e+00, -9.549352531808958e-01, -9.541205569384578e-01, -9.635045082095678e-01, -9.625757329523997e-01, -9.504255857364149e-01, -9.504255857364149e-01, -2.313088075144311e-01, -2.100348023708165e-01, -2.231578268614336e-01, -2.080345980242959e-01, -2.300080215165897e-01, -2.300080215165897e-01, -1.543204544470876e-01, -1.643991211200635e-01, -1.501675692297116e-01, -6.867489057438344e-01, -1.426633169125505e-01, -1.426633169125505e-01, -8.003356420471230e-03, -1.013504889056751e-02, -7.744138479131613e-03, -1.250416330292875e-01, -9.329620683628899e-03, -9.329620683628897e-03, -9.968517878325993e-02, -1.389297612408296e-01, -1.267768854208634e-01, -1.154385596902417e-01, -1.212710109680475e-01, -1.212710109680475e-01, -1.024022241320031e-01, -2.148760132923967e-01, -2.041200271474076e-01, -1.841437011853065e-01, -1.960753606931517e-01, -1.960753606931518e-01, -2.301624549237974e-01, -1.685220681885592e-01, -1.653696278869839e-01, -1.615142793656369e-01, -1.602150644653580e-01, -1.602150644653580e-01, -2.019236506735929e-01, -9.019963445034211e-02, -1.133586323869986e-01, -1.441869356843332e-01, -1.321743204623229e-01, -1.321743204623229e-01, -2.516563844906541e-02, -2.712648407441486e-03, -5.691048379184617e-03, -1.300791745707423e-01, -8.633466775662848e-03, -8.633466775662841e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_dldf_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_dldf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-5.625089920191816e+00, -5.624998357781688e+00, -5.624602391790105e+00, -5.625955061690760e+00, -5.625244960748256e+00, -5.625244960748256e+00, -1.333220176519924e+00, -1.333250153297296e+00, -1.333907764582930e+00, -1.332430467183676e+00, -1.333012138492450e+00, -1.333012138492450e+00, -2.236180665904059e-01, -2.224814131122934e-01, -1.931183786569111e-01, -1.959973250323497e-01, -1.962945558460454e-01, -1.962945558460454e-01, -1.839151108069775e-02, -2.082627671975503e-02, -2.794109226840957e-01, -1.158813086054661e-02, -9.536466746667156e-03, -9.536466746667128e-03, -2.364298276505956e-02, -2.483783749552515e-02, -9.795995441747074e-02, -1.378395374723472e-02, -1.726147665344298e-02, -1.726147665344298e-02, -1.039354243668519e+00, -1.033025615228638e+00, -1.038964387315934e+00, -1.033382728725210e+00, -1.036198639932756e+00, -1.036198639932756e+00, -5.941414841886705e-01, -6.053324250357475e-01, -5.770392185471088e-01, -5.873096363719840e-01, -6.084552456522513e-01, -6.084552456522513e-01, -2.100293487712772e-01, -1.813264643396436e-01, -2.064636514491512e-01, -2.209007137117156e-01, -2.082636156091160e-01, -2.082636156091160e-01, -5.073710154865321e-02, -9.569878179964145e-03, -5.774614840927100e-02, -7.219958858258558e-01, -1.973437255975975e-02, -1.973437255975975e-02, -1.065038446506835e-02, -1.347329071125927e-02, -1.028041811808111e-02, -8.593793446059089e-02, -1.238591220676273e-02, -1.238591220676272e-02, -5.270172792940843e-02, -7.348963850842864e-02, -6.496912480929300e-02, -5.873866501142785e-02, -6.174225080845930e-02, -6.174225080845930e-02, -5.509647873790144e-02, -1.647545742729614e-01, -1.652347222760941e-01, -1.361694881598379e-01, -1.555081997309528e-01, -1.555081997309529e-01, -2.160705800599937e-01, -2.030954755546884e-02, -4.621625576992584e-02, -1.150498368965399e-01, -7.924226203170132e-02, -7.924226203170133e-02, -1.557014325536777e-01, -9.783022061583604e-02, -1.031013438784439e-01, -1.207856435766149e-01, -5.508824901528143e-02, -5.508824901528131e-02, -3.301782810254515e-02, -3.615195200241807e-03, -7.577040403324653e-03, -6.200190421065510e-02, -1.146345716854445e-02, -1.146345716854443e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_dldf_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_dldf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.382182071707298e-09, -4.382108655538533e-09, -4.381770928018259e-09, -4.382861447908750e-09, -4.382291689740505e-09, -4.382291689740505e-09, -6.965759205168263e-06, -6.965655311738799e-06, -6.962180053637097e-06, -6.958704141285075e-06, -6.962961256497665e-06, -6.962961256497665e-06, -5.169691269055083e-03, -5.190372427320573e-03, -5.696437593640699e-03, -5.477214720508819e-03, -5.530802061604266e-03, -5.530802061604266e-03, -9.401098351455495e-01, -8.989286216107768e-01, -3.010496999070325e-03, -2.210257380248103e+00, -1.609758742458167e+00, -1.609758742458167e+00, -3.045062057733904e+01, -3.213432679541804e+01, -1.482377154036278e+01, -2.782461942216289e+01, -3.527961485652644e+01, -3.527961485652653e+01, -1.134144675232745e-06, -1.130687172803479e-06, -1.133948500168005e-06, -1.130898133598084e-06, -1.132414348802271e-06, -1.132414348802271e-06, -6.526881154240667e-05, -6.340525854929662e-05, -6.637527491227605e-05, -6.468761542499829e-05, -6.370998615216220e-05, -6.370998615216220e-05, -8.346988773578848e-03, -5.597092497461567e-03, -1.163137533052001e-02, -1.002887215665605e-02, -7.782748216676709e-03, -7.782748216676709e-03, -4.825887000511318e+00, -8.159970250643819e-01, -5.768701441267972e+00, -7.404101903581512e-05, -3.976714898699858e+00, -3.976714898699858e+00, -3.669302493262054e+01, -3.274474591036570e+01, -2.053844192110826e+02, -1.211620691518354e+01, -9.558220146793771e+01, -9.558220146793751e+01, -4.036430125659394e-03, -5.638826473747156e-03, -5.141156898146808e-03, -4.678309556426752e-03, -4.916292667261780e-03, -4.916292667261780e-03, -4.794751214399466e-03, -1.644206336927921e-02, -1.358453506023961e-02, -1.068094852571931e-02, -1.221256422349225e-02, -1.221256422349225e-02, -4.823024788506601e-03, -3.596845053655751e-01, -1.881679754984904e-01, -6.751907224447425e-02, -1.136201832625650e-01, -1.136201832625650e-01, -2.320072120770155e-02, -1.384762224973444e+01, -1.198623319766471e+01, -7.883947575236047e-02, -9.834702052926675e+00, -9.834702052926676e+00, -2.438811953542920e+01, -1.610521156124976e+02, -7.787558457839629e+01, -1.076283061547410e+01, -1.207454585282665e+02, -1.207454585282668e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_dldf_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_dldf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-1.616500268355053e-03, -1.616589408699654e-03, -1.616951607208607e-03, -1.615632801194452e-03, -1.616328450789972e-03, -1.616328450789972e-03, -1.193632157579425e-03, -1.193843010897759e-03, -1.199599070869524e-03, -1.197985927553010e-03, -1.197923391461086e-03, -1.197923391461086e-03, -5.466028877175824e-03, -5.470389589446526e-03, -5.549794494406982e-03, -5.686624870661626e-03, -5.643505859767485e-03, -5.643505859767485e-03, -2.354998655881305e-02, -2.366963000301842e-02, -3.164550118525383e-03, -1.323392991836563e-02, -1.819944121277569e-02, -1.819944121277570e-02, -8.467109385691858e-06, -1.028197821392302e-05, -7.427024447288839e-04, -1.200209514949940e-06, -3.311517726666817e-06, -3.311517726666817e-06, -1.233741169194324e-02, -1.247498889353065e-02, -1.234541590747728e-02, -1.246677508358772e-02, -1.240610554146426e-02, -1.240610554146426e-02, -2.231575580859995e-03, -2.227648846881582e-03, -2.255498324603305e-03, -2.247606596697240e-03, -2.220147492118411e-03, -2.220147492118411e-03, -1.603161541557760e-02, -5.740293316490774e-02, -8.813010583275570e-03, -1.616343437628669e-02, -2.005591673991938e-02, -2.005591673991938e-02, -6.424722638377302e-03, -1.666059377653187e-02, -5.640348982530588e-03, -6.800418320349564e-03, -1.234366696662606e-02, -1.234366696662606e-02, -3.817323143106190e-07, -9.911710955835998e-07, -3.580741054264037e-06, -2.858178321711134e-03, -2.402539739093491e-06, -2.402539739097266e-06, -3.266440498625021e-01, -2.160930833729708e-01, -2.494478240125568e-01, -2.813139288172828e-01, -2.648346450629198e-01, -2.648346450629198e-01, -3.140152795067412e-01, -1.309274248772461e-02, -2.815142070271193e-02, -7.538193220928144e-02, -4.507806322789353e-02, -4.507806322789351e-02, -3.697326313637114e-02, -1.808659976000653e-02, -1.700816550176108e-02, -1.189317045580698e-02, -1.468344694585718e-02, -1.468344694585719e-02, -1.023996329290793e-02, -6.705857450908352e-04, -1.370402910859304e-03, -1.378388072913663e-02, -6.282017568870560e-03, -6.282017568870622e-03, -1.133447231298419e-05, -2.320778163605891e-08, -6.151023694625958e-07, -5.967389023686340e-03, -2.713005155253457e-06, -2.713005155266633e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
