
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_m08_hx_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m08_hx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-8.648769767988655e+00, -8.648738207997955e+00, -8.648627575379788e+00, -8.281596802544470e+00, -8.281323692019516e+00, -7.913792118551177e+00, -1.882457986225709e+00, -2.200548336461740e+00, -2.196928817948520e+00, -2.198606250381191e+00, -2.198157291751284e+00, -1.879968252245988e+00, -2.525994049779495e-01, -3.552729034808856e-01, -4.536240993240939e-01, -3.494607644815665e-01, -2.434876686373519e-01, -4.533522240280490e-01, -9.110288478856905e-02, -9.339474249264995e-02, -3.921279415355255e-01, -8.166726436698779e-02, -1.140309968129896e-01, -1.094409824416667e-01, 4.264970004930431e-03, 2.766443057563401e-03, 5.857245135121690e-03, 2.509179061937762e-03, 3.463366493533980e-03, 3.463366493534008e-03, -1.786066489570518e+00, -1.785031600903390e+00, -1.786001407140681e+00, -1.785088467974744e+00, -1.775071975927826e+00, -1.775132715142997e+00, -1.276288895025671e+00, -1.281238714385515e+00, -1.272219931852199e+00, -1.277257092537786e+00, -1.064096031940789e+00, -1.280606127536840e+00, -2.703657471445430e-01, -2.325334982108295e-01, -3.259250292614903e-01, -2.718122457767708e-01, -2.578369072841842e-01, -2.704219862246472e-01, -4.667661135999443e-02, -7.887182131220585e-02, -3.990377887067298e-02, -8.347337074426370e-01, -6.418930112876954e-02, -6.418930112877003e-02, 1.154035150848444e-03, 2.454853702001182e-03, 1.870888001268906e-03, -6.309481869379562e-03, 2.345279166664408e-03, 2.345279166664262e-03, -2.391107837097875e-01, -2.327118884212138e-01, -1.147871894704159e-01, -1.769231811764925e-01, -1.077445642769456e-01, -1.805593630235374e-01, -2.410859408169770e-01, -2.495697511632979e-01, -2.208232789154920e-01, -1.949870151409645e-01, -2.060800719106773e-01, -2.123177026094616e-01, -2.673284889520971e-01, -1.536248483626938e-01, -1.405144427107566e-01, -1.872954943189860e-01, -2.008975865547781e-01, -1.593614390114689e-01, -2.831855964776654e-01, 7.020965441955583e-04, 4.994368609692443e-03, -2.062816900798197e-01, -3.317389589791835e-02, -3.317389589791768e-02, 6.985673004277554e-04, 6.604559020260864e-04, 1.647681255045441e-04, -8.486915804933812e-03, 2.157110436862866e-03, 7.199454370117016e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_m08_hx_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m08_hx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-8.540193209434866e+00, -8.535471202754891e+00, -8.539529562165274e+00, -8.534989646647993e+00, -8.537670673112610e+00, -8.532250021957447e+00, -8.545110795421486e+00, -7.797374986601909e+00, -8.539766183028702e+00, -7.797823433939132e+00, -7.797803354603763e+00, -7.797823433939133e+00, -1.589519086386836e+00, -2.553580524245064e+00, -1.588104520172502e+00, -1.589732678047411e+00, -1.560412433759189e+00, -1.555435712760755e+00, -1.570654366281279e+00, -1.570638890314713e+00, -1.592412690748770e+00, -1.545518531012799e+00, -2.554320652724753e+00, -1.545518531012799e+00, -3.851495350745906e-01, -3.862477003066260e-01, -3.849671125140343e-01, -4.189747740665146e-01, -4.443178039296747e-01, -4.493737769862552e-01, -4.312890883247462e-01, -3.846083802827632e-01, -3.897967650410271e-01, -4.115684004414334e-01, -4.202600422158818e-01, -4.725794465169258e-01, -1.249595352250471e-01, -1.452045544194107e-01, -1.256782764387178e-01, -1.399188199798709e-01, -7.563474772654011e-01, -5.743514337669816e-01, -1.178215691970309e-01, -1.260139880624191e-01, -1.640720411118608e-01, -8.917532729595638e-02, -1.640720411118608e-01, -3.028331973720039e-02, 5.313921333494166e-03, 5.599411413334593e-03, 6.431845093280055e-04, 5.854569004210602e-03, -2.370385356193640e-03, -9.639651215643873e-03, 3.335947604018129e-03, 3.282123372188684e-03, 4.808489123187100e-03, 2.813853188235853e-03, 4.808489123187100e-03, 2.813853188234270e-03, -2.069874494815018e+00, -2.069470900956215e+00, -2.085385770688867e+00, -2.084451465116601e+00, -2.070928290292406e+00, -2.070126840518595e+00, -2.084227132501877e+00, -2.083725598815924e+00, -3.037346529418007e-01, -2.076880009493176e+00, -2.077562429998508e+00, -3.039120535204590e-01, -1.268567498424300e+00, -1.264620566877785e+00, -1.232267101694438e+00, -1.228120982376734e+00, -1.288296478899206e+00, -1.281065720425310e+00, -1.269504602795045e+00, -1.257140323885665e+00, -1.220553858764835e+00, -1.577383371715996e+00, -1.220553858764835e+00, -1.243119139081887e+00, -1.863183650562825e-02, -2.522130525954011e-01, -2.337330070203196e-01, -2.337552264147559e-01, -2.167748817177803e-01, -8.182866249198791e-02, -1.479229099239538e-02, -4.291224953108857e-02, -8.742419786579834e-02, -2.517899281966497e-01, -8.742419786580403e-02, -2.568842911131096e-02, -8.461622992240954e-02, -8.457259496166150e-02, -1.035659922449886e-01, -1.796251589779841e-01, -8.560741419638153e-02, -8.369075936250435e-02, -2.657349070373839e-01, -2.668624909421632e-01, -8.417402755549304e-02, -9.717179379247377e-02, -8.417402755548484e-02, -9.717179379249649e-02, 3.005242988662638e-04, 2.625824950951946e-03, 3.215804286909934e-03, 3.266301976683958e-03, 2.383999989627737e-03, 2.513260097186298e-03, -5.993665586737702e-02, -1.525110714275684e-02, 2.469587288391455e-03, 3.298621076482293e-03, 2.469587288394072e-03, 3.298621076481927e-03, -2.562901106630598e-02, -1.311698643348656e-02, -3.559872389322976e-01, -3.534390553232038e-01, -3.070567048885893e-02, -2.653437438942091e-02, 1.051178538400577e-02, -1.763022879123173e-01, -1.279893547167195e-02, -7.597726270300848e-03, -1.279893547167199e-02, -2.353107786890521e-01, -8.755266679403557e-02, -7.229244426514259e-02, -5.280016876759274e-02, -2.401165193263844e-01, -6.823974727534830e-02, -2.505740132552267e-01, -1.970789047802879e-01, -1.976762488848038e-01, -1.622943049809655e-01, -1.662732759348185e-01, -1.622943049809625e-01, -2.691446362772993e-01, -2.143594273619012e-01, -3.190450849443962e-01, -2.013173690428607e-01, -2.009469230937822e-01, -1.591074519081131e-01, -1.763944839083666e-01, -2.762911637033870e-01, -2.284286286688039e-01, -1.933247273321883e-01, -1.937682670012537e-01, -1.933247273321881e-01, -1.959752032714241e-01, -1.926630523762947e-01, -1.658567234968962e-01, -2.265614642278826e-03, -2.298878052741026e-03, -2.759702758507499e-02, -3.224799636635245e-02, -1.591185216760658e-01, -7.740541792630280e-02, -7.608107845161943e-02, -7.165189093993252e-02, -7.608107845161421e-02, -7.165189093996259e-02, 8.546901202755036e-04, 8.782255585363803e-04, 8.789338004184814e-04, 8.809399120056908e-04, 2.109903714061144e-04, 2.239544908818812e-04, -2.137605730122349e-02, -2.192227060768938e-02, 2.327206240511314e-03, 3.040906767011395e-03, 2.327206240508631e-03, 3.585466817895464e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m08_hx_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m08_hx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [1.111721675729866e-08, 0.000000000000000e+00, 1.112017600962818e-08, 1.111749962303537e-08, 0.000000000000000e+00, 1.112037989618535e-08, 1.111821507549163e-08, 0.000000000000000e+00, 1.112145108954704e-08, 1.111504818037385e-08, 0.000000000000000e+00, 7.634647961513709e-09, 1.111740601739957e-08, 0.000000000000000e+00, 7.636425877889575e-09, 7.635095414306258e-09, 0.000000000000000e+00, 7.636425877889575e-09, -1.679224930980550e-05, 0.000000000000000e+00, -3.310342785809789e-05, -1.679273846577596e-05, 0.000000000000000e+00, -1.679297033121586e-05, -1.680148658866655e-05, 0.000000000000000e+00, -1.680213156020948e-05, -1.679287691550294e-05, 0.000000000000000e+00, -1.679195075092918e-05, -1.680190761506377e-05, 0.000000000000000e+00, -1.679749018070850e-05, -3.313316226363723e-05, 0.000000000000000e+00, -1.679749018070850e-05, -2.659082033146947e-02, 0.000000000000000e+00, -2.617859865624644e-02, -2.675702833035072e-02, 0.000000000000000e+00, -6.177955172572641e-03, -5.442403279539287e-03, 0.000000000000000e+00, -5.391021903984469e-03, -5.768164568340811e-03, 0.000000000000000e+00, -2.844692543260219e-02, -2.539777953589789e-02, 0.000000000000000e+00, -3.343737397655970e-02, -6.168815833231054e-03, 0.000000000000000e+00, -5.124708584134535e-03, -6.876801268278446e+00, 0.000000000000000e+00, -6.881363623492656e-01, -6.478906826608799e+00, 0.000000000000000e+00, -7.272790344619716e-01, -9.181441642620838e-04, 0.000000000000000e+00, -1.404341157116372e-02, -4.253539673639962e-01, 0.000000000000000e+00, -2.815926497948941e-01, -4.636816463281148e-01, 0.000000000000000e+00, -1.943135371685032e+00, -4.636816463281140e-01, 0.000000000000000e+00, -4.771750993834026e+01, 1.186890012188775e+01, 0.000000000000000e+00, 1.188352296162734e+01, 2.744723474107986e+06, 0.000000000000000e+00, 1.238968579453126e+01, 1.607778259117110e+03, 0.000000000000000e+00, 3.003457629119079e+00, 8.811731057152940e+00, 0.000000000000000e+00, 8.903544887857143e+00, 1.132647590759092e+01, 0.000000000000000e+00, 1.956527412064147e+01, 1.132647590759092e+01, 0.000000000000000e+00, 1.956527412064153e+01, -3.882926511336840e-07, 0.000000000000000e+00, -3.897221276931085e-07, -5.603284913041382e-07, 0.000000000000000e+00, -5.560877647886382e-07, -4.000677430268930e-07, 0.000000000000000e+00, -3.970651409480829e-07, -5.475644446963347e-07, 0.000000000000000e+00, -5.480838574465904e-07, -4.230540459622672e-07, 0.000000000000000e+00, -4.721652627958992e-07, -4.737073589471900e-07, 0.000000000000000e+00, -4.210183680402478e-07, -1.529693835915189e-04, 0.000000000000000e+00, -1.534465736419872e-04, -1.526062097529040e-04, 0.000000000000000e+00, -1.530398911365151e-04, -1.525353165566677e-04, 0.000000000000000e+00, -1.532015522411558e-04, -1.527719024860020e-04, 0.000000000000000e+00, -1.532506510206212e-04, -1.526700564493692e-04, 0.000000000000000e+00, -3.506212502014599e-04, -1.526700564493692e-04, 0.000000000000000e+00, -1.533387754075036e-04, -1.248457620487247e-02, 0.000000000000000e+00, -1.606515974884689e-02, 1.013320500589556e-02, 0.000000000000000e+00, 1.029430263300929e-02, -3.052700581431720e-02, 0.000000000000000e+00, -2.455857036766608e-02, -1.789098565573397e-02, 0.000000000000000e+00, -9.460723319340983e-03, -3.734235576278239e-03, 0.000000000000000e+00, -1.533398827522286e-02, -3.734235576278234e-03, 0.000000000000000e+00, -1.153561990883578e-02, -2.377187498644427e+00, 0.000000000000000e+00, -2.349461089238694e+00, -7.061535688208561e+00, 0.000000000000000e+00, -1.189703719668561e-01, -2.388955366140152e+00, 0.000000000000000e+00, -2.587742640392789e+00, -4.069773336016667e-05, 0.000000000000000e+00, -4.043667382085417e-05, -1.786437953496405e+00, 0.000000000000000e+00, -9.537861305413892e-01, -1.786437953496422e+00, 0.000000000000000e+00, -9.537861305413733e-01, 8.163149993997912e+07, 0.000000000000000e+00, 5.915953363264261e+00, 8.363475810824081e+00, 0.000000000000000e+00, 7.373390579941661e+00, 6.006495229323351e+01, 0.000000000000000e+00, 6.583850004230661e+01, -5.965088311319510e-01, 0.000000000000000e+00, -7.631946846822869e+01, 1.136828613875193e+01, 0.000000000000000e+00, 3.578634233322460e+01, 1.136828613875190e+01, 0.000000000000000e+00, 3.578634233322446e+01, -7.039391474530367e-01, 0.000000000000000e+00, -7.162099178342229e-01, -2.155972299387278e-01, 0.000000000000000e+00, -2.243474633528236e-01, -3.638524449894583e-01, 0.000000000000000e+00, -3.754191525754171e-01, -5.062360226205669e-01, 0.000000000000000e+00, -4.817534220889482e-01, -4.299578830044830e-01, 0.000000000000000e+00, -4.409493726351605e-01, -4.299578830044830e-01, 0.000000000000000e+00, -4.084620463488602e-01, -6.700665364455416e-01, 0.000000000000000e+00, -6.871889863693635e-01, -3.786535893595401e-02, 0.000000000000000e+00, -5.901801106666480e-02, -8.470920434540376e-03, 0.000000000000000e+00, -5.763672003982962e-03, 2.033910950096569e-02, 0.000000000000000e+00, 2.001882305563079e-02, 9.955885942975291e-03, 0.000000000000000e+00, 1.065574051356023e-02, 9.955885942975281e-03, 0.000000000000000e+00, 1.823407036801231e-02, 4.490229613004792e-03, 0.000000000000000e+00, 9.486518957108747e-03, -2.048196985436796e-01, 0.000000000000000e+00, -2.065177972673065e-01, -1.140306396231264e+00, 0.000000000000000e+00, -2.118707432564279e-01, -3.664212927668642e-01, 0.000000000000000e+00, -1.501690919788646e-01, -1.996973379969411e-01, 0.000000000000000e+00, -2.016288425364434e-01, -1.996973379969413e-01, 0.000000000000000e+00, -6.441413589544847e-01, -5.909490850955982e-02, 0.000000000000000e+00, -5.744000833620794e-02, 1.749981067648553e+03, 0.000000000000000e+00, 1.698336348995733e+03, 1.531320653233239e+00, 0.000000000000000e+00, 1.301962256936011e+00, -2.001433953166034e-01, 0.000000000000000e+00, -1.839267539109205e-01, -3.579605892156204e+00, 0.000000000000000e+00, -4.811117791033439e+00, -3.579605892156186e+00, 0.000000000000000e+00, -4.811117791033391e+00, 7.854669138944387e+05, 0.000000000000000e+00, 6.798502044354684e+05, 9.664347887972458e+00, 0.000000000000000e+00, 9.621845282090199e+00, 3.359006648057293e+08, 0.000000000000000e+00, 2.623685302255126e+08, -1.298442729989235e+02, 0.000000000000000e+00, -1.391949536001902e+02, 2.929218387525672e+01, 0.000000000000000e+00, 3.716862004733042e+01, 2.929218387525675e+01, 0.000000000000000e+00, 3.503228703025731e+07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m08_hx_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m08_hx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-1.753970082192265e-03, -1.756820518303274e-03, -1.754382272374418e-03, -1.757119688610960e-03, -1.755543437073826e-03, -1.758829269671515e-03, -1.750921725268033e-03, -2.559366078751567e-03, -1.754234678700472e-03, -2.559441269031639e-03, -2.559359155190863e-03, -2.559441269031639e-03, -1.143872389467686e-03, 3.517250861355729e-03, -1.155666241317871e-03, -1.141947559979097e-03, -1.387742357846324e-03, -1.429824739782070e-03, -1.302633342646512e-03, -1.302928967673385e-03, -1.117820651846753e-03, -1.514898210303247e-03, 3.525987928158818e-03, -1.514898210303247e-03, 4.683346370674796e-03, 4.651352183235205e-03, 4.722094660414565e-03, 5.329878974502007e-03, 5.317953075825128e-03, 5.544825609096443e-03, 5.046638062867891e-03, 5.250597843871301e-03, 4.689577087262140e-03, 8.880492639835520e-03, 5.585573412275985e-03, 6.638817874578859e-03, 4.613382320250584e-02, 2.851742800530406e-02, 4.524959385036116e-02, 2.559680533267664e-02, 7.049235613301802e-03, 9.584568605787802e-03, 1.836708468892976e-02, 1.839711033856828e-02, 3.159548302985041e-02, 3.354618759157975e-02, 3.159548302986064e-02, 5.830829413313423e-03, 1.293160670455863e-04, 1.556009979811100e-04, 2.925191510255842e-05, 1.916254068434530e-04, 1.897032822300977e-03, 1.199026566420708e-02, 2.068198847089554e-05, 1.986809218353270e-05, 8.737593085453054e-05, 2.766511422224674e-05, 8.737593085453054e-05, 2.766511422035681e-05, -3.794808102659007e-03, -3.792551253825759e-03, -3.275638320280762e-03, -3.290895918285571e-03, -3.759414391878215e-03, -3.770498112635835e-03, -3.314305350173920e-03, -3.315123998409426e-03, -2.962975349200172e-02, -3.544409931173289e-03, -3.537522050778788e-03, -2.963278003509232e-02, 6.225261301026020e-03, 6.167403380932117e-03, 5.431302829234562e-03, 5.364475511091811e-03, 6.617514127376415e-03, 6.501596212981249e-03, 6.234390946163644e-03, 5.998023795514016e-03, 5.181356325645975e-03, 8.901978425542412e-03, 5.181356325645975e-03, 5.703153122086769e-03, -1.239203844913284e-01, -3.723194876186856e-02, -8.672523413015674e-02, -8.736097992337988e-02, -1.726539397712776e-02, -7.649592037831422e-02, -1.255260290671144e-01, -1.293096624267432e-01, -1.156647482489218e-01, -3.685967456870742e-02, -1.156647482489223e-01, -1.275619053645227e-01, 3.517435736741444e-02, 3.490086227489568e-02, 2.693522277330153e-02, 2.208499935539712e-02, 3.676298109370799e-02, 3.651455729225606e-02, -3.697251766752341e-02, -3.696654223840933e-02, 2.767456272004660e-02, 2.209937267276188e-02, 2.767456272004636e-02, 2.209937267274380e-02, 1.206907185467501e-06, 6.567718520533529e-06, 1.747929908699950e-05, 1.611866035848704e-05, 5.257659284793119e-05, 6.851153544852549e-05, 3.073024151189343e-02, 6.198365767419660e-03, 1.057305127639217e-05, 8.666892921143133e-05, 1.057305127615708e-05, 8.666892921229038e-05, 5.931674998071976e-01, 5.748841328012683e-01, 6.490626467755752e-01, 6.660483219722045e-01, -3.159087870105654e-01, -3.272994720927148e-01, -4.470157358464372e-01, 7.461628941692879e-01, -3.701426909219128e-01, -3.853114023069461e-01, -3.701426909219128e-01, 7.733795481703559e-01, 6.889658256172903e-01, 6.682991614195289e-01, -9.971368268057990e-02, -2.799349602830294e-02, -1.387198466008601e-01, -2.594948299513345e-02, -1.036437518322730e-01, -1.033098083326657e-01, -1.082402519287177e-01, -1.068706673955357e-01, -1.082402519287166e-01, -1.773376299888778e-02, -8.379366449852102e-02, -2.574303252846794e-02, 2.561548736538253e-02, 2.540552022031242e-02, 1.637574028726129e-02, 1.277681984743668e-02, 4.880157096790401e-02, 3.603419291938995e-02, 2.594296037168094e-02, 2.662408435743684e-02, 2.594296037168052e-02, 2.328005955024117e-02, -1.574912753214972e-02, -3.041365466790670e-02, 1.892602563577317e-03, 1.891457597252926e-03, 1.767236382336121e-02, 1.953899253027793e-02, -5.609421422165270e-03, -9.035365595338449e-02, 4.115665822190673e-02, 4.261642400024493e-02, 4.115665822191714e-02, 4.261642400025460e-02, 3.453204960591607e-05, 3.783581813722316e-05, 3.921167199465674e-07, 3.930754044383153e-07, 1.736557927128338e-06, 2.212960664885026e-06, 7.738946433042129e-03, 7.900468917994714e-03, 2.317565539148773e-05, 6.923793209988250e-05, 2.317565539362088e-05, 1.314181916801233e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
