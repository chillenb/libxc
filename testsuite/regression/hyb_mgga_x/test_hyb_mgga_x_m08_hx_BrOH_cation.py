
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_m08_hx_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m08_hx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-7.952973202306360e+00, -7.952932847196818e+00, -7.952764758440528e+00, -7.953359638180462e+00, -7.953046415462634e+00, -7.953046415462634e+00, -1.897804910133154e+00, -1.897770728735708e+00, -1.897036817021161e+00, -1.899310744334211e+00, -1.898084963002505e+00, -1.898084963002505e+00, -3.597890673088620e-01, -3.602044638479943e-01, -3.712696129647223e-01, -3.755620675098916e-01, -3.723032984548788e-01, -3.723032984548788e-01, -1.205779441945156e-01, -1.221289045663211e-01, -3.693682627979371e-01, -8.072086149215754e-02, -1.115443615957794e-01, -1.115443615957796e-01, 4.264846021336660e-03, 4.474138522119247e-03, 1.060740829246091e-02, 2.508867769393629e-03, 3.462965017687853e-03, 3.462965017687881e-03, -1.785949638937055e+00, -1.784865798005900e+00, -1.785884153713395e+00, -1.784928825348053e+00, -1.785392743035656e+00, -1.785392743035656e+00, -1.238551121222908e+00, -1.248825738076417e+00, -1.239814188690775e+00, -1.249753695705165e+00, -1.243311817279177e+00, -1.243311817279177e+00, -2.745063906026122e-01, -2.463573138409070e-01, -2.913531602392449e-01, -2.507359046596619e-01, -2.640035473497735e-01, -2.640035473497735e-01, -4.408993835422098e-02, -1.148883669502893e-01, -3.761114417778167e-02, -8.121165338092367e-01, -6.302570604446225e-02, -6.302570604446266e-02, 1.944405179752091e-03, 2.454196042497372e-03, 1.870483532814873e-03, -9.403150090962986e-03, 2.344897352391744e-03, 2.344897352391597e-03, -1.662652997676350e-01, -2.112018557991709e-01, -2.133395132406090e-01, -2.042968610861404e-01, -2.105939053665132e-01, -2.105939053665131e-01, -1.191955835357097e-01, -2.744386520206141e-01, -2.233006568004722e-01, -1.974897980518114e-01, -2.072444255085025e-01, -2.072444255085029e-01, -2.693460333427674e-01, -1.525819235391402e-01, -1.784937843316435e-01, -2.076172377717410e-01, -1.918445767930109e-01, -1.918445767930109e-01, -2.695240249833851e-01, 1.120278513007198e-02, 4.824310327984579e-03, -1.904744576313052e-01, -3.170062375632662e-02, -3.170062375632596e-02, 5.939686924070660e-03, 6.603782171679072e-04, 1.383797559882514e-03, -2.830262609972396e-02, 2.156717038190779e-03, 2.156717038190806e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_m08_hx_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m08_hx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-7.862528389157394e+00, -7.862379333687628e+00, -7.862564982116932e+00, -7.862405807041360e+00, -7.862651939317641e+00, -7.862538167778233e+00, -7.862236677504459e+00, -7.862011111558648e+00, -7.862551194243238e+00, -7.862201019907322e+00, -7.862551194243238e+00, -7.862201019907322e+00, -1.896716125888039e+00, -1.898172752586910e+00, -1.895659640486718e+00, -1.897544595607881e+00, -1.875600679051276e+00, -1.872163565045406e+00, -1.880248552709700e+00, -1.880866038765188e+00, -1.898697672314107e+00, -1.862532833407427e+00, -1.898697672314107e+00, -1.862532833407427e+00, -3.125051861746994e-01, -3.147242070719586e-01, -3.120454381274245e-01, -3.142702543328035e-01, -3.183084127284473e-01, -3.224985190794765e-01, -3.163763472940955e-01, -3.145362529592785e-01, -3.186702714991067e-01, -3.567007678702161e-01, -3.186702714991067e-01, -3.567007678702161e-01, -1.500378480620234e-01, -1.423570271034093e-01, -1.462528045483146e-01, -1.362606823000851e-01, -4.164049470171052e-01, -4.473652373969438e-01, -1.292176972075599e-01, -1.304628680128192e-01, -1.542149693121049e-01, -8.790588252485661e-02, -1.542149693121048e-01, -8.790588252485829e-02, 5.313251341879741e-03, 5.599070104896501e-03, 5.525143926983191e-03, 5.853671432700746e-03, -5.495510159391998e-03, -9.923358503011015e-03, 3.334574277917401e-03, 3.281020804350819e-03, 4.807052485260679e-03, 2.811397963738806e-03, 4.807052485260679e-03, 2.811397963737223e-03, -2.059398779557369e+00, -2.059596221881316e+00, -2.074709347719584e+00, -2.074400495606855e+00, -2.060677225769716e+00, -2.060416086743410e+00, -2.073800857893784e+00, -2.073850297818487e+00, -2.066802468930864e+00, -2.066886167382129e+00, -2.066802468930864e+00, -2.066886167382129e+00, -1.250050156057394e+00, -1.247233453337957e+00, -1.221955542910494e+00, -1.218456163966308e+00, -1.266963323145806e+00, -1.261362038148280e+00, -1.255176361561533e+00, -1.244451116015534e+00, -1.210951129293043e+00, -1.230509215969797e+00, -1.210951129293043e+00, -1.230509215969797e+00, -9.225823035238986e-02, -9.314096003314661e-02, -2.336739194374788e-01, -2.164116417666572e-01, -2.667293751616974e-01, -1.551512882617126e-01, -1.771125074098692e-01, -1.931752736295048e-01, -1.519742969573358e-01, -1.051525211628684e-01, -1.519742969573405e-01, -1.051525211628676e-01, -8.200387056654194e-02, -8.232678588722266e-02, -1.751672897044664e-01, -1.757489599639621e-01, -7.890478051099099e-02, -7.979243918446635e-02, -7.794135235428992e-01, -7.799374836580009e-01, -9.055403812328305e-02, -1.028005761780888e-01, -9.055403812327475e-02, -1.028005761781110e-01, 2.525348761346521e-03, 2.623697292759243e-03, 3.213294290081808e-03, 3.263570341418257e-03, 2.382622155957501e-03, 2.511454005215034e-03, -5.658653088588052e-02, -5.984050540377812e-02, 2.465610462388342e-03, 3.298046336676398e-03, 2.465610462390958e-03, 3.298046336676031e-03, 1.795125500781530e-02, 2.648640557519464e-02, -2.898513574285044e-01, -2.880794422972177e-01, -2.241890216932605e-01, -2.154693440660027e-01, -1.233547396419432e-01, -1.129264349215684e-01, -1.783111958022075e-01, -1.682197390574612e-01, -1.783111958022075e-01, -1.682197390574673e-01, 1.765594182581386e-02, 2.485972663715052e-02, -5.870630483284369e-02, -5.296677841946990e-02, -8.135008682084281e-02, -8.943513689644032e-02, -1.939068939311106e-01, -1.937605431546232e-01, -1.749825604447466e-01, -1.781855558368005e-01, -1.749825604447437e-01, -1.781855558368016e-01, -3.013340713429775e-01, -2.936900728999636e-01, -1.961004053665408e-01, -1.955374202945648e-01, -1.679729032941386e-01, -1.653405533816415e-01, -2.212754569016835e-01, -2.223657573621803e-01, -1.800987275837788e-01, -1.806340684735974e-01, -1.800987275837790e-01, -1.806340684735976e-01, -2.045977937549765e-01, -1.799943207679429e-01, -4.835792923350816e-03, -5.002078200698245e-03, -2.767234170933511e-02, -3.215489445208160e-02, -1.740678711213263e-01, -9.990671677990810e-02, -7.108816929755991e-02, -6.872821243151421e-02, -7.108816929755445e-02, -6.872821243154395e-02, 7.365099931753442e-03, 7.580466028670053e-03, 8.786957291484307e-04, 8.805571527217712e-04, 1.774355833898074e-03, 1.884294611324616e-03, -6.911918139755968e-02, -6.971750919164563e-02, 2.323045276226189e-03, 3.040443295658779e-03, 2.323045276223505e-03, 3.040443295657215e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m08_hx_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m08_hx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([7.828212882091949e-09, 0.000000000000000e+00, 7.830520820775462e-09, 7.828541583902921e-09, 0.000000000000000e+00, 7.830758335941340e-09, 7.829317053981547e-09, 0.000000000000000e+00, 7.831941525118851e-09, 7.825629882150976e-09, 0.000000000000000e+00, 7.827247838544266e-09, 7.828431423571447e-09, 0.000000000000000e+00, 7.828923941575169e-09, 7.828431423571447e-09, 0.000000000000000e+00, 7.828923941575169e-09, -2.434054069674390e-05, 0.000000000000000e+00, -2.435505104786125e-05, -2.433689607609895e-05, 0.000000000000000e+00, -2.435378168131667e-05, -2.427703672703500e-05, 0.000000000000000e+00, -2.426793612940273e-05, -2.424322259120782e-05, 0.000000000000000e+00, -2.425214299483865e-05, -2.436316030952092e-05, 0.000000000000000e+00, -2.419456157077307e-05, -2.436316030952092e-05, 0.000000000000000e+00, -2.419456157077307e-05, -1.537317798297470e-02, 0.000000000000000e+00, -1.557089602590635e-02, -1.531713450701936e-02, 0.000000000000000e+00, -1.556012095423109e-02, -1.453710571306152e-02, 0.000000000000000e+00, -1.414113411915757e-02, -1.392235312112901e-02, 0.000000000000000e+00, -1.405448495780313e-02, -1.573668407927635e-02, 0.000000000000000e+00, -1.150792376962854e-02, -1.573668407927635e-02, 0.000000000000000e+00, -1.150792376962854e-02, -6.752550186747369e-01, 0.000000000000000e+00, -7.392589992887799e-01, -7.390749027735171e-01, 0.000000000000000e+00, -7.944459079810264e-01, -9.663010254063109e-03, 0.000000000000000e+00, -9.048366893361396e-03, -1.840390509292667e-01, 0.000000000000000e+00, -1.816150281749871e-01, -6.048145407654048e-01, 0.000000000000000e+00, -1.827638698473599e+00, -6.048145407654044e-01, 0.000000000000000e+00, -1.827638698473645e+00, 1.216085137757986e+01, 0.000000000000000e+00, 1.200744728501005e+01, 1.278309675137542e+01, 0.000000000000000e+00, 1.267374644108443e+01, 4.069746120408720e+00, 0.000000000000000e+00, 3.671613781034799e+00, 1.129237277481438e+01, 0.000000000000000e+00, 1.098771114235980e+01, 1.219481386980457e+01, 0.000000000000000e+00, 3.121671355760590e+01, 1.219481386980461e+01, 0.000000000000000e+00, 3.121671355760602e+01, -3.878949612082016e-07, 0.000000000000000e+00, -3.893481997009475e-07, -5.601602219497655e-07, 0.000000000000000e+00, -5.559231579184247e-07, -3.996946353542928e-07, 0.000000000000000e+00, -3.967069101410670e-07, -5.473834454702939e-07, 0.000000000000000e+00, -5.479122140697877e-07, -4.734194265625460e-07, 0.000000000000000e+00, -4.718949352226785e-07, -4.734194265625460e-07, 0.000000000000000e+00, -4.718949352226785e-07, -1.698550243236083e-04, 0.000000000000000e+00, -1.697788961782632e-04, -1.665288594507642e-04, 0.000000000000000e+00, -1.665469704571235e-04, -1.670857420122462e-04, 0.000000000000000e+00, -1.679624323529042e-04, -1.647196384281978e-04, 0.000000000000000e+00, -1.653330393075020e-04, -1.693264163679634e-04, 0.000000000000000e+00, -1.683457181143644e-04, -1.693264163679634e-04, 0.000000000000000e+00, -1.683457181143644e-04, -1.407844418580848e-02, 0.000000000000000e+00, -1.321954166389958e-02, 1.295021178535509e-02, 0.000000000000000e+00, 1.299445647549321e-02, -4.271528792215517e-02, 0.000000000000000e+00, -3.116649730095393e-02, -2.381420639352898e-02, 0.000000000000000e+00, -1.099726110048146e-02, -3.629404212283023e-03, 0.000000000000000e+00, -1.293158184397776e-02, -3.629404212283015e-03, 0.000000000000000e+00, -1.293158184397775e-02, -2.468567925913574e+00, 0.000000000000000e+00, -2.416102787035406e+00, -1.479171238765244e-01, 0.000000000000000e+00, -1.503057528116918e-01, -2.756456329720355e+00, 0.000000000000000e+00, -2.769157659601743e+00, -3.853778784690775e-05, 0.000000000000000e+00, -3.813544834718702e-05, -1.516433247079115e+00, 0.000000000000000e+00, -7.100779745063348e-01, -1.516433247079139e+00, 0.000000000000000e+00, -7.100779745063209e-01, 1.590264655048165e+01, 0.000000000000000e+00, 1.376284733649683e+01, 1.365838725018385e+01, 0.000000000000000e+00, 1.261272315904290e+01, 7.758579451931141e+01, 0.000000000000000e+00, 8.618438231213834e+01, -8.636124659210578e-01, 0.000000000000000e+00, -1.346865651753005e+00, 3.875642706382290e+01, 0.000000000000000e+00, 3.773408399999128e+01, 3.875642706382268e+01, 0.000000000000000e+00, 3.773408399999110e+01, -7.203475708029716e-01, 0.000000000000000e+00, -7.324432771356946e-01, -2.204623277165304e-01, 0.000000000000000e+00, -2.292781144551677e-01, -3.415688955162213e-01, 0.000000000000000e+00, -3.529300996878309e-01, -4.824996088756002e-01, 0.000000000000000e+00, -4.925758499036146e-01, -4.066985834405792e-01, 0.000000000000000e+00, -4.176001123542465e-01, -4.066985834405792e-01, 0.000000000000000e+00, -4.176001123542461e-01, -7.015545318575100e-01, 0.000000000000000e+00, -7.183254238683565e-01, -3.877186863175291e-02, 0.000000000000000e+00, -3.752722130622116e-02, -8.465847032403748e-03, 0.000000000000000e+00, -6.756257603304092e-03, 2.152875734215860e-02, 0.000000000000000e+00, 2.118043690532368e-02, 1.075090248891214e-02, 0.000000000000000e+00, 1.144499773547822e-02, 1.075090248891213e-02, 0.000000000000000e+00, 1.144499773547816e-02, 6.553267673365656e-03, 0.000000000000000e+00, 8.370658411742700e-03, -2.301069962729188e-01, 0.000000000000000e+00, -2.325356052782830e-01, -2.503152271547894e-01, 0.000000000000000e+00, -2.527155648459655e-01, -2.021240573127722e-01, 0.000000000000000e+00, -1.989218607828503e-01, -2.449652298066674e-01, 0.000000000000000e+00, -2.473295990496025e-01, -2.449652298066673e-01, 0.000000000000000e+00, -2.473295990496026e-01, -6.864449181043576e-02, 0.000000000000000e+00, -6.560973006691576e-02, 3.755978179207229e+00, 0.000000000000000e+00, 3.750766922919704e+00, 2.000815598485658e+00, 0.000000000000000e+00, 1.681912105939243e+00, -2.615173830873251e-01, 0.000000000000000e+00, -2.170888573944627e-01, -4.122728369895308e+00, 0.000000000000000e+00, -5.111677251419073e+00, -4.122728369895292e+00, 0.000000000000000e+00, -5.111677251419022e+00, 9.556345824132475e+00, 0.000000000000000e+00, 9.737342591626252e+00, 4.905149009463499e+01, 0.000000000000000e+00, 8.688715588860204e+01, 3.019802132608086e+01, 0.000000000000000e+00, 3.213232017585572e+01, -4.647805048455954e+00, 0.000000000000000e+00, -5.118764838907318e+00, 7.977281359345261e+01, 0.000000000000000e+00, 3.924429009597900e+01, 7.977281359345277e+01, 0.000000000000000e+00, 3.924429009597884e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m08_hx_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m08_hx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-2.513773964279202e-03, -2.514243096525578e-03, -2.513811530656776e-03, -2.514270295160206e-03, -2.513935122269001e-03, -2.514446257314852e-03, -2.513515668675553e-03, -2.513910685484019e-03, -2.513797971605013e-03, -2.514126712901002e-03, -2.513797971605013e-03, -2.514126712901002e-03, 9.549208202475537e-04, 9.654085754642502e-04, 9.457376204373663e-04, 9.597348076064625e-04, 7.681180472679237e-04, 7.366845127447526e-04, 8.191782010290700e-04, 8.219673972387028e-04, 9.751813636008494e-04, 6.588494808655730e-04, 9.751813636008494e-04, 6.588494808655730e-04, 4.781201908942014e-03, 4.913825107898049e-03, 4.767533364919335e-03, 4.886396307679184e-03, 5.434946790851695e-03, 5.686867143356941e-03, 5.009448170355733e-03, 4.895159905747134e-03, 5.025454347644430e-03, 6.685714264686906e-03, 5.025454347644430e-03, 6.685714264686906e-03, 3.241254150091123e-02, 2.838444822800093e-02, 3.171648118494368e-02, 2.547342297549204e-02, 7.667092886803652e-03, 7.918575085582833e-03, 1.799633770783574e-02, 1.805413583123261e-02, 3.093556637980040e-02, 2.840880512693450e-02, 3.093556637981050e-02, 2.840880512691904e-02, 1.293114941218673e-04, 1.555983481815165e-04, 1.541196973932909e-04, 1.916172382491314e-04, 9.949817120353576e-03, 1.188131306852238e-02, 2.067955260715079e-05, 1.986618226203088e-05, 8.736856082797017e-05, 2.765821168028808e-05, 8.736856082797017e-05, 2.765821167839821e-05, -3.948691162266971e-03, -3.937685582200232e-03, -3.434221880564452e-03, -3.440216104407962e-03, -3.910114621727455e-03, -3.913292383340051e-03, -3.469048404143145e-03, -3.461760272513996e-03, -3.696462732852344e-03, -3.692086519390217e-03, -3.696462732852344e-03, -3.692086519390217e-03, 6.387861897519023e-03, 6.331809222638682e-03, 5.637762380979965e-03, 5.569817678118254e-03, 6.702703000822106e-03, 6.607901984521011e-03, 6.346924952800108e-03, 6.132834984250882e-03, 5.454100539226400e-03, 5.900977971013993e-03, 5.454100539226400e-03, 5.900977971013993e-03, -9.571817806296874e-02, -9.749790538786975e-02, -7.987839308469614e-02, -9.258875670219902e-02, -2.269449181491864e-03, -5.249304220393614e-02, -6.169706411160546e-02, -6.200337645401680e-02, -8.708000254851531e-02, -9.501778457596295e-02, -8.708000254851581e-02, -9.501778457596258e-02, 3.277998986135698e-02, 3.233024803947096e-02, 2.156386843341393e-02, 2.160133920419596e-02, 3.382625297061170e-02, 3.397985653006648e-02, -1.390923989258810e-02, -1.388417268581206e-02, 2.672697455833999e-02, 2.186772833672753e-02, 2.672697455833966e-02, 2.186772833670966e-02, 6.356616056442723e-06, 6.566189377952202e-06, 1.747539251174627e-05, 1.611479939462246e-05, 5.256792592874648e-05, 6.849752170924050e-05, 2.910089326682430e-02, 3.217788351212114e-02, 1.056816350569515e-05, 8.666464890720230e-05, 1.056816350546021e-05, 8.666464890806137e-05, 4.057189184057140e-02, 2.322475310597541e-02, 4.598950508474827e-01, 4.741305151702203e-01, 4.911746987965621e-01, 4.910353391154116e-01, 3.785561159848946e-01, 3.665273050229917e-01, 4.540109734589827e-01, 4.471989101440609e-01, 4.540109734589827e-01, 4.471989101440848e-01, -3.014119613091134e-01, -3.173345645861478e-01, -9.693811793235037e-02, -1.009608942975917e-01, -1.306893064340761e-01, -1.280703868579214e-01, -1.056201808456668e-01, -1.060325497753309e-01, -9.827265989861929e-02, -9.742601735887298e-02, -9.827265989861823e-02, -9.742601735887622e-02, -3.715336466813089e-02, -4.375524175363863e-02, 2.536864154136923e-02, 2.515986826946040e-02, 1.339335014922523e-02, 1.268221800064726e-02, 3.866226980519580e-02, 3.842156245185513e-02, 2.539314847917508e-02, 2.607211086302235e-02, 2.539314847917466e-02, 2.607211086302154e-02, -9.268309608413711e-03, -2.318938777886390e-02, 9.983427290717361e-03, 9.969082336886882e-03, 1.734382839721334e-02, 1.915617016408055e-02, 7.775495242500826e-03, -7.055766816758949e-02, 3.883226247866933e-02, 4.014622120640289e-02, 3.883226247867955e-02, 4.014622120641257e-02, 1.817380877828292e-04, 1.990922893720622e-04, 3.920860917498078e-07, 3.930261533280597e-07, 9.148209648107627e-06, 1.165788809340735e-05, 4.063328684193492e-02, 4.294991688729459e-02, 2.316378714230696e-05, 6.923493309538235e-05, 2.316378714443998e-05, 6.923493310011717e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
