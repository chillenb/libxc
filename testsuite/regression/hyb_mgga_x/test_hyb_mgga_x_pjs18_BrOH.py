
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_pjs18_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_pjs18", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.076940775790662e+01, -2.076948856291049e+01, -2.076988373854820e+01, -2.076856290358538e+01, -2.076945004219801e+01, -2.076945004219801e+01, -2.880596278475308e+00, -2.880723923397099e+00, -2.884662211232708e+00, -2.883383964609648e+00, -2.880646250223296e+00, -3.576995264950607e+00, -3.292931410416257e-01, -5.657608504620830e-01, -5.538104474625181e-01, -5.559588382686177e-01, -5.660494283021952e-01, -5.660494283021952e-01, -6.049312078942495e-02, -6.199153042474072e-02, -3.019657453900224e-01, -3.415738883181204e-02, -6.094635127887045e-02, -6.094635127887045e-02, -2.589251277198534e-05, -2.973555845167096e-05, -2.050065052477869e-03, -3.782741280256407e-06, -2.856167881900876e-05, -2.856167881900875e-05, -5.224973348286405e+00, -5.225488859006057e+00, -5.225025324610105e+00, -5.007845183209097e+00, -5.225238026716255e+00, -5.225238026716255e+00, -1.474720355056235e+00, -1.500541403623964e+00, -1.463616079298361e+00, -1.484172205049965e+00, -1.506463137886032e+00, -1.962985600803400e+00, -4.317841923167007e-01, -4.759223713659833e-01, -4.054664349124563e-01, -4.232882110752976e-01, -4.519809146310975e-01, -4.064708700554434e-01, -4.847074073066789e-03, -6.671019768125765e-02, -5.131581657602861e-03, -1.834951356396446e+00, -2.249385251678231e-02, -2.249385251678231e-02, -7.994740913126578e-07, -4.746329151432953e-06, -1.480519034523760e-06, -1.151164618345770e-03, -9.104374054175274e-07, -3.409848866259666e-06, -4.396645524163754e-01, -4.365983255259017e-01, -4.315531587294573e-01, -4.384936686475244e-01, -4.380660515446483e-01, -4.380660515446483e-01, -4.202757567388384e-01, -3.526731380482904e-01, -3.711134151098918e-01, -3.888863754121322e-01, -3.797335643229336e-01, -3.533820917963158e-01, -5.094172234241501e-01, -6.136171500648235e-02, -1.389400794213962e-01, -1.622025630632628e-01, -1.691905861017006e-01, -1.691905861017005e-01, -2.524453840148408e-01, -1.692097996431019e-03, -3.893739021173259e-03, -1.843174970524267e-01, -3.416573197250166e-03, -9.441635969793770e-03, -5.160847276890083e-05, -9.652117663719633e-08, -5.595881459248138e-07, -8.143939954887356e-03, -1.933803042091794e-06, -1.933803042091786e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_pjs18_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_pjs18", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.960431325081831e+01, -2.960437558905817e+01, -2.960470787312619e+01, -2.960368495604008e+01, -2.960434568619247e+01, -2.960434568619247e+01, -4.775582600376926e+00, -4.775553407480183e+00, -4.774856279179141e+00, -4.775522665877083e+00, -4.775598143459678e+00, -4.061570017176797e+00, -7.709629028016980e-01, -6.034899259564618e-01, -5.775823080200155e-01, -5.858028378711332e-01, -6.041417136597012e-01, -6.041417136597012e-01, -7.955782670895689e-02, -8.208856238835054e-02, -9.973168474093047e-01, -3.509479150562156e-02, -8.030695862603179e-02, -8.030695862603179e-02, -2.481391588640789e-05, -2.848090342875727e-05, -1.652154892884645e-03, -2.381322493987938e-06, -2.772203813335516e-05, -2.772203813335523e-05, -6.729697092511726e+00, -6.732961925274275e+00, -6.730052072283367e+00, -7.044156605277057e+00, -6.731343163419924e+00, -6.731343163419924e+00, -2.619657039913985e+00, -2.635065492600179e+00, -2.613635363111507e+00, -2.625537398273943e+00, -2.637914913146163e+00, -2.200091833247949e+00, -5.614812107332040e-01, -6.498663003200148e-01, -5.139760301760533e-01, -5.607270809561189e-01, -5.977149160945577e-01, -6.535056867949176e-01, -1.626613442419234e-02, -7.588679870734688e-02, -1.606412044711700e-02, -2.266718704027710e+00, -2.388553456230495e-02, -2.388553456230495e-02, -2.297020796475752e-06, -3.325776443538451e-06, -1.632848082643438e-06, -4.148435499781833e-03, -2.601242435652855e-06, -2.597906131576136e-06, -6.377152007802074e-01, -6.283540665596535e-01, -6.398848382863022e-01, -6.343987352725639e-01, -6.331044179150314e-01, -6.331044179150314e-01, -6.100239797639950e-01, -4.632269970944256e-01, -5.046207399749157e-01, -5.449199557626150e-01, -5.241662508393164e-01, -5.583113347455164e-01, -6.812491489306235e-01, -1.431916088036820e-01, -1.706579036588892e-01, -3.047209350619196e-01, -2.149946995264135e-01, -2.149946995264135e-01, -4.474907222376011e-01, -1.306769866505007e-03, -3.143025907825193e-03, -2.487734025934098e-01, -9.705370148024084e-03, -9.327749347739688e-03, -3.541973062177917e-05, -6.938877297728128e-08, -5.186881898136113e-07, -8.299881167400535e-03, -1.667739732716937e-06, -1.667739732716929e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_pjs18_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_pjs18", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-9.876826691476012e-09, -9.876649708011926e-09, -9.875797097873916e-09, -9.878688351792999e-09, -9.876733990636546e-09, -9.876733990636546e-09, -2.199850631827412e-05, -2.199546524124317e-05, -2.190116308051970e-05, -2.193065813848373e-05, -2.199724685583921e-05, -8.614117019237200e-06, -1.981087705157362e-02, -4.068343516800802e-03, -4.195119261896588e-03, -4.205523265028903e-03, -4.065455793461223e-03, -4.065455793461223e-03, -2.697667910472187e-01, -2.640476519329677e-01, -1.441249574845441e-02, -4.045519151339120e-01, -2.679997223792895e-01, -2.679997223792895e-01, -1.836208997247242e+00, -1.828396046815456e+00, -1.248069685632731e+00, -1.908105510150450e+00, -1.830934736878652e+00, -1.830934736878664e+00, -2.184480703815239e-06, -2.183160979772246e-06, -2.184343409910065e-06, -2.508929065355200e-06, -2.183810381638291e-06, -2.183810381638291e-06, -2.421344734819542e-04, -2.298444212352572e-04, -2.475648557992570e-04, -2.375446385864845e-04, -2.271582245840748e-04, -7.740698533104292e-05, -9.966768833945512e-03, -7.759528703979195e-03, -1.151554929358605e-02, -1.054120514504533e-02, -8.911292304314386e-03, -1.197702116270819e-02, -1.493039474137161e+00, -2.294580266312822e-01, -1.403791299072184e+00, -1.077348092472239e-04, -5.428889386646031e-01, -5.428889386646031e-01, -1.627522073748158e+00, -1.902326048577687e+00, -1.932202588307753e+00, -1.872080465613269e+00, -1.613165809592205e+00, -1.911995985661143e+00, -8.064597500295062e-03, -8.805781869931957e-03, -8.082958288689435e-03, -8.364379145236921e-03, -8.468986329145693e-03, -8.468986329145693e-03, -9.268706759849537e-03, -1.639710851734847e-02, -1.461500592777661e-02, -1.283984764811909e-02, -1.376872005802670e-02, -1.553364221234622e-02, -6.498411170225493e-03, -3.564880249814790e-01, -9.373803219868655e-02, -8.863772017121072e-02, -6.991162203363903e-02, -6.991162203363901e-02, -3.850060721461341e-02, -1.291536501896534e+00, -1.076784497194706e+00, -6.224540717450299e-02, -1.346912292020872e+00, -8.229812934992690e-01, -1.786566790399070e+00, -1.961211734024165e+00, -1.945958996386008e+00, -8.743864826259713e-01, -1.925746767703498e+00, -1.925746767703497e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_pjs18_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_pjs18", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.084624485279050e-03, 1.084621854018385e-03, 1.084608177766323e-03, 1.084651304882166e-03, 1.084623113838234e-03, 1.084623113838234e-03, 6.597507957599486e-03, 6.597494380128664e-03, 6.596854930297914e-03, 6.596585637126999e-03, 6.597473415178126e-03, 3.387964593277859e-03, 2.794327261894313e-02, 1.065854058952576e-02, 1.008056611953831e-02, 1.036775982203729e-02, 1.067345102362249e-02, 1.067345102362249e-02, 1.256669475818401e-02, 1.288679176524117e-02, 2.476319489219844e-02, 6.254623027755162e-03, 1.265974434921254e-02, 1.265974434921254e-02, 9.569904024315137e-06, 1.096351316735865e-05, 5.459162852185886e-04, 1.084735096310502e-06, 1.063712714205415e-05, 1.063712714205414e-05, 3.506107997238424e-03, 3.510727441642436e-03, 3.506621913346764e-03, 4.431647579292965e-03, 3.508420247755514e-03, 3.508420247755514e-03, 1.150098678661385e-02, 1.142508608774435e-02, 1.153194813790556e-02, 1.147231678667581e-02, 1.141000061603543e-02, 5.494008244234057e-03, 1.934535036042761e-02, 2.165118656082585e-02, 1.838458821328175e-02, 2.037960365233608e-02, 2.000964617008066e-02, 2.962355597372511e-02, 6.362066408673922e-03, 1.049086327584174e-02, 6.167837289001655e-03, 7.648923313089205e-03, 4.957713785155595e-03, 4.957713785155595e-03, 1.000322060845617e-06, 1.450652889107485e-06, 6.191819599087823e-07, 1.856933250920470e-03, 1.129379532362364e-06, 1.101953043278562e-06, 2.802385652090936e-02, 2.667971322606511e-02, 2.977969771182271e-02, 2.751132667270698e-02, 2.732310479459170e-02, 2.732310479459170e-02, 2.797913868241629e-02, 2.049251939568246e-02, 2.228740177681723e-02, 2.421808550936269e-02, 2.319138999995974e-02, 3.140921399763896e-02, 2.001963912154263e-02, 2.831909332994351e-02, 1.607303156507616e-02, 3.428857950590158e-02, 1.810968297485370e-02, 1.810968297485369e-02, 3.335585799472918e-02, 4.448085129105166e-04, 9.559471303812360e-04, 2.096831303827441e-02, 3.778522020759375e-03, 2.389030218098733e-03, 1.503322928538477e-05, 3.047751593156017e-08, 2.077883683428272e-07, 2.187494760516315e-03, 6.804039567075597e-07, 6.804039567075563e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
