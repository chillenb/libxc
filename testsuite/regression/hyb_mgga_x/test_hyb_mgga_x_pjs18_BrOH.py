
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_pjs18_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_pjs18", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.206573123441026e+01, -2.206577775593411e+01, -2.206606590630969e+01, -2.206530477970686e+01, -2.206575506518053e+01, -2.206575506518053e+01, -3.266350059135507e+00, -3.266390536463160e+00, -3.267855935419660e+00, -3.269377403828922e+00, -3.266366016237118e+00, -3.266366016237118e+00, -4.599787903117766e-01, -4.597554580734945e-01, -4.566157311270158e-01, -4.666057688263993e-01, -4.599031240972006e-01, -4.599031240972006e-01, -5.869165806499461e-02, -5.995802281395830e-02, -4.752376758415562e-01, -2.890552571975080e-02, -5.905317522852823e-02, -5.905317522852823e-02, -2.557745635445308e-05, -2.927890352735989e-05, -1.868362447833623e-03, -2.848709790565110e-06, -2.818564071162833e-05, -2.818564071162833e-05, -5.223639321561867e+00, -5.224170379053359e+00, -5.223709851604044e+00, -5.224121972122545e+00, -5.223889153828244e+00, -5.223889153828244e+00, -1.913517030480554e+00, -1.929231651356783e+00, -1.913186204563200e+00, -1.925546985025426e+00, -1.924648810245506e+00, -1.924648810245506e+00, -4.120894982054992e-01, -4.545617750725603e-01, -3.763561524440155e-01, -3.924905686050544e-01, -4.361182970963598e-01, -4.361182970963598e-01, -1.524124903172219e-02, -6.482720877845152e-02, -1.445900343026256e-02, -1.690011274675153e+00, -2.093481016621292e-02, -2.093481016621292e-02, -2.664229946228657e-06, -3.861509149845380e-06, -1.391515316043033e-06, -4.232484986696948e-03, -2.640787687220866e-06, -2.640787687220866e-06, -4.378160243208995e-01, -4.346564549745997e-01, -4.357297952072945e-01, -4.366014527789392e-01, -4.361592846439091e-01, -4.361592846439090e-01, -4.166678824442174e-01, -3.504314277825080e-01, -3.681224890898196e-01, -3.853454279600745e-01, -3.762723305029432e-01, -3.762723305029432e-01, -4.797151041757143e-01, -1.013331964338078e-01, -1.345000930402522e-01, -1.934860288922292e-01, -1.623286591998749e-01, -1.623286591998749e-01, -2.953644592368643e-01, -1.600882092880286e-03, -3.480180072346401e-03, -1.728540524638021e-01, -8.628098879106236e-03, -8.628098879106228e-03, -3.991378924097495e-05, -6.783331829964775e-08, -5.300178200419350e-07, -7.411414538974052e-03, -1.516094807791556e-06, -1.516094807791549e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_pjs18_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_pjs18", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.779206675789198e+01, -2.779217088236388e+01, -2.779264176612196e+01, -2.779093723484082e+01, -2.779212160788927e+01, -2.779212160788927e+01, -4.212752673450753e+00, -4.212838276592347e+00, -4.215458200409561e+00, -4.213272183334999e+00, -4.212807162855574e+00, -4.212807162855574e+00, -6.096239244815541e-01, -6.079836632686157e-01, -5.672945018784433e-01, -5.787433705460210e-01, -6.090346350706340e-01, -6.090346350706340e-01, -7.974158303174683e-02, -8.234158333792135e-02, -7.386890205782065e-01, -3.408275183015394e-02, -8.051261850383265e-02, -8.051261850383265e-02, -2.480982527843044e-05, -2.847464200050477e-05, -1.632498139679454e-03, -2.372556988957034e-06, -2.771713542376537e-05, -2.771713542376537e-05, -6.731239087643026e+00, -6.734490333211042e+00, -6.731573078945705e+00, -6.734100981500888e+00, -6.732904606937734e+00, -6.732904606937734e+00, -2.175065139732352e+00, -2.198179284328912e+00, -2.164796584163720e+00, -2.182888403228424e+00, -2.204388569169939e+00, -2.204388569169939e+00, -5.771069289975392e-01, -6.761520590452577e-01, -5.338431389150402e-01, -5.929758293526045e-01, -6.119347290384892e-01, -6.119347290384892e-01, -1.544847175460867e-02, -7.558592132989141e-02, -1.515269068060765e-02, -2.427601233653903e+00, -2.363199643425729e-02, -2.363199643425729e-02, -2.291615653612037e-06, -3.317303132477902e-06, -1.632676806432507e-06, -4.057978420142762e-03, -2.592332087267525e-06, -2.592332087267524e-06, -6.401084902777602e-01, -6.309528169529880e-01, -6.343635556235282e-01, -6.369096759347190e-01, -6.356471588017024e-01, -6.356471588017023e-01, -6.147603883012882e-01, -4.646049424953337e-01, -5.072302738763557e-01, -5.489149461603566e-01, -5.276254852075745e-01, -5.276254852075745e-01, -7.160110537061066e-01, -1.222117821075666e-01, -1.709223831473717e-01, -2.705003063138356e-01, -2.166340847308574e-01, -2.166340847308574e-01, -3.979517689425528e-01, -1.296964254217937e-03, -3.084420490214212e-03, -2.557871798546330e-01, -9.212572990726265e-03, -9.212572990726253e-03, -3.512435977134228e-05, -6.933818525179458e-08, -5.186042365178583e-07, -8.212912073609146e-03, -1.665841953029442e-06, -1.665841953029435e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_pjs18_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_pjs18", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-7.748875532348033e-09, -7.748810953609496e-09, -7.748404707656879e-09, -7.749460928824920e-09, -7.748842509681386e-09, -7.748842509681386e-09, -1.283286840469154e-05, -1.283259511549249e-05, -1.282041953954583e-05, -1.279087196872339e-05, -1.283274509348460e-05, -1.283274509348460e-05, -7.891737851688915e-03, -7.889286300200997e-03, -7.699628300676361e-03, -7.359999261433459e-03, -7.890754254294089e-03, -7.890754254294089e-03, -2.821248339580526e-01, -2.775854842918425e-01, -5.994269799814367e-03, -4.782735567590327e-01, -2.808739199822432e-01, -2.808739199822432e-01, -1.837117302507348e+00, -1.829605749187731e+00, -1.277247030048599e+00, -1.917280362605255e+00, -1.831956765400936e+00, -1.831956765400937e+00, -2.186647273863288e-06, -2.185294579561084e-06, -2.186479009971153e-06, -2.185428899437239e-06, -2.185997098612075e-06, -2.185997098612075e-06, -8.533495217594193e-05, -8.325016033479960e-05, -8.502220957711733e-05, -8.338941492033810e-05, -8.429954812834717e-05, -8.429954812834717e-05, -1.157711491359159e-02, -8.654449094440577e-03, -1.462583910667746e-02, -1.316598283965031e-02, -9.969908184757284e-03, -9.969908184757284e-03, -6.688565518456306e-01, -2.394954144487606e-01, -6.908497795027372e-01, -1.512605608087370e-04, -5.763659259947007e-01, -5.763659259947007e-01, -1.918919289028695e+00, -1.909798015903989e+00, -1.933717645610818e+00, -1.071050847165654e+00, -1.920199477162277e+00, -1.920199477162277e+00, -7.886334067483338e-03, -8.756317626649978e-03, -8.480195369877265e-03, -8.240832464931770e-03, -8.363663211782542e-03, -8.363663211782543e-03, -8.897920095446587e-03, -1.672366135968471e-02, -1.495908982321649e-02, -1.309628695026274e-02, -1.410386862835649e-02, -1.410386862835649e-02, -7.712116129389300e-03, -1.447360839524876e-01, -1.006637489996494e-01, -5.864411773897971e-02, -7.722159826541883e-02, -7.722159826541886e-02, -2.489014947681752e-02, -1.307955765294959e+00, -1.117679556942026e+00, -7.249488256113985e-02, -8.631941037324498e-01, -8.631941037324553e-01, -1.809549819157152e+00, -1.963927727409469e+00, -1.946854856753629e+00, -9.162864229611281e-01, -1.932122891222093e+00, -1.932122891222090e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_pjs18_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_pjs18", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_pjs18_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_pjs18", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [8.026617425822476e-04, 8.026646495248904e-04, 8.026691641752186e-04, 8.026217319457208e-04, 8.026633462692706e-04, 8.026633462692706e-04, 4.498190228401654e-03, 4.498388696270632e-03, 4.503664399648249e-03, 4.493641211613388e-03, 4.498273451654274e-03, 4.498273451654274e-03, 1.641926013246987e-02, 1.636434491082529e-02, 1.486451182078006e-02, 1.487687990870190e-02, 1.639953459644269e-02, 1.639953459644269e-02, 1.306323408788666e-02, 1.346268801520686e-02, 1.606078370931883e-02, 7.092036164414963e-03, 1.318578611437639e-02, 1.318578611437639e-02, 9.574015237302114e-06, 1.096980952248827e-05, 5.559089399852767e-04, 1.088802224304437e-06, 1.064231259590315e-05, 1.064231259590315e-05, 3.510514881339973e-03, 3.515098697494683e-03, 3.510969178725206e-03, 3.514533499909731e-03, 3.512884316879503e-03, 3.512884316879503e-03, 5.735050569049118e-03, 5.751245074156847e-03, 5.673556121207854e-03, 5.686534509152246e-03, 5.826562331330599e-03, 5.826562331330599e-03, 2.234824357270949e-02, 2.621386711904675e-02, 2.265453403442686e-02, 2.637941033805294e-02, 2.254322450090776e-02, 2.254322450090776e-02, 3.712263219677207e-03, 1.083710725065648e-02, 3.689880345328742e-03, 1.051881865969886e-02, 5.195434438177512e-03, 5.195434438177512e-03, 9.787255156333201e-07, 1.455189992949093e-06, 6.196485408186706e-07, 1.302044410585590e-03, 1.105806157259663e-06, 1.105806157259663e-06, 2.885518307935998e-02, 2.737371283042971e-02, 2.787842015434502e-02, 2.828829720252454e-02, 2.808117216338170e-02, 2.808117216338169e-02, 2.964580751299606e-02, 2.087220905101796e-02, 2.289702361124897e-02, 2.512721848646889e-02, 2.397522657986403e-02, 2.397522657986403e-02, 2.525972103950956e-02, 1.397187157747465e-02, 1.698684720522934e-02, 2.218296008066802e-02, 1.963797932751955e-02, 1.963797932751954e-02, 2.139756754055268e-02, 4.492147847596222e-04, 9.838991096721523e-04, 2.441028926594512e-02, 2.481407721400180e-03, 2.481407721400179e-03, 1.518541168210195e-05, 3.051156918029238e-08, 2.078711396691710e-07, 2.272073421580806e-03, 6.823222190523527e-07, 6.823222190523492e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
