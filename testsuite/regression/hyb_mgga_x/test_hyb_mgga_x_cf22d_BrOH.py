
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_cf22d_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_cf22d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([9.554336401459004e-01, 9.559280477851276e-01, 9.580917420120659e-01, 9.500478340065233e-01, 9.556940763394384e-01, 9.556940763394384e-01, -2.289821683888817e+00, -2.289432586701954e+00, -2.277812867288909e+00, -2.282512468313316e+00, -2.289725563993007e+00, -2.243021619199784e+00, -3.941241545143958e-01, -6.975046753431868e-01, -7.331332446159041e-01, -7.139901299784863e-01, -6.965436609022390e-01, -6.965436609022390e-01, -1.583947841550485e-01, -1.597879902732593e-01, -5.334471071662639e-01, -9.488062781152680e-02, -1.588424039274428e-01, -1.588424039274428e-01, 3.547076363409678e-04, 3.758382623066125e-04, -2.812139315923257e-03, 1.195210054584441e-04, 3.656467047303954e-04, 3.656467047303790e-04, -7.750596548386469e-02, -4.918431220774285e-02, -7.439259229447860e-02, 1.250968307000918e+00, -6.334756674636964e-02, -6.334756674636964e-02, -1.366670103748337e+00, -1.348247262455359e+00, -1.375035750475780e+00, -1.360454292505825e+00, -1.342765579651394e+00, -1.466408777012302e+00, -3.101222394989980e-01, -2.691565435150354e-01, -3.300208594099570e-01, -2.886818268335768e-01, -2.986754124471973e-01, -2.711065049289262e-01, 2.406282711462745e-02, -1.630716245676914e-01, 2.377305034255347e-02, -8.280432032313536e-01, -7.394020824482217e-02, -7.394020824482217e-02, 2.856446599772577e-03, 1.419355111860287e-04, 7.130242549526192e-05, 2.355031947743980e-02, 2.970452312659850e-03, 1.168344487561372e-04, -6.673437944905060e-02, -1.324027232842330e-01, -4.330476713791612e-02, -9.353925223895403e-02, -1.028427724444432e-01, -1.028427724444432e-01, -9.735134461580564e-02, -2.780370688425418e-01, -2.485183495465194e-01, -2.174610942981060e-01, -2.346335802528786e-01, -2.102107996566840e-01, -3.034469707394705e-01, -5.857302728313761e-02, -2.392014993212933e-01, -1.648379136337287e-01, -2.464737815045287e-01, -2.464737815045287e-01, -2.254953127698077e-01, -1.433215311852538e-03, -7.338301041771272e-03, -2.172618106406545e-01, 2.431803667380256e-02, -3.254473260268075e-02, 5.561568847353652e-04, 8.010142163255490e-06, 3.593287567954821e-05, -3.076929938240913e-02, 8.279659769813645e-05, 8.279659769812915e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_cf22d_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_cf22d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([3.182877771862471e+01, 3.182998494170113e+01, 3.183532922417427e+01, 3.181567903373337e+01, 3.182941322742919e+01, 3.182941322742919e+01, -2.727301007134845e-01, -2.722148549493441e-01, -2.567333277854655e-01, -2.626754310482615e-01, -2.725844776699949e-01, 6.416971761362750e-01, -5.380072591757519e-01, -7.023967872512077e-02, -9.927315749152026e-02, -8.668565357246694e-02, -6.963022492049517e-02, -6.963022492049517e-02, -1.182115301150739e-01, -1.152234900333523e-01, -7.779540189051097e-01, -1.517464274375493e-01, -1.173858398427366e-01, -1.173858398427366e-01, 2.542409173874728e-04, 2.407335614256575e-04, -1.599360065318153e-02, 1.807012333228517e-04, 2.278205240388724e-04, 2.278205240386701e-04, 7.388653876675091e+00, 7.486718723602390e+00, 7.399465611033325e+00, 9.463761925214262e+00, 7.437784596107615e+00, 7.437784596107615e+00, -6.856859791704942e-01, -6.396254563267239e-01, -7.065814740699181e-01, -6.692156577519754e-01, -6.279312758321801e-01, 3.671978392744648e-01, -1.804442418877077e-01, -1.644982771860525e-01, -1.403233257461669e-01, -1.874525015979844e-01, -2.016339612168372e-01, -1.990349727080607e-01, 1.392824944722953e-02, -1.670849726482070e-01, 1.322560097572394e-02, -3.913268966322668e-01, -1.301378548680604e-01, -1.301378548680604e-01, 3.777572781735071e-03, 2.065897909265369e-04, 9.512002979401709e-05, 2.565214273517609e-02, 3.926970444071940e-03, 1.704725314769875e-04, 2.052851115765075e-01, 1.152701165633818e-01, 1.688406880435086e-01, 1.742269974771294e-01, 1.617062573703730e-01, 1.617062573703730e-01, 1.423583111835718e-01, -1.408570467910390e-01, -1.630915150501033e-01, -1.239966998277999e-01, -1.552421799446375e-01, -9.312644886933942e-02, -2.120645227102917e-01, -1.763614575341327e-01, -1.294301288063149e-01, -2.688763109625946e-01, -1.018244411765323e-01, -1.018244411765320e-01, -2.888696429621159e-01, -1.169407299929104e-02, -2.923906521497847e-02, -7.397361964124063e-02, 1.984662297449854e-02, -8.010882481851030e-02, 5.725217660174761e-04, 1.466955365647514e-05, 5.636903814931764e-05, -7.646006882558812e-02, 1.215795327345431e-04, 1.215795327344530e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_cf22d_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_cf22d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.648088757564554e-08, -2.648248209998634e-08, -2.648923698031477e-08, -2.646332648590065e-08, -2.648172902395945e-08, -2.648172902395945e-08, -8.441609526229942e-07, -8.416025007461646e-07, -7.655092575955055e-07, -7.940628936385180e-07, -8.434111701108596e-07, 9.391922930964386e-07, -1.754515660326212e-02, -7.823895802862886e-03, -8.941999349523447e-03, -8.591948806510848e-03, -7.795520594997999e-03, -7.795520594997999e-03, -1.254936992754906e+00, -1.229127591377883e+00, -9.824882430278851e-03, -1.017393405991198e+00, -1.246811412865753e+00, -1.246811412865753e+00, 2.742348774986608e+00, 2.667712276599237e+00, -3.330377444298673e-01, 1.176167792907721e+00, 2.800587491182827e+00, 2.800587491185798e+00, -1.324312808632359e-05, -1.341453549229468e-05, -1.326206168765027e-05, -1.477858175421269e-05, -1.332885320619110e-05, -1.332885320619110e-05, -7.377604697364171e-05, -6.472895440955414e-05, -7.793931900708484e-05, -7.041975251539595e-05, -6.265797391612534e-05, -2.775387683724094e-05, -3.985855802790122e-03, -9.013955669957078e-03, -7.460749871515459e-03, -3.980461271693334e-03, -3.462669175397946e-03, -9.994904670653877e-03, -8.716348295218080e+01, -7.522028070730883e-01, -9.178591041489541e+01, -4.404621437566124e-05, -1.485223140149293e+00, -1.485223140149293e+00, -2.517883803379047e+07, 1.461668210080604e+00, 5.952523636489787e+00, -6.926443728600062e+02, -2.139273414407057e+07, 1.825584305464550e+00, -1.251341258383285e-01, -7.763878687457183e-02, -9.572734887647379e-02, -1.051851419826904e-01, -9.844220680002018e-02, -9.844220680002018e-02, -1.161476809833135e-01, -8.519073916597932e-03, -6.204519681554665e-03, -1.860019800802135e-02, -9.659319308054240e-03, -1.859001518610892e-02, -4.428880914728203e-03, -1.780026890056486e+00, -2.694250574018381e-01, -2.184664709398322e-01, -1.659364363871146e-01, -1.659364363871145e-01, -5.646244737524828e-02, -1.931175705043732e-01, -5.785529167362143e-01, -9.652745678019800e-02, -2.153105338350742e+02, -1.464345915631729e+00, 1.013932752077565e+00, 1.798455951389839e+00, 3.414617368771055e+00, -1.676695794518950e+00, 2.619596496469288e+00, 2.619596496435368e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_cf22d_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_cf22d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-1.775361273238459e-02, -1.775432031134103e-02, -1.775737861973792e-02, -1.774587284063827e-02, -1.775398571783674e-02, -1.775398571783674e-02, -2.145818509080936e-02, -2.146264999579646e-02, -2.159665234256548e-02, -2.154363820071533e-02, -2.145936027799405e-02, -2.840352374997507e-02, -4.865568375320806e-03, -2.642996669336723e-02, -1.861766385262464e-02, -2.186625012129907e-02, -2.663541917379447e-02, -2.663541917379447e-02, 8.879620597948716e-02, 8.531005182063668e-02, -1.414734582231720e-03, 6.919669441182907e-02, 8.782964761761890e-02, 8.782964761761890e-02, 3.899723818596636e-04, 4.448018415205993e-04, 9.847041567361232e-03, 1.519051812345061e-05, 4.506871241271804e-04, 4.506871241272376e-04, -5.660462262829198e-02, -5.758399915271151e-02, -5.671218430952291e-02, -1.082139138060993e-01, -5.709374584761064e-02, -5.709374584761064e-02, -2.342972608010273e-02, -2.436153147772800e-02, -2.301111613731804e-02, -2.376043312909721e-02, -2.460316238902296e-02, -4.117751112314100e-02, -7.735787419515232e-02, -7.546155026488632e-02, -7.572615584053040e-02, -8.051732778163773e-02, -7.423112133842548e-02, -7.652872360789804e-02, 5.647574097681138e-03, 7.975655881314458e-02, 6.439398372091689e-03, -2.382199187150513e-02, 7.259274228294638e-02, 7.259274228294638e-02, 3.856643077285671e-07, 2.571275799093673e-05, 4.236452699360186e-05, 1.123473705414275e-03, 4.467246241132604e-07, 2.393501006451929e-05, -1.646290130689060e-01, -1.513210459319538e-01, -4.028194748175044e-01, -1.630503110256695e-01, -1.611902057863320e-01, -1.611902057863320e-01, -1.293862055254538e-01, -9.199600746963162e-02, -9.893696619043611e-02, -1.032982202983462e-01, -1.003719415942553e-01, -1.533340258294186e-01, -6.353088388791994e-02, 4.471810506240640e-02, 2.489910949262875e-02, 2.185304331021749e-02, -1.892774492123056e-02, -1.892774492123064e-02, -1.048856866056760e-02, 7.486114274658028e-03, 1.513009482715975e-02, -9.550321529917938e-02, 4.983143858731584e-03, 4.562517977450630e-02, 2.468372213820357e-04, 5.777842020564490e-07, 7.812464546626541e-06, 4.747318719253287e-02, 2.061356900075642e-05, 2.061356900071382e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
