
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_cf22d_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_cf22d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.664587669884125e+00, -2.664276020979699e+00, -2.663035173819523e+00, -2.668110838490301e+00, -2.664422372197280e+00, -2.664422372197280e+00, -2.279421623973815e+00, -2.278979760597659e+00, -2.265788596294196e+00, -2.270904336546939e+00, -2.279311425935878e+00, -2.279311425935878e+00, -5.355252178327203e-01, -5.366567545535244e-01, -5.691682334241954e-01, -5.667515512979892e-01, -5.359213191009005e-01, -5.359213191009005e-01, -1.499898936234834e-01, -1.502793910038395e-01, -6.855648400066892e-01, -8.249857528890481e-02, -1.500047077731053e-01, -1.500047077731053e-01, 3.542270867200549e-04, 3.751538769005864e-04, -2.771374986845329e-03, 1.186910210944154e-04, 3.650580008877125e-04, 3.650580008877244e-04, -6.942000872010325e-02, -4.108423736669078e-02, -6.640717420610733e-02, -4.438651814831031e-02, -5.511618626630393e-02, -5.511618626630393e-02, -1.506825395880471e+00, -1.466824727752070e+00, -1.527887357975861e+00, -1.495156266842850e+00, -1.453573482691562e+00, -1.453573482691562e+00, -3.006881091272727e-01, -2.419237512451121e-01, -3.090099709972105e-01, -2.721663972631022e-01, -2.913341966890059e-01, -2.913341966890059e-01, -4.404137498874144e-02, -1.569632053887313e-01, -4.489818385594558e-02, -7.596364726489810e-01, -6.977166613749425e-02, -6.977166613749425e-02, 1.077879969279517e-04, 1.410355589869380e-04, 7.099273914498685e-05, -9.784997959702061e-03, 1.157695704319102e-04, 1.157695704319120e-04, -3.759204701569139e-02, -1.151307116116286e-01, -9.079839171881851e-02, -6.944183201220312e-02, -8.042011117621756e-02, -8.042011117621756e-02, -5.079610133731713e-02, -2.768479445858004e-01, -2.471833485679664e-01, -2.122241186028011e-01, -2.321107886283392e-01, -2.321107886283393e-01, -2.794453124817181e-01, -2.052744727504631e-01, -2.265758694900964e-01, -2.318708830559680e-01, -2.302408652202180e-01, -2.302408652202180e-01, -2.797228684199322e-01, -1.421494274129847e-03, -7.132972874150271e-03, -1.981674584333177e-01, -3.115584321000639e-02, -3.115584321000631e-02, 5.466138181414899e-04, 7.966781575347839e-06, 3.587624866084773e-05, -2.943241998447127e-02, 8.195670521029475e-05, 8.195670521028067e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_cf22d_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_cf22d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [1.980950891073617e+01, 1.981083006816671e+01, 1.981622191435842e+01, 1.979469901806920e+01, 1.981020857974313e+01, 1.981020857974313e+01, 1.124309594168774e-01, 1.124261509508971e-01, 1.124245826105935e-01, 1.145743054399720e-01, 1.124198552640076e-01, 1.124198552640076e-01, -3.094933572650651e-01, -3.092774749854254e-01, -3.037429876210989e-01, -2.875074934508381e-01, -3.093926602329369e-01, -3.093926602329369e-01, -1.160185257276324e-01, -1.134793360056076e-01, -5.466834418692693e-01, -1.329178513329650e-01, -1.152682984640169e-01, -1.152682984640169e-01, 2.523576041073168e-04, 2.380527153849436e-04, -1.593674628596724e-02, 1.774106347216574e-04, 2.255140210835459e-04, 2.255140210835332e-04, 7.402498590056704e+00, 7.500371066920605e+00, 7.413114592666323e+00, 7.489169067840048e+00, 7.451767571164186e+00, 7.451767571164186e+00, 2.925843637745648e-01, 2.669298402246735e-01, 3.251327070174945e-01, 3.059558707919360e-01, 2.335752079083389e-01, 2.335752079083389e-01, -1.978916488351405e-01, -7.477638030307443e-02, -2.050425604146165e-01, -1.909279407001624e-01, -1.916362385054037e-01, -1.916362385054037e-01, -9.903673382713009e-02, -1.622489829636827e-01, -9.930964858418576e-02, 1.225010006649868e-01, -1.231735000773203e-01, -1.231735000773203e-01, 1.579397584608361e-04, 2.030257445345218e-04, 9.389066296500842e-05, -3.639568694990406e-02, 1.662484050813188e-04, 1.662484050813645e-04, 1.986333313708164e-01, 1.265043650259149e-01, 1.559177230304014e-01, 1.763964707284491e-01, 1.664544590709327e-01, 1.664544590709327e-01, 1.462975152052529e-01, -1.447046491975461e-01, -1.594141798379416e-01, -1.042902712905000e-01, -1.441306776495563e-01, -1.441306776495564e-01, -1.368975152179608e-01, -1.537820504933123e-01, -1.356121813976882e-01, -1.329608990430807e-01, -1.213085237924486e-01, -1.213085237924485e-01, -1.396410845063926e-01, -1.167748825906327e-02, -2.883660707356188e-02, -1.220236158413140e-01, -7.745824308336716e-02, -7.745824308336684e-02, 5.348855313564224e-04, 1.449657898799411e-05, 5.614378894890406e-05, -7.391231522696759e-02, 1.182428685993150e-04, 1.182428685990878e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_cf22d_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_cf22d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.256553760200049e-08, -2.256707245193666e-08, -2.257347719564112e-08, -2.254852654343474e-08, -2.256634852841791e-08, -2.256634852841791e-08, 1.200330156108815e-06, 1.202597151895208e-06, 1.270041403803629e-06, 1.248057487299645e-06, 1.200928014133760e-06, 1.200928014133760e-06, -9.858270976218532e-03, -9.888106844285328e-03, -1.056458421730991e-02, -1.004341709973624e-02, -9.868848079636955e-03, -9.868848079636955e-03, -1.322575460620488e+00, -1.306952028195008e+00, -6.386614918113044e-03, -1.042403141569982e+00, -1.318344751417888e+00, -1.318344751417888e+00, 2.861772086993362e+00, 2.816514120088912e+00, -2.138337842657766e-01, 2.455588881140720e+00, 2.935401048401030e+00, 2.935401048405220e+00, -1.325165640508103e-05, -1.342304799986894e-05, -1.327048063485714e-05, -1.340364505079357e-05, -1.333751917137209e-05, -1.333751917137209e-05, -3.481138345720689e-05, -2.819791778406730e-05, -3.804818932986333e-05, -3.257214063560173e-05, -2.642884870023318e-05, -2.642884870023318e-05, -6.490909414803785e-03, -1.209553271204522e-02, -1.179086647117165e-02, -9.209890454145862e-03, -5.360493037040092e-03, -5.360493037040092e-03, -9.925127600760444e-01, -7.690494753172188e-01, -1.131681991468370e+00, -7.992959620525160e-05, -1.498690420417835e+00, -1.498690420417835e+00, 2.608171594344338e+00, 2.571002511969510e+00, 7.599221020449846e+00, -3.526207844940485e-01, 3.855131971799167e+00, 3.855131971890714e+00, -1.265050772538913e-01, -7.861938935865351e-02, -9.324822283011655e-02, -1.063922268413461e-01, -9.959455906691723e-02, -9.959455906691723e-02, -1.188707827939976e-01, -9.055291206577096e-03, -7.004516164739350e-03, -1.977326748627230e-02, -1.066713285846546e-02, -1.066713285846546e-02, -7.230497903739743e-03, -4.601693006764062e-01, -2.837311676011939e-01, -1.108380292817175e-01, -1.828371196060847e-01, -1.828371196060850e-01, -2.686095510402093e-02, -1.357001579590555e-01, -4.846261160146390e-01, -1.309271951120695e-01, -1.384175046797357e+00, -1.384175046797369e+00, 2.121033710044049e+00, 4.892333395185013e+00, 4.068730422473591e+00, -1.548633499291468e+00, 5.741801183516340e+00, 5.741801183564090e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_cf22d_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_cf22d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_cf22d_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_cf22d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-8.333163936965843e-03, -8.333590474184093e-03, -8.335127149102185e-03, -8.328174254721751e-03, -8.333391654205597e-03, -8.333391654205597e-03, -2.457049815552417e-02, -2.457223174850810e-02, -2.462437941052283e-02, -2.462110216283748e-02, -2.457078291905185e-02, -2.457078291905185e-02, -1.575289253272685e-02, -1.562725655581909e-02, -1.243623078582387e-02, -1.470787458086446e-02, -1.571027352569867e-02, -1.571027352569867e-02, 8.426544627158911e-02, 8.109622713275229e-02, -5.940477682088336e-03, 5.092796926164718e-02, 8.330724053123309e-02, 8.330724053123309e-02, 3.898274589555997e-04, 4.445729801952286e-04, 9.589650099488896e-03, 1.517351604161112e-05, 4.504861823820821e-04, 4.504861823821395e-04, -5.692354180773974e-02, -5.790304900330873e-02, -5.702709204785723e-02, -5.778832047825722e-02, -5.741818108911351e-02, -5.741818108911351e-02, -3.907783992931902e-02, -3.949469901757441e-02, -3.916052018285276e-02, -3.955232291113095e-02, -3.919884058804086e-02, -3.919884058804086e-02, -6.637079116568226e-02, -1.396306916905526e-01, -5.141652343244605e-02, -7.459910064045766e-02, -7.482344233821600e-02, -7.482344233821600e-02, 4.054278684307487e-02, 7.468971968340503e-02, 4.388699206094412e-02, -4.937187713900131e-02, 6.445537011026690e-02, 6.445537011026690e-02, 2.076503669393090e-05, 2.568405673897570e-05, 4.234344124557776e-05, 1.575975281185694e-02, 2.390076080496263e-05, 2.390076080491983e-05, -2.699502656999899e-01, -2.130289248661456e-01, -2.336059112313466e-01, -2.497272899424363e-01, -2.417120563252739e-01, -2.417120563252739e-01, -3.086727023162379e-01, -8.926034956508166e-02, -9.955805842814043e-02, -1.230828233798459e-01, -1.073983463907562e-01, -1.073983463907562e-01, -1.006057211337075e-01, 5.777287946722558e-02, 2.537090189737261e-02, -3.098383139110986e-02, -9.799815483876687e-03, -9.799815483876716e-03, -6.258933090732378e-02, 7.393562780495258e-03, 1.445946426074386e-02, -5.426311042490400e-02, 4.161459680138069e-02, 4.161459680138090e-02, 2.452411018778330e-04, 5.776806184189759e-07, 7.811471839179507e-06, 4.295918277147116e-02, 2.058667716679573e-05, 2.058667716675319e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
