
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_m06_sx_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06_sx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.420301932982109e+01, -1.420300247170165e+01, -1.420300024367385e+01, -1.420327272477386e+01, -1.420300985542936e+01, -1.420300985542936e+01, -2.332711668668151e+00, -2.332711440099904e+00, -2.332900694375701e+00, -2.334627871334427e+00, -2.332712297073187e+00, -2.332712297073187e+00, -4.449859677370887e-01, -4.449273530032625e-01, -4.444379700878121e-01, -4.539322823288618e-01, -4.449701964280143e-01, -4.449701964280143e-01, -1.490239440393666e-01, -1.500833166289349e-01, -4.420293566699049e-01, -9.941768104115582e-02, -1.492946730290221e-01, -1.492946730290221e-01, -1.770417607378806e-02, -1.851327301770036e-02, -6.339694330176376e-02, -8.620130365324231e-03, -1.832028459401350e-02, -1.832028459401350e-02, -3.278797638760206e+00, -3.275097449119459e+00, -3.278404618773270e+00, -3.275528943636111e+00, -3.276923412296952e+00, -3.276923412296952e+00, -1.485693209333133e+00, -1.493875819531261e+00, -1.488892383914461e+00, -1.495351247982417e+00, -1.487123094845972e+00, -1.487123094845972e+00, -3.925034156464808e-01, -3.928968118340845e-01, -3.702434216626944e-01, -3.660364592072591e-01, -4.044476004274166e-01, -4.044476004274166e-01, -9.253950194552139e-02, -1.490369707256316e-01, -8.955799401617923e-02, -1.203394540921704e+00, -9.291530964782273e-02, -9.291530964782273e-02, -8.314355471285629e-03, -9.495189796988280e-03, -7.115649211506191e-03, -7.704901011366413e-02, -8.652828880170112e-03, -8.652828880170115e-03, -3.628023687128746e-01, -3.409308312081641e-01, -3.425192552606663e-01, -3.478286624085600e-01, -3.446260239941100e-01, -3.446260239941100e-01, -3.341393882491002e-01, -3.624241306342875e-01, -3.620547244068028e-01, -3.531592056495654e-01, -3.591122996681519e-01, -3.591122996681519e-01, -4.158398299424964e-01, -1.924430931244315e-01, -2.203231820462770e-01, -2.517130600894776e-01, -2.365085731688703e-01, -2.365085731688703e-01, -3.249155590618719e-01, -6.079326624478262e-02, -7.354272937038434e-02, -2.294783942610409e-01, -8.005845283161379e-02, -8.005845283161381e-02, -2.075351020907429e-02, -2.608374643554544e-03, -4.949855570563926e-03, -7.623574631985509e-02, -7.357297226877733e-03, -7.357297226877723e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_m06_sx_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06_sx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.445386416723707e+01, -1.445380999325035e+01, -1.445355657568108e+01, -1.445443109840901e+01, -1.445383585862803e+01, -1.445383585862803e+01, -2.677958599334150e+00, -2.678011275075918e+00, -2.679585874597861e+00, -2.677772143841513e+00, -2.677995113397153e+00, -2.677995113397153e+00, -5.358486360992428e-01, -5.357604573098476e-01, -5.346786926505184e-01, -5.289435587818446e-01, -5.358009672054367e-01, -5.358009672054367e-01, -1.529887904643407e-01, -1.517323725284404e-01, -7.130949410335675e-01, -6.833760257668636e-02, -1.526333591914316e-01, -1.526333591914316e-01, -2.296843334570897e-02, -2.395476121077924e-02, -6.111648968095313e-02, -1.144173115964551e-02, -2.370523580480266e-02, -2.370523580480253e-02, -3.236602730674249e+00, -3.233858199360406e+00, -3.236267653132148e+00, -3.234136700324438e+00, -3.235242411124406e+00, -3.235242411124406e+00, -1.381171255938130e+00, -1.393034237532359e+00, -1.374384488071534e+00, -1.383149525936342e+00, -1.398903700107450e+00, -1.398903700107450e+00, -4.450327469897592e-01, -4.597425037705588e-01, -4.273515238430496e-01, -4.569953224641230e-01, -4.544026236578805e-01, -4.544026236578805e-01, -4.440224625148623e-02, -1.695699265168886e-01, -4.306558224795622e-02, -1.535433747139792e+00, -6.093980747863557e-02, -6.093980747863557e-02, -1.103405752344094e-02, -1.258617866717933e-02, -9.430917206880361e-03, -5.583556747207143e-02, -1.147153893464971e-02, -1.147153893464976e-02, -5.788227146775147e-01, -4.387280150515256e-01, -4.822290475648052e-01, -5.224398975113769e-01, -5.017354120596208e-01, -5.017354120596208e-01, -5.112850635004637e-01, -3.691612265312107e-01, -3.785339706436435e-01, -3.628374255400398e-01, -3.748180781473999e-01, -3.748180781474000e-01, -5.066296360133997e-01, -2.044264324190800e-01, -2.093492115298110e-01, -2.549985225550360e-01, -2.205754780194264e-01, -2.205754780194264e-01, -3.346447059177221e-01, -6.255971916971449e-02, -6.108967234112352e-02, -2.498329497170405e-01, -4.069723832234802e-02, -4.069723832234760e-02, -2.690338231365275e-02, -3.476002938602730e-03, -6.585938605795691e-03, -3.840687922927460e-02, -9.761439112957102e-03, -9.761439112957081e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m06_sx_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06_sx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-8.275758877850955e-09, -8.275695637825359e-09, -8.275315671103987e-09, -8.276352116256004e-09, -8.275726358700212e-09, -8.275726358700212e-09, -1.141091710928003e-05, -1.141113720501862e-05, -1.141528859504548e-05, -1.139822802945540e-05, -1.141083726381753e-05, -1.141083726381753e-05, -7.360310755829240e-03, -7.364482113983081e-03, -7.368297525562345e-03, -7.207054839420786e-03, -7.361992196031138e-03, -7.361992196031138e-03, -8.235834143368932e-01, -8.148875624914326e-01, -3.773522576661494e-03, -1.322696811223518e+00, -8.214670381257561e-01, -8.214670381257561e-01, -1.431467351941704e+01, -1.433690229269106e+01, -5.187769678474529e+00, -1.035579463793546e+01, -1.489077102671400e+01, -1.489077102671400e+01, -2.378343647686452e-06, -2.377123529386389e-06, -2.378199174655207e-06, -2.377251405376365e-06, -2.377747290854608e-06, -2.377747290854608e-06, -9.042080466793835e-05, -8.862725082887375e-05, -9.038968415554913e-05, -8.899536400718080e-05, -8.921972420279502e-05, -8.921972420279502e-05, -1.508373245583854e-02, -1.196836788832086e-02, -1.843090034947316e-02, -1.720515694892089e-02, -1.319780116829453e-02, -1.319780116829453e-02, -1.936066666485894e+00, -5.046897834688356e-01, -2.175634034365405e+00, -1.414980111496325e-04, -1.772196218887865e+00, -1.772196218887865e+00, -1.097083514832833e+01, -1.100420669628295e+01, -3.137484977730348e+01, -4.506458514216770e+00, -1.624832340957822e+01, -1.624832340957821e+01, -1.485484534213108e-02, -1.424388511940044e-02, -1.431612359824215e-02, -1.446777076189778e-02, -1.437915184433360e-02, -1.437915184433360e-02, -1.656996964740128e-02, -2.410190596354406e-02, -2.194789383167284e-02, -1.983200137315531e-02, -2.096140322889202e-02, -2.096140322889202e-02, -9.940196502030709e-03, -2.820963554593575e-01, -1.868609948382145e-01, -9.691449957422769e-02, -1.376825696624449e-01, -1.376825696624450e-01, -3.578828555467442e-02, -4.515835541784775e+00, -4.091462710306443e+00, -1.322422759820533e-01, -3.511545418613944e+00, -3.511545418613948e+00, -1.084461373797458e+01, -1.889300479044524e+01, -1.624574114485209e+01, -4.305271291291952e+00, -2.373105687913587e+01, -2.373105687913581e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m06_sx_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06_sx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-7.123962006157541e-04, -7.124714420531289e-04, -7.128006872074682e-04, -7.115769788615252e-04, -7.124358303325494e-04, -7.124358303325494e-04, 2.112833485391328e-03, 2.112988169556686e-03, 2.117531810777431e-03, 2.115566104677086e-03, 2.112866671528848e-03, 2.112866671528848e-03, 1.485685365336462e-02, 1.494429300480411e-02, 1.706740658376052e-02, 1.632079955651954e-02, 1.488753999106824e-02, 1.488753999106824e-02, 6.342330428188955e-02, 6.076222388720058e-02, 1.387995793093324e-02, 1.416261281617772e-02, 6.266905757531251e-02, 6.266905757531251e-02, -3.715108018120048e-04, -4.225782775898485e-04, -7.436080639183816e-03, -1.476541678292988e-05, -4.283521472855439e-04, -4.283521472855439e-04, -7.894427679400724e-03, -7.984683419976889e-03, -7.904508390476510e-03, -7.974633429337042e-03, -7.939799705063031e-03, -7.939799705063031e-03, 3.518317401249771e-03, 3.513232986580963e-03, 3.523651093683162e-03, 3.512865199693340e-03, 3.517328495785653e-03, 3.517328495785653e-03, 1.063600296056228e-02, -2.155104643752350e-02, 1.375506048229358e-02, 6.769800257260802e-03, 4.883858149017020e-03, 4.883858149017020e-03, -1.104012290105807e-02, 5.505329217238362e-02, -1.035807579949013e-02, 1.397222145339709e-03, 7.667893772068533e-03, 7.667893772068533e-03, -2.022351982692159e-05, -2.493205751716518e-05, -4.136084190574207e-05, -1.095861514003339e-02, -2.325319711750759e-05, -2.325319711751477e-05, 4.687578310983389e-01, 2.086662531264470e-02, 1.244187349115049e-01, 2.447345340508865e-01, 1.795181767258262e-01, 1.795181767258262e-01, 2.536234452315762e-01, 1.352465051800758e-02, -2.875840260428100e-04, -4.255460548279787e-02, -1.542370309895337e-02, -1.542370309895337e-02, -5.628682233518907e-03, 5.249989758259482e-02, 3.514409039735068e-02, 1.975292230811602e-02, 2.329487629061195e-02, 2.329487629061196e-02, 1.646651724906448e-02, -5.903299279761258e-03, -1.021783385595775e-02, 2.238698950925536e-02, -1.511696986441376e-02, -1.511696986441419e-02, -2.326598388560084e-04, -5.711173589590671e-07, -7.677900139252442e-06, -1.580147719611277e-02, -2.008487516724379e-05, -2.008487516727362e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
