
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_m06_sx_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06_sx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.289312835938403e+01, -1.289314161972159e+01, -1.289322547165152e+01, -1.289300587668307e+01, -1.289313516991013e+01, -1.289313516991013e+01, -2.040130562265079e+00, -2.040173762646330e+00, -2.041544049299200e+00, -2.041176994941012e+00, -2.040152259194477e+00, -2.639077752528887e+00, -3.501971718709405e-01, -5.578673960072527e-01, -5.477435036473818e-01, -5.503521372219810e-01, -5.580660779622709e-01, -5.580660779622709e-01, -1.541857338908575e-01, -1.559339890170959e-01, -3.600831383852773e-01, -1.121834843432936e-01, -1.547257003515605e-01, -1.547257003515605e-01, -1.770658144521461e-02, -1.851676045869117e-02, -6.405188607262571e-02, -8.623633872659528e-03, -1.832327371035864e-02, -1.832327371035864e-02, -3.280248879759233e+00, -3.276531923687382e+00, -3.279835695164591e+00, -3.045915882348794e+00, -3.278390874150323e+00, -3.278390874150323e+00, -1.124811264713996e+00, -1.137170603566732e+00, -1.119613040274619e+00, -1.129377315917165e+00, -1.139882987677084e+00, -1.528399755243102e+00, -4.187949750305140e-01, -4.224212669842535e-01, -4.085142610515507e-01, -4.075463303849431e-01, -4.257966445417987e-01, -3.662685508957239e-01, -2.046879588553502e-02, -1.529405418782215e-01, -2.005697791456216e-02, -1.351707639195820e+00, -9.738951291714633e-02, -9.738951291714633e-02, -4.548656851405260e-03, -9.499040532846512e-03, -7.116925908370117e-03, -1.957851048736098e-02, -4.729312652064488e-03, -8.657325630033614e-03, -3.662218139228333e-01, -3.440610380377237e-01, -3.352243036172844e-01, -3.511042124667801e-01, -3.478624731188372e-01, -3.478624731188372e-01, -3.406231901183095e-01, -3.656625990760716e-01, -3.664525617334969e-01, -3.585148066939498e-01, -3.642626296200167e-01, -3.248468471259828e-01, -4.548439115468763e-01, -1.101333973821855e-01, -2.285254428630356e-01, -2.023123255505702e-01, -2.487454415432388e-01, -2.487454415432388e-01, -2.674054451356439e-01, -6.108672630771991e-02, -7.486402445109101e-02, -2.504434409997869e-01, -1.721451413062127e-02, -8.303549325976890e-02, -2.080331606510047e-02, -2.608542562999193e-03, -4.950081239215384e-03, -7.930031321170566e-02, -7.360775252771441e-03, -7.360775252771430e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_m06_sx_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06_sx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.607654985482831e+01, -1.607646839871659e+01, -1.607614485204666e+01, -1.607746534475435e+01, -1.607650672394213e+01, -1.607650672394213e+01, -3.001497890226288e+00, -3.001511376071003e+00, -3.002019181702125e+00, -3.002063613357532e+00, -3.001515912144810e+00, -2.479572481060289e+00, -6.196288236362223e-01, -5.267989127469050e-01, -5.487797702478023e-01, -5.367556527476699e-01, -5.262546997918990e-01, -5.262546997918990e-01, -1.554351480491550e-01, -1.540999352221548e-01, -7.850916051848535e-01, -8.704671373943251e-02, -1.550945476917760e-01, -1.550945476917760e-01, -2.297804905777259e-02, -2.396868017023514e-02, -6.334264595721688e-02, -1.145579454403035e-02, -2.371716670139921e-02, -2.371716670139908e-02, -3.234870095216507e+00, -3.232142445603703e+00, -3.234558758198766e+00, -3.537818813025846e+00, -3.233488775070743e+00, -3.233488775070743e+00, -1.685360744754396e+00, -1.696757779647429e+00, -1.681008155360154e+00, -1.689579138979389e+00, -1.699117450572110e+00, -1.384488397971561e+00, -4.232551780623121e-01, -4.251876804268919e-01, -3.993426297386762e-01, -4.157493630214266e-01, -4.348538128972914e-01, -4.996198501825626e-01, -2.164867802047462e-02, -1.738995348119591e-01, -2.315877915558191e-02, -1.381039641326283e+00, -6.852703703571930e-02, -6.852703703571930e-02, -5.943362081466210e-03, -1.260166413339935e-02, -9.436072336721609e-03, -6.349823299940716e-03, -6.167544172956754e-03, -1.148957471439413e-02, -5.749684147188263e-01, -4.349140960779724e-01, -4.912233725449278e-01, -5.186680501728549e-01, -4.979618024644439e-01, -4.979618024644439e-01, -5.037143035594919e-01, -3.669558885901048e-01, -3.745595373508173e-01, -3.567875809032195e-01, -3.696002100659599e-01, -4.164873835389153e-01, -4.636112565827497e-01, -2.258566644664644e-01, -2.108583078213682e-01, -3.023116014192341e-01, -2.183319797127595e-01, -2.183319797127596e-01, -3.916183477601426e-01, -6.359190522100652e-02, -6.525168521270668e-02, -2.371103279559116e-01, -1.416442238697150e-02, -4.756670354520193e-02, -2.710083599718919e-02, -3.476675377953457e-03, -6.586852559925654e-03, -4.546448365999516e-02, -9.775386337705506e-03, -9.775386337705484e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m06_sx_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06_sx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-9.454456411743761e-09, -9.454352827723122e-09, -9.453824216405739e-09, -9.455520577351004e-09, -9.454402356534689e-09, -9.454402356534689e-09, -1.367085760929485e-05, -1.367074114810049e-05, -1.366528861120585e-05, -1.366303141503449e-05, -1.367056516950820e-05, -9.294515821679931e-06, -1.005588223959925e-02, -4.763404851030759e-03, -4.803521273713783e-03, -4.871529530859792e-03, -4.762301753969756e-03, -4.762301753969756e-03, -7.585304044189332e-01, -7.443575779344259e-01, -4.725312883444882e-03, -8.599730887639860e-01, -7.539275286463866e-01, -7.539275286463866e-01, -1.373593301353409e+01, -1.360813639137733e+01, -3.988792449708000e+00, -4.943180731288518e+00, -1.423260488256832e+01, -1.423260488256831e+01, -2.376853420792670e-06, -2.375651245167551e-06, -2.376729730795815e-06, -2.619813528587584e-06, -2.376240783876049e-06, -2.376240783876049e-06, -1.369152364895680e-04, -1.331140847688764e-04, -1.384904818672396e-04, -1.354696830063733e-04, -1.323681384212955e-04, -8.473670680559487e-05, -1.361290678966563e-02, -1.079976668641858e-02, -1.571297758774869e-02, -1.466533359009723e-02, -1.219001924363894e-02, -1.511691544280136e-02, -2.059391209616738e+01, -4.678418685823394e-01, -2.159214619376106e+01, -1.193863610064475e-04, -1.453027895332825e+00, -1.453027895332825e+00, -3.631720462071112e+06, -6.233065456363752e+00, -2.448910515860116e+01, -1.425101527133271e+02, -3.088459448122544e+06, -7.681941724319499e+00, -1.467201078482129e-02, -1.407510676541995e-02, -1.471244182837115e-02, -1.429227835656333e-02, -1.420556064507663e-02, -1.420556064507663e-02, -1.616347878532820e-02, -2.374411527432177e-02, -2.153713165332977e-02, -1.940296998443768e-02, -2.051521148498652e-02, -2.407295732453709e-02, -8.733680400056964e-03, -6.841140378136815e-01, -1.722366769493998e-01, -1.321274107955477e-01, -1.245674629581018e-01, -1.245674629581018e-01, -4.726006096241193e-02, -3.870711254010561e+00, -2.998550967270359e+00, -1.140016065340341e-01, -4.799588591538706e+01, -2.706337086342436e+00, -5.379280923940183e+00, -6.915051948998307e+00, -1.357773541956501e+01, -3.253625223085397e+00, -1.080366519519624e+01, -1.080366519519623e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m06_sx_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06_sx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-6.533186333450811e-04, -6.533912111603028e-04, -6.537070078510053e-04, -6.525265134932710e-04, -6.533568770362156e-04, -6.533568770362156e-04, 2.117912046181105e-03, 2.118059386750145e-03, 2.122387705529109e-03, 2.120548921467718e-03, 2.117942877802367e-03, 2.100863499856977e-03, 1.427393849436770e-02, 1.550223837118467e-02, 1.781697117515815e-02, 1.692484562787279e-02, 1.543907897340012e-02, 1.543907897340012e-02, 6.386470011854617e-02, 6.121084276008955e-02, 1.326680219748317e-02, 1.318925908646231e-02, 6.312015811234274e-02, 6.312015811234274e-02, -3.718283449731139e-04, -4.230381692384770e-04, -7.525543920537735e-03, -1.486772541549520e-05, -4.287570329685959e-04, -4.287570329685961e-04, -7.896829562564276e-03, -7.987081776402278e-03, -7.906879589578098e-03, -7.589949362030796e-03, -7.942240891973476e-03, -7.942240891973476e-03, 3.564314979898579e-03, 3.558748764748320e-03, 3.570336119710338e-03, 3.560262372126048e-03, 3.560781819252246e-03, 3.509037003005783e-03, 1.050285178927767e-02, -2.302613930309949e-02, 1.370471821540260e-02, 6.292862722216527e-03, 4.616471737312095e-03, 5.350355929214205e-03, -3.379942946407586e-03, 5.530982781857550e-02, -2.325721001267332e-03, 1.198785777669499e-03, 7.089250411534627e-03, 7.089250411534627e-03, -1.044724630419131e-04, -2.511287832294856e-05, -4.153607588231956e-05, -1.212425687049123e-02, -1.200054857899602e-04, -2.341467664847374e-05, 4.711983514426756e-01, 2.089975282344647e-02, 1.231152532700789e-01, 2.459470765754594e-01, 1.803812017191883e-01, 1.803812017191883e-01, 2.562045512602771e-01, 1.350969071780043e-02, -4.016939550978105e-04, -4.305891802330426e-02, -1.568146790543451e-02, -1.370962533819845e-02, -6.588500059470898e-03, 4.633560782750844e-02, 3.530478017025761e-02, 1.992662808205754e-02, 2.324535251673125e-02, 2.324535251673127e-02, 1.652730754623141e-02, -5.940177467349305e-03, -1.040966804440255e-02, 2.229851825841445e-02, -6.883345253474324e-03, -1.578325733283651e-02, -2.346642544799439e-04, -5.724521251220855e-07, -7.701910559414010e-06, -1.655134040216396e-02, -2.021709804760633e-05, -2.021709804763617e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
