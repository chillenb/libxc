
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_revm11_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revm11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.274111779570535e+01, -1.274112308767835e+01, -1.274114755747955e+01, -1.274105668360772e+01, -1.274112063754363e+01, -1.274112063754363e+01, -2.722982907769143e+00, -2.722794951727954e+00, -2.717311348657350e+00, -2.720889248486718e+00, -2.722936710915540e+00, -2.722936710915540e+00, -4.464841209062861e-01, -4.467782212379780e-01, -4.570014904247365e-01, -4.605250514382969e-01, -4.465871808483949e-01, -4.465871808483949e-01, -5.232614802738247e-02, -5.321218990027796e-02, -5.257184223714240e-01, -3.004665092661207e-02, -5.258853148634558e-02, -5.258853148634558e-02, -4.356222170881441e-05, -4.996566900896183e-05, -2.675988580312660e-03, -4.888633655092498e-06, -4.842235890221709e-05, -4.842235890221713e-05, -3.034457638404376e+00, -3.038253251693673e+00, -3.034856533445792e+00, -3.037806663921190e+00, -3.036373962907304e+00, -3.036373962907304e+00, -1.688834417686132e+00, -1.679953243187978e+00, -1.698420059543678e+00, -1.691570820293522e+00, -1.669979029844443e+00, -1.669979029844443e+00, -2.686232400389951e-01, -2.652241589410345e-01, -2.726726161161238e-01, -2.506333803214755e-01, -2.646247572907341e-01, -2.646247572907341e-01, -1.569526044787689e-02, -6.005612938359541e-02, -1.485483708705761e-02, -1.134208770632048e+00, -2.027785051551298e-02, -2.027785051551298e-02, -4.388907337221186e-06, -6.544458658932846e-06, -2.756107651677816e-06, -5.758880120499226e-03, -4.951100953214822e-06, -4.951100953214829e-06, -2.839308482339705e-01, -2.684480802110317e-01, -2.751465957726414e-01, -2.796817784759112e-01, -2.775110627910736e-01, -2.775110627910736e-01, -2.660503163265039e-01, -2.269303321417502e-01, -2.073868861616304e-01, -2.065668249453024e-01, -2.036755610261515e-01, -2.036755610261512e-01, -2.899968607788432e-01, -9.244939425502398e-02, -1.199135847091443e-01, -1.549244214050844e-01, -1.370860692703337e-01, -1.370860692703337e-01, -2.196505491277242e-01, -2.235532109448417e-03, -4.681092354950646e-03, -1.272654387321300e-01, -9.365902309446986e-03, -9.365902309446965e-03, -6.996276308259290e-05, -1.348643693732014e-07, -9.234596142454836e-07, -8.171750098170609e-03, -3.041102042620750e-06, -3.041102042620741e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_revm11_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revm11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.618514557811923e+01, -1.618558548048138e+01, -1.618748982669248e+01, -1.618032484801856e+01, -1.618537757388048e+01, -1.618537757388048e+01, -1.992460666911658e+00, -1.992122367585873e+00, -1.981777378778725e+00, -1.981776212120570e+00, -1.992403393144796e+00, -1.992403393144796e+00, -4.431153532132481e-01, -4.419701181682401e-01, -4.139151096823963e-01, -4.215862868384046e-01, -4.426998656067049e-01, -4.426998656067049e-01, -6.406030073687236e-02, -6.433124595349254e-02, -5.196678130261423e-01, -4.375128372711069e-02, -6.412572483842292e-02, -6.412572483842292e-02, -8.516915562878685e-05, -9.746879046109192e-05, -3.871323628542503e-03, -9.737166565215901e-06, -9.446221435994943e-05, -9.446221435995026e-05, -4.945901187308213e+00, -4.963846483704017e+00, -4.947900573381864e+00, -4.961843968957234e+00, -4.954919597952873e+00, -4.954919597952873e+00, -9.957334764326773e-01, -9.556490465511053e-01, -1.006975700230352e+00, -9.743723178945382e-01, -9.553141500415557e-01, -9.553141500415557e-01, -2.204040528371668e-01, -3.733590164481839e-01, -2.227213049832571e-01, -2.618430271334999e-01, -2.496738898793207e-01, -2.496738898793207e-01, -1.721346231189588e-02, -8.031636831788598e-02, -1.704319133201971e-02, -1.132674707149597e+00, -2.878015047565893e-02, -2.878015047565893e-02, -8.742337639075111e-06, -1.302080380096909e-05, -5.484515636904437e-06, -5.752573452755773e-03, -9.851155821155581e-06, -9.851155821155589e-06, -4.327292433073311e-01, -4.557737235382889e-01, -4.501895263576213e-01, -4.434047244212223e-01, -4.470241113250879e-01, -4.470241113250879e-01, -4.183247071452208e-01, -1.487840168686921e-01, -2.082255722031344e-01, -3.245543272100782e-01, -2.601939370007810e-01, -2.601939370007809e-01, -3.562333530276887e-01, -1.102593033133573e-01, -1.262697040665355e-01, -1.377759813265103e-01, -1.283473256119474e-01, -1.283473256119475e-01, -1.586129956442674e-01, -3.497031962799565e-03, -5.584344042628210e-03, -1.130940146858856e-01, -9.084946808224196e-03, -9.084946808224321e-03, -1.363716988871566e-04, -2.695960563067471e-07, -1.843668154851491e-06, -8.030460769109560e-03, -6.055020758131000e-06, -6.055020758131056e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_revm11_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revm11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [4.759017058281187e-09, 4.759198425313409e-09, 4.759887259171160e-09, 4.756937681343299e-09, 4.759113473665302e-09, 4.759113473665302e-09, -8.666779809249846e-06, -8.663826779620468e-06, -8.572668442184156e-06, -8.594146888285463e-06, -8.665871249668862e-06, -8.665871249668862e-06, -7.547272931753167e-03, -7.550478268818433e-03, -7.350630181955047e-03, -7.035589560701108e-03, -7.548339049848420e-03, -7.548339049848420e-03, -1.986128920716419e-01, -2.065989605052256e-01, -5.461585356030517e-03, -6.239501309266336e-02, -2.013752381361324e-01, -2.013752381361324e-01, -6.850178807303108e-02, -7.530860703919705e-02, -4.778821440619560e-01, -1.123504299059611e-02, -7.661289855071457e-02, -7.661289855071457e-02, 1.827348559129285e-06, 1.829229450237912e-06, 1.827542086410324e-06, 1.829005496485861e-06, 1.828383774591982e-06, 1.828383774591982e-06, -7.672236691350677e-05, -7.281142074896277e-05, -7.738985105838432e-05, -7.437123877173238e-05, -7.300109207186599e-05, -7.300109207186599e-05, -1.902731113858836e-03, 5.425791877704212e-03, -6.423871291952814e-03, 8.484108843143435e-04, 7.127468538698957e-04, 7.127468538698957e-04, -2.940625888596301e-01, -7.090852853383979e-02, -2.848454494181993e-01, 2.203124766515196e-05, -1.035765989310000e-01, -1.035765989310000e-01, -1.109075337856838e-02, -1.451131782481634e-02, -2.333360505992207e-02, -7.455430029359434e-01, -1.779726308624969e-02, -1.779726308624969e-02, -1.377282927019087e-02, 1.358288940490231e-03, -2.503227346838012e-03, -6.564243811286179e-03, -4.396907942983108e-03, -4.396907942983108e-03, -7.515791582864751e-03, -4.780345658750906e-03, 2.606676426287449e-03, 8.799073602811775e-03, 5.953382359643529e-03, 5.953382359643529e-03, 3.063570565144803e-03, -8.100177645520426e-02, -7.859572003294862e-02, -4.547641925585534e-02, -6.443111137272466e-02, -6.443111137272473e-02, -1.457242491242570e-02, -3.525185810086491e-01, -5.915401600046768e-01, -4.567361569549359e-02, -5.289123266545402e-01, -5.289123266545395e-01, -7.070666738951785e-02, -1.873496983080186e-03, -5.818696699872524e-03, -5.841570946193626e-01, -1.877746783718183e-02, -1.877746783718174e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_revm11_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revm11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_revm11_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revm11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-1.601247157478136e-03, -1.601055632066705e-03, -1.600249265905813e-03, -1.603367385600434e-03, -1.601145967150227e-03, -1.601145967150227e-03, -8.743289925064597e-03, -8.747911845612607e-03, -8.888555494412240e-03, -8.858091935992759e-03, -8.744375985823564e-03, -8.744375985823564e-03, 9.908315361110628e-04, 9.779262050376028e-04, 6.640383305435649e-05, -1.311641754160933e-04, 9.855728110977212e-04, 9.855728110977212e-04, -4.056251459285889e-03, -4.225288360792625e-03, 1.915132911482543e-03, -4.873699855220545e-03, -4.084886928705767e-03, -4.084886928705767e-03, -4.441383947027509e-07, -5.546522664237476e-07, -1.681073565428252e-04, -4.063005022549995e-09, -5.505498644605313e-07, -5.505498644597665e-07, 5.776331150583285e-03, 6.044147222967991e-03, 5.805927960678478e-03, 6.014015824148911e-03, 5.910529798231446e-03, 5.910529798231446e-03, -1.275271313725763e-02, -1.414263324074578e-02, -1.230591739395469e-02, -1.340009983156264e-02, -1.429351083073401e-02, -1.429351083073401e-02, -7.004682463095599e-02, -2.119097375629767e-02, -5.417502417980904e-02, -5.709350028514560e-02, -6.997462330971858e-02, -6.997462330971858e-02, -2.237870865427147e-03, -6.081914858545819e-03, -2.342806787292246e-03, -2.128661691766598e-02, -3.993808036092607e-03, -3.993808036092607e-03, -5.176152316485400e-09, -8.343941920490508e-09, -7.758926600320086e-09, -4.731772261954713e-04, -6.456943435577447e-09, -6.456943435585524e-09, 9.103979329466030e-02, 1.270146027873440e-01, 1.271836130705983e-01, 1.187234387398293e-01, 1.240717019039916e-01, 1.240717019039916e-01, 8.979814129628030e-02, -8.719745573824597e-02, -8.098063686722944e-02, -1.426368591677529e-02, -5.735152614576080e-02, -5.735152614576109e-02, -3.974795034181960e-02, -4.429938594464496e-03, -7.211741091146114e-03, -3.427360085057135e-02, -2.064897982284074e-02, -2.064897982284062e-02, -5.823808052106930e-02, -1.139593314304138e-04, -3.683717746721286e-04, -5.415889749097973e-02, -1.642692236221027e-03, -1.642692236221034e-03, -3.825524687668946e-07, -1.425423498457714e-11, -6.923396927267743e-10, -1.565489456785598e-03, -4.026836723437237e-09, -4.026836723405647e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
