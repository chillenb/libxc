
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_revm11_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revm11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.359824135055032e+01, -1.359826089898108e+01, -1.359837401753404e+01, -1.359805215443253e+01, -1.359825146135703e+01, -1.359825146135703e+01, -2.495441751586753e+00, -2.495376458826350e+00, -2.493481683993886e+00, -2.494434944379568e+00, -2.495436348757496e+00, -2.949414915919136e+00, -3.365118392487654e-01, -5.432002635529372e-01, -5.409132456875260e-01, -5.390355705295992e-01, -5.432091630435562e-01, -5.432091630435562e-01, -5.351260043623111e-02, -5.462256527229986e-02, -3.947963602311507e-01, -3.079725938136696e-02, -5.385575518956198e-02, -5.385575518956198e-02, -4.357373846151656e-05, -4.998399958211451e-05, -2.736216445352835e-03, -4.892442118447374e-06, -4.843774654197277e-05, -4.843774654197281e-05, -3.033343217202721e+00, -3.037149998298733e+00, -3.033757405293775e+00, -3.229460113009464e+00, -3.035246170963283e+00, -3.035246170963283e+00, -1.348194228041166e+00, -1.357046307117865e+00, -1.344345099574323e+00, -1.351687625735165e+00, -1.358538875923504e+00, -1.703346180260911e+00, -2.723019400096938e-01, -2.530256119127350e-01, -2.861234838848923e-01, -2.499214478627731e-01, -2.638512274865015e-01, -2.678621529239438e-01, -5.374025976959588e-03, -6.057120111499076e-02, -5.165646291120515e-03, -1.118927230491346e+00, -2.061100025856419e-02, -2.061100025856419e-02, -7.895099348092194e-07, -6.549553206450660e-06, -2.757059746887078e-06, -1.486214902941799e-03, -8.913523175384462e-07, -4.956035253179718e-06, -2.870907456840285e-01, -2.681585057728204e-01, -2.738928225323118e-01, -2.811669833939969e-01, -2.785025423572603e-01, -2.785025423572603e-01, -2.689870087928745e-01, -2.275772334847666e-01, -2.068857113398032e-01, -2.042379732291449e-01, -2.022494944355067e-01, -2.149929341404472e-01, -2.796255045670415e-01, -5.112547328008657e-02, -1.232327449445284e-01, -1.299817961649623e-01, -1.426214185898714e-01, -1.426214185898714e-01, -1.956522706649932e-01, -2.258428460679916e-03, -4.873057384704097e-03, -1.343901573894963e-01, -3.027745362551110e-03, -9.879757170525421e-03, -7.028792060996447e-05, -1.348809809711742e-07, -9.235406214672123e-07, -8.653986842727810e-03, -3.043857813610249e-06, -3.043857813610240e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_revm11_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revm11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.732777751556823e+01, -1.732803992139120e+01, -1.732922149826283e+01, -1.732494714406365e+01, -1.732791551719304e+01, -1.732791551719304e+01, -2.874266224118485e+00, -2.873792922788098e+00, -2.859695173107330e+00, -2.865387438833500e+00, -2.874149191589884e+00, -1.341807986231510e+00, -6.031397021903220e-01, -4.819375333751718e-01, -5.055342129361271e-01, -4.932978071231797e-01, -4.812394060925010e-01, -4.812394060925010e-01, -6.711317862444113e-02, -6.758011080213994e-02, -7.094789614648225e-01, -4.188485822160887e-02, -6.728338733123607e-02, -6.728338733123607e-02, -8.522243327126742e-05, -9.755351878030380e-05, -4.124062183385721e-03, -9.754914589748863e-06, -9.453333994893696e-05, -9.453333994893777e-05, -4.946637539821564e+00, -4.964628606665848e+00, -4.948632631485112e+00, -4.757866243235997e+00, -4.955692045288947e+00, -4.955692045288947e+00, -1.800263212799228e+00, -1.767983883151588e+00, -1.814524133847740e+00, -1.789291486869687e+00, -1.758661046418360e+00, -9.071467820579013e-01, -1.765969441159370e-01, -3.509213116704408e-01, -1.629401544832307e-01, -1.960233832337050e-01, -2.158522202120977e-01, -3.092117150385198e-01, -9.676820665839705e-03, -8.316520546004481e-02, -9.323494635088666e-03, -8.255409634753137e-01, -2.700081546695294e-02, -2.700081546695294e-02, -1.578025711525898e-06, -1.304453490546781e-05, -5.488950421778517e-06, -2.788958270485293e-03, -1.781477757765463e-06, -9.874142304491007e-06, -4.381501566823911e-01, -4.625409101001121e-01, -4.334895697454589e-01, -4.503236717421455e-01, -4.541405343996627e-01, -4.541405343996627e-01, -4.318626089107507e-01, -1.439792586381006e-01, -2.021539445225642e-01, -3.220600859427492e-01, -2.547079271363181e-01, -2.911893799539947e-01, -3.071888982213744e-01, -1.065131587107410e-01, -1.307702482315618e-01, -1.990594736846085e-01, -1.276487792775211e-01, -1.276487792775214e-01, -2.515905184117936e-01, -3.595386108237197e-03, -6.303379827649593e-03, -9.369057871215462e-02, -5.519163883967441e-03, -8.584129901946956e-03, -1.378759717145487e-04, -2.696735647523507e-07, -1.844045936644670e-06, -7.550656028256496e-03, -6.067861687073487e-06, -6.067861687073541e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_revm11_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revm11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [6.920004649545688e-09, 6.920170819539722e-09, 6.920841048687526e-09, 6.918144639191229e-09, 6.920092568249495e-09, 6.920092568249495e-09, -1.087283086597788e-05, -1.086818109809373e-05, -1.072659299366162e-05, -1.077808189342088e-05, -1.087133701180590e-05, -6.677910203597988e-06, -1.296764294667336e-02, -3.244489551984167e-03, -3.023315353837330e-03, -3.183217781650590e-03, -3.248773663906953e-03, -3.248773663906953e-03, -1.658664716919418e-01, -1.702430119910578e-01, -8.239457228584166e-03, -7.587708425107083e-02, -1.671021939929777e-01, -1.671021939929777e-01, -6.580216217299228e-02, -7.157451002164630e-02, -3.663126454215144e-01, -5.412704920970977e-03, -7.331048107931881e-02, -7.331048107931880e-02, 1.824211174992156e-06, 1.826126846615961e-06, 1.824448112326138e-06, 2.355023421570577e-06, 1.825210512472374e-06, 1.825210512472374e-06, -1.415949985867698e-04, -1.310433028522838e-04, -1.462297181634734e-04, -1.377284993445615e-04, -1.285844960647147e-04, -6.766214588402787e-05, -2.094518440261785e-03, 4.021138410927040e-03, -5.568726050141319e-03, -2.308349768188763e-04, 2.227334912995927e-04, 1.737262930706379e-03, -7.720663352242642e+00, -5.794068210600447e-02, -7.856076402372794e+00, 5.855710377835108e-06, -1.356632338919840e-01, -1.356632338919840e-01, -4.687123150667948e+03, -8.298915446261044e-03, -1.832338985535411e-02, -2.457714742914574e+01, -4.322208459131522e+03, -8.490753913207801e-03, -1.351329365338194e-02, 1.261894169584980e-03, -2.484887143819771e-03, -6.476221435352559e-03, -4.359876466110290e-03, -4.359876466110290e-03, -7.310294956501686e-03, -4.776693096197879e-03, 2.350566786593115e-03, 8.265243919875634e-03, 5.533741500387079e-03, 9.039975466424479e-03, 1.945570802589239e-03, -4.861760892930899e-01, -6.696056925311331e-02, -7.121364629804794e-02, -5.439442181478356e-02, -5.439442181478356e-02, -2.017547163161440e-02, -3.019003004862136e-01, -4.370344133818643e-01, -3.809726565618267e-02, -1.257439248026890e+01, -5.276602962154385e-01, -3.533075649223587e-02, -6.892796287569593e-04, -4.886246486080906e-03, -5.838828622265660e-01, -8.623629407360412e-03, -8.623629407360381e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_revm11_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revm11", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-5.012858618033411e-04, -5.011583478110410e-04, -5.006002237370740e-04, -5.026748112960046e-04, -5.012186926031851e-04, -5.012186926031851e-04, -3.856721798935106e-03, -3.860490832921825e-03, -3.973945016082136e-03, -3.929672803965559e-03, -3.857750963465829e-03, -1.290211565550653e-02, 1.027437362679903e-02, -4.947008230351236e-03, -3.643619476965745e-03, -4.052055723983360e-03, -5.000320606289742e-03, -5.000320606289742e-03, -4.460475325274198e-03, -4.791265364676771e-03, 6.088199557806859e-03, -4.842685884030693e-03, -4.538825434656687e-03, -4.538825434656687e-03, -4.442668964419341e-07, -5.548750339426595e-07, -1.724479158944803e-04, -4.066458181396286e-09, -5.507414003340746e-07, -5.507414003333097e-07, 5.776980581388647e-03, 6.045477464573068e-03, 5.806643488106118e-03, 5.814521738297209e-03, 5.911537461338325e-03, 5.911537461338325e-03, -1.058691671264680e-03, -1.954981250544063e-03, -6.781176383408175e-04, -1.370933258088545e-03, -2.194117044912657e-03, -1.536523896301572e-02, -8.596942167071034e-02, -4.018801022928449e-02, -7.286403074690515e-02, -8.748556932321039e-02, -8.429556628936544e-02, -4.152513137509647e-02, -3.865375777105584e-04, -6.020641804080342e-03, -3.943644447905835e-04, -3.530224020726339e-02, -4.048969139142865e-03, -4.048969139142865e-03, -7.123603845650138e-10, -8.351029356242914e-09, -7.761851347421609e-09, -8.255257324105722e-05, -8.892859965322772e-10, -6.463964810198341e-09, 1.313553878448846e-01, 1.421908575427746e-01, 7.656357387616951e-02, 1.472703227949188e-01, 1.490469986920519e-01, 1.490469986920519e-01, 1.496606535606592e-01, -8.933326660995150e-02, -8.473360119052202e-02, -1.756169214023516e-02, -6.172115889549493e-02, -2.585335274768083e-02, -6.518732905448162e-02, 1.106147606726441e-02, -8.290896894847093e-03, -4.877864368715181e-03, -2.426541362299978e-02, -2.426541362299956e-02, -2.272058987796355e-02, -1.152832525245242e-04, -3.862302530863465e-04, -6.979053686807601e-02, -2.913206981521003e-04, -1.766947435523698e-03, -3.844979943684549e-07, -1.425614944678449e-11, -6.924059306063183e-10, -1.692829744230713e-03, -4.030817839674721e-09, -4.030817839643138e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
