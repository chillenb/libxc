
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_revscan0_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revscan0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.739167754945466e+01, -1.739172236049411e+01, -1.739197416175979e+01, -1.739124119486569e+01, -1.739170072354435e+01, -1.739170072354435e+01, -2.519406497946692e+00, -2.519505416831279e+00, -2.522766481829732e+00, -2.523637533331992e+00, -2.519433799372795e+00, -2.519433799372795e+00, -4.390339745295998e-01, -4.385739571772193e-01, -4.275092257275863e-01, -4.364474359085893e-01, -4.388730287709851e-01, -4.388730287709851e-01, -1.409542084023581e-01, -1.423070314636033e-01, -4.928634360181370e-01, -8.318542886317212e-02, -1.412616955269521e-01, -1.412616955269521e-01, -4.086493371519751e-03, -4.336697044913077e-03, -2.349842203534357e-02, -1.491687789171456e-03, -4.293475527507733e-03, -4.293475527507733e-03, -4.249209403199815e+00, -4.250011199765136e+00, -4.249303064081341e+00, -4.249925916590445e+00, -4.249604790436212e+00, -4.249604790436212e+00, -1.559896876323194e+00, -1.576099480347083e+00, -1.557716079029669e+00, -1.570462647734238e+00, -1.573821302680122e+00, -1.573821302680122e+00, -4.552313793059269e-01, -4.944647641022125e-01, -4.153174359366468e-01, -4.333848165444722e-01, -4.783345834953499e-01, -4.783345834953499e-01, -5.929001790128899e-02, -1.389081671112138e-01, -5.877753673906218e-02, -1.433157470360008e+00, -7.281838300141921e-02, -7.281838300141921e-02, -1.428284445809659e-03, -1.711123828600529e-03, -1.271315118311620e-03, -3.452441567374921e-02, -1.561488350225507e-03, -1.561488350225507e-03, -4.875007394976534e-01, -4.849586935795215e-01, -4.858758405403885e-01, -4.865791079750936e-01, -4.862267684625705e-01, -4.862267684625705e-01, -4.699486854919473e-01, -4.077819043972829e-01, -4.261178686975028e-01, -4.429871819116689e-01, -4.342735053986722e-01, -4.342735053986723e-01, -5.100955678360950e-01, -1.818900551760982e-01, -2.137922769372297e-01, -2.657768840325473e-01, -2.411508911228020e-01, -2.411508911228020e-01, -3.576012338201970e-01, -2.136312549513476e-02, -3.047944401778464e-02, -2.516807539898418e-01, -4.774703991207700e-02, -4.774703991207698e-02, -4.887850965248526e-03, -3.011174754399678e-04, -7.266639263779653e-04, -4.547009041790040e-02, -1.295871872860931e-03, -1.295871872860928e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_revscan0_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revscan0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.270530969423109e+01, -2.270537821257723e+01, -2.270571893445464e+01, -2.270459727543427e+01, -2.270534552199915e+01, -2.270534552199915e+01, -3.574837900598227e+00, -3.575352837701914e+00, -3.590639258221539e+00, -3.590697758598156e+00, -3.574957135374945e+00, -3.574957135374945e+00, -6.194945848223183e-01, -6.183935411529438e-01, -5.944003112563470e-01, -6.126445993956142e-01, -6.191141415570824e-01, -6.191141415570824e-01, -1.470348367802237e-01, -1.499893775458844e-01, -6.405001001779144e-01, -1.145781702191205e-01, -1.475252935419576e-01, -1.475252935419576e-01, -5.977564845183045e-03, -6.694242432398511e-03, -3.562321627163692e-02, -2.694099557413896e-03, -6.361849000036191e-03, -6.361849000036225e-03, -5.568859450416086e+00, -5.570516856247567e+00, -5.569034345471236e+00, -5.570322795973583e+00, -5.569702085650658e+00, -5.569702085650658e+00, -1.935218676191498e+00, -1.962187428470506e+00, -1.929074672034103e+00, -1.950688585374956e+00, -1.961915488509804e+00, -1.961915488509804e+00, -6.103138027689267e-01, -6.916845931134846e-01, -5.833314531074415e-01, -6.428130518057348e-01, -6.370212077281513e-01, -6.370212077281513e-01, -8.138528808923504e-02, -9.463042037063496e-02, -8.013541118348082e-02, -2.192474003917050e+00, -7.664284905543974e-02, -7.664284905543974e-02, -2.581744406765652e-03, -3.073416795459189e-03, -2.284985138597068e-03, -5.201307266718556e-02, -2.804156584621411e-03, -2.804156584621411e-03, -6.512575300878352e-01, -6.443307068305633e-01, -6.467639204448314e-01, -6.486800429570080e-01, -6.477175238907549e-01, -6.477175238907549e-01, -6.317432927044202e-01, -5.226723585068315e-01, -5.535322942392655e-01, -5.826487262293940e-01, -5.677447615215552e-01, -5.677447615215553e-01, -7.332620367382405e-01, -1.938161760336935e-01, -2.419151868208889e-01, -3.461364986422621e-01, -2.925909929883251e-01, -2.925909929883251e-01, -4.594867222495995e-01, -3.076126721563197e-02, -4.553193583849279e-02, -3.403115823288235e-01, -6.432809096253420e-02, -6.432809096253422e-02, -8.381525478548264e-03, -5.659587999812012e-04, -1.337110866111580e-03, -6.226746396437437e-02, -2.334937695787127e-03, -2.334937695787122e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_revscan0_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revscan0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.062516813682942e-09, -4.062483605439001e-09, -4.062168583770666e-09, -4.062705915610535e-09, -4.062500821607608e-09, -4.062500821607608e-09, -1.329843256525901e-05, -1.331593122919359e-05, -1.383086976569448e-05, -1.387287586943010e-05, -1.330133586948906e-05, -1.330133586948906e-05, -3.938285874648612e-03, -3.913705233639975e-03, -3.422779377057188e-03, -4.188291607208903e-03, -3.930360101506773e-03, -3.930360101506773e-03, -1.195663502117549e+00, -1.210367738996934e+00, -1.283504662562205e-03, -1.918955942816040e-01, -1.212154098525497e+00, -1.212154098525497e+00, -6.060333500569994e+01, -1.758632317399847e+01, 5.812199387967725e-01, 2.387742349262891e+02, -4.795334847593882e+01, -4.795334847593512e+01, -1.145192013860795e-06, -1.145512526477775e-06, -1.145161933371686e-06, -1.145414662446040e-06, -1.145440759262272e-06, -1.145440759262272e-06, -6.608737800026724e-05, -6.060963705607826e-05, -6.443909069035881e-05, -6.008934092624202e-05, -6.429698179452937e-05, -6.429698179452937e-05, -1.390980734874760e-02, -1.151467441125665e-02, -2.509746539466087e-02, -2.382537915451093e-02, -1.030305862150086e-02, -1.030305862150086e-02, -4.606964524720394e-01, -1.277406941518218e+00, -5.743803597199715e-01, -2.099357779836689e-04, -2.317302106365951e+00, -2.317302106365951e+00, 2.627233584432585e+02, 2.062380827418027e+02, 6.142502490053216e+02, 7.144823476527798e-01, 3.023258981459644e+02, 3.023258981459643e+02, -8.164407030692714e-03, -7.936256696566602e-03, -8.015746667235462e-03, -8.079987176160115e-03, -8.047972745769088e-03, -8.047972745769088e-03, -1.013863916711675e-02, -1.234837128727643e-02, -1.135332664665323e-02, -1.073708499566848e-02, -1.110479913310046e-02, -1.110479913310046e-02, -1.142137941422408e-02, -3.229095388639687e-01, -2.224634370413581e-01, -1.314778137071496e-01, -1.544194491475946e-01, -1.544194491475947e-01, -3.093551804694243e-02, -1.838152909022377e+00, 2.405406307777427e-01, -1.725265078507586e-01, -1.222722332311366e+00, -1.222722332311353e+00, 4.466352017887865e+01, 2.737062679995343e+03, 8.267349521139053e+02, -1.167483189667780e+00, 5.003507793898299e+02, 5.003507793898308e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_revscan0_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revscan0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_revscan0_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revscan0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [6.571748926454690e-04, 6.571739939754848e-04, 6.571508891056294e-04, 6.571646996922913e-04, 6.571745948691075e-04, 6.571745948691075e-04, 7.878727546480948e-03, 7.890664647483689e-03, 8.244505454812973e-03, 8.285494031431230e-03, 7.880775123503079e-03, 7.880775123503079e-03, 1.401281648529083e-02, 1.391854043060307e-02, 1.227795245409966e-02, 1.617369751955103e-02, 1.398329839697216e-02, 1.398329839697216e-02, 1.189487669728142e-01, 1.248812087189753e-01, 2.166120396791018e-03, 9.792268700302276e-03, 1.218652787175545e-01, 1.218652787175545e-01, 2.213976692991678e-03, 1.595187170384931e-03, 2.027136228759294e-03, 2.648699029172507e-07, 2.163449695090453e-03, 2.163449695090384e-03, 2.678646683412131e-03, 2.680175888566324e-03, 2.678690895561432e-03, 2.679886372549996e-03, 2.679581465665355e-03, 2.679581465665355e-03, 8.211562772707730e-03, 7.729452364048576e-03, 7.967675224086521e-03, 7.585049418221168e-03, 8.181629311427571e-03, 8.181629311427571e-03, 4.170679597570773e-02, 4.178489143798748e-02, 6.237733540749894e-02, 6.373848653625944e-02, 3.492610230750268e-02, 3.492610230750268e-02, 1.002680885210136e-02, 1.291039375222773e-01, 1.149084084298580e-02, 2.046693958094198e-02, 5.561365726301849e-02, 5.561365726301849e-02, 1.195227050133910e-06, 7.341401164709574e-07, 5.527881885046093e-06, 8.446225033067128e-04, 4.256051708144795e-07, 4.256051708144778e-07, 2.743037831297917e-02, 2.663481937398233e-02, 2.691063229335312e-02, 2.713107076048294e-02, 2.702085490910191e-02, 2.702085490910191e-02, 3.032692174331372e-02, 2.651264064087831e-02, 2.727852676150708e-02, 2.829306729316104e-02, 2.791918375020015e-02, 2.791918375020014e-02, 4.697130741323305e-02, 6.655069009483794e-02, 7.546165432221157e-02, 8.869017496754507e-02, 7.470887604902773e-02, 7.470887604902768e-02, 4.622305048343298e-02, 4.355328925447843e-03, 2.382177602100159e-03, 9.610182553371413e-02, 1.327022238486357e-02, 1.327022238486347e-02, 6.222780006627377e-06, 4.110038834697726e-09, 1.558610101758051e-06, 1.183536292797890e-02, 3.302069729888873e-07, 3.302069729888860e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
