
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_revscan0_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revscan0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.631213561068424e+01, -1.631222049295821e+01, -1.631262412532646e+01, -1.631123823821481e+01, -1.631218010628506e+01, -1.631218010628506e+01, -2.304284591019598e+00, -2.304419767795114e+00, -2.308580347696912e+00, -2.307150842441926e+00, -2.304333073381247e+00, -2.824480505236062e+00, -3.841820098226176e-01, -5.359658224948118e-01, -5.203885472620016e-01, -5.250851840181298e-01, -5.363476797860383e-01, -5.363476797860383e-01, -1.463677030756100e-01, -1.484437904351184e-01, -4.459634876913222e-01, -1.025290781814284e-01, -1.469887998041425e-01, -1.469887998041425e-01, -5.195734392116577e-03, -5.513847133918989e-03, -2.948534318031869e-02, -1.790573623953170e-03, -5.457580306256703e-03, -5.457580306256661e-03, -4.249906726079082e+00, -4.250701028696904e+00, -4.249990741442087e+00, -4.089730398204662e+00, -4.250310220384292e+00, -4.250310220384292e+00, -1.234728263888623e+00, -1.253566435346649e+00, -1.226926667515306e+00, -1.241524057080939e+00, -1.258024342347379e+00, -1.599043732459898e+00, -4.726480463076196e-01, -5.144512555465308e-01, -4.478782500903978e-01, -4.681045517318560e-01, -4.912053693936437e-01, -4.295852240694957e-01, -5.198534033083368e-02, -1.456693812915426e-01, -5.134716860270928e-02, -1.563009161897155e+00, -8.669857226150755e-02, -8.669857226150755e-02, -2.498602721408915e-03, -2.088367857352643e-03, -1.595436649560927e-03, -3.216188654202472e-02, -2.601806261258336e-03, -1.875209029739809e-03, -4.892989787747548e-01, -4.866303038870679e-01, -4.813566493771734e-01, -4.883300748676491e-01, -4.879609924497501e-01, -4.879609924497501e-01, -4.735806135427381e-01, -4.093668077213390e-01, -4.282613458023440e-01, -4.456840852423141e-01, -4.368191916670638e-01, -4.029887751033995e-01, -5.391393887862054e-01, -1.299209148033637e-01, -2.210455018205757e-01, -2.226630980967979e-01, -2.509867670628173e-01, -2.509867670628172e-01, -3.051672996243322e-01, -2.683114602373871e-02, -3.813610198726133e-02, -2.692364612711645e-01, -4.213729270877453e-02, -5.892808687888948e-02, -5.952083691742205e-03, -3.480441114038236e-04, -9.161734233008989e-04, -5.620874117757456e-02, -1.549631940869756e-03, -1.549631940869746e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_revscan0_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revscan0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.454769503390045e+01, -2.454767768152730e+01, -2.454765130667354e+01, -2.454792668431676e+01, -2.454768555786483e+01, -2.454768555786483e+01, -4.014396037469388e+00, -4.014728719882187e+00, -4.024610396430340e+00, -4.021168531146719e+00, -4.014507538624016e+00, -3.557482210498105e+00, -5.842411912959875e-01, -6.332745625683338e-01, -6.026199528198619e-01, -6.137701071357019e-01, -6.340200935591025e-01, -6.340200935591025e-01, -1.691162740240090e-01, -1.727349998464250e-01, -6.377623436094750e-01, -7.312707925436360e-02, -1.701857696725461e-01, -1.701857696725461e-01, 3.093661682921712e-01, 2.994864033602481e-01, 1.171831013789976e-01, 8.003700249272375e-01, 2.959711719438820e-01, 2.959711719439412e-01, -5.568593639172105e+00, -5.570249994173862e+00, -5.568771826181911e+00, -5.807201643789175e+00, -5.569431116665906e+00, -5.569431116665906e+00, -2.052717203128584e+00, -2.102447202101029e+00, -2.032588257366647e+00, -2.070205418093783e+00, -2.115046676545055e+00, -1.995936003676605e+00, -6.060274864818639e-01, -6.697663179981771e-01, -5.690491471960246e-01, -6.029807816555836e-01, -6.333919011091057e-01, -7.163468884135495e-01, -7.016283324885364e-02, -1.497384806234413e-01, -6.935067862793984e-02, -2.016526917698076e+00, -5.497089319125463e-02, -5.497089319125463e-02, -3.331601979725257e-03, 6.824980237030648e-01, 4.678444322084323e-01, -4.308516869163537e-02, -3.469225180233343e-03, 6.653387166958109e-01, -6.491146859419381e-01, -6.427748906635444e-01, -6.533536923006790e-01, -6.467672806754974e-01, -6.458862802345449e-01, -6.458862802345449e-01, -6.272459739279529e-01, -5.236485485061273e-01, -5.537836171957943e-01, -5.816783189068742e-01, -5.674403931622860e-01, -6.254457453804404e-01, -6.990205572683786e-01, -1.878884028023145e-01, -2.632499637775112e-01, -3.721967668575489e-01, -3.080481102524298e-01, -3.080481102524298e-01, -5.311936744485195e-01, 1.375581957273195e-01, 8.798692159519081e-02, -3.396776943256334e-01, -5.677210758580786e-02, 3.091884134090949e-03, 4.147118528688392e-01, 1.451274832290804e+00, 7.535642481261149e-01, 3.202053517593553e-03, 6.425720420759385e-01, 6.425720420760055e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_revscan0_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revscan0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.221569711162402e-08, -1.221527964261618e-08, -1.221335771802434e-08, -1.222016505483955e-08, -1.221547784496500e-08, -1.221547784496500e-08, -1.577291411152826e-05, -1.577647269689887e-05, -1.587843199380507e-05, -1.583455807461994e-05, -1.577360239516225e-05, -4.601213710278837e-06, -8.106904316540021e-03, -3.166925426054300e-03, -3.493533683965404e-03, -3.399916325443570e-03, -3.159503066395200e-03, -3.159503066395200e-03, -5.570840953823664e-01, -5.299864367980136e-01, -3.989072906385864e-03, -1.907057634844751e+00, -5.487436958412233e-01, -5.487436958412233e-01, -3.705324919833902e+04, -3.118010476412576e+04, -1.483066538409277e+02, -5.035489665975848e+05, -3.252139752319715e+04, -3.252139752320353e+04, -1.139691092672914e-06, -1.140069718527658e-06, -1.139737020714141e-06, -2.561267884267512e-06, -1.139875328079396e-06, -1.139875328079396e-06, -1.205996213471679e-04, -1.228168146397272e-04, -1.197523984846854e-04, -1.212229804056499e-04, -1.237050827651549e-04, -4.365542851795744e-05, -6.321651190096525e-03, -5.004806039452369e-03, -7.510214524169230e-03, -6.750194934153973e-03, -5.603959744940618e-03, -2.454766433817104e-02, -1.877473623960407e+01, -5.262345222155961e-01, -1.975276941472803e+01, -5.485588647634700e-05, -3.645723427360946e+00, -3.645723427360946e+00, -3.440976496034245e+06, -3.605331714171617e+05, -1.164449376913598e+06, -1.263815438691360e+02, -2.926668519467036e+06, -5.155174893171387e+05, -7.377132431115059e-03, -7.201603043532566e-03, -1.003301766419832e-02, -7.308951985496659e-03, -7.284071993284413e-03, -7.284071993284413e-03, -8.264807806056753e-03, -1.109603752581664e-02, -9.884962376977433e-03, -9.080430439776004e-03, -9.453715519227296e-03, -3.472390512404967e-02, -4.013325844260670e-03, -5.703130715187978e-01, -1.104383480287985e-01, -1.197719275238751e-01, -6.938669162448226e-02, -6.938669162448222e-02, -5.687428638361702e-02, -1.984218424572812e+02, -6.163196824641397e+01, -5.603623893210972e-02, -4.334899358019494e+01, -1.465284603740707e+01, -1.920232402070929e+04, -3.908012782756622e+07, -4.157848435108071e+06, -1.768612731367369e+01, -9.609364600478072e+05, -9.609364600479099e+05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_revscan0_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revscan0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.640602592807719e-03, 1.640562351690223e-03, 1.640383261552286e-03, 1.641038532062125e-03, 1.640581415298608e-03, 1.640581415298608e-03, 7.091857202482281e-03, 7.094610843660008e-03, 7.175466750241304e-03, 7.143994413232368e-03, 7.092588202158620e-03, 3.343522484908200e-03, 6.730237707880283e-03, 1.616856089923114e-02, 1.641862692669488e-02, 1.637327064021581e-02, 1.616291526201896e-02, 1.616291526201896e-02, 5.829138711822206e-02, 5.773925443146310e-02, 1.876799381012074e-03, 7.400631394105206e-02, 5.812078631284708e-02, 5.812078631284708e-02, 6.227314797293961e-01, 6.023368453959914e-01, 1.950468350987327e-01, 9.324937594212119e-01, 6.088129959223971e-01, 6.088129959225155e-01, 2.668584972867381e-03, 2.670222229286263e-03, 2.668768384324398e-03, 5.136719084505081e-03, 2.669402689399544e-03, 2.669402689399544e-03, 7.804346465037384e-03, 8.496693587980254e-03, 7.525887098550356e-03, 8.038083311771329e-03, 8.693345257529177e-03, 5.790026182864507e-03, 2.116936993387258e-02, 2.109249626829098e-02, 2.160614091086776e-02, 2.182585970668935e-02, 2.090557266492959e-02, 6.820699710386299e-02, 5.085419416323480e-04, 5.568340881163104e-02, 5.761236077017081e-04, 6.587785388551063e-03, 8.650043318949180e-02, 8.650043318949180e-02, 1.132168895019872e-07, 8.947869082539250e-01, 1.216866758344341e+00, 1.243755218702788e-04, 1.303897555622116e-07, 9.677824137157010e-01, 2.540454067683382e-02, 2.474168839569658e-02, 3.211523285793517e-02, 2.515408572789421e-02, 2.506124724943196e-02, 2.506124724943196e-02, 2.594160413263560e-02, 2.420868358736152e-02, 2.433279409258991e-02, 2.475136996349807e-02, 2.449676320966634e-02, 7.260015535890220e-02, 1.962151117222236e-02, 8.597463435143247e-03, 3.945747781678846e-02, 4.608852461540629e-02, 3.589038119683351e-02, 3.589038119683347e-02, 5.856730330833097e-02, 2.068852976430542e-01, 1.605351865874266e-01, 3.522488529802986e-02, 4.613697697292039e-04, 1.183715530516329e-01, 5.193655158880643e-01, 1.989458109578401e+00, 1.451234325092754e+00, 1.240517533626928e-01, 1.107271133049004e+00, 1.107271133049117e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
