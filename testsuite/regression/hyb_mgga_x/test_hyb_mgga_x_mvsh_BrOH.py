
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_mvsh_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_mvsh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.651465835213505e+01, -1.651471982004024e+01, -1.651502157943542e+01, -1.651401664237759e+01, -1.651469050978117e+01, -1.651469050978117e+01, -2.311965891103356e+00, -2.312019288834812e+00, -2.313716442329543e+00, -2.313242151264155e+00, -2.311991709574581e+00, -2.835228937747681e+00, -4.225355270890176e-01, -5.385187327859128e-01, -5.224189713098280e-01, -5.273735142774488e-01, -5.389101205319754e-01, -5.389101205319754e-01, -1.469207633152521e-01, -1.490597746647672e-01, -4.996326939348226e-01, -9.706578994370588e-02, -1.475609150921446e-01, -1.475609150921446e-01, -2.634467111927102e-03, -2.821747503494608e-03, -2.041789375301049e-02, -7.682278739672740e-04, -2.793391897135102e-03, -2.793391897135044e-03, -4.252081765799450e+00, -4.252845953658692e+00, -4.252162438513951e+00, -4.085424102106280e+00, -4.252470133858720e+00, -4.252470133858720e+00, -1.277486389332501e+00, -1.290224825061029e+00, -1.272264688230761e+00, -1.282173090064077e+00, -1.293025672947870e+00, -1.605987109451837e+00, -4.737686707481945e-01, -5.149616407535091e-01, -4.492930489082048e-01, -4.690155671548542e-01, -4.921143031563070e-01, -4.432826834522522e-01, -5.938146645853937e-02, -1.445731986632270e-01, -5.864018639073025e-02, -1.565823671411837e+00, -8.106155749809381e-02, -8.106155749809381e-02, -2.863895070654827e-03, -9.155961325508859e-04, -7.049850893363530e-04, -3.681664217703574e-02, -2.982183815416341e-03, -8.173681262928164e-04, -4.893088481336670e-01, -4.866865039238057e-01, -4.789295548815962e-01, -4.883525962387931e-01, -4.879896683770399e-01, -4.879896683770399e-01, -4.736022557698150e-01, -4.104244005398896e-01, -4.289425809777704e-01, -4.460376199338132e-01, -4.373347314507164e-01, -4.111312220014492e-01, -5.398666081420593e-01, -1.449734889163514e-01, -2.221443581063805e-01, -2.296190857460544e-01, -2.522341094985567e-01, -2.522341094985567e-01, -3.033041455705360e-01, -1.803825795515748e-02, -2.799606876048686e-02, -2.702300344140658e-01, -4.815697896124407e-02, -5.033381392462249e-02, -2.971589518221842e-03, -1.328020462600423e-04, -3.783767076044005e-04, -4.798778692550905e-02, -6.682238838337893e-04, -6.682238838336921e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_mvsh_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_mvsh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.334063957050097e+01, -2.334066658678334e+01, -2.334083168126587e+01, -2.334038580230043e+01, -2.334065348437739e+01, -2.334065348437739e+01, -3.433448515687503e+00, -3.433632791324233e+00, -3.439341131970263e+00, -3.437395467049736e+00, -3.433515992313213e+00, -3.202327886183213e+00, -5.916143576365493e-01, -4.906998775815673e-01, -4.450622750549389e-01, -4.635764233238836e-01, -4.918169115921330e-01, -4.918169115921330e-01, -1.242241960439985e-01, -1.290665112813209e-01, -6.891417404911446e-01, 1.612552146459219e-02, -1.256363533809589e-01, -1.256363533809589e-01, 4.192157181890943e-01, 4.101911070276829e-01, 2.570909402869157e-01, 9.052156789190942e-01, 4.054505383816730e-01, 4.054505383815772e-01, -5.458400055515171e+00, -5.461003129332028e+00, -5.458683228272757e+00, -5.672710309946349e+00, -5.459712663715649e+00, -5.459712663715649e+00, -1.853412792119129e+00, -1.878832082942876e+00, -1.842955285204104e+00, -1.862604538892708e+00, -1.884781335758198e+00, -1.758972250501460e+00, -5.686120244125421e-01, -6.490806620909999e-01, -5.228064461283177e-01, -5.716222906059850e-01, -6.018118030094033e-01, -7.587489997000301e-01, -7.977480632934197e-02, -7.962749516677027e-02, -7.881118215319526e-02, -1.918222820676615e+00, 2.893407923165545e-02, 2.893407923165545e-02, -3.818626977035807e-03, 7.894464234918274e-01, 5.456048513271233e-01, -4.923856862064702e-02, -3.976359365019359e-03, 7.649442208462820e-01, -6.464995625399493e-01, -6.372464131944621e-01, -6.516886425553712e-01, -6.431265122686085e-01, -6.418430609624859e-01, -6.418430609624859e-01, -6.237289564654892e-01, -4.886797957101881e-01, -5.293654295929581e-01, -5.663190392070022e-01, -5.475491713135914e-01, -5.923967650210330e-01, -6.719211508025391e-01, -2.007430579441516e-01, -2.078169123428205e-01, -3.339102191466066e-01, -2.609542999411804e-01, -2.609542999411803e-01, -4.544433654619768e-01, 2.823936896877441e-01, 2.280990931487546e-01, -3.069745968777317e-01, -6.462956352980187e-02, 1.068100452008016e-01, 5.521135506246952e-01, 1.456706703455192e+00, 8.195449802304502e-01, 1.024028720028117e-01, 7.305595898273465e-01, 7.305595898261712e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_mvsh_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_mvsh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-5.008424951680316e-09, -5.008290978090419e-09, -5.007665766544496e-09, -5.009853122131653e-09, -5.008354640671119e-09, -5.008354640671119e-09, -3.957571327732838e-06, -3.959718344702909e-06, -4.024452688959930e-06, -3.997941492440778e-06, -3.958091857251995e-06, -1.125394566363182e-05, -5.614698243822676e-04, -8.119639551870211e-03, -8.964666352847116e-03, -8.723704889133117e-03, -8.100181739117442e-03, -8.100181739117442e-03, -1.429455043786876e+00, -1.360004380424637e+00, -1.234520799637611e-04, -4.572733255294505e+00, -1.408113202044913e+00, -1.408113202044913e+00, -4.945104872364829e+04, -4.200143952705723e+04, -2.697770733715682e+02, -5.682751740836629e+05, -4.381516462941498e+04, -4.381516462940475e+04, -2.283173941709354e-06, -2.281640074501478e-06, -2.283012516521232e-06, -1.460812382542751e-06, -2.282393599267040e-06, -2.282393599267040e-06, -2.430943913775667e-05, -2.580770853957137e-05, -2.365920038273844e-05, -2.481195656080935e-05, -2.625623453777223e-05, -1.084698096780360e-04, -1.463350134025759e-02, -1.058130479654398e-02, -1.797152894445654e-02, -1.528291839996667e-02, -1.261763572192506e-02, -2.293908069583583e-02, -2.468843543728165e-02, -1.328869265772660e+00, -2.895213084373600e-02, -1.231451549387657e-04, -8.644720970919160e+00, -8.644720970919160e+00, -5.184750370209705e-02, -4.158014782571541e+05, -1.353551493500261e+06, -2.621555912957026e-02, -5.288350312738976e-02, -5.910826535611763e+05, -1.307508153837416e-02, -1.334246368902776e-02, -1.081649615463064e-02, -1.317192261931807e-02, -1.320886674465697e-02, -1.320886674465697e-02, -1.489123670506530e-02, -2.593928930360841e-02, -2.189771222103499e-02, -1.882292055674927e-02, -2.031775822164548e-02, -1.495704859723781e-02, -8.740280596921486e-03, -2.231853897293785e-02, -2.828217252439943e-01, -2.480064949512996e-02, -1.754871070533694e-01, -1.754871070533696e-01, -1.592697116156308e-02, -3.507466047256378e+02, -1.185063073530998e+02, -1.365612677417896e-01, -4.232420556075597e-02, -3.222406714996296e+01, -2.523154870437450e+04, -3.921682746490727e+07, -4.516481493820578e+06, -3.887901365707054e+01, -1.089965195094533e+06, -1.089965195092786e+06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_mvsh_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_mvsh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [7.745718150747290e-04, 7.745567358345517e-04, 7.744893569738552e-04, 7.747351826321651e-04, 7.745638810166681e-04, 7.745638810166681e-04, 2.641160840690826e-03, 2.642610331540235e-03, 2.686608866044988e-03, 2.669244094027013e-03, 2.641550537736674e-03, 7.665585241343699e-03, 2.639210234575534e-03, 3.970699816362653e-02, 4.065657593746545e-02, 4.040346151975760e-02, 3.968403005542365e-02, 3.968403005542365e-02, 1.444527306738727e-01, 1.427295960275140e-01, 9.989799597285222e-04, 1.815655718176196e-01, 1.439301179549676e-01, 1.439301179549676e-01, 8.303842842733961e-01, 8.106530267014782e-01, 3.550578331935694e-01, 1.052150440346709e+00, 8.194978025680203e-01, 8.194978025678291e-01, 5.132571978567530e-03, 5.131668898933000e-03, 5.132476735167275e-03, 3.269698497682018e-03, 5.132112881930124e-03, 5.132112881930124e-03, 2.882324512594492e-03, 3.125107855726608e-03, 2.781325209508383e-03, 2.965364021751331e-03, 3.192805824111968e-03, 1.350997567500972e-02, 4.599269852690830e-02, 4.236799791972543e-02, 4.844077290486762e-02, 4.648121520235743e-02, 4.430378009366057e-02, 7.967510577557285e-02, 3.590852011249371e-04, 1.401294979931885e-01, 4.051139208998528e-04, 1.392467442477459e-02, 2.100783518696967e-01, 2.100783518696967e-01, 8.616170519037326e-08, 1.031693213785456e+00, 1.414091086323581e+00, 9.188380231902143e-05, 9.922839569891104e-08, 1.109378513660582e+00, 4.461205606723585e-02, 4.485057027682395e-02, 3.648563025827788e-02, 4.469888086248350e-02, 4.473187824435197e-02, 4.473187824435197e-02, 4.609103584693477e-02, 5.307638474872090e-02, 5.084087845002910e-02, 4.892111258683209e-02, 4.988175230939701e-02, 3.643033269475987e-02, 4.040298929997962e-02, 4.366063156674359e-03, 9.649497478358784e-02, 1.698284520708336e-02, 8.569519053684313e-02, 8.569519053684319e-02, 2.357593169584801e-02, 3.656748551969801e-01, 3.096774728050725e-01, 8.044982436108161e-02, 3.291643158514011e-04, 2.647584146322527e-01, 6.819079922076475e-01, 1.996362183045496e+00, 1.576225309719309e+00, 2.773348944630127e-01, 1.255687112767600e+00, 1.255687112765582e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
