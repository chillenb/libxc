
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_mvsh_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_mvsh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.736907413640918e+01, -1.736911989639210e+01, -1.736939424637052e+01, -1.736864688114181e+01, -1.736909763850142e+01, -1.736909763850142e+01, -2.522425543115002e+00, -2.522596406079068e+00, -2.528040297981110e+00, -2.528929466758476e+00, -2.522467146169159e+00, -2.522467146169159e+00, -4.316909478730675e-01, -4.311713614598098e-01, -4.181249518107292e-01, -4.242315076584459e-01, -4.315049765547728e-01, -4.315049765547728e-01, -1.400349185119878e-01, -1.416228086260511e-01, -5.021603604677171e-01, -7.819230935317305e-02, -1.404409402084172e-01, -1.404409402084172e-01, -1.981924000707362e-03, -2.123813933442104e-03, -1.589699332823566e-02, -6.259394890140934e-04, -2.102503697316512e-03, -2.102503697316512e-03, -4.250690722486397e+00, -4.251471174510388e+00, -4.250790707869726e+00, -4.251396445038456e+00, -4.251063694026644e+00, -4.251063694026644e+00, -1.548634817192260e+00, -1.566005239692382e+00, -1.547178134936173e+00, -1.561102182474718e+00, -1.562360767617470e+00, -1.562360767617470e+00, -4.531282271904392e-01, -4.935228917921260e-01, -4.195412521839876e-01, -4.399444046319839e-01, -4.748934681865017e-01, -4.748934681865017e-01, -5.117393807553559e-02, -1.369729368016986e-01, -5.111090723909816e-02, -1.462472578949034e+00, -6.564973854001226e-02, -6.564973854001226e-02, -5.975057726837442e-04, -7.302226386242631e-04, -5.404540008879669e-04, -2.628039972550523e-02, -6.668179845033279e-04, -6.668179845033280e-04, -4.863808667064385e-01, -4.838329668881339e-01, -4.847461357996534e-01, -4.854510952488352e-01, -4.850969341270848e-01, -4.850969341270848e-01, -4.680812853878217e-01, -4.070751993704915e-01, -4.247555418446065e-01, -4.412080677250432e-01, -4.325937612338140e-01, -4.325937612338140e-01, -5.126629915576959e-01, -1.801065845221845e-01, -2.123878723760149e-01, -2.670756859654004e-01, -2.400749720251577e-01, -2.400749720251577e-01, -3.550309422872818e-01, -1.389566233673128e-02, -2.200695209327288e-02, -2.532487951554207e-01, -4.006903965568884e-02, -4.006903965568884e-02, -2.411955183010623e-03, -1.118998969588183e-04, -2.876048427365858e-04, -3.823076549482516e-02, -5.477332953535618e-04, -5.477332953535605e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_mvsh_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_mvsh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.217257261207176e+01, -2.217265163737866e+01, -2.217296356677384e+01, -2.217166696163024e+01, -2.217261466967998e+01, -2.217261466967998e+01, -3.882797989332554e+00, -3.883066949343666e+00, -3.890860039419606e+00, -3.888184652165265e+00, -3.882888554093682e+00, -3.882888554093682e+00, -6.082102192434734e-01, -6.073383883114196e-01, -5.860324833766356e-01, -5.950678046690201e-01, -6.078994002467606e-01, -6.078994002467606e-01, -1.608892767568643e-01, -1.646871308795183e-01, -6.955389640799152e-01, -1.231394067624849e-01, -1.620796578729179e-01, -1.620796578729179e-01, -3.353608020119885e-03, -3.803820521972698e-03, -3.079685415407020e-02, -1.251854946189295e-03, -3.617357816070488e-03, -3.617357816070501e-03, -5.461017841031155e+00, -5.463584459104156e+00, -5.461264122669899e+00, -5.463260857198459e+00, -5.462356283501027e+00, -5.462356283501027e+00, -1.879253340833162e+00, -1.886165436539405e+00, -1.860012399286016e+00, -1.864181232644488e+00, -1.908216629860467e+00, -1.908216629860467e+00, -6.093199215545166e-01, -6.802279340304724e-01, -5.892348137442980e-01, -6.285398502401688e-01, -6.346503628172988e-01, -6.346503628172988e-01, -9.016640986328366e-02, -1.309623512484427e-01, -8.917305328863100e-02, -2.143030554957679e+00, -9.672012027629236e-02, -9.672012027629236e-02, -1.194765037593105e-03, -1.460335451701828e-03, -1.080101924021278e-03, -5.127870767103947e-02, -1.333605295364049e-03, -1.333605295364049e-03, -6.505256667094871e-01, -6.415416776201448e-01, -6.447647536083705e-01, -6.472529704842575e-01, -6.460091474567394e-01, -6.460091474567394e-01, -6.311011237686488e-01, -4.980341117601840e-01, -5.388453322589177e-01, -5.752676075563828e-01, -5.572456551581085e-01, -5.572456551581086e-01, -7.134003646000171e-01, -1.854311304014148e-01, -2.526307873747543e-01, -3.531604879072630e-01, -3.019023193699526e-01, -3.019023193699526e-01, -4.606786851591852e-01, -2.564208745621458e-02, -4.252732172776586e-02, -3.447027691000212e-01, -7.098333512422607e-02, -7.098333512422611e-02, -4.822986493036988e-03, -2.237998595016597e-04, -5.748921178886977e-04, -6.832231224628052e-02, -1.095450371153008e-03, -1.095450371153005e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_mvsh_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_mvsh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-7.624423320834172e-09, -7.624367706635448e-09, -7.624259982649888e-09, -7.625184784824988e-09, -7.624392601872696e-09, -7.624392601872696e-09, -1.954418262139897e-05, -1.955325024412588e-05, -1.981769300901714e-05, -1.985238668642453e-05, -1.954533555269927e-05, -1.954533555269927e-05, -1.296983419322460e-03, -1.294188394420590e-03, -1.268095421214037e-03, -1.571958747649657e-03, -1.296351746340867e-03, -1.296351746340867e-03, -8.430368878477910e-01, -8.203727386980115e-01, -1.422217225055356e-04, 9.317754669822929e-02, -8.360160838262616e-01, -8.360160838262616e-01, -1.621264390938376e+01, 6.978576544999527e+00, 2.976345435299705e+00, 1.412943192810624e+02, -9.248144072985529e+00, -9.248144072983244e+00, -2.274786007686684e-06, -2.273357689882421e-06, -2.274741667652147e-06, -2.273624585595065e-06, -2.273916930331354e-06, -2.273916930331354e-06, -8.077675118464269e-05, -8.238105108360802e-05, -8.362159733191813e-05, -8.514591270421414e-05, -7.836337933118218e-05, -7.836337933118218e-05, -8.966008002098545e-03, -6.618645802990538e-03, -1.767376242453926e-02, -1.230961196665336e-02, -8.408178623454870e-03, -8.408178623454870e-03, 3.001523672392168e-01, -8.719268981537719e-01, 2.848864010223418e-01, -1.172694281110699e-04, -7.868963909045390e-01, -7.868963909045390e-01, 1.544336389392532e+02, 1.267693629671039e+02, 3.745955717476795e+02, 2.333245206946568e+00, 1.861037316568600e+02, 1.861037316568599e+02, -1.222498321787143e-02, -1.249022059216096e-02, -1.239405988224710e-02, -1.232079766071751e-02, -1.235699949227499e-02, -1.235699949227499e-02, -1.305359563779932e-02, -2.360791795052698e-02, -1.958014695261592e-02, -1.663855884896677e-02, -1.794965764354362e-02, -1.794965764354362e-02, -5.297774067925085e-03, -3.797915878904610e-01, -1.686716066696786e-01, -1.044452865738504e-01, -1.047805339479610e-01, -1.047805339479611e-01, -2.443654333354885e-02, 1.262470020278738e+00, 1.979189972347483e+00, -1.173388611860647e-01, 4.006603327702237e-01, 4.006603327702338e-01, 3.854676304781701e+01, 1.241478945753794e+03, 4.298202964558924e+02, 6.849722737968089e-01, 3.009476280955663e+02, 3.009476280955668e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_mvsh_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_mvsh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_mvsh_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_mvsh", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.187286018944197e-03, 1.187285776844820e-03, 1.187313037969931e-03, 1.187319045316566e-03, 1.187285620877732e-03, 1.187285620877732e-03, 1.310477281165849e-02, 1.311090028052646e-02, 1.329114893032868e-02, 1.331645824141156e-02, 1.310574636736264e-02, 1.310574636736264e-02, 6.613998484423908e-03, 6.588506942119681e-03, 6.202390368245683e-03, 7.665442360430683e-03, 6.606477886970938e-03, 6.606477886970938e-03, 8.705264114158540e-02, 8.766437735885643e-02, 1.450939278195093e-03, 7.561207371673401e-03, 8.721467984387656e-02, 8.721467984387656e-02, 1.260781948046934e-03, 9.273011870923587e-04, 1.524922395268160e-03, 1.415593622611293e-07, 1.243991186547283e-03, 1.243991186547241e-03, 5.113637430513678e-03, 5.112962697494110e-03, 5.113805451880322e-03, 5.113266260883365e-03, 5.112972860943648e-03, 5.112972860943648e-03, 9.867796267952162e-03, 1.025886380473842e-02, 1.013102422458882e-02, 1.047107431346677e-02, 9.801662787730890e-03, 9.801662787730890e-03, 2.814880633429762e-02, 2.639341543378077e-02, 4.721083106879177e-02, 3.715139994980845e-02, 2.948986090073808e-02, 2.948986090073808e-02, 7.515152193596136e-03, 9.431225914595706e-02, 8.513032847097441e-03, 1.314559212310050e-02, 3.077233322445235e-02, 3.077233322445235e-02, 6.363234095945772e-07, 3.988182687334985e-07, 2.986236761373551e-06, 7.377757375858610e-04, 2.314453130718895e-07, 2.314453130719730e-07, 4.168834654986511e-02, 4.196591020213868e-02, 4.186509456036850e-02, 4.178861772132516e-02, 4.182550393015855e-02, 4.182550393015855e-02, 4.035702741336460e-02, 4.832425305004681e-02, 4.545780704691233e-02, 4.322233327929811e-02, 4.405517110354019e-02, 4.405517110354019e-02, 2.436014314277384e-02, 7.978242348882285e-02, 5.847910032560434e-02, 7.265781380827110e-02, 5.159897158343280e-02, 5.159897158343280e-02, 3.697488506687681e-02, 2.989480597589291e-03, 1.865224799260615e-03, 6.863438843298127e-02, 9.574536771819221e-03, 9.574536771819147e-03, 3.894995692308533e-06, 1.946640844097391e-09, 7.851141246814229e-07, 8.765089514786996e-03, 1.777614460511098e-07, 1.777614460511927e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
