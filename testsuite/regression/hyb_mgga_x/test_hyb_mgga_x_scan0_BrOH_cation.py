
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_scan0_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_scan0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.738802100720736e+01, -1.738807268286019e+01, -1.738833975230446e+01, -1.738757167765339e+01, -1.738796880160954e+01, -1.738796880160954e+01, -2.513241244322808e+00, -2.513330142081946e+00, -2.515956580969342e+00, -2.516865037652546e+00, -2.515827368647808e+00, -2.515827368647808e+00, -4.490629655449251e-01, -4.485254553872981e-01, -4.364526453908379e-01, -4.455704255898003e-01, -4.444397894867163e-01, -4.444397894867163e-01, -1.346980576434314e-01, -1.361474369504656e-01, -4.931410067916421e-01, -8.669636562011325e-02, -1.231700575798809e-01, -1.231700575798809e-01, -1.956146118878728e-03, -2.103497735390748e-03, -1.807939995285906e-02, -9.105336666879382e-04, -1.473253068026228e-03, -1.473253068026229e-03, -4.251008885931645e+00, -4.251837731509192e+00, -4.251065816672030e+00, -4.251796778137033e+00, -4.251419359156698e+00, -4.251419359156698e+00, -1.558740045863657e+00, -1.575868307104291e+00, -1.553738163817939e+00, -1.569002470484856e+00, -1.570782835255888e+00, -1.570782835255888e+00, -4.620959743126996e-01, -5.019472189619201e-01, -4.061944028484840e-01, -4.149214163985443e-01, -4.718524497265834e-01, -4.718524497265834e-01, -5.584903326029725e-02, -1.292517713035793e-01, -5.113958142235877e-02, -1.428535552043858e+00, -7.178310280746117e-02, -7.178310280746120e-02, -6.531250818303984e-04, -8.961085688446106e-04, -7.381207737145114e-04, -3.247351737517879e-02, -9.432274710738286e-04, -9.432274710738289e-04, -4.799187340168146e-01, -4.772190030570941e-01, -4.781763715404297e-01, -4.789585288942658e-01, -4.785667639929844e-01, -4.785667639929844e-01, -4.650061049033682e-01, -3.990679748586611e-01, -4.181710950306050e-01, -4.369406350993211e-01, -4.272308488181351e-01, -4.272308488181351e-01, -5.190206217881845e-01, -1.713831761163418e-01, -2.042478614799891e-01, -2.627186349456353e-01, -2.342343686309875e-01, -2.342343686309875e-01, -3.580375369517810e-01, -1.711399722522121e-02, -2.479537387838067e-02, -2.583331783998530e-01, -4.384561298023690e-02, -4.384561298023690e-02, -3.028582669599934e-03, -1.654536544518378e-04, -4.379292435688777e-04, -4.178312054643195e-02, -8.543827656479054e-04, -8.543827656479046e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_scan0_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_scan0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.264521524412097e+01, -2.264528359670239e+01, -2.264530819141403e+01, -2.264535109328663e+01, -2.264560723215295e+01, -2.264577909961859e+01, -2.264455845309895e+01, -2.264444216651972e+01, -2.264527096274827e+01, -2.264497776055290e+01, -2.264527096274827e+01, -2.264497776055290e+01, -3.516235407198424e+00, -3.513772416076970e+00, -3.517060988809137e+00, -3.514143685111906e+00, -3.530711562365232e+00, -3.532674839826438e+00, -3.533315473627172e+00, -3.531868249747717e+00, -3.514003748640634e+00, -3.543438727461468e+00, -3.514003748640634e+00, -3.543438727461468e+00, -6.315016950156154e-01, -6.367807269579538e-01, -6.299608680897766e-01, -6.358177445379612e-01, -6.083807176122569e-01, -6.059023808533278e-01, -6.235878813406291e-01, -6.274591053859738e-01, -6.400289027657698e-01, -5.986320693143350e-01, -6.400289027657698e-01, -5.986320693143350e-01, -1.072423834776242e-01, -1.467744900138029e-01, -1.080639110982182e-01, -1.501909674459062e-01, -6.299026161372944e-01, -6.554449136710994e-01, -1.125743420189596e-01, -8.848925063549690e-02, -1.068317498377484e-01, -8.418868656448183e-02, -1.068317498377483e-01, -8.418868656448182e-02, -3.050699898425739e-03, -1.476598132231618e-03, -3.449629047669482e-03, -3.377332489781937e-03, -2.752417431871908e-02, -2.891545619425777e-02, -1.697508170526455e-03, -1.655586319632028e-03, -2.867359006744697e-03, -1.475854132944795e-03, -2.867359006744699e-03, -1.475854132944795e-03, -5.561098839739566e+00, -5.559752945694466e+00, -5.562917921951424e+00, -5.561510085458512e+00, -5.561209101781222e+00, -5.559819952259456e+00, -5.562769621031434e+00, -5.561415902643487e+00, -5.562023718263759e+00, -5.560634399905458e+00, -5.562023718263759e+00, -5.560634399905458e+00, -1.919373494168519e+00, -1.921354712669793e+00, -1.947988546499760e+00, -1.948907033790433e+00, -1.903724674899202e+00, -1.909992594815883e+00, -1.929429687006713e+00, -1.935789528148784e+00, -1.947940603816153e+00, -1.937771627463223e+00, -1.947940603816153e+00, -1.937771627463223e+00, -6.150606039650649e-01, -6.135115888123607e-01, -6.951814794445299e-01, -6.950290750025492e-01, -5.527930939756265e-01, -5.785413863237747e-01, -6.206802769126951e-01, -6.428139207624515e-01, -6.436137901444140e-01, -6.106100080232244e-01, -6.436137901444140e-01, -6.106100080232246e-01, -7.500978217857066e-02, -7.698794659077077e-02, -5.717898958343197e-02, -5.511445203185381e-02, -7.040031292536272e-02, -7.204101842051230e-02, -2.183274707527146e+00, -2.182293758936660e+00, -6.899991835068317e-02, -4.076732514969918e-02, -6.899991835068303e-02, -4.076732514969902e-02, -1.186626351339386e-03, -1.234241881024944e-03, -1.638483195680616e-03, -1.660487413176770e-03, -1.285932743710885e-03, -1.399881947035668e-03, -4.866316008589626e-02, -4.709089369325854e-02, -1.247440904732652e-03, -1.878790829104532e-03, -1.247440904732651e-03, -1.878790829104532e-03, -6.392729172618419e-01, -6.418006969327774e-01, -6.315419747588882e-01, -6.341206183917546e-01, -6.341946493748605e-01, -6.367731470093922e-01, -6.364545806174280e-01, -6.389856336347383e-01, -6.353191268786258e-01, -6.378732493992422e-01, -6.353191268786258e-01, -6.378732493992422e-01, -6.242105704903826e-01, -6.262214656828662e-01, -5.054806595878880e-01, -5.080566340157310e-01, -5.384406308105095e-01, -5.412117415237954e-01, -5.719838302970258e-01, -5.741135722860357e-01, -5.548969850520464e-01, -5.571453166836444e-01, -5.548969850520464e-01, -5.571453166836444e-01, -7.339429678399456e-01, -7.333184204227506e-01, -1.638424716816821e-01, -1.652307090962187e-01, -2.142235241973296e-01, -2.197949309881687e-01, -3.369887973983848e-01, -3.393244789843608e-01, -2.755748994365349e-01, -2.759510229084711e-01, -2.755748994365349e-01, -2.759510229084711e-01, -4.529252821226976e-01, -4.582839560974411e-01, -2.353586938001737e-02, -2.512196637050528e-02, -3.729580666438852e-02, -3.852320960145732e-02, -3.365410998873462e-01, -3.440761503988769e-01, -5.760762787002020e-02, -5.876825130166287e-02, -5.760762787002022e-02, -5.876825130166288e-02, -5.225548533480242e-03, -5.475519322753392e-03, -3.042807580475958e-04, -3.230431438591968e-04, -7.764837793643002e-04, -8.495132576960283e-04, -5.267550639953594e-02, -1.042016687849919e-03, -1.233240079784439e-03, -1.683097345617503e-03, -1.233240079784437e-03, -1.683097345617502e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_scan0_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_scan0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-8.953068797770344e-09, 0.000000000000000e+00, -8.951315412016368e-09, -8.952971534392463e-09, 0.000000000000000e+00, -8.951244986859578e-09, -8.952355497732617e-09, 0.000000000000000e+00, -8.950448126540293e-09, -8.953444011739083e-09, 0.000000000000000e+00, -8.951837288098256e-09, -8.953019274051154e-09, 0.000000000000000e+00, -8.951059053931705e-09, -8.953019274051154e-09, 0.000000000000000e+00, -8.951059053931705e-09, -2.289788651301798e-05, 0.000000000000000e+00, -2.271199253764463e-05, -2.295616868896717e-05, 0.000000000000000e+00, -2.273689446622806e-05, -2.390215206000555e-05, 0.000000000000000e+00, -2.402875558961738e-05, -2.414735184111548e-05, 0.000000000000000e+00, -2.402132692649182e-05, -2.279640110395805e-05, 0.000000000000000e+00, -2.481955893507552e-05, -2.279640110395805e-05, 0.000000000000000e+00, -2.481955893507552e-05, -7.401933710675572e-03, 0.000000000000000e+00, -7.685239740866611e-03, -7.340887614453895e-03, 0.000000000000000e+00, -7.640968121168128e-03, -6.381687734326966e-03, 0.000000000000000e+00, -6.489419604344357e-03, -7.584554055972788e-03, 0.000000000000000e+00, -7.865902982886863e-03, -7.612421430082230e-03, 0.000000000000000e+00, -8.835598397174993e-03, -7.612421430082230e-03, 0.000000000000000e+00, -8.835598397174993e-03, -3.482347813792875e+00, 0.000000000000000e+00, -1.783119883626458e+00, -3.616683487840901e+00, 0.000000000000000e+00, -1.773049259839962e+00, -1.938503115255385e-03, 0.000000000000000e+00, -2.361579621277715e-03, -7.618305020350458e-01, 0.000000000000000e+00, -3.643125919740145e+00, -3.266198612373857e+00, 0.000000000000000e+00, 2.500022563830360e-01, -3.266198612373853e+00, 0.000000000000000e+00, 2.500022563830363e-01, 1.067556210738549e+01, 0.000000000000000e+00, -1.322678598759776e+03, 1.627223705383497e+02, 0.000000000000000e+00, -1.113877906084943e+02, 3.857519962322387e+00, 0.000000000000000e+00, 1.988390721090422e+00, 6.705245382617281e+02, 0.000000000000000e+00, 6.794474978159649e+02, 3.210962682279094e+02, 0.000000000000000e+00, 1.597986134611838e+03, 3.210962682279118e+02, 0.000000000000000e+00, 1.597986134611840e+03, -2.521688206500886e-06, 0.000000000000000e+00, -2.523443482626287e-06, -2.522369851112672e-06, 0.000000000000000e+00, -2.524103598710785e-06, -2.521483006365512e-06, 0.000000000000000e+00, -2.523291000306914e-06, -2.522076641458606e-06, 0.000000000000000e+00, -2.523899153989579e-06, -2.522220958332735e-06, 0.000000000000000e+00, -2.523805178192150e-06, -2.522220958332735e-06, 0.000000000000000e+00, -2.523805178192150e-06, -1.447481729550347e-04, 0.000000000000000e+00, -1.429608648491701e-04, -1.326636994582090e-04, 0.000000000000000e+00, -1.315248383620981e-04, -1.401246130528873e-04, 0.000000000000000e+00, -1.399557367795528e-04, -1.296059745154855e-04, 0.000000000000000e+00, -1.292762507749707e-04, -1.405501614168266e-04, 0.000000000000000e+00, -1.370722046538435e-04, -1.405501614168266e-04, 0.000000000000000e+00, -1.370722046538435e-04, -2.604636251222539e-02, 0.000000000000000e+00, -2.561097784973073e-02, -2.173223536332322e-02, 0.000000000000000e+00, -2.117607507488668e-02, -5.496888857721886e-02, 0.000000000000000e+00, -4.565706567293654e-02, -5.870284697142947e-02, 0.000000000000000e+00, -5.069990341560495e-02, -1.980507574343441e-02, 0.000000000000000e+00, -2.850264509719107e-02, -1.980507574343441e-02, 0.000000000000000e+00, -2.850264509719106e-02, -1.280938028482544e+00, 0.000000000000000e+00, -9.871926609059061e-01, -3.391089236592779e+00, 0.000000000000000e+00, -3.429285079139470e+00, -4.668467664480235e-01, 0.000000000000000e+00, -1.219970879785639e+00, -4.193114757638953e-04, 0.000000000000000e+00, -4.199616422837079e-04, -4.679476244002898e+00, 0.000000000000000e+00, -1.115193093602449e+01, -4.679476244002919e+00, 0.000000000000000e+00, -1.115193093602452e+01, 1.344267385085315e+03, 0.000000000000000e+00, 1.158677988289694e+03, 7.995614196151283e+02, 0.000000000000000e+00, 7.447390764764066e+02, 3.518442862930517e+03, 0.000000000000000e+00, 3.368123662888883e+03, 9.564764843371687e-01, 0.000000000000000e+00, -1.217061252131807e+00, 2.303092311220976e+03, 0.000000000000000e+00, 1.138538986107680e+03, 2.303092311220972e+03, 0.000000000000000e+00, 1.138538986107678e+03, -1.901507392779246e-02, 0.000000000000000e+00, -1.870366434583107e-02, -1.844899688329242e-02, 0.000000000000000e+00, -1.815752423969136e-02, -1.863709649700941e-02, 0.000000000000000e+00, -1.834013041719434e-02, -1.880480004727646e-02, 0.000000000000000e+00, -1.850095019738533e-02, -1.872086919142862e-02, 0.000000000000000e+00, -1.842015140472766e-02, -1.872086919142862e-02, 0.000000000000000e+00, -1.842015140472766e-02, -2.311987980829538e-02, 0.000000000000000e+00, -2.270447502384178e-02, -2.924359190321456e-02, 0.000000000000000e+00, -2.875729355943436e-02, -2.649832651267960e-02, 0.000000000000000e+00, -2.605608097275637e-02, -2.468757806972512e-02, 0.000000000000000e+00, -2.435085343453262e-02, -2.574551098867340e-02, 0.000000000000000e+00, -2.527673905698801e-02, -2.574551098867341e-02, 0.000000000000000e+00, -2.527673905698802e-02, -2.116474252216918e-02, 0.000000000000000e+00, -2.002211018988997e-02, -8.742487853404187e-01, 0.000000000000000e+00, -8.623210037502915e-01, -5.540719953136081e-01, 0.000000000000000e+00, -5.251596218719139e-01, -2.694040923813573e-01, 0.000000000000000e+00, -2.661767924924404e-01, -3.493245931500560e-01, 0.000000000000000e+00, -3.501032501404933e-01, -3.493245931500558e-01, 0.000000000000000e+00, -3.501032501404933e-01, -6.432279682393859e-02, 0.000000000000000e+00, -5.924857501212735e-02, -9.210949725702598e+00, 0.000000000000000e+00, -3.847162465348500e+00, 1.380810525226714e+00, 0.000000000000000e+00, 9.181065162564136e-01, -3.355130860120111e-01, 0.000000000000000e+00, -2.325519009400314e-01, -2.230733462491858e+00, 0.000000000000000e+00, -3.973798649812507e+00, -2.230733462491855e+00, 0.000000000000000e+00, -3.973798649812502e+00, 1.278368716785151e+02, 0.000000000000000e+00, 1.208298211800114e+02, 1.558787945642775e+04, 0.000000000000000e+00, 2.168222256908230e+04, 3.545339641770914e+03, 0.000000000000000e+00, 3.303823102843752e+03, -4.312772273200405e+00, 0.000000000000000e+00, -3.657486358239059e+01, 3.795691007230880e+03, 0.000000000000000e+00, 1.396407760396335e+03, 3.795691007230887e+03, 0.000000000000000e+00, 1.396407760396346e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_scan0_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_scan0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_scan0_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_scan0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [7.207433407019482e-04, 7.206269464877339e-04, 7.207421003720561e-04, 7.206260602248774e-04, 7.207194367164574e-04, 7.205988487287258e-04, 7.207327676642013e-04, 7.206159738417461e-04, 7.207430945537437e-04, 7.205954646226547e-04, 7.207430945537437e-04, 7.205954646226547e-04, 6.622582326379335e-03, 6.556736392123251e-03, 6.642438848525403e-03, 6.564973950066718e-03, 6.962554381696334e-03, 7.004992609406721e-03, 7.059841109085726e-03, 7.014863682350559e-03, 6.584330718256624e-03, 7.286496226385501e-03, 6.584330718256624e-03, 7.286496226385501e-03, 1.319479818496630e-02, 1.374862384480396e-02, 1.308706082422102e-02, 1.364025547790404e-02, 1.122820798057229e-02, 1.167364325414246e-02, 1.459324593252540e-02, 1.523688953052683e-02, 1.332969073008924e-02, 1.725857301656741e-02, 1.332969073008924e-02, 1.725857301656741e-02, 1.393081566662513e-01, 8.218943049999164e-02, 1.496051086914749e-01, 8.584684943665888e-02, 1.433142153595822e-03, 2.135525166956156e-03, 1.647820381317014e-02, 7.036259781018606e-02, 1.481256058255427e-01, 1.658083827690587e-03, 1.481256058255426e-01, 1.658083827690586e-03, 4.311699235804369e-04, 2.989090231199061e-03, 1.901540635628351e-04, 7.746073833874301e-04, 7.717957807523278e-04, 1.340053109713808e-03, 5.932922669214973e-07, 7.711567132205756e-07, 3.050241217163424e-05, 2.569355113894589e-07, 3.050241217163231e-05, 2.569355113894581e-07, 2.941765779096468e-03, 2.941866364853629e-03, 2.943531786243204e-03, 2.943573940448439e-03, 2.941647957631271e-03, 2.941769507349602e-03, 2.943171259042393e-03, 2.943328472176242e-03, 2.942833484719610e-03, 2.942750864067710e-03, 2.942833484719610e-03, 2.942750864067710e-03, 8.969549688398784e-03, 8.866996079366222e-03, 8.443553565821077e-03, 8.371712706137045e-03, 8.572094418141309e-03, 8.600162560760502e-03, 8.118292267829199e-03, 8.136580893186262e-03, 8.927229353946461e-03, 8.630135368408431e-03, 8.927229353946461e-03, 8.630135368408431e-03, 4.074002015685374e-02, 3.985451903510975e-02, 4.109680568641969e-02, 4.020847543935872e-02, 6.045769872037197e-02, 5.779361945423886e-02, 6.640526049414058e-02, 6.655415138431915e-02, 3.514755857576599e-02, 4.267136759319286e-02, 3.514755857576599e-02, 4.267136759319284e-02, 1.080129942079862e-02, 9.241560315279038e-03, 1.428554063412274e-01, 1.464968448371323e-01, 5.211979807128706e-03, 9.501684313146026e-03, 2.039050070864954e-02, 2.039541546504011e-02, 4.521715749731613e-02, 1.221886348998382e-01, 4.521715749731632e-02, 1.221886348998386e-01, 1.726751093025890e-08, 1.996869964689603e-08, 1.446278866773584e-07, 1.136057304559823e-07, 1.508033012522712e-06, 1.844735259954547e-06, 1.617636573847617e-03, 4.769457054932575e-03, 1.960460887870561e-08, 5.601285921852011e-05, 1.960460887870572e-08, 5.601285921852064e-05, 3.037481293671936e-02, 3.023139326107777e-02, 2.941243594283940e-02, 2.928746000558019e-02, 2.973682558717121e-02, 2.960723911113242e-02, 3.001873033072486e-02, 2.988132817442101e-02, 2.987765132202412e-02, 2.974372216804800e-02, 2.987765132202412e-02, 2.974372216804800e-02, 3.338431554362768e-02, 3.314529319656308e-02, 2.921093288803576e-02, 2.909577123642634e-02, 2.991014146728390e-02, 2.979493221587751e-02, 3.105655439695060e-02, 3.095278926757045e-02, 3.065758906340458e-02, 3.045185343698379e-02, 3.065758906340458e-02, 3.045185343698378e-02, 4.522219599765616e-02, 4.320499273050787e-02, 7.577872909986427e-02, 7.602402814106568e-02, 8.169548855215665e-02, 7.983520965524200e-02, 8.802816417990270e-02, 8.828760411042720e-02, 7.844024831846258e-02, 7.851521277679185e-02, 7.844024831846250e-02, 7.851521277679185e-02, 4.763352977301129e-02, 4.496337884879700e-02, 4.609185820889481e-03, 3.054270439915996e-03, 1.335698991493332e-03, 1.677957963026426e-03, 9.485083763151794e-02, 7.048416921336559e-02, 9.557787999518031e-03, 1.661975968366858e-02, 9.557787999518003e-03, 1.661975968366857e-02, 1.834128948377353e-06, 1.817678422887793e-06, 3.311435559068821e-10, 2.451886347242368e-10, 8.691379189213779e-07, 1.059225618475946e-06, 1.395369333895437e-02, 9.682211666150915e-02, 6.105431572743656e-08, 4.132428437366408e-05, 6.105431572743631e-08, 4.132428437366245e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
