
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_scan0_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_scan0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.623252987396278e+01, -1.623262908771327e+01, -1.623306240747405e+01, -1.683152557427032e+01, -1.683213829380358e+01, -1.743201106749829e+01, -2.580835708995153e+00, -2.824578904415390e+00, -2.824938880052053e+00, -2.825049463235847e+00, -2.824744252253329e+00, -2.581082739459335e+00, -3.989791805557589e-01, -4.692984227746305e-01, -5.239525710159291e-01, -4.581091578216485e-01, -3.883102364462817e-01, -5.289944560095319e-01, -1.203746255579963e-01, -1.226331180212807e-01, -5.299775559214672e-01, -1.021144362033703e-01, -1.319392902596843e-01, -1.294751087545650e-01, -2.456471437218373e-03, -3.016973899875935e-03, -2.104662370488460e-02, -1.124492925259135e-03, -1.841151276223037e-03, -1.841151276223038e-03, -4.251765300959450e+00, -4.252585529270998e+00, -4.251806472326282e+00, -4.252530502919456e+00, -4.164647783491399e+00, -4.164722558350059e+00, -1.586746734177997e+00, -1.598873284806129e+00, -1.577849310799286e+00, -1.588589908364943e+00, -1.439696363986143e+00, -1.597768929601002e+00, -4.436631917602979e-01, -5.202551935795092e-01, -4.416850598446073e-01, -4.600121710094491e-01, -4.552259516560171e-01, -4.865198235069125e-01, -6.796937855073631e-02, -1.173603301987346e-01, -6.244385069497067e-02, -1.564861880556731e+00, -8.240357263699713e-02, -8.240357263699713e-02, -1.085900604606569e-03, -1.076824030607262e-03, -9.093011270315190e-04, -3.542509899590150e-02, -1.158955034277133e-03, -1.158955034277090e-03, -4.817452626119012e-01, -4.789129378622221e-01, -4.723759647082152e-01, -4.776669643365319e-01, -4.735073889618976e-01, -4.768986990760564e-01, -4.686795731173481e-01, -3.714574125788275e-01, -3.941605937466233e-01, -4.396818838765079e-01, -4.298144409011572e-01, -4.104565563235432e-01, -5.233508929665563e-01, -1.747886744664019e-01, -1.834531295719757e-01, -2.530550600730395e-01, -2.442858404649843e-01, -2.150456697179310e-01, -3.683337899850995e-01, -1.831174078218852e-02, -3.066087690587148e-02, -2.723820856782762e-01, -5.335487378470142e-02, -5.335487378470142e-02, -4.647802560856489e-03, -1.699653179027968e-04, -1.044498477939580e-03, -3.729661552682420e-02, -1.051076400585458e-03, -1.473865970908028e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_scan0_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_scan0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.454409739507304e+01, -2.454342340220642e+01, -2.454408239071928e+01, -2.454341265059287e+01, -2.454408542477147e+01, -2.454340290748138e+01, -2.454424742010767e+01, -2.263662837163061e+01, -2.454408343358129e+01, -2.263716326777285e+01, -2.263741055452614e+01, -2.263716326777286e+01, -3.531039937366710e+00, -3.891401127709114e+00, -3.531123483139585e+00, -3.530984035584561e+00, -3.532728305058724e+00, -3.533051972980433e+00, -3.532443309554892e+00, -3.532494779528784e+00, -3.530287877736091e+00, -3.534004605664308e+00, -3.890533988496078e+00, -3.534004605664308e+00, -6.037994471791142e-01, -6.124666236675661e-01, -6.010889597550693e-01, -6.331171035661277e-01, -6.015705758817858e-01, -5.949423119981824e-01, -6.087594598027288e-01, -5.815796239544175e-01, -6.212881505410680e-01, -5.358588334136452e-01, -6.405363781562465e-01, -5.709947661146492e-01, -1.375726139367072e-01, -1.549334805634627e-01, -1.400169882945451e-01, -1.599211977975271e-01, -6.234061713872322e-01, -6.509130453863119e-01, -6.221711248374448e-02, -7.319214630815017e-02, -1.493740379145095e-01, 2.496869653388681e-02, -1.493740379145094e-01, -7.043105816176272e-02, 6.879723656330518e-01, 6.595873029181316e-01, -4.454860987877530e-03, 6.238239529781167e-01, -2.483020187694534e-02, 2.112386757756999e-01, 1.083083013079652e+00, 1.089909849106379e+00, 7.576315271717016e-01, 8.705316981906843e-01, 7.576315271717016e-01, 8.705316981906273e-01, -5.560776841783442e+00, -5.559449699112995e+00, -5.562595143398347e+00, -5.561206323935875e+00, -5.560894477854069e+00, -5.559522025609761e+00, -5.562454125679854e+00, -5.561117292063028e+00, -5.815889191576407e+00, -5.560329943850176e+00, -5.561695656254721e+00, -5.814497020865323e+00, -1.956989427637616e+00, -1.957568540562191e+00, -1.978013598737378e+00, -1.977930399503482e+00, -1.938757275454417e+00, -1.944566593619287e+00, -1.957231116566474e+00, -1.963192439563709e+00, -1.982285884404303e+00, -2.086225605090741e+00, -1.982285884404302e+00, -1.970206650165693e+00, -6.114305443581076e-01, -5.836439018633154e-01, -6.760179508564217e-01, -6.769412877732788e-01, -5.424283200501570e-01, -5.685754499045177e-01, -5.764198689691298e-01, -5.989288602090090e-01, -6.402145397829926e-01, -5.958691881691887e-01, -6.402145397829926e-01, -6.051132788563407e-01, 2.252508128836574e-02, 2.068038182339381e-02, -1.348278313756332e-01, -1.251694388478676e-01, 4.403659555982081e-02, 2.885435074231213e-02, -2.011415174517692e+00, -2.010564385456625e+00, -2.227935627111406e-02, -4.875408093343895e-02, -2.227935627111413e-02, -4.875408093343898e-02, -1.916975193254575e-03, 1.481820682060403e+00, 1.133176266345654e+00, 1.181461873793607e+00, 6.095661630834991e-01, 5.659007979680295e-01, 1.069136778211766e-01, -4.179452148892156e-02, 1.181592799112583e+00, 6.062793434824133e-01, 1.181592799112503e+00, 6.062793434830300e-01, -6.371325861301855e-01, -6.397017548743126e-01, -6.300281545020335e-01, -6.326274999835304e-01, -6.426952760295592e-01, -6.450595633117552e-01, -6.427868730655257e-01, -6.371208255186622e-01, -6.427230882815476e-01, -6.451004346426976e-01, -6.427230882815476e-01, -6.360973042478996e-01, -6.195469783659135e-01, -6.217129366683491e-01, -5.065974464967888e-01, -4.586081546371933e-01, -5.388167262366477e-01, -6.082503285351188e-01, -5.710179417366599e-01, -5.731335831263351e-01, -5.546616174814070e-01, -5.569031205495857e-01, -5.546616174814070e-01, -6.195775446451733e-01, -7.046498969423139e-01, -7.776172008100770e-01, -1.844370348191955e-01, -1.861429625272829e-01, -2.261678368049228e-01, -2.441522165937578e-01, -3.621842673177930e-01, -3.480879322107235e-01, -2.934008751224892e-01, -2.935340589856559e-01, -2.934008751224891e-01, -2.952124059794412e-01, -4.593864065620606e-01, -4.638397234476869e-01, -2.436500383376799e-02, -2.453193307896744e-02, 1.745828147797673e-01, 1.629550178536072e-01, -3.373467434024069e-01, -3.462197379273133e-01, 4.745704304998419e-02, 2.451368651091557e-02, 4.745704304998388e-02, 2.451368651091589e-02, -6.081441948895418e-03, -6.301982601101486e-03, 2.316024555468326e+00, 2.317037490001402e+00, -1.345942710209384e-03, -1.431522367032682e-03, -4.965210527167119e-02, -5.052595579876716e-02, 8.337037032056458e-01, 6.317287080286856e-01, 8.337037032125996e-01, -2.363746019402950e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_scan0_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_scan0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.543301902369257e-08, 0.000000000000000e+00, -2.542814402558083e-08, -2.543195557512817e-08, 0.000000000000000e+00, -2.542737257632052e-08, -2.542876434745142e-08, 0.000000000000000e+00, -2.542274209518283e-08, -2.544072100162407e-08, 0.000000000000000e+00, -8.406284174568918e-09, -2.543235513403892e-08, 0.000000000000000e+00, -8.405889003213567e-09, -8.405362373382500e-09, 0.000000000000000e+00, -8.405889003213567e-09, -1.018937368889980e-05, 0.000000000000000e+00, -2.712000914592450e-05, -1.018965699322211e-05, 0.000000000000000e+00, -1.018981373908858e-05, -1.019536847045206e-05, 0.000000000000000e+00, -1.019596652062442e-05, -1.018985046888507e-05, 0.000000000000000e+00, -1.018928925292451e-05, -1.019527636749264e-05, 0.000000000000000e+00, -1.019369058958214e-05, -2.713013897451098e-05, 0.000000000000000e+00, -1.019369058958214e-05, -1.497530526051140e-02, 0.000000000000000e+00, -1.470127061170331e-02, -1.507969230901665e-02, 0.000000000000000e+00, -6.803170874202715e-03, -7.464725006317824e-03, 0.000000000000000e+00, -7.662445513135146e-03, -7.376940284007288e-03, 0.000000000000000e+00, -1.608711128813343e-02, -1.423231600627409e-02, 0.000000000000000e+00, -1.884561448305018e-02, -6.592397660420293e-03, 0.000000000000000e+00, -8.399891674914981e-03, -3.676209134044022e+00, 0.000000000000000e+00, -1.393987108687530e+00, -3.500184361935521e+00, 0.000000000000000e+00, -1.304561877224398e+00, -3.804874795603398e-03, 0.000000000000000e+00, -7.661122029771185e-03, -4.420850329225008e+00, 0.000000000000000e+00, -4.207086992129499e+00, -1.354008921791086e+00, 0.000000000000000e+00, -1.517907442240402e+01, -1.354008921791086e+00, 0.000000000000000e+00, -3.864119995885034e+01, -5.939940558490469e+05, 0.000000000000000e+00, -4.759620751945107e+05, -2.287643913094205e+06, 0.000000000000000e+00, -3.909333088963338e+05, -2.388009410285760e+03, 0.000000000000000e+00, -6.577320683201897e+02, -3.666845896458670e+06, 0.000000000000000e+00, -3.900337349799544e+06, -8.967072380508150e+05, 0.000000000000000e+00, -7.293807082644980e+06, -8.967072380508150e+05, 0.000000000000000e+00, -7.293807082644496e+06, -2.509878960422642e-06, 0.000000000000000e+00, -2.512302054088078e-06, -2.510690858754408e-06, 0.000000000000000e+00, -2.513088167826515e-06, -2.509951985146348e-06, 0.000000000000000e+00, -2.512349340927833e-06, -2.510647032425712e-06, 0.000000000000000e+00, -2.513061864754020e-06, -5.465722397164524e-06, 0.000000000000000e+00, -2.512692847435080e-06, -2.510273298024011e-06, 0.000000000000000e+00, -5.471378799538555e-06, -9.905331040725799e-05, 0.000000000000000e+00, -9.912041641415319e-05, -9.664599616816016e-05, 0.000000000000000e+00, -9.678415405231610e-05, -1.011177464180606e-04, 0.000000000000000e+00, -1.005854259539050e-04, -9.897036092401035e-05, 0.000000000000000e+00, -9.842907669948605e-05, -9.622921696748979e-05, 0.000000000000000e+00, -2.239631095386892e-04, -9.622921696748979e-05, 0.000000000000000e+00, -9.768570090643772e-05, -1.339632162545546e-02, 0.000000000000000e+00, -2.314177175987438e-02, -1.067587874967398e-02, 0.000000000000000e+00, -1.072114313450528e-02, -1.856454976740957e-02, 0.000000000000000e+00, -1.650067748673172e-02, -1.669716911401620e-02, 0.000000000000000e+00, -1.497980760078202e-02, -1.178383115236175e-02, 0.000000000000000e+00, -2.910811556327533e-02, -1.178383115236175e-02, 0.000000000000000e+00, -1.412998005195476e-02, -1.825863700699820e+01, 0.000000000000000e+00, -1.759274098824368e+01, -3.434514850795542e+00, 0.000000000000000e+00, -1.435664945868548e+00, -2.699670601762255e+01, 0.000000000000000e+00, -2.204819639397913e+01, -1.207457550698864e-04, 0.000000000000000e+00, -1.209778284922624e-04, -1.085139985211953e+01, 0.000000000000000e+00, -8.720297119224210e+00, -1.085139985211952e+01, 0.000000000000000e+00, -8.720297119224213e+00, -6.669956463519075e+07, 0.000000000000000e+00, -8.652033508423107e+06, -4.193793964754897e+06, 0.000000000000000e+00, -3.924031072984827e+06, -1.449268234244107e+07, 0.000000000000000e+00, -1.187399071428700e+07, -1.152872993930123e+02, 0.000000000000000e+00, -3.025728673522129e+02, -1.142754818300418e+07, 0.000000000000000e+00, -4.046627952277599e+06, -1.142754818300341e+07, 0.000000000000000e+00, -4.046627952281700e+06, -1.730695437039363e-02, 0.000000000000000e+00, -1.706731179327623e-02, -1.687273794875581e-02, 0.000000000000000e+00, -1.664377694979116e-02, -2.418441180934624e-02, 0.000000000000000e+00, -2.365419133128938e-02, -2.289217857166977e-02, 0.000000000000000e+00, -1.690382423310153e-02, -2.352888288595217e-02, 0.000000000000000e+00, -2.303181077169755e-02, -2.352888288595217e-02, 0.000000000000000e+00, -1.684121601509449e-02, -1.915990927283603e-02, 0.000000000000000e+00, -1.894092185724786e-02, -2.653892189780695e-02, 0.000000000000000e+00, -2.373027813405783e-02, -2.340083785706387e-02, 0.000000000000000e+00, -8.874192944825117e-02, -2.121162001469927e-02, 0.000000000000000e+00, -2.094244959165700e-02, -2.221370619178885e-02, 0.000000000000000e+00, -2.192703829273607e-02, -2.221370619178884e-02, 0.000000000000000e+00, -7.849116756919697e-02, -8.581753470344636e-03, 0.000000000000000e+00, -2.874212330722239e-02, -5.874501769020785e-01, 0.000000000000000e+00, -5.744109022249341e-01, -6.458393658127244e-01, 0.000000000000000e+00, -2.802529739258865e-01, -2.209357294540343e-01, 0.000000000000000e+00, -9.822667581165898e-02, -1.685756541476350e-01, 0.000000000000000e+00, -1.689185470860030e-01, -1.685756541476350e-01, 0.000000000000000e+00, -3.495356501133569e-01, -3.588642936288299e-02, 0.000000000000000e+00, -3.512078827018932e-02, -2.575429991837333e+03, 0.000000000000000e+00, -2.506112988545789e+03, -2.788039490590801e+02, 0.000000000000000e+00, -2.461920729614693e+02, -1.215102424347630e-01, 0.000000000000000e+00, -1.172600783969934e-01, -5.018319161375341e+01, 0.000000000000000e+00, -4.083662453960235e+01, -5.018319161375332e+01, 0.000000000000000e+00, -4.083662453960254e+01, -6.587814963681090e+05, 0.000000000000000e+00, -5.713102833334418e+05, -4.711340757522519e+08, 0.000000000000000e+00, -4.670929011458189e+08, -2.744623506572363e+08, 0.000000000000000e+00, -2.144864984593010e+08, -1.542441864835827e+02, 0.000000000000000e+00, -1.444145127748953e+02, -1.525068071034356e+07, 0.000000000000000e+00, -5.572007244350918e+06, -1.525068071047062e+07, 0.000000000000000e+00, -2.885634274294800e+07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_scan0_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_scan0", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.700734184965510e-03, 1.700442999145796e-03, 1.700685628911750e-03, 1.700407786525849e-03, 1.700545358990603e-03, 1.700202624168869e-03, 1.701090497782087e-03, 6.850988301834900e-04, 1.700703351855091e-03, 6.851018608280222e-04, 6.850867080935928e-04, 6.851018608280222e-04, 3.673339187478447e-03, 5.828251146096646e-03, 3.673462215200683e-03, 3.673362813219041e-03, 3.675876185575388e-03, 3.676270804551990e-03, 3.674687369898599e-03, 3.674639333452066e-03, 3.673653838922961e-03, 3.676752012880141e-03, 5.826597624950849e-03, 3.676752012880141e-03, 6.967402658289450e-03, 7.578341824058336e-03, 6.799656102534446e-03, 1.768577120858528e-02, 1.792662168429213e-02, 1.801876609742438e-02, 1.792543129928081e-02, 5.846816524553876e-03, 7.944811262742343e-03, 3.661034404542449e-03, 1.757293729834418e-02, 1.834117136462123e-02, 7.108893166778492e-03, 6.538787816239421e-02, 7.737288955002989e-03, 6.455322161986587e-02, 1.470201661711261e-02, 1.840121640012394e-03, 8.215409163018447e-02, 8.172177775998463e-02, 6.430920380602551e-02, 1.071740504415108e-01, 6.430920380602551e-02, 3.292914960631310e-04, 9.397520092887465e-01, 9.035781833876141e-01, 2.387514901181958e-07, 8.750063259963976e-01, 1.989895746275745e-05, 2.446455366521485e-01, 1.259662890941345e+00, 1.273998094512178e+00, 1.007077420824463e+00, 1.509161079756312e+00, 1.007077420824463e+00, 1.509161079756214e+00, 2.930983147140437e-03, 2.931700613917998e-03, 2.932869966243225e-03, 2.933524869027600e-03, 2.931119447579614e-03, 2.931786077179439e-03, 2.932736923402445e-03, 2.933441804207092e-03, 5.478965009263571e-03, 2.932612533302708e-03, 2.931925471649392e-03, 5.480580438723633e-03, 6.376774998286353e-03, 6.379970904480210e-03, 6.358599092006553e-03, 6.362360495995277e-03, 6.390973575859287e-03, 6.389909241145427e-03, 6.375049805427781e-03, 6.373939198505764e-03, 6.356839473604587e-03, 7.565540973369151e-03, 6.356839473604587e-03, 6.369614080732926e-03, 2.308835183821777e-02, 1.710770065925125e-02, 2.307805539319815e-02, 2.317923681540977e-02, 2.407584264361936e-02, 2.377657414103737e-02, 2.428483584733775e-02, 2.395043414743193e-02, 2.274325258604414e-02, 2.526732126500378e-02, 2.274325258604415e-02, 2.348005286399717e-02, 1.123078864806798e-01, 1.113756968615119e-01, 2.858304241110393e-03, 6.375574165647352e-02, 1.224599022032715e-01, 1.173176978187741e-01, 7.232285497940104e-03, 7.236276532720378e-03, 1.009125077486330e-01, 9.708466114211782e-02, 1.009125077486328e-01, 9.708466114211789e-02, 9.748304726837940e-09, 1.408319749388125e+00, 1.283289118366960e+00, 1.256084628301467e+00, 1.854437773547695e+00, 1.804721301198214e+00, 1.693471998766632e-01, 1.175132320677882e-04, 1.557676087749993e+00, 1.429052621778284e+00, 1.557676087749887e+00, 1.429052621779731e+00, 2.829509823437084e-02, 2.821610702234638e-02, 2.747982626319193e-02, 2.741166950694481e-02, 3.647564788259593e-02, 3.613972479312812e-02, 3.502233845540104e-02, 2.791581287733514e-02, 3.573872743346471e-02, 3.543266267252792e-02, 3.573872743346471e-02, 2.779839842211456e-02, 2.892856619458179e-02, 2.886838882368344e-02, 2.687065472464324e-02, 3.147669079003187e-04, 2.696734164261009e-02, 7.756665393615576e-02, 2.750627896146849e-02, 2.743762170174812e-02, 2.717391610280785e-02, 2.711410282003232e-02, 2.717391610280785e-02, 7.760442147225803e-02, 2.146843777469003e-02, 5.835267789363469e-02, 5.221398793482566e-02, 5.195843344540978e-02, 1.160329730109683e-02, 4.443999250663926e-02, 3.892949447971337e-02, 3.573717807487983e-02, 4.004033246977092e-02, 4.008012613728820e-02, 4.004033246977091e-02, 2.834040655660215e-02, 2.835351696393506e-02, 2.830932000925058e-02, 1.978817208634132e-05, 1.979490381279025e-05, 2.031591206748962e-01, 1.981874029163352e-01, 3.833244134745204e-02, 3.859374230109291e-02, 1.422924092949218e-01, 1.368783111045736e-01, 1.422924092949215e-01, 1.368783111045742e-01, 2.827712544377712e-07, 3.101387001539430e-07, 2.806879797262881e+00, 2.801928265617384e+00, 1.402645879220446e-08, 1.787915191219943e-08, 2.570695232826920e-04, 3.040291089911769e-04, 1.766761841427127e+00, 1.515116340263346e+00, 1.766761841441840e+00, 1.066012784474375e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
