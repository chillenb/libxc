
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_wr2scan_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_wr2scan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.151645077761263e+01, -2.151656990680448e+01, -2.151709460859978e+01, -2.227972769540562e+01, -2.228048350590561e+01, -2.304482453017580e+01, -3.227327820158885e+00, -3.572295872185468e+00, -3.572765282672399e+00, -3.572916650555777e+00, -3.572509669795732e+00, -3.227709425443012e+00, -4.006331974159465e-01, -4.717031455257024e-01, -5.227223538370960e-01, -4.579839954632796e-01, -3.879233645962504e-01, -5.291424163558895e-01, -5.124555756276378e-02, -5.314458387517040e-02, -5.552810695105270e-01, -3.051509200692091e-02, -5.503652990277255e-02, -5.458535511737067e-02, -2.234672529524083e-06, -3.016787608642195e-06, -6.281554186853037e-04, -3.392058474576887e-07, -1.173539303762800e-06, -1.173539303762800e-06, -5.472929049859991e+00, -5.474020402020933e+00, -5.472983816618910e+00, -5.473947174181583e+00, -5.359056165050752e+00, -5.359155710161271e+00, -1.925074061542640e+00, -1.941121887888881e+00, -1.913305860873854e+00, -1.927515710458385e+00, -1.735652562939899e+00, -1.939657963632590e+00, -4.317789664937690e-01, -5.154245603099568e-01, -4.148192905726461e-01, -4.380153382574099e-01, -4.457123867185857e-01, -4.720817810916899e-01, -1.163293132363609e-02, -4.984069626427444e-02, -9.418794440440447e-03, -1.894987385599087e+00, -1.829279016383988e-02, -1.829279016383988e-02, -1.929947384374610e-07, -3.103741304618889e-07, -1.542116107413681e-07, -2.627056858562289e-03, -3.308069777505305e-07, -3.308069777505291e-07, -4.655120434659989e-01, -4.618858607608950e-01, -4.556462925299249e-01, -4.611581086569930e-01, -4.568902755678679e-01, -4.602756635344425e-01, -4.486959811196842e-01, -3.336568463329890e-01, -3.663130664816339e-01, -4.116463679596641e-01, -3.991234998813232e-01, -3.825701414058210e-01, -5.271801594767407e-01, -9.451430451949416e-02, -1.160208205283406e-01, -1.919802160893690e-01, -1.707455195578897e-01, -1.498528506346351e-01, -3.217173638021607e-01, -4.974279071775826e-04, -1.514955966093041e-03, -2.033824119696556e-01, -6.158944022464849e-03, -6.158944022464840e-03, -8.373576230853488e-06, -3.500187083581178e-09, -9.538990629661689e-08, -3.833742127452363e-03, -2.494271278485069e-07, -3.603176250707863e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_wr2scan_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_wr2scan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-3.190140004248314e+01, -3.190108525022572e+01, -3.190146366035078e+01, -3.190113151357397e+01, -3.190170270275939e+01, -3.190146407894780e+01, -3.190098063776574e+01, -2.994237944086035e+01, -3.190143515511106e+01, -2.994310130708493e+01, -2.994342655755942e+01, -2.994310130708493e+01, -4.506206274654716e+00, -4.608525934883978e+00, -4.506318197340129e+00, -4.506131966438252e+00, -4.508468700791968e+00, -4.508901975807077e+00, -4.508082511675736e+00, -4.508150786598978e+00, -4.505206576861413e+00, -4.510173442403050e+00, -4.607285966360748e+00, -4.510173442403051e+00, -6.347479801338037e-01, -6.421014003077833e-01, -6.323431697959704e-01, -6.846523735625086e-01, -6.478057332112422e-01, -6.398668564023937e-01, -6.557882407410146e-01, -6.136033146582353e-01, -6.510102286882300e-01, -5.670310899854516e-01, -6.937687365688171e-01, -6.114700349433394e-01, -7.255981184315774e-02, -8.934746355513505e-02, -7.469608140312563e-02, -9.341141120799949e-02, -6.973798068345011e-01, -7.239829159198147e-01, -3.208504617878866e-02, -3.611460569305251e-02, -8.736073881622416e-02, -2.823423235074231e-03, -8.736073881622408e-02, -1.808463751753855e-02, 9.693890170533571e-05, 1.160556893119038e-04, -6.218280655442128e-06, 1.360753205635043e-04, -1.032182313366317e-03, 4.983351756721646e-03, 1.938869097598748e-05, 1.836736543421480e-05, 6.859267818867634e-05, 1.176975792965035e-05, 6.859267818867634e-05, 1.176975792965031e-05, -7.214192816035366e+00, -7.212425748727495e+00, -7.216618294590093e+00, -7.214768954595492e+00, -7.214349779294109e+00, -7.212522257396209e+00, -7.216430232257268e+00, -7.214650222341467e+00, -7.522580266696004e+00, -7.213600010134096e+00, -7.215418519004927e+00, -7.520716615830981e+00, -2.421317849054586e+00, -2.422049384725971e+00, -2.448817612818865e+00, -2.448685844304500e+00, -2.397519503286385e+00, -2.405072998232944e+00, -2.421644181331874e+00, -2.429409821352586e+00, -2.454399533070679e+00, -2.426996492326965e+00, -2.454399533070679e+00, -2.438573320663203e+00, -6.397318549596799e-01, -6.833706452302090e-01, -7.213885952314656e-01, -7.224509569696498e-01, -5.532692535471341e-01, -5.855518247079371e-01, -5.943280132678617e-01, -6.228425273961937e-01, -6.763624039190653e-01, -6.762551316528287e-01, -6.763624039190653e-01, -6.312483762652042e-01, -2.820842169699214e-03, -3.213531085726916e-03, -7.277597458397218e-02, -7.482157979688769e-02, 9.321322217255551e-04, -1.459940175686281e-03, -2.490906256023851e+00, -2.489776323108131e+00, -1.344347427214994e-02, -2.109697998500204e-02, -1.344347427214997e-02, -2.109697998500204e-02, -4.960870626112335e-07, 8.270459107193926e-06, 1.703513334177043e-05, 1.773937304923329e-05, 7.483321970059661e-06, 9.028178429526644e-06, 5.364223623383789e-03, -4.553506784184023e-03, 7.166893752598826e-06, 2.138069034338380e-05, 7.166893752598810e-06, 2.138069034338651e-05, -6.667176007531656e-01, -6.700562578575541e-01, -6.583294726216558e-01, -6.616936300443862e-01, -6.707932911434966e-01, -6.739627878064138e-01, -6.714047731457293e-01, -6.669996964173802e-01, -6.710855305954673e-01, -6.742592587698741e-01, -6.710855305954674e-01, -6.657880375499096e-01, -6.438210713085086e-01, -6.466246942395278e-01, -5.046480325865658e-01, -5.337569574053351e-01, -5.440459654584244e-01, -5.858135330919622e-01, -5.837896354315040e-01, -5.865182071387108e-01, -5.635797438173388e-01, -5.664490577881993e-01, -5.635797438173387e-01, -6.021261653890786e-01, -7.597839560163484e-01, -8.098777110527768e-01, -1.276676597314837e-01, -1.292938733027012e-01, -1.668624452313339e-01, -1.883924870205146e-01, -2.941116335985423e-01, -3.063159747236159e-01, -2.420381445896928e-01, -2.420824461870291e-01, -2.420381445896927e-01, -2.295426918835774e-01, -4.457937976416365e-01, -4.510910594292878e-01, -9.766779772026777e-04, -9.963732410953774e-04, 6.334664648454899e-03, 6.256201270974036e-03, -2.903121695499303e-01, -2.997996486747230e-01, 1.486845543425311e-03, -1.151431487193135e-03, 1.486845543425258e-03, -1.151431487193092e-03, -1.580107256738659e-05, -1.757981060166189e-05, 2.059714231882507e-07, 2.074920863570573e-07, -1.717273084404994e-07, -2.066070295342832e-07, -7.265283298821108e-03, -7.601384684531717e-03, 6.431821932637728e-06, 1.628844780041368e-05, 6.431821932640743e-06, -9.298633637320457e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_wr2scan_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_wr2scan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.399324571805511e-08, 0.000000000000000e+00, -2.399242616523917e-08, -2.399279799187973e-08, 0.000000000000000e+00, -2.399210100548733e-08, -2.399135639997579e-08, 0.000000000000000e+00, -2.399003744903434e-08, -2.399640343823610e-08, 0.000000000000000e+00, -1.172711679268087e-08, -2.399297557612780e-08, 0.000000000000000e+00, -1.172653361723927e-08, -1.172581371536573e-08, 0.000000000000000e+00, -1.172653361723927e-08, -1.374777884090629e-05, 0.000000000000000e+00, -1.646670364108775e-05, -1.374819792804695e-05, 0.000000000000000e+00, -1.374835776741668e-05, -1.375660600337039e-05, 0.000000000000000e+00, -1.375754399962709e-05, -1.374896964643150e-05, 0.000000000000000e+00, -1.374822356106542e-05, -1.375554321162809e-05, 0.000000000000000e+00, -1.375479713472345e-05, -1.646408406012234e-05, 0.000000000000000e+00, -1.375479713472345e-05, -2.828135285981317e-03, 0.000000000000000e+00, -2.964168457777680e-03, -2.794539412371681e-03, 0.000000000000000e+00, -7.190860687186332e-03, -7.794046625465874e-03, 0.000000000000000e+00, -7.978414709569779e-03, -7.721858751684630e-03, 0.000000000000000e+00, -2.645212814624064e-03, -2.998828180320356e-03, 0.000000000000000e+00, -2.136508371705494e-03, -6.989512568488683e-03, 0.000000000000000e+00, -8.659221671480984e-03, -1.070617534639993e-01, 0.000000000000000e+00, -6.265398130267202e-01, -1.107097408479719e-01, 0.000000000000000e+00, -5.990305197250949e-01, -4.093315769966426e-03, 0.000000000000000e+00, -6.501630190130714e-04, -1.321372214057547e+00, 0.000000000000000e+00, -1.286259413059804e+00, -6.093036468559767e-01, 0.000000000000000e+00, -2.733682488861961e+00, -6.093036468559764e-01, 0.000000000000000e+00, -1.599449238103738e-01, -8.714927966328565e+01, 0.000000000000000e+00, -8.722576518321286e+01, -4.546495964851304e+01, 0.000000000000000e+00, -8.884896131906768e+01, -1.429158673424318e+00, 0.000000000000000e+00, -1.745896179190429e+01, -6.826014230283548e+01, 0.000000000000000e+00, -6.835040453655503e+01, -8.449310748482407e+01, 0.000000000000000e+00, -1.025504339620311e+02, -8.449310748482407e+01, 0.000000000000000e+00, -1.025504339620307e+02, -3.408080647232310e-06, 0.000000000000000e+00, -3.411344683545284e-06, -3.409648956118129e-06, 0.000000000000000e+00, -3.412862582742771e-06, -3.408211392859889e-06, 0.000000000000000e+00, -3.411428568035552e-06, -3.409554597803910e-06, 0.000000000000000e+00, -3.412805001548602e-06, -6.039812257205615e-06, 0.000000000000000e+00, -3.412098256290699e-06, -3.408847206069641e-06, 0.000000000000000e+00, -6.045818948728886e-06, -1.278701155731028e-04, 0.000000000000000e+00, -1.279651594858168e-04, -1.249328006239453e-04, 0.000000000000000e+00, -1.251137031993268e-04, -1.303715432441814e-04, 0.000000000000000e+00, -1.297413888865917e-04, -1.277636512538565e-04, 0.000000000000000e+00, -1.271186888953935e-04, -1.244289125556119e-04, 0.000000000000000e+00, -1.168385731844454e-04, -1.244289125556119e-04, 0.000000000000000e+00, -1.262175785024526e-04, -1.377904519972519e-02, 0.000000000000000e+00, -2.860469721897325e-02, -1.115406642702771e-02, 0.000000000000000e+00, -1.119768131498211e-02, -1.847430468796975e-02, 0.000000000000000e+00, -1.664445136490099e-02, -1.684893753171546e-02, 0.000000000000000e+00, -1.526302066049784e-02, -1.224563276416565e-02, 0.000000000000000e+00, -2.989155598488610e-02, -1.224563276416565e-02, 0.000000000000000e+00, -1.446912174749793e-02, -3.050625720908318e+00, 0.000000000000000e+00, -2.987819534344463e+00, -6.007147643500388e-02, 0.000000000000000e+00, -6.253498134292951e-01, -3.779039152978336e+00, 0.000000000000000e+00, -3.392422054101334e+00, -1.554380885715193e-04, 0.000000000000000e+00, -1.557280415220143e-04, -2.287716799007097e+00, 0.000000000000000e+00, -2.028509025798065e+00, -2.287716799007095e+00, 0.000000000000000e+00, -2.028509025798065e+00, -2.456925025534224e+02, 0.000000000000000e+00, -5.020774330976808e+01, -6.555794282826851e+01, 0.000000000000000e+00, -6.126551672924704e+01, -1.850477679850469e+02, 0.000000000000000e+00, -1.970482778710220e+02, -8.005775188074836e+00, 0.000000000000000e+00, -4.882932129387059e-01, -7.206843594336105e+01, 0.000000000000000e+00, -1.484823975812336e+02, -7.206843594336088e+01, 0.000000000000000e+00, -1.484823975812515e+02, -1.777199834209868e-02, 0.000000000000000e+00, -1.753811407738844e-02, -1.739329483355658e-02, 0.000000000000000e+00, -1.718356361432739e-02, -2.279189479936437e-02, 0.000000000000000e+00, -2.235464849399037e-02, -2.180936849374547e-02, 0.000000000000000e+00, -1.745308159844004e-02, -2.229884031807445e-02, 0.000000000000000e+00, -2.188307392048938e-02, -2.229884031807445e-02, 0.000000000000000e+00, -1.740358002712101e-02, -1.954255928155821e-02, 0.000000000000000e+00, -1.933055637711481e-02, -2.559843967643296e-02, 0.000000000000000e+00, -4.441892284299354e-02, -2.289352544340451e-02, 0.000000000000000e+00, -4.852057256974039e-02, -2.091969197720491e-02, 0.000000000000000e+00, -2.067917149786815e-02, -2.182517625283989e-02, 0.000000000000000e+00, -2.156872133031381e-02, -2.182517625283989e-02, 0.000000000000000e+00, -4.601189026720012e-02, -9.123966637272265e-03, 0.000000000000000e+00, -1.923056361531373e-02, -3.276145827154750e-01, 0.000000000000000e+00, -3.221746177684041e-01, -5.675782296254060e-02, 0.000000000000000e+00, -1.860518532822209e-01, -7.155354002556295e-02, 0.000000000000000e+00, -7.985972938766669e-02, -1.245447577067242e-01, 0.000000000000000e+00, -1.247912623886816e-01, -1.245447577067244e-01, 0.000000000000000e+00, -8.252031851553185e-02, -3.339361020897033e-02, 0.000000000000000e+00, -3.278892246182459e-02, -1.485718428872890e+00, 0.000000000000000e+00, -1.465045392256199e+00, -1.192443702582719e+01, 0.000000000000000e+00, -1.131343753829221e+01, -9.632572724608281e-02, 0.000000000000000e+00, -9.388481239589469e-02, -5.330088520989037e+00, 0.000000000000000e+00, -4.822508875413338e+00, -5.330088520989005e+00, 0.000000000000000e+00, -4.822508875413357e+00, -2.437787746840663e+01, 0.000000000000000e+00, -2.269884292181196e+01, -4.357168468574828e+01, 0.000000000000000e+00, -4.349783169392126e+01, -4.984369745334907e+02, 0.000000000000000e+00, -4.406193400891427e+02, -3.443503871145152e-01, 0.000000000000000e+00, -3.340028175916910e-01, -1.223430155637676e+02, 0.000000000000000e+00, -1.494576354018728e+02, -1.223430155638230e+02, 0.000000000000000e+00, -1.615866917467351e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_wr2scan_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_wr2scan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.847712955230292e-03, 1.847644692344208e-03, 1.847696675918411e-03, 1.847632872746753e-03, 1.847647305401631e-03, 1.847561329929468e-03, 1.847830358965605e-03, 9.531789512954416e-04, 1.847702841177237e-03, 9.531809825038779e-04, 9.531609383989980e-04, 9.531809825038779e-04, 4.933117904264681e-03, 5.369567035651838e-03, 4.933296539551560e-03, 4.933144289976829e-03, 4.936794554193963e-03, 4.937372423742464e-03, 4.935127767412905e-03, 4.935067263381852e-03, 4.933468426018458e-03, 4.938136862442923e-03, 5.366114311347990e-03, 4.938136862442923e-03, 6.038534906340599e-03, 6.452832695843960e-03, 5.925567767636910e-03, 1.862626678587181e-02, 1.865744070553890e-02, 1.870271904508238e-02, 1.870108308162799e-02, 5.278607526047703e-03, 6.710364512203048e-03, 3.575739282576398e-03, 1.856331483579066e-02, 1.885214029986584e-02, 2.944892911495879e-03, 2.931175071695754e-02, 3.250822874703388e-03, 2.955882147045531e-02, 1.578551546660424e-02, 1.936374197248865e-03, 2.454338508759631e-02, 2.496762278996807e-02, 2.887421871795361e-02, 1.931192375847740e-02, 2.887421871795360e-02, 6.029102148615606e-05, 1.382686342366506e-04, 1.660552005040513e-04, 2.222474656457426e-10, 1.994157231157998e-04, 5.569878961313208e-07, 6.504782013195129e-03, 2.352226679749049e-05, 2.239549285520925e-05, 9.516797305703242e-05, 2.128450068638089e-05, 9.516797305703242e-05, 2.128450068638081e-05, 3.971496562744739e-03, 3.972438399066487e-03, 3.974624227507241e-03, 3.975462021769970e-03, 3.971720026343522e-03, 3.972578338725778e-03, 3.974401295964097e-03, 3.975322722908965e-03, 6.749954973246168e-03, 3.973947271040363e-03, 3.973056852331603e-03, 6.751722963977260e-03, 8.194290608965505e-03, 8.198906373694479e-03, 8.181822315148845e-03, 8.186796903891382e-03, 8.202542419069012e-03, 8.204604015229704e-03, 8.192118906067301e-03, 8.194053476371281e-03, 8.181796811566357e-03, 6.808575533381665e-03, 8.181796811566357e-03, 8.192220763887897e-03, 2.365092349745612e-02, 4.527498029628454e-02, 2.404925153905731e-02, 2.414873898016029e-02, 2.384756893648736e-02, 2.387589601368698e-02, 2.440304360982348e-02, 2.430850297550148e-02, 2.354775770219361e-02, 4.603240183883200e-02, 2.354775770219361e-02, 2.394726004414672e-02, 1.877409826241347e-02, 1.892482513387802e-02, 1.209806797544457e-03, 2.773267881858523e-02, 1.715440373040526e-02, 1.806158814751872e-02, 9.275931372405085e-03, 9.280543242235723e-03, 2.127513255600506e-02, 2.257451621601848e-02, 2.127513255600503e-02, 2.257451621601849e-02, 1.681921707480999e-12, 8.199062210874917e-06, 2.012345269551439e-05, 1.967276023273608e-05, 2.375028905852659e-05, 3.003942301231849e-05, 1.177378072825110e-02, 8.769446226335759e-06, 9.855134092145082e-06, 5.259066027529006e-05, 9.855134092145060e-06, 5.259066027529638e-05, 2.903634199593409e-02, 2.897633364791878e-02, 2.828294465350788e-02, 2.825681035590588e-02, 3.639062507401410e-02, 3.611318036092712e-02, 3.500627625272036e-02, 2.879401890128695e-02, 3.569746967292306e-02, 3.544274059792045e-02, 3.569746967292306e-02, 2.869376245002983e-02, 2.948253855650163e-02, 2.943957324852298e-02, 2.580315589655710e-02, 4.182511776358624e-02, 2.628503335336040e-02, 5.277524634904585e-02, 2.705998596838537e-02, 2.702548579410100e-02, 2.661493153105516e-02, 2.658819970988431e-02, 2.661493153105516e-02, 5.342969166819684e-02, 2.275465892500715e-02, 4.543261292552298e-02, 2.905338323105169e-02, 2.907567567513543e-02, 6.947972023020844e-03, 2.940593896761003e-02, 2.281244371897244e-02, 2.892248283378862e-02, 2.946051347187366e-02, 2.948775760096644e-02, 2.946051347187367e-02, 1.708414530761069e-02, 2.626136450858624e-02, 2.630729868090702e-02, 5.339217148502516e-07, 5.412337547257981e-07, 8.702114759677507e-03, 9.120679153314139e-03, 3.024619172875261e-02, 3.075918083164088e-02, 1.512519789177714e-02, 1.617381685807085e-02, 1.512519789177705e-02, 1.617381685807092e-02, 4.901060263808304e-10, 5.771480828867612e-10, 2.605085580640244e-07, 2.618542189928876e-07, 1.193117686728204e-12, 1.720355363104212e-12, 2.602831585413054e-05, 3.169003956514821e-05, 1.421770840889549e-05, 4.076124737039036e-05, 1.421770840890187e-05, 2.795969816035073e-11]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
