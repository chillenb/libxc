
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_wr2scan_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_wr2scan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.298347702325365e+01, -2.298354605028720e+01, -2.298390409460553e+01, -2.298287817920029e+01, -2.298340843017147e+01, -2.298340843017147e+01, -3.222759558275793e+00, -3.222880775898523e+00, -3.226354476500846e+00, -3.227388201182310e+00, -3.226035359559405e+00, -3.226035359559405e+00, -4.475604672565701e-01, -4.468997324386742e-01, -4.316559223199835e-01, -4.409334727446598e-01, -4.399593970225358e-01, -4.399593970225358e-01, -5.717661413574329e-02, -5.884971039906908e-02, -5.106908036665758e-01, -2.575594616015509e-02, -5.183202788660123e-02, -5.183202788660119e-02, -1.814995933179148e-06, -2.143024117900992e-06, -5.376871014936670e-04, -2.749351013663102e-07, -9.399850588881573e-07, -9.399850588881573e-07, -5.471901834912641e+00, -5.473004749076109e+00, -5.471977997398750e+00, -5.472950645836115e+00, -5.472447825202702e+00, -5.472447825202702e+00, -1.888736023014264e+00, -1.911205502351428e+00, -1.882023656951138e+00, -1.902070114378813e+00, -1.904594888629336e+00, -1.904594888629336e+00, -4.451250915609856e-01, -4.961757784140085e-01, -3.840236081815911e-01, -3.985861233667429e-01, -4.572326099573563e-01, -4.572326099573564e-01, -9.532734952247789e-03, -5.507548186378579e-02, -7.695004058412143e-03, -1.738243265948162e+00, -1.579340023044680e-02, -1.579340023044680e-02, -1.175675581987050e-07, -2.583952221457767e-07, -1.252856815285605e-07, -2.406910884536833e-03, -2.678427950015864e-07, -2.678427950015866e-07, -4.636560474330590e-01, -4.601360606308641e-01, -4.613751854821638e-01, -4.623950291890923e-01, -4.618836051060501e-01, -4.618836051060501e-01, -4.450306431103493e-01, -3.608310434594305e-01, -3.850104140108483e-01, -4.089366973485993e-01, -3.965846580790083e-01, -3.965846580790083e-01, -5.205320460158976e-01, -9.260516727617453e-02, -1.290062523656056e-01, -2.011698108069417e-01, -1.635911319149476e-01, -1.635911319149476e-01, -3.121972443543670e-01, -4.656638428279805e-04, -1.224702639366739e-03, -1.930283901224026e-01, -5.051930888990452e-03, -5.051930888990445e-03, -5.459388279021312e-06, -3.407761448764134e-09, -4.010403012008458e-08, -4.292025571009302e-03, -2.019587099533580e-07, -2.019587099533574e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_wr2scan_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_wr2scan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.995563461940743e+01, -2.995573340721590e+01, -2.995575974604634e+01, -2.995582427088711e+01, -2.995616153091737e+01, -2.995639954893445e+01, -2.995474972942899e+01, -2.995459981952108e+01, -2.995570969215108e+01, -2.995532023249822e+01, -2.995570969215108e+01, -2.995532023249822e+01, -4.617758414121608e+00, -4.617847149950106e+00, -4.617882327534871e+00, -4.617947763294223e+00, -4.620526054218573e+00, -4.621115915361313e+00, -4.618822355241049e+00, -4.619145585588613e+00, -4.616686302997040e+00, -4.621561399392814e+00, -4.616686302997040e+00, -4.621561399392814e+00, -6.653051708198610e-01, -6.696336910897213e-01, -6.637801079536210e-01, -6.689021088451984e-01, -6.428556111068887e-01, -6.375802826066880e-01, -6.498272541069464e-01, -6.525376529481163e-01, -6.757829983291932e-01, -6.187094697003261e-01, -6.757829983291932e-01, -6.187094697003261e-01, -6.980055747172403e-02, -8.520697145981612e-02, -7.267605053446249e-02, -8.847541187651210e-02, -6.961818813177915e-01, -7.348722026172504e-01, -4.438114353066357e-02, -4.179466055067890e-02, -7.602677900728054e-02, -2.098385768282762e-02, -7.602677900728046e-02, -2.098385768282759e-02, -2.252577096932866e-06, 8.899415600050289e-06, -3.900721550984351e-06, -2.750414481917989e-06, -1.081309691047390e-03, -1.266243581010883e-03, -7.071548306463773e-07, -6.660744110259208e-07, -2.565522855139951e-06, -4.396785756703388e-07, -2.565522855139958e-06, -4.396785756703390e-07, -7.214554106232814e+00, -7.212766102514591e+00, -7.216979026411090e+00, -7.215108576487935e+00, -7.214702743758616e+00, -7.212856614042138e+00, -7.216782968789055e+00, -7.214984174744738e+00, -7.215785834289037e+00, -7.213941049508835e+00, -7.215785834289037e+00, -7.213941049508835e+00, -2.371833998130947e+00, -2.373899242551459e+00, -2.407384440641626e+00, -2.408373586269317e+00, -2.349626668156096e+00, -2.357909391556503e+00, -2.382275869133577e+00, -2.390640555338038e+00, -2.409152952220628e+00, -2.394507504409834e+00, -2.409152952220628e+00, -2.394507504409834e+00, -6.429759362786820e-01, -6.409806929695151e-01, -7.379539696896734e-01, -7.383787279904300e-01, -5.610019085257528e-01, -5.923130615610370e-01, -6.176245750273350e-01, -6.451441486779459e-01, -6.792555283769651e-01, -6.359122172723566e-01, -6.792555283769651e-01, -6.359122172723567e-01, -1.774729293558842e-02, -1.840753074740304e-02, -5.662681025134594e-02, -5.740509619447447e-02, -1.401207085281624e-02, -1.575944171465616e-02, -2.628819986487850e+00, -2.627673743442350e+00, -2.162086152345759e-02, -2.239996735367066e-02, -2.162086152345804e-02, -2.239996735367059e-02, -2.782726177863589e-07, -3.125977196673832e-07, -6.330969953818076e-07, -6.611826195278948e-07, -2.778644147228916e-07, -3.396472590892309e-07, -5.032792107105020e-03, -4.977425122286343e-03, -2.812651446325552e-07, -7.506106407634156e-07, -2.812651446325553e-07, -7.506106407634156e-07, -6.688199987785832e-01, -6.721188908472675e-01, -6.597021926495540e-01, -6.630597824030747e-01, -6.628712950259703e-01, -6.662295251150652e-01, -6.655448745143060e-01, -6.688466910506797e-01, -6.642057911281136e-01, -6.675349717194230e-01, -6.642057911281136e-01, -6.675349717194230e-01, -6.482613428946035e-01, -6.509208823328264e-01, -5.032955303279959e-01, -5.065241449953042e-01, -5.434531975040036e-01, -5.469557910772292e-01, -5.843166120426689e-01, -5.870550454148277e-01, -5.635673731053346e-01, -5.664523268088363e-01, -5.635673731053346e-01, -5.664523268088363e-01, -7.825538164136351e-01, -7.840888060351727e-01, -1.161317414373238e-01, -1.175826830763518e-01, -1.704433010708594e-01, -1.748576870177261e-01, -2.989230731186963e-01, -3.016000556209053e-01, -2.316202821005079e-01, -2.317903434111847e-01, -2.316202821005080e-01, -2.317903434111847e-01, -4.399487239927657e-01, -4.456968081265495e-01, -9.070368925055496e-04, -9.736800237329974e-04, -2.504125153327656e-03, -2.756641685390034e-03, -2.891555194099257e-01, -2.977647393882871e-01, -8.930695242274784e-03, -1.013819023411066e-02, -8.930695242274762e-03, -1.013819023411066e-02, -1.245516291192708e-05, -1.402142456259833e-05, -8.446050633205920e-09, -9.016624676853381e-09, -8.867584449970331e-08, -1.099132818213537e-07, -7.684006716478534e-03, -3.933167949141095e-03, -2.498180321317467e-07, -5.663884423458391e-07, -2.498180321317459e-07, -5.663884423458391e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_wr2scan_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_wr2scan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.248622578260619e-08, 0.000000000000000e+00, -1.248370521524516e-08, -1.248608606995250e-08, 0.000000000000000e+00, -1.248360405632387e-08, -1.248520918964896e-08, 0.000000000000000e+00, -1.248246870267276e-08, -1.248677261359622e-08, 0.000000000000000e+00, -1.248446403059202e-08, -1.248615424181322e-08, 0.000000000000000e+00, -1.248335209715588e-08, -1.248615424181322e-08, 0.000000000000000e+00, -1.248335209715588e-08, -2.878589823890265e-05, 0.000000000000000e+00, -2.878402348538997e-05, -2.878993430892660e-05, 0.000000000000000e+00, -2.878678050007109e-05, -2.886792593281710e-05, 0.000000000000000e+00, -2.888061916074217e-05, -2.882805293901128e-05, 0.000000000000000e+00, -2.882708162207551e-05, -2.879506725920751e-05, 0.000000000000000e+00, -2.889283757984484e-05, -2.879506725920751e-05, 0.000000000000000e+00, -2.889283757984484e-05, -6.455480973219989e-03, 0.000000000000000e+00, -6.574060465474286e-03, -6.427458492283792e-03, 0.000000000000000e+00, -6.560906603118252e-03, -6.045159085732092e-03, 0.000000000000000e+00, -6.032957746943803e-03, -6.217513648800861e-03, 0.000000000000000e+00, -6.308698000221715e-03, -6.616494589407128e-03, 0.000000000000000e+00, -6.451404580804985e-03, -6.616494589407128e-03, 0.000000000000000e+00, -6.451404580804985e-03, -1.209644657582488e+00, 0.000000000000000e+00, -8.080425781664148e-01, -1.193718807555126e+00, 0.000000000000000e+00, -8.165795669977697e-01, -1.899914367871051e-03, 0.000000000000000e+00, -2.262390082771999e-03, -2.451313241735039e-01, 0.000000000000000e+00, -7.744743891739512e-01, -1.091177365426452e+00, 0.000000000000000e+00, 3.760970154957825e-02, -1.091177365426451e+00, 0.000000000000000e+00, 3.760970154957823e-02, -1.229669277099098e+00, 0.000000000000000e+00, -9.721670628021002e+00, -2.928770493954034e-01, 0.000000000000000e+00, -1.676858898641631e+00, 9.213758341433612e-02, 0.000000000000000e+00, 3.907837059019589e-02, 1.974640054671090e-01, 0.000000000000000e+00, 1.903614326959314e-01, 1.004948829970923e-01, 0.000000000000000e+00, 3.455499679331293e-01, 1.004948829971015e-01, 0.000000000000000e+00, 3.455499679331295e-01, -3.424874611559596e-06, 0.000000000000000e+00, -3.427186247464021e-06, -3.426295130337663e-06, 0.000000000000000e+00, -3.428559126615634e-06, -3.424611120992691e-06, 0.000000000000000e+00, -3.426986825676630e-06, -3.425841557559430e-06, 0.000000000000000e+00, -3.428245375094718e-06, -3.425858100262115e-06, 0.000000000000000e+00, -3.427915799930860e-06, -3.425858100262115e-06, 0.000000000000000e+00, -3.427915799930860e-06, -1.858052947313080e-04, 0.000000000000000e+00, -1.839586610110758e-04, -1.721223363259124e-04, 0.000000000000000e+00, -1.708281575932229e-04, -1.811633759213137e-04, 0.000000000000000e+00, -1.809234533261851e-04, -1.686327215219872e-04, 0.000000000000000e+00, -1.682340399421547e-04, -1.807236938151177e-04, 0.000000000000000e+00, -1.772763359169068e-04, -1.807236938151177e-04, 0.000000000000000e+00, -1.772763359169068e-04, -2.450394960832841e-02, 0.000000000000000e+00, -2.435858902235604e-02, -2.171584451030482e-02, 0.000000000000000e+00, -2.129655042269902e-02, -3.897433866440256e-02, 0.000000000000000e+00, -3.440762454251337e-02, -4.564803978803599e-02, 0.000000000000000e+00, -3.935657379290464e-02, -1.983219495799358e-02, 0.000000000000000e+00, -2.637681173904237e-02, -1.983219495799359e-02, 0.000000000000000e+00, -2.637681173904238e-02, -2.378774939099455e-01, 0.000000000000000e+00, -1.880515595855782e-01, -1.117998097306156e+00, 0.000000000000000e+00, -1.106330494924803e+00, -8.086069251383257e-02, 0.000000000000000e+00, -2.110910588279663e-01, -3.906016289164488e-04, 0.000000000000000e+00, -3.911789930442316e-04, -1.020046178094795e+00, 0.000000000000000e+00, -1.769336395241206e+00, -1.020046178094803e+00, 0.000000000000000e+00, -1.769336395241203e+00, 2.313089848763682e-01, 0.000000000000000e+00, 2.152354920596113e-01, 2.246826583393861e-01, 0.000000000000000e+00, 2.160189224471707e-01, 5.373039708092583e-01, 0.000000000000000e+00, 5.787825269491174e-01, 5.996769849891687e-02, 0.000000000000000e+00, -1.140768071069320e-01, 3.807094795107271e-01, 0.000000000000000e+00, -3.288852474645451e-02, 3.807094795107263e-01, 0.000000000000000e+00, -3.288852474645920e-02, -1.907645968984945e-02, 0.000000000000000e+00, -1.878020266095782e-02, -1.904487993273232e-02, 0.000000000000000e+00, -1.875928750061092e-02, -1.911405369860742e-02, 0.000000000000000e+00, -1.882106960874912e-02, -1.911956673965280e-02, 0.000000000000000e+00, -1.882482334899939e-02, -1.912312639847767e-02, 0.000000000000000e+00, -1.882847355828041e-02, -1.912312639847767e-02, 0.000000000000000e+00, -1.882847355828041e-02, -2.242427698126832e-02, 0.000000000000000e+00, -2.206172021746818e-02, -2.828494938230055e-02, 0.000000000000000e+00, -2.785778659222157e-02, -2.595104969975056e-02, 0.000000000000000e+00, -2.554954432237726e-02, -2.448151346314618e-02, 0.000000000000000e+00, -2.418268099576710e-02, -2.530182803049757e-02, 0.000000000000000e+00, -2.486906933948047e-02, -2.530182803049758e-02, 0.000000000000000e+00, -2.486906933948047e-02, -2.012791800211269e-02, 0.000000000000000e+00, -1.945944535663707e-02, -4.797258855515922e-01, 0.000000000000000e+00, -4.748091508390769e-01, -3.248617328371027e-01, 0.000000000000000e+00, -3.136517275034474e-01, -1.586140574228544e-01, 0.000000000000000e+00, -1.560921860960860e-01, -2.211681672033936e-01, 0.000000000000000e+00, -2.216826613756595e-01, -2.211681672033937e-01, 0.000000000000000e+00, -2.216826613756596e-01, -5.606928164841300e-02, 0.000000000000000e+00, -5.299396411286923e-02, -3.474364299306379e-01, 0.000000000000000e+00, -1.688418399566254e-01, 5.221710006344138e-02, 0.000000000000000e+00, 3.126783997973096e-02, -1.935607777254830e-01, 0.000000000000000e+00, -1.674181842993253e-01, -2.714721853001352e-01, 0.000000000000000e+00, -5.178167541450690e-01, -2.714721853001334e-01, 0.000000000000000e+00, -5.178167541450679e-01, 2.192600890829937e-01, 0.000000000000000e+00, 2.227713525552117e-01, 3.200484598653298e-01, 0.000000000000000e+00, 4.473635909441405e-01, 2.541098630085351e-01, 0.000000000000000e+00, 2.712353133053013e-01, -4.777895257193356e-01, 0.000000000000000e+00, -3.103542430347178e+00, 5.624875957461458e-01, 0.000000000000000e+00, 1.632174127509133e-03, 5.624875957461458e-01, 0.000000000000000e+00, 1.632174127525371e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_wr2scan_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_wr2scan", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.003335727240676e-03, 1.003165129787278e-03, 1.003333578910761e-03, 1.003163591330038e-03, 1.003300068089105e-03, 1.003123078498642e-03, 1.003323321828527e-03, 1.003152914691274e-03, 1.003335131278938e-03, 1.003121523421644e-03, 1.003335131278938e-03, 1.003121523421644e-03, 8.745277047091020e-03, 8.740980557146998e-03, 8.747084452876031e-03, 8.741885945095725e-03, 8.778587503494370e-03, 8.783290286684776e-03, 8.779313434265294e-03, 8.776483001413303e-03, 8.742870827334897e-03, 8.804163081482352e-03, 8.742870827334897e-03, 8.804163081482352e-03, 1.123275826151586e-02, 1.141967491922948e-02, 1.119292151747397e-02, 1.138630430378159e-02, 1.050847042427180e-02, 1.062190233320016e-02, 1.145492639843329e-02, 1.166178705103109e-02, 1.134011692376490e-02, 1.212531102203502e-02, 1.134011692376490e-02, 1.212531102203502e-02, 4.855643796963345e-02, 3.711611177304685e-02, 4.960608388064121e-02, 3.939881072935372e-02, 1.577554931109217e-03, 2.466663934229390e-03, 5.131708328851579e-03, 1.516794447942726e-02, 4.974255357510636e-02, 3.156030432360325e-04, 4.974255357510632e-02, 3.156030432360329e-04, 2.304690089411093e-06, 1.883573427695912e-05, 9.719865872536590e-07, 4.279405068295868e-06, 2.570590550128516e-05, 4.890471785796677e-05, 2.682709539740889e-09, 3.530319021996340e-09, 1.470727002972955e-07, 7.043289884191274e-10, 1.470727002972856e-07, 7.043289884191241e-10, 3.986577025581210e-03, 3.986653897247132e-03, 3.989557849443294e-03, 3.989534512216243e-03, 3.986445685032927e-03, 3.986539158724735e-03, 3.989013838245764e-03, 3.989166262169929e-03, 3.988324718546910e-03, 3.988134693734970e-03, 3.988324718546910e-03, 3.988134693734970e-03, 1.146348442587592e-02, 1.135896591137484e-02, 1.090346314693487e-02, 1.082171389709424e-02, 1.102867396674808e-02, 1.106416364776997e-02, 1.050927271878943e-02, 1.053536331118088e-02, 1.143108601867938e-02, 1.111022396081118e-02, 1.143108601867938e-02, 1.111022396081118e-02, 3.855223775701819e-02, 3.812089230515972e-02, 4.094503197227764e-02, 4.046124813324588e-02, 4.334320123526057e-02, 4.375876319382058e-02, 4.819240072267684e-02, 4.829823876846466e-02, 3.531769550959402e-02, 3.969141934417671e-02, 3.531769550959401e-02, 3.969141934417671e-02, 1.921245833866232e-03, 1.667680493893675e-03, 4.736664410558764e-02, 4.755825376336565e-02, 7.843904522010287e-04, 1.561460588618590e-03, 1.875512548762042e-02, 1.876434180327360e-02, 9.775213372861439e-03, 1.958790972021827e-02, 9.775213372861283e-03, 1.958790972021839e-02, 6.396464116730588e-11, 7.954091551253382e-11, 5.927097030371698e-10, 4.839970877640787e-10, 2.661618087661668e-09, 3.136388983762301e-09, 1.276199658134936e-04, 3.820607963660201e-04, 4.754446950380627e-11, 1.516041891656033e-07, 4.754446950380657e-11, 1.516041891656049e-07, 3.087888964895127e-02, 3.075388825104599e-02, 3.035770734311559e-02, 3.026321218418347e-02, 3.063458795278054e-02, 3.052728911236478e-02, 3.078730325517709e-02, 3.067032227666790e-02, 3.072135642136475e-02, 3.060817922521501e-02, 3.072135642136475e-02, 3.060817922521501e-02, 3.338095009441020e-02, 3.317031786330465e-02, 2.814115256908468e-02, 2.807497432145232e-02, 2.923873640508289e-02, 2.916408557586352e-02, 3.069344803024219e-02, 3.063090827303859e-02, 3.011146017646727e-02, 2.994069158282585e-02, 3.011146017646727e-02, 2.994069158282585e-02, 4.214015225059009e-02, 4.144652814796702e-02, 4.149728670916810e-02, 4.177670232933555e-02, 4.787582536999499e-02, 4.763960988506220e-02, 5.185042984801661e-02, 5.179821295540042e-02, 4.960828597060755e-02, 4.965984533630163e-02, 4.960828597060753e-02, 4.965984533630161e-02, 4.150394813204126e-02, 4.018522199491133e-02, 1.521596042962795e-04, 1.014705006078153e-04, 7.131651530403121e-05, 9.474280439644231e-05, 5.484084318084452e-02, 5.087613137844564e-02, 1.101676129379055e-03, 2.101137265860790e-03, 1.101676129379049e-03, 2.101137265860787e-03, 1.143026643116777e-08, 1.147120758268053e-08, 6.729779419929590e-13, 3.755322422605800e-13, 2.341256952431189e-09, 2.778089843679923e-09, 1.493925968005190e-03, 8.261533320918654e-03, 1.051882828267316e-10, 1.077603713614782e-07, 1.051882828267311e-10, 1.077603713614737e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
