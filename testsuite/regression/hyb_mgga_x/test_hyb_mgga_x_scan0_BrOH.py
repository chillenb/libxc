
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_scan0_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_scan0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.738754935611471e+01, -1.738759432647950e+01, -1.738784896022509e+01, -1.738711352255630e+01, -1.738757259417258e+01, -1.738757259417258e+01, -2.513841939796682e+00, -2.513925835396242e+00, -2.516724188215446e+00, -2.517532198070941e+00, -2.513866627414663e+00, -2.513866627414663e+00, -4.465915459307306e-01, -4.461201326607552e-01, -4.346908636100683e-01, -4.433348752280391e-01, -4.464260474649925e-01, -4.464260474649925e-01, -1.405271050515788e-01, -1.418443191274359e-01, -5.031385610763821e-01, -8.452694838585065e-02, -1.408190226908353e-01, -1.408190226908353e-01, -4.150094025053806e-03, -4.404146279800807e-03, -2.386546483874006e-02, -1.514772994377064e-03, -4.360297523846320e-03, -4.360297523846320e-03, -4.249137329784983e+00, -4.249939918114367e+00, -4.249231988655148e+00, -4.249855401746023e+00, -4.249531889075410e+00, -4.249531889075410e+00, -1.557486591329909e+00, -1.574074238902746e+00, -1.555531709605042e+00, -1.568592866436420e+00, -1.571387893938681e+00, -1.571387893938681e+00, -4.537764393157615e-01, -4.927902334843900e-01, -4.134347214439877e-01, -4.312196491048925e-01, -4.771745520569514e-01, -4.771745520569514e-01, -6.022571536206963e-02, -1.384397316654440e-01, -5.970493498784619e-02, -1.425652389348451e+00, -7.386885475112903e-02, -7.386885475112903e-02, -1.450389808309236e-03, -1.737606085684244e-03, -1.290993323066745e-03, -3.506381610279478e-02, -1.585654122145946e-03, -1.585654122145946e-03, -4.873244315817015e-01, -4.847925006873149e-01, -4.857060624576909e-01, -4.864065473142263e-01, -4.860555215396171e-01, -4.860555215396171e-01, -4.695979467877580e-01, -4.076166826784200e-01, -4.258979053082159e-01, -4.427155159598763e-01, -4.340149479238041e-01, -4.340149479238041e-01, -5.078975796367833e-01, -1.815953698767711e-01, -2.131912291773752e-01, -2.646820857757413e-01, -2.403755855335348e-01, -2.403755855335347e-01, -3.566492902088175e-01, -2.169741948173823e-02, -3.095640717894543e-02, -2.506006107946427e-01, -4.849780479460443e-02, -4.849780479460443e-02, -4.963519167316590e-03, -3.057772929516766e-04, -7.379103377196536e-04, -4.618620166116569e-02, -1.315926678130313e-03, -1.315926678130311e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_scan0_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_scan0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.264462403087178e+01, -2.264469385103335e+01, -2.264503880836009e+01, -2.264389591101299e+01, -2.264466055769815e+01, -2.264466055769815e+01, -3.519069241709213e+00, -3.519605824022761e+00, -3.535735718975513e+00, -3.536345472393487e+00, -3.519189077318862e+00, -3.519189077318862e+00, -6.284153696868993e-01, -6.273598846302145e-01, -6.038958074986928e-01, -6.204111107632421e-01, -6.280488750823499e-01, -6.280488750823499e-01, -1.442419325318831e-01, -1.475503540109631e-01, -6.582152358064111e-01, -1.166131865340328e-01, -1.448762449024976e-01, -1.448762449024976e-01, -6.055732689124303e-03, -6.787236164096880e-03, -3.616969302523296e-02, -2.735792392904772e-03, -6.446685463737290e-03, -6.446685463737325e-03, -5.557924539819829e+00, -5.559656582848247e+00, -5.558107048457740e+00, -5.559453525154351e+00, -5.558805496834877e+00, -5.558805496834877e+00, -1.917494104385401e+00, -1.944839409244262e+00, -1.910965181695141e+00, -1.932912515140822e+00, -1.944926113774466e+00, -1.944926113774466e+00, -6.082634191430807e-01, -6.913888446013781e-01, -5.800927312912154e-01, -6.403260493363674e-01, -6.351780945912526e-01, -6.351780945912526e-01, -8.276095052414399e-02, -9.136168501696097e-02, -8.150668608703761e-02, -2.181528625785535e+00, -7.958808060865893e-02, -7.958808060865893e-02, -2.621693055674430e-03, -3.120978950092731e-03, -2.320325663440672e-03, -5.283051632607150e-02, -2.847553101208520e-03, -2.847553101208520e-03, -6.511415664502961e-01, -6.438679401768072e-01, -6.464226811242697e-01, -6.484348874933812e-01, -6.474241172994224e-01, -6.474241172994224e-01, -6.317524214410026e-01, -5.199655269020994e-01, -5.515647791771719e-01, -5.813971097179398e-01, -5.661296812830251e-01, -5.661296812830251e-01, -7.325253207294129e-01, -1.889351056543917e-01, -2.383027809119855e-01, -3.443002198609084e-01, -2.898587055240398e-01, -2.898587055240399e-01, -4.567158648894332e-01, -3.122407065194215e-02, -4.623738491772089e-02, -3.385396598563408e-01, -6.543027118717359e-02, -6.543027118717365e-02, -8.511261232320766e-03, -5.747170614756322e-04, -1.357793148334829e-03, -6.331213542430267e-02, -2.371072512991808e-03, -2.371072512991803e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_scan0_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_scan0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.476635742313701e-09, -4.476599279922156e-09, -4.476258604159179e-09, -4.476848909567962e-09, -4.476618134110323e-09, -4.476618134110323e-09, -1.156060989215161e-05, -1.157932931798764e-05, -1.213821053452295e-05, -1.218970105905862e-05, -1.156374171393103e-05, -1.156374171393103e-05, -3.661564145725178e-03, -3.639814661272249e-03, -3.201057540943350e-03, -3.854440268325098e-03, -3.654537675394996e-03, -3.654537675394996e-03, -1.253529617527198e+00, -1.259360115270392e+00, -1.209622062959055e-03, -1.887488363276505e-01, -1.266455703084763e+00, -1.266455703084763e+00, -6.337884369988480e+01, -1.906663883597835e+01, 5.747665864288939e-01, 2.424667845364061e+02, -5.030760547956601e+01, -5.030760547956204e+01, -1.263445225429896e-06, -1.263771574604759e-06, -1.263411826997085e-06, -1.263669305480082e-06, -1.263702235100268e-06, -1.263702235100268e-06, -7.172022546119801e-05, -6.602765175787923e-05, -7.007540532694101e-05, -6.554499602457726e-05, -6.978394555382779e-05, -6.978394555382779e-05, -1.476209742894452e-02, -1.225935720023496e-02, -2.517277385557771e-02, -2.425173799144800e-02, -1.107592292849797e-02, -1.107592292849797e-02, -4.597380238888856e-01, -1.311661952760679e+00, -5.720393571549217e-01, -2.116371162792758e-04, -2.188045411798714e+00, -2.188045411798714e+00, 2.667759457470473e+02, 2.094243606255101e+02, 6.236587365440871e+02, 7.237219410973399e-01, 3.070004612306141e+02, 3.070004612306140e+02, -8.950488667743159e-03, -8.711035423572194e-03, -8.794360651778348e-03, -8.861743638964581e-03, -8.828159136127008e-03, -8.828159136127008e-03, -1.108168081451335e-02, -1.360340080923068e-02, -1.248278892958178e-02, -1.178141063880489e-02, -1.219385681115240e-02, -1.219385681115241e-02, -1.196845851948543e-02, -3.492815236072594e-01, -2.351381969122811e-01, -1.317094327863638e-01, -1.618918453567744e-01, -1.618918453567745e-01, -3.301232529104645e-02, -1.893836260120199e+00, 2.370303132556128e-01, -1.743399225861028e-01, -1.220874190065248e+00, -1.220874190065235e+00, 4.535071750299804e+01, 2.779417420952905e+03, 8.394459524547181e+02, -1.168186090856560e+00, 5.080887701072401e+02, 5.080887701072410e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_scan0_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_scan0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([7.207142808798602e-04, 7.207133591504505e-04, 7.206890459632485e-04, 7.207031952912753e-04, 7.207139809668295e-04, 7.207139809668295e-04, 6.697289630565014e-03, 6.709973154535722e-03, 7.090932834252825e-03, 7.138022685188545e-03, 6.699459745688063e-03, 6.699459745688063e-03, 1.314423361775028e-02, 1.306166574589393e-02, 1.160980640581186e-02, 1.497641534515612e-02, 1.311836912863371e-02, 1.311836912863371e-02, 1.244481223745624e-01, 1.297063380984572e-01, 2.174389738819242e-03, 9.814332567433724e-03, 1.270803403938741e-01, 1.270803403938741e-01, 2.279155784846751e-03, 1.643251245618763e-03, 2.079566010850573e-03, 2.739730575625506e-07, 2.227145241419651e-03, 2.227145241419579e-03, 2.943029037709423e-03, 2.944713879072352e-03, 2.943083104183665e-03, 2.944399929657276e-03, 2.944051754996287e-03, 2.944051754996287e-03, 8.869553325261887e-03, 8.377088215106509e-03, 8.621665896308129e-03, 8.229614349210622e-03, 8.838217848441614e-03, 8.838217848441614e-03, 4.412926757811227e-02, 4.438202733256232e-02, 6.226694321899951e-02, 6.449506575725199e-02, 3.743222058720354e-02, 3.743222058720354e-02, 1.008556079953682e-02, 1.324349358372400e-01, 1.153611798393446e-02, 2.047857458821941e-02, 5.280931816228325e-02, 5.280931816228325e-02, 1.236249561274960e-06, 7.593490914721030e-07, 5.717141119139568e-06, 8.683744529853167e-04, 4.402281204238699e-07, 4.402281204238683e-07, 3.006298423249417e-02, 2.919263747293493e-02, 2.949434096783062e-02, 2.973551137153817e-02, 2.961489096826670e-02, 2.961489096826670e-02, 3.314142154532462e-02, 2.902483312762206e-02, 2.983914099409899e-02, 3.093189447339365e-02, 3.052259007620726e-02, 3.052259007620726e-02, 4.904757822294185e-02, 7.168649260912068e-02, 7.955409518116401e-02, 8.862485902458805e-02, 7.813690291717097e-02, 7.813690291717094e-02, 4.916634905357882e-02, 4.451496833768477e-03, 2.439717758461236e-03, 9.678464003119176e-02, 1.333018534127874e-02, 1.333018534127865e-02, 6.435181924060847e-06, 4.251454145262042e-09, 1.612111335813350e-06, 1.191873082221164e-02, 3.415553399371625e-07, 3.415553399371612e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
