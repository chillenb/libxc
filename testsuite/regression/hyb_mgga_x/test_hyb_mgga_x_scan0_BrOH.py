
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_scan0_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_scan0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.623196110338928e+01, -1.623204745108315e+01, -1.623245732521052e+01, -1.623104762323226e+01, -1.623200637207804e+01, -1.623200637207804e+01, -2.337624522254912e+00, -2.337736682941479e+00, -2.341195239722683e+00, -2.340042719584598e+00, -2.337666776410362e+00, -2.824480505236062e+00, -3.950142423605282e-01, -5.359658224948118e-01, -5.203885472620016e-01, -5.250851840181299e-01, -5.363476797860383e-01, -5.363476797860383e-01, -1.463677030756100e-01, -1.484437904351184e-01, -4.590179805401270e-01, -1.025290781814284e-01, -1.469887998041425e-01, -1.469887998041425e-01, -5.195734392116575e-03, -5.513847133918988e-03, -2.948534318031869e-02, -1.790573623953163e-03, -5.457580306256706e-03, -5.457580306256659e-03, -4.249906726079082e+00, -4.250701028696904e+00, -4.249990741442087e+00, -4.076138341226304e+00, -4.250310220384292e+00, -4.250310220384292e+00, -1.261263944532498e+00, -1.279343006714867e+00, -1.253751141643423e+00, -1.267814983244998e+00, -1.283564071094972e+00, -1.599043732459898e+00, -4.726480463076196e-01, -5.144512555465308e-01, -4.478782500903978e-01, -4.681045517318560e-01, -4.912053693936437e-01, -4.278206727574801e-01, -5.353049577256315e-02, -1.456693812915426e-01, -5.287335433009502e-02, -1.563009161897155e+00, -8.669857226150755e-02, -8.669857226150755e-02, -2.572811219835901e-03, -2.088367857352649e-03, -1.595436649560941e-03, -3.311754937142274e-02, -2.679079941453356e-03, -1.875209029739792e-03, -4.892989787747548e-01, -4.866303038870679e-01, -4.807672374196775e-01, -4.883300748676491e-01, -4.879609924497501e-01, -4.879609924497501e-01, -4.735806135427381e-01, -4.093668077213390e-01, -4.282613458023440e-01, -4.456840852423141e-01, -4.368191916670638e-01, -4.008147647669245e-01, -5.391393887862054e-01, -1.337004640825482e-01, -2.210455018205757e-01, -2.273207422366404e-01, -2.509867670628173e-01, -2.509867670628172e-01, -3.085922136961695e-01, -2.683114602373870e-02, -3.813610198726133e-02, -2.692364612711645e-01, -4.338971185546615e-02, -5.892808687888948e-02, -5.952083691742199e-03, -3.480441114038131e-04, -9.161734233008996e-04, -5.620874117757456e-02, -1.549631940869749e-03, -1.549631940869739e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_scan0_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_scan0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.454335980544608e+01, -2.454334860014731e+01, -2.454334905847887e+01, -2.454352436309607e+01, -2.454335356799059e+01, -2.454335356799059e+01, -3.892065116738183e+00, -3.892206993783063e+00, -3.896294172230823e+00, -3.895097479593944e+00, -3.892123080858092e+00, -3.531143563440002e+00, -5.972885200779920e-01, -6.229784235243719e-01, -5.911384503331392e-01, -6.028741696493642e-01, -6.237526022783597e-01, -6.237526022783597e-01, -1.658412199695225e-01, -1.695603276722791e-01, -6.554832629390067e-01, -6.576346831167243e-02, -1.669390900090253e-01, -1.669390900090253e-01, 3.408324966128728e-01, 3.300276927823084e-01, 1.333516265125106e-01, 8.798063671728122e-01, 3.261553740423707e-01, 3.261553740424339e-01, -5.557606949633782e+00, -5.559338262420674e+00, -5.557793442861870e+00, -5.812465541341747e+00, -5.558482022653823e+00, -5.558482022653823e+00, -2.052563998709478e+00, -2.093981482496960e+00, -2.035556147854533e+00, -2.067311710439345e+00, -2.104133553937583e+00, -1.978647198078761e+00, -6.030538888559076e-01, -6.678837015424097e-01, -5.655300777045171e-01, -6.004099534361341e-01, -6.307821425366960e-01, -7.002405117848303e-01, -7.224834853340445e-02, -1.443172195910948e-01, -7.141181723918186e-02, -2.008368023688381e+00, -4.800937015337366e-02, -4.800937015337366e-02, -3.430551173703923e-03, 7.503340634185984e-01, 5.143738152734112e-01, -4.436599831484977e-02, -3.572261918683733e-03, 7.314411471050617e-01, -6.487808636506918e-01, -6.421346702015966e-01, -6.535922598986930e-01, -6.463198281056456e-01, -6.453961345021714e-01, -6.453961345021714e-01, -6.268135175094145e-01, -5.209060854677178e-01, -5.517168781136313e-01, -5.802343608546259e-01, -5.656768105199594e-01, -6.241921363394587e-01, -6.966668492761998e-01, -1.929657250964122e-01, -2.592577481633947e-01, -3.712670729213596e-01, -3.046592598039172e-01, -3.046592598039172e-01, -5.082224850867832e-01, 1.553626703422096e-01, 1.025204323338958e-01, -3.372425063882303e-01, -5.845994715613004e-02, 1.205511645537944e-02, 4.567252814673936e-01, 1.594793806330830e+00, 8.282186523228120e-01, 1.177775816805986e-02, 7.063667267970302e-01, 7.063667267971006e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_scan0_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_scan0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.271749012519312e-08, -1.271709084460143e-08, -1.271524429332502e-08, -1.272175606876308e-08, -1.271728046832064e-08, -1.271728046832064e-08, -1.357206025818849e-05, -1.357357283938201e-05, -1.361360917775216e-05, -1.359458704014655e-05, -1.357222262711971e-05, -5.096428666278712e-06, -7.628610212328803e-03, -3.507980452987486e-03, -3.869075543597867e-03, -3.765712835067973e-03, -3.499772210722115e-03, -3.499772210722115e-03, -6.169558502117715e-01, -5.869838654306886e-01, -3.753617218750525e-03, -2.106525740788016e+00, -6.077306159503876e-01, -6.077306159503876e-01, -4.072466909846060e+04, -3.427017567807135e+04, -1.632079783774069e+02, -5.533434615887334e+05, -3.574440659853747e+04, -3.574440659854413e+04, -1.257596826493719e-06, -1.257984865764855e-06, -1.257644220552060e-06, -2.734919091915990e-06, -1.257785212384855e-06, -1.257785212384855e-06, -1.108363818279449e-04, -1.120215266028300e-04, -1.103734237549648e-04, -1.111303101274651e-04, -1.125811116345843e-04, -4.836198227103215e-05, -6.996249873972921e-03, -5.529222484001619e-03, -8.316062238006159e-03, -7.467593345781874e-03, -6.198906346940450e-03, -2.280431401763814e-02, -1.771837512879185e+01, -5.822157225021093e-01, -1.863997830534446e+01, -6.067633514113037e-05, -4.025931686208528e+00, -4.025931686208528e+00, -3.252213019096134e+06, -3.961900469599804e+05, -1.279620323036985e+06, -1.193743908937556e+02, -2.766117258830608e+06, -5.665003888765243e+05, -8.113965026986044e-03, -7.930827221959105e-03, -1.092593792585434e-02, -8.042801459659568e-03, -8.016839442299405e-03, -8.016839442299405e-03, -9.094571855583300e-03, -1.228215346816677e-02, -1.093104632114112e-02, -1.002762724080254e-02, -1.044787035851902e-02, -3.559023433872628e-02, -4.436556120368640e-03, -5.366111947221489e-01, -1.223394496148751e-01, -1.095687463109927e-01, -7.687460390616999e-02, -7.687460390616994e-02, -4.720258952521031e-02, -2.183163921393825e+02, -6.785415165672660e+01, -6.206447901913004e-02, -4.091774828160065e+01, -1.615732448976834e+01, -2.110441936337699e+04, -4.294326721046237e+07, -4.568933902178113e+06, -1.950192444677885e+01, -1.055963427384056e+06, -1.055963427384165e+06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_scan0_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_scan0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.700737001263408e-03, 1.700700548908688e-03, 1.700537883161332e-03, 1.701131496723587e-03, 1.700717820627453e-03, 1.700717820627453e-03, 5.836242933213124e-03, 5.837506587987524e-03, 5.873025499323892e-03, 5.859339803393958e-03, 5.836566422195547e-03, 3.674018941406539e-03, 6.599776089153164e-03, 1.776677120228527e-02, 1.804155545322155e-02, 1.799171584353203e-02, 1.776056751197144e-02, 1.776056751197144e-02, 6.405330347257682e-02, 6.344659424346939e-02, 1.890498930561312e-03, 8.132160032731753e-02, 6.386583932564911e-02, 6.386583932564911e-02, 6.842864859629426e-01, 6.618759075438634e-01, 2.143265881562684e-01, 1.024667771884545e+00, 6.689922047450436e-01, 6.689922047451689e-01, 2.932366024551141e-03, 2.934165118507311e-03, 2.932567565641472e-03, 5.475852850785157e-03, 2.933264569735579e-03, 2.933264569735579e-03, 7.121984871231756e-03, 7.652308180507722e-03, 6.903645354556404e-03, 7.302784409436617e-03, 7.800215595679521e-03, 6.362351670462318e-03, 2.326189414479902e-02, 2.317742176433291e-02, 2.374183852973443e-02, 2.398327582267180e-02, 2.297202136327519e-02, 6.167278471254593e-02, 5.237003571046208e-04, 6.118753488856320e-02, 5.931416990755539e-04, 7.238966810813109e-03, 9.505072312585017e-02, 9.505072312585017e-02, 1.171110880291154e-07, 9.832337196134855e-01, 1.337150128197280e+00, 1.284338583845188e-04, 1.348744453957291e-07, 1.063444596290468e+00, 2.791569791012875e-02, 2.718732481042772e-02, 3.496503376944087e-02, 2.764048629407815e-02, 2.753847103026540e-02, 2.753847103026540e-02, 2.850584836320910e-02, 2.660163418907766e-02, 2.673801261904032e-02, 2.719796337010415e-02, 2.691818955658556e-02, 7.395538050802104e-02, 2.156103451708783e-02, 8.619703020090049e-03, 4.335772274101796e-02, 4.171918057804367e-02, 3.943803007955181e-02, 3.943803007955178e-02, 4.559256384793450e-02, 2.273352446917908e-01, 1.764035740590007e-01, 3.870675204907072e-02, 4.754269247083934e-04, 1.300722007997350e-01, 5.707031286611786e-01, 2.186109652534371e+00, 1.594684176008031e+00, 1.363138706637826e-01, 1.216721327419519e+00, 1.216721327419638e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
