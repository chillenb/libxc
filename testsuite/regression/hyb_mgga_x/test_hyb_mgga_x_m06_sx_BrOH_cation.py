
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_m06_sx_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06_sx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.289340081247323e+01, -1.289341604028776e+01, -1.289350313890767e+01, -1.359016088263951e+01, -1.359015257754980e+01, -1.428700209554533e+01, -2.339790988632836e+00, -2.639537099045203e+00, -2.637477875007269e+00, -2.638548378839712e+00, -2.638158314082053e+00, -2.338429193648413e+00, -3.553731577964023e-01, -4.569772029029290e-01, -5.504491513012764e-01, -4.469117932471057e-01, -3.384951355296936e-01, -5.517448392761110e-01, -1.131883149887353e-01, -1.161702135413145e-01, -4.925744625884741e-01, -1.111092699393036e-01, -1.432665286637646e-01, -1.323230260083536e-01, -1.064075487991919e-02, -8.986737354285762e-03, -4.050089405489673e-02, -6.153930476780961e-03, -8.575263826251534e-03, -8.575263826251534e-03, -3.281208660526596e+00, -3.277369833373238e+00, -3.280983593071029e+00, -3.277597486537691e+00, -3.163439231679187e+00, -3.163540954619067e+00, -1.526527346000057e+00, -1.528990203348401e+00, -1.525252834943561e+00, -1.527236502327319e+00, -1.333403220479590e+00, -1.528446080999179e+00, -3.886698002177124e-01, -4.224937647214043e-01, -4.055178895476200e-01, -4.046484306819542e-01, -3.940380798394620e-01, -4.235079989895209e-01, -9.838203059980227e-02, -1.001991323695352e-01, -9.535752259950087e-02, -1.352678103551831e+00, -9.601245162312955e-02, -9.601245162312955e-02, -3.772444931202578e-03, -6.016586904921396e-03, -4.604166069036287e-03, -4.837270135186666e-02, -5.781775054184108e-03, -5.781775054184114e-03, -3.553770259006311e-01, -3.399423877776290e-01, -3.277803459639612e-01, -3.379760968855866e-01, -3.299089653625287e-01, -3.351234958357849e-01, -3.399844034954788e-01, -3.282340197498123e-01, -3.383773630244188e-01, -3.553366756833156e-01, -3.613073072562261e-01, -3.407112512535776e-01, -4.310881804669068e-01, -1.848089589824624e-01, -1.784702425052809e-01, -2.361889024577088e-01, -2.459521206780823e-01, -2.069420110795605e-01, -3.421563398452274e-01, -2.059997385140895e-02, -6.910435478931221e-02, -2.520961342808065e-01, -8.266150851205323e-02, -8.266150851205323e-02, -8.068816587924237e-03, -1.609726101892111e-03, -1.869516158243943e-03, -1.707676615264083e-02, -5.310837316216977e-03, -3.495594271634883e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_m06_sx_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06_sx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.607712913694906e+01, -1.607601481627693e+01, -1.607702057490415e+01, -1.607593614345573e+01, -1.607674367846838e+01, -1.607551960912651e+01, -1.607795712145079e+01, -1.436567779400747e+01, -1.607705668538216e+01, -1.436532367187676e+01, -1.436575736907117e+01, -1.436532367187676e+01, -2.479392182529593e+00, -3.001572586532691e+00, -2.479479496349979e+00, -2.479348219077127e+00, -2.481166017475199e+00, -2.481493953907737e+00, -2.480761875734164e+00, -2.480798777293918e+00, -2.478800326772277e+00, -2.482365932804064e+00, -3.001097502229640e+00, -2.482365932804065e+00, -6.196784590035717e-01, -6.181597388003915e-01, -6.198675215921132e-01, -5.199283173843777e-01, -5.434344974593298e-01, -5.454251920445591e-01, -5.337799725784694e-01, -6.177656945226673e-01, -6.203646275820810e-01, -6.154905852019057e-01, -5.192170356474117e-01, -5.530580844643357e-01, -1.656967529376132e-01, -1.606138574631468e-01, -1.685006170036629e-01, -1.597740088853468e-01, -7.336605932114597e-01, -7.808479483455597e-01, -8.387565886167368e-02, -9.367982271345501e-02, -1.678830067429263e-01, -6.081837978328810e-02, -1.678830067429262e-01, -1.515186661507535e-02, -1.363868305448811e-02, -1.447331167171111e-02, -7.544554856839025e-03, -1.526461174173209e-02, -1.422901642232772e-02, -6.433488812446723e-02, -8.256520679578204e-03, -8.119661644560348e-03, -1.219486805653327e-02, -6.971332903585848e-03, -1.219486805653327e-02, -6.971332903585831e-03, -3.236310543213791e+00, -3.235513295914731e+00, -3.233466101813600e+00, -3.232762981748877e+00, -3.236101999422947e+00, -3.235382767635796e+00, -3.233663208296792e+00, -3.232886215793453e+00, -3.540948259676766e+00, -3.234120045324147e+00, -3.234869050083373e+00, -3.540150859358934e+00, -1.370556958095508e+00, -1.370777279438562e+00, -1.384094961904113e+00, -1.384004610013445e+00, -1.360171297292936e+00, -1.363134992152034e+00, -1.370762147932544e+00, -1.374331345078021e+00, -1.386999509433591e+00, -1.694151884576966e+00, -1.386999509433591e+00, -1.378826316183625e+00, -4.280429441903913e-01, -4.948445790205179e-01, -4.245396809601565e-01, -4.207087811703703e-01, -3.814084476939426e-01, -4.016062349624525e-01, -4.048704465155186e-01, -4.157518119919159e-01, -4.397093109098578e-01, -4.892553212654788e-01, -4.397093109098578e-01, -4.223265525682708e-01, -5.762569564196721e-02, -5.747663029525071e-02, -1.436743731502614e-01, -1.553072027251285e-01, -6.092872118440658e-02, -5.754881361052173e-02, -1.382488902294895e+00, -1.381763227719250e+00, -5.671409027216454e-02, -6.820683043419133e-02, -5.671409027216408e-02, -6.820683043419121e-02, -3.417315287898379e-03, -6.447220870735593e-03, -7.946688765555859e-03, -8.067706944247391e-03, -5.933877770719480e-03, -6.279497631781357e-03, -6.800077146453799e-02, -6.232386202148791e-03, -6.074704386503845e-03, -8.304583116010737e-03, -6.074704386503845e-03, -8.304583116010768e-03, -5.469776767485272e-01, -5.539669086637441e-01, -4.054743918526943e-01, -4.109712793608388e-01, -4.590642239295257e-01, -4.656933089545723e-01, -4.989454439815186e-01, -4.942415288530588e-01, -4.779400964977722e-01, -4.846297459115610e-01, -4.779400964977722e-01, -4.720066423993984e-01, -5.095491509910542e-01, -5.167407133502993e-01, -3.577797221735063e-01, -4.242258204111061e-01, -3.706738230665075e-01, -4.259928741911198e-01, -3.542293929394723e-01, -3.547535031941986e-01, -3.675160533055170e-01, -3.681202398521237e-01, -3.675160533055170e-01, -4.161348379087433e-01, -4.646400569135411e-01, -5.173917630458774e-01, -2.066561469683068e-01, -2.074384215006384e-01, -2.497737915284635e-01, -2.172044862613843e-01, -2.989546661226855e-01, -2.439399132042083e-01, -2.170240893314005e-01, -2.165932721968440e-01, -2.170240893314005e-01, -2.664171103886957e-01, -3.228440504027233e-01, -3.265052567419562e-01, -1.413447070861658e-02, -1.418055994766471e-02, -7.124058877926424e-02, -7.112158870482425e-02, -2.367314964700084e-01, -2.443750473734087e-01, -5.592615439308603e-02, -4.925145651177525e-02, -5.592615439308628e-02, -4.925145651177486e-02, -1.013623919407738e-02, -1.045218136413522e-02, -2.143557318862797e-03, -2.148455446163177e-03, -2.399261889455299e-03, -2.548499635363167e-03, -7.743338230443135e-03, -8.568387585916911e-03, -5.749136680439312e-03, -7.618908519133532e-03, -5.749136680439315e-03, -4.126217675086298e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m06_sx_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06_sx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.890695346602861e-08, 0.000000000000000e+00, -1.890683684506293e-08, -1.890667773204061e-08, 0.000000000000000e+00, -1.890663656489187e-08, -1.890575918418325e-08, 0.000000000000000e+00, -1.890533052175949e-08, -1.890887201204451e-08, 0.000000000000000e+00, -1.640705311036291e-08, -1.890679004115464e-08, 0.000000000000000e+00, -1.640609132299282e-08, -1.640513950630168e-08, 0.000000000000000e+00, -1.640609132299282e-08, -1.857792900166962e-05, 0.000000000000000e+00, -2.733743361624188e-05, -1.857971237906311e-05, 0.000000000000000e+00, -1.857852291774334e-05, -1.861467845437028e-05, 0.000000000000000e+00, -1.862014714537427e-05, -1.859570091431572e-05, 0.000000000000000e+00, -1.859470978434141e-05, -1.858586491777276e-05, 0.000000000000000e+00, -1.862478093528974e-05, -2.735424011991272e-05, 0.000000000000000e+00, -1.862478093528974e-05, -1.978693834761310e-02, 0.000000000000000e+00, -1.949766781994755e-02, -1.990378884443569e-02, 0.000000000000000e+00, -9.492036291371839e-03, -9.522057262559447e-03, 0.000000000000000e+00, -9.633538834573987e-03, -9.683026991122338e-03, 0.000000000000000e+00, -2.109450492362473e-02, -1.892289227568770e-02, 0.000000000000000e+00, -2.419247805668513e-02, -9.310239912752901e-03, 0.000000000000000e+00, -9.973394403371265e-03, -4.575760525808828e+00, 0.000000000000000e+00, -1.526047099916513e+00, -4.378852639046223e+00, 0.000000000000000e+00, -1.495333669180191e+00, -3.305435222218580e-03, 0.000000000000000e+00, -9.629526797721111e-03, -1.737416402175633e+00, 0.000000000000000e+00, -1.909585144773350e+00, -1.306484793746080e+00, 0.000000000000000e+00, -2.266915881014980e+00, -1.306484793746079e+00, 0.000000000000000e+00, -4.555190721828386e+01, -1.350144036230249e+01, 0.000000000000000e+00, -1.354743437349922e+01, -2.552277483732959e+06, 0.000000000000000e+00, -1.416192964758872e+01, -2.699041430682581e+03, 0.000000000000000e+00, -6.091771847606065e+00, -9.910955337231757e+00, 0.000000000000000e+00, -1.001280638789932e+01, -1.283692445705002e+01, 0.000000000000000e+00, -2.201292629265882e+01, -1.283692445705002e+01, 0.000000000000000e+00, -2.201292629265884e+01, -4.743252208140029e-06, 0.000000000000000e+00, -4.747806168841532e-06, -4.740728645868117e-06, 0.000000000000000e+00, -4.745366343187518e-06, -4.743108481918289e-06, 0.000000000000000e+00, -4.747719813008070e-06, -4.740942695322059e-06, 0.000000000000000e+00, -4.745502876771891e-06, -5.230012539642264e-06, 0.000000000000000e+00, -4.746584770159692e-06, -4.741966995772695e-06, 0.000000000000000e+00, -5.235153323620038e-06, -1.712807654905548e-04, 0.000000000000000e+00, -1.716079208279202e-04, -1.691098728560487e-04, 0.000000000000000e+00, -1.694888765481384e-04, -1.728899182772692e-04, 0.000000000000000e+00, -1.727587348770967e-04, -1.710983462475361e-04, 0.000000000000000e+00, -1.709138873194314e-04, -1.688463941248190e-04, 0.000000000000000e+00, -2.678931286773764e-04, -1.688463941248190e-04, 0.000000000000000e+00, -1.703646429738408e-04, -2.613861691212151e-02, 0.000000000000000e+00, -3.387809382674795e-02, -2.078189102628077e-02, 0.000000000000000e+00, -2.081057226377949e-02, -3.411715387897673e-02, 0.000000000000000e+00, -3.135696238734033e-02, -3.245512870486949e-02, 0.000000000000000e+00, -2.938934907319179e-02, -2.319105336336150e-02, 0.000000000000000e+00, -3.514487691173368e-02, -2.319105336336150e-02, 0.000000000000000e+00, -2.763864643138389e-02, -2.767595729572682e+00, 0.000000000000000e+00, -2.729123871705776e+00, -4.050292037281985e+00, 0.000000000000000e+00, -9.556423100624907e-01, -3.106590037073000e+00, 0.000000000000000e+00, -3.067995790127267e+00, -2.376002139736321e-04, 0.000000000000000e+00, -2.380614944727785e-04, -2.835176263413137e+00, 0.000000000000000e+00, -3.230180411927106e+00, -2.835176263413137e+00, 0.000000000000000e+00, -3.230180411927108e+00, -7.457648570283221e+07, 0.000000000000000e+00, -6.637156381059358e+00, -9.402129728787921e+00, 0.000000000000000e+00, -8.287865017185130e+00, -6.767802723329405e+01, 0.000000000000000e+00, -7.427208852610804e+01, -5.088059323175329e+00, 0.000000000000000e+00, -3.605810858238872e+02, -1.276155906839847e+01, 0.000000000000000e+00, -4.046631227311156e+01, -1.276155906839847e+01, 0.000000000000000e+00, -4.046631227311155e+01, -3.105787158388287e-02, 0.000000000000000e+00, -3.068428415572971e-02, -3.009679895097674e-02, 0.000000000000000e+00, -2.965430767840765e-02, -3.149222252415197e-02, 0.000000000000000e+00, -3.102036662701347e-02, -3.149422261360185e-02, 0.000000000000000e+00, -2.996164466498914e-02, -3.146215365119952e-02, 0.000000000000000e+00, -3.100483471859449e-02, -3.146215365119952e-02, 0.000000000000000e+00, -2.980625839758019e-02, -3.414168787109666e-02, 0.000000000000000e+00, -3.380025378955815e-02, -5.070449046526065e-02, 0.000000000000000e+00, -6.742212108115754e-02, -4.603928546990729e-02, 0.000000000000000e+00, -5.588535485484027e-02, -4.115177807286775e-02, 0.000000000000000e+00, -4.060330995891526e-02, -4.370814657322714e-02, 0.000000000000000e+00, -4.313112023070153e-02, -4.370814657322714e-02, 0.000000000000000e+00, -5.104965654405744e-02, -1.687495224595747e-02, 0.000000000000000e+00, -1.975965924528420e-02, -5.701188052728421e-01, 0.000000000000000e+00, -5.630554787477381e-01, -8.388491545206075e-01, 0.000000000000000e+00, -3.628240938048591e-01, -2.768603121161537e-01, 0.000000000000000e+00, -1.690099274974423e-01, -2.613613207812884e-01, 0.000000000000000e+00, -2.626678637521333e-01, -2.613613207812886e-01, 0.000000000000000e+00, -4.787869040719258e-01, -6.575337760802628e-02, 0.000000000000000e+00, -6.493425372882480e-02, -2.909531925628394e+03, 0.000000000000000e+00, -2.831602563659096e+03, -4.910303415796910e+00, 0.000000000000000e+00, -5.017330481251741e+00, -2.207333796743641e-01, 0.000000000000000e+00, -2.206036590722592e-01, -5.116209469909737e+00, 0.000000000000000e+00, -5.699040096533003e+00, -5.116209469909739e+00, 0.000000000000000e+00, -5.699040096533004e+00, -7.345559100306828e+05, 0.000000000000000e+00, -6.369125279521297e+05, -1.081932416211621e+01, 0.000000000000000e+00, -1.077175103502271e+01, -3.068745582071924e+08, 0.000000000000000e+00, -2.398015469360550e+08, -1.839978806792782e+02, 0.000000000000000e+00, -1.717980618789044e+02, -3.292687616296600e+01, 0.000000000000000e+00, -4.196608179663003e+01, -3.292687616296606e+01, 0.000000000000000e+00, -3.223395459370391e+07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m06_sx_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06_sx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-6.532052454796628e-04, -6.538793136722906e-04, -6.533019274551185e-04, -6.539494472460000e-04, -6.535737971591939e-04, -6.543496297431456e-04, -6.524896067731108e-04, -7.157981957401747e-04, -6.532673520252369e-04, -7.163434481857627e-04, -7.161112825722746e-04, -7.163434481857627e-04, 2.099885986929404e-03, 2.116915853038456e-03, 2.100113506620077e-03, 2.099873625009384e-03, 2.104520052885817e-03, 2.105281050353708e-03, 2.102746463999380e-03, 2.102723043984073e-03, 2.099715022242375e-03, 2.106627011683712e-03, 2.116945049462338e-03, 2.106627011683712e-03, 1.402309796627320e-02, 1.366976706999430e-02, 1.413017634583841e-02, 1.466598020732960e-02, 1.717202687033143e-02, 1.755686055227804e-02, 1.652055372753377e-02, 1.487019094313683e-02, 1.337263502079782e-02, 1.670550804327255e-02, 1.421656634559742e-02, 1.881700090056258e-02, 6.010077757301212e-02, 6.949083268052463e-02, 6.054885387402552e-02, 6.758922905851032e-02, 1.435789657204076e-02, 1.328475322399031e-02, 1.092050350884051e-02, 2.077546663924522e-02, 6.720143520606943e-02, -1.306015807045665e-02, 6.720143520606942e-02, -6.596330768183953e-03, -3.466405965157211e-05, -4.172481611280796e-05, -2.093629451089667e-04, -5.140721400452327e-05, -7.805303429410576e-03, -3.457062555704625e-03, -5.533560005070685e-06, -5.315673062404692e-06, -2.340744509764231e-05, -7.402317691516960e-06, -2.340744509764231e-05, -7.402317691524611e-06, -7.902256925694334e-03, -7.904754610758281e-03, -7.996739204657512e-03, -7.996110122218953e-03, -7.908901517831185e-03, -7.908897986816873e-03, -7.989914710557997e-03, -7.991831399244143e-03, -7.563180841312809e-03, -7.950626595657701e-03, -7.949802422508668e-03, -7.563922400867618e-03, 3.507150578757642e-03, 3.508937020822201e-03, 3.505031158584805e-03, 3.508250337886574e-03, 3.523448775879394e-03, 3.517561133618514e-03, 3.506216890679146e-03, 3.506442676888673e-03, 3.508271877570997e-03, 3.560249198820224e-03, 3.508271877570997e-03, 3.507210809779756e-03, 9.581494954852264e-03, 9.556447105614265e-03, -2.812809791672781e-02, -3.236931239931681e-02, 1.387656794080838e-02, 1.355414101387583e-02, 1.123568793017930e-02, 7.106481492972930e-03, 3.383587901041000e-03, 9.206454713497878e-03, 3.383587901040988e-03, 8.734654980943519e-03, -1.369918047121252e-02, -1.359484889016809e-02, 3.832414487371413e-02, 4.382347619644413e-02, -1.391029404024103e-02, -1.415565887377826e-02, 1.150457565428375e-03, 1.140776515329616e-03, -6.682721443098367e-03, 8.868628191839653e-03, -6.682721443098447e-03, 8.868628191839560e-03, -8.885994307226747e-06, -1.756482483354800e-06, -4.676280260537190e-06, -4.312159236231760e-06, -1.407127199960646e-05, -1.833964546215419e-05, -9.982427397494775e-03, -1.251241375392865e-02, -2.827949329450431e-06, -2.320928258647722e-05, -2.827949329428502e-06, -2.320928258639924e-05, 3.936060884327325e-01, 4.140190163127145e-01, -2.354797772766494e-02, -1.596827060318786e-02, 5.927544706058779e-02, 7.181754066254119e-02, 1.739479082887306e-01, 1.913024049098324e-01, 1.103645399366771e-01, 1.241188413874836e-01, 1.103645399366771e-01, 1.260086706369472e-01, 3.054620076787199e-01, 3.269031278756787e-01, 1.501433562689961e-02, 1.498317799901501e-02, 4.628875859889007e-03, 4.677388747968433e-03, -3.928450378051243e-02, -4.024686219003123e-02, -1.005598791316055e-02, -1.100551540485132e-02, -1.005598791316055e-02, -9.236688008140837e-03, -9.508359033776788e-03, -1.255013746381869e-02, 5.469406516479462e-02, 5.463467535438758e-02, 3.904288635169773e-02, 4.176219687505834e-02, 2.007664685866361e-02, 1.966503151023329e-02, 2.603443325487497e-02, 2.587558079306246e-02, 2.603443325487498e-02, 2.548822994348662e-02, 1.629372270820758e-02, 1.640024891713154e-02, -7.832815150400319e-03, -7.814708648901795e-03, -5.275607428063745e-03, -5.892272548131762e-03, 2.182373608659302e-02, 2.239177276801516e-02, -1.526052639735162e-02, -1.652523021100021e-02, -1.526052639735148e-02, -1.652523021100056e-02, -2.449982931037573e-04, -2.677134581395664e-04, -1.048308631402915e-07, -1.050871783800415e-07, -1.278532450471334e-05, -1.628109214806932e-05, -1.129405773604789e-02, -1.079011164452619e-02, -6.200143820616155e-06, -1.853675972413527e-05, -6.200143820637312e-06, -9.564152756595376e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
