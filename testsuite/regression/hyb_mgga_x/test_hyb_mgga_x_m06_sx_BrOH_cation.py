
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_m06_sx_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06_sx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.420324780733281e+01, -1.420322843590906e+01, -1.420322195342624e+01, -1.420350695280214e+01, -1.420334640200975e+01, -1.420334640200975e+01, -2.332556162126481e+00, -2.332550752236715e+00, -2.332624455646857e+00, -2.334490440678974e+00, -2.333340891521307e+00, -2.333340891521307e+00, -4.446177092874256e-01, -4.445115826654310e-01, -4.428543945719337e-01, -4.528182475966747e-01, -4.504991086860965e-01, -4.504991086860965e-01, -1.436916370544646e-01, -1.454715703282908e-01, -4.225777242744649e-01, -1.037661467556770e-01, -1.376405090812992e-01, -1.376405090812991e-01, -1.064061368597674e-02, -1.119889679478754e-02, -5.587668032438402e-02, -6.153579230255141e-03, -8.574808597884632e-03, -8.574808597884632e-03, -3.279781984901780e+00, -3.275960565875134e+00, -3.279586651198720e+00, -3.276214618351944e+00, -3.277857720106545e+00, -3.277857720106545e+00, -1.485371471839779e+00, -1.493836636414701e+00, -1.489455359207895e+00, -1.497073881797661e+00, -1.488109132381366e+00, -1.488109132381366e+00, -3.980554361354520e-01, -3.964551228302045e-01, -3.670659926386888e-01, -3.579040187844609e-01, -4.016200492695486e-01, -4.016200492695486e-01, -9.502712690557841e-02, -1.397937246210655e-01, -9.226540016682395e-02, -1.204997655748156e+00, -9.297420725029416e-02, -9.297420725029416e-02, -4.753334648183621e-03, -6.015843049702890e-03, -4.603708340503994e-03, -7.619014499258005e-02, -5.781343592855006e-03, -5.781343592855010e-03, -3.522275584328757e-01, -3.370368977901109e-01, -3.362385177240670e-01, -3.397250194313510e-01, -3.373830996708231e-01, -3.373830996708231e-01, -3.339491342779174e-01, -3.588664260573383e-01, -3.592271780992334e-01, -3.503580178583963e-01, -3.565328573517221e-01, -3.565328573517221e-01, -4.206993111402897e-01, -1.820454654561907e-01, -2.149776886056592e-01, -2.515681541758134e-01, -2.347715001195860e-01, -2.347715001195861e-01, -3.273291098110656e-01, -5.396562030883668e-02, -6.850531164423304e-02, -2.349835099076557e-01, -8.065590516494797e-02, -8.065590516494799e-02, -1.496490678163022e-02, -1.609640180756611e-03, -3.383291294394645e-03, -7.872470141762644e-02, -5.310391998014209e-03, -5.310391998014204e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_m06_sx_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06_sx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.445447960724419e+01, -1.445334725154605e+01, -1.445440736299054e+01, -1.445329494203968e+01, -1.445418669173323e+01, -1.445297577367974e+01, -1.445499131051910e+01, -1.445400487978271e+01, -1.445443175438904e+01, -1.445360220036266e+01, -1.445443175438904e+01, -1.445360220036266e+01, -2.677951914549928e+00, -2.678211647862256e+00, -2.678010199012985e+00, -2.678280180334812e+00, -2.679508535220426e+00, -2.679897905517669e+00, -2.677649174127767e+00, -2.678023137754678e+00, -2.677357646308785e+00, -2.679396265664981e+00, -2.677357646308785e+00, -2.679396265664981e+00, -5.372394781972933e-01, -5.370786225851419e-01, -5.369894247043745e-01, -5.371238425364784e-01, -5.368786863008425e-01, -5.343549733220239e-01, -5.299858456376345e-01, -5.284412762210571e-01, -5.420650161341212e-01, -5.287055612872592e-01, -5.420650161341212e-01, -5.287055612872592e-01, -1.573399032866215e-01, -1.594866169080862e-01, -1.577625344551143e-01, -1.584540760587757e-01, -6.566235149082973e-01, -7.078284205618625e-01, -6.953596185441369e-02, -8.522910716219413e-02, -1.634605041110490e-01, -4.012571679775302e-02, -1.634605041110489e-01, -4.012571679775316e-02, -1.363790386163796e-02, -1.447291354661285e-02, -1.427298388731317e-02, -1.526356079415345e-02, -6.211096190711633e-02, -6.341993409387210e-02, -8.254947721826758e-03, -8.118399075135696e-03, -1.219320556399158e-02, -6.968521091965927e-03, -1.219320556399158e-02, -6.968521091965910e-03, -3.238064645804705e+00, -3.237166425171202e+00, -3.235202330246542e+00, -3.234398757603677e+00, -3.237814948852406e+00, -3.237006364541445e+00, -3.235362326944709e+00, -3.234495521942477e+00, -3.236644422104394e+00, -3.235769533711129e+00, -3.236644422104394e+00, -3.235769533711129e+00, -1.383643547730258e+00, -1.383501383604627e+00, -1.396166950716216e+00, -1.395737511790892e+00, -1.369866004163314e+00, -1.373488603215077e+00, -1.379632630312663e+00, -1.383746748227483e+00, -1.402178498392365e+00, -1.391396934949982e+00, -1.402178498392365e+00, -1.391396934949982e+00, -4.479648657063634e-01, -4.457320957807872e-01, -4.560093960880020e-01, -4.511393205386193e-01, -4.095500258746803e-01, -4.269764281394002e-01, -4.524425961129210e-01, -4.586900916896984e-01, -4.576317957975113e-01, -4.437760887924109e-01, -4.576317957975112e-01, -4.437760887924109e-01, -5.005187943784883e-02, -4.911560162316207e-02, -1.501108565059428e-01, -1.509813239006504e-01, -5.265706887893851e-02, -5.020092919888155e-02, -1.536440497676251e+00, -1.535619911818731e+00, -5.040736435567011e-02, -6.324354839226272e-02, -5.040736435566962e-02, -6.324354839226261e-02, -6.201663288350557e-03, -6.444803152092077e-03, -7.943817790764187e-03, -8.064584013599605e-03, -5.932295764173623e-03, -6.277420482060885e-03, -6.268240882919116e-02, -6.189495176386960e-02, -6.070220839455768e-03, -8.303920185705397e-03, -6.070220839455768e-03, -8.303920185705428e-03, -5.505785460126238e-01, -5.574867606026703e-01, -4.091096346962841e-01, -4.145147582945558e-01, -4.482999843993164e-01, -4.551812324359346e-01, -4.909898858174226e-01, -4.977236984993667e-01, -4.686048477165457e-01, -4.754992750916116e-01, -4.686048477165457e-01, -4.754992750916115e-01, -5.166454015198330e-01, -5.236028929794407e-01, -3.596160831085882e-01, -3.613577852704989e-01, -3.741179677178476e-01, -3.750929787776847e-01, -3.597817721838203e-01, -3.603037855028932e-01, -3.722652804523645e-01, -3.727363055714513e-01, -3.722652804523645e-01, -3.727363055714513e-01, -5.043896904488688e-01, -4.975721140434954e-01, -2.042107202584325e-01, -2.049417607601785e-01, -2.155582750421207e-01, -2.145917148318728e-01, -2.504308585226046e-01, -2.520734418496463e-01, -2.177417399781399e-01, -2.173992054267842e-01, -2.177417399781400e-01, -2.173992054267843e-01, -3.309636365166374e-01, -3.342213177887213e-01, -6.168355293232657e-02, -6.196997657472817e-02, -6.920686642096752e-02, -6.899120839336420e-02, -2.483358861955488e-01, -2.532162021711335e-01, -5.084535004183584e-02, -4.405450191154495e-02, -5.084535004183612e-02, -4.405450191154460e-02, -1.938733773815684e-02, -2.006509259813295e-02, -2.143293821588175e-03, -2.148045825332024e-03, -4.355791734031085e-03, -4.631536759432670e-03, -5.006718185849163e-02, -4.916541261922137e-02, -5.744410084859013e-03, -7.618375050980209e-03, -5.744410084859018e-03, -7.618375050980183e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m06_sx_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06_sx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.654992478924663e-08, 0.000000000000000e+00, -1.654982911075026e-08, -1.654975645108212e-08, 0.000000000000000e+00, -1.654970680346207e-08, -1.654908843932990e-08, 0.000000000000000e+00, -1.654878580596246e-08, -1.655099097633265e-08, 0.000000000000000e+00, -1.655121039877145e-08, -1.654983021890399e-08, 0.000000000000000e+00, -1.655014613091338e-08, -1.654983021890399e-08, 0.000000000000000e+00, -1.655014613091338e-08, -2.281526785653101e-05, 0.000000000000000e+00, -2.282161452082683e-05, -2.281560348138686e-05, 0.000000000000000e+00, -2.282245623486774e-05, -2.282887289740681e-05, 0.000000000000000e+00, -2.283184517769943e-05, -2.279071424751454e-05, 0.000000000000000e+00, -2.279503046255869e-05, -2.282856359799214e-05, 0.000000000000000e+00, -2.280489893223896e-05, -2.282856359799214e-05, 0.000000000000000e+00, -2.280489893223896e-05, -1.469113790974991e-02, 0.000000000000000e+00, -1.468518123833271e-02, -1.470462829187363e-02, 0.000000000000000e+00, -1.469727132972396e-02, -1.484435850978990e-02, 0.000000000000000e+00, -1.482696072530572e-02, -1.446116659959860e-02, 0.000000000000000e+00, -1.448027919532957e-02, -1.455556871457670e-02, 0.000000000000000e+00, -1.406333877762463e-02, -1.455556871457670e-02, 0.000000000000000e+00, -1.406333877762463e-02, -1.667405801510146e+00, 0.000000000000000e+00, -1.568255180235712e+00, -1.669086874453105e+00, 0.000000000000000e+00, -1.548110801745822e+00, -8.086478932660958e-03, 0.000000000000000e+00, -7.627829135548869e-03, -2.411884811590050e+00, 0.000000000000000e+00, -2.307477354804166e+00, -1.434057079019272e+00, 0.000000000000000e+00, -4.277701820172791e+00, -1.434057079019271e+00, 0.000000000000000e+00, -4.277701820172795e+00, -1.384359056219873e+01, 0.000000000000000e+00, -1.369297631850949e+01, -1.458709570230114e+01, 0.000000000000000e+00, -1.449635538566215e+01, -7.495944974169016e+00, 0.000000000000000e+00, -7.451137371182871e+00, -1.278164111741812e+01, 0.000000000000000e+00, -1.242540591089451e+01, -1.385070221318967e+01, 0.000000000000000e+00, -3.545299865781460e+01, -1.385070221318971e+01, 0.000000000000000e+00, -3.545299865781468e+01, -4.746260731279830e-06, 0.000000000000000e+00, -4.750644959444802e-06, -4.743699275153266e-06, 0.000000000000000e+00, -4.748168735439909e-06, -4.746045977058108e-06, 0.000000000000000e+00, -4.750507632351744e-06, -4.743850396500961e-06, 0.000000000000000e+00, -4.748260261741729e-06, -4.745008229066851e-06, 0.000000000000000e+00, -4.749413959616071e-06, -4.745008229066851e-06, 0.000000000000000e+00, -4.749413959616071e-06, -1.806046865181255e-04, 0.000000000000000e+00, -1.806322275801373e-04, -1.768380838232603e-04, 0.000000000000000e+00, -1.769919770162666e-04, -1.809479973031670e-04, 0.000000000000000e+00, -1.809270693857029e-04, -1.777265109000192e-04, 0.000000000000000e+00, -1.776191021627692e-04, -1.780793706378651e-04, 0.000000000000000e+00, -1.786777972960697e-04, -1.780793706378651e-04, 0.000000000000000e+00, -1.786777972960697e-04, -2.864531670586686e-02, 0.000000000000000e+00, -2.895805739193627e-02, -2.278017509501040e-02, 0.000000000000000e+00, -2.272019896473623e-02, -4.116018025089101e-02, 0.000000000000000e+00, -3.616596943883642e-02, -3.970996619661105e-02, 0.000000000000000e+00, -3.474039381592896e-02, -2.490440616211364e-02, 0.000000000000000e+00, -3.042626501414323e-02, -2.490440616211365e-02, 0.000000000000000e+00, -3.042626501414323e-02, -3.561602700871056e+00, 0.000000000000000e+00, -3.590747995121400e+00, -1.041330350914359e+00, 0.000000000000000e+00, -1.030221429160673e+00, -4.257611392115401e+00, 0.000000000000000e+00, -3.976909450454230e+00, -2.813565603603550e-04, 0.000000000000000e+00, -2.818776688757283e-04, -3.386921045602345e+00, 0.000000000000000e+00, -3.686232719386898e+00, -3.386921045602345e+00, 0.000000000000000e+00, -3.686232719386898e+00, -1.796905869115441e+01, 0.000000000000000e+00, -1.556897286027189e+01, -1.550235531669280e+01, 0.000000000000000e+00, -1.431707362936167e+01, -8.798553153853580e+01, 0.000000000000000e+00, -9.787631565002413e+01, -7.412532713922385e+00, 0.000000000000000e+00, -7.079860466281849e+00, -4.338809981466374e+01, 0.000000000000000e+00, -4.273572089315932e+01, -4.338809981466363e+01, 0.000000000000000e+00, -4.273572089315929e+01, -3.142823778196983e-02, 0.000000000000000e+00, -3.104029553748488e-02, -3.044214576383653e-02, 0.000000000000000e+00, -2.998563578825586e-02, -3.048029331130401e-02, 0.000000000000000e+00, -3.004591170169152e-02, -3.072220122469289e-02, 0.000000000000000e+00, -3.030447717297293e-02, -3.057095463070533e-02, 0.000000000000000e+00, -3.014547048064490e-02, -3.057095463070533e-02, 0.000000000000000e+00, -3.014547048064490e-02, -3.495860191893684e-02, 0.000000000000000e+00, -3.458056987529133e-02, -5.143215145604352e-02, 0.000000000000000e+00, -5.072871851202097e-02, -4.686844645714254e-02, 0.000000000000000e+00, -4.618551282303466e-02, -4.201194125366547e-02, 0.000000000000000e+00, -4.144593479311034e-02, -4.462220871326995e-02, 0.000000000000000e+00, -4.399943272307565e-02, -4.462220871326995e-02, 0.000000000000000e+00, -4.399943272307565e-02, -1.897919258370244e-02, 0.000000000000000e+00, -1.884961525514347e-02, -5.938404131173811e-01, 0.000000000000000e+00, -5.871260706570168e-01, -3.979510102008645e-01, 0.000000000000000e+00, -3.910046301704744e-01, -1.988586360457306e-01, 0.000000000000000e+00, -1.951812334606029e-01, -2.876456285575487e-01, 0.000000000000000e+00, -2.891317735977975e-01, -2.876456285575489e-01, 0.000000000000000e+00, -2.891317735977976e-01, -7.136708073210116e-02, 0.000000000000000e+00, -6.990560829030845e-02, -6.862208949071825e+00, 0.000000000000000e+00, -6.869016785144585e+00, -6.401677989556130e+00, 0.000000000000000e+00, -6.465239603751473e+00, -2.553964643529659e-01, 0.000000000000000e+00, -2.427723438139954e-01, -6.469074797268193e+00, 0.000000000000000e+00, -7.067246135901776e+00, -6.469074797268195e+00, 0.000000000000000e+00, -7.067246135901777e+00, -1.104774135030473e+01, 0.000000000000000e+00, -1.127509603094352e+01, -5.352101979982735e+01, 0.000000000000000e+00, -8.957867581356919e+01, -3.399518895210425e+01, 0.000000000000000e+00, -3.619152503281856e+01, -7.266058670271059e+00, 0.000000000000000e+00, -6.986180640260524e+00, -9.011268737546402e+01, 0.000000000000000e+00, -4.438108993825750e+01, -9.011268737546419e+01, 0.000000000000000e+00, -4.438108993825761e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m06_sx_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06_sx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-7.122725880191995e-04, -7.129850039191618e-04, -7.123728195244504e-04, -7.130577104703648e-04, -7.126564314299590e-04, -7.134746131692982e-04, -7.115325178817784e-04, -7.120392450011591e-04, -7.123369377411050e-04, -7.125850277253405e-04, -7.123369377411050e-04, -7.125850277253405e-04, 2.111946080574132e-03, 2.111807103889300e-03, 2.112158352853108e-03, 2.111948185396391e-03, 2.116283482369319e-03, 2.116997473160255e-03, 2.114561992255455e-03, 2.114548612454427e-03, 2.111809956809038e-03, 2.118201738113484e-03, 2.111809956809038e-03, 2.118201738113484e-03, 1.455020789479696e-02, 1.412774356989420e-02, 1.467949716642305e-02, 1.419033538208367e-02, 1.644123139106366e-02, 1.682163041944471e-02, 1.593133343182479e-02, 1.564474041475208e-02, 1.377091391230274e-02, 1.818646978183885e-02, 1.377091391230274e-02, 1.818646978183885e-02, 6.946117094105336e-02, 6.932942203846405e-02, 6.968181526218856e-02, 6.738872039260525e-02, 1.300156503680471e-02, 1.392127718253106e-02, 1.170401531898733e-02, 2.111498724318596e-02, 6.669360825703555e-02, -1.182443930849561e-02, 6.669360825703553e-02, -1.182443930849556e-02, -3.464756942340269e-05, -4.171626536029613e-05, -4.129625724272054e-05, -5.138420725777344e-05, -2.847385763393820e-03, -3.434312601225543e-03, -5.510171101348818e-06, -5.296154641180454e-06, -2.337451058200266e-05, -7.353587106690050e-06, -2.337451058200266e-05, -7.353587106697699e-06, -7.899825738441940e-03, -7.902462057660155e-03, -7.994311747415916e-03, -7.993822459474611e-03, -7.906525868663632e-03, -7.906645498402958e-03, -7.987540586422077e-03, -7.989581612625229e-03, -7.947330958632128e-03, -7.948329387195561e-03, -7.947330958632128e-03, -7.948329387195561e-03, 3.515799955397256e-03, 3.517316654133064e-03, 3.512264861691379e-03, 3.515258776153406e-03, 3.530768450893610e-03, 3.525072392422012e-03, 3.512466639254743e-03, 3.512771194993264e-03, 3.516785756221508e-03, 3.514970804818053e-03, 3.516785756221508e-03, 3.514970804818053e-03, 9.726770063426980e-03, 9.282202475133266e-03, -2.662282306497445e-02, -3.077545968332860e-02, 1.394216589011426e-02, 1.360719292778464e-02, 1.148467288704559e-02, 7.553990510563989e-03, 3.652448026024511e-03, 8.924228836087521e-03, 3.652448026024499e-03, 8.924228836087515e-03, -1.320327731713405e-02, -1.304322376855171e-02, 4.354145319162493e-02, 4.371823287667369e-02, -1.342516992319354e-02, -1.367414312258972e-02, 1.350711936019083e-03, 1.341701318856169e-03, -6.160990965947920e-03, 9.252742360326770e-03, -6.160990965947996e-03, 9.252742360326676e-03, -1.692777220411670e-06, -1.746831498108688e-06, -4.644879039851491e-06, -4.282259442232322e-06, -1.401000497662460e-05, -1.825620234703023e-05, -9.759571965501552e-03, -1.083115031595296e-02, -2.844504183964730e-06, -2.318572632087906e-05, -2.844504183942803e-06, -2.318572632080109e-05, 3.916714725289764e-01, 4.120340414590910e-01, -2.336463378191823e-02, -1.582532018452691e-02, 5.991602530104578e-02, 7.261976941297975e-02, 1.756836279322013e-01, 1.904416099401038e-01, 1.115721510440334e-01, 1.254703468652515e-01, 1.115721510440334e-01, 1.254703468652512e-01, 3.025023261135156e-01, 3.238338396187351e-01, 1.502251608662381e-02, 1.485172947513937e-02, 4.704142338813125e-03, 3.789255748817010e-03, -3.883829806737118e-02, -3.979604508252711e-02, -9.852435935931964e-03, -1.080242311555053e-02, -9.852435935931951e-03, -1.080242311555052e-02, -8.504449097792844e-03, -1.305901082446797e-02, 5.451640417128657e-02, 5.445067330635474e-02, 4.294486345741690e-02, 4.152086899209931e-02, 1.989395270361403e-02, 1.978903280087931e-02, 2.601711893767727e-02, 2.586304027917776e-02, 2.601711893767728e-02, 2.586304027917774e-02, 1.633362066677939e-02, 1.643261557572656e-02, -2.850359505387648e-03, -2.847467678410968e-03, -5.219828278517654e-03, -5.829334501419785e-03, 2.192418066799337e-02, 2.244304352414529e-02, -1.490542049807963e-02, -1.606086544073231e-02, -1.490542049807950e-02, -1.606086544073265e-02, -4.847800296384379e-05, -5.312006891984420e-05, -1.084962118749158e-07, -1.179135570279406e-07, -2.441186174654118e-06, -3.110850325623791e-06, -1.545895723738682e-02, -1.644456107008192e-02, -6.185006565619202e-06, -1.851752954320682e-05, -6.185006565640358e-06, -1.851752954321775e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
