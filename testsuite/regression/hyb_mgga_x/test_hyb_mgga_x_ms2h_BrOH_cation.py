
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_ms2h_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_ms2h", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.042815731893507e+01, -2.042820487020253e+01, -2.042845542719418e+01, -2.042774752047029e+01, -2.042811287027137e+01, -2.042811287027137e+01, -3.068025727902429e+00, -3.068027010427390e+00, -3.068243921071280e+00, -3.069476425664992e+00, -3.068606514554487e+00, -3.068606514554487e+00, -6.003927432694874e-01, -6.001335662541897e-01, -5.951495777321573e-01, -6.005244002521333e-01, -6.006213696393480e-01, -6.006213696393480e-01, -1.801547814492451e-01, -1.814285520327979e-01, -6.895703049158390e-01, -1.437294702808105e-01, -1.721016871603931e-01, -1.721016871603931e-01, -7.667829413953968e-03, -8.074296926723382e-03, -4.393925113760143e-02, -4.422485660405497e-03, -6.171908703349347e-03, -6.171908703349347e-03, -4.958277767460283e+00, -4.958698351120336e+00, -4.958303140814508e+00, -4.958674324441810e+00, -4.958487658123415e+00, -4.958487658123415e+00, -1.917521256633429e+00, -1.935367300541524e+00, -1.916232538097069e+00, -1.931674122695916e+00, -1.928230064227130e+00, -1.928230064227130e+00, -5.467612455417152e-01, -5.853469827650931e-01, -4.855372019658638e-01, -4.896282720484073e-01, -5.573429485562216e-01, -5.573429485562216e-01, -1.073712869350038e-01, -1.857016506507963e-01, -1.002299556058244e-01, -1.668542727956751e+00, -1.213309078812364e-01, -1.213309078812364e-01, -3.414459828280697e-03, -4.323223148611412e-03, -3.310517424745574e-03, -6.948426730379154e-02, -4.158447778094331e-03, -4.158447778094333e-03, -5.551241278214194e-01, -5.539142315597952e-01, -5.543433093168028e-01, -5.546912704388627e-01, -5.545167572569336e-01, -5.545167572569336e-01, -5.387308748056512e-01, -4.798364346558925e-01, -4.964256565397901e-01, -5.129152264062063e-01, -5.043291606512520e-01, -5.043291606512520e-01, -6.041663157651623e-01, -2.302777476423995e-01, -2.645007927871265e-01, -3.204742195584538e-01, -2.927502738101707e-01, -2.927502738101708e-01, -4.325403857365494e-01, -4.206773030883228e-02, -5.680517665437199e-02, -3.096066434046772e-01, -8.621614361216939e-02, -8.621614361216942e-02, -1.080430135723371e-02, -1.155662306792876e-03, -2.430230712935872e-03, -8.150135341432051e-02, -3.818914807143065e-03, -3.818914807143062e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_ms2h_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_ms2h", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.619682208331852e+01, -2.619733778330075e+01, -2.619693255961327e+01, -2.619741794439865e+01, -2.619734634566712e+01, -2.619799386076227e+01, -2.619610255152558e+01, -2.619640788167272e+01, -2.619688702557066e+01, -2.619708590660606e+01, -2.619688702557066e+01, -2.619708590660606e+01, -3.834559831536037e+00, -3.833858342437077e+00, -3.834850129480354e+00, -3.834001941252036e+00, -3.840077622232052e+00, -3.840945838538019e+00, -3.840498941333313e+00, -3.840118591516067e+00, -3.833344543900540e+00, -3.845069210130032e+00, -3.833344543900540e+00, -3.845069210130032e+00, -7.170041164557415e-01, -7.217946415827354e-01, -7.152901006728161e-01, -7.210626386327987e-01, -6.929442646071245e-01, -6.865370601640325e-01, -6.966623051086336e-01, -6.991765749273804e-01, -7.294968873989982e-01, -6.658241456100443e-01, -7.294968873989982e-01, -6.658241456100443e-01, -1.461616892654288e-01, -1.827617813240549e-01, -1.529376803254496e-01, -1.799788747366346e-01, -8.029207703401211e-01, -8.397782314403804e-01, -1.527920849783311e-01, -1.538758083266557e-01, -1.599628869105870e-01, -1.251316059903174e-01, -1.599628869105869e-01, -1.251316059903173e-01, -9.876896389438438e-03, -1.049348824354010e-02, -1.034789754956506e-02, -1.108258570034579e-02, -5.551535915865807e-02, -5.836809914783173e-02, -5.942917828099384e-03, -5.844027082107428e-03, -8.813755523136929e-03, -5.018385402859428e-03, -8.813755523136929e-03, -5.018385402859428e-03, -6.446685074579283e+00, -6.445234974192240e+00, -6.448496456339432e+00, -6.446983855691199e+00, -6.446836614582514e+00, -6.445331768538362e+00, -6.448388719369196e+00, -6.446918522775768e+00, -6.447574543626132e+00, -6.446107042565655e+00, -6.447574543626132e+00, -6.446107042565655e+00, -2.106768081846701e+00, -2.113514962017234e+00, -2.162620002212216e+00, -2.167710622725278e+00, -2.107506248038984e+00, -2.113155639787005e+00, -2.161366998554930e+00, -2.167169895538645e+00, -2.141543582017094e+00, -2.142527341761388e+00, -2.141543582017094e+00, -2.142527341761388e+00, -6.962964663362605e-01, -6.946378348603895e-01, -8.083681482732682e-01, -8.079004783359732e-01, -5.958886233407181e-01, -6.457696934338448e-01, -6.500270882837718e-01, -7.084846649374772e-01, -7.322032812349516e-01, -6.937012078571365e-01, -7.322032812349516e-01, -6.937012078571365e-01, -1.246637005206984e-01, -1.252052161635028e-01, -1.553302654093797e-01, -1.596410586741083e-01, -1.157348838668470e-01, -1.199877133381653e-01, -2.400630725376097e+00, -2.399958068631566e+00, -1.328695597817064e-01, -1.336386621561758e-01, -1.328695597817064e-01, -1.336386621561758e-01, -4.459060649926849e-03, -4.634036920588468e-03, -5.718082684468739e-03, -5.804655220916838e-03, -4.275098027672144e-03, -4.526915026825823e-03, -8.597612984420124e-02, -8.655767185100346e-02, -4.367149825787939e-03, -5.994881243848709e-03, -4.367149825787940e-03, -5.994881243848711e-03, -7.359426642063860e-01, -7.388410500046485e-01, -7.279945493105806e-01, -7.309712257209644e-01, -7.307547379763205e-01, -7.337223901429002e-01, -7.330802544278688e-01, -7.359909178250365e-01, -7.319146055093843e-01, -7.348530920622727e-01, -7.319146055093843e-01, -7.348530920622727e-01, -7.186088651901855e-01, -7.208699930795801e-01, -5.848933784395993e-01, -5.879424153068999e-01, -6.199743793157138e-01, -6.233069220582289e-01, -6.583657054207730e-01, -6.608589974549566e-01, -6.381751279890886e-01, -6.410156529213492e-01, -6.381751279890886e-01, -6.410156529213492e-01, -8.518570261719793e-01, -8.527039899201986e-01, -2.060723931277440e-01, -2.063778752075044e-01, -2.360533416340653e-01, -2.404058514378902e-01, -3.708835758765985e-01, -3.736462415948857e-01, -2.948873491324295e-01, -2.952662808594201e-01, -2.948873491324295e-01, -2.952662808594203e-01, -4.958873402590601e-01, -5.038731369750563e-01, -5.463616323050898e-02, -5.498352785461861e-02, -7.153040643196432e-02, -7.356915082961255e-02, -3.710171973207693e-01, -3.812938078209215e-01, -1.009435024002600e-01, -1.032419779399311e-01, -1.009435024002600e-01, -1.032419779399311e-01, -1.411150252566677e-02, -1.461982396441813e-02, -1.539052500609772e-03, -1.542533760911579e-03, -3.131122433283943e-03, -3.330074871993605e-03, -9.715002045899457e-02, -9.790967250796893e-02, -4.136020248216640e-03, -5.495492561673535e-03, -4.136020248216635e-03, -5.495492561673530e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_ms2h_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_ms2h", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-6.737566484218207e-09, 0.000000000000000e+00, -6.729163938028633e-09, -6.737373011256768e-09, 0.000000000000000e+00, -6.729024602571749e-09, -6.735674619132966e-09, 0.000000000000000e+00, -6.726895417416080e-09, -6.737804176600152e-09, 0.000000000000000e+00, -6.729620501317572e-09, -6.737473267093474e-09, 0.000000000000000e+00, -6.727743328231147e-09, -6.737473267093474e-09, 0.000000000000000e+00, -6.727743328231147e-09, -1.388149148664900e-05, 0.000000000000000e+00, -1.382212737849819e-05, -1.390046929306662e-05, 0.000000000000000e+00, -1.383008597698364e-05, -1.422565782138031e-05, 0.000000000000000e+00, -1.427142111847126e-05, -1.431661331647578e-05, 0.000000000000000e+00, -1.426884099439771e-05, -1.385290484567715e-05, 0.000000000000000e+00, -1.457763392373441e-05, -1.385290484567715e-05, 0.000000000000000e+00, -1.457763392373441e-05, -7.716627763403733e-03, 0.000000000000000e+00, -7.727663834339548e-03, -7.721399906123109e-03, 0.000000000000000e+00, -7.730903125197340e-03, -7.746052239333386e-03, 0.000000000000000e+00, -7.761899432563659e-03, -7.663110636991975e-03, 0.000000000000000e+00, -7.687800836084011e-03, -7.640812628534497e-03, 0.000000000000000e+00, -7.553310485838442e-03, -7.640812628534497e-03, 0.000000000000000e+00, -7.553310485838442e-03, -2.929245302524129e+00, 0.000000000000000e+00, -1.628747863624580e+00, -2.657652392093771e+00, 0.000000000000000e+00, -1.846414740494827e+00, -4.073620280708470e-03, 0.000000000000000e+00, -3.805936432548423e-03, -1.095740482942754e+00, 0.000000000000000e+00, -1.189325243865327e+00, -2.170996360919208e+00, 0.000000000000000e+00, -1.511025968053745e+00, -2.170996360919211e+00, 0.000000000000000e+00, -1.511025968053747e+00, -3.116075066434293e+00, 0.000000000000000e+00, -3.085635771204978e+00, -3.283172780124906e+00, 0.000000000000000e+00, -3.266448428177225e+00, -1.815245396881374e+00, 0.000000000000000e+00, -1.824949430406960e+00, -2.854308354602561e+00, 0.000000000000000e+00, -2.776828933076158e+00, -3.110872410326226e+00, 0.000000000000000e+00, -7.893453016166038e+00, -3.110872410326235e+00, 0.000000000000000e+00, -7.893453016166055e+00, -1.363534182096680e-06, 0.000000000000000e+00, -1.362235410067936e-06, -1.362780547015458e-06, 0.000000000000000e+00, -1.361510579764949e-06, -1.362455902915317e-06, 0.000000000000000e+00, -1.361462997278779e-06, -1.361849924363994e-06, 0.000000000000000e+00, -1.360843846049853e-06, -1.363932328250783e-06, 0.000000000000000e+00, -1.362002093837256e-06, -1.363932328250783e-06, 0.000000000000000e+00, -1.362002093837256e-06, -2.265993683808420e-04, 0.000000000000000e+00, -2.213913455830241e-04, -1.959608730857567e-04, 0.000000000000000e+00, -1.918769650418816e-04, -2.064878623711610e-04, 0.000000000000000e+00, -2.078100718082701e-04, -1.777797397540621e-04, 0.000000000000000e+00, -1.786291834077749e-04, -2.218286255849793e-04, 0.000000000000000e+00, -2.073628845321549e-04, -2.218286255849793e-04, 0.000000000000000e+00, -2.073628845321549e-04, -4.491586913438685e-02, 0.000000000000000e+00, -4.434372251128861e-02, -3.470389236764657e-02, 0.000000000000000e+00, -3.379193949613497e-02, -3.384628140640757e-02, 0.000000000000000e+00, -5.568834104846564e-02, -3.248098476631203e-02, 0.000000000000000e+00, -4.654970947792315e-02, -3.342911954377033e-02, 0.000000000000000e+00, -4.855731891902845e-02, -3.342911954377031e-02, 0.000000000000000e+00, -4.855731891902842e-02, -1.243019779796150e+00, 0.000000000000000e+00, -1.256865609593293e+00, -1.699449422659792e+00, 0.000000000000000e+00, -1.571701506257824e+00, -1.387538334090886e+00, 0.000000000000000e+00, -1.357000135036821e+00, -3.770567095541244e-04, 0.000000000000000e+00, -3.781347754984438e-04, -1.466793015324178e+00, 0.000000000000000e+00, -1.825406969434415e+00, -1.466793015324178e+00, 0.000000000000000e+00, -1.825406969434413e+00, -4.006955588675334e+00, 0.000000000000000e+00, -3.468160139402581e+00, -3.450282033527172e+00, 0.000000000000000e+00, -3.185566158308797e+00, -1.965298192856042e+01, 0.000000000000000e+00, -2.186251245124146e+01, -2.067061018958293e+00, 0.000000000000000e+00, -1.999781978498593e+00, -9.773158881935093e+00, 0.000000000000000e+00, -9.599514653609837e+00, -9.773158881935066e+00, 0.000000000000000e+00, -9.599514653609832e+00, -1.400063033190222e-02, 0.000000000000000e+00, -1.364279560392156e-02, -1.391451240511813e-02, 0.000000000000000e+00, -1.356732562888570e-02, -1.394687678574915e-02, 0.000000000000000e+00, -1.359377262017404e-02, -1.397064968069175e-02, 0.000000000000000e+00, -1.361979347999300e-02, -1.396229690697224e-02, 0.000000000000000e+00, -1.360904808433282e-02, -1.396229690697224e-02, 0.000000000000000e+00, -1.360904808433283e-02, -2.189598237812906e-02, 0.000000000000000e+00, -2.117557628361762e-02, -2.664774855893793e-02, 0.000000000000000e+00, -2.605654242482820e-02, -2.613168427307273e-02, 0.000000000000000e+00, -2.548529477451348e-02, -2.479360322291062e-02, 0.000000000000000e+00, -2.436469175274834e-02, -2.653423144245146e-02, 0.000000000000000e+00, -2.562197350427205e-02, -2.653423144245148e-02, 0.000000000000000e+00, -2.562197350427207e-02, -3.164998745852559e-02, 0.000000000000000e+00, -3.093088501566680e-02, -8.570081943589583e-01, 0.000000000000000e+00, -8.574197556016453e-01, -6.924102814900462e-01, 0.000000000000000e+00, -6.747844680414297e-01, -2.753762983796560e-01, 0.000000000000000e+00, -2.638657823119966e-01, -4.956089286136395e-01, 0.000000000000000e+00, -4.980639160539983e-01, -4.956089286136396e-01, 0.000000000000000e+00, -4.980639160539982e-01, -1.116625795812778e-01, 0.000000000000000e+00, -1.028466878990327e-01, -1.665618124170187e+00, 0.000000000000000e+00, -1.665305591426644e+00, -1.630571296758469e+00, 0.000000000000000e+00, -1.664984720989182e+00, -3.640412036105270e-01, 0.000000000000000e+00, -3.985986485641893e-01, -2.063245203877749e+00, 0.000000000000000e+00, -2.435492730271160e+00, -2.063245203877750e+00, 0.000000000000000e+00, -2.435492730271162e+00, -2.469194925383306e+00, 0.000000000000000e+00, -2.520667625856996e+00, -1.232886004097171e+01, 0.000000000000000e+00, -2.183866651275547e+01, -7.609093261493102e+00, 0.000000000000000e+00, -8.100369639733955e+00, -2.324328367111361e+00, 0.000000000000000e+00, -2.627023039236692e+00, -2.014917529948508e+01, 0.000000000000000e+00, -9.965604009980916e+00, -2.014917529948512e+01, 0.000000000000000e+00, -9.965604009980948e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_ms2h_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_ms2h", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.699339191941089e-04, 1.692865646446202e-04, 1.699240069137858e-04, 1.692794530521276e-04, 1.698122667288920e-04, 1.691418824346524e-04, 1.699198913324906e-04, 1.692800027582528e-04, 1.699295669812139e-04, 1.691664043548389e-04, 1.699295669812139e-04, 1.691664043548389e-04, 1.335801631089582e-03, 1.314634130865626e-03, 1.342211996628803e-03, 1.317216877024005e-03, 1.450999665281259e-03, 1.466207374388411e-03, 1.487905136664097e-03, 1.471071514900949e-03, 1.323457011613428e-03, 1.574989894924365e-03, 1.323457011613428e-03, 1.574989894924365e-03, 2.546894958129580e-03, 2.634991368449711e-03, 2.526875776419760e-03, 2.619603963869979e-03, 2.191216094021527e-03, 2.216059058272857e-03, 2.577461523930220e-03, 2.657348481821098e-03, 2.606189522509447e-03, 2.524610283721359e-03, 2.606189522509447e-03, 2.524610283721359e-03, 8.844669810106860e-02, 4.909219335099377e-02, 7.992360276216499e-02, 6.185031100297966e-02, 2.633970869075065e-04, 4.615681977597477e-04, 1.102873348956096e-03, 3.863718985682013e-03, 7.007017087513649e-02, 2.327524627006021e-05, 7.007017087513663e-02, 2.327524627005952e-05, 7.632481521688479e-11, 1.669378290844341e-09, 2.845251696646517e-11, 2.997845330712299e-10, 1.378410063532894e-07, 3.861595948062798e-07, 4.979169261633534e-16, 6.745574627227580e-16, 9.320140948559450e-13, 1.748090298237884e-16, 9.320140948456804e-13, 1.748090301375355e-16, 5.017974549550989e-05, 4.731159064718391e-05, 4.957768614476330e-05, 4.673227611089572e-05, 4.899557548632379e-05, 4.646226065136671e-05, 4.852385634677374e-05, 4.597948540882377e-05, 5.074187503986177e-05, 4.716552020016337e-05, 5.074187503986177e-05, 4.716552020016337e-05, 1.016844360865975e-02, 9.873319028223188e-03, 8.682124988762105e-03, 8.434997733127182e-03, 8.852466154281287e-03, 8.975273118366971e-03, 7.435924424554469e-03, 7.529449026150150e-03, 1.020618927101543e-02, 9.231511467725209e-03, 1.020618927101543e-02, 9.231511467725209e-03, 5.713928223308570e-02, 5.582904792042211e-02, 5.616747534902609e-02, 5.458836221703313e-02, 1.948374794347109e-02, 5.555371547998459e-02, 2.100105713764066e-02, 4.852283422055911e-02, 4.673914104860761e-02, 5.969358703102528e-02, 4.673914104860757e-02, 5.969358703102524e-02, 1.950249572519839e-04, 1.688814699418337e-04, 5.246256752429859e-02, 4.790681519675749e-02, 5.766110468666933e-05, 1.499898281967549e-04, 1.475454846897192e-02, 1.478456385994650e-02, 1.608587492576531e-03, 3.624764411371072e-03, 1.608587492576535e-03, 3.624764411371061e-03, 1.071730874250917e-18, 1.369808852193461e-18, 6.062364496588986e-17, 4.181190753744126e-17, 2.894847336063917e-15, 5.381728641084988e-15, 3.661970414018931e-06, 1.648313695838499e-05, 2.562448018204893e-18, 1.333719132832500e-12, 2.562448080381004e-18, 1.333719132859612e-12, 8.658268562126755e-03, 8.387983539061479e-03, 8.341047733606310e-03, 8.089979705316323e-03, 8.454889684902545e-03, 8.194044922498110e-03, 8.544944881777121e-03, 8.286370481848982e-03, 8.505358947324132e-03, 8.243687999150300e-03, 8.505358947324132e-03, 8.243687999150307e-03, 1.803487607185876e-02, 1.733563684711879e-02, 1.154158258520412e-02, 1.132724904730802e-02, 1.425500170469107e-02, 1.395377960495672e-02, 1.625694797290008e-02, 1.608794838047052e-02, 1.642666038347803e-02, 1.575538707037065e-02, 1.642666038347804e-02, 1.575538707037068e-02, 5.902707781268229e-02, 5.813348965039081e-02, 5.422465191057924e-02, 5.537489514714328e-02, 7.818441603353969e-02, 7.853730797088190e-02, 6.434586830246539e-02, 6.193077135618276e-02, 8.560187498859248e-02, 8.593700102095993e-02, 8.560187498859248e-02, 8.593700102095993e-02, 6.446637756260920e-02, 6.009813226532564e-02, 1.524319861763800e-06, 8.792698699188237e-07, 8.663293438926423e-07, 1.402112803280503e-06, 7.623691679675076e-02, 9.643593097728848e-02, 9.808534220507579e-05, 2.768131124129532e-04, 9.808534220507474e-05, 2.768131124129562e-04, 7.410038107549342e-14, 8.585303259735027e-14, 1.179574504500735e-22, 1.226817869610889e-22, 1.659042487196425e-16, 2.993627179834328e-16, 1.479265925200656e-04, 1.106682968844947e-03, 2.116808046600744e-17, 6.196237563641310e-13, 2.116808054566871e-17, 6.196237563677036e-13])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
