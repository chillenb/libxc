
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_ms2h_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_ms2h", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.878379111743813e+01, -1.878390246311160e+01, -1.878438993155582e+01, -1.961937274906744e+01, -1.962002828249921e+01, -2.045658303861729e+01, -3.179137049793851e+00, -3.432529942705273e+00, -3.431819999096566e+00, -3.432417535187175e+00, -3.431996606050560e+00, -3.178704805555697e+00, -5.550715104911613e-01, -6.212488449642453e-01, -6.757930882802000e-01, -6.109272153775622e-01, -5.438275269710832e-01, -6.790137379828866e-01, -1.639275691019932e-01, -1.662343657493436e-01, -7.355865106964006e-01, -1.489270215487436e-01, -1.785254821084478e-01, -1.737645907185977e-01, -7.667863403088551e-03, -6.842114306310023e-03, -3.720018148195423e-02, -4.422564440038138e-03, -6.172011750456527e-03, -6.172011750456527e-03, -4.958680738346471e+00, -4.959096478402457e+00, -4.958697587875524e+00, -4.959064866792891e+00, -4.843895594466902e+00, -4.843990362099042e+00, -1.949444208616502e+00, -1.959838129290272e+00, -1.942109688439136e+00, -1.951186597021728e+00, -1.805296353731012e+00, -1.958735206924330e+00, -5.328097901200116e-01, -6.098051428918955e-01, -5.333332095290639e-01, -5.477216991066575e-01, -5.442029840568489e-01, -5.776287244095913e-01, -1.089712505841661e-01, -1.665733529867461e-01, -1.015883947158188e-01, -1.854477336360792e+00, -1.236935837256705e-01, -1.236935837256705e-01, -2.856837458062618e-03, -4.323389346852876e-03, -3.310620142910971e-03, -5.817134041635525e-02, -4.158544625986103e-03, -4.158544625986104e-03, -5.562523033183104e-01, -5.549872701445649e-01, -5.484059201273185e-01, -5.531498579684075e-01, -5.495059724833385e-01, -5.525305934476111e-01, -5.414334439926207e-01, -4.481758631827359e-01, -4.676547418241744e-01, -5.150618580485448e-01, -5.063844273607951e-01, -4.805024393516986e-01, -6.116303564909027e-01, -2.327863685103369e-01, -2.452700365052048e-01, -3.190269695580931e-01, -3.059176451374022e-01, -2.786296876957742e-01, -4.466340345958252e-01, -2.749885653321026e-02, -5.698026167503875e-02, -3.298506666018982e-01, -8.714589545996583e-02, -8.714589545996583e-02, -6.986828906737608e-03, -1.155681832675000e-03, -1.570241776974911e-03, -5.574430282870071e-02, -3.819014512869720e-03, -2.796064991939875e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_ms2h_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_ms2h", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.821505409982020e+01, -2.821533804475368e+01, -2.821519233408682e+01, -2.821543828680965e+01, -2.821563477711596e+01, -2.821607142447603e+01, -2.821407615615172e+01, -2.632491499671821e+01, -2.821513774775307e+01, -2.632548993139638e+01, -2.632579630843935e+01, -2.632548993139637e+01, -4.203286981786978e+00, -4.006417784076655e+00, -4.203325655572686e+00, -4.203230436232327e+00, -4.204059721387633e+00, -4.204235500746248e+00, -4.204146959129314e+00, -4.204206632726260e+00, -4.202527255210579e+00, -4.204948626610349e+00, -4.005855894214682e+00, -4.204948626610349e+00, -7.520325766548188e-01, -7.559549410055498e-01, -7.505963789620095e-01, -8.049734983875091e-01, -7.852135017031787e-01, -7.800264439259071e-01, -7.877868032165319e-01, -7.377190685623783e-01, -7.623771798230179e-01, -7.063600883000495e-01, -8.116482501338029e-01, -7.623382061347996e-01, -1.877775741083326e-01, -2.126107829950359e-01, -1.902597766288222e-01, -2.160146458800367e-01, -9.372870865245854e-01, -8.804372968801147e-01, -1.705727820909813e-01, -1.703674116331714e-01, -2.148881861503821e-01, -1.368151428112431e-01, -2.148881861503820e-01, -1.041266616653109e-01, -9.877081736567246e-03, -1.049359452119848e-02, -6.696465623474010e-03, -1.108284253338341e-02, -3.723556555999954e-02, -5.865068940109609e-02, -5.943266535662161e-03, -5.844307061167528e-03, -8.814130906522579e-03, -5.019008570470536e-03, -8.814130906522581e-03, -5.019008570470537e-03, -6.448285985243369e+00, -6.446744945895137e+00, -6.450061578483959e+00, -6.448460238333444e+00, -6.448399169463663e+00, -6.446814345259178e+00, -6.449922294273599e+00, -6.448372187780668e+00, -6.812421451103032e+00, -6.447604653085381e+00, -6.449184427710141e+00, -6.810795755504763e+00, -2.356578431552930e+00, -2.356625627271635e+00, -2.375620473375809e+00, -2.375095358801993e+00, -2.340575977307557e+00, -2.345184884195237e+00, -2.356989905090133e+00, -2.361839874441878e+00, -2.379300517795058e+00, -2.265357033997241e+00, -2.379300517795059e+00, -2.367978614318377e+00, -7.168995972596942e-01, -6.675085551549614e-01, -7.858694586605064e-01, -7.866663692031444e-01, -6.446162048910723e-01, -6.708978854910357e-01, -6.765663297756870e-01, -7.009666526059760e-01, -7.481623807812346e-01, -6.638940318945091e-01, -7.481623807812348e-01, -7.089539115707716e-01, -1.304923094666464e-01, -1.314743985555192e-01, -1.902252305871111e-01, -2.159939812298340e-01, -1.206927776120120e-01, -1.252860498567814e-01, -2.350770276344318e+00, -2.349747108420515e+00, -1.417741502993891e-01, -1.447564295425868e-01, -1.417741502993891e-01, -1.447564295425867e-01, -2.881852715177813e-03, -4.634573886080229e-03, -5.718718735890973e-03, -5.805347186690091e-03, -4.275449163617826e-03, -4.527376382721835e-03, -8.804440282871408e-02, -6.234351224162479e-02, -4.368154401992504e-03, -5.995031225930196e-03, -4.368154401992504e-03, -5.995031225930218e-03, -7.349764183221904e-01, -7.378903535582136e-01, -7.283249807475095e-01, -7.312690327803365e-01, -7.426065282868107e-01, -7.451414046514118e-01, -7.413817743735989e-01, -7.354979122550662e-01, -7.419413299161777e-01, -7.445252737217473e-01, -7.419413299161777e-01, -7.345415665699337e-01, -7.149175013481318e-01, -7.173622985933229e-01, -5.970603781683197e-01, -5.576072383979832e-01, -6.297922252259598e-01, -6.207713945940645e-01, -6.635341968393557e-01, -6.659446749361055e-01, -6.463042374167568e-01, -6.488278231765590e-01, -6.463042374167568e-01, -6.817985332414407e-01, -8.208512557094333e-01, -8.755084065480978e-01, -2.647215101492758e-01, -2.661227575555271e-01, -2.925838480747459e-01, -3.172593939829438e-01, -3.990261962341543e-01, -4.196309815815037e-01, -3.626593348603909e-01, -3.625520567508114e-01, -3.626593348603908e-01, -3.436125871397142e-01, -5.462756418484939e-01, -5.505207519639242e-01, -3.653905711503690e-02, -3.678906858543828e-02, -7.220401563794264e-02, -7.430460850525560e-02, -4.018847548396791e-01, -4.094116427207655e-01, -1.041667257202860e-01, -1.073717538568754e-01, -1.041667257202857e-01, -1.073717538568755e-01, -9.141223851167633e-03, -9.472633529731793e-03, -1.539112350124394e-03, -1.542629983506739e-03, -2.023400387182758e-03, -2.152049648458141e-03, -7.371818679996218e-02, -7.492662673146318e-02, -4.137073961458498e-03, -5.495612794914425e-03, -4.137073961458478e-03, -3.553351848752757e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_ms2h_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_ms2h", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-3.117195358272116e-08, 0.000000000000000e+00, -3.117495972112389e-08, -3.117196888258647e-08, 0.000000000000000e+00, -3.117496944513618e-08, -3.117178060401507e-08, 0.000000000000000e+00, -3.117476038284386e-08, -3.117163724101069e-08, 0.000000000000000e+00, -4.501020264712597e-09, -3.117198546208167e-08, 0.000000000000000e+00, -4.500771014007197e-09, -4.500504069049479e-09, 0.000000000000000e+00, -4.500771014007197e-09, -5.258863528742271e-06, 0.000000000000000e+00, -1.442426926256048e-05, -5.259272491314943e-06, 0.000000000000000e+00, -5.259047414810121e-06, -5.267303935337716e-06, 0.000000000000000e+00, -5.268517408393391e-06, -5.262611675420595e-06, 0.000000000000000e+00, -5.262328671279512e-06, -5.261323651660512e-06, 0.000000000000000e+00, -5.269156347452903e-06, -1.443452863713188e-05, 0.000000000000000e+00, -5.269156347452903e-06, -9.816988582552805e-03, 0.000000000000000e+00, -9.690415321196062e-03, -9.870537656116106e-03, 0.000000000000000e+00, -2.828656421718567e-03, -2.883849838290544e-03, 0.000000000000000e+00, -2.925326526852235e-03, -2.917416636267305e-03, 0.000000000000000e+00, -1.043774949202667e-02, -9.416887675358624e-03, 0.000000000000000e+00, -1.197054823262651e-02, -2.768496696094557e-03, 0.000000000000000e+00, -3.060252017888453e-03, -2.307860354358551e+00, 0.000000000000000e+00, -4.751432249158102e-01, -2.199596847432241e+00, 0.000000000000000e+00, -4.617667322238501e-01, -1.068423472700733e-03, 0.000000000000000e+00, -4.819567166991938e-03, -5.753366377736601e-01, 0.000000000000000e+00, -6.380176146871051e-01, -4.156173052088019e-01, 0.000000000000000e+00, -6.644631686344121e-01, -4.156173052088022e-01, 0.000000000000000e+00, -2.333881549641340e+01, -3.038083233753765e+00, 0.000000000000000e+00, -3.049360345108147e+00, -1.362823509376541e+06, 0.000000000000000e+00, -3.188856117929778e+00, -1.425610766502501e+03, 0.000000000000000e+00, -1.452560513083878e+00, -2.226587176108151e+00, 0.000000000000000e+00, -2.249423606494937e+00, -2.887053544358829e+00, 0.000000000000000e+00, -4.945629344593400e+00, -2.887053544358829e+00, 0.000000000000000e+00, -4.945629344590565e+00, -1.318086962700100e-06, 0.000000000000000e+00, -1.319355671475289e-06, -1.317903751173328e-06, 0.000000000000000e+00, -1.319178804755405e-06, -1.318082946648679e-06, 0.000000000000000e+00, -1.319354080033965e-06, -1.317925287644155e-06, 0.000000000000000e+00, -1.319192941852635e-06, -8.267402595991015e-06, 0.000000000000000e+00, -1.319266312918546e-06, -1.317988868982478e-06, 0.000000000000000e+00, -8.275869885820302e-06, -4.909109124893282e-05, 0.000000000000000e+00, -4.917214778604376e-05, -4.834614477866535e-05, 0.000000000000000e+00, -4.844589460491285e-05, -4.966737045964062e-05, 0.000000000000000e+00, -4.958406117982382e-05, -4.904114756555191e-05, 0.000000000000000e+00, -4.894277104654311e-05, -4.824149227860530e-05, 0.000000000000000e+00, -1.426475540428383e-04, -4.824149227860530e-05, 0.000000000000000e+00, -4.873990543050315e-05, -7.222960326887386e-03, 0.000000000000000e+00, -1.678586304221381e-02, -5.705672009281004e-03, 0.000000000000000e+00, -5.718931900251982e-03, -9.636651541732520e-03, 0.000000000000000e+00, -8.763491869880404e-03, -8.985882507041697e-03, 0.000000000000000e+00, -8.094938657992237e-03, -6.372191156172453e-03, 0.000000000000000e+00, -1.814369758369220e-02, -6.372191156172439e-03, 0.000000000000000e+00, -7.626944204512411e-03, -8.128200859728721e-01, 0.000000000000000e+00, -8.040038072196917e-01, -2.133182554057524e+00, 0.000000000000000e+00, -3.178661141175690e-01, -8.809176504364573e-01, 0.000000000000000e+00, -8.909659599394913e-01, -6.529385322078639e-05, 0.000000000000000e+00, -6.541940599085051e-05, -8.972754835910706e-01, 0.000000000000000e+00, -1.064314011834312e+00, -8.972754835910615e-01, 0.000000000000000e+00, -1.064314011834316e+00, -3.973150756678273e+07, 0.000000000000000e+00, -1.490560584232235e+00, -2.112125854065555e+00, 0.000000000000000e+00, -1.861774569373508e+00, -1.520833996812028e+01, 0.000000000000000e+00, -1.669296637733776e+01, -1.314058073082949e+00, 0.000000000000000e+00, -1.814526082633845e+02, -2.866205049605031e+00, 0.000000000000000e+00, -9.098034871097449e+00, -2.866205049603325e+00, 0.000000000000000e+00, -9.098034870962508e+00, -8.540234575833059e-03, 0.000000000000000e+00, -8.414405913558558e-03, -8.563648612712639e-03, 0.000000000000000e+00, -8.438453595427668e-03, -3.002542695503572e-02, 0.000000000000000e+00, -2.906219519813869e-02, -2.610351151291200e-02, 0.000000000000000e+00, -8.423217457324649e-03, -2.806653417796946e-02, 0.000000000000000e+00, -2.718804090878061e-02, -2.806653417796946e-02, 0.000000000000000e+00, -8.426600226031498e-03, -9.494966748413047e-03, 0.000000000000000e+00, -9.376857425673004e-03, -1.414235824164182e-02, 0.000000000000000e+00, -3.039580202176826e-02, -1.265396405279234e-02, 0.000000000000000e+00, -4.593906040430205e-02, -1.131093765653747e-02, 0.000000000000000e+00, -1.116272465493751e-02, -1.197512186342943e-02, 0.000000000000000e+00, -1.181669970056855e-02, -1.197512186342942e-02, 0.000000000000000e+00, -7.154079841016552e-02, -4.623192998535386e-03, 0.000000000000000e+00, -3.040340328660429e-02, -1.811956767311474e-01, 0.000000000000000e+00, -1.786595253786241e-01, -4.145009224238551e-01, 0.000000000000000e+00, -1.095896415283105e-01, -1.467411988585488e-01, 0.000000000000000e+00, -4.849025294923154e-02, -7.645243027642713e-02, 0.000000000000000e+00, -7.679466517588322e-02, -7.645243027642748e-02, 0.000000000000000e+00, -2.435980389359274e-01, -1.858800597370963e-02, 0.000000000000000e+00, -1.830954258272619e-02, -1.537457724144517e+03, 0.000000000000000e+00, -1.496089006981855e+03, -1.200476307040775e+00, 0.000000000000000e+00, -1.235256104331085e+00, -6.254380199089428e-02, 0.000000000000000e+00, -6.186855524333413e-02, -1.430188935764235e+00, 0.000000000000000e+00, -1.655666911775886e+00, -1.430188935764319e+00, 0.000000000000000e+00, -1.655666911775821e+00, -3.924685214299815e+05, 0.000000000000000e+00, -3.403605892283330e+05, -2.429039529165797e+00, 0.000000000000000e+00, -2.418359203667749e+00, -1.634913779406459e+08, 0.000000000000000e+00, -1.277653307846546e+08, -9.285395984228644e+01, 0.000000000000000e+00, -8.701836158149389e+01, -7.396704781104080e+00, 0.000000000000000e+00, -9.433214153855724e+00, -7.396704781394010e+00, 0.000000000000000e+00, -1.718974057415427e+07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_ms2h_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_ms2h", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.858613321775331e-03, 1.858894526051137e-03, 1.858648276186936e-03, 1.858919801536385e-03, 1.858743485807815e-03, 1.859060446379773e-03, 1.858351542779091e-03, -4.464186430236849e-20, 1.858636064440728e-03, 1.630452919131932e-19, -4.846123852036748e-19, 1.630452919131932e-19, -4.082257860354877e-18, 7.929732714528617e-04, 8.219262156077499e-18, 2.994797521588415e-18, -3.825082486922406e-18, -3.810116398416975e-18, -8.252836878827288e-19, 1.061348108606986e-18, 2.716049996975285e-18, 4.234540685005990e-18, 7.934253548250596e-04, 4.234540685005990e-18, 1.281774204571448e-03, 1.373883001483680e-03, 1.256566577243774e-03, -5.235885694707180e-17, 4.440331918467837e-17, 2.714224426732104e-17, -3.981197035984535e-17, 1.111802427911819e-03, 1.428492034949736e-03, 7.166160550577404e-04, -1.305558032920811e-17, -3.197618444737983e-18, 1.210725123441957e-03, -8.914068652158641e-17, 1.353352383527196e-03, -2.878045074875985e-18, -4.061395559476555e-17, 3.299509614049112e-04, 8.535402587083367e-17, -2.171325519275141e-17, -8.691362634457460e-17, -1.250583591629090e-16, -6.568135035413396e-17, 1.273984726729812e-05, 1.074803958423955e-17, -1.224829141872536e-17, 6.689710623137559e-11, -4.143100889423035e-18, 1.190604135607928e-07, 2.006295578067420e-17, 2.344984483163333e-17, 7.041007337539498e-18, 3.045508158590728e-17, -1.763449149214567e-17, 3.045508158590728e-17, -1.822260708122811e-17, 1.149953372617945e-19, 7.163159206470606e-19, -2.890186219045277e-19, -1.774110205243269e-19, -2.117971000410931e-19, -1.540045494935635e-18, 5.054578569374843e-19, -7.959368619180913e-19, 7.320213515333664e-03, -4.167938202220835e-20, -7.749362010425999e-19, 7.322381307715940e-03, -7.831421385745928e-18, 9.900855078410330e-18, 2.001108684084694e-18, 1.218262132888158e-17, -2.696962654381320e-18, 4.277537481783560e-18, -8.747690214139324e-18, 5.938216368858488e-18, -1.943301521179467e-18, 1.375830155043286e-03, -1.943301521179467e-18, 7.833706275357711e-19, 2.927138347688848e-17, 3.279554036636248e-03, -8.835381270826082e-19, 1.287838069970663e-18, 4.576731128736414e-17, 2.882937646141057e-17, 4.490964174337646e-18, -2.598591121312311e-18, 1.060782395543734e-17, 4.455512939163552e-03, -1.432938058784361e-17, -2.018564704502043e-17, 2.353452798592874e-16, 2.150673441231537e-16, 3.633279486142626e-04, 1.517793355275973e-16, 8.534712265930776e-17, 1.357940991804238e-16, -1.374630550275833e-18, 1.795322233008730e-18, 3.709329109720454e-17, -1.399253577785220e-16, -4.984756192122784e-17, -9.875911384548948e-17, 3.621955548893995e-13, 5.613116103527059e-18, 3.828045608465558e-18, -8.865067496994752e-18, -1.932525751976970e-17, -1.362605674590568e-17, -3.456299528513870e-16, 2.170417030747870e-06, -1.602983498997982e-18, 3.567770039811850e-17, -1.835696888587090e-18, -1.195630555350834e-17, 1.551223490444093e-18, 3.202867302498019e-19, 8.441719305213072e-18, 5.090276452006991e-18, 3.320308707887712e-02, 3.229779688889296e-02, 2.737926694587076e-02, -3.289233272064368e-18, 3.030735255184870e-02, 2.949107002197290e-02, 3.030735255184870e-02, -3.382864239728588e-18, 3.680478596242393e-19, -8.771318515613676e-20, 1.233687561057716e-17, 1.008980207313599e-03, -1.165938044629527e-17, 2.407643730247086e-02, -1.541948238617543e-17, -1.338950821332921e-17, 2.625422411661327e-18, 3.320165797919334e-17, -1.663354596904398e-18, 5.942396467700674e-02, 1.992174300840980e-18, 5.374072524420920e-02, 6.735897777193270e-17, -6.522750000503240e-17, 2.273048268344312e-03, -3.137122927288249e-17, 7.402244015713785e-03, -4.076766018777497e-17, -2.047395091137697e-17, 6.646902327177228e-17, 3.987327632423925e-17, 5.172945129871631e-03, 2.995836822511724e-17, -1.078854897540631e-17, 1.169701926134797e-07, 1.174260279957873e-07, -7.417711060863886e-17, 6.445277462501052e-17, -8.893132667514964e-17, -4.349049622858502e-17, 2.048599150422169e-17, 2.064056436922379e-16, 2.507188314981414e-16, -4.575380273568718e-18, 1.007335254445459e-10, 1.177806434287147e-10, -2.514121404658906e-19, -3.013444932086944e-18, 5.238132440307858e-13, 7.774211072178117e-13, 7.509401645902470e-06, 9.695318584371115e-06, -1.338725471394885e-17, 3.449554735509853e-17, 2.019363047932626e-17, 1.454172040248887e-11])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
