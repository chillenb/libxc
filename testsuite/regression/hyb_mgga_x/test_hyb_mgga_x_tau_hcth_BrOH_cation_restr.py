
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_tau_hcth_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_tau_hcth", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.766019613552443e+01, -1.766022681491763e+01, -1.766040802853647e+01, -1.765995066019077e+01, -1.766018393228130e+01, -1.766018393228130e+01, -2.907731547079647e+00, -2.907716979065055e+00, -2.907457330867943e+00, -2.908531107980429e+00, -2.907817242888767e+00, -2.907817242888767e+00, -5.740681393694340e-01, -5.738784283034702e-01, -5.718680605426819e-01, -5.756064900686209e-01, -5.742496641510024e-01, -5.742496641510024e-01, -1.891635755423624e-01, -1.878034543022852e-01, -6.665119055716884e-01, -1.868912638186254e-01, -1.863040433609781e-01, -1.863040433609781e-01, -1.421944092719931e-02, -1.496250626459071e-02, -7.873175924257043e-02, -8.223099791446404e-03, -1.032795789951871e-02, -1.032795789951871e-02, -4.265286205251759e+00, -4.265291054690193e+00, -4.265293170047445e+00, -4.265297295616247e+00, -4.265284396848666e+00, -4.265284396848666e+00, -1.728497494298354e+00, -1.738257214623481e+00, -1.727763609781011e+00, -1.736258107183646e+00, -1.734387093984937e+00, -1.734387093984937e+00, -4.882282386007697e-01, -5.161779409406926e-01, -4.537959508030908e-01, -4.591234314021829e-01, -4.940692818271182e-01, -4.940692818271182e-01, -1.655109050704492e-01, -2.245408659952182e-01, -1.570844514583413e-01, -1.555312785545218e+00, -1.710923651047823e-01, -1.710923651047824e-01, -6.345915233183089e-03, -8.038623802117083e-03, -6.144879347348930e-03, -1.172916510596310e-01, -7.402743638843298e-03, -7.402743638843298e-03, -4.756340832825369e-01, -4.748203801824887e-01, -4.750883510134054e-01, -4.753271118816734e-01, -4.752056638028562e-01, -4.752056638028562e-01, -4.621059566196081e-01, -4.237753713736811e-01, -4.333866696548118e-01, -4.424949853314560e-01, -4.375784077810478e-01, -4.375784077810478e-01, -5.417177219355070e-01, -2.459578632092807e-01, -2.586554400742643e-01, -3.004810203985634e-01, -2.735263235587674e-01, -2.735263235587674e-01, -3.895401645459086e-01, -7.582333898948461e-02, -9.969334750930901e-02, -2.843448546157033e-01, -1.366429824300703e-01, -1.366429824300703e-01, -2.003718086991815e-02, -2.149939705891610e-03, -4.511869450811339e-03, -1.316101931915115e-01, -6.850094855644593e-03, -6.850094855644585e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_tau_hcth_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_tau_hcth", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.188356480280754e+01, -2.188366153191544e+01, -2.188404884990728e+01, -2.188261040100146e+01, -2.188337016895376e+01, -2.188337016895376e+01, -3.591500458232248e+00, -3.591512451072554e+00, -3.591809731513842e+00, -3.591271737139229e+00, -3.591269214512615e+00, -3.591269214512615e+00, -6.696308289098896e-01, -6.678435154631379e-01, -6.164303626321751e-01, -6.254057897651374e-01, -6.248346721061113e-01, -6.248346721061113e-01, -8.671306096987280e-02, -9.314463637190765e-02, -7.787784871712455e-01, -8.294931976681416e-02, -7.143720967404374e-02, -7.143720967404377e-02, -1.888541603839993e-02, -1.986156502090117e-02, -9.497430049339925e-02, -1.095053119025353e-02, -1.374022532712933e-02, -1.374022532712932e-02, -5.425843011546501e+00, -5.428893025215154e+00, -5.425980958206372e+00, -5.428673601153020e+00, -5.427391226263490e+00, -5.427391226263490e+00, -1.891363480878776e+00, -1.914305785807585e+00, -1.861547072991181e+00, -1.883250362400425e+00, -1.917445114354113e+00, -1.917445114354113e+00, -6.013647151489776e-01, -6.765664260093630e-01, -5.591766442416315e-01, -5.949599158868057e-01, -6.126375222979107e-01, -6.126375222979107e-01, -1.254371505007319e-01, -8.220848261904641e-02, -1.262218999413665e-01, -2.034601453268518e+00, -9.524287136529105e-02, -9.524287136529079e-02, -8.454044912644834e-03, -1.070437863676638e-02, -8.177737470000926e-03, -1.184708169146844e-01, -9.851914262715349e-03, -9.851914262715349e-03, -6.313902382212762e-01, -6.244698311145651e-01, -6.271301173730582e-01, -6.291208076693837e-01, -6.281456741412637e-01, -6.281456741412637e-01, -6.151081059036103e-01, -4.915889752334048e-01, -5.193648284304332e-01, -5.579696542205367e-01, -5.368767495564645e-01, -5.368767495564645e-01, -7.076336322825791e-01, -1.034445322553245e-01, -1.792296504500157e-01, -3.469633375751684e-01, -2.706382550792494e-01, -2.706382550792494e-01, -4.562005837869886e-01, -9.262790029394784e-02, -1.130567893725721e-01, -3.411756086271789e-01, -1.136412211285440e-01, -1.136412211285448e-01, -2.653041592782115e-02, -2.866002277115867e-03, -6.012070517426937e-03, -1.157690676660015e-01, -9.117066609385249e-03, -9.117066609385301e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_tau_hcth_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_tau_hcth", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.191443146981152e-09, -4.191363629270789e-09, -4.191061605298743e-09, -4.192244283311488e-09, -4.191617281137078e-09, -4.191617281137078e-09, -4.770445556469788e-06, -4.770729849602228e-06, -4.778273990905026e-06, -4.776949244966877e-06, -4.777621000240959e-06, -4.777621000240959e-06, -3.320831399105735e-03, -3.347035233777237e-03, -4.145393822111505e-03, -3.955354164048588e-03, -3.980010409462109e-03, -3.980010409462109e-03, -1.206676470041327e+00, -1.132426540221854e+00, -1.937830921362567e-03, -2.398488115089180e+00, -1.980737476167636e+00, -1.980737476167637e+00, -1.092354236049604e+01, -1.153719881232487e+01, -6.139924773530025e+00, -9.940176394343990e+00, -1.262241174302028e+01, -1.262241174302245e+01, -1.066574800612592e-06, -1.062521344864815e-06, -1.066397998583628e-06, -1.062819537452179e-06, -1.064515650815990e-06, -1.064515650815990e-06, -5.335832920406836e-05, -5.198957274275462e-05, -5.510632226175771e-05, -5.376711058118343e-05, -5.183987001471401e-05, -5.183987001471401e-05, -6.868115476058329e-03, -3.643096095395939e-03, -8.430624176486724e-03, -6.500998252888517e-03, -6.461061777846945e-03, -6.461061777846945e-03, -3.487426120297667e+00, -1.026102705835434e+00, -3.924487729392002e+00, -4.506347978041487e-05, -3.774977727357916e+00, -3.774977727357921e+00, -1.310014434512086e+01, -1.169852554817726e+01, -7.344530611350216e+01, -6.357943541901898e+00, -3.417865804719519e+01, -3.417865804720967e+01, -4.645296041663912e-03, -5.132412651360233e-03, -4.911069883157280e-03, -4.768443751128603e-03, -4.834907346670891e-03, -4.834907346670891e-03, -4.941711448686004e-03, -1.456730577275824e-02, -1.286861238804803e-02, -9.677672226521244e-03, -1.151065756338029e-02, -1.151065756338029e-02, -3.113019589136942e-03, -4.692747891450256e-01, -2.108098675051379e-01, -4.944398704889472e-02, -9.918631682409854e-02, -9.918631682409851e-02, -1.831788368335497e-02, -5.636991964538483e+00, -5.413116306946460e+00, -5.959628103648317e-02, -6.498288026602036e+00, -6.498288026602021e+00, -8.789259462890566e+00, -5.744203579969059e+01, -2.779410957985025e+01, -6.745427098640271e+00, -4.317230797697277e+01, -4.317230797695584e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_tau_hcth_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_tau_hcth", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-4.615211012253530e-06, -4.616287421822600e-06, -4.618773709854322e-06, -4.602753734376717e-06, -4.611486746907582e-06, -4.611486746907582e-06, 9.474116965324721e-05, 9.470190029156038e-05, 9.395923880623683e-05, 9.737237909829737e-05, 9.570598144651491e-05, 9.570598144651491e-05, -2.566176164401420e-04, -2.707636396455328e-04, -6.789046819386872e-04, -5.933218415210445e-04, -6.044547222827638e-04, -6.044547222827638e-04, -2.548748249410009e-03, -3.370671435010008e-03, -2.245001517514535e-04, 6.566389324426319e-03, 4.028520328470473e-03, 4.028520328470506e-03, 7.002261760221290e-08, 9.613981393433712e-08, 1.391656757087998e-04, 2.838847235137086e-09, 1.458656089058205e-08, 1.458656089058204e-08, 3.550315853640179e-05, 3.835807555056360e-05, 3.565951741669633e-05, 3.817798200916063e-05, 3.692917035041185e-05, 3.692917035041185e-05, 9.096891251586980e-04, 1.012335341629079e-03, 8.674545778848924e-04, 9.687334866917205e-04, 9.814666079190721e-04, 9.814666079190721e-04, 3.784318345932927e-04, -5.193279909083474e-04, 7.417219542324232e-04, -1.260449207933967e-03, -7.181726936393844e-05, -7.181726936393844e-05, 4.519778803405876e-03, 4.939292845830686e-03, 3.765582638881810e-03, -3.627397210415769e-04, 8.987391686346860e-03, 8.987391686346930e-03, 4.472559786330934e-10, 2.106493646101739e-09, 1.264927112298602e-08, 1.283515126455185e-03, 7.630417387234135e-09, 7.630417452372921e-09, 1.806378410923054e-03, 2.174960498085039e-03, 2.280394984688492e-03, 2.185851133234240e-03, 2.255949828426434e-03, 2.255949828426434e-03, 1.478665137358620e-03, 5.473752312262866e-03, 1.847544560179706e-03, -3.484452955832544e-04, 1.460602411628844e-04, 1.460602411628844e-04, -8.733153766094157e-04, -1.046316688433512e-03, -3.053038290102860e-03, 3.120355953743059e-03, 9.799771303353956e-04, 9.799771303354021e-04, 4.170100109625183e-03, 1.168765508791156e-04, 3.954695687765920e-04, 3.588705188844548e-03, 4.204242904370207e-03, 4.204242904370456e-03, 1.288935469538809e-07, 3.901414622433820e-12, 7.713146430876356e-10, 3.920702397913699e-03, 8.807614260861077e-09, 8.807614320760931e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
