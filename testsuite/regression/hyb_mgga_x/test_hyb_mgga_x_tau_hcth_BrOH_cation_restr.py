
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_tau_hcth_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_tau_hcth", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.718074251368932e+01, -1.718079019086296e+01, -1.718101703621875e+01, -1.718030737162108e+01, -1.718067710494747e+01, -1.718067710494747e+01, -2.800425739868972e+00, -2.800431033984517e+00, -2.800619463628201e+00, -2.800797107653050e+00, -2.800487050730602e+00, -3.060869179132181e+00, -5.402996503552845e-01, -6.560377941802602e-01, -6.639383440023030e-01, -6.570111158319822e-01, -6.586026558727790e-01, -6.586026558727790e-01, -1.934616835654105e-01, -1.928198878373730e-01, -6.298737036656115e-01, -2.026560952245468e-01, -1.991964139894914e-01, -1.991964139894915e-01, -1.421967190065677e-02, -1.496301193796229e-02, -7.914370353757486e-02, -8.223653683987841e-03, -1.032872198421029e-02, -1.032872198421029e-02, -4.265928061893484e+00, -4.265922998010164e+00, -4.265921549290077e+00, -4.188495525876979e+00, -4.265927890826061e+00, -4.265927890826061e+00, -1.576283395605922e+00, -1.587670496134380e+00, -1.567969077386002e+00, -1.578035531981078e+00, -1.586595605157078e+00, -1.758988332577397e+00, -5.005572841119980e-01, -5.270694401252736e-01, -4.734026737364790e-01, -4.810532442658675e-01, -5.055936178983830e-01, -4.797460895841803e-01, -7.348328894355483e-02, -2.311299507353249e-01, -6.798066263720942e-02, -1.622144056940254e+00, -1.779221225936470e-01, -1.779221225936470e-01, -2.162493242676441e-03, -8.039800144224087e-03, -6.145594374017890e-03, -4.572151498384553e-02, -2.523912678572095e-03, -7.404153056633929e-03, -4.765994189972032e-01, -4.758411532338762e-01, -4.726109569633267e-01, -4.763038573798274e-01, -4.761902732172659e-01, -4.761902732172659e-01, -4.639370889232239e-01, -4.254902186493338e-01, -4.356606731379133e-01, -4.449081576806352e-01, -4.401405511101396e-01, -4.238483055832539e-01, -5.569533389143096e-01, -1.764947281873684e-01, -2.665370198676230e-01, -2.800043798294345e-01, -2.819932025047661e-01, -2.819932025047661e-01, -3.650326995770823e-01, -7.599914887923255e-02, -1.007041941841035e-01, -2.935030530096970e-01, -5.821922335933844e-02, -1.405497556016291e-01, -2.005373421304648e-02, -2.150074187320565e-03, -4.511954792117545e-03, -1.337378354465417e-01, -6.851044908937763e-03, -6.851044908937754e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_tau_hcth_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_tau_hcth", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.289487557088900e+01, -2.289494075575865e+01, -2.289524972236186e+01, -2.289427959564751e+01, -2.289478519382652e+01, -2.289478519382652e+01, -3.729127112966768e+00, -3.729132344713098e+00, -3.729335609173645e+00, -3.729591357402117e+00, -3.729176417763773e+00, -3.406283360176786e+00, -7.205960175703869e-01, -4.631920988057015e-01, -3.937984122189335e-01, -4.233313856767631e-01, -4.165177301584689e-01, -4.165177301584689e-01, -8.091723270086087e-02, -8.549919695546516e-02, -8.403592107748987e-01, -9.964572210869310e-02, -7.273641335290025e-02, -7.273641335290039e-02, -1.888633704113481e-02, -1.986358053354406e-02, -9.649950733887848e-02, -1.095274466419488e-02, -1.374327640863230e-02, -1.374327640863230e-02, -5.424345991715457e+00, -5.427419229178115e+00, -5.424515367814973e+00, -5.585885906326764e+00, -5.425890428483491e+00, -5.425890428483491e+00, -2.099955442067655e+00, -2.114925431673726e+00, -2.089036865497718e+00, -2.102266609382409e+00, -2.113504842406607e+00, -1.873206640462443e+00, -5.850661979309568e-01, -6.526788384364550e-01, -5.374420088298939e-01, -5.628649930786289e-01, -5.955598616174720e-01, -6.386917130338549e-01, -9.798672200630369e-02, -8.299200304185637e-02, -9.064744486912941e-02, -1.920733866554181e+00, -1.068648559671077e-01, -1.068648559671073e-01, -2.883324323875323e-03, -1.070907967930151e-02, -8.180593499190829e-03, -6.096331766522652e-02, -3.365216907395095e-03, -9.857544317557122e-03, -6.299925680036604e-01, -6.225462492834745e-01, -6.305183010134532e-01, -6.275740159731502e-01, -6.265220700640374e-01, -6.265220700640374e-01, -6.125167757510925e-01, -4.897114310719443e-01, -5.159346452945767e-01, -5.526080627473934e-01, -5.320434495503927e-01, -5.645735969267400e-01, -6.765342831617739e-01, -2.354739462676716e-01, -1.617067611766587e-01, -3.730450397187769e-01, -2.493922795064983e-01, -2.493922795064983e-01, -4.860480976455346e-01, -9.328404037534364e-02, -1.166268779320360e-01, -3.304018929414014e-01, -7.763087362310069e-02, -1.242762311169651e-01, -2.659630143827341e-02, -2.866540141601763e-03, -6.012411716033401e-03, -1.218083042384159e-01, -9.120861746173527e-03, -9.120861746173587e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_tau_hcth_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_tau_hcth", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.035747467212590e-09, -2.035711333300737e-09, -2.035549107421384e-09, -2.036085930535922e-09, -2.035804830886284e-09, -2.035804830886284e-09, -4.503300709495230e-06, -4.502891379620171e-06, -4.491730522061900e-06, -4.494624523259728e-06, -4.496183535855593e-06, -5.583609752225700e-06, -3.534822743302442e-03, -5.006644416862125e-03, -5.862555433642880e-03, -5.555157447383933e-03, -5.623084239644313e-03, -5.623084239644313e-03, -1.214597512407531e+00, -1.146470752248087e+00, -1.789420837550371e-03, -2.024667045382925e+00, -1.853133507726990e+00, -1.853133507726990e+00, -1.074269942063280e+01, -1.118945566214851e+01, -4.964808780906320e+00, -7.900574175962740e+00, -1.098934204159270e+01, -1.098934204159270e+01, -1.069071169276405e-06, -1.064992381592564e-06, -1.068842584750561e-06, -5.640514742328274e-07, -1.067025211836962e-06, -1.067025211836962e-06, -4.734356258346029e-05, -4.560249758920061e-05, -4.865309246348614e-05, -4.708904752551504e-05, -4.575001679176433e-05, -5.421468204014673e-05, -7.689036356207192e-03, -5.318235014489350e-03, -9.616280742917633e-03, -9.008404897133769e-03, -7.334065891639003e-03, -4.017139432706866e-03, -8.266845328259141e+00, -9.971870888686046e-01, -1.124962758136201e+01, -6.865242068504232e-05, -3.333057661977191e+00, -3.333057661977195e+00, -1.086196191593636e+07, -6.984671291707541e+00, -5.644532368233526e+01, -5.453072514382458e+01, -5.853694502150821e+06, -2.166471694155160e+01, -4.869893752778034e-03, -5.419449074088169e-03, -4.076970715862660e-03, -5.020166050127168e-03, -5.096513216286587e-03, -5.096513216286587e-03, -5.476260801446581e-03, -1.472283743820183e-02, -1.319155928155879e-02, -1.032665897925156e-02, -1.201551091295674e-02, -5.800030940201806e-03, -4.610512733258078e-03, -2.918058592808293e-01, -2.199469289686575e-01, -4.773628652899273e-02, -1.087551094774470e-01, -1.087551094774470e-01, -1.536291013432008e-02, -5.074454351090319e+00, -4.209669134501018e+00, -6.538706058817732e-02, -2.089617322781640e+01, -5.261216201242584e+00, -5.126839713939037e+00, -8.558993485922088e+00, -2.452927675330952e+01, -5.894071782182748e+00, -3.087600459660638e+01, -3.087600459657746e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_tau_hcth_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_tau_hcth", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-7.493970698559494e-06, -7.493214071901371e-06, -7.490139378184127e-06, -7.501339033528160e-06, -7.495431768803789e-06, -7.495431768803789e-06, -3.589111487237357e-05, -3.591410113094376e-05, -3.652096579860966e-05, -3.627206711148738e-05, -3.630250347226030e-05, 8.660387169144362e-04, 1.875301950046387e-05, -8.764473945446242e-04, -1.160578628978036e-03, -1.094405687512756e-03, -1.118596388105824e-03, -1.118596388105824e-03, -1.600226035773896e-03, -2.410312257732892e-03, 2.140645995987589e-05, 1.073944775160594e-02, 8.172095076387104e-03, 8.172095076387163e-03, 7.002608067456159e-08, 9.614970915339030e-08, 1.414914903557161e-04, 2.839428741742394e-09, 1.458984409714094e-08, 1.458984409714094e-08, 3.518509559172844e-05, 3.802834918735826e-05, 3.534713144940399e-05, 1.777760982223333e-05, 3.660179197330202e-05, 3.660179197330202e-05, -3.383345639112327e-05, -3.897196237809227e-05, -2.994518253783718e-05, -3.440264086879076e-05, -3.868382979585824e-05, 1.187206399291634e-03, 3.790868731117918e-03, -1.165604815173064e-04, 5.870301873967752e-03, 3.815369365880688e-03, 2.859108618780967e-03, -4.518489811324938e-04, 4.915185373342306e-06, 6.582380018112247e-03, 3.640063642227240e-06, 7.182030575972147e-04, 1.084568843205820e-02, 1.084568843205828e-02, 1.781541517984268e-13, 2.107431128463945e-09, 1.265374864903165e-08, 8.074455828050855e-07, 3.044113552686557e-12, 7.634836954164575e-09, 2.250416716321397e-03, 2.281899248004719e-03, 9.571025942128480e-04, 2.511882254747242e-03, 2.528821833065951e-03, 2.528821833065951e-03, 2.455330168586208e-03, 6.135950919157791e-03, 2.655533836464451e-03, -1.610647622495806e-04, 7.675183144425171e-04, -4.461083380817687e-04, 3.779599558138780e-04, 7.897108865822844e-05, -2.863494213105139e-03, -1.759709159147274e-04, 1.158096122352032e-03, 1.158096122352040e-03, -3.067972423528147e-04, 1.177354862711265e-04, 4.087007702750398e-04, 9.379616809281548e-03, 3.809908686805934e-06, 4.675479455539586e-03, 1.292183641062407e-07, 3.902156396529123e-12, 7.713589959446605e-10, 4.159076386514187e-03, 8.811330134597371e-09, 8.811330194522504e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
