
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_mn15_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_mn15", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [4.609697550296541e+00, 4.610355592883054e+00, 4.613241818371938e+00, 4.602534305388508e+00, 4.610044140460157e+00, 4.610044140460157e+00, -2.417701340007586e+00, -2.417301021797047e+00, -2.405324387900429e+00, -2.410173745814143e+00, -2.417602488691992e+00, -2.420374908603465e+00, -4.757836994161521e-01, -6.987701482474642e-01, -7.471990037737017e-01, -7.223224284709830e-01, -6.975721312593309e-01, -6.975721312593309e-01, -2.030821392691699e-01, -2.024639408040443e-01, -6.959126898561276e-01, -1.560947417294732e-01, -2.029693056017453e-01, -2.029693056017453e-01, 1.211930682138250e-02, 1.253573417880856e-02, 1.004271616576795e-02, 6.603274952507162e-03, 1.243347998898752e-02, 1.243347998898747e-02, 5.438957508991509e-01, 5.812757123534157e-01, 5.480164697857755e-01, 2.308411546356067e+00, 5.626139376268453e-01, 5.626139376268453e-01, -1.468533031352584e+00, -1.448281810841479e+00, -1.477718329038330e+00, -1.461680127105210e+00, -1.442296634008499e+00, -1.441266831443933e+00, -3.379680027810709e-01, -2.839309009214900e-01, -3.510499297899452e-01, -3.165551734637256e-01, -3.281614400271377e-01, -2.674382769922174e-01, 6.228480808010820e-02, -2.347608396935246e-01, 6.117768791898361e-02, -9.928742851876391e-01, -1.191629647240928e-01, -1.191629647240928e-01, 8.021619773385221e-03, 7.202072433786494e-03, 5.533885765902955e-03, 6.365330056320677e-02, 8.342399389660440e-03, 6.624471998830923e-03, 8.371536609239229e-02, -4.583731541228368e-02, 5.206137981133667e-02, 3.027651868905624e-02, 1.192730418160679e-02, 1.192730418160679e-02, 3.153531614640444e-02, -2.994106611096776e-01, -2.719907834546766e-01, -2.230881844058708e-01, -2.531060867563195e-01, -1.979817121372117e-01, -3.297493471977239e-01, -6.729893866993562e-02, -2.793375645145744e-01, -1.763699346638262e-01, -2.684797297345604e-01, -2.684797297345605e-01, -2.380407773645942e-01, 1.316152640385646e-02, -2.163427564561412e-03, -2.281547219074458e-01, 6.267020756705659e-02, -4.910813446024294e-02, 1.374053805164933e-02, 2.128516378208992e-03, 3.941746430129076e-03, -4.385312316271207e-02, 5.711905768676123e-03, 5.711905768676113e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_mn15_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_mn15", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [4.629282575491840e+01, 4.629401800616350e+01, 4.629932717660611e+01, 4.627991411429311e+01, 4.629345317312092e+01, 4.629345317312092e+01, -3.450018946734988e-01, -3.441484520603042e-01, -3.183524690248379e-01, -3.283509172620172e-01, -3.447640689329136e-01, -1.994884092605107e+00, -4.929821479691869e-01, -7.322782196155608e-02, -4.481130957456294e-02, -5.642514879170816e-02, -7.406787133043267e-02, -7.406787133043267e-02, -7.092164462530198e-02, -6.433712337252903e-02, -6.973015296388778e-01, -1.894240405649911e-01, -6.901655205310277e-02, -6.901655205310277e-02, 1.476037037446173e-02, 1.516263950827277e-02, -9.603910380938449e-03, 8.561853785466445e-03, 1.504961176011237e-02, 1.504961176011251e-02, 1.071794700116472e+01, 1.078598858357830e+01, 1.072547024630052e+01, 1.142316588210942e+01, 1.075211638030844e+01, 1.075211638030844e+01, -7.143423586848803e-01, -6.649623028354787e-01, -7.352955116192228e-01, -6.972586516825209e-01, -6.515687243948723e-01, -1.048297373779906e+00, -2.080458953866897e-01, -2.956371489711345e-02, -2.005582820196350e-01, -1.808241831375836e-01, -1.816528825263127e-01, -1.231944805494647e-01, 2.999326525082519e-02, -1.578234584115872e-01, 2.792031673557539e-02, 7.756355905639543e-02, -1.701365267307816e-01, -1.701365267307816e-01, 1.060815862125131e-02, 9.297653352772751e-03, 7.189308908160398e-03, 6.371252034157107e-02, 1.102796263977706e-02, 8.577995650582019e-03, 4.061140834027592e-01, 3.450356392398050e-01, 3.564919498376190e-01, 3.919432037600443e-01, 3.836880318054600e-01, 3.836880318054600e-01, 3.764096023679810e-01, -1.746249933459942e-01, -1.305514392716366e-01, 1.621338088609287e-02, -7.360388539328783e-02, -1.990731936718943e-02, -1.150436522101719e-01, -1.972581238813990e-01, -5.337280967951712e-02, -2.511585320895388e-01, -4.606764341721255e-02, -4.606764341721317e-02, -2.608504530509628e-01, -2.407211393787417e-03, -3.361609903824308e-02, -7.115927406409782e-02, 4.286634990468237e-02, -1.070413043345563e-01, 1.662061604936123e-02, 2.817943211020703e-03, 5.175635810554281e-03, -1.011351047633230e-01, 7.430812751931363e-03, 7.430812751931265e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_mn15_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_mn15", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.644963700341760e-08, -4.645096766233231e-08, -4.645641129449663e-08, -4.643481519012906e-08, -4.645034051642766e-08, -4.645034051642766e-08, -2.299453421231915e-06, -2.303471147855733e-06, -2.425056084747505e-06, -2.376775014886095e-06, -2.300513976728294e-06, 2.167279735175235e-06, -1.162962066345561e-02, -4.009738906709541e-03, -5.122168254978131e-03, -4.706854929758613e-03, -3.983990257149836e-03, -3.983990257149836e-03, -1.609229842891715e+00, -1.564939221910878e+00, -4.949880425368855e-03, -1.709423338974203e+00, -1.595420747541079e+00, -1.595420747541079e+00, 7.598276167421097e-01, 6.030362798254201e-01, -2.528966692652970e+00, 8.831718087720765e-01, 6.692403594348141e-01, 6.692403594404875e-01, -1.889632637664235e-05, -1.903326311795912e-05, -1.891151251064572e-05, -1.829344890069952e-05, -1.896485333039645e-05, -1.896485333039645e-05, -2.321652425064878e-05, -2.429533375168390e-05, -2.282191377263882e-05, -2.353121200675811e-05, -2.469820622887825e-05, 2.400544639938793e-05, -1.125436318349555e-02, -2.276013496083809e-02, -1.003161646171421e-02, -1.512073345461836e-02, -1.353128330803189e-02, -1.373139031079521e-02, -6.954639095213071e+01, -1.016675136517179e+00, -7.395336997963012e+01, -2.226293401974366e-04, -2.622282936938273e+00, -2.622282936938273e+00, -1.556198608032697e+07, 1.038641233982786e+00, 4.907250323128943e+00, -4.869235386371645e+02, -1.322549616676154e+07, 1.370474760100842e+00, -9.615122133833948e-02, -7.513754837733917e-02, -7.564390958731541e-02, -8.785674632682590e-02, -8.489511915894329e-02, -8.489511915894329e-02, -9.694207242561469e-02, -1.846339718969157e-02, -2.628252939158087e-02, -4.325329168047037e-02, -3.316627048407378e-02, -2.820865674882113e-02, -1.437094453882153e-02, -1.817849963609061e+00, -2.864220950612881e-01, -1.952291324058417e-01, -1.659251171782912e-01, -1.659251171782915e-01, -4.828347651926038e-02, -2.226821296337793e+00, -2.517283653740770e+00, -1.140937919781506e-01, -1.672860144628279e+02, -3.451332330865202e+00, 6.359802574616409e-02, 1.819597618184845e+00, 3.125989532155707e+00, -3.966845918084946e+00, 2.123486854355443e+00, 2.123486854388285e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_mn15_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_mn15", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-2.334607962980350e-02, -2.334677214315620e-02, -2.334975388693348e-02, -2.333849353393556e-02, -2.334644475216641e-02, -2.334644475216641e-02, -2.207659071657574e-02, -2.208374589514642e-02, -2.230002952356440e-02, -2.221456067582440e-02, -2.207849742851884e-02, -1.173494251229602e-02, -1.986043398860216e-02, -4.979955351799466e-02, -4.576896916222093e-02, -4.770506098006555e-02, -4.988867580708835e-02, -4.988867580708835e-02, 3.440865591020694e-02, 2.722230644558377e-02, -1.479904969172635e-02, 7.245716695675110e-02, 3.235655099029871e-02, 3.235655099029871e-02, 6.180778001087756e-04, 7.028512078622119e-04, 1.326452567742199e-02, 2.494051435921628e-05, 7.128111304290644e-04, 7.128111304289956e-04, -7.161528591236170e-02, -7.234629761619753e-02, -7.169590924687032e-02, -1.149193149286016e-01, -7.198116898858044e-02, -7.198116898858044e-02, -2.514753205444926e-02, -2.618021919891764e-02, -2.471142483689949e-02, -2.550239138528103e-02, -2.646595674257868e-02, -2.212410294905733e-02, -4.763484040784999e-02, -8.866544395594828e-02, -5.461646506983884e-02, -5.083792408439643e-02, -4.817096285119897e-02, -1.089062058764256e-01, 1.958498757531148e-02, 5.568067212776502e-02, 2.201335471615617e-02, -2.612893091908700e-02, 8.479540426612042e-02, 8.479540426612042e-02, 9.148957213411864e-06, 4.206035925340846e-05, 7.010844460002772e-05, 6.879072900800504e-03, 1.052653729625894e-05, 3.930457944490511e-05, -8.807827690045889e-01, -5.508391398214803e-01, -7.855054620143321e-01, -7.414133725189214e-01, -6.945559331510177e-01, -6.945559331510177e-01, -7.809709044978569e-01, -5.918561085656249e-02, -7.045342732674043e-02, -1.509316486206527e-01, -9.561337937745207e-02, -1.968801529078671e-01, -5.580240219858223e-02, 4.290059867334108e-02, -3.624998352732630e-02, -2.397139644651599e-03, -6.746732534063081e-02, -6.746732534063074e-02, -3.408637999256051e-02, 1.015484172585003e-02, 1.959148727668402e-02, -9.286137376184496e-02, 2.040240827823971e-02, 5.820388674371074e-02, 3.851124570727800e-04, 9.753797310630871e-07, 1.304741730624697e-05, 6.200635964720496e-02, 3.405314295432755e-05, 3.405314295434382e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
