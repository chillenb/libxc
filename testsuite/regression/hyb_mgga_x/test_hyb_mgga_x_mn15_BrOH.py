
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_mn15_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_mn15", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.334359233915133e+00, -2.333811554302625e+00, -2.331665662957388e+00, -2.340588689917093e+00, -2.334068412355923e+00, -2.334068412355923e+00, -2.448967698240279e+00, -2.448656036360617e+00, -2.439366931252096e+00, -2.443224836881409e+00, -2.448893077186799e+00, -2.448893077186799e+00, -5.846501909367128e-01, -5.860275829824141e-01, -6.262856995659404e-01, -6.177766192932194e-01, -5.851282840218734e-01, -5.851282840218734e-01, -1.918903048903805e-01, -1.898536252496600e-01, -7.884035726267465e-01, -1.306190032827470e-01, -1.912096444059101e-01, -1.912096444059101e-01, 1.211917348116912e-02, 1.253557902220117e-02, 1.044980409226451e-02, 6.602652113068650e-03, 1.243333898676274e-02, 1.243333898676271e-02, 5.554287181289546e-01, 5.927638971506762e-01, 5.593989831776934e-01, 5.884148213138947e-01, 5.743210605998325e-01, 5.743210605998325e-01, -1.470337671048043e+00, -1.454181437058337e+00, -1.476650262386839e+00, -1.463136559722453e+00, -1.451377062382882e+00, -1.451377062382882e+00, -3.159632976983179e-01, -2.273394917696965e-01, -3.237996773117894e-01, -2.756079824740397e-01, -3.050443934206959e-01, -3.050443934206959e-01, -7.472040057939507e-02, -2.261985385807452e-01, -7.380984089321450e-02, -7.319502859422902e-01, -1.110871356959820e-01, -1.110871356959820e-01, 6.387209741384922e-03, 7.201433252970208e-03, 5.533630554704239e-03, -7.297983284748392e-03, 6.623673225669070e-03, 6.623673225669079e-03, 1.057060364369640e-01, -2.940646305196976e-02, 1.288730507371878e-02, 5.005069567161809e-02, 3.092713272953259e-02, 3.092713272953259e-02, 6.897581995627296e-02, -2.968792925858431e-01, -2.666732411117140e-01, -2.114198691113445e-01, -2.449213765682218e-01, -2.449213765682218e-01, -2.711373260986585e-01, -2.644303048081132e-01, -2.653027235046896e-01, -2.448597368216718e-01, -2.513518832273035e-01, -2.513518832273037e-01, -2.926809900154758e-01, 1.332852783699272e-02, -1.080421028664401e-03, -2.053855671116710e-01, -4.537379936620019e-02, -4.537379936620033e-02, 1.373982097862174e-02, 2.128472515817404e-03, 3.941694595500166e-03, -4.018204713876194e-02, 5.711225562122522e-03, 5.711225562122520e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_mn15_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_mn15", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([3.865982909227986e+01, 3.866138143411550e+01, 3.866796100494014e+01, 3.864267552439696e+01, 3.866064899831510e+01, 3.866064899831510e+01, -1.000159861896634e+00, -9.995399655802142e-01, -9.810845152521779e-01, -9.927161965404174e-01, -9.999638442121649e-01, -9.999638442121649e-01, -2.742270075718621e-01, -2.730604554209056e-01, -2.392662042364848e-01, -2.309383409194247e-01, -2.737912322543091e-01, -2.737912322543091e-01, -6.452401437313715e-02, -5.853529700569272e-02, -5.270139129084961e-01, -1.409668981174055e-01, -6.268144007299543e-02, -6.268144007299543e-02, 1.475997580905434e-02, 1.516222238389626e-02, -8.191799845510959e-03, 8.559491780484972e-03, 1.504922030713955e-02, 1.504922030713957e-02, 1.072237056139300e+01, 1.079024077676692e+01, 1.072981918232792e+01, 1.078255766695252e+01, 1.075652781900873e+01, 1.075652781900873e+01, -9.619842526234584e-01, -9.857619690598576e-01, -9.583416272271610e-01, -9.801462507179722e-01, -9.772052184119172e-01, -9.772052184119172e-01, -1.843410697602282e-01, 3.166455185877393e-02, -2.044133019613507e-01, -1.412641749139166e-01, -1.483970130543685e-01, -1.483970130543685e-01, -1.242829619454918e-01, -1.471027915216646e-01, -1.240002380454169e-01, 7.642843404501726e-01, -1.524695612137381e-01, -1.524695612137381e-01, 8.282593251888275e-03, 9.295250532033833e-03, 7.188326109178566e-03, -3.839074247743419e-02, 8.574963522797028e-03, 8.574963522796998e-03, 3.923616713292571e-01, 3.410172868294353e-01, 3.672786370955451e-01, 3.823446105293531e-01, 3.754730043179311e-01, 3.754730043179311e-01, 3.596669494467721e-01, -1.725423283944480e-01, -1.237968250819763e-01, 2.599280207121664e-02, -6.432964466146263e-02, -6.432964466146276e-02, -3.702757082629853e-02, -9.218860626724286e-02, -5.611603122634235e-02, -9.896380777302659e-02, -6.075212521562234e-02, -6.075212521562262e-02, -1.476677581564048e-01, -1.803698918907006e-03, -3.013991509543058e-02, -1.063003528836482e-01, -9.729728570044871e-02, -9.729728570044825e-02, 1.662099434135034e-02, 2.817769779189913e-03, 5.175433490463169e-03, -9.141609305369945e-02, 7.428199821837393e-03, 7.428199821837203e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_mn15_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_mn15", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.704146954702964e-08, -4.704291633755601e-08, -4.704885588636152e-08, -4.702537045128083e-08, -4.704223433397781e-08, -4.704223433397781e-08, -3.161001753188935e-07, -3.200640358843874e-07, -4.396858179623355e-07, -3.801885916567427e-07, -3.172655212175094e-07, -3.172655212175094e-07, -8.180066492849379e-03, -8.219419129413203e-03, -9.191167088869428e-03, -8.480054087034136e-03, -8.193961551876110e-03, -8.193961551876110e-03, -1.823535097216497e+00, -1.798672157429244e+00, -4.539483473425063e-03, -2.661551342676817e+00, -1.818350974322810e+00, -1.818350974322810e+00, 7.952174802770420e-01, 6.403807128751307e-01, -3.162265668011061e+00, 1.841593057819571e+00, 7.046723401350651e-01, 7.046723401361019e-01, -1.889307251084743e-05, -1.902997574252109e-05, -1.890829612000954e-05, -1.901465546511918e-05, -1.896152658705658e-05, -1.896152658705658e-05, 2.151802230399276e-05, 2.007850760304828e-05, 2.280454610448307e-05, 2.193870684501968e-05, 1.851956290163256e-05, 1.851956290163256e-05, -1.270119197514272e-02, -2.062334338848183e-02, -1.424881993379510e-02, -1.599753664852872e-02, -1.389409846811355e-02, -1.389409846811355e-02, -2.903143950092336e+00, -1.117305554990435e+00, -3.250205910237479e+00, -2.321059887492686e-04, -3.201995689836658e+00, -3.201995689836658e+00, 1.997325862570930e+00, 1.825137461111815e+00, 6.260192658831857e+00, -3.900525410264870e+00, 2.889479218103531e+00, 2.889479218154557e+00, -9.371772037125264e-02, -7.349845100611531e-02, -8.015716833835300e-02, -8.574724068681688e-02, -8.289690299401667e-02, -8.289690299401667e-02, -9.199374005795136e-02, -1.893464589513032e-02, -2.628855638818716e-02, -4.220492465869324e-02, -3.273132384872690e-02, -3.273132384872689e-02, -1.345518296707056e-02, -5.693277895794885e-01, -3.284945719521553e-01, -1.208550267749189e-01, -2.015974740812509e-01, -2.015974740812511e-01, -2.994769562930700e-02, -2.542395741395359e+00, -3.275842470032858e+00, -1.535308827826193e-01, -4.336043750473629e+00, -4.336043750473637e+00, 1.844899543603546e-01, 4.948058662151034e+00, 3.723969042314912e+00, -5.072268888891644e+00, 4.645898384564343e+00, 4.645898384561668e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_mn15_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_mn15", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-1.346342271233177e-02, -1.346400891564276e-02, -1.346618993835482e-02, -1.345663705968495e-02, -1.346373501683570e-02, -1.346373501683570e-02, -1.718493313929454e-02, -1.718839724298802e-02, -1.729105635116591e-02, -1.722149864036792e-02, -1.718600761009116e-02, -1.718600761009116e-02, -2.809263560139478e-02, -2.801714320101358e-02, -2.617504114186982e-02, -2.847966042088428e-02, -2.806804495130434e-02, -2.806804495130434e-02, 4.145953905990730e-02, 3.593187934967733e-02, -1.606255705441371e-02, 7.115607465569916e-02, 3.995490225960831e-02, 3.995490225960831e-02, 6.180424554843239e-04, 7.027957821417167e-04, 1.322468999260561e-02, 2.493602063879181e-05, 7.127623616348726e-04, 7.127623616348038e-04, -7.190369907834691e-02, -7.263359304743054e-02, -7.198056089424248e-02, -7.254784997789672e-02, -7.227393705455405e-02, -7.227393705455405e-02, -2.294475931570015e-02, -2.245961987007066e-02, -2.315464060501894e-02, -2.276752693801241e-02, -2.239127482696671e-02, -2.239127482696671e-02, -6.437627532439207e-02, -1.779264936666722e-01, -5.552451960768470e-02, -9.308734417223942e-02, -7.550890234569098e-02, -7.550890234569098e-02, 5.304609477742205e-02, 5.729831620914128e-02, 5.874713658862033e-02, -7.306262864294391e-02, 8.407739222895828e-02, 8.407739222895828e-02, 3.416675663947443e-05, 4.205283432763442e-05, 7.010277852195751e-05, 2.199284365144343e-02, 3.929552097366955e-05, 3.929552097359509e-05, -9.334405493012532e-01, -5.889120725741516e-01, -6.937226854114540e-01, -7.882217915062116e-01, -7.393282402718189e-01, -7.393282402718189e-01, -8.757190501875145e-01, -6.069078126471742e-02, -7.946306971039156e-02, -1.773262986690796e-01, -1.122008581846020e-01, -1.122008581846018e-01, -1.303268170978004e-01, 1.100951582864282e-02, -2.675585262351207e-02, -5.492972065649541e-02, -5.130811329059711e-02, -5.130811329059706e-02, -6.248831034901129e-02, 1.014044741282191e-02, 1.950060006980809e-02, -6.535623031102880e-02, 5.765208533509597e-02, 5.765208533509590e-02, 3.847354111292935e-04, 9.753507265125136e-07, 1.304714545592779e-05, 6.130893884145484e-02, 3.404593899397300e-05, 3.404593899398924e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
