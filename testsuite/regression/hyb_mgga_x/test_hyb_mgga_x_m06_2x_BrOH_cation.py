
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_m06_2x_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06_2x", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-7.868598241406424e+00, -7.868555908237044e+00, -7.868400277409082e+00, -8.106235565442464e+00, -8.105851337975535e+00, -8.343043516397714e+00, -1.683890021702815e+00, -1.804836123963661e+00, -1.803709339676211e+00, -1.804336259508186e+00, -1.804061354573263e+00, -1.683113368105177e+00, -3.144956521718058e-01, -3.572115256051456e-01, -4.216939782174911e-01, -3.644821165267537e-01, -3.202432875811737e-01, -4.125934321584635e-01, -1.119657244887809e-01, -1.114211547019994e-01, -5.204256564086903e-01, -1.268687725456232e-01, -1.368863326800177e-01, -1.292505372160829e-01, -1.685987319496814e-02, -1.433141703961219e-02, -7.029516413596490e-02, -9.754975762086265e-03, -1.358984372669379e-02, -1.358984372669378e-02, -1.798190911614826e+00, -1.795001774676882e+00, -1.798002227485212e+00, -1.795188916336999e+00, -1.760251883217891e+00, -1.760283331601640e+00, -1.025047295975699e+00, -1.031700981106711e+00, -1.020338419032231e+00, -1.026102413909256e+00, -9.535826461686832e-01, -1.031049283923668e+00, -2.560226186843598e-01, -2.439258822806009e-01, -2.748274858080914e-01, -2.569645308529340e-01, -2.533819822907594e-01, -2.643872383752529e-01, -1.355575406784441e-01, -1.246933943158958e-01, -1.341330710814493e-01, -8.352532408855186e-01, -1.168856229662701e-01, -1.168856229662694e-01, -5.986198580569656e-03, -9.537432377134437e-03, -7.297704299669953e-03, -9.193722250531708e-02, -9.163823161225382e-03, -9.163823161225422e-03, -1.852349459305686e-01, -2.046235354136098e-01, -2.019532580998402e-01, -1.991376311413425e-01, -2.006416338812768e-01, -2.023817531532869e-01, -1.870480548296149e-01, -2.279798700719868e-01, -2.152096129636709e-01, -2.038960791883430e-01, -2.167955449330005e-01, -2.095565995390617e-01, -2.629947588781407e-01, -1.672920116904511e-01, -1.493364825576515e-01, -1.680541030908016e-01, -1.639416641209714e-01, -1.486943821072962e-01, -2.339711202554439e-01, -4.744188628584867e-02, -1.065427885631339e-01, -1.716557417575242e-01, -1.168529850742854e-01, -1.168529850742846e-01, -1.316101544594154e-02, -2.552089302374897e-03, -2.973439465158345e-03, -6.749416326408143e-02, -8.417699497817985e-03, -5.578960045007244e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_m06_2x_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06_2x", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-7.036299742119289e+00, -7.034473463206306e+00, -7.036055712378817e+00, -7.034296608378400e+00, -7.035379608830804e+00, -7.033299107782467e+00, -7.038115459862007e+00, -6.290788145207575e+00, -7.036142026502795e+00, -6.289546729266532e+00, -6.290170055074845e+00, -6.289546729266532e+00, -1.914967391719566e+00, -2.109891456299312e+00, -1.914237619486429e+00, -1.915064485025191e+00, -1.899895358747028e+00, -1.897319421959147e+00, -1.905302855177336e+00, -1.905310062310798e+00, -1.916283782771622e+00, -1.892270864227144e+00, -2.110485487992940e+00, -1.892270864227144e+00, -2.261570655520406e-01, -2.331940812838989e-01, -2.243960076855164e-01, -1.447203266296462e-01, -1.206937625426326e-01, -1.227869841692242e-01, -1.199218784320982e-01, -2.160347760914666e-01, -2.399577916905913e-01, -2.361614365833015e-01, -1.549141258703045e-01, -1.430587922625820e-01, -9.626553079626114e-02, -5.500393325850243e-02, -9.206852356383817e-02, -4.657521074494309e-02, -4.507573173170219e-01, -4.007253379752450e-01, -6.730574273909737e-02, -7.820921474897606e-02, -8.340656024889091e-02, -6.219798091561366e-02, -8.340656024888921e-02, -5.289343896281178e-02, -2.161086369820146e-02, -2.293158699535311e-02, -1.256111859620439e-02, -2.418304405680501e-02, -5.672516690579017e-02, -9.960242332349319e-02, -1.308790607022235e-02, -1.287102640667870e-02, -1.932562745270142e-02, -1.105055514177856e-02, -1.932562745270142e-02, -1.105055514178178e-02, -1.589957469921778e+00, -1.589698839446213e+00, -1.610174500064875e+00, -1.609226704872833e+00, -1.591340464562499e+00, -1.590559956318512e+00, -1.608674244446665e+00, -1.608286799906874e+00, -1.711450157857718e+00, -1.599384675280746e+00, -1.600006317189872e+00, -1.710822897896864e+00, -1.211930697334567e+00, -1.212711056732061e+00, -1.221996964166055e+00, -1.221144891254001e+00, -1.189749386691186e+00, -1.199172386064643e+00, -1.211984723769403e+00, -1.216541628840548e+00, -1.221569575387549e+00, -1.309219388301287e+00, -1.221569575387549e+00, -1.219615513351780e+00, -1.938909238692181e-01, -2.286897443008695e-01, -1.794666895794857e-01, -1.728545065927635e-01, -2.793250306400598e-01, -2.132335719281602e-01, -1.819842128935771e-01, -1.974137355512081e-01, -2.200374364002838e-01, -2.272968368715087e-01, -2.200374364002838e-01, -1.942564057382655e-01, -5.844677608665553e-02, -5.753537090520721e-02, -1.224762803041451e-01, -1.252548458997919e-01, -7.068097084994383e-02, -6.112998239739398e-02, -6.898338113406932e-01, -6.897512205354634e-01, -4.341423786299307e-02, -5.376274774400218e-02, -4.341423786299810e-02, -5.376274774401940e-02, -5.453384134923961e-03, -1.022078001446422e-02, -1.259699130457428e-02, -1.278889382591399e-02, -9.405558622974633e-03, -9.952969006799045e-03, -9.769969533162989e-02, -5.995984170578859e-02, -9.630034667181037e-03, -1.316161819974776e-02, -9.630034667179582e-03, -1.316161819974680e-02, -1.565644839097650e-01, -1.583618027724290e-01, -2.992677336355996e-01, -2.969928441318568e-01, -2.591118276119791e-01, -2.527249039568798e-01, -2.015043270055820e-01, -1.912173040394927e-01, -2.310065631648316e-01, -2.246363288532899e-01, -2.310065631648316e-01, -2.194790659973499e-01, -1.583189577650549e-01, -1.558847198215335e-01, -1.795399818531409e-01, -2.109107500504185e-01, -1.842793553636216e-01, -2.108462439288282e-01, -1.449469142622887e-01, -1.445061990558287e-01, -1.862207406342192e-01, -1.854673807743320e-01, -1.862207406342193e-01, -2.058296896204011e-01, -2.326061628786873e-01, -2.448968097955242e-01, -1.012295407414997e-01, -9.910102638084878e-02, -8.776464533225443e-02, -4.819856934677172e-02, -2.293536263245915e-01, -2.149780672835551e-01, -1.223067614266683e-01, -1.244479759112402e-01, -1.223067614266684e-01, -1.486097842111365e-01, -2.415177669672655e-01, -2.281016427988253e-01, -5.581196783432923e-02, -5.615043098461302e-02, -1.084660299899899e-01, -1.076788309391826e-01, -1.867904966084706e-01, -1.446503071055814e-01, -6.791090274090539e-02, -5.223702032092199e-02, -6.791090274090897e-02, -5.223702032094268e-02, -1.709990512665616e-02, -1.770478881404890e-02, -3.398435613876405e-03, -3.406201097586572e-03, -3.828892388573943e-03, -4.071434112978771e-03, -4.892018288656241e-02, -4.575443806882377e-02, -9.113489203414791e-03, -1.207555967341727e-02, -9.113489203414751e-03, -6.700023088422040e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m06_2x_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06_2x", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-6.479733243357066e-09, 0.000000000000000e+00, -6.479348523838388e-09, -6.479588153969552e-09, 0.000000000000000e+00, -6.479243188429056e-09, -6.479130467659887e-09, 0.000000000000000e+00, -6.478585494847769e-09, -6.480764732129499e-09, 0.000000000000000e+00, -5.545143116057976e-09, -6.479644796721048e-09, 0.000000000000000e+00, -5.544597162886792e-09, -5.544363634960090e-09, 0.000000000000000e+00, -5.544597162886792e-09, -7.335592424977014e-06, 0.000000000000000e+00, -1.125142849409898e-05, -7.336419325669807e-06, 0.000000000000000e+00, -7.335806692838871e-06, -7.352493138711175e-06, 0.000000000000000e+00, -7.355034149750043e-06, -7.344201047286100e-06, 0.000000000000000e+00, -7.343812619247340e-06, -7.338450177709573e-06, 0.000000000000000e+00, -7.357608281911214e-06, -1.125829155816185e-05, 0.000000000000000e+00, -7.357608281911214e-06, -8.593320809269571e-03, 0.000000000000000e+00, -8.370301818659002e-03, -8.674011877223695e-03, 0.000000000000000e+00, -3.736463023614257e-03, -3.947152938590895e-03, 0.000000000000000e+00, -4.025655508493545e-03, -3.948746354604154e-03, 0.000000000000000e+00, -9.405332929003881e-03, -8.066119284702482e-03, 0.000000000000000e+00, -1.169418174073657e-02, -3.640404657678035e-03, 0.000000000000000e+00, -4.292204977053580e-03, -2.466716523681441e+00, 0.000000000000000e+00, -6.794442692101582e-01, -2.327845150641647e+00, 0.000000000000000e+00, -6.538685396121555e-01, -1.544289457226257e-03, 0.000000000000000e+00, -5.044886695979408e-03, -8.083988654510001e-01, 0.000000000000000e+00, -8.842626385520779e-01, -6.019006824271381e-01, 0.000000000000000e+00, -1.170212672164272e+00, -6.019006824271381e-01, 0.000000000000000e+00, -4.021866649775383e+01, -7.982717500032032e+00, 0.000000000000000e+00, -8.009297378441456e+00, -4.038979511774857e+06, 0.000000000000000e+00, -8.371806436429702e+00, -3.860479202745560e+03, 0.000000000000000e+00, -3.538676000492691e+00, -5.862194464004768e+00, 0.000000000000000e+00, -5.922467673693978e+00, -7.590814078798216e+00, 0.000000000000000e+00, -1.302019842568625e+01, -7.590814078798216e+00, 0.000000000000000e+00, -1.302019842568617e+01, -1.480973165307754e-06, 0.000000000000000e+00, -1.482385215399330e-06, -1.478658190383034e-06, 0.000000000000000e+00, -1.480145218695878e-06, -1.480819065097423e-06, 0.000000000000000e+00, -1.482290097913903e-06, -1.478833372907675e-06, 0.000000000000000e+00, -1.480255883651236e-06, -1.647971802085739e-06, 0.000000000000000e+00, -1.481254203373167e-06, -1.479795392756756e-06, 0.000000000000000e+00, -1.649612887396385e-06, -6.595480664182063e-05, 0.000000000000000e+00, -6.612441209779565e-05, -6.554039999997271e-05, 0.000000000000000e+00, -6.571651324448320e-05, -6.618784280834112e-05, 0.000000000000000e+00, -6.628849632410666e-05, -6.587654231266901e-05, 0.000000000000000e+00, -6.596199070598993e-05, -6.553752701700875e-05, 0.000000000000000e+00, -1.089395230979105e-04, -6.553752701700875e-05, 0.000000000000000e+00, -6.590689219739115e-05, -9.713655760108415e-03, 0.000000000000000e+00, -1.285331507110559e-02, -6.961814582199778e-03, 0.000000000000000e+00, -6.907755016957924e-03, -1.348994821625846e-02, 0.000000000000000e+00, -1.223608220017470e-02, -1.218631435799299e-02, 0.000000000000000e+00, -1.072283108506490e-02, -8.336476582185972e-03, 0.000000000000000e+00, -1.327981743910154e-02, -8.336476582185974e-03, 0.000000000000000e+00, -1.019282456162622e-02, -1.426435638139311e+00, 0.000000000000000e+00, -1.403135215907056e+00, -2.390587010719077e+00, 0.000000000000000e+00, -4.471311542749464e-01, -1.644396618757406e+00, 0.000000000000000e+00, -1.595279392511147e+00, -8.548281150844558e-05, 0.000000000000000e+00, -8.563856200935944e-05, -1.370485727532864e+00, 0.000000000000000e+00, -1.508370081444641e+00, -1.370485727532864e+00, 0.000000000000000e+00, -1.508370081444627e+00, -1.182113007960457e+08, 0.000000000000000e+00, -3.926139015378817e+00, -5.561328664543144e+00, 0.000000000000000e+00, -4.902270398049597e+00, -4.002810309729249e+01, 0.000000000000000e+00, -4.392629309280549e+01, -2.853979623021229e+00, 0.000000000000000e+00, -4.072244148604458e+02, -7.548808954144421e+00, 0.000000000000000e+00, -2.393073505855266e+01, -7.548808954144494e+00, 0.000000000000000e+00, -2.393073505855271e+01, -9.241092184629580e-03, 0.000000000000000e+00, -9.035806507301913e-03, -1.004113983247166e-02, 0.000000000000000e+00, -9.921131409776174e-03, -1.066235157076296e-02, 0.000000000000000e+00, -1.048731367147266e-02, -1.036317281510931e-02, 0.000000000000000e+00, -9.767577152413375e-03, -1.055858039479725e-02, 0.000000000000000e+00, -1.036666932718494e-02, -1.055858039479725e-02, 0.000000000000000e+00, -9.926948764862609e-03, -1.063574879128862e-02, 0.000000000000000e+00, -1.042118064661465e-02, -1.966138238094249e-02, 0.000000000000000e+00, -2.690020637127915e-02, -1.658155166570790e-02, 0.000000000000000e+00, -2.049330471556753e-02, -1.363724542845190e-02, 0.000000000000000e+00, -1.342851604601812e-02, -1.525737731632994e-02, 0.000000000000000e+00, -1.503087830958400e-02, -1.525737731632994e-02, 0.000000000000000e+00, -1.808908812808525e-02, -5.870709281830458e-03, 0.000000000000000e+00, -6.911671850832026e-03, -2.623627770471740e-01, 0.000000000000000e+00, -2.585905494027878e-01, -3.874827368605069e-01, 0.000000000000000e+00, -1.491418223444009e-01, -1.120143214280239e-01, 0.000000000000000e+00, -6.491008121855502e-02, -9.845285398499164e-02, 0.000000000000000e+00, -9.889424336353364e-02, -9.845285398499169e-02, 0.000000000000000e+00, -1.933365716508292e-01, -2.598900687656054e-02, 0.000000000000000e+00, -2.567949128889523e-02, -4.168046600513872e+03, 0.000000000000000e+00, -4.054565066492687e+03, -2.825159012105017e+00, 0.000000000000000e+00, -2.878368216716371e+00, -8.706974623050517e-02, 0.000000000000000e+00, -8.678770023439973e-02, -2.735614579851946e+00, 0.000000000000000e+00, -2.962485270351747e+00, -2.735614579851931e+00, 0.000000000000000e+00, -2.962485270351724e+00, -1.161737059174738e+06, 0.000000000000000e+00, -1.007113945796780e+06, -6.400542180319714e+00, 0.000000000000000e+00, -6.372398478368145e+00, -4.864267875106018e+08, 0.000000000000000e+00, -3.800956576182455e+08, -1.798037379014038e+02, 0.000000000000000e+00, -1.628158176276929e+02, -1.947620311513749e+01, 0.000000000000000e+00, -2.481898457306993e+01, -1.947620311513745e+01, 0.000000000000000e+00, -5.106250291011865e+07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m06_2x_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06_2x", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-2.025823892115553e-03, -2.026991226181225e-03, -2.025988301090980e-03, -2.027110424634391e-03, -2.026448859545426e-03, -2.027788513264290e-03, -2.024605099498044e-03, -2.147552359175988e-03, -2.025929668367382e-03, -2.148475883904795e-03, -2.148063666049946e-03, -2.148475883904795e-03, 2.212431211798346e-04, 1.955681388673037e-04, 2.155922800728000e-04, 2.221744242020603e-04, 1.041306117900369e-04, 8.385996317692270e-05, 1.449990857236121e-04, 1.448462520140632e-04, 2.338436399900946e-04, 4.277115862664328e-05, 2.024822737788324e-04, 4.277115862664328e-05, -1.837381972045829e-02, -1.782161463555882e-02, -1.850448984280081e-02, -2.271710681636686e-02, -2.414573568433743e-02, -2.389845639095595e-02, -2.450170411499495e-02, -1.905840363451615e-02, -1.727382661817470e-02, -1.666448612669275e-02, -2.183186566876365e-02, -2.194558837907208e-02, -2.670567587626028e-02, -6.183072108437187e-02, -3.130843105726642e-02, -7.052400046276185e-02, -4.950347582710595e-03, -7.891420209780375e-03, -3.918093848469551e-02, -3.160809098406360e-02, -3.632749257769875e-02, -5.029960162061939e-02, -3.632749257769816e-02, -3.017632037261480e-02, -8.887813793971579e-05, -1.070042459106568e-04, -5.878833724893339e-05, -1.318686566727599e-04, -4.292350408705198e-03, -9.264645392668851e-03, -1.417236653735128e-05, -1.361413381014217e-05, -5.999488032101831e-05, -1.895915189747023e-05, -5.999488032101831e-05, -1.895915189441047e-05, -8.980356768781728e-03, -8.980921178414057e-03, -8.718302161959636e-03, -8.727714863568445e-03, -8.962530108656419e-03, -8.969815234160905e-03, -8.737855801226957e-03, -8.739967273219873e-03, -8.492795124671269e-03, -8.855765090380207e-03, -8.850579848944468e-03, -8.497739714670468e-03, 3.299412898924906e-03, 3.320086866006769e-03, 3.336948577855119e-03, 3.330260034494386e-03, 3.001748781201990e-03, 3.150097027283584e-03, 3.294671574975911e-03, 3.349797667648017e-03, 3.299717397052475e-03, 2.852035049149794e-03, 3.299717397052475e-03, 3.361528210298675e-03, -4.569099215449183e-02, -4.149390796231722e-02, -7.874179822711946e-02, -8.466832086719681e-02, -3.301876251257323e-03, -3.114576255333659e-02, -4.781419297834755e-02, -4.500055016321557e-02, -3.961044214177954e-02, -4.171230561902485e-02, -3.961044214177952e-02, -4.586766826787821e-02, -5.319594145122825e-02, -5.350212881622007e-02, -7.007483462482238e-03, -1.008618617544703e-02, -4.799258233056886e-02, -5.260713355616867e-02, -1.264780200990338e-02, -1.264741019209031e-02, -5.844016538064074e-02, -4.915674650135481e-02, -5.844016538065709e-02, -4.915674650134866e-02, -2.413695229013227e-06, -4.497532541706893e-06, -1.197615185735681e-05, -1.104346344255307e-05, -3.604512055023837e-05, -4.698450587492790e-05, -2.904449215214018e-02, -1.866951777764306e-02, -7.241469734113325e-06, -5.947380821916075e-05, -7.241469734674690e-06, -5.947380822115706e-05, -3.558039763844674e-01, -3.519718935019318e-01, 8.330058459461093e-02, 7.580565069250078e-02, -2.502023270307449e-02, -4.413737844450911e-02, -1.925569944415964e-01, -2.149615817035691e-01, -1.021072264010253e-01, -1.227334406748326e-01, -1.021072264010253e-01, -1.248489106342361e-01, -3.302879970568368e-01, -3.432969563473517e-01, -4.065513324048041e-02, -3.764960348711735e-02, -4.741273253817239e-02, -4.294648353843317e-02, -1.015072339178295e-01, -1.024424565653527e-01, -5.384678908502522e-02, -5.509976075647108e-02, -5.384678908502520e-02, -5.144182745240542e-02, -4.480811745975948e-02, -4.955438477646244e-02, -3.029445770237738e-02, -3.155089349831685e-02, -4.617157682208747e-02, -6.048297040487634e-02, 1.506117721194045e-02, 1.789455446046272e-02, -2.252145274881020e-02, -2.127854762559831e-02, -2.252145274881026e-02, -1.731401996407883e-02, -1.647625355343387e-03, -8.840553130066400e-03, -4.275721416380053e-03, -4.275056493042577e-03, -1.445849904371019e-02, -1.625766286805755e-02, 5.331567039203886e-03, -3.548655324220860e-02, -5.079828210770444e-02, -6.149761611304783e-02, -5.079828210768670e-02, -6.149761611304510e-02, -6.950662247386940e-05, -7.619271516045304e-05, -2.683666608258340e-07, -2.690228493249587e-07, -3.472957709573027e-06, -4.426266880709177e-06, -3.077580444547101e-02, -3.381035131581579e-02, -1.587868574012574e-05, -4.749350192713064e-05, -1.587868573718851e-05, -2.633495753726163e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
