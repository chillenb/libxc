
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_scan0_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_scan0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.623252988299553e+01, -1.623262909590439e+01, -1.623306241995333e+01, -1.623159001969856e+01, -1.623236261327815e+01, -1.623236261327815e+01, -2.337148366687908e+00, -2.337275245336035e+00, -2.340662841937548e+00, -2.339505354074275e+00, -2.339386365705521e+00, -2.824744081451052e+00, -3.989619310622476e-01, -5.395636220382257e-01, -5.239397301505566e-01, -5.289094726025880e-01, -5.278446457954497e-01, -5.278446457954497e-01, -1.383333882259158e-01, -1.405905136528335e-01, -4.467226811522606e-01, -1.021011718984721e-01, -1.163079275366699e-01, -1.163079275366699e-01, -2.449944186658086e-03, -2.634097390587719e-03, -2.237915386512433e-02, -1.124259138211540e-03, -1.588215183476465e-03, -1.588215183476465e-03, -4.251765178580906e+00, -4.252585400430585e+00, -4.251806345423349e+00, -4.078314662435970e+00, -4.252179164472862e+00, -4.252179164472862e+00, -1.263954312923745e+00, -1.282659373277504e+00, -1.250097626526787e+00, -1.266434098930356e+00, -1.281235994674760e+00, -1.597753523335572e+00, -4.779663725782600e-01, -5.202552378104665e-01, -4.413992840620956e-01, -4.597676608679038e-01, -4.858856830331449e-01, -4.202551196753109e-01, -5.021442446404623e-02, -1.367867183234970e-01, -4.640742821426340e-02, -1.564861720756265e+00, -8.224435531082325e-02, -8.224435531082325e-02, -1.466471600394202e-03, -1.076585819879501e-03, -9.069022044997052e-04, -3.110952121893629e-02, -1.711584745942016e-03, -1.070926013302590e-03, -4.817416834988084e-01, -4.789093113189872e-01, -4.723725595182509e-01, -4.807327939459483e-01, -4.803222765306179e-01, -4.803222765306179e-01, -4.686770290521245e-01, -4.006822888101667e-01, -4.203225796945146e-01, -4.396791726278920e-01, -4.298114864876318e-01, -3.910423889606439e-01, -5.451844981755126e-01, -1.253913453906259e-01, -2.114966596430414e-01, -2.237095842915921e-01, -2.442858204746511e-01, -2.442858204746511e-01, -3.074358257726351e-01, -2.123529752506208e-02, -3.064024763695243e-02, -2.723528166443375e-01, -3.973325561151714e-02, -5.325972268843097e-02, -3.652234346290698e-03, -1.699646519431174e-04, -5.443778033189206e-04, -4.973636452133740e-02, -9.950394389900566e-04, -9.950394389899350e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_scan0_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_scan0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.454376038417935e+01, -2.454374750793984e+01, -2.454374414398206e+01, -2.454392928682948e+01, -2.454382463538757e+01, -2.454382463538757e+01, -3.891505005101284e+00, -3.891669338103828e+00, -3.895756862146721e+00, -3.894531709442628e+00, -3.894263316694063e+00, -3.532147229354826e+00, -6.081125619772610e-01, -6.300225687116673e-01, -5.982744714976724e-01, -6.105128715635706e-01, -6.078275227039565e-01, -6.078275227039565e-01, -1.490477068091473e-01, -1.533643691878893e-01, -6.326175117899094e-01, -6.782334179137205e-02, -1.042147363660006e-01, -1.042147363660007e-01, 6.729880771192680e-01, 6.392366787669005e-01, 2.201864208777970e-01, 1.086480724705941e+00, 8.223987180571422e-01, 8.223987180571422e-01, -5.560113342212339e+00, -5.561900815667308e+00, -5.560208331158366e+00, -5.814668956336985e+00, -5.561012877912195e+00, -5.561012877912195e+00, -2.058554550259858e+00, -2.101571981600455e+00, -2.027311493560941e+00, -2.063959516257976e+00, -2.098502196281664e+00, -1.976267223765195e+00, -6.108589612319099e-01, -6.764793097716384e-01, -5.558492103296163e-01, -5.879034032577182e-01, -6.231586626391458e-01, -6.746111903936961e-01, -6.760749532038143e-02, -1.246975350083087e-01, -6.240068033563659e-02, -2.010989840128181e+00, -3.658235447564909e-02, -3.658235447564923e-02, -1.955312506348181e-03, 1.158138854113400e+00, 5.860738152644382e-01, -4.165505418571955e-02, -2.282166936715395e-03, 7.700233562587045e-01, -6.384198372549963e-01, -6.313305718715383e-01, -6.438790663126923e-01, -6.358413556604658e-01, -6.348078082449946e-01, -6.348078082449946e-01, -6.206319199932120e-01, -5.078671535097898e-01, -5.401836891082654e-01, -5.720776887306804e-01, -5.557846446292596e-01, -6.188714926957791e-01, -7.058248627277659e-01, -1.780043139888110e-01, -2.422295832243446e-01, -3.633465835208889e-01, -2.934673941699367e-01, -2.934673941699366e-01, -5.088021563378520e-01, 2.292651715710303e-01, 1.685422914807325e-01, -3.418522439762079e-01, -5.340831334273864e-02, 3.512307734481300e-02, 7.267341235746582e-01, 2.316536358050402e+00, 9.935513687493251e-01, 4.212677317865283e-02, 6.999077969770305e-01, 6.999077969788701e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_scan0_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_scan0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.271529076851997e-08, -1.271483204850902e-08, -1.271287659344529e-08, -1.271967907009512e-08, -1.271610277659645e-08, -1.271610277659645e-08, -1.356057205323072e-05, -1.356234622397553e-05, -1.360473687505047e-05, -1.358349475313304e-05, -1.359147378809767e-05, -5.097229700111625e-06, -7.418901803514484e-03, -3.430511589821451e-03, -3.781205252472406e-03, -3.675205974869536e-03, -3.697060292851152e-03, -3.697060292851152e-03, -7.471898024712540e-01, -7.057031437904654e-01, -4.086261737268503e-03, -2.155665305280092e+00, -1.378689757891602e+00, -1.378689757891598e+00, -2.645310702063704e+05, -2.201528354375466e+05, -3.628255419139199e+02, -1.890149456405884e+06, -8.521716354380012e+05, -8.521716354380012e+05, -1.255544985088476e-06, -1.255944498092590e-06, -1.255575072015400e-06, -2.727486861774139e-06, -1.255741271050526e-06, -1.255741271050526e-06, -1.109202535108045e-04, -1.122179678952104e-04, -1.101321724415837e-04, -1.109174548592348e-04, -1.122520189410761e-04, -4.847593364711315e-05, -6.743830484046396e-03, -5.349141103175933e-03, -8.734267452876063e-03, -7.896767211266290e-03, -6.429787393913139e-03, -2.132598232076735e-02, -2.278233807283204e+01, -7.249054981965886e-01, -3.115752499245698e+01, -6.043084242616058e-05, -4.841047044815461e+00, -4.841047044815455e+00, -3.081020788907272e+07, -2.027244904814953e+06, -6.532251220355823e+06, -1.531811298784312e+02, -1.660374043153827e+07, -3.040165224180923e+06, -8.593215042194258e-03, -8.378793899578955e-03, -1.195831680388741e-02, -8.510667632428276e-03, -8.478674797871054e-03, -8.478674797871054e-03, -9.524946720535924e-03, -1.316794665605329e-02, -1.161377737214324e-02, -1.053813270551358e-02, -1.103476413926503e-02, -3.970182185269068e-02, -4.298093172305437e-03, -6.628274677731738e-01, -1.427692264656941e-01, -1.093853527306516e-01, -8.437338445147249e-02, -8.437338445147259e-02, -4.750063174639883e-02, -4.288449247080481e+02, -1.308005017199561e+02, -5.963779786534447e-02, -5.794798813692750e+01, -2.254408903777905e+01, -7.041747542729691e+04, -2.345527117827246e+08, -1.843459832591270e+07, -2.886542724958529e+01, -4.164212005776252e+06, -4.164212005787185e+06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_scan0_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_scan0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.700588594424402e-03, 1.700546710294694e-03, 1.700373992749596e-03, 1.700994407546440e-03, 1.700667432097373e-03, 1.700667432097373e-03, 5.828943522322839e-03, 5.830408799798025e-03, 5.866711397074117e-03, 5.852037487929914e-03, 5.854254174702059e-03, 3.675196294241435e-03, 7.269263431302971e-03, 1.770459337750392e-02, 1.797238455031316e-02, 1.792118837341342e-02, 1.793018728610129e-02, 1.793018728610129e-02, 6.621598457969821e-02, 6.548321736729062e-02, 1.500677946534087e-03, 8.192952886686455e-02, 7.489816752493514e-02, 7.489816752493504e-02, 9.207019579160758e-01, 8.935448254623570e-01, 2.494357284871593e-01, 1.266712990690773e+00, 1.133295764661226e+00, 1.133295764661226e+00, 2.931341769564283e-03, 2.933197330031792e-03, 2.931452670257828e-03, 5.469016223368581e-03, 2.932268903312157e-03, 2.932268903312157e-03, 7.193170926285540e-03, 7.747806775419910e-03, 6.795841754591468e-03, 7.251982418664153e-03, 7.716882639819870e-03, 6.363183496816445e-03, 2.314844632138757e-02, 2.312829255950917e-02, 2.391675722848402e-02, 2.411299983405662e-02, 2.309644587033257e-02, 5.324443915534948e-02, 3.575420313814748e-04, 6.390311877259199e-02, 2.907619136187081e-04, 7.234279469604111e-03, 9.889469561751697e-02, 9.889469561751682e-02, 9.896471118965491e-09, 1.269253324139002e+00, 1.828676704098039e+00, 1.093192792148671e-04, 6.238114814888902e-08, 1.487939794411580e+00, 2.825553238208060e-02, 2.744570230182885e-02, 3.630624286476869e-02, 2.795413995503137e-02, 2.783492693647138e-02, 2.783492693647138e-02, 2.889845827971123e-02, 2.683567110098917e-02, 2.694014025786830e-02, 2.747185638640442e-02, 2.714393543807785e-02, 7.800744851111807e-02, 2.153739344195600e-02, 5.785207595976123e-03, 4.460174013936764e-02, 3.892765777423623e-02, 4.006017742849873e-02, 4.006017742849875e-02, 4.581686136280817e-02, 2.583607596317273e-01, 2.006048801336435e-01, 3.844819098743990e-02, 3.129619657585263e-04, 1.394702038052348e-01, 6.890941533671819e-01, 2.804397183255609e+00, 2.038628720151932e+00, 1.476433302244557e-01, 1.614689587764901e+00, 1.614689587769135e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
