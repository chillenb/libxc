
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_scan0_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_scan0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.738802101070188e+01, -1.738807268629290e+01, -1.738833975605541e+01, -1.738757168061708e+01, -1.738796880438993e+01, -1.738796880438993e+01, -2.513240689740551e+00, -2.513329377692707e+00, -2.515956325303667e+00, -2.516864743340985e+00, -2.515762336694020e+00, -2.515762336694020e+00, -4.490538605881768e-01, -4.485144808802175e-01, -4.364381222559587e-01, -4.455635192834616e-01, -4.428974521507664e-01, -4.428974521507664e-01, -1.349260352537210e-01, -1.364312916263418e-01, -4.927494360152759e-01, -8.597239809244159e-02, -1.043770481488608e-01, -1.043770481488608e-01, -1.949419155661566e-03, -2.095864758287386e-03, -1.804361458506374e-02, -9.103319570072004e-04, -1.274260840488447e-03, -1.274260840488447e-03, -4.251008762091987e+00, -4.251837601572761e+00, -4.251065688585768e+00, -4.251796653494911e+00, -4.251419231170469e+00, -4.251419231170469e+00, -1.558741701295670e+00, -1.575869099749934e+00, -1.553732900943979e+00, -1.568997280700970e+00, -1.570769136299711e+00, -1.570769136299711e+00, -4.620935889682454e-01, -5.019485048274049e-01, -4.060505862319054e-01, -4.146762690624684e-01, -4.713471903548787e-01, -4.713471903548787e-01, -5.584355617114205e-02, -1.292510201493801e-01, -5.103141389600263e-02, -1.428535325492455e+00, -7.095425257862621e-02, -7.095425257862623e-02, -6.524726223987042e-04, -8.960462136729120e-04, -7.361786818339234e-04, -3.244450613101280e-02, -8.851846118158666e-04, -8.851846118158666e-04, -4.799150961976834e-01, -4.772153176358902e-01, -4.781726798351348e-01, -4.789548960689929e-01, -4.785631028698181e-01, -4.785631028698181e-01, -4.650034808776547e-01, -3.990641561547084e-01, -4.181668619697663e-01, -4.369378246190450e-01, -4.272278406158182e-01, -4.272278406158182e-01, -5.190287129379270e-01, -1.713799151839052e-01, -2.042349896315451e-01, -2.627125282669083e-01, -2.342295288054379e-01, -2.342295288054379e-01, -3.580326513076532e-01, -1.711143557781171e-02, -2.477811595612595e-02, -2.586212568780034e-01, -4.372921221185327e-02, -4.372921221185326e-02, -3.025913444935351e-03, -1.652175628751303e-04, -4.366095750099849e-04, -4.132108449434571e-02, -8.132606529960531e-04, -8.132606529960525e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_scan0_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_scan0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.264524941725797e+01, -2.264532963888044e+01, -2.264569316389878e+01, -2.264450030437185e+01, -2.264512434995268e+01, -2.264512434995268e+01, -3.515009158811750e+00, -3.515609530918226e+00, -3.531694559195602e+00, -3.532594851126665e+00, -3.529269921864821e+00, -3.529269921864821e+00, -6.341120274185301e-01, -6.328524933951808e-01, -6.071456936873012e-01, -6.255094410344305e-01, -6.203932735520987e-01, -6.203932735520987e-01, -1.301466035605224e-01, -1.321843382701285e-01, -6.422629556928627e-01, -1.073145667106845e-01, -1.028700881204769e-01, -1.028700881204769e-01, -2.765650766549604e-03, -3.492710561655122e-03, -2.826628548587024e-02, -1.676729997489637e-03, -2.316562046316804e-03, -2.316562046316804e-03, -5.560425965527679e+00, -5.562214084635133e+00, -5.560514606241440e+00, -5.562092836343894e+00, -5.561329135630691e+00, -5.561329135630691e+00, -1.920364818151649e+00, -1.948447713041641e+00, -1.906857912993227e+00, -1.932610460403822e+00, -1.942793600353728e+00, -1.942793600353728e+00, -6.142847556364610e-01, -6.951029690417000e-01, -5.685454231443869e-01, -6.361593149834260e-01, -6.273673044838270e-01, -6.273673044838270e-01, -7.605510121118311e-02, -5.604308311021020e-02, -7.145194742931518e-02, -2.182784460468430e+00, -5.826343055269421e-02, -5.826343055269396e-02, -1.210625433597503e-03, -1.649612249385458e-03, -1.344452705184753e-03, -4.827384873452704e-02, -1.617256802234002e-03, -1.617256802234002e-03, -6.405394925008575e-01, -6.328341155661408e-01, -6.354867231825938e-01, -6.377227943169840e-01, -6.365989426371113e-01, -6.365989426371113e-01, -6.252177502688363e-01, -5.067720787631774e-01, -5.398300543853246e-01, -5.730507207006132e-01, -5.560235868659074e-01, -5.560235868659074e-01, -7.336146902669598e-01, -1.645340660389660e-01, -2.170393581541503e-01, -3.381579235286627e-01, -2.757582332085489e-01, -2.757582332085488e-01, -4.556283579051416e-01, -2.444869240030248e-02, -3.792655331749649e-02, -3.399836960583885e-01, -5.856451048051147e-02, -5.856451048051147e-02, -5.352766539067700e-03, -3.132939436562628e-04, -8.140033315705494e-04, -4.316589035875543e-02, -1.486941766088624e-03, -1.486941766088623e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_scan0_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_scan0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.476096029819815e-09, -4.476054109284791e-09, -4.475700875322902e-09, -4.476320311983017e-09, -4.476019572603870e-09, -4.476019572603870e-09, -1.140261031148658e-05, -1.142346173215759e-05, -1.198278562191725e-05, -1.204224538154660e-05, -1.192261190675736e-05, -1.192261190675736e-05, -3.771384048751291e-03, -3.744888888041897e-03, -3.213109220609064e-03, -3.862143258276908e-03, -3.658665848846417e-03, -3.658665848846417e-03, -1.218758763503374e+00, -1.243768339909884e+00, -1.080310116612110e-03, -7.794330104943338e-01, -1.752102614356801e+00, -1.752102614356799e+00, -1.608832735458589e+02, 3.208664068897514e+01, 1.468357494590828e+00, 3.375233538386146e+02, 2.536616615781018e+02, 2.536616615781022e+02, -1.261282823188589e-06, -1.261618270564994e-06, -1.261193391819186e-06, -1.261493835064121e-06, -1.261506475330544e-06, -1.261506475330544e-06, -7.192579540612619e-05, -6.604665767874081e-05, -7.002265226239820e-05, -6.472256241594463e-05, -6.941976114344488e-05, -6.941976114344488e-05, -1.291630572604791e-02, -1.072656893800393e-02, -2.664375821514641e-02, -2.830805743014927e-02, -1.173250367053045e-02, -1.173250367053045e-02, -5.605341808266837e-01, -1.706571064818265e+00, -4.088004506549733e-01, -2.098182598375295e-04, -3.693459170512267e+00, -3.693459170512291e+00, 6.218223033984427e+02, 3.857398349348681e+02, 1.721704747222672e+03, 1.327450193823733e-01, 8.103480040314134e+02, 8.103480040314128e+02, -9.429151390269938e-03, -9.151144850426583e-03, -9.243810621695174e-03, -9.325921560255499e-03, -9.284747841465791e-03, -9.284747841465791e-03, -1.145533060656829e-02, -1.449932055904138e-02, -1.313781304885284e-02, -1.225915620398690e-02, -1.275463788992377e-02, -1.275463788992377e-02, -1.029427384494001e-02, -4.341491695198109e-01, -2.696828993706489e-01, -1.339107404454087e-01, -1.748993816414726e-01, -1.748993816414729e-01, -3.086103942277884e-02, -3.030860064048001e+00, 5.744430748978900e-01, -1.409559972641336e-01, -1.466072759388191e+00, -1.466072759388182e+00, 6.212070302135004e+01, 9.147745662687023e+03, 1.709920028441391e+03, -5.456311680465139e+00, 1.058311416048014e+03, 1.058311416048017e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_scan0_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_scan0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_scan0_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_scan0", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [7.206851403560774e-04, 7.206840772233281e-04, 7.206591386556156e-04, 7.206743685041050e-04, 7.206692776947950e-04, 7.206692776947950e-04, 6.589751019114654e-03, 6.603834137636871e-03, 6.983810870830795e-03, 7.037402763074762e-03, 6.947396615814540e-03, 6.947396615814540e-03, 1.346799003992681e-02, 1.335903367565371e-02, 1.143579078572740e-02, 1.491184149920026e-02, 1.377360609182748e-02, 1.377360609182748e-02, 1.047577364767726e-01, 1.114430006687525e-01, 1.762839365324767e-03, 3.119852264801239e-02, 9.290503313699180e-02, 9.290503313699187e-02, 1.023627273133439e-03, 3.762550884857856e-04, 1.027087406072209e-03, 6.690718818158555e-07, 5.410434182479346e-06, 5.410434182479167e-06, 2.941816163701382e-03, 2.943552974843144e-03, 2.941708819901459e-03, 2.943249942232881e-03, 2.942792319903003e-03, 2.942792319903003e-03, 8.918102061718808e-03, 8.407564390539966e-03, 8.586445518143299e-03, 8.127704014875564e-03, 8.779899218014722e-03, 8.779899218014722e-03, 4.030141202186268e-02, 4.065097750678065e-02, 6.331202411836341e-02, 6.963654269302869e-02, 3.838279538760414e-02, 3.838279538760414e-02, 9.955651220293111e-03, 1.447925503108505e-01, 7.093479897369589e-03, 2.039296549633191e-02, 7.577400072421007e-02, 7.577400072421052e-02, 1.857815447361078e-08, 1.266781359995852e-07, 1.671207493576506e-06, 2.600728421300159e-03, 4.096360640073046e-07, 4.096360640073071e-07, 3.030282766194808e-02, 2.934973311622825e-02, 2.967180690848423e-02, 2.994977196588370e-02, 2.981044298555467e-02, 2.981044298555467e-02, 3.326419925829846e-02, 2.915311424889096e-02, 2.985236403635350e-02, 3.100460844890983e-02, 3.055410949601868e-02, 3.055410949601868e-02, 4.420667692109112e-02, 7.590678803956194e-02, 8.076041839623761e-02, 8.817179444324447e-02, 7.849565791202066e-02, 7.849565791202073e-02, 4.627106255739842e-02, 3.700148306747065e-03, 1.499942485116833e-03, 8.250984376432281e-02, 1.237594060554404e-02, 1.237594060554401e-02, 1.818286179374391e-06, 2.802238052605202e-10, 9.615363493963386e-07, 3.067609087641908e-02, 8.014454350457390e-07, 8.014454350457335e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
