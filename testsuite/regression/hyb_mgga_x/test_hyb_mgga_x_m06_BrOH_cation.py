
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_m06_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.407142037538043e+01, -1.407138367590433e+01, -1.407126321839129e+01, -1.439609481600106e+01, -1.439571867067714e+01, -1.471997580803228e+01, -2.496937284912830e+00, -2.704393578639032e+00, -2.701368416050571e+00, -2.702829142097107e+00, -2.702403019980530e+00, -2.494852398338564e+00, -4.045215629222162e-01, -5.062960448998007e-01, -6.065454200903317e-01, -4.955676306774368e-01, -3.785180632197150e-01, -6.059231100013913e-01, -1.218234423919156e-01, -1.251933032939154e-01, -5.483921295536569e-01, -1.784024218410776e-01, -1.782036100390134e-01, -1.466777628116208e-01, -2.571318896895484e-02, -2.157488749878244e-02, -8.722809581513444e-02, -1.487308612598062e-02, -2.072334998830507e-02, -2.072334998830507e-02, -3.467855365375780e+00, -3.471110006153492e+00, -3.468032033061473e+00, -3.470903268364834e+00, -3.420349528748925e+00, -3.420392836948739e+00, -1.590344924546236e+00, -1.586500346023131e+00, -1.594262553536630e+00, -1.590332347910151e+00, -1.438577494071285e+00, -1.586298547833367e+00, -4.218799104126306e-01, -4.333990303100195e-01, -4.151047699223072e-01, -4.237839224791476e-01, -4.292316713113002e-01, -4.462183135844053e-01, -2.128316930627431e-01, -1.134262754978951e-01, -2.108827083727113e-01, -1.430425508827221e+00, -1.739230155029998e-01, -1.739230155029992e-01, -9.109023330582746e-03, -1.454123453359255e-02, -1.112721749749351e-02, -9.058188686934267e-02, -1.397301361244019e-02, -1.397301361244019e-02, -2.504672743993894e-01, -4.061976791671171e-01, -3.718275918009580e-01, -3.272723711292559e-01, -3.515235015010427e-01, -3.532337151555248e-01, -2.740052067282540e-01, -3.508979203219387e-01, -3.704326189025236e-01, -3.639533822653989e-01, -3.791392549389442e-01, -3.687247182240290e-01, -4.636200227070921e-01, -2.111300544633231e-01, -1.969213452395904e-01, -2.561037117082711e-01, -2.640845636915321e-01, -2.290087049890453e-01, -3.499327273523751e-01, -2.822969042514821e-02, -1.648413378014002e-01, -2.580611190077293e-01, -1.836796448145447e-01, -1.836796448145444e-01, -1.892763651237474e-02, -3.890666918364876e-03, -4.503809725320424e-03, 8.494966176361678e-03, -1.283503163831515e-02, -8.390392834215651e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_m06_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.467831118305562e+01, -1.467897898878324e+01, -1.467845899156299e+01, -1.467908690566381e+01, -1.467890432553361e+01, -1.467973708641316e+01, -1.467724604027899e+01, -1.339912282084508e+01, -1.467840334491440e+01, -1.340033401779062e+01, -1.340012292741399e+01, -1.340033401779062e+01, -2.485687786521758e+00, -3.164759275444211e+00, -2.486284570249476e+00, -2.485560004141944e+00, -2.497980886773650e+00, -2.500121684041634e+00, -2.493915038241289e+00, -2.493965655804640e+00, -2.483961716278460e+00, -2.504663389510320e+00, -3.163891526743800e+00, -2.504663389510320e+00, -7.896456975947955e-01, -7.808810992457015e-01, -7.917782719933524e-01, -5.215049862632318e-01, -5.442247413663119e-01, -5.442268289278984e-01, -5.370095092678304e-01, -8.000335214745073e-01, -7.790148518084609e-01, -8.198434810033161e-01, -5.193163951074925e-01, -5.396127152283713e-01, -2.196370275470422e-01, -1.488496075592334e-01, -2.242430400092980e-01, -1.528575159809290e-01, -5.221460381429658e-01, -1.042165743038368e+00, 2.216331974302794e-02, 1.221483338142285e-02, -1.377492111495278e-01, -5.828408672872273e-02, -1.377492111495266e-01, 3.195483983942563e-03, -3.294136753531692e-02, -3.495394875283368e-02, -1.730062637594263e-02, -3.686074359496336e-02, 1.297061515585495e-02, -1.509698144849896e-01, -1.995160881724339e-02, -1.962101226069513e-02, -2.945883814574314e-02, -1.684576667948680e-02, -2.945883814574314e-02, -1.684576667948923e-02, -5.051716112444206e+00, -5.050793298594444e+00, -5.098308201940572e+00, -5.095820767260681e+00, -5.054976341111147e+00, -5.052823744696485e+00, -5.094927440851257e+00, -5.093701117706436e+00, -5.197410653883274e+00, -5.073399062156557e+00, -5.075167348330169e+00, -5.195644752711922e+00, -1.256216557336158e+00, -1.257327133450461e+00, -1.280374251080880e+00, -1.281347738555078e+00, -1.241243665820870e+00, -1.245559337079078e+00, -1.256243581075431e+00, -1.263038952258909e+00, -1.286818006664968e+00, -1.760320370573708e+00, -1.286818006664968e+00, -1.271552056847381e+00, -5.414680012642301e-01, -5.939720189396365e-01, -4.087353400096007e-01, -4.231105357498811e-01, -3.922182902247804e-01, -4.730819782429497e-01, -5.130885619473057e-01, -5.109136176363236e-01, -5.104460793574340e-01, -5.849507221296526e-01, -5.104460793574338e-01, -5.302131850755686e-01, -5.359796677507557e-02, -5.088655504715638e-02, -1.777814528478255e-01, -5.893516621867478e-02, -8.454662827982935e-02, -6.258529267898837e-02, -1.611776568460562e+00, -1.609978755095198e+00, 7.470513580603242e-03, 2.029924052647204e-02, 7.470513580614114e-03, 2.029924052646177e-02, -8.204097444962455e-03, -1.558117802164205e-02, -1.920331680016894e-02, -1.949588232657267e-02, -1.433792670547156e-02, -1.517226368961525e-02, -1.435051663487489e-01, 4.028743481600214e-02, -1.468054413252968e-02, -2.006314476480681e-02, -1.468054413252884e-02, -2.006314476480656e-02, 3.963461640551633e-02, 2.723232544330971e-02, -3.790919248984660e-01, -3.556521887176979e-01, -1.698292729265435e-01, -1.445540519633387e-01, -1.209016382781673e-03, 2.287601754053198e-02, -7.815720159198751e-02, -5.786668673862256e-02, -7.815720159198751e-02, -4.585972840506817e-02, 6.189418612764770e-02, 6.134221854941734e-02, -4.311433306382865e-01, -4.979661913513563e-01, -4.343992751597744e-01, -4.736264703942677e-01, -3.593845275302676e-01, -3.638987242039816e-01, -3.528205470606405e-01, -3.503958087425705e-01, -3.528205470606404e-01, -3.897642298785609e-01, -4.387498324659749e-01, -4.677574847182299e-01, -1.707019017145984e-01, -1.732941287779322e-01, -3.286006846426842e-01, -2.181338987957158e-01, -3.130142369194372e-01, -2.230505850000504e-01, -2.072608436575388e-01, -2.064338144125420e-01, -2.072608436575387e-01, -3.088370271761568e-01, -3.286926367719845e-01, -3.430575401446456e-01, 1.220938521591206e-02, 1.244633308871912e-02, -1.635414533355772e-01, -1.620293530284466e-01, -2.348143812786554e-01, -2.755247799964857e-01, -8.631893674344243e-02, -5.330752596118695e-02, -8.631893674345771e-02, -5.330752596120008e-02, -2.289740217738430e-02, -2.350010702645992e-02, -5.180867500969280e-03, -5.192705838897596e-03, -5.759812839458859e-03, -6.111231238522495e-03, 1.996443338471432e-02, 1.449590353338534e-02, -1.389294816969293e-02, -1.840780796700823e-02, -1.389294816969289e-02, -9.725835964189900e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m06_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-8.912210706351872e-09, 0.000000000000000e+00, -8.911153784333334e-09, -8.911933659107854e-09, 0.000000000000000e+00, -8.910952768288588e-09, -8.911085375849119e-09, 0.000000000000000e+00, -8.909726927012747e-09, -8.914202691030088e-09, 0.000000000000000e+00, -7.528838994349561e-09, -8.912039368626197e-09, 0.000000000000000e+00, -7.527740049555071e-09, -7.527565688791258e-09, 0.000000000000000e+00, -7.527740049555071e-09, -1.255994574063738e-05, 0.000000000000000e+00, -1.927340181072015e-05, -1.255930864037105e-05, 0.000000000000000e+00, -1.256065040598025e-05, -1.254718118594810e-05, 0.000000000000000e+00, -1.254449003222082e-05, -1.254735192879987e-05, 0.000000000000000e+00, -1.254663505406226e-05, -1.256942113345209e-05, 0.000000000000000e+00, -1.253479757244588e-05, -1.928933250774105e-05, 0.000000000000000e+00, -1.253479757244588e-05, -2.044662408213715e-02, 0.000000000000000e+00, -1.987303517878452e-02, -2.064915504250373e-02, 0.000000000000000e+00, -9.264219022473432e-03, -9.998499596302914e-03, 0.000000000000000e+00, -1.022653088075756e-02, -9.944706386705311e-03, 0.000000000000000e+00, -2.244115276518019e-02, -1.911734544076965e-02, 0.000000000000000e+00, -2.799656393691607e-02, -8.988537932973849e-03, 0.000000000000000e+00, -1.103384652746368e-02, -6.095778139816434e+00, 0.000000000000000e+00, -1.784076352828419e+00, -5.704003327454076e+00, 0.000000000000000e+00, -1.695085631785437e+00, -4.471137978409823e-03, 0.000000000000000e+00, -1.227674261639912e-02, -3.540411077437530e+00, 0.000000000000000e+00, -3.665416443294502e+00, -1.656337546409289e+00, 0.000000000000000e+00, -5.810986998211025e+00, -1.656337546409288e+00, 0.000000000000000e+00, -1.259264386294893e+02, -4.000633216884970e+01, 0.000000000000000e+00, -4.013859237461520e+01, -6.168609887368959e+06, 0.000000000000000e+00, -4.195410538424524e+01, -6.958527626222075e+03, 0.000000000000000e+00, -1.768027364564411e+01, -2.938277386995048e+01, 0.000000000000000e+00, -2.968492558856947e+01, -3.804380427903767e+01, 0.000000000000000e+00, -6.526023324177064e+01, -3.804380427903767e+01, 0.000000000000000e+00, -6.526023324177068e+01, -1.988394218838688e-06, 0.000000000000000e+00, -1.990307594414832e-06, -1.988126020859138e-06, 0.000000000000000e+00, -1.990046814021036e-06, -1.988382676995197e-06, 0.000000000000000e+00, -1.990301717277281e-06, -1.988151624652261e-06, 0.000000000000000e+00, -1.990063936373635e-06, -2.240388328758659e-06, 0.000000000000000e+00, -1.990154017402743e-06, -1.988227040306718e-06, 0.000000000000000e+00, -2.242583682856367e-06, -1.284551737387167e-04, 0.000000000000000e+00, -1.284206227697533e-04, -1.241410193858362e-04, 0.000000000000000e+00, -1.242326396456797e-04, -1.322087943003205e-04, 0.000000000000000e+00, -1.310964988721090e-04, -1.283699305360644e-04, 0.000000000000000e+00, -1.272308178850459e-04, -1.233124441278644e-04, 0.000000000000000e+00, -2.066146594923681e-04, -1.233124441278644e-04, 0.000000000000000e+00, -1.258246496619725e-04, -1.493576677281418e-02, 0.000000000000000e+00, -1.994810425053033e-02, -9.363411609636921e-03, 0.000000000000000e+00, -9.220608866827669e-03, -2.267101851995466e-02, 0.000000000000000e+00, -1.928170714734580e-02, -1.878918674037133e-02, 0.000000000000000e+00, -1.637364585248422e-02, -1.258510920771632e-02, 0.000000000000000e+00, -2.058928520598098e-02, -1.258510920771632e-02, 0.000000000000000e+00, -1.563578373443887e-02, -7.080851148263324e+00, 0.000000000000000e+00, -6.961132449599455e+00, -6.761119105937836e+00, 0.000000000000000e+00, -1.511170196786622e+00, -8.197374374269391e+00, 0.000000000000000e+00, -7.933163457780295e+00, -1.291634104271718e-04, 0.000000000000000e+00, -1.293829123420463e-04, -6.568975975520327e+00, 0.000000000000000e+00, -6.730663154276864e+00, -6.568975975520321e+00, 0.000000000000000e+00, -6.730663154276860e+00, -1.802422049121657e+08, 0.000000000000000e+00, -1.967934693706887e+01, -2.787491567555075e+01, 0.000000000000000e+00, -2.457157454094373e+01, -2.006267701065054e+02, 0.000000000000000e+00, -2.201621228533936e+02, -1.424952525963248e+01, 0.000000000000000e+00, -1.021315734111734e+03, -3.783733888205146e+01, 0.000000000000000e+00, -1.199395983031733e+02, -3.783733888205147e+01, 0.000000000000000e+00, -1.199395983031732e+02, -4.660592313137315e-03, 0.000000000000000e+00, -4.261685563789119e-03, -1.292284179089781e-02, 0.000000000000000e+00, -1.260943899386820e-02, -1.194152977138991e-02, 0.000000000000000e+00, -1.146587960376475e-02, -9.216553147920309e-03, 0.000000000000000e+00, -8.331386342221764e-03, -1.071715932058429e-02, 0.000000000000000e+00, -1.022642175289554e-02, -1.071715932058429e-02, 0.000000000000000e+00, -9.719137425003433e-03, -7.035880229390210e-03, 0.000000000000000e+00, -6.503170210475030e-03, -3.076861926611592e-02, 0.000000000000000e+00, -4.233235595561157e-02, -2.508130942473945e-02, 0.000000000000000e+00, -3.127163961040804e-02, -1.818265256042428e-02, 0.000000000000000e+00, -1.788124791282800e-02, -2.187853175616009e-02, 0.000000000000000e+00, -2.147817043472869e-02, -2.187853175616009e-02, 0.000000000000000e+00, -2.617540100294417e-02, -8.358950248923075e-03, 0.000000000000000e+00, -9.776206227985333e-03, -7.201693067116776e-01, 0.000000000000000e+00, -7.067974809273957e-01, -9.259244337784852e-01, 0.000000000000000e+00, -3.766758212369348e-01, -2.191211794833239e-01, 0.000000000000000e+00, -1.278565282360372e-01, -2.292964757900814e-01, 0.000000000000000e+00, -2.296427024850288e-01, -2.292964757900815e-01, 0.000000000000000e+00, -4.378877257677258e-01, -4.398170446169520e-02, 0.000000000000000e+00, -4.257328372377574e-02, -7.493882410106650e+03, 0.000000000000000e+00, -7.295243134070844e+03, -1.410765101831096e+01, 0.000000000000000e+00, -1.437212453354469e+01, -1.504072233228695e-01, 0.000000000000000e+00, -1.389604937891962e-01, -1.364836620227629e+01, 0.000000000000000e+00, -1.473136528148566e+01, -1.364836620227628e+01, 0.000000000000000e+00, -1.473136528148565e+01, -1.775538784606575e+06, 0.000000000000000e+00, -1.539583950820346e+06, -3.208280917143870e+01, 0.000000000000000e+00, -3.194173816010025e+01, -7.416779662516052e+08, 0.000000000000000e+00, -5.795672292066337e+08, -5.218550800879766e+02, 0.000000000000000e+00, -4.846326805208020e+02, -9.762021402479103e+01, 0.000000000000000e+00, -1.243935468056213e+02, -9.762021402479110e+01, 0.000000000000000e+00, -7.790103332529667e+07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m06_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-2.394278803762266e-03, -2.393996487310871e-03, -2.394229422800918e-03, -2.393960265339774e-03, -2.394085085571499e-03, -2.393747008010472e-03, -2.394637500140900e-03, -2.719448626047738e-03, -2.394247574066173e-03, -2.719098845269725e-03, -2.719183386245597e-03, -2.719098845269725e-03, -1.716671968030535e-03, 8.436695148905281e-04, -1.713666205660851e-03, -1.717186309208711e-03, -1.654123451493805e-03, -1.643224927794787e-03, -1.675878260995637e-03, -1.675774215658552e-03, -1.723626014037631e-03, -1.620947551246845e-03, 8.408537892321285e-04, -1.620947551246845e-03, 2.400971814909003e-02, 2.291950489270337e-02, 2.432376124692103e-02, 7.394934213936002e-03, 1.247478001312226e-02, 1.305719758759375e-02, 1.123017953374033e-02, 2.632406906514431e-02, 2.207520796150716e-02, 3.075845862753148e-02, 6.441347091900252e-03, 1.466313601236129e-02, 1.092495297420897e-01, 5.331948292339996e-02, 1.105127754914813e-01, 5.280604550208165e-02, 7.392982385613040e-03, 2.433655549559627e-02, -5.857872054334898e-02, -5.067027347866217e-02, 4.438686181194542e-02, -5.498103287279273e-02, 4.438686181194650e-02, 6.029968807087559e-03, -7.873077927380457e-05, -9.480251431401686e-05, -9.309226537519953e-04, -1.168543159879102e-04, -2.924258344536720e-02, -8.477814181532938e-03, -1.254377688695029e-05, -1.204956557666136e-05, -5.313070943519524e-05, -1.678089360448836e-05, -5.313070943519524e-05, -1.678089360301968e-05, 9.719404852464870e-03, 9.725893634458190e-03, 1.038149488018683e-02, 1.036600117521057e-02, 9.765667360609810e-03, 9.754731666134388e-03, 1.033337205028086e-02, 1.033582853685052e-02, 1.014655986658697e-02, 1.004651615807773e-02, 1.005178123388812e-02, 1.014163724237212e-02, -4.412864442466695e-03, -4.426064671208193e-03, -4.441941535822521e-03, -4.441762691904784e-03, -4.261556588971454e-03, -4.337669606196169e-03, -4.409484386099526e-03, -4.442260597318717e-03, -4.427855583098770e-03, 8.064074524726720e-04, -4.427855583098770e-03, -4.453119297721979e-03, 1.831252778386309e-02, 2.532098702475961e-02, -8.695875204760342e-02, -7.869223545393376e-02, -8.614869394234451e-03, 9.601050035018726e-03, 2.102018657181030e-02, 8.621085652948668e-03, -9.403808399170967e-03, 2.403571032002432e-02, -9.403808399171031e-03, 1.568038146059537e-02, -5.829908689065055e-02, -5.887931404454743e-02, 6.923108504617743e-02, -3.790141282020984e-03, -5.041483957953000e-02, -5.682377131378460e-02, -2.575153609700882e-03, -2.633965183401582e-03, -7.330529388194160e-02, -7.134625902279841e-02, -7.330529388193781e-02, -7.134625902279222e-02, -3.975462286443636e-05, -3.979958451099632e-06, -1.059954564888974e-05, -9.773958447994394e-06, -3.190728378816096e-05, -4.159456162395924e-05, -2.804089095306363e-02, -2.545795840341041e-02, -6.408401194009776e-06, -5.266038114969890e-05, -6.408401193869434e-06, -5.266038115119614e-05, -1.562694187344726e+00, -1.513801442908872e+00, -3.127560764987765e-01, -3.666579192104222e-01, -8.413651835513893e-01, -9.091356360717121e-01, -1.355304540215126e+00, -1.421328201543077e+00, -1.104506091344352e+00, -1.163677545361558e+00, -1.104506091344352e+00, -1.185645649608759e+00, -1.656848531695629e+00, -1.659507541702818e+00, 1.495041703507380e-02, 2.808260033858126e-02, -7.722337311833609e-03, -1.983697442834676e-03, -9.108926813633336e-02, -8.789459207863955e-02, -8.127715575082706e-02, -8.453662268801181e-02, -8.127715575082700e-02, -7.092133183278283e-02, -6.955659347413562e-02, -7.044240728812320e-02, 3.648920787715558e-02, 3.705682090208075e-02, 7.089904973513436e-02, 2.942398070474339e-02, 6.079570151028667e-03, -2.440541101104921e-02, -5.362612250701720e-03, -6.095148477503044e-03, -5.362612250701624e-03, 3.017641993759631e-02, -1.140688032356661e-02, -7.254784542649934e-03, -2.941948062324031e-02, -2.933002230420802e-02, -1.343726709555585e-02, -1.517793590830935e-02, -1.953317297598582e-02, 4.944961626163908e-03, -5.255994075254316e-02, -6.645834463333099e-02, -5.255994075254538e-02, -6.645834463332828e-02, -1.087262003089401e-03, -1.187352954827262e-03, -2.374451828793433e-07, -2.380257790625010e-07, -5.719937622591139e-05, -7.282762981936359e-05, -6.572786400592793e-03, -2.234959117515222e-03, -1.405340241491626e-05, -4.204786818601031e-05, -1.405340241491620e-05, -4.268184941655863e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
