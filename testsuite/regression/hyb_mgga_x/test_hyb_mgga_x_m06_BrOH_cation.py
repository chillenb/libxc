
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_m06_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.468139565854216e+01, -1.468133425261709e+01, -1.468113521124960e+01, -1.468204165278232e+01, -1.468155620230686e+01, -1.468155620230686e+01, -2.494079754419976e+00, -2.494039138168378e+00, -2.493152623364808e+00, -2.494897999055520e+00, -2.493970310701288e+00, -2.493970310701288e+00, -4.958068428131781e-01, -4.955590344911256e-01, -4.905258027613276e-01, -5.024313335148392e-01, -5.011191763411126e-01, -5.011191763411126e-01, -1.624127356247110e-01, -1.633537850950686e-01, -4.443358975082787e-01, -1.634637362281938e-01, -1.692854357409074e-01, -1.692854357409072e-01, -2.571276998721310e-02, -2.706099148821122e-02, -1.339822122920064e-01, -1.487202578399418e-02, -2.072198294314083e-02, -2.072198294314083e-02, -3.467257252838145e+00, -3.470518961509405e+00, -3.467446375119902e+00, -3.470323311638214e+00, -3.468861164270356e+00, -3.468861164270356e+00, -1.559407724649644e+00, -1.560638652167801e+00, -1.566913574181637e+00, -1.567735075409079e+00, -1.556585620343772e+00, -1.556585620343772e+00, -4.274365438222532e-01, -4.216546138942333e-01, -3.901635103677371e-01, -3.968285073135617e-01, -4.339909569213699e-01, -4.339909569213699e-01, -2.040789588610608e-01, -1.798692431896082e-01, -2.026224980405421e-01, -1.349013408227812e+00, -1.671677188705878e-01, -1.671677188705873e-01, -1.148794887631583e-02, -1.453893957291563e-02, -1.112583240745888e-02, -1.780683684228550e-01, -1.397164470063497e-02, -1.397164470063496e-02, -2.500107418184868e-01, -4.049544139018369e-01, -3.749811184185142e-01, -3.278016760246535e-01, -3.540191425059754e-01, -3.540191425059753e-01, -2.727964851594261e-01, -3.698303630827155e-01, -3.819508444472948e-01, -3.617524162938276e-01, -3.767508660651425e-01, -3.767508660651425e-01, -4.583583804561231e-01, -2.076415872147747e-01, -2.369626766661036e-01, -2.683310969864104e-01, -2.542372052971097e-01, -2.542372052971097e-01, -3.400557565620148e-01, -1.295719462972489e-01, -1.630882773414815e-01, -2.466670300660453e-01, -1.783287039247877e-01, -1.783287039247874e-01, -3.615249866975882e-02, -3.890375393449784e-03, -8.177076644194261e-03, -1.766252112001778e-01, -1.283362828108376e-02, -1.283362828108374e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_m06_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.346836292745039e+01, -1.346927631435048e+01, -1.346857686976672e+01, -1.346943223672260e+01, -1.346917342375915e+01, -1.347031617904471e+01, -1.346677228544863e+01, -1.346723931903634e+01, -1.346849849584953e+01, -1.346839962706938e+01, -1.346849849584953e+01, -1.346839962706938e+01, -2.779025705183217e+00, -2.779080755309542e+00, -2.779457535760632e+00, -2.779401701813772e+00, -2.788442801261809e+00, -2.790222749183639e+00, -2.783393097219867e+00, -2.783877099172476e+00, -2.777574514076704e+00, -2.792116419223392e+00, -2.777574514076704e+00, -2.792116419223392e+00, -6.297900370661498e-01, -6.274890830492256e-01, -6.298133584530033e-01, -6.279891604513528e-01, -6.280882495571484e-01, -6.199635442345349e-01, -6.133279816947981e-01, -6.112714421032966e-01, -6.340649133217801e-01, -5.797704950483439e-01, -6.340649133217801e-01, -5.797704950483439e-01, -1.303648096797207e-01, -1.488691768516923e-01, -1.366689305501767e-01, -1.530609585296635e-01, -7.207154574612950e-01, -8.559694729977674e-01, 4.133891071524117e-02, 2.189240063153003e-02, -1.371493058136781e-01, -5.251050839513150e-03, -1.371493058136769e-01, -5.251050839498123e-03, -3.293887677793365e-02, -3.495267744472613e-02, -3.446927768854037e-02, -3.685738542196482e-02, -1.457368713335862e-01, -1.480892503796785e-01, -1.994650293317001e-02, -1.961692391289298e-02, -2.945350522930879e-02, -1.683651117639012e-02, -2.945350522930880e-02, -1.683651117639256e-02, -5.052394371999508e+00, -5.051432434863542e+00, -5.098968069825538e+00, -5.096442736766416e+00, -5.055637883177117e+00, -5.053450987253306e+00, -5.095574007863336e+00, -5.094313499274713e+00, -5.075847905194129e+00, -5.074031477143900e+00, -5.075847905194129e+00, -5.074031477143900e+00, -1.291385116949098e+00, -1.291291729657287e+00, -1.310206496982050e+00, -1.310220974058850e+00, -1.270590723312950e+00, -1.275571570943078e+00, -1.280961962514024e+00, -1.288234196324101e+00, -1.322868585736537e+00, -1.303313350340966e+00, -1.322868585736537e+00, -1.303313350340966e+00, -5.585897301671243e-01, -5.541845856269936e-01, -4.314769160399488e-01, -4.440082973352833e-01, -4.320122687956547e-01, -5.006249784924740e-01, -5.539747689597532e-01, -5.461531645591238e-01, -5.254769811518618e-01, -5.483369685723221e-01, -5.254769811518617e-01, -5.483369685723221e-01, -3.435129498559969e-02, -2.976724415874843e-02, -5.487309728436689e-02, -5.621991431318304e-02, -6.212537995339489e-02, -4.349228909355377e-02, -1.737856733728050e+00, -1.735989247481678e+00, 2.016066195484590e-02, 2.777491943040462e-02, 2.016066195485655e-02, 2.777491943039440e-02, -1.498543259567253e-02, -1.557303573132408e-02, -1.919385233410951e-02, -1.948555752689756e-02, -1.433278935010267e-02, -1.516551307898995e-02, -1.274474059952156e-01, -1.248615652451318e-01, -1.466512950476358e-02, -2.006102089225536e-02, -1.466512950476274e-02, -2.006102089225510e-02, 3.699013264631860e-02, 2.479709024009163e-02, -3.815408866979308e-01, -3.581371128497577e-01, -1.603884578057177e-01, -1.351325904571130e-01, 6.396932923882598e-03, 1.948452392412668e-02, -6.941553284519016e-02, -4.923176491593920e-02, -6.941553284519013e-02, -4.923176491593896e-02, 5.563846699663988e-02, 5.549234456788583e-02, -4.331641269323017e-01, -4.383105549712238e-01, -4.373265638158786e-01, -4.324017364644843e-01, -3.632029741622023e-01, -3.676668463369732e-01, -3.568914541933481e-01, -3.543441156053138e-01, -3.568914541933481e-01, -3.543441156053138e-01, -4.716942096473380e-01, -4.522667966017249e-01, -1.702434227150277e-01, -1.728668296780468e-01, -2.207017122675929e-01, -2.206740915472509e-01, -2.403019676250930e-01, -2.420916451962378e-01, -2.155290368416195e-01, -2.147876581565863e-01, -2.155290368416194e-01, -2.147876581565863e-01, -3.416525727031078e-01, -3.545138534257367e-01, -1.452607584892741e-01, -1.458506892001284e-01, -1.572023984766799e-01, -1.554214497367049e-01, -2.534068653956846e-01, -2.864376264678344e-01, -7.230114785866792e-02, -3.983002282954187e-02, -7.230114785868307e-02, -3.983002282955485e-02, -4.677788379003261e-02, -4.840431256502026e-02, -5.179944461226277e-03, -5.191241506686655e-03, -1.052664325276109e-02, -1.119281142407652e-02, -7.344380264813244e-02, -6.652066401596819e-02, -1.387689086795477e-02, -1.840609856228918e-02, -1.387689086795472e-02, -1.840609856228845e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m06_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-7.607738753668160e-09, 0.000000000000000e+00, -7.606813228980276e-09, -7.607538718297190e-09, 0.000000000000000e+00, -7.606668102635432e-09, -7.606878725551519e-09, 0.000000000000000e+00, -7.605728269003936e-09, -7.609129011791336e-09, 0.000000000000000e+00, -7.608598491046301e-09, -7.607616791580770e-09, 0.000000000000000e+00, -7.607436978289583e-09, -7.607616791580770e-09, 0.000000000000000e+00, -7.607436978289583e-09, -1.582066502099856e-05, 0.000000000000000e+00, -1.582744215331149e-05, -1.581848839826072e-05, 0.000000000000000e+00, -1.582649640915635e-05, -1.578145196432180e-05, 0.000000000000000e+00, -1.577537726449386e-05, -1.576994179798562e-05, 0.000000000000000e+00, -1.577327499843419e-05, -1.583521679377367e-05, 0.000000000000000e+00, -1.573860445519576e-05, -1.583521679377367e-05, 0.000000000000000e+00, -1.573860445519576e-05, -1.504639761814818e-02, 0.000000000000000e+00, -1.483484250782247e-02, -1.511973600464197e-02, 0.000000000000000e+00, -1.487749333551487e-02, -1.616753177095068e-02, 0.000000000000000e+00, -1.631588207210306e-02, -1.537099843978498e-02, 0.000000000000000e+00, -1.523346392399922e-02, -1.458317049369011e-02, 0.000000000000000e+00, -1.605223845447048e-02, -1.458317049369011e-02, 0.000000000000000e+00, -1.605223845447048e-02, -2.143497283265212e+00, 0.000000000000000e+00, -1.839371056753560e+00, -2.100926747741815e+00, 0.000000000000000e+00, -1.762046274275805e+00, -1.153046056382691e-02, 0.000000000000000e+00, -9.751865024787185e-03, -5.146797163386859e+00, 0.000000000000000e+00, -4.552392525799846e+00, -1.838105637093699e+00, 0.000000000000000e+00, -1.196476937556587e+01, -1.838105637093699e+00, 0.000000000000000e+00, -1.196476937556587e+01, -4.117608530063857e+01, 0.000000000000000e+00, -4.063572643141391e+01, -4.349210580192102e+01, 0.000000000000000e+00, -4.309710636033719e+01, -2.259932146441732e+01, 0.000000000000000e+00, -2.228452269120182e+01, -3.933042133588087e+01, 0.000000000000000e+00, -3.802701590340916e+01, -4.152030048270458e+01, 0.000000000000000e+00, -1.124196948192705e+02, -4.152030048270471e+01, 0.000000000000000e+00, -1.124196948192707e+02, -1.989946898566826e-06, 0.000000000000000e+00, -1.991772680988544e-06, -1.989660096372649e-06, 0.000000000000000e+00, -1.991493982792515e-06, -1.989898760682266e-06, 0.000000000000000e+00, -1.991740533872986e-06, -1.989653130526735e-06, 0.000000000000000e+00, -1.991487820037970e-06, -1.989797073300975e-06, 0.000000000000000e+00, -1.991614571793751e-06, -1.989797073300975e-06, 0.000000000000000e+00, -1.991614571793751e-06, -1.363673418751480e-04, 0.000000000000000e+00, -1.360633006617261e-04, -1.305711743435503e-04, 0.000000000000000e+00, -1.304669707454526e-04, -1.391724399206010e-04, 0.000000000000000e+00, -1.381049938477307e-04, -1.339979418349227e-04, 0.000000000000000e+00, -1.328829765962880e-04, -1.309572342081604e-04, 0.000000000000000e+00, -1.327801784515189e-04, -1.309572342081604e-04, 0.000000000000000e+00, -1.327801784515189e-04, -1.660582514303623e-02, 0.000000000000000e+00, -1.669096174937571e-02, -1.045251140698958e-02, 0.000000000000000e+00, -1.024704582866016e-02, -2.800927262576977e-02, 0.000000000000000e+00, -2.268834382759110e-02, -2.367021903202593e-02, 0.000000000000000e+00, -1.986319744460347e-02, -1.367870860903558e-02, 0.000000000000000e+00, -1.747765004832362e-02, -1.367870860903558e-02, 0.000000000000000e+00, -1.747765004832361e-02, -9.471185087042963e+00, 0.000000000000000e+00, -9.549660585272550e+00, -1.667484458300320e+00, 0.000000000000000e+00, -1.645942750750655e+00, -1.177910328452308e+01, 0.000000000000000e+00, -1.069903345884955e+01, -1.571219484378707e-04, 0.000000000000000e+00, -1.573740438867354e-04, -8.067921509220174e+00, 0.000000000000000e+00, -7.838856742580520e+00, -8.067921509220165e+00, 0.000000000000000e+00, -7.838856742580509e+00, -6.003427233794690e+01, 0.000000000000000e+00, -5.167107228228173e+01, -4.930866459445995e+01, 0.000000000000000e+00, -4.581090306195040e+01, -2.710239530306075e+02, 0.000000000000000e+00, -3.020461602506846e+02, -2.193318066627371e+01, 0.000000000000000e+00, -2.043800882686390e+01, -1.495521815109603e+02, 0.000000000000000e+00, -1.277132831198274e+02, -1.495521815109598e+02, 0.000000000000000e+00, -1.277132831198272e+02, -4.745277525227104e-03, 0.000000000000000e+00, -4.338679489956135e-03, -1.310782793852088e-02, 0.000000000000000e+00, -1.278544701600828e-02, -1.145898081701117e-02, 0.000000000000000e+00, -1.101127652528539e-02, -8.921061615895617e-03, 0.000000000000000e+00, -8.458286172963811e-03, -1.032942096132652e-02, 0.000000000000000e+00, -9.862638035364045e-03, -1.032942096132652e-02, 0.000000000000000e+00, -9.862638035364038e-03, -7.273349490718701e-03, 0.000000000000000e+00, -6.718190932734601e-03, -3.127891617231164e-02, 0.000000000000000e+00, -3.071487315851459e-02, -2.561231141808844e-02, 0.000000000000000e+00, -2.509428342562392e-02, -1.864381818374321e-02, 0.000000000000000e+00, -1.833178896403037e-02, -2.242316681384060e-02, 0.000000000000000e+00, -2.199325509672694e-02, -2.242316681384060e-02, 0.000000000000000e+00, -2.199325509672694e-02, -9.601671346575736e-03, 0.000000000000000e+00, -9.252135314892157e-03, -7.538675722010033e-01, 0.000000000000000e+00, -7.407648325541012e-01, -4.234299265810745e-01, 0.000000000000000e+00, -4.093460429318278e-01, -1.532272485037982e-01, 0.000000000000000e+00, -1.502074472380919e-01, -2.551309353150457e-01, 0.000000000000000e+00, -2.555672659285550e-01, -2.551309353150457e-01, 0.000000000000000e+00, -2.555672659285551e-01, -4.826947357416653e-02, 0.000000000000000e+00, -4.630316752182675e-02, -2.027309171225626e+01, 0.000000000000000e+00, -2.035702831057423e+01, -1.912886721978768e+01, 0.000000000000000e+00, -1.923030536558794e+01, -1.773018180119059e-01, 0.000000000000000e+00, -1.550077794938715e-01, -1.788715361600805e+01, 0.000000000000000e+00, -1.888524826454222e+01, -1.788715361600805e+01, 0.000000000000000e+00, -1.888524826454221e+01, -3.524465184186613e+01, 0.000000000000000e+00, -3.612897391553782e+01, -1.902560081241750e+02, 0.000000000000000e+00, -3.276410205561423e+02, -1.027059957994780e+02, 0.000000000000000e+00, -1.094194239988395e+02, -2.001442166857148e+01, 0.000000000000000e+00, -1.872470744244857e+01, -3.040480415710866e+02, 0.000000000000000e+00, -1.326671574718850e+02, -3.040480415710870e+02, 0.000000000000000e+00, -1.326671574718854e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m06_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m06_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-2.699650620671882e-03, -2.699353485884884e-03, -2.699588309195794e-03, -2.699307856252733e-03, -2.699416334545560e-03, -2.699051006145148e-03, -2.700114174092940e-03, -2.699949482422710e-03, -2.699610930572052e-03, -2.699613268551469e-03, -2.699610930572052e-03, -2.699613268551469e-03, -3.908780277011624e-04, -3.911913840434836e-04, -3.884872368606786e-04, -3.894795583958694e-04, -3.390929712812983e-04, -3.295811736707766e-04, -3.647348972909453e-04, -3.630377489619492e-04, -3.964208431689303e-04, -3.175282370260036e-04, -3.964208431689303e-04, -3.175282370260036e-04, 1.736135042528894e-02, 1.642571152182782e-02, 1.761198815200406e-02, 1.657810520700609e-02, 2.069569863884629e-02, 2.091863267514463e-02, 1.892390641012014e-02, 1.832983980448764e-02, 1.598605306791744e-02, 2.057302873143556e-02, 1.598605306791744e-02, 2.057302873143556e-02, 4.968627244220668e-02, 5.481284436738807e-02, 5.335374448820392e-02, 5.475490864118789e-02, 1.830265177437619e-02, 2.113316959140772e-02, -4.577009426289464e-02, -4.252507319748818e-02, 4.907795272238580e-02, -4.398045570394263e-02, 4.907795272238691e-02, -4.398045570393910e-02, -7.843923421049025e-05, -9.465274471168555e-05, -9.332003729508996e-05, -1.164502485077084e-04, -6.681169545722739e-03, -8.185902740887744e-03, -1.206423165192607e-05, -1.165961240968390e-05, -5.253077166408896e-05, -1.556906424460463e-05, -5.253077166408895e-05, -1.556906424313601e-05, 9.720122123687058e-03, 9.726568974228817e-03, 1.038203670663584e-02, 1.036651623101315e-02, 9.766356221421840e-03, 9.755388097940998e-03, 1.033391425999556e-02, 1.033634236665096e-02, 1.005242082647055e-02, 1.004711258671142e-02, 1.005242082647055e-02, 1.004711258671142e-02, -3.839793209906753e-03, -3.871031609991402e-03, -3.954747439405693e-03, -3.968983286025700e-03, -3.776036304067091e-03, -3.842135769800923e-03, -3.999819813137199e-03, -4.025369272461489e-03, -3.845378057453120e-03, -3.934152444699708e-03, -3.845378057453120e-03, -3.934152444699708e-03, 2.128293053398297e-02, 1.996734901893798e-02, -8.009906806625945e-02, -7.239532734628414e-02, -8.011197217459055e-04, 1.473857354063520e-02, 2.784000594776028e-02, 1.498274002086653e-02, -6.385460448085996e-03, 1.896242704687160e-02, -6.385460448086059e-03, 1.896242704687156e-02, -5.394843113372321e-02, -5.402715256572325e-02, -1.420838302381495e-03, -6.010525637462631e-04, -4.616198474323758e-02, -5.261657711672062e-02, -2.915507188733364e-04, -3.465332725467112e-04, -6.800722613551166e-02, -6.582918661571004e-02, -6.800722613550791e-02, -6.582918661570396e-02, -3.334224373122561e-06, -3.475666248747615e-06, -9.796506254304774e-06, -8.964622305132346e-06, -3.064757721772338e-05, -3.986551380387610e-05, -2.582015486637234e-02, -2.992029416828594e-02, -5.330364614018799e-06, -5.223469237890937e-05, -5.330364613878469e-06, -5.223469238040660e-05, -1.554149878611974e+00, -1.505728834718027e+00, -3.107149097657865e-01, -3.644175226327176e-01, -8.549955841714212e-01, -9.233997135711403e-01, -1.371269010345076e+00, -1.413866593261839e+00, -1.119821439223473e+00, -1.179383991738191e+00, -1.119821439223473e+00, -1.179383991738189e+00, -1.638805638190379e+00, -1.642062380415501e+00, 1.550340229421879e-02, 1.675447700164414e-02, -6.856702916451800e-03, -1.189360320599264e-02, -8.936959492699650e-02, -8.621452287814105e-02, -7.967750118741029e-02, -8.297236276773942e-02, -7.967750118741024e-02, -8.297236276773941e-02, -6.198787179752863e-02, -7.382284288280244e-02, 3.814734482048717e-02, 3.876009927941892e-02, 3.504937297704755e-02, 3.276550317301787e-02, -1.576896999858939e-02, -1.560747417444920e-02, -2.120730227008251e-05, -7.059321462009828e-04, -2.120730227001745e-05, -7.059321462010389e-04, -7.433614023918696e-03, -3.753921090703673e-03, -6.821133835316250e-03, -6.795196659170558e-03, -1.278789565963485e-02, -1.446643321956445e-02, -9.761000116454463e-03, 1.079461615949290e-02, -4.943998465333871e-02, -6.240781660501461e-02, -4.943998465334091e-02, -6.240781660501192e-02, -1.020640576833377e-04, -1.112278848937792e-04, -1.943041607077826e-07, -2.116386344859898e-07, -5.440055606063499e-06, -6.928108641145907e-06, -5.125022664838450e-02, -5.846498790779116e-02, -1.199743350587639e-05, -4.169944129660308e-05, -1.199743350587633e-05, -4.169944129537001e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
