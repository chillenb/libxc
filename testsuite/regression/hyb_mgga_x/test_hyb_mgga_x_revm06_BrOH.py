
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_revm06_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revm06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.196953744945879e+01, -1.196952314166106e+01, -1.196950730987262e+01, -1.196973783243876e+01, -1.196952953807395e+01, -1.196952953807395e+01, -2.103438901397541e+00, -2.103427569809480e+00, -2.103222551659407e+00, -2.104435005537111e+00, -2.103439549302065e+00, -2.103439549302065e+00, -4.177520628227714e-01, -4.178379947408192e-01, -4.208351435030585e-01, -4.252791278577560e-01, -4.177825695260495e-01, -4.177825695260495e-01, -1.348565735264610e-01, -1.352872176782458e-01, -4.538240203097801e-01, -1.047194884218472e-01, -1.349675470563299e-01, -1.349675470563299e-01, -3.016913386812299e-02, -3.152904057926499e-02, -1.011197526510188e-01, -1.477339029015882e-02, -3.119981202210730e-02, -3.119981202210730e-02, -2.750885648331148e+00, -2.747275698715793e+00, -2.750494775842032e+00, -2.747689705307223e+00, -2.749069790261333e+00, -2.749069790261333e+00, -1.292892099833154e+00, -1.299370725723189e+00, -1.294274303302136e+00, -1.299296243325124e+00, -1.295584390801527e+00, -1.295584390801527e+00, -3.436066957960273e-01, -3.395621308001104e-01, -3.309883355687394e-01, -3.229945676845138e-01, -3.491119436009694e-01, -3.491119436009694e-01, -1.156704986390304e-01, -1.406787066079277e-01, -1.101409961261889e-01, -1.062852110099602e+00, -9.944919390565571e-02, -9.944919390565571e-02, -1.424673569946096e-02, -1.626782670637882e-02, -1.218860587415302e-02, -1.174803370009697e-01, -1.482648156789818e-02, -1.482648156789820e-02, -3.206520869749762e-01, -2.868903532757172e-01, -2.930511755014676e-01, -3.026221405292250e-01, -2.972875424977501e-01, -2.972875424977501e-01, -2.920040360456393e-01, -3.122471985053498e-01, -3.068695839914244e-01, -2.987531422702743e-01, -3.035814970379515e-01, -3.035814970379515e-01, -3.618180494243239e-01, -1.754334371290626e-01, -1.950977492725975e-01, -2.228857195430201e-01, -2.070574880853975e-01, -2.070574880853975e-01, -2.860354777566487e-01, -9.814776822058312e-02, -1.134939143112470e-01, -2.045219606908665e-01, -1.041777125620750e-01, -1.041777125620751e-01, -3.541998707029018e-02, -4.473418331656345e-03, -8.485786193978358e-03, -9.935371032251041e-02, -1.260846796564650e-02, -1.260846796564649e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_revm06_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revm06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.258839654286422e+01, -1.258835547252947e+01, -1.258817448813521e+01, -1.258883694899673e+01, -1.258837498618799e+01, -1.258837498618799e+01, -2.454755799804707e+00, -2.454680663531635e+00, -2.452373130270149e+00, -2.452487656911897e+00, -2.454753017783969e+00, -2.454753017783969e+00, -4.462533694622357e-01, -4.460630708795832e-01, -4.487273430224831e-01, -4.390796360142256e-01, -4.461693594304251e-01, -4.461693594304251e-01, -1.238309815911455e-01, -1.221153644282325e-01, -6.565787304516085e-01, -3.596963677924114e-02, -1.233174157589592e-01, -1.233174157589592e-01, -3.887002673218927e-02, -4.048835272540650e-02, -8.671979753355108e-02, -1.959505629706013e-02, -4.006487638951294e-02, -4.006487638951309e-02, -2.681998824996628e+00, -2.675632096519708e+00, -2.681270759035931e+00, -2.676324783722396e+00, -2.678803544882816e+00, -2.678803544882816e+00, -1.309181404358349e+00, -1.323397142350269e+00, -1.300645514189377e+00, -1.312826175024697e+00, -1.328636125220937e+00, -1.328636125220937e+00, -3.638611697195161e-01, -3.911850914200541e-01, -3.712818237834795e-01, -3.681233554287200e-01, -3.704617086982960e-01, -3.704617086982960e-01, -4.785560137035325e-03, -1.550161635712740e-01, -3.457062077354392e-03, -1.238486087379459e+00, -2.440117541148283e-02, -2.440117541148283e-02, -1.888909580779511e-02, -2.154084374319716e-02, -1.613339990956770e-02, -6.440582053411167e-02, -1.963859198955661e-02, -1.963859198955648e-02, -5.165903400486216e-01, -4.035646522476673e-01, -4.588230276833465e-01, -4.964998402024145e-01, -4.789824285552254e-01, -4.789824285552254e-01, -4.836881450579401e-01, -3.077661255591672e-01, -3.154054258976240e-01, -3.130765491153616e-01, -3.226480283865417e-01, -3.226480283865417e-01, -4.215747593447727e-01, -1.692030922022233e-01, -1.698995122277862e-01, -2.408345949842538e-01, -2.000978435567571e-01, -2.000978435567571e-01, -3.053111483818399e-01, -9.233760308926582e-02, -7.630776649577413e-02, -2.284431454998690e-01, -1.110823729051543e-02, -1.110823729051526e-02, -4.569696624341564e-02, -5.961017474792131e-03, -1.128525393087952e-02, -1.030841501658799e-02, -1.671586191719883e-02, -1.671586191719902e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_revm06_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revm06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.364619619073990e-09, -4.364577357217632e-09, -4.364336463133408e-09, -4.365027950425676e-09, -4.364597789767974e-09, -4.364597789767974e-09, -6.814648776665124e-06, -6.814623893317888e-06, -6.812354450108093e-06, -6.803513609041963e-06, -6.814560912949931e-06, -6.814560912949931e-06, -4.901120614365694e-03, -4.908893455570811e-03, -5.040265196725864e-03, -4.861890150165344e-03, -4.903957633846822e-03, -4.903957633846822e-03, -5.522176888182170e-01, -5.420592268393475e-01, -2.748741077224327e-03, -1.119686290703801e+00, -5.495973890879906e-01, -5.495973890879906e-01, -1.748344864696444e+01, -1.751175750977882e+01, -6.079112494232450e+00, -1.316322660153536e+01, -1.818156104063779e+01, -1.818156104063779e+01, -1.213216947151405e-06, -1.211601552358764e-06, -1.213033061653883e-06, -1.211778130054943e-06, -1.212416925401394e-06, -1.212416925401394e-06, -5.437607440272788e-05, -5.308152205347416e-05, -5.442603465072957e-05, -5.340920268033750e-05, -5.342141894681106e-05, -5.342141894681106e-05, -8.532280338567214e-03, -6.365721944808772e-03, -1.077725407465900e-02, -9.592578848199433e-03, -7.281837816955069e-03, -7.281837816955069e-03, -1.885940763238114e+00, -3.673398485846461e-01, -2.092588156922119e+00, -7.842920268910671e-05, -1.515841203909197e+00, -1.515841203909197e+00, -1.368948354595479e+01, -1.386367684015384e+01, -3.888701761336281e+01, -5.186135183664101e+00, -2.065996795539343e+01, -2.065996795539343e+01, -7.727077907281749e-03, -6.946416282849780e-03, -7.086439753457651e-03, -7.307490065497533e-03, -7.184087064985823e-03, -7.184087064985823e-03, -8.382015397689874e-03, -1.366141607453737e-02, -1.191064568383581e-02, -1.037142955809535e-02, -1.117182323034861e-02, -1.117182323034861e-02, -5.382384247554950e-03, -1.923947311064380e-01, -1.203176076870711e-01, -5.854683221234845e-02, -8.473914901367818e-02, -8.473914901367824e-02, -2.107762305380250e-02, -5.311742602943363e+00, -4.684071778390488e+00, -7.842735096577413e-02, -3.519474324541777e+00, -3.519474324541781e+00, -1.371288563971919e+01, -2.435234013499398e+01, -2.007956748266418e+01, -4.324260847048099e+00, -3.023543843938848e+01, -3.023543843938841e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_revm06_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revm06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_revm06_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revm06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-9.657791835678898e-04, -9.658370750490464e-04, -9.660910465888509e-04, -9.651500051072548e-04, -9.658096667646013e-04, -9.658096667646013e-04, 5.718634966114209e-04, 5.710358603128035e-04, 5.454282507813956e-04, 5.540958683116421e-04, 5.716397638924106e-04, 5.716397638924106e-04, 3.117369777587154e-03, 3.186444805239859e-03, 5.502694954883862e-03, 4.193325744925483e-03, 3.140927713377280e-03, 3.140927713377280e-03, 1.578830987474690e-02, 1.228038043859559e-02, 8.429570972408030e-03, -1.739314097992815e-02, 1.477176590026800e-02, 1.477176590026800e-02, -1.131357895006257e-03, -1.287204522196174e-03, -2.350294588313002e-02, -4.451768218094245e-05, -1.304813261462103e-03, -1.304813261462409e-03, -9.887306374741613e-03, -1.001950947318477e-02, -9.902050108386609e-03, -1.000476754311798e-02, -9.953730765159258e-03, -9.953730765159258e-03, 1.078777032326464e-03, 1.109519878855114e-03, 1.035137044632859e-03, 1.079399260695542e-03, 1.129293671642981e-03, 1.129293671642981e-03, -1.508914092784179e-02, -2.970934330842971e-02, -3.341253829239843e-03, -1.899579531143682e-02, -2.020430214272047e-02, -2.020430214272047e-02, -5.418042154369748e-02, 3.316182247333921e-02, -5.536711477677067e-02, -5.946736861252543e-03, -3.349804232978484e-02, -3.349804232978484e-02, -6.132605324782252e-05, -7.542995754446252e-05, -1.255661371671982e-04, -3.609609188468909e-02, -7.010090236587928e-05, -7.010090236622370e-05, 4.225363718705297e-01, 7.612171938210129e-02, 2.158300606432181e-01, 3.348960207697287e-01, 2.761795638366148e-01, 2.761795638366148e-01, 3.456055954951340e-01, -1.532016838077471e-02, -2.613421648990033e-02, -5.149161986442936e-02, -3.021543501730118e-02, -3.021543501730117e-02, -2.032967012109381e-02, 1.872229864749576e-02, 1.598596349599644e-03, 7.255154297498065e-03, 3.250128734990019e-03, 3.250128734990014e-03, 1.211048881939494e-03, -1.849934801450735e-02, -3.311709522596382e-02, 3.874700257234757e-03, -6.339799428806232e-02, -6.339799428806263e-02, -7.037395525454887e-04, -1.707579280359422e-06, -2.330853296927254e-05, -6.618259720514694e-02, -6.048890518430294e-05, -6.048890518451223e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
