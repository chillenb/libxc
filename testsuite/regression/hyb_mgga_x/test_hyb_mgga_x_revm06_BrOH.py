
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_revm06_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revm06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.127498050379247e+01, -1.127498366663228e+01, -1.127502015509433e+01, -1.127496534644180e+01, -1.127498201674794e+01, -1.127498201674794e+01, -1.927596456884446e+00, -1.927615386212932e+00, -1.928245459879058e+00, -1.928157426797171e+00, -1.927610882329127e+00, -2.285075150916632e+00, -3.540442029167971e-01, -4.921064518933724e-01, -4.905611477463938e-01, -4.895240964947407e-01, -4.921040762753773e-01, -4.921040762753773e-01, -1.383076633869115e-01, -1.391668432630250e-01, -3.937886034758654e-01, -1.153580483272325e-01, -1.385903008760049e-01, -1.385903008760049e-01, -3.017206858673625e-02, -3.153329457915646e-02, -1.018811287543872e-01, -1.477776695485621e-02, -3.120345746705866e-02, -3.120345746705866e-02, -2.751625921420239e+00, -2.748006820302607e+00, -2.751224696994934e+00, -2.630167817984761e+00, -2.749818031333730e+00, -2.749818031333730e+00, -1.072629297331660e+00, -1.082579713124178e+00, -1.068509761817125e+00, -1.076325163040358e+00, -1.084701081696774e+00, -1.320253045920404e+00, -3.584214903361702e-01, -3.552020538361215e-01, -3.532369011139729e-01, -3.459999822518535e-01, -3.608553972873167e-01, -3.279372067862256e-01, -3.911833308274251e-02, -1.435120067647115e-01, -3.747464153382706e-02, -1.144536578315794e+00, -1.032462718823508e-01, -1.032462718823508e-01, -7.827598101162455e-03, -1.627261254571336e-02, -1.219017858358209e-02, -4.230716170955998e-02, -8.141045623447378e-03, -1.483209960727419e-02, -3.224298349089444e-01, -2.884160770946317e-01, -2.894358147324197e-01, -3.042756883693309e-01, -2.989036613674301e-01, -2.989036613674301e-01, -2.952803198564756e-01, -3.140817726197213e-01, -3.092544283660092e-01, -3.015514349115472e-01, -3.063241236197830e-01, -2.852181886174553e-01, -3.828329279674653e-01, -1.175857588540567e-01, -2.003641880385716e-01, -1.927178138957203e-01, -2.145625227907156e-01, -2.145625227907156e-01, -2.518190918141116e-01, -9.849136657600616e-02, -1.149915345024674e-01, -2.168889727404493e-01, -3.467719037849767e-02, -1.071318243767649e-01, -3.548191681832145e-02, -4.473629874766931e-03, -8.486063878239695e-03, -1.023990502991277e-01, -1.261281855267021e-02, -1.261281855267020e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_revm06_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revm06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.353780065951279e+01, -1.353774096843459e+01, -1.353750730444964e+01, -1.353847398077128e+01, -1.353776903037188e+01, -1.353776903037188e+01, -2.677773142760202e+00, -2.677668400914871e+00, -2.674552354009538e+00, -2.675986791264364e+00, -2.677756817694036e+00, -2.312982246214573e+00, -5.235303242113585e-01, -4.191258267199177e-01, -4.388294745520411e-01, -4.262666793921678e-01, -4.188534036758742e-01, -4.188534036758742e-01, -1.246007087496134e-01, -1.226915323563830e-01, -7.280455610824060e-01, -4.810386066804863e-02, -1.240436633681357e-01, -1.240436633681357e-01, -3.888204192790658e-02, -4.050573880123071e-02, -8.931676792093729e-02, -1.961306582529024e-02, -4.007977632736687e-02, -4.007977632736703e-02, -2.680992081915584e+00, -2.674635359476623e+00, -2.680277830062101e+00, -2.852577163203539e+00, -2.677784695720208e+00, -2.677784695720208e+00, -1.529745992405310e+00, -1.541040407084636e+00, -1.524521656297228e+00, -1.534223317756597e+00, -1.542979597423134e+00, -1.317150721037801e+00, -3.487012828475461e-01, -3.709516479295442e-01, -3.513596362358276e-01, -3.407957074639404e-01, -3.575751916698102e-01, -3.998026341216083e-01, -1.529984016271534e-02, -1.576791814183302e-01, -1.633361327258003e-02, -1.138154578026750e+00, -2.962360849561763e-02, -2.962360849561763e-02, -1.027091854253444e-02, -2.156057350205522e-02, -1.613991065941269e-02, -1.811411559819467e-02, -1.066603664694909e-02, -1.966168978410891e-02, -5.147853770714698e-01, -4.018258166967578e-01, -4.626907577202465e-01, -4.949110481860976e-01, -4.773994198092920e-01, -4.773994198092920e-01, -4.804818283217126e-01, -3.061833264338880e-01, -3.128761333960419e-01, -3.095669848406901e-01, -3.195344516846289e-01, -3.475048386419965e-01, -3.953370060407270e-01, -2.016597359707782e-01, -1.695495254828444e-01, -2.745623764254641e-01, -1.974406314563743e-01, -1.974406314563744e-01, -3.447577293591585e-01, -9.355622504181911e-02, -8.097617343492831e-02, -2.192981777636698e-01, -1.091814399576458e-02, -1.724418154893437e-02, -4.594840710910571e-02, -5.961885879491532e-03, -1.128640718392429e-02, -1.662053289392670e-02, -1.673374560813569e-02, -1.673374560813588e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_revm06_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revm06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.039305085871801e-09, -5.039238425980274e-09, -5.038906657960895e-09, -5.039997115837071e-09, -5.039270242579329e-09, -5.039270242579329e-09, -8.266094579568903e-06, -8.265823321470428e-06, -8.256475811268285e-06, -8.257457446600514e-06, -8.265862007322894e-06, -5.468463293813105e-06, -6.816078718602534e-03, -3.085012022468151e-03, -3.193734620048081e-03, -3.201591666466698e-03, -3.082261069156998e-03, -3.082261069156998e-03, -5.056561778984004e-01, -4.920036623362293e-01, -3.480336538202297e-03, -7.041226950426400e-01, -5.013714680998930e-01, -5.013714680998930e-01, -1.674084691734887e+01, -1.657675405911998e+01, -4.598160387913248e+00, -6.052551971945003e+00, -1.733729675995407e+01, -1.733729675995406e+01, -1.212392892367092e-06, -1.210788035758323e-06, -1.212220567249554e-06, -1.346253733496804e-06, -1.211584183353920e-06, -1.211584183353920e-06, -8.468436560941049e-05, -8.197367177227585e-05, -8.582922774638164e-05, -8.365878347312888e-05, -8.142426871722427e-05, -5.054621975499042e-05, -7.640321100945579e-03, -5.697232590705471e-03, -9.079570201674882e-03, -8.077388066865924e-03, -6.684589153143931e-03, -8.426273246107216e-03, -2.284387310220702e+01, -3.386034358401682e-01, -2.354307620820085e+01, -6.531784156920636e-05, -1.222967869673349e+00, -1.222967869673349e+00, -6.220399584391237e+06, -7.629879864125707e+00, -2.997364869423610e+01, -1.984213802339123e+02, -5.289195569088106e+06, -9.404182396746105e+00, -7.623789167339225e-03, -6.856847915743539e-03, -7.300241915018932e-03, -7.211062199223118e-03, -7.089709568711132e-03, -7.089709568711132e-03, -8.158474006616361e-03, -1.344317862772434e-02, -1.167040035148630e-02, -1.012893995220649e-02, -1.091525001856818e-02, -1.296990031745850e-02, -4.681485438420785e-03, -4.920395906513056e-01, -1.102697386961462e-01, -8.149526270918919e-02, -7.612477627447932e-02, -7.612477627447935e-02, -2.838512330436070e-02, -4.510588611254183e+00, -3.362646734759341e+00, -6.687534672902680e-02, -5.570525127848438e+01, -2.657150971298547e+00, -6.561081286802969e+00, -8.472476789189908e+00, -1.663044344830682e+01, -3.196517644102085e+00, -1.322752319541994e+01, -1.322752319541993e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_revm06_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_revm06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-8.768311394433712e-04, -8.768880062509312e-04, -8.771347676816598e-04, -8.762101938408019e-04, -8.768611088061506e-04, -8.768611088061506e-04, 8.103887710062596e-04, 8.095934880823005e-04, 7.850790761265812e-04, 7.946378191571092e-04, 8.101642740526880e-04, 3.147642348994956e-04, 4.811414322553801e-03, 1.056182413562259e-03, 3.827359382295140e-03, 2.484337114622970e-03, 1.001843461681196e-03, 1.001843461681196e-03, 1.472608301700200e-02, 1.101611048271695e-02, 8.830335688482252e-03, -2.169114005267087e-02, 1.363814544829544e-02, 1.363814544829544e-02, -1.132381852350247e-03, -1.288690039074833e-03, -2.376758795747278e-02, -4.516689265721522e-05, -1.306117556424424e-03, -1.306117556424730e-03, -9.890530424080949e-03, -1.002273150981201e-02, -9.905233268354043e-03, -9.488311217327820e-03, -9.957008961621928e-03, -9.957008961621928e-03, 1.912111881363293e-03, 1.923979927755727e-03, 1.894191775480213e-03, 1.920643434269384e-03, 1.920911753982536e-03, 1.031716655332859e-03, -1.662942382985587e-02, -3.196845367889257e-02, -5.057954678277693e-03, -2.182693243147401e-02, -2.155610488283253e-02, -1.779066923944473e-02, -2.207631138358639e-02, 3.275602119593824e-02, -2.182563752034922e-02, -6.883044536799387e-03, -3.561257951571425e-02, -3.561257951571425e-02, -1.426158286872815e-04, -7.630153707547787e-05, -1.262084010290548e-04, -2.350326619187222e-02, -1.638418907590063e-04, -7.113888072970601e-05, 4.246693795638188e-01, 7.637900554737032e-02, 2.135753173004500e-01, 3.365248378078863e-01, 2.774897696292556e-01, 2.774897696292556e-01, 3.490575357956184e-01, -1.555195443979474e-02, -2.651833535519579e-02, -5.217832321510382e-02, -3.069736786728950e-02, -2.700947769959838e-02, -2.258494363640424e-02, 2.631852654827091e-02, 6.078727847833330e-04, 1.077378167460733e-02, 2.028784302261456e-03, 2.028784302261447e-03, 4.239959389942610e-03, -1.860777448725478e-02, -3.367325402914721e-02, 1.847361428758574e-03, -2.766266102985515e-02, -6.530958441168928e-02, -7.143613702498573e-04, -1.738466268446227e-06, -2.339366195852533e-05, -6.833668479615161e-02, -6.141966735586400e-05, -6.141966735607329e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
