
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_cf22d_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_cf22d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.663695031316491e+00, -2.663336882758395e+00, -2.662011698501348e+00, -2.667315985679801e+00, -2.664499554340511e+00, -2.664499554340511e+00, -2.281997181248456e+00, -2.281494803200257e+00, -2.268299687353106e+00, -2.273660538799460e+00, -2.272914126590087e+00, -2.272914126590087e+00, -5.281426882523382e-01, -5.292971946401569e-01, -5.596354518586281e-01, -5.573282845710548e-01, -5.565931680359972e-01, -5.565931680359972e-01, -1.476431956202460e-01, -1.488997612304654e-01, -6.918531988133383e-01, -8.735838685734554e-02, -1.129964264075407e-01, -1.129964264075406e-01, 1.739837751206575e-04, 1.902401529143379e-04, 5.525343146776285e-04, 6.008978833689350e-05, 9.397378669656475e-05, 9.397378669657997e-05, -6.614436034795235e-02, -3.684589981890423e-02, -6.463048612768264e-02, -3.877963196721178e-02, -5.143405972498104e-02, -5.143405972498104e-02, -1.500656717251639e+00, -1.459710626741319e+00, -1.538523350097896e+00, -1.500169556759900e+00, -1.460104890776140e+00, -1.460104890776140e+00, -2.997073941622524e-01, -2.357499020027877e-01, -3.113830055739675e-01, -2.748084732680640e-01, -2.926737771726954e-01, -2.926737771726954e-01, -3.523681898328376e-02, -1.447298060514027e-01, -2.836577202254327e-02, -7.579390862117972e-01, -6.312421275897259e-02, -6.312421275897268e-02, 3.472492286903441e-05, 5.750263333412311e-05, 2.819210588447894e-05, -7.906068883623116e-03, 4.538100588022889e-05, 4.538100588023132e-05, -5.258673600323954e-02, -1.286712677597344e-01, -1.055375495069404e-01, -8.355566565720056e-02, -9.489486149652103e-02, -9.489486149652103e-02, -4.791851648305089e-02, -2.833326731032323e-01, -2.508568877134512e-01, -2.123437970180135e-01, -2.340033578110352e-01, -2.340033578110352e-01, -2.733761474921956e-01, -1.973344972672328e-01, -2.264527734365762e-01, -2.342094845415151e-01, -2.336902850946803e-01, -2.336902850946804e-01, -2.832173716038838e-01, 7.335143937583375e-04, -1.662910709992270e-03, -2.010069898304944e-01, -2.291792597242643e-02, -2.291792597242652e-02, 3.442600614463331e-04, 1.638021709319497e-06, 1.495347993112164e-05, -1.984369890361813e-02, 3.755369602929409e-05, 3.755369602930967e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_cf22d_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_cf22d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [1.981388557920040e+01, 1.981540385922300e+01, 1.982115384283656e+01, 1.979866221007769e+01, 1.981058618011708e+01, 1.981058618011708e+01, 1.121175103309199e-01, 1.121066855482148e-01, 1.120363938094972e-01, 1.143284591327685e-01, 1.130783870590941e-01, 1.130783870590941e-01, -3.124037094168475e-01, -3.122187360391309e-01, -3.076074505029346e-01, -2.905875987208981e-01, -2.962262464477300e-01, -2.962262464477300e-01, -1.315146650045371e-01, -1.283739209745777e-01, -5.471781582924181e-01, -1.387783670922763e-01, -1.412296690094571e-01, -1.412296690094569e-01, 2.439263028329823e-04, 2.612766426186160e-04, -5.076466220458987e-03, 9.565606449333420e-05, 1.414101441437712e-04, 1.414101441437430e-04, 7.417187266268741e+00, 7.518289165853890e+00, 7.422702850727461e+00, 7.511904455837025e+00, 7.467912321828734e+00, 7.467912321828734e+00, 2.837482815801748e-01, 2.570249134319874e-01, 3.375606701208597e-01, 3.158221187261422e-01, 2.431861801259279e-01, 2.431861801259279e-01, -1.965857070137848e-01, -5.398584626642860e-02, -2.019917573941339e-01, -2.078457908186720e-01, -1.932516842785841e-01, -1.932516842785841e-01, -8.661302682111521e-02, -1.694113597208656e-01, -7.488618075423312e-02, 1.283012671313097e-01, -1.189444179079121e-01, -1.189444179079119e-01, 5.773299301421410e-05, 9.206194985148426e-05, 4.101112016508787e-05, -3.106540663575657e-02, 6.902407411943914e-05, 6.902407411929635e-05, 1.761946692495098e-01, 9.561985297605696e-02, 1.271058374464316e-01, 1.511160395741862e-01, 1.394082685954011e-01, 1.394082685954011e-01, 1.391644610503191e-01, -1.343454570750737e-01, -1.579091148318972e-01, -1.106186522636488e-01, -1.486569265861157e-01, -1.486569265861155e-01, -1.141969034823827e-01, -1.682005802736281e-01, -1.481749384546368e-01, -1.322341641024078e-01, -1.264544113950705e-01, -1.264544113950708e-01, -1.354742215521578e-01, -4.163645394168725e-03, -1.365093671452042e-02, -1.125445856910161e-01, -6.345881036365188e-02, -6.345881036365075e-02, 4.700289174551993e-04, 3.826788019728132e-06, 2.510652088905163e-05, -5.720534222530611e-02, 5.652937815007543e-05, 5.652937815005412e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_cf22d_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_cf22d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.256883264165258e-08, -2.257059638728291e-08, -2.257742750683443e-08, -2.255133814024014e-08, -2.256514814865321e-08, -2.256514814865321e-08, 1.187156179608761e-06, 1.189732155394838e-06, 1.257096103754117e-06, 1.234169146769369e-06, 1.235028438984232e-06, 1.235028438984232e-06, -9.705928077218042e-03, -9.741212597954175e-03, -1.048152685718678e-02, -9.900763695623803e-03, -1.006716739965921e-02, -1.006716739965921e-02, -1.288712255617133e+00, -1.283422770575002e+00, -6.885839919287573e-03, -1.112723040303494e+00, -1.333334402576837e+00, -1.333334402576835e+00, 1.582865878914454e+00, 1.655913080428064e+00, 8.021040254120210e-02, 1.550218616625030e+00, 1.920506505976194e+00, 1.920506505994753e+00, -1.324893403132164e-05, -1.342567223343176e-05, -1.325896810322731e-05, -1.341487952239881e-05, -1.333732707553573e-05, -1.333732707553573e-05, -3.377361455713247e-05, -2.705288175460892e-05, -3.968295365388082e-05, -3.323132633080213e-05, -2.733559536702111e-05, -2.733559536702111e-05, -5.785480330985518e-03, -1.345554873740773e-02, -1.323196053339405e-02, -1.058346793822315e-02, -5.451066928492568e-03, -5.451066928492568e-03, -8.264018945162976e-01, -7.520316042726002e-01, -7.917836645151413e-01, -8.072844470756884e-05, -1.423512140657113e+00, -1.423512140657115e+00, 2.088517979444195e+00, 1.830229482384428e+00, 1.170905148494311e+01, -5.021269755152586e-01, 5.382812275973828e+00, 5.382812276117533e+00, -1.261668746858244e-01, -7.419245319753107e-02, -8.945997921896641e-02, -1.044064752967326e-01, -9.663795837129854e-02, -9.663795837129854e-02, -1.289483577932627e-01, -1.157558380238938e-02, -6.716078928231132e-03, -1.882740170155595e-02, -9.405430297718934e-03, -9.405430297718918e-03, -7.887045844139146e-03, -4.833830202698661e-01, -3.107814250900261e-01, -1.157600511856518e-01, -2.017730908329514e-01, -2.017730908329513e-01, -2.681424527488440e-02, 8.400243043851274e-02, -1.831152454925685e-01, -1.137013436646541e-01, -1.106342340984943e+00, -1.106342340985009e+00, 1.195169275552613e+00, 9.557486690583652e+00, 4.509321246492200e+00, -1.132750708561861e+00, 6.834801534829904e+00, 6.834801535049844e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_cf22d_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_cf22d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_cf22d_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_cf22d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-8.334191797447358e-03, -8.334681987234145e-03, -8.336331259446978e-03, -8.329068157024269e-03, -8.332947551941585e-03, -8.332947551941585e-03, -2.455676556888876e-02, -2.455869728732184e-02, -2.461067076538547e-02, -2.460726289698733e-02, -2.460138648377566e-02, -2.460138648377566e-02, -1.639247465267173e-02, -1.625109154004479e-02, -1.297935011402654e-02, -1.542639453340063e-02, -1.475555086873562e-02, -1.475555086873562e-02, 9.223038664488732e-02, 9.051279487929531e-02, -4.448452295364116e-03, 6.032960647340466e-02, 7.831586883565965e-02, 7.831586883565973e-02, 3.920952918133400e-05, 4.766159116265610e-05, 3.712250553526759e-03, 5.512975850307528e-06, 1.525491334707828e-05, 1.525491334707829e-05, -5.700896946550769e-02, -5.802131381865747e-02, -5.706050013077683e-02, -5.795374386139158e-02, -5.751717367275114e-02, -5.751717367275114e-02, -3.906235883146429e-02, -3.947346025021711e-02, -3.913112446225743e-02, -3.960863531733071e-02, -3.922897483681198e-02, -3.922897483681198e-02, -6.889430334812686e-02, -1.493631003606396e-01, -4.931975840457988e-02, -6.439832758568846e-02, -7.334149096805144e-02, -7.334149096805144e-02, 3.312097739711915e-02, 7.183082780877227e-02, 2.919824926714542e-02, -4.954525897555215e-02, 6.087810105967220e-02, 6.087810105967198e-02, 1.748900869093275e-06, 4.551569127953342e-06, 1.640304432793248e-05, 1.475979271090495e-02, 1.102405332241860e-05, 1.102405332247504e-05, -2.398995686462624e-01, -1.915386955700725e-01, -2.093037274669270e-01, -2.238752411786487e-01, -2.166937972585889e-01, -2.166937972585889e-01, -2.909842983063016e-01, -8.628109323872438e-02, -9.907600620907935e-02, -1.217117956895754e-01, -1.066095507352119e-01, -1.066095507352118e-01, -1.102280316048311e-01, 6.376976275857994e-02, 3.775549581552837e-02, -2.755996648302837e-02, 1.713353787494748e-03, 1.713353787494835e-03, -6.301724714925118e-02, 3.342288383521331e-03, 6.987859953812603e-03, -6.719700309126925e-02, 3.244468356280664e-02, 3.244468356280710e-02, 5.287231761705596e-05, 1.057126800264957e-07, 2.811152646054705e-06, 3.101913690656458e-02, 1.243956390202205e-05, 1.243956390199930e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
