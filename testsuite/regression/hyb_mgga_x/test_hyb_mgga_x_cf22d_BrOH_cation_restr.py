
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_cf22d_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_cf22d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [9.570677094740232e-01, 9.576359025991600e-01, 9.599370587944323e-01, 9.515266803135455e-01, 9.559643149095984e-01, 9.559643149095984e-01, -2.292084635004404e+00, -2.291642054298406e+00, -2.280011997054843e+00, -2.284939576068227e+00, -2.284152302087095e+00, -2.235760007115552e+00, -3.966900506716559e-01, -6.894494601460325e-01, -7.263503060262533e-01, -7.059388539083662e-01, -7.107502642483047e-01, -7.107502642483047e-01, -1.521617756870518e-01, -1.544604211349909e-01, -5.171366887577723e-01, -9.523460761161556e-02, -1.217563867019046e-01, -1.217563867019045e-01, 1.740172403886657e-04, 1.903127142869252e-04, 5.556517498774150e-04, 6.017613383434138e-05, 9.408998674647514e-05, 9.408998674647514e-05, -7.410562581297497e-02, -4.481916665398093e-02, -7.243202052297654e-02, 1.258715735779367e+00, -5.948435208983167e-02, -5.948435208983167e-02, -1.364282172249432e+00, -1.345199921748392e+00, -1.379458222953668e+00, -1.362577505505042e+00, -1.345881061782365e+00, -1.473070043208921e+00, -3.075564668981058e-01, -2.646004764485157e-01, -3.345255586532733e-01, -2.942651458941568e-01, -2.999864161740697e-01, -2.720526315825171e-01, 2.512953226251293e-02, -1.495870084013564e-01, 2.539769084966495e-02, -8.273885281883880e-01, -6.586338377851529e-02, -6.586338377851547e-02, 1.650898310292961e-03, 5.768650218888544e-05, 2.830601778109001e-05, 2.290787715942421e-02, 1.920881927955333e-03, 4.560271207375673e-05, -7.804806442697867e-02, -1.429333419433996e-01, -5.552780207942914e-02, -1.042724309042617e-01, -1.139437570618173e-01, -1.139437570618173e-01, -9.273172770903321e-02, -2.846581848560427e-01, -2.519624952056321e-01, -2.167456101260757e-01, -2.359452951798083e-01, -2.134517602086475e-01, -2.988435755704944e-01, -4.370320480120191e-02, -2.375919689100022e-01, -1.621008454919347e-01, -2.494360441440402e-01, -2.494360441440402e-01, -2.256150457005898e-01, 7.357051692027536e-04, -1.707838328539562e-03, -2.155968378683442e-01, 2.448599597548353e-02, -2.368198891889053e-02, 3.464972875613684e-04, 1.660389196294593e-06, 1.496732414123420e-05, -2.023243626689856e-02, 3.770397388846406e-05, 3.770397388846135e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_cf22d_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_cf22d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [3.183330816298139e+01, 3.183469553336395e+01, 3.184037449908628e+01, 3.181983165927199e+01, 3.183066242945796e+01, 3.183066242945796e+01, -2.755064204088173e-01, -2.749206477911300e-01, -2.595036889906863e-01, -2.656762349154601e-01, -2.650713861515290e-01, 6.314300105978964e-01, -5.337210728735770e-01, -6.497404991942093e-02, -9.227939021900999e-02, -7.986222349921084e-02, -8.249508319786882e-02, -8.249508319786882e-02, -1.342255483500402e-01, -1.313230645546087e-01, -7.868520004742284e-01, -1.504477305366119e-01, -1.520170249392946e-01, -1.520170249392947e-01, 2.440584050781394e-04, 2.615628823403641e-04, -5.053468638869190e-03, 9.599900147262869e-05, 1.418707350851681e-04, 1.418707350851681e-04, 7.403579576254517e+00, 7.504880674733559e+00, 7.409380438105556e+00, 9.483699758135426e+00, 7.454263903970269e+00, 7.454263903970269e+00, -6.790776326643038e-01, -6.318536608153450e-01, -7.174051927762475e-01, -6.736344506619016e-01, -6.344635832196768e-01, 3.753935875196152e-01, -1.873240087534562e-01, -1.461657628577958e-01, -1.315077693114800e-01, -1.781837925611722e-01, -1.976897632490858e-01, -2.109821142015140e-01, 1.876946696866328e-02, -1.741835243028544e-01, 2.159031084756838e-02, -3.888503628625478e-01, -1.236976904029168e-01, -1.236976904029180e-01, 2.191104776107624e-03, 9.279254171689548e-05, 4.146455040311064e-05, 2.554609504980039e-02, 2.547360776941451e-03, 6.990574022640821e-05, 1.794679637576490e-01, 8.340958604530246e-02, 1.487861117139536e-01, 1.465552655606576e-01, 1.324901603329856e-01, 1.324901603329856e-01, 1.389936186827404e-01, -1.297129683610041e-01, -1.590715818777284e-01, -1.279368080591230e-01, -1.568936735838545e-01, -1.100198639402002e-01, -2.003788226725779e-01, -1.503610045151232e-01, -1.457986743445876e-01, -2.706825347791694e-01, -1.114999698345977e-01, -1.114999698345978e-01, -2.916805994501008e-01, -4.152358249275819e-03, -1.374721298068060e-02, -7.331771797112252e-02, 2.299750350105322e-02, -6.499091674448662e-02, 4.788306956168804e-04, 3.916115780278995e-06, 2.516168868561868e-05, -5.803890407295975e-02, 5.712720589093760e-05, 5.712720589102532e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_cf22d_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_cf22d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.648418332888923e-08, -2.648601566860701e-08, -2.649321644933035e-08, -2.646611931668021e-08, -2.648044803454699e-08, -2.648044803454699e-08, -8.576574086182431e-07, -8.547384773435124e-07, -7.787763728084735e-07, -8.084758746538370e-07, -8.061183627808482e-07, 9.793382233049051e-07, -1.681273710981436e-02, -7.560340988872417e-03, -8.695059351923560e-03, -8.313704654456277e-03, -8.399109727839835e-03, -8.399109727839835e-03, -1.258350923854218e+00, -1.245134680059726e+00, -1.117356063070280e-02, -1.087333240378898e+00, -1.276458992630022e+00, -1.276458992630024e+00, 1.556314138486938e+00, 1.605249653382355e+00, 1.027447982204883e-02, 1.231085101050314e+00, 1.670428074447015e+00, 1.670428074447015e+00, -1.324055821193232e-05, -1.341731486234657e-05, -1.325076204356653e-05, -1.478814966606134e-05, -1.332887337988231e-05, -1.332887337988231e-05, -7.239769102406060e-05, -6.321568904055824e-05, -8.007779342708105e-05, -7.119940840592517e-05, -6.380138936887026e-05, -2.866027429952178e-05, -3.661338421016362e-03, -1.073873772205990e-02, -8.728731286037095e-03, -4.293333724214007e-03, -3.456752138914496e-03, -1.045524970442823e-02, -1.153731993990355e+02, -7.397860677880758e-01, -1.623748197722958e+02, -4.499252523756168e-05, -1.417412528098311e+00, -1.417412528098306e+00, -2.411831974853626e+08, 1.090737471357935e+00, 8.985944972811279e+00, -9.044452805779299e+02, -1.296474949509023e+08, 3.403880595985769e+00, -1.248495883989383e-01, -7.327371187676369e-02, -9.238724927239172e-02, -1.032555634618546e-01, -9.554607729553993e-02, -9.554607729553993e-02, -1.262235042509563e-01, -1.107151353192386e-02, -5.965846274631328e-03, -1.769498571695562e-02, -8.444401397185197e-03, -1.828417021640782e-02, -5.418518931812516e-03, -2.286665658611744e+00, -2.990980228581634e-01, -2.330168364917305e-01, -1.863630366878107e-01, -1.863630366878107e-01, -5.750624623322081e-02, 5.084452195210951e-02, -2.318255981661156e-01, -8.786511868966695e-02, -3.156018682272589e+02, -1.162562694934830e+00, 6.886592127015360e-01, 1.423044606747846e+00, 3.978726800024397e+00, -1.164133017892301e+00, 4.879711990188800e+00, 4.879711990064095e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_cf22d_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_cf22d", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-1.775561114864757e-02, -1.775642436078846e-02, -1.775968011122427e-02, -1.774764819179078e-02, -1.775400149594234e-02, -1.775400149594234e-02, -2.143309984585535e-02, -2.143817282469706e-02, -2.157187212590930e-02, -2.151656553105548e-02, -2.152389850329103e-02, -2.837997050964788e-02, -5.567260090004781e-03, -2.824950195432558e-02, -2.021994028863725e-02, -2.372908484016708e-02, -2.291519161319018e-02, -2.291519161319018e-02, 9.626569010790785e-02, 9.508944381487552e-02, -1.643486415319593e-04, 7.185646113437787e-02, 9.011283765526271e-02, 9.011283765526283e-02, 3.921101446565888e-05, 4.766534455205244e-05, 3.755568866415792e-03, 5.513848179363168e-06, 1.525755774033467e-05, 1.525755774033467e-05, -5.669527611587426e-02, -5.770757891076405e-02, -5.675312382230092e-02, -1.084100738797730e-01, -5.720019257397001e-02, -5.720019257397001e-02, -2.356195290210460e-02, -2.451951423749429e-02, -2.279529881276913e-02, -2.367019570279842e-02, -2.446783832873249e-02, -4.116984508867794e-02, -7.664172132793938e-02, -7.764599395574155e-02, -7.425161318500331e-02, -8.156162502865093e-02, -7.543139952125771e-02, -7.046451840152618e-02, 3.738074689958208e-03, 7.621507290485897e-02, 2.958486103070941e-03, -2.373987815227785e-02, 6.624654289374624e-02, 6.624654289374599e-02, 3.067485428210923e-08, 4.553134262853913e-06, 1.640754214649357e-05, 9.247790640312994e-04, 1.964655529574041e-07, 1.102899080308093e-05, -1.448284949536148e-01, -1.389139538875199e-01, -3.930500005444529e-01, -1.468915532691172e-01, -1.460322894847046e-01, -1.460322894847046e-01, -1.137738611356101e-01, -8.903418886482771e-02, -1.000102648220420e-01, -1.049029821722353e-01, -1.022156878651939e-01, -1.396764343538620e-01, -6.368609374495275e-02, 3.701976441916514e-02, 3.943781003898871e-02, 2.412861933232970e-02, -3.800409627864714e-03, -3.800409627864620e-03, -9.288121241381064e-03, 3.359544725736531e-03, 7.145247946346908e-03, -1.023834971944925e-01, 3.113169141921137e-03, 3.453990611238156e-02, 5.297354656497136e-05, 1.057283417034845e-07, 2.811278176537313e-06, 3.214122894910604e-02, 1.244362541002519e-05, 1.244362541000244e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
