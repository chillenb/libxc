
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_cf22d_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_cf22d", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([9.570679234462255e-01, 9.576361006725028e-01, 9.599373394494535e-01, -9.720690494427905e-01, -9.683127005535140e-01, -2.892425968570465e+00, -2.269027340588394e+00, -2.245462340404347e+00, -2.230389077581668e+00, -2.236668873147009e+00, -2.235777569410190e+00, -2.258622213382022e+00, -3.966790365249119e-01, -5.411382509988083e-01, -7.263319366129650e-01, -5.481443101800909e-01, -3.866373209404458e-01, -7.080164341813847e-01, -9.131200077960926e-02, -9.429490183999989e-02, -8.460724461171585e-01, -9.525737330040206e-02, -1.408843547580923e-01, -1.323462718716577e-01, 1.746885059203094e-04, 1.759043021665591e-03, 7.859068469018016e-03, 6.019818767476338e-05, 1.186308686707155e-04, 1.186308686707164e-04, -7.410533349636370e-02, -4.481885712286217e-02, -7.243172996067163e-02, -4.659676176602989e-02, 5.919397598413644e-01, 5.912415986575730e-01, -1.516779100366967e+00, -1.470926272480159e+00, -1.554875493057216e+00, -1.511873503856695e+00, -1.406459774187074e+00, -1.473096998387902e+00, -2.923308603733460e-01, -2.645698994648480e-01, -3.346536402757199e-01, -2.944360507865311e-01, -2.865919546752570e-01, -3.002707926390302e-01, -3.703727126077167e-02, -7.956463672179878e-02, -2.995885520394025e-02, -8.273884708863619e-01, -6.624422067175786e-02, -6.624422067175785e-02, 7.821112527559968e-04, 5.770196518623142e-05, 2.840884300143713e-05, 7.775908108337615e-03, 4.950614548097679e-05, 4.950614548097326e-05, -7.803598832277822e-02, -1.429235200306951e-01, -5.552055731726444e-02, -7.189827056837428e-02, -4.732054281399364e-02, -8.086355042001911e-02, -9.272159034240765e-02, -2.631207233340627e-01, -2.408252032488797e-01, -2.167455316998965e-01, -2.359460279200777e-01, -2.245484496323223e-01, -2.785224581989784e-01, -2.019234713817298e-01, -1.619670339099802e-01, -2.101614325609403e-01, -2.494353227780818e-01, -1.876839901606867e-01, -2.940697773990802e-01, 1.649660663257462e-02, -1.725476234955231e-03, -2.152612271216079e-01, -2.393457184781516e-02, -2.393457184781514e-02, 5.027035556886532e-03, 1.660414867457658e-06, 1.182026346158615e-03, 2.411541062189081e-02, 4.103683402151564e-05, 1.401846696704584e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_cf22d_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_cf22d", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([3.182823414090861e+01, 3.183838319429698e+01, 3.182984229398584e+01, 3.183954972058650e+01, 3.183444851042464e+01, 3.184630174266317e+01, 3.181640176339414e+01, 1.896874754949108e+01, 3.182925913117569e+01, 1.897850494867231e+01, 1.897504576548381e+01, 1.897850494867231e+01, 6.454380246439873e-01, -2.757988891149598e-01, 6.444618318339180e-01, 6.455824953217818e-01, 6.255032641331083e-01, 6.221289233885761e-01, 6.325036826890083e-01, 6.324967485983285e-01, 6.473973479127013e-01, 6.154546571559071e-01, -2.768824644787785e-01, 6.154546571559072e-01, -5.359921521406127e-01, -5.314201813692715e-01, -5.370772552911843e-01, -6.273222069169970e-02, -8.943513355227105e-02, -9.520147441450433e-02, -8.160093589550114e-02, -5.407148781310983e-01, -5.309250113066599e-01, -5.539747243338212e-01, -5.826447785892570e-02, -1.178277351508605e-01, -1.059592578480420e-01, -1.292749007305279e-01, -1.113043823596315e-01, -1.256782537432899e-01, -1.563959490417375e-01, -7.771342410910459e-01, -1.503516710214430e-01, -1.500586945779938e-01, -1.439791092241378e-01, -9.315151657083867e-02, -1.439791092241381e-01, 1.824119924893686e-02, 2.322656228089946e-04, 2.551485574411064e-04, 4.845867057738385e-03, 2.741415487926443e-04, 2.065263799090204e-02, -5.831980657943187e-03, 9.760485762122875e-05, 9.437585670359935e-05, 1.944221712798936e-04, 6.464629961569862e-05, 1.944221712798936e-04, 6.464629961585416e-05, 7.404468429136368e+00, 7.402692511990473e+00, 7.507511372931923e+00, 7.502250406800777e+00, 7.411617343450841e+00, 7.407144225300527e+00, 7.499968541342215e+00, 7.497522886547435e+00, 9.450757403952858e+00, 7.452444197412521e+00, 7.456084637643776e+00, 9.446841207138256e+00, 4.312897350385815e-01, 4.248695944944449e-01, 3.748251322584354e-01, 3.700010020570658e-01, 4.804037953562963e-01, 4.605077965220691e-01, 4.326577117945120e-01, 4.114724711160762e-01, 3.604440025782255e-01, -6.469586120234850e-01, 3.604440025782255e-01, 3.902629110905565e-01, -1.868754632119448e-01, -2.375854163436331e-01, -1.516829074571342e-01, -1.403698208433900e-01, -1.184358620998563e-01, -1.456732698645152e-01, -1.682852419205073e-01, -1.861983400980244e-01, -2.056384561116230e-01, -2.309785272400551e-01, -2.056384561116233e-01, -1.865638236658813e-01, -8.922079545703511e-02, -9.080364995182899e-02, -7.645302648180229e-02, -1.743954335211309e-01, -7.251352597017191e-02, -8.239876600975496e-02, -3.890582190536168e-01, -3.886410006428090e-01, -1.175644790122446e-01, -1.276121957215831e-01, -1.175644790122448e-01, -1.276121957215822e-01, 2.149108944199805e-03, 6.078886825633425e-05, 9.092643811964625e-05, 9.461583313003172e-05, 3.967669654168822e-05, 4.312785556019657e-05, -3.037925053957018e-02, 2.545562463837671e-02, 5.150319704661628e-05, 8.107971120467476e-05, 5.150319704663461e-05, 8.107971120472826e-05, 1.760952001309814e-01, 1.828268841311357e-01, 7.991009766239450e-02, 8.690671911555427e-02, 1.464269505477035e-01, 1.511492033192925e-01, 1.561522389812145e-01, 1.499137408900735e-01, 1.513453582245416e-01, 1.560330443414043e-01, 1.513453582245416e-01, 1.359862636866010e-01, 1.359949659418758e-01, 1.419817835585466e-01, -1.288111868679845e-01, -2.627556531738990e-01, -1.584348408521828e-01, -1.705692895662919e-01, -1.284576579413447e-01, -1.274045508409875e-01, -1.568873100708494e-01, -1.568824016199214e-01, -1.568873100708495e-01, -1.084155082784787e-01, -2.065199247908626e-01, -7.389744619539218e-02, -1.702707662787390e-01, -1.697076285980293e-01, -2.135935721377805e-01, -1.441773348913784e-01, -2.702312448225880e-01, -9.213664975734592e-02, -1.118731118153008e-01, -1.111258099324220e-01, -1.118731118153013e-01, -2.548377808845614e-01, -1.032707308335484e-01, -1.056258522157603e-01, 2.039557492081323e-02, 2.048871130610861e-02, -1.273486294244092e-02, -1.475329354963517e-02, -7.692648905176241e-02, -7.049029733746359e-02, -5.876527998492246e-02, -7.075228472625428e-02, -5.876527998492406e-02, -7.075228472625479e-02, 6.488435413973185e-03, 6.705896279434216e-03, 3.901312611385871e-06, 3.930906748359050e-06, 1.519019813646253e-03, 1.613976928407671e-03, 2.406443750306163e-02, 2.340697343601563e-02, 4.193897625156413e-05, 6.916021648202239e-05, 4.193897625156972e-05, 2.635760005759789e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_cf22d_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_cf22d", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.295144375043919e-08, 0.000000000000000e+00, -5.298529406420341e-08, -5.295569219506729e-08, 0.000000000000000e+00, -5.298837476016293e-08, -5.296730237303211e-08, 0.000000000000000e+00, -5.300556874808756e-08, -5.291970514007759e-08, 0.000000000000000e+00, -4.464437989820934e-08, -5.295420498678441e-08, 0.000000000000000e+00, -4.466635375435361e-08, -4.465397962017573e-08, 0.000000000000000e+00, -4.466635375435361e-08, 1.849544724230068e-06, 0.000000000000000e+00, -1.718296476874929e-06, 1.857203897016541e-06, 0.000000000000000e+00, 1.848312478677099e-06, 2.004703350899278e-06, 0.000000000000000e+00, 2.030787274989290e-06, 1.951149493814111e-06, 0.000000000000000e+00, 1.951309273516151e-06, 1.832819946183059e-06, 0.000000000000000e+00, 2.082734030917006e-06, -1.730813489677330e-06, 0.000000000000000e+00, 2.082734030917006e-06, -3.414993396901597e-02, 0.000000000000000e+00, -3.310717043360471e-02, -3.451569711128318e-02, 0.000000000000000e+00, -1.489380861516397e-02, -1.713199581221636e-02, 0.000000000000000e+00, -1.765169707823165e-02, -1.673677788521165e-02, 0.000000000000000e+00, -3.772665204525508e-02, -3.173971547475008e-02, 0.000000000000000e+00, -4.738970746324240e-02, -1.429385261971031e-02, 0.000000000000000e+00, -1.950407238137832e-02, -1.372216368547953e+01, 0.000000000000000e+00, -2.516461306708985e+00, -1.295442724361424e+01, 0.000000000000000e+00, -2.472954715558943e+00, -9.392360355948110e-03, 0.000000000000000e+00, -2.017241297544191e-02, -2.012798217424872e+00, 0.000000000000000e+00, -2.348987296191315e+00, -2.130409740197910e+00, 0.000000000000000e+00, -1.436222803791311e+00, -2.130409740197904e+00, 0.000000000000000e+00, -1.934746949196985e+02, 3.124115232269739e+00, 0.000000000000000e+00, 3.100931489224026e+00, -1.757643261897504e+07, 0.000000000000000e+00, 3.207203646999325e+00, -1.583737146776703e+04, 0.000000000000000e+00, -3.143847421608405e-02, 2.448076370669160e+00, 0.000000000000000e+00, 2.477042060321129e+00, 3.025373579877892e+00, 0.000000000000000e+00, 5.513129822605950e+00, 3.025373579877892e+00, 0.000000000000000e+00, 5.513129821927437e+00, -2.646770050317243e-05, 0.000000000000000e+00, -2.649455151868607e-05, -2.682707547150262e-05, 0.000000000000000e+00, -2.684219128748748e-05, -2.649282096987906e-05, 0.000000000000000e+00, -2.651023678583924e-05, -2.680094209199517e-05, 0.000000000000000e+00, -2.682580932970731e-05, -2.940727704879522e-05, 0.000000000000000e+00, -2.666810730222090e-05, -2.664739894614650e-05, 0.000000000000000e+00, -2.943055122305786e-05, -7.114043468983826e-05, 0.000000000000000e+00, -6.990306873326485e-05, -5.684608828029404e-05, 0.000000000000000e+00, -5.610387302128622e-05, -8.486278928112191e-05, 0.000000000000000e+00, -7.960693642235267e-05, -7.130880183372247e-05, 0.000000000000000e+00, -6.623543278086478e-05, -5.367889377810593e-05, 0.000000000000000e+00, -1.325667559759636e-04, -5.367889377810593e-05, 0.000000000000000e+00, -6.107606521259201e-05, -7.321601702604723e-03, 0.000000000000000e+00, -2.330309235147891e-02, -2.035641567876268e-02, 0.000000000000000e+00, -2.266306221436424e-02, -2.201183727017590e-02, 0.000000000000000e+00, -1.378053028359810e-02, -9.909660488787320e-03, 0.000000000000000e+00, -7.940517489910251e-03, -6.895138768025054e-03, 0.000000000000000e+00, -2.400499651249367e-02, -6.895138768025061e-03, 0.000000000000000e+00, -7.570272325974816e-03, -1.673735450499247e+00, 0.000000000000000e+00, -1.680210372857253e+00, -1.319927119528130e+01, 0.000000000000000e+00, -1.470739540736170e+00, -1.534318937437686e+00, 0.000000000000000e+00, -1.710497852665418e+00, -8.967765719741676e-05, 0.000000000000000e+00, -9.029408932824650e-05, -2.383932725150320e+00, 0.000000000000000e+00, -3.303560807841304e+00, -2.383932725150348e+00, 0.000000000000000e+00, -3.303560807841274e+00, -5.222739920695983e+08, 0.000000000000000e+00, 1.672974281325615e+00, 2.330604938016648e+00, 0.000000000000000e+00, 2.051782642729941e+00, 1.713143228299954e+01, 0.000000000000000e+00, 1.872537794777903e+01, -1.068657273004026e+00, 0.000000000000000e+00, -1.783517984937385e+03, 3.228913584679090e+00, 0.000000000000000e+00, 9.974177730203158e+00, 3.228913584756660e+00, 0.000000000000000e+00, 9.974177730590716e+00, -2.492128943822471e-01, 0.000000000000000e+00, -2.501595026183633e-01, -1.456828831016376e-01, 0.000000000000000e+00, -1.473923073940644e-01, -1.839605997729991e-01, 0.000000000000000e+00, -1.855659164685417e-01, -2.132311107706920e-01, 0.000000000000000e+00, -2.070438631727719e-01, -1.980161164062841e-01, 0.000000000000000e+00, -1.992989591552477e-01, -1.980161164062841e-01, 0.000000000000000e+00, -1.918142544375674e-01, -2.513740130668506e-01, 0.000000000000000e+00, -2.534940934484948e-01, -2.263469086761308e-02, 0.000000000000000e+00, -6.108537530213249e-02, -1.196270098147844e-02, 0.000000000000000e+00, -3.630861780345592e-02, -3.511218802278749e-02, 0.000000000000000e+00, -3.566598369327320e-02, -1.669067156460549e-02, 0.000000000000000e+00, -1.709065561267639e-02, -1.669067156460548e-02, 0.000000000000000e+00, -3.655997249197180e-02, -9.874411872231106e-03, 0.000000000000000e+00, -1.926910481127048e-02, -9.593488687395247e-01, 0.000000000000000e+00, -9.480236077697872e-01, -2.023017032549129e+00, 0.000000000000000e+00, -5.910275154811221e-01, -4.721780844490603e-01, 0.000000000000000e+00, -1.896405293827915e-01, -3.724377677034965e-01, 0.000000000000000e+00, -3.730091614282679e-01, -3.724377677034968e-01, 0.000000000000000e+00, -9.840857648167330e-01, -4.835678298649753e-02, 0.000000000000000e+00, -4.430680323044277e-02, -1.713227646515060e+04, 0.000000000000000e+00, -1.665312736374352e+04, -4.202244996454443e-01, 0.000000000000000e+00, -5.062674351950763e-01, -2.003607144343891e-01, 0.000000000000000e+00, -1.499326191775281e-01, -1.986819355133460e+00, 0.000000000000000e+00, -2.671400047765026e+00, -1.986819355133512e+00, 0.000000000000000e+00, -2.671400047764965e+00, -5.001958138335050e+06, 0.000000000000000e+00, -4.330790862260062e+06, 2.852462252199100e+00, 0.000000000000000e+00, 2.839780306887395e+00, -2.158169808353777e+09, 0.000000000000000e+00, -1.685479914728294e+09, -8.601240651055512e+02, 0.000000000000000e+00, -7.991086019773539e+02, 8.356642040973162e+00, 0.000000000000000e+00, 1.042636791088089e+01, 8.356642040595903e+00, 0.000000000000000e+00, -2.251711231536771e+08])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_cf22d_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_cf22d", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-1.775220695569608e-02, -1.775901643809348e-02, -1.775314955835483e-02, -1.775970019147317e-02, -1.775578133968221e-02, -1.776358025418386e-02, -1.774521383314502e-02, -7.721321214508540e-03, -1.775281426664697e-02, -7.724341498631041e-03, -7.722994910849035e-03, -7.724341498631041e-03, -2.841027972955828e-02, -2.143067197414947e-02, -2.840816723913799e-02, -2.841086750606256e-02, -2.836605764632912e-02, -2.835808160437030e-02, -2.837992035917175e-02, -2.837958201444322e-02, -2.841820064171073e-02, -2.834010265783563e-02, -2.142401042653463e-02, -2.834010265783563e-02, -5.274480970382187e-03, -5.863770370856733e-03, -5.098622637040007e-03, -2.915577683458766e-02, -2.084992497452994e-02, -1.958631594681605e-02, -2.318013643326130e-02, -3.917623909415273e-03, -6.363829534240121e-03, -8.206931144354473e-04, -3.053805671499703e-02, -1.505276338245459e-02, 5.481125747538694e-02, 9.488600504312560e-02, 5.765677594719716e-02, 9.253120196713717e-02, -7.052605774007153e-03, -1.220688295107653e-03, 6.762070996214578e-02, 7.619598370254216e-02, 9.119294203945141e-02, 3.369781531848477e-02, 9.119294203945152e-02, 3.442729492280254e-03, 3.555875035061303e-05, 4.286421295891407e-05, 8.183526725915525e-07, 5.288955985657337e-05, 1.230843411632560e-04, 4.133283669584084e-03, 5.625266858869777e-06, 5.402650895471099e-06, 2.395108571046783e-05, 7.512515401982591e-06, 2.395108571046783e-05, 7.512515401951653e-06, -5.668745277975716e-02, -5.670312390624781e-02, -5.771698121384267e-02, -5.769818163029376e-02, -5.675871506577335e-02, -5.674754083932957e-02, -5.764142287365802e-02, -5.765082723339631e-02, -1.078636216445992e-01, -5.719892887594377e-02, -5.720146922672029e-02, -1.078690080314289e-01, -4.106164734200772e-02, -4.109521561364862e-02, -4.115557240256232e-02, -4.117429502914313e-02, -4.084552370972652e-02, -4.096005506821092e-02, -4.105138207646382e-02, -4.112274663219599e-02, -4.116531159035795e-02, -2.421452241082305e-02, -4.116531159035795e-02, -4.116416072750824e-02, -7.640102630804478e-02, -5.736341647143049e-02, -7.659060539292095e-02, -7.879048189394559e-02, -7.013517773646363e-02, -7.690108746029763e-02, -8.215376584939282e-02, -8.046004687790285e-02, -7.251200499048925e-02, -6.002023434697330e-02, -7.251200499048915e-02, -7.817874983892061e-02, 3.579335826912616e-02, 3.637540670136138e-02, 2.612889473151747e-02, 7.611077537861263e-02, 2.914708230109174e-02, 3.412994530691842e-02, -2.374460128832811e-02, -2.373514638282170e-02, 5.638740784080014e-02, 7.593401711772965e-02, 5.638740784080008e-02, 7.593401711772958e-02, 3.017122333284551e-08, 1.780483201524150e-06, 4.751404823840073e-06, 4.382024680379087e-06, 1.426443177617337e-05, 1.860400357526727e-05, 1.454575407451212e-02, 1.001702722032325e-03, 2.865443040386437e-06, 2.361783506697939e-05, 2.865443040374149e-06, 2.361783506698715e-05, -1.425949956951995e-01, -1.470929311973008e-01, -1.376206318599007e-01, -1.402330232886371e-01, -3.918532290435693e-01, -3.942423636274630e-01, -3.870355536742592e-01, -1.487454974471674e-01, -3.909058187136325e-01, -3.930548422868446e-01, -3.909058187136325e-01, -1.477508969260281e-01, -1.124704991737458e-01, -1.151091558211440e-01, -8.883130496144735e-02, -3.254235947322100e-02, -1.001247005603817e-01, -9.173295300885413e-02, -1.051208818673639e-01, -1.046907821195417e-01, -1.024609763019891e-01, -1.019715360880459e-01, -1.024609763019890e-01, -1.409523091563514e-01, -6.305784924611046e-02, -1.378354407981046e-01, 6.640437615576655e-02, 6.589560977923094e-02, 4.244647189097125e-02, 3.808555427744981e-02, 2.444452573543223e-02, -4.864861033800350e-02, -3.417134428660716e-03, -4.188643786567179e-03, -3.417134428660745e-03, 4.114994016335104e-02, -7.534047762922483e-02, -7.914266682302945e-02, 1.215190568684749e-04, 1.218643096180711e-04, 6.693578012187142e-03, 7.595812270988090e-03, -8.481762512894485e-02, -1.209813906780810e-01, 2.957234891403354e-02, 3.958481365205771e-02, 2.957234891403327e-02, 3.958481365205769e-02, 1.023546812597152e-06, 1.131309216935755e-06, 1.055992605808255e-07, 1.058581926503288e-07, 4.248344815675746e-08, 5.435156425062607e-08, 2.471784201030645e-03, 2.982302362778455e-03, 6.281076238763239e-06, 1.884077074119056e-05, 6.281076238768568e-06, 3.374115612957843e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
