
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_bmk_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_bmk", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-8.391371864021533e+00, -8.391375400648714e+00, -8.391406374083251e+00, -1.030591317808939e+01, -1.030581075228648e+01, -1.222040076704486e+01, -1.921483009961465e+00, -2.204892049330726e+00, -2.203640300952307e+00, -2.204343172305685e+00, -2.204043273381122e+00, -1.920788838179599e+00, -3.286404845171980e-01, -3.998955585742208e-01, -4.620679013386776e-01, -3.929090517230932e-01, -3.208523686993467e-01, -4.629267742291889e-01, -1.035996048622788e-01, -1.058241793004227e-01, -4.471821495181025e-01, -9.688620011879390e-02, -1.237419475026319e-01, -1.116553982687418e-01, -1.974112843652486e-02, -1.300912515335984e-02, -6.108620205952577e-02, -1.143551107042163e-02, -1.592057928387277e-02, -1.592057928387278e-02, -2.772219088910902e+00, -2.768510031890618e+00, -2.772001774881978e+00, -2.768730071392503e+00, -2.399990188086965e+00, -2.400323671606444e+00, -1.271835960002198e+00, -1.273800898055994e+00, -1.271082783695994e+00, -1.272404548872224e+00, -1.111594883152322e+00, -1.273355751548036e+00, -3.065005556616305e-01, -3.605471682201795e-01, -3.408493319252959e-01, -3.465069067695156e-01, -3.138501992279512e-01, -3.637723950578424e-01, -1.253179229575331e-01, -9.748724188977539e-02, -1.275413839000148e-01, -1.163978911959241e+00, -9.403270672549599e-02, -9.403270672549581e-02, -5.304070438411586e-03, -1.118101932318535e-02, -8.552893597917291e-03, -7.417480125125546e-02, -1.073867670298825e-02, -1.073867670298824e-02, -2.725227695644648e-01, -2.838639538088923e-01, -2.428025921708617e-01, -2.612820863652785e-01, -2.446773001414615e-01, -2.611056106778176e-01, -2.666458443374232e-01, -2.631282097863621e-01, -2.629165083143525e-01, -3.028708515318449e-01, -3.107406838585527e-01, -2.605863381942810e-01, -3.288322205981651e-01, -1.515282012000739e-01, -1.578114472961178e-01, -1.977124340694818e-01, -2.062054707504981e-01, -1.773883972318057e-01, -2.862704129796046e-01, -1.475245836173022e-02, -1.172874955657394e-01, -2.112858118219392e-01, -1.119300700791765e-01, -1.119300700791765e-01, -3.747685115276185e-03, -2.993048244137140e-03, -8.422659642422975e-04, -3.001472155760791e-02, -9.865231219643798e-03, -3.400641396292120e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_bmk_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_bmk", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.011993881745879e+01, -1.012080636174831e+01, -1.012010074300884e+01, -1.012092384790457e+01, -1.012057679503252e+01, -1.012161784417659e+01, -1.011875792264266e+01, -1.043998060371280e+01, -1.012004085252319e+01, -1.043908077563698e+01, -1.043965224759185e+01, -1.043908077563698e+01, -2.460525038568388e+00, -1.785155972991650e+00, -2.460777510138208e+00, -2.460454119623956e+00, -2.465640187036387e+00, -2.466529394780014e+00, -2.464087446314656e+00, -2.464128385081717e+00, -2.459567607208363e+00, -2.468523199799131e+00, -1.785284829501598e+00, -2.468523199799131e+00, -4.547387023588974e-01, -4.544238004268671e-01, -4.546018990569801e-01, -4.834935856485481e-01, -5.275674351548599e-01, -5.326561586196837e-01, -5.116056721985823e-01, -4.509429278070129e-01, -4.564257395135159e-01, -4.401557495508965e-01, -4.799295067921401e-01, -5.505333781049895e-01, -1.171581944362838e-01, -1.620950058464299e-01, -1.188995025231016e-01, -1.603177664088749e-01, -6.996782654954891e-01, -5.507826831410775e-01, 4.571873455161729e-02, 1.128302430699581e-02, -1.673662851937710e-01, 7.891433629063395e-02, -1.673662851937716e-01, -5.692768906547763e-02, -2.515220770505743e-02, -2.666226781863449e-02, -3.591938555517318e-03, -2.808250671710123e-02, -1.998377394214154e-02, -9.033960358871379e-02, -1.531365194971854e-02, -1.506088953960659e-02, -2.253142474885326e-02, -1.292790384214290e-02, -2.253142474885326e-02, -1.292790384214275e-02, -2.291847952236211e+00, -2.291297564195634e+00, -2.292144264736436e+00, -2.291581842239902e+00, -2.291858787582060e+00, -2.291303862502394e+00, -2.292112853614419e+00, -2.291562001888005e+00, -2.806803093986782e+00, -2.291418532251301e+00, -2.291976071076803e+00, -2.806041697597540e+00, -1.285716181546437e+00, -1.287478053845585e+00, -1.314162837575402e+00, -1.315200726965013e+00, -1.262637612068944e+00, -1.270564823537966e+00, -1.285622642870980e+00, -1.294613482952271e+00, -1.320781803512712e+00, -1.103700739004898e+00, -1.320781803512712e+00, -1.304646839866952e+00, -4.113945948497155e-01, -2.504033681569792e-01, -3.048371504439840e-01, -2.992584718742630e-01, -3.813303045767880e-01, -4.070446239763597e-01, -3.956794264628031e-01, -3.841931023673685e-01, -3.887597560796727e-01, -2.476323542394635e-01, -3.887597560796728e-01, -3.999923565753347e-01, 7.625809713511338e-02, 7.832243884176322e-02, -1.148180129501644e-01, -1.078719911577472e-01, 4.933048657258145e-02, 6.731958274170709e-02, -1.225848375306440e+00, -1.224711292570353e+00, 8.926553928032781e-02, 4.948571184095348e-02, 8.926553928032920e-02, 4.948571184095473e-02, -1.545804299665282e-03, -1.197313504377613e-02, -1.474267594229975e-02, -1.496830171554797e-02, -1.099589717463672e-02, -1.162934117986949e-02, -3.827425014848657e-02, -3.360358380534938e-02, -1.127803836202483e-02, -1.536131345623874e-02, -1.127803836202486e-02, -1.536131345623874e-02, -3.240679089238108e-01, -3.261237775239024e-01, -2.889971383949886e-01, -2.915673125299765e-01, -3.538851310960158e-01, -3.554724286183938e-01, -3.552638860064889e-01, -3.146915820975033e-01, -3.547848507749873e-01, -3.562462160858990e-01, -3.547848507749873e-01, -3.096071456801571e-01, -3.114231100727791e-01, -3.134418907546247e-01, -3.615409580114403e-01, -2.224564791555927e-01, -3.298528680257347e-01, -2.204813300324573e-01, -2.516178698472571e-01, -2.515879623008775e-01, -2.895855764462588e-01, -2.883326350676012e-01, -2.895855764462588e-01, -2.356705616106772e-01, -3.617759654744533e-01, -3.058316875432595e-01, -2.063290106992996e-01, -2.076008774295385e-01, -1.807446006831807e-01, -2.095046168034995e-01, -1.992860166437443e-01, -2.277532795622153e-01, -1.941882763914336e-01, -1.937523005190104e-01, -1.941882763914339e-01, -1.938587472455266e-01, -3.219041094493988e-01, -3.280731177641185e-01, -1.960971586647615e-02, -1.974396530655957e-02, -8.363054231735563e-02, -7.854447693030067e-02, -2.340628018858500e-01, -2.478013382829918e-01, 3.268688462362278e-02, 5.788001834609111e-02, 3.268688462362381e-02, 5.788001834609070e-02, -4.903293938415283e-03, -5.081061346496418e-03, -3.985105551591670e-03, -3.994210031046216e-03, -1.085336874668713e-03, -1.154343387785838e-03, -3.999782454406371e-02, -4.073468269587786e-02, -1.066628700003255e-02, -1.410370467710263e-02, -1.066628700003245e-02, -1.905991941484927e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_bmk_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_bmk", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-7.291095126875190e-08, 0.000000000000000e+00, -7.291485493649601e-08, -7.291052708474692e-08, 0.000000000000000e+00, -7.291454570639835e-08, -7.290878945600106e-08, 0.000000000000000e+00, -7.291215958407786e-08, -7.291362217041087e-08, 0.000000000000000e+00, -2.808237977464146e-08, -7.291073086713918e-08, 0.000000000000000e+00, -2.808749241772461e-08, -2.808316610488606e-08, 0.000000000000000e+00, -2.808749241772461e-08, -5.061165646033704e-06, 0.000000000000000e+00, -5.034316160795866e-05, -5.060620483156130e-06, 0.000000000000000e+00, -5.061497402406454e-06, -5.050882561813211e-06, 0.000000000000000e+00, -5.049083867892904e-06, -5.052548800323526e-06, 0.000000000000000e+00, -5.052253853946083e-06, -5.065640561091067e-06, 0.000000000000000e+00, -5.043887108666525e-06, -5.035300595518351e-05, 0.000000000000000e+00, -5.043887108666525e-06, -2.734906914171546e-02, 0.000000000000000e+00, -2.671164741870707e-02, -2.758754095054603e-02, 0.000000000000000e+00, -4.843476648002611e-03, -4.820864293898474e-03, 0.000000000000000e+00, -4.864536492311739e-03, -4.926382308097838e-03, 0.000000000000000e+00, -2.982614238248855e-02, -2.579458416884246e-02, 0.000000000000000e+00, -3.733963854151351e-02, -4.742280223957306e-03, 0.000000000000000e+00, -4.998185023874137e-03, -8.359715661277280e+00, 0.000000000000000e+00, -7.717807367055604e-01, -7.793034780914638e+00, 0.000000000000000e+00, -7.495312965216741e-01, -2.117075195398446e-03, 0.000000000000000e+00, -1.670381160514565e-02, -4.579063126696603e+00, 0.000000000000000e+00, -4.127345398860282e+00, -7.225485701548713e-01, 0.000000000000000e+00, -1.184611933309893e+01, -7.225485701548681e-01, 0.000000000000000e+00, -1.243129731729023e+02, -1.002937199798102e+02, 0.000000000000000e+00, -1.006166772612592e+02, -7.446292162882482e+06, 0.000000000000000e+00, -1.051566955232946e+02, -7.784175220995426e+03, 0.000000000000000e+00, -4.341889173445641e+01, -7.369394818633401e+01, 0.000000000000000e+00, -7.445218059025659e+01, -9.538766453161136e+01, 0.000000000000000e+00, -1.636749515797305e+02, -9.538766453161136e+01, 0.000000000000000e+00, -1.636749515806806e+02, -1.138968630013952e-05, 0.000000000000000e+00, -1.140097553870637e-05, -1.143996501346845e-05, 0.000000000000000e+00, -1.144962630744900e-05, -1.139328478352231e-05, 0.000000000000000e+00, -1.140322816615283e-05, -1.143639085051120e-05, 0.000000000000000e+00, -1.144738886726978e-05, -2.104425204016881e-05, 0.000000000000000e+00, -1.142537458183487e-05, -1.141491408224249e-05, 0.000000000000000e+00, -2.106494690299000e-05, -5.925540371900291e-05, 0.000000000000000e+00, -5.903225513682122e-05, -5.531472849206846e-05, 0.000000000000000e+00, -5.522147850927624e-05, -6.288442993328289e-05, 0.000000000000000e+00, -6.161527588276279e-05, -5.925431476448208e-05, 0.000000000000000e+00, -5.799068022958442e-05, -5.449238837216484e-05, 0.000000000000000e+00, -4.219760634621534e-04, -5.449238837216484e-05, 0.000000000000000e+00, -5.661992672659389e-05, -1.424252355813771e-02, 0.000000000000000e+00, -9.827804346381513e-02, -3.739005030948986e-02, 0.000000000000000e+00, -3.918475974496705e-02, -9.124411788963182e-03, 0.000000000000000e+00, -9.587101307701136e-03, -1.558537440374599e-02, 0.000000000000000e+00, -2.029632456057084e-02, -1.975830609985648e-02, 0.000000000000000e+00, -1.033508975517215e-01, -1.975830609985651e-02, 0.000000000000000e+00, -1.658187255450067e-02, -1.438711085305898e+01, 0.000000000000000e+00, -1.406911829375868e+01, -9.206092713519965e+00, 0.000000000000000e+00, -1.032290471577429e+00, -1.754859742425101e+01, 0.000000000000000e+00, -1.641548027803259e+01, -1.999078779479583e-04, 0.000000000000000e+00, -2.006470477449094e-04, -1.111771654692204e+01, 0.000000000000000e+00, -9.146390897953884e+00, -1.111771654692207e+01, 0.000000000000000e+00, -9.146390897953811e+00, -2.170881584424019e+08, 0.000000000000000e+00, -4.936203324536172e+01, -6.991350563711205e+01, 0.000000000000000e+00, -6.162870353041082e+01, -5.031499301002261e+02, 0.000000000000000e+00, -5.521163909659427e+02, -3.343565742009325e+01, 0.000000000000000e+00, -9.853843009193449e+02, -9.490585619130381e+01, 0.000000000000000e+00, -3.007529794638742e+02, -9.490585619128724e+01, 0.000000000000000e+00, -3.007529794634137e+02, -8.557955051568965e-02, 0.000000000000000e+00, -8.421687619415723e-02, -8.684364914515248e-02, 0.000000000000000e+00, -8.566477666749939e-02, -1.114755577055569e-01, 0.000000000000000e+00, -1.091072632260730e-01, -1.058128689969121e-01, 0.000000000000000e+00, -8.536689137302843e-02, -1.086753356908238e-01, 0.000000000000000e+00, -1.064105809780487e-01, -1.086753356908238e-01, 0.000000000000000e+00, -8.566450739104965e-02, -9.566600009174508e-02, 0.000000000000000e+00, -9.435785720870277e-02, -1.666460134325431e-02, 0.000000000000000e+00, -1.629069708448267e-01, -3.813354811564835e-02, 0.000000000000000e+00, -1.821770419932731e-01, -7.807954109663204e-02, 0.000000000000000e+00, -7.774465002084437e-02, -5.676487440876750e-02, 0.000000000000000e+00, -5.712658227512420e-02, -5.676487440876749e-02, 0.000000000000000e+00, -1.859339138479789e-01, -2.279025778024221e-02, 0.000000000000000e+00, -7.399656318896958e-02, -3.133247357772365e-01, 0.000000000000000e+00, -3.062488451160436e-01, -1.228581287930042e+00, 0.000000000000000e+00, -1.841769755853186e-01, -4.203755955896367e-01, 0.000000000000000e+00, -5.980102113001606e-02, -1.244183561840785e-01, 0.000000000000000e+00, -1.244930953916082e-01, -1.244183561840782e-01, 0.000000000000000e+00, -6.437177915191628e-01, -1.768507833413054e-02, 0.000000000000000e+00, -1.727372173668075e-02, -8.395019205271026e+03, 0.000000000000000e+00, -8.169095034141162e+03, -3.423681281698230e+01, 0.000000000000000e+00, -3.475043671520805e+01, -6.085460691429361e-02, 0.000000000000000e+00, -6.163007801186965e-02, -2.974320646132557e+01, 0.000000000000000e+00, -3.046448187416451e+01, -2.974320646132572e+01, 0.000000000000000e+00, -3.046448187416446e+01, -2.144395496639519e+06, 0.000000000000000e+00, -1.859684116138434e+06, -8.048064949829431e+01, 0.000000000000000e+00, -8.012676618908577e+01, -8.932971418001920e+08, 0.000000000000000e+00, -6.980943287334548e+08, -4.998524356274538e+02, 0.000000000000000e+00, -4.671611671800079e+02, -2.448436686145541e+02, 0.000000000000000e+00, -3.119399736406236e+02, -2.448436686145026e+02, 0.000000000000000e+00, -9.392263557995917e+07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_bmk_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_bmk", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-6.265167610713995e-04, -6.260319259389921e-04, -6.264434759383619e-04, -6.259787537980801e-04, -6.262353175296231e-04, -6.256729751715615e-04, -6.270573987099029e-04, 4.260025109351665e-05, -6.264698826742043e-04, 4.251459927447350e-05, 4.254790495270158e-05, 4.251459927447350e-05, -9.019572397107236e-04, -2.998504650725300e-03, -9.008568534876676e-04, -9.021488642258538e-04, -8.791911333018804e-04, -8.752486520125231e-04, -8.870551777678602e-04, -8.870134941298483e-04, -9.045492523990990e-04, -8.671897474011717e-04, -2.995666676195052e-03, -8.671897474011717e-04, 1.663582999695651e-03, 1.464706748016210e-03, 1.717204450826753e-03, 4.671466152693278e-03, 9.301217774621815e-03, 9.957985369576896e-03, 7.995531272558937e-03, 2.022464742784382e-03, 1.316492633480382e-03, 2.536758618669419e-03, 3.938275748199218e-03, 1.221136317241838e-02, 8.342658552736117e-03, 5.068390127406035e-02, 8.572304234210525e-03, 4.648888924621920e-02, 1.239059525657095e-02, 1.915748807150746e-03, 2.416433265658077e-02, 3.156987039952822e-02, 5.452843547049471e-02, 3.598309610125851e-03, 5.452843547049496e-02, 3.733947806341925e-04, -4.043461095183306e-09, -5.461148141294004e-09, 2.656939482132143e-09, -7.601881655312915e-09, 4.526015363059449e-06, 8.147952737051636e-06, -2.081835628224914e-10, -1.944657791760718e-10, -2.147606984475302e-09, -2.956728413713656e-10, -2.147606984475302e-09, -2.956728428003337e-10, 1.863674396730464e-04, 1.865333330389238e-04, 2.062172508645353e-04, 2.057129098749007e-04, 1.877191659660319e-04, 1.873756051273335e-04, 2.047373037194733e-04, 2.047856765620668e-04, 1.443902706366834e-03, 1.960130537985636e-04, 1.961962534910865e-04, 1.443117501706937e-03, -2.255455626012596e-03, -2.256671501247164e-03, -2.222601359169442e-03, -2.219785679860748e-03, -2.231711076049015e-03, -2.248724699004018e-03, -2.254760830483343e-03, -2.252149651424396e-03, -2.206626074794803e-03, -3.116871935439169e-03, -2.206626074794803e-03, -2.240147353985638e-03, 6.590890802860271e-03, -3.709215814625375e-02, 8.600988445028608e-04, 4.026021933824595e-04, -4.970390007002982e-03, 8.570685957468796e-04, 6.120419296994373e-03, 7.688106458637488e-03, 7.263929586680058e-03, -3.778595702469421e-02, 7.263929586680048e-03, 7.145345905551841e-03, 3.905212503692421e-03, 4.090437579206644e-03, 4.584889857339854e-03, 4.380772325678730e-02, 2.217219876792874e-03, 3.332287020030585e-03, 2.317583599443016e-03, 2.317845738399695e-03, 1.242720924842323e-02, 2.536705048069344e-02, 1.242720924842342e-02, 2.536705048069342e-02, 1.441200781241707e-11, -3.316476376818090e-11, -1.589167236124554e-10, -1.418556746877920e-10, -7.116055600724673e-10, -1.085048523717054e-09, 3.131095294623084e-04, 7.485154035536500e-05, -6.564460482543352e-11, -1.762854475488721e-09, -6.564460432027747e-11, -1.762854482846212e-09, 5.938782529614971e-02, 5.954941531659275e-02, 3.161292121974667e-02, 3.276477059467171e-02, 7.966939209974040e-02, 8.028043346790810e-02, 8.487591573476987e-02, 5.211732915976711e-02, 8.271205434256290e-02, 8.302047927048505e-02, 8.271205434256290e-02, 4.799732739814206e-02, 5.841217376853304e-02, 5.894140861152036e-02, 2.301748668314185e-03, -3.597373194217603e-02, 8.672596258287542e-03, -4.369059046713045e-02, 3.963302627125847e-04, 3.030793090995456e-04, 5.567864406527735e-03, 5.311404948816466e-03, 5.567864406527737e-03, -3.693293618283001e-02, 4.007852186571561e-03, -2.580682090215076e-02, 4.420933504555689e-02, 4.386203285788541e-02, 5.765966123969003e-03, 2.142802822267532e-02, -1.466328212136742e-02, -1.260322083130708e-02, -4.196131932046963e-03, -4.610771746712109e-03, -4.196131932046957e-03, -2.382005123461537e-03, -6.295519753008422e-03, -4.869137597415856e-03, 4.449032302209606e-06, 4.465646041770850e-06, 3.916638416108470e-05, 5.536300372323105e-05, -1.001970673093755e-02, -1.919188363609121e-03, 1.932806093873328e-03, 3.914892895914083e-03, 1.932806093873246e-03, 3.914892895913965e-03, 3.998488001963372e-09, 4.674310147540701e-09, -2.807081223781547e-13, -2.820594934264274e-13, 2.084285246107919e-11, 3.093261306153578e-11, 2.377349613564617e-04, 3.003708968667367e-04, -2.064234850738588e-10, -1.211108033989629e-09, -2.064234854249182e-10, 5.781860589632327e-10])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
