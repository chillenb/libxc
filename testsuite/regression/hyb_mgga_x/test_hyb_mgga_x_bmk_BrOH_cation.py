
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_bmk_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_bmk", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.207218462374165e+01, -1.207215247765922e+01, -1.207212635776166e+01, -1.207260213827516e+01, -1.207233628790957e+01, -1.207233628790957e+01, -2.032695321764843e+00, -2.032660669857745e+00, -2.031941116848537e+00, -2.033948806685081e+00, -2.032880325033648e+00, -2.032880325033648e+00, -4.141392755291735e-01, -4.142863536023638e-01, -4.171219230758444e-01, -4.202928071427268e-01, -4.160541163246210e-01, -4.160541163246210e-01, -1.194166240032317e-01, -1.216747059298959e-01, -4.780311867266305e-01, -8.225923628304012e-02, -1.161761294253834e-01, -1.161761294253833e-01, -1.974007999444863e-02, -2.076860758282708e-02, -9.692191659749558e-02, -1.143290806243915e-02, -1.591720391624657e-02, -1.591720391624657e-02, -2.768786630499042e+00, -2.765103050687209e+00, -2.768640040159882e+00, -2.765388009557156e+00, -2.766908081202034e+00, -2.766908081202034e+00, -1.256609244595777e+00, -1.261426439513551e+00, -1.257544990943142e+00, -1.261515912519477e+00, -1.258959766179762e+00, -1.258959766179762e+00, -3.396568868834509e-01, -2.956640357908956e-01, -3.177123622618557e-01, -2.830026601540960e-01, -3.399587584782196e-01, -3.399587584782197e-01, -1.089499512366353e-01, -1.112752302505367e-01, -1.114436340399126e-01, -9.095974399171378e-01, -8.455822706274277e-02, -8.455822706274271e-02, -8.832372188182603e-03, -1.117552315955657e-02, -8.549503743214483e-03, -1.139065077898316e-01, -1.073548431412653e-02, -1.073548431412653e-02, -2.636346288717577e-01, -2.752337109731620e-01, -2.706177774179367e-01, -2.672451621209028e-01, -2.688771210463687e-01, -2.688771210463687e-01, -2.488632077740130e-01, -3.051733723736813e-01, -3.088531726506545e-01, -2.926621578931049e-01, -3.039106124669390e-01, -3.039106124669390e-01, -3.163865425490958e-01, -1.501180875749465e-01, -1.830964334299036e-01, -2.178321985222231e-01, -2.009419739335102e-01, -2.009419739335101e-01, -2.807194668332863e-01, -9.476806964847756e-02, -1.131816027268221e-01, -2.034018872595243e-01, -1.012374657201525e-01, -1.012374657201523e-01, -2.768208884414202e-02, -2.992401375093840e-03, -6.288560299316689e-03, -1.050167645659720e-01, -9.861941306252351e-03, -9.861941306252339e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_bmk_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_bmk", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.015825961921141e+01, -1.015799300040207e+01, -1.015812182539139e+01, -1.015789305049332e+01, -1.015788139010302e+01, -1.015749262016802e+01, -1.015943050584849e+01, -1.015946897624947e+01, -1.015816639703147e+01, -1.015882621678194e+01, -1.015816639703147e+01, -1.015882621678194e+01, -2.129939324722871e+00, -2.129392784733212e+00, -2.129872209536840e+00, -2.129290828858149e+00, -2.127868187854419e+00, -2.127361087187202e+00, -2.131454723674473e+00, -2.130901541379808e+00, -2.129807334760192e+00, -2.129164449728191e+00, -2.129807334760192e+00, -2.129164449728191e+00, -4.213141263293759e-01, -4.191215131534282e-01, -4.221160311079638e-01, -4.192649072536609e-01, -4.411331062438075e-01, -4.504679349041165e-01, -4.434114146567296e-01, -4.396689778991981e-01, -4.177537723686304e-01, -5.070886417718147e-01, -4.177537723686304e-01, -5.070886417718147e-01, -1.666500206169965e-01, -1.633222041235025e-01, -1.684807828345323e-01, -1.613891795578170e-01, -5.100080405752925e-01, -4.867697068788790e-01, -1.080504771327977e-02, -2.307011632761922e-02, -1.748739790357362e-01, 9.728928397273849e-02, -1.748739790357369e-01, 9.728928397273931e-02, -2.514651750020874e-02, -2.665936125541518e-02, -2.628782105330376e-02, -2.807483824843485e-02, -8.615559269762180e-02, -8.427236364881360e-02, -1.530215074218376e-02, -1.505165717201191e-02, -2.251927965404629e-02, -1.290733786877298e-02, -2.251927965404638e-02, -1.290733786877292e-02, -2.290403243748250e+00, -2.289935108067248e+00, -2.290802694122734e+00, -2.290314199575259e+00, -2.290453466272868e+00, -2.289968935551305e+00, -2.290793090977674e+00, -2.290310750490390e+00, -2.290559660263363e+00, -2.290099782091616e+00, -2.290559660263363e+00, -2.290099782091616e+00, -1.298621345166617e+00, -1.299779190213835e+00, -1.321976010666761e+00, -1.322631586855737e+00, -1.277630893167440e+00, -1.284622327431772e+00, -1.296633521859789e+00, -1.304521497812216e+00, -1.327231182512144e+00, -1.313918095306434e+00, -1.327231182512144e+00, -1.313918095306434e+00, -3.299149835263934e-01, -3.276369891877269e-01, -2.719640467753237e-01, -2.744101948797847e-01, -3.281496034243713e-01, -3.296814015558393e-01, -2.532351125931609e-01, -2.516547573162106e-01, -3.144716488927247e-01, -3.129758957637197e-01, -3.144716488927248e-01, -3.129758957637196e-01, 8.935661075900291e-02, 9.142764204271803e-02, -1.212694409342194e-01, -1.239777767511130e-01, 7.237026931023524e-02, 8.281895712494680e-02, -8.102630759782006e-01, -8.097750300956377e-01, 8.174968743251157e-02, 3.391652932487239e-02, 8.174968743251135e-02, 3.391652932487307e-02, -1.150417030739995e-02, -1.195537432392754e-02, -1.472167127376111e-02, -1.494544692026153e-02, -1.098433382801779e-02, -1.161416233144407e-02, -1.086440689956366e-02, -1.202455248928983e-02, -1.124482881097087e-02, -1.535646806001130e-02, -1.124482881097092e-02, -1.535646806001133e-02, -3.358966294582416e-01, -3.376677759863518e-01, -2.973868491972981e-01, -2.999386214537256e-01, -3.118570615081284e-01, -3.143206130816321e-01, -3.235162239832852e-01, -3.255600125668419e-01, -3.177973045808888e-01, -3.200510307665241e-01, -3.177973045808888e-01, -3.200510307665241e-01, -3.364442906031263e-01, -3.375814854711722e-01, -3.549387638465675e-01, -3.559210079822032e-01, -3.131163034474820e-01, -3.109191409246150e-01, -2.388098884168896e-01, -2.391059513493703e-01, -2.702001716541793e-01, -2.697099272614458e-01, -2.702001716541793e-01, -2.697099272614458e-01, -2.787163406981550e-01, -2.801077733707618e-01, -2.107068627720106e-01, -2.119059397195596e-01, -2.132232591688492e-01, -2.099744759245030e-01, -2.272356565597250e-01, -2.284159543417856e-01, -1.979176561965313e-01, -1.975681610056915e-01, -1.979176561965311e-01, -1.975681610056913e-01, -3.091298139145290e-01, -3.130664966478602e-01, -8.883717598086797e-02, -8.871655832344194e-02, -7.093406571328821e-02, -6.546892635435242e-02, -2.170717676724932e-01, -2.234282396549126e-01, 4.975742325036801e-02, 6.925286008701666e-02, 4.975742325036624e-02, 6.925286008701600e-02, -3.541923578662623e-02, -3.659621368301044e-02, -3.983122997989618e-03, -3.991022786150567e-03, -8.088404025145979e-03, -8.598481630558803e-03, 4.405130961981215e-02, 4.648886834647736e-02, -1.063148441396885e-02, -1.409980452683046e-02, -1.063148441396877e-02, -1.409980452683049e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_bmk_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_bmk", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-3.025852246395246e-08, 0.000000000000000e+00, -3.025983917266530e-08, -3.025939852163144e-08, 0.000000000000000e+00, -3.026047467583416e-08, -3.026058086277715e-08, 0.000000000000000e+00, -3.026262189632934e-08, -3.025073862196632e-08, 0.000000000000000e+00, -3.025006215786437e-08, -3.025913084780561e-08, 0.000000000000000e+00, -3.025389067061314e-08, -3.025913084780561e-08, 0.000000000000000e+00, -3.025389067061314e-08, -2.072450297336639e-05, 0.000000000000000e+00, -2.074980664204675e-05, -2.072925365751869e-05, 0.000000000000000e+00, -2.075573033669933e-05, -2.085505555681250e-05, 0.000000000000000e+00, -2.088488078710640e-05, -2.067207831976966e-05, 0.000000000000000e+00, -2.069929428321615e-05, -2.072426268425344e-05, 0.000000000000000e+00, -2.080932363701511e-05, -2.072426268425344e-05, 0.000000000000000e+00, -2.080932363701511e-05, -9.143078790648277e-03, 0.000000000000000e+00, -9.488462335672222e-03, -9.032570955050719e-03, 0.000000000000000e+00, -9.455189749376171e-03, -7.436908807777169e-03, 0.000000000000000e+00, -6.869430424909304e-03, -7.219784873165231e-03, 0.000000000000000e+00, -7.442921416669294e-03, -9.902078174819331e-03, 0.000000000000000e+00, -4.573936354487796e-03, -9.902078174819331e-03, 0.000000000000000e+00, -4.573936354487796e-03, -7.009101534678784e-01, 0.000000000000000e+00, -7.336435646624868e-01, -6.526321900158261e-01, 0.000000000000000e+00, -7.097225503764254e-01, -4.358801999704336e-03, 0.000000000000000e+00, -5.516138385350610e-03, -3.746626430300926e+00, 0.000000000000000e+00, -3.560005255504785e+00, -5.661137722215868e-01, 0.000000000000000e+00, -1.590561157916343e+01, -5.661137722215795e-01, 0.000000000000000e+00, -1.590561157916352e+01, -1.027546548104728e+02, 0.000000000000000e+00, -1.016630319787290e+02, -1.081996172380807e+02, 0.000000000000000e+00, -1.075599624988498e+02, -5.288359936062160e+01, 0.000000000000000e+00, -5.232130239017816e+01, -9.442129023111997e+01, 0.000000000000000e+00, -9.186532536548332e+01, -1.026859807833376e+02, 0.000000000000000e+00, -2.610366935791943e+02, -1.026859807833633e+02, 0.000000000000000e+00, -2.610366935800175e+02, -1.144219953682286e-05, 0.000000000000000e+00, -1.145052443818058e-05, -1.149191200652655e-05, 0.000000000000000e+00, -1.149862671458880e-05, -1.144456394892795e-05, 0.000000000000000e+00, -1.145189069307052e-05, -1.148722983446029e-05, 0.000000000000000e+00, -1.149559772712227e-05, -1.146804817561825e-05, 0.000000000000000e+00, -1.147480013576279e-05, -1.146804817561825e-05, 0.000000000000000e+00, -1.147480013576279e-05, -7.207752026965804e-05, 0.000000000000000e+00, -7.156822534934139e-05, -6.733556033100018e-05, 0.000000000000000e+00, -6.696832179746301e-05, -7.234585671858560e-05, 0.000000000000000e+00, -7.176527721459945e-05, -6.796874162475287e-05, 0.000000000000000e+00, -6.731322672097451e-05, -6.969209594148380e-05, 0.000000000000000e+00, -6.912824211976756e-05, -6.969209594148380e-05, 0.000000000000000e+00, -6.912824211976756e-05, -3.604582006710173e-02, 0.000000000000000e+00, -3.686012419733412e-02, -7.177710501279892e-02, 0.000000000000000e+00, -7.261530120020659e-02, -3.690464286264033e-02, 0.000000000000000e+00, -3.753931127194646e-02, -8.434679899377170e-02, 0.000000000000000e+00, -8.075400836846434e-02, -3.879310343819469e-02, 0.000000000000000e+00, -4.256253947783270e-02, -3.879310343819471e-02, 0.000000000000000e+00, -4.256253947783271e-02, -1.652883090540725e+01, 0.000000000000000e+00, -1.629284418484515e+01, -9.286714974230267e-01, 0.000000000000000e+00, -8.968728530172078e-01, -2.150576461662968e+01, 0.000000000000000e+00, -1.910808687541748e+01, -7.555626959142560e-04, 0.000000000000000e+00, -7.575440478312121e-04, -1.152257302135098e+01, 0.000000000000000e+00, -8.858442368453460e+00, -1.152257302135098e+01, 0.000000000000000e+00, -8.858442368453458e+00, -1.326247190446582e+02, 0.000000000000000e+00, -1.147907201087840e+02, -1.141328693799035e+02, 0.000000000000000e+00, -1.053780111796207e+02, -6.497381060899587e+02, 0.000000000000000e+00, -7.224872969298153e+02, -4.567095903544569e+01, 0.000000000000000e+00, -4.410859775816894e+01, -3.232991660061074e+02, 0.000000000000000e+00, -3.170957777716095e+02, -3.232991660056479e+02, 0.000000000000000e+00, -3.170957777713785e+02, -9.122050754491547e-02, 0.000000000000000e+00, -8.959763898674312e-02, -9.299783186132281e-02, 0.000000000000000e+00, -9.154724025259714e-02, -9.315073677457721e-02, 0.000000000000000e+00, -9.158275114413342e-02, -9.257421303486751e-02, 0.000000000000000e+00, -9.096802597592317e-02, -9.294050353220358e-02, 0.000000000000000e+00, -9.134488807556938e-02, -9.294050353220358e-02, 0.000000000000000e+00, -9.134488807556938e-02, -1.087018407952562e-01, 0.000000000000000e+00, -1.067033966024943e-01, -2.035153247670370e-02, 0.000000000000000e+00, -2.059395476260577e-02, -4.650675887229072e-02, 0.000000000000000e+00, -4.748022428120882e-02, -9.193090074288747e-02, 0.000000000000000e+00, -9.137263523153538e-02, -6.879005186604692e-02, 0.000000000000000e+00, -6.866332596048844e-02, -6.879005186604692e-02, 0.000000000000000e+00, -6.866332596048844e-02, -5.507940583577581e-02, 0.000000000000000e+00, -5.647381967048538e-02, -2.838797116187148e-01, 0.000000000000000e+00, -2.770321839598481e-01, -1.756080152166695e-01, 0.000000000000000e+00, -1.755203518089132e-01, -1.042132136973273e-01, 0.000000000000000e+00, -1.031829094299114e-01, -1.362210015655604e-01, 0.000000000000000e+00, -1.368337231605868e-01, -1.362210015655605e-01, 0.000000000000000e+00, -1.368337231605868e-01, -3.492803223169390e-02, 0.000000000000000e+00, -3.427740736115490e-02, -4.889617926017201e+01, 0.000000000000000e+00, -4.886613602155650e+01, -4.347996889708890e+01, 0.000000000000000e+00, -4.358674224102498e+01, -1.694749385357548e-01, 0.000000000000000e+00, -1.633005569526789e-01, -3.497666252569996e+01, 0.000000000000000e+00, -3.460299706813929e+01, -3.497666252569965e+01, 0.000000000000000e+00, -3.460299706813931e+01, -8.110249619938796e+01, 0.000000000000000e+00, -8.273129036070560e+01, -4.084267137768963e+02, 0.000000000000000e+00, -7.234081877742165e+02, -2.519401636412154e+02, 0.000000000000000e+00, -2.681727279671409e+02, -3.995489660646848e+01, 0.000000000000000e+00, -3.842610071938111e+01, -6.662214393280840e+02, 0.000000000000000e+00, -3.293362298412380e+02, -6.662214393292741e+02, 0.000000000000000e+00, -3.293362298416059e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_bmk_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_bmk", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_bmk_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_bmk", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.205874721590507e-05, 2.204080755409041e-05, 2.204526220046830e-05, 2.203102583134175e-05, 2.201763938332551e-05, 2.198712641500670e-05, 2.216942212310213e-05, 2.218067294153297e-05, 2.204985620786087e-05, 2.211467974532781e-05, 2.204985620786087e-05, 2.211467974532781e-05, 5.064923599027639e-04, 5.050937513856468e-04, 5.067493816087595e-04, 5.051435804972393e-04, 5.103083114614568e-04, 5.105743419878808e-04, 5.144988040914249e-04, 5.133144125499582e-04, 5.061239934026907e-04, 5.166464484928908e-04, 5.061239934026907e-04, 5.166464484928908e-04, -1.107455449357398e-04, -1.578128993305942e-04, -8.699117956770251e-05, -1.546136714573570e-04, 5.669355910707175e-04, 9.517407283596819e-04, 6.808778647820992e-04, 5.495455036196377e-04, -2.036005654178533e-04, 3.754166151377463e-03, -2.036005654178533e-04, 3.754166151377463e-03, 5.095384229011848e-02, 4.828620001628483e-02, 4.852545052319324e-02, 4.339767329696469e-02, -1.447149305069988e-04, -3.629388416227937e-04, 2.253257001970893e-02, 2.992073816899051e-02, 4.756431549030220e-02, 4.189290804367511e-03, 4.756431549030240e-02, 4.189290804367582e-03, -4.040029610315551e-09, -5.458898845109833e-09, -5.341870508831808e-09, -7.593969288300157e-09, 5.630719671041950e-06, 1.024221871012167e-05, -2.076180108359776e-10, -1.940347886335432e-10, -2.143316345423501e-09, -2.939696584386162e-10, -2.143316345423498e-09, -2.939696598593515e-10, 1.915289149400981e-04, 1.914017017909875e-04, 2.117142961606922e-04, 2.108837061153992e-04, 1.927858040131292e-04, 1.921724931487529e-04, 2.100887260732418e-04, 2.098560775870161e-04, 2.016187582005215e-04, 2.010484156497220e-04, 2.016187582005215e-04, 2.010484156497220e-04, -1.268043774443478e-03, -1.288990361786906e-03, -1.299221882837152e-03, -1.316730340003606e-03, -1.454339821854874e-03, -1.427351015882115e-03, -1.531921549026820e-03, -1.493449209013922e-03, -1.101805209344274e-03, -1.282827773893942e-03, -1.101805209344274e-03, -1.282827773893942e-03, 4.262711799892839e-03, 4.279987277559757e-03, -9.633116533114891e-03, -8.175087553496064e-03, 3.773664821397439e-03, 4.452706094373093e-03, -1.526632441326333e-02, -1.543352644441317e-02, 2.004356744968442e-03, 2.878917037621477e-03, 2.004356744968451e-03, 2.878917037621474e-03, 4.199002349031061e-03, 4.414773982419240e-03, 4.175259059097983e-02, 4.165409429741742e-02, 2.477307880520532e-03, 3.611678651222004e-03, -6.596846951812806e-03, -6.606631123299299e-03, 1.264661335334762e-02, 2.505435928622074e-02, 1.264661335334784e-02, 2.505435928622073e-02, -3.082319839337080e-11, -3.298821359196235e-11, -1.580989778498595e-10, -1.410737537940599e-10, -7.088834064445328e-10, -1.079877021779712e-09, 3.830712415222971e-04, 4.681064117139084e-04, -6.494956139598232e-11, -1.760808662717839e-09, -6.494956089617302e-11, -1.760808670066768e-09, 7.002853375095727e-02, 6.985388377970371e-02, 3.867047178148508e-02, 3.979033966181115e-02, 5.122367630548684e-02, 5.220606579509958e-02, 6.130464623601863e-02, 6.177292370927807e-02, 5.642111353642772e-02, 5.715976506523688e-02, 5.642111353642772e-02, 5.715976506523682e-02, 8.079938930783280e-02, 8.051700511084878e-02, 3.731221042045748e-03, 4.108812743022794e-03, 8.146035671319806e-03, 7.932451159363986e-03, -1.254892563790474e-03, -1.271928473770684e-03, 3.532539798077059e-03, 3.333216401811128e-03, 3.532539798077059e-03, 3.333216401811129e-03, -1.411633501388768e-02, -1.312720055881315e-02, 4.175521266258263e-02, 4.131082502173022e-02, 1.951204314517553e-02, 1.734711634355804e-02, -6.094257864674288e-04, -4.144857382336273e-04, -2.445571081927669e-03, -2.661965417595743e-03, -2.445571081927668e-03, -2.661965417595760e-03, 1.969278872011713e-03, 2.678435501168768e-03, 4.432626718398383e-06, 4.635062058943055e-06, 4.798643473164211e-05, 6.646499498777679e-05, 5.484221123777885e-03, 8.375656989936048e-03, 2.116400234244244e-03, 4.189017606519635e-03, 2.116400234244161e-03, 4.189017606519509e-03, -7.644203436346373e-09, -8.833621081723864e-09, -2.802103412078531e-13, -2.812571942153471e-13, -4.479802919159087e-11, -6.636798956316003e-11, 2.088193741874344e-03, 2.678510272507647e-03, -2.039912285889958e-10, -1.209881787139891e-09, -2.039912289359200e-10, -1.209881797126163e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
