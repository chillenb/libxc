
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_dldf_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_dldf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-6.922595653240504e+00, -6.922571733797687e+00, -6.922481145601689e+00, -6.922868223201074e+00, -6.922582958067316e+00, -6.922582958067316e+00, -1.277532872040840e+00, -1.277516143504208e+00, -1.277058619164053e+00, -1.277337844907407e+00, -1.277534305169136e+00, -1.645707741285405e+00, -2.618035341790653e-01, -4.169291562467888e-01, -4.337160100394475e-01, -4.242673845587988e-01, -4.165205509430340e-01, -4.165205509430340e-01, -1.228713586163211e-01, -1.217750657901202e-01, -3.288654251598769e-01, -1.649907283855540e-01, -1.225771682932637e-01, -1.225771682932637e-01, -2.980093120042851e-02, -3.116072571082929e-02, -1.071682116905533e-01, -1.453141093749754e-02, -3.083505338490571e-02, -3.083505338490571e-02, -1.632635304800841e+00, -1.628080848092446e+00, -1.632131493880451e+00, -1.522119025012834e+00, -1.630356599218155e+00, -1.630356599218155e+00, -7.289064613544425e-01, -7.319170611807569e-01, -7.277829454186912e-01, -7.300803348039646e-01, -7.324051073968287e-01, -9.787299096749145e-01, -2.452939245693076e-01, -2.260576841957701e-01, -2.476804410310147e-01, -2.337261735258201e-01, -2.429189871316671e-01, -2.100590286799629e-01, -4.635037701430891e-02, -1.615809860539809e-01, -4.561748102335619e-02, -7.689941305390675e-01, -1.481878238283197e-01, -1.481878238283197e-01, -2.388634953877605e-03, -1.600534996899501e-02, -1.199124657908996e-02, -2.987142317162349e-02, -2.487235783073981e-03, -1.458742235292897e-02, -9.735081454802899e-02, -1.354917965668349e-01, -1.199525736795286e-01, -1.128003283632962e-01, -1.181895261936160e-01, -1.181895261936160e-01, -1.092009616839170e-01, -2.162550493237798e-01, -2.058477025674769e-01, -1.873765754501969e-01, -1.984713719570299e-01, -1.779549487669087e-01, -2.512395584085028e-01, -9.373426065755237e-02, -1.669569200922265e-01, -1.305358073478572e-01, -1.669514609743308e-01, -1.669514609743307e-01, -1.659254867893390e-01, -1.022392709088669e-01, -1.252543292180922e-01, -1.553684065589339e-01, -3.791072485970488e-02, -1.378332787972124e-01, -3.501942876479368e-02, -4.396373220487085e-03, -8.341997075804993e-03, -1.316501102605001e-01, -1.240321329431847e-02, -1.240321329431845e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_dldf_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_dldf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-6.714070422690602e+00, -6.713967881730666e+00, -6.713533388194958e+00, -6.715199685869317e+00, -6.714016311310139e+00, -6.714016311310139e+00, -1.563081949591350e+00, -1.563066620415528e+00, -1.562648425609148e+00, -1.562938228538818e+00, -1.563085132218033e+00, -1.089703775450939e+00, -3.013457521891049e-01, -1.160357292641926e-01, -9.291829997407547e-02, -1.024851044542868e-01, -1.166406851110718e-01, -1.166406851110718e-01, -2.558595902811722e-02, -2.775220392032004e-02, -3.724130845909425e-01, -1.651280624433375e-02, -2.620181220768686e-02, -2.620181220768686e-02, -3.829187141086881e-02, -3.990186063380134e-02, -9.671214064963160e-02, -1.927719652936037e-02, -3.948244350077688e-02, -3.948244350077689e-02, -1.038378269770407e+00, -1.032263211926685e+00, -1.037701495082684e+00, -1.226984501491031e+00, -1.035313865481759e+00, -1.035313865481759e+00, -8.831205529838438e-01, -8.891858414208960e-01, -8.806062054601744e-01, -8.854319522657590e-01, -8.903521882506304e-01, -5.781771282353649e-01, -1.905499229492444e-01, -1.652112704175256e-01, -1.802225995057065e-01, -1.835708995015055e-01, -1.907228872123504e-01, -2.382691550965857e-01, -5.757545564227563e-02, -1.046533351770529e-02, -5.648101809075448e-02, -6.033676842592792e-01, -1.889876189986806e-02, -1.889876189986806e-02, -3.183953347611419e-03, -2.119319484755519e-02, -1.586549870256476e-02, -3.861272173568630e-02, -3.315295861824183e-03, -1.932616780318398e-02, -5.061688868248629e-02, -6.755349244045157e-02, -6.722646771878137e-02, -5.536092953297632e-02, -5.767811540675023e-02, -5.767811540675023e-02, -5.361229564936270e-02, -1.659423863025957e-01, -1.604509216301665e-01, -1.310671800309029e-01, -1.493653640579844e-01, -1.818217841227040e-01, -1.926175426397194e-01, -1.063328792601535e-01, -5.166084644885859e-02, -1.584325375725448e-01, -7.830747480212473e-02, -7.830747480212466e-02, -2.030572938572111e-01, -9.848814905698569e-02, -9.618288886233355e-02, -1.049271738514542e-01, -4.748814205313787e-02, -5.003112258449245e-02, -4.523313109927743e-02, -5.858631257603387e-03, -1.109198223365082e-02, -4.796251184865191e-02, -1.644748266879507e-02, -1.644748266879505e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_dldf_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_dldf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.559572042423634e-09, -4.559500950591292e-09, -4.559153676523471e-09, -4.560315660810932e-09, -4.559534838250994e-09, -4.559534838250994e-09, -7.356725785724195e-06, -7.356552257526820e-06, -7.350283995023603e-06, -7.350360983436693e-06, -7.356537642152608e-06, -6.513763994550243e-06, -5.825307791493291e-03, -4.517280123010814e-03, -4.924840778341671e-03, -4.820907459410725e-03, -4.507747005457806e-03, -4.507747005457806e-03, -7.841600266662414e-01, -7.494356639487594e-01, -2.959217761879260e-03, -1.828967741691640e+00, -7.734756205393442e-01, -7.734756205393442e-01, -6.002692196514433e+01, -5.937336388892201e+01, -1.502730915900043e+01, -2.192928182693174e+01, -6.209622050434558e+01, -6.209622050434555e+01, -1.136192395232963e-06, -1.132842022318541e-06, -1.135826974136637e-06, -1.166404409827356e-06, -1.134509230837901e-06, -1.134509230837901e-06, -7.475631559972309e-05, -7.247561531251284e-05, -7.571321256434962e-05, -7.389214887570798e-05, -7.201791991008532e-05, -6.243840156036843e-05, -8.485857802879261e-03, -5.774077880178603e-03, -1.044119934165313e-02, -8.803818607320546e-03, -7.251086094330166e-03, -7.739025354778964e-03, -1.569649512041913e+01, -6.724194953464580e-01, -1.647755963418253e+01, -7.066923097304425e-05, -3.259416021585760e+00, -3.259416021585760e+00, -3.006734233155406e+06, -2.762719830732085e+01, -1.085039690231552e+02, -1.084040497470555e+02, -2.557290213878835e+06, -3.405793595257544e+01, -3.613839705533553e-03, -5.046576992836189e-03, -4.640236673531128e-03, -4.192448237018327e-03, -4.394731426199419e-03, -4.394731426199419e-03, -4.731868247492665e-03, -1.506497293163033e-02, -1.247323413034608e-02, -9.992421680923484e-03, -1.129229971322772e-02, -1.184506180679411e-02, -4.916984936418683e-03, -4.172989127735111e-01, -1.581111026487519e-01, -7.201229429172000e-02, -9.993729284139018e-02, -9.993729284139022e-02, -2.532850936214930e-02, -1.495360670421698e+01, -1.065619847409434e+01, -7.911343014251834e-02, -3.644557858198266e+01, -7.718356602121036e+00, -2.356531364122820e+01, -3.074326477113850e+01, -6.030077659919833e+01, -9.287875977222146e+00, -4.791899927182110e+01, -4.791899927182106e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_dldf_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_dldf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-1.475190487731751e-03, -1.475264542462414e-03, -1.475585134743454e-03, -1.474380836045829e-03, -1.475229520703476e-03, -1.475229520703476e-03, -1.056195438487425e-03, -1.056382050877511e-03, -1.062074580776718e-03, -1.059758522711025e-03, -1.056242191462014e-03, -1.360641310474369e-03, -4.461270180750703e-03, -7.097753075174716e-03, -7.111835129958223e-03, -7.153990980257062e-03, -7.095614644353964e-03, -7.095614644353964e-03, -2.518378351928796e-02, -2.513431097010323e-02, -2.874255680237343e-03, -1.396290351082538e-02, -2.517041543394868e-02, -2.517041543394868e-02, -8.308811115286636e-05, -9.462671337624246e-05, -1.930449559848888e-03, -3.292325380336888e-06, -9.590763801218215e-05, -9.590763801217795e-05, -1.233313983638425e-02, -1.246637653040312e-02, -1.234782785777280e-02, -1.163730230302767e-02, -1.239979669232208e-02, -1.239979669232208e-02, -1.704357162824300e-03, -1.709165835248980e-03, -1.703127328561098e-03, -1.705282984480866e-03, -1.711890265404560e-03, -2.287638614083244e-03, -1.552139633151431e-02, -5.377142795271767e-02, -1.035203834234595e-02, -2.212125806535669e-02, -2.297053685728034e-02, -1.986328330062670e-02, -2.530620567043150e-03, -1.908474534390592e-02, -2.817900354330743e-03, -7.556339602177027e-03, -1.440014040361582e-02, -1.440014040361582e-02, -7.679858453635980e-07, -5.563869780215889e-06, -9.204507806410479e-06, -7.462056769062322e-04, -8.843858728745544e-07, -5.186846513861835e-06, -3.376890985774474e-01, -2.321497748691802e-01, -2.579001764700452e-01, -2.941413230649370e-01, -2.791928920047372e-01, -2.791928920047372e-01, -3.038715882435364e-01, -1.545029075702156e-02, -3.372431562565506e-02, -7.944572223182036e-02, -5.094805971695516e-02, -4.568144648421685e-02, -3.433682423046353e-02, -1.093477603983888e-02, -1.729988249304605e-02, -9.555923459386318e-03, -1.487577221706908e-02, -1.487577221706909e-02, -8.564166319697629e-03, -1.477473113069105e-03, -2.914426184291505e-03, -1.459002830989657e-02, -2.396324871611879e-03, -8.712397753930583e-03, -5.235785934723222e-05, -1.266070724108822e-07, -1.704436478323265e-06, -9.091749093848935e-03, -4.477382029172108e-06, -4.477382029173388e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
