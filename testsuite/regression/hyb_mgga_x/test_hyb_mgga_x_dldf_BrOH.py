
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_dldf_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_dldf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-7.584656423745881e+00, -7.584613446410561e+00, -7.584463631713989e+00, -7.585161883797015e+00, -7.584633467604532e+00, -7.584633467604532e+00, -1.445270343127067e+00, -1.445224587391659e+00, -1.443970544937896e+00, -1.445556278139205e+00, -1.445258164251688e+00, -1.445258164251688e+00, -3.229573783046335e-01, -3.235090169376741e-01, -3.408034091701830e-01, -3.397069402829247e-01, -3.231512201083346e-01, -3.231512201083346e-01, -1.176630316361238e-01, -1.160410792530755e-01, -3.843301213598296e-01, -1.402517053227072e-01, -1.171448742622586e-01, -1.171448742622586e-01, -2.979042851485842e-02, -3.114552647747946e-02, -1.047450740836769e-01, -1.451599567636076e-02, -3.082202446021446e-02, -3.082202446021446e-02, -1.631941728967569e+00, -1.627396959217781e+00, -1.631447737407390e+00, -1.627916275144118e+00, -1.629656131258531e+00, -1.629656131258531e+00, -9.561549633691663e-01, -9.553034839875137e-01, -9.615264991922267e-01, -9.607082994583990e-01, -9.488223490772513e-01, -9.488223490772513e-01, -2.294687165347660e-01, -2.108286244268490e-01, -2.235852214306142e-01, -2.101442975843890e-01, -2.305618174834288e-01, -2.305618174834288e-01, -1.478669135879047e-01, -1.560797804887146e-01, -1.425113248993983e-01, -6.862199674109800e-01, -1.385407308126744e-01, -1.385407308126744e-01, -1.400499915653658e-02, -1.598840608172371e-02, -1.198561099313165e-02, -1.235622593381855e-01, -1.456765378730293e-02, -1.456765378730293e-02, -9.651226749036848e-02, -1.343741780075379e-01, -1.222757579131619e-01, -1.118436282645710e-01, -1.171925641162147e-01, -1.171925641162147e-01, -1.073194422952988e-01, -2.142106865811825e-01, -2.033171745776311e-01, -1.846393917780052e-01, -1.956574717752745e-01, -1.956574717752745e-01, -2.302469978537929e-01, -1.608130781290901e-01, -1.596129854623554e-01, -1.605141966755069e-01, -1.574433474349412e-01, -1.574433474349411e-01, -1.998777888499217e-01, -1.011160202168263e-01, -1.206850751832645e-01, -1.415234930327489e-01, -1.296661106038815e-01, -1.296661106038814e-01, -3.480373494786228e-02, -4.395632420432919e-03, -8.340997478465558e-03, -1.232600697642671e-01, -1.238791703178081e-02, -1.238791703178080e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_dldf_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_dldf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-5.625273545520599e+00, -5.625193882544215e+00, -5.624821002414231e+00, -5.626113356852830e+00, -5.625231838897825e+00, -5.625231838897825e+00, -1.333039525396228e+00, -1.333062756280804e+00, -1.333702884452894e+00, -1.332285124007743e+00, -1.333060574252860e+00, -1.333060574252860e+00, -2.164607130049960e-01, -2.153579475398911e-01, -1.845173563558804e-01, -1.874277558794771e-01, -2.160631952107849e-01, -2.160631952107849e-01, -2.985790252960511e-02, -3.263367500780408e-02, -2.924252644970119e-01, -1.182381306276987e-02, -3.070960122146368e-02, -3.070960122146368e-02, -3.825106657227708e-02, -3.984297306233914e-02, -8.969256383934164e-02, -1.921583149406482e-02, -3.943196422383535e-02, -3.943196422383535e-02, -1.039613558558623e+00, -1.033483836408218e+00, -1.038919579186622e+00, -1.034158080564945e+00, -1.036562761929137e+00, -1.036562761929137e+00, -5.911451402674553e-01, -6.021102410728002e-01, -5.811161190647829e-01, -5.899152885273874e-01, -6.112534628154730e-01, -6.112534628154730e-01, -2.114259384257785e-01, -1.898671684419851e-01, -2.103837149848740e-01, -2.167763702110945e-01, -2.079442117175780e-01, -2.079442117175780e-01, -3.439641920271003e-02, -1.269718960867302e-02, -3.046613144663580e-02, -7.224611763057548e-01, -1.443590673163231e-02, -1.443590673163231e-02, -1.854405796681907e-02, -2.112584204312366e-02, -1.584310010476602e-02, -7.036673243516865e-02, -1.924757220886859e-02, -1.924757220886859e-02, -5.236769865013986e-02, -6.984276684489700e-02, -6.235789322825938e-02, -5.736496391027164e-02, -5.976081015464823e-02, -5.976081015464822e-02, -5.756303520013764e-02, -1.685089137156333e-01, -1.640494507390464e-01, -1.356121310456095e-01, -1.536640010416307e-01, -1.536640010416307e-01, -2.246051202937179e-01, -2.976748240312906e-02, -5.853747931931255e-02, -1.186352616824028e-01, -8.837684086117917e-02, -8.837684086117913e-02, -1.578624705327975e-01, -9.502898912252059e-02, -8.466184595418723e-02, -1.215444954406442e-01, -3.902767187203796e-02, -3.902767187203789e-02, -4.439566462394385e-02, -5.855669720973354e-03, -1.108799283975488e-02, -3.669859246425028e-02, -1.638661849250273e-02, -1.638661849250271e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_dldf_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_dldf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.382705435084131e-09, -4.382641536663844e-09, -4.382321106199065e-09, -4.383365496621278e-09, -4.382672066971088e-09, -4.382672066971088e-09, -6.966396712352998e-06, -6.966293975561344e-06, -6.962047889891033e-06, -6.959207754733882e-06, -6.966250226060860e-06, -6.966250226060860e-06, -5.281281645666216e-03, -5.300415602104088e-03, -5.800216734577237e-03, -5.590603438688625e-03, -5.288222390172038e-03, -5.288222390172038e-03, -8.110314847222518e-01, -7.773290013103498e-01, -2.758319393065812e-03, -2.334284332957681e+00, -8.010110442109204e-01, -8.010110442109204e-01, -6.245060390512507e+01, -6.241696096349902e+01, -1.885964977135628e+01, -4.543252678386849e+01, -6.484491456467669e+01, -6.484491456467669e+01, -1.136407135252812e-06, -1.133053598579016e-06, -1.136038656588023e-06, -1.133432825410060e-06, -1.134726019084367e-06, -1.134726019084367e-06, -6.551459093630149e-05, -6.369825484625393e-05, -6.608040145448968e-05, -6.464035689049817e-05, -6.356505119455312e-05, -6.356505119455312e-05, -8.765345997674036e-03, -5.955077511686556e-03, -1.099088858671141e-02, -9.246672871296768e-03, -7.432714515271869e-03, -7.432714515271869e-03, -4.773084424997666e+00, -6.973543948770070e-01, -5.259811863103401e+00, -7.442825882984135e-05, -3.672722925575843e+00, -3.672722925575843e+00, -4.820798987574010e+01, -4.821767006091287e+01, -1.380573194936497e+02, -1.386559175326934e+01, -7.121645841699285e+01, -7.121645841699279e+01, -3.626866471204457e-03, -5.064347826513176e-03, -4.603498368352375e-03, -4.207437106206332e-03, -4.410401446644618e-03, -4.410401446644618e-03, -4.766264210059788e-03, -1.513820234505610e-02, -1.254710506227366e-02, -1.005894967772219e-02, -1.136733148296456e-02, -1.136733148296456e-02, -5.113365195119667e-03, -3.039416828834247e-01, -1.631687545650332e-01, -6.539749060125694e-02, -1.035971794837280e-01, -1.035971794837281e-01, -2.325007642874104e-02, -1.712867604777049e+01, -1.377821904330966e+01, -8.307922320734587e-02, -9.269302934475547e+00, -9.269302934475554e+00, -4.664744349323621e+01, -8.353676308521443e+01, -7.179280034668855e+01, -1.130779489339316e+01, -1.041127174118308e+02, -1.041127174118306e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_dldf_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_dldf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-1.616274237219951e-03, -1.616351800465165e-03, -1.616692274715725e-03, -1.615431199787374e-03, -1.616315075298079e-03, -1.616315075298079e-03, -1.194871754143924e-03, -1.195060681910182e-03, -1.200888031414504e-03, -1.199322944923393e-03, -1.194913235958440e-03, -1.194913235958440e-03, -5.503363909894447e-03, -5.507379576152660e-03, -5.588305715358744e-03, -5.728133896603971e-03, -5.505026161494609e-03, -5.505026161494609e-03, -2.411628186028430e-02, -2.395081909690762e-02, -3.359012379813929e-03, -1.186927924867043e-02, -2.405492957778477e-02, -2.405492957778477e-02, -8.305882856769539e-05, -9.458055740699191e-05, -1.886800936317176e-03, -3.288832804447082e-06, -9.586711356821967e-05, -9.586711356821547e-05, -1.232790047416188e-02, -1.246113992546024e-02, -1.234265492455164e-02, -1.244617109868338e-02, -1.239446923188000e-02, -1.239446923188000e-02, -2.235718363039467e-03, -2.230815708123716e-03, -2.250124255065987e-03, -2.243971571369408e-03, -2.217734047154280e-03, -2.217734047154280e-03, -1.452002898675000e-02, -5.014895303855815e-02, -9.344955844703930e-03, -1.988932676088944e-02, -2.180203692152739e-02, -2.180203692152739e-02, -8.073182502813850e-03, -1.843498382269259e-02, -8.803263659485002e-03, -6.742978794802108e-03, -1.346268488046179e-02, -1.346268488046179e-02, -4.502840042212809e-06, -5.557979650819730e-06, -9.200181917971372e-06, -3.086657734376135e-03, -5.179817409387520e-06, -5.179817409389454e-06, -3.347803586626268e-01, -2.302348626493659e-01, -2.628950640781023e-01, -2.916466048588953e-01, -2.768378210050216e-01, -2.768378210050216e-01, -2.986359174571808e-01, -1.530423174529111e-02, -3.330973570290299e-02, -7.828518477832093e-02, -5.022572503924323e-02, -5.022572503924325e-02, -3.146777818341381e-02, -1.876000281309127e-02, -1.653891250112717e-02, -1.175050286002007e-02, -1.402857668849724e-02, -1.402857668849724e-02, -1.031659849518742e-02, -1.461240869998773e-03, -2.808108473080146e-03, -1.328990761760842e-02, -8.196153647685145e-03, -8.196153647685112e-03, -5.203537360353798e-05, -1.265857387976069e-07, -1.704232240638512e-06, -8.512333376474722e-03, -4.471860297877608e-06, -4.471860297878887e-06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
