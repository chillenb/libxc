
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_bmk_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_bmk", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.207218462411877e+01, -1.207215247775598e+01, -1.207212635941539e+01, -1.207260213813383e+01, -1.207233629344808e+01, -1.207233629344808e+01, -2.032695338357303e+00, -2.032660685721169e+00, -2.031941147481019e+00, -2.033948835185947e+00, -2.032879487522631e+00, -2.032879487522631e+00, -4.141461322010809e-01, -4.142972858088195e-01, -4.171515377989830e-01, -4.202983747694035e-01, -4.191174754094903e-01, -4.191174754094903e-01, -1.193938970668491e-01, -1.216819261393542e-01, -4.782487501626911e-01, -8.213687403076418e-02, -9.151980732979197e-02, -9.151980732979192e-02, -1.970471053808266e-02, -2.072108067019633e-02, -9.686254451796880e-02, -1.143131074141276e-02, -1.434089218232062e-02, -1.434089218232059e-02, -2.768786582262598e+00, -2.765103001137422e+00, -2.768639990461285e+00, -2.765387960615737e+00, -2.766908032652937e+00, -2.766908032652937e+00, -1.256609568630972e+00, -1.261426620238467e+00, -1.257539088660132e+00, -1.261509057255787e+00, -1.258938108457384e+00, -1.258938108457384e+00, -3.396520730668824e-01, -2.956543018511634e-01, -3.175748774229507e-01, -2.828820826048421e-01, -3.396934429907042e-01, -3.396934429907042e-01, -1.089549192914533e-01, -1.112726644047644e-01, -1.115428186681009e-01, -9.095974049339035e-01, -8.364288806097064e-02, -8.364288806097071e-02, -8.825863203866659e-03, -1.117425753077283e-02, -8.535752942811704e-03, -1.139028217027776e-01, -1.028326221000310e-02, -1.028326221000308e-02, -2.636320735285734e-01, -2.752302742360831e-01, -2.706143402807541e-01, -2.672422767536893e-01, -2.688739664388684e-01, -2.688739664388684e-01, -2.488609588985314e-01, -3.051709032518459e-01, -3.088541336618371e-01, -2.926609542493672e-01, -3.039094998509740e-01, -3.039094998509740e-01, -3.163665888264993e-01, -1.501152571452892e-01, -1.831002886930122e-01, -2.178293550034352e-01, -2.009403707617929e-01, -2.009403707617928e-01, -2.807045062610811e-01, -9.476699863733397e-02, -1.131803590751307e-01, -2.033250572567726e-01, -1.013697368842300e-01, -1.013697368842304e-01, -2.766532254308700e-02, -2.992409609072706e-03, -6.276748101046901e-03, -1.050131523759248e-01, -9.516364558843875e-03, -9.516364558843880e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_bmk_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_bmk", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.015812629068581e+01, -1.015800742101888e+01, -1.015768697521880e+01, -1.015944973086909e+01, -1.015849626012139e+01, -1.015849626012139e+01, -2.129665962818753e+00, -2.129581387623766e+00, -2.127614999925840e+00, -2.131178104381887e+00, -2.129497903049549e+00, -2.129497903049549e+00, -4.201152587581766e-01, -4.205420710419541e-01, -4.455972363961976e-01, -4.414910649796296e-01, -4.411239351308727e-01, -4.411239351308727e-01, -1.659694127853260e-01, -1.659036452913814e-01, -4.946325786029598e-01, -1.686457659667538e-02, -1.146090992374276e-01, -1.146090992374273e-01, -2.592725431785283e-02, -2.721416594371654e-02, -8.528431592449702e-02, -1.517798166069931e-02, -1.897881637879413e-02, -1.897881637879386e-02, -2.290169176390096e+00, -2.290558390830994e+00, -2.290211170189638e+00, -2.290551920187708e+00, -2.290329677638585e+00, -2.290329677638585e+00, -1.299196461819662e+00, -1.322301674058974e+00, -1.281105290587818e+00, -1.300563453467502e+00, -1.320689893513479e+00, -1.320689893513479e+00, -3.287760208148696e-01, -2.731389537743278e-01, -3.298627163074876e-01, -2.521080911927608e-01, -3.139162159517951e-01, -3.139162159517951e-01, 9.044257682506431e-02, -1.226294721451408e-01, 7.814484907280468e-02, -8.100190710265056e-01, 5.991313242081683e-02, 5.991313242081710e-02, -1.173417465506311e-02, -1.483438556859338e-02, -1.130867263516551e-02, -1.144217313678575e-02, -1.362474647414439e-02, -1.362474647414446e-02, -3.367879465568623e-01, -2.986684200478585e-01, -3.130963220911730e-01, -3.245443984311916e-01, -3.189311950661355e-01, -3.189311950661355e-01, -3.370179671332154e-01, -3.554437690716303e-01, -3.120183784394423e-01, -2.389543896491938e-01, -2.699514051028624e-01, -2.699514051028624e-01, -2.792646064902943e-01, -2.113222644455845e-01, -2.115790752878838e-01, -2.278271274171259e-01, -1.977408937746329e-01, -1.977408937746329e-01, -3.111270211853567e-01, -8.877797957321387e-02, -6.819118552488010e-02, -2.204188833946698e-01, 6.130791625684250e-02, 6.130791625684422e-02, -3.601928288061770e-02, -3.987140125917066e-03, -8.351385285181295e-03, 4.531475776073455e-02, -1.261166263503469e-02, -1.261166263503450e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_bmk_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_bmk", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.512959046018045e-08, -1.512996834817718e-08, -1.513080075540297e-08, -1.512520023911471e-08, -1.512825547322324e-08, -1.512825547322324e-08, -1.036857760669014e-05, -1.037124661221093e-05, -1.043497818401110e-05, -1.034284278573453e-05, -1.038323223411398e-05, -1.038323223411398e-05, -4.659264847049623e-03, -4.623838212412280e-03, -3.577246374284570e-03, -3.666296302419370e-03, -3.691260589057905e-03, -3.691260589057905e-03, -3.575317396828669e-01, -3.410409271662788e-01, -2.527537878082996e-03, -1.823798839695074e+00, -7.211235773530927e-01, -7.211235773530958e-01, -5.108096631653572e+01, -5.392617311805946e+01, -2.631056730175657e+01, -4.658574090312843e+01, -5.910873698610766e+01, -5.910873698613007e+01, -5.723180283832146e-06, -5.747634432347299e-06, -5.724113229678935e-06, -5.745706182880921e-06, -5.735711789064997e-06, -5.735711789064997e-06, -3.591200194002312e-05, -3.357638138146295e-05, -3.602567517550659e-05, -3.381786789088595e-05, -3.468536696107693e-05, -3.468536696107693e-05, -1.822578626537553e-02, -3.610380733951249e-02, -1.853783193952253e-02, -4.131734055711701e-02, -2.028450771626768e-02, -2.028450771626768e-02, -8.206409166169877e+00, -4.562968337171221e-01, -1.012897820340664e+01, -3.782760394965987e-04, -5.114498599067787e+00, -5.114498599067787e+00, -6.141533535403178e+01, -5.482436780727785e+01, -3.440252765342294e+02, -2.243974359480675e+01, -1.600988454304801e+02, -1.600988454302648e+02, -4.520141216513456e-02, -4.613468910343928e-02, -4.618118774378054e-02, -4.588282940112381e-02, -4.606884612063247e-02, -4.606884612063247e-02, -5.384758620691800e-02, -1.023542607541776e-02, -2.349886763937789e-02, -4.582635292997050e-02, -3.436437620830863e-02, -3.436437620830863e-02, -2.789905711561739e-02, -1.401935828696188e-01, -8.780356016159031e-02, -5.184915810656883e-02, -6.826715888426042e-02, -6.826715888426037e-02, -1.729628441405454e-02, -2.444084213145532e+01, -2.178264079448210e+01, -8.302959652562719e-02, -1.754148364986853e+01, -1.754148364986871e+01, -4.099519598239208e+01, -2.694404683295481e+02, -1.303269280987645e+02, -1.958950576027678e+01, -2.022385042073666e+02, -2.022385042076343e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_bmk_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_bmk", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([2.204977880971201e-05, 2.203814588665932e-05, 2.200238255908249e-05, 2.217505163530447e-05, 2.208227387986727e-05, 2.208227387986727e-05, 5.057936739661311e-04, 5.059471046986541e-04, 5.104425276884275e-04, 5.139075508702003e-04, 5.113844918954878e-04, 5.113844918954878e-04, -1.383797822335588e-04, -1.267916391805972e-04, 7.480085452421627e-04, 6.136364919164632e-04, 6.009308571201607e-04, 6.009308571201607e-04, 5.027073223404007e-02, 4.674880400173386e-02, -2.799627930750557e-04, 2.599860541559382e-02, 4.382692394664747e-02, 4.382692394664768e-02, -4.729802340126466e-09, -6.431688969160766e-09, 7.742654963471191e-06, -2.007766801508496e-10, -1.014796586841585e-09, -1.014796586841571e-09, 1.914652104507896e-04, 2.112988560047967e-04, 1.924790384380611e-04, 2.099723062688512e-04, 2.013335006928689e-04, 2.013335006928689e-04, -1.278485381482919e-03, -1.307945819602699e-03, -1.441725041401640e-03, -1.513555773525033e-03, -1.193634830649055e-03, -1.193634830649055e-03, 4.270880817641490e-03, -8.934739913930153e-03, 4.224616145890564e-03, -1.547858279500002e-02, 2.472451033161332e-03, 2.472451033161332e-03, 4.306775168526952e-03, 4.170292171330967e-02, 3.022726686353506e-03, -6.601736336545265e-03, 1.832248982197235e-02, 1.832248982197249e-02, -3.184149556949116e-11, -1.488665757156061e-10, -8.848993411301160e-10, 4.232828872320223e-04, -5.339689044831693e-10, -5.339689090414994e-10, 6.994954730026641e-02, 3.923575994304325e-02, 5.172296628976315e-02, 6.154623514749549e-02, 5.679844583762851e-02, 5.679844583762851e-02, 8.066849812771100e-02, 3.922307447330838e-03, 8.042326475602728e-03, -1.264584682652513e-03, 3.432252918117221e-03, 3.432252918117221e-03, -1.368643394533943e-02, 4.153481994904311e-02, 1.842445754426084e-02, -5.106260458159706e-04, -2.553879221868583e-03, -2.553879221868599e-03, 2.323646468992538e-03, 4.533457387960504e-06, 5.680557263727111e-05, 6.910559134898100e-03, 3.045804572931625e-03, 3.045804572931787e-03, -8.231465813722456e-09, -2.807474466166266e-13, -5.511782928196369e-11, 2.368891713383909e-03, -6.170878548226858e-10, -6.170878590194531e-10])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
