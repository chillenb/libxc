
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_bmk_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_bmk", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-8.391371848852735e+00, -8.391375386706246e+00, -8.391406353678782e+00, -8.391352166300987e+00, -8.391378359510345e+00, -8.391378359510345e+00, -1.638004905417179e+00, -1.637945735740469e+00, -1.636404560018413e+00, -1.637178070542631e+00, -1.636925172500034e+00, -2.204038587330829e+00, -3.286423794215795e-01, -4.710466367204165e-01, -4.620727389654516e-01, -4.648658641244871e-01, -4.643847598990793e-01, -4.643847598990793e-01, -1.207403796772162e-01, -1.232806721323109e-01, -3.712688456727436e-01, -9.667585730694551e-02, -9.747336752565268e-02, -9.747336752565267e-02, -1.970579063704379e-02, -2.072344431121782e-02, -9.863603408771246e-02, -1.143390676543671e-02, -1.434447048864849e-02, -1.434447048864849e-02, -2.772219048624209e+00, -2.768509981863358e+00, -2.772001726891944e+00, -2.030324713272476e+00, -2.770363411071340e+00, -2.770363411071340e+00, -9.452202471903929e-01, -9.481930686040660e-01, -9.429441420202149e-01, -9.458512441510719e-01, -9.477814199322195e-01, -1.273335578169423e+00, -3.606083789912098e-01, -3.605657089550553e-01, -3.404772340396425e-01, -3.465150363912489e-01, -3.636044699525186e-01, -2.508424274539219e-01, -4.043303812947131e-02, -1.144665161150585e-01, -3.735376028650231e-02, -1.163978859583710e+00, -9.351885848583184e-02, -9.351885848583180e-02, -1.182538625255087e-03, -1.117977104986442e-02, -8.539102523937895e-03, -2.503621697857807e-02, -1.380177423361694e-03, -1.028986521432390e-02, -2.725203917885154e-01, -2.838609837187260e-01, -2.428001848961390e-01, -2.761089792889650e-01, -2.777161677278666e-01, -2.777161677278666e-01, -2.666437993184423e-01, -3.062600496461775e-01, -3.125855342923262e-01, -3.028700942364529e-01, -3.107406533624823e-01, -2.110649103863359e-01, -3.911274800426163e-01, -1.042854841755859e-01, -1.863931926359072e-01, -1.682153916097393e-01, -2.062058296302660e-01, -2.062058296302660e-01, -2.120371445660399e-01, -9.553083761874852e-02, -1.172865502468899e-01, -2.111471461758469e-01, -3.197926298072464e-02, -1.122709418477860e-01, -2.774258441958641e-02, -2.993040447065290e-03, -6.277148273779272e-03, -1.113044352786505e-01, -9.520815548097269e-03, -9.520815548097292e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_bmk_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_bmk", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.012037254201404e+01, -1.012051225083204e+01, -1.012109726014247e+01, -1.011902707096264e+01, -1.012011668843346e+01, -1.012011668843346e+01, -1.785051854458531e+00, -1.784820272154601e+00, -1.778756074204089e+00, -1.781366027693765e+00, -1.780900933407199e+00, -2.464064541115260e+00, -4.546100727588998e-01, -4.879780913607383e-01, -5.301123347020731e-01, -5.081101443584281e-01, -5.132024897679205e-01, -5.132024897679205e-01, -1.628079219220432e-01, -1.631170650601027e-01, -5.391173809689466e-01, 2.900229470777312e-02, -8.296275097993176e-02, -8.296275097993226e-02, -2.593155187129826e-02, -2.722356377976055e-02, -9.144026234623220e-02, -1.518834918545317e-02, -1.899308805266746e-02, -1.899308805266746e-02, -2.291572792488785e+00, -2.291863070992229e+00, -2.291581350737513e+00, -2.809490545403484e+00, -2.291697333448312e+00, -2.291697333448312e+00, -1.113564698761513e+00, -1.099743744614811e+00, -1.124501285457397e+00, -1.112315553831350e+00, -1.100247758774485e+00, -1.312680747318819e+00, -4.092130238399195e-01, -3.019760669182719e-01, -3.969919994553899e-01, -3.911264358539884e-01, -3.951630560703624e-01, -2.534149978185591e-01, -5.466313680345430e-02, -1.069391668805969e-01, -5.035334882578844e-02, -1.225280449073100e+00, 7.319123631147370e-02, 7.319123631147342e-02, -1.576718192640779e-03, -1.485640544927854e-02, -1.132203873128854e-02, -3.349007088533377e-02, -1.840236784464795e-03, -1.365109829451107e-02, -3.251016878567383e-01, -2.902858059049158e-01, -3.546845920142360e-01, -3.135713662272616e-01, -3.084004064858611e-01, -3.084004064858611e-01, -3.124384740249457e-01, -3.621570107147478e-01, -3.287242655375614e-01, -2.515993247562872e-01, -2.889544797910175e-01, -2.348312698446907e-01, -3.544566466061890e-01, -1.513858198577740e-01, -2.110615878439007e-01, -1.997063337659671e-01, -1.939676356687967e-01, -1.939676356687969e-01, -2.273784868836811e-01, -9.147080613147929e-02, -8.109669805093517e-02, -2.420251923208436e-01, -4.307713341627616e-02, 4.678916136354349e-02, -3.632574297431694e-02, -3.989662993732186e-03, -8.352984658722858e-03, 3.524335402065124e-02, -1.262942646813441e-02, -1.262942646813418e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_bmk_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_bmk", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-3.645645171698439e-08, -3.645626834635123e-08, -3.645523749815375e-08, -3.645798399529765e-08, -3.645657593350313e-08, -3.645657593350313e-08, -2.517393676694167e-05, -2.517988193116953e-05, -2.533576781820547e-05, -2.526339612984639e-05, -2.528164603980633e-05, -2.527113607444498e-06, -1.351196501886740e-02, -2.422217461139143e-03, -2.421379612795599e-03, -2.472237808220183e-03, -2.460241744800525e-03, -2.460241744800525e-03, -4.010795308614785e-01, -3.856280658224797e-01, -9.348741905759794e-03, -2.182245902867468e+00, -1.030145146461263e+00, -1.030145146461271e+00, -5.023666064012610e+01, -5.230372290426007e+01, -2.147352314938363e+01, -3.703105776643077e+01, -5.146765574641155e+01, -5.146765574641155e+01, -5.697663957371161e-06, -5.722396804940727e-06, -5.699127112792215e-06, -1.052118600181339e-05, -5.710070899910739e-06, -5.710070899910739e-06, -2.102369379317307e-04, -2.107669972043189e-04, -2.098703863679814e-04, -2.100339158839615e-04, -2.109493942928869e-04, -2.777050035439897e-05, -7.355923994201803e-03, -1.914268884159448e-02, -4.455237433863207e-03, -8.953317168724294e-03, -9.150732453677405e-03, -4.903332231752951e-02, -7.324256796930494e+01, -5.226004001502080e-01, -1.005945201888240e+02, -1.001383650634914e-04, -5.118431550560011e+00, -5.118431550560008e+00, -1.002785092271017e+08, -3.274115072519611e+01, -2.644467146189015e+02, -4.989540396286402e+02, -5.404176555205835e+07, -1.015134239432544e+02, -4.244677919313029e-02, -4.312626301939865e-02, -5.514064904137468e-02, -4.301697712919776e-02, -4.316137705234167e-02, -4.316137705234167e-02, -4.750424990021324e-02, -8.390521055933376e-03, -1.932805250534348e-02, -3.895656936253050e-02, -2.847450608692467e-02, -9.345425100051093e-02, -1.199060111715553e-02, -1.491352056932184e+00, -9.268818191427917e-02, -2.080813574842579e-01, -6.222920830047014e-02, -6.222920830046991e-02, -9.106263971197591e-02, -2.209201002550505e+01, -1.726007776005361e+01, -2.936291720899332e-02, -1.872770551721821e+02, -1.515457046182252e+01, -2.394571733152999e+01, -4.015140480029901e+01, -1.150216950771177e+02, -1.773800537674349e+01, -1.446703950059609e+02, -1.446703950060624e+02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_bmk_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_bmk", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-6.262743895223596e-04, -6.262111579079593e-04, -6.259542044171858e-04, -6.268901644837021e-04, -6.263964918023103e-04, -6.263964918023103e-04, -2.999436074716812e-03, -3.001357046339549e-03, -3.052072990470592e-03, -3.031272418970962e-03, -3.033815998873955e-03, -8.860794877228525e-04, 1.567197993140505e-03, 5.185240155092913e-03, 9.629893393999112e-03, 7.684244834132459e-03, 8.143967447155329e-03, 8.143967447155329e-03, 5.457808028019304e-02, 5.204488899538253e-02, 1.788947166003332e-03, 2.771320201488447e-02, 4.927781329923484e-02, 4.927781329923507e-02, -4.732755285025197e-09, -6.440123322394857e-09, 5.899776989954832e-06, -2.012735163114291e-10, -1.017599766193762e-09, -1.017599766193762e-09, 1.864501622933124e-04, 2.059649911247535e-04, 1.875472921273034e-04, 1.485682582239614e-03, 1.961045339226994e-04, 1.961045339226994e-04, -2.827476660804601e-03, -3.256903840268640e-03, -2.502531924331634e-03, -2.875043655074787e-03, -3.232824475096307e-03, -2.225369348940675e-03, 6.734056093847788e-03, 6.198155133611348e-04, -2.074586175027037e-03, 7.195280808564091e-03, 7.473270476212501e-03, -3.776121580932125e-02, 4.107641786873353e-04, 4.378463772035550e-02, 3.042017012172966e-04, 2.317717457879412e-03, 1.830870375383194e-02, 1.830870375383206e-02, 1.488841992412140e-11, -1.496675752060465e-10, -8.887232477690579e-10, 6.747857841831787e-05, 2.543978931256471e-10, -5.377435184213264e-10, 5.947692367998174e-02, 3.219265407021344e-02, 7.998547992993039e-02, 5.178274088723306e-02, 4.755122074844349e-02, 4.755122074844349e-02, 5.868624428249782e-02, 2.524359343140043e-03, 8.621659021858323e-03, 3.486534015801130e-04, 5.439493147276965e-03, -3.728146777364040e-02, 3.484360727623878e-03, 6.599648214424089e-03, 2.266100416450040e-02, -1.470596595208765e-02, -4.403561267364954e-03, -4.403561267364985e-03, -2.563917893353010e-02, 3.847168162756528e-06, 4.686437265594011e-05, -6.370873710454242e-03, 3.183957254384096e-04, 2.812668228183033e-03, -8.507973559960196e-09, -2.813816933942382e-13, -5.515573989338732e-11, 2.241017198838938e-03, -6.202615529703912e-10, -6.202615571887693e-10])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
