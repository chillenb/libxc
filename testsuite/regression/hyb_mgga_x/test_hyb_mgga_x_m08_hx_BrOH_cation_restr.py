
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_m08_hx_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m08_hx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-8.648769857330022e+00, -8.648738290376437e+00, -8.648627694009223e+00, -8.649092549489382e+00, -8.648845092208612e+00, -8.648845092208612e+00, -1.564319878840361e+00, -1.564396661884578e+00, -1.566406349157465e+00, -1.565745769863695e+00, -1.565654553084279e+00, -2.198198978381516e+00, -2.525980095741817e-01, -4.578776840107124e-01, -4.536267760636842e-01, -4.539515694690168e-01, -4.539907717910733e-01, -4.539907717910733e-01, -1.217758399388972e-01, -1.237464260047111e-01, -2.469057631622700e-01, -8.162094410646206e-02, -9.760706785006062e-02, -9.760706785006115e-02, 4.257932731264896e-03, 4.465117412198289e-03, 1.079015626270255e-02, 2.508833711414371e-03, 3.130908509872501e-03, 3.130908509872501e-03, -1.786066450966843e+00, -1.785031546415761e+00, -1.786001359830445e+00, -1.760446694092917e+00, -1.785535443433020e+00, -1.785535443433020e+00, -8.318905620110268e-01, -8.492674996528562e-01, -8.185561555518379e-01, -8.341271327207965e-01, -8.480554113361696e-01, -1.280645868369592e+00, -2.853902863812295e-01, -2.325346132836568e-01, -3.281423079486905e-01, -2.716574522398837e-01, -2.699162865771000e-01, -2.528761912234198e-01, -1.341218241585098e-02, -1.153191741837358e-01, -1.148285707656102e-02, -8.347337396267612e-01, -6.405712323511269e-02, -6.405712323511292e-02, 2.314336969343530e-04, 2.454588753826832e-03, 1.868011670878335e-03, -3.968853760514023e-03, 2.675874198075393e-04, 2.253084314734166e-03, -2.391359494237352e-01, -2.327102188965490e-01, -1.147949357349493e-01, -2.524076397505851e-01, -2.510059270372156e-01, -2.510059270372156e-01, -2.411166055962518e-01, -2.766529433484120e-01, -2.239562358848203e-01, -1.949862226946809e-01, -2.060769086919909e-01, -2.181158662986167e-01, -2.570994827661680e-01, -7.058867925225958e-02, -1.827068295976272e-01, -1.467660134431059e-01, -2.008973124962628e-01, -2.008973124962631e-01, -2.053521701670925e-01, 1.126162813073955e-02, 5.033890622009153e-03, -2.075686062348472e-01, -9.587987560302958e-03, -3.317477286875109e-02, 5.945515492859923e-03, 6.604541833649862e-04, 1.381281982375861e-03, -2.907059176817209e-02, 2.084312987663705e-03, 2.084312987663796e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_m08_hx_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m08_hx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-8.537832732370322e+00, -8.537260093329055e+00, -8.534961027421343e+00, -8.543433224106327e+00, -8.538961140954321e+00, -8.538961140954321e+00, -2.553270731020764e+00, -2.552613180640523e+00, -2.535043901465737e+00, -2.542439168290710e+00, -2.541386182449125e+00, -1.569122820856708e+00, -3.855004808270215e-01, -4.200861748776741e-01, -4.467658384484028e-01, -4.288200486329545e-01, -4.324573543537461e-01, -4.324573543537461e-01, -1.520513515127906e-01, -1.480747602709569e-01, -5.759679138450251e-01, -1.219357531675765e-01, -1.522493541367010e-01, -1.522493541367186e-01, 5.462019301924809e-03, 5.697735717643396e-03, -7.409430995900359e-03, 3.309273803078987e-03, 4.090912124004142e-03, 4.090912124004142e-03, -2.069672572344405e+00, -2.084918537384886e+00, -2.070527494485527e+00, -2.946023374553780e-01, -2.077221143095797e+00, -2.077221143095797e+00, -1.566941634719481e+00, -1.581343344485575e+00, -1.546675624414936e+00, -1.569753213476743e+00, -1.580484935821990e+00, -1.232374826426535e+00, -2.010541444150616e-02, -2.338454486752181e-01, -1.454688924465049e-01, -2.204177745094568e-02, -5.268910063927314e-02, -2.720185476216743e-01, -2.899136909968357e-02, -1.791682275523285e-01, -2.708799811850790e-02, -2.662974670851979e-01, -8.951570775548434e-02, -8.951570775547346e-02, 3.064687570776414e-04, 3.241293523513183e-03, 2.450733899085276e-03, -1.487079761695697e-02, 3.501235491069089e-04, 2.960821692877535e-03, -1.927801022403673e-02, -3.548145172577778e-01, -2.866678028053306e-02, -1.828121410135256e-01, -2.415077649757178e-01, -2.415077649757178e-01, -7.986743732561688e-02, -4.979065487653056e-02, -7.234497411406500e-02, -1.973794262582528e-01, -1.643129197602309e-01, -2.694578036957415e-01, -2.239878439430938e-01, -1.608350249413017e-01, -1.777117560074660e-01, -2.771611290242910e-01, -1.935449406944744e-01, -1.935449406944768e-01, -3.162652900491747e-01, -4.762934491102331e-03, -2.996262772086633e-02, -1.196832953355744e-01, -2.319607172615698e-02, -7.410133846627528e-02, 7.511158516671250e-03, 8.799380056749859e-04, 1.831272622978442e-03, -7.249851798595489e-02, 2.738143438737746e-03, 2.738143438736072e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m08_hx_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m08_hx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([5.559348762936531e-09, 5.559470402914577e-09, 5.559917317620747e-09, 5.558118389374656e-09, 5.559076205278957e-09, 5.559076205278957e-09, -1.654990670219845e-05, -1.654701739317895e-05, -1.646875216836585e-05, -1.649462155713932e-05, -1.649871882304171e-05, -8.400211611909694e-06, -1.319114210562686e-02, -3.047401654327942e-03, -2.708737335623912e-03, -2.918618047637281e-03, -2.869320329160686e-03, -2.869320329160686e-03, -3.094572693325754e-01, -3.288446012628671e-01, -7.667946121061190e-03, -1.737942314791608e-01, -9.894085327889325e-02, -9.894085327889528e-02, 5.939096378741349e+00, 6.170434362516874e+00, 1.555918645122584e+00, 4.428162035349257e+00, 6.130399311178917e+00, 6.130399311178917e+00, -1.945026116825586e-07, -2.791041613530521e-07, -1.992831502303117e-07, -2.567473381800250e-07, -2.364678095766704e-07, -2.364678095766704e-07, -1.795907357908743e-04, -1.726663492856624e-04, -1.846314781626089e-04, -1.786018379241104e-04, -1.732510440260877e-04, -7.651237659260601e-05, -6.088328994468489e-03, 5.126976209949173e-03, -1.392615808849596e-02, -6.773015285192216e-03, -3.622909132773418e-03, -4.275675199195830e-03, -2.874441070934626e+01, -5.947065262810069e-02, -3.345993504748958e+01, -2.028383926791893e-05, -6.891672127750481e-01, -6.891672127750501e-01, 3.770564459927541e+07, 3.916976675910269e+00, 3.155164275962168e+01, -3.216234345746940e+01, 2.021307379786928e+07, 1.212006269120092e+01, -3.550678711207537e-01, -1.099932295805977e-01, -1.848336453421814e-01, -2.383625072614257e-01, -2.015216472661885e-01, -2.015216472661885e-01, -3.393341264451790e-01, -1.863301067555265e-02, -3.818758426372075e-03, 1.009096545162363e-02, 5.155907227001270e-03, 8.913899195715074e-03, 2.655512917368903e-03, -1.233248994129109e+00, -1.052303500044539e-01, -1.811434215679658e-01, -1.003299546797665e-01, -1.003299546797666e-01, -5.550642482634221e-02, 1.685455289886423e+00, 7.090202885287907e-01, -9.741052629795084e-02, -5.908871521867654e+01, -2.147858907260501e+00, 2.813727960311062e+00, 4.821494358637643e+00, 1.378354612280523e+01, -2.245039544327146e+00, 1.727039853816454e+01, 1.727039853816474e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m08_hx_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m08_hx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-1.755394885126237e-03, -1.755750594319930e-03, -1.757185819370095e-03, -1.751922617042280e-03, -1.754699631365323e-03, -1.754699631365323e-03, 3.514857915830961e-03, 3.510048631195443e-03, 3.380552332635346e-03, 3.433189910219452e-03, 3.427941979405099e-03, -1.314228868004561e-03, 4.648378164993941e-03, 5.176000374499752e-03, 5.425855902099769e-03, 5.013988716405845e-03, 5.067325259219423e-03, 5.067325259219423e-03, 3.139492823628903e-02, 2.954473915170254e-02, 1.001175896860725e-02, 1.818911818276923e-02, 2.451269498856970e-02, 2.451269498857349e-02, 1.424655539454874e-04, 1.728863146827584e-04, 1.102913850197219e-02, 2.027466278157124e-05, 5.586680923782797e-05, 5.586680923782797e-05, -3.793685272602531e-03, -3.283269049784282e-03, -3.764958349972671e-03, -2.978389942046623e-02, -3.540968828881825e-03, -3.540968828881825e-03, 8.820953498792370e-03, 8.888661630030242e-03, 8.581968171712053e-03, 8.840062406555500e-03, 8.894760413152913e-03, 5.455544010051954e-03, -1.247990315622951e-01, -8.710456102130648e-02, -4.684063572404086e-02, -1.306490417209817e-01, -1.236433733358604e-01, -3.035642195151569e-02, 6.064380777915397e-03, 2.205141548713016e-02, 6.533855237846560e-03, -3.696956415013365e-02, 2.445393944723874e-02, 2.445393944724404e-02, 1.225216810802106e-06, 1.674900478802102e-05, 6.044872114181852e-05, 5.960232830284041e-03, 7.701556223460267e-06, 4.057483945566021e-05, 5.838761701965961e-01, 6.577690450568899e-01, -3.214642699406209e-01, 7.519792499479029e-01, 7.760606464748402e-01, 7.760606464748402e-01, 6.786541678828372e-01, -1.017887188185529e-01, -1.374324907037847e-01, -1.034827194768176e-01, -1.075403788483736e-01, -1.709553223721778e-02, -8.226153945308845e-02, 3.568562184501500e-02, 1.309726332681639e-02, 4.874284460640783e-02, 2.628177698958191e-02, 2.628177698958291e-02, 1.967376428956015e-02, 1.001623249274652e-02, 1.861938565857130e-02, -4.381741738779266e-02, 7.566862633344901e-03, 4.234304249456253e-02, 1.906630862069947e-04, 3.925946332260282e-07, 1.039705857632652e-05, 4.337465723001917e-02, 4.581072529470588e-05, 4.581072529059303e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
