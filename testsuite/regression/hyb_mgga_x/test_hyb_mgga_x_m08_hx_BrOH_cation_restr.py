
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_m08_hx_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m08_hx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-7.952973217094363e+00, -7.952932861343448e+00, -7.952764775887927e+00, -7.953359648295451e+00, -7.953046420863565e+00, -7.953046420863565e+00, -1.897804932033378e+00, -1.897770777211609e+00, -1.897037120080353e+00, -1.899310729212351e+00, -1.898117274454900e+00, -1.898117274454900e+00, -3.597846623778130e-01, -3.602000472913290e-01, -3.712821610483696e-01, -3.755650225214527e-01, -3.736557336618451e-01, -3.736557336618451e-01, -1.205965893972797e-01, -1.221762812568338e-01, -3.689683193061614e-01, -8.071316405043281e-02, -9.674048407989667e-02, -9.674048407989720e-02, 4.257805036650149e-03, 4.464838553455233e-03, 1.066071087440672e-02, 2.508523251799969e-03, 3.130482249684837e-03, 3.130482249684837e-03, -1.785949595622778e+00, -1.784865764550062e+00, -1.785884119760098e+00, -1.784928785397731e+00, -1.785392710432749e+00, -1.785392710432749e+00, -1.238551974612845e+00, -1.248826373058976e+00, -1.239820583779468e+00, -1.249766396848669e+00, -1.243344926143743e+00, -1.243344926143743e+00, -2.745117545203123e-01, -2.464139083207799e-01, -2.932589807089442e-01, -2.506841832746357e-01, -2.637034864294657e-01, -2.637034864294657e-01, -4.408696696787017e-02, -1.148866436438085e-01, -3.752329060150905e-02, -8.121164602450381e-01, -6.287033129360464e-02, -6.287033129360489e-02, 1.942982713947188e-03, 2.453929017052401e-03, 1.867611963903649e-03, -9.375162633952803e-03, 2.252295757390250e-03, 2.252295757390154e-03, -1.662800113978760e-01, -2.111982194861327e-01, -2.133487530962920e-01, -2.043090617798018e-01, -2.106055753346085e-01, -2.106055753346085e-01, -1.191989698884716e-01, -2.744455383874926e-01, -2.232914050395601e-01, -1.974895872181490e-01, -2.072422353861241e-01, -2.072422353861245e-01, -2.694012024300582e-01, -1.525804210393553e-01, -1.784950073457306e-01, -2.076134009695891e-01, -1.918409763265481e-01, -1.918409763265487e-01, -2.696097348496980e-01, 1.120316436456268e-02, 4.862756050733229e-03, -1.916602865154651e-01, -3.166013520155335e-02, -3.166013520155073e-02, 5.936426850158952e-03, 6.603784242356874e-04, 1.381234026740723e-03, -2.827902884884199e-02, 2.083781541107998e-03, 2.083781541108089e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_m08_hx_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m08_hx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-7.862453896023760e+00, -7.862485417786093e+00, -7.862595133375652e+00, -7.862123862332315e+00, -7.862376049503523e+00, -7.862376049503523e+00, -1.897444596095528e+00, -1.896602434462420e+00, -1.873883913196732e+00, -1.880557260238742e+00, -1.880799146749690e+00, -1.880799146749690e+00, -3.134238922395159e-01, -3.129053319697301e-01, -3.202360294064091e-01, -3.153810339624110e-01, -3.156343563249062e-01, -3.156343563249062e-01, -1.467402621400315e-01, -1.416917416968614e-01, -4.388236000405273e-01, -1.295952819559077e-01, -1.445881851537845e-01, -1.445881851538016e-01, 5.461513981256946e-03, 5.696633791794975e-03, -7.729455900102392e-03, 3.308035758569869e-03, 4.089216775975451e-03, 4.089216775975451e-03, -2.059497207469068e+00, -2.074554824180214e+00, -2.060546543267652e+00, -2.073825344327693e+00, -2.066844133066486e+00, -2.066844133066486e+00, -1.248667044017919e+00, -1.220220187665628e+00, -1.264378244255111e+00, -1.250061326509845e+00, -1.221116827709378e+00, -1.221116827709378e+00, -9.258015264284389e-02, -2.252463986288219e-01, -2.094833818692602e-01, -1.801326416104573e-01, -1.252424277449957e-01, -1.252424277449957e-01, -8.214954645820574e-02, -1.754603823483956e-01, -7.940188175475009e-02, -7.796749371551585e-01, -9.657095725260138e-02, -9.657095725259063e-02, 2.575499239699061e-03, 3.238661924525332e-03, 2.449142392778184e-03, -5.821189751341301e-02, 2.957680569927847e-03, 2.957680569927991e-03, 2.230790123681430e-02, -2.890533126939824e-01, -2.198995602925791e-01, -1.181412575171206e-01, -1.733008056492024e-01, -1.733008056492024e-01, 2.130555974479928e-02, -5.577615747443355e-02, -8.538019680915208e-02, -1.938355978544223e-01, -1.766116923825409e-01, -1.766116923825405e-01, -2.988278711517450e-01, -1.958230356754444e-01, -1.665788075404746e-01, -2.218234499767152e-01, -1.803601213932357e-01, -1.803601213932386e-01, -1.925266195281448e-01, -4.918098820592775e-03, -2.995517976048920e-02, -1.396760935681691e-01, -6.985614130820116e-02, -6.985614130818964e-02, 7.475355080872896e-03, 8.796350429469271e-04, 1.831081109023792e-03, -6.949775454029054e-02, 2.736026626324982e-03, 2.736026626323307e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m08_hx_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m08_hx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [3.914683859876230e-09, 3.914825378232255e-09, 3.915315232795285e-09, 3.913219634263674e-09, 3.914338886952606e-09, 3.914338886952606e-09, -1.217389790821180e-05, -1.217266952930130e-05, -1.213624924138121e-05, -1.212384168482128e-05, -1.213985343735001e-05, -1.213985343735001e-05, -7.736936956733814e-03, -7.720708287245146e-03, -7.172583876186451e-03, -6.994398390573097e-03, -7.084672278229814e-03, -7.084672278229814e-03, -3.562603814999852e-01, -3.864545069969523e-01, -4.685152130532787e-03, -9.072593080516084e-02, -1.717842828459779e-01, -1.717842828459802e-01, 6.039174271693045e+00, 6.362414530656582e+00, 1.934535203021499e+00, 5.571709123022425e+00, 7.041931830008661e+00, 7.041931830008681e+00, -1.943097098470537e-07, -2.790208950547786e-07, -1.991002820513396e-07, -2.738230874917211e-07, -2.363282152256259e-07, -2.363282152256259e-07, -8.490876021030945e-05, -8.326913429110729e-05, -8.376731345136435e-05, -8.251897210172469e-05, -8.443795339767703e-05, -8.443795339767703e-05, -6.830013080103292e-03, 6.510509657419956e-03, -1.849766046338131e-02, -8.492413111476261e-03, -3.853017406024679e-03, -3.853017406024679e-03, -1.221586114632615e+00, -7.455380890019600e-02, -1.394137915436836e+00, -1.916863892697271e-05, -5.390503670631941e-01, -5.390503670631956e-01, 7.363767618717335e+00, 6.561455927602844e+00, 4.105906073813236e+01, -5.529637546417633e-01, 1.912450598564084e+01, 1.912450598564081e+01, -3.632294244688019e-01, -1.124428353934905e-01, -1.736386720618303e-01, -2.437901033930930e-01, -2.060925610114074e-01, -2.060925610114074e-01, -3.549934466166656e-01, -1.907384572790913e-02, -3.801556366154566e-03, 1.067882783299206e-02, 5.552178430473564e-03, 5.552178430473544e-03, 3.750893743183725e-03, -1.156728919989029e-01, -1.257962099037075e-01, -1.002573737214600e-01, -1.230804222599782e-01, -1.230804222599782e-01, -3.358023347733978e-02, 1.876751847123445e+00, 9.211412000867445e-01, -1.207712961010458e-01, -2.377240683881682e+00, -2.377240683881660e+00, 4.827770174555356e+00, 3.236057095703573e+01, 1.561842613059773e+01, -2.446119684903180e+00, 2.415167540020924e+01, 2.415167540020954e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m08_hx_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m08_hx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m08_hx_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m08_hx", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-2.514008593611121e-03, -2.514040975128518e-03, -2.514190759208375e-03, -2.513713230648255e-03, -2.513962378529217e-03, -2.513962378529217e-03, 9.601667465083006e-04, 9.527400182123268e-04, 7.524218878299036e-04, 8.205728876628066e-04, 8.190416609530482e-04, 8.190416609530482e-04, 4.832096908728768e-03, 4.807461241966259e-03, 5.557595279538161e-03, 4.946607385641416e-03, 5.050216707391264e-03, 5.050216707391264e-03, 3.106904750049521e-02, 2.923442336686716e-02, 8.082359343681240e-03, 1.783754642574385e-02, 2.334491460329122e-02, 2.334491460329483e-02, 1.424618645573582e-04, 1.728769941421267e-04, 1.092730616423261e-02, 2.027249250716795e-05, 5.586023375499542e-05, 5.586023375499542e-05, -3.943197620705888e-03, -3.437221582516858e-03, -3.911706721348129e-03, -3.465411742903792e-03, -3.694280055147547e-03, -3.694280055147547e-03, 6.360403512757113e-03, 5.604140900755108e-03, 6.660430181917949e-03, 6.245992651104967e-03, 5.689073325910318e-03, 5.689073325910318e-03, -9.664051631310720e-02, -8.606612378707106e-02, -2.700609128796967e-02, -6.416837079329203e-02, -9.270041629852606e-02, -9.270041629852606e-02, 3.255311936713635e-02, 2.158223158229596e-02, 3.403347451527141e-02, -1.389673810425596e-02, 2.396473528868477e-02, 2.396473528869001e-02, 6.453096443453058e-06, 1.674511040278649e-05, 6.043753630819338e-05, 3.060627641610439e-02, 4.056255833606362e-05, 4.056255833317330e-05, 3.166919762077405e-02, 4.671910857981952e-01, 4.913284176353637e-01, 3.726190909390001e-01, 4.507666562948014e-01, 4.507666562948014e-01, -3.095499032611112e-01, -9.897752207206499e-02, -1.293967306268310e-01, -1.058315150436656e-01, -9.783427408622473e-02, -9.783427408622483e-02, -3.976082034584950e-02, 2.526664191540407e-02, 1.300546010175335e-02, 3.854290304058976e-02, 2.573053278197884e-02, 2.573053278197980e-02, -1.604055034234729e-02, 9.975539388166510e-03, 1.826353270300650e-02, -2.669262668790558e-02, 3.985149034026879e-02, 3.985149034028273e-02, 1.904116448262518e-04, 3.925556534668886e-07, 1.039674623101030e-05, 4.183883978008909e-02, 4.580062392316400e-05, 4.580062391905123e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
