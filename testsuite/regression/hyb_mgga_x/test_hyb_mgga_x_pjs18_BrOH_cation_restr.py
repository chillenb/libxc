
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_pjs18_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_pjs18", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.077004265031236e+01, -2.077013549645197e+01, -2.077055245742342e+01, -2.076917328803894e+01, -2.076989531911698e+01, -2.076989531911698e+01, -2.880076699668725e+00, -2.880221169018138e+00, -2.884073219237042e+00, -2.882795817748474e+00, -2.882615189136612e+00, -3.576618733501149e+00, -3.379065597591707e-01, -5.686526637173083e-01, -5.566842535137745e-01, -5.590103727637881e-01, -5.585709186096010e-01, -5.585709186096010e-01, -5.548575261070320e-02, -5.703396722183402e-02, -2.546360116410263e-01, -3.339482227006413e-02, -4.116167014370117e-02, -4.116167014370117e-02, -6.492409528887267e-06, -7.479048174173345e-06, -1.258345513418923e-03, -1.376465062496616e-06, -2.487534265060407e-06, -2.487534265060407e-06, -5.227285531335076e+00, -5.227818463043483e+00, -5.227308421784049e+00, -5.010459448750634e+00, -5.227556033961902e+00, -5.227556033961902e+00, -1.478607382759178e+00, -1.505151297325194e+00, -1.458110702434239e+00, -1.482140384118184e+00, -1.503202070868274e+00, -1.962046343871353e+00, -4.376787347625729e-01, -4.825249381167285e-01, -3.984737507690643e-01, -4.142584624646583e-01, -4.458965246219126e-01, -3.990208872115769e-01, -3.460477042212329e-03, -6.065801111327181e-02, -2.771643434525830e-03, -1.837100155320661e+00, -2.033132000273857e-02, -2.033132000273859e-02, -8.593681517175749e-08, -1.332311713117506e-06, -3.737258108764374e-07, -9.716176995623287e-04, -2.881537702787462e-07, -7.826667257165706e-07, -4.303279232648825e-01, -4.271551585592435e-01, -4.215368409036414e-01, -4.291318209849818e-01, -4.286675584350026e-01, -4.286675584350026e-01, -4.142170747348533e-01, -3.433805962351943e-01, -3.621787840536523e-01, -3.816259620004822e-01, -3.715611294520654e-01, -3.440320654069912e-01, -5.160449760482305e-01, -5.080613004947125e-02, -1.307168915246454e-01, -1.585561909798464e-01, -1.630435385104553e-01, -1.630435385104553e-01, -2.515429031703726e-01, -1.111465894542016e-03, -2.650840106702789e-03, -1.875475955724345e-01, -2.462066057390893e-03, -7.799843399756534e-03, -2.211381922135406e-05, -2.429101727329659e-08, -1.729644157435047e-07, -6.554242254566282e-03, -5.765103142341227e-07, -5.765103142341218e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_pjs18_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_pjs18", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.960504558400230e+01, -2.960511720815756e+01, -2.960546588845064e+01, -2.960439887612526e+01, -2.960495367728243e+01, -2.960495367728243e+01, -4.776028044123255e+00, -4.775993708884971e+00, -4.775178763608259e+00, -4.775957838822540e+00, -4.775357674991061e+00, -4.062819883620436e+00, -7.760324230466908e-01, -6.095808172320738e-01, -5.833368079981289e-01, -5.921350655788123e-01, -5.902056648916835e-01, -5.902056648916835e-01, -6.982473716591316e-02, -7.240502527911752e-02, -9.802169430011459e-01, -3.481066717077239e-02, -4.713625268024980e-02, -4.713625268024980e-02, -4.725038837708363e-06, -5.543795324709299e-06, -8.323037762486277e-04, -8.623788265966543e-07, -1.812363732866263e-06, -1.812363732866263e-06, -6.732936339179051e+00, -6.736306617339910e+00, -6.733120554577737e+00, -7.047323289344999e+00, -6.734630017634174e+00, -6.734630017634174e+00, -2.622173165408152e+00, -2.638073846564241e+00, -2.610911432890907e+00, -2.624789157883761e+00, -2.636401579555080e+00, -2.197399172575447e+00, -5.714894779429274e-01, -6.615547740921565e-01, -5.021232152679559e-01, -5.443707695500193e-01, -5.878901308323705e-01, -6.447759214636493e-01, -1.319683805351794e-02, -6.615835805419575e-02, -1.060135714173858e-02, -2.270185864621604e+00, -2.104139652210212e-02, -2.104139652210216e-02, -3.633626721896399e-07, -7.857392059824741e-07, -4.492366225611477e-07, -3.473266826595985e-03, -7.291710401949151e-07, -7.275398411488654e-07, -6.247016068028540e-01, -6.145406681829626e-01, -6.271243097403065e-01, -6.211705149156923e-01, -6.196968904249094e-01, -6.196968904249094e-01, -6.023727873913413e-01, -4.469200501468863e-01, -4.896949104092836e-01, -5.346347083409392e-01, -5.114245542000120e-01, -5.467249349654013e-01, -6.938571719479831e-01, -1.274110702439112e-01, -1.564707357813635e-01, -3.004320659897644e-01, -2.041421116586706e-01, -2.041421116586706e-01, -4.473036630606104e-01, -7.313903283347406e-04, -1.815625288267189e-03, -2.539709617516647e-01, -7.423445451491732e-03, -7.248331260796346e-03, -1.152740922079070e-05, -1.560952095517091e-08, -1.666325284011661e-07, -6.110780524035423e-03, -5.958843415524572e-07, -5.958843415524560e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_pjs18_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_pjs18", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-9.875550119856658e-09, -9.875346791677455e-09, -9.874446413453263e-09, -9.877465422038920e-09, -9.875882990361977e-09, -9.875882990361977e-09, -2.201004737559485e-05, -2.200660939802299e-05, -2.191471701019420e-05, -2.194390102055245e-05, -2.194981766864334e-05, -8.621690759488555e-06, -1.891634625501091e-02, -4.035639777486624e-03, -4.160621770367312e-03, -4.169884584057999e-03, -4.165885232523156e-03, -4.165885232523156e-03, -2.880511632284222e-01, -2.816256209272402e-01, -1.704652691173743e-02, -4.133102038654517e-01, -3.614637055568068e-01, -3.614637055568067e-01, -1.892788159753225e+00, -1.888111086487859e+00, -1.350181741662782e+00, -1.930843839192454e+00, -1.919385372611145e+00, -1.919385372611145e+00, -2.180711298061932e-06, -2.179349095187998e-06, -2.180645721564916e-06, -2.503566987523011e-06, -2.180024761492452e-06, -2.180024761492452e-06, -2.402287217165977e-04, -2.276982825803712e-04, -2.502771409670983e-04, -2.384845800483077e-04, -2.286302146732485e-04, -7.746831826214077e-05, -9.643925332357322e-03, -7.461687885151634e-03, -1.197538674136502e-02, -1.110438475082976e-02, -9.222159834031626e-03, -1.262357294644895e-02, -1.700057638872180e+00, -2.485855421581490e-01, -1.763335571625136e+00, -1.073079221715211e-04, -5.731381487641097e-01, -5.731381487641091e-01, -2.322696605598312e+00, -1.931221232395984e+00, -1.951365713414453e+00, -1.884285584864135e+00, -1.257733351799413e+00, -1.941529834182017e+00, -8.575395306324866e-03, -9.397635421259666e-03, -8.615435566846647e-03, -8.905393998727891e-03, -9.027452205410895e-03, -9.027452205410895e-03, -9.520173858280972e-03, -1.738324011556805e-02, -1.549736782788960e-02, -1.346282775116101e-02, -1.453650602341838e-02, -1.668828885071808e-02, -6.270153814736648e-03, -4.429368225478892e-01, -1.010728366356002e-01, -9.286916613601387e-02, -7.366476182449923e-02, -7.366476182449933e-02, -3.893309240308298e-02, -1.376632113533640e+00, -1.171435735466348e+00, -6.044726598585659e-02, -1.500966453385600e+00, -8.780817900624452e-01, -1.837091681452439e+00, -1.967837246108525e+00, -1.957666418650850e+00, -9.335318174297594e-01, -1.945987174901006e+00, -1.945987174901010e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_pjs18_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_pjs18", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.084596662097585e-03, 1.084593638996659e-03, 1.084579266212215e-03, 1.084624263820328e-03, 1.084600818175160e-03, 1.084600818175160e-03, 6.597209313858627e-03, 6.597195350747096e-03, 6.596714130158307e-03, 6.596322479548832e-03, 6.597036630438043e-03, 3.392425481172884e-03, 2.783595445345087e-02, 1.078519795113485e-02, 1.019806643025737e-02, 1.050159933003930e-02, 1.043086259443683e-02, 1.043086259443683e-02, 1.114810375397283e-02, 1.148280421659845e-02, 2.513908565608648e-02, 6.286478108119282e-03, 8.120900162568575e-03, 8.120900162568572e-03, 2.026662810590252e-06, 2.358915282220472e-06, 3.036945012552703e-04, 3.962763575952771e-07, 7.829324422698877e-07, 7.829324422698877e-07, 3.505165830005662e-03, 3.509930356360106e-03, 3.505444889122412e-03, 4.429670023704659e-03, 3.507549621748570e-03, 3.507549621748570e-03, 1.148886284604850e-02, 1.141081180728792e-02, 1.154650102333827e-02, 1.147680004261138e-02, 1.141812469984653e-02, 5.484107653944017e-03, 1.949316359821766e-02, 2.185548036106979e-02, 1.817980883793144e-02, 2.003929827908732e-02, 1.991049779717392e-02, 2.979526079449822e-02, 5.472082732639231e-03, 9.369026999397533e-03, 4.505985640125812e-03, 7.649703685873933e-03, 4.479811469778936e-03, 4.479811469778948e-03, 1.853547109873720e-07, 3.702427417257357e-07, 1.671231389294799e-07, 1.563893593083775e-03, 2.946602052448260e-07, 2.908746297260460e-07, 2.810175764335003e-02, 2.663266238501823e-02, 3.003042856615398e-02, 2.755020445808621e-02, 2.733407759242966e-02, 2.733407759242966e-02, 2.828246717552220e-02, 2.009161075809925e-02, 2.200684291376697e-02, 2.424029121998785e-02, 2.305096321920241e-02, 3.162969586829109e-02, 2.026133916569166e-02, 2.696070953886733e-02, 1.501472595291276e-02, 3.426274176346301e-02, 1.741865034954692e-02, 1.741865034954692e-02, 3.335951815744147e-02, 2.704328391511615e-04, 6.022284011013192e-04, 2.120074635861920e-02, 3.015234841829997e-03, 1.930397949114880e-03, 5.557185770521559e-06, 7.176545773353015e-09, 6.613769995201561e-08, 1.680382080344052e-03, 2.309098876732975e-07, 2.309098876732974e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
