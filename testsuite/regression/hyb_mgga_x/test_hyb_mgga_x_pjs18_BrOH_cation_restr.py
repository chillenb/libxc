
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_pjs18_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_pjs18", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.206630651437425e+01, -2.206635997548392e+01, -2.206666120202694e+01, -2.206586620469728e+01, -2.206627369830893e+01, -2.206627369830893e+01, -3.266000841532852e+00, -3.266040888579720e+00, -3.267352471008190e+00, -3.269028117808840e+00, -3.267694689489342e+00, -3.267694689489342e+00, -4.606402037527276e-01, -4.603245346713754e-01, -4.553101106452183e-01, -4.662445809329607e-01, -4.627649095647082e-01, -4.627649095647082e-01, -5.444973599663906e-02, -5.577472236752776e-02, -4.549373826574312e-01, -3.029569506163111e-02, -3.864211321290693e-02, -3.864211321290693e-02, -6.452049110497180e-06, -7.395005344165176e-06, -1.156789594141773e-03, -1.255718953674359e-06, -2.362964481710997e-06, -2.362964481710995e-06, -5.225974092206070e+00, -5.226523162639237e+00, -5.226024327592588e+00, -5.226508103107427e+00, -5.226239130364070e+00, -5.226239130364070e+00, -1.914432500744201e+00, -1.930663169903826e+00, -1.912092196626362e+00, -1.926579126843358e+00, -1.924587857259602e+00, -1.924587857259602e+00, -4.203308811460669e-01, -4.637706516810642e-01, -3.692165600593301e-01, -3.792625210333399e-01, -4.296391908618410e-01, -4.296391908618410e-01, -1.379290652781724e-02, -5.900769168720092e-02, -1.131246934039626e-02, -1.692861356310253e+00, -1.920321579066806e-02, -1.920321579066807e-02, -4.879175563920826e-07, -1.080707069891533e-06, -3.520509014613969e-07, -3.990049330229642e-03, -6.820402945037464e-07, -6.820402945037467e-07, -4.286039605188868e-01, -4.253400327717144e-01, -4.264224893759633e-01, -4.273650556610397e-01, -4.268861175787998e-01, -4.268861175787998e-01, -4.109343760563485e-01, -3.413262324412623e-01, -3.594446066260716e-01, -3.783484940371447e-01, -3.683590977504470e-01, -3.683590977504470e-01, -4.899194564349999e-01, -9.349008473755334e-02, -1.269042716978147e-01, -1.914524460809959e-01, -1.567674929894572e-01, -1.567674929894572e-01, -2.967198171634471e-01, -1.066039376633412e-03, -2.399459331605654e-03, -1.781345576886696e-01, -7.202097241385991e-03, -7.202097241385943e-03, -1.756640307711751e-05, -1.234803158534044e-08, -1.665652617029133e-07, -6.235799631385081e-03, -5.258526874589892e-07, -5.258526874589882e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_pjs18_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_pjs18", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.779287368868557e+01, -2.779299332023051e+01, -2.779349140610881e+01, -2.779171272583049e+01, -2.779264950956749e+01, -2.779264950956749e+01, -4.212814515767101e+00, -4.212915253566968e+00, -4.215476798812348e+00, -4.213249442969561e+00, -4.213699155563885e+00, -4.213699155563885e+00, -6.199364126101878e-01, -6.181350930824514e-01, -5.763643544923964e-01, -5.883371217566349e-01, -5.860164029485934e-01, -5.860164029485934e-01, -6.981979004991465e-02, -7.242500782633646e-02, -6.941107263170855e-01, -3.419616804783027e-02, -4.682293758342283e-02, -4.682293758342285e-02, -4.724567270740619e-06, -5.542778477545320e-06, -8.212441289745676e-04, -8.615523158363749e-07, -1.811402345297987e-06, -1.811402345297987e-06, -6.734452671852154e+00, -6.737808730964935e+00, -6.734605482933945e+00, -6.737568126383318e+00, -6.736154953833237e+00, -6.736154953833237e+00, -2.178833489414151e+00, -2.202662050094417e+00, -2.160008464633821e+00, -2.181089239400011e+00, -2.201374800899256e+00, -2.201374800899256e+00, -5.854639600205471e-01, -6.848059601139090e-01, -5.208229859543485e-01, -5.801893328027292e-01, -6.020760408089326e-01, -6.020760408089326e-01, -1.287351080351136e-02, -6.580447185990765e-02, -1.040891864356809e-02, -2.430418031038676e+00, -2.084180227726775e-02, -2.084180227726775e-02, -3.634596592950068e-07, -7.840472916507756e-07, -4.492314531948988e-07, -3.459960494175730e-03, -7.272470279813594e-07, -7.272470279813596e-07, -6.269512540585946e-01, -6.169588731852844e-01, -6.206074568186600e-01, -6.235237324838906e-01, -6.220777489790372e-01, -6.220777489790372e-01, -6.066471027878256e-01, -4.480452122984867e-01, -4.919311461804166e-01, -5.382806351925502e-01, -5.145084819768910e-01, -5.145084819768910e-01, -7.247520330536145e-01, -1.086403144372302e-01, -1.563715581224981e-01, -2.653638091325964e-01, -2.052004357423469e-01, -2.052004357423470e-01, -3.962435601751500e-01, -7.265964595851166e-04, -1.779171703416537e-03, -2.596672781122199e-01, -7.156334994709793e-03, -7.156334994709720e-03, -1.142476692445442e-05, -1.559781278195059e-08, -1.666221140158712e-07, -6.064619125523791e-03, -5.957912848082294e-07, -5.957912848082284e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_pjs18_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_pjs18", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-7.748071053587452e-09, -7.747996848084348e-09, -7.747572375858274e-09, -7.748675636544076e-09, -7.748111046199223e-09, -7.748111046199223e-09, -1.283688347694963e-05, -1.283667146918678e-05, -1.282687223239211e-05, -1.279468368804604e-05, -1.281666414521829e-05, -1.281666414521829e-05, -7.939231528657128e-03, -7.940061213106564e-03, -7.836787857870365e-03, -7.453803805485349e-03, -7.587550135632517e-03, -7.587550135632517e-03, -2.958139117455975e-01, -2.907826721606774e-01, -6.357088831231947e-03, -4.559044743528374e-01, -3.890882123537460e-01, -3.890882123537456e-01, -1.893050184771533e+00, -1.888613668717602e+00, -1.372421045785738e+00, -1.932885341942642e+00, -1.920863354569214e+00, -1.920863354569214e+00, -2.182835926872563e-06, -2.181439756050950e-06, -2.182725621733300e-06, -2.181495082882671e-06, -2.182154262927479e-06, -2.182154262927479e-06, -8.529370382499468e-05, -8.313940550167447e-05, -8.504525690333580e-05, -8.313201219158338e-05, -8.420348400629847e-05, -8.420348400629847e-05, -1.097963274888393e-02, -8.167814941828605e-03, -1.528916816538905e-02, -1.445744882438169e-02, -1.036975817835958e-02, -1.036975817835958e-02, -6.920200967646459e-01, -2.583800726669946e-01, -7.567822570327781e-01, -1.503253738992256e-04, -5.994658095318047e-01, -5.994658095318047e-01, -1.947056437574895e+00, -1.935714841714080e+00, -1.952200703224558e+00, -1.077077004695923e+00, -1.944102041417860e+00, -1.944102041417860e+00, -8.411064945559481e-03, -9.365385764266022e-03, -9.072110460102673e-03, -8.796867483942372e-03, -8.938627123511572e-03, -8.938627123511572e-03, -9.127645930246099e-03, -1.770946852278425e-02, -1.584526067962803e-02, -1.372119252985249e-02, -1.487898395777962e-02, -1.487898395777962e-02, -7.242199009082354e-03, -1.571142333874866e-01, -1.076094090371754e-01, -5.951681330115393e-02, -8.082219863737464e-02, -8.082219863737461e-02, -2.452890980821259e-02, -1.387298159114994e+00, -1.203472120848842e+00, -6.838250718054795e-02, -9.120608096011459e-01, -9.120608096011378e-01, -1.851502713286166e+00, -1.970709772251897e+00, -1.958059127984081e+00, -9.542375896700235e-01, -1.947529927372181e+00, -1.947529927372186e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_pjs18_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_pjs18", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_pjs18_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_pjs18", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [8.026522349911913e-04, 8.026555739472289e-04, 8.026607819143767e-04, 8.026113050075412e-04, 8.026385997290564e-04, 8.026385997290564e-04, 4.498230234401756e-03, 4.498478719854049e-03, 4.504120728679704e-03, 4.493479999067100e-03, 4.498421472424609e-03, 4.498421472424609e-03, 1.679528489228211e-02, 1.673846149963962e-02, 1.529770932236786e-02, 1.528985517816823e-02, 1.535637066632646e-02, 1.535637066632646e-02, 1.139459021016302e-02, 1.179140285038158e-02, 1.559312138962130e-02, 6.772212976293792e-03, 8.602340045438316e-03, 8.602340045438306e-03, 2.026887287943127e-06, 2.359419588565342e-06, 3.074972603015655e-04, 3.966032705580605e-07, 7.834159461898308e-07, 7.834159461898308e-07, 3.509496112524616e-03, 3.514223290537505e-03, 3.509685697222596e-03, 3.513859098788824e-03, 3.511906102150799e-03, 3.511906102150799e-03, 5.750494825683781e-03, 5.766777873862149e-03, 5.651881540263538e-03, 5.666452969925836e-03, 5.807982173241142e-03, 5.807982173241142e-03, 2.213475768403798e-02, 2.587633049924483e-02, 2.239775124049760e-02, 2.680759584266191e-02, 2.249027668840903e-02, 2.249027668840903e-02, 3.146840062659701e-03, 9.644061031926977e-03, 2.680309602008865e-03, 1.050374122588292e-02, 4.639439474003481e-03, 4.639439474003481e-03, 1.831533119221374e-07, 3.709083169443255e-07, 1.671983619332629e-07, 1.087296388482193e-03, 2.912111166761482e-07, 2.912111166761481e-07, 2.887690893115075e-02, 2.727152785392603e-02, 2.780576361667444e-02, 2.827212627331125e-02, 2.803613326048671e-02, 2.803613326048671e-02, 2.986116814402170e-02, 2.042894600656564e-02, 2.255015015839765e-02, 2.508467170508616e-02, 2.376662003655583e-02, 2.376662003655583e-02, 2.490187193771159e-02, 1.267801359394815e-02, 1.574487924765991e-02, 2.177362871284506e-02, 1.875015703636164e-02, 1.875015703636163e-02, 2.103195557160852e-02, 2.720300496228470e-04, 6.146389238304887e-04, 2.398504741018457e-02, 1.988818800436875e-03, 1.988818800436874e-03, 5.590129821025935e-06, 7.184799617258122e-09, 6.614937296689422e-08, 1.709806109248349e-03, 2.310786501898917e-07, 2.310786501898915e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
