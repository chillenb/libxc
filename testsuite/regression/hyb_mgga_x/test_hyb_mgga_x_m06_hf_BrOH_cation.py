
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_m06_hf_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06_hf", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([3.102417641629253e+00, 3.102488654730260e+00, 3.102782154779314e+00, 3.579289915784347e+00, 3.579788343107485e+00, 4.057340980908651e+00, -2.811552784601607e-01, -2.054241669262283e-01, -2.020252244149991e-01, -2.034340202566667e-01, -2.032185070811037e-01, -2.787464851984053e-01, -1.402002186756498e-01, -1.561967699921076e-01, -2.324421200471207e-01, -1.809435493800303e-01, -1.560955029115619e-01, -2.091908151687089e-01, -7.459740949823709e-02, -7.120202250346033e-02, -3.931321060070948e-01, -1.276376775287323e-01, -9.698038609989046e-02, -8.210689620786116e-02, 1.779819162459150e-02, 1.532099363861629e-02, 7.575297405321590e-02, 1.035676234566894e-02, 1.438252364727647e-02, 1.438252364727652e-02, 1.428424111524586e+00, 1.443654545578190e+00, 1.429294265610201e+00, 1.442730058868209e+00, 1.340491682217170e+00, 1.340580923950899e+00, -1.533408505465949e-01, -1.480014190635786e-01, -1.582482533673286e-01, -1.527480781344200e-01, -1.844176540208275e-01, -1.482563697020333e-01, 4.409600398369594e-02, 1.246659824189862e-01, -1.387216079803045e-02, 6.118890274402143e-02, 6.731553136221147e-02, 8.257924042804278e-02, -2.164367085690562e-02, -1.044673477134783e-01, -2.740132324590379e-03, 3.012440749561144e-01, -9.274684088513502e-02, -9.274684088513345e-02, 6.375609032364843e-03, 1.012810903399145e-02, 7.739073062731028e-03, 8.490591130198108e-02, 9.712352823076635e-03, 9.712352823076482e-03, 2.622247648147632e-03, 2.021910762432149e-01, 1.428094547167512e-01, 8.577963993373634e-02, 1.146344277644495e-01, 1.190538769806848e-01, 3.390245109893801e-02, -5.270519001880163e-03, 6.652702399085478e-02, 1.074384019853552e-01, 9.671108158559713e-02, 8.334683325256209e-02, 1.075447820619734e-01, -1.326282297014971e-01, -7.790689462255293e-02, -3.380503774763638e-02, -4.239871061273377e-02, -4.334341068308915e-02, -2.336578693129228e-02, 7.474550629823726e-02, 7.839459076941116e-02, -1.398344901511055e-02, 1.887423155213837e-03, 1.887423155216002e-03, 1.470510263712272e-02, 2.715199600254442e-03, 3.182077262273529e-03, 8.902033220583469e-02, 8.925518871651321e-03, 6.003304672943971e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_m06_hf_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06_hf", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([7.486717484345422e+00, 7.492543961246893e+00, 7.487597634541109e+00, 7.493183266746813e+00, 7.490098374483232e+00, 7.496861233696194e+00, 7.480229130282671e+00, 6.833961622768969e+00, 7.487280480042272e+00, 6.838978266649561e+00, 6.837114824814370e+00, 6.838978266649561e+00, 4.114151030265260e-01, 1.499204459716260e-01, 4.130034620084959e-01, 4.111491946341526e-01, 4.443912903828326e-01, 4.501156394264311e-01, 4.329028988737094e-01, 4.329514388185529e-01, 4.078195636041166e-01, 4.617684011702630e-01, 1.476420006778533e-01, 4.617684011702631e-01, 1.629879476484437e-01, 1.660770982931761e-01, 1.615183928891007e-01, 4.679415109065492e-01, 4.813607402614112e-01, 4.753858642371023e-01, 4.838670049658093e-01, 1.464410569253742e-01, 1.674430061058402e-01, 5.094882292020533e-02, 4.605611284301532e-01, 4.430335489021448e-01, -4.356383947955920e-02, 1.102598700679453e-01, -3.484133876723088e-02, 1.201298886857519e-01, 2.836205571037780e-01, -1.195649206263417e-01, -1.646423343160501e-01, -1.176812054604937e-01, 8.682778955577583e-02, -2.249208441210581e-01, 8.682778955579039e-02, -1.109078703917505e-01, 2.264931322438320e-02, 2.398494756377071e-02, 1.450475765660637e-02, 2.523147120249518e-02, 1.092185959062212e-01, 5.744679613448027e-02, 1.386195642550926e-02, 1.363403974216251e-02, 2.032402211632757e-02, 1.170067064917189e-02, 2.032402211632758e-02, 1.170067064917014e-02, 4.805679802869779e+00, 4.804773770336685e+00, 4.844392022088440e+00, 4.842209435196914e+00, 4.808462227722775e+00, 4.806507237869440e+00, 4.841660205474834e+00, 4.840495112668688e+00, 4.890756150004030e+00, 4.823837390793223e+00, 4.825453893266459e+00, 4.889121685327044e+00, 1.854342634605190e-02, 1.478331645464927e-02, -4.227133648861218e-03, -4.601841113721931e-03, 6.534428969247087e-02, 4.403607004586933e-02, 1.927543554570214e-02, 7.046282626070728e-03, -4.830805378409220e-03, -1.901434729771179e-01, -4.830805378409241e-03, -1.021198366149561e-03, 4.324563655856693e-01, 4.025383472447859e-01, 2.392412489026721e-01, 2.807330665847004e-01, 9.463982036626507e-02, 3.019567951621399e-01, 4.139941184904442e-01, 3.760450411616386e-01, 3.233705592615494e-01, 3.938961923846535e-01, 3.233705592615492e-01, 4.137949426564290e-01, -2.153780689405489e-01, -2.182344161831089e-01, -1.363449904540053e-01, -3.423881347776787e-03, -1.779549152346391e-01, -2.014278627027268e-01, 1.032685058847691e+00, 1.029924649922327e+00, -2.195176106943773e-01, -1.551640362492538e-01, -2.195176106943964e-01, -1.551640362492408e-01, 5.870769881287407e-03, 1.085066364683976e-02, 1.334813590697198e-02, 1.355333511092671e-02, 9.945390646703672e-03, 1.051253839077937e-02, -3.964148680522208e-02, 6.148696076861018e-02, 1.021802309907256e-02, 1.387094991176867e-02, 1.021802309907269e-02, 1.387094991176690e-02, -3.711778559699008e-01, -3.519876215230506e-01, -3.980145986744323e-02, -7.377747568419435e-02, -2.818421934537132e-01, -3.084608320886429e-01, -4.211037228367579e-01, -4.468238521196061e-01, -3.665859044830736e-01, -3.844314243482749e-01, -3.665859044830736e-01, -4.043423520863920e-01, -4.247860744701761e-01, -4.155514816014598e-01, 3.004966730844789e-01, 2.753410096176232e-01, 2.821612182974594e-01, 2.697106177396566e-01, 2.433388075114374e-01, 2.523337059698491e-01, 1.367622274340469e-01, 1.339742414254979e-01, 1.367622274340468e-01, 1.510236073783115e-01, 1.661160391795509e-01, 1.866031634707264e-01, 1.083989575928297e-01, 1.114548955542892e-01, 4.518054097688838e-02, 1.950215297285705e-01, -3.143581266103004e-02, 6.524404165600573e-03, 1.294443833845746e-01, 1.258978156099564e-01, 1.294443833845739e-01, 4.289115813465148e-02, 6.942217694919794e-02, 1.051718872316723e-01, 1.073768586883883e-01, 1.080532932446472e-01, 3.479298799478152e-02, 2.604163327978392e-02, 3.163381643329550e-02, 1.423785386208236e-01, -1.425075524290447e-01, -1.728044228790280e-01, -1.425075524290009e-01, -1.728044228790295e-01, 2.014486598693897e-02, 2.098342305076175e-02, 3.615042054157126e-03, 3.623299705817150e-03, 4.122186824307768e-03, 4.391630032049230e-03, -2.711305127716107e-02, -4.545359389256450e-02, 9.657755522280211e-03, 1.274419830430777e-02, 9.657755522281189e-03, 7.431335876619038e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m06_hf_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06_hf", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.293690684550852e-08, 0.000000000000000e+00, 1.293787040657811e-08, 1.293687126970803e-08, 0.000000000000000e+00, 1.293784443811149e-08, 1.293667517319492e-08, 0.000000000000000e+00, 1.293758674513685e-08, 1.293708808179908e-08, 0.000000000000000e+00, 1.124511070316719e-08, 1.293689318418497e-08, 0.000000000000000e+00, 1.124517838626191e-08, 1.124423591526733e-08, 0.000000000000000e+00, 1.124517838626191e-08, 4.571322608554459e-06, 0.000000000000000e+00, 6.876317437678364e-06, 4.574163982479670e-06, 0.000000000000000e+00, 4.571073693673468e-06, 4.629744173388048e-06, 0.000000000000000e+00, 4.639550618642949e-06, 4.607922566566660e-06, 0.000000000000000e+00, 4.607740285197746e-06, 4.567922812163998e-06, 0.000000000000000e+00, 4.657742761387431e-06, 6.875851081252880e-06, 0.000000000000000e+00, 4.657742761387431e-06, -3.079029984278122e-03, 0.000000000000000e+00, -2.569309851039713e-03, -3.236593345209336e-03, 0.000000000000000e+00, -1.684248531094247e-03, -3.066027274456231e-03, 0.000000000000000e+00, -3.320027430367729e-03, -2.679437205543843e-03, 0.000000000000000e+00, -4.387022115449801e-03, -2.209382050767765e-03, 0.000000000000000e+00, -8.912927515393803e-03, -1.465120277249242e-03, 0.000000000000000e+00, -4.306790177891419e-03, -2.927912423164728e+00, 0.000000000000000e+00, -8.396254215238074e-01, -2.616127555511863e+00, 0.000000000000000e+00, -7.235865282961546e-01, -2.848970784041451e-03, 0.000000000000000e+00, -5.357657559016894e-03, -2.848313141054513e+00, 0.000000000000000e+00, -2.950333015986828e+00, -9.462466044846333e-01, 0.000000000000000e+00, -4.147937458230650e+00, -9.462466044846364e-01, 0.000000000000000e+00, -4.642599537071975e+01, -2.300498260945240e+01, 0.000000000000000e+00, -2.308492872499744e+01, 4.250704344375766e+06, 0.000000000000000e+00, -2.413404471580860e+01, 2.607519104351521e+03, 0.000000000000000e+00, -1.053954399789304e+01, -1.688115543919741e+01, 0.000000000000000e+00, -1.705456026286843e+01, -2.187017415535269e+01, 0.000000000000000e+00, -3.749460467631403e+01, -2.187017415535269e+01, 0.000000000000000e+00, -3.749460467631354e+01, 3.902906632713361e-06, 0.000000000000000e+00, 3.906771128043550e-06, 3.919654802771729e-06, 0.000000000000000e+00, 3.922973933108615e-06, 3.904095969870791e-06, 0.000000000000000e+00, 3.907515648218839e-06, 3.918454495930398e-06, 0.000000000000000e+00, 3.922222764479407e-06, 4.310161654788046e-06, 0.000000000000000e+00, 3.914860841124285e-06, 3.911271005930653e-06, 0.000000000000000e+00, 4.314155436917375e-06, 2.788139282147551e-05, 0.000000000000000e+00, 2.823661754216093e-05, 3.040900257368652e-05, 0.000000000000000e+00, 3.067664511819535e-05, 2.536033966973532e-05, 0.000000000000000e+00, 2.645571791881956e-05, 2.779600177698302e-05, 0.000000000000000e+00, 2.884350820883944e-05, 3.104084945076496e-05, 0.000000000000000e+00, 4.992469574839768e-05, 3.104084945076496e-05, 0.000000000000000e+00, 2.981932246609090e-05, 1.296950913057859e-02, 0.000000000000000e+00, 1.719099000228621e-02, 1.445143367651507e-02, 0.000000000000000e+00, 1.469833774352471e-02, 8.932716485464200e-03, 0.000000000000000e+00, 1.114763308894758e-02, 1.521568315330907e-02, 0.000000000000000e+00, 1.600352828516486e-02, 1.352850399349001e-02, 0.000000000000000e+00, 1.816605188734340e-02, 1.352850399349002e-02, 0.000000000000000e+00, 1.427028696155523e-02, -5.064547438184102e+00, 0.000000000000000e+00, -4.994675030787493e+00, -4.188815283499462e+00, 0.000000000000000e+00, -1.131327934988419e+00, -5.660436889433119e+00, 0.000000000000000e+00, -5.609738894392168e+00, 1.380843335781773e-04, 0.000000000000000e+00, 1.384253964954589e-04, -5.076848601208611e+00, 0.000000000000000e+00, -5.398859482261911e+00, -5.076848601208603e+00, 0.000000000000000e+00, -5.398859482261884e+00, 1.256125311606919e+08, 0.000000000000000e+00, -1.130404809255445e+01, -1.601423119803958e+01, 0.000000000000000e+00, -1.411628765840755e+01, -1.152812708709181e+02, 0.000000000000000e+00, -1.265182296352117e+02, -9.031107573905841e+00, 0.000000000000000e+00, -7.333690835687750e+01, -2.173519984626931e+01, 0.000000000000000e+00, -6.893720108799943e+01, -2.173519984626933e+01, 0.000000000000000e+00, -6.893720108799990e+01, 2.043712548295782e-02, 0.000000000000000e+00, 1.985654388671840e-02, 2.929291627380776e-02, 0.000000000000000e+00, 2.871694639814476e-02, 2.852063616178083e-02, 0.000000000000000e+00, 2.773537492508986e-02, 2.533793288842691e-02, 0.000000000000000e+00, 2.375597575422152e-02, 2.704679345583073e-02, 0.000000000000000e+00, 2.626240553225108e-02, 2.704679345583073e-02, 0.000000000000000e+00, 2.527367853901221e-02, 2.440779422824572e-02, 0.000000000000000e+00, 2.368364271788954e-02, 1.911967917877939e-02, 0.000000000000000e+00, 2.603728904848361e-02, 2.662931372566614e-02, 0.000000000000000e+00, 3.273226148458289e-02, 2.914895026737786e-02, 0.000000000000000e+00, 2.886277412554819e-02, 2.823783010407137e-02, 0.000000000000000e+00, 2.797367566336768e-02, 2.823783010407137e-02, 0.000000000000000e+00, 3.307219463558617e-02, 1.098670078586880e-02, 0.000000000000000e+00, 1.310203955880276e-02, -4.084986222484051e-01, 0.000000000000000e+00, -3.958775030701112e-01, -2.324692153583822e-01, 0.000000000000000e+00, -1.083598318441139e-01, 4.646605594035222e-02, 0.000000000000000e+00, 2.631352084370442e-02, -7.082950437156550e-04, 0.000000000000000e+00, 5.489050897769981e-04, -7.082950437156350e-04, 0.000000000000000e+00, 1.428531380372683e-02, 1.681154054563011e-02, 0.000000000000000e+00, 1.785853977232818e-02, 2.837801738278179e+03, 0.000000000000000e+00, 2.754150271511304e+03, -8.561023740181705e+00, 0.000000000000000e+00, -8.767160911610274e+00, 5.280892201232495e-02, 0.000000000000000e+00, 7.083878936254168e-02, -9.294148395274371e+00, 0.000000000000000e+00, -1.042091275416592e+01, -9.294148395274297e+00, 0.000000000000000e+00, -1.042091275416590e+01, 1.218710843377061e+06, 0.000000000000000e+00, 1.055434138803495e+06, -1.842564271236964e+01, 0.000000000000000e+00, -1.834462469094743e+01, 5.168783646086166e+08, 0.000000000000000e+00, 4.037973388439877e+08, -1.347697697684495e+02, 0.000000000000000e+00, -1.420177398704160e+02, -5.608272396461727e+01, 0.000000000000000e+00, -7.148876243377792e+01, -5.608272396461742e+01, 0.000000000000000e+00, 5.405292548704246e+07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m06_hf_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06_hf", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-1.964252940119165e-03, -1.967773648212298e-03, -1.964762534890855e-03, -1.968143869204767e-03, -1.966198865424301e-03, -1.970260635295552e-03, -1.960486811710892e-03, -2.226420492664557e-03, -1.964580018888190e-03, -2.229308349467865e-03, -2.228110131980918e-03, -2.229308349467865e-03, -7.594599064466460e-03, -4.703512646319777e-03, -7.608153281106537e-03, -7.592462707847904e-03, -7.876544756760528e-03, -7.925472642912990e-03, -7.777231246457654e-03, -7.777486173735066e-03, -7.565695187430175e-03, -8.024146852355505e-03, -4.686857896183543e-03, -8.024146852355505e-03, -3.339980757622544e-02, -3.369332039043430e-02, -3.328126479970191e-02, -6.002137925448917e-02, -5.727789773607590e-02, -5.646641183310804e-02, -5.913462224843129e-02, -3.224761995763144e-02, -3.357005821186826e-02, -2.434608009464751e-02, -5.943500054180868e-02, -5.244692578133926e-02, -3.018275839214747e-02, -1.600703268499340e-01, -3.815524091322545e-02, -1.730141152356953e-01, -2.136428904962494e-02, -1.009136633200451e-02, 7.864565633470710e-02, 5.091861045916145e-02, -1.200872291191612e-01, 1.431889641468412e-01, -1.200872291191632e-01, 1.147170766617078e-01, 3.174104971870677e-04, 3.820680795481807e-04, -4.544506940353484e-04, 4.707343522307396e-04, -4.573514873103030e-03, 3.180123966161053e-02, 5.066684359073051e-05, 4.867177806938677e-05, 2.143326690706819e-04, 6.777781511315033e-05, 2.143326690706819e-04, 6.777781511045775e-05, -4.877483091631152e-02, -4.879058897355914e-02, -4.939936963044014e-02, -4.939473030164712e-02, -4.881959429524008e-02, -4.881850898451458e-02, -4.935515091197899e-02, -4.936698942943366e-02, -4.670485998748045e-02, -4.909702029270012e-02, -4.909241035330119e-02, -4.670897902542810e-02, -6.950647684841993e-03, -6.912044011014046e-03, -6.781437701001794e-03, -6.798263490987019e-03, -7.580448084354695e-03, -7.287698074244096e-03, -6.957149271394470e-03, -6.828015179612470e-03, -6.836934471120386e-03, -2.090123799235627e-03, -6.836934471120386e-03, -6.773774591458052e-03, -1.849313717921407e-01, -1.592121272416223e-01, -9.900719711656701e-02, -1.288121032190933e-01, -6.121507383707644e-02, -1.378631073330614e-01, -1.949332441034405e-01, -1.735011364720612e-01, -1.317851730525811e-01, -1.590372532324508e-01, -1.317851730525810e-01, -1.834981475358283e-01, 1.510609177953599e-01, 1.513359614539247e-01, 3.321583777440383e-02, -3.423843853781079e-02, 1.419527945443191e-01, 1.514586783424429e-01, -4.266069800482002e-02, -4.257980215614456e-02, 1.464587473405208e-01, 1.039671282880269e-01, 1.464587473405170e-01, 1.039671282879931e-01, -1.979495554581052e-05, 1.608266984580712e-05, 4.281725220791014e-05, 3.948323823551762e-05, 1.288415878466963e-04, 1.679252500381825e-04, 9.377010970073718e-02, 5.333280720890180e-02, 2.589327989270727e-05, 2.125159351492768e-04, 2.589327989614564e-05, 2.125159351510236e-04, 1.528786784979659e+00, 1.446251865967449e+00, 5.865589951965899e-01, 6.600095759499404e-01, 1.221577526994964e+00, 1.288640295118088e+00, 1.661322408765323e+00, 1.707999347155950e+00, 1.471481757348113e+00, 1.519187019858099e+00, 1.471481757348113e+00, 1.543833807070414e+00, 1.784830424608715e+00, 1.749608854229410e+00, -1.732380029987512e-01, -1.480680737907168e-01, -1.625068532191179e-01, -1.328998478128143e-01, -1.595720912542085e-01, -1.675057753944874e-01, -5.869811063633448e-02, -5.596268018101744e-02, -5.869811063633451e-02, -4.582138646091467e-02, -4.263338275928373e-02, -3.434205106835977e-02, -9.877875768860751e-02, -1.005132419393581e-01, -7.259181038288172e-02, -1.445261812310990e-01, -1.300731295669394e-02, -4.020096891934567e-02, -1.100398122951423e-01, -1.085944884519155e-01, -1.100398122951424e-01, -6.043735046918482e-02, -6.662246588593464e-02, -8.441764622076482e-02, -4.768822532268266e-03, -4.705763888901275e-03, 4.873246926226159e-02, 5.450976639073144e-02, -7.222182717997634e-02, -1.786652604756548e-01, 1.525255436720279e-01, 1.769747375021108e-01, 1.525255436720313e-01, 1.769747375020728e-01, -5.273866969137604e-04, -5.747859867778262e-04, 9.598411690697094e-07, 9.621880176278108e-07, -2.848076400113289e-05, -3.624471675713116e-05, 1.105784992195366e-01, 1.242190652920582e-01, 5.677012399940257e-05, 1.697307791391134e-04, 5.677012400087093e-05, -2.108395275373873e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
