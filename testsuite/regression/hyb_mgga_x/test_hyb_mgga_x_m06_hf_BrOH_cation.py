
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_m06_hf_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06_hf", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([4.000075010375781e+00, 4.000131448269304e+00, 4.000397774237159e+00, 3.999562826463335e+00, 3.999997608282493e+00, 3.999997608282493e+00, -2.826342595139822e-01, -2.825208169110337e-01, -2.794196776566683e-01, -2.802847990660559e-01, -2.802987603450355e-01, -2.802987603450355e-01, -1.529678424647798e-01, -1.547401774350409e-01, -1.997958472453862e-01, -1.800492585621244e-01, -1.861738317275982e-01, -1.861738317275982e-01, -9.474805454197485e-02, -8.932178403137833e-02, -3.275465374400871e-01, -1.161198937726318e-01, -9.167658290390875e-02, -9.167658290390951e-02, 1.779843223114558e-02, 1.871133766083342e-02, 7.573880113255640e-02, 1.035736110951869e-02, 1.438329949358071e-02, 1.438329949358076e-02, 1.427250174682190e+00, 1.442489428134058e+00, 1.428144480625428e+00, 1.441587096239152e+00, 1.434853167034889e+00, 1.434853167034889e+00, -1.601679448048943e-01, -1.544062715586886e-01, -1.636900887534625e-01, -1.577942016202637e-01, -1.555890749930240e-01, -1.555890749930240e-01, 4.900472450692704e-02, 1.064182836611575e-01, -2.577355128934013e-02, 3.746588924227660e-02, 7.055337849670920e-02, 7.055337849670924e-02, -1.560196335446076e-02, -1.465668660360845e-01, 2.812222596012697e-03, 2.152153286470558e-01, -8.755281536866213e-02, -8.755281536866058e-02, 8.011468534635410e-03, 1.012937667820578e-02, 7.739853417595335e-03, 6.049076721427288e-02, 9.713083100625984e-03, 9.713083100625833e-03, 5.676579254189583e-04, 1.993702560748296e-01, 1.504235494769785e-01, 8.720567856894965e-02, 1.210152801671169e-01, 1.210152801671173e-01, 2.963283197983171e-02, 6.617846859686234e-03, 7.877660540731928e-02, 1.039051966656876e-01, 9.361969752269751e-02, 9.361969752269750e-02, 1.008661236342937e-01, -1.306788888944745e-01, -8.833824141578037e-02, -3.113611050770203e-02, -4.245868955719261e-02, -4.245868955719259e-02, -2.732776720494529e-02, 7.427202913780882e-02, 7.943376815021769e-02, -1.871360213612197e-02, 5.498933339692669e-03, 5.498933339694815e-03, 2.498651698911468e-02, 2.715340223407952e-03, 5.700538394423572e-03, 1.343091479259236e-02, 8.926274827299701e-03, 8.926274827299893e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_m06_hf_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06_hf", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([6.865558672575660e+00, 6.871554164432619e+00, 6.866476235291228e+00, 6.872220652341765e+00, 6.869067164384555e+00, 6.876036398071421e+00, 6.858778010673925e+00, 6.862882078937711e+00, 6.866146105607884e+00, 6.867875444456158e+00, 6.866146105607884e+00, 6.867875444456158e+00, 2.560428146037409e-01, 2.545629209328301e-01, 2.576583257535259e-01, 2.555970346604988e-01, 2.893651412084897e-01, 2.950945607016877e-01, 2.784959406432647e-01, 2.783812605251980e-01, 2.524280659702401e-01, 3.074697972462239e-01, 2.524280659702401e-01, 3.074697972462239e-01, 3.026830586143049e-01, 2.956476152407703e-01, 3.044365098488555e-01, 2.966385091321113e-01, 3.050757271313413e-01, 3.062627255000396e-01, 3.259587558679053e-01, 3.269253984021373e-01, 2.861487584834052e-01, 3.176801294977753e-01, 2.861487584834052e-01, 3.176801294977753e-01, 7.630263466218998e-02, 1.079253465496438e-01, 8.273320776796381e-02, 1.169477500596056e-01, -8.981764312263280e-02, 5.760485439276981e-02, -1.534302183853699e-01, -1.133721123217750e-01, 7.992736012989755e-02, -1.913268053876699e-01, 7.992736012991189e-02, -1.913268053875867e-01, 2.265064725129059e-02, 2.398562924341670e-02, 2.366311871270036e-02, 2.523327048170648e-02, 6.465779886247758e-02, 5.900841339444029e-02, 1.386464403380283e-02, 1.363619794489600e-02, 2.032686736587780e-02, 1.170545934133167e-02, 2.032686736587780e-02, 1.170545934132991e-02, 4.805939815553491e+00, 4.805018795982646e+00, 4.844653876753484e+00, 4.842455970803238e+00, 4.808716404864629e+00, 4.806748040660355e+00, 4.841916098530412e+00, 4.840737441438848e+00, 4.825719271063358e+00, 4.824083847483656e+00, 4.825719271063358e+00, 4.824083847483656e+00, -9.149062488222316e-03, -1.183727976873983e-02, -2.651133543428181e-02, -2.613680923926481e-02, 4.009470034328934e-02, 1.903827803494010e-02, -7.329348061049635e-04, -1.279284656499509e-02, -3.100151962204285e-02, -2.503031421397479e-02, -3.100151962204285e-02, -2.503031421397479e-02, 4.209763315336185e-01, 4.148876280480057e-01, 2.500390255117078e-01, 2.903750069977508e-01, 7.207583435034241e-02, 2.804330638238239e-01, 3.894819065195026e-01, 3.656094421691284e-01, 3.213785303802242e-01, 4.036177085298189e-01, 3.213785303802239e-01, 4.036177085298190e-01, -2.027078190991505e-01, -2.043140501002347e-01, -6.514273652343217e-03, -5.142310920715763e-03, -1.638896477626154e-01, -1.890309274518717e-01, 1.026851858518042e+00, 1.024364811986481e+00, -2.106252964876274e-01, -1.504700094598457e-01, -2.106252964876462e-01, -1.504700094598330e-01, 1.044650237551776e-02, 1.085474476464888e-02, 1.335302342558076e-02, 1.355864683219335e-02, 9.948093358080624e-03, 1.051608632905697e-02, -3.059207061146342e-02, -4.560217575103898e-02, 1.022548150454220e-02, 1.387208467970183e-02, 1.022548150454233e-02, 1.387208467970006e-02, -3.667375882984849e-01, -3.478213716777015e-01, -3.522230179506530e-02, -6.916728271135705e-02, -2.981475032046976e-01, -3.245821591378762e-01, -4.334764279290319e-01, -4.413408737817671e-01, -3.811930202950561e-01, -3.987546809855043e-01, -3.811930202950561e-01, -3.987546809855063e-01, -4.147113536325203e-01, -4.060824468043729e-01, 2.984050177180592e-01, 3.097087039151478e-01, 2.814554738910860e-01, 2.682735650404415e-01, 2.448950721210165e-01, 2.538545423029154e-01, 1.380927528720552e-01, 1.353232219438999e-01, 1.380927528720552e-01, 1.353232219438999e-01, 1.798986357686667e-01, 1.782539632299916e-01, 1.047280805691545e-01, 1.076008437329893e-01, 1.811930035356393e-01, 1.839717524583387e-01, -5.956116769659985e-03, -6.753435629770553e-03, 1.162315331999171e-01, 1.127964821173852e-01, 1.162315331999165e-01, 1.127964821173858e-01, 6.060105814285290e-02, 9.682999059944898e-02, 6.324127559775095e-02, 6.359934937825391e-02, 3.826006852845720e-02, 2.967780823107021e-02, 2.076293486659195e-02, 1.336813784704924e-01, -1.337767294157231e-01, -1.640070082944525e-01, -1.337767294156797e-01, -1.640070082944539e-01, 3.210771781701058e-02, 3.319976490283133e-02, 3.615470805562888e-03, 3.623934314712667e-03, 7.331966022724259e-03, 7.793281561024206e-03, -1.279997599162859e-01, -1.440543764652852e-01, 9.665690906793929e-03, 1.274511146537153e-02, 9.665690906794909e-03, 1.274511146536962e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m06_hf_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06_hf", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([1.134500384281586e-08, 0.000000000000000e+00, 1.134584981612895e-08, 1.134502290925413e-08, 0.000000000000000e+00, 1.134586353155545e-08, 1.134494409038487e-08, 0.000000000000000e+00, 1.134578996870887e-08, 1.134474021203096e-08, 0.000000000000000e+00, 1.134552590919276e-08, 1.134502524619631e-08, 0.000000000000000e+00, 1.134552771682783e-08, 1.134502524619631e-08, 0.000000000000000e+00, 1.134552771682783e-08, 5.795312410756678e-06, 0.000000000000000e+00, 5.794707343104559e-06, 5.798186677760431e-06, 0.000000000000000e+00, 5.796741934060568e-06, 5.856117278121185e-06, 0.000000000000000e+00, 5.866711412671803e-06, 5.826209584865296e-06, 0.000000000000000e+00, 5.827443753472035e-06, 5.792469412946346e-06, 0.000000000000000e+00, 5.879349271389724e-06, 5.792469412946346e-06, 0.000000000000000e+00, 5.879349271389724e-06, -2.312351258163330e-03, 0.000000000000000e+00, -1.954535542056130e-03, -2.420010885305230e-03, 0.000000000000000e+00, -2.007932386244359e-03, -4.050257455597886e-03, 0.000000000000000e+00, -4.374386032063160e-03, -3.360288957084917e-03, 0.000000000000000e+00, -3.089222357049191e-03, -1.708667651446235e-03, 0.000000000000000e+00, -5.413890454875394e-03, -1.708667651446235e-03, 0.000000000000000e+00, -5.413890454875394e-03, -1.197461746467560e+00, 0.000000000000000e+00, -8.547816840480278e-01, -1.115835623207900e+00, 0.000000000000000e+00, -7.394168509188798e-01, -6.084789513252151e-03, 0.000000000000000e+00, -4.234438329912701e-03, -3.763743898674571e+00, 0.000000000000000e+00, -3.458663012901644e+00, -1.012196327833457e+00, 0.000000000000000e+00, -7.219353722417284e+00, -1.012196327833461e+00, 0.000000000000000e+00, -7.219353722417311e+00, -2.359316972431332e+01, 0.000000000000000e+00, -2.333515753872596e+01, -2.486489242163411e+01, 0.000000000000000e+00, -2.470879908736341e+01, -1.285463095570243e+01, 0.000000000000000e+00, -1.280966734178084e+01, -2.179608216986178e+01, 0.000000000000000e+00, -2.118909444571445e+01, -2.361173414697408e+01, 0.000000000000000e+00, -6.035359213990577e+01, -2.361173414697414e+01, 0.000000000000000e+00, -6.035359213990507e+01, 3.905404611762641e-06, 0.000000000000000e+00, 3.909128264629026e-06, 3.922133286996224e-06, 0.000000000000000e+00, 3.925311758484330e-06, 3.906535801967215e-06, 0.000000000000000e+00, 3.909830951801976e-06, 3.920879625962555e-06, 0.000000000000000e+00, 3.924522538116253e-06, 3.913802268921772e-06, 0.000000000000000e+00, 3.917215503715307e-06, 3.913802268921772e-06, 0.000000000000000e+00, 3.917215503715307e-06, 3.019464850209228e-05, 0.000000000000000e+00, 3.048850538184409e-05, 3.242650445505019e-05, 0.000000000000000e+00, 3.264273234258775e-05, 2.727287365067276e-05, 0.000000000000000e+00, 2.843183171997534e-05, 2.944936757667160e-05, 0.000000000000000e+00, 3.054586007283209e-05, 3.346881596172053e-05, 0.000000000000000e+00, 3.195875327059572e-05, 3.346881596172053e-05, 0.000000000000000e+00, 3.195875327059572e-05, 1.427796909939300e-02, 0.000000000000000e+00, 1.473821249569644e-02, 1.583589204850010e-02, 0.000000000000000e+00, 1.604101703607325e-02, 1.106744222130619e-02, 0.000000000000000e+00, 1.300852167680249e-02, 1.870638276309311e-02, 0.000000000000000e+00, 1.897623371596645e-02, 1.456351157068805e-02, 0.000000000000000e+00, 1.577532618272228e-02, 1.456351157068805e-02, 0.000000000000000e+00, 1.577532618272228e-02, -6.322901393963979e+00, 0.000000000000000e+00, -6.356273770581547e+00, -1.221109129972558e+00, 0.000000000000000e+00, -1.201427084956892e+00, -7.489438785073601e+00, 0.000000000000000e+00, -7.053610644455182e+00, 1.638166067624304e-04, 0.000000000000000e+00, 1.642052617753363e-04, -5.918741780855823e+00, 0.000000000000000e+00, -6.039980418811761e+00, -5.918741780855814e+00, 0.000000000000000e+00, -6.039980418811727e+00, -3.021370303306642e+01, 0.000000000000000e+00, -2.624491827831431e+01, -2.638171469780564e+01, 0.000000000000000e+00, -2.434556089213387e+01, -1.500381834351778e+02, 0.000000000000000e+00, -1.668998097921991e+02, -1.277657261772573e+01, 0.000000000000000e+00, -1.237636017921734e+01, -7.162686132880739e+01, 0.000000000000000e+00, -7.283792978698568e+01, -7.162686132880719e+01, 0.000000000000000e+00, -7.283792978698615e+01, 2.066535969463340e-02, 0.000000000000000e+00, 2.007161696661441e-02, 2.962931602943912e-02, 0.000000000000000e+00, 2.903774523908430e-02, 2.762127784102415e-02, 0.000000000000000e+00, 2.688192362524911e-02, 2.473919043058178e-02, 0.000000000000000e+00, 2.401907940487768e-02, 2.630073974081642e-02, 0.000000000000000e+00, 2.555509015074085e-02, 2.630073974081642e-02, 0.000000000000000e+00, 2.555509015074089e-02, 2.496151027354477e-02, 0.000000000000000e+00, 2.420025469759063e-02, 1.942747546179338e-02, 0.000000000000000e+00, 1.954767113483437e-02, 2.713264116568037e-02, 0.000000000000000e+00, 2.706888666989255e-02, 2.976399238648042e-02, 0.000000000000000e+00, 2.946723660103348e-02, 2.884447921399845e-02, 0.000000000000000e+00, 2.855175554513638e-02, 2.884447921399844e-02, 0.000000000000000e+00, 2.855175554513638e-02, 1.236180317672470e-02, 0.000000000000000e+00, 1.251782348023819e-02, -4.205776107278238e-01, 0.000000000000000e+00, -4.078421137201214e-01, -1.272439537332045e-01, 0.000000000000000e+00, -1.122283203741313e-01, 3.276640438130145e-02, 0.000000000000000e+00, 3.241384504381799e-02, 2.348196246128626e-03, 0.000000000000000e+00, 3.730376916959340e-03, 2.348196246128643e-03, 0.000000000000000e+00, 3.730376916959462e-03, 1.856247494959636e-02, 0.000000000000000e+00, 1.948951787666614e-02, -1.181713854174845e+01, 0.000000000000000e+00, -1.182235634043150e+01, -1.102181423073559e+01, 0.000000000000000e+00, -1.115241059438686e+01, 6.291525194613411e-02, 0.000000000000000e+00, 7.889482062952038e-02, -1.146499865481589e+01, 0.000000000000000e+00, -1.260262147902346e+01, -1.146499865481580e+01, 0.000000000000000e+00, -1.260262147902343e+01, -1.878505743980286e+01, 0.000000000000000e+00, -1.915727057834352e+01, -8.524071431973044e+01, 0.000000000000000e+00, -1.307892000746384e+02, -5.795589418039285e+01, 0.000000000000000e+00, -6.170223397371814e+01, -1.292460992947671e+01, 0.000000000000000e+00, -1.260236985672101e+01, -1.508050395763204e+02, 0.000000000000000e+00, -7.564005044295192e+01, -1.508050395763208e+02, 0.000000000000000e+00, -7.564005044295129e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m06_hf_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06_hf", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-2.211935132605342e-03, -2.215656310935879e-03, -2.212465409920115e-03, -2.216041557902792e-03, -2.213967393415105e-03, -2.218252762871195e-03, -2.208023890714285e-03, -2.210651473741644e-03, -2.212275334680521e-03, -2.213539563372464e-03, -2.212275334680521e-03, -2.213539563372464e-03, -6.120020204369771e-03, -6.107586005590823e-03, -6.133114740089364e-03, -6.115920405174834e-03, -6.390238624649223e-03, -6.436597324320479e-03, -6.303705163566568e-03, -6.302117010147325e-03, -6.092092837056883e-03, -6.538613160607487e-03, -6.092092837056883e-03, -6.538613160607487e-03, -4.525553410056332e-02, -4.506423089056615e-02, -4.530525112372419e-02, -4.509701759907201e-02, -4.343651098847216e-02, -4.328002432976511e-02, -4.626421146691914e-02, -4.683189632243139e-02, -4.410391520516866e-02, -4.286998981273549e-02, -4.410391520516866e-02, -4.286998981273549e-02, -1.180175147353179e-01, -1.578815112274953e-01, -1.258333339408917e-01, -1.700428603255257e-01, -7.673314345304154e-03, -1.565667843795435e-02, 8.285019591960661e-02, 5.443392316045814e-02, -1.140221011227110e-01, 1.428216594575107e-01, -1.140221011227130e-01, 1.428216594574888e-01, 3.174464455676002e-04, 3.820867050417986e-04, 3.785119158036647e-04, 4.707838067701825e-04, 2.636880778607776e-02, 3.180876491768480e-02, 5.071364181514923e-05, 4.871188344175511e-05, 2.144037195382476e-04, 6.785385341357310e-05, 2.144037195382476e-04, 6.785385341088066e-05, -4.875982992092238e-02, -4.877644330333954e-02, -4.938438117376655e-02, -4.938060519610772e-02, -4.880493504650912e-02, -4.880460996910801e-02, -4.934049227740263e-02, -4.935309849849522e-02, -4.907715459632558e-02, -4.908284029137916e-02, -4.907715459632558e-02, -4.908284029137916e-02, -6.447076506699026e-03, -6.425087677228474e-03, -6.355424704302095e-03, -6.384644645300312e-03, -7.144414978068623e-03, -6.847338382635512e-03, -6.597329416683105e-03, -6.463458320578546e-03, -6.326122785789860e-03, -6.320407246364072e-03, -6.326122785789860e-03, -6.320407246364072e-03, -1.759896683951532e-01, -1.754521162079450e-01, -9.243669303975308e-02, -1.214591745926136e-01, -5.162524485516753e-02, -1.266099055802675e-01, -1.738115918159385e-01, -1.571306392943048e-01, -1.260947829363250e-01, -1.740451153578434e-01, -1.260947829363249e-01, -1.740451153578434e-01, 1.509869485194323e-01, 1.512653889501338e-01, -3.096457505883870e-02, -3.170347850402534e-02, 1.417631291988359e-01, 1.513445242838641e-01, -3.822601786969598e-02, -3.815133997232912e-02, 1.470609384584441e-01, 1.055450864957157e-01, 1.470609384584403e-01, 1.055450864956824e-01, 1.554923190808604e-05, 1.607210656985026e-05, 4.286439040681391e-05, 3.952373523209870e-05, 1.289626319192984e-04, 1.680876587322578e-04, 9.365829627571767e-02, 1.036226916770572e-01, 2.571979767939511e-05, 2.125676097296964e-04, 2.571979768283316e-05, 2.125676097314432e-04, 1.521441780089954e+00, 1.439510150134829e+00, 5.841711814313573e-01, 6.573361058867950e-01, 1.237777629257419e+00, 1.305416260926755e+00, 1.678434452268454e+00, 1.700118387700174e+00, 1.488892922367357e+00, 1.536811415475065e+00, 1.488892922367357e+00, 1.536811415475065e+00, 1.767585477430123e+00, 1.733300485528659e+00, -1.719119730199388e-01, -1.770592998486233e-01, -1.608002559859654e-01, -1.513598984771163e-01, -1.574919607055980e-01, -1.653769738942414e-01, -5.746914567836901e-02, -5.480050133749589e-02, -5.746914567836903e-02, -5.480050133749586e-02, -3.716649842577440e-02, -3.660610675495676e-02, -9.663321474219040e-02, -9.828374291711080e-02, -1.365314543188801e-01, -1.391357219919982e-01, -3.292484424153905e-02, -3.237228138129555e-02, -1.031747318647549e-01, -1.017305713683594e-01, -1.031747318647551e-01, -1.017305713683594e-01, -6.196775235431860e-02, -7.976537815114437e-02, 2.627880349300345e-02, 2.627102046686725e-02, 4.872903571371289e-02, 5.450247644030511e-02, -6.181555002962306e-02, -1.681639498813691e-01, 1.523787039047999e-01, 1.768714824544540e-01, 1.523787039048032e-01, 1.768714824544163e-01, 4.476025259200694e-04, 4.905226021302740e-04, 9.408475639607764e-07, 9.078032906707614e-07, 2.241386292589707e-05, 2.856540952754230e-05, 1.570105574583969e-01, 1.690306280074808e-01, 5.662658658680497e-05, 1.697731405947293e-04, 5.662658658827319e-05, 1.697731405980751e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
