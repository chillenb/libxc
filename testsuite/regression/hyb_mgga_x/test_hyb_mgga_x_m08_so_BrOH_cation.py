
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_m08_so_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m08_so", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-4.876946872344748e+00, -4.876717261988203e+00, -4.875798393759924e+00, -5.784908312923268e+00, -5.783523526664527e+00, -6.689532210669678e+00, -1.751789163596760e+00, -1.971023226900624e+00, -1.961114844171599e+00, -1.965306879610071e+00, -1.964617472647809e+00, -1.744841816774320e+00, -2.506446916049675e-01, -3.712614822136613e-01, -4.882464605173369e-01, -3.661428614029429e-01, -2.463229281716704e-01, -4.879626328177852e-01, -1.016039899684188e-01, -1.030893743018030e-01, -4.421374275986334e-01, -1.042078639051611e-01, -1.324806508052301e-01, -1.261941989155247e-01, -6.669976902401264e-03, -6.816939555940220e-03, -3.714427743709015e-02, -3.836204700720559e-03, -5.362136535055627e-03, -5.362136535055614e-03, -1.268648214250545e+00, -1.264124533998680e+00, -1.268380007712432e+00, -1.264389136514322e+00, -9.207454514396753e-01, -9.210936478919365e-01, -1.257114292166846e+00, -1.240896595106570e+00, -1.268532690608334e+00, -1.255687303224735e+00, -1.044706381746153e+00, -1.241450988827414e+00, -2.241561670028331e-01, -1.921573707935085e-01, -2.747034904838884e-01, -2.156770109850616e-01, -2.181516256844570e-01, -2.188561571738240e-01, -9.345132674643722e-02, -9.892641740362176e-02, -9.000934468571196e-02, -6.872575550234430e-01, -9.021346373411437e-02, -9.021346373411296e-02, -2.875173182633931e-03, -3.749750622862512e-03, -2.873319203136855e-03, -5.434655816050024e-02, -3.610290679869226e-03, -3.610290679869278e-03, -1.693500737625976e-01, -1.804331144744005e-01, -1.546657054385863e-01, -1.829364622075605e-01, -1.636022566800134e-01, -1.811906758086630e-01, -1.801063996501730e-01, -2.131439631769609e-01, -1.815225470863336e-01, -1.589614274706980e-01, -1.784268405964261e-01, -1.654948150802899e-01, -2.009130025557921e-01, -1.701772385201562e-01, -1.480594659356450e-01, -1.872676334006705e-01, -2.133176306278239e-01, -1.658145426848658e-01, -2.480396588625703e-01, -3.102084068218609e-02, -5.402647458308880e-02, -1.786591896354947e-01, -7.774240734439371e-02, -7.774240734439225e-02, -8.736780865366318e-03, -1.001404895339271e-03, -1.975601074901144e-03, -4.109911534801992e-02, -3.314796255863414e-03, -3.151236254927094e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_m08_so_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m08_so", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([6.572340411265793e+00, 6.576342366026643e+00, 6.572950642810940e+00, 6.576784273386146e+00, 6.574685525560714e+00, 6.579326731807604e+00, 6.567835431420599e+00, -1.063221606898100e+00, 6.572730538830151e+00, -1.058903027446793e+00, -1.060647675728924e+00, -1.058903027446792e+00, 1.093961250716345e-01, -1.995398853223093e+00, 1.104346280092971e-01, 1.092238691794967e-01, 1.303245282984520e-01, 1.338252973257305e-01, 1.231688798496891e-01, 1.231973100529333e-01, 1.070594130425327e-01, 1.408263545733889e-01, -1.996765527218056e+00, 1.408263545733885e-01, -3.596404629868104e-01, -3.725888203287326e-01, -3.559649563432348e-01, -4.325968569308544e-01, -4.510658468499631e-01, -4.528611090476178e-01, -4.433399015555110e-01, -3.335171273189698e-01, -3.834327940378681e-01, -2.984606748735107e-01, -4.315678954326284e-01, -4.623788385979933e-01, -9.012013463740574e-02, -1.377622952190515e-01, -8.903474271571786e-02, -1.347826072445405e-01, -7.159034470522880e-01, -4.018427416129609e-01, -9.844271839398577e-02, -1.135724826189458e-01, -1.537047525835101e-01, -6.691029538736079e-02, -1.537047525835141e-01, -2.348199186118598e-02, -8.643268862230380e-03, -9.194484238967938e-03, -8.332710495467036e-03, -9.725778100438964e-03, -3.621474715421463e-02, -5.935833981254360e-02, -5.165516822602069e-03, -5.079065587963378e-03, -7.696201701648179e-03, -4.363058610541465e-03, -7.696201701648179e-03, -4.363058610545405e-03, -5.736672544603674e-02, -5.762111917151681e-02, -1.012378718889702e-01, -9.999352715258425e-02, -6.036239919941831e-02, -5.948684894427870e-02, -9.797597201251219e-02, -9.795057378630410e-02, 6.032524820138369e-01, -7.859732929223077e-02, -7.912601298763393e-02, 6.039764616759995e-01, -4.474150888132125e-01, -4.361498704083017e-01, -3.385836297239679e-01, -3.306001396231077e-01, -5.429844193922403e-01, -5.053519185549398e-01, -4.495712495551780e-01, -4.097492175257196e-01, -3.119984703049781e-01, -1.443993048333759e+00, -3.119984703049781e-01, -3.694266880915457e-01, -8.284343833581874e-02, -1.191254452064986e-01, -5.447191651138178e-03, 1.643274470407641e-02, 3.399466017481019e-02, 5.425083167655218e-02, -4.578467657150653e-02, -1.386303278171373e-01, -1.852396990228894e-01, -1.138164254691243e-01, -1.852396990228868e-01, -1.069688189690352e-01, -6.296193156860087e-02, -6.212278032197167e-02, -9.642089866748196e-02, -1.753084459495176e-01, -7.438145004155314e-02, -6.537070030562031e-02, -5.772904281086514e-01, -5.777216625426776e-01, -5.554628967145275e-02, -7.829160862576663e-02, -5.554628967146316e-02, -7.829160862574487e-02, -3.622904952145221e-03, -4.021802135631281e-03, -4.968840711829924e-03, -5.043651790178068e-03, -3.720006135909616e-03, -3.942075882790519e-03, -8.448785804500175e-02, -3.407684305267013e-02, -3.791968781649924e-03, -5.227499346534882e-03, -3.791968781648956e-03, -5.227499346533125e-03, 1.037858365495695e-02, 2.352432886227309e-02, -3.706536919423066e-01, -3.695257401599877e-01, -4.072401786826398e-01, -3.944231595790038e-01, -2.707042978156285e-01, -1.622428166126057e-01, -3.478005347877718e-01, -3.317654280004484e-01, -3.478005347877718e-01, -2.339762046335020e-01, -5.897445971535638e-02, -4.151793297589398e-02, 3.760588707835883e-02, -1.496760569846969e-01, -1.529475922226804e-01, -5.780165742694001e-02, 1.668050267282784e-02, 1.998760809320690e-02, -1.314724684865907e-01, -1.265103788539766e-01, -1.314724684865867e-01, 6.164870346603729e-02, -1.526976238235859e-01, 1.388490494997857e-01, -1.885640478709674e-01, -1.881863616696858e-01, -1.259452734714516e-01, -1.803147979441060e-01, -2.634991058078524e-01, -8.761922003502497e-02, -1.664279684130006e-01, -1.649986330787660e-01, -1.664279684129996e-01, -2.144657645971735e-01, 2.356416576250004e-02, 3.840832652182938e-02, -3.565089460463575e-02, -3.586148264313306e-02, -7.401105022848477e-02, -7.607278340494070e-02, 4.977656518126301e-03, 3.823232956379254e-02, -7.049730763598885e-02, -5.587384516434628e-02, -7.049730763597778e-02, -5.587384516439505e-02, -1.133841785900140e-02, -1.173782803087162e-02, -1.333834389329263e-03, -1.336883553611702e-03, -2.543686109195510e-03, -2.704717179460964e-03, -2.431116065298136e-02, -2.195749896108833e-02, -3.594384835220126e-03, -4.787656843103491e-03, -3.594384835219220e-03, -4.448456982145317e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m08_so_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m08_so", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.605003057272084e-08, 0.000000000000000e+00, -2.607040450709089e-08, -2.605266419881878e-08, 0.000000000000000e+00, -2.607231414021906e-08, -2.605990948780231e-08, 0.000000000000000e+00, -2.608302685811186e-08, -2.603039580355996e-08, 0.000000000000000e+00, -2.001775824285644e-08, -2.605173765526025e-08, 0.000000000000000e+00, -2.002929114860793e-08, -2.002305882900630e-08, 0.000000000000000e+00, -2.002929114860793e-08, -1.202761843276662e-05, 0.000000000000000e+00, -2.222070892325803e-05, -1.202126070330582e-05, 0.000000000000000e+00, -1.202923797248698e-05, -1.189655099846382e-05, 0.000000000000000e+00, -1.187346495670785e-05, -1.193816243862666e-05, 0.000000000000000e+00, -1.193732738798017e-05, -1.204948387207095e-05, 0.000000000000000e+00, -1.182272541283170e-05, -2.226169864226911e-05, 0.000000000000000e+00, -1.182272541283170e-05, -3.167878598968642e-02, 0.000000000000000e+00, -3.123515036136090e-02, -3.185632433093042e-02, 0.000000000000000e+00, -6.985203594322483e-03, -6.028292149946922e-03, 0.000000000000000e+00, -5.952045468900292e-03, -6.432921383356442e-03, 0.000000000000000e+00, -3.366420149969582e-02, -3.031510873404943e-02, 0.000000000000000e+00, -3.801850617938372e-02, -6.988924269914659e-03, 0.000000000000000e+00, -5.602113877259939e-03, -7.111617318636958e+00, 0.000000000000000e+00, -7.505931684647161e-01, -6.802658861316214e+00, 0.000000000000000e+00, -7.926894407102499e-01, -1.116288938607762e-03, 0.000000000000000e+00, -1.496518833363073e-02, -5.971326988489403e-01, 0.000000000000000e+00, -5.087570131022910e-01, -5.237021134898984e-01, 0.000000000000000e+00, -1.605273902458241e+00, -5.237021134898994e-01, 0.000000000000000e+00, -4.529941144217540e+01, 1.010633666556368e+01, 0.000000000000000e+00, 1.012111979727403e+01, 7.254062437390822e+05, 0.000000000000000e+00, 1.055518987081679e+01, 9.244960646528964e+00, 0.000000000000000e+00, 2.765196478647254e+00, 7.494199636027427e+00, 0.000000000000000e+00, 7.572172830001611e+00, 9.640691608341506e+00, 0.000000000000000e+00, 1.664042560693615e+01, 9.640691608341506e+00, 0.000000000000000e+00, 1.664042560693638e+01, -1.340980168704520e-05, 0.000000000000000e+00, -1.342365085787800e-05, -1.355805048676507e-05, 0.000000000000000e+00, -1.356708532693101e-05, -1.342025047453822e-05, 0.000000000000000e+00, -1.343017785387228e-05, -1.354735835977075e-05, 0.000000000000000e+00, -1.356038274849695e-05, -1.632049891386012e-05, 0.000000000000000e+00, -1.349550003260150e-05, -1.348417676422266e-05, 0.000000000000000e+00, -1.633448767557065e-05, -1.449242771382404e-04, 0.000000000000000e+00, -1.447806248006501e-04, -1.384918727641150e-04, 0.000000000000000e+00, -1.384351802631012e-04, -1.495369585258552e-04, 0.000000000000000e+00, -1.482528712911216e-04, -1.448459742927143e-04, 0.000000000000000e+00, -1.431345549689687e-04, -1.370001524975539e-04, 0.000000000000000e+00, -3.161998080142887e-04, -1.370001524975539e-04, 0.000000000000000e+00, -1.409538994294953e-04, -1.793973624246521e-03, 0.000000000000000e+00, 3.465242851680508e-04, -2.888212667202406e-02, 0.000000000000000e+00, -3.249893275982686e-02, -2.038196862413455e-02, 0.000000000000000e+00, -9.890675572577242e-03, -3.035946398243638e-03, 0.000000000000000e+00, -1.987328854012214e-03, -3.047478899636486e-03, 0.000000000000000e+00, 3.984053937894031e-04, -3.047478899636492e-03, 0.000000000000000e+00, -1.669391462952302e-03, -1.970999256675764e+00, 0.000000000000000e+00, -1.959124910092640e+00, -6.467694317092217e+00, 0.000000000000000e+00, -2.194146419957397e-01, -1.850090030313834e+00, 0.000000000000000e+00, -2.101287629242911e+00, -2.981243342503123e-05, 0.000000000000000e+00, -3.006329977346067e-05, -1.758881854576786e+00, 0.000000000000000e+00, -1.234753352586797e+00, -1.758881854576788e+00, 0.000000000000000e+00, -1.234753352586755e+00, 2.210036396280983e+07, 0.000000000000000e+00, 5.030064028784228e+00, 7.112597589978521e+00, 0.000000000000000e+00, 6.270496714225933e+00, 5.109359211466852e+01, 0.000000000000000e+00, 5.601185163342679e+01, -9.465349241196053e-02, 0.000000000000000e+00, -1.681872657300257e+02, 9.666520221047207e+00, 0.000000000000000e+00, 3.045271786402363e+01, 9.666520221047223e+00, 0.000000000000000e+00, 3.045271786402302e+01, -5.915302478974540e-02, 0.000000000000000e+00, -5.488745174921276e-02, -1.192313836108834e-01, 0.000000000000000e+00, -1.168606082742504e-01, -1.191902431607701e-01, 0.000000000000000e+00, -1.153127645420645e-01, -9.936922393499523e-02, 0.000000000000000e+00, -8.913252382050925e-02, -1.104306982324712e-01, 0.000000000000000e+00, -1.063914105665782e-01, -1.104306982324712e-01, 0.000000000000000e+00, -9.878010488539588e-02, -8.245763681122842e-02, 0.000000000000000e+00, -7.769522922145006e-02, -1.323712083947521e-02, 0.000000000000000e+00, -1.386902134036441e-02, -5.454591244858714e-03, 0.000000000000000e+00, -5.733802135242609e-03, -6.552203199300226e-02, 0.000000000000000e+00, -6.615775881023411e-02, -2.447750746274603e-02, 0.000000000000000e+00, -2.563068671287495e-02, -2.447750746274603e-02, 0.000000000000000e+00, -3.372328150068500e-02, -1.062843330893333e-02, 0.000000000000000e+00, -1.867615229928344e-02, -2.306894406979196e-01, 0.000000000000000e+00, -2.315545266195077e-01, -1.330221404489055e+00, 0.000000000000000e+00, -2.354993898783199e-01, -3.500536343371213e-01, 0.000000000000000e+00, -1.445354996250746e-01, -2.241952245697329e-01, 0.000000000000000e+00, -2.260324634043238e-01, -2.241952245697332e-01, 0.000000000000000e+00, -7.445822632397596e-01, -4.057351486365052e-02, 0.000000000000000e+00, -3.604098153476237e-02, 1.954776704310429e+01, 0.000000000000000e+00, 1.630460871878003e+01, 1.547266493921035e+00, 0.000000000000000e+00, 1.379245036207959e+00, -1.475672566403522e-01, 0.000000000000000e+00, -9.083636416946460e-02, -2.682265000323811e+00, 0.000000000000000e+00, -3.909486356915361e+00, -2.682265000323773e+00, 0.000000000000000e+00, -3.909486356915293e+00, 2.059722389235932e+05, 0.000000000000000e+00, 1.778395062934208e+05, 8.215307527553366e+00, 0.000000000000000e+00, 8.179178331650753e+00, 9.093782777484544e+07, 0.000000000000000e+00, 7.098862956230928e+07, -1.421535585365781e+02, 0.000000000000000e+00, -1.442265219085700e+02, 2.491087089484255e+01, 0.000000000000000e+00, 3.162395027931040e+01, 2.491087089484281e+01, 0.000000000000000e+00, 9.393183587098125e+06])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m08_so_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m08_so", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-7.666052955489034e-03, -7.668789732541527e-03, -7.666428596008354e-03, -7.669061791405636e-03, -7.667474957077900e-03, -7.670602477761316e-03, -7.663261704251445e-03, -2.129279031626287e-03, -7.666295175956738e-03, -2.130491955805839e-03, -2.129964700556252e-03, -2.130491955805839e-03, -1.416251918395436e-02, -3.587837872439089e-04, -1.417551450179153e-02, -1.416055037304896e-02, -1.442723569406996e-02, -1.447193419008965e-02, -1.433471853122963e-02, -1.433485740741231e-02, -1.413580850510534e-02, -1.456044860700574e-02, -3.462288217994824e-04, -1.456044860700574e-02, 2.501201014025460e-03, 3.604588934021593e-03, 2.207190055016912e-03, 5.462996250746732e-03, 3.993822357615424e-03, 3.818279724687184e-03, 4.446345340557030e-03, 6.115688451078881e-04, 4.357637985034350e-03, -1.477242613180997e-03, 5.604081819574993e-03, 3.356977654865297e-03, 4.519029787319284e-03, 1.144567485129074e-02, 2.586223576284490e-03, 1.133521433676441e-02, 3.237552290111999e-03, 1.471161673403520e-04, -7.187151294901001e-03, -1.488723263162428e-03, 1.286404113835231e-02, -1.386132361729908e-02, 1.286404113835685e-02, -2.193297070048341e-02, 1.163394163681422e-05, 1.395701522428960e-05, -4.550594482424939e-05, 1.712579464423249e-05, -3.307111757602002e-03, 3.818126011263700e-04, 1.889681799184893e-06, 1.815667152119655e-06, 7.900679744914509e-06, 2.526628612122314e-06, 7.900679744914509e-06, 2.526628615432571e-06, 5.030747379968622e-04, 5.082271897930817e-04, 1.323190351336870e-03, 1.300754739832119e-03, 5.592362473444679e-04, 5.432236728196023e-04, 1.262377629520557e-03, 1.262646505507375e-03, -1.981623200847799e-02, 9.011248599899612e-04, 9.104347298133974e-04, -1.983328918948907e-02, -9.864793487174820e-03, -1.013634605500238e-02, -1.256061052630775e-02, -1.276796525774988e-02, -7.625162446475580e-03, -8.490460774642493e-03, -9.813259629524548e-03, -1.078067070780291e-02, -1.324529913956271e-02, 6.110941109180155e-03, -1.324529913956271e-02, -1.178307667457680e-02, -8.909268755218432e-02, -7.741766238606537e-02, -7.964660584719534e-02, -8.561046805154725e-02, -1.022820126449513e-01, -1.284900707755550e-01, -1.066529682351255e-01, -6.581147976933532e-02, -4.162875218798887e-02, -8.032333461544899e-02, -4.162875218798813e-02, -8.021514564332950e-02, -1.477001878033419e-02, -1.502451131824780e-02, 7.837365556355287e-03, 1.166589101191193e-02, -1.127014088799096e-02, -1.395255092504976e-02, -1.358504626483358e-02, -1.354349775271792e-02, -1.801734907053656e-02, -1.075223544955213e-02, -1.801734907055564e-02, -1.075223544954696e-02, -1.868679354749028e-06, 6.021495574488862e-07, 1.598133655193634e-06, 1.474026205618278e-06, 4.792211513174932e-06, 6.234459185604100e-06, -2.546937185777105e-03, -1.417353256103591e-02, 9.686080838542744e-07, 7.861229692770376e-06, 9.686080843324704e-07, 7.861229690622812e-06, -8.422841241150500e-01, -9.101175115530644e-01, 5.834815888896637e-01, 5.736216784470470e-01, 5.211126495609980e-01, 4.844519206019821e-01, 1.449414068671352e-01, -8.764727563751606e-02, 3.684482001475344e-01, 3.196485509763778e-01, 3.684482001475344e-01, 1.639694474298956e-01, -5.121331933503737e-01, -5.944036040773899e-01, -1.447932331702557e-01, -6.142603545838354e-02, -5.231764831244235e-02, -1.206332568105180e-01, -1.024122610698695e-01, -1.029899532710511e-01, -3.975037466803198e-02, -4.149543590528101e-02, -3.975037466803111e-02, -2.127612732485995e-01, -3.448730775731981e-02, -2.023158236095335e-01, 1.037156215109405e-02, 1.019455473627305e-02, -2.220091777550272e-03, 1.045617758634843e-02, 3.971383805198357e-02, -4.948724304606157e-02, 8.777760620011173e-03, 8.234686799071189e-03, 8.777760620009983e-03, 3.398500953984760e-02, -1.162720130988972e-01, -1.284507249097123e-01, -3.294517902757239e-03, -3.293942056824541e-03, 2.270835632485891e-05, -1.568120304632298e-04, -1.407568070054806e-01, -2.015033504573690e-01, -1.089635151982194e-02, -1.633765636428595e-02, -1.089635151983265e-02, -1.633765636427539e-02, -5.379964131613690e-05, -5.897382194823531e-05, 3.605529540577533e-08, 3.614340614792630e-08, -2.688758472368630e-06, -3.426794014222949e-06, -2.291823445344563e-02, -2.502610546801096e-02, 2.119222144802229e-06, 6.293110399967662e-06, 2.119222143299496e-06, -2.038704533206734e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
