
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_m08_so_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m08_so", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-6.586746511579096e+00, -6.586642742256316e+00, -6.586289923441047e+00, -6.587825991535829e+00, -6.587006074468714e+00, -6.587006074468714e+00, -1.758924223725605e+00, -1.758723666583018e+00, -1.753548918268568e+00, -1.757035736848349e+00, -1.755925587056908e+00, -1.755925587056908e+00, -3.776942986705768e-01, -3.782936046786638e-01, -3.949653516382167e-01, -3.980867986317616e-01, -3.950458582166569e-01, -3.950458582166569e-01, -1.325923906247444e-01, -1.335934299997225e-01, -4.189955074447966e-01, -1.022991670222308e-01, -1.298323124255758e-01, -1.298323124255760e-01, -6.670082483336193e-03, -7.027451223230993e-03, -4.097634833641040e-02, -3.836469447049812e-03, -5.362478194077018e-03, -5.362478194077005e-03, -1.264613430365411e+00, -1.260093541974704e+00, -1.264426727205407e+00, -1.260436379784576e+00, -1.262279904605991e+00, -1.262279904605991e+00, -1.221472058840560e+00, -1.211571153041887e+00, -1.236989581927717e+00, -1.229829764335784e+00, -1.207661300752420e+00, -1.207661300752420e+00, -2.237786308387046e-01, -1.521435549121629e-01, -2.562206233953774e-01, -2.131139445701863e-01, -2.170235248583145e-01, -2.170235248583145e-01, -9.119971023350765e-02, -1.343884498491883e-01, -8.810646993020740e-02, -6.710203921212633e-01, -8.885117421055455e-02, -8.885117421055312e-02, -2.960646294666532e-03, -3.750309915306118e-03, -2.873663286182759e-03, -6.682819450506272e-02, -3.610615406941920e-03, -3.610615406941973e-03, -1.635046455454333e-01, -1.688919753650524e-01, -1.859455197715781e-01, -1.885942605574931e-01, -1.892242315070780e-01, -1.892242315070780e-01, -1.657358938953854e-01, -2.199260743351285e-01, -1.839976613225633e-01, -1.508621566334851e-01, -1.756540561893942e-01, -1.756540561893940e-01, -1.961373632939543e-01, -1.690094778367977e-01, -1.918491788618708e-01, -2.067082756559719e-01, -2.031214967224337e-01, -2.031214967224336e-01, -2.391399133789751e-01, -3.898932736839615e-02, -5.420239045754861e-02, -1.686689598957972e-01, -7.654404323195180e-02, -7.654404323195035e-02, -9.421590848873373e-03, -1.001470932390276e-03, -2.106965371965385e-03, -7.405053498763056e-02, -3.315130845211832e-03, -3.315130845211786e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_m08_so_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m08_so", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-6.020326067778959e-01, -5.982751945907760e-01, -6.012547798543628e-01, -5.977112663748010e-01, -5.992816742275204e-01, -5.947417442463500e-01, -6.080175679598238e-01, -6.058859292829141e-01, -6.015285023433043e-01, -6.018117504895693e-01, -6.015285023433043e-01, -6.018117504895693e-01, -7.756186890608279e-01, -7.778088070633475e-01, -7.745823305917375e-01, -7.772651179687631e-01, -7.560700571743771e-01, -7.531642984217747e-01, -7.566425717813976e-01, -7.579743321057795e-01, -7.776639616009035e-01, -7.413095916343437e-01, -7.776639616009035e-01, -7.413095916343437e-01, -2.901090339626546e-01, -2.961431798124784e-01, -2.885281609367322e-01, -2.951403585171973e-01, -2.773946218106497e-01, -2.803956041059874e-01, -2.864736991146425e-01, -2.877539465222301e-01, -3.019974056392134e-01, -3.171028392373337e-01, -3.019974056392134e-01, -3.171028392373337e-01, -1.404148345956754e-01, -1.347085154385072e-01, -1.364752307950231e-01, -1.306644767710704e-01, -3.531448931438593e-01, -3.316153409364662e-01, -1.049112398151773e-01, -1.158845632240574e-01, -1.441654691722560e-01, -5.763538240412259e-02, -1.441654691722599e-01, -5.763538240412321e-02, -8.643839778103856e-03, -9.194775172502412e-03, -9.067084587492622e-03, -9.726543507306952e-03, -5.630958453724422e-02, -5.964551087827264e-02, -5.166685067014669e-03, -5.080003487166352e-03, -7.697425208005832e-03, -4.365147290229654e-03, -7.697425208005833e-03, -4.365147290233594e-03, -5.211230698723308e-02, -5.266961388261985e-02, -9.619184038051129e-02, -9.523497239977345e-02, -5.524162150328236e-02, -5.462990421865781e-02, -9.302647334844190e-02, -9.326228733885933e-02, -7.388706631272260e-02, -7.372756187863409e-02, -7.388706631272260e-02, -7.372756187863409e-02, -4.891293530009273e-01, -4.776101440830865e-01, -3.847875422555224e-01, -3.760085853642312e-01, -5.670015323965055e-01, -5.341150735596537e-01, -4.778021315347542e-01, -4.421153792658820e-01, -3.717430867713541e-01, -4.153803390943082e-01, -3.717430867713541e-01, -4.153803390943082e-01, -9.877842815247430e-02, -1.058138698044347e-01, 1.414552604611258e-01, 1.558952649567037e-01, -9.358840504550271e-02, -4.181660645611763e-02, -1.082940486742514e-01, -1.117741571483320e-01, -1.513236224889243e-01, -1.118941571070311e-01, -1.513236224889217e-01, -1.118941571070319e-01, -5.825242219498859e-02, -5.735423540510749e-02, -1.713242835025685e-01, -1.719152178463308e-01, -6.684178364033889e-02, -5.988668606701870e-02, -3.102575841835311e-01, -3.093467802960883e-01, -5.844614189162754e-02, -8.162640036440143e-02, -5.844614189163763e-02, -8.162640036437993e-02, -3.871590473322143e-03, -4.023611383524584e-03, -4.970975727528007e-03, -5.045975281428313e-03, -3.721178527204546e-03, -3.943612952856277e-03, -8.205012689395849e-02, -8.068924970361088e-02, -3.795350755905029e-03, -5.227988652376757e-03, -3.795350755904061e-03, -5.227988652375000e-03, -1.780110827419190e-02, -3.618027944400826e-03, -3.890673687301432e-01, -3.883231781507570e-01, -3.308604141113433e-01, -3.180803796169736e-01, -2.066961601606477e-01, -1.902999005305323e-01, -2.762984822651059e-01, -2.608098191380110e-01, -2.762984822651059e-01, -2.608098191380047e-01, -1.167486402978495e-01, -9.706769071445684e-02, 3.038326579893056e-02, 2.611175255541714e-02, -1.468642105469662e-01, -1.509095055446033e-01, 4.428282148292369e-02, 4.742573599330126e-02, -1.107132256833864e-01, -1.059167579819645e-01, -1.107132256833826e-01, -1.059167579819629e-01, 1.278686762952281e-02, 6.132836213470152e-02, -1.835346810644291e-01, -1.829297040264704e-01, -1.674031128497765e-01, -1.664086550596380e-01, -1.112561545617682e-01, -1.115291876421595e-01, -1.548570182479235e-01, -1.538131897470006e-01, -1.548570182479229e-01, -1.538131897469991e-01, -1.670899271396308e-02, -6.190760026308303e-05, -5.502547834110197e-02, -5.544037121221478e-02, -7.422359157643042e-02, -7.616216948414080e-02, -4.865070616005543e-02, -1.429576576014303e-03, -6.552257193066811e-02, -5.190279453669713e-02, -6.552257193065722e-02, -5.190279453674553e-02, -1.243447443342259e-02, -1.289928533215307e-02, -1.334036768074751e-03, -1.337208928249431e-03, -2.717186350848157e-03, -2.890590468559011e-03, -6.448238747533799e-02, -6.069756775298870e-02, -3.597924122508679e-03, -4.788051330678578e-03, -3.597924122507772e-03, -4.788051330679418e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m08_so_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m08_so", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.036010006514326e-08, 0.000000000000000e+00, -2.037557940645587e-08, -2.036226217275611e-08, 0.000000000000000e+00, -2.037714737211944e-08, -2.036805349615604e-08, 0.000000000000000e+00, -2.038576188707488e-08, -2.034381677094380e-08, 0.000000000000000e+00, -2.035481122417476e-08, -2.036150467657402e-08, 0.000000000000000e+00, -2.036634112152097e-08, -2.036150467657402e-08, 0.000000000000000e+00, -2.036634112152097e-08, -1.677004887753376e-05, 0.000000000000000e+00, -1.678781648022294e-05, -1.675718046790098e-05, 0.000000000000000e+00, -1.678012975887396e-05, -1.651362056055136e-05, 0.000000000000000e+00, -1.647088754610786e-05, -1.656741035397677e-05, 0.000000000000000e+00, -1.657254609121390e-05, -1.680879682720498e-05, 0.000000000000000e+00, -1.635079153036810e-05, -1.680879682720498e-05, 0.000000000000000e+00, -1.635079153036810e-05, -1.806060955072950e-02, 0.000000000000000e+00, -1.833253089818476e-02, -1.797947257274738e-02, 0.000000000000000e+00, -1.831562944056991e-02, -1.674106352851492e-02, 0.000000000000000e+00, -1.619573779280462e-02, -1.613371901146047e-02, 0.000000000000000e+00, -1.633949276442102e-02, -1.855653321594207e-02, 0.000000000000000e+00, -1.287646146560821e-02, -1.855653321594207e-02, 0.000000000000000e+00, -1.287646146560821e-02, -7.537263301584374e-01, 0.000000000000000e+00, -8.066387125470045e-01, -8.148593363436067e-01, 0.000000000000000e+00, -8.677595372514075e-01, -9.759901746141988e-03, 0.000000000000000e+00, -9.672545040090691e-03, -5.531416938668470e-01, 0.000000000000000e+00, -5.063254195841813e-01, -6.717714159066093e-01, 0.000000000000000e+00, -2.149839952425627e+00, -6.717714159066114e-01, 0.000000000000000e+00, -2.149839952425627e+00, 1.035493237785865e+01, 0.000000000000000e+00, 1.022666534355711e+01, 1.088702732847113e+01, 0.000000000000000e+00, 1.079719068576232e+01, 3.688004708048586e+00, 0.000000000000000e+00, 3.380347729191799e+00, 9.603935411783088e+00, 0.000000000000000e+00, 9.344687854559369e+00, 1.037978985688915e+01, 0.000000000000000e+00, 2.655007011122546e+01, 1.037978985688918e+01, 0.000000000000000e+00, 2.655007011122585e+01, -1.342680009982646e-05, 0.000000000000000e+00, -1.343969129562644e-05, -1.357502933471901e-05, 0.000000000000000e+00, -1.358309748212422e-05, -1.343686095938296e-05, 0.000000000000000e+00, -1.344593819291093e-05, -1.356396364183453e-05, 0.000000000000000e+00, -1.357612947886441e-05, -1.350146003943407e-05, 0.000000000000000e+00, -1.351157594210521e-05, -1.350146003943407e-05, 0.000000000000000e+00, -1.351157594210521e-05, -1.605853030790637e-04, 0.000000000000000e+00, -1.598473168033977e-04, -1.506955813375329e-04, 0.000000000000000e+00, -1.502241658850059e-04, -1.636500984142695e-04, 0.000000000000000e+00, -1.623289948523798e-04, -1.559392827675243e-04, 0.000000000000000e+00, -1.541342707728645e-04, -1.513830724991870e-04, 0.000000000000000e+00, -1.543319913430500e-04, -1.513830724991870e-04, 0.000000000000000e+00, -1.543319913430500e-04, -1.182919890659734e-03, 0.000000000000000e+00, -1.066945933586896e-03, -3.437608687073260e-02, 0.000000000000000e+00, -3.844914071135653e-02, -2.726987500854080e-02, 0.000000000000000e+00, -1.120801769943355e-02, -1.464434058509205e-03, 0.000000000000000e+00, -7.472676381153686e-04, -2.955543786687803e-03, 0.000000000000000e+00, -9.642444968073027e-04, -2.955543786687810e-03, 0.000000000000000e+00, -9.642444968073062e-04, -2.247407680780301e+00, 0.000000000000000e+00, -2.240978456418423e+00, -2.559733474302707e-01, 0.000000000000000e+00, -2.562130214525914e-01, -2.360406420062514e+00, 0.000000000000000e+00, -2.460025509102700e+00, -2.641485312861091e-05, 0.000000000000000e+00, -2.675081221133997e-05, -1.705328088566392e+00, 0.000000000000000e+00, -1.148718705897113e+00, -1.705328088566395e+00, 0.000000000000000e+00, -1.148718705897069e+00, 1.352116818095770e+01, 0.000000000000000e+00, 1.170191836717986e+01, 1.161557878997188e+01, 0.000000000000000e+00, 1.072614264343577e+01, 6.599750416365106e+01, 0.000000000000000e+00, 7.332103301387576e+01, -2.051132667615160e-01, 0.000000000000000e+00, -5.961983789383257e-01, 3.295481670107886e+01, 0.000000000000000e+00, 3.211016658839300e+01, 3.295481670107880e+01, 0.000000000000000e+00, 3.211016658839233e+01, -6.045371066950459e-02, 0.000000000000000e+00, -5.605769281182354e-02, -1.218956433304976e-01, 0.000000000000000e+00, -1.193993984930837e-01, -1.120513274622387e-01, 0.000000000000000e+00, -1.085675555488930e-01, -9.486710995403835e-02, 0.000000000000000e+00, -9.106034379198601e-02, -1.046219013001871e-01, 0.000000000000000e+00, -1.009214735933694e-01, -1.046219013001871e-01, 0.000000000000000e+00, -1.009214735933694e-01, -8.615079290504180e-02, 0.000000000000000e+00, -8.104319237097424e-02, -1.335182991546670e-02, 0.000000000000000e+00, -1.224253883414564e-02, -5.388463375960092e-03, 0.000000000000000e+00, -6.231811028667903e-03, -6.821655480339071e-02, 0.000000000000000e+00, -6.886312047142260e-02, -2.531727941384354e-02, 0.000000000000000e+00, -2.649353143749758e-02, -2.531727941384353e-02, 0.000000000000000e+00, -2.649353143749751e-02, -1.292679679076901e-02, 0.000000000000000e+00, -1.721655408410242e-02, -2.573072084092249e-01, 0.000000000000000e+00, -2.590120814190908e-01, -2.794154707283046e-01, 0.000000000000000e+00, -2.835730993852260e-01, -1.943030897541235e-01, 0.000000000000000e+00, -1.906757687222875e-01, -2.770975797752996e-01, 0.000000000000000e+00, -2.793117202854067e-01, -2.770975797752996e-01, 0.000000000000000e+00, -2.793117202854065e-01, -4.623589627125908e-02, 0.000000000000000e+00, -4.025476538280073e-02, 3.399532098042621e+00, 0.000000000000000e+00, 3.396012308110334e+00, 2.021329726343498e+00, 0.000000000000000e+00, 1.780978306555754e+00, -1.878921596985226e-01, 0.000000000000000e+00, -1.019082898585590e-01, -3.295054307151753e+00, 0.000000000000000e+00, -4.461428863010897e+00, -3.295054307151706e+00, 0.000000000000000e+00, -4.461428863010825e+00, 8.143245204423907e+00, 0.000000000000000e+00, 8.298860631073586e+00, 4.169687189279219e+01, 0.000000000000000e+00, 7.385958949741435e+01, 2.567579245836125e+01, 0.000000000000000e+00, 2.732156577211433e+01, -3.649832701591200e+00, 0.000000000000000e+00, -4.045566116378161e+00, 6.784097316907284e+01, 0.000000000000000e+00, 3.338997996594201e+01, 6.784097316907358e+01, 0.000000000000000e+00, 3.338997996594228e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m08_so_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m08_so", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m08_so_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m08_so", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-2.438769952162469e-03, -2.439318173964163e-03, -2.438996507920062e-03, -2.439482404133854e-03, -2.439481414503807e-03, -2.440243263978096e-03, -2.436933641562953e-03, -2.436995505681138e-03, -2.438919205781905e-03, -2.438117618415721e-03, -2.438919205781905e-03, -2.438117618415721e-03, -7.860502492675038e-03, -7.842261611101459e-03, -7.872085678078280e-03, -7.848939980894054e-03, -8.087275874031609e-03, -8.123205369781915e-03, -8.049267366493796e-03, -8.040558144928305e-03, -7.836876368573442e-03, -8.235239513184400e-03, -7.836876368573442e-03, -8.235239513184400e-03, 3.979692632869901e-03, 4.541035743768455e-03, 3.833735885128938e-03, 4.453576257669692e-03, 2.339873295790995e-03, 2.279562589949039e-03, 3.010982968530080e-03, 3.281183070768439e-03, 4.885437185081913e-03, 2.485782349226711e-03, 4.885437185081913e-03, 2.485782349226711e-03, 1.337450902880083e-02, 1.136970781172775e-02, 1.264240847053872e-02, 1.120387315420436e-02, 2.406889951734245e-03, 1.216901381108404e-03, -6.550200553768502e-03, -1.227947777591207e-03, 1.267046828983944e-02, -1.718232377307066e-02, 1.267046828984390e-02, -1.718232377305012e-02, 1.163038977331079e-05, 1.395495704413911e-05, 1.382131836297457e-05, 1.711944970465328e-05, 3.277775938647624e-04, 2.968427379550585e-04, 1.887790008262560e-06, 1.814183831155249e-06, 7.894955507413022e-06, 2.521267802488073e-06, 7.894955507413022e-06, 2.521267805798239e-06, 3.780090177757624e-04, 3.903049647090664e-04, 1.199960547910036e-03, 1.184581440375319e-03, 4.371403837878538e-04, 4.274290158861825e-04, 1.141738744723751e-03, 1.148327502549262e-03, 7.841349798743109e-04, 7.837147223849397e-04, 7.841349798743109e-04, 7.837147223849397e-04, -8.600260077402817e-03, -8.893308487675451e-03, -1.131362425530253e-02, -1.154659201229627e-02, -6.712547605601837e-03, -7.498648589146686e-03, -8.924244967417906e-03, -9.820829099609038e-03, -1.168900024317132e-02, -1.050735090789101e-02, -1.168900024317132e-02, -1.050735090789101e-02, -8.428116499614562e-02, -8.187461918066571e-02, -2.041895525409669e-01, -2.120805834391765e-01, -6.235578319202164e-02, -9.562653823077419e-02, -8.207885895445279e-02, -8.210825149569435e-02, -5.952816949186449e-02, -8.003554126976987e-02, -5.952816949186362e-02, -8.003554126976963e-02, -1.646431576548588e-02, -1.682176967934744e-02, 1.148290081469061e-02, 1.154358103294823e-02, -1.346167291302528e-02, -1.578716682915298e-02, -2.758435027339432e-02, -2.763362404337612e-02, -1.839754841177149e-02, -1.056812564072448e-02, -1.839754841179037e-02, -1.056812564071939e-02, 5.817967773728206e-07, 6.009619889382818e-07, 1.595099662784047e-06, 1.471027640525493e-06, 4.785480327988581e-06, 6.223575266910532e-06, -3.823507116670532e-03, -4.228837502489524e-03, 9.648121058863184e-07, 7.857905281520446e-06, 9.648121063643986e-07, 7.857905279372884e-06, -7.559254071790190e-01, -8.238377096328762e-01, 5.954817941724407e-01, 5.872408714822064e-01, 4.275484467969844e-01, 3.858759158991189e-01, 2.696393222837109e-02, -3.262697297108492e-02, 2.603090809628344e-01, 2.077784962016222e-01, 2.603090809628344e-01, 2.077784962016067e-01, -3.600124254838717e-01, -4.420737333693759e-01, -1.415637133639446e-01, -1.405631421200219e-01, -5.687714746600803e-02, -5.316744927486003e-02, -1.363059500104009e-01, -1.369244106888358e-01, -5.778684258588356e-02, -5.950359400096840e-02, -5.778684258588169e-02, -5.950359400096777e-02, -1.288400325650169e-01, -1.513513073531702e-01, 1.030868584394209e-02, 1.012974633532482e-02, 9.361431318970296e-03, 1.004318671958321e-02, -2.955091993908161e-02, -2.977828718672788e-02, 1.072743013892241e-02, 1.034175174129291e-02, 1.072743013892114e-02, 1.034175174129223e-02, -9.805146484236135e-02, -1.108948984310191e-01, 3.786177434952262e-04, 3.697920593553829e-04, -2.340638513136713e-04, -4.562054860741558e-04, -9.805042644632163e-02, -1.668056107764193e-01, -1.266837312758961e-02, -1.813558987471238e-02, -1.266837312760027e-02, -1.813558987470188e-02, 1.604065393669538e-05, 1.750905270502445e-05, 3.603150925902633e-08, 3.610515727047535e-08, 8.386526752004447e-07, 1.068100720113274e-06, -1.258383992651542e-02, -1.406895882116001e-02, 2.110004826164259e-06, 6.290781174095466e-06, 2.110004824661628e-06, 6.290781179113349e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
