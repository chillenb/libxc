
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_m05_2x_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m05_2x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-7.408184833057540e+00, -7.408188680211741e+00, -7.408220392959782e+00, -7.408155642819716e+00, -7.408186758986318e+00, -7.408186758986318e+00, -1.479532342293409e+00, -1.479552419102445e+00, -1.480190644547452e+00, -1.480066082341270e+00, -1.479544957097958e+00, -1.708352737510084e+00, -3.174020270637034e-01, -4.057445086523230e-01, -4.261209998396157e-01, -4.156075741354183e-01, -4.052039338869842e-01, -4.052039338869842e-01, -1.207595130084610e-01, -1.194982849674329e-01, -4.319614378540563e-01, -1.409605367181466e-01, -1.204344129566862e-01, -1.204344129566862e-01, -2.780670115108643e-02, -2.908460193528573e-02, -1.018472161336110e-01, -1.351773193307914e-02, -2.878078587486880e-02, -2.878078587486878e-02, -1.798991178772163e+00, -1.796251204364914e+00, -1.798687586244411e+00, -1.724064551393772e+00, -1.797621853012548e+00, -1.797621853012548e+00, -8.204036991526765e-01, -8.277554282381521e-01, -8.176335441163436e-01, -8.230494659219891e-01, -8.294267897882562e-01, -9.756580005303382e-01, -2.564620442871725e-01, -2.321920393348849e-01, -2.640608662514869e-01, -2.378229857822990e-01, -2.457615081012952e-01, -2.255193081234338e-01, -8.833168734386164e-02, -1.478944368826643e-01, -8.517996042093076e-02, -7.758832877046388e-01, -1.274605237402404e-01, -1.274605237402404e-01, -7.229164339408074e-03, -1.489159032978614e-02, -1.115768375504338e-02, -7.392210309652691e-02, -7.526293248757861e-03, -1.357160124200815e-02, -2.695268841052856e-01, -2.115492405860265e-01, -2.273106293415211e-01, -2.498793886180818e-01, -2.404005477983087e-01, -2.404005477983087e-01, -2.426474251944313e-01, -2.285436470818222e-01, -2.059787426942019e-01, -1.976084740110525e-01, -2.002818708789670e-01, -1.875976593942578e-01, -2.514359966828706e-01, -1.212646765937171e-01, -1.614109021157177e-01, -1.473557585216600e-01, -1.593534162732597e-01, -1.593534162732597e-01, -1.933272281617789e-01, -9.702366512999146e-02, -1.190751689146361e-01, -1.624292167588906e-01, -7.622287360379007e-02, -1.262691112367905e-01, -3.266023391217839e-02, -4.087841084789870e-03, -7.758290376366641e-03, -1.206361690081439e-01, -1.153844389919928e-02, -1.153844389919929e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_m05_2x_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m05_2x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-9.004237942274800e+00, -9.004251065325457e+00, -9.004326140154239e+00, -9.004108311969892e+00, -9.004244737148738e+00, -9.004244737148738e+00, -2.095522618830080e+00, -2.095264094929890e+00, -2.087240844970767e+00, -2.090588465603733e+00, -2.095460891353618e+00, -1.926726007862273e+00, -2.175132097478095e-01, -1.245444896377111e-01, -1.585051470635194e-01, -1.378672533194036e-01, -1.242718146964392e-01, -1.242718146964392e-01, -4.625204797746726e-02, -4.178987257234570e-02, -4.192728728414570e-01, -4.579803427795635e-02, -4.490124950049205e-02, -4.490124950049205e-02, -3.629663968871325e-02, -3.788901131650677e-02, -1.058506111503947e-01, -1.797174881573089e-02, -3.749190540615876e-02, -3.749190540616143e-02, -1.677718376849604e+00, -1.673153339440543e+00, -1.677185300082293e+00, -1.781918702817017e+00, -1.675362640852683e+00, -1.675362640852683e+00, -1.142673959115138e+00, -1.182837833200632e+00, -1.122299194914859e+00, -1.158196890655753e+00, -1.191070004793276e+00, -1.096620024437455e+00, -1.454751962326679e-01, -2.490718908652184e-01, -2.340302982821493e-01, -1.372611154850260e-01, -1.494934711144137e-01, -1.811837389750747e-01, -5.504951339848456e-02, -1.013385702294523e-01, -5.168504722063740e-02, -4.877930644515845e-01, -3.805294300592977e-02, -3.805294300592977e-02, -9.614552832217411e-03, -1.977739347667956e-02, -1.481177460830126e-02, -7.173788727246778e-02, -1.000731690401991e-02, -1.802990906254065e-02, -4.018171206496686e-01, -4.218540181128173e-01, -4.787079314592854e-01, -4.816789810020753e-01, -4.848189221140113e-01, -4.848189221140113e-01, -4.667785404819712e-01, -1.432432610245924e-01, -1.530121602896918e-01, -2.082124660401310e-01, -2.018428204755610e-01, -2.180777534523635e-01, -2.277226950244152e-01, -1.054957839034268e-01, -5.087312597525232e-02, -2.088501989752919e-01, -1.174855632593284e-01, -1.174855632593285e-01, -2.609385636798054e-01, -1.055387151535399e-01, -1.098253115087549e-01, -1.786148569588350e-01, -5.151803722026757e-02, -6.087287649192867e-02, -4.276148344631024e-02, -5.448765542810737e-03, -1.032816735713230e-02, -5.834898048718254e-02, -1.533685989482697e-02, -1.533685989482656e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m05_2x_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m05_2x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-3.050594002139078e-09, -3.050558562645898e-09, -3.050379191819393e-09, -3.050959371578710e-09, -3.050575498026155e-09, -3.050575498026155e-09, -5.326653342024353e-06, -5.326669727520701e-06, -5.326334383712716e-06, -5.324777692521056e-06, -5.326556555971211e-06, -3.474526377251187e-06, -4.415405091450061e-03, -1.910575896575641e-03, -2.020880105831999e-03, -2.008033128958023e-03, -1.907729893472710e-03, -1.907729893472710e-03, -3.205436023267695e-01, -3.099807982631672e-01, -2.430083363351453e-03, -4.361448862268263e-01, -3.172965367195454e-01, -3.172965367195454e-01, -8.048747831236156e+00, -7.975348999862098e+00, -2.362453172127364e+00, -2.891288675792867e+00, -8.341359801027485e+00, -8.341359801027478e+00, -7.426960361211646e-07, -7.417356222401390e-07, -7.425930734091856e-07, -8.259838330696028e-07, -7.422122334068761e-07, -7.422122334068761e-07, -5.260429258443034e-05, -5.124477182954135e-05, -5.317971262034364e-05, -5.208001124694876e-05, -5.098996969721229e-05, -3.107931670374018e-05, -4.853849257188387e-03, -3.436891985321214e-03, -5.892230705899046e-03, -4.986423810198844e-03, -4.099440622643880e-03, -5.194528494929703e-03, -1.870180097081804e+01, -2.171186014683215e-01, -1.923607722383231e+01, -3.992602744321001e-05, -7.522652216458849e-01, -7.522652216458849e-01, -5.689195300074372e+06, -3.646144686616803e+00, -1.432600614820901e+01, -1.677186633563267e+02, -4.837953405354714e+06, -4.493548054604041e+00, -6.173766869669467e-03, -4.800661286083862e-03, -5.497532328295056e-03, -5.704181846423605e-03, -5.480603443113042e-03, -5.480603443113042e-03, -6.458245451413541e-03, -8.634480964997610e-03, -7.049557851253770e-03, -6.163251348828171e-03, -6.548943089616612e-03, -7.806783989375484e-03, -2.807647610297152e-03, -3.375209181911804e-01, -6.757040758622089e-02, -5.082315086311091e-02, -4.537522896242700e-02, -4.537522896242699e-02, -1.845045332289396e-02, -2.290907949576101e+00, -1.774808502254181e+00, -4.273712855145825e-02, -4.581266587420638e+01, -1.540280937510516e+00, -3.151155687173392e+00, -4.043562704465079e+00, -7.940596790089165e+00, -1.852314290636435e+00, -6.319258624747790e+00, -6.319258624747793e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m05_2x_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m05_2x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-5.120494125777631e-04, -5.120560525801911e-04, -5.120842516069705e-04, -5.119773670618237e-04, -5.120529152627947e-04, -5.120529152627947e-04, 9.245814379213354e-04, 9.226424975173321e-04, 8.616088713324602e-04, 8.857877499659481e-04, 9.240393821122936e-04, 1.066939669812377e-03, -1.922733057202277e-02, -2.446073991867088e-02, -2.076994637541887e-02, -2.288426227981432e-02, -2.450685121310976e-02, -2.450685121310976e-02, -7.178404844947248e-02, -7.712437370025568e-02, -6.815465039076469e-03, -5.913762594961327e-02, -7.337129621121168e-02, -7.337129621121168e-02, -6.983792148738562e-04, -7.956792839446217e-04, -1.653421033263160e-02, -2.756572698679321e-05, -8.064556728746597e-04, -8.064556728725022e-04, -7.726924006481992e-03, -7.819935359551748e-03, -7.737564414766335e-03, -7.494700842621557e-03, -7.774451670430012e-03, -7.774451670430012e-03, 9.371517816574066e-04, 1.560538708957574e-03, 6.093989275804231e-04, 1.178035353259100e-03, 1.691624043925230e-03, 1.989864027380254e-03, -5.886578307465148e-02, -1.834996808095712e-02, -1.800111082681127e-02, -6.655726426936756e-02, -6.187355911313164e-02, -5.677732998194557e-02, -3.757020466445244e-02, -2.423579644952014e-02, -4.016195994591882e-02, -1.903398078968167e-02, -7.012968045205469e-02, -7.012968045205469e-02, -2.092046555257484e-05, -4.659570786729071e-05, -7.709261878926478e-05, -1.646340323974553e-02, -2.408754164898285e-05, -4.343526080634343e-05, 2.252519285241470e-01, 3.461545341734198e-01, 4.885569292827764e-01, 5.260543594943149e-01, 5.278276100779224e-01, 5.278276100779224e-01, 5.415674435224570e-01, -5.666931612475173e-02, -5.899324503591211e-02, -3.071266995875966e-02, -2.819046740334433e-02, -2.640511434653714e-02, -3.257594967163443e-02, -3.295213753307064e-02, -6.090241349379139e-02, 7.573561283136283e-03, -2.526510800740378e-02, -2.526510800740386e-02, 1.493077817560704e-03, -1.265204429830859e-02, -2.482001652424074e-02, 6.932187923890540e-03, -3.925023241453869e-02, -6.502105901415516e-02, -4.398139690481783e-04, -1.059431005408790e-06, -1.426656200000590e-05, -6.792222469395645e-02, -3.748975534757180e-05, -3.748975534809873e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
