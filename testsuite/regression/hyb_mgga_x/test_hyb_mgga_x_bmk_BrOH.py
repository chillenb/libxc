
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_bmk_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_bmk", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.207200499833457e+01, -1.207197701455060e+01, -1.207195740543517e+01, -1.207241348616311e+01, -1.207198936031026e+01, -1.207198936031026e+01, -2.032699212401174e+00, -2.032672853244614e+00, -2.032054370443618e+00, -2.033925284988877e+00, -2.032692106801114e+00, -2.032692106801114e+00, -4.154217534985186e-01, -4.155616205171691e-01, -4.180388052213943e-01, -4.211288515834690e-01, -4.154705862898477e-01, -4.154705862898477e-01, -1.268268820015569e-01, -1.281809877992178e-01, -4.801251248767014e-01, -7.618305011753067e-02, -1.272240358233409e-01, -1.272240358233409e-01, -3.260313545676084e-02, -3.405814555196383e-02, -1.026542126997935e-01, -1.598909718844192e-02, -3.370515271225882e-02, -3.370515271225882e-02, -2.767968643366863e+00, -2.764399664080648e+00, -2.767615653868213e+00, -2.764840454411780e+00, -2.766122797846453e+00, -2.766122797846453e+00, -1.256473295500155e+00, -1.261081424466243e+00, -1.257389627129913e+00, -1.260806658919300e+00, -1.258628604674005e+00, -1.258628604674005e+00, -3.349895790483412e-01, -2.903935958780983e-01, -3.193015461961727e-01, -2.882479253414965e-01, -3.412326181729736e-01, -3.412326181729736e-01, -9.350933544797359e-02, -1.205292566287949e-01, -8.816686337804183e-02, -9.085301435290369e-01, -7.832620080288934e-02, -7.832620080288934e-02, -1.542785181759961e-02, -1.760410767470898e-02, -1.319870038808617e-02, -1.043340483711818e-01, -1.603911875147884e-02, -1.603911875147883e-02, -2.662071973776263e-01, -2.762292609928836e-01, -2.722031658201178e-01, -2.694445949944712e-01, -2.707841663736436e-01, -2.707841663736436e-01, -2.511158066069488e-01, -3.096870314440767e-01, -3.107223061373655e-01, -2.938748894037297e-01, -3.047099409891378e-01, -3.047099409891378e-01, -3.112053613367939e-01, -1.614579326766420e-01, -1.882866995506284e-01, -2.182237401817545e-01, -2.024727033866198e-01, -2.024727033866198e-01, -2.794009547713265e-01, -1.020588305738234e-01, -1.106931571602785e-01, -1.993060794074729e-01, -8.902623980505328e-02, -8.902623980505317e-02, -3.801171404165660e-02, -4.848524931186299e-03, -9.196386807750400e-03, -8.415090363469026e-02, -1.364270347393295e-02, -1.364270347393291e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_bmk_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_bmk", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.015818377898629e+01, -1.015808028677886e+01, -1.015778590612852e+01, -1.015947506263255e+01, -1.015812783700631e+01, -1.015812783700631e+01, -2.129613010774337e+00, -2.129544921377298e+00, -2.127706246696884e+00, -2.131063987300813e+00, -2.129588508664936e+00, -2.129588508664936e+00, -4.237283657534703e-01, -4.243804547637433e-01, -4.576075456900918e-01, -4.515294360735871e-01, -4.239544826589114e-01, -4.239544826589114e-01, -1.537065374134424e-01, -1.502243289485291e-01, -4.853255427827382e-01, -4.348985079596854e-02, -1.527491409833538e-01, -1.527491409833538e-01, -4.110413107437135e-02, -4.269469201961944e-02, -5.041882279003027e-02, -2.109397662374819e-02, -4.225729344182519e-02, -4.225729344182519e-02, -2.289161581231230e+00, -2.289518615188095e+00, -2.289208443432550e+00, -2.289484136648201e+00, -2.289299185025743e+00, -2.289299185025743e+00, -1.295810877668941e+00, -1.318043045847720e+00, -1.285813092197266e+00, -1.302736042358337e+00, -1.323635386453526e+00, -1.323635386453526e+00, -3.259495025005051e-01, -2.680019326764785e-01, -3.265349605582097e-01, -2.517181094243327e-01, -3.099707722723969e-01, -3.099707722723969e-01, 9.187808690160222e-02, -1.691573483388775e-01, 8.639505128400093e-02, -8.094437900210849e-01, 3.087437214723059e-02, 3.087437214723059e-02, -2.036253930752200e-02, -2.316194522319695e-02, -1.737723405236980e-02, 2.390075471540731e-02, -2.110033244851150e-02, -2.110033244851148e-02, -3.454369811043204e-01, -3.117367097019826e-01, -3.251185634717875e-01, -3.346971527989344e-01, -3.300281392890828e-01, -3.300281392890828e-01, -3.396217728686733e-01, -3.550298743725199e-01, -2.987955382137151e-01, -2.396688487601787e-01, -2.626434408603955e-01, -2.626434408603955e-01, -2.757485346408569e-01, -2.093418422740937e-01, -1.961266884039595e-01, -2.302987202929369e-01, -2.009535882785280e-01, -2.009535882785279e-01, -3.086891454672225e-01, -6.796625931649600e-02, -1.494713533037634e-02, -2.134512551436209e-01, 7.887574277912855e-02, 7.887574277912851e-02, -4.739727932017398e-02, -6.456301123405106e-03, -1.220850652661145e-02, 7.553817949923766e-02, -1.797855749036785e-02, -1.797855749036797e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_bmk_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_bmk", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.513000059596092e-08, -1.513032960332047e-08, -1.513108087954679e-08, -1.512571335230721e-08, -1.513018001442062e-08, -1.513018001442062e-08, -1.037215317514587e-05, -1.037434682952822e-05, -1.043521295656801e-05, -1.034820719551773e-05, -1.037294918030377e-05, -1.037294918030377e-05, -4.415119351307503e-03, -4.378431099408839e-03, -3.242407528170141e-03, -3.377584588967340e-03, -4.402115493087260e-03, -4.402115493087260e-03, -3.510304488917133e-01, -3.514921602647910e-01, -2.824197356733096e-03, -1.445358992528031e+00, -3.504501379473549e-01, -3.504501379473549e-01, -1.056629468771656e+02, -1.057198789139656e+02, -3.451157699999968e+01, -7.616432938159586e+01, -1.098303251345393e+02, -1.098303251345393e+02, -5.730522516740781e-06, -5.754298765648533e-06, -5.732857113577406e-06, -5.751347878382077e-06, -5.742893715555685e-06, -5.742893715555685e-06, -3.595817790204499e-05, -3.367611019524369e-05, -3.585808081710452e-05, -3.398654538677027e-05, -3.475654071905295e-05, -3.475654071905295e-05, -1.896389390902520e-02, -3.792861908686210e-02, -1.944038162770197e-02, -4.002400107221543e-02, -2.061540735161538e-02, -2.061540735161538e-02, -7.336196283289716e+00, -2.839582842515001e-01, -7.852766014962019e+00, -3.794981403535713e-04, -4.026490596316810e+00, -4.026490596316810e+00, -8.081291594846479e+01, -8.087953111468569e+01, -2.315537319570928e+02, -2.546868275016075e+01, -1.194574777001649e+02, -1.194574777001193e+02, -4.251198998672630e-02, -4.370180847203619e-02, -4.352820438210477e-02, -4.317075193923181e-02, -4.337218275861657e-02, -4.337218275861657e-02, -5.222572249556764e-02, -1.208619009425375e-02, -2.643074588396668e-02, -4.518413856912012e-02, -3.585956827638902e-02, -3.585956827638904e-02, -2.898212704722448e-02, -1.263936667904686e-01, -8.771590074410560e-02, -5.294109122485992e-02, -6.435832910429601e-02, -6.435832910429594e-02, -1.905707989848305e-02, -3.100234216314127e+01, -2.550866860530821e+01, -9.674281697060087e-02, -1.542862818855339e+01, -1.542862818855343e+01, -7.905338872251644e+01, -1.397753229734091e+02, -1.202046580911236e+02, -1.874739112049554e+01, -1.745757528782410e+02, -1.745757528782193e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_bmk_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_bmk", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_bmk_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_bmk", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [2.207515370150830e-05, 2.206502452603783e-05, 2.203182475279616e-05, 2.219732493396925e-05, 2.206971414477334e-05, 2.206971414477334e-05, 5.075373769140208e-04, 5.076851896310380e-04, 5.123837033694250e-04, 5.156418047586505e-04, 5.075434646169344e-04, 5.075434646169344e-04, -3.346457120217310e-05, -1.228754306145969e-05, 1.209336132728032e-03, 1.034289808694926e-03, -2.601719751000566e-05, -2.601719751000566e-05, 3.134632069572717e-02, 2.640747440560113e-02, -3.755734926053087e-04, 2.268074386093924e-02, 2.983915631806311e-02, 2.983915631806311e-02, -1.478571981307242e-07, -1.771746085514011e-07, 1.123792986747413e-04, -1.044745618031167e-09, -1.800017047151551e-07, -1.800017047072251e-07, 1.895721641489870e-04, 2.086947500867054e-04, 1.915781545332685e-04, 2.064352555809783e-04, 1.991385258217271e-04, 1.991385258217271e-04, -1.308079470218557e-03, -1.343430782011167e-03, -1.417513465342908e-03, -1.470689120030298e-03, -1.153503220849769e-03, -1.153503220849769e-03, 3.975586367332213e-03, -1.247338374233566e-02, 3.852962891631193e-03, -1.465066206301488e-02, 1.713612045082340e-03, 1.713612045082340e-03, 7.718274778121486e-03, 4.611327466742465e-02, 9.084366655355875e-03, -6.626219312051313e-03, 2.310277212391663e-02, 2.310277212391663e-02, -1.647575387691220e-09, -2.376905486510573e-09, -4.397441039407959e-09, 6.838915199560385e-04, -2.040024596956484e-09, -2.040024596639720e-09, 7.039423731529837e-02, 4.579885497837292e-02, 5.710098681308581e-02, 6.470732150465817e-02, 6.112030279726025e-02, 6.112030279726024e-02, 7.900886325090725e-02, 6.424042828078326e-03, 6.628485681550503e-03, -1.400471919092762e-03, 1.852458939752360e-03, 1.852458939752360e-03, -1.629036767880771e-02, 3.374829629766349e-02, 7.530910164891264e-03, 6.152990804560005e-04, -4.632449095389876e-03, -4.632449095389852e-03, 3.418657987771269e-03, 5.026813074997807e-05, 3.870146722333270e-04, 6.750281962220509e-03, 6.120038989118459e-03, 6.120038989118530e-03, -7.377460249034405e-08, -4.539501194617348e-12, -3.044673711222452e-10, 6.383608143650558e-03, -1.521922896046208e-09, -1.521922895100088e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
