
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_bmk_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_bmk", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-8.391212505949428e+00, -8.391215581733089e+00, -8.391245922866210e+00, -8.391193529326166e+00, -8.391214011911030e+00, -8.391214011911030e+00, -1.637628476701019e+00, -1.637576609918760e+00, -1.636065166003818e+00, -1.636783475700450e+00, -1.637621870671572e+00, -2.204578963675925e+00, -3.262405435427372e-01, -4.693507888348436e-01, -4.593043757658559e-01, -4.624303439970031e-01, -4.695304720347216e-01, -4.695304720347216e-01, -1.292140865755212e-01, -1.309066550891829e-01, -3.822332805297697e-01, -9.886226334269832e-02, -1.297376757853799e-01, -1.297376757853799e-01, -3.262090371035722e-02, -3.408388613164773e-02, -1.070780835183138e-01, -1.601493193645039e-02, -3.372721777664890e-02, -3.372721777664893e-02, -2.771458505355472e+00, -2.767865398378951e+00, -2.771058732316077e+00, -2.029318768237323e+00, -2.769660106675363e+00, -2.769660106675363e+00, -9.446627369486190e-01, -9.476142432975200e-01, -9.434708983515799e-01, -9.459027304456002e-01, -9.479239951418261e-01, -1.273317435234742e+00, -3.577078426321864e-01, -3.614863070869808e-01, -3.441342675125416e-01, -3.502086401472463e-01, -3.662288791798676e-01, -2.515744720576129e-01, -4.314664271705999e-02, -1.230596429717420e-01, -4.263215089207061e-02, -1.163063112797052e+00, -8.992070814336796e-02, -8.992070814336796e-02, -2.074621563556222e-03, -1.763252051739607e-02, -1.320815129290927e-02, -2.665016432949055e-02, -2.160306335006747e-03, -1.607226547948201e-02, -2.757376299559763e-01, -2.855617287744436e-01, -2.486071039078687e-01, -2.789558424779121e-01, -2.802808352827712e-01, -2.802808352827712e-01, -2.704787438283593e-01, -3.111686969196816e-01, -3.155895971964051e-01, -3.052352340017631e-01, -3.128304426240346e-01, -2.128587000384692e-01, -3.913858623270249e-01, -1.114137908857946e-01, -1.922836804156423e-01, -1.690769497999822e-01, -2.079529305830126e-01, -2.079529305830126e-01, -2.115319431311116e-01, -1.040887225768647e-01, -1.191494659781289e-01, -2.094474713582179e-01, -3.494651543530507e-02, -1.030119667003073e-01, -3.837663798516894e-02, -4.849764392102666e-03, -9.198060403584058e-03, -9.849927385187013e-02, -1.366834316863462e-02, -1.366834316863459e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_bmk_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_bmk", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.011979839038605e+01, -1.011991996088375e+01, -1.012047147224091e+01, -1.011849071506277e+01, -1.011986229762889e+01, -1.011986229762889e+01, -1.783841183020239e+00, -1.783637823777822e+00, -1.777595101747849e+00, -1.780074807611032e+00, -1.783793214833062e+00, -2.461325033407420e+00, -4.540581476799388e-01, -4.966286352287994e-01, -5.385209336144753e-01, -5.179029329109134e-01, -4.955899629856373e-01, -4.955899629856373e-01, -1.530647383048221e-01, -1.499698413196697e-01, -5.538853176647615e-01, 3.740846741034008e-02, -1.522384232305013e-01, -1.522384232305013e-01, -4.117365526795042e-02, -4.279519516440266e-02, -6.371944069369488e-02, -2.119694324253126e-02, -4.234344614027766e-02, -4.234344614027782e-02, -2.290597905470259e+00, -2.290857668334490e+00, -2.290616233228924e+00, -2.807019967783984e+00, -2.290709772239959e+00, -2.290709772239959e+00, -1.115299473978218e+00, -1.101954746869835e+00, -1.121329343843547e+00, -1.110790884918023e+00, -1.098002959926967e+00, -1.316399862087677e+00, -4.120175385964082e-01, -3.102770961955882e-01, -4.051380971762167e-01, -3.800826040331839e-01, -3.902643059366708e-01, -2.564484628155438e-01, -5.867413962243300e-02, -1.566896700766921e-01, -5.807626647160710e-02, -1.226833448001976e+00, 5.510889824475244e-02, 5.510889824475244e-02, -2.766163017312859e-03, -2.327506447809945e-02, -1.741485700302920e-02, -3.567523361580052e-02, -2.880409611085217e-03, -2.123231640945037e-02, -3.327465120432635e-01, -3.017296571372832e-01, -3.609415060290460e-01, -3.225681760703621e-01, -3.182318348516732e-01, -3.182318348516732e-01, -3.129619485826020e-01, -3.644437887855724e-01, -3.173218773204426e-01, -2.519905695297834e-01, -2.819551029806899e-01, -2.431081650459551e-01, -3.694670915446162e-01, -1.604690059191669e-01, -1.952040902428266e-01, -1.977125729498498e-01, -1.961938771578316e-01, -1.961938771578317e-01, -2.254976929128300e-01, -7.446026429404963e-02, -3.664613943925084e-02, -2.369551247597524e-01, -4.732330893359039e-02, 7.055237039408885e-02, -4.882434029196165e-02, -6.461256880534280e-03, -1.221518965496966e-02, 6.717089439176607e-02, -1.808071233700923e-02, -1.808071233700930e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_bmk_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_bmk", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-3.645956478474913e-08, -3.645940521487036e-08, -3.645841443548645e-08, -3.646105202787729e-08, -3.645948270787166e-08, -3.645948270787166e-08, -2.520815613194488e-05, -2.521338087819293e-05, -2.536782027760000e-05, -2.529972656329439e-05, -2.520912663014809e-05, -2.530171101518659e-06, -1.398851877001364e-02, -2.432166549319197e-03, -2.420314872782003e-03, -2.472565938417718e-03, -2.431815139273410e-03, -2.431815139273410e-03, -3.816044244576724e-01, -3.764526317448835e-01, -8.126260915054015e-03, -2.158067955132066e+00, -3.798276195244165e-01, -3.798276195244165e-01, -1.015427092059248e+02, -1.005381466297896e+02, -2.736641581959953e+01, -3.674060121435355e+01, -1.051506722974369e+02, -1.051506722974287e+02, -5.704516049869339e-06, -5.728560321665390e-06, -5.707208561867126e-06, -1.054135686026426e-05, -5.716579502981109e-06, -5.716579502981109e-06, -2.103055917439174e-04, -2.107431618362111e-04, -2.100570657336504e-04, -2.102743961611943e-04, -2.112750621876889e-04, -2.753716755824392e-05, -6.748574454775605e-03, -1.819311992522447e-02, -4.532969973437233e-03, -1.070365945988840e-02, -9.718896305658918e-03, -4.821470542839101e-02, -5.641994640734907e+01, -3.447108295646626e-01, -5.917008394118029e+01, -9.963832397032698e-05, -4.238801310794198e+00, -4.238801310794198e+00, -1.058555533382404e+07, -4.631349989702837e+01, -1.819373556524314e+02, -3.885991739515448e+02, -9.003426798988787e+06, -5.708423613197395e+01, -3.980316662969024e-02, -4.075061604770881e-02, -5.048009056989271e-02, -4.036077457631447e-02, -4.052449177399263e-02, -4.052449177399263e-02, -4.562626266423980e-02, -9.831314286934392e-03, -2.175910799115285e-02, -3.814267125987793e-02, -2.962802921208811e-02, -8.948862374233979e-02, -1.092570205461153e-02, -1.094786728831957e+00, -8.778004701417035e-02, -2.068228269597786e-01, -5.436537203521974e-02, -5.436537203521966e-02, -9.245481838252041e-02, -2.698053371671706e+01, -1.970226601963613e+01, -3.051436375664325e-02, -1.312102947289279e+02, -1.354612910733666e+01, -3.980211565025786e+01, -5.143524159549075e+01, -1.009563148240231e+02, -1.631151034118708e+01, -8.029388940041044e+01, -8.029388940042564e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_bmk_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_bmk", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-6.264638534770966e-04, -6.264088360844642e-04, -6.261671824263939e-04, -6.270623426941105e-04, -6.264348783137268e-04, -6.264348783137268e-04, -3.008817664761370e-03, -3.010509470762898e-03, -3.061409106665155e-03, -3.041429263477073e-03, -3.009272956245500e-03, -8.978757797315258e-04, 1.782685785667660e-03, 6.205299981896077e-03, 1.046902804839116e-02, 8.709818069624384e-03, 6.089701113254025e-03, 6.089701113254025e-03, 3.847013630063085e-02, 3.380738173888538e-02, 1.924501269005180e-03, 2.576329817270226e-02, 3.716419910739475e-02, 3.716419910739475e-02, -1.490224388329253e-07, -1.791826353262654e-07, 9.422933876940575e-05, -1.063725788566710e-09, -1.817673750667657e-07, -1.817673750587591e-07, 1.845075352878028e-04, 2.033142764150828e-04, 1.865430989502502e-04, 1.468412347598609e-03, 1.938258410819269e-04, 1.938258410819269e-04, -2.770049089095258e-03, -3.184218401574682e-03, -2.592165639298222e-03, -2.914449513210670e-03, -3.295068719660241e-03, -2.216906845855713e-03, 6.080021133896877e-03, 1.635002548828962e-03, -3.352446133268792e-04, 7.765784054690975e-03, 7.432969890048074e-03, -3.752455801272812e-02, 6.859748165480453e-04, 4.972600106132117e-02, 8.004058787873416e-04, 2.324187220635200e-03, 2.355287152333901e-02, 2.355287152333901e-02, 8.017861115289643e-10, -2.420622608109157e-09, -4.433200243937382e-09, 8.695476494367781e-05, 1.011066842740672e-09, -2.088099963840429e-09, 5.950509036588471e-02, 3.755603642970709e-02, 8.196633712482336e-02, 5.418501934324724e-02, 5.097091450647996e-02, 5.097091450647996e-02, 5.598244783939952e-02, 5.323874185919742e-03, 7.802296259762974e-03, 6.939683344572331e-05, 4.122636959362582e-03, -3.353186890136678e-02, 4.770493493486713e-03, 6.988731979266203e-03, 1.016892071328202e-02, -1.696566249673965e-02, -9.713664842322660e-03, -9.713664842322651e-03, -2.664181155054927e-02, 4.458252195073259e-05, 3.271741464028135e-04, -8.095906260325404e-03, 5.701656472855708e-04, 5.724274911686747e-03, -8.478961608905672e-08, -4.551973249662787e-12, -3.050716079909573e-10, 5.943212070340693e-03, -1.554260379713682e-09, -1.554260378747475e-09])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
