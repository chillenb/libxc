
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_js18_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_js18", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.792404882247956e+01, -1.792410266837953e+01, -1.792435589368731e+01, -1.792355475133155e+01, -1.792397255977231e+01, -1.792397255977231e+01, -2.931487684796737e+00, -2.931479546261457e+00, -2.931321106234219e+00, -2.931647951082589e+00, -2.931310081173392e+00, -3.409615507157426e+00, -6.058549709413442e-01, -7.048848588045677e-01, -6.945049605833464e-01, -6.964013880742279e-01, -6.960536370768287e-01, -6.960536370768287e-01, -1.986042236075641e-01, -2.005761711511703e-01, -7.646742889663236e-01, -1.665125923692216e-01, -1.786996685655552e-01, -1.786996685655552e-01, -2.029032642150998e-02, -2.085332647938640e-02, -6.561947467110132e-02, -1.497455805053719e-02, -1.665143999796258e-02, -1.665143999796258e-02, -4.891730614346015e+00, -4.892200515645771e+00, -4.891750654885117e+00, -4.395080878805032e+00, -4.891969184641185e+00, -4.891969184641185e+00, -1.667103348311100e+00, -1.676578871400726e+00, -1.660526447550678e+00, -1.668641958199530e+00, -1.675586079752130e+00, -1.957804479684239e+00, -5.788611889518543e-01, -6.174343375143976e-01, -5.445008349965694e-01, -5.571562734945501e-01, -5.859268976721705e-01, -5.146410983929963e-01, -1.348109198940858e-01, -2.079601573102499e-01, -1.285164572609971e-01, -1.842543982328257e+00, -1.405722224547286e-01, -1.405722224547286e-01, -1.633232549568654e-02, -1.495102973161003e-02, -1.034392309283035e-02, -9.974351511960766e-02, -1.561329996086571e-02, -1.272439781680977e-02, -5.663788558527593e-01, -5.641920588313215e-01, -5.120815388815467e-01, -5.655382784340822e-01, -5.652178571325656e-01, -5.652178571325656e-01, -5.515719438957947e-01, -4.923922783518799e-01, -5.080012593221422e-01, -5.240954852653744e-01, -5.157624114701633e-01, -4.572404195538664e-01, -6.488799298303661e-01, -2.221089485329819e-01, -2.892033939020779e-01, -3.081458214784465e-01, -3.215175485903782e-01, -3.215175485903783e-01, -3.951881210089414e-01, -6.366669730677746e-02, -7.911226457118269e-02, -3.430480129547085e-01, -1.112255762290622e-01, -1.050167645030282e-01, -2.691708722421102e-02, -6.614635352024153e-03, -9.311296246589888e-03, -9.983004391765378e-02, -1.172347069439446e-02, -1.172347069439445e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_js18_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_js18", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.410276259212652e+01, -2.410283442305600e+01, -2.410317261622732e+01, -2.410210382298672e+01, -2.410266117160523e+01, -2.410266117160523e+01, -3.810825183130140e+00, -3.810910974065052e+00, -3.813228647234658e+00, -3.812638217727835e+00, -3.812307368541273e+00, -3.837327896355519e+00, -6.867888801235655e-01, -7.265621822205882e-01, -7.008303394463136e-01, -7.079999030036642e-01, -7.088540303937656e-01, -7.088540303937656e-01, -1.931917125067027e-01, -1.959995692574240e-01, -7.839201908843177e-01, -1.448189748195150e-01, -1.653285145495035e-01, -1.653285145495035e-01, -1.055763696360333e-02, -1.088468262406017e-02, -4.542601418981465e-02, -8.911045858745843e-03, -9.974814483180295e-03, -9.974814483180295e-03, -6.242908379331659e+00, -6.245962551159847e+00, -6.340935096913362e+00, -5.898896840625663e+00, -6.244443167207502e+00, -6.244443167207502e+00, -2.111301755254274e+00, -2.135629221882599e+00, -2.092804644597817e+00, -2.114702934553106e+00, -2.133683561622068e+00, -2.156970081073251e+00, -6.830022126805694e-01, -7.689794993677451e-01, -6.182710811825523e-01, -6.678779808453821e-01, -7.089164155080369e-01, -6.854512744541557e-01, -1.327659423017451e-01, -1.931392844102145e-01, -1.267618665404630e-01, -2.221533362093939e+00, -1.220680511051202e-01, -1.220680511051201e-01, -1.633203196004982e-02, -8.888839614580353e-03, -6.180153522202344e-03, -9.899453152003565e-02, -1.561269535992984e-02, -7.593652967079283e-03, -7.429723277675696e-01, -7.432453452364365e-01, -6.808672589633864e-01, -7.389380238330447e-01, -7.372679390492144e-01, -7.492075196170165e-01, -7.223595706955012e-01, -5.675047270669590e-01, -6.179728197187205e-01, -6.636060208131628e-01, -6.399061716331584e-01, -6.103342921653619e-01, -7.971656120459459e-01, -2.275142257921607e-01, -2.908838244079284e-01, -3.863684235561350e-01, -3.400524251871543e-01, -3.371611817992617e-01, -5.124199064210915e-01, -4.380929099879000e-02, -5.694509246979623e-02, -3.854600850283374e-01, -1.098670987546437e-01, -8.456677344393512e-02, -1.638053803243226e-02, -3.889047866508506e-03, -5.514774310010068e-03, -7.969974195537535e-02, -6.997941056469130e-03, -6.997941056469118e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_js18_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_js18", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-6.774461342861319e-09, -6.774539846195157e-09, -6.774803554181949e-09, -6.773647838346379e-09, -6.774265246940032e-09, -6.774265246940032e-09, -4.460073422206066e-06, -4.461009513927191e-06, -4.485395160344078e-06, -4.473910675935867e-06, -4.477004705692353e-06, -7.849411939404036e-06, -1.308036070406982e-03, -3.981100313808108e-03, -4.202602496704316e-03, -4.226518366129268e-03, -4.138213787175180e-03, -4.138213787175180e-03, -7.526743962374851e-01, -7.352425528361805e-01, -1.987743933084682e-04, -1.327476328533885e+00, -1.017838461617786e+00, -1.017838461617786e+00, -3.884286686726374e+03, -3.488773904826236e+03, -3.412940302944486e+01, -1.065933756666383e+04, -7.018812156734049e+03, -7.018812156734049e+03, -1.981941720818459e-06, -1.980710489439772e-06, -9.326348067777402e-07, -2.581503289682063e-06, -1.981321172257942e-06, -1.981321172257942e-06, -3.693774646541218e-05, -3.737253898661965e-05, -3.649908397392001e-05, -3.694861971769672e-05, -3.738940399030154e-05, -7.156305325586106e-05, -1.137331413627240e-02, -8.929283781764949e-03, -1.412921332836676e-02, -1.066127938156188e-02, -8.497006698096068e-03, -8.209420970366829e-03, 1.629096614334486e-01, -5.416514831619870e-01, 2.107057084210039e-01, -1.005446170963409e-04, -2.319538401561205e+00, -2.319538401561204e+00, 1.141317854774299e+03, -1.071657912608312e+04, -4.701027666572444e+04, 7.016836742917006e-01, 1.365924039796177e+03, -2.050535665871697e+04, -1.192505414330974e-02, 5.042756734283802e-04, -3.276932515150648e-02, -1.220011030689785e-02, -1.229971996942850e-02, 5.163516824097604e-03, -1.340956753597041e-02, -2.186953258128925e-02, -1.514874527740810e-02, -1.070518673473196e-02, -1.323285718346444e-02, -1.657122549277515e-02, -7.248214790010084e-03, -3.712647218386232e-02, -1.658971989539967e-01, -3.777841833751727e-02, -1.088636354974791e-01, -1.153864135037200e-01, -1.660312814759082e-02, -3.824055801973954e+01, -1.692761678357566e+01, -9.736717525761006e-02, 3.855677330805924e-01, -6.488141360794875e+00, -1.044494093650226e+03, -2.766291737914345e+05, -7.096579509619775e+04, -7.848014641373537e+00, -2.846409605222927e+04, -2.846409605222935e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_js18_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_js18", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.232573118457641e-04, 1.232604673211036e-04, 1.232729803128419e-04, 1.232262944541741e-04, 1.232509708061824e-04, 1.232509708061824e-04, -6.906065121501168e-04, -6.900578772076606e-04, -6.755977888083588e-04, -6.813760617875665e-04, -6.808274523317857e-04, 3.077861621564316e-03, -1.106004817744913e-02, 1.072509143846664e-02, 1.069070895330231e-02, 1.101254654791287e-02, 1.057439050688131e-02, 1.057439050688131e-02, 3.613588402098959e-02, 3.699646559031956e-02, -9.325862839975517e-03, 2.974439956155039e-02, 3.056790363971508e-02, 3.056790363971507e-02, 8.164959035600784e-03, 8.554196295629713e-03, 1.270244551338735e-02, 3.708862313925180e-03, 4.855569352746544e-03, 4.855569352746544e-03, 3.168955686299832e-03, 3.173268894042717e-03, 8.186721171610069e-04, 6.509376009125089e-04, 3.171113655645713e-03, 3.171113655645713e-03, -2.036863705763412e-03, -1.861186612678930e-03, -2.175782164300577e-03, -2.015972323858790e-03, -1.871623103279058e-03, 5.051696995946472e-03, 2.236160046751428e-02, 2.469211463544188e-02, 2.127648905251951e-02, 1.572795469350377e-02, 1.468954901145439e-02, 1.862171579881544e-03, -2.518688175977700e-02, 2.639970776355523e-02, -2.433991084031633e-02, 7.082384709770825e-03, 2.659105259343546e-02, 2.659105259343546e-02, -3.162079682332394e-03, 3.482652187202903e-03, 6.840629203348300e-03, -2.097199277384587e-02, -6.019162136985548e-03, 5.214844434822237e-03, 3.372930089389425e-02, -1.007151626418460e-02, 7.361538551267681e-03, 3.300400637244663e-02, 3.272053323614924e-02, -2.359037608721552e-02, 3.438379601432100e-02, 2.486081641413711e-02, 1.683450486102090e-02, 1.236129903441783e-02, 1.529273620766386e-02, 4.188420774266385e-03, 2.237851712493855e-02, -3.516657688092590e-02, 2.781815133072466e-02, -1.239231018877753e-02, 2.640968059468365e-02, 2.927024319050941e-02, -4.727368043772437e-03, 1.245210053313406e-02, 1.420155973725915e-02, 3.435433847293866e-02, -2.757559712570100e-02, 2.245788206976902e-02, 5.341036485168149e-03, 1.711095263916375e-03, 4.068912473769450e-03, 2.242602364370535e-02, 5.735457075295516e-03, 5.735457075295517e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
