
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_js18_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_js18", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.005758304961798e+01, -2.005763127114399e+01, -2.005790494132273e+01, -2.005718794157426e+01, -2.005755517376534e+01, -2.005755517376534e+01, -3.081444933799877e+00, -3.081449465053882e+00, -3.081787705586541e+00, -3.083477299199920e+00, -3.082325325914818e+00, -3.082325325914818e+00, -6.209821147203083e-01, -6.207785633739921e-01, -6.165338189408305e-01, -6.198889488196394e-01, -6.187308861207581e-01, -6.187308861207581e-01, -1.958261204077135e-01, -1.972125635721954e-01, -7.643488969213456e-01, -1.575597585560395e-01, -1.714538742865438e-01, -1.714538742865439e-01, -2.020804237981384e-02, -2.069992425579817e-02, -6.287637495482137e-02, -1.425785400004710e-02, -1.613458992062833e-02, -1.613458992062833e-02, -4.891134459824798e+00, -4.891616915895550e+00, -4.891167918960273e+00, -4.891593398101473e+00, -4.891372827181639e+00, -4.891372827181639e+00, -1.913713147915103e+00, -1.928740087552748e+00, -1.912323987193896e+00, -1.925661770830161e+00, -1.922713226162380e+00, -1.922713226162380e+00, -5.493648362657150e-01, -5.662976945770790e-01, -4.992940889891465e-01, -4.971634702506809e-01, -5.570111433558715e-01, -5.570111433558715e-01, -1.226143419923634e-01, -2.042118823980752e-01, -1.153327941031449e-01, -1.645913939642200e+00, -1.358160570911924e-01, -1.358160570911924e-01, -1.226895904491131e-02, -1.376991756642119e-02, -9.794815648270944e-03, -8.550241140414998e-02, -1.176947422387016e-02, -1.176947422387016e-02, -5.472762804358667e-01, -5.590988044678812e-01, -5.576738921372152e-01, -5.549757937890784e-01, -5.565650253381514e-01, -5.565650253381513e-01, -5.088804961097863e-01, -4.900215144820286e-01, -5.046439784326268e-01, -5.188806907123124e-01, -5.114151557675862e-01, -5.114151557675862e-01, -5.901703283333027e-01, -2.475685350462280e-01, -2.828017443070097e-01, -3.399952437335371e-01, -3.110828157061832e-01, -3.110828157061832e-01, -4.444422738752610e-01, -6.223553536591979e-02, -7.535592827932834e-02, -3.235751542214232e-01, -1.004716144480531e-01, -1.004716144480531e-01, -2.478060270676824e-02, -6.941601617424769e-03, -9.045927996342656e-03, -9.693940277222549e-02, -1.098448614084814e-02, -1.098448614084813e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_js18_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_js18", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.515551982980189e+01, -2.515563580305497e+01, -2.515634852231753e+01, -2.515463276912276e+01, -2.515550352660188e+01, -2.515550352660188e+01, -3.755541475084811e+00, -3.755589486979201e+00, -3.756800807383728e+00, -3.755515885736465e+00, -3.755742337021641e+00, -3.755742337021641e+00, -7.147641317007914e-01, -7.139482338843280e-01, -6.963465724750306e-01, -7.015145817999787e-01, -7.004322837390136e-01, -7.004322837390136e-01, -1.915498186144590e-01, -1.943294883464658e-01, -8.145203372216319e-01, -1.525454828106496e-01, -1.650518315700589e-01, -1.650518315700590e-01, -1.068834702394402e-02, -1.113554025539319e-02, -4.668545259333688e-02, -9.378129052718081e-03, -9.615469927176793e-03, -9.615469927176825e-03, -6.331671888069211e+00, -6.334829975319453e+00, -6.332028849769242e+00, -6.334808705558101e+00, -6.333163842224070e+00, -6.333163842224070e+00, -2.111879127914529e+00, -2.138902050744214e+00, -2.103096468698069e+00, -2.127547462426211e+00, -2.131006549274348e+00, -2.131006549274348e+00, -6.533850511247709e-01, -7.313546026087617e-01, -5.996803675687100e-01, -6.458680555345341e-01, -6.668982638694726e-01, -6.668982638694726e-01, -1.106190711492987e-01, -1.908765941198165e-01, -1.041016907935269e-01, -2.167932787052550e+00, -1.222885212829639e-01, -1.222885212829639e-01, -1.397610924553300e-02, -1.227778103787343e-02, -6.718829792063044e-03, -7.365290250232820e-02, -9.926354831271220e-03, -9.926354831271239e-03, -6.789936311658390e-01, -7.015372379030238e-01, -6.959482800880209e-01, -6.889230288686007e-01, -6.926885335183994e-01, -6.926885335183994e-01, -6.636536636501597e-01, -5.695764624723240e-01, -6.062492757306365e-01, -6.385733487701323e-01, -6.222524577646016e-01, -6.222524577646016e-01, -7.658531554533821e-01, -2.402299287207032e-01, -2.873532869315021e-01, -3.777210025269092e-01, -3.297251188784079e-01, -3.297251188784077e-01, -5.004051237409273e-01, -4.189183662167651e-02, -6.000574377321188e-02, -3.704375815942027e-01, -8.710136550054687e-02, -8.710136550054684e-02, -2.272965310024852e-02, -8.623101366096311e-03, -5.243228029756077e-03, -7.912591930459956e-02, -8.164571640750873e-03, -8.164571640750863e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_js18_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_js18", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-7.374538211730859e-09, -7.374422835616928e-09, -7.372287944750652e-09, -7.373947150108517e-09, -7.373309924444905e-09, -7.373309924444905e-09, -1.041248357920563e-05, -1.041544458988583e-05, -1.049936894091681e-05, -1.052229600526379e-05, -1.049874334139055e-05, -1.049874334139055e-05, -2.330285689557544e-03, -2.332564508780724e-03, -2.474275205580827e-03, -2.977352541370553e-03, -2.807351760174704e-03, -2.807351760174704e-03, -8.042404879323513e-01, -7.909328986664929e-01, 1.160610935275418e-04, -1.090006496821084e+00, -1.048944391418930e+00, -1.048944391418931e+00, -3.833420949727523e+03, -3.403020285359351e+03, -3.205842680921705e+01, -9.657835462326739e+03, -7.353150933817684e+03, -7.353150933817668e+03, -1.050666295838790e-06, -1.041427400108744e-06, -1.047761269539151e-06, -1.039686442116863e-06, -1.047281886901173e-06, -1.047281886901173e-06, -8.707686579510578e-05, -8.365950605305248e-05, -8.461518657293985e-05, -8.139709683703491e-05, -8.647577160009538e-05, -8.647577160009538e-05, -2.352643589953778e-02, -2.035316790521768e-02, -2.262312817181414e-02, -1.437352720559824e-02, -2.387034274615097e-02, -2.387034274615097e-02, -2.489353441352022e+00, -5.788246100549368e-01, -2.954746841014994e+00, -1.062800591338947e-04, -2.334962175915638e+00, -2.334962175915640e+00, 8.118896730730106e+03, -3.537153581071640e+03, -3.987525028566128e+04, -8.550914244853985e+00, -9.505718492350921e+03, -9.505718492350983e+03, -1.818188033097995e-01, -5.472250888164309e-02, -7.855411200764625e-02, -1.123113000024119e-01, -9.334756832827990e-02, -9.334756832827988e-02, -1.095785766905430e-01, -2.216119353330465e-02, -2.349307031490002e-02, -3.308786137849434e-02, -2.701234214388055e-02, -2.701234214388055e-02, -1.275862625081622e-02, -2.936807565615805e-01, -1.864884647255501e-01, -1.135140839232061e-01, -1.461070084727514e-01, -1.461070084727513e-01, -4.300092551940621e-02, -4.143191586313606e+01, -1.483394201821526e+01, -1.668656719196698e-01, -5.957131904431534e+00, -5.957131904431540e+00, -3.008736582797884e+02, 4.402874324265686e+05, -7.568508074202306e+04, -8.044738599968767e+00, -2.031051405732675e+04, -2.031051405732677e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_js18_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_js18", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([7.804286873105045e-04, 7.804252307177012e-04, 7.801810489083960e-04, 7.802245649424921e-04, 7.802345142192015e-04, 7.802345142192015e-04, 2.283812492060576e-03, 2.285161110082897e-03, 2.324520480208708e-03, 2.344071344970282e-03, 2.327207978961372e-03, 2.327207978961372e-03, -4.061963570979727e-03, -4.048332250142538e-03, -3.265114108155766e-03, -1.596712040819689e-03, -2.205627486166168e-03, -2.205627486166168e-03, 3.781353206697476e-02, 3.856384669449163e-02, -8.319980294708519e-03, 1.522395874614953e-02, 2.599890452528537e-02, 2.599890452528537e-02, 7.900187941895396e-03, 8.040584432144338e-03, 9.585634269128044e-03, 2.504611031509777e-03, 4.790314905068717e-03, 4.790314905068660e-03, 1.096885249949842e-03, 1.082192248999262e-03, 1.090460114797226e-03, 1.077672843374483e-03, 1.092444788114413e-03, 1.092444788114413e-03, 6.131192704954895e-03, 6.038503576573128e-03, 5.830390863344665e-03, 5.717571683086415e-03, 6.241596254790145e-03, 6.241596254790145e-03, 4.290983722743934e-02, 2.968137084162144e-02, 2.397913388151784e-02, 9.456109912421689e-03, 4.629387560009074e-02, 4.629387560009074e-02, 1.198570836022712e-02, 2.720101618125024e-02, 1.047378047102502e-02, 2.575957001288961e-03, 2.313321139646368e-02, 2.313321139646371e-02, -3.966865085122085e-03, -1.255482356135141e-03, 3.813612318822521e-03, 8.547528250854329e-03, -7.448082278511243e-04, -7.448082278510798e-04, 3.392272865902212e-01, 1.373707637453251e-01, 1.886327713934589e-01, 2.509904758872263e-01, 2.173598256867931e-01, 2.173598256867935e-01, 8.328708599946692e-02, 2.489330647094387e-02, 3.374115471700281e-02, 6.123218998981111e-02, 4.438487880097100e-02, 4.438487880097108e-02, 1.947040804744061e-02, 2.829037540102230e-02, 3.015838878927313e-02, 3.827773602341248e-02, 3.572801674356683e-02, 3.572801674356683e-02, 3.818640995911193e-02, 1.335818130674464e-02, 8.946934621828008e-03, 5.315916266666407e-02, 1.584902979072999e-02, 1.584902979073007e-02, -2.221867094023890e-03, -3.710220080106429e-03, 4.193750325547031e-03, 2.097502729991197e-02, 1.703465310058286e-03, 1.703465310058294e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
