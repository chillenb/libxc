
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_pjs18_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_pjs18", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.206630651459527e+01, -2.206635997569739e+01, -2.206666120245688e+01, -2.206586620521328e+01, -2.206627370149020e+01, -2.206627370149020e+01, -3.266000840057279e+00, -3.266040883512348e+00, -3.267352511114550e+00, -3.269028126761705e+00, -3.267695379680564e+00, -3.267695379680564e+00, -4.606556076374819e-01, -4.603457013171651e-01, -4.553286225440769e-01, -4.662495357871541e-01, -4.648882862059635e-01, -4.648882862059635e-01, -5.455512925658802e-02, -5.591278472081407e-02, -4.558547902047064e-01, -3.030871961303169e-02, -5.147564159355122e-02, -5.147564159355116e-02, -6.505635799857976e-06, -7.473137321489033e-06, -1.163576141348296e-03, -1.256365041389134e-06, -3.596822255673885e-06, -3.596822255673879e-06, -5.225974247709126e+00, -5.226523327334609e+00, -5.226024489109646e+00, -5.226508259505732e+00, -5.226239292917102e+00, -5.226239292917102e+00, -1.914432579438341e+00, -1.930663329314670e+00, -1.912097767826054e+00, -1.926584937210259e+00, -1.924613305940947e+00, -1.924613305940947e+00, -4.203358173170669e-01, -4.637724373974607e-01, -3.695861974884233e-01, -3.795656793691770e-01, -4.304239143043467e-01, -4.304239143043467e-01, -1.379433362306610e-02, -5.900934649382832e-02, -1.136411539514277e-02, -1.692861591593244e+00, -1.931205474471766e-02, -1.931205474471766e-02, -4.903196319485979e-07, -1.081873295257289e-06, -3.544199018238468e-07, -3.990868290103445e-03, -8.338291535555308e-07, -8.338291535555323e-07, -4.286085494667855e-01, -4.253447245160867e-01, -4.264271843071062e-01, -4.273696473070072e-01, -4.268907586941005e-01, -4.268907586941005e-01, -4.109377237080109e-01, -3.413309877551010e-01, -3.594500449518016e-01, -3.783520027126721e-01, -3.683629659319506e-01, -3.683629659319506e-01, -4.899261919613178e-01, -9.349323045106642e-02, -1.269170008949903e-01, -1.914579328119860e-01, -1.567697268354234e-01, -1.567697268354234e-01, -2.967373895864316e-01, -1.066121480124486e-03, -2.404242620324279e-03, -1.781890054288705e-01, -7.238892417419538e-03, -7.238892417419540e-03, -1.761313910872538e-05, -1.238483231754414e-08, -1.678843027947307e-07, -6.239896021784026e-03, -6.311187600961632e-07, -6.311187600961608e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_pjs18_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_pjs18", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.779286085821603e+01, -2.779288651899675e+01, -2.779299946527030e+01, -2.779298717530002e+01, -2.779340450774238e+01, -2.779357830283756e+01, -2.779184073681868e+01, -2.779158471598470e+01, -2.779294568674691e+01, -2.779235333307470e+01, -2.779294568674691e+01, -2.779235333307470e+01, -4.212699595181717e+00, -4.212929545837681e+00, -4.212802471707007e+00, -4.213028166045514e+00, -4.215189817445163e+00, -4.215763771893424e+00, -4.213037956280462e+00, -4.213461025942464e+00, -4.211728898226691e+00, -4.215666529641117e+00, -4.211728898226691e+00, -4.215666529641117e+00, -6.162702974343247e-01, -6.236067729850500e-01, -6.137447763299858e-01, -6.225357085841177e-01, -5.808761541027067e-01, -5.719163350882908e-01, -5.863531957218633e-01, -5.903219012140465e-01, -6.345490792849025e-01, -5.435142039648737e-01, -6.345490792849025e-01, -5.435142039648737e-01, -6.639750928448698e-02, -7.315728006072296e-02, -6.842647455909329e-02, -7.630969952294304e-02, -6.567561757651583e-01, -7.293375717675059e-01, -3.316529686185442e-02, -3.521569973979563e-02, -7.244984921495122e-02, -1.362654079913554e-02, -7.244984921495118e-02, -1.362654079913550e-02, -4.293838229285856e-06, -5.155272311424061e-06, -4.967300501233118e-06, -6.118186566702100e-06, -7.504017269498656e-04, -8.919485380031660e-04, -8.823491951213497e-07, -8.407556543003828e-07, -3.023267477183624e-06, -6.004815620156502e-07, -3.023267477183624e-06, -6.004815620156505e-07, -6.735319157926725e+00, -6.733585991606288e+00, -6.738733051339510e+00, -6.736884176873834e+00, -6.735510322352518e+00, -6.733700423073424e+00, -6.738439512169684e+00, -6.736696542842345e+00, -6.737067046104485e+00, -6.735242636822243e+00, -6.737067046104485e+00, -6.735242636822243e+00, -2.178587137879331e+00, -2.179079883957323e+00, -2.202791013895910e+00, -2.202533249599039e+00, -2.156652007470541e+00, -2.163370675903193e+00, -2.177606941227908e+00, -2.184575813428890e+00, -2.209014477653182e+00, -2.193764779123111e+00, -2.209014477653182e+00, -2.193764779123111e+00, -5.862789577099472e-01, -5.846437565732653e-01, -6.843897298389120e-01, -6.852162527923125e-01, -5.051350805366928e-01, -5.357985920061396e-01, -5.676002263710749e-01, -5.923973041728928e-01, -6.225598613295082e-01, -5.805527128288515e-01, -6.225598613295082e-01, -5.805527128288515e-01, -1.272132288931635e-02, -1.302552277406476e-02, -6.546335340792515e-02, -6.614482985296713e-02, -9.590828358321042e-03, -1.121707662783021e-02, -2.430957460776658e+00, -2.429878394517965e+00, -1.892917712402735e-02, -2.274387773089389e-02, -1.892917712402736e-02, -2.274387773089389e-02, -3.463615140428040e-07, -3.805665750725123e-07, -7.770361264071312e-07, -7.910713698906592e-07, -4.094614571432777e-07, -4.889967974802042e-07, -3.387931113001409e-03, -3.531874774885359e-03, -3.660869391848966e-07, -1.088080437295910e-06, -3.660869391848975e-07, -1.088080437295911e-06, -6.253620260277644e-01, -6.285337743378662e-01, -6.153242621960640e-01, -6.185861682630633e-01, -6.189775226124969e-01, -6.222301026411008e-01, -6.219288723229929e-01, -6.251118005341740e-01, -6.204661055894496e-01, -6.236823619224445e-01, -6.204661055894496e-01, -6.236823619224445e-01, -6.053547025125154e-01, -6.079348182267883e-01, -4.464876782168056e-01, -4.495960128279299e-01, -4.901740679902264e-01, -4.936794849599034e-01, -5.369389520675852e-01, -5.396172588461814e-01, -5.131193074769054e-01, -5.158920024914595e-01, -5.131193074769054e-01, -5.158920024914595e-01, -7.236083745888949e-01, -7.258731294853233e-01, -1.079929965310437e-01, -1.092852258505697e-01, -1.547364503644749e-01, -1.579948671573897e-01, -2.641652081941197e-01, -2.665572856275492e-01, -2.051669774231937e-01, -2.052333418878683e-01, -2.051669774231936e-01, -2.052333418878683e-01, -3.936874560786974e-01, -3.987713059348887e-01, -7.207678836574521e-04, -7.324265534216407e-04, -1.686478961535794e-03, -1.871694786881674e-03, -2.553694691373452e-01, -2.638542807821495e-01, -6.526243870337534e-03, -7.784074766111147e-03, -6.526243870337513e-03, -7.784074766111163e-03, -1.083749665352344e-05, -1.201221063401903e-05, -1.555151241359888e-08, -1.564430089761616e-08, -1.508065958051443e-07, -1.824362433451079e-07, -5.877245390321629e-03, -6.251314080305880e-03, -3.509013340242345e-07, -8.405681644188606e-07, -3.509013340242334e-07, -8.405681644188574e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_pjs18_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_pjs18", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.549641518071347e-08, 0.000000000000000e+00, -1.549586902898719e-08, -1.549624322113256e-08, 0.000000000000000e+00, -1.549574416602280e-08, -1.549552607567857e-08, 0.000000000000000e+00, -1.549476342724116e-08, -1.549746609995307e-08, 0.000000000000000e+00, -1.549723643906591e-08, -1.549631864467228e-08, 0.000000000000000e+00, -1.549612551480520e-08, -1.549631864467228e-08, 0.000000000000000e+00, -1.549612551480520e-08, -2.566542933501539e-05, 0.000000000000000e+00, -2.568210792978855e-05, -2.566401549639331e-05, 0.000000000000000e+00, -2.568267472586832e-05, -2.565324790317807e-05, 0.000000000000000e+00, -2.565423785723561e-05, -2.558296945235693e-05, 0.000000000000000e+00, -2.559576619987022e-05, -2.568344141237596e-05, 0.000000000000000e+00, -2.558326230429049e-05, -2.568344141237596e-05, 0.000000000000000e+00, -2.558326230429049e-05, -1.585892175486430e-02, 0.000000000000000e+00, -1.589523435589195e-02, -1.584780621110177e-02, 0.000000000000000e+00, -1.590857210081521e-02, -1.578716135668594e-02, 0.000000000000000e+00, -1.555536577812002e-02, -1.490984708573101e-02, 0.000000000000000e+00, -1.490460452199505e-02, -1.601608694549388e-02, 0.000000000000000e+00, -1.387691096203947e-02, -1.601608694549388e-02, 0.000000000000000e+00, -1.387691096203947e-02, -6.144591791615213e-01, 0.000000000000000e+00, -5.704198383720336e-01, -6.077047618421013e-01, 0.000000000000000e+00, -5.575921011329641e-01, -1.338322875237453e-02, 0.000000000000000e+00, -1.205144038665622e-02, -9.311209485738831e-01, 0.000000000000000e+00, -8.932577547153732e-01, -5.610068814424382e-01, 0.000000000000000e+00, -1.419158492738313e+00, -5.610068814424374e-01, 0.000000000000000e+00, -1.419158492738313e+00, -3.792400293477206e+00, 0.000000000000000e+00, -3.780155590636020e+00, -3.784684063007588e+00, 0.000000000000000e+00, -3.770241964129233e+00, -2.777208998170624e+00, 0.000000000000000e+00, -2.714449328547011e+00, -3.865156801531440e+00, 0.000000000000000e+00, -3.866387822652245e+00, -3.812939312914640e+00, 0.000000000000000e+00, -3.891076248863883e+00, -3.812939312914639e+00, 0.000000000000000e+00, -3.891076248863883e+00, -4.363711818924178e-06, 0.000000000000000e+00, -4.367633376275039e-06, -4.360871914408675e-06, 0.000000000000000e+00, -4.364888651472776e-06, -4.363444218896444e-06, 0.000000000000000e+00, -4.367459823311367e-06, -4.361011576396038e-06, 0.000000000000000e+00, -4.364970276807914e-06, -4.362345636361213e-06, 0.000000000000000e+00, -4.366272879783858e-06, -4.362345636361213e-06, 0.000000000000000e+00, -4.366272879783858e-06, -1.706730549307617e-04, 0.000000000000000e+00, -1.705016691104551e-04, -1.662834239960280e-04, 0.000000000000000e+00, -1.662740502500739e-04, -1.700478581751458e-04, 0.000000000000000e+00, -1.701290576140349e-04, -1.662738302354393e-04, 0.000000000000000e+00, -1.662503046931528e-04, -1.684800550214508e-04, 0.000000000000000e+00, -1.683150511854896e-04, -1.684800550214508e-04, 0.000000000000000e+00, -1.683150511854896e-04, -2.190075366505472e-02, 0.000000000000000e+00, -2.201671206607617e-02, -1.641651150993764e-02, 0.000000000000000e+00, -1.625421971421861e-02, -3.313101183761027e-02, 0.000000000000000e+00, -2.834404031527112e-02, -3.140058639946067e-02, 0.000000000000000e+00, -2.676503446094960e-02, -1.880335481580882e-02, 0.000000000000000e+00, -2.307477027696348e-02, -1.880335481580882e-02, 0.000000000000000e+00, -2.307477027696350e-02, -1.387631658888106e+00, 0.000000000000000e+00, -1.380458666904555e+00, -5.190037764995152e-01, 0.000000000000000e+00, -5.145371499074956e-01, -1.557880777817475e+00, 0.000000000000000e+00, -1.472810647092299e+00, -3.004020875223269e-04, 0.000000000000000e+00, -3.008996821645756e-04, -1.219181477814206e+00, 0.000000000000000e+00, -1.176079821726739e+00, -1.219181477814206e+00, 0.000000000000000e+00, -1.176079821726739e+00, -3.896251295748153e+00, 0.000000000000000e+00, -3.892062212090265e+00, -3.872498884074181e+00, 0.000000000000000e+00, -3.870343310491742e+00, -3.905913684235682e+00, 0.000000000000000e+00, -3.902949139104163e+00, -2.167969937458164e+00, 0.000000000000000e+00, -2.140559419844054e+00, -3.904598893863995e+00, 0.000000000000000e+00, -3.876306244788536e+00, -3.904598893863995e+00, 0.000000000000000e+00, -3.876306244788542e+00, -1.695411993483231e-02, 0.000000000000000e+00, -1.669206815083856e-02, -1.887900861903556e-02, 0.000000000000000e+00, -1.858458045898019e-02, -1.829014363782029e-02, 0.000000000000000e+00, -1.800036960941256e-02, -1.773061755413869e-02, 0.000000000000000e+00, -1.745879149529914e-02, -1.801883512643539e-02, 0.000000000000000e+00, -1.773768477530039e-02, -1.801883512643539e-02, 0.000000000000000e+00, -1.773768477530039e-02, -1.837732407409761e-02, 0.000000000000000e+00, -1.813491609401218e-02, -3.565212857720501e-02, 0.000000000000000e+00, -3.518825963132564e-02, -3.192132985872951e-02, 0.000000000000000e+00, -3.146223797560140e-02, -2.761525149574294e-02, 0.000000000000000e+00, -2.727137599658281e-02, -2.995983721826566e-02, 0.000000000000000e+00, -2.955843760364026e-02, -2.995983721826566e-02, 0.000000000000000e+00, -2.955843760364026e-02, -1.463045949950078e-02, 0.000000000000000e+00, -1.433787036294747e-02, -3.160213203332171e-01, 0.000000000000000e+00, -3.124559914970281e-01, -2.173282428551598e-01, 0.000000000000000e+00, -2.131381364133964e-01, -1.198650292310856e-01, 0.000000000000000e+00, -1.182107288330247e-01, -1.613805277970680e-01, 0.000000000000000e+00, -1.618982104730280e-01, -1.613805277970682e-01, 0.000000000000000e+00, -1.618982104730281e-01, -4.966529850445867e-02, 0.000000000000000e+00, -4.845627612547479e-02, -2.777748998804748e+00, 0.000000000000000e+00, -2.771462157382661e+00, -2.427368943853203e+00, 0.000000000000000e+00, -2.387165336268605e+00, -1.421350958892852e-01, 0.000000000000000e+00, -1.316536664674469e-01, -1.848573282955567e+00, 0.000000000000000e+00, -1.798741710315007e+00, -1.848573282955567e+00, 0.000000000000000e+00, -1.798741710315008e+00, -3.707552095457025e+00, 0.000000000000000e+00, -3.698548644959021e+00, -3.940731341115383e+00, 0.000000000000000e+00, -3.942111004692945e+00, -3.917403213800061e+00, 0.000000000000000e+00, -3.914894122118325e+00, -1.927016009965696e+00, 0.000000000000000e+00, -1.890430074220805e+00, -3.909777506686112e+00, 0.000000000000000e+00, -3.884236105458871e+00, -3.909777506686111e+00, 0.000000000000000e+00, -3.884236105458870e+00])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_pjs18_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_pjs18", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([8.026514606833875e-04, 8.026530092681186e-04, 8.026553308243993e-04, 8.026558170262937e-04, 8.026585586547220e-04, 8.026630051493840e-04, 8.026150870908051e-04, 8.026075227630457e-04, 8.026542311361845e-04, 8.026229674438595e-04, 8.026542311361845e-04, 8.026229674438595e-04, 4.497378645332933e-03, 4.499082007218169e-03, 4.497570509983002e-03, 4.499387142680979e-03, 4.503372124254336e-03, 4.504869372565928e-03, 4.492608578470290e-03, 4.494351511691378e-03, 4.497471097729213e-03, 4.499370095615214e-03, 4.497471097729213e-03, 4.499370095615214e-03, 1.666438545182751e-02, 1.692523698037061e-02, 1.657855660871298e-02, 1.689704053165910e-02, 1.549520908636588e-02, 1.509823016805052e-02, 1.522362710427975e-02, 1.535589280895587e-02, 1.730304865220846e-02, 1.324325284999154e-02, 1.730304865220846e-02, 1.324325284999154e-02, 1.101252347632238e-02, 1.175900138831954e-02, 1.134908490331441e-02, 1.221050597763616e-02, 1.520656557853329e-02, 1.593432854200389e-02, 6.698250035902457e-03, 6.845002026740224e-03, 1.151197740068819e-02, 3.578807829142458e-03, 1.151197740068817e-02, 3.578807829142461e-03, 1.845081234229204e-06, 2.208382557401126e-06, 2.119855068719204e-06, 2.598501016693437e-06, 2.849255420049841e-04, 3.297899671731159e-04, 4.065454455020249e-07, 3.866588259228260e-07, 1.315268377047866e-06, 2.463131269271924e-07, 1.315268377047865e-06, 2.463131269271924e-07, 3.509189858508151e-03, 3.509802509743411e-03, 3.513997138883537e-03, 3.514449484516416e-03, 3.509429138322739e-03, 3.509942336478586e-03, 3.513554268393323e-03, 3.514164068992386e-03, 3.511672857192164e-03, 3.512139398776222e-03, 3.511672857192164e-03, 3.512139398776222e-03, 5.750431779878462e-03, 5.750556615706393e-03, 5.766698074573908e-03, 5.766856158160094e-03, 5.634598585650759e-03, 5.669115474402681e-03, 5.649785220516144e-03, 5.683065856824564e-03, 5.844206342835093e-03, 5.771415004488839e-03, 5.844206342835093e-03, 5.771415004488839e-03, 2.210992597354753e-02, 2.215898235174097e-02, 2.584386306704456e-02, 2.590824419871251e-02, 2.235511238103558e-02, 2.242561256923619e-02, 2.708943732877403e-02, 2.654378478497954e-02, 2.227315533154669e-02, 2.272824660821664e-02, 2.227315533154669e-02, 2.272824660821664e-02, 3.109222296507052e-03, 3.184274476962045e-03, 9.610559892597157e-03, 9.677349743625817e-03, 2.524282107389931e-03, 2.831584808956598e-03, 1.050068725292069e-02, 1.050679921359171e-02, 4.257610779298674e-03, 5.007219851709072e-03, 4.257610779298674e-03, 5.007219851709072e-03, 1.726708268673463e-07, 1.936300576054552e-07, 3.626540438287546e-07, 3.791578432008519e-07, 1.528790242839699e-07, 1.815130185406807e-07, 1.080825435649362e-03, 1.093727583223520e-03, 1.626433672659420e-07, 4.193792613025662e-07, 1.626433672659420e-07, 4.193792613025670e-07, 2.889113497235548e-02, 2.886247823815349e-02, 2.727632147613453e-02, 2.726645466517193e-02, 2.781177255090890e-02, 2.779946694183891e-02, 2.828440280948874e-02, 2.825964520023541e-02, 2.804532021050384e-02, 2.802670034689098e-02, 2.804532021050384e-02, 2.802670034689098e-02, 2.988378807380249e-02, 2.983841275107491e-02, 2.040703377123215e-02, 2.045047518736115e-02, 2.252175048483181e-02, 2.257797733184787e-02, 2.508665819299775e-02, 2.508251639573567e-02, 2.376748114175414e-02, 2.376557318496195e-02, 2.376748114175414e-02, 2.376557318496195e-02, 2.486095821286419e-02, 2.494074392843078e-02, 1.263043910637782e-02, 1.272516210096239e-02, 1.562831764219723e-02, 1.585914300498480e-02, 2.174376640728409e-02, 2.180282112099556e-02, 1.872192897683808e-02, 1.877754295312076e-02, 1.872192897683809e-02, 1.877754295312076e-02, 2.097685625919526e-02, 2.108374714526813e-02, 2.695285739404665e-04, 2.745276784112019e-04, 5.880028031616512e-04, 6.410053951705938e-04, 2.385705886479008e-02, 2.410028412580754e-02, 1.838491132003344e-03, 2.135654665380864e-03, 1.838491132003345e-03, 2.135654665380865e-03, 5.297134556407138e-06, 5.882649242226118e-06, 7.159208916734742e-09, 7.210403607296584e-09, 6.006358373871157e-08, 7.223318205442185e-08, 1.677875317498543e-03, 1.741439260775544e-03, 1.384730590102438e-07, 3.234110004962988e-07, 1.384730590102434e-07, 3.234110004962979e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
