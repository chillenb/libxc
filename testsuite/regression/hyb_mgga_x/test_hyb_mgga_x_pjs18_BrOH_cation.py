
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_pjs18_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_pjs18", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.077004265042049e+01, -2.077013549664940e+01, -2.077055245730365e+01, -2.145648708588120e+01, -2.145706938882515e+01, -2.214433738453420e+01, -3.228700459744027e+00, -3.577356361188747e+00, -3.576338888038669e+00, -3.577091031777174e+00, -3.576618519315339e+00, -3.228004614783832e+00, -3.379104327418427e-01, -4.518297773663876e-01, -5.566990441822752e-01, -4.371614324465806e-01, -3.116107508065050e-01, -5.598482452967702e-01, -4.571671154414157e-02, -4.743071173339027e-02, -5.008592128339555e-01, -3.339594209602677e-02, -5.374626155305640e-02, -5.185481072342129e-02, -6.544807271251743e-06, -5.297327639164641e-06, -8.076022360038512e-04, -1.377379879566388e-06, -3.711035376991463e-06, -3.711035376991463e-06, -5.227285682429642e+00, -5.227818623370162e+00, -5.227308579370465e+00, -5.227779295018959e+00, -5.118431198555767e+00, -5.118526542349684e+00, -1.952651986566821e+00, -1.963230268199664e+00, -1.945267920088475e+00, -1.954469967317686e+00, -1.732111076592922e+00, -1.962064832230880e+00, -4.123831493510088e-01, -4.825258665074417e-01, -3.988380202989559e-01, -4.145722230961248e-01, -4.240330317337944e-01, -4.466900346732115e-01, -1.522789521400040e-02, -4.395664048112891e-02, -1.263655209494251e-02, -1.837100341993692e+00, -2.040003510384699e-02, -2.040003510384699e-02, -4.398393911827505e-07, -1.333517303357964e-06, -3.762262676130496e-07, -2.740187819531343e-03, -8.963606980437841e-07, -8.963606980437842e-07, -4.303324696906077e-01, -4.271597976757505e-01, -4.215413780169373e-01, -4.264311792517768e-01, -4.226426830769175e-01, -4.256445939457522e-01, -4.142203388790965e-01, -3.186705188143858e-01, -3.449708088585188e-01, -3.816293558002045e-01, -3.715648525854498e-01, -3.577754966267992e-01, -4.978131919338080e-01, -9.497353612336037e-02, -1.067538283716492e-01, -1.813847840255835e-01, -1.630435398666270e-01, -1.404369338676442e-01, -3.069120979031073e-01, -1.750742043103823e-04, -2.655606071736652e-03, -1.875887761696152e-01, -7.828837409124054e-03, -7.828837409124045e-03, -2.558073927594865e-06, -2.429135244558420e-08, -6.779885056569222e-08, -2.121661217733402e-03, -6.646132274629866e-07, -3.542220388480838e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_pjs18_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_pjs18", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.960511003182976e+01, -2.960498113591180e+01, -2.960519299259628e+01, -2.960504142326707e+01, -2.960548238041747e+01, -2.960544939689419e+01, -2.960454399190683e+01, -2.771498629093191e+01, -2.960515795720489e+01, -2.771579538269843e+01, -2.771604034570385e+01, -2.771579538269843e+01, -4.061430633133028e+00, -4.776016388190871e+00, -4.061534878391548e+00, -4.061362874561085e+00, -4.063545253396760e+00, -4.063950223277329e+00, -4.063171127084517e+00, -4.063233035646411e+00, -4.060519082379521e+00, -4.065128196830581e+00, -4.775329997148650e+00, -4.065128196830581e+00, -7.745605098212557e-01, -7.775004263159377e-01, -7.733001417687151e-01, -6.121457530115488e-01, -5.863191738881850e-01, -5.803379276105697e-01, -5.909044666387525e-01, -7.601304899932737e-01, -7.845571528325634e-01, -7.304323675843661e-01, -6.195588870081917e-01, -5.595807712184551e-01, -7.507709751249854e-02, -7.314690438709770e-02, -7.737289096418233e-02, -7.627812945436911e-02, -7.011180794591946e-01, -9.921061591027263e-01, -3.398961280731459e-02, -3.564079631880575e-02, -7.253623057280950e-02, -1.455784535358683e-02, -7.253623057280943e-02, -1.428049215582895e-02, -4.294439108905607e-06, -5.155602555966019e-06, -4.972888814838401e-06, -6.119045080619596e-06, -7.312913021521936e-04, -9.030031963261712e-04, -8.832703017892192e-07, -8.414883627424681e-07, -3.024442065016626e-06, -6.008009624381393e-07, -3.024442065016627e-06, -6.008009624381393e-07, -6.733757871058427e+00, -6.732114652794925e+00, -6.737186145495675e+00, -6.735426891364346e+00, -6.733985592496663e+00, -6.732255329156715e+00, -6.736925809650718e+00, -6.735262924333722e+00, -7.047849583762546e+00, -6.733773834635927e+00, -6.735486021612757e+00, -7.046090413080912e+00, -2.175661194955210e+00, -2.176191475382817e+00, -2.199469542982615e+00, -2.199285737242603e+00, -2.155441269445991e+00, -2.161712227434588e+00, -2.175982397111445e+00, -2.182563774966867e+00, -2.204317006096764e+00, -2.631369604549414e+00, -2.204317006096764e+00, -2.190462062318753e+00, -5.720171507291558e-01, -6.310899908699127e-01, -6.606689817107769e-01, -6.624427932295408e-01, -4.858100977047691e-01, -5.179389580724663e-01, -5.296566661724351e-01, -5.585941271493832e-01, -6.095435283127008e-01, -6.234213938077867e-01, -6.095435283127008e-01, -5.650821405584819e-01, -1.303980215470982e-02, -1.337907749419247e-02, -7.455374368518565e-02, -6.651027852801533e-02, -9.885797696399707e-03, -1.148958723931292e-02, -2.270675314150312e+00, -2.269696367248186e+00, -1.917927717770410e-02, -2.289028624774524e-02, -1.917927717770410e-02, -2.289028624774524e-02, -3.463604639009649e-07, -3.818550414825809e-07, -7.785134115396660e-07, -7.929804318477445e-07, -4.094685183839683e-07, -4.889998371312054e-07, -3.479532162318790e-03, -3.547908459344542e-03, -3.667260350091572e-07, -1.088119722469080e-06, -3.667260350091580e-07, -1.088119722469081e-06, -6.230828962650723e-01, -6.263133621324778e-01, -6.128790347160560e-01, -6.161948833976663e-01, -6.255653846790895e-01, -6.286772604831613e-01, -6.267053383901778e-01, -6.227865855464949e-01, -6.261350377525428e-01, -6.292369262748831e-01, -6.261350377525428e-01, -6.213303345059888e-01, -6.010048975261940e-01, -6.037353652911028e-01, -4.453668825303412e-01, -5.026041766814481e-01, -4.879402147992589e-01, -5.334486723959828e-01, -5.332944001851643e-01, -5.359702462466155e-01, -5.099928104309293e-01, -5.128507270952305e-01, -5.099928104309293e-01, -5.480567483671583e-01, -6.918160844423457e-01, -7.436556370989416e-01, -1.082200850163778e-01, -1.095159494663562e-01, -1.828746829688624e-01, -1.580651426236220e-01, -2.991112383628897e-01, -2.618671690462914e-01, -2.041254883633245e-01, -2.041590963408361e-01, -2.041254883633245e-01, -2.381051656998918e-01, -3.888490501101645e-01, -3.941402121469340e-01, -6.999290105343842e-04, -7.108408222561044e-04, -1.722179076056780e-03, -1.908851647143323e-03, -2.489434722958270e-01, -2.590084905184233e-01, -6.623572594662492e-03, -7.868854745529614e-03, -6.623572594662460e-03, -7.868854745529582e-03, -1.077505828056319e-05, -1.194217230815338e-05, -1.556257474555055e-08, -1.565646733902537e-08, -1.510119399600097e-07, -1.827112774258337e-07, -6.061834693478534e-03, -6.461132403013392e-03, -3.510131039991773e-07, -8.405944013395759e-07, -3.510131039991763e-07, -8.430356229036330e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_pjs18_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_pjs18", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.975178548405045e-08, 0.000000000000000e+00, -1.975041498704333e-08, -1.975131420778414e-08, 0.000000000000000e+00, -1.975007294570303e-08, -1.974983727357755e-08, 0.000000000000000e+00, -1.974794839930082e-08, -1.975514474095807e-08, 0.000000000000000e+00, -1.525855275363980e-08, -1.975149727169150e-08, 0.000000000000000e+00, -1.525762214311508e-08, -1.525675185299004e-08, 0.000000000000000e+00, -1.525762214311508e-08, -1.721794492525446e-05, 0.000000000000000e+00, -4.402449707936308e-05, -1.721960202231044e-05, 0.000000000000000e+00, -1.721849130492524e-05, -1.725208685758788e-05, 0.000000000000000e+00, -1.725717152506973e-05, -1.723449453428965e-05, 0.000000000000000e+00, -1.723357999397130e-05, -1.722524527357987e-05, 0.000000000000000e+00, -1.726152240502018e-05, -4.406247247380956e-05, 0.000000000000000e+00, -1.726152240502018e-05, -3.850263603044427e-02, 0.000000000000000e+00, -3.717831716607629e-02, -3.895085635292488e-02, 0.000000000000000e+00, -8.058947881960233e-03, -8.259635348257102e-03, 0.000000000000000e+00, -8.383653723306713e-03, -8.331158298815028e-03, 0.000000000000000e+00, -4.268663323209040e-02, -3.572456591222181e-02, 0.000000000000000e+00, -5.552981339425997e-02, -7.891712694000540e-03, 0.000000000000000e+00, -8.804028445717538e-03, -1.062255276597612e+00, 0.000000000000000e+00, -5.623068950797246e-01, -1.022768934298160e+00, 0.000000000000000e+00, -5.473278634598150e-01, -3.367864944236591e-03, 0.000000000000000e+00, -2.969324223561947e-02, -8.220006414608082e-01, 0.000000000000000e+00, -8.312566444611954e-01, -5.335181327294204e-01, 0.000000000000000e+00, -1.202580499027049e+00, -5.335181327294211e-01, 0.000000000000000e+00, -3.622021953188587e+00, -3.791665314693609e+00, 0.000000000000000e+00, -3.779819334985552e+00, -3.357836515996645e+00, 0.000000000000000e+00, -3.769470974230698e+00, -4.439996160589844e+00, 0.000000000000000e+00, -2.672823855976850e+00, -3.860707137400290e+00, 0.000000000000000e+00, -3.862684625024154e+00, -3.810959575263934e+00, 0.000000000000000e+00, -3.885775786108877e+00, -3.810959575263934e+00, 0.000000000000000e+00, -3.885775786108872e+00, -4.359339298060690e-06, 0.000000000000000e+00, -4.363507647201375e-06, -4.356569071237256e-06, 0.000000000000000e+00, -4.360829131203535e-06, -4.359175925743312e-06, 0.000000000000000e+00, -4.363408762129722e-06, -4.356798829700552e-06, 0.000000000000000e+00, -4.360975328062995e-06, -5.010293115081582e-06, 0.000000000000000e+00, -4.362167804531425e-06, -4.357933048218278e-06, 0.000000000000000e+00, -5.015275421835548e-06, -1.564886005449005e-04, 0.000000000000000e+00, -1.567803748110929e-04, -1.544887802197961e-04, 0.000000000000000e+00, -1.548293755441206e-04, -1.579877516238934e-04, 0.000000000000000e+00, -1.578505272809626e-04, -1.563243554571507e-04, 0.000000000000000e+00, -1.561429773783530e-04, -1.542431658381043e-04, 0.000000000000000e+00, -4.643393568191571e-04, -1.542431658381043e-04, 0.000000000000000e+00, -1.556329578381036e-04, -1.917114238005831e-02, 0.000000000000000e+00, -2.786640902096489e-02, -1.493518457686233e-02, 0.000000000000000e+00, -1.491047219729279e-02, -2.501885836375295e-02, 0.000000000000000e+00, -2.293191534026305e-02, -2.334253732718299e-02, 0.000000000000000e+00, -2.115450041762977e-02, -1.700567488346594e-02, 0.000000000000000e+00, -2.847934646623430e-02, -1.700567488346595e-02, 0.000000000000000e+00, -2.010410652630128e-02, -1.306178685574515e+00, 0.000000000000000e+00, -1.291480745032107e+00, -1.478404379600609e+00, 0.000000000000000e+00, -4.944561302024562e-01, -1.457284941970621e+00, 0.000000000000000e+00, -1.389506071073521e+00, -2.144125785537206e-04, 0.000000000000000e+00, -2.148194738469621e-04, -1.160621984319285e+00, 0.000000000000000e+00, -1.131897092725563e+00, -1.160621984319286e+00, 0.000000000000000e+00, -1.131897092725562e+00, -4.551686775878926e+00, 0.000000000000000e+00, -3.880119987553221e+00, -3.864160071566245e+00, 0.000000000000000e+00, -3.860772367138269e+00, -3.904307467685725e+00, 0.000000000000000e+00, -3.901223830403643e+00, -2.064740877419682e+00, 0.000000000000000e+00, -3.660152258622627e+00, -3.891659793815843e+00, 0.000000000000000e+00, -3.875674116355068e+00, -3.891659793815845e+00, 0.000000000000000e+00, -3.875674116355065e+00, -1.728649242195231e-02, 0.000000000000000e+00, -1.701698098398672e-02, -1.894185903679264e-02, 0.000000000000000e+00, -1.865061252697617e-02, -1.736639942121469e-02, 0.000000000000000e+00, -1.709734211682362e-02, -1.689231878897269e-02, 0.000000000000000e+00, -1.767419625983796e-02, -1.712877277038100e-02, 0.000000000000000e+00, -1.686951518849924e-02, -1.712877277038100e-02, 0.000000000000000e+00, -1.791471097591784e-02, -1.917486854581318e-02, 0.000000000000000e+00, -1.890743182949866e-02, -3.499086550821015e-02, 0.000000000000000e+00, -5.315805748265089e-02, -3.121327388998342e-02, 0.000000000000000e+00, -3.856155027947351e-02, -2.709220280157038e-02, 0.000000000000000e+00, -2.676089755721516e-02, -2.925615540885388e-02, 0.000000000000000e+00, -2.889180330582950e-02, -2.925615540885388e-02, 0.000000000000000e+00, -3.311390380951849e-02, -1.255901668475064e-02, 0.000000000000000e+00, -1.489697024095572e-02, -3.073955763686152e-01, 0.000000000000000e+00, -3.036460777257095e-01, -5.272151189440154e-01, 0.000000000000000e+00, -2.002105392887867e-01, -1.871293111150673e-01, 0.000000000000000e+00, -1.006955234019569e-01, -1.471068259857723e-01, 0.000000000000000e+00, -1.475528557960963e-01, -1.471068259857725e-01, 0.000000000000000e+00, -3.051588047981217e-01, -4.465302937477653e-02, 0.000000000000000e+00, -4.402816839685393e-02, -4.345487884352294e+00, 0.000000000000000e+00, -4.382757531000582e+00, -2.362327074095037e+00, 0.000000000000000e+00, -2.324080194787781e+00, -1.220454844601176e-01, 0.000000000000000e+00, -1.196143715855476e-01, -1.778866130516349e+00, 0.000000000000000e+00, -1.734160628945555e+00, -1.778866130516353e+00, 0.000000000000000e+00, -1.734160628945568e+00, -4.743299728848792e+00, 0.000000000000000e+00, -4.773962873111676e+00, -3.935705859769851e+00, 0.000000000000000e+00, -3.935643204590421e+00, -2.419807271708245e+00, 0.000000000000000e+00, -2.361324205138058e+00, -3.064800527767249e+00, 0.000000000000000e+00, -2.892024885254305e+00, -3.902467625817334e+00, 0.000000000000000e+00, -3.883658695601788e+00, -3.902467625817332e+00, 0.000000000000000e+00, -2.099347987974334e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_pjs18_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_pjs18", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.084595964164405e-03, 1.084597360031952e-03, 1.084592462105191e-03, 1.084594815893236e-03, 1.084580567343029e-03, 1.084577965087644e-03, 1.084620135224336e-03, 7.900192996759634e-04, 1.084593910361252e-03, 7.900418858253911e-04, 7.900168021297185e-04, 7.900418858253911e-04, 3.386144270262535e-03, 6.597253447886250e-03, 3.386576655163813e-03, 3.386113014794755e-03, 3.395003051022682e-03, 3.396477264804745e-03, 3.391655945927635e-03, 3.391620631692445e-03, 3.385715757537963e-03, 3.399159003579508e-03, 6.598247104650425e-03, 3.399159003579508e-03, 2.787004694341259e-02, 2.780203513614222e-02, 2.789679216797722e-02, 1.085454102476409e-02, 1.023234523978388e-02, 1.016320741133591e-02, 1.045290217889488e-02, 2.815568745637518e-02, 2.767036958572759e-02, 2.878284739470645e-02, 1.090987833848636e-02, 9.888291884996223e-03, 1.953685461619765e-02, 1.161954030980034e-02, 1.990317319505526e-02, 1.202115867260862e-02, 6.783940650785916e-03, 2.485314886157703e-02, 6.099154320117090e-03, 6.477947135767069e-03, 1.105902116462608e-02, 3.169161706275919e-03, 1.105902116462610e-02, 6.051655755644701e-03, 1.844795170427254e-06, 2.208225354464849e-06, 2.189042283024383e-06, 2.598074001606609e-06, 3.615791053040895e-04, 3.259244888308536e-04, 4.061803182951775e-07, 3.863696940935702e-07, 1.314724373493235e-06, 2.460287857625841e-07, 1.314724373493235e-06, 2.460287857625839e-07, 3.504732305182545e-03, 3.505599674365256e-03, 3.509577231352400e-03, 3.510283685808429e-03, 3.505075694956962e-03, 3.505814311022645e-03, 3.509229449679837e-03, 3.510066052117061e-03, 4.429479288160516e-03, 3.507942260242425e-03, 3.507157242919667e-03, 4.430550370700744e-03, 5.419365651677722e-03, 5.429880944530623e-03, 5.481918423347209e-03, 5.490453595076427e-03, 5.359975516184331e-03, 5.387219633569870e-03, 5.416499621777283e-03, 5.444011739763340e-03, 5.499004957889805e-03, 1.144186571966698e-02, 5.499004957889805e-03, 5.469045980893210e-03, 1.941976310540912e-02, 3.006879554393424e-02, 2.176333722998964e-02, 2.194856472602608e-02, 1.773060119388785e-02, 1.859260453682893e-02, 1.978566844457903e-02, 2.026531487042587e-02, 2.000149655075432e-02, 3.021245432817518e-02, 2.000149655075432e-02, 1.978430374078376e-02, 2.971172472149524e-03, 3.029024824347243e-03, 2.009486571935735e-02, 9.393281308864718e-03, 2.400914895525528e-03, 2.709935880799205e-03, 7.647161380894640e-03, 7.652251281641992e-03, 4.099754341616869e-03, 4.857593467906086e-03, 4.099754341616870e-03, 4.857593467906087e-03, 1.746663740486654e-07, 1.931809712861320e-07, 3.620473047072969e-07, 3.784364068999741e-07, 1.528138386261973e-07, 1.814275275724340e-07, 1.041324229960982e-03, 1.577196929717595e-03, 1.622113672477174e-07, 4.193165389691775e-07, 1.622113672477175e-07, 4.193165389691773e-07, 2.810633287493666e-02, 2.809692595422501e-02, 2.663032411378946e-02, 2.663469778947096e-02, 3.006106324388479e-02, 2.999991361468548e-02, 3.003463881253416e-02, 2.754624797067731e-02, 3.004786227200032e-02, 2.998694778062538e-02, 3.004786227200032e-02, 2.733291952819620e-02, 2.827854138886375e-02, 2.828611842190426e-02, 2.006854121610911e-02, 3.246545292842319e-02, 2.197643849524749e-02, 3.188879689507294e-02, 2.424068908927473e-02, 2.423977622677198e-02, 2.303995171682563e-02, 2.306173095505661e-02, 2.303995171682563e-02, 3.160454867610617e-02, 2.011439322510864e-02, 2.788677695044293e-02, 1.237189523483959e-02, 1.245598187846140e-02, 3.109251851114585e-02, 1.512338019614243e-02, 3.425379002595361e-02, 1.905919928371210e-02, 1.739549930588039e-02, 1.744192116535811e-02, 1.739549930588040e-02, 3.326947111379674e-02, 1.918514360561203e-02, 1.943143571824131e-02, 3.421863957184180e-04, 3.490689000645110e-04, 5.760677378930833e-04, 6.281407301152294e-04, 2.061554884496790e-02, 2.179394018039886e-02, 1.784371886138582e-03, 2.074618440882011e-03, 1.784371886138581e-03, 2.074618440882011e-03, 5.561926599552494e-06, 6.187909995859566e-06, 7.152017266369964e-09, 7.201074085870909e-09, 6.046365557377231e-08, 7.274426550609615e-08, 2.493844944641355e-03, 2.604941585916024e-03, 1.382347645867313e-07, 3.233666331392734e-07, 1.382347645867310e-07, 3.273800453234202e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
