
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_m05_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m05", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.386870275747059e+01, -1.386863467198615e+01, -1.386841160054439e+01, -1.386941740020610e+01, -1.386887902010952e+01, -1.386887902010952e+01, -2.477791830407219e+00, -2.477737749291774e+00, -2.476493803992282e+00, -2.478215009015926e+00, -2.477351507518794e+00, -2.477351507518794e+00, -5.477858916676144e-01, -5.479708300931574e-01, -5.516642511276422e-01, -5.549989680269637e-01, -5.536884885132575e-01, -5.536884885132575e-01, -1.711583599075220e-01, -1.714007767507537e-01, -6.464431798714831e-01, -1.921641934921612e-01, -1.779349404924515e-01, -1.779349404924514e-01, -7.177598124919821e-04, -7.726039149503125e-04, -1.894546953689097e-02, -3.630108548092373e-04, -4.785400600148781e-04, -4.785400600148781e-04, -3.298008484090643e+00, -3.302678771385420e+00, -3.298281890234591e+00, -3.302401182942183e+00, -3.300309004394672e+00, -3.300309004394672e+00, -1.539177311459534e+00, -1.537460371540596e+00, -1.547915939685766e+00, -1.545441212667406e+00, -1.534250625557614e+00, -1.534250625557614e+00, -4.192381999622882e-01, -3.946241460678073e-01, -3.859938956904371e-01, -3.878775864168891e-01, -4.220941207135177e-01, -4.220941207135177e-01, -1.422126397878820e-01, -2.081211228014700e-01, -1.264160342406242e-01, -1.298603120553880e+00, -1.714876298090675e-01, -1.714876298090674e-01, -2.720249632866313e-04, -3.528158788017285e-04, -2.789768544109537e-04, -6.173623789857432e-02, -3.332686949065417e-04, -3.332686949065761e-04, -3.373607977077702e-01, -4.227800544877188e-01, -4.143729113064559e-01, -3.890099742553265e-01, -4.039941380035713e-01, -4.039941380035713e-01, -3.476233046143953e-01, -3.659750280769403e-01, -3.701889955746884e-01, -3.408494787249862e-01, -3.585618886295847e-01, -3.585618886295847e-01, -4.318568580832445e-01, -2.206379626550414e-01, -2.450039095030939e-01, -2.671806783852490e-01, -2.576421878965565e-01, -2.576421878965564e-01, -3.357006000354081e-01, -1.713133826493263e-02, -3.473683170598461e-02, -2.437052221592644e-01, -1.071254037180785e-01, -1.071254037180784e-01, -1.078782365975366e-03, -8.983672146959755e-05, -1.937872615054814e-04, -9.780989893844802e-02, -3.088948541363078e-04, -3.088948541363285e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_m05_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m05", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.201061212318369e+01, -1.201093503179124e+01, -1.201223368816392e+01, -1.200745427544328e+01, -1.200997504174911e+01, -1.200997504174911e+01, -2.707784598410453e+00, -2.708376387398765e+00, -2.723910633822855e+00, -2.716989928332595e+00, -2.717825407109925e+00, -2.717825407109925e+00, -5.505713056423061e-01, -5.521656475249616e-01, -5.714666254737922e-01, -5.622520169670838e-01, -5.655837695664887e-01, -5.655837695664887e-01, -1.380892829934719e-01, -1.472583700439614e-01, -5.512453131783677e-01, -1.062352125226062e-01, -5.426238575528040e-02, -5.426238575527940e-02, -1.163859929490031e-03, -1.276009039947673e-03, -4.753154936410436e-02, -5.183747474316109e-04, -7.183066409436749e-04, -7.183066409436749e-04, -5.084909438220187e+00, -5.142041359748164e+00, -5.088184525090401e+00, -5.138586281712521e+00, -5.113570198794561e+00, -5.113570198794561e+00, -1.214252077371100e+00, -1.262428963202580e+00, -1.180401655280272e+00, -1.216808596825085e+00, -1.260522486309314e+00, -1.260522486309314e+00, -4.941830556954731e-01, -3.997639091316230e-01, -4.641448802831912e-01, -4.864150856003496e-01, -4.624811022183100e-01, -4.624811022183100e-01, -2.355231903514238e-01, -6.659842814654705e-02, -2.271241912317337e-01, -1.456970899117146e+00, -1.576581627495114e-01, -1.576581627495102e-01, -3.758228176677903e-04, -5.005860647757447e-04, -4.102793728226242e-04, -1.407349061258706e-01, -4.858446005626922e-04, -4.858446005619846e-04, -1.872938324879874e-01, -5.642511483723486e-01, -3.901766876576901e-01, -2.446829363747686e-01, -3.133389706474569e-01, -3.133389706474569e-01, -1.813698177772260e-01, -4.311788819555353e-01, -3.654013505768746e-01, -3.385117803763353e-01, -2.970003454722833e-01, -2.970003454722833e-01, -3.910859275441313e-01, -1.616364428509502e-01, -2.312196908398606e-01, -2.172399584336920e-01, -1.928007455940540e-01, -1.928007455940540e-01, -3.561712757281262e-01, -4.298940933575603e-02, -8.559320969319295e-02, -2.715235553590116e-01, -1.970730960077666e-01, -1.970730960077775e-01, -1.837933377113539e-03, -1.204175830108528e-04, -2.683890208688318e-04, -1.881287969588822e-01, -4.511097913250714e-04, -4.511097913263654e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m05_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m05", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-4.668788011217662e-09, -4.668726437118559e-09, -4.668416986421878e-09, -4.669331970888348e-09, -4.668857586096234e-09, -4.668857586096234e-09, -6.787387929186845e-06, -6.787518635692890e-06, -6.789722471663033e-06, -6.778239963712017e-06, -6.785698116951323e-06, -6.785698116951323e-06, -4.763611225574737e-03, -4.768441730861949e-03, -4.803816334872551e-03, -4.668886160763851e-03, -4.717686268504860e-03, -4.717686268504860e-03, -4.956571431602716e-01, -4.925739669353869e-01, -2.722532319905375e-03, -8.847940269308118e-01, -7.245755245615498e-01, -7.245755245615491e-01, -1.734158582372539e-01, -1.873782633161124e-01, -4.713395801500377e-01, -1.379499427067487e-01, -1.838895716454252e-01, -1.838895716454257e-01, -1.360009875953547e-06, -1.362243214692086e-06, -1.360124715198262e-06, -1.362094977034839e-06, -1.361121028974863e-06, -1.361121028974863e-06, -5.337997371672855e-05, -5.204958640825034e-05, -5.360891115670669e-05, -5.240245219077364e-05, -5.253147946771917e-05, -5.253147946771917e-05, -8.706072787949229e-03, -6.421170169938556e-03, -1.145362419696908e-02, -1.132070115898857e-02, -8.287136276376769e-03, -8.287136276376769e-03, -1.000532148774303e+00, -3.492600965262568e-01, -1.050759125961358e+00, -8.560195099707111e-05, -1.282841922604994e+00, -1.282841922604993e+00, -1.765251186972034e-01, -1.614150976378510e-01, -1.048352297529566e+00, -1.090940935146909e+00, -4.837755861403065e-01, -4.837755861403555e-01, -8.470957403638872e-03, -1.048942592881549e-02, -1.032383273238382e-02, -9.726140314778012e-03, -1.008302186930715e-02, -1.008302186930715e-02, -1.013677221560238e-02, -1.510393060179699e-02, -1.392716999783221e-02, -1.166464526258805e-02, -1.290556442899341e-02, -1.290556442899341e-02, -5.513174190757884e-03, -1.814504796733873e-01, -1.218830373877329e-01, -5.895127584902063e-02, -8.864134875528339e-02, -8.864134875528339e-02, -2.073007170590411e-02, -4.055373537020032e-01, -6.066114789027496e-01, -7.346846611294448e-02, -1.686016788934737e+00, -1.686016788934738e+00, -1.488994253892644e-01, -7.544461658196818e-01, -3.752508768641047e-01, -1.647114398284934e+00, -6.120706212090928e-01, -6.120706212091357e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m05_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m05", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m05_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m05", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-2.718797731914600e-03, -2.718655555231201e-03, -2.718079463934419e-03, -2.720182104534551e-03, -2.719074253304397e-03, -2.719074253304397e-03, -1.291894780722031e-03, -1.287790353642803e-03, -1.179275199168340e-03, -1.223591941081808e-03, -1.218762971307854e-03, -1.218762971307854e-03, -4.414687505822514e-03, -4.169018478502164e-03, -3.396922695984860e-04, -1.615208814550418e-03, -1.232149943123858e-03, -1.232149943123858e-03, -2.128572061225715e-02, -1.351660758002836e-02, -6.655745831414553e-03, -5.274770783232315e-02, -8.638605599987868e-02, -8.638605599988000e-02, 1.696435679966191e-04, 2.058977201428035e-04, 1.346074546402454e-02, 2.412210409701497e-05, 6.648725752174777e-05, 6.648725752174777e-05, 1.474774394586061e-02, 1.557405136864775e-02, 1.479528089533696e-02, 1.552422180929418e-02, 1.516111777494541e-02, 1.516111777494541e-02, -7.270408923557538e-03, -6.582311886010213e-03, -7.702182073170570e-03, -7.227362944098485e-03, -6.615835129542335e-03, -6.615835129542335e-03, -3.514587481586100e-04, -7.506587150734019e-02, 5.195066962332229e-03, -2.572601305214177e-03, -1.926791854361608e-02, -1.926791854361608e-02, 4.127562571478682e-02, -7.470371656985297e-02, 4.586287940172731e-02, -1.028896235063480e-02, -1.542041166503016e-02, -1.542041166502855e-02, 7.678024215581156e-06, 1.992623303846678e-05, 7.193046822735473e-05, 4.061854208203099e-02, 4.827817223994037e-05, 4.827817223939985e-05, -1.082901515206352e+00, 4.325993491108274e-02, -3.803457537872178e-01, -8.229550997254887e-01, -6.006711063597829e-01, -6.006711063597829e-01, -1.095072171946097e+00, 1.527993317242970e-02, -4.122639056250894e-02, -7.880553744020444e-02, -1.029683724345266e-01, -1.029683724345265e-01, -8.458440919818337e-02, -2.487130411735580e-02, -1.593457443063810e-03, -4.115072724613239e-02, -3.869519272012976e-02, -3.869519272012976e-02, -4.511313878131595e-03, 1.221038841156748e-02, 2.305842156702760e-02, -1.357186514611012e-03, 5.343395437470735e-02, 5.343395437470493e-02, 2.270768978982692e-04, 4.669530254379682e-07, 1.236833317740576e-05, 5.562956320336976e-02, 5.450953885322686e-05, 5.450953885316904e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
