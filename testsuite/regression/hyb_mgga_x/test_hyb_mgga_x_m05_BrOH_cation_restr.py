
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_m05_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m05", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.312474090560348e+01, -1.312469589610808e+01, -1.312453998213676e+01, -1.312520346848088e+01, -1.312484950234562e+01, -1.312484950234562e+01, -2.302070103035212e+00, -2.302050027008210e+00, -2.301591420347755e+00, -2.301978295804591e+00, -2.301697173819802e+00, -2.656684348847385e+00, -4.888722968080477e-01, -6.208088788639406e-01, -6.194483217841610e-01, -6.179716709437496e-01, -6.184502716957371e-01, -6.184502716957371e-01, -1.728666710646939e-01, -1.734945623435880e-01, -5.828153875626121e-01, -1.976190419462822e-01, -1.823511773635718e-01, -1.823511773635717e-01, -7.177634792633331e-04, -7.726121275662469e-04, -1.897700823724119e-02, -3.630185414786288e-04, -4.785511911654088e-04, -4.785511911654088e-04, -3.298825693493125e+00, -3.303487764306268e+00, -3.299082165400484e+00, -3.170087150733662e+00, -3.301130545798389e+00, -3.301130545798389e+00, -1.322074827234998e+00, -1.324034089006098e+00, -1.321653648480450e+00, -1.322627186060710e+00, -1.323541974376984e+00, -1.557944786056700e+00, -4.332153990319071e-01, -4.092593261677239e-01, -4.086793834976759e-01, -4.161638459115949e-01, -4.352624657109464e-01, -3.982013922137849e-01, -8.655009072899952e-02, -2.103020038031108e-01, -7.618420217435096e-02, -1.387639120781488e+00, -1.737465415037574e-01, -1.737465415037573e-01, -1.508099979777678e-04, -3.528321086563197e-04, -2.789870600444226e-04, -3.580495475731436e-02, -1.847929685871986e-04, -3.332886423389663e-04, -3.390682900446721e-01, -4.247964845411349e-01, -4.085926788166121e-01, -3.909383216648940e-01, -4.059803955924473e-01, -4.059803955924473e-01, -3.511386808400315e-01, -3.677297295112801e-01, -3.725954240405426e-01, -3.436302256251323e-01, -3.613403905967058e-01, -3.372305681028374e-01, -4.518930567625463e-01, -1.625240951008840e-01, -2.492747631766703e-01, -2.355748129081277e-01, -2.644776962099946e-01, -2.644776962099945e-01, -2.996812169921474e-01, -1.714397138962096e-02, -3.484951572273609e-02, -2.537714906155326e-01, -6.420371197351213e-02, -1.081226852106596e-01, -1.079062680408108e-03, -8.983848769877330e-05, -1.937884136954639e-04, -9.832472842794600e-02, -3.089083224699691e-04, -3.089083224699898e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_m05_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m05", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.311143328852393e+01, -1.311170780211273e+01, -1.311284478214896e+01, -1.310878246669150e+01, -1.311092001218454e+01, -1.311092001218454e+01, -2.909778307938157e+00, -2.910297655338860e+00, -2.924030753750936e+00, -2.918747514867874e+00, -2.919010937647546e+00, -2.604162108124735e+00, -6.105496980735323e-01, -5.440796600543134e-01, -5.827959183662655e-01, -5.681793465076438e-01, -5.725537478027913e-01, -5.725537478027913e-01, -1.395262035758022e-01, -1.489606300523209e-01, -6.291892312490069e-01, -1.152325280154995e-01, -5.845204843841349e-02, -5.845204843841244e-02, -1.163875632462166e-03, -1.276044451103991e-03, -4.769040394464889e-02, -5.184062087049471e-04, -7.183529978849815e-04, -7.183529978849815e-04, -5.084302065643696e+00, -5.141450037463519e+00, -5.087590323471577e+00, -5.253821206778346e+00, -5.112964681956945e+00, -5.112964681956945e+00, -1.438693290776710e+00, -1.479046200385295e+00, -1.413334774487917e+00, -1.443333355496846e+00, -1.476148378653023e+00, -1.250193455592101e+00, -4.833391229886621e-01, -3.799668765631406e-01, -4.508147043178770e-01, -4.601979466969593e-01, -4.503188464660186e-01, -4.919239131312590e-01, -1.614141600884752e-01, -6.873491497270269e-02, -1.513994837299731e-01, -1.354819695629155e+00, -1.629474770176516e-01, -1.629474770176503e-01, -2.084088934312536e-04, -5.006523457383468e-04, -4.103215709341630e-04, -8.560022759241480e-02, -2.695387827199002e-04, -4.859268261111019e-04, -1.838219743455689e-01, -5.619352136332297e-01, -3.996654843126469e-01, -2.409774905755148e-01, -3.098439763188980e-01, -3.098439763188980e-01, -1.740504187342838e-01, -4.303852611590734e-01, -3.631342818198937e-01, -3.351094924894026e-01, -2.935403626787860e-01, -3.286217984816430e-01, -3.627980025293923e-01, -1.824474253756950e-01, -2.335123980788745e-01, -2.534533889373377e-01, -1.916456652945427e-01, -1.916456652945426e-01, -3.908828004695983e-01, -4.305321349811272e-02, -8.614625626904335e-02, -2.662539935313724e-01, -1.296712886360376e-01, -2.009018472872970e-01, -1.839156031001706e-03, -1.204246600993987e-04, -2.683936881101974e-04, -1.901796409270082e-01, -4.511653441663907e-04, -4.511653441676847e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m05_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m05", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-5.403903763359941e-09, -5.403809878354701e-09, -5.403387447496501e-09, -5.404782275373242e-09, -5.404052072267387e-09, -5.404052072267387e-09, -8.286063819595398e-06, -8.285902136112906e-06, -8.281170728912681e-06, -8.280055678046590e-06, -8.283615832953192e-06, -5.410398366325117e-06, -6.591481284939251e-03, -2.911807284382125e-03, -2.927724417979695e-03, -2.975471758078621e-03, -2.963683558751308e-03, -2.963683558751308e-03, -4.673648611014632e-01, -4.595577636208757e-01, -3.645288940597245e-03, -6.585078312907263e-01, -5.957205463412956e-01, -5.957205463412949e-01, -1.705421053944676e-01, -1.817242916089273e-01, -3.790914991356865e-01, -1.096368608393077e-01, -1.600862558594060e-01, -1.600862558594060e-01, -1.359088311863177e-06, -1.361331369717343e-06, -1.359222270242963e-06, -1.515344178314825e-06, -1.360194811989879e-06, -1.360194811989879e-06, -8.429857971170985e-05, -8.142719357491721e-05, -8.653885484438353e-05, -8.386530314036764e-05, -8.167374214380593e-05, -4.965502484829127e-05, -7.886726123345535e-03, -5.817657043702578e-03, -9.553971016383313e-03, -9.248060434301170e-03, -7.566808460541625e-03, -9.677709864560112e-03, -2.499006555047508e+01, -3.210763895502082e-01, -3.246092737850388e+01, -7.107261871572544e-05, -1.073353826899892e+00, -1.073353826899892e+00, -1.972469803858457e+06, -9.635958491640295e-02, -8.056014058837029e-01, -1.108443227178574e+02, -1.116009370253589e+06, -3.065904238901052e-01, -8.363054018434754e-03, -1.036017399329721e-02, -1.069695498126954e-02, -9.603657155231832e-03, -9.956600976203128e-03, -9.956600976203128e-03, -9.881595643166265e-03, -1.486911294123780e-02, -1.365796404820282e-02, -1.140307953672052e-02, -1.262006866494397e-02, -1.520375810501253e-02, -4.866374525633437e-03, -5.885251058290517e-01, -1.119179991053586e-01, -8.493163254820628e-02, -7.959176286902978e-02, -7.959176286902978e-02, -2.865793962117155e-02, -3.642010668737842e-01, -4.668158818857330e-01, -6.428461408856356e-02, -5.938082211680367e+01, -1.321559691058726e+00, -8.678177508221524e-02, -1.124070996755507e-01, -3.311657475922330e-01, -1.413354108843792e+00, -4.376799265383084e-01, -4.376799265383388e-01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m05_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m05", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-2.572952671215052e-03, -2.572821928949432e-03, -2.572287557259391e-03, -2.574220860409463e-03, -2.573202946581129e-03, -2.573202946581129e-03, -1.200275307421061e-03, -1.196477641441957e-03, -1.095988884066354e-03, -1.136576964082792e-03, -1.132347702012259e-03, -1.306987926824812e-03, -3.939894132890169e-03, -4.723177850839216e-03, -3.814309263210682e-04, -1.798477740596990e-03, -1.376267491384899e-03, -1.376267491384899e-03, -2.149817084857637e-02, -1.368172280734271e-02, -6.000637344530877e-03, -5.424502503434035e-02, -8.853010530577378e-02, -8.853010530577513e-02, 1.696444346433220e-04, 2.058999087919478e-04, 1.348315369290764e-02, 2.412261487689046e-05, 6.648880405825263e-05, 6.648880405825263e-05, 1.475139827091043e-02, 1.557786624081011e-02, 1.479887073279385e-02, 1.490222821411955e-02, 1.516489181124388e-02, 1.516489181124388e-02, -6.244910544078547e-03, -5.668572330625057e-03, -6.576337110614098e-03, -6.185357705644182e-03, -5.707239315170320e-03, -6.718006611035388e-03, -3.631762130466231e-04, -7.784979276460241e-02, 5.500389480505660e-03, -2.760210155645392e-03, -1.986903233865256e-02, -1.817725386972917e-02, 2.512019435009061e-02, -7.548652954926667e-02, 2.763911158602263e-02, -1.099440348171897e-02, -1.562353621859623e-02, -1.562353621859459e-02, 4.256678513747098e-06, 1.992714966349472e-05, 7.193309961408939e-05, 2.355739693669890e-02, 2.676959133135654e-05, 4.828106187647463e-05, -1.088382430746621e+00, 4.346626118389905e-02, -3.750401780040821e-01, -8.270345409731944e-01, -6.036243361995068e-01, -6.036243361995068e-01, -1.106146201297740e+00, 1.535319423834222e-02, -4.149438437372430e-02, -7.944845540731098e-02, -1.037662760445674e-01, -9.684264790503688e-02, -8.850874198610791e-02, -1.832044742894920e-02, -1.621234238904330e-03, -3.628284399391749e-02, -3.972181539279054e-02, -3.972181539279054e-02, -4.027267252693152e-03, 1.221939269114627e-02, 2.313322158287574e-02, -1.413245238672219e-03, 3.202469346400738e-02, 5.393139654923861e-02, 2.271359023219886e-04, 4.669622059383664e-07, 1.236840671510620e-05, 5.592237343971414e-02, 5.451191556053413e-05, 5.451191556047629e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
