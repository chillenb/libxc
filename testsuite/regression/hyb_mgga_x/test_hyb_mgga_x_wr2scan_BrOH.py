
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_wr2scan_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_wr2scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.151572849672355e+01, -2.151583217545960e+01, -2.151632877391150e+01, -2.151463553417812e+01, -2.151578282120195e+01, -2.151578282120195e+01, -2.882806164253436e+00, -2.882911468475274e+00, -2.886197740908072e+00, -2.885165621300612e+00, -2.882849836321912e+00, -3.572163254113979e+00, -3.961302879557186e-01, -5.380001357804273e-01, -5.181884873973681e-01, -5.240981451889455e-01, -5.384863870736116e-01, -5.384863870736116e-01, -6.570480622817976e-02, -6.760445204868169e-02, -4.836864809022305e-01, -3.086501791985178e-02, -6.627204450230895e-02, -6.627204450230895e-02, -1.337029685331767e-05, -1.556353891611920e-05, -1.316433723241609e-03, -1.062568626542136e-06, -1.508622030723140e-05, -1.508622030723133e-05, -5.470452232066480e+00, -5.471509085351407e+00, -5.470564008929146e+00, -5.243283788935329e+00, -5.470989107904758e+00, -5.470989107904758e+00, -1.508024123198677e+00, -1.528018185781624e+00, -1.499682104626824e+00, -1.515344259735086e+00, -1.532532788524818e+00, -1.941342692255666e+00, -4.542978675319349e-01, -5.079355660467708e-01, -4.226900475292070e-01, -4.483501950249096e-01, -4.780872535752037e-01, -4.251560600861399e-01, -1.013627671374720e-02, -6.590345942654467e-02, -9.805266751182784e-03, -1.892527746133425e+00, -2.060406963482473e-02, -2.060406963482473e-02, -1.420900544831043e-06, -1.506110164317810e-06, -6.465728755588523e-07, -2.755207088866262e-03, -1.604256610488140e-06, -1.122891644799295e-06, -4.752482756730984e-01, -4.718249671595980e-01, -4.662144455464261e-01, -4.740036539271256e-01, -4.735300912159191e-01, -4.735300912159191e-01, -4.550022500799387e-01, -3.733494438694578e-01, -3.972025880603645e-01, -4.193235938539692e-01, -4.080535456612198e-01, -3.766110105872746e-01, -5.400025798004968e-01, -7.582986532018525e-02, -1.442075532618418e-01, -1.716670440887008e-01, -1.784659045447505e-01, -1.784659045447505e-01, -2.621573482191902e-01, -1.034262654155012e-03, -2.608928726974540e-03, -1.996452320080744e-01, -5.795870362225832e-03, -7.871440893217129e-03, -2.101792744440490e-05, -1.882736532057170e-08, -1.788181373734117e-07, -6.918497388793214e-03, -6.703358880547107e-07, -6.703358880547069e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_wr2scan_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_wr2scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.190051605875856e+01, -3.190056388191271e+01, -3.190083741150705e+01, -3.190004993191857e+01, -3.190054081587956e+01, -3.190054081587956e+01, -4.609890772177758e+00, -4.610159679737726e+00, -4.618442537601647e+00, -4.615614376335448e+00, -4.609988262389073e+00, -4.506347994873513e+00, -6.287808489059519e-01, -6.727139897962400e-01, -6.355259403268477e-01, -6.488143908606430e-01, -6.736232812205143e-01, -6.736232812205143e-01, -9.779005770835439e-02, -1.009735256697976e-01, -7.297079091420809e-01, -3.378222173755870e-02, -9.873312485738185e-02, -9.873312485738185e-02, 3.995200950766570e-04, 4.436518658395656e-04, 4.432578896081202e-03, 5.582213270306892e-05, 4.296951381859084e-04, 4.296951381859522e-04, -7.209971604348517e+00, -7.212281114445705e+00, -7.210220424371298e+00, -7.518327755583154e+00, -7.211138986162236e+00, -7.211138986162236e+00, -2.400482153122038e+00, -2.433693008814865e+00, -2.387414859976063e+00, -2.412313602869398e+00, -2.441684085579557e+00, -2.449620539010066e+00, -6.290155186953699e-01, -7.109196642948592e-01, -5.819031794964233e-01, -6.246505647133508e-01, -6.641653205317147e-01, -7.125609976055428e-01, -1.912774333457311e-02, -8.850335663594820e-02, -1.853869349410349e-02, -2.486862007047647e+00, -2.166312296213631e-02, -2.166312296213631e-02, -2.841346597331733e-06, 7.589607829964633e-05, 3.202525327007744e-05, -5.372041198616733e-03, -3.207957762591563e-06, 5.727081890086033e-05, -6.818792742882752e-01, -6.739879554949572e-01, -6.853910559022679e-01, -6.789556995883621e-01, -6.778576977464316e-01, -6.778576977464316e-01, -6.534000521303800e-01, -5.224655153883730e-01, -5.603687545446487e-01, -5.956920473296307e-01, -5.776541242359936e-01, -6.126353791569492e-01, -7.494902322819156e-01, -1.317704014574284e-01, -2.036300477983343e-01, -3.009570946422910e-01, -2.542578870268607e-01, -2.542578870268607e-01, -4.554798821031723e-01, 4.542185489238472e-03, 4.757910068982470e-03, -2.896627644646168e-01, -1.114517859465639e-02, -3.088104535935718e-03, 6.773491988588925e-04, 1.102212686272858e-06, 9.916597970635347e-06, -2.731428208235683e-03, 3.490157875123304e-05, 3.490157875123332e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_wr2scan_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_wr2scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.199781543398020e-08, -1.199764726366315e-08, -1.199681618783831e-08, -1.199956610875177e-08, -1.199772749114586e-08, -1.199772749114586e-08, -8.254122941044515e-06, -8.257304340869811e-06, -8.352431151160769e-06, -8.312837703678727e-06, -8.254850964121250e-06, -6.876286783541556e-06, -1.380609740666465e-03, -3.693188905672665e-03, -4.022888401130398e-03, -3.932370273619146e-03, -3.685664129756355e-03, -3.685664129756355e-03, -2.890560081509446e-01, -2.794108884184503e-01, -3.265692289859223e-04, -6.411677288793980e-01, -2.860964841729667e-01, -2.860964841729667e-01, -5.011534045349939e+01, -4.841521322182961e+01, -6.656928630151086e+00, -3.652694124539202e+01, -4.949101218337853e+01, -4.949101218338316e+01, -1.707593105036031e-06, -1.708341170674256e-06, -1.707681387931791e-06, -3.024127091902740e-06, -1.707958685393930e-06, -1.707958685393930e-06, -5.733849786836261e-05, -5.855431143086684e-05, -5.688738929801992e-05, -5.768237321592118e-05, -5.903553428510174e-05, -6.252101003369622e-05, -7.169240174614533e-03, -5.762000586059380e-03, -8.378867648435153e-03, -7.610533211925318e-03, -6.416072023042589e-03, -1.370975514914045e-02, -7.846172797899416e-02, -2.708621563490606e-01, -8.166819668650677e-02, -7.810361546807178e-05, -9.643574397705772e-01, -9.643574397705772e-01, -3.834685721822446e+01, -4.171148842378624e+01, -8.294085358051342e+01, -2.151941362795924e-01, -3.536341195235001e+01, -4.616208598045990e+01, -8.360781579968415e-03, -8.231120203688620e-03, -1.042665013605120e-02, -8.331540843292030e-03, -8.314441665295253e-03, -8.314441665295253e-03, -9.324512300893258e-03, -1.194976303044548e-02, -1.076155225041461e-02, -9.941970945116037e-03, -1.032086498769720e-02, -2.179598972371878e-02, -4.706917562052430e-03, -3.099449171479321e-02, -8.387343653914979e-02, -3.604636926571837e-02, -5.793191705733830e-02, -5.793191705733829e-02, -2.190359800033103e-02, -7.539327830003841e+00, -4.369037829824275e+00, -4.910996586232592e-02, -1.249037461765816e-01, -2.130156137319910e+00, -3.280541066765154e+01, -3.085931788203246e+01, -5.688938345783774e+01, -2.368890311649424e+00, -5.428784145870463e+01, -5.428784145870522e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_wr2scan_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_wr2scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.847751065494325e-03, 1.847738840266484e-03, 1.847681736357695e-03, 1.847881134729575e-03, 1.847744650068895e-03, 1.847744650068895e-03, 5.382866057150939e-03, 5.385039203708370e-03, 5.450642967623212e-03, 5.424733517822863e-03, 5.383444969100155e-03, 4.934065424193670e-03, 5.790822005566757e-03, 1.863971332380243e-02, 1.870068247861695e-02, 1.872658079787065e-02, 1.863867483531898e-02, 1.863867483531898e-02, 2.991845003985021e-02, 3.010513427239545e-02, 1.991696658370882e-03, 2.473846386925446e-02, 2.997257650042508e-02, 2.997257650042508e-02, 8.440855424019485e-04, 9.372690747605400e-04, 8.754163125478049e-03, 6.784016047513871e-05, 9.284558881669989e-04, 9.284558881670855e-04, 3.973238269898664e-03, 3.976217488313545e-03, 3.973570009950970e-03, 6.749419547123907e-03, 3.974724710605955e-03, 3.974724710605955e-03, 6.561230274904276e-03, 6.858871931153208e-03, 6.447767770539410e-03, 6.658603394869608e-03, 6.948605876430451e-03, 8.187175970571772e-03, 2.373790935563462e-02, 2.408774573048382e-02, 2.381255874503260e-02, 2.434873100563464e-02, 2.368782328430581e-02, 4.728356132091072e-02, 9.916537588694343e-05, 2.841554978990700e-02, 1.099970420710614e-04, 9.283698190983227e-03, 2.275960698334687e-02, 2.275960698334687e-02, 6.467758205630793e-11, 1.038150935100535e-04, 8.691746605714926e-05, 1.068502602963797e-05, 8.076400306839710e-11, 8.690819096599478e-05, 2.874930832992904e-02, 2.817650363574935e-02, 3.512716662352141e-02, 2.860733516009815e-02, 2.853165089566094e-02, 2.853165089566094e-02, 2.920072370800728e-02, 2.577067281563301e-02, 2.623192426786528e-02, 2.690001561387243e-02, 2.651199818669068e-02, 5.283384415307140e-02, 2.280197986329631e-02, 4.869479258388598e-03, 2.961682069022120e-02, 2.385684210783108e-02, 2.959181329822286e-02, 2.959181329822284e-02, 3.177930201932423e-02, 7.862519276099062e-03, 1.137188709382024e-02, 3.048539737614534e-02, 6.350613323961071e-05, 1.715618657944012e-02, 8.892828509859296e-04, 1.576293664350859e-06, 1.991757559506954e-05, 1.656544883347669e-02, 6.273677476670682e-05, 6.273677476670721e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
