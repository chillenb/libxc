
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_dldf_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_dldf", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-7.584668175456870e+00, -7.584618787895725e+00, -7.584457249610894e+00, -7.585187369795957e+00, -7.584796684941821e+00, -7.584796684941821e+00, -1.445425113106123e+00, -1.445369960395458e+00, -1.444050123256233e+00, -1.445742179243436e+00, -1.444977668047582e+00, -1.444977668047582e+00, -3.193827688656348e-01, -3.199251976352347e-01, -3.354739253211949e-01, -3.346262027621800e-01, -3.369516911214165e-01, -3.369516911214165e-01, -1.282053070990124e-01, -1.260842240766977e-01, -3.898494403937541e-01, -1.467960975959259e-01, -1.356449120554757e-01, -1.356449120554757e-01, -1.792690888421135e-02, -1.886613857176861e-02, -9.305192650852537e-02, -1.036927213953433e-02, -1.444723298507137e-02, -1.444723298507137e-02, -1.632135237980992e+00, -1.627440423684298e+00, -1.631877276207153e+00, -1.627735250637721e+00, -1.629781383876892e+00, -1.629781383876892e+00, -9.549352690449573e-01, -9.541205954157624e-01, -9.635096165052780e-01, -9.625806345503913e-01, -9.504486199468045e-01, -9.504486199468045e-01, -2.313082700732482e-01, -2.100168988249793e-01, -2.231977919262138e-01, -2.080104463208817e-01, -2.300591160902451e-01, -2.300591160902451e-01, -1.543179579908225e-01, -1.643991831112870e-01, -1.501652257127962e-01, -6.867489304002832e-01, -1.425485332931908e-01, -1.425485332931908e-01, -8.009263301713865e-03, -1.013619457115580e-02, -7.756676268417475e-03, -1.250408908043663e-01, -9.740978126827117e-03, -9.740978126827119e-03, -9.968431166954650e-02, -1.389282024723416e-01, -1.267752658785743e-01, -1.154376097581868e-01, -1.212697362117173e-01, -1.212697362117173e-01, -1.024007332540073e-01, -2.148770051679574e-01, -2.041195702296724e-01, -1.841437548197744e-01, -1.960752275127713e-01, -1.960752275127713e-01, -2.301201163030793e-01, -1.685225332274230e-01, -1.653751970012905e-01, -1.615161378280061e-01, -1.602181501201559e-01, -1.602181501201560e-01, -2.019309569284399e-01, -9.020106037393982e-02, -1.133840373724017e-01, -1.441770606167758e-01, -1.320845236637848e-01, -1.320845236637849e-01, -2.518110170349392e-02, -2.712645894391451e-03, -5.701772679740600e-03, -1.300790995752468e-01, -8.947522230150341e-03, -8.947522230150332e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_dldf_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_dldf", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-5.625636807716265e+00, -5.624542954342356e+00, -5.625530637627181e+00, -5.624466003664347e+00, -5.625206966872180e+00, -5.623997722295223e+00, -5.626394856569897e+00, -5.625515215968266e+00, -5.625568547055083e+00, -5.624921346003550e+00, -5.625568547055083e+00, -5.624921346003550e+00, -1.333083343949292e+00, -1.333356976937249e+00, -1.333102383888135e+00, -1.333397878501141e+00, -1.333797526554787e+00, -1.334017760122220e+00, -1.332269578050764e+00, -1.332591313092010e+00, -1.332795308061876e+00, -1.333210923225413e+00, -1.332795308061876e+00, -1.333210923225413e+00, -2.211997172520884e-01, -2.260045984715570e-01, -2.195166490245496e-01, -2.253981775578019e-01, -1.971710683436260e-01, -1.889762345731201e-01, -1.946146447604456e-01, -1.973746816770936e-01, -2.334084576836051e-01, -1.506067816057002e-01, -2.334084576836051e-01, -1.506067816057002e-01, -1.659437116887940e-02, -2.030756228455918e-02, -1.858687732330595e-02, -2.319019174786710e-02, -2.696161272668099e-01, -2.886120166977947e-01, -1.252350392711007e-02, -1.065703959189111e-02, -1.819924676099798e-02, -3.731126236654819e-02, -1.819924676099792e-02, -3.731126236654818e-02, -2.292281286337721e-02, -2.431907197166845e-02, -2.398095134101878e-02, -2.563519266665255e-02, -9.713770771330707e-02, -9.863356036888168e-02, -1.389738005824758e-02, -1.366857362512537e-02, -2.050404834928115e-02, -1.172706898563874e-02, -2.050404834928116e-02, -1.172706898563873e-02, -1.039535125039962e+00, -1.039173161933018e+00, -1.033097952905857e+00, -1.032953172466914e+00, -1.039056575554655e+00, -1.038872078268103e+00, -1.033538470915524e+00, -1.033226809495152e+00, -1.036331145982528e+00, -1.036065975898154e+00, -1.036331145982528e+00, -1.036065975898154e+00, -5.940813731793805e-01, -5.942007467296933e-01, -6.054369364337120e-01, -6.052273448268602e-01, -5.739821138440117e-01, -5.800694502389122e-01, -5.843259003492532e-01, -5.902640712422180e-01, -6.147084085694672e-01, -6.020899807584593e-01, -6.147084085694672e-01, -6.020899807584593e-01, -2.109761439814125e-01, -2.090479730550582e-01, -1.838283589323407e-01, -1.787678842659430e-01, -2.029390916507726e-01, -2.087149047328675e-01, -2.222797889956724e-01, -2.188929103809344e-01, -2.074734798809063e-01, -2.084220133450274e-01, -2.074734798809063e-01, -2.084220133450275e-01, -5.181494003916738e-02, -4.968960848275544e-02, -9.503237411132223e-03, -9.637446753166825e-03, -6.119051502766362e-02, -5.455318451472364e-02, -7.222531332997191e-01, -7.217381320094963e-01, -2.723841827613626e-02, -1.451522989366273e-02, -2.723841827613630e-02, -1.451522989366275e-02, -1.044162469200558e-02, -1.085118827242984e-02, -1.337101608149406e-02, -1.357405197604574e-02, -9.983057469902320e-03, -1.056072500924857e-02, -8.565818461053927e-02, -8.620287200275886e-02, -1.021341117094130e-02, -1.397020510881355e-02, -1.021341117094131e-02, -1.397020510881355e-02, -5.283291931051982e-02, -5.257766027828245e-02, -7.392701321013623e-02, -7.306076623603995e-02, -6.534549877058674e-02, -6.460212827717320e-02, -5.897179477617787e-02, -5.851269869524172e-02, -6.204646873154246e-02, -6.144635918300552e-02, -6.204646873154247e-02, -6.144635918300557e-02, -5.536087129464885e-02, -5.484100046532756e-02, -1.643529043202070e-01, -1.651472860657580e-01, -1.653331836556631e-01, -1.651253314480250e-01, -1.363236360844492e-01, -1.360149867673281e-01, -1.557209942937015e-01, -1.552932524696722e-01, -1.557209942937015e-01, -1.552932524696722e-01, -2.198501182190590e-01, -2.121039090975716e-01, -2.000817170062696e-02, -2.061146310036815e-02, -4.505188695324546e-02, -4.737001907687125e-02, -1.145178462253236e-01, -1.155775744862363e-01, -7.902759731638645e-02, -7.945094353878801e-02, -7.902759731638655e-02, -7.945094353878809e-02, -1.548404616428825e-01, -1.564909910454700e-01, -9.769829992697683e-02, -9.795972162513998e-02, -1.036072494312483e-01, -1.025721287119346e-01, -1.199327499998522e-01, -1.209822162892016e-01, -6.283692817879924e-02, -4.847489495775474e-02, -6.283692817879918e-02, -4.847489495775482e-02, -3.245194399191772e-02, -3.356260447071009e-02, -3.611386221764352e-03, -3.618920611068315e-03, -7.337889765252928e-03, -7.801795223142487e-03, -6.280827857042108e-02, -6.119950264890769e-02, -9.661883636651785e-03, -1.282018154803718e-02, -9.661883636651771e-03, -1.282018154803717e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_dldf_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_dldf", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-8.764575079101664e-09, 0.000000000000000e+00, -8.764153149139378e-09, -8.764404943008194e-09, 0.000000000000000e+00, -8.764029623516228e-09, -8.763848261592533e-09, 0.000000000000000e+00, -8.763235381645030e-09, -8.765765389572287e-09, 0.000000000000000e+00, -8.765680366363760e-09, -8.764472457605579e-09, 0.000000000000000e+00, -8.764694291287308e-09, -8.764472457605579e-09, 0.000000000000000e+00, -8.764694291287308e-09, -1.393053247566345e-05, 0.000000000000000e+00, -1.393250429435976e-05, -1.393018896932467e-05, 0.000000000000000e+00, -1.393243222769552e-05, -1.392497105387648e-05, 0.000000000000000e+00, -1.392374883704819e-05, -1.391726687413975e-05, 0.000000000000000e+00, -1.391754948977885e-05, -1.394011923597984e-05, 0.000000000000000e+00, -1.391173105634814e-05, -1.394011923597984e-05, 0.000000000000000e+00, -1.391173105634814e-05, -1.041259393552137e-02, 0.000000000000000e+00, -1.026664806161347e-02, -1.046962544084553e-02, 0.000000000000000e+00, -1.029256382374840e-02, -1.127524702748342e-02, 0.000000000000000e+00, -1.151126701519144e-02, -1.099782089575760e-02, 0.000000000000000e+00, -1.091117008814776e-02, -1.000756068354177e-02, 0.000000000000000e+00, -1.216506649751405e-02, -1.000756068354177e-02, 0.000000000000000e+00, -1.216506649751405e-02, -2.017824711824956e+00, 0.000000000000000e+00, -1.757219480997104e+00, -1.951217890452762e+00, 0.000000000000000e+00, -1.663411317790553e+00, -6.459810974496214e-03, 0.000000000000000e+00, -5.624092451528227e-03, -4.545439649072478e+00, 0.000000000000000e+00, -4.299559887145834e+00, -1.711865595411588e+00, 0.000000000000000e+00, -1.035131908286193e+01, -1.711865595411587e+00, 0.000000000000000e+00, -1.035131908286193e+01, -6.126477828226257e+01, 0.000000000000000e+00, -6.059404457320251e+01, -6.448977030981577e+01, 0.000000000000000e+00, -6.408082059189015e+01, -2.987671920814581e+01, 0.000000000000000e+00, -2.940326642470741e+01, -5.639459328716271e+01, 0.000000000000000e+00, -5.487021031001609e+01, -6.125736415732415e+01, 0.000000000000000e+00, -1.558838369731887e+02, -6.125736415732431e+01, 0.000000000000000e+00, -1.558838369731890e+02, -2.267231938025971e-06, 0.000000000000000e+00, -2.269347517810685e-06, -2.260202027881913e-06, 0.000000000000000e+00, -2.262547641806987e-06, -2.266748399738891e-06, 0.000000000000000e+00, -2.269046534482770e-06, -2.260720278065248e-06, 0.000000000000000e+00, -2.262873053103328e-06, -2.263708540748165e-06, 0.000000000000000e+00, -2.265949732400717e-06, -2.263708540748165e-06, 0.000000000000000e+00, -2.265949732400717e-06, -1.305452011478555e-04, 0.000000000000000e+00, -1.305300199275463e-04, -1.267591953724090e-04, 0.000000000000000e+00, -1.268618482998197e-04, -1.331245792206467e-04, 0.000000000000000e+00, -1.323775533990134e-04, -1.297632712560733e-04, 0.000000000000000e+00, -1.289884499877881e-04, -1.265190642873728e-04, 0.000000000000000e+00, -1.283283389983232e-04, -1.265190642873728e-04, 0.000000000000000e+00, -1.283283389983232e-04, -1.662030229427702e-02, 0.000000000000000e+00, -1.676760072417024e-02, -1.125515098289227e-02, 0.000000000000000e+00, -1.113132153387271e-02, -2.515567365616814e-02, 0.000000000000000e+00, -2.159244617679796e-02, -2.160214175503603e-02, 0.000000000000000e+00, -1.867782789712329e-02, -1.400410857798674e-02, 0.000000000000000e+00, -1.743456747757441e-02, -1.400410857798675e-02, 0.000000000000000e+00, -1.743456747757441e-02, -9.671732174033350e+00, 0.000000000000000e+00, -9.630000380102274e+00, -1.645064841567481e+00, 0.000000000000000e+00, -1.619104075722642e+00, -1.212016097775440e+01, 0.000000000000000e+00, -1.100509662452737e+01, -1.479548046664346e-04, 0.000000000000000e+00, -1.482094408327517e-04, -8.030426082641538e+00, 0.000000000000000e+00, -7.760467192361108e+00, -8.030426082641537e+00, 0.000000000000000e+00, -7.760467192361108e+00, -7.923769380146788e+01, 0.000000000000000e+00, -6.858233196746340e+01, -6.816733437250676e+01, 0.000000000000000e+00, -6.293907625134447e+01, -3.879401929484367e+02, 0.000000000000000e+00, -4.312799889828239e+02, -2.467428752155546e+01, 0.000000000000000e+00, -2.380184100695981e+01, -1.931031464656849e+02, 0.000000000000000e+00, -1.892377705386088e+02, -1.931031464656843e+02, 0.000000000000000e+00, -1.892377705386085e+02, -8.190211251296016e-03, 0.000000000000000e+00, -7.957720148866986e-03, -1.141802183109790e-02, 0.000000000000000e+00, -1.113960489172643e-02, -1.041997189917913e-02, 0.000000000000000e+00, -1.014703074098777e-02, -9.479960371777103e-03, 0.000000000000000e+00, -9.235468268314197e-03, -9.963388543370482e-03, 0.000000000000000e+00, -9.704073862043550e-03, -9.963388543370482e-03, 0.000000000000000e+00, -9.704073862043553e-03, -9.720316725659036e-03, 0.000000000000000e+00, -9.460762926745888e-03, -3.316790180353672e-02, 0.000000000000000e+00, -3.260434438455070e-02, -2.742849495764477e-02, 0.000000000000000e+00, -2.691323227039883e-02, -2.153244785780388e-02, 0.000000000000000e+00, -2.119347319503955e-02, -2.462826695289261e-02, 0.000000000000000e+00, -2.422457318156118e-02, -2.462826695289261e-02, 0.000000000000000e+00, -2.422457318156118e-02, -9.730817519133289e-03, 0.000000000000000e+00, -9.558134047117061e-03, -7.265184631149140e-01, 0.000000000000000e+00, -7.123379526977887e-01, -3.831090928499938e-01, 0.000000000000000e+00, -3.697533251201033e-01, -1.364777881784162e-01, 0.000000000000000e+00, -1.336239992028749e-01, -2.269986008771397e-01, 0.000000000000000e+00, -2.274771058191335e-01, -2.269986008771399e-01, 0.000000000000000e+00, -2.274771058191335e-01, -4.706148633208748e-02, 0.000000000000000e+00, -4.575494316487713e-02, -2.771102998172054e+01, 0.000000000000000e+00, -2.767891670691884e+01, -2.397327512493252e+01, 0.000000000000000e+00, -2.393988344880820e+01, -1.632323617302032e-01, 0.000000000000000e+00, -1.523591457249758e-01, -1.928798459854555e+01, 0.000000000000000e+00, -1.979088666667403e+01, -1.928798459854556e+01, 0.000000000000000e+00, -1.979088666667404e+01, -4.825741539143230e+01, 0.000000000000000e+00, -4.920770298360672e+01, -2.441322657882583e+02, 0.000000000000000e+00, -4.323922579186418e+02, -1.505496920081334e+02, 0.000000000000000e+00, -1.602385320956316e+02, -2.193731809461140e+01, 0.000000000000000e+00, -2.112644384383749e+01, -3.978235727779447e+02, 0.000000000000000e+00, -1.965911375639998e+02, -3.978235727779453e+02, 0.000000000000000e+00, -1.965911375640003e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_dldf_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_dldf", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_dldf_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_dldf", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-1.616113408769768e-03, -1.616887238228182e-03, -1.616216738246524e-03, -1.616962183143924e-03, -1.616510176915648e-03, -1.617393172982754e-03, -1.615351854125510e-03, -1.615913815546416e-03, -1.616179839704841e-03, -1.616477087794616e-03, -1.616179839704841e-03, -1.616477087794616e-03, -1.193830625708522e-03, -1.193433818115168e-03, -1.194097117803581e-03, -1.193589142890897e-03, -1.199168785261560e-03, -1.200031147494402e-03, -1.198087237276078e-03, -1.197884655235105e-03, -1.193450074798934e-03, -1.202555270622170e-03, -1.193450074798934e-03, -1.202555270622170e-03, -5.471772822496120e-03, -5.459556096964754e-03, -5.479434892142263e-03, -5.460456310833996e-03, -5.519113920933680e-03, -5.581076873547738e-03, -5.679490637541564e-03, -5.693240908963677e-03, -5.380152882719733e-03, -5.912656082646179e-03, -5.380152882719733e-03, -5.912656082646179e-03, -2.264215331567074e-02, -2.427767355381405e-02, -2.275465789357432e-02, -2.434852519851095e-02, -2.958070447884595e-03, -3.353179628213533e-03, -1.205312211052167e-02, -1.451266361384596e-02, -2.163391351065885e-02, -5.444838490203446e-03, -2.163391351065885e-02, -5.444838490203427e-03, -7.682899721025325e-06, -9.250933137985474e-06, -9.162230344355799e-06, -1.140154304604003e-05, -6.692484437377024e-04, -8.158528047672297e-04, -1.224330548935155e-06, -1.176133653544807e-06, -5.184912364115335e-06, -1.637576316612104e-06, -5.184912364115335e-06, -1.637576316616367e-06, -1.233534158875587e-02, -1.233948586983201e-02, -1.247524815038813e-02, -1.247473066772228e-02, -1.234519328377105e-02, -1.234564011637300e-02, -1.246514520361367e-02, -1.246840838661219e-02, -1.240522901409956e-02, -1.240698449258506e-02, -1.240522901409956e-02, -1.240698449258506e-02, -2.230459927028611e-03, -2.232709707224635e-03, -2.226251149621937e-03, -2.229060326923259e-03, -2.259189199876909e-03, -2.251999397993695e-03, -2.250331914078220e-03, -2.245128400541931e-03, -2.213054768207882e-03, -2.227956429102218e-03, -2.213054768207882e-03, -2.227956429102218e-03, -1.564929386184658e-02, -1.643473381894790e-02, -5.528172097022676e-02, -5.961449743367637e-02, -8.069234258044067e-03, -9.962914289410081e-03, -1.382869128807278e-02, -1.881635952192695e-02, -2.310293327240109e-02, -1.716830416986505e-02, -2.310293327240110e-02, -1.716830416986505e-02, -6.390980324225855e-03, -6.458117829674275e-03, -1.668025338411092e-02, -1.664156313388950e-02, -5.167205533856072e-03, -6.097856449187308e-03, -6.792699890393271e-03, -6.808170856498550e-03, -1.034240523048101e-02, -1.444595726988157e-02, -1.034240523048104e-02, -1.444595726988152e-02, -3.760190851892494e-07, -3.884285457776978e-07, -1.034426709693120e-06, -9.538390477691986e-07, -3.113933115189002e-06, -4.058980898870139e-06, -2.669238464111053e-03, -3.062117227872927e-03, -6.252239763006820e-07, -5.139595879339215e-06, -6.252239763008123e-07, -5.139595879343877e-06, -3.251828204073592e-01, -3.280825666622373e-01, -2.145983013816373e-01, -2.175724679393963e-01, -2.478060739225035e-01, -2.510709058249400e-01, -2.799468203048845e-01, -2.826620143424481e-01, -2.633206043438581e-01, -2.663296295184955e-01, -2.633206043438581e-01, -2.663296295184954e-01, -3.121700356308468e-01, -3.158420727919932e-01, -1.296835116948175e-02, -1.321944363116367e-02, -2.762564115411085e-02, -2.868238812770434e-02, -7.493767410679682e-02, -7.582423708414712e-02, -4.459222512568258e-02, -4.556396880547526e-02, -4.459222512568256e-02, -4.556396880547525e-02, -3.456626805992959e-02, -3.956440209802938e-02, -1.808356249255053e-02, -1.808910407778779e-02, -1.703270642340858e-02, -1.697936559534943e-02, -1.193562964467337e-02, -1.185148493375901e-02, -1.468902960484060e-02, -1.467830536028647e-02, -1.468902960484061e-02, -1.467830536028647e-02, -1.008961991900400e-02, -1.041372722017653e-02, -6.710017610113771e-04, -6.702728113300853e-04, -1.286137666328575e-03, -1.454327728413250e-03, -1.286319828803061e-02, -1.532807766912381e-02, -5.385485455271488e-03, -7.207485243576261e-03, -5.385485455271494e-03, -7.207485243576259e-03, -1.081594945168813e-05, -1.185360987221035e-05, -2.318021456411837e-08, -2.323535887532015e-08, -5.412019915582525e-07, -6.897563548658221e-07, -5.550360767262516e-03, -6.404163453214332e-03, -1.370945065198194e-06, -4.104037496699500e-06, -1.370945065203285e-06, -4.104037496702961e-06]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
