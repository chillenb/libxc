
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_dldf_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_dldf", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-6.922641330003853e+00, -6.922613836447835e+00, -6.922516358753744e+00, -7.276239010413933e+00, -7.275944523797751e+00, -7.629234137948782e+00, -1.462017570013534e+00, -1.646259832363243e+00, -1.643245033558135e+00, -1.644610936751036e+00, -1.644292866102504e+00, -1.459979716517588e+00, -2.624959115950748e-01, -3.374922260398801e-01, -4.302268518961359e-01, -3.406609715312347e-01, -2.602114187858657e-01, -4.232205350901646e-01, -1.013549090488865e-01, -1.009297143248323e-01, -4.793321676696712e-01, -1.614043253814628e-01, -1.443021334675672e-01, -1.274564510810792e-01, -1.792753391946811e-02, -1.211186462576835e-02, -5.968481623616441e-02, -1.037082692132719e-02, -1.444924715947881e-02, -1.444924715947881e-02, -1.632816893692239e+00, -1.628112062886039e+00, -1.632544631056734e+00, -1.628394412453337e+00, -1.577043784943771e+00, -1.577089266714959e+00, -9.851890243283919e-01, -9.796829347798417e-01, -9.901665170685043e-01, -9.848182825578925e-01, -8.556591088077947e-01, -9.797327202360147e-01, -2.267674888240503e-01, -2.232392355271099e-01, -2.477942482355808e-01, -2.349713485972408e-01, -2.262576533228294e-01, -2.428555806270381e-01, -1.637158495742904e-01, -1.230355309696156e-01, -1.591737750054424e-01, -7.691161859156792e-01, -1.495313966008001e-01, -1.495313966008001e-01, -4.942742012106898e-03, -1.013947755033143e-02, -7.758700130720190e-03, -7.887681207236111e-02, -9.742884730402530e-03, -9.742884730402534e-03, -1.005018120320660e-01, -1.400171190134748e-01, -1.239338851708513e-01, -1.149028455175973e-01, -1.188730056301114e-01, -1.205416393451371e-01, -1.040792856056240e-01, -1.971220232739187e-01, -1.928378264700372e-01, -1.867108861824949e-01, -1.987257110874446e-01, -1.878860873769969e-01, -2.359343737472911e-01, -1.719274746431060e-01, -1.384770555530002e-01, -1.531771957616066e-01, -1.692997809587643e-01, -1.425459747934783e-01, -2.119302754421014e-01, -1.685667991536161e-02, -1.156489243052801e-01, -1.554991860206806e-01, -1.380270788765451e-01, -1.380270788765451e-01, -4.313825303308969e-03, -2.713032560342138e-03, -9.699170450859021e-04, -3.312407991873441e-02, -8.949486936478025e-03, -3.329004058058222e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_dldf_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_dldf", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-6.714401238377335e+00, -6.713313880676048e+00, -6.714264613352819e+00, -6.713214822249905e+00, -6.713891153353602e+00, -6.712661844771767e+00, -6.715421860320286e+00, -5.555025615584491e+00, -6.714312448650771e+00, -5.554475101647105e+00, -5.554807839511727e+00, -5.554475101647105e+00, -1.089340964041354e+00, -1.563254661319442e+00, -1.089455060323390e+00, -1.089309183338719e+00, -1.091650502482444e+00, -1.092051366119938e+00, -1.090948085416692e+00, -1.090966267078308e+00, -1.088911862758342e+00, -1.092948217933249e+00, -1.563050371945545e+00, -1.092948217933249e+00, -3.024495797374066e-01, -3.034041241958241e-01, -3.020583148530551e-01, -1.240613506526774e-01, -9.957135227063077e-02, -9.579128879767908e-02, -1.063747288317093e-01, -2.981148197371059e-01, -3.055980490675316e-01, -2.903976448189055e-01, -1.283798894460957e-01, -8.238211954976105e-02, -8.016182477314532e-02, -1.910492436435688e-02, -8.069476736256125e-02, -2.155613040885270e-02, -5.035403919955077e-02, -3.711486519807203e-01, -1.791810263462118e-02, -1.265875049658451e-02, -1.447443711745131e-02, -6.902495745610288e-02, -1.447443711745133e-02, -5.780287560599619e-02, -2.292619986513804e-02, -2.432080111000409e-02, -4.133139744013731e-03, -2.563975152937760e-02, -2.260460139499848e-02, -1.019381362904010e-01, -1.390424587905234e-02, -1.367408531329127e-02, -2.051128420988490e-02, -1.173934405060503e-02, -2.051128420988490e-02, -1.173934405060502e-02, -1.038284830005656e+00, -1.037994804992787e+00, -1.031863187389069e+00, -1.031789725195602e+00, -1.037835785278922e+00, -1.037714871465526e+00, -1.032329878810634e+00, -1.032082057688922e+00, -1.229606439040627e+00, -1.034891499994235e+00, -1.035067138906900e+00, -1.229402933767939e+00, -5.604148847511968e-01, -5.616574512909926e-01, -5.768285974157119e-01, -5.775075226279173e-01, -5.453647904902278e-01, -5.509612313963390e-01, -5.602846842051146e-01, -5.658490737607053e-01, -5.804728183817309e-01, -8.878451118275444e-01, -5.804728183817308e-01, -5.716809888751759e-01, -1.920442012904910e-01, -2.426993274985305e-01, -1.614968002453383e-01, -1.573649636970229e-01, -1.688610011110263e-01, -1.816279458291808e-01, -1.824529704912299e-01, -1.842548792411532e-01, -1.917520321759805e-01, -2.391456844474376e-01, -1.917520321759804e-01, -1.886626472819487e-01, -6.483167915359696e-02, -6.374826442540184e-02, -8.702777995247007e-02, -8.552176158756104e-03, -7.751486341007259e-02, -6.783391452106922e-02, -6.035684561680110e-01, -6.031573235338347e-01, -3.404860458809257e-02, -1.743117252329652e-02, -3.404860458809264e-02, -1.743117252329648e-02, -1.779982020322643e-03, -1.086179709898693e-02, -1.338355589695076e-02, -1.358769670653488e-02, -9.989956927789156e-03, -1.056977862647818e-02, -1.002447969390667e-01, -3.653506831569400e-02, -1.023324179742279e-02, -1.397309370584428e-02, -1.023324179742280e-02, -1.397309370584428e-02, -5.108854640940591e-02, -5.089836058389766e-02, -7.168955004052048e-02, -7.088855215686725e-02, -7.134734914521947e-02, -7.043360323751989e-02, -6.318173912428575e-02, -5.659799906950935e-02, -6.713651580209498e-02, -6.639466800667918e-02, -6.713651580209498e-02, -5.945733635975164e-02, -5.175248128793072e-02, -5.139624399047425e-02, -1.619984098961247e-01, -2.150832559420425e-01, -1.620525227223011e-01, -2.014783625095352e-01, -1.320967329038418e-01, -1.318015661322390e-01, -1.516934970151496e-01, -1.513945666479201e-01, -1.516934970151496e-01, -1.849517772030563e-01, -1.903822400046980e-01, -2.242150358625964e-01, -1.806488623400977e-02, -1.857479890215694e-02, -1.190566709586282e-01, -4.156388756667787e-02, -1.566135901880995e-01, -9.890544258644456e-02, -6.974976825227422e-02, -7.015198118676429e-02, -6.974976825227416e-02, -1.362251429581699e-01, -1.425346171582311e-01, -1.453118817413726e-01, -2.218638124106365e-02, -2.233683483165381e-02, -1.103640763195111e-01, -1.095021327313789e-01, -1.036116903000478e-01, -1.100561798249009e-01, -7.365517929871106e-02, -5.796967304814921e-02, -7.365517929871100e-02, -5.796967304814928e-02, -5.640817329741359e-03, -5.844918931088129e-03, -3.612571239140803e-03, -3.620825639118730e-03, -1.249756548745375e-03, -1.329193054540354e-03, -4.195598016036651e-02, -4.234082006000586e-02, -9.682657349027802e-03, -1.282250756163215e-02, -9.682657349027790e-03, -2.194096205006720e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_dldf_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_dldf", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-9.118253982123323e-09, 0.000000000000000e+00, -9.117814045943252e-09, -9.118064695642871e-09, 0.000000000000000e+00, -9.117676618687241e-09, -9.117462680632324e-09, 0.000000000000000e+00, -9.116812959079003e-09, -9.119595507435396e-09, 0.000000000000000e+00, -8.742224678767928e-09, -9.118139062880701e-09, 0.000000000000000e+00, -8.741256686521864e-09, -8.740931311887116e-09, 0.000000000000000e+00, -8.741256686521864e-09, -1.302423594927438e-05, 0.000000000000000e+00, -1.471247907616368e-05, -1.302428902854722e-05, 0.000000000000000e+00, -1.302484923788548e-05, -1.302553053204714e-05, 0.000000000000000e+00, -1.302520049309896e-05, -1.302069312154609e-05, 0.000000000000000e+00, -1.301996781459778e-05, -1.303246906165296e-05, 0.000000000000000e+00, -1.302008267582092e-05, -1.472195529541395e-05, 0.000000000000000e+00, -1.302008267582092e-05, -1.142999371117543e-02, 0.000000000000000e+00, -1.121560071332659e-02, -1.151189442374667e-02, 0.000000000000000e+00, -8.785007190711567e-03, -9.538418984483068e-03, 0.000000000000000e+00, -9.771193690196035e-03, -9.461665819954173e-03, 0.000000000000000e+00, -1.230212873820109e-02, -1.085658104145992e-02, 0.000000000000000e+00, -1.456812255494681e-02, -8.522393070183657e-03, 0.000000000000000e+00, -1.061760263414407e-02, -2.932878370529786e+00, 0.000000000000000e+00, -1.736584921540639e+00, -2.778174110072495e+00, 0.000000000000000e+00, -1.639083069567967e+00, -4.492671938610826e-03, 0.000000000000000e+00, -6.050077462798213e-03, -3.758446217523197e+00, 0.000000000000000e+00, -3.862891132515899e+00, -1.641759625393250e+00, 0.000000000000000e+00, -6.636210805339547e+00, -1.641759625393250e+00, 0.000000000000000e+00, -3.451762714409274e+01, -5.979918097779675e+01, 0.000000000000000e+00, -5.997119245048929e+01, -2.114758562400226e+06, 0.000000000000000e+00, -6.265112837497218e+01, -2.195919299238964e+03, 0.000000000000000e+00, -2.449569257957486e+01, -4.401901421628477e+01, 0.000000000000000e+00, -4.447294199181461e+01, -5.690735911174018e+01, 0.000000000000000e+00, -9.776163021172091e+01, -5.690735911174018e+01, 0.000000000000000e+00, -9.776163021172101e+01, -2.266798540804456e-06, 0.000000000000000e+00, -2.268938570574431e-06, -2.259775314537072e-06, 0.000000000000000e+00, -2.262145054924026e-06, -2.266325315379265e-06, 0.000000000000000e+00, -2.268644977482730e-06, -2.260302513136870e-06, 0.000000000000000e+00, -2.262476877638244e-06, -2.329673240219575e-06, 0.000000000000000e+00, -2.265542732257093e-06, -2.263271062293776e-06, 0.000000000000000e+00, -2.332017942344156e-06, -1.281483951487108e-04, 0.000000000000000e+00, -1.282130538894837e-04, -1.248051431474230e-04, 0.000000000000000e+00, -1.249660888669428e-04, -1.310041273633793e-04, 0.000000000000000e+00, -1.302453768447181e-04, -1.280451219981169e-04, 0.000000000000000e+00, -1.272641178067820e-04, -1.242067084429676e-04, 0.000000000000000e+00, -1.459240904245025e-04, -1.242067084429676e-04, 0.000000000000000e+00, -1.262172580036522e-04, -1.614719532805949e-02, 0.000000000000000e+00, -1.757310766132921e-02, -1.094919457032478e-02, 0.000000000000000e+00, -1.084217567626196e-02, -2.365937885887038e-02, 0.000000000000000e+00, -2.062548646448110e-02, -2.029358717372216e-02, 0.000000000000000e+00, -1.774156356005825e-02, -1.369690592469969e-02, 0.000000000000000e+00, -1.820036103912703e-02, -1.369690592469969e-02, 0.000000000000000e+00, -1.691663822132077e-02, -8.075430621105422e+00, 0.000000000000000e+00, -7.922123959324774e+00, -2.853255639946235e+00, 0.000000000000000e+00, -1.558065819793729e+00, -9.589415207710111e+00, 0.000000000000000e+00, -9.118856221817991e+00, -1.405212636466540e-04, 0.000000000000000e+00, -1.407672955796624e-04, -7.154406638547703e+00, 0.000000000000000e+00, -7.167925654834847e+00, -7.154406638547701e+00, 0.000000000000000e+00, -7.167925654834851e+00, -6.167281071084639e+07, 0.000000000000000e+00, -2.949712423787796e+01, -4.176422108852140e+01, 0.000000000000000e+00, -3.681600989276504e+01, -3.004561114790432e+02, 0.000000000000000e+00, -3.296329251022306e+02, -1.808453111569876e+01, 0.000000000000000e+00, -2.751043825309822e+02, -5.670726928009827e+01, 0.000000000000000e+00, -1.794916987855085e+02, -5.670726928009829e+01, 0.000000000000000e+00, -1.794916987855084e+02, -8.161982347434140e-03, 0.000000000000000e+00, -7.931043278873571e-03, -1.137956870079655e-02, 0.000000000000000e+00, -1.110308332805205e-02, -1.051967168933071e-02, 0.000000000000000e+00, -1.024187750621691e-02, -9.548629149594876e-03, 0.000000000000000e+00, -9.204730961481345e-03, -1.004711284922154e-02, 0.000000000000000e+00, -9.783813935380822e-03, -1.004711284922154e-02, 0.000000000000000e+00, -9.671878587941458e-03, -9.653596287633208e-03, 0.000000000000000e+00, -9.398101636929595e-03, -3.301316020378550e-02, 0.000000000000000e+00, -3.558803103091432e-02, -2.727467468691211e-02, 0.000000000000000e+00, -2.850263442146761e-02, -2.139745167256777e-02, 0.000000000000000e+00, -2.106159521478258e-02, -2.447113708945917e-02, 0.000000000000000e+00, -2.407581417490001e-02, -2.447113708945917e-02, 0.000000000000000e+00, -2.532199169600178e-02, -9.391063723664926e-03, 0.000000000000000e+00, -9.690452629339576e-03, -7.132594567320782e-01, 0.000000000000000e+00, -6.990421724256131e-01, -4.957495369627771e-01, 0.000000000000000e+00, -3.588184843518570e-01, -1.513438296576987e-01, 0.000000000000000e+00, -1.271627190074495e-01, -2.191341375642978e-01, 0.000000000000000e+00, -2.195944232324532e-01, -2.191341375642980e-01, 0.000000000000000e+00, -2.680711051868769e-01, -4.578861276270516e-02, 0.000000000000000e+00, -4.464447196397366e-02, -2.368420908430964e+03, 0.000000000000000e+00, -2.304630970932435e+03, -1.897895187943445e+01, 0.000000000000000e+00, -1.918245437181724e+01, -1.555086377945309e-01, 0.000000000000000e+00, -1.476613721897937e-01, -1.614462101681309e+01, 0.000000000000000e+00, -1.692855365283404e+01, -1.614462101681309e+01, 0.000000000000000e+00, -1.692855365283405e+01, -6.089519039356670e+05, 0.000000000000000e+00, -5.280853527611489e+05, -4.810938729217469e+01, 0.000000000000000e+00, -4.789783791345464e+01, -2.537776924740905e+08, 0.000000000000000e+00, -1.983207426213441e+08, -1.389177079558006e+02, 0.000000000000000e+00, -1.297619339699457e+02, -1.462644483858336e+02, 0.000000000000000e+00, -1.862131950550299e+02, -1.462644483858337e+02, 0.000000000000000e+00, -2.667914128770337e+07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_dldf_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_dldf", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-1.475050971946141e-03, -1.475757604224064e-03, -1.475149624219592e-03, -1.475829160763316e-03, -1.475425536214630e-03, -1.476235751508009e-03, -1.474319447876789e-03, -1.625366011986513e-03, -1.475114487216683e-03, -1.625926510892434e-03, -1.625669751299006e-03, -1.625926510892434e-03, -1.359666222562360e-03, -1.055024855570186e-03, -1.359903841118318e-03, -1.359643428973791e-03, -1.364645909880035e-03, -1.365503989219647e-03, -1.362780939051014e-03, -1.362768349896301e-03, -1.359356635436341e-03, -1.367136177052914e-03, -1.054823284399753e-03, -1.367136177052914e-03, -4.476352189150154e-03, -4.507824789172229e-03, -4.468336353172760e-03, -7.061845657501305e-03, -7.110140144574470e-03, -7.124621191496399e-03, -7.142551806785982e-03, -4.432903045370002e-03, -4.502939445787683e-03, -4.161359034416366e-03, -7.009394012974013e-03, -7.133753781610966e-03, -1.235447801553244e-02, -2.461206509500604e-02, -1.270693060217547e-02, -2.478285322484850e-02, -4.842315838225927e-03, -2.853688630514376e-03, -1.357598900525399e-02, -1.558097944335241e-02, -2.263841687551539e-02, -6.349137411654939e-03, -2.263841687551539e-02, -1.696812781609060e-03, -7.683277395315777e-06, -9.251151924241774e-06, -1.564650316524473e-06, -1.140221724392341e-05, -1.259596682879148e-04, -8.243977223811991e-04, -1.224532014832707e-06, -1.176291627030728e-06, -5.185521315511127e-06, -1.638147095280142e-06, -5.185521315511127e-06, -1.638147095284406e-06, -1.234064533915199e-02, -1.234448728093321e-02, -1.248054915459494e-02, -1.247972630907182e-02, -1.235037623397833e-02, -1.235055433705720e-02, -1.247032934444630e-02, -1.247332108419060e-02, -1.159775100337105e-02, -1.241199838639561e-02, -1.241062320847867e-02, -1.159896471192386e-02, -2.302322746543521e-03, -2.302244865730408e-03, -2.286830724027591e-03, -2.287843029459676e-03, -2.321176175496101e-03, -2.314818544017966e-03, -2.301934208738811e-03, -2.297379062827498e-03, -2.285206099250291e-03, -1.708769005488384e-03, -2.285206099250291e-03, -2.292580395865105e-03, -1.661013325243897e-02, -1.476325703898851e-02, -5.883957375018620e-02, -6.328353635597778e-02, -9.088461809601748e-03, -1.091864037253917e-02, -1.580509697165344e-02, -2.103260910913742e-02, -2.421171237708433e-02, -1.555344938419986e-02, -2.421171237708434e-02, -1.828066689764413e-02, -6.759658210787826e-03, -6.871637968819132e-03, -7.668350972155561e-03, -1.718470461150234e-02, -5.496294747894961e-03, -6.444612392323077e-03, -7.607611766051352e-03, -7.624518585213901e-03, -1.088661503460405e-02, -1.510580165005418e-02, -1.088661503460408e-02, -1.510580165005413e-02, -6.397931478435538e-08, -3.885550445700393e-07, -1.034749795211649e-06, -9.541583612407583e-07, -3.114649723155007e-06, -4.060139351692814e-06, -2.794102248405630e-03, -6.886551806587699e-04, -6.256281711236111e-07, -5.139949666042804e-06, -6.256281711237416e-07, -5.139949666047466e-06, -3.278861696230453e-01, -3.307363107993200e-01, -2.163024037202633e-01, -2.192555324586072e-01, -2.421889755987194e-01, -2.455073889692027e-01, -2.751080234923812e-01, -2.849137687919412e-01, -2.580595744001049e-01, -2.611232653013425e-01, -2.580595744001049e-01, -2.684377728684004e-01, -3.173784447950946e-01, -3.209268939308916e-01, -1.308508168500714e-02, -1.093272093684398e-02, -2.794815649116585e-02, -2.520218204111740e-02, -7.598591193531477e-02, -7.687775571269374e-02, -4.520632807671863e-02, -4.616846050590134e-02, -4.520632807671861e-02, -4.116071205014063e-02, -3.741825644009728e-02, -3.828379801559590e-02, -1.844335732942809e-02, -1.846007710083998e-02, -1.070967636744585e-02, -1.767269162124001e-02, -9.579117593284796e-03, -1.293387934030151e-02, -1.552037384887529e-02, -1.551159157258861e-02, -1.552037384887529e-02, -1.059909709938155e-02, -1.061536742037021e-02, -1.090297322517424e-02, -1.253136300147598e-04, -1.253401605387349e-04, -1.311449796976059e-03, -1.483759097018959e-03, -1.409005864919730e-02, -1.628404016453199e-02, -5.618450829983520e-03, -7.542632718360537e-03, -5.618450829983528e-03, -7.542632718360536e-03, -1.852278967108160e-06, -2.031258448958576e-06, -2.318274953314641e-08, -2.323943494636104e-08, -9.205725666159763e-08, -1.173385622107055e-07, -1.407863046740792e-03, -1.636818467548787e-03, -1.371926266710668e-06, -4.104285430985015e-06, -1.371926266715762e-06, -6.992167860326105e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
