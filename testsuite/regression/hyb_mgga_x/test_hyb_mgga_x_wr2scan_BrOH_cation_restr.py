
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_wr2scan_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_wr2scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.151645077965354e+01, -2.151656990854026e+01, -2.151709461179092e+01, -2.151532619046144e+01, -2.151625346222358e+01, -2.151625346222358e+01, -2.882407901088906e+00, -2.882526722462114e+00, -2.885722815338466e+00, -2.884703945982126e+00, -2.884497358567625e+00, -3.572509438910695e+00, -4.006193146565336e-01, -5.425894372807489e-01, -5.227054658569479e-01, -5.289661380007296e-01, -5.276263120828607e-01, -5.276263120828607e-01, -5.861677588361859e-02, -6.059976479044041e-02, -4.682959686046249e-01, -3.050460019936325e-02, -4.058680496971887e-02, -4.058680496971887e-02, -2.213159348579475e-06, -2.635869281036080e-06, -6.618747382406058e-04, -3.389524206197375e-07, -7.559321199399561e-07, -7.559321199399561e-07, -5.472928886742047e+00, -5.474020230281377e+00, -5.472983647464062e+00, -5.246148642615037e+00, -5.473479719337173e+00, -5.473479719337173e+00, -1.511049175308285e+00, -1.531685870080296e+00, -1.495631114411226e+00, -1.513875360495300e+00, -1.530053842709999e+00, -1.939637414608690e+00, -4.611121905278143e-01, -5.154245854286567e-01, -4.144436688802040e-01, -4.376943645296895e-01, -4.712497784779029e-01, -4.167010524857275e-01, -8.593138237053217e-03, -5.806200477403978e-02, -6.972941468868045e-03, -1.894987173151518e+00, -1.818113052269165e-02, -1.818113052269165e-02, -2.632366807496443e-07, -3.101979954910344e-07, -1.528011432559016e-07, -2.308499063228572e-03, -4.184867386360345e-07, -2.618440808672271e-07, -4.655073504968018e-01, -4.618811045006427e-01, -4.556417025824763e-01, -4.642136374385568e-01, -4.636879165871245e-01, -4.636879165871245e-01, -4.486926470885205e-01, -3.623896786685479e-01, -3.871155174884652e-01, -4.116428260695740e-01, -3.991196407505976e-01, -3.660487052209175e-01, -5.478154873466911e-01, -6.780211614869737e-02, -1.336835264379752e-01, -1.683518411728404e-01, -1.707454981643608e-01, -1.707454981643608e-01, -2.612991429905431e-01, -5.767997203135060e-04, -1.511107118675267e-03, -2.033442199884203e-01, -4.565646552815915e-03, -6.119938211805682e-03, -6.565447428158291e-06, -3.500139379464181e-09, -4.939005189464517e-08, -5.110432883866809e-03, -2.083129119031422e-07, -2.083129119031396e-07])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_wr2scan_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_wr2scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-3.190124265952672e+01, -3.190129759936464e+01, -3.190158340720492e+01, -3.190076278342471e+01, -3.190118693817372e+01, -3.190118693817372e+01, -4.608703763337111e+00, -4.609007885551715e+00, -4.617133202846375e+00, -4.614279596699581e+00, -4.614085680442398e+00, -4.507691057327890e+00, -6.384016678804129e-01, -6.810389501824162e-01, -6.438551049193486e-01, -6.577680620453745e-01, -6.547204521104149e-01, -6.547204521104149e-01, -8.488041188797030e-02, -8.829017256109679e-02, -7.017841869206805e-01, -3.412034502965942e-02, -5.335975633139769e-02, -5.335975633139772e-02, 1.065381317417676e-04, 1.237812287906141e-04, 4.917945250055195e-03, 1.887760773645357e-05, 3.994882586080269e-05, 3.994882586080269e-05, -7.213309377881214e+00, -7.215693733748100e+00, -7.213436124050560e+00, -7.521476384462494e+00, -7.214509368175823e+00, -7.214509368175823e+00, -2.405326571832421e+00, -2.440031461615284e+00, -2.381256495301662e+00, -2.409881146915321e+00, -2.437265322788069e+00, -2.446512405899989e+00, -6.389253272751936e-01, -7.219197445267377e-01, -5.697822019931921e-01, -6.088504840781562e-01, -6.544069966926757e-01, -7.020647727884062e-01, -1.629479114464878e-02, -7.439937718045428e-02, -1.331008957172802e-02, -2.490341370130517e+00, -1.738732929846060e-02, -1.738732929846063e-02, -5.264445245106362e-07, 1.738577300424522e-05, 8.255937474962722e-06, -4.513684879846731e-03, -8.369175979190768e-07, 1.427801588156022e-05, -6.683902648977633e-01, -6.600149113972149e-01, -6.723806370481958e-01, -6.653378150772687e-01, -6.641150723986144e-01, -6.641150723986144e-01, -6.452253048219470e-01, -5.062417065108948e-01, -5.457757924157288e-01, -5.851563168633005e-01, -5.650171538555641e-01, -6.007418453608361e-01, -7.611987445039459e-01, -1.172715340442813e-01, -1.864467730020547e-01, -2.953644846926329e-01, -2.420602479214629e-01, -2.420602479214629e-01, -4.533429491082779e-01, 4.672027449813563e-03, 6.297280719856319e-03, -2.951084133898664e-01, -8.823549862561524e-03, 1.408510412975355e-04, 2.947143176596823e-04, 2.067315495835885e-07, 2.833238778236861e-06, 9.670371179227650e-04, 1.133841443632491e-05, 1.133841443632740e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_wr2scan_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_wr2scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.199641803736416e-08, -1.199622481144328e-08, -1.199534854600883e-08, -1.199821952685362e-08, -1.199671782013191e-08, -1.199671782013191e-08, -8.234948529502870e-06, -8.238561226949953e-06, -8.333852333030734e-06, -8.292232103548803e-06, -8.300087643287193e-06, -6.877572522107766e-06, -1.447575312138084e-03, -3.621683408752963e-03, -3.942607257887329e-03, -3.849519513181415e-03, -3.868558822903663e-03, -3.868558822903663e-03, -3.280747059971973e-01, -3.156794097276771e-01, -2.953138318725282e-04, -6.517377377459901e-01, -4.918565604131342e-01, -4.918565604131334e-01, -4.361053884760412e+01, -4.440863814761462e+01, -9.064805845077904e+00, -3.415122441665596e+01, -4.306491508481112e+01, -4.306491508481112e+01, -1.704855970579200e-06, -1.705627539171408e-06, -1.704909642964787e-06, -3.017455497010940e-06, -1.705236009833836e-06, -1.705236009833836e-06, -5.745657788982451e-05, -5.878304019199633e-05, -5.666276957322552e-05, -5.752066628306603e-05, -5.875583165378148e-05, -6.265842544089183e-05, -6.932642260325115e-03, -5.587758261301002e-03, -8.754825548838500e-03, -8.009176291569609e-03, -6.635786182504114e-03, -1.405619054094651e-02, -8.834301679494572e-02, -3.148441007073399e-01, -1.045751667485839e-01, -7.779146764582976e-05, -1.074800590263107e+00, -1.074800590263105e+00, -1.180754516944774e+02, -3.164514054555634e+01, -9.571182906961347e+01, -2.455927663407123e-01, -8.667278389123928e+01, -5.862944725654604e+01, -8.827216416922599e-03, -8.643972014756441e-03, -1.128568206867731e-02, -8.782910785640755e-03, -8.757032467164028e-03, -8.757032467164028e-03, -9.718069846602244e-03, -1.271210247069468e-02, -1.137001172308399e-02, -1.039939006843428e-02, -1.084812278224478e-02, -2.316329241617132e-02, -4.568017914568140e-03, -2.607567026530750e-02, -9.436898805148253e-02, -3.549301430000457e-02, -6.233388016040836e-02, -6.233388016040838e-02, -2.129998989864700e-02, -9.710266071356713e+00, -5.804707981910493e+00, -4.752430958353702e-02, -1.482294674017924e-01, -2.531196401363542e+00, -2.976519200461431e+01, -2.176727392645872e+01, -5.465719928792455e+01, -2.886887325509921e+00, -7.016259884423549e+01, -7.016259884425044e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_wr2scan_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_wr2scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.847678834020007e-03, 1.847664783848982e-03, 1.847604330822684e-03, 1.847812683970735e-03, 1.847703263507208e-03, 1.847703263507208e-03, 5.370754484508053e-03, 5.373218742484471e-03, 5.438523939276092e-03, 5.411567753847114e-03, 5.414984329753204e-03, 4.935795918282230e-03, 6.242307534523945e-03, 1.862463797048781e-02, 1.867997725655235e-02, 1.870816568719746e-02, 1.869970667564744e-02, 1.869970667564744e-02, 2.900331560283145e-02, 2.921725134393099e-02, 1.573142621378153e-03, 2.475551047508928e-02, 2.668558216512175e-02, 2.668558216512170e-02, 1.522141559597703e-04, 1.807449694288149e-04, 6.242489523766921e-03, 2.295831250922587e-05, 5.744212610389730e-05, 5.744212610389730e-05, 3.971967330626895e-03, 3.975043010033360e-03, 3.972149061513872e-03, 6.743661677627492e-03, 3.973501930387127e-03, 3.973501930387127e-03, 6.598977037346183e-03, 6.915915256058619e-03, 6.393406972169912e-03, 6.630251096364226e-03, 6.897685275043559e-03, 8.186984976289328e-03, 2.369978239037594e-02, 2.409837798212734e-02, 2.386303118090287e-02, 2.435755050709870e-02, 2.374495710191336e-02, 4.692265491172243e-02, 6.118576751621826e-05, 2.771666238957220e-02, 4.368838961897428e-05, 9.278235595930259e-03, 2.195219288348011e-02, 2.195219288348008e-02, 1.776450500501015e-12, 1.987515222264038e-05, 2.687527053603811e-05, 8.112096997067591e-06, 1.525234628498094e-11, 2.878244166531940e-05, 2.900637646371987e-02, 2.827004486728562e-02, 3.625089706286694e-02, 2.881899746554092e-02, 2.871535632994085e-02, 2.871535632994085e-02, 2.946117320270409e-02, 2.579171344461202e-02, 2.627762185515462e-02, 2.704270131240121e-02, 2.660156610215887e-02, 5.349571040386946e-02, 2.282136834641804e-02, 3.128151943045105e-03, 2.938616000624140e-02, 2.282205730237013e-02, 2.947409598806927e-02, 2.947409598806928e-02, 3.084137833043940e-02, 5.860186008785651e-03, 8.915635679476551e-03, 3.049686049118248e-02, 3.596165726006436e-05, 1.567014515215273e-02, 2.920718014963968e-04, 2.611808853686112e-07, 6.063986643038323e-06, 1.477735645454607e-02, 2.728873472757806e-05, 2.728873472758377e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
