
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_wr2scan_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_wr2scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.298347702838564e+01, -2.298354605532746e+01, -2.298390410013238e+01, -2.298287818357743e+01, -2.298340843435726e+01, -2.298340843435726e+01, -3.222759504807708e+00, -3.222880706292586e+00, -3.226354420288315e+00, -3.227388159206901e+00, -3.226029379632214e+00, -3.226029379632214e+00, -4.475531617272663e-01, -4.468898222208809e-01, -4.316398943624873e-01, -4.409299303626108e-01, -4.384166347602041e-01, -4.384166347602041e-01, -5.712713681399222e-02, -5.876417120109031e-02, -5.101282669060185e-01, -2.558557447660738e-02, -3.572101876348007e-02, -3.572101876348007e-02, -1.787976074005341e-06, -2.113912484871494e-06, -5.337955190960107e-04, -2.747164767416918e-07, -6.074829318963109e-07, -6.074829318963110e-07, -5.471901670030612e+00, -5.473004576145788e+00, -5.471977826871952e+00, -5.472950479863255e+00, -5.472447654936965e+00, -5.472447654936965e+00, -1.888737692731402e+00, -1.911206382978514e+00, -1.882016737915060e+00, -1.902063266326832e+00, -1.904573654349864e+00, -1.904573654349864e+00, -4.451210784231543e-01, -4.961755297767806e-01, -3.836255111175228e-01, -3.982461273311266e-01, -4.564677673151468e-01, -4.564677673151468e-01, -9.530682491069253e-03, -5.507365392010278e-02, -7.648215093899369e-03, -1.738242991325022e+00, -1.560838622600094e-02, -1.560838622600094e-02, -1.171451817254254e-07, -2.582784788875237e-07, -1.241375446456759e-07, -2.404413867747042e-03, -2.165251087568655e-07, -2.165251087568655e-07, -4.636512904931935e-01, -4.601312295975896e-01, -4.613703497801108e-01, -4.623902755109324e-01, -4.618788120422550e-01, -4.618788120422550e-01, -4.450272101644575e-01, -3.608260847009946e-01, -3.850049139803843e-01, -4.089330602200388e-01, -3.965807244691700e-01, -3.965807244691700e-01, -5.205295787039546e-01, -9.260163608840292e-02, -1.289916516071898e-01, -2.011634645646985e-01, -1.635880597027352e-01, -1.635880597027352e-01, -3.121846844136555e-01, -4.655461931504841e-04, -1.221559432829147e-03, -1.930278378417725e-01, -5.014629262234637e-03, -5.014629262234637e-03, -5.441282884823415e-06, -3.402624279273127e-09, -3.968444753362295e-08, -4.242840275485853e-03, -1.703636524577166e-07, -1.703636524577161e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_wr2scan_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_wr2scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.995568401056078e+01, -2.995579200533014e+01, -2.995628053870016e+01, -2.995467476911745e+01, -2.995551495094550e+01, -2.995551495094550e+01, -4.617803048633838e+00, -4.617915405744571e+00, -4.620821052816033e+00, -4.618984139888914e+00, -4.619148638439738e+00, -4.619148638439738e+00, -6.674647397197397e-01, -6.663362057477691e-01, -6.402383616146720e-01, -6.511753393016854e-01, -6.485429754665418e-01, -6.485429754665418e-01, -7.701287358637451e-02, -7.990683407172178e-02, -7.148520437991882e-01, -4.341389157146792e-02, -5.268722053635536e-02, -5.268722053635533e-02, -1.452452434472756e-07, -3.769653102033578e-06, -1.174854913111492e-03, -6.866370956944779e-07, -1.494194327054271e-06, -1.494194327054272e-06, -7.213660202567937e+00, -7.216043911517191e+00, -7.213779786017566e+00, -7.215883671957663e+00, -7.214863546878654e+00, -7.214863546878654e+00, -2.372860662510975e+00, -2.407875381650264e+00, -2.353767219951415e+00, -2.386458688731728e+00, -2.401713071483450e+00, -2.401713071483450e+00, -6.419790691736000e-01, -7.381712576569776e-01, -5.773486841381505e-01, -6.320069996670126e-01, -6.580414707031961e-01, -6.580414707031961e-01, -1.808652573208407e-02, -5.700317657008420e-02, -1.492847392469879e-02, -2.628247002075992e+00, -2.305576558544491e-02, -2.305576558544504e-02, -2.953662101351343e-07, -6.471661457077244e-07, -3.086088159438428e-07, -5.036232499748747e-03, -5.394193163175792e-07, -5.394193163175793e-07, -6.704728185358931e-01, -6.613845380777047e-01, -6.645539828138317e-01, -6.671991807272301e-01, -6.658738663862703e-01, -6.658738663862703e-01, -6.495933505046022e-01, -5.049137253559213e-01, -5.452089826470650e-01, -5.856882863493961e-01, -5.650127829032946e-01, -5.650127829032946e-01, -7.833465081336450e-01, -1.168564654601753e-01, -1.726632659558802e-01, -3.002649107545852e-01, -2.317053504751814e-01, -2.317053504751814e-01, -4.428301714970494e-01, -9.442597382109372e-04, -2.630937253592156e-03, -2.934290879401945e-01, -9.583291242355338e-03, -9.583291242355341e-03, -1.323697285044376e-05, -8.720178035275812e-09, -9.923761415341459e-08, -6.802971598002049e-03, -4.243260600778309e-07, -4.243260600778297e-07]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_wr2scan_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_wr2scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-6.242482701184099e-09, -6.242422485559006e-09, -6.241919412463267e-09, -6.242809125375729e-09, -6.242376541636627e-09, -6.242376541636627e-09, -1.439248401486619e-05, -1.439418398389204e-05, -1.443713820214155e-05, -1.441378498400930e-05, -1.442265561983886e-05, -1.442265561983886e-05, -3.257235054128623e-03, -3.246865350938470e-03, -3.018323911390827e-03, -3.131140165074557e-03, -3.101464349560637e-03, -3.101464349560637e-03, -5.112686473437035e-01, -5.140948940065789e-01, -1.042038984313898e-03, -2.474851553857020e-01, -4.991008361321090e-01, -4.991008361321105e-01, -1.559623561867989e+00, -3.711051763590689e-01, 3.388553571648506e-02, 9.709461822099340e-02, 1.043579717959406e-01, 1.043579717959414e-01, -1.713015073804009e-06, -1.713713427779186e-06, -1.712899330686880e-06, -1.713521574989021e-06, -1.713443376194904e-06, -1.713443376194904e-06, -9.244224412518874e-05, -8.573845416148428e-05, -9.052484756483931e-05, -8.421935193495422e-05, -8.953772117191401e-05, -8.953772117191401e-05, -1.221823774574841e-02, -1.075364997454228e-02, -1.849629639078212e-02, -2.124652728359107e-02, -1.137921155782077e-02, -1.137921155782077e-02, -1.054098949233316e-01, -5.562465212445827e-01, -6.970034973295942e-02, -1.954451038928745e-04, -6.104724907925743e-01, -6.104724907925855e-01, 1.112954922580889e-01, 1.101615889352033e-01, 2.796700411217158e-01, 2.615392327938336e-03, 1.958085612808376e-01, 1.958085612808374e-01, -9.463649215066183e-03, -9.450592759903186e-03, -9.483294051551431e-03, -9.485591196670518e-03, -9.487398756597865e-03, -9.487398756597865e-03, -1.112086513271399e-02, -1.403495851901205e-02, -1.287448047560667e-02, -1.216568127990730e-02, -1.254190615568057e-02, -1.254190615568057e-02, -9.898951255469374e-03, -2.386410387581177e-01, -1.595982878760919e-01, -7.867421670326973e-02, -1.107226575962576e-01, -1.107226575962577e-01, -2.726673613775722e-02, -1.213909684728668e-01, 2.105362873332937e-02, -9.144281082174861e-02, -1.846650677836878e-01, -1.846650677836869e-01, 1.105800391725137e-01, 1.882883159097044e-01, 1.316870781765233e-01, -6.038828766677576e-01, 2.167160741820710e-01, 2.167160741820713e-01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_wr2scan_BrOH_cation_restr_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_wr2scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_wr2scan_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_wr2scan", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.003250421372926e-03, 1.003248578243078e-03, 1.003211564742905e-03, 1.003238112618138e-03, 1.003228321022065e-03, 1.003228321022065e-03, 8.743131840072721e-03, 8.744489483640131e-03, 8.780939954137930e-03, 8.777899678886088e-03, 8.773941647146198e-03, 8.773941647146198e-03, 1.132523635023859e-02, 1.128843522834400e-02, 1.056246040343138e-02, 1.155619862008536e-02, 1.124352393373448e-02, 1.124352393373448e-02, 4.389032831742694e-02, 4.604352556772241e-02, 1.977479815412215e-03, 9.766556533521072e-03, 2.650437664387928e-02, 2.650437664387922e-02, 5.810568965916367e-06, 1.991330639810179e-06, 3.586720983454162e-05, 3.043248117542932e-09, 2.312114455935263e-08, 2.312114455935181e-08, 3.986615562043648e-03, 3.989546302237909e-03, 3.986492519116779e-03, 3.989090136049487e-03, 3.988229859313687e-03, 3.988229859313687e-03, 1.141137756482673e-02, 1.086267679087552e-02, 1.104680195872887e-02, 1.052266356642372e-02, 1.127468631884182e-02, 1.127468631884182e-02, 3.834358559238465e-02, 4.070705792565478e-02, 4.412168340368854e-02, 4.854723282527427e-02, 3.739173623738912e-02, 3.739173623738912e-02, 1.783686556033533e-03, 4.747781373290230e-02, 1.117549198202269e-03, 1.875973218077289e-02, 1.266878118313015e-02, 1.266878118313001e-02, 7.152129346027284e-11, 5.293530585206328e-10, 2.889164857970704e-09, 2.066658170738420e-04, 1.033043986739893e-09, 1.033043986739901e-09, 3.081613710471235e-02, 3.031041902581663e-02, 3.058084056723046e-02, 3.072862149090960e-02, 3.066461612782526e-02, 3.066461612782526e-02, 3.327509462126848e-02, 2.810799096961702e-02, 2.920137997721666e-02, 3.066219272542993e-02, 3.002559030097179e-02, 3.002559030097180e-02, 4.180912123310142e-02, 4.163999823972144e-02, 4.776109469952176e-02, 5.182570614101279e-02, 4.963794238884363e-02, 4.963794238884366e-02, 4.085756887706565e-02, 1.225092766581979e-04, 8.240724265091175e-05, 5.368378817427825e-02, 1.496201090212549e-03, 1.496201090212545e-03, 1.140016764418882e-08, 4.964378005046614e-13, 2.552205331142813e-09, 3.345332894274534e-03, 1.795243496121841e-09, 1.795243496121827e-09]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
