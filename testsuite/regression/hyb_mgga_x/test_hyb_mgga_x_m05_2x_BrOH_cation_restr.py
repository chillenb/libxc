
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_m05_2x_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m05_2x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-7.408329171159691e+00, -7.408333589165090e+00, -7.408366142264756e+00, -7.408299053523769e+00, -7.408332392635387e+00, -7.408332392635387e+00, -1.479507534460519e+00, -1.479530245434759e+00, -1.480136667916206e+00, -1.480029963259718e+00, -1.479887907501386e+00, -1.708128717637831e+00, -3.152771427311942e-01, -4.012223003362206e-01, -4.222175486434332e-01, -4.109143903720954e-01, -4.135819909220454e-01, -4.135819909220454e-01, -1.272298378400175e-01, -1.266049742308326e-01, -4.322709645163720e-01, -1.378152677290728e-01, -1.285701263553151e-01, -1.285701263553148e-01, -1.665343208128433e-02, -1.751983843994125e-02, -8.877667651403894e-02, -9.643631722085750e-03, -1.210678210801431e-02, -1.210678210801431e-02, -1.799441071324482e+00, -1.796610129499402e+00, -1.799276217209905e+00, -1.724374850358391e+00, -1.798027098261907e+00, -1.798027098261907e+00, -8.214983257375501e-01, -8.291906852530623e-01, -8.163896655631249e-01, -8.225736426688397e-01, -8.285110124506411e-01, -9.752425212246295e-01, -2.542696096755515e-01, -2.326073559527506e-01, -2.630228540575452e-01, -2.430345552802844e-01, -2.471578656739802e-01, -2.261132396224705e-01, -9.060116089152201e-02, -1.491408429315424e-01, -8.816006667217655e-02, -7.756137514806777e-01, -1.303691812539079e-01, -1.303691812539078e-01, -4.127141003929298e-03, -9.428526224429046e-03, -7.204915385792226e-03, -7.107871757276760e-02, -4.813258120918707e-03, -8.681089310986788e-03, -2.615269413015296e-01, -2.004437404874534e-01, -2.129896137587149e-01, -2.369577654488991e-01, -2.264625061097574e-01, -2.264625061097574e-01, -2.463717497570808e-01, -2.310940463771896e-01, -2.081785714219650e-01, -1.957563469750199e-01, -1.992611926946328e-01, -1.859658287917746e-01, -2.504265481406300e-01, -1.203666773773807e-01, -1.687875297939115e-01, -1.458275809462517e-01, -1.611390901449026e-01, -1.611390901449026e-01, -1.931940556988063e-01, -8.555390765432710e-02, -1.097635988357322e-01, -1.637026739361588e-01, -7.653545027513350e-02, -1.288900305478961e-01, -2.346996524047436e-02, -2.522536664440694e-03, -5.292317930372420e-03, -1.250915462251473e-01, -8.032467433899584e-03, -8.032467433899562e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_m05_2x_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m05_2x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-9.004440637946736e+00, -9.004455593256472e+00, -9.004533489091999e+00, -9.004308277438060e+00, -9.004425769683341e+00, -9.004425769683341e+00, -2.097039162482929e+00, -2.096749193592555e+00, -2.088819527532365e+00, -2.092288418189070e+00, -2.091703899031829e+00, -1.922415626435370e+00, -2.159205407845565e-01, -1.233885012725510e-01, -1.481833797015695e-01, -1.303187480920268e-01, -1.336204814761634e-01, -1.336204814761634e-01, -7.500400240573522e-02, -6.930779676883855e-02, -4.489789483678313e-01, -4.637662395000929e-02, -7.546583571218639e-02, -7.546583571218353e-02, -2.209059611099973e-02, -2.322418680210555e-02, -1.040888671102174e-01, -1.283931321378171e-02, -1.609826427760854e-02, -1.609826427760854e-02, -1.677889707777601e+00, -1.673248771866860e+00, -1.677604489423488e+00, -1.781693181259020e+00, -1.675492961445177e+00, -1.675492961445177e+00, -1.149097539071722e+00, -1.188881250338480e+00, -1.111413002224718e+00, -1.154519010183673e+00, -1.186587412662913e+00, -1.091642033182483e+00, -1.396762287625501e-01, -2.497774857381759e-01, -2.558301511384087e-01, -1.330398871748726e-01, -1.421559642553788e-01, -1.754493440165554e-01, -6.361820885212262e-02, -9.076331399271236e-02, -6.685852054621047e-02, -4.909852057043734e-01, -3.854404181950370e-02, -3.854404181949617e-02, -5.499804473412657e-03, -1.255479761884593e-02, -9.585502339318874e-03, -7.140415096717620e-02, -6.408030953611602e-03, -1.155198138384022e-02, -4.304573616137137e-01, -3.721725888536876e-01, -4.486680968738885e-01, -4.776691304401053e-01, -4.676338351669311e-01, -4.676338351669311e-01, -4.509027077875677e-01, -1.739081004379901e-01, -1.322203455730693e-01, -2.085561803755550e-01, -1.876435980206391e-01, -2.052697505539965e-01, -2.497403073430633e-01, -1.229447933156897e-01, -5.738130577471609e-02, -2.006792702602866e-01, -8.592999998202579e-02, -8.592999998202588e-02, -2.649031768722896e-01, -1.013482571757623e-01, -1.183415060070771e-01, -1.732824397738211e-01, -5.928609280370127e-02, -7.901332155734406e-02, -3.107215378933722e-02, -3.363031660600830e-03, -7.050937150226487e-03, -8.232071350432474e-02, -1.068838864315045e-02, -1.068838864315072e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m05_2x_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m05_2x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-3.050261957639638e-09, -3.050221243080265e-09, -3.050032433445662e-09, -3.050637920494189e-09, -3.050321758837082e-09, -3.050321758837082e-09, -5.325334721974183e-06, -5.325358996226457e-06, -5.325560540752293e-06, -5.323564745724253e-06, -5.325992941647579e-06, -3.478643154347739e-06, -4.250892103010198e-03, -1.881870663501909e-03, -1.995544395539788e-03, -1.978511671373291e-03, -1.981931616474941e-03, -1.981931616474941e-03, -3.439804510830665e-01, -3.353551721441045e-01, -2.703690739674493e-03, -4.592291925779670e-01, -4.200239725507713e-01, -4.200239725507702e-01, -3.956890328414186e+00, -4.120800225632217e+00, -1.773434619791443e+00, -2.912516547483547e+00, -4.049993927416122e+00, -4.049993927416122e+00, -7.413545167747291e-07, -7.403634894204269e-07, -7.413020295156359e-07, -8.242743074487228e-07, -7.408574416985290e-07, -7.408574416985290e-07, -5.238065249306326e-05, -5.099466169281415e-05, -5.345532609534288e-05, -5.215784812586802e-05, -5.112614190120389e-05, -3.108306023289121e-05, -4.629001594777904e-03, -3.306533868017385e-03, -6.148861003962279e-03, -5.400753277671875e-03, -4.296709172973494e-03, -5.495355798322281e-03, -2.615975246886315e+01, -2.276992254803517e-01, -3.756366070987162e+01, -3.972567478395568e-05, -8.053815540590863e-01, -8.053815540590857e-01, -5.397958434902109e+07, -2.574960869687645e+00, -2.080487160638609e+01, -2.200441911575886e+02, -2.906842833611242e+07, -7.985687219957591e+00, -6.450511597803937e-03, -4.888533928336311e-03, -5.576067384402509e-03, -5.821023454415212e-03, -5.553954904929317e-03, -5.553954904929317e-03, -6.933289158501814e-03, -9.344263462725200e-03, -7.631053042073964e-03, -6.496009454096031e-03, -6.959338063237879e-03, -8.384113850219282e-03, -2.696809247623038e-03, -4.358665187327599e-01, -7.578128795606306e-02, -5.257512196412546e-02, -4.849310333360217e-02, -4.849310333360218e-02, -1.847477676096972e-02, -1.817479960436171e+00, -1.470304253210187e+00, -4.146865825521463e-02, -7.078621809736096e+01, -1.575394364462513e+00, -1.887531912340754e+00, -3.156231115841546e+00, -9.044061977109763e+00, -1.798109729522377e+00, -1.138088390846868e+01, -1.138088390846867e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m05_2x_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m05_2x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-5.120618854080360e-04, -5.120695873157550e-04, -5.120999673344447e-04, -5.119871278509283e-04, -5.120461436989005e-04, -5.120461436989005e-04, 9.349864319818868e-04, 9.328189677924243e-04, 8.729882872575163e-04, 8.977085751315126e-04, 8.951914598758584e-04, 1.033255446339712e-03, -1.951324474437507e-02, -2.474788737236144e-02, -2.177947460540039e-02, -2.372861515956632e-02, -2.333902638380582e-02, -2.333902638380582e-02, -4.113389734970304e-02, -4.686282163627994e-02, -5.168260960726207e-03, -5.897671884021848e-02, -3.696917048008082e-02, -3.696917048007980e-02, -7.093096544602720e-05, -8.615070395226354e-05, -6.404070131987628e-03, -1.004732867769260e-05, -2.773005799307952e-05, -2.773005799307952e-05, -7.734255892817538e-03, -7.829257508429917e-03, -7.739939103622007e-03, -7.508487957209513e-03, -7.782794674038802e-03, -7.782794674038802e-03, 1.036082750946006e-03, 1.648978208877357e-03, 4.315504161756504e-04, 1.115752846500736e-03, 1.619886372814743e-03, 1.906772567389846e-03, -6.255760195743300e-02, -2.055168824160605e-02, -8.610868618851282e-03, -6.606773643745109e-02, -6.419151663600557e-02, -5.872583396553807e-02, -3.121778954705611e-02, -3.010120992357952e-02, -2.812048148998758e-02, -1.891828244627315e-02, -7.159117270595004e-02, -7.159117270595128e-02, -1.771578442461136e-06, -8.298578607092498e-06, -2.998365789155175e-05, -1.453968932946054e-02, -1.115570230759459e-05, -2.012018587469460e-05, 3.785170938077710e-01, 2.491261680266360e-01, 4.255810555490537e-01, 5.359907998695581e-01, 4.975053120465115e-01, 4.975053120465115e-01, 5.132686695766346e-01, -3.824923660464103e-02, -7.026221048636797e-02, -2.737061380295677e-02, -3.659948108772134e-02, -3.415744301128197e-02, -2.358444869087032e-02, -2.008167641652080e-02, -5.554900699416920e-02, 3.734692244599609e-03, -4.250580763193551e-02, -4.250580763193525e-02, 3.387394995820956e-03, -5.742903278003385e-03, -1.197151672381530e-02, 4.199341744774310e-04, -3.107618008308708e-02, -5.233404632523368e-02, -9.516222274111031e-05, -1.942175150093642e-07, -5.147856912729247e-06, -4.957143309658180e-02, -2.271781089498920e-05, -2.271781089410043e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
