
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_m05_2x_BrOH_cation_restr_1_zk():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m05_2x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-7.828262359102776e+00, -7.828255442230969e+00, -7.828256920875161e+00, -7.828358017124525e+00, -7.828300482672693e+00, -7.828300482672693e+00, -1.592441375733434e+00, -1.592444950076470e+00, -1.592615116110584e+00, -1.593339292307070e+00, -1.592825754972411e+00, -1.592825754972411e+00, -3.532709296089160e-01, -3.541478294728288e-01, -3.760157540090766e-01, -3.690412899602005e-01, -3.702732425067015e-01, -3.702732425067015e-01, -1.259725211451994e-01, -1.250770665693769e-01, -4.794633477964861e-01, -1.340111737879102e-01, -1.254563755106860e-01, -1.254563755106857e-01, -1.665334700544888e-02, -1.751965220974992e-02, -8.862913476437738e-02, -9.643427524778148e-03, -1.210650050300198e-02, -1.210650050300198e-02, -1.798995300526225e+00, -1.796170156664632e+00, -1.798839757612652e+00, -1.796347316300559e+00, -1.797579629224941e+00, -1.797579629224941e+00, -9.563994097230318e-01, -9.628512057300233e-01, -9.561526030460515e-01, -9.611470422142269e-01, -9.604104469237701e-01, -9.604104469237701e-01, -2.460658917104666e-01, -2.242892790531694e-01, -2.484226515768602e-01, -2.265157284663404e-01, -2.396804002354959e-01, -2.396804002354959e-01, -1.488690554764818e-01, -1.475942174832058e-01, -1.462881501545439e-01, -7.258475369662887e-01, -1.286742268357491e-01, -1.286742268357490e-01, -7.444369704441759e-03, -9.428092523510460e-03, -7.204651822580405e-03, -1.225565748467126e-01, -8.680569745000644e-03, -8.680569745000713e-03, -2.602099344882209e-01, -1.994922712614907e-01, -2.160027110296035e-01, -2.357889445176731e-01, -2.253545391334210e-01, -2.253545391334210e-01, -2.439052331383692e-01, -2.299913314697374e-01, -2.068340384300725e-01, -1.941722347100280e-01, -1.977289875211158e-01, -1.977289875211158e-01, -2.393230447828567e-01, -1.634062841673837e-01, -1.658956733039574e-01, -1.653925202084075e-01, -1.569744002444327e-01, -1.569744002444327e-01, -2.164144989542763e-01, -8.549086431632757e-02, -1.094086841990896e-01, -1.572091349698497e-01, -1.277011991588762e-01, -1.277011991588754e-01, -2.346386831013630e-02, -2.522487071243305e-03, -5.292286464323510e-03, -1.244365653478719e-01, -8.032117220118814e-03, -8.032117220118791e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_m05_2x_BrOH_cation_restr_1_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m05_2x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-8.473975979725079e+00, -8.474003618662424e+00, -8.474116752216494e+00, -8.473703283391647e+00, -8.473922485913711e+00, -8.473922485913711e+00, -1.984545493246602e+00, -1.984244717049804e+00, -1.975960202248648e+00, -1.979085542854133e+00, -1.978751598387650e+00, -1.978751598387650e+00, -1.558102497567773e-01, -1.553937827707314e-01, -1.677141750171768e-01, -1.515968788442307e-01, -1.550618627787267e-01, -1.550618627787267e-01, -7.422004144399515e-02, -6.854101675493507e-02, -3.892374016197032e-01, -4.104014662008099e-02, -7.168228267173830e-02, -7.168228267173556e-02, -2.209025687410607e-02, -2.322344452659431e-02, -1.035435185742460e-01, -1.283849718015384e-02, -1.609713977139968e-02, -1.609713977139968e-02, -1.678492400217070e+00, -1.673845361799548e+00, -1.678194688501855e+00, -1.674094983055608e+00, -1.676098857576077e+00, -1.676098857576077e+00, -1.051533140686932e+00, -1.095553914070136e+00, -1.008341249034626e+00, -1.056911855611824e+00, -1.093407648154912e+00, -1.093407648154912e+00, -1.506873284121729e-01, -2.598199950923651e-01, -2.663139075754332e-01, -1.575744550001632e-01, -1.524974992098253e-01, -1.524974992098253e-01, -7.344202964677374e-02, -8.881243260693293e-02, -8.305294634194577e-02, -5.651678698625924e-01, -3.566373924237858e-02, -3.566373924237119e-02, -9.917678128988144e-03, -1.255306432718509e-02, -9.584449551152265e-03, -1.094990797490029e-01, -1.154990579960265e-02, -1.154990579960268e-02, -4.316815297212515e-01, -3.727573834563001e-01, -4.471217152653188e-01, -4.782794099854605e-01, -4.681411030458316e-01, -4.681411030458316e-01, -4.527467049772292e-01, -1.748675999371422e-01, -1.339434541051689e-01, -2.103515071750618e-01, -1.893534435577776e-01, -1.893534435577775e-01, -2.632579521645791e-01, -1.031777745836969e-01, -5.755475611257541e-02, -1.841364359035222e-01, -8.743068654904199e-02, -8.743068654904207e-02, -2.440781041578998e-01, -1.011134911345649e-01, -1.170942860503245e-01, -1.766211303572761e-01, -7.592934366856299e-02, -7.592934366855021e-02, -3.104788049021046e-02, -3.362833306237462e-03, -7.050811346753857e-03, -8.054740226633415e-02, -1.068698959747594e-02, -1.068698959747620e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m05_2x_BrOH_cation_restr_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m05_2x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.635321997304913e-09, -2.635297850442755e-09, -2.635166061991820e-09, -2.635525438031484e-09, -2.635340609848264e-09, -2.635340609848264e-09, -4.362157159027541e-06, -4.362346167607370e-06, -4.366421036521182e-06, -4.357989935327279e-06, -4.362899125676805e-06, -4.362899125676805e-06, -3.072085994824001e-03, -3.081794132482064e-03, -3.274293408691953e-03, -3.104531486916045e-03, -3.154902130003034e-03, -3.154902130003034e-03, -3.648035654306500e-01, -3.594482360036825e-01, -2.019287233946033e-03, -6.170363164684308e-01, -5.108755978093152e-01, -5.108755978093138e-01, -4.023566676777381e+00, -4.249010316206271e+00, -2.204981992531713e+00, -3.664657012085516e+00, -4.652189811555052e+00, -4.652189811555066e+00, -7.418572108932269e-07, -7.408593986033996e-07, -7.417942111782939e-07, -7.409141170313838e-07, -7.413619243946131e-07, -7.413619243946131e-07, -3.316874214141010e-05, -3.259661709570742e-05, -3.311439506163060e-05, -3.259034476051200e-05, -3.288366374615139e-05, -3.288366374615139e-05, -5.109905452450799e-03, -3.649547658053773e-03, -7.371462929708809e-03, -6.611149908058683e-03, -4.705737516955824e-03, -4.705737516955824e-03, -1.047363133010187e+00, -2.476863950713688e-01, -1.215934432038179e+00, -4.784677035446490e-05, -9.625690945024387e-01, -9.625690945024378e-01, -4.830873717710117e+00, -4.313401313993461e+00, -2.707397825905869e+01, -2.165696986449549e+00, -1.260078663433163e+01, -1.260078663433171e+01, -6.533738614652950e-03, -4.949522524907476e-03, -5.381567659382665e-03, -5.895263645726163e-03, -5.624474547226799e-03, -5.624474547226799e-03, -7.112330380897759e-03, -9.491830980346281e-03, -7.781465275816375e-03, -6.645015994182976e-03, -7.116774729423502e-03, -7.116774729423502e-03, -3.055247610531419e-03, -1.343837129704394e-01, -8.252875879727151e-02, -3.649253434453759e-02, -5.400677067416013e-02, -5.400677067416014e-02, -1.336395609970988e-02, -2.023761269807419e+00, -1.910610739878713e+00, -4.739296886149492e-02, -2.009853482705042e+00, -2.009853482705033e+00, -3.238611066496100e+00, -2.118377282805526e+01, -1.024801692807479e+01, -2.095506290079969e+00, -1.591552242036692e+01, -1.591552242036692e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m05_2x_BrOH_cation_restr_1_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation_restr"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m05_2x", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-5.410875638026534e-04, -5.410949014996086e-04, -5.411247279741353e-04, -5.410173790257499e-04, -5.410733295192841e-04, -5.410733295192841e-04, 1.006355861905253e-03, 1.004009792419005e-03, 9.393283556924352e-04, 9.664360731236306e-04, 9.635081182121788e-04, 9.635081182121788e-04, -2.186476967792446e-02, -2.184427582817639e-02, -1.939622261552945e-02, -2.131061591570433e-02, -2.089505144267779e-02, -2.089505144267779e-02, -4.072740201229839e-02, -4.629726673094933e-02, -5.732496294975692e-03, -5.734879341144252e-02, -3.607383974446760e-02, -3.607383974446660e-02, -7.093060308761874e-05, -8.614978819826641e-05, -6.393426934367143e-03, -1.004711593237800e-05, -2.772941298904349e-05, -2.772941298904349e-05, -7.732339905971286e-03, -7.827340197287357e-03, -7.738061587167546e-03, -7.821879441471259e-03, -7.780857795756454e-03, -7.780857795756454e-03, 1.206221486257232e-03, 1.914783517081524e-03, 5.054302757339960e-04, 1.303716156983680e-03, 1.877773224376323e-03, 1.877773224376323e-03, -6.053925252241530e-02, -1.981675652584112e-02, -8.132885723333391e-03, -6.157717543495939e-02, -6.224947912171996e-02, -6.224947912171996e-02, -5.129473836983369e-02, -2.978905333133804e-02, -4.666163915145567e-02, -1.770441626524208e-02, -7.066040230981792e-02, -7.066040230981914e-02, -3.195501407280177e-06, -8.298196882411547e-06, -2.998256105852140e-05, -2.506987442098550e-02, -2.011898167577516e-05, -2.011898167510172e-05, 3.766109437605992e-01, 2.479436123544912e-01, 4.316016172768636e-01, 5.333469647344432e-01, 4.950712691412709e-01, 4.950712691412709e-01, 5.081301514444906e-01, -3.806672215191574e-02, -6.980841805500992e-02, -2.714912353867863e-02, -3.631805190669368e-02, -3.631805190669375e-02, -2.253875282845219e-02, -2.726229712885719e-02, -5.459727936012698e-02, 4.235756765140255e-03, -4.140723181400795e-02, -4.140723181400768e-02, 3.794533885264590e-03, -5.738671422295324e-03, -1.193280747454540e-02, 4.032767866676419e-04, -5.185133748637219e-02, -5.185133748637758e-02, -9.513750189312768e-05, -1.942136966832743e-07, -5.147826305588947e-06, -4.931187646212337e-02, -2.271682040352318e-05, -2.271682040263445e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
