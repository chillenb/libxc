
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_m06_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.407127339032158e+01, -1.407124145304486e+01, -1.407113025982280e+01, -1.407164588824152e+01, -1.407125637351483e+01, -1.407125637351483e+01, -2.289401051640589e+00, -2.289421542164036e+00, -2.290131689092266e+00, -2.290036889600716e+00, -2.289417627194216e+00, -2.703779562874660e+00, -3.969358627062097e-01, -6.104913648620374e-01, -6.047505947801698e-01, -6.051861696207562e-01, -6.105741682804648e-01, -6.105741682804648e-01, -1.703995618909937e-01, -1.718037951424119e-01, -3.669521182192869e-01, -1.831225768634596e-01, -1.708420814961046e-01, -1.708420814961046e-01, -4.275841924514295e-02, -4.471089064201441e-02, -1.523204583179495e-01, -2.084079099567034e-02, -4.424362448620571e-02, -4.424362448620550e-02, -3.466076866522934e+00, -3.469204709208127e+00, -3.466409923479417e+00, -3.370891664166205e+00, -3.467624995631564e+00, -3.467624995631564e+00, -1.281508883833003e+00, -1.291620053403408e+00, -1.277282550549374e+00, -1.285320049039085e+00, -1.293671442578635e+00, -1.585373812184509e+00, -4.363007690714433e-01, -4.357288697951026e-01, -4.177669548946707e-01, -4.298547427462734e-01, -4.499132427582209e-01, -4.167420277260169e-01, 8.961152955460834e-03, -1.838968375168157e-01, 7.938738638210536e-03, -1.429240726744183e+00, -1.678804522189958e-01, -1.678804522189958e-01, -1.084240594861655e-02, -2.295541391526876e-02, -1.719847477503476e-02, 2.227668697400698e-03, -1.125807212383903e-02, -2.092158471641524e-02, -2.347096108615159e-01, -3.990028509808516e-01, -3.536963919847739e-01, -3.073937109965900e-01, -3.339552448396031e-01, -3.339552448396031e-01, -2.971448053687833e-01, -3.784293535002524e-01, -3.876368315047146e-01, -3.669969794530985e-01, -3.800165316051487e-01, -3.605800355560929e-01, -4.784010892801286e-01, -1.171748927157185e-01, -2.490880501339940e-01, -2.300501189124691e-01, -2.644583939723045e-01, -2.644583939723045e-01, -2.992541254896890e-01, -1.458285441930271e-01, -1.759667933567488e-01, -2.562027982982942e-01, 8.929156723749490e-03, -1.772923125868652e-01, -5.024321187057068e-02, -6.304729420973773e-03, -1.196352305066202e-02, -1.694234154149167e-01, -1.778867207477172e-02, -1.778867207477161e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_m06_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-1.467802273526270e+01, -1.467813380456900e+01, -1.467864949369658e+01, -1.467684227036304e+01, -1.467808103887917e+01, -1.467808103887917e+01, -3.165821265058701e+00, -3.166026471918111e+00, -3.172450904730310e+00, -3.170184754233959e+00, -3.165893258109160e+00, -2.487781361606074e+00, -7.937735814231780e-01, -5.303008873432236e-01, -5.454646514353286e-01, -5.389873374359554e-01, -5.296754778012206e-01, -5.296754778012206e-01, -1.539693113571148e-01, -1.541110725137931e-01, -1.048602034022438e+00, 2.048913971048816e-02, -1.541181568533212e-01, -1.541181568533212e-01, -5.535700535635302e-02, -5.772457272838292e-02, -1.426446054589417e-01, -2.767694324662929e-02, -5.711851116960288e-02, -5.711851116959832e-02, -5.044242526201986e+00, -5.088694051200747e+00, -5.049181904998340e+00, -5.205233359751197e+00, -5.066613744472900e+00, -5.066613744472900e+00, -1.759324659705884e+00, -1.761894475338897e+00, -1.760600958907404e+00, -1.759796088762853e+00, -1.762861999903582e+00, -1.282507435010355e+00, -5.365923699428258e-01, -3.938773788680128e-01, -4.587967638178144e-01, -5.048224738893448e-01, -5.157135574315080e-01, -5.681859864761150e-01, -1.490819766907551e-02, -1.080906008219626e-01, -1.852408604664373e-02, -1.614440395364095e+00, 2.106120546793705e-02, 2.106120546793705e-02, -1.391475386817798e-02, -3.044063338228441e-02, -2.279231145286219e-02, 3.944236035527959e-02, -1.439480555911517e-02, -2.775552653683145e-02, -2.282860343145854e-02, -2.510583744808114e-01, -5.776624691641239e-02, 5.573502267249470e-02, 1.616700852202886e-02, 1.616700852202886e-02, 5.488984856885652e-02, -4.608065959335592e-01, -4.059024907995241e-01, -3.790527741428708e-01, -3.412850342962804e-01, -3.791612820074807e-01, -4.528394081203256e-01, -3.019550541558984e-01, -2.110684929689147e-01, -3.144096000375338e-01, -2.023896036196540e-01, -2.023896036196539e-01, -4.211320685178602e-01, -1.459362690901477e-01, -1.376742630637058e-01, -2.434098070507269e-01, -3.053238103635750e-03, -3.479115846998698e-02, -6.532144250380099e-02, -8.402697171592330e-03, -1.591672630172724e-02, -3.362367003100654e-02, -2.361634216915990e-02, -2.361634216915544e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m06_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-4.456495531687768e-09, -4.456391501857421e-09, -4.455901196186338e-09, -4.457599124910005e-09, -4.456440969243435e-09, -4.456440969243435e-09, -9.631914719943167e-06, -9.630785585444345e-06, -9.595585657077177e-06, -9.606113075944449e-06, -9.631417994912347e-06, -6.280269752303688e-06, -1.048422305527215e-02, -4.758957435897562e-03, -5.146898473600873e-03, -5.060470716130380e-03, -4.749426447607747e-03, -4.749426447607747e-03, -8.185594562416940e-01, -7.850971964245392e-01, -5.981294574328090e-03, -1.726270063185229e+00, -8.082777639070057e-01, -8.082777639070057e-01, -4.059603217515188e+01, -4.020570389019627e+01, -1.137817044288541e+01, -1.465170426069934e+01, -4.205048452702398e+01, -4.205048452702389e+01, -9.963537458125029e-07, -9.962151980823301e-07, -9.963379247254984e-07, -1.122328062264250e-06, -9.962690608233201e-07, -9.962690608233201e-07, -1.074506571607417e-04, -1.023198894351299e-04, -1.096947679158889e-04, -1.055337190811423e-04, -1.012065719973547e-04, -6.204943801097593e-05, -7.854757413918596e-03, -4.984338883551810e-03, -9.796699512227985e-03, -8.118215370540725e-03, -6.674500914253412e-03, -8.555283850750722e-03, -5.465106116501727e+01, -6.632876712748770e-01, -5.659936746843456e+01, -6.497240164834829e-05, -3.056163628559050e+00, -3.056163628559050e+00, -8.776923344287004e+06, -1.847187405074128e+01, -7.256904709867814e+01, -4.048243088900068e+02, -7.464032452607791e+06, -2.276677446815492e+01, -1.619634837194673e-03, -5.656743489749818e-03, -4.845730465547809e-03, -3.391798445050404e-03, -4.038054606871109e-03, -4.038054606871109e-03, -3.807819474031988e-03, -1.396991834862018e-02, -1.137916532061726e-02, -8.465448763446104e-03, -9.966826702418172e-03, -1.203332829768323e-02, -4.413251903406029e-03, -8.161195702284600e-01, -1.667565058595732e-01, -1.023354187597563e-01, -1.033509337596677e-01, -1.033509337596677e-01, -3.235712827355951e-02, -1.111938399369359e+01, -8.397260803500446e+00, -7.583946755877628e-02, -1.309899366654902e+02, -6.829408231421319e+00, -1.590585101490774e+01, -2.050470761298824e+01, -4.025307927680385e+01, -8.215227385619716e+00, -3.202118579775252e+01, -3.202118579775244e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m06_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-2.394301247762405e-03, -2.394264120923006e-03, -2.394096555983389e-03, -2.394698822213144e-03, -2.394281727154643e-03, -2.394281727154643e-03, 8.528638509522156e-04, 8.543964498889622e-04, 9.017023985348949e-04, 8.830299390814313e-04, 8.532849632951158e-04, -1.705469641175589e-03, 2.472719556175999e-02, 9.260235443382262e-03, 1.346366182341651e-02, 1.194538505019694e-02, 9.125391959023080e-03, 9.125391959023080e-03, 4.874020784783956e-02, 4.492563638496012e-02, 2.433122127873076e-02, -5.645478796309187e-02, 4.773849151936351e-02, 4.773849151936351e-02, -8.525970146695934e-04, -9.711436813120205e-04, -1.969454521099238e-02, -3.373029198884873e-05, -9.842922229397894e-04, -9.842922229428544e-04, 9.657237013757904e-03, 1.028885976785725e-02, 9.727218807927407e-03, 1.030614675626547e-02, 9.974314709350191e-03, 9.974314709350191e-03, 9.725580387329544e-04, 7.832743599751064e-04, 1.091976140703968e-03, 8.920098918428826e-04, 7.541065108027401e-04, -4.439486641657026e-03, 1.992334176911720e-02, -9.261392957574240e-02, 5.774390374638895e-03, 4.663260035106967e-03, -2.896216305717781e-03, 5.952849001068925e-03, 1.608582379580547e-02, 2.082362527489265e-02, 1.889013914838723e-02, -2.315105035221312e-03, -7.051079560933214e-02, -7.051079560933214e-02, -4.658063598306260e-04, -5.700834702487087e-05, -9.431497502560719e-05, -2.238424356508615e-02, -5.348410039838201e-04, -5.314372629588575e-05, -1.300602954418317e+00, -6.135713085392894e-01, -1.151183423098441e+00, -1.533935766706597e+00, -1.377446133103765e+00, -1.377446133103765e+00, -1.585986027084803e+00, 2.218128708274652e-02, -3.560826827036880e-02, -7.712350376161928e-02, -9.741975509497015e-02, -8.370899343246242e-02, -5.912225918434900e-02, 8.545663483544694e-02, 1.648331870757805e-02, 4.697491923226569e-03, -1.601096235325797e-02, -1.601096235325801e-02, 1.042519967163130e-02, -1.513736086334399e-02, -2.924682967319178e-02, -1.415254913710537e-02, 1.171635949738488e-02, -7.291867029536804e-02, -5.371365281244812e-04, -1.296777100590714e-06, -1.745992732389379e-05, -7.619176475621620e-02, -4.587234238273537e-05, -4.587234238273510e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
