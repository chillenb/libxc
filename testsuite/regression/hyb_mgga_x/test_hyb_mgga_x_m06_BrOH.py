
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_m06_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.468129357437907e+01, -1.468124013117565e+01, -1.468105592035292e+01, -1.468192242564706e+01, -1.468126503556502e+01, -1.468126503556502e+01, -2.493961711897898e+00, -2.493929475770905e+00, -2.493146018450644e+00, -2.494760439194144e+00, -2.493957411961699e+00, -2.493957411961699e+00, -4.954270663834424e-01, -4.952370957291970e-01, -4.917192176162604e-01, -5.030583444920681e-01, -4.953652931443068e-01, -4.953652931443068e-01, -1.648029129814942e-01, -1.656009616367134e-01, -4.708617713318066e-01, -1.566719199445000e-01, -1.649908665306598e-01, -1.649908665306598e-01, -4.275128786547695e-02, -4.470054582089387e-02, -1.504137734720900e-01, -2.082980974149145e-02, -4.423476260344834e-02, -4.423476260344813e-02, -3.465468476415882e+00, -3.468603127738764e+00, -3.465809965693820e+00, -3.468245224192489e+00, -3.467009698578809e+00, -3.467009698578809e+00, -1.560323652855578e+00, -1.561442901721466e+00, -1.565171006191844e+00, -1.565842083135208e+00, -1.555045639270319e+00, -1.555045639270319e+00, -4.210059432743467e-01, -4.219630491894840e-01, -3.936312555949726e-01, -4.065732474711331e-01, -4.381444651771731e-01, -4.381444651771731e-01, -1.888090374138258e-01, -1.783351033586982e-01, -1.799905786201054e-01, -1.347374796132397e+00, -1.583215942187024e-01, -1.583215942187024e-01, -2.009188491907787e-02, -2.294349945104720e-02, -1.719461949927393e-02, -1.778881986113149e-01, -2.090748191864503e-02, -2.090748191864501e-02, -2.343305734246681e-01, -3.977428935186111e-01, -3.560896963364881e-01, -3.066146177983063e-01, -3.330334397720452e-01, -3.330334397720452e-01, -2.956103253330495e-01, -3.765217074572825e-01, -3.853092756737319e-01, -3.646548570646882e-01, -3.775091347368650e-01, -3.775091347368650e-01, -4.584590319485094e-01, -2.144647303567961e-01, -2.411094601424796e-01, -2.678793392829371e-01, -2.542443299220858e-01, -2.542443299220857e-01, -3.381108819830663e-01, -1.449754053249726e-01, -1.721758033731409e-01, -2.421142388209094e-01, -1.696210907547010e-01, -1.696210907547017e-01, -5.008791858841691e-02, -6.304192560914673e-03, -1.196284482867833e-02, -1.615099540871816e-01, -1.777773281189720e-02, -1.777773281189709e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_m06_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-1.346808271838437e+01, -1.346824345091687e+01, -1.346893847566701e+01, -1.346632172846583e+01, -1.346816753045953e+01, -1.346816753045953e+01, -2.780345817558812e+00, -2.780674537309688e+00, -2.790665780325788e+00, -2.785155322306369e+00, -2.780462134367884e+00, -2.780462134367884e+00, -6.281241091995172e-01, -6.281734585474837e-01, -6.171899055641561e-01, -6.087668574033743e-01, -6.281154061568319e-01, -6.281154061568319e-01, -1.553934222843669e-01, -1.561137419486337e-01, -8.680925161107211e-01, 4.327160589881503e-02, -1.557269961936164e-01, -1.557269961936164e-01, -5.532633254742175e-02, -5.768015914976575e-02, -1.357770829160672e-01, -2.762991699984765e-02, -5.708045852491907e-02, -5.708045852491451e-02, -5.044913664253901e+00, -5.089347798898429e+00, -5.049842634656241e+00, -5.084368614065983e+00, -5.067287419335917e+00, -5.067287419335917e+00, -1.287650733995578e+00, -1.304966081478011e+00, -1.276778681533493e+00, -1.287515252623039e+00, -1.317261689635850e+00, -1.317261689635850e+00, -5.556581699036129e-01, -4.202317034593710e-01, -4.906517009113794e-01, -5.386592334354946e-01, -5.320470802369045e-01, -5.320470802369045e-01, 4.952516322150650e-03, -1.063727134169147e-01, 1.150697167435316e-02, -1.740833602757974e+00, 3.266907786253371e-02, 3.266907786253371e-02, -2.665024950768396e-02, -3.038939554784608e-02, -2.277559415684737e-02, -1.026686774050695e-01, -2.769519212246582e-02, -2.769519212246395e-02, -2.497247120416028e-02, -2.541575153025413e-01, -4.926036871765482e-02, 5.219104726614759e-02, 1.248612143812477e-02, 1.248612143812477e-02, 4.785209168803779e-02, -4.629252200872435e-01, -4.093136590077481e-01, -3.829958375390490e-01, -3.456671603000139e-01, -3.456671603000140e-01, -4.886809829993132e-01, -1.967817939412737e-01, -2.154730816378656e-01, -2.460054934852179e-01, -2.124128298660660e-01, -2.124128298660658e-01, -3.543831848808119e-01, -1.427408047530331e-01, -1.251521360288383e-01, -2.620723062720592e-01, -1.784232061223932e-02, -1.784232061224669e-02, -6.466479229089818e-02, -8.400412455829962e-03, -1.591377377159792e-02, -1.618391639042621e-02, -2.356957543286495e-02, -2.356957543286049e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m06_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-3.804166741064729e-09, -3.804091635937102e-09, -3.803712414506500e-09, -3.804937751494808e-09, -3.804127572826089e-09, -3.804127572826089e-09, -7.908316771588330e-06, -7.907601384127683e-06, -7.884406487845563e-06, -7.881813601734730e-06, -7.908026066115611e-06, -7.908026066115611e-06, -7.604279985591579e-03, -7.629198481780683e-03, -8.182975318027735e-03, -7.744128248859415e-03, -7.613139711979086e-03, -7.613139711979086e-03, -8.969679048832648e-01, -8.681469504388264e-01, -4.788648231173730e-03, -2.811381274970786e+00, -8.891376325708493e-01, -8.891376325708493e-01, -4.257174224404124e+01, -4.269438061146099e+01, -1.538733919029414e+01, -3.391605743611404e+01, -4.429717470349849e+01, -4.429717470349843e+01, -9.971227977336249e-07, -9.969754322737705e-07, -9.970962969671300e-07, -9.969819443556618e-07, -9.970467332704303e-07, -9.970467332704303e-07, -6.838266455544957e-05, -6.560793085089742e-05, -6.894362603045345e-05, -6.672632696653371e-05, -6.577051584377895e-05, -6.577051584377895e-05, -8.842553974415118e-03, -5.634224534008977e-03, -1.174480472203660e-02, -9.765821152673127e-03, -7.322573572986778e-03, -7.322573572986778e-03, -4.960143265026616e+00, -7.224748719986851e-01, -5.500146847040610e+00, -7.911386495790504e-05, -3.840682706262100e+00, -3.840682706262100e+00, -3.431748624607752e+01, -3.529277247895735e+01, -9.641072845901795e+01, -1.357292146970823e+01, -5.326793478607906e+01, -5.326793478607904e+01, -1.653392274895763e-03, -5.742157307507574e-03, -4.678163052725370e-03, -3.448863687075441e-03, -4.103495497854370e-03, -4.103495497854370e-03, -3.939242777362502e-03, -1.421429367418358e-02, -1.163548438145131e-02, -8.693109586754849e-03, -1.022597490036874e-02, -1.022597490036874e-02, -5.138011149514657e-03, -3.233730491326037e-01, -1.825743892577757e-01, -7.314970660361456e-02, -1.155741752798487e-01, -1.155741752798488e-01, -2.379607643332173e-02, -1.327811085019562e+01, -1.199777314354152e+01, -8.968875238243675e-02, -9.221447988249786e+00, -9.221447988249810e+00, -3.527102849752728e+01, -6.374605049702248e+01, -4.945905614713671e+01, -1.134369681336540e+01, -7.814660388366434e+01, -7.814660388366401e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m06_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m06_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-2.699695538138012e-03, -2.699648695478576e-03, -2.699448046602592e-03, -2.700208913539094e-03, -2.699670810124125e-03, -2.699670810124125e-03, -3.825307793493738e-04, -3.807275627795119e-04, -3.256421934562527e-04, -3.541295742435424e-04, -3.819842499333621e-04, -3.819842499333621e-04, 1.786623280777233e-02, 1.803328882357367e-02, 2.114868603919118e-02, 1.932016423782048e-02, 1.792386506039847e-02, 1.792386506039847e-02, 5.370388787014360e-02, 5.055244502251816e-02, 2.123618899118359e-02, -3.884395753278048e-02, 5.295689377688063e-02, 5.295689377688063e-02, -8.472955417521096e-04, -9.634864780302039e-04, -1.871517423265135e-02, -2.997248620033312e-05, -9.775718509443018e-04, -9.775718509473666e-04, 9.657963386464109e-03, 1.028942042252755e-02, 9.727917715087605e-03, 1.021855248250062e-02, 9.974968427640944e-03, 9.974968427640944e-03, -3.852946948992387e-03, -3.977115972287620e-03, -3.843106616600359e-03, -4.001067518791887e-03, -3.875791577243464e-03, -3.875791577243464e-03, 2.321764445211741e-02, -8.470009789790808e-02, 1.170112618607912e-02, 1.098633782566226e-02, 3.048418032265005e-04, 3.048418032265005e-04, -6.083412936218063e-02, 2.417700285796107e-02, -6.414195325732738e-02, -3.457629240627659e-05, -6.248897378467650e-02, -6.248897378467650e-02, -4.353223478110106e-05, -5.208512713942775e-05, -9.079309345330001e-05, -2.887501725988773e-02, -4.714445286361908e-05, -4.714445286499668e-05, -1.293070849767925e+00, -6.099180757158668e-01, -1.166278183782351e+00, -1.525331915235943e+00, -1.369717313493685e+00, -1.369717313493685e+00, -1.567825613903348e+00, 2.272448355518962e-02, -3.449893145997478e-02, -7.543350849632378e-02, -9.562505797945527e-02, -9.562505797945529e-02, -5.130207161633796e-02, 4.295572064571485e-02, 2.054650055620631e-02, -1.588286752955023e-02, -9.984659821423464e-03, -9.984659821423490e-03, -3.603938552874797e-03, -1.471782887681026e-02, -2.735076407371813e-02, -4.267583947834713e-03, -6.701434743930379e-02, -6.701434743929192e-02, -4.791069886965120e-04, -1.107628890182807e-06, -1.699153757548496e-05, -6.954541652938424e-02, -4.045327854216523e-05, -4.045327854216500e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
