
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_js18_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_js18", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.005758300352225e+01, -2.005763122518027e+01, -2.005790489293371e+01, -2.005718789477692e+01, -2.005755510520795e+01, -2.005755510520795e+01, -3.081445051449399e+00, -3.081449618544980e+00, -3.081787734344683e+00, -3.083477387397477e+00, -3.082332957288435e+00, -3.082332957288435e+00, -6.209870320092621e-01, -6.207859376351390e-01, -6.165609236226675e-01, -6.198905106609885e-01, -6.210306171725104e-01, -6.210306171725104e-01, -1.959557260923590e-01, -1.973810186055934e-01, -7.645540492767572e-01, -1.577522842576402e-01, -1.893447348591458e-01, -1.893447348591457e-01, -2.022939054629980e-02, -2.072800313443991e-02, -6.294020531847654e-02, -1.425990871543322e-02, -1.728764869429828e-02, -1.728764869429826e-02, -4.891134566865034e+00, -4.891617033405876e+00, -4.891168039868990e+00, -4.891593512619706e+00, -4.891372924226106e+00, -4.891372924226106e+00, -1.913712762665464e+00, -1.928739820504744e+00, -1.912328425373728e+00, -1.925666630279873e+00, -1.922719683102596e+00, -1.922719683102596e+00, -5.493768018483298e-01, -5.663043116802240e-01, -4.998726340671503e-01, -4.975373759125891e-01, -5.578221700904339e-01, -5.578221700904339e-01, -1.226204566878304e-01, -2.042139528729721e-01, -1.154622417174258e-01, -1.645914112837988e+00, -1.360814565531119e-01, -1.360814565531119e-01, -1.227513926245700e-02, -1.377276070850764e-02, -9.802766380029217e-03, -8.558443243958715e-02, -1.264717285171500e-02, -1.264717285171501e-02, -5.472816462606547e-01, -5.591036167490726e-01, -5.576789548112052e-01, -5.549811669334950e-01, -5.565702277894051e-01, -5.565702277894051e-01, -5.088873865473773e-01, -4.900258472631180e-01, -5.046490427048806e-01, -5.188840260930125e-01, -5.114186290580407e-01, -5.114186290580407e-01, -5.901894903973566e-01, -2.475717473293609e-01, -2.828144062882060e-01, -3.400009637389174e-01, -3.110867122586339e-01, -3.110867122586339e-01, -4.444662401459793e-01, -6.223748592824969e-02, -7.538466323848121e-02, -3.238290607013816e-01, -1.006082232967486e-01, -1.006082232967486e-01, -2.479132450440255e-02, -6.936214522834537e-03, -9.054786654406805e-03, -9.699724986048286e-02, -1.162266184173766e-02, -1.162266184173765e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_js18_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_js18", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.515472511065418e+01, -2.515631470752524e+01, -2.515485956614654e+01, -2.515641219303809e+01, -2.515546572261293e+01, -2.515723150330853e+01, -2.515395861985337e+01, -2.515530703564694e+01, -2.515480262166999e+01, -2.515620450637828e+01, -2.515480262166999e+01, -2.515620450637828e+01, -3.755452355233209e+00, -3.755630474127746e+00, -3.755497250999305e+00, -3.755681562064505e+00, -3.756642779175209e+00, -3.756958845799564e+00, -3.755360461192721e+00, -3.755671228447740e+00, -3.754726456812024e+00, -3.756751227424643e+00, -3.754726456812024e+00, -3.756751227424643e+00, -7.132751434559552e-01, -7.162841430047979e-01, -7.121710624376476e-01, -7.157643215213795e-01, -6.983770578712146e-01, -6.942679223005155e-01, -7.008287089138792e-01, -7.022145213970952e-01, -7.213625976238626e-01, -6.770343915842131e-01, -7.213625976238626e-01, -6.770343915842131e-01, -1.873281401944243e-01, -1.959935910642731e-01, -1.894834051430923e-01, -1.994449121947407e-01, -8.080457529074246e-01, -8.229041129903846e-01, -1.553802080228486e-01, -1.503493000945801e-01, -1.951759170375394e-01, -1.354652542579874e-01, -1.951759170375392e-01, -1.354652542579874e-01, -1.052955395945234e-02, -1.084225729315905e-02, -1.096180721672963e-02, -1.130539806125294e-02, -4.631899086571105e-02, -4.709610090823189e-02, -9.603283924218706e-03, -9.147751082507488e-03, -1.022005441885586e-02, -9.890564698803254e-03, -1.022005441885589e-02, -9.890564698803256e-03, -6.332152526622624e+00, -6.331191301639285e+00, -6.335362694281368e+00, -6.334297187075062e+00, -6.332580098693137e+00, -6.331477552096623e+00, -6.335326552311010e+00, -6.334290879313655e+00, -6.333607763632232e+00, -6.332719918575261e+00, -6.333607763632232e+00, -6.332719918575261e+00, -2.110945641235874e+00, -2.112820952956684e+00, -2.138369640923246e+00, -2.139439892886891e+00, -2.100818861497188e+00, -2.105379483845235e+00, -2.125028774550625e+00, -2.130071737740470e+00, -2.134130349781256e+00, -2.127916579108661e+00, -2.134130349781256e+00, -2.127916579108661e+00, -6.539103124976188e-01, -6.528885307863772e-01, -7.311480845707976e-01, -7.315522111319052e-01, -5.876399020322046e-01, -6.113010988486408e-01, -6.345033577059342e-01, -6.565917648160702e-01, -6.859085225035086e-01, -6.477459121343984e-01, -6.859085225035085e-01, -6.477459121343986e-01, -1.095882546924356e-01, -1.116357562815222e-01, -1.903966382220775e-01, -1.913541618647935e-01, -1.031783580452140e-01, -1.051455678705318e-01, -2.168395791621625e+00, -2.167469607458215e+00, -1.198798410605779e-01, -1.244428077883032e-01, -1.198798410605779e-01, -1.244428077883031e-01, -1.398020158739965e-02, -1.396779360929518e-02, -1.187709886524154e-02, -1.263019459003627e-02, -6.577354508688293e-03, -6.847098847638388e-03, -7.672745198825054e-02, -7.080092129323592e-02, -1.469060802633067e-02, -7.073128082242815e-03, -1.469060802633067e-02, -7.073128082242796e-03, -6.777156957523255e-01, -6.802684310948972e-01, -6.999825262835004e-01, -7.030898170580766e-01, -6.944706397142141e-01, -6.974244113592483e-01, -6.874949774427693e-01, -6.903504547385076e-01, -6.912303764608202e-01, -6.941457700136913e-01, -6.912303764608202e-01, -6.941457700136914e-01, -6.626390301619288e-01, -6.646609209493326e-01, -5.680914894839338e-01, -5.710556423046524e-01, -6.045836280532930e-01, -6.079082170999012e-01, -6.373744029126975e-01, -6.397692951249033e-01, -6.206907470276064e-01, -6.238108865944160e-01, -6.206907470276064e-01, -6.238108865944159e-01, -7.650817880435161e-01, -7.665952165634374e-01, -2.395451098842345e-01, -2.409108875095897e-01, -2.858436598259514e-01, -2.888541920202567e-01, -3.767011019821001e-01, -3.787397240276348e-01, -3.297620390417442e-01, -3.296938714802527e-01, -3.297620390417442e-01, -3.296938714802528e-01, -4.975441827308646e-01, -5.033214976421974e-01, -4.147888205114793e-02, -4.230444200665646e-02, -5.943837359705662e-02, -6.055353139791655e-02, -3.662675173286415e-01, -3.756741654789599e-01, -8.536633373816394e-02, -8.855030024673631e-02, -8.536633373816399e-02, -8.855030024673623e-02, -2.210726421385096e-02, -2.329622857328322e-02, -8.503440731869953e-03, -8.630857314963559e-03, -5.141922124985106e-03, -5.336510820045178e-03, -8.047916696750353e-02, -7.806891217276343e-02, -1.200998349086395e-02, -6.674729812668893e-03, -1.200998349086394e-02, -6.674729812668892e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_js18_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_js18", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-1.475975315645503e-08, 0.000000000000000e+00, -1.473839554086126e-08, -1.475948485930047e-08, 0.000000000000000e+00, -1.473820246911326e-08, -1.475563078727043e-08, 0.000000000000000e+00, -1.473351627788415e-08, -1.475852811801222e-08, 0.000000000000000e+00, -1.473725733015381e-08, -1.475966221030627e-08, 0.000000000000000e+00, -1.473357556399019e-08, -1.475966221030627e-08, 0.000000000000000e+00, -1.473357556399019e-08, -2.084185827474975e-05, 0.000000000000000e+00, -2.080807282423101e-05, -2.085062135125312e-05, 0.000000000000000e+00, -2.081115471725846e-05, -2.099049623317388e-05, 0.000000000000000e+00, -2.100698807902322e-05, -2.105877170495802e-05, 0.000000000000000e+00, -2.103040787844710e-05, -2.083858071648939e-05, 0.000000000000000e+00, -2.115760542986493e-05, -2.083858071648939e-05, 0.000000000000000e+00, -2.115760542986493e-05, -4.653496136334003e-03, 0.000000000000000e+00, -4.668295769755981e-03, -4.674705635752908e-03, 0.000000000000000e+00, -4.656895252515883e-03, -4.749825764420212e-03, 0.000000000000000e+00, -5.160378255276465e-03, -5.896838494589527e-03, 0.000000000000000e+00, -6.012946223461169e-03, -4.299507314451350e-03, 0.000000000000000e+00, -7.728519408825719e-03, -4.299507314451350e-03, 0.000000000000000e+00, -7.728519408825719e-03, -1.675033229788547e+00, 0.000000000000000e+00, -1.528087717490645e+00, -1.654243097908037e+00, 0.000000000000000e+00, -1.492577008450993e+00, 4.594539678980813e-04, 0.000000000000000e+00, 1.213508022946181e-05, -1.834937779089866e+00, 0.000000000000000e+00, -2.464473520204684e+00, -1.423866358615120e+00, 0.000000000000000e+00, -4.436852262525595e-01, -1.423866358615120e+00, 0.000000000000000e+00, -4.436852262525461e-01, -8.218307330831982e+03, 0.000000000000000e+00, -7.190324042438584e+03, -7.342840519360787e+03, 0.000000000000000e+00, -6.347351578696151e+03, -6.589380583468845e+01, 0.000000000000000e+00, -6.223522170042562e+01, -1.824126701351751e+04, 0.000000000000000e+00, -2.045852551614470e+04, -1.012065665108341e+04, 0.000000000000000e+00, -1.887795931365762e+04, -1.012065665108337e+04, 0.000000000000000e+00, -1.887795931365737e+04, -2.107338995563699e-06, 0.000000000000000e+00, -2.095313463658095e-06, -2.088655102417273e-06, 0.000000000000000e+00, -2.077045756747129e-06, -2.100520328921051e-06, 0.000000000000000e+00, -2.090516162501295e-06, -2.084644926019774e-06, 0.000000000000000e+00, -2.074089848786456e-06, -2.102210453450343e-06, 0.000000000000000e+00, -2.086904428977101e-06, -2.102210453450343e-06, 0.000000000000000e+00, -2.086904428977101e-06, -1.745628533189956e-04, 0.000000000000000e+00, -1.737368003389414e-04, -1.676450114126661e-04, 0.000000000000000e+00, -1.669876854003925e-04, -1.687501910748467e-04, 0.000000000000000e+00, -1.697100945238442e-04, -1.624357895912332e-04, 0.000000000000000e+00, -1.631508836160426e-04, -1.750533359603381e-04, 0.000000000000000e+00, -1.708196126305711e-04, -1.750533359603381e-04, 0.000000000000000e+00, -1.708196126305711e-04, -4.652072912222402e-02, 0.000000000000000e+00, -4.757717445087042e-02, -3.976281422325084e-02, 0.000000000000000e+00, -4.170396199093619e-02, -4.295255350377775e-02, 0.000000000000000e+00, -4.710797885541378e-02, -2.719429251301866e-02, 0.000000000000000e+00, -3.044982042210530e-02, -4.481165761406713e-02, 0.000000000000000e+00, -5.027164021412004e-02, -4.481165761406701e-02, 0.000000000000000e+00, -5.027164021411988e-02, -5.146113897370106e+00, 0.000000000000000e+00, -4.816264264886734e+00, -1.167376816658085e+00, 0.000000000000000e+00, -1.148075577098976e+00, -5.867671083641808e+00, 0.000000000000000e+00, -5.885340328178042e+00, -2.123377564861663e-04, 0.000000000000000e+00, -2.127830886085484e-04, -4.588343621322597e+00, 0.000000000000000e+00, -4.766348827977644e+00, -4.588343621322598e+00, 0.000000000000000e+00, -4.766348827977646e+00, 1.979941044936422e+04, 0.000000000000000e+00, 1.329612860346738e+04, -8.664166891960260e+03, 0.000000000000000e+00, -5.815378278735967e+03, -8.529510191849135e+04, 0.000000000000000e+00, -7.501795132464699e+04, -1.414059834973636e+01, 0.000000000000000e+00, -1.984972135703129e+01, 5.307639928299793e+04, 0.000000000000000e+00, -4.130839566908700e+04, 5.307639928299767e+04, 0.000000000000000e+00, -4.130839566908709e+04, -3.612097706404813e-01, 0.000000000000000e+00, -3.660782261293006e-01, -1.096788308949652e-01, 0.000000000000000e+00, -1.092005660821024e-01, -1.568900097249694e-01, 0.000000000000000e+00, -1.573128048297402e-01, -2.242792392556935e-01, 0.000000000000000e+00, -2.249466589911169e-01, -1.864387015190778e-01, 0.000000000000000e+00, -1.869348203273610e-01, -1.864387015190778e-01, 0.000000000000000e+00, -1.869348203273609e-01, -2.156456918658071e-01, 0.000000000000000e+00, -2.228124023243925e-01, -4.465020690063515e-02, 0.000000000000000e+00, -4.399759248135059e-02, -4.729525171229376e-02, 0.000000000000000e+00, -4.667825483916165e-02, -6.647380196955503e-02, 0.000000000000000e+00, -6.587776914651747e-02, -5.469400259045110e-02, 0.000000000000000e+00, -5.335861575060809e-02, -5.469400259045110e-02, 0.000000000000000e+00, -5.335861575060825e-02, -2.461081233392927e-02, 0.000000000000000e+00, -2.650900087296044e-02, -5.917456276361781e-01, 0.000000000000000e+00, -5.830456830846114e-01, -3.763078663227792e-01, 0.000000000000000e+00, -3.696794178555649e-01, -2.292175963378043e-01, 0.000000000000000e+00, -2.248670303578211e-01, -2.910994364274702e-01, 0.000000000000000e+00, -2.932981674378295e-01, -2.910994364274703e-01, 0.000000000000000e+00, -2.932981674378295e-01, -8.691317238284199e-02, 0.000000000000000e+00, -8.497336001850404e-02, -8.484027831270501e+01, 0.000000000000000e+00, -8.093350134527964e+01, -3.037045390054652e+01, 0.000000000000000e+00, -2.900788500650143e+01, -3.198053309239689e-01, 0.000000000000000e+00, -3.377227208035851e-01, -1.210116186404651e+01, 0.000000000000000e+00, -1.183084653004357e+01, -1.210116186404648e+01, 0.000000000000000e+00, -1.183084653004360e+01, -7.226561006468628e+02, 0.000000000000000e+00, -5.033585063987622e+02, 8.292314254131971e+05, 0.000000000000000e+00, 8.771910088800691e+05, -1.621089976269600e+05, 0.000000000000000e+00, -1.421493118455068e+05, -1.505025190105389e+01, 0.000000000000000e+00, -1.691464488854650e+01, 5.832961219781986e+04, 0.000000000000000e+00, -5.162371222661895e+04, 5.832961219782018e+04, 0.000000000000000e+00, -5.162371222661897e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_js18_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_js18", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([7.811754120834935e-04, 7.796814740840152e-04, 7.811713511570783e-04, 7.796786342497558e-04, 7.809463541534167e-04, 7.794151951698501e-04, 7.809830771632743e-04, 7.794656472907575e-04, 7.811779614739316e-04, 7.792906696631886e-04, 7.811779614739316e-04, 7.792906696631886e-04, 2.288689042996707e-03, 2.278939626670317e-03, 2.290799411855643e-03, 2.279527972339146e-03, 2.322794806198494e-03, 2.326248085027071e-03, 2.348109541978353e-03, 2.340035496398844e-03, 2.285197030820310e-03, 2.369679734765421e-03, 2.285197030820310e-03, 2.369679734765421e-03, -4.041540539523909e-03, -4.078010577004668e-03, -3.995439318742287e-03, -4.094595267862155e-03, -3.616102126271510e-03, -2.889833986781879e-03, -1.658306816457720e-03, -1.533296572214076e-03, -4.637563161528508e-03, 2.060821267111000e-03, -4.637563161528508e-03, 2.060821267111000e-03, 3.624861382931155e-02, 3.844314388368524e-02, 3.659332842455870e-02, 3.934476663851752e-02, -8.255552170026218e-03, -8.297546577390085e-03, 8.836620587912658e-03, 2.137173168438194e-02, 3.448854287722765e-02, -1.115397115351867e-02, 3.448854287722751e-02, -1.115397115351870e-02, 7.625991178699132e-03, 8.145543135150549e-03, 7.682702653377307e-03, 8.355046244395297e-03, 8.570733114769469e-03, 1.049439124206325e-02, 2.271003482181063e-03, 2.748031386874195e-03, 6.226912081489044e-03, -8.558823533017051e-04, 6.226912081488998e-03, -8.558823533017458e-04, 1.104961154940088e-03, 1.088796361444946e-03, 1.090142976188921e-03, 1.074233019631521e-03, 1.097444013753862e-03, 1.083467908132988e-03, 1.084905120663410e-03, 1.070429593330572e-03, 1.102510717706073e-03, 1.082365567474858e-03, 1.102510717706073e-03, 1.082365567474858e-03, 6.144646397642256e-03, 6.117224882200494e-03, 6.053696650681388e-03, 6.022955531874574e-03, 5.792669336664650e-03, 5.868287745700291e-03, 5.683063154900189e-03, 5.752193399089544e-03, 6.370663161121550e-03, 6.110247500195970e-03, 6.370663161121550e-03, 6.110247500195970e-03, 4.223413048962243e-02, 4.359327444490790e-02, 2.882154758020530e-02, 3.059794230447609e-02, 1.915254317096659e-02, 2.884078046330854e-02, 7.232482172851042e-03, 1.187605611754020e-02, 4.904086189355085e-02, 4.248872541386878e-02, 4.904086189355084e-02, 4.248872541386880e-02, 1.265489250117191e-02, 1.132837445685151e-02, 2.729240311846787e-02, 2.711091485728395e-02, 8.447402856177507e-03, 1.227547874572770e-02, 2.575133498596020e-03, 2.576785262918133e-03, 2.008920179952894e-02, 2.674107166468927e-02, 2.008920179952896e-02, 2.674107166468933e-02, -4.197553878566827e-03, -3.756193531014096e-03, -9.612562569986412e-04, -1.482224574615333e-03, 3.843060175375945e-03, 3.798326255053150e-03, 4.467903626059161e-03, 1.268761139766677e-02, -6.967079702187829e-03, 8.230490694081109e-03, -6.967079702187815e-03, 8.230490694081119e-03, 3.352323026473060e-01, 3.432772020673616e-01, 1.367215407136543e-01, 1.380061353568050e-01, 1.871469169238388e-01, 1.901120480552630e-01, 2.489578300379668e-01, 2.530193847220404e-01, 2.156411844623232e-01, 2.190720546138296e-01, 2.156411844623232e-01, 2.190720546138297e-01, 8.092296673191905e-02, 8.578609317156383e-02, 2.490296274163684e-02, 2.488276194913684e-02, 3.368602696714498e-02, 3.379367208467531e-02, 6.114438737464661e-02, 6.131704154963588e-02, 4.467070694326986e-02, 4.409317465851515e-02, 4.467070694327000e-02, 4.409317465851503e-02, 1.849473435005709e-02, 2.054702728544910e-02, 2.827342222439388e-02, 2.830747749642967e-02, 2.994788489354856e-02, 3.036536320787304e-02, 3.847652814906109e-02, 3.808241713355418e-02, 3.560677016450705e-02, 3.584860345992859e-02, 3.560677016450709e-02, 3.584860345992861e-02, 3.784498261014073e-02, 3.845483821721481e-02, 1.375212943479649e-02, 1.297106027403674e-02, 8.535035032941828e-03, 9.353708506965061e-03, 4.540761571129416e-02, 5.956812174122561e-02, 1.453004592512104e-02, 1.752287212961378e-02, 1.453004592512087e-02, 1.752287212961375e-02, -1.861164389668649e-03, -2.534152874433432e-03, -3.811491357280573e-03, -3.485737150177289e-03, 4.097566063641755e-03, 4.285006068037960e-03, 1.730996957315429e-02, 2.440063738195100e-02, -8.284677833820342e-03, 7.902203713132300e-03, -8.284677833820355e-03, 7.902203713132265e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
