
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_js18_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_js18", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-1.792404882337107e+01, -1.792410266923586e+01, -1.792435589487195e+01, -1.902015443677258e+01, -1.902053713649893e+01, -2.011717660140093e+01, -3.170907588411939e+00, -3.410291786604521e+00, -3.409356580860409e+00, -3.410041275085044e+00, -3.409615271503065e+00, -3.170333128329188e+00, -6.058635128986196e-01, -6.558980154767395e-01, -6.945179235026315e-01, -6.481637416635855e-01, -6.021690582237225e-01, -6.971487251341584e-01, -1.883699316461425e-01, -1.900585140764813e-01, -8.047098063494882e-01, -1.665034501164196e-01, -1.951867453770685e-01, -1.960404568844814e-01, -2.031097984331627e-02, -2.290448327625437e-02, -7.041286805865175e-02, -1.497574552364498e-02, -1.770878446712162e-02, -1.770878446712162e-02, -4.891730750229504e+00, -4.892200659880782e+00, -4.891750796644340e+00, -4.892165850788540e+00, -4.643186227787259e+00, -4.643425022317702e+00, -1.949484727199387e+00, -1.958861416649667e+00, -1.942950165160997e+00, -1.951104001184085e+00, -1.817656076335149e+00, -1.957820928343233e+00, -5.429745869603192e-01, -6.174350283554397e-01, -5.448231552307958e-01, -5.574401711397092e-01, -5.538353981314823e-01, -5.866433398552409e-01, -1.289496860163963e-01, -2.002666611176701e-01, -1.217414346186566e-01, -1.842544148701812e+00, -1.406723584774661e-01, -1.406723584774661e-01, -1.469778533149664e-02, -1.495119971726310e-02, -1.035201908276383e-02, -9.495884724524138e-02, -1.290840044894046e-02, -1.290840044894047e-02, -5.663830121151479e-01, -5.641963037610047e-01, -5.120853168721968e-01, -5.395665844315367e-01, -5.126521746362624e-01, -5.391206193507799e-01, -5.515749409640827e-01, -4.596097664285604e-01, -4.773737216615070e-01, -5.240985658207243e-01, -5.157658006227056e-01, -4.863339999262907e-01, -6.127626270607884e-01, -2.503236084452994e-01, -2.698537565698972e-01, -3.348950622963600e-01, -3.215174857311617e-01, -2.977556674968507e-01, -4.593780236057413e-01, -7.386430649904363e-02, -7.913836390688822e-02, -3.430750410919413e-01, -1.050993387595716e-01, -1.050993387595717e-01, -3.281748666174515e-02, -6.614645040774783e-03, -1.146533971153972e-02, -1.063797787345289e-01, -1.194737710546041e-02, -1.391940599836849e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_js18_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_js18", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-2.410275967637303e+01, -2.410276550393225e+01, -2.410284289354453e+01, -2.410282594896110e+01, -2.410312244690811e+01, -2.410322277991460e+01, -2.410218265867902e+01, -2.551537238466505e+01, -2.410280877561713e+01, -2.512769196946108e+01, -2.512791227762932e+01, -2.512769196946107e+01, -3.836094228485461e+00, -3.810760964491692e+00, -3.884396132758277e+00, -3.836033401326572e+00, -3.837973782174763e+00, -3.838334312144745e+00, -3.837645436528186e+00, -3.837701166192079e+00, -3.835275947257841e+00, -3.839386849107089e+00, -3.810045530036675e+00, -3.839386849107089e+00, -6.843766577575405e-01, -6.892248448009568e-01, -6.827231131323971e-01, -7.289008246723534e-01, -7.034224378888718e-01, -6.998820007627148e-01, -7.070091761229148e-01, -6.691029284999362e-01, -6.958784265738518e-01, -6.371895928763711e-01, -7.317148237062158e-01, -6.808981890116689e-01, -1.783839568897080e-01, -1.969223487691255e-01, -1.801500234993783e-01, -2.006750560153782e-01, -8.106600544240108e-01, -7.933936170460524e-01, -1.475258345874164e-01, -1.492154508852390e-01, -1.974539083089664e-01, -1.102216112879762e-01, -1.974539083089664e-01, -1.387857396243615e-01, -1.202379837555693e-02, -1.076062760761039e-02, -2.491956165474273e-02, -1.290539220528948e-02, -7.464564766369639e-02, -4.635908932427002e-02, -8.961451310589265e-03, -8.859541587309862e-03, -1.122425775204169e-02, -7.481754887905287e-03, -1.122425775204170e-02, -7.481754887905279e-03, -6.341514832639219e+00, -6.242168773010102e+00, -6.246754570963924e+00, -6.245170353275679e+00, -6.243854276444968e+00, -6.242296303943606e+00, -6.246518715289267e+00, -6.342937318901023e+00, -5.899112737384296e+00, -6.341553921979315e+00, -6.245213850022432e+00, -5.897677222811464e+00, -2.137613038123456e+00, -2.138064066356935e+00, -2.183402743909421e+00, -2.158649403499652e+00, -2.142384134647021e+00, -2.148266608076672e+00, -2.137907918035898e+00, -2.143748027252275e+00, -2.163146497265958e+00, -2.126622182613061e+00, -2.163146497265958e+00, -2.150778151265018e+00, -6.934499389214773e-01, -6.723788313140634e-01, -7.680434450888163e-01, -7.699198736303333e-01, -6.031876852166353e-01, -6.329795168971025e-01, -6.443585506421533e-01, -6.715736564111996e-01, -7.186828050245668e-01, -6.666778529513667e-01, -7.186828050245668e-01, -6.772512714127191e-01, -1.053153981839607e-01, -1.011734560469048e-01, -1.896367097626843e-01, -1.935995314461783e-01, -9.083484328187083e-02, -9.561977787208767e-02, -2.254980047313475e+00, -2.221092820938592e+00, -1.146567765301626e-01, -1.250838752834714e-01, -1.189030288416926e-01, -1.216944752856676e-01, -1.606779003232623e-02, -7.979543050146322e-03, -8.792373915132445e-03, -8.981334912323164e-03, -6.093228375933631e-03, -5.365126806965256e-03, -6.827553126413072e-02, -9.852881876981544e-02, -7.226579932498515e-03, -7.910745973595300e-03, -7.226579932498514e-03, -7.910745973595298e-03, -7.535784149602750e-01, -7.444702829553853e-01, -7.416604780833594e-01, -7.330333376256343e-01, -6.795714485645084e-01, -6.821579585888433e-01, -6.806523468982356e-01, -7.404422297307616e-01, -6.801135548763676e-01, -6.826895088503239e-01, -6.801135548763676e-01, -7.387925527122675e-01, -7.328291701227451e-01, -7.236375375747721e-01, -5.660458808543899e-01, -5.642899934535103e-01, -6.071179133271627e-01, -5.970914661959787e-01, -6.521303693545625e-01, -6.546376700189660e-01, -6.385280798621342e-01, -6.412786248853102e-01, -6.288484902344720e-01, -6.114723701645131e-01, -7.951157874116856e-01, -7.710345812041027e-01, -2.414557447787037e-01, -2.428309313756753e-01, -2.716046641791277e-01, -2.935061519621247e-01, -3.852749248775120e-01, -3.973358525819048e-01, -3.400401173109880e-01, -3.371599956486278e-01, -3.400401173109879e-01, -3.259317974074208e-01, -5.130661616636308e-01, -5.180316127329468e-01, -7.343815928277034e-02, -7.388448105605323e-02, -5.617835972945826e-02, -5.769016480364533e-02, -3.803896951242315e-01, -3.906328506392002e-01, -8.256666073316449e-02, -8.648179525020536e-02, -8.256666073316449e-02, -8.648179525020544e-02, -3.241805200873749e-02, -3.316540765784486e-02, -3.885509495554345e-03, -3.892573529149629e-03, -1.127008501514051e-02, -1.162731111868213e-02, -1.053465235098180e-01, -1.050191569732135e-01, -6.385717679966766e-03, -7.460912170640385e-03, -6.385717679966765e-03, -1.527297572743490e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_js18_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_js18", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-1.354767077930442e-08, 0.000000000000000e+00, -1.355017489362000e-08, -1.354785289762366e-08, 0.000000000000000e+00, -1.355030677501987e-08, -1.354826704696649e-08, 0.000000000000000e+00, -1.355094752286592e-08, -1.354623861947629e-08, 0.000000000000000e+00, -8.844144314850786e-09, -1.354779713649731e-08, 0.000000000000000e+00, -1.375110381566455e-08, -1.375031910245044e-08, 0.000000000000000e+00, -1.375110381566455e-08, -1.567514144253393e-05, 0.000000000000000e+00, -8.919427845271044e-06, -1.386588289280160e-05, 0.000000000000000e+00, -1.567563631351006e-05, -1.570696453151872e-05, 0.000000000000000e+00, -1.571171678496415e-05, -1.569066810289455e-05, 0.000000000000000e+00, -1.568983245763404e-05, -1.568175263301975e-05, 0.000000000000000e+00, -1.571590103836829e-05, -8.921579211437027e-06, 0.000000000000000e+00, -1.571590103836829e-05, -2.569420383091759e-03, 0.000000000000000e+00, -2.662532692695070e-03, -2.546569592641304e-03, 0.000000000000000e+00, -7.942109044581662e-03, -8.343994615507517e-03, 0.000000000000000e+00, -8.358179820696809e-03, -8.439436214232940e-03, 0.000000000000000e+00, -2.450490386842687e-03, -2.666710341213229e-03, 0.000000000000000e+00, -1.966293201473463e-03, -8.019487466696111e-03, 0.000000000000000e+00, -8.838604964873990e-03, -1.953339048985394e-01, 0.000000000000000e+00, -1.468863825509905e+00, -2.100393030791006e-01, 0.000000000000000e+00, -1.415580293303990e+00, -3.308373960941553e-03, 0.000000000000000e+00, -4.894549396744495e-04, -2.402307077426955e+00, 0.000000000000000e+00, -2.501514685418682e+00, -1.301519994656892e+00, 0.000000000000000e+00, -4.814469904947398e+00, -1.301519994656892e+00, 0.000000000000000e+00, 2.740474161653443e-01, -6.935017839785291e+03, 0.000000000000000e+00, -7.248499037766120e+03, 4.202147473393994e+02, 0.000000000000000e+00, -5.351388396145022e+03, 4.924377628015693e+00, 0.000000000000000e+00, -6.455471762130928e+01, -2.085621460525600e+04, 0.000000000000000e+00, -2.180482585669928e+04, -8.946485426312422e+03, 0.000000000000000e+00, -4.304821306971613e+04, -8.946485426312422e+03, 0.000000000000000e+00, -4.304821306971607e+04, -1.865516979163209e-06, 0.000000000000000e+00, -3.965785662635355e-06, -3.959478936252611e-06, 0.000000000000000e+00, -3.963364687928371e-06, -3.961835418574897e-06, 0.000000000000000e+00, -3.965696471709313e-06, -3.959686848408418e-06, 0.000000000000000e+00, -1.849249994735905e-06, -5.147853210130500e-06, 0.000000000000000e+00, -1.857791086225860e-06, -3.960711663626840e-06, 0.000000000000000e+00, -5.152495862199313e-06, -1.444987404074434e-04, 0.000000000000000e+00, -1.447791811310714e-04, -1.294015939767550e-04, 0.000000000000000e+00, -1.430329576934197e-04, -1.336499388779390e-04, 0.000000000000000e+00, -1.332969215352122e-04, -1.443439294056531e-04, 0.000000000000000e+00, -1.442033949612307e-04, -1.424984779740852e-04, 0.000000000000000e+00, -7.463350304795323e-05, -1.424984779740852e-04, 0.000000000000000e+00, -1.437559955483561e-04, -1.814568856454707e-02, 0.000000000000000e+00, -1.648565608188790e-02, -1.784820223120903e-02, 0.000000000000000e+00, -1.786800319176851e-02, -2.945499509825252e-02, 0.000000000000000e+00, -2.710375614237644e-02, -2.808489547846763e-02, 0.000000000000000e+00, -2.540624548773952e-02, -1.999943643596871e-02, 0.000000000000000e+00, -1.732523903826516e-02, -1.999943643596872e-02, 0.000000000000000e+00, -2.388238117314881e-02, -5.850804344057595e+00, 0.000000000000000e+00, -6.457112187704809e+00, -3.951056635804652e-02, 0.000000000000000e+00, -1.074313214401438e+00, -8.625383054143681e+00, 0.000000000000000e+00, -7.693768310952083e+00, -1.539600910512116e-04, 0.000000000000000e+00, -2.012840486301618e-04, -5.179695654268199e+00, 0.000000000000000e+00, -4.613492237838530e+00, -4.666434096652452e+00, 0.000000000000000e+00, -5.031906018962599e+00, 2.436556680677460e+03, 0.000000000000000e+00, -3.233044507493015e+04, -2.240596910326605e+04, 0.000000000000000e+00, -2.055046731443725e+04, -9.904082810800035e+04, 0.000000000000000e+00, -1.083242107664548e+05, -2.104651563030308e+01, 0.000000000000000e+00, 1.420776336630924e+00, -4.838263359337336e+04, 0.000000000000000e+00, -3.575313795375911e+04, -4.838263359337337e+04, 0.000000000000000e+00, -3.575313795375913e+04, 2.806161298659298e-02, 0.000000000000000e+00, -2.364901108156988e-02, 7.119387556820617e-04, 0.000000000000000e+00, -2.498127440247665e-02, -6.533815728781876e-02, 0.000000000000000e+00, -6.574073814406749e-02, -7.734043420342403e-02, 0.000000000000000e+00, -2.419770038763673e-02, -7.075460218952279e-02, 0.000000000000000e+00, -7.117102001542279e-02, -7.075460218952279e-02, 0.000000000000000e+00, -2.439443129240819e-02, 2.394238071795847e-02, 0.000000000000000e+00, -2.662219972173103e-02, -4.403829371121319e-02, 0.000000000000000e+00, -2.828766981643163e-02, -3.996312997732006e-02, 0.000000000000000e+00, -3.078772676959317e-02, -3.556906503264254e-02, 0.000000000000000e+00, -3.508823713582408e-02, -2.671239422606080e-02, 0.000000000000000e+00, -2.622193033119512e-02, -3.787183481393644e-02, 0.000000000000000e+00, -3.303526472968706e-02, -1.449058012654554e-02, 0.000000000000000e+00, -1.345828731457570e-02, -5.594384453391620e-01, 0.000000000000000e+00, -5.507172720233227e-01, -8.642701639638972e-02, 0.000000000000000e+00, -3.216127705359185e-01, -7.629362948220705e-02, 0.000000000000000e+00, -1.347550569702294e-01, -2.172816810835865e-01, 0.000000000000000e+00, -2.313411584651975e-01, -2.172816810835863e-01, 0.000000000000000e+00, -9.472699086453842e-02, -5.711843971994867e-02, 0.000000000000000e+00, -5.643182924723943e-02, 5.261950235662495e+00, 0.000000000000000e+00, 5.134190664697606e+00, -3.502647774507692e+01, 0.000000000000000e+00, -3.276579845070963e+01, -1.944709906095540e-01, 0.000000000000000e+00, -1.948153448125342e-01, -1.332087623480314e+01, 0.000000000000000e+00, -1.265078804524192e+01, -1.332087623480312e+01, 0.000000000000000e+00, -1.265078804524192e+01, 1.465768049842838e+02, 0.000000000000000e+00, 1.337723723098794e+02, -5.552701834536267e+05, 0.000000000000000e+00, -5.512628343927378e+05, 1.006722466454390e+04, 0.000000000000000e+00, 8.885432688805124e+03, 9.610066137243961e-01, 0.000000000000000e+00, 9.425356622933923e-01, -8.045981388161096e+04, 0.000000000000000e+00, -4.473272912149264e+04, -8.045981388161118e+04, 0.000000000000000e+00, 2.982336831726700e+03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_js18_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_js18", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.232434108280369e-04, 1.232712126439006e-04, 1.232470698267702e-04, 1.232738646880512e-04, 1.232571745303055e-04, 1.232887854306972e-04, 1.232161589332872e-04, 3.317063801143412e-04, 1.232457787815259e-04, 7.112273859899266e-04, 7.112047980375153e-04, 7.112273859899266e-04, 3.072141211074178e-03, -6.908815130166120e-04, 2.468196119467056e-03, 3.072113193024736e-03, 3.080207937064044e-03, 3.081549964662063e-03, 3.077156954076456e-03, 3.077124280098938e-03, 3.071756956170705e-03, 3.083988000002817e-03, -6.919250750019295e-04, 3.083988000002817e-03, -1.115215848455244e-02, -1.096423186154123e-02, -1.120829997402556e-02, 1.076069266102650e-02, 1.072121007385456e-02, 1.042213777554737e-02, 1.096036163889292e-02, -1.159536255391617e-02, -1.077860583734334e-02, -1.233281043998687e-02, 1.139949126466104e-02, 1.032277294668621e-02, -4.544928482200197e-02, 3.721463694744667e-02, -4.557563382265419e-02, 3.763785847380516e-02, 7.103397955354849e-03, -9.485292057438168e-03, 2.502006285234814e-02, 2.714120352481924e-02, 3.360045647410406e-02, 1.910899366691317e-02, 3.360045647410404e-02, -2.375798421159385e-02, 5.721107309593671e-03, 8.311812993181960e-03, -6.893223935544792e-03, 6.253991172543012e-03, -1.444044815182375e-02, 1.301560837684798e-02, 3.719988037233209e-03, 3.697698379030772e-03, 5.233116467068566e-03, 4.625400198766480e-03, 5.233116467068566e-03, 4.625400198766480e-03, 8.195181427089541e-04, 3.169351315044589e-03, 3.172946334407943e-03, 3.173591641229639e-03, 3.168871250422442e-03, 3.169545649058829e-03, 3.172631533340820e-03, 8.049177446052264e-04, 6.498790728118174e-04, 8.119245138511877e-04, 3.170755551681503e-03, 6.500101341713611e-04, 4.992490575249007e-03, 5.002295135434950e-03, 4.240246006827066e-03, 5.057515839094390e-03, 4.227251161594787e-03, 4.233750397388402e-03, 4.989789100987163e-03, 5.015115002454519e-03, 5.065201594482602e-03, -1.919057045756682e-03, 5.065201594482602e-03, 5.038040541524109e-03, 1.512785353589198e-02, 1.144014971950288e-03, 2.457844430111677e-02, 2.480702064387199e-02, 2.083273707134160e-02, 2.167630291624028e-02, 2.321134758183423e-02, 2.355198251145183e-02, 2.269327458610196e-02, 1.305858937664314e-03, 2.269327458610196e-02, 2.282143605243450e-02, 2.021699046797684e-02, 2.490251673033178e-02, -3.581718766637464e-02, 2.637544770917175e-02, 2.391769488680100e-02, 2.496857289358048e-02, 4.443441235410740e-03, 7.084840513809778e-03, 2.896904067461773e-02, 2.875523379360082e-02, 2.439302647097981e-02, 3.318984644541095e-02, -3.180622710866140e-03, 2.728239381923332e-03, 3.558865063548937e-03, 3.414316884859951e-03, 6.585536442433123e-03, 9.930020219801321e-03, 1.709925132276540e-02, -2.154873735018409e-02, 3.420349844525276e-03, 6.570701795727893e-03, 3.420349844525277e-03, 6.570701795727892e-03, -5.050291936263517e-02, 3.369533086465688e-02, -9.666208729450607e-03, 3.178111338437307e-02, 7.363198193596208e-03, 7.359714948738475e-03, 7.539527929810511e-03, 3.297201281799732e-02, 7.451866398314631e-03, 7.445067332096108e-03, 7.451866398314631e-03, 3.269254200647218e-02, -4.153846620527354e-02, 3.436387762011456e-02, 2.485316632747674e-02, -1.052280141085892e-03, 2.701687808256549e-02, 2.777927552945149e-03, 2.964493730647821e-02, 2.959680175993853e-02, 1.536292786294275e-02, 1.522261792879195e-02, 2.824364225146559e-02, 4.215349146911638e-03, 2.220564403449970e-02, 3.643485687997456e-03, 2.704747069189056e-02, 2.708383337862395e-02, -3.058950124626821e-02, 2.694543931726619e-02, -1.246081804012234e-02, 2.449715260341082e-02, 2.637738736525863e-02, 2.932763682042627e-02, 2.637738736525857e-02, -2.126587629901515e-02, 2.459042516053431e-02, 2.487195113465131e-02, -1.457309161307360e-02, -1.451530386000247e-02, 1.394868260887440e-02, 1.444168824878908e-02, 3.335117078839868e-02, 3.537509115368865e-02, 2.110319484621790e-02, 2.374916241641859e-02, 2.110319484621790e-02, 2.374916241641861e-02, -6.119416285579488e-03, -6.215523536375145e-03, 1.711435361342346e-03, 1.710763208378006e-03, -4.548582556098397e-03, -4.830296276111970e-03, -2.662522870907266e-02, -2.819129452948453e-02, 4.838088504601375e-03, 6.326328521972810e-03, 4.838088504601374e-03, -7.302553288827656e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
