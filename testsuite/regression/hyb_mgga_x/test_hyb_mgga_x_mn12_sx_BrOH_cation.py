
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_mn12_sx_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_mn12_sx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-4.674504776044741e+00, -4.674252309421966e+00, -4.673238884147516e+00, -1.340752587779660e+01, -1.340620450460631e+01, -2.213764105335704e+01, -2.702960698392235e+00, -2.943314494301362e+00, -2.945805636179888e+00, -2.945090154857220e+00, -2.944839471774499e+00, -2.705114350776508e+00, -2.408099542535218e-01, -3.792342949318819e-01, -4.915606811177822e-01, -3.472911574621761e-01, -1.706518702680748e-01, -5.015288491906126e-01, -6.146339960664852e-02, -7.105331646408228e-02, -9.234359332529490e-02, -3.486965602070323e-02, -1.562652762120630e-01, -1.247612223058659e-01, 5.224470354674472e-03, 1.668466631938420e-02, 8.008126310458570e-02, 3.096344414670300e-03, 4.251598972910688e-03, 4.251598972910687e-03, -4.762832629615844e+00, -4.741760973952632e+00, -4.761627765007335e+00, -4.743040386068024e+00, -2.842366070005118e+00, -2.844324887571967e+00, -1.527970025333526e+00, -1.546612667164729e+00, -1.513748749228474e+00, -1.530591832994843e+00, -1.470435870606677e+00, -1.545122739498320e+00, -4.404750965778372e-01, -5.249391718175678e-01, -4.266181317504669e-01, -4.361281860063378e-01, -4.552821716672048e-01, -4.668697593613201e-01, 3.790351136441344e-02, 3.384322365594741e-02, 4.024724796027113e-02, -1.756715531562468e+00, -9.835966201102372e-04, -9.835966201101219e-04, 7.550401437106823e-03, 3.029265744132380e-03, 2.346207538686642e-03, 1.232885189226351e-01, 2.921883278663414e-03, 2.921883278663426e-03, -3.791959366234753e-01, -4.145261607754404e-01, -3.331982769316091e-01, -3.572760030426813e-01, -3.278654615890839e-01, -3.622832896667960e-01, -3.804378739299928e-01, -3.667908316294397e-01, -3.929797941681697e-01, -4.196698996200552e-01, -4.071526933867776e-01, -4.061814321549414e-01, -5.225725184649587e-01, -2.181375103052283e-01, -1.525124906052818e-01, -2.635077666880967e-01, -3.119065920453653e-01, -2.198372414113249e-01, -3.684207139121117e-01, 1.425365331386773e-01, 3.109019395938062e-02, -2.822362997890006e-01, 3.787163818068207e-02, 3.787163818068201e-02, 4.158113683792231e-02, 8.343191559430354e-04, 9.676369429027953e-03, 2.227927797022966e-01, 2.691722854686362e-03, 1.208950734276465e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_mn12_sx_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_mn12_sx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([8.196881533435899e+00, 8.202122341692478e+00, 8.197686010264643e+00, 8.202706233371487e+00, 8.199977798363154e+00, 8.206071942853114e+00, 8.190953703601968e+00, -8.718855533087762e+00, 8.197395506396026e+00, -8.709302966752354e+00, -8.713255767122371e+00, -8.709302966752352e+00, -4.193613685649994e+00, -1.194873198531272e+00, -4.193499737636918e+00, -4.193579712508440e+00, -4.191407692218519e+00, -4.191108179665820e+00, -4.192509043013991e+00, -4.192567884250472e+00, -4.193161561762108e+00, -4.190907754073145e+00, -1.196999393851584e+00, -4.190907754073145e+00, -1.294495882835458e+00, -1.273495810993797e+00, -1.299733093697406e+00, -7.943420949501738e-01, -8.890020518984125e-01, -8.992096927584998e-01, -8.569698255165665e-01, -1.321863190505252e+00, -1.266575659553245e+00, -1.370961400345763e+00, -7.846146191612049e-01, -9.355081589917120e-01, -2.772392894730620e-01, -3.215083066578083e-01, -2.898999688717210e-01, -3.023264845487875e-01, -1.199057769361894e+00, -1.883928036239157e+00, -2.468050551186095e-01, -2.907918699338313e-01, -3.780005558159664e-01, 2.404755474961985e-02, -3.780005558159687e-01, 2.325436146346426e-01, 6.754229285743792e-03, 7.160195960526868e-03, 3.997033837126292e-02, 7.553603561902733e-03, 1.786214891211827e-01, 4.596014435873878e-02, 4.138613823005178e-03, 4.072533514346477e-03, 6.050564445475181e-03, 3.527210077203789e-03, 6.050564445475181e-03, 3.527210077204147e-03, 1.740246477008162e+00, 1.740115322779612e+00, 1.862221818476379e+00, 1.857966491006622e+00, 1.748718785240036e+00, 1.745392593694014e+00, 1.853302015754057e+00, 1.852376901482610e+00, 3.509502391911572e+00, 1.798994010243825e+00, 1.801322401249420e+00, 3.507283522955467e+00, -2.285380941274656e+00, -2.282294953324215e+00, -2.279885856320034e+00, -2.277622478165259e+00, -2.297660007994123e+00, -2.290127554612524e+00, -2.286453460033136e+00, -2.281124319554122e+00, -2.278583258021884e+00, -1.596837859524356e+00, -2.278583258021883e+00, -2.278159604334600e+00, -6.360488438002556e-01, -6.590940700000542e-01, -7.212975174586843e-01, -7.052136608336851e-01, -3.859499848331072e-01, -4.787843455556087e-01, -5.645923459965816e-01, -6.443848844637613e-01, -7.296217357221135e-01, -6.539517921802365e-01, -7.296217357221139e-01, -6.383369492649977e-01, 2.014506359983015e-02, 1.675202995336178e-02, -1.664671495265264e-01, -4.319549266785730e-01, 5.105955795625414e-02, 3.097509185487657e-02, -2.566435666442558e+00, -2.565087148536045e+00, -9.795515050361414e-02, -2.012830546185856e-01, -9.795515050361235e-02, -2.012830546185849e-01, 1.762951997333788e-02, 3.253627603499433e-03, 3.987395730097775e-03, 4.043526060027182e-03, 3.032720163574120e-03, 3.210058721408903e-03, 7.202875608932212e-02, 2.282171788199407e-01, 3.077178711825726e-03, 4.209142166892314e-03, 3.077178711825833e-03, 4.209142166892322e-03, -2.885969557631280e-01, -2.831682223760780e-01, -3.577199760815666e-01, -3.517215518372749e-01, -2.468834671535366e-01, -2.446668653793818e-01, -2.535174092694428e-01, -3.028783347966331e-01, -2.495112644222960e-01, -2.473705744449595e-01, -2.495112644222960e-01, -3.121757396555752e-01, -3.215674715229980e-01, -3.171510334860776e-01, -4.060743061049344e-01, -5.894962879996021e-01, -5.631814469052731e-01, -5.785861309405956e-01, -5.869282583196449e-01, -5.872701549068085e-01, -6.048359197848678e-01, -6.078115494291300e-01, -6.048359197848675e-01, -5.346803802771505e-01, -8.244369896754068e-01, -6.177287988761269e-01, -4.486935935150355e-01, -4.465938617390688e-01, -4.999637837054720e-01, -3.333029633193976e-01, -5.200261916440582e-01, -1.707973378500810e-01, -2.069242345802516e-01, -2.041243487844666e-01, -2.069242345802529e-01, -5.221594663700025e-01, -2.841919559602223e-01, -2.969519300094783e-01, 1.759731357555699e-01, 1.769367605601857e-01, 5.912438586785466e-02, 6.156100327075058e-02, -1.485395874975433e-01, -1.731652612086105e-01, 5.395996945230521e-02, 2.573367418470696e-02, 5.395996945230207e-02, 2.573367418470530e-02, 5.377584282812042e-02, 5.560916301940180e-02, 1.108413031754293e-03, 1.110911305903320e-03, 1.244072655262584e-02, 1.322081002026767e-02, 2.185244499459381e-01, 2.113136415677665e-01, 2.927159219920462e-03, 3.867047591678744e-03, 2.927159219920393e-03, 2.162951960374681e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_mn12_sx_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_mn12_sx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-2.391008996486689e-07, 0.000000000000000e+00, -2.391761366905107e-07, -2.391087145251192e-07, 0.000000000000000e+00, -2.391818000735231e-07, -2.391290402423016e-07, 0.000000000000000e+00, -2.392122313795900e-07, -2.390416270062259e-07, 0.000000000000000e+00, -2.013652059609602e-07, -2.391060773494897e-07, 0.000000000000000e+00, -2.014053022014634e-07, -2.013731331066711e-07, 0.000000000000000e+00, -2.014053022014634e-07, -1.394725046522611e-05, 0.000000000000000e+00, -9.094764878886115e-06, -1.396898739932653e-05, 0.000000000000000e+00, -1.394429758455280e-05, -1.439549557078440e-05, 0.000000000000000e+00, -1.447201655763640e-05, -1.423512405812453e-05, 0.000000000000000e+00, -1.423495996108732e-05, -1.390718413330599e-05, 0.000000000000000e+00, -1.462204698687392e-05, -9.055016390935176e-06, 0.000000000000000e+00, -1.462204698687392e-05, -3.762369165059956e-02, 0.000000000000000e+00, -3.485519491032248e-02, -3.852948004447278e-02, 0.000000000000000e+00, -4.440072163499459e-03, -3.717130149573134e-03, 0.000000000000000e+00, -3.658900093232929e-03, -4.059429219619273e-03, 0.000000000000000e+00, -4.576709657280008e-02, -3.233775893590014e-02, 0.000000000000000e+00, -7.314723820470949e-02, -4.406018779733397e-03, 0.000000000000000e+00, -3.349170561555391e-03, -3.284234193483245e+01, 0.000000000000000e+00, -2.366611541767043e+00, -3.029817149836983e+01, 0.000000000000000e+00, -2.515811867636977e+00, -6.277008889774354e-04, 0.000000000000000e+00, -3.631325220506405e-02, -3.930817494161267e-01, 0.000000000000000e+00, -2.722401510970934e-01, -1.478659394125242e+00, 0.000000000000000e+00, -4.070602003843654e+00, -1.478659394125227e+00, 0.000000000000000e+00, -6.690882532535326e+02, -6.284599690229941e+01, 0.000000000000000e+00, -6.303307870950463e+01, -5.108317167597738e+07, 0.000000000000000e+00, -6.585349543442982e+01, -4.996961356402993e+04, 0.000000000000000e+00, -2.520740745078370e+01, -4.622573691246327e+01, 0.000000000000000e+00, -4.670107638114705e+01, -5.979652084104342e+01, 0.000000000000000e+00, -1.026233882257577e+02, -5.979652084104342e+01, 0.000000000000000e+00, -1.026233882276005e+02, -7.659365204492239e-05, 0.000000000000000e+00, -7.666730347860649e-05, -7.720445941589327e-05, 0.000000000000000e+00, -7.725818346828486e-05, -7.663659046889084e-05, 0.000000000000000e+00, -7.669413449227301e-05, -7.716027441854465e-05, 0.000000000000000e+00, -7.723049889081004e-05, -8.724830960664287e-05, 0.000000000000000e+00, -7.696245439813831e-05, -7.689912844204703e-05, 0.000000000000000e+00, -8.732126969111188e-05, -3.615609716761039e-05, 0.000000000000000e+00, -3.734166735237387e-05, -4.701847885978709e-05, 0.000000000000000e+00, -4.798722672482351e-05, -2.723890295501363e-05, 0.000000000000000e+00, -3.075818725276901e-05, -3.590966701449705e-05, 0.000000000000000e+00, -3.989005526898379e-05, -4.989329171756463e-05, 0.000000000000000e+00, 1.972892960547871e-05, -4.989329171756463e-05, 0.000000000000000e+00, -4.398752550378992e-05, -7.876480581137702e-03, 0.000000000000000e+00, -8.103791155468340e-03, -2.222733571545745e-02, 0.000000000000000e+00, -2.448861523168326e-02, -2.162992527110146e-02, 0.000000000000000e+00, -1.384372693067406e-02, -8.064369976159412e-03, 0.000000000000000e+00, -6.000305363403783e-03, -8.093648360648293e-03, 0.000000000000000e+00, -7.942254547428798e-03, -8.093648360648253e-03, 0.000000000000000e+00, -7.167032837587387e-03, -4.856681079170225e+00, 0.000000000000000e+00, -4.683182697270574e+00, -3.808835841226931e+01, 0.000000000000000e+00, -2.584688262343041e-01, -6.811704249540007e+00, 0.000000000000000e+00, -5.803441559639542e+00, -8.456664496015731e-04, 0.000000000000000e+00, -8.482876168121546e-04, -2.221467041161362e+00, 0.000000000000000e+00, -9.495037818252062e-01, -2.221467041161420e+00, 0.000000000000000e+00, -9.495037818250822e-01, -1.500493104129699e+09, 0.000000000000000e+00, -3.096561010135741e+01, -4.385558167169631e+01, 0.000000000000000e+00, -3.866129327110173e+01, -3.152758109957639e+02, 0.000000000000000e+00, -3.458959846292343e+02, -1.670220148626523e+01, 0.000000000000000e+00, -5.885873495187067e+03, -5.952190941438362e+01, 0.000000000000000e+00, -1.884226870527065e+02, -5.952190941389243e+01, 0.000000000000000e+00, -1.884226870512480e+02, -2.600599075940748e-01, 0.000000000000000e+00, -2.628156507135713e-01, -1.369689456845533e-01, 0.000000000000000e+00, -1.401909411253249e-01, -1.899428627370588e-01, 0.000000000000000e+00, -1.930608799635555e-01, -2.240366042582848e-01, 0.000000000000000e+00, -2.103204401388323e-01, -2.062457543546460e-01, 0.000000000000000e+00, -2.090388886074147e-01, -2.062457543546460e-01, 0.000000000000000e+00, -1.921131579177119e-01, -2.505190693685592e-01, 0.000000000000000e+00, -2.546013620416802e-01, -1.699570123403157e-02, 0.000000000000000e+00, -9.239981809759388e-03, 5.334469312469782e-03, 0.000000000000000e+00, 2.272886974893899e-03, -4.819949692980382e-03, 0.000000000000000e+00, -6.154709266579850e-03, 7.507206367100126e-03, 0.000000000000000e+00, 6.766803261932938e-03, 7.507206367100077e-03, 0.000000000000000e+00, -3.751975214795221e-03, -1.495484001624068e-02, 0.000000000000000e+00, -2.558447775713345e-02, -5.198539840935246e-01, 0.000000000000000e+00, -5.255338422725450e-01, -3.617169838914845e+00, 0.000000000000000e+00, -5.402391789290041e-01, -3.820116627489497e-01, 0.000000000000000e+00, -2.162050648107569e-01, -4.223792047276091e-01, 0.000000000000000e+00, -4.249754007323567e-01, -4.223792047276096e-01, 0.000000000000000e+00, -1.191675116876741e+00, -4.706872781448328e-02, 0.000000000000000e+00, -4.199878486532357e-02, -5.395673266055092e+04, 0.000000000000000e+00, -5.248244532201232e+04, -1.909819108810727e+01, 0.000000000000000e+00, -1.913586123231190e+01, -2.179906444361325e-01, 0.000000000000000e+00, -1.150946958587752e-01, -1.195599485744767e+01, 0.000000000000000e+00, -1.053957171822674e+01, -1.195599485744784e+01, 0.000000000000000e+00, -1.053957171822650e+01, -1.464560751020506e+07, 0.000000000000000e+00, -1.269296711184319e+07, -5.045346002323786e+01, 0.000000000000000e+00, -5.023166478102203e+01, -6.183891011713861e+09, 0.000000000000000e+00, -4.831377695989373e+09, -2.856173208274399e+03, 0.000000000000000e+00, -2.646630217856023e+03, -1.534961332629511e+02, 0.000000000000000e+00, -1.954613736139977e+02, -1.534961332638486e+02, 0.000000000000000e+00, -6.482005147749786e+08])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_mn12_sx_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_mn12_sx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-8.293352507479665e-03, -8.296810989805527e-03, -8.293834185138340e-03, -8.297160612776298e-03, -8.295181040292671e-03, -8.299147062180601e-03, -8.289781847566706e-03, 1.270366588822274e-02, -8.293662675507768e-03, 1.270266935245187e-02, 1.270281410738356e-02, 1.270266935245187e-02, 8.716768638127200e-03, -1.619095742925295e-02, 8.726874798339645e-03, 8.715201659756680e-03, 8.926187160463915e-03, 8.962343311828101e-03, 8.852421569786540e-03, 8.852579739138703e-03, 8.695556046795512e-03, 9.034936915974387e-03, -1.617524848988352e-02, 9.034936915974387e-03, 9.049695375077681e-02, 8.809479846091917e-02, 9.119802481700753e-02, 3.098333954536967e-02, 3.855611913120387e-02, 3.960295554903191e-02, 3.665332434074577e-02, 9.576421110232877e-02, 8.605092931858253e-02, 1.055239164236309e-01, 2.956863305543441e-02, 4.297885982699121e-02, 3.304129990952772e-01, 2.312831460596058e-01, 3.367059452199375e-01, 2.251551760457708e-01, 3.438303333556624e-02, 8.943752476073627e-02, 1.372803056200755e-01, 1.618747148085641e-01, 2.221245909772810e-01, 5.474698753528151e-02, 2.221245909772817e-01, 5.544262496091879e-02, 5.325481487164520e-05, 6.406955417951899e-05, 5.524454990928023e-05, 7.891856728085107e-05, 4.301304096017952e-03, 5.759720035346682e-03, 8.538621306935506e-06, 8.203841948507677e-06, 3.599358587485893e-05, 1.144934094912774e-05, 3.599358587485893e-05, 1.144934094911526e-05, 2.121677936980160e-02, 2.121457400014937e-02, 2.014667863888570e-02, 2.018033958264296e-02, 2.114300911705420e-02, 2.116860447500146e-02, 2.022551755435473e-02, 2.022975449896575e-02, -6.442803738103070e-02, 2.069997249917608e-02, 2.068322239939713e-02, -6.442653075486092e-02, 7.391181478778890e-03, 7.441960162990858e-03, 7.977921361829317e-03, 8.033601200090987e-03, 7.084468816890521e-03, 7.184478258241010e-03, 7.381307196374879e-03, 7.566131538914632e-03, 8.163372299698362e-03, -6.310179453959005e-03, 8.163372299698362e-03, 7.787177956698743e-03, 2.699623024866440e-02, 5.029430001822254e-02, 5.273772151518508e-02, 4.706499380479943e-02, -1.267003579056584e-02, -3.456252586752599e-03, 1.093797977137789e-02, 2.960668703819417e-02, 5.147499413510835e-02, 5.100239653452339e-02, 5.147499413510855e-02, 2.792396078769992e-02, 5.914745691862957e-02, 6.032412978859810e-02, 2.212938873526560e-01, 1.737765365490385e-01, 4.622665653004603e-02, 5.589357092195410e-02, 8.404939854690746e-02, 8.416421768383650e-02, 1.056806712021312e-01, 1.576572830685368e-01, 1.056806712021320e-01, 1.576572830685386e-01, 2.271955842281879e-06, 2.715833049164479e-06, 7.218083260288690e-06, 6.654212213919716e-06, 2.181780387537120e-05, 2.843397020464595e-05, 2.133170757265310e-02, 2.303468792945310e-02, 4.376467533274367e-06, 3.589492426105282e-05, 4.376467533289857e-06, 3.589492426086644e-05, 2.315843862016280e-01, 2.387059136581517e-01, -5.005698476672867e-02, -4.900144231743953e-02, -2.785411983776060e-01, -2.754808483432139e-01, -2.015721777103224e-01, 7.781575454115994e-02, -2.463288545548823e-01, -2.422024689025378e-01, -2.463288545548823e-01, 3.479373604359430e-02, 2.204891952740846e-01, 2.312478930607485e-01, -2.312654566751314e-02, 6.610041054647724e-02, 4.622754412198776e-04, 4.922474343800748e-02, -1.282585085646876e-02, -1.252534562450551e-02, 5.077335570562267e-03, 5.990264696151337e-03, 5.077335570562142e-03, 8.592716830220339e-03, 8.016065498274619e-02, -4.735430074852084e-03, 1.671198812639468e-01, 1.663840306615825e-01, 2.456434952186965e-01, 1.174998143288609e-01, 1.457572469711680e-01, -2.198964686854596e-02, 4.316030679702811e-02, 4.167684479716663e-02, 4.316030679702855e-02, 2.009919856864661e-01, -3.139528656244828e-02, -3.322292173597356e-02, 4.281362804285902e-03, 4.281516232278041e-03, 9.344239367508124e-03, 1.066716693485037e-02, -7.604173850239444e-02, -1.171997994960799e-01, 4.762790586457907e-02, 6.770949707316601e-02, 4.762790586457829e-02, 6.770949707316559e-02, 6.517739090780594e-05, 7.144299672515170e-05, 1.631478428783980e-07, 1.635454110665005e-07, 3.273424745140304e-06, 4.171540291316314e-06, 4.650028420136314e-02, 5.390824952764677e-02, 9.606434875994760e-06, 2.868366909999346e-05, 9.606434875981165e-06, 2.480362364289388e-05])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
