
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_mn12_sx_BrOH_cation_2_zk():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_mn12_sx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [-2.110822812754047e+01, -2.110820321414443e+01, -2.110868295118379e+01, -2.110906456961914e+01, -2.110878087724001e+01, -2.110878087724001e+01, -2.664766819442220e+00, -2.664660221220669e+00, -2.662056869861820e+00, -2.664959897533945e+00, -2.663685353449785e+00, -2.663685353449785e+00, -3.993292104399039e-01, -3.983293374555104e-01, -3.766497670778114e-01, -4.031614502849595e-01, -3.971558502813405e-01, -3.971558502813405e-01, -1.873936127579857e-01, -1.930617706441096e-01, -7.416589148187297e-02, -3.405122343432133e-02, -1.491011116366042e-01, -1.491011116366038e-01, 5.225127258613676e-03, 5.485952195514969e-03, 2.589837381121993e-02, 3.097977097990414e-03, 4.253714877041423e-03, 4.253714877041416e-03, -4.739791755563061e+00, -4.718810733603791e+00, -4.739056267988975e+00, -4.720531509724593e+00, -4.729112409525461e+00, -4.729112409525461e+00, -1.516332939849939e+00, -1.534710485702465e+00, -1.505546085737960e+00, -1.522357452618091e+00, -1.531242074627436e+00, -1.531242074627436e+00, -4.445319557203248e-01, -4.908980967856029e-01, -3.990862839800616e-01, -4.182148273856101e-01, -4.577054938703698e-01, -4.577054938703699e-01, 4.298263982583549e-02, -1.206390733345760e-01, 4.583747898077790e-02, -1.205256928639640e+00, 3.278246079355413e-04, 3.278246079356593e-04, 2.415082428686777e-03, 3.032713105656014e-03, 2.348331193570324e-03, 4.153130181174257e-02, 2.923884497066357e-03, 2.923884497066371e-03, -3.523713115617407e-01, -4.009182858629118e-01, -3.840951222774406e-01, -3.694988071266784e-01, -3.768145757573904e-01, -3.768145757573903e-01, -3.350007870658810e-01, -3.800705108528531e-01, -3.943650019771406e-01, -4.187412075118479e-01, -4.077369320263102e-01, -4.077369320263101e-01, -5.132544956298457e-01, -2.154120483168264e-01, -2.737427757286800e-01, -2.913144934070468e-01, -2.918086832909360e-01, -2.918086832909360e-01, -3.566913468454426e-01, 2.436543028258321e-02, 3.334147310900887e-02, -2.658496536200396e-01, 4.165996780478617e-02, 4.165996780478651e-02, 7.203167474621334e-03, 8.347246569924876e-04, 1.734210202850851e-03, 4.083208343286360e-02, 2.693784690176043e-03, 2.693784690176068e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_mn12_sx_BrOH_cation_2_vrho():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_mn12_sx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [-7.477593821061936e+00, -7.470191668885379e+00, -7.475921002268970e+00, -7.468977532568005e+00, -7.471796480952920e+00, -7.462719922859955e+00, -7.490581917415326e+00, -7.486706877124794e+00, -7.476506283523412e+00, -7.478030965470713e+00, -7.476506283523412e+00, -7.478030965470713e+00, -2.577355566424536e+00, -2.576096958768423e+00, -2.576782237058564e+00, -2.575554225105243e+00, -2.563928285229966e+00, -2.561212853787811e+00, -2.576620788039568e+00, -2.574918082092276e+00, -2.578472209902378e+00, -2.563801138926344e+00, -2.578472209902378e+00, -2.563801138926344e+00, -7.525237242226415e-01, -7.559118663094763e-01, -7.505215244306126e-01, -7.557211232707258e-01, -7.300057615531701e-01, -7.202749208561959e-01, -7.163210322425173e-01, -7.145194546966971e-01, -7.746461660870010e-01, -7.251537248440831e-01, -7.746461660870010e-01, -7.251537248440831e-01, -3.347446594271860e-01, -3.096185482113799e-01, -3.189524951659302e-01, -2.871006389890837e-01, -8.265345570802362e-01, -1.099583190475814e+00, -2.563329644967427e-01, -2.901003551182651e-01, -3.387858524433922e-01, -6.973765491182174e-03, -3.387858524433937e-01, -6.973765491181109e-03, 6.757787629563819e-03, 7.162012632666041e-03, 7.074969098746524e-03, 7.558392994215116e-03, 4.598023289425728e-02, 4.918813090932826e-02, 4.145823616278562e-03, 4.078321205713459e-03, 6.058165865748843e-03, 3.540094276747196e-03, 6.058165865748762e-03, 3.540094276747719e-03, 1.755321787583680e+00, 1.754323804802358e+00, 1.876942257668584e+00, 1.871842596417394e+00, 1.763427529725456e+00, 1.759339721758324e+00, 1.867723096451450e+00, 1.866037599664123e+00, 1.816476924045200e+00, 1.813078912427877e+00, 1.816476924045200e+00, 1.813078912427877e+00, -2.149178957978573e+00, -2.149167640988123e+00, -2.152589268201376e+00, -2.153348949095468e+00, -2.188383234752603e+00, -2.175939388916189e+00, -2.186457921176549e+00, -2.176757563459550e+00, -2.125777756497436e+00, -2.146643511559428e+00, -2.125777756497436e+00, -2.146643511559428e+00, -6.429649362714093e-01, -6.452673385763106e-01, -5.899389805515871e-01, -5.711594479353400e-01, -4.816050047913072e-01, -5.396737876788988e-01, -6.256240529091815e-01, -6.494606215233719e-01, -7.062339905214431e-01, -6.436009702382913e-01, -7.062339905214432e-01, -6.436009702382911e-01, 1.194741028001484e-02, 6.973341028675137e-03, -4.173098728121394e-01, -4.180825174971787e-01, 4.761917879086136e-02, 2.464043778435172e-02, -1.326001774332436e+00, -1.325535635382560e+00, -1.102646095208109e-01, -2.072064584486001e-01, -1.102646095208115e-01, -2.072064584486017e-01, 3.146769326410559e-03, 3.264764620307406e-03, 4.000562964141774e-03, 4.057854208410075e-03, 3.039958700553695e-03, 3.219556936752861e-03, 8.099822673675736e-02, 7.634384428265231e-02, 3.097992071980172e-03, 4.212173778200254e-03, 3.097992071979976e-03, 4.212173778200086e-03, -2.776088298357443e-01, -2.734336342950137e-01, -3.320726822652691e-01, -3.269151397976652e-01, -3.050782739993183e-01, -3.002837695307867e-01, -2.889968281321469e-01, -2.847837496794714e-01, -2.962501027342485e-01, -2.917948303795841e-01, -2.962501027342484e-01, -2.917948303795830e-01, -2.925559632026504e-01, -2.907664445231359e-01, -4.114282089452166e-01, -4.192135034166762e-01, -5.632856368681006e-01, -5.701395933986866e-01, -5.631761381470941e-01, -5.630840922822956e-01, -5.953404163970243e-01, -5.979699783950184e-01, -5.953404163970241e-01, -5.979699783950183e-01, -6.981732333712335e-01, -6.756340343862932e-01, -4.301807066828587e-01, -4.273227178875834e-01, -3.102318517108166e-01, -2.976011166707037e-01, -2.159162312488571e-01, -2.189538082535961e-01, -1.943214602913037e-01, -1.924523568296787e-01, -1.943214602913050e-01, -1.924523568296782e-01, -3.214344705511756e-01, -3.317208822511578e-01, 4.320021028876269e-02, 4.375630208914605e-02, 6.521974213256239e-02, 6.764003298976486e-02, -2.367824905095409e-01, -2.393662952823092e-01, 5.393913103424986e-02, 2.153556760089449e-02, 5.393913103424244e-02, 2.153556760089159e-02, 9.564300041977218e-03, 9.915475214070877e-03, 1.109655810066062e-03, 1.112909174479042e-03, 2.229953343672470e-03, 2.368968681055796e-03, 5.357628554102905e-02, 4.372128518718032e-02, 2.948956817688994e-03, 3.869488664690425e-03, 2.948956817688865e-03, 3.869488664690050e-03]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_mn12_sx_BrOH_cation_2_vsigma():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_mn12_sx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [-2.039028274574661e-07, 0.000000000000000e+00, -2.039642937967485e-07, -2.039103499182410e-07, 0.000000000000000e+00, -2.039697469393398e-07, -2.039288877304207e-07, 0.000000000000000e+00, -2.039978574411152e-07, -2.038446675248610e-07, 0.000000000000000e+00, -2.038902821522371e-07, -2.039078218934000e-07, 0.000000000000000e+00, -2.039291660919030e-07, -2.039078218934000e-07, 0.000000000000000e+00, -2.039291660919030e-07, -2.115577466818891e-05, 0.000000000000000e+00, -2.113519647066772e-05, -2.118032418419602e-05, 0.000000000000000e+00, -2.115109363613827e-05, -2.166075573318766e-05, 0.000000000000000e+00, -2.174641322266284e-05, -2.148410170262400e-05, 0.000000000000000e+00, -2.148238033466259e-05, -2.111418873693760e-05, 0.000000000000000e+00, -2.191796821365210e-05, -2.111418873693760e-05, 0.000000000000000e+00, -2.191796821365210e-05, -2.384357748216807e-02, 0.000000000000000e+00, -2.343435530222865e-02, -2.395883375168625e-02, 0.000000000000000e+00, -2.352762739276893e-02, -2.513756673631528e-02, 0.000000000000000e+00, -2.466044895270940e-02, -2.290428720851410e-02, 0.000000000000000e+00, -2.276507300835809e-02, -2.310222906750276e-02, 0.000000000000000e+00, -1.936984177697178e-02, -2.310222906750276e-02, 0.000000000000000e+00, -1.936984177697178e-02, -2.361544348394579e+00, 0.000000000000000e+00, -2.591679355647269e+00, -2.621462714959760e+00, 0.000000000000000e+00, -2.813513546487364e+00, -2.491990478754674e-02, 0.000000000000000e+00, -2.029728791390752e-02, -8.646876028386073e-02, 0.000000000000000e+00, -2.397050502484367e-01, -2.062203687497764e+00, 0.000000000000000e+00, -3.092573432309363e+00, -2.062203687497746e+00, 0.000000000000000e+00, -3.092573432309578e+00, -6.438569690418963e+01, 0.000000000000000e+00, -6.368745690208149e+01, -6.777819337011982e+01, 0.000000000000000e+00, -6.735553126355961e+01, -3.075379964711174e+01, 0.000000000000000e+00, -3.008126591323632e+01, -5.922005387120252e+01, 0.000000000000000e+00, -5.761793727880808e+01, -6.436603339558054e+01, 0.000000000000000e+00, -1.636262989828394e+02, -6.436603339572092e+01, 0.000000000000000e+00, -1.636262989844795e+02, -7.666285285363311e-05, 0.000000000000000e+00, -7.673260254524885e-05, -7.727329311757857e-05, 0.000000000000000e+00, -7.732310524047609e-05, -7.670419291685724e-05, 0.000000000000000e+00, -7.675828209475058e-05, -7.722761458266500e-05, 0.000000000000000e+00, -7.729435701199802e-05, -7.696933966464309e-05, 0.000000000000000e+00, -7.702776450693830e-05, -7.696933966464309e-05, 0.000000000000000e+00, -7.702776450693830e-05, -6.209539296980353e-05, 0.000000000000000e+00, -6.256080320432855e-05, -6.914270073958315e-05, 0.000000000000000e+00, -6.954956254494085e-05, -4.975651516865657e-05, 0.000000000000000e+00, -5.363906006197623e-05, -5.485454204430897e-05, 0.000000000000000e+00, -5.913315175471768e-05, -7.596795584000128e-05, 0.000000000000000e+00, -6.755680746310288e-05, -7.596795584000128e-05, 0.000000000000000e+00, -6.755680746310288e-05, -1.423403169532267e-02, 0.000000000000000e+00, -1.388150847968954e-02, -3.152658147752092e-02, 0.000000000000000e+00, -3.396890238923819e-02, -3.708435077651084e-02, 0.000000000000000e+00, -2.390319828183720e-02, -1.414274010474889e-02, 0.000000000000000e+00, -1.313855737693657e-02, -1.343235062246512e-02, 0.000000000000000e+00, -1.402773334412453e-02, -1.343235062246509e-02, 0.000000000000000e+00, -1.402773334412459e-02, -4.778828182004423e+00, 0.000000000000000e+00, -4.538471242343671e+00, -3.723203504991802e-01, 0.000000000000000e+00, -3.805126044611161e-01, -7.271883237734969e+00, 0.000000000000000e+00, -5.864002706739090e+00, -1.053722710899969e-03, 0.000000000000000e+00, -1.056926726650409e-03, -1.745823201332548e+00, 0.000000000000000e+00, -6.515499302519343e-01, -1.745823201332548e+00, 0.000000000000000e+00, -6.515499302519053e-01, -8.317258547489629e+01, 0.000000000000000e+00, -7.199268224988560e+01, -7.157702920377031e+01, 0.000000000000000e+00, -6.608992199403455e+01, -4.070588615997342e+02, 0.000000000000000e+00, -4.525356626165801e+02, -2.144228575028405e+01, 0.000000000000000e+00, -2.069530618094500e+01, -2.026655141727109e+02, 0.000000000000000e+00, -1.986513048372338e+02, -2.026655141705726e+02, 0.000000000000000e+00, -1.986513048368157e+02, -2.662071853348293e-01, 0.000000000000000e+00, -2.687904127984758e-01, -1.412612279448069e-01, 0.000000000000000e+00, -1.443823857775495e-01, -1.768268891276251e-01, 0.000000000000000e+00, -1.801856621462948e-01, -2.129397737413247e-01, 0.000000000000000e+00, -2.155663935180163e-01, -1.940694555079630e-01, 0.000000000000000e+00, -1.970957483288891e-01, -1.940694555079630e-01, 0.000000000000000e+00, -1.970957483288890e-01, -2.630681516625998e-01, 0.000000000000000e+00, -2.667491126496559e-01, -1.946324130920618e-02, 0.000000000000000e+00, -1.822958044245577e-02, 2.540813949972555e-03, 0.000000000000000e+00, 2.771473302252939e-03, -9.182542847622896e-03, 0.000000000000000e+00, -1.048567430867297e-02, 3.974761625445468e-03, 0.000000000000000e+00, 3.357112919784200e-03, 3.974761625445440e-03, 0.000000000000000e+00, 3.357112919784174e-03, -2.214569263412049e-02, 0.000000000000000e+00, -2.468819862280574e-02, -6.154385267978981e-01, 0.000000000000000e+00, -6.241486958748085e-01, -6.925625143355690e-01, 0.000000000000000e+00, -6.961595021368993e-01, -3.331527061524084e-01, 0.000000000000000e+00, -3.255149823405516e-01, -5.653631137513809e-01, 0.000000000000000e+00, -5.687055042795139e-01, -5.653631137513810e-01, 0.000000000000000e+00, -5.687055042795147e-01, -6.585546285885126e-02, 0.000000000000000e+00, -5.829911563441487e-02, -2.862505820903115e+01, 0.000000000000000e+00, -2.857868217299831e+01, -2.376805990963502e+01, 0.000000000000000e+00, -2.349330330112850e+01, -3.319221033657153e-01, 0.000000000000000e+00, -1.795012131064863e-01, -1.292357454652439e+01, 0.000000000000000e+00, -1.067170366276438e+01, -1.292357454652394e+01, 0.000000000000000e+00, -1.067170366276442e+01, -5.076583365215627e+01, 0.000000000000000e+00, -5.176855745703124e+01, -2.560226789736502e+02, 0.000000000000000e+00, -4.534474177701936e+02, -1.579544029662562e+02, 0.000000000000000e+00, -1.681274534421304e+02, -1.504809891885445e+01, 0.000000000000000e+00, -1.418558552705301e+01, -4.174419694966302e+02, 0.000000000000000e+00, -2.063525683806359e+02, -4.174419694965197e+02, 0.000000000000000e+00, -2.063525683806075e+02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_mn12_sx_BrOH_cation_2_vlapl():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_mn12_sx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_mn12_sx_BrOH_cation_2_vtau():
    # Prepare the input
    inp = test_data["BrOH_cation"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_mn12_sx", 2)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [1.148645832233717e-02, 1.148965516179001e-02, 1.148628297676117e-02, 1.148952716367321e-02, 1.148635660651295e-02, 1.148945266876520e-02, 1.148834939826062e-02, 1.149199499381416e-02, 1.148633394131179e-02, 1.149144570525112e-02, 1.148633394131179e-02, 1.149144570525112e-02, -2.973209451767327e-03, -2.990684297699938e-03, -2.972023557703981e-03, -2.991543070150311e-03, -2.965226775788360e-03, -2.968251212696551e-03, -2.891611506134753e-03, -2.908304149778558e-03, -2.973803275930258e-03, -2.897484128374192e-03, -2.973803275930258e-03, -2.897484128374192e-03, 5.466887953312910e-02, 5.371074266392261e-02, 5.489554568455183e-02, 5.389358037032935e-02, 5.770938206781741e-02, 5.743293084912535e-02, 5.456602599040036e-02, 5.388608980348311e-02, 5.371077367508992e-02, 5.493183137553242e-02, 5.371077367508992e-02, 5.493183137553242e-02, 2.335906665581898e-01, 2.314900019327725e-01, 2.331967901596178e-01, 2.258724721674958e-01, 5.929499966730287e-02, 6.414889020906051e-02, 1.341499172957319e-01, 1.595913253777361e-01, 2.207509794836878e-01, 5.521580753945986e-02, 2.207509794836884e-01, 5.521580753945859e-02, 5.325577484993950e-05, 6.407011092780419e-05, 6.347955671396623e-05, 7.892028456488480e-05, 4.709043633331851e-03, 5.782248297544088e-03, 8.539129520000350e-06, 8.204240373650437e-06, 3.599513064455057e-05, 1.145077737052566e-05, 3.599513064455059e-05, 1.145077737051315e-05, 2.069215633689736e-02, 2.071989417165682e-02, 1.962308428073842e-02, 1.968691990132670e-02, 2.063039153427424e-02, 2.068258224742286e-02, 1.971341681152029e-02, 1.974449824473741e-02, 2.015003690994351e-02, 2.020440469797386e-02, 2.015003690994351e-02, 2.020440469797386e-02, 6.747862262820916e-03, 6.792880597575547e-03, 7.160056901805619e-03, 7.223744772159770e-03, 6.795468083417623e-03, 6.795718223739582e-03, 6.956867145247231e-03, 7.046848210985865e-03, 7.068117043662081e-03, 7.001084294371415e-03, 7.068117043662081e-03, 7.001084294371415e-03, 4.371938776319206e-02, 4.439496001883320e-02, -1.006670936279442e-02, -2.170611770662400e-02, 2.525564066045855e-02, 2.857059708010328e-02, 5.078364891882528e-02, 5.214845606334478e-02, 5.645354333469402e-02, 4.579930721795303e-02, 5.645354333469419e-02, 4.579930721795341e-02, 5.958246239842837e-02, 6.077741398144693e-02, 1.730875153248398e-01, 1.727130722369166e-01, 4.673018116335363e-02, 5.634184635660060e-02, 7.295663421883487e-03, 7.314864145958478e-03, 1.056003518090800e-01, 1.567117284690154e-01, 1.056003518090808e-01, 1.567117284690170e-01, 2.630477396217457e-06, 2.716151256944163e-06, 7.218897809361687e-06, 6.655017422777908e-06, 2.181960386115010e-05, 2.843688107764934e-05, 2.161428559757653e-02, 2.466394049822000e-02, 4.377483304303960e-06, 3.589581613345081e-05, 4.377483304319431e-06, 3.589581613326435e-05, 1.200784964039114e-01, 1.282680460800302e-01, -1.056443833689838e-01, -1.046996834151080e-01, -7.305844134388031e-02, -6.956612129910709e-02, -1.334516019803593e-02, -8.810447441036246e-03, -4.783498136178495e-02, -4.369895572524046e-02, -4.783498136178495e-02, -4.369895572524120e-02, 1.515232972398750e-02, 2.883160000735958e-02, -1.730552251251535e-02, -1.622336620096671e-02, 7.786031562164246e-03, 9.258503863178915e-03, -1.959897862514032e-02, -1.988449503424731e-02, 9.645964406417292e-03, 9.977777385049420e-03, 9.645964406417230e-03, 9.977777385049413e-03, 3.672440432994371e-02, 2.643770427294160e-02, 1.671385009447199e-01, 1.664434179085229e-01, 1.267988665444094e-01, 1.223632677436932e-01, 2.590670054148925e-02, 2.618207455837616e-02, 6.191602540165986e-02, 6.087251110462247e-02, 6.191602540166024e-02, 6.087251110462250e-02, -3.902429901565261e-03, -6.848133420085121e-03, 4.682696338152631e-03, 4.681916582888065e-03, 9.409864196304827e-03, 1.074279919487019e-02, 8.011262958565498e-03, -4.016309718927609e-02, 4.801152461723382e-02, 6.808760358634162e-02, 4.801152461723302e-02, 6.808760358634121e-02, 7.454202515048211e-05, 8.166079675514447e-05, 1.631541762989183e-07, 1.635555943776000e-07, 3.796647356769584e-06, 4.837105298817794e-06, 4.930320426205786e-02, 5.697743651056023e-02, 9.608898690621320e-06, 2.868429354096028e-05, 9.608898690607751e-06, 2.868429354104725e-05]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
