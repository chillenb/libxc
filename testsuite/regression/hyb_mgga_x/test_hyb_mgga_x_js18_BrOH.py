
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_js18_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_js18", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-2.005706333755585e+01, -2.005710529936849e+01, -2.005736713943740e+01, -2.005668073804119e+01, -2.005708481434358e+01, -2.005708481434358e+01, -3.081580122746529e+00, -3.081588554763680e+00, -3.082060200320215e+00, -3.083610198415117e+00, -3.081587512379970e+00, -3.081587512379970e+00, -6.200391612922015e-01, -6.198667257333228e-01, -6.162026898883334e-01, -6.194745838587690e-01, -6.199722424336146e-01, -6.199722424336146e-01, -1.995633350033803e-01, -2.007546681218056e-01, -7.670468856561449e-01, -1.551524745488946e-01, -1.998719310917821e-01, -1.998719310917821e-01, -2.593831131535677e-02, -2.665753385999804e-02, -6.987020635492629e-02, -1.689922577985568e-02, -2.641305056477129e-02, -2.641305056477128e-02, -4.889043234934242e+00, -4.889509960518787e+00, -4.889098432403424e+00, -4.889460997858730e+00, -4.889271938516639e+00, -4.889271938516639e+00, -1.913015815228456e+00, -1.927548036916803e+00, -1.913201439127556e+00, -1.924595713465475e+00, -1.922617704142050e+00, -1.922617704142050e+00, -5.399631623045996e-01, -5.571539289872368e-01, -5.047438819137511e-01, -5.078411989619814e-01, -5.627159495662228e-01, -5.627159495662228e-01, -1.259474978598543e-01, -2.113837437186117e-01, -1.235955259755569e-01, -1.643787218706766e+00, -1.390601058367848e-01, -1.390601058367848e-01, -1.612825463250918e-02, -1.755625877674581e-02, -1.332123609252551e-02, -8.730292176023924e-02, -1.623519228201028e-02, -1.623519228201028e-02, -5.494234548034309e-01, -5.659015781641902e-01, -5.634757826008427e-01, -5.596955587078842e-01, -5.618684883633848e-01, -5.618684883633844e-01, -5.142996264519653e-01, -4.979806167771006e-01, -5.121801861365451e-01, -5.248417014690596e-01, -5.182340481690135e-01, -5.182340481690135e-01, -5.810855912743166e-01, -2.558380277401022e-01, -2.897232068633621e-01, -3.411026230547589e-01, -3.155932278767209e-01, -3.155932278767209e-01, -4.418939906500433e-01, -6.790862456344020e-02, -8.223874094408300e-02, -3.158521486716515e-01, -1.053281625251031e-01, -1.053281625251031e-01, -2.900210774255958e-02, -8.060926310349537e-03, -1.143738261316150e-02, -1.002985399285520e-01, -1.423925945485765e-02, -1.423925945485764e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_js18_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_js18", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.515461093087843e+01, -2.515471181832231e+01, -2.515539328071005e+01, -2.515375508690114e+01, -2.515466196314120e+01, -2.515466196314120e+01, -3.755350387025354e+00, -3.755390586627414e+00, -3.756654941288982e+00, -3.755375051163730e+00, -3.755386303219300e+00, -3.755386303219300e+00, -7.103773685911280e-01, -7.096597723832200e-01, -6.927666797074081e-01, -6.970238119644934e-01, -7.101164724006463e-01, -7.101164724006463e-01, -2.013680015490339e-01, -2.038488232891575e-01, -8.257166519337424e-01, -1.620939185081989e-01, -2.020803148384660e-01, -2.020803148384660e-01, -1.473735129119227e-02, -1.536409858339259e-02, -5.644150698582372e-02, -1.781531597459354e-02, -1.512722026202397e-02, -1.512722026202398e-02, -6.328556679283961e+00, -6.331613894523152e+00, -6.329006493797461e+00, -6.331376134203341e+00, -6.329939401347128e+00, -6.329939401347128e+00, -2.109823538047713e+00, -2.136031460027770e+00, -2.106146975042686e+00, -2.127004709715336e+00, -2.132170117093798e+00, -2.132170117093798e+00, -6.452826270483620e-01, -7.246216428214890e-01, -6.104230793221990e-01, -6.574353254314509e-01, -6.751438874753529e-01, -6.751438874753529e-01, -1.186098997201119e-01, -2.018011647265915e-01, -1.166342220233237e-01, -2.165321261782070e+00, -1.291932203298222e-01, -1.291932203298222e-01, -1.245804307510252e-02, -1.631688182527747e-02, -8.982565070262630e-03, -9.085637292664622e-02, -1.722399990686460e-02, -1.722399990686462e-02, -6.867192770156700e-01, -7.068640657919941e-01, -7.000322716031038e-01, -6.933228348419522e-01, -6.967501871771234e-01, -6.967501871771233e-01, -6.703057919389961e-01, -5.842485213815524e-01, -6.185279584278044e-01, -6.456125600959471e-01, -6.319114826568997e-01, -6.319114826569000e-01, -7.583869535436588e-01, -2.537507693493413e-01, -2.997741892576369e-01, -3.816887002836541e-01, -3.386366186864213e-01, -3.386366186864214e-01, -4.993293168531387e-01, -4.962040766973323e-02, -7.092598621795092e-02, -3.664819858560640e-01, -9.536352196568337e-02, -9.536352196568351e-02, -3.000808733665982e-02, -9.649347149399702e-03, -7.060599412995885e-03, -9.183583639975687e-02, -1.544844614858689e-02, -1.544844614858687e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_js18_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_js18", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-7.376503932315003e-09, -7.376403888779019e-09, -7.374329137094805e-09, -7.375877738603063e-09, -7.376466362033285e-09, -7.376466362033285e-09, -1.044032932970058e-05, -1.044308021827176e-05, -1.052866724010681e-05, -1.055031782645585e-05, -1.044051940004705e-05, -1.044051940004705e-05, -2.395757974334991e-03, -2.400677702108405e-03, -2.627419682239511e-03, -3.111946039528108e-03, -2.398191311983170e-03, -2.398191311983170e-03, -7.981507108791579e-01, -7.913948387461878e-01, -8.745636774374195e-06, -6.417564883282010e-01, -7.965408134160350e-01, -7.965408134160350e-01, -1.405068355688346e+03, -1.239845099516699e+03, -2.038596796953142e+01, 7.102116221179995e+02, -1.302361485768930e+03, -1.302361485768929e+03, -1.055329446651221e-06, -1.046412814247424e-06, -1.052832260405078e-06, -1.045979435650404e-06, -1.052925058457253e-06, -1.052925058457253e-06, -8.675545174748257e-05, -8.343827007331566e-05, -8.494935901904830e-05, -8.223801109788766e-05, -8.700493309722859e-05, -8.700493309722859e-05, -2.377469741140989e-02, -1.758950100031708e-02, -2.203657964584686e-02, -1.624756003659773e-02, -2.356126872896510e-02, -2.356126872896510e-02, -2.090397345498221e+00, -5.284595757248935e-01, -2.314547392034642e+00, -1.060053234939137e-04, -2.020360404823456e+00, -2.020360404823456e+00, -3.952982641416000e+03, -9.802572476540511e+02, -1.250390693208490e+04, -1.996766720289057e+00, 9.459398477724228e+02, 9.459398477724395e+02, -1.913305973062441e-01, -6.548773674349959e-02, -9.424482038323598e-02, -1.293709342316076e-01, -1.101303334937682e-01, -1.101303334937674e-01, -9.934865691899405e-02, -2.140746080746820e-02, -2.364624756271842e-02, -3.386916011537306e-02, -2.763319398078892e-02, -2.763319398078914e-02, -1.101244830428175e-02, -2.690062989220157e-01, -1.793204662679777e-01, -1.132574833046332e-01, -1.452522562052136e-01, -1.452522562052140e-01, -4.519179095333661e-02, -2.825417718658753e+01, -9.806117855970435e+00, -1.673331237615638e-01, -4.769834913323168e+00, -4.769834913323155e+00, 2.351914966109078e+01, 6.985188122606602e+04, -2.668379262393071e+04, -5.549274689883656e+00, 2.412546938512718e+03, 2.412546938512691e+03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_js18_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_js18", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([7.806106815433798e-04, 7.806077288941089e-04, 7.803691174789087e-04, 7.804049654103947e-04, 7.806112287032151e-04, 7.806112287032151e-04, 2.297012748654619e-03, 2.298288850599358e-03, 2.339131576769529e-03, 2.357394589130383e-03, 2.297136646571788e-03, 2.297136646571788e-03, -3.791450228000491e-03, -3.766308457603994e-03, -2.626994316508526e-03, -1.021127896829528e-03, -3.780697215302577e-03, -3.780697215302577e-03, 4.258708238891230e-02, 4.360466599070169e-02, -8.301376659342925e-03, -3.052708704057482e-04, 4.286981603938837e-02, 4.286981603938837e-02, 1.364506508830272e-02, 1.365703196513029e-02, 1.044494305852125e-02, -4.743304778691948e-03, 1.402520766578579e-02, 1.402520766578574e-02, 1.103416136449386e-03, 1.089291851779373e-03, 1.098306313158083e-03, 1.087507078043055e-03, 1.101181405147383e-03, 1.101181405147383e-03, 6.082846780243464e-03, 5.990612314056205e-03, 5.885317432415374e-03, 5.795493621063072e-03, 6.300116139983109e-03, 6.300116139983109e-03, 3.955807697591715e-02, 2.211092223241342e-02, 2.435369983182036e-02, 1.366789287490340e-02, 4.752284496963294e-02, 4.752284496963294e-02, 1.020872745792163e-02, 2.918763341896966e-02, 1.104313612011040e-02, 2.540389412449914e-03, 2.111818330918618e-02, 2.111818330918618e-02, 9.670600826756735e-04, -2.606237631537062e-03, 4.896211819269696e-03, -7.582409989743463e-03, -5.800893530086746e-03, -5.800893530086754e-03, 3.261901922629176e-01, 1.660779595379089e-01, 2.237249963700329e-01, 2.804913152608576e-01, 2.512902993952743e-01, 2.512902993952735e-01, 8.014184099058819e-02, 2.617686241222374e-02, 3.692639977123374e-02, 6.530753417378907e-02, 4.841051880058261e-02, 4.841051880058285e-02, 1.432327624624964e-02, 3.011094234836727e-02, 3.285861539608149e-02, 3.866826412997657e-02, 3.845224812474388e-02, 3.845224812474408e-02, 3.950467997854887e-02, 1.471699716074916e-02, 8.366259938077485e-03, 4.586883643142833e-02, 1.490303504813651e-02, 1.490303504813634e-02, -7.063784068967773e-03, -4.353809611697658e-03, 4.210506291010271e-03, 1.407118346241051e-02, -6.652806802324615e-03, -6.652806802324583e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
