
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_js18_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_js18", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([-1.792357822106116e+01, -1.792362508470332e+01, -1.792386584720997e+01, -1.792309815777077e+01, -1.792360266593048e+01, -1.792360266593048e+01, -2.931284164781640e+00, -2.931277640979297e+00, -2.931190681974869e+00, -2.931455961891405e+00, -2.931296210854162e+00, -3.409963889949033e+00, -6.045332131003454e-01, -7.023738459055263e-01, -6.919845872086146e-01, -6.937402588478918e-01, -7.026229492443876e-01, -7.026229492443876e-01, -2.044701536513100e-01, -2.063000098812908e-01, -7.654606301042359e-01, -1.679603331565896e-01, -2.050307312378480e-01, -2.050307312378480e-01, -2.618339149191365e-02, -2.697389794176619e-02, -7.338823102285530e-02, -1.840474109664177e-02, -2.668543590286042e-02, -2.668543590286042e-02, -4.889650810974448e+00, -4.890105328418593e+00, -4.889696544084567e+00, -4.393069722480953e+00, -4.889884281745260e+00, -4.889884281745260e+00, -1.665624407517469e+00, -1.674776058506629e+00, -1.662103788616712e+00, -1.669090067561800e+00, -1.676511125312184e+00, -1.958629910260503e+00, -5.736580280430530e-01, -6.116273089545956e-01, -5.506678709667793e-01, -5.650519879803509e-01, -5.913407862718555e-01, -5.201459833749161e-01, -1.370159788994944e-01, -2.155631057679563e-01, -1.337873301444186e-01, -1.840622690137450e+00, -1.451799539661496e-01, -1.451799539661496e-01, -2.115599540690700e-02, -1.909311864149387e-02, -1.401364587346814e-02, -1.037250775280702e-01, -2.163303065783825e-02, -1.767630644313702e-02, -5.749351020030885e-01, -5.727742734063564e-01, -5.202098327989322e-01, -5.740968090399873e-01, -5.737950595995797e-01, -5.737950595995797e-01, -5.572502106724604e-01, -5.005752948920891e-01, -5.159548214627599e-01, -5.307489863522791e-01, -5.231316260562749e-01, -4.645984232775514e-01, -6.431147814870304e-01, -2.259962469529547e-01, -2.972346468556715e-01, -3.103104429130761e-01, -3.272365037740194e-01, -3.272365037740194e-01, -3.952380260995617e-01, -7.005275258306193e-02, -8.696051828402086e-02, -3.400030147371201e-01, -1.151018132366511e-01, -1.107696311635753e-01, -3.157602480974601e-02, -8.629444430378554e-03, -1.189089573675065e-02, -1.058040845515768e-01, -1.548457383983784e-02, -1.548457383983783e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_js18_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_js18", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([-2.410213128125502e+01, -2.410219379885041e+01, -2.410251537746407e+01, -2.410149118182106e+01, -2.410216388884234e+01, -2.410216388884234e+01, -3.811021796928757e+00, -3.811097939724321e+00, -3.813513194780614e+00, -3.812883616671833e+00, -3.811060980218927e+00, -3.836215132769187e+00, -6.801678562324538e-01, -7.178337910970715e-01, -6.973811421956633e-01, -7.026320340270448e-01, -7.183855243937524e-01, -7.183855243937524e-01, -2.045384741383133e-01, -2.068852433321009e-01, -7.971281380266707e-01, -1.492306135763229e-01, -2.054456092460272e-01, -2.054456092460272e-01, -1.643525810851831e-02, -1.698829309349102e-02, -5.350204091426516e-02, -9.459851648542907e-03, -1.680758095628400e-02, -1.680758095628403e-02, -6.239990295428263e+00, -6.340829645795246e+00, -6.338126686980624e+00, -5.896232234093646e+00, -6.241481925712891e+00, -6.241481925712891e+00, -2.107674319863890e+00, -2.131330658531508e+00, -2.097678752715837e+00, -2.116417287268151e+00, -2.136526022659917e+00, -2.159365198361322e+00, -6.736329340403648e-01, -7.578542626391342e-01, -6.292643169830444e-01, -6.836940132946587e-01, -7.077107265967417e-01, -6.932648728659898e-01, -1.346833337047249e-01, -2.023564595439727e-01, -1.314852614241701e-01, -2.218397498588237e+00, -1.275609079560067e-01, -1.275609079560067e-01, -2.115449595647063e-02, -1.149580585829703e-02, -7.264243072287182e-03, -1.028626648195696e-01, -2.163135705030276e-02, -9.125607686153439e-03, -7.673679783311034e-01, -7.444604590172419e-01, -6.914726024506304e-01, -7.512383169193635e-01, -7.619434764505177e-01, -7.619434764505177e-01, -7.409676898651776e-01, -5.829188269837817e-01, -6.230225927694508e-01, -6.629977980181707e-01, -6.422961756674348e-01, -6.203005014355523e-01, -7.852185485094109e-01, -2.388218270062177e-01, -3.061835917107240e-01, -3.913829895311800e-01, -3.475034576921682e-01, -3.508932859364856e-01, -5.132614313245667e-01, -5.023176501469214e-02, -6.556581516636262e-02, -3.803399886164844e-01, -1.134500788432181e-01, -8.721390831990988e-02, -1.971347660106698e-02, -5.088460457996744e-03, -6.055213790388263e-03, -8.726868225754271e-02, -9.291218252602009e-03, -7.969814336056267e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_js18_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_js18", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([-6.774722463779259e-09, -6.774790767466541e-09, -6.775034659082970e-09, -6.773931377219378e-09, -6.774758815851958e-09, -6.774758815851958e-09, -4.465572010197710e-06, -4.466392830251778e-06, -4.490458539559081e-06, -4.479701895242292e-06, -4.465714760376684e-06, -7.842330512002960e-06, -1.262828023136209e-03, -4.127191403552666e-03, -4.186603685909726e-03, -4.257585450640237e-03, -4.124838812714977e-03, -4.124838812714977e-03, -6.995400456496390e-01, -6.913045106758946e-01, -2.489555597843737e-04, -1.171420526899579e+00, -6.929486332848037e-01, -6.929486332848037e-01, -1.206601391542078e+03, -1.075233324975462e+03, -2.340908437774225e+01, -5.691635292291506e+03, -1.122579777681503e+03, -1.122579777681502e+03, -1.985379248536757e-06, -9.264606542232283e-07, -9.347313586606298e-07, -2.583090552462211e-06, -1.984773339204747e-06, -1.984773339204747e-06, -3.689107982785647e-05, -3.732136929859937e-05, -3.664583731212117e-05, -3.702676682672822e-05, -3.748475151405305e-05, -7.151106756280901e-05, -1.176157950648088e-02, -9.282070355187520e-03, -1.357791028793570e-02, -9.872666624843471e-03, -1.051831544492784e-02, -8.086655709973564e-03, 1.339922237042319e-01, -5.091203727180078e-01, 1.418371793284537e-01, -1.009470006587567e-04, -2.093692664787492e+00, -2.093692664787492e+00, 4.049777117640527e+02, -4.081482302590802e+03, -1.703046990698230e+04, 5.877496086089996e-01, 3.703756937585372e+02, -6.709062415795849e+03, 1.612543695947401e-02, -1.175984015124513e-02, -3.378975992087534e-02, -1.139905106203932e-02, 6.703866679114012e-03, 6.703866679114012e-03, 9.862798101980194e-03, -2.061919891004537e-02, -1.867399111454481e-02, -1.675700537583936e-02, -1.775605125142248e-02, -1.622713822018609e-02, -7.504460275489094e-03, -5.004199293627266e-02, -1.482582959393221e-01, -3.795548040678461e-02, -1.095026918581254e-01, -1.020126190652771e-01, -1.681192152336361e-02, -2.755610486443642e+01, -1.240805729650647e+01, -1.005567619033205e-01, 3.000464851892778e-01, -6.196780172309704e+00, -5.667931975271397e+02, -9.577344759824210e+04, -3.247120320957736e+04, -6.628365076240431e+00, -9.402057894195512e+03, -1.137038812992860e+04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_js18_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_js18", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([1.232506080336470e-04, 1.232533543405639e-04, 1.232651029897070e-04, 1.232204513589370e-04, 1.232520565233511e-04, 1.232520565233511e-04, -6.880160857706358e-04, -6.875331915437303e-04, -6.730011297819381e-04, -6.785696882830246e-04, -6.878787424463904e-04, 3.073800938238155e-03, -1.128535959442299e-02, 1.115877845619796e-02, 1.037198326947748e-02, 1.087792140211966e-02, 1.117393660155207e-02, 1.117393660155207e-02, 3.862228736621246e-02, 4.009187578101060e-02, -9.473624985280406e-03, 2.532691205028303e-02, 3.867237223286787e-02, 3.867237223286787e-02, 1.068485329968786e-02, 1.095430686845768e-02, 1.685648067172647e-02, 6.358707727648162e-03, 1.108300861776237e-02, 1.108300861776236e-02, 3.169818579988066e-03, 8.063724766379836e-04, 8.198986231062002e-04, 6.507896350120819e-04, 3.171911783924319e-03, 3.171911783924319e-03, -2.061551236658708e-03, -1.890587786516197e-03, -2.137265875883453e-03, -2.000327080826327e-03, -1.847715591829748e-03, 5.060790921224773e-03, 2.225863900465920e-02, 2.452581442845833e-02, 2.143058842406428e-02, 1.525438426300686e-02, 2.281063187586683e-02, 2.131518609662030e-03, -2.819151952553229e-02, 3.003983708085920e-02, -2.985070260553740e-02, 7.081990967296574e-03, 2.769516903055018e-02, 2.769516903055018e-02, -6.063890356189402e-03, 5.276732451826186e-03, 1.074442610006592e-02, -2.154179689403254e-02, -6.262370845375166e-03, 7.601253268935950e-03, -5.953642964244806e-02, 3.166011147325765e-02, 7.346571650491561e-03, 3.273782949650463e-02, -2.899981156238297e-02, -2.899981156238297e-02, -3.654699917188692e-02, 2.518833040042728e-02, 2.720114092847336e-02, 2.941199959113841e-02, 2.822922685277413e-02, 4.462654432944363e-03, 2.215726294522087e-02, -3.492360467888203e-02, 2.736043276658543e-02, -1.136469051433192e-02, 3.004814561293300e-02, 2.649947311579223e-02, -4.442401531983876e-03, 1.567117952431476e-02, 1.783485870199330e-02, 3.422010335476107e-02, -3.088991596464383e-02, 3.026993095973438e-02, 8.066282909537511e-03, 2.524525452078245e-03, 6.831842900680775e-03, 2.596583176618687e-02, 5.638071845865286e-03, 7.905155947623872e-03])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
