
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_m06_hf_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06_hf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = [3.999823800345915e+00, 3.999872882383090e+00, 4.000124862601586e+00, 3.999327316599163e+00, 3.999849327546317e+00, 3.999849327546317e+00, -2.819932482160129e-01, -2.818916136434887e-01, -2.787440028477419e-01, -2.795883656307431e-01, -2.819690391981915e-01, -2.819690391981915e-01, -1.625591743953687e-01, -1.642338967589078e-01, -2.102948068264977e-01, -1.914075773324731e-01, -1.631381507483535e-01, -1.631381507483535e-01, -6.883725203782870e-02, -6.371131134245131e-02, -3.080113410498561e-01, -1.083592033434360e-01, -6.735935224544465e-02, -6.735935224544465e-02, 2.883629069241976e-02, 3.005595182164234e-02, 6.829528755453819e-02, 1.448520680958382e-02, 2.973933156358249e-02, 2.973933156358172e-02, 1.425024911982867e+00, 1.439769249238344e+00, 1.426661990677699e+00, 1.438117060358486e+00, 1.432382376852153e+00, 1.432382376852153e+00, -1.607078722364993e-01, -1.550363674706519e-01, -1.624505933765665e-01, -1.575503943918631e-01, -1.550883680737038e-01, -1.550883680737038e-01, 3.660472880562756e-02, 9.908860101764148e-02, -2.106472283837994e-02, 5.771187236896302e-02, 7.883479290274152e-02, 7.883479290274152e-02, -4.301633666111116e-02, -1.343404929202525e-01, -4.857120870244785e-02, 2.129614907441712e-01, -9.824135652993224e-02, -9.824135652993224e-02, 1.395601068521076e-02, 1.592777713531921e-02, 1.192189490201138e-02, 5.793156698684482e-02, 1.452552299513943e-02, 1.452552299513945e-02, -1.809066050993587e-02, 1.790480857761535e-01, 1.184038835927231e-01, 5.721418422121154e-02, 8.880041406699679e-02, 8.880041406699679e-02, 5.192388646540012e-02, 2.613841462235950e-02, 8.787670724367382e-02, 1.075942003757921e-01, 9.578093455906184e-02, 9.578093455906184e-02, 9.553192026050365e-02, -1.065538906700179e-01, -6.447866645166181e-02, -3.066251503329804e-02, -3.431087371275017e-02, -3.431087371275016e-02, -2.659568935445721e-02, 7.119051379878311e-02, 6.077089576933148e-02, -2.332367255974663e-02, -2.093448610534819e-02, -2.093448610534988e-02, 3.413281818026289e-02, 4.398740967023080e-03, 8.329744202392509e-03, -1.925198540221925e-02, 1.236021578060850e-02, 1.236021578060825e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_m06_hf_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06_hf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = [6.866210320522931e+00, 6.866899231057716e+00, 6.869909058565060e+00, 6.858704290525407e+00, 6.866573282318211e+00, 6.866573282318211e+00, 2.617847353903617e-01, 2.629593162813201e-01, 2.989437973898489e-01, 2.855807107635610e-01, 2.621075149126642e-01, 2.621075149126642e-01, 3.074194575633477e-01, 3.082644164223435e-01, 3.040284647868705e-01, 3.284409174611647e-01, 3.077367822398032e-01, 3.077367822398032e-01, 1.233230076469029e-01, 1.263319438035392e-01, 6.535689383564913e-02, -1.412884545982842e-01, 1.242458425816620e-01, 1.242458425816620e-01, 3.609357931993484e-02, 3.738996596986283e-02, 1.604103793992000e-02, 1.916975022524056e-02, 3.698981545120032e-02, 3.698981545118030e-02, 4.799271637763407e+00, 4.836481343962920e+00, 4.803504805229095e+00, 4.832418975871869e+00, 4.818263859978225e+00, 4.818263859978225e+00, -4.945487748525289e-03, -2.482545479185142e-02, 1.681857444127817e-02, -1.105532425357625e-02, -3.023556179293101e-02, -3.023556179293101e-02, 4.187915585521977e-01, 2.054965109028961e-01, 2.383285093077258e-01, 3.519375599818773e-01, 3.420998619294445e-01, 3.420998619294445e-01, -2.136181689113554e-01, 4.578744703321506e-02, -2.073634038929376e-01, 1.034747566511740e+00, -1.579556115158419e-01, -1.579556115158419e-01, 1.843924215650826e-02, 2.101453953339241e-02, 1.570150839332150e-02, -4.945882591066986e-02, 1.918601479700062e-02, 1.918601479699559e-02, -2.825439848946791e-01, -2.049963830059708e-01, -4.042630482786073e-01, -4.518300654457161e-01, -4.436334862168673e-01, -4.436334862168673e-01, -4.320204275880329e-01, 3.626060462679033e-01, 2.138532153917199e-01, 2.822215913260489e-01, 1.312512907093661e-01, 1.312512907093661e-01, 1.949166723080975e-01, 1.475979085223207e-01, 1.755945258272243e-01, -1.220594388638047e-02, 6.283929942376795e-02, 6.283929942376804e-02, 9.111754956655882e-02, 3.249027411135782e-02, -3.106574934702162e-02, 4.611168080446772e-02, -1.776827905912253e-01, -1.776827905912169e-01, 4.334020698642326e-02, 5.860528801515275e-03, 1.105740766402187e-02, -1.686565683880782e-01, 1.634909431778256e-02, 1.634909431778030e-02]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m06_hf_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06_hf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = [5.673112436592223e-09, 5.673119560763862e-09, 5.673079270835992e-09, 5.672968644825612e-09, 5.673116738962964e-09, 5.673116738962964e-09, 2.903441353360311e-06, 2.904513304540744e-06, 2.936280990409497e-06, 2.919864066638116e-06, 2.903703789919078e-06, 2.903703789919078e-06, -1.278711939913431e-03, -1.316042045747175e-03, -2.311445588807273e-03, -1.837560191968361e-03, -1.291691967951475e-03, -1.291691967951475e-03, -3.011111869064764e-01, -2.583200504302499e-01, -2.042397579823321e-03, -2.004908166782702e+00, -2.886835536655318e-01, -2.886835536655318e-01, -2.443767385159338e+01, -2.448082802846080e+01, -8.959694300055013e+00, -1.752203970279052e+01, -2.542640668389389e+01, -2.542640668389412e+01, 1.956037971897330e-06, 1.964019591748333e-06, 1.956909437099972e-06, 1.963111005005940e-06, 1.960045641278588e-06, 1.960045641278588e-06, 1.497194997083607e-05, 1.605288645495459e-05, 1.426801799919630e-05, 1.517709676880846e-05, 1.657552977017148e-05, 1.657552977017148e-05, 7.215149766521088e-03, 8.166061100801114e-03, 6.261504826391237e-03, 9.580044617257900e-03, 7.564591447191403e-03, 7.564591447191403e-03, -3.392446975627975e+00, -4.763129714158744e-01, -3.800788736554601e+00, 8.218620894207273e-05, -2.897995741187976e+00, -2.897995741187976e+00, -1.869668993741825e+01, -1.870060071826175e+01, -5.350721581712205e+01, -7.618694592254036e+00, -2.748085688196271e+01, -2.748085688196268e+01, 9.202428977700430e-03, 1.338516937727076e-02, 1.212811191121607e-02, 1.081744740277655e-02, 1.149672372647862e-02, 1.149672372647862e-02, 1.235091264453727e-02, 1.050413985246784e-02, 1.342462908277240e-02, 1.425587100422256e-02, 1.383527437698972e-02, 1.383527437698972e-02, 6.377317249088390e-03, -1.380492408086122e-01, -2.826691190801232e-02, 1.759498061935784e-02, 1.064974229616826e-02, 1.064974229616823e-02, 9.919779997424499e-03, -7.819921767614427e+00, -7.092398655606829e+00, 3.533543955429257e-02, -6.222401265888553e+00, -6.222401265888590e+00, -1.833778767115349e+01, -3.162793341018415e+01, -2.770282080717082e+01, -7.610115252327546e+00, -4.008754431814875e+01, -4.008754431814894e+01]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m06_hf_BrOH_1_vlapl():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06_hf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vlapl"].flatten()
    ref_tgt = [0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m06_hf_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06_hf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = [-2.212537753483241e-03, -2.212935901570558e-03, -2.214679950053265e-03, -2.208207599261848e-03, -2.212747448462947e-03, -2.212747448462947e-03, -6.167153534579077e-03, -6.176668191908662e-03, -6.468891777764137e-03, -6.361775805085052e-03, -6.169713984340307e-03, -6.169713984340307e-03, -4.548327931551778e-02, -4.547737791532959e-02, -4.267068703544068e-02, -4.612108592240339e-02, -4.548483183072875e-02, -4.548483183072875e-02, -1.862366155408845e-01, -1.920963045572009e-01, -1.610842019889022e-02, 7.758742414473460e-02, -1.879222694262771e-01, -1.879222694262771e-01, 3.406345748935825e-03, 3.875801190327833e-03, 6.976019980810028e-02, 1.361645167340312e-04, 3.928093325914102e-03, 3.928093325925748e-03, -4.872082099402679e-02, -4.932054480764241e-02, -4.878894527400265e-02, -4.925494102891645e-02, -4.902529460363861e-02, -4.902529460363861e-02, -6.509366030087912e-03, -6.359927286813323e-03, -6.813805300660282e-03, -6.473041519121416e-03, -6.314865162411924e-03, -6.314865162411924e-03, -1.771179593977208e-01, -6.312425374322862e-02, -1.098866927524145e-01, -1.509363945077876e-01, -1.384974913830506e-01, -1.384974913830506e-01, 1.571444668014078e-01, -6.829303943475386e-02, 1.609968673691474e-01, -3.868717871619001e-02, 1.082680684339221e-01, 1.082680684339221e-01, 1.864625501055227e-04, 2.301670126167120e-04, 3.806727477383378e-04, 1.078933831504720e-01, 2.144277112896846e-04, 2.144277112876183e-04, 1.141857495931325e+00, 9.632813032766420e-01, 1.518516227835706e+00, 1.724043013128909e+00, 1.663197375334087e+00, 1.663197375334087e+00, 1.768655218877055e+00, -2.035121167200050e-01, -1.118415584540474e-01, -1.894336402494871e-01, -4.928729012974122e-02, -4.928729012974115e-02, -4.495187463107225e-02, -1.292107899147807e-01, -1.405225294791843e-01, -3.009266367194784e-02, -7.461145103702563e-02, -7.461145103702586e-02, -7.707683949683471e-02, 5.487651911760984e-02, 9.770161221180514e-02, -8.508791861048826e-02, 1.821861130169982e-01, 1.821861130169881e-01, 2.149777298142041e-03, 5.228407230651901e-06, 7.057132352538237e-05, 1.906441192388697e-01, 1.850945450257154e-04, 1.850945450319432e-04]
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
