
import pylibxc
import pytest
import numpy
from pylibxc.example_densities import test_data


def test_hyb_mgga_x_m06_hf_BrOH_1_zk():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06_hf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["zk"].flatten()
    ref_tgt = numpy.asarray([3.102162073748417e+00, 3.102223846414651e+00, 3.102500074873840e+00, 3.101494643834257e+00, 3.102194573157696e+00, 3.102194573157696e+00, -3.562877054135777e-01, -3.562009468094430e-01, -3.535333023148265e-01, -3.546109750107742e-01, -3.562653315498499e-01, -2.049013079185146e-01, -1.463748632069983e-01, -1.863221088624339e-01, -2.448266611275154e-01, -2.177782275992522e-01, -1.848789043723043e-01, -1.848789043723043e-01, -7.075823737492380e-02, -6.560628698852058e-02, -2.636684122136956e-01, -1.283132484436246e-01, -6.930449971693872e-02, -6.930449971693872e-02, 2.883218455451447e-02, 3.004999720177591e-02, 6.715563100879206e-02, 1.447924473978771e-02, 2.973422782726764e-02, 2.973422782726687e-02, 1.426218462994053e+00, 1.440954433018562e+00, 1.427839553560007e+00, 1.248531901709922e+00, 1.433592044498260e+00, 1.433592044498260e+00, -2.233735000469738e-01, -2.223298240928211e-01, -2.239909677301481e-01, -2.230195237763083e-01, -2.219685060382145e-01, -1.474997798905893e-01, 4.915478324380334e-02, 1.192440319651864e-01, -8.128594098266152e-03, 8.081657612449406e-02, 9.105776795801705e-02, 5.696226482163182e-02, 5.973413953267155e-02, -1.380565917559293e-01, 5.156672624775113e-02, 2.991275293947702e-01, -1.056646504560946e-01, -1.056646504560946e-01, 7.962260864374094e-03, 1.592121593354098e-02, 1.191971807667268e-02, 1.109647805041800e-01, 8.306932892350771e-03, 1.451787151281208e-02, -1.597136279049469e-02, 1.819896932681867e-01, 1.122261648007659e-01, 5.966391961957352e-02, 9.138858250005899e-02, 9.138858250005899e-02, 5.675953831841923e-02, 2.754885088086461e-02, 9.056572332096428e-02, 1.114437085809469e-01, 9.917960627864489e-02, 7.317002218587594e-02, 1.205644247618578e-01, -7.021336724474941e-02, -6.576419110101055e-02, -3.977837898326184e-02, -3.342215963228595e-02, -3.342215963228597e-02, -4.262974323822542e-02, 7.068055845869825e-02, 5.845295070398774e-02, -1.777753223554214e-02, 6.560399073480952e-02, -2.629471398149431e-02, 3.404804546408737e-02, 4.398456163502136e-03, 8.329359551746421e-03, -2.476296366737173e-02, 1.235429994148321e-02, 1.235429994148295e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-08


def test_hyb_mgga_x_m06_hf_BrOH_1_vrho():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06_hf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vrho"].flatten()
    ref_tgt = numpy.asarray([7.487353966426640e+00, 7.488014780696696e+00, 7.490918235717922e+00, 7.480171018905276e+00, 7.487701977053060e+00, 7.487701977053060e+00, 1.569118724488526e-01, 1.580813197068074e-01, 1.938292123127713e-01, 1.798717510618271e-01, 1.572371274274177e-01, 4.173615948599721e-01, 1.592520980571669e-01, 4.812466101970768e-01, 4.707198403618506e-01, 4.816418869006464e-01, 4.805574675015450e-01, 4.805574675015450e-01, 1.315374171975009e-01, 1.356475237607148e-01, -1.061877277725365e-01, -1.538258798621337e-01, 1.328963023499527e-01, 1.328963023499527e-01, 3.607712149472399e-02, 3.736614617085476e-02, 1.223978213023643e-02, 1.914594424070037e-02, 3.696939618444696e-02, 3.696939618442693e-02, 4.799015226763101e+00, 4.836223298169411e+00, 4.803251498080170e+00, 4.897480525587457e+00, 4.818002302745636e+00, 4.818002302745636e+00, -1.849617898371948e-01, -1.893047620652328e-01, -1.758619444922446e-01, -1.892122824539516e-01, -1.864333510852132e-01, -4.759511003717655e-03, 4.327868485277728e-01, 1.926726326538156e-01, 2.615540759943886e-01, 3.599558625445851e-01, 3.456301613337185e-01, 3.419532143316015e-01, -1.523505290249370e-01, 4.973252608949142e-02, -1.559449211609739e-01, 1.041788622672040e+00, -1.653642197855485e-01, -1.653642197855485e-01, 1.088320091776970e-02, 2.098822262464336e-02, 1.569270121139105e-02, 5.132858048377707e-02, 1.137888943743197e-02, 1.915549692954490e-02, -2.865291740217376e-01, -2.105333357866110e-01, -3.901578476782602e-01, -4.575120465487347e-01, -4.495984139126081e-01, -4.495984139126081e-01, -4.433146821505799e-01, 3.647607418523649e-01, 2.136902718031576e-01, 2.806734197644416e-01, 1.295108346067834e-01, 1.476233089895400e-01, 1.817089860537609e-01, 2.506345005272879e-03, 1.878388790163385e-01, -3.401982933365215e-02, 7.464633283371129e-02, 7.464633283371139e-02, 6.669933177897999e-02, 3.072114819297837e-02, -3.817986954289920e-02, 5.746356235029333e-02, -1.058099381377069e-01, -1.890009286906623e-01, 4.300652365510608e-02, 5.859399475535884e-03, 1.105584480026171e-02, -1.802734170512246e-01, 1.632551727951122e-02, 1.632551727950896e-02])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m06_hf_BrOH_1_vsigma():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06_hf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vsigma"].flatten()
    ref_tgt = numpy.asarray([6.469198304075535e-09, 6.469184896472926e-09, 6.469074296032943e-09, 6.469300142131458e-09, 6.469191592473903e-09, 6.469191592473903e-09, 3.445953091385421e-06, 3.447132984843514e-06, 3.482302421525102e-06, 3.467535580792485e-06, 3.446215011942277e-06, 2.291537754388437e-06, -1.723697395350205e-03, -1.057348617797921e-03, -1.748966871781629e-03, -1.460736953310514e-03, -1.040707530768356e-03, -1.040707530768356e-03, -2.875338647496724e-01, -2.465506718892627e-01, -2.564002558551710e-03, -1.390386299916550e+00, -2.753986969886646e-01, -2.753986969886646e-01, -2.344643614589824e+01, -2.323342364664304e+01, -6.991389716167482e+00, -8.420888108022529e+00, -2.429968502349991e+01, -2.429968502350012e+01, 1.954801239685271e-06, 1.962792104336408e-06, 1.955689330294682e-06, 2.161585026949754e-06, 1.958792510155588e-06, 1.958792510155588e-06, 2.382034518988642e-05, 2.512204157335008e-05, 2.316286414079932e-05, 2.428634569094219e-05, 2.547375308533215e-05, 1.540237540688370e-05, 6.477266252606671e-03, 7.371119548053444e-03, 5.264480973616171e-03, 8.141837448486249e-03, 6.967511253796518e-03, 8.643754381180103e-03, -2.482958869012285e+01, -4.493430745925397e-01, -2.677903058758503e+01, 6.921335062198242e-05, -2.447227464722993e+00, -2.447227464722993e+00, 6.079913593042339e+06, -1.061945531032821e+01, -4.172481235472515e+01, -4.111435837141661e+01, 5.166459596645840e+06, -1.308751339630625e+01, 9.097519556147104e-03, 1.322745296729446e-02, 1.245401710852565e-02, 1.069163053156174e-02, 1.136216429250712e-02, 1.136216429250712e-02, 1.206120411838245e-02, 1.033386168056424e-02, 1.316357607986899e-02, 1.394506459249288e-02, 1.353447796218153e-02, 1.585988027100848e-02, 5.600139478676620e-03, -2.925799594351958e-01, -2.799681752954399e-02, 2.423020864722913e-02, 8.390687032631973e-03, 8.390687032631962e-03, 1.309296539561739e-02, -6.749171778769387e+00, -5.322483000116653e+00, 2.972760505599249e-02, -5.252620711570812e+01, -4.952670224027167e+00, -9.179051784313071e+00, -1.177680497589734e+01, -2.312691561162091e+01, -5.954342456884281e+00, -1.840487809489534e+01, -1.840487809489546e+01])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05


def test_hyb_mgga_x_m06_hf_BrOH_1_vtau():
    # Prepare the input
    inp = test_data["BrOH"]

    # Get the functional
    feval = pylibxc.LibXCFunctional("hyb_mgga_x_m06_hf", 1)

    # Evaluate the data
    out = feval.compute(inp, do_exc=True, do_vxc=True, do_fxc=False, do_kxc=False, do_lxc=False)
    tgt = out["vtau"].flatten()
    ref_tgt = numpy.asarray([-1.964807029497421e-03, -1.965189651174138e-03, -1.966858224222255e-03, -1.960637781800521e-03, -1.965008617581898e-03, -1.965008617581898e-03, -4.757650110534386e-03, -4.766662283961394e-03, -5.042951792427987e-03, -4.934337253198927e-03, -4.760128016849595e-03, -7.646020914453568e-03, -3.313014750472309e-02, -6.003033926632217e-02, -5.551426638367561e-02, -5.846257404268060e-02, -6.006164294922066e-02, -6.006164294922066e-02, -1.941664192980250e-01, -2.011735518168957e-01, -1.067371390221744e-02, 7.129845168380007e-02, -1.962895816940058e-01, -1.962895816940058e-01, 3.405766943216592e-03, 3.874985240873292e-03, 6.977847865585672e-02, 1.361360242353827e-04, 3.927372352004287e-03, 3.927372352015933e-03, -4.873563973628304e-02, -4.933535248279636e-02, -4.880357618048084e-02, -4.687898327723005e-02, -4.904036209517456e-02, -4.904036209517456e-02, -2.167433978810645e-03, -2.111925497333411e-03, -2.329610222088008e-03, -2.095495230886024e-03, -2.175410638305122e-03, -6.808440928004266e-03, -1.872060752533233e-01, -6.926862105059990e-02, -1.215112068698191e-01, -1.661622335035433e-01, -1.452453005816832e-01, -1.263755160652539e-01, 1.389556058235806e-01, -7.174131251566990e-02, 1.458179406507848e-01, -4.317889153632479e-02, 1.060935705452814e-01, 1.060935705452814e-01, -2.294292396634478e-04, 2.299493689331492e-04, 3.803332492341118e-04, 5.930185951481574e-02, -2.630792002916481e-04, 2.143985133883530e-04, 1.147516195322043e+00, 9.677219295681893e-01, 1.501587694138365e+00, 1.732651394879386e+00, 1.671425368810122e+00, 1.671425368810122e+00, 1.786783846252319e+00, -2.050912017632670e-01, -1.133202830892298e-01, -1.919087415985493e-01, -5.049680821863195e-02, -4.124259590557663e-02, -5.142293438068106e-02, -5.637073055087344e-02, -1.468259952458300e-01, -1.163831245440173e-02, -8.123773802149167e-02, -8.123773802149192e-02, -5.820688684752563e-02, 5.487472389066145e-02, 9.778759325437943e-02, -9.710490466475817e-02, 1.513867084067480e-01, 1.822021933562007e-01, 2.149279232303254e-03, 5.241441093590543e-06, 7.052096176560835e-05, 1.906696979881845e-01, 1.851180919291522e-04, 1.851180919353811e-04])
    error = numpy.max(numpy.abs(tgt-ref_tgt))/(1.0+numpy.max([numpy.abs(tgt), numpy.abs(ref_tgt)]))
    assert error < 5e-05
